["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-tomcat</artifactId>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" ng-app=\"app\">\r\n    <head>\r\n        <link rel=\"stylesheet\" href=\"https://cdn.rawgit.com/angular-ui/\r\n          bower-ui-grid/master/ui-grid.min.css\">\r\n        <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/\r\n          1.5.6/angular.min.js\"></script>\r\n        <script src=\"https://cdn.rawgit.com/angular-ui/bower-ui-grid/\r\n          master/ui-grid.min.js\"></script>\r\n        <script src=\"view/app.js\"></script>\r\n    </head>\r\n    <body>\r\n        <div ng-controller=\"StudentCtrl as vm\">\r\n            <div ui-grid=\"gridOptions\" class=\"grid\" ui-grid-pagination>\r\n            </div>\r\n        </div>\r\n    </body>\r\n</html>\r\n```","```\r\nvar app = angular.module('app', ['ui.grid','ui.grid.pagination']);\r\n```","```\r\napp.controller('StudentCtrl', ['$scope','StudentService', \r\n    function ($scope, StudentService) {\r\n        var paginationOptions = {\r\n            pageNumber: 1,\r\n            pageSize: 5,\r\n        sort: null\r\n        };\r\n\r\n    StudentService.getStudents(\r\n      paginationOptions.pageNumber,\r\n      paginationOptions.pageSize).success(function(data){\r\n        $scope.gridOptions.data = data.content;\r\n        $scope.gridOptions.totalItems = data.totalElements;\r\n      });\r\n\r\n    $scope.gridOptions = {\r\n        paginationPageSizes: [5, 10, 20],\r\n        paginationPageSize: paginationOptions.pageSize,\r\n        enableColumnMenus:false,\r\n    useExternalPagination: true,\r\n        columnDefs: [\r\n           { name: 'id' },\r\n           { name: 'name' },\r\n           { name: 'gender' },\r\n           { name: 'age' }\r\n        ],\r\n        onRegisterApi: function(gridApi) {\r\n           $scope.gridApi = gridApi;\r\n           gridApi.pagination.on.paginationChanged(\r\n             $scope, \r\n             function (newPage, pageSize) {\r\n               paginationOptions.pageNumber = newPage;\r\n               paginationOptions.pageSize = pageSize;\r\n               StudentService.getStudents(newPage,pageSize)\r\n                 .success(function(data){\r\n                   $scope.gridOptions.data = data.content;\r\n                   $scope.gridOptions.totalItems = data.totalElements;\r\n                 });\r\n            });\r\n        }\r\n    };\r\n}]); \r\n```","```\r\napp.service('StudentService',['$http', function ($http) {\r\n\r\n    function getStudents(pageNumber,size) {\r\n        pageNumber = pageNumber > 0?pageNumber - 1:0;\r\n        return $http({\r\n          method: 'GET',\r\n            url: 'student/get?page='+pageNumber+'&size;='+size\r\n        });\r\n    }\r\n    return {\r\n        getStudents: getStudents\r\n    };\r\n}]);\r\n```","```\r\n@RestController\r\npublic class StudentDirectoryRestController {\r\n\r\n    @Autowired\r\n    private StudentService service;\r\n\r\n    @RequestMapping(\r\n      value = \"/student/get\", \r\n      params = { \"page\", \"size\" }, \r\n      method = RequestMethod.GET\r\n    )\r\n    public Page<Student> findPaginated(\r\n      @RequestParam(\"page\") int page, @RequestParam(\"size\") int size) {\r\n\r\n        Page<Student> resultPage = service.findPaginated(page, size);\r\n        if (page > resultPage.getTotalPages()) {\r\n            throw new MyResourceNotFoundException();\r\n        }\r\n\r\n        return resultPage;\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class StudentServiceImpl implements StudentService {\r\n\r\n    @Autowired\r\n    private StudentRepository dao;\r\n\r\n    @Override\r\n    public Page<Student> findPaginated(int page, int size) {\r\n        return dao.findAll(new PageRequest(page, size));\r\n    }\r\n} \r\n```","```\r\n@EnableJpaRepositories(\"com.baeldung.web.dao\")\r\n@ComponentScan(basePackages = { \"com.baeldung.web\" })\r\n@EntityScan(\"com.baeldung.web.entity\") \r\n@Configuration\r\npublic class PersistenceConfig {\r\n\r\n    @Bean\r\n    public JdbcTemplate getJdbcTemplate() {\r\n        return new JdbcTemplate(dataSource());\r\n    }\r\n\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();\r\n        EmbeddedDatabase db = builder\r\n          .setType(EmbeddedDatabaseType.HSQL)\r\n          .addScript(\"db/sql/data.sql\")\r\n          .build();\r\n        return db;\r\n    }\r\n} \r\n```","```\r\npublic interface StudentRepository extends JpaRepository<Student, Long> {} \r\n```","```\r\n{\r\n    \"content\":[\r\n        {\"studentId\":\"1\",\"name\":\"Bryan\",\"gender\":\"Male\",\"age\":20},\r\n        {\"studentId\":\"2\",\"name\":\"Ben\",\"gender\":\"Male\",\"age\":22},\r\n        {\"studentId\":\"3\",\"name\":\"Lisa\",\"gender\":\"Female\",\"age\":24},\r\n        {\"studentId\":\"4\",\"name\":\"Sarah\",\"gender\":\"Female\",\"age\":26},\r\n        {\"studentId\":\"5\",\"name\":\"Jay\",\"gender\":\"Male\",\"age\":20}\r\n    ],\r\n    \"last\":false,\r\n    \"totalElements\":20,\r\n    \"totalPages\":4,\r\n    \"size\":5,\r\n    \"number\":0,\r\n    \"sort\":null,\r\n    \"first\":true,\r\n    \"numberOfElements\":5\r\n} \r\n```","```\r\nio.restassured.RestAssured.*\r\nio.restassured.matcher.RestAssuredMatchers.*\r\norg.hamcrest.Matchers.*\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Application.class)\r\n@WebAppConfiguration\r\n@IntegrationTest(\"server.port:8888\") \r\n```","```\r\n@Test\r\npublic void givenRequestForStudents_whenPageIsOne_expectContainsNames() {\r\n    given().params(\"page\", \"0\", \"size\", \"2\").get(ENDPOINT)\r\n      .then()\r\n      .assertThat().body(\"content.name\", hasItems(\"Bryan\", \"Ben\"));\r\n} \r\n```","```\r\n@Test\r\npublic void givenRequestForStudents_whenResourcesAreRetrievedPaged_thenExpect200() {\r\n    given().params(\"page\", \"0\", \"size\", \"2\").get(ENDPOINT)\r\n      .then()\r\n      .statusCode(200);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRequestForStudents_whenSizeIsTwo_expectNumberOfElementsTwo() {\r\n    given().params(\"page\", \"0\", \"size\", \"2\").get(ENDPOINT)\r\n      .then()\r\n      .assertThat().body(\"numberOfElements\", equalTo(2));\r\n}\r\n```","```\r\n@Test\r\npublic void givenResourcesExist_whenFirstPageIsRetrieved_thenPageContainsResources() {\r\n    given().params(\"page\", \"0\", \"size\", \"2\").get(ENDPOINT)\r\n      .then()\r\n      .assertThat().body(\"first\", equalTo(true));\r\n} \r\n```"]