["```\r\npublic class GreetingService extends Service<Request, Response> {\r\n    @Override\r\n    public Future<Response> apply(Request request) {\r\n        String greeting = \"Hello \" + request.getParam(\"name\");\r\n        Reader<Buf> reader = Reader.fromBuf(new Buf.ByteArray(greeting.getBytes(), 0, greeting.length()));\r\n        return Future.value(Response.apply(request.version(), Status.Ok(), reader));\r\n    }\r\n}\r\n```","```\r\npublic class LogFilter extends SimpleFilter<Request, Response> {\r\n    @Override\r\n    public Future apply(Request request, Service<Request, Response> service) {\r\n        logger.info(\"Request host:\" + request.host().getOrElse(() -> \"\"));\r\n        logger.info(\"Request params:\");\r\n        request.getParams().forEach(entry -> logger.info(\"\\t\" + entry.getKey() + \" : \" + entry.getValue()));\r\n        return service.apply(request);\r\n    }\r\n} \r\n```","```\r\nService serverService = new LogFilter().andThen(new GreetingService()); \r\nHttp.serve(\":8080\", serverService);\r\n```","```\r\nService<Request, Response> clientService = new LogFilter().andThen(Http.newService(\":8080\"));\r\nRequest request = Request.apply(Method.Get(), \"/?name=John\");\r\nrequest.host(\"localhost\");\r\nFuture<Response> response = clientService.apply(request);\r\n\r\nAwait.result(response\r\n        .onSuccess(r -> {\r\n            assertEquals(\"Hello John\", r.getContentString());\r\n            return BoxedUnit.UNIT;\r\n        })\r\n        .onFailure(r -> {\r\n            throw new RuntimeException(r);\r\n        })\r\n);\r\n```"]