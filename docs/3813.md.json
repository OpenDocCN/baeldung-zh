["```\r\n<dependency> \r\n    <groupId>org.jmockit</groupId> \r\n    <artifactId>jmockit</artifactId> \r\n    <version>1.41</version>\r\n</dependency> \r\n```","```\r\npublic class AdvancedCollaborator {\r\n    int i;\r\n    private int privateField = 5;\r\n\r\n    // default constructor omitted \r\n\r\n    public AdvancedCollaborator(String string) throws Exception{\r\n        i = string.length();\r\n    }\r\n\r\n    public String methodThatCallsPrivateMethod(int i) {\r\n        return privateMethod() + i;\r\n    }\r\n    public int methodThatReturnsThePrivateField() {\r\n        return privateField;\r\n    }\r\n    private String privateMethod() {\r\n        return \"default:\";\r\n    }\r\n\r\n    class InnerAdvancedCollaborator {...}\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class AdvancedCollaboratorTest {\r\n\r\n    @Tested\r\n    private AdvancedCollaborator mock;\r\n\r\n    @Test\r\n    public void testToMockUpPrivateMethod() {\r\n        new MockUp<AdvancedCollaborator>() {\r\n            @Mock\r\n            private String privateMethod() {\r\n                return \"mocked: \";\r\n            }\r\n        };\r\n        String res = mock.methodThatCallsPrivateMethod(1);\r\n        assertEquals(\"mocked: 1\", res);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testToMockUpDifficultConstructor() throws Exception{\r\n    new MockUp<AdvancedCollaborator>() {\r\n        @Mock\r\n        public void $init(Invocation invocation, String string) {\r\n            ((AdvancedCollaborator)invocation.getInvokedInstance()).i = 1;\r\n        }\r\n    };\r\n    AdvancedCollaborator coll = new AdvancedCollaborator(null);\r\n    assertEquals(1, coll.i);\r\n}\r\n```","```\r\n@Test\r\npublic void testToCallPrivateMethodsDirectly(){\r\n    Object value = Deencapsulation.invoke(mock, \"privateMethod\");\r\n    assertEquals(\"default:\", value);\r\n}\r\n```","```\r\n@Test\r\npublic void testToSetPrivateFieldDirectly(){\r\n    Deencapsulation.setField(mock, \"privateField\", 10);\r\n    assertEquals(10, mock.methodThatReturnsThePrivateField());\r\n}\r\n```","```\r\n@Test\r\npublic void testToGetPrivateFieldDirectly(){\r\n    int value = Deencapsulation.getField(mock, \"privateField\");\r\n    assertEquals(5, value);\r\n}\r\n```","```\r\n@Test\r\npublic void testToCreateNewInstanceDirectly(){\r\n    AdvancedCollaborator coll = Deencapsulation\r\n      .newInstance(AdvancedCollaborator.class, \"foo\");\r\n    assertEquals(3, coll.i);\r\n}\r\n```","```\r\n@Test\r\npublic void testToCreateNewInnerClassInstanceDirectly(){\r\n    InnerCollaborator inner = Deencapsulation\r\n      .newInnerInstance(InnerCollaborator.class, mock);\r\n    assertNotNull(inner);\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class AdvancedCollaboratorTest<MultiMock\r\n  extends List<String> & Comparable<List<String>>> {\r\n\r\n    @Mocked\r\n    private MultiMock multiMock;\r\n\r\n    @Test\r\n    public void testOnClass() {\r\n        new Expectations() {{\r\n            multiMock.get(5); result = \"foo\";\r\n            multiMock.compareTo((List<String>) any); result = 0;\r\n        }};\r\n        assertEquals(\"foo\", multiMock.get(5));\r\n        assertEquals(0, multiMock.compareTo(new ArrayList<>()));\r\n    }\r\n\r\n    @Test\r\n    public <M extends List<String> & Comparable<List<String>>>\r\n      void testOnMethod(@Mocked M mock) {\r\n        new Expectations() {{\r\n            mock.get(5); result = \"foo\";\r\n            mock.compareTo((List<String>) any); result = 0; \r\n        }};\r\n        assertEquals(\"foo\", mock.get(5));\r\n        assertEquals(0, mock.compareTo(new ArrayList<>()));\r\n    }\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class ReusingTest {\r\n\r\n    @Injectable\r\n    private Collaborator collaborator;\r\n\r\n    @Mocked\r\n    private Model model;\r\n\r\n    @Tested\r\n    private Performer performer;\r\n\r\n    @Before\r\n    public void setup(){\r\n        new Expectations(){{\r\n           model.getInfo(); result = \"foo\"; minTimes = 0;\r\n           collaborator.collaborate(\"foo\"); result = true; minTimes = 0; \r\n        }};\r\n    }\r\n\r\n    @Test\r\n    public void testWithSetup() {\r\n        performer.perform(model);\r\n        verifyTrueCalls(1);\r\n    }\r\n\r\n    protected void verifyTrueCalls(int calls){\r\n        new Verifications(){{\r\n           collaborator.receive(true); times = calls; \r\n        }};\r\n    }\r\n\r\n    final class TrueCallsVerification extends Verifications{\r\n        public TrueCallsVerification(int calls){\r\n            collaborator.receive(true); times = calls; \r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testWithFinalClass() {\r\n        performer.perform(model);\r\n        new TrueCallsVerification(1);\r\n    }\r\n}\r\n```"]