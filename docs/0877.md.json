["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.leangen.graphql</groupId>\r\n    <artifactId>spqr</artifactId>\r\n    <version>0.11.2</version>\r\n</dependency>\r\n```","```\r\npublic class Book {\r\n    private Integer id;\r\n    private String author;\r\n    private String title;\r\n}\r\n```","```\r\npublic interface IBookService {\r\n    Book getBookWithTitle(String title);\r\n\r\n    List<Book> getAllBooks();\r\n\r\n    Book addBook(Book book);\r\n\r\n    Book updateBook(Book book);\r\n\r\n    boolean deleteBook(Book book);\r\n} \r\n```","```\r\n@Service\r\npublic class BookService implements IBookService {\r\n\r\n    Set<Book> books = new HashSet<>();\r\n\r\n    public Book getBookWithTitle(String title) {\r\n        return books.stream()\r\n            .filter(book -> book.getTitle()\r\n                .equals(title))\r\n            .findFirst()\r\n            .orElse(null);\r\n    }\r\n\r\n    public List<Book> getAllBooks() {\r\n        return books.stream()\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    public Book addBook(Book book) {\r\n        books.add(book);\r\n        return book;\r\n    }\r\n\r\n    public Book updateBook(Book book) {\r\n        books.remove(book);\r\n        books.add(book);\r\n        return book;\r\n    }\r\n\r\n    public boolean deleteBook(Book book) {\r\n        return books.remove(book);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class BookResolver {\r\n\r\n    @Autowired\r\n    IBookService bookService;\r\n\r\n    @GraphQLQuery(name = \"getBookWithTitle\")\r\n    public Book getBookWithTitle(@GraphQLArgument(name = \"title\") String title) {\r\n        return bookService.getBookWithTitle(title);\r\n    }\r\n\r\n    @GraphQLQuery(name = \"getAllBooks\", description = \"Get all books\")\r\n    public List<Book> getAllBooks() {\r\n        return bookService.getAllBooks();\r\n    }\r\n\r\n    @GraphQLMutation(name = \"addBook\")\r\n    public Book addBook(@GraphQLArgument(name = \"newBook\") Book book) {\r\n        return bookService.addBook(book);\r\n    }\r\n\r\n    @GraphQLMutation(name = \"updateBook\")\r\n    public Book updateBook(@GraphQLArgument(name = \"modifiedBook\") Book book) {\r\n        return bookService.updateBook(book);\r\n    }\r\n\r\n    @GraphQLMutation(name = \"deleteBook\")\r\n    public void deleteBook(@GraphQLArgument(name = \"book\") Book book) {\r\n        bookService.deleteBook(book);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class GraphqlController {\r\n\r\n    private final GraphQL graphQL;\r\n\r\n    @Autowired\r\n    public GraphqlController(BookResolver bookResolver) {\r\n        GraphQLSchema schema = new GraphQLSchemaGenerator()\r\n          .withBasePackages(\"com.baeldung\")\r\n          .withOperationsFromSingleton(bookResolver)\r\n          .generate();\r\n        this.graphQL = new GraphQL.Builder(schema)\r\n          .build();\r\n    }\r\n```","```\r\n@PostMapping(value = \"/graphql\")\r\n    public Map<String, Object> execute(@RequestBody Map<String, String> request, HttpServletRequest raw)\r\n      throws GraphQLException {\r\n        ExecutionResult result = graphQL.execute(request.get(\"query\"));\r\n        return result.getData();\r\n    }\r\n}\r\n```","```\r\ncurl -g \\\r\n  -X POST \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"query\":\"{getAllBooks {id author title }}\"}' \\\r\n  http://localhost:8080/graphql\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class GraphqlControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Autowired\r\n    BookService bookService;\r\n\r\n    private static final String GRAPHQL_PATH = \"/graphql\";\r\n\r\n    @Test\r\n    public void givenNoBooks_whenReadAll_thenStatusIsOk() throws Exception {\r\n\r\n        String getAllBooksQuery = \"{ getAllBooks {id author title } }\";\r\n\r\n        this.mockMvc.perform(post(GRAPHQL_PATH).content(toJSON(getAllBooksQuery))\r\n            .contentType(\r\n                MediaType.APPLICATION_JSON))\r\n            .andExpect(status().isOk())\r\n            .andExpect(jsonPath(\"$.getAllBooks\").isEmpty());\r\n    }\r\n\r\n    @Test\r\n    public void whenAddBook_thenStatusIsOk() throws Exception {\r\n\r\n        String addBookMutation = \"mutation { addBook(newBook: {id: 123, author: \\\"J.R.R. Tolkien\\\", \"\r\n            + \"title: \\\"The Lord of the Rings\\\"}) { id author title } }\";\r\n\r\n        this.mockMvc.perform(post(GRAPHQL_PATH).content(toJSON(addBookMutation))\r\n            .contentType(MediaType.APPLICATION_JSON))\r\n            .andExpect(status().isOk())\r\n            .andExpect(jsonPath(\"$.addBook.id\").value(\"123\"))\r\n            .andExpect(jsonPath(\"$.addBook.author\").value(\"J.R.R. Tolkien\"))\r\n            .andExpect(jsonPath(\"$.addBook.title\").value(\"The Lord of the Rings\"));\r\n    }\r\n\r\n    private String toJSON(String query) throws JSONException {\r\n        JSONObject jsonObject = new JSONObject();\r\n        jsonObject.put(\"query\", query);\r\n        return jsonObject.toString();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.leangen.graphql</groupId>\r\n    <artifactId>graphql-spqr-spring-boot-starter</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n@Service\r\n@GraphQLApi\r\npublic class BookService implements IBookService {\r\n\r\n    Set<Book> books = new HashSet<>();\r\n\r\n    @GraphQLQuery(name = \"getBookWithTitle\")\r\n    public Book getBookWithTitle(@GraphQLArgument(name = \"title\") String title) {\r\n        return books.stream()\r\n            .filter(book -> book.getTitle()\r\n                .equals(title))\r\n            .findFirst()\r\n            .orElse(null);\r\n    }\r\n\r\n    @GraphQLQuery(name = \"getAllBooks\", description = \"Get all books\")\r\n    public List<com.baeldung.sprq.Book> getAllBooks() {\r\n        return books.stream()\r\n            .toList();\r\n    }\r\n\r\n    @GraphQLMutation(name = \"addBook\")\r\n    public Book addBook(@GraphQLArgument(name = \"newBook\") Book book) {\r\n        books.add(book);\r\n        return book;\r\n    }\r\n\r\n    @GraphQLMutation(name = \"updateBook\")\r\n    public Book updateBook(@GraphQLArgument(name = \"modifiedBook\") Book book) {\r\n        books.remove(book);\r\n        books.add(book);\r\n        return book;\r\n    }\r\n\r\n    @GraphQLMutation(name = \"deleteBook\")\r\n    public boolean deleteBook(@GraphQLArgument(name = \"book\") Book book) {\r\n        return books.remove(book);\r\n    }\r\n}\r\n```"]