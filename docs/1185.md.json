["```\r\n<dependency>\r\n    <groupId>org.apache.shiro</groupId>\r\n    <artifactId>shiro-core</artifactId>\r\n    <version>1.4.0</version>\r\n</dependency>\r\n```","```\r\n[users]\r\nuser = password, admin\r\nuser2 = password2, editor\r\nuser3 = password3, author\r\n\r\n[roles]\r\nadmin = *\r\neditor = articles:*\r\nauthor = articles:compose,articles:save\r\n```","```\r\nIniRealm iniRealm = new IniRealm(\"classpath:shiro.ini\");\r\nSecurityManager securityManager = new DefaultSecurityManager(iniRealm);\r\n\r\nSecurityUtils.setSecurityManager(securityManager);\r\nSubject currentUser = SecurityUtils.getSubject();\r\n```","```\r\nif (!currentUser.isAuthenticated()) {               \r\n  UsernamePasswordToken token                       \r\n    = new UsernamePasswordToken(\"user\", \"password\");\r\n  token.setRememberMe(true);                        \r\n  try {                                             \r\n      currentUser.login(token);                       \r\n  } catch (UnknownAccountException uae) {           \r\n      log.error(\"Username Not Found!\", uae);        \r\n  } catch (IncorrectCredentialsException ice) {     \r\n      log.error(\"Invalid Credentials!\", ice);       \r\n  } catch (LockedAccountException lae) {            \r\n      log.error(\"Your Account is Locked!\", lae);    \r\n  } catch (AuthenticationException ae) {            \r\n      log.error(\"Unexpected Error!\", ae);           \r\n  }                                                 \r\n}\r\n```","```\r\nif (currentUser.hasRole(\"admin\")) {       \r\n    log.info(\"Welcome Admin\");              \r\n} else if(currentUser.hasRole(\"editor\")) {\r\n    log.info(\"Welcome, Editor!\");           \r\n} else if(currentUser.hasRole(\"author\")) {\r\n    log.info(\"Welcome, Author\");            \r\n} else {                                  \r\n    log.info(\"Welcome, Guest\");             \r\n}\r\n```","```\r\nif(currentUser.isPermitted(\"articles:compose\")) {            \r\n    log.info(\"You can compose an article\");                    \r\n} else {                                                     \r\n    log.info(\"You are not permitted to compose an article!\");\r\n}                                                            \r\n\r\nif(currentUser.isPermitted(\"articles:save\")) {               \r\n    log.info(\"You can save articles\");                         \r\n} else {                                                     \r\n    log.info(\"You can not save articles\");                   \r\n}                                                            \r\n\r\nif(currentUser.isPermitted(\"articles:publish\")) {            \r\n    log.info(\"You can publish articles\");                      \r\n} else {                                                     \r\n    log.info(\"You can not publish articles\");                \r\n}\r\n```","```\r\npublic class MyCustomRealm extends JdbcRealm {\r\n    //...\r\n}\r\n```","```\r\nprivate Map<String, String> credentials = new HashMap<>();\r\nprivate Map<String, Set<String>> roles = new HashMap<>();\r\nprivate Map<String, Set<String>> perm = new HashMap<>();\r\n\r\n{\r\n    credentials.put(\"user\", \"password\");\r\n    credentials.put(\"user2\", \"password2\");\r\n    credentials.put(\"user3\", \"password3\");\r\n\r\n    roles.put(\"user\", new HashSet<>(Arrays.asList(\"admin\")));\r\n    roles.put(\"user2\", new HashSet<>(Arrays.asList(\"editor\")));\r\n    roles.put(\"user3\", new HashSet<>(Arrays.asList(\"author\")));\r\n\r\n    perm.put(\"admin\", new HashSet<>(Arrays.asList(\"*\")));\r\n    perm.put(\"editor\", new HashSet<>(Arrays.asList(\"articles:*\")));\r\n    perm.put(\"author\", \r\n      new HashSet<>(Arrays.asList(\"articles:compose\", \r\n      \"articles:save\")));\r\n}\r\n```","```\r\nprotected AuthenticationInfo \r\n  doGetAuthenticationInfo(AuthenticationToken token)\r\n  throws AuthenticationException {\r\n\r\n    UsernamePasswordToken uToken = (UsernamePasswordToken) token;\r\n\r\n    if(uToken.getUsername() == null\r\n      || uToken.getUsername().isEmpty()\r\n      || !credentials.containsKey(uToken.getUsername())) {\r\n          throw new UnknownAccountException(\"username not found!\");\r\n    }\r\n\r\n    return new SimpleAuthenticationInfo(\r\n      uToken.getUsername(), \r\n      credentials.get(uToken.getUsername()), \r\n      getName()); \r\n}\r\n```","```\r\nreturn new SimpleAuthenticationInfo(\r\n  uToken.getUsername(), \r\n  credentials.get(uToken.getUsername()), \r\n  ByteSource.Util.bytes(\"salt\"), \r\n  getName()\r\n);\r\n```","```\r\nRealm realm = new MyCustomRealm();\r\nSecurityManager securityManager = new DefaultSecurityManager(realm);\r\n```","```\r\ncurrentUser.logout();\r\n```","```\r\nSession session = currentUser.getSession();                \r\nsession.setAttribute(\"key\", \"value\");                      \r\nString value = (String) session.getAttribute(\"key\");       \r\nif (value.equals(\"value\")) {                               \r\n    log.info(\"Retrieved the correct value! [\" + value + \"]\");\r\n}\r\n```","```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.1</version>\r\n</parent>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-freemarker</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.shiro</groupId>\r\n    <artifactId>shiro-spring-boot-web-starter</artifactId>\r\n    <version>${apache-shiro-core-version}</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic Realm realm() {\r\n    return new MyCustomRealm();\r\n}\r\n\r\n@Bean\r\npublic ShiroFilterChainDefinition shiroFilterChainDefinition() {\r\n    DefaultShiroFilterChainDefinition filter\r\n      = new DefaultShiroFilterChainDefinition();\r\n\r\n    filter.addPathDefinition(\"/secure\", \"authc\");\r\n    filter.addPathDefinition(\"/**\", \"anon\");\r\n\r\n    return filter;\r\n}\r\n```","```\r\nshiro.loginUrl = /login\r\nshiro.successUrl = /secure\r\nshiro.unauthorizedUrl = /login\r\n```","```\r\nSubject subject = SecurityUtils.getSubject();\r\n\r\nif(!subject.isAuthenticated()) {\r\n    UsernamePasswordToken token = new UsernamePasswordToken(\r\n      cred.getUsername(), cred.getPassword(), cred.isRememberMe());\r\n    try {\r\n        subject.login(token);\r\n    } catch (AuthenticationException ae) {\r\n        ae.printStackTrace();\r\n        attr.addFlashAttribute(\"error\", \"Invalid Credentials\");\r\n        return \"redirect:/login\";\r\n    }\r\n}\r\n\r\nreturn \"redirect:/secure\";\r\n```","```\r\nSubject currentUser = SecurityUtils.getSubject();\r\nString role = \"\", permission = \"\";\r\n\r\nif(currentUser.hasRole(\"admin\")) {\r\n    role = role  + \"You are an Admin\";\r\n} else if(currentUser.hasRole(\"editor\")) {\r\n    role = role + \"You are an Editor\";\r\n} else if(currentUser.hasRole(\"author\")) {\r\n    role = role + \"You are an Author\";\r\n}\r\n\r\nif(currentUser.isPermitted(\"articles:compose\")) {\r\n    permission = permission + \"You can compose an article, \";\r\n} else {\r\n    permission = permission + \"You are not permitted to compose an article!, \";\r\n}\r\n\r\nif(currentUser.isPermitted(\"articles:save\")) {\r\n    permission = permission + \"You can save articles, \";\r\n} else {\r\n    permission = permission + \"\\nYou can not save articles, \";\r\n}\r\n\r\nif(currentUser.isPermitted(\"articles:publish\")) {\r\n    permission = permission  + \"\\nYou can publish articles\";\r\n} else {\r\n    permission = permission + \"\\nYou can not publish articles\";\r\n}\r\n\r\nmodelMap.addAttribute(\"username\", currentUser.getPrincipal());\r\nmodelMap.addAttribute(\"permission\", permission);\r\nmodelMap.addAttribute(\"role\", role);\r\n\r\nreturn \"secure\";\r\n```"]