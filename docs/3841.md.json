["```\r\npublic class TenantScope implements Scope {\r\n    private Map<String, Object> scopedObjects\r\n      = Collections.synchronizedMap(new HashMap<String, Object>());\r\n    private Map<String, Runnable> destructionCallbacks\r\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\r\n...\r\n}\r\n```","```\r\n@Override\r\npublic Object get(String name, ObjectFactory<?> objectFactory) {\r\n    if(!scopedObjects.containsKey(name)) {\r\n        scopedObjects.put(name, objectFactory.getObject());\r\n    }\r\n    return scopedObjects.get(name);\r\n}\r\n```","```\r\n@Override\r\npublic void registerDestructionCallback(String name, Runnable callback) {\r\n    destructionCallbacks.put(name, callback);\r\n}\r\n```","```\r\n@Override\r\npublic Object remove(String name) {\r\n    destructionCallbacks.remove(name);\r\n    return scopedObjects.remove(name);\r\n}\r\n```","```\r\n@Override\r\npublic String getConversationId() {\r\n    return \"tenant\";\r\n}\r\n```","```\r\n@Override\r\npublic Object resolveContextualObject(String key) {\r\n    return null;\r\n}\r\n```","```\r\nvoid registerScope(String scopeName, Scope scope);\r\n```","```\r\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\r\n\r\n    @Override\r\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\r\n        factory.registerScope(\"tenant\", new TenantScope());\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class TenantScopeConfig {\r\n\r\n    @Bean\r\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\r\n        return new TenantBeanFactoryPostProcessor();\r\n    }\r\n}\r\n```","```\r\npublic class TenantBean {\r\n\r\n    private final String name;\r\n\r\n    public TenantBean(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public void sayHello() {\r\n        System.out.println(\r\n          String.format(\"Hello from %s of type %s\",\r\n          this.name, \r\n          this.getClass().getName()));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class TenantBeansConfig {\r\n\r\n    @Scope(scopeName = \"tenant\")\r\n    @Bean\r\n    public TenantBean foo() {\r\n        return new TenantBean(\"foo\");\r\n    }\r\n\r\n    @Scope(scopeName = \"tenant\")\r\n    @Bean\r\n    public TenantBean bar() {\r\n        return new TenantBean(\"bar\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\r\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\r\n    try{\r\n        ctx.register(TenantScopeConfig.class);\r\n        ctx.register(TenantBeansConfig.class);\r\n        ctx.refresh();\r\n\r\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\r\n        foo.sayHello();\r\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\r\n        bar.sayHello();\r\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\r\n\r\n        assertThat(foo, not(equalTo(bar)));\r\n        assertThat(foos.size(), equalTo(2));\r\n        assertTrue(foos.containsValue(foo));\r\n        assertTrue(foos.containsValue(bar));\r\n\r\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\r\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\r\n\r\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\r\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\r\n    }\r\n    finally {\r\n        ctx.close();\r\n    }\r\n}\r\n```","```\r\nHello from foo of type org.baeldung.customscope.TenantBean\r\nHello from bar of type org.baeldung.customscope.TenantBean\r\n```"]