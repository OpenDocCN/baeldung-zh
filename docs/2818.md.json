["```\r\n<dependency>\r\n    <groupId>org.springframework.kafka</groupId>\r\n    <artifactId>spring-kafka</artifactId>\r\n    <version>2.7.8</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.kafka</groupId\r\n    <artifactId>kafka-streams</artifactId>\r\n    <version>2.7.1</version>\r\n</dependency> \r\n```","```\r\n@Configuration\r\n@EnableKafka\r\n@EnableKafkaStreams\r\npublic class KafkaConfig {\r\n\r\n    @Value(value = \"${spring.kafka.bootstrap-servers}\")\r\n    private String bootstrapAddress;\r\n\r\n    @Bean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)\r\n    KafkaStreamsConfiguration kStreamsConfig() {\r\n        Map<String, Object> props = new HashMap<>();\r\n        props.put(APPLICATION_ID_CONFIG, \"streams-app\");\r\n        props.put(BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);\r\n        props.put(DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\r\n        props.put(DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\r\n\r\n        return new KafkaStreamsConfiguration(props);\r\n    }\r\n\r\n    // other config\r\n}\r\n```","```\r\n@Component\r\npublic class WordCountProcessor {\r\n\r\n    private static final Serde<String> STRING_SERDE = Serdes.String();\r\n\r\n    @Autowired\r\n    void buildPipeline(StreamsBuilder streamsBuilder) {\r\n        KStream<String, String> messageStream = streamsBuilder\r\n          .stream(\"input-topic\", Consumed.with(STRING_SERDE, STRING_SERDE));\r\n\r\n        KTable<String, Long> wordCounts = messageStream\r\n          .mapValues((ValueMapper<String, String>) String::toLowerCase)\r\n          .flatMapValues(value -> Arrays.asList(value.split(\"\\\\W+\")))\r\n          .groupBy((key, word) -> word, Grouped.with(STRING_SERDE, STRING_SERDE))\r\n          .count();\r\n\r\n        wordCounts.toStream().to(\"output-topic\");\r\n    }\r\n}\r\n```","```\r\nKTable<String, Long> wordCounts = textStream\r\n  .mapValues((ValueMapper<String, String>) String::toLowerCase)\r\n  .flatMapValues(value -> Arrays.asList(value.split(\"\\\\W+\")))\r\n  .groupBy((key, value) -> value, Grouped.with(STRING_SERDE, STRING_SERDE))\r\n  .count(Materialized.as(\"counts\"));\r\n```","```\r\n@GetMapping(\"/count/{word}\")\r\npublic Long getWordCount(@PathVariable String word) {\r\n    KafkaStreams kafkaStreams = factoryBean.getKafkaStreams();\r\n    ReadOnlyKeyValueStore<String, Long> counts = kafkaStreams.store(\r\n      StoreQueryParameters.fromNameAndType(\"counts\", QueryableStoreTypes.keyValueStore())\r\n    );\r\n    return counts.get(word);\r\n}\r\n```","```\r\n@Test\r\nvoid givenInputMessages_whenProcessed_thenWordCountIsProduced() {\r\n    StreamsBuilder streamsBuilder = new StreamsBuilder();\r\n    wordCountProcessor.buildPipeline(streamsBuilder);\r\n    Topology topology = streamsBuilder.build();\r\n\r\n    try (TopologyTestDriver topologyTestDriver = new TopologyTestDriver(topology, new Properties())) {\r\n        TestInputTopic<String, String> inputTopic = topologyTestDriver\r\n          .createInputTopic(\"input-topic\", new StringSerializer(), new StringSerializer());\r\n\r\n        TestOutputTopic<String, Long> outputTopic = topologyTestDriver\r\n          .createOutputTopic(\"output-topic\", new StringDeserializer(), new LongDeserializer());\r\n\r\n        inputTopic.pipeInput(\"key\", \"hello world\");\r\n        inputTopic.pipeInput(\"key2\", \"hello\");\r\n\r\n        assertThat(outputTopic.readKeyValuesToList())\r\n          .containsExactly(\r\n            KeyValue.pair(\"hello\", 1L),\r\n            KeyValue.pair(\"world\", 1L),\r\n            KeyValue.pair(\"hello\", 2L)\r\n          );\r\n    }\r\n}\r\n```","```\r\n@Testcontainers\r\n@SpringBootTest(classes = KafkaStreamsApplication.class, webEnvironment = WebEnvironment.RANDOM_PORT)\r\nclass KafkaStreamsApplicationLiveTest {\r\n\r\n    @Container\r\n    private static final KafkaContainer KAFKA = new KafkaContainer(\r\n      DockerImageName.parse(\"confluentinc/cp-kafka:5.4.3\"));\r\n\r\n    private final BlockingQueue<String> output = new LinkedBlockingQueue<>();\r\n\r\n    // other test setup\r\n\r\n    @Test\r\n    void givenInputMessages_whenPostToEndpoint_thenWordCountsReceivedOnOutput() throws Exception {\r\n        postMessage(\"test message\");\r\n\r\n        startOutputTopicConsumer();\r\n\r\n        // assert correct counts on output topic\r\n        assertThat(output.poll(2, MINUTES)).isEqualTo(\"test:1\");\r\n        assertThat(output.poll(2, MINUTES)).isEqualTo(\"message:1\");\r\n\r\n        // assert correct count from REST service\r\n        assertThat(getCountFromRestServiceFor(\"test\")).isEqualTo(1);\r\n        assertThat(getCountFromRestServiceFor(\"message\")).isEqualTo(1);\r\n    }\r\n}\r\n```"]