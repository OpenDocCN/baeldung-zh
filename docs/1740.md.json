["```\r\nString multilineString = \"Baeldung helps \\n \\n developers \\n explore Java.\";\r\nList<String> lines = multilineString.lines()\r\n  .filter(line -> !line.isBlank())\r\n  .map(String::strip)\r\n  .collect(Collectors.toList());\r\nassertThat(lines).containsExactly(\"Baeldung helps\", \"developers\", \"explore Java.\");\r\n```","```\r\nPath filePath = Files.writeString(Files.createTempFile(tempDir, \"demo\", \".txt\"), \"Sample text\");\r\nString fileContent = Files.readString(filePath);\r\nassertThat(fileContent).isEqualTo(\"Sample text\");\r\n```","```\r\nList sampleList = Arrays.asList(\"Java\", \"Kotlin\");\r\nString[] sampleArray = sampleList.toArray(String[]::new);\r\nassertThat(sampleArray).containsExactly(\"Java\", \"Kotlin\");\r\n```","```\r\nList<String> sampleList = Arrays.asList(\"Java\", \"\\n \\n\", \"Kotlin\", \" \");\r\nList withoutBlanks = sampleList.stream()\r\n  .filter(Predicate.not(String::isBlank))\r\n  .collect(Collectors.toList());\r\nassertThat(withoutBlanks).containsExactly(\"Java\", \"Kotlin\");\r\n```","```\r\nList<String> sampleList = Arrays.asList(\"Java\", \"Kotlin\");\r\nString resultString = sampleList.stream()\r\n  .map((@Nonnull var x) -> x.toUpperCase())\r\n  .collect(Collectors.joining(\", \"));\r\nassertThat(resultString).isEqualTo(\"JAVA, KOTLIN\");\r\n```","```\r\nHttpClient httpClient = HttpClient.newBuilder()\r\n  .version(HttpClient.Version.HTTP_2)\r\n  .connectTimeout(Duration.ofSeconds(20))\r\n  .build();\r\nHttpRequest httpRequest = HttpRequest.newBuilder()\r\n  .GET()\r\n  .uri(URI.create(\"http://localhost:\" + port))\r\n  .build();\r\nHttpResponse httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\r\nassertThat(httpResponse.body()).isEqualTo(\"Hello from the server!\");\r\n```","```\r\nassertThat(MainClass.class.isNestmateOf(MainClass.NestedClass.class)).isTrue();\r\n```","```\r\nassertThat(MainClass.NestedClass.class.getNestHost()).isEqualTo(MainClass.class);\r\n```","```\r\nSet<String> nestedMembers = Arrays.stream(MainClass.NestedClass.class.getNestMembers())\r\n  .map(Class::getName)\r\n  .collect(Collectors.toSet());\r\nassertThat(nestedMembers).contains(MainClass.class.getName(), MainClass.NestedClass.class.getName());\r\n```","```\r\n$ javac HelloWorld.java\r\n$ java HelloWorld \r\nHello Java 8!\r\n```","```\r\n$ java HelloWorld.java\r\nHello Java 11!\r\n```","```\r\n-XX:StartFlightRecording=duration=120s,settings=profile,filename=java-demo-app.jfr\r\n```"]