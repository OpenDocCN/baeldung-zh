["```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<definitions\r\n\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\"\r\n    xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\"\r\n    xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\"\r\n    xmlns:flowable=\"http://flowable.org/bpmn\"\r\n    typeLanguage=\"http://www.w3.org/2001/XMLSchema\"\r\n    expressionLanguage=\"http://www.w3.org/1999/XPath\"\r\n    targetNamespace=\"http://www.flowable.org/processdef\">\r\n    <process id=\"articleReview\"\r\n      name=\"A simple process for article review.\" isExecutable=\"true\">\r\n        <startEvent id=\"start\" />\r\n        <sequenceFlow sourceRef=\"start\" targetRef=\"reviewArticle\" />\r\n        <userTask id=\"reviewArticle\" name=\"Review the submitted tutorial\"\r\n          flowable:candidateGroups=\"editors\" />\r\n        <sequenceFlow sourceRef=\"reviewArticle\" targetRef=\"decision\" />\r\n        <exclusiveGateway id=\"decision\" />\r\n        <sequenceFlow sourceRef=\"decision\" targetRef=\"tutorialApproved\">\r\n            <conditionExpression xsi:type=\"tFormalExpression\">\r\n                <![CDATA[${approved}]]>\r\n            </conditionExpression>\r\n        </sequenceFlow>\r\n        <sequenceFlow sourceRef=\"decision\" targetRef=\"tutorialRejected\">\r\n            <conditionExpression xsi:type=\"tFormalExpression\">\r\n                <![CDATA[${!approved}]]>\r\n            </conditionExpression>\r\n        </sequenceFlow>\r\n        <serviceTask id=\"tutorialApproved\" name=\"Publish the approved tutorial.\"\r\n          flowable:class=\"com.baeldung.service.PublishArticleService\" />\r\n        <sequenceFlow sourceRef=\"tutorialApproved\" targetRef=\"end\" />\r\n        <serviceTask id=\"tutorialRejected\" name=\"Send out rejection email\"\r\n          flowable:class=\"com.baeldung.service.SendMailService\" />\r\n        <sequenceFlow sourceRef=\"tutorialRejected\" targetRef=\"end\" />\r\n        <endEvent id=\"end\" />\r\n    </process>\r\n</definitions>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.flowable</groupId>\r\n    <artifactId>flowable-spring-boot-starter</artifactId>\r\n    <version>6.4.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\npublic class PublishArticleService implements JavaDelegate {\r\n    public void execute(DelegateExecution execution) {\r\n        System.out.println(\"Publishing the approved article.\");\r\n    }\r\n}\r\n```","```\r\npublic class SendMailService implements JavaDelegate {\r\n    public void execute(DelegateExecution execution) {\r\n        System.out.println(\"Sending rejection mail to author.\");\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class ArticleWorkflowController {\r\n    @Autowired\r\n    private ArticleWorkflowService service;\r\n\r\n    @PostMapping(\"/submit\")\r\n    public void submit(@RequestBody Article article) {\r\n        service.startProcess(article);\r\n    }\r\n\r\n    @GetMapping(\"/tasks\")\r\n    public List<Article> getTasks(@RequestParam String assignee) {\r\n        return service.getTasks(assignee);\r\n    }\r\n\r\n    @PostMapping(\"/review\")\r\n    public void review(@RequestBody Approval approval) {\r\n        service.submitReview(approval);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class ArticleWorkflowService {\r\n    @Autowired\r\n    private RuntimeService runtimeService;\r\n\r\n    @Autowired\r\n    private TaskService taskService;\r\n\r\n    @Transactional\r\n    public void startProcess(Article article) {\r\n        Map<String, Object> variables = new HashMap<>();\r\n        variables.put(\"author\", article.getAuthor());\r\n        variables.put(\"url\", article.getUrl());\r\n        runtimeService.startProcessInstanceByKey(\"articleReview\", variables);\r\n    }\r\n\r\n    @Transactional\r\n    public List<Article> getTasks(String assignee) {\r\n        List<Task> tasks = taskService.createTaskQuery()\r\n          .taskCandidateGroup(assignee)\r\n          .list();\r\n        return tasks.stream()\r\n          .map(task -> {\r\n              Map<String, Object> variables = taskService.getVariables(task.getId());\r\n              return new Article(task.getId(), (String) variables.get(\"author\"), (String) variables.get(\"url\"));\r\n          })\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n    @Transactional\r\n    public void submitReview(Approval approval) {\r\n        Map<String, Object> variables = new HashMap<String, Object>();\r\n        variables.put(\"approved\", approval.isStatus());\r\n        taskService.complete(approval.getId(), variables);\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(FlowableSpringExtension.class)\r\n@ExtendWith(SpringExtension.class)\r\npublic class ArticleWorkflowUnitTest {\r\n    @Autowired\r\n    private RuntimeService runtimeService;\r\n\r\n    @Autowired\r\n    private TaskService taskService;\r\n\r\n    @Test\r\n    @Deployment(resources = { \"processes/article-workflow.bpmn20.xml\" })\r\n    void articleApprovalTest() {\r\n        Map<String, Object> variables = new HashMap<>();\r\n        variables.put(\"author\", \"[[emailÂ protected]](/web/20220630010854/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        variables.put(\"url\", \"http://baeldung.com/dummy\");\r\n\r\n        runtimeService.startProcessInstanceByKey(\"articleReview\", variables);\r\n        Task task = taskService.createTaskQuery().singleResult();\r\n\r\n        assertEquals(\"Review the submitted tutorial\", task.getName());\r\n\r\n        variables.put(\"approved\", true);\r\n        taskService.complete(task.getId(), variables);\r\n\r\n        assertEquals(0, runtimeService.createProcessInstanceQuery().count());\r\n    }\r\n}\r\n```","```\r\nHistoryService historyService = processEngine.getHistoryService();\r\nList<HistoricActivityInstance> activities = historyService\r\n  .createHistoricActivityInstanceQuery()\r\n  .processInstanceId(processInstance.getId())\r\n  .finished()\r\n  .orderByHistoricActivityInstanceEndTime()\r\n  .asc()\r\n  .list();\r\n```"]