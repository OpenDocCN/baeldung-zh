["```\r\n<dependency>\r\n    <groupId>org.springframework.restdocs</groupId>\r\n    <artifactId>spring-restdocs-mockmvc</artifactId>\r\n    <version>2.0.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Rule\r\npublic JUnitRestDocumentation restDocumentation = new JUnitRestDocumentation(\"target/generated-snippets\");\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext context;\r\n\r\nprivate MockMvc mockMvc;\r\n\r\n@Before\r\npublic void setUp(){\r\n    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.context)\r\n      .apply(documentationConfiguration(this.restDocumentation))\r\n      .build();\r\n}\r\n```","```\r\n@ExtendWith({RestDocumentationExtension.class, SpringExtension.class})\r\n@SpringBootTest\r\npublic class ApiDocumentationJUnit5IntegrationTest { //... }\r\n```","```\r\n@BeforeEach\r\npublic void setUp(WebApplicationContext webApplicationContext,\r\n  RestDocumentationContextProvider restDocumentation) {\r\n    this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\r\n      .apply(documentationConfiguration(restDocumentation)).build();\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/crud\")\r\npublic class CRUDController {\r\n\r\n    @GetMapping\r\n    public List<CrudInput> read(@RequestBody CrudInput crudInput) {\r\n        List<CrudInput> returnList = new ArrayList<CrudInput>();\r\n        returnList.add(crudInput);\r\n        return returnList;\r\n    }\r\n\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @PostMapping\r\n    public HttpHeaders save(@RequestBody CrudInput crudInput) {\r\n        HttpHeaders httpHeaders = new HttpHeaders();\r\n        httpHeaders.setLocation(\r\n          linkTo(CRUDController.class).slash(crudInput.getTitle()).toUri());\r\n        return httpHeaders;\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public void delete(@PathVariable(\"id\") long id) {\r\n        // delete\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/\")\r\npublic class IndexController {\r\n\r\n    static class CustomRepresentationModel extends RepresentationModel<CustomRepresentationModel> {\r\n        public CustomRepresentationModel(Link initialLink) {\r\n            super(initialLink);\r\n        }\r\n    }\r\n\r\n    @GetMapping\r\n    public CustomRepresentationModel index() {\r\n        return new CustomRepresentationModel(linkTo(CRUDController.class).withRel(\"crud\"));\r\n    }\r\n}\r\n```","```\r\nthis.mockMvc = MockMvcBuilders\r\n  //...\r\n  .alwaysDo(document(\"{method-name}\", \r\n    preprocessRequest(prettyPrint()), preprocessResponse(prettyPrint())))\r\n  .build();\r\n```","```\r\n@Test\r\npublic void indexExample() throws Exception {\r\n    this.mockMvc.perform(get(\"/\")).andExpect(status().isOk())\r\n      .andDo(document(\"index\", \r\n        links(linkWithRel(\"crud\").description(\"The CRUD resource\")), \r\n        responseFields(subsectionWithPath(\"_links\")\r\n          .description(\"Links to other resources\"))\r\n        responseHeaders(headerWithName(\"Content-Type\")\r\n          .description(\"The Content-Type of the payload\"))));\r\n}\r\n```","```\r\n@Test\r\npublic void crudCreateExample() throws Exception {\r\n    Map<String, Object> crud = new HashMap<>();\r\n    crud.put(\"title\", \"Sample Model\");\r\n    crud.put(\"body\", \"http://www.baeldung.com/\");\r\n\r\n    this.mockMvc.perform(post(\"/crud\").contentType(MediaTypes.HAL_JSON)\r\n      .content(this.objectMapper.writeValueAsString(crud)))\r\n      .andExpect(status().isCreated())\r\n      .andDo(document(\"create-crud-example\", \r\n        requestFields(fieldWithPath(\"id\").description(\"The id of the input\"),\r\n          fieldWithPath(\"title\").description(\"The title of the input\"),\r\n          fieldWithPath(\"body\").description(\"The body of the input\"),\r\n        ))));\r\n}\r\n```","```\r\n@Test\r\npublic void crudDeleteExample() throws Exception {\r\n    this.mockMvc.perform(delete(\"/crud/{id}\", 10)).andExpect(status().isOk())\r\n      .andDo(document(\"crud-delete-example\", \r\n      pathParameters(\r\n        parameterWithName(\"id\").description(\"The id of the input to delete\")\r\n      )));\r\n}\r\n```","```\r\n----\r\n$ curl 'http://localhost:8080/' -i\r\n----\r\n```","```\r\n[source,http,options=\"nowrap\"]\r\n----\r\nHTTP/1.1 200 OK\r\nContent-Type: application/hal+json;charset=UTF-8\r\nContent-Length: 93\r\n\r\n{\r\n  \"_links\" : {\r\n    \"crud\" : {\r\n      \"href\" : \"http://localhost:8080/crud\"\r\n    }\r\n  }\r\n}\r\n----\r\n```","```\r\n==== Links\r\n\r\ninclude::{snippets}/index-example/links.adoc[]\r\n```","```\r\n<properties>\r\n    <snippetsDirectory>${project.build.directory}/generated-snippets</snippetsDirectory>\r\n</properties>\r\n```","```\r\n<plugin> \r\n    <groupId>org.asciidoctor</groupId>\r\n    <artifactId>asciidoctor-maven-plugin</artifactId>\r\n    <version>1.5.6</version>\r\n    <executions>\r\n        <execution>\r\n            <id>generate-docs</id>\r\n            <phase>package</phase> \r\n            <goals>\r\n                <goal>process-asciidoc</goal>\r\n            </goals>\r\n            <configuration>\r\n                <backend>html</backend>\r\n                <doctype>book</doctype>\r\n                <attributes>\r\n                    <snippets>${snippetsDirectory}</snippets> \r\n                </attributes>\r\n                <sourceDirectory>src/docs/asciidocs</sourceDirectory>\r\n                <outputDirectory>target/generated-docs</outputDirectory>\r\n             </configuration>\r\n\t </execution>\r\n    </executions>\r\n</plugin>\r\n```"]