["```\r\nentityManager.find(Student.class, studentId, LockModeType.PESSIMISTIC_READ);\r\n```","```\r\nQuery query = entityManager.createQuery(\"from Student where studentId = :studentId\");\r\nquery.setParameter(\"studentId\", studentId);\r\nquery.setLockMode(LockModeType.PESSIMISTIC_WRITE);\r\nquery.getResultList()\r\n```","```\r\nStudent resultStudent = entityManager.find(Student.class, studentId);\r\nentityManager.lock(resultStudent, LockModeType.PESSIMISTIC_WRITE);\r\n```","```\r\nStudent resultStudent = entityManager.find(Student.class, studentId);\r\nentityManager.refresh(resultStudent, LockModeType.PESSIMISTIC_FORCE_INCREMENT);\r\n```","```\r\n@NamedQuery(name=\"lockStudent\",\r\n  query=\"SELECT s FROM Student s WHERE s.id LIKE :studentId\",\r\n  lockMode = PESSIMISTIC_READ)\r\n```","```\r\nMap<String, Object> properties = new HashMap<>();\r\nmap.put(\"javax.persistence.lock.scope\", PessimisticLockScope.EXTENDED);\r\n\r\nentityManager.find(\r\n  Student.class, 1L, LockModeType.PESSIMISTIC_WRITE, properties); \r\n```","```\r\n@Entity\r\n@Inheritance(strategy = InheritanceType.JOINED)\r\npublic class Person {\r\n\r\n    @Id\r\n    private Long id;\r\n    private String name;\r\n    private String lastName;\r\n\r\n    // getters and setters\r\n}\r\n\r\n@Entity\r\npublic class Employee extends Person {\r\n\r\n    private BigDecimal salary;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nSELECT t0.ID, t0.DTYPE, t0.LASTNAME, t0.NAME, t1.ID, t1.SALARY \r\nFROM PERSON t0, EMPLOYEE t1 \r\nWHERE ((t0.ID = ?) AND ((t1.ID = t0.ID) AND (t0.DTYPE = ?))) FOR UPDATE\r\n```","```\r\n@Entity\r\npublic class Customer {\r\n\r\n    @Id\r\n    private Long customerId;\r\n    private String name;\r\n    private String lastName;\r\n    @ElementCollection\r\n    @CollectionTable(name = \"customer_address\")\r\n    private List<Address> addressList;\r\n\r\n    // getters and setters\r\n}\r\n\r\n@Embeddable\r\npublic class Address {\r\n\r\n    private String country;\r\n    private String city;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nSELECT CUSTOMERID, LASTNAME, NAME \r\nFROM CUSTOMER WHERE (CUSTOMERID = ?) FOR UPDATE\r\n\r\nSELECT CITY, COUNTRY, Customer_CUSTOMERID \r\nFROM customer_address \r\nWHERE (Customer_CUSTOMERID = ?) FOR UPDATE\r\n```","```\r\nMap<String, Object> properties = new HashMap<>(); \r\nmap.put(\"javax.persistence.lock.timeout\", 1000L); \r\n\r\nentityManager.find(\r\n  Student.class, 1L, LockModeType.PESSIMISTIC_READ, properties);\r\n```"]