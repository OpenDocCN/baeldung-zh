["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    ```","```\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = TreeBasedTable.create(); \r\n    ```","```\r\n    List<String> universityRowTable \r\n      = Lists.newArrayList(\"Mumbai\", \"Harvard\");\r\n    List<String> courseColumnTables \r\n      = Lists.newArrayList(\"Chemical\", \"IT\", \"Electrical\");\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = ArrayTable.create(universityRowTable, courseColumnTables); \r\n    ```","```\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = ImmutableTable.<String, String, Integer> builder()\r\n      .put(\"Mumbai\", \"Chemical\", 120).build(); \r\n    ```","```\r\n@Test\r\npublic void givenTable_whenGet_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    int seatCount \r\n      = universityCourseSeatTable.get(\"Mumbai\", \"IT\");\r\n    Integer seatCountForNoEntry \r\n      = universityCourseSeatTable.get(\"Oxford\", \"IT\");\r\n\r\n    assertThat(seatCount).isEqualTo(60);\r\n    assertThat(seatCountForNoEntry).isEqualTo(null);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTable_whenContains_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    boolean entryIsPresent\r\n      = universityCourseSeatTable.contains(\"Mumbai\", \"IT\");\r\n    boolean courseIsPresent \r\n      = universityCourseSeatTable.containsColumn(\"IT\");\r\n    boolean universityIsPresent \r\n      = universityCourseSeatTable.containsRow(\"Mumbai\");\r\n    boolean seatCountIsPresent \r\n      = universityCourseSeatTable.containsValue(60);\r\n\r\n    assertThat(entryIsPresent).isEqualTo(true);\r\n    assertThat(courseIsPresent).isEqualTo(true);\r\n    assertThat(universityIsPresent).isEqualTo(true);\r\n    assertThat(seatCountIsPresent).isEqualTo(true);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTable_whenRemove_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n\r\n    int seatCount \r\n      = universityCourseSeatTable.remove(\"Mumbai\", \"IT\");\r\n\r\n    assertThat(seatCount).isEqualTo(60);\r\n    assertThat(universityCourseSeatTable.remove(\"Mumbai\", \"IT\")).\r\n      isEqualTo(null);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTable_whenColumn_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    Map<String, Integer> universitySeatMap \r\n      = universityCourseSeatTable.column(\"IT\");\r\n\r\n    assertThat(universitySeatMap).hasSize(2);\r\n    assertThat(universitySeatMap.get(\"Mumbai\")).isEqualTo(60);\r\n    assertThat(universitySeatMap.get(\"Harvard\")).isEqualTo(120);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTable_whenColumnMap_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    Map<String, Map<String, Integer>> courseKeyUniversitySeatMap \r\n      = universityCourseSeatTable.columnMap();\r\n\r\n    assertThat(courseKeyUniversitySeatMap).hasSize(3);\r\n    assertThat(courseKeyUniversitySeatMap.get(\"IT\")).hasSize(2);\r\n    assertThat(courseKeyUniversitySeatMap.get(\"Electrical\")).hasSize(1);\r\n    assertThat(courseKeyUniversitySeatMap.get(\"Chemical\")).hasSize(1);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTable_whenRow_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable \r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    Map<String, Integer> courseSeatMap \r\n      = universityCourseSeatTable.row(\"Mumbai\");\r\n\r\n    assertThat(courseSeatMap).hasSize(2);\r\n    assertThat(courseSeatMap.get(\"IT\")).isEqualTo(60);\r\n    assertThat(courseSeatMap.get(\"Chemical\")).isEqualTo(120);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTable_whenRowKeySet_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    Set<String> universitySet = universityCourseSeatTable.rowKeySet();\r\n\r\n    assertThat(universitySet).hasSize(2);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTable_whenColKeySet_returnsSuccessfully() {\r\n    Table<String, String, Integer> universityCourseSeatTable\r\n      = HashBasedTable.create();\r\n    universityCourseSeatTable.put(\"Mumbai\", \"Chemical\", 120);\r\n    universityCourseSeatTable.put(\"Mumbai\", \"IT\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"Electrical\", 60);\r\n    universityCourseSeatTable.put(\"Harvard\", \"IT\", 120);\r\n\r\n    Set<String> courseSet = universityCourseSeatTable.columnKeySet();\r\n\r\n    assertThat(courseSet).hasSize(3);\r\n} \r\n```"]