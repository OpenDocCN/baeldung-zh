["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.vault</groupId>\r\n        <artifactId>spring-vault-core</artifactId>\r\n        <version>2.3.2</version>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\nVaultTemplate vaultTemplate = new VaultTemplate(new VaultEndpoint(), \r\n  new TokenAuthentication(\"00000000-0000-0000-0000-000000000000\"));\r\n```","```\r\nVaultEndpoint endpoint = new VaultEndpoint();\r\n```","```\r\nVaultEndpoint endpoint = VaultEndpoint.create(\"host\", port);\r\n```","```\r\nVaultEndpoint endpoint = VaultEndpoint.from(new URI(\"vault uri\"));\r\n```","```\r\n@Configuration\r\npublic class VaultConfig extends AbstractVaultConfiguration {\r\n\r\n    @Override\r\n    public ClientAuthentication clientAuthentication() {\r\n        return new TokenAuthentication(\"00000000-0000-0000-0000-000000000000\");\r\n    }\r\n\r\n    @Override\r\n    public VaultEndpoint vaultEndpoint() {\r\n        return VaultEndpoint.create(\"host\", 8020);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@PropertySource(value = { \"vault-config.properties\" })\r\n@Import(value = EnvironmentVaultConfiguration.class)\r\npublic class VaultEnvironmentConfig {\r\n}\r\n```","```\r\nvault.uri=https://localhost:8200\r\nvault.token=00000000-0000-0000-0000-000000000000\r\n```","```\r\npublic class Credentials {\r\n\r\n    private String username;\r\n    private String password;\r\n\r\n    // standard constructors, getters, setters\r\n}\r\n```","```\r\nCredentials credentials = new Credentials(\"username\", \"password\");\r\nvaultTemplate.write(\"secret/myapp\", credentials);\r\n```","```\r\nVaultResponseSupport<Credentials> response = vaultTemplate\r\n  .read(\"secret/myapp\", Credentials.class);\r\nString username = response.getData().getUsername();\r\nString password = response.getData().getPassword();\r\n```","```\r\n@Secret(backend = \"credentials\", value = \"myapp\")\r\npublic class Credentials {\r\n\r\n    @Id\r\n    private String username;\r\n    // Same code\r\n]\r\n```","```\r\npublic interface CredentialsRepository extends CrudRepository<Credentials, String> {\r\n}\r\n```","```\r\npublic class CredentialsService {\r\n\r\n    @Autowired\r\n    private CredentialsRepository credentialsRepository;\r\n\r\n    public Credentials saveCredentials(Credentials credentials) {\r\n        return credentialsRepository.save(credentials);\r\n    }\r\n\r\n    public Optional<Credentials> findById(String username) {\r\n        return credentialsRepository.findById(username);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenCredentials_whenSave_thenReturnCredentials() {\r\n    // Given\r\n    Credentials credentials = new Credentials(\"login\", \"password\");\r\n    Mockito.when(credentialsRepository.save(credentials))\r\n      .thenReturn(credentials);\r\n\r\n    // When\r\n    Credentials savedCredentials = credentialsService.saveCredentials(credentials);\r\n\r\n    // Then\r\n    assertNotNull(savedCredentials);\r\n    assertEquals(savedCredentials.getUsername(), credentials.getUsername());\r\n    assertEquals(savedCredentials.getPassword(), credentials.getPassword());\r\n}\r\n```","```\r\n@Test\r\npublic void givenId_whenFindById_thenReturnCredentials() {\r\n    // Given\r\n    Credentials credentials = new Credentials(\"login\", \"[[emailÂ protected]](/web/20220627175105/https://www.baeldung.com/cdn-cgi/l/email-protection)@rd\");\r\n    Mockito.when(credentialsRepository.findById(\"login\"))\r\n      .thenReturn(Optional.of(credentials));\r\n\r\n    // When\r\n    Optional<Credentials> returnedCredentials = credentialsService.findById(\"login\");\r\n\r\n    // Then\r\n    assertNotNull(returnedCredentials);\r\n    assertNotNull(returnedCredentials.get());\r\n    assertEquals(returnedCredentials.get().getUsername(), credentials.getUsername());\r\n    assertEquals(returnedCredentials.get().getPassword(), credentials.getPassword());\r\n}\r\n```"]