["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-web</artifactId>\r\n    <version>5.3.13</version>\r\n</dependency> \r\n```","```\r\n@Override\r\npublic boolean preHandle(\r\n  HttpServletRequest request,\r\n  HttpServletResponse response, \r\n  Object handler) throws Exception {\r\n    // your code\r\n    return true;\r\n}\r\n```","```\r\n@Override\r\npublic void postHandle(\r\n  HttpServletRequest request, \r\n  HttpServletResponse response,\r\n  Object handler, \r\n  ModelAndView modelAndView) throws Exception {\r\n    // your code\r\n}\r\n```","```\r\n@Override\r\npublic void afterCompletion(\r\n  HttpServletRequest request, \r\n  HttpServletResponse response,\r\n  Object handler, Exception ex) {\r\n    // your code\r\n}\r\n```","```\r\npublic class LoggerInterceptor implements HandlerInterceptor {\r\n    ...\r\n}\r\n```","```\r\nprivate static Logger log = LoggerFactory.getLogger(LoggerInterceptor.class);\r\n```","```\r\n@Override\r\npublic boolean preHandle(\r\n  HttpServletRequest request,\r\n  HttpServletResponse response, \r\n  Object handler) throws Exception {\r\n\r\n    log.info(\"[preHandle][\" + request + \"]\" + \"[\" + request.getMethod()\r\n      + \"]\" + request.getRequestURI() + getParameters(request));\r\n\r\n    return true;\r\n} \r\n```","```\r\nprivate String getParameters(HttpServletRequest request) {\r\n    StringBuffer posted = new StringBuffer();\r\n    Enumeration<?> e = request.getParameterNames();\r\n    if (e != null) {\r\n        posted.append(\"?\");\r\n    }\r\n    while (e.hasMoreElements()) {\r\n        if (posted.length() > 1) {\r\n            posted.append(\"&\");\r\n        }\r\n        String curr = (String) e.nextElement();\r\n        posted.append(curr + \"=\");\r\n        if (curr.contains(\"password\") \r\n          || curr.contains(\"pass\")\r\n          || curr.contains(\"pwd\")) {\r\n            posted.append(\"*****\");\r\n        } else {\r\n            posted.append(request.getParameter(curr));\r\n        }\r\n    }\r\n    String ip = request.getHeader(\"X-FORWARDED-FOR\");\r\n    String ipAddr = (ip == null) ? getRemoteAddr(request) : ip;\r\n    if (ipAddr!=null && !ipAddr.equals(\"\")) {\r\n        posted.append(\"&_psip=\" + ipAddr); \r\n    }\r\n    return posted.toString();\r\n}\r\n```","```\r\nprivate String getRemoteAddr(HttpServletRequest request) {\r\n    String ipFromHeader = request.getHeader(\"X-FORWARDED-FOR\");\r\n    if (ipFromHeader != null && ipFromHeader.length() > 0) {\r\n        log.debug(\"ip from proxy - X-FORWARDED-FOR : \" + ipFromHeader);\r\n        return ipFromHeader;\r\n    }\r\n    return request.getRemoteAddr();\r\n}\r\n```","```\r\n@Override\r\npublic void postHandle(\r\n  HttpServletRequest request, \r\n  HttpServletResponse response,\r\n  Object handler, \r\n  ModelAndView modelAndView) throws Exception {\r\n\r\n    log.info(\"[postHandle][\" + request + \"]\");\r\n}\r\n```","```\r\n@Override\r\npublic void afterCompletion(\r\n  HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) \r\n  throws Exception {\r\n    if (ex != null){\r\n        ex.printStackTrace();\r\n    }\r\n    log.info(\"[afterCompletion][\" + request + \"][exception: \" + ex + \"]\");\r\n}\r\n```","```\r\n@Override\r\npublic void addInterceptors(InterceptorRegistry registry) {\r\n    registry.addInterceptor(new LoggerInterceptor());\r\n}\r\n```","```\r\n<mvc:interceptors>\r\n    <bean id=\"loggerInterceptor\" class=\"com.baeldung.web.interceptor.LoggerInterceptor\"/>\r\n</mvc:interceptors>\r\n```"]