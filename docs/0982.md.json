["```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class RedirectionSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    //...\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n          .antMatchers(\"/login*\")\r\n          .permitAll()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .formLogin();\r\n    }\r\n\r\n}\r\n```","```\r\n<http>\r\n    <intercept-url pattern=\"/login\" access=\"permitAll\"/>\r\n    <intercept-url pattern=\"/**\" access=\"isAuthenticated()\"/>\r\n    <form-login />\r\n</http>\r\n```","```\r\n@Test\r\npublic void givenAccessSecuredResource_whenAuthenticated_thenRedirectedBack() \r\n  throws Exception {\r\n\r\n    MockHttpServletRequestBuilder securedResourceAccess = get(\"/secured\");\r\n    MvcResult unauthenticatedResult = mvc\r\n      .perform(securedResourceAccess)\r\n      .andExpect(status().is3xxRedirection())\r\n      .andReturn();\r\n\r\n    MockHttpSession session = (MockHttpSession) unauthenticatedResult\r\n      .getRequest()\r\n      .getSession();\r\n    String loginUrl = unauthenticatedResult\r\n      .getResponse()\r\n      .getRedirectedUrl();\r\n    mvc\r\n      .perform(post(loginUrl)\r\n        .param(\"username\", userDetails.getUsername())\r\n        .param(\"password\", userDetails.getPassword())\r\n        .session(session)\r\n        .with(csrf()))\r\n      .andExpect(status().is3xxRedirection())\r\n      .andExpect(redirectedUrlPattern(\"**/secured\"))\r\n      .andReturn();\r\n\r\n    mvc\r\n      .perform(securedResourceAccess.session(session))\r\n      .andExpect(status().isOk());\r\n}\r\n```","```\r\npublic class RefererRedirectionAuthenticationSuccessHandler \r\n  extends SimpleUrlAuthenticationSuccessHandler\r\n  implements AuthenticationSuccessHandler {\r\n\r\n    public RefererRedirectionAuthenticationSuccessHandler() {\r\n        super();\r\n        setUseReferer(true);\r\n    }\r\n\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http\r\n      .authorizeRequests()\r\n      .antMatchers(\"/login*\")\r\n      .permitAll()\r\n      .anyRequest()\r\n      .authenticated()\r\n      .and()\r\n      .formLogin()\r\n      .successHandler(new RefererAuthenticationSuccessHandler());\r\n}\r\n```","```\r\n<http>\r\n    <intercept-url pattern=\"/login\" access=\"permitAll\"/>\r\n    <intercept-url pattern=\"/**\" access=\"isAuthenticated()\"/>\r\n    <form-login authentication-success-handler-ref=\"refererHandler\" />\r\n</http>\r\n\r\n<beans:bean \r\n  class=\"RefererRedirectionAuthenticationSuccessHandler\" \r\n  name=\"refererHandler\"/>\r\n```","```\r\npublic class ExceptionTranslationFilter extends GenericFilterBean {\r\n\r\n    //...\r\n\r\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\r\n      throws IOException, ServletException {\r\n        //...\r\n\r\n        handleSpringSecurityException(request, response, chain, ase);\r\n\r\n        //...\r\n    }\r\n\r\n    private void handleSpringSecurityException(HttpServletRequest request,\r\n      HttpServletResponse response, FilterChain chain, RuntimeException exception)\r\n      throws IOException, ServletException {\r\n\r\n        if (exception instanceof AuthenticationException) {\r\n\r\n            sendStartAuthentication(request, response, chain,\r\n              (AuthenticationException) exception);\r\n\r\n        }\r\n\r\n        //...\r\n    }\r\n\r\n    protected void sendStartAuthentication(HttpServletRequest request,\r\n      HttpServletResponse response, FilterChain chain,\r\n      AuthenticationException reason) throws ServletException, IOException {\r\n\r\n       SecurityContextHolder.getContext().setAuthentication(null);\r\n       requestCache.saveRequest(request, response);\r\n       authenticationEntryPoint.commence(request, response, reason);\r\n    }\r\n\r\n    //... \r\n\r\n}\r\n```"]