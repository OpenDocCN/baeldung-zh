["```\r\n@Test\r\nvoid aSingleSystemLambda() throws Exception {\r\n    restoreSystemProperties(() -> {\r\n        System.setProperty(\"log_dir\", \"test/resources\");\r\n        assertEquals(\"test/resources\", System.getProperty(\"log_dir\"));\r\n    });\r\n\r\n    // more test code here\r\n}\r\n```","```\r\n@Test\r\nvoid multipleSystemLambdas() throws Exception {\r\n    restoreSystemProperties(() -> {\r\n        withEnvironmentVariable(\"URL\", \"https://www.baeldung.com\")\r\n            .execute(() -> {\r\n                System.setProperty(\"log_dir\", \"test/resources\");\r\n                assertEquals(\"test/resources\", System.getProperty(\"log_dir\"));\r\n                assertEquals(\"https://www.baeldung.com\", System.getenv(\"URL\"));\r\n            });\r\n    });\r\n}\r\n```","```\r\n@SystemStub\r\nprivate EnvironmentVariables environmentVariables = ...;\r\n\r\n@SystemStub\r\nprivate SystemProperties restoreSystemProperties;\r\n\r\n@Test\r\nvoid multipleSystemStubs() {\r\n    System.setProperty(\"log_dir\", \"test/resources\");\r\n    assertEquals(\"test/resources\", System.getProperty(\"log_dir\"));\r\n    assertEquals(\"https://www.baeldung.com\", System.getenv(\"ADDRESS\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n<!-- for testing with only lambda pattern -->\r\n<dependency>\r\n    <groupId>uk.org.webcompere</groupId>\r\n    <artifactId>system-stubs-core</artifactId>\r\n    <version>1.1.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n\r\n<!-- for JUnit 4 -->\r\n<dependency>\r\n    <groupId>uk.org.webcompere</groupId>\r\n    <artifactId>system-stubs-junit4</artifactId>\r\n    <version>1.1.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n\r\n<!-- for JUnit 5 -->\r\n<dependency>\r\n    <groupId>uk.org.webcompere</groupId>\r\n    <artifactId>system-stubs-jupiter</artifactId>\r\n    <version>1.1.0</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@Rule\r\npublic EnvironmentVariablesRule environmentVariablesRule = new EnvironmentVariablesRule();\r\n\r\n@Test\r\npublic void givenEnvironmentCanBeModified_whenSetEnvironment_thenItIsSet() {\r\n    environmentVariablesRule.set(\"ENV\", \"value1\");\r\n\r\n    assertThat(System.getenv(\"ENV\")).isEqualTo(\"value1\");\r\n}\r\n```","```\r\n@Before\r\npublic void before() {\r\n    environmentVariablesRule.set(\"ENV\", \"value1\")\r\n      .set(\"ENV2\", \"value2\");\r\n}\r\n```","```\r\n@Rule\r\npublic EnvironmentVariablesRule environmentVariablesRule =\r\n  new EnvironmentVariablesRule(\"ENV\", \"value1\",\r\n    \"ENV2\", \"value2\");\r\n```","```\r\n@ExtendWith(SystemStubsExtension.class)\r\nclass EnvironmentVariablesJUnit5 {\r\n    // tests\r\n}\r\n```","```\r\n@SystemStub\r\nprivate EnvironmentVariables environmentVariables;\r\n```","```\r\n@Test\r\nvoid givenEnvironmentCanBeModified_whenSetEnvironment_thenItIsSet() {\r\n    environmentVariables.set(\"ENV\", \"value1\");\r\n\r\n    assertThat(System.getenv(\"ENV\")).isEqualTo(\"value1\");\r\n}\r\n```","```\r\n@SystemStub\r\nprivate EnvironmentVariables environmentVariables =\r\n  new EnvironmentVariables(\"ENV\", \"value1\");\r\n```","```\r\n@SystemStub\r\nprivate EnvironmentVariables environmentVariables =\r\n  new EnvironmentVariables()\r\n    .set(\"ENV\", \"value1\")\r\n    .set(\"ENV2\", \"value2\");\r\n```","```\r\n@Test\r\nvoid givenEnvironmentCanBeModified(EnvironmentVariables environmentVariables) {\r\n    environmentVariables.set(\"ENV\", \"value1\");\r\n\r\n    assertThat(System.getenv(\"ENV\")).isEqualTo(\"value1\");\r\n}\r\n```","```\r\nwithEnvironmentVariable(\"ENV3\", \"val\")\r\n    .execute(() -> {\r\n        assertThat(System.getenv(\"ENV3\")).isEqualTo(\"val\");\r\n    });\r\n```","```\r\nreturn new EnvironmentVariables().set(\"ENV3\", \"val\");\r\n```","```\r\nString extracted = new EnvironmentVariables(\"PROXY\", \"none\")\r\n  .execute(() -> System.getenv(\"PROXY\"));\r\n\r\nassertThat(extracted).isEqualTo(\"none\");\r\n```","```\r\nwith(new EnvironmentVariables(\"FOO\", \"bar\"), new SystemProperties(\"prop\", \"val\"))\r\n  .execute(() -> {\r\n      assertThat(System.getenv(\"FOO\")).isEqualTo(\"bar\");\r\n      assertThat(System.getProperty(\"prop\")).isEqualTo(\"val\");\r\n  });\r\n```","```\r\n@Rule\r\npublic SystemPropertiesRule systemProperties =\r\n  new SystemPropertiesRule(\"db.connection\", \"false\");\r\n```","```\r\n@Before\r\npublic void before() {\r\n    systemProperties.set(\"before.prop\", \"before\");\r\n}\r\n```","```\r\n@ExtendWith(SystemStubsExtension.class)\r\nclass RestoreSystemProperties {\r\n    @SystemStub\r\n    private SystemProperties systemProperties;\r\n\r\n}\r\n```","```\r\n@Test\r\nvoid willRestorePropertiesAfter(SystemProperties systemProperties) {\r\n\r\n} \r\n```","```\r\n@ExtendWith(SystemStubsExtension.class)\r\nclass SetSomeSystemProperties {\r\n    @SystemStub\r\n    private SystemProperties systemProperties;\r\n\r\n    @BeforeEach\r\n    void before() {\r\n        systemProperties.set(\"beforeProperty\", \"before\");\r\n    }\r\n}\r\n```","```\r\nrestoreSystemProperties(() -> {\r\n    // test code\r\n    System.setProperty(\"unrestored\", \"true\");\r\n});\r\n\r\nassertThat(System.getProperty(\"unrestored\")).isNull();\r\n```","```\r\nString result = new SystemProperties()\r\n  .execute(() -> {\r\n      System.setProperty(\"unrestored\", \"true\");\r\n      return \"it works\";\r\n  });\r\n\r\nassertThat(result).isEqualTo(\"it works\");\r\nassertThat(System.getProperty(\"unrestored\")).isNull();\r\n```","```\r\nname=baeldung\r\nversion=1.0\r\n```","```\r\nSystemProperties systemProperties =\r\n  new SystemProperties(PropertySource.fromResource(\"test.properties\")); \r\n```","```\r\ninterface LogOutput {\r\n   void write(String line);\r\n}\r\n\r\nclass Component {\r\n    private LogOutput log;\r\n\r\n    public void method() {\r\n        log.write(\"Some output\");\r\n    }\r\n}\r\n```","```\r\n@Rule\r\npublic SystemOutRule systemOutRule = new SystemOutRule();\r\n```","```\r\nSystem.out.println(\"line1\");\r\nSystem.out.println(\"line2\");\r\n\r\nassertThat(systemOutRule.getLines())\r\n  .containsExactly(\"line1\", \"line2\");\r\n```","```\r\nassertThat(systemOutRule.getText())\r\n  .startsWith(\"line1\");\r\n```","```\r\nassertThat(systemOutRule.getLinesNormalized())\r\n  .isEqualTo(\"line1\\nline2\\n\");\r\n```","```\r\n@Rule\r\npublic SystemErrRule systemErrRule = new SystemErrRule();\r\n\r\n@Test\r\npublic void whenCodeWritesToSystemErr_itCanBeRead() {\r\n    System.err.println(\"line1\");\r\n    System.err.println(\"line2\");\r\n\r\n    assertThat(systemErrRule.getLines())\r\n      .containsExactly(\"line1\", \"line2\");\r\n}\r\n```","```\r\n@SystemStub\r\nprivate SystemOut systemOut;\r\n\r\n@SystemStub\r\nprivate SystemErr systemErr;\r\n\r\n@Test\r\nvoid whenWriteToOutput_thenItCanBeAsserted() {\r\n    System.out.println(\"to out\");\r\n    System.err.println(\"to err\");\r\n\r\n    assertThat(systemOut.getLines()).containsExactly(\"to out\");\r\n    assertThat(systemErr.getLines()).containsExactly(\"to err\");\r\n}\r\n```","```\r\n@Test\r\nvoid givenTapOutput_thenGetOutput() throws Exception {\r\n    String output = tapSystemOutNormalized(() -> {\r\n        System.out.println(\"a\");\r\n        System.out.println(\"b\");\r\n    });\r\n\r\n    assertThat(output).isEqualTo(\"a\\nb\\n\");\r\n}\r\n```","```\r\nSystemOut systemOut = new SystemOut();\r\nSystemProperties systemProperties = new SystemProperties(\"a\", \"!\");\r\nwith(systemOut, systemProperties)\r\n  .execute(()  -> {\r\n    System.out.println(\"a: \" + System.getProperty(\"a\"));\r\n});\r\n\r\nassertThat(systemOut.getLines()).containsExactly(\"a: !\");\r\n```","```\r\nmuteSystemOut(() -> {\r\n    System.out.println(\"nothing is output\");\r\n});\r\n```","```\r\n@Rule\r\npublic SystemOutRule systemOutRule = new SystemOutRule(new NoopStream());\r\n```","```\r\n@SystemStub\r\nprivate SystemOut systemOut = new SystemOut(new NoopStream());\r\n```","```\r\n// throws an exception:\r\nnew SystemOut(new DisallowWriteStream())\r\n  .execute(() -> System.out.println(\"boo\"));\r\n```","```\r\nLinesAltStream testInput = new LinesAltStream(\"line1\", \"line2\");\r\n\r\nScanner scanner = new Scanner(testInput);\r\nassertThat(scanner.nextLine()).isEqualTo(\"line1\");\r\n```","```\r\n@Rule\r\npublic SystemInRule systemInRule =\r\n  new SystemInRule(\"line1\", \"line2\", \"line3\");\r\n```","```\r\n@Test\r\npublic void givenInput_canReadFirstLine() {\r\n    assertThat(new Scanner(System.in).nextLine())\r\n      .isEqualTo(\"line1\");\r\n}\r\n```","```\r\n@SystemStub\r\nprivate SystemIn systemIn = new SystemIn(\"line1\", \"line2\", \"line3\");\r\n```","```\r\nwithTextFromSystemIn(\"line1\", \"line2\", \"line3\")\r\n  .execute(() -> {\r\n      assertThat(new Scanner(System.in).nextLine())\r\n        .isEqualTo(\"line1\");\r\n  });\r\n```","```\r\n@Rule\r\npublic SystemExitRule systemExitRule = new SystemExitRule();\r\n```","```\r\n@Test\r\npublic void whenExit_thenExitCodeIsAvailable() {\r\n    assertThatThrownBy(() -> {\r\n        System.exit(123);\r\n    }).isInstanceOf(AbortExecutionException.class);\r\n\r\n    assertThat(systemExitRule.getExitCode()).isEqualTo(123);\r\n}\r\n```","```\r\n@SystemStub\r\nprivate SystemExit systemExit;\r\n```","```\r\nint exitCode = catchSystemExit(() -> {\r\n    System.exit(123);\r\n});\r\nassertThat(exitCode).isEqualTo(123);\r\n```","```\r\npublic class FakeDatabaseTestResource implements TestResource {\r\n    // let's pretend this is a database connection\r\n    private String databaseConnection = \"closed\";\r\n\r\n    @Override\r\n    public void setup() throws Exception {\r\n        databaseConnection = \"open\";\r\n    }\r\n\r\n    @Override\r\n    public void teardown() throws Exception {\r\n        databaseConnection = \"closed\";\r\n    }\r\n\r\n    public String getDatabaseConnection() {\r\n        return databaseConnection;\r\n    }\r\n}\r\n```","```\r\nFakeDatabaseTestResource fake = new FakeDatabaseTestResource();\r\nassertThat(fake.getDatabaseConnection()).isEqualTo(\"closed\");\r\n\r\nfake.execute(() -> {\r\n    assertThat(fake.getDatabaseConnection()).isEqualTo(\"open\");\r\n});\r\n```","```\r\n@ExtendWith(SystemStubsExtension.class)\r\nclass FakeDatabaseJUnit5UnitTest {\r\n\r\n    @Test\r\n    void useFakeDatabase(FakeDatabaseTestResource fakeDatabase) {\r\n        assertThat(fakeDatabase.getDatabaseConnection()).isEqualTo(\"open\");\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(SystemStubsExtension.class)\r\npublic class SpringAppWithDynamicPropertiesTest {\r\n\r\n    // sets the environment before Spring even starts\r\n    @SystemStub\r\n    private static EnvironmentVariables environmentVariables;\r\n}\r\n```","```\r\n@BeforeAll\r\nstatic void beforeAll() {\r\n     String baseUrl = ...;\r\n\r\n     environmentVariables.set(\"SERVER_URL\", baseUrl);\r\n}\r\n```","```\r\n@Nested\r\n@SpringBootTest(classes = {RestApi.class, App.class},\r\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass InnerSpringTest {\r\n    @LocalServerPort\r\n    private int serverPort;\r\n\r\n    // Test methods\r\n}\r\n```"]