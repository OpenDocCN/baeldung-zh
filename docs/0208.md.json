["```\r\npublic void whenQueryExecutedWithUnmappedEntity_thenMappingException() {\r\n    thrown.expectCause(isA(MappingException.class));\r\n    thrown.expectMessage(\"Unknown entity: java.lang.String\");\r\n\r\n    Session session = sessionFactory.getCurrentSession();\r\n    NativeQuery<String> query = session\r\n      .createNativeQuery(\"select name from PRODUCT\", String.class);\r\n    query.getResultList();\r\n}\r\n```","```\r\n@Entity\r\npublic class EntityWithNoId {\r\n    private int id;\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    // standard setter\r\n}\r\n```","```\r\npublic void givenEntityWithoutId_whenSessionFactoryCreated_thenAnnotationException() {\r\n    thrown.expect(AnnotationException.class);\r\n    thrown.expectMessage(\"No identifier specified for entity\");\r\n\r\n    Configuration cfg = getConfiguration();\r\n    cfg.addAnnotatedClass(EntityWithNoId.class);\r\n    cfg.buildSessionFactory();\r\n}\r\n```","```\r\npublic void givenMissingTable_whenSchemaValidated_thenSchemaManagementException() {\r\n    thrown.expect(SchemaManagementException.class);\r\n    thrown.expectMessage(\"Schema-validation: missing table\");\r\n\r\n    Configuration cfg = getConfiguration();\r\n    cfg.setProperty(AvailableSettings.HBM2DDL_AUTO, \"validate\");\r\n    cfg.addAnnotatedClass(Product.class);\r\n    cfg.buildSessionFactory();\r\n}\r\n```","```\r\npublic void whenWrongDialectSpecified_thenCommandAcceptanceException() {\r\n    thrown.expect(SchemaManagementException.class);\r\n\r\n    thrown.expectCause(isA(CommandAcceptanceException.class));\r\n    thrown.expectMessage(\"Halting on error : Error executing DDL\");\r\n\r\n    Configuration cfg = getConfiguration();\r\n    cfg.setProperty(AvailableSettings.DIALECT,\r\n      \"org.hibernate.dialect.MySQLDialect\");\r\n    cfg.setProperty(AvailableSettings.HBM2DDL_AUTO, \"update\");\r\n    cfg.setProperty(AvailableSettings.HBM2DDL_HALT_ON_ERROR,\"true\");\r\n    cfg.getProperties()\r\n      .put(AvailableSettings.HBM2DDL_HALT_ON_ERROR, true);\r\n\r\n    cfg.addAnnotatedClass(Product.class);\r\n    cfg.buildSessionFactory();\r\n}\r\n```","```\r\npublic void givenMissingTable_whenQueryExecuted_thenSQLGrammarException() {\r\n    thrown.expect(isA(PersistenceException.class));\r\n    thrown.expectCause(isA(SQLGrammarException.class));\r\n    thrown.expectMessage(\"SQLGrammarException: could not prepare statement\");\r\n\r\n    Session session = sessionFactory.getCurrentSession();\r\n    NativeQuery<Product> query = session.createNativeQuery(\r\n      \"select * from NON_EXISTING_TABLE\", Product.class);\r\n    query.getResultList();\r\n}\r\n```","```\r\npublic void givenMissingTable_whenEntitySaved_thenSQLGrammarException() {\r\n    thrown.expect(isA(PersistenceException.class));\r\n    thrown.expectCause(isA(SQLGrammarException.class));\r\n    thrown\r\n      .expectMessage(\"SQLGrammarException: could not prepare statement\");\r\n\r\n    Configuration cfg = getConfiguration();\r\n    cfg.addAnnotatedClass(Product.class);\r\n\r\n    SessionFactory sessionFactory = cfg.buildSessionFactory();\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n    try {\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n        Product product = new Product();\r\n        product.setId(1);\r\n        product.setName(\"Product 1\");\r\n        session.save(product);\r\n        transaction.commit();\r\n    } catch (Exception e) {\r\n        rollbackTransactionQuietly(transaction);\r\n        throw (e);\r\n    } finally {\r\n        closeSessionQuietly(session);\r\n        closeSessionFactoryQuietly(sessionFactory);\r\n    }\r\n}\r\n```","```\r\npublic void whenDuplicateIdSaved_thenConstraintViolationException() {\r\n    thrown.expect(isA(PersistenceException.class));\r\n    thrown.expectCause(isA(ConstraintViolationException.class));\r\n    thrown.expectMessage(\r\n      \"ConstraintViolationException: could not execute statement\");\r\n\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n\r\n    for (int i = 1; i <= 2; i++) {\r\n        try {\r\n            session = sessionFactory.openSession();\r\n            transaction = session.beginTransaction();\r\n            Product product = new Product();\r\n            product.setId(1);\r\n            product.setName(\"Product \" + i);\r\n            session.save(product);\r\n            transaction.commit();\r\n        } catch (Exception e) {\r\n            rollbackTransactionQuietly(transaction);\r\n            throw (e);\r\n        } finally {\r\n            closeSessionQuietly(session);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void givenQueryWithDataTypeMismatch_WhenQueryExecuted_thenDataException() {\r\n    thrown.expectCause(isA(DataException.class));\r\n    thrown.expectMessage(\r\n      \"org.hibernate.exception.DataException: could not prepare statement\");\r\n\r\n    Session session = sessionFactory.getCurrentSession();\r\n    NativeQuery<Product> query = session.createNativeQuery(\r\n      \"select * from PRODUCT where id='wrongTypeId'\", Product.class);\r\n    query.getResultList();\r\n}\r\n```","```\r\npublic void \r\ngivenSessionContainingAnId_whenIdAssociatedAgain_thenNonUniqueObjectException() {\r\n    thrown.expect(isA(NonUniqueObjectException.class));\r\n    thrown.expectMessage(\r\n      \"A different object with the same identifier value was already associated with the session\");\r\n\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n\r\n    try {\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n\r\n        Product product = new Product();\r\n        product.setId(1);\r\n        product.setName(\"Product 1\");\r\n        session.save(product);\r\n\r\n        product = new Product();\r\n        product.setId(1);\r\n        product.setName(\"Product 2\");\r\n        session.save(product);\r\n\r\n        transaction.commit();\r\n    } catch (Exception e) {\r\n        rollbackTransactionQuietly(transaction);\r\n        throw (e);\r\n    } finally {\r\n        closeSessionQuietly(session);\r\n    }\r\n}\r\n```","```\r\npublic void whenUpdatingNonExistingObject_thenStaleStateException() {\r\n    thrown.expect(isA(OptimisticLockException.class));\r\n    thrown.expectMessage(\r\n      \"Batch update returned unexpected row count from update\");\r\n    thrown.expectCause(isA(StaleStateException.class));\r\n\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n\r\n    try {\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n\r\n        Product product = new Product();\r\n        product.setId(15);\r\n        product.setName(\"Product1\");\r\n        session.update(product);\r\n        transaction.commit();\r\n    } catch (Exception e) {\r\n        rollbackTransactionQuietly(transaction);\r\n        throw (e);\r\n    } finally {\r\n        closeSessionQuietly(session);\r\n    }\r\n}\r\n```","```\r\npublic void \r\ngivenTxnMarkedRollbackOnly_whenCommitted_thenTransactionException() {\r\n    thrown.expect(isA(TransactionException.class));\r\n    thrown.expectMessage(\r\n        \"Transaction was marked for rollback only; cannot commit\");\r\n\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n    try {\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n\r\n        Product product = new Product();\r\n        product.setId(15);\r\n        product.setName(\"Product1\");\r\n        session.save(product);\r\n        transaction.setRollbackOnly();\r\n\r\n        transaction.commit();\r\n    } catch (Exception e) {\r\n        rollbackTransactionQuietly(transaction);\r\n        throw (e);\r\n    } finally {\r\n        closeSessionQuietly(session);\r\n    }\r\n}\r\n```","```\r\npublic void whenDeletingADeletedObject_thenOptimisticLockException() {\r\n    thrown.expect(isA(OptimisticLockException.class));\r\n    thrown.expectMessage(\r\n        \"Batch update returned unexpected row count from update\");\r\n    thrown.expectCause(isA(StaleStateException.class));\r\n\r\n    Session session = null;\r\n    Transaction transaction = null;\r\n\r\n    try {\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n\r\n        Product product = new Product();\r\n        product.setId(12);\r\n        product.setName(\"Product 12\");\r\n        session.save(product1);\r\n        transaction.commit();\r\n        session.close();\r\n\r\n        session = sessionFactory.openSession();\r\n        transaction = session.beginTransaction();\r\n        product = session.get(Product.class, 12);\r\n        session.createNativeQuery(\"delete from Product where id=12\")\r\n          .executeUpdate();\r\n        // We need to refresh to fix the error.\r\n        // session.refresh(product);\r\n        session.delete(product);\r\n        transaction.commit();\r\n    } catch (Exception e) {\r\n        rollbackTransactionQuietly(transaction);\r\n        throw (e);\r\n    } finally {\r\n        closeSessionQuietly(session);\r\n    }\r\n}\r\n```"]