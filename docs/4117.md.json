["```\r\n<dependency>\r\n    <groupId>org.skyscreamer</groupId>\r\n    <artifactId>jsonassert</artifactId>\r\n    <version>1.5.0</version>\r\n</dependency>\r\n```","```\r\nString actual = \"{id:123, name:\\\"John\\\"}\";\r\nJSONAssert.assertEquals(\r\n  \"{id:123,name:\\\"John\\\"}\", actual, JSONCompareMode.LENIENT);\r\n```","```\r\nString actual = \"{id:123, name:\\\"John\\\", zip:\\\"33025\\\"}\";\r\nJSONAssert.assertEquals(\r\n  \"{id:123,name:\\\"John\\\"}\", actual, JSONCompareMode.LENIENT);\r\n```","```\r\nString actual = \"{id:123,name:\\\"John\\\"}\";\r\nJSONAssert.assertNotEquals(\r\n  \"{name:\\\"John\\\"}\", actual, JSONCompareMode.STRICT);\r\n```","```\r\nString actual = \"{id:123,name:\\\"John\\\",zip:\\\"33025\\\"}\";\r\nJSONAssert.assertEquals(\r\n  \"{id:123,name:\\\"John\\\"}\", actual, JSONCompareMode.LENIENT);\r\nJSONAssert.assertEquals(\r\n  \"{id:123,name:\\\"John\\\"}\", actual, false);\r\n\r\nactual = \"{id:123,name:\\\"John\\\"}\";\r\nJSONAssert.assertNotEquals(\r\n  \"{name:\\\"John\\\"}\", actual, JSONCompareMode.STRICT);\r\nJSONAssert.assertNotEquals(\r\n  \"{name:\\\"John\\\"}\", actual, true);\r\n```","```\r\nString result = \"{id:1,name:\\\"John\\\"}\";\r\nJSONAssert.assertEquals(\r\n  \"{name:\\\"John\\\",id:1}\", result, JSONCompareMode.STRICT);\r\nJSONAssert.assertEquals(\r\n  \"{name:\\\"John\\\",id:1}\", result, JSONCompareMode.LENIENT);\r\n```","```\r\nJSONObject expected = new JSONObject();\r\nJSONObject actual = new JSONObject();\r\nexpected.put(\"id\", Integer.valueOf(12345));\r\nactual.put(\"id\", Double.valueOf(12345));\r\n\r\nJSONAssert.assertEquals(expected, actual, JSONCompareMode.LENIENT);\r\n```","```\r\nString result = \"{id:1,name:\\\"Juergen\\\", \r\n  address:{city:\\\"Hollywood\\\", state:\\\"LA\\\", zip:91601}}\";\r\nJSONAssert.assertEquals(\"{id:1,name:\\\"Juergen\\\", \r\n  address:{city:\\\"Hollywood\\\", state:\\\"LA\\\", zip:91601}}\", result, false);\r\n```","```\r\nString actual = \"{id:123,name:\\\"John\\\"}\";\r\nString failureMessage = \"Only one field is expected: name\";\r\ntry {\r\n    JSONAssert.assertEquals(failureMessage, \r\n      \"{name:\\\"John\\\"}\", actual, JSONCompareMode.STRICT);\r\n} catch (AssertionError ae) {\r\n    assertThat(ae.getMessage()).containsIgnoringCase(failureMessage);\r\n}\r\n```","```\r\nOnly one field is expected: name \r\nUnexpected: id\r\n```","```\r\nString result = \"[Alex, Barbera, Charlie, Xavier]\";\r\nJSONAssert.assertEquals(\r\n  \"[Charlie, Alex, Xavier, Barbera]\", result, JSONCompareMode.LENIENT);\r\nJSONAssert.assertEquals(\r\n  \"[Alex, Barbera, Charlie, Xavier]\", result, JSONCompareMode.STRICT);\r\nJSONAssert.assertNotEquals(\r\n  \"[Charlie, Alex, Xavier, Barbera]\", result, JSONCompareMode.STRICT);\r\n```","```\r\nString result = \"[1,2,3,4,5]\";\r\nJSONAssert.assertEquals(\r\n  \"[1,2,3,4,5]\", result, JSONCompareMode.LENIENT);\r\nJSONAssert.assertNotEquals(\r\n  \"[1,2,3]\", result, JSONCompareMode.LENIENT);\r\nJSONAssert.assertNotEquals(\r\n  \"[1,2,3,4,5,6]\", result, JSONCompareMode.LENIENT);\r\n```","```\r\nString names = \"{names:[Alex, Barbera, Charlie, Xavier]}\";\r\nJSONAssert.assertEquals(\r\n  \"{names:[4]}\", \r\n  names, \r\n  new ArraySizeComparator(JSONCompareMode.LENIENT));\r\n```","```\r\nString ratings = \"{ratings:[3.2,3.5,4.1,5,1]}\";\r\nJSONAssert.assertEquals(\r\n  \"{ratings:[1,5]}\", \r\n  ratings, \r\n  new ArraySizeComparator(JSONCompareMode.LENIENT));\r\n```","```\r\nJSONAssert.assertEquals(\"{entry:{id:x}}\", \"{entry:{id:1, id:2}}\", \r\n  new CustomComparator(\r\n  JSONCompareMode.STRICT, \r\n  new Customization(\"entry.id\", \r\n  new RegularExpressionValueMatcher<Object>(\"\\\\d\"))));\r\n\r\nJSONAssert.assertNotEquals(\"{entry:{id:x}}\", \"{entry:{id:1, id:as}}\", \r\n  new CustomComparator(JSONCompareMode.STRICT, \r\n  new Customization(\"entry.id\", \r\n  new RegularExpressionValueMatcher<Object>(\"\\\\d\"))));\r\n```"]