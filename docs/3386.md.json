["```\r\n@Component\r\npublic class AuthenticationFailureListener implements \r\n  ApplicationListener<AuthenticationFailureBadCredentialsEvent> {\r\n\r\n    @Autowired\r\n    private HttpServletRequest request;\r\n\r\n    @Autowired\r\n    private LoginAttemptService loginAttemptService;\r\n\r\n    @Override\r\n    public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent e) {\r\n        final String xfHeader = request.getHeader(\"X-Forwarded-For\");\r\n        if (xfHeader == null) {\r\n            loginAttemptService.loginFailed(request.getRemoteAddr());\r\n        } else {\r\n            loginAttemptService.loginFailed(xfHeader.split(\",\")[0]);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class AuthenticationSuccessEventListener implements \r\n  ApplicationListener<AuthenticationSuccessEvent> {\r\n\r\n    @Autowired\r\n    private HttpServletRequest request;\r\n\r\n    @Autowired\r\n    private LoginAttemptService loginAttemptService;\r\n\r\n    @Override\r\n    public void onApplicationEvent(final AuthenticationSuccessEvent e) {\r\n        final String xfHeader = request.getHeader(\"X-Forwarded-For\");\r\n        if (xfHeader == null) {\r\n            loginAttemptService.loginSucceeded(request.getRemoteAddr());\r\n        } else {\r\n            loginAttemptService.loginSucceeded(xfHeader.split(\",\")[0]);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class LoginAttemptService {\r\n\r\n    private final int MAX_ATTEMPT = 10;\r\n    private LoadingCache<String, Integer> attemptsCache;\r\n\r\n    public LoginAttemptService() {\r\n        super();\r\n        attemptsCache = CacheBuilder.newBuilder().\r\n          expireAfterWrite(1, TimeUnit.DAYS).build(new CacheLoader<String, Integer>() {\r\n            public Integer load(String key) {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    public void loginSucceeded(String key) {\r\n        attemptsCache.invalidate(key);\r\n    }\r\n\r\n    public void loginFailed(String key) {\r\n        int attempts = 0;\r\n        try {\r\n            attempts = attemptsCache.get(key);\r\n        } catch (ExecutionException e) {\r\n            attempts = 0;\r\n        }\r\n        attempts++;\r\n        attemptsCache.put(key, attempts);\r\n    }\r\n\r\n    public boolean isBlocked(String key) {\r\n        try {\r\n            return attemptsCache.get(key) >= MAX_ATTEMPT;\r\n        } catch (ExecutionException e) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Service(\"userDetailsService\")\r\n@Transactional\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private RoleRepository roleRepository;\r\n\r\n    @Autowired\r\n    private LoginAttemptService loginAttemptService;\r\n\r\n    @Autowired\r\n    private HttpServletRequest request;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\r\n        String ip = getClientIP();\r\n        if (loginAttemptService.isBlocked(ip)) {\r\n            throw new RuntimeException(\"blocked\");\r\n        }\r\n\r\n        try {\r\n            User user = userRepository.findByEmail(email);\r\n            if (user == null) {\r\n                return new org.springframework.security.core.userdetails.User(\r\n                  \" \", \" \", true, true, true, true, \r\n                  getAuthorities(Arrays.asList(roleRepository.findByName(\"ROLE_USER\"))));\r\n            }\r\n\r\n            return new org.springframework.security.core.userdetails.User(\r\n              user.getEmail(), user.getPassword(), user.isEnabled(), true, true, true, \r\n              getAuthorities(user.getRoles()));\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate String getClientIP() {\r\n    String xfHeader = request.getHeader(\"X-Forwarded-For\");\r\n    if (xfHeader == null){\r\n        return request.getRemoteAddr();\r\n    }\r\n    return xfHeader.split(\",\")[0];\r\n}\r\n```","```\r\nX-Forwarded-For: clientIpAddress, proxy1, proxy2\r\n```","```\r\n<listener>\r\n    <listener-class>\r\n        org.springframework.web.context.request.RequestContextListener\r\n    </listener-class>\r\n</listener>\r\n```","```\r\n@Component\r\npublic class CustomAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(...) {\r\n        ...\r\n\r\n        String errorMessage = messages.getMessage(\"message.badCredentials\", null, locale);\r\n        if (exception.getMessage().equalsIgnoreCase(\"blocked\")) {\r\n            errorMessage = messages.getMessage(\"auth.message.blocked\", null, locale);\r\n        }\r\n\r\n        ...\r\n    }\r\n}\r\n```"]