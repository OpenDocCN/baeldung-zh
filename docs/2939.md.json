["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-cache</artifactId>\r\n    <version>2.4.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-redis</artifactId>\r\n    <version>2.4.3</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic RedisCacheConfiguration cacheConfiguration() {\r\n    return RedisCacheConfiguration.defaultCacheConfig()\r\n      .entryTtl(Duration.ofMinutes(60))\r\n      .disableCachingNullValues()\r\n      .serializeValuesWith(SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer()));\r\n}\r\n```","```\r\n@Bean\r\npublic RedisCacheManagerBuilderCustomizer redisCacheManagerBuilderCustomizer() {\r\n    return (builder) -> builder\r\n      .withCacheConfiguration(\"itemCache\",\r\n        RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofMinutes(10)))\r\n      .withCacheConfiguration(\"customerCache\",\r\n        RedisCacheConfiguration.defaultCacheConfig().entryTtl(Duration.ofMinutes(5)));\r\n}\r\n```","```\r\n@Import({ CacheConfig.class, ItemService.class})\r\n@ExtendWith(SpringExtension.class)\r\n@EnableCaching\r\n@ImportAutoConfiguration(classes = { \r\n  CacheAutoConfiguration.class, \r\n  RedisAutoConfiguration.class \r\n})\r\nclass ItemServiceCachingIntegrationTest {\r\n\r\n    @MockBean\r\n    private ItemRepository mockItemRepository;\r\n\r\n    @Autowired\r\n    private ItemService itemService;\r\n\r\n    @Autowired\r\n    private CacheManager cacheManager;\r\n\r\n    @Test\r\n    void givenRedisCaching_whenFindItemById_thenItemReturnedFromCache() {\r\n        Item anItem = new Item(AN_ID, A_DESCRIPTION);\r\n        given(mockItemRepository.findById(AN_ID))\r\n          .willReturn(Optional.of(anItem));\r\n\r\n        Item itemCacheMiss = itemService.getItemForId(AN_ID);\r\n        Item itemCacheHit = itemService.getItemForId(AN_ID);\r\n\r\n        assertThat(itemCacheMiss).isEqualTo(anItem);\r\n        assertThat(itemCacheHit).isEqualTo(anItem);\r\n\r\n        verify(mockItemRepository, times(1)).findById(AN_ID);\r\n        assertThat(itemFromCache()).isEqualTo(anItem);\r\n    }\r\n}\r\n```","```\r\n@Cacheable(value = \"itemCache\")\r\npublic Item getItemForId(String id) {\r\n    return itemRepository.findById(id)\r\n      .orElseThrow(RuntimeException::new);\r\n}\r\n```"]