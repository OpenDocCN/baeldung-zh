["```\r\nStream<T> filter(Predicate<? super T> predicate)\r\n```","```\r\npublic class Customer {\r\n    private String name;\r\n    private int points;\r\n    //Constructor and standard getters\r\n}\r\n```","```\r\nCustomer john = new Customer(\"John P.\", 15);\r\nCustomer sarah = new Customer(\"Sarah M.\", 200);\r\nCustomer charles = new Customer(\"Charles B.\", 150);\r\nCustomer mary = new Customer(\"Mary T.\", 1);\r\n\r\nList<Customer> customers = Arrays.asList(john, sarah, charles, mary);\r\n```","```\r\nList<Customer> customersWithMoreThan100Points = customers\r\n  .stream()\r\n  .filter(c -> c.getPoints() > 100)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<Customer> customersWithMoreThan100Points = customers\r\n  .stream()\r\n  .filter(Customer::hasOverHundredPoints)\r\n  .collect(Collectors.toList());\r\n```","```\r\npublic boolean hasOverHundredPoints() {\r\n    return this.points > 100;\r\n}\r\n```","```\r\nassertThat(customersWithMoreThan100Points).hasSize(2);\r\nassertThat(customersWithMoreThan100Points).contains(sarah, charles);\r\n```","```\r\nList<Customer> charlesWithMoreThan100Points = customers\r\n  .stream()\r\n  .filter(c -> c.getPoints() > 100 && c.getName().startsWith(\"Charles\"))\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(charlesWithMoreThan100Points).hasSize(1);\r\nassertThat(charlesWithMoreThan100Points).contains(charles);\r\n```","```\r\nprivate String profilePhotoUrl;\r\n```","```\r\npublic boolean hasValidProfilePhoto() throws IOException {\r\n    URL url = new URL(this.profilePhotoUrl);\r\n    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\r\n    return connection.getResponseCode() == HttpURLConnection.HTTP_OK;\r\n}\r\n```","```\r\nList<Customer> customersWithValidProfilePhoto = customers\r\n  .stream()\r\n  .filter(Customer::hasValidProfilePhoto)\r\n  .collect(Collectors.toList());\r\n```","```\r\nIncompatible thrown types java.io.IOException in functional expression\r\n```","```\r\nList<Customer> customersWithValidProfilePhoto = customers\r\n  .stream()\r\n  .filter(c -> {\r\n      try {\r\n          return c.hasValidProfilePhoto();\r\n      } catch (IOException e) {\r\n          //handle exception\r\n      }\r\n      return false;\r\n  })\r\n  .collect(Collectors.toList());\r\n```","```\r\n<dependency>\r\n    <groupId>pl.touk</groupId>\r\n    <artifactId>throwing-function</artifactId>\r\n    <version>1.3</version>\r\n</dependency>\r\n```","```\r\nList customersWithValidProfilePhoto = customers\r\n  .stream()\r\n  .filter(ThrowingPredicate.unchecked(Customer::hasValidProfilePhoto))\r\n  .collect(Collectors.toList());\r\n```"]