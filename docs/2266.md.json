["```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(\r\n  prePostEnabled = true, \r\n  securedEnabled = true, \r\n  jsr250Enabled = true)\r\npublic class MethodSecurityConfig \r\n  extends GlobalMethodSecurityConfiguration {\r\n}\r\n```","```\r\n@Secured(\"ROLE_VIEWER\")\r\npublic String getUsername() {\r\n    SecurityContext securityContext = SecurityContextHolder.getContext();\r\n    return securityContext.getAuthentication().getName();\r\n}\r\n```","```\r\n@Secured({ \"ROLE_VIEWER\", \"ROLE_EDITOR\" })\r\npublic boolean isValidUsername(String username) {\r\n    return userRoleRepository.isValidUsername(username);\r\n}\r\n```","```\r\n@RolesAllowed(\"ROLE_VIEWER\")\r\npublic String getUsername2() {\r\n    //...\r\n}\r\n\r\n@RolesAllowed({ \"ROLE_VIEWER\", \"ROLE_EDITOR\" })\r\npublic boolean isValidUsername2(String username) {\r\n    //...\r\n}\r\n```","```\r\n@PreAuthorize(\"hasRole('ROLE_VIEWER')\")\r\npublic String getUsernameInUpperCase() {\r\n    return getUsername().toUpperCase();\r\n}\r\n```","```\r\n@PreAuthorize(\"hasRole('ROLE_VIEWER') or hasRole('ROLE_EDITOR')\")\r\npublic boolean isValidUsername3(String username) {\r\n    //...\r\n}\r\n```","```\r\n@PreAuthorize(\"#username == authentication.principal.username\")\r\npublic String getMyRoles(String username) {\r\n    //...\r\n}\r\n```","```\r\n@PostAuthorize(\"#username == authentication.principal.username\")\r\npublic String getMyRoles2(String username) {\r\n    //...\r\n}\r\n```","```\r\n@PostAuthorize\r\n  (\"returnObject.username == authentication.principal.nickName\")\r\npublic CustomUser loadUserDetail(String username) {\r\n    return userRoleRepository.loadUserByUserName(username);\r\n}\r\n```","```\r\n@PreFilter(\"filterObject != authentication.principal.username\")\r\npublic String joinUsernames(List<String> usernames) {\r\n    return usernames.stream().collect(Collectors.joining(\";\"));\r\n}\r\n```","```\r\n@PreFilter\r\n  (value = \"filterObject != authentication.principal.username\",\r\n  filterTarget = \"usernames\")\r\npublic String joinUsernamesAndRoles(\r\n  List<String> usernames, List<String> roles) {\r\n\r\n    return usernames.stream().collect(Collectors.joining(\";\")) \r\n      + \":\" + roles.stream().collect(Collectors.joining(\";\"));\r\n}\r\n```","```\r\n@PostFilter(\"filterObject != authentication.principal.username\")\r\npublic List<String> getAllUsernamesExceptCurrent() {\r\n    return userRoleRepository.getAllUsernames();\r\n}\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@PreAuthorize(\"hasRole('VIEWER')\")\r\npublic @interface IsViewer {\r\n}\r\n```","```\r\n@IsViewer\r\npublic String getUsername4() {\r\n    //...\r\n}\r\n```","```\r\n@Service\r\n@PreAuthorize(\"hasRole('ROLE_ADMIN')\")\r\npublic class SystemService {\r\n\r\n    public String getSystemYear(){\r\n        //...\r\n    }\r\n\r\n    public String getSystemDate(){\r\n        //...\r\n    }\r\n}\r\n```","```\r\n@PreAuthorize(\"#username == authentication.principal.username\")\r\n@PostAuthorize(\"returnObject.username == authentication.principal.nickName\")\r\npublic CustomUser securedLoadUserDetail(String username) {\r\n    return userRoleRepository.loadUserByUserName(username);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-test</artifactId>\r\n</dependency>\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration\r\npublic class MethodSecurityIntegrationTest {\r\n    // ...\r\n}\r\n```","```\r\n@Secured(\"ROLE_VIEWER\")\r\npublic String getUsername() {\r\n    SecurityContext securityContext = SecurityContextHolder.getContext();\r\n    return securityContext.getAuthentication().getName();\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"john\", roles = { \"VIEWER\" })\r\npublic void givenRoleViewer_whenCallGetUsername_thenReturnUsername() {\r\n    String userName = userRoleService.getUsername();\r\n\r\n    assertEquals(\"john\", userName);\r\n}\r\n```","```\r\n@PreAuthorize(\"hasAuthority('SYS_ADMIN')\")\r\npublic String getUsernameLC(){\r\n    return getUsername().toLowerCase();\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"JOHN\", authorities = { \"SYS_ADMIN\" })\r\npublic void givenAuthoritySysAdmin_whenCallGetUsernameLC_thenReturnUsername() {\r\n    String username = userRoleService.getUsernameInLowerCase();\r\n\r\n    assertEquals(\"john\", username);\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration\r\n@WithMockUser(username = \"john\", roles = { \"VIEWER\" })\r\npublic class MockUserAtClassLevelIntegrationTest {\r\n    //...\r\n}\r\n```","```\r\n@Test(expected = AccessDeniedException.class)\r\n@WithAnonymousUser\r\npublic void givenAnomynousUser_whenCallGetUsername_thenAccessDenied() {\r\n    userRoleService.getUsername();\r\n}\r\n```","```\r\npublic class CustomUser extends User {\r\n    private String nickName;\r\n    // getter and setter\r\n}\r\n```","```\r\n@PostAuthorize(\"returnObject.username == authentication.principal.nickName\")\r\npublic CustomUser loadUserDetail(String username) {\r\n    return userRoleRepository.loadUserByUserName(username);\r\n}\r\n```","```\r\n@Test\r\n@WithUserDetails(\r\n  value = \"john\", \r\n  userDetailsServiceBeanName = \"userDetailService\")\r\npublic void whenJohn_callLoadUserDetail_thenOK() {\r\n\r\n    CustomUser user = userService.loadUserDetail(\"jane\");\r\n\r\n    assertEquals(\"jane\", user.getNickName());\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@WithMockUser(value = \"john\", roles = \"VIEWER\")\r\npublic @interface WithMockJohnViewer { }\r\n```","```\r\n@Test\r\n@WithMockJohnViewer\r\npublic void givenMockedJohnViewer_whenCallGetUsername_thenReturnUsername() {\r\n    String userName = userRoleService.getUsername();\r\n\r\n    assertEquals(\"john\", userName);\r\n}\r\n```"]