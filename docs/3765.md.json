["```\r\n@Test\r\npublic void whenSetIntegerFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field ageField = person.getClass()\r\n        .getDeclaredField(\"age\");\r\n    ageField.setAccessible(true);\r\n\r\n    byte age = 26;\r\n    ageField.setByte(person, age);\r\n    Assertions.assertEquals(age, person.getAge());\r\n\r\n    Field uidNumberField = person.getClass()\r\n        .getDeclaredField(\"uidNumber\");\r\n    uidNumberField.setAccessible(true);\r\n\r\n    short uidNumber = 5555;\r\n    uidNumberField.setShort(person, uidNumber);\r\n    Assertions.assertEquals(uidNumber, person.getUidNumber());\r\n\r\n    Field pinCodeField = person.getClass()\r\n        .getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    int pinCode = 411057;\r\n    pinCodeField.setInt(person, pinCode);\r\n    Assertions.assertEquals(pinCode, person.getPinCode());\r\n\r\n    Field contactNumberField = person.getClass()\r\n        .getDeclaredField(\"contactNumber\");\r\n    contactNumberField.setAccessible(true);\r\n\r\n    long contactNumber = 123456789L;\r\n    contactNumberField.setLong(person, contactNumber);\r\n    Assertions.assertEquals(contactNumber, person.getContactNumber());\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoUnboxing_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field pinCodeField = person.getClass()\r\n        .getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    Integer pinCode = 411057;\r\n    pinCodeField.setInt(person, pinCode);\r\n    Assertions.assertEquals(pinCode, person.getPinCode());\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoNarrowing_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field pinCodeField = person.getClass()\r\n        .getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    short pinCode = 4110;\r\n    pinCodeField.setInt(person, pinCode);\r\n    Assertions.assertEquals(pinCode, person.getPinCode());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetFloatingTypeFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field heightField = person.getClass()\r\n        .getDeclaredField(\"height\");\r\n    heightField.setAccessible(true);\r\n\r\n    float height = 6.1242f;\r\n    heightField.setFloat(person, height);\r\n    Assertions.assertEquals(height, person.getHeight());\r\n\r\n    Field weightField = person.getClass()\r\n        .getDeclaredField(\"weight\");\r\n    weightField.setAccessible(true);\r\n\r\n    double weight = 75.2564;\r\n    weightField.setDouble(person, weight);\r\n    Assertions.assertEquals(weight, person.getWeight());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetCharacterFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field genderField = person.getClass()\r\n        .getDeclaredField(\"gender\");\r\n    genderField.setAccessible(true);\r\n\r\n    char gender = 'M';\r\n    genderField.setChar(person, gender);\r\n    Assertions.assertEquals(gender, person.getGender());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetBooleanFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field activeField = person.getClass()\r\n        .getDeclaredField(\"active\");\r\n    activeField.setAccessible(true);\r\n\r\n    activeField.setBoolean(person, true);\r\n    Assertions.assertTrue(person.isActive());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetObjectFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field nameField = person.getClass()\r\n        .getDeclaredField(\"name\");\r\n    nameField.setAccessible(true);\r\n\r\n    String name = \"Umang Budhwar\";\r\n    nameField.set(person, name);\r\n    Assertions.assertEquals(name, person.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInt_whenSetStringField_thenIllegalArgumentException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n    Field nameField = person.getClass()\r\n        .getDeclaredField(\"name\");\r\n    nameField.setAccessible(true);\r\n\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> nameField.setInt(person, 26));\r\n}\r\n```","```\r\n@Test\r\npublic void givenInt_whenSetLongField_thenIllegalArgumentException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field pinCodeField = person.getClass()\r\n        .getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    long pinCode = 411057L;\r\n\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> pinCodeField.setLong(person, pinCode));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFieldNotSetAccessible_thenIllegalAccessException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n    Field nameField = person.getClass()\r\n        .getDeclaredField(\"name\");\r\n\r\n    Assertions.assertThrows(IllegalAccessException.class, () -> nameField.set(person, \"Umang Budhwar\"));\r\n}\r\n```"]