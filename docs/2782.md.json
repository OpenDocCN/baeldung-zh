["```\r\n@Test\r\npublic void givenList_whenCallingParallelStream_shouldBeParallelStream(){\r\n    List<Long> aList = new ArrayList<>();\r\n    Stream<Long> parallelStream = aList.parallelStream();\r\n\r\n    assertTrue(parallelStream.isParallel());\r\n}\r\n```","```\r\n@Test\r\npublic void giveRangeOfLongs_whenSummedInParallel_shouldBeEqualToExpectedTotal() \r\n  throws InterruptedException, ExecutionException {\r\n\r\n    long firstNum = 1;\r\n    long lastNum = 1_000_000;\r\n\r\n    List<Long> aList = LongStream.rangeClosed(firstNum, lastNum).boxed()\r\n      .collect(Collectors.toList());\r\n\r\n    ForkJoinPool customThreadPool = new ForkJoinPool(4);\r\n    long actualTotal = customThreadPool.submit(\r\n      () -> aList.parallelStream().reduce(0L, Long::sum)).get();\r\n\r\n    assertEquals((lastNum + firstNum) * lastNum / 2, actualTotal);\r\n}\r\n```","```\r\ntry {\r\n    long actualTotal = customThreadPool.submit(\r\n      () -> aList.parallelStream().reduce(0L, Long::sum)).get();\r\n    assertEquals((lastNum + firstNum) * lastNum / 2, actualTotal);\r\n} finally {\r\n    customThreadPool.shutdown();\r\n} \r\n```"]