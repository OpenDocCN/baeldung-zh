["```\r\ninterface User {\r\n    boolean passwordIsValid();\r\n\r\n    String getName();\r\n\r\n    String getPassword();\r\n}\r\n```","```\r\ninterface UserFactory {\r\n    User create(String name, String password);\r\n}\r\n```","```\r\nclass CommonUser implements User {\r\n\r\n    String name;\r\n    String password;\r\n\r\n    @Override\r\n    public boolean passwordIsValid() {\r\n        return password != null && password.length() > 5;\r\n    }\r\n\r\n    // Constructor and getters\r\n}\r\n```","```\r\nclass CommonUserFactory implements UserFactory {\r\n    @Override\r\n    public User create(String name, String password) {\r\n        return new CommonUser(name, password);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid given123Password_whenPasswordIsNotValid_thenIsFalse() {\r\n    User user = new CommonUser(\"Baeldung\", \"123\");\r\n\r\n    assertThat(user.passwordIsValid()).isFalse();\r\n}\r\n```","```\r\nclass UserRegisterInteractor implements UserInputBoundary {\r\n\r\n    final UserRegisterDsGateway userDsGateway;\r\n    final UserPresenter userPresenter;\r\n    final UserFactory userFactory;\r\n\r\n    // Constructor\r\n\r\n    @Override\r\n    public UserResponseModel create(UserRequestModel requestModel) {\r\n        if (userDsGateway.existsByName(requestModel.getName())) {\r\n            return userPresenter.prepareFailView(\"User already exists.\");\r\n        }\r\n        User user = userFactory.create(requestModel.getName(), requestModel.getPassword());\r\n        if (!user.passwordIsValid()) {\r\n            return userPresenter.prepareFailView(\"User password must have more than 5 characters.\");\r\n        }\r\n        LocalDateTime now = LocalDateTime.now();\r\n        UserDsRequestModel userDsModel = new UserDsRequestModel(user.getName(), user.getPassword(), now);\r\n\r\n        userDsGateway.save(userDsModel);\r\n\r\n        UserResponseModel accountResponseModel = new UserResponseModel(user.getName(), now.toString());\r\n        return userPresenter.prepareSuccessView(accountResponseModel);\r\n    }\r\n}\r\n```","```\r\ninterface UserInputBoundary {\r\n    UserResponseModel create(UserRequestModel requestModel);\r\n}\r\n```","```\r\ninterface UserRegisterDsGateway {\r\n    boolean existsByName(String name);\r\n\r\n    void save(UserDsRequestModel requestModel);\r\n}\r\n```","```\r\ninterface UserPresenter {\r\n    UserResponseModel prepareSuccessView(UserResponseModel user);\r\n\r\n    UserResponseModel prepareFailView(String error);\r\n} \r\n```","```\r\nclass UserRequestModel {\r\n\r\n    String login;\r\n    String password;\r\n\r\n    // Getters, setters, and constructors\r\n}\r\n```","```\r\n@Test\r\nvoid givenBaeldungUserAnd12345Password_whenCreate_thenSaveItAndPrepareSuccessView() {\r\n    given(userDsGateway.existsByIdentifier(\"identifier\"))\r\n        .willReturn(true);\r\n\r\n    interactor.create(new UserRequestModel(\"baeldung\", \"123\"));\r\n\r\n    then(userDsGateway).should()\r\n        .save(new UserDsRequestModel(\"baeldung\", \"12345\", now()));\r\n    then(userPresenter).should()\r\n        .prepareSuccessView(new UserResponseModel(\"baeldung\", now()));\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"user\")\r\nclass UserDataMapper {\r\n\r\n    @Id\r\n    String name;\r\n\r\n    String password;\r\n\r\n    LocalDateTime creationTime;\r\n\r\n    //Getters, setters, and constructors\r\n}\r\n```","```\r\n@Repository\r\ninterface JpaUserRepository extends JpaRepository<UserDataMapper, String> {\r\n}\r\n```","```\r\nclass JpaUser implements UserRegisterDsGateway {\r\n\r\n    final JpaUserRepository repository;\r\n\r\n    // Constructor\r\n\r\n    @Override\r\n    public boolean existsByName(String name) {\r\n        return repository.existsById(name);\r\n    }\r\n\r\n    @Override\r\n    public void save(UserDsRequestModel requestModel) {\r\n        UserDataMapper accountDataMapper = new UserDataMapper(requestModel.getName(), requestModel.getPassword(), requestModel.getCreationTime());\r\n        repository.save(accountDataMapper);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\nclass UserRegisterController {\r\n\r\n    final UserInputBoundary userInput;\r\n\r\n    // Constructor\r\n\r\n    @PostMapping(\"/user\")\r\n    UserResponseModel create(@RequestBody UserRequestModel requestModel) {\r\n        return userInput.create(requestModel);\r\n    }\r\n}\r\n```","```\r\nclass UserResponseFormatter implements UserPresenter {\r\n\r\n    @Override\r\n    public UserResponseModel prepareSuccessView(UserResponseModel response) {\r\n        LocalDateTime responseTime = LocalDateTime.parse(response.getCreationTime());\r\n        response.setCreationTime(responseTime.format(DateTimeFormatter.ofPattern(\"hh:mm:ss\")));\r\n        return response;\r\n    }\r\n\r\n    @Override\r\n    public UserResponseModel prepareFailView(String error) {\r\n        throw new ResponseStatusException(HttpStatus.CONFLICT, error);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenDateAnd3HourTime_whenPrepareSuccessView_thenReturnOnly3HourTime() {\r\n    UserResponseModel modelResponse = new UserResponseModel(\"baeldung\", \"2020-12-20T03:00:00.000\");\r\n    UserResponseModel formattedResponse = userResponseFormatter.prepareSuccessView(modelResponse);\r\n\r\n    assertThat(formattedResponse.getCreationTime()).isEqualTo(\"03:00:00\");\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class CleanArchitectureApplication {\r\n    public static void main(String[] args) {\r\n      SpringApplication.run(CleanArchitectureApplication.class);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\nBeanFactoryPostProcessor beanFactoryPostProcessor(ApplicationContext beanRegistry) {\r\n    return beanFactory -> {\r\n        genericApplicationContext(\r\n          (BeanDefinitionRegistry) ((AnnotationConfigServletWebServerApplicationContext) beanRegistry)\r\n            .getBeanFactory());\r\n    };\r\n}\r\n\r\nvoid genericApplicationContext(BeanDefinitionRegistry beanRegistry) {\r\n    ClassPathBeanDefinitionScanner beanDefinitionScanner = new ClassPathBeanDefinitionScanner(beanRegistry);\r\n    beanDefinitionScanner.addIncludeFilter(removeModelAndEntitiesFilter());\r\n    beanDefinitionScanner.scan(\"com.baeldung.pattern.cleanarchitecture\");\r\n}\r\n\r\nstatic TypeFilter removeModelAndEntitiesFilter() {\r\n    return (MetadataReader mr, MetadataReaderFactory mrf) -> !mr.getClassMetadata()\r\n      .getClassName()\r\n      .endsWith(\"Model\");\r\n}\r\n```"]