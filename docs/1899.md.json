["```\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth.boot</groupId>\r\n    <artifactId>spring-security-oauth2-autoconfigure</artifactId>\r\n    <version>2.1.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableResourceServer\r\npublic class ResourceServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ResourceServerApplication.class, args);\r\n    }\r\n}\r\n```","```\r\nsecurity.oauth2.resource.jwk.key-set-uri=\r\n  http://localhost:8081/sso-auth-server/.well-known/jwks.json\r\n```","```\r\nspring.security.oauth2.resourceserver.jwk-set-uri=\r\n  http://localhost:8081/sso-auth-server/.well-known/jwks.json\r\n```","```\r\n@Configuration\r\n@EnableAuthorizationServer\r\npublic class JwkAuthorizationServerConfiguration {\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\nsecurity.oauth2.client.client-id=bael-client\r\nsecurity.oauth2.client.client-secret=bael-secret\r\n```","```\r\ncurl bael-client:bael-secret\\\r\n  @localhost:8081/sso-auth-server/oauth/token \\\r\n  -d grant_type=client_credentials \\\r\n  -d scope=any\r\n```","```\r\n\"access_token\": \"af611028-643f-4477-9319-b5aa8dc9408f\"\r\n```","```\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    return new JwtAccessTokenConverter();\r\n}\r\n```","```\r\n@Bean\r\npublic TokenStore tokenStore() {\r\n    return new JwtTokenStore(accessTokenConverter());\r\n}\r\n```","```\r\n\"access_token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\r\n  .\r\n  eyJzY29wZSI6WyJhbnkiXSwiZXhwIjoxNTYxOTcy...\r\n  .\r\n  XKH70VUHeafHLaUPVXZI9E9pbFxrJ35PqBvrymxtvGI\"\r\n```","```\r\nsecurity.oauth2.authorization.token-key-access=permitAll()\r\n```","```\r\nconverter.setSigningKey(\"bael\");\r\n```","```\r\nsecurity.oauth2.client.client-id=bael-client\r\nsecurity.oauth2.client.client-secret=bael-secret\r\n```","```\r\n## Single key URI:\r\nsecurity.oauth2.resource.jwt.key-uri=\r\n  http://localhost:8081/sso-auth-server/oauth/token_key\r\n## Introspection endpoint:\r\nsecurity.oauth2.resource.token-info-uri=\r\n  http://localhost:8081/sso-auth-server/oauth/check_token\r\n```","```\r\n## Verifier Key\r\nsecurity.oauth2.resource.jwt.key-value=bael\r\n```","```\r\ncd $JAVA_HOME/bin\r\n```","```\r\n./keytool -genkeypair \\\r\n  -alias bael-oauth-jwt \\\r\n  -keyalg RSA \\\r\n  -keypass bael-pass \\\r\n  -keystore bael-jwt.jks \\\r\n  -storepass bael-pass\r\n```","```\r\n<build>\r\n    <resources>\r\n        <resource>\r\n            <directory>src/main/resources</directory>\r\n            <filtering>false</filtering>\r\n        </resource>\r\n        <resource>\r\n            <directory>src/main/resources/filtered</directory>\r\n            <filtering>true</filtering>\r\n        </resource>\r\n    </resources>\r\n</build>\r\n```","```\r\nClassPathResource ksFile =\r\n  new ClassPathResource(\"bael-jwt.jks\");\r\nKeyStoreKeyFactory ksFactory =\r\n  new KeyStoreKeyFactory(ksFile, \"bael-pass\".toCharArray());\r\nKeyPair keyPair = ksFactory.getKeyPair(\"bael-oauth-jwt\");\r\n```","```\r\nconverter.setKeyPair(keyPair);\r\n```","```\r\n<dependency>\r\n    <groupId>com.nimbusds</groupId>\r\n    <artifactId>nimbus-jose-jwt</artifactId>\r\n    <version>7.3</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic JWKSet jwkSet() {\r\n    RSAKey.Builder builder = new RSAKey.Builder((RSAPublicKey) keyPair().getPublic())\r\n      .keyUse(KeyUse.SIGNATURE)\r\n      .algorithm(JWSAlgorithm.RS256)\r\n      .keyID(\"bael-key-id\");\r\n    return new JWKSet(builder.build());\r\n}\r\n```","```\r\n@RestController\r\npublic class JwkSetRestController {\r\n\r\n    @Autowired\r\n    private JWKSet jwkSet;\r\n\r\n    @GetMapping(\"/.well-known/jwks.json\")\r\n    public Map<String, Object> keys() {\r\n        return this.jwkSet.toJSONObject();\r\n    }\r\n}\r\n```","```\r\npublic class JwtCustomHeadersAccessTokenConverter\r\n  extends JwtAccessTokenConverter {\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\nprivate Map<String, String> customHeaders = new HashMap<>();\r\nfinal RsaSigner signer;\r\n\r\npublic JwtCustomHeadersAccessTokenConverter(\r\n  Map<String, String> customHeaders,\r\n  KeyPair keyPair) {\r\n    super();\r\n    super.setKeyPair(keyPair);\r\n    this.signer = new RsaSigner((RSAPrivateKey) keyPair.getPrivate());\r\n    this.customHeaders = customHeaders;\r\n}\r\n```","```\r\nprivate JsonParser objectMapper = JsonParserFactory.create();\r\n\r\n@Override\r\nprotected String encode(OAuth2AccessToken accessToken,\r\n  OAuth2Authentication authentication) {\r\n    String content;\r\n    try {\r\n        content = this.objectMapper\r\n          .formatMap(getAccessTokenConverter()\r\n          .convertAccessToken(accessToken, authentication));\r\n    } catch (Exception ex) {\r\n        throw new IllegalStateException(\r\n          \"Cannot convert access token to JSON\", ex);\r\n    }\r\n    String token = JwtHelper.encode(\r\n      content,\r\n      this.signer,\r\n      this.customHeaders).getEncoded();\r\n    return token;\r\n}\r\n```","```\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    Map<String, String> customHeaders =\r\n      Collections.singletonMap(\"kid\", \"bael-key-id\");\r\n    return new  JwtCustomHeadersAccessTokenConverter(\r\n      customHeaders,\r\n      keyPair());\r\n}\r\n```"]