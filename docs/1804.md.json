["```\r\nList source = Arrays.asList(\"List\", \"Map\", \"Set\", \"Tree\");\r\n```","```\r\n{\r\n    3: [\"Map\", \"Set\"],\r\n    4: [\"List\", \"Tree\"]\r\n}\r\n```","```\r\npublic Map<Integer, List> groupingByStringLength(List source, \r\n    Supplier<Map<Integer, List>> mapSupplier, \r\n    Supplier<List> listSupplier) {\r\n    return source.stream()\r\n        .collect(Collectors.groupingBy(String::length, mapSupplier, Collectors.toCollection(listSupplier)));\r\n}\r\n```","```\r\nMap<Integer, List> convertedMap = converter.groupingByStringLength(source, HashMap::new, ArrayList::new);\r\nassertTrue(convertedMap.get(3).contains(\"Map\"));\r\n```","```\r\npublic Map<Integer, List> collectorToMapByStringLength(List source, \r\n        Supplier<Map<Integer, List>> mapSupplier, \r\n        Supplier<List> listSupplier)\r\n```","```\r\nFunction<String, Integer> keyMapper = String::length;\r\n\r\nFunction<String, List> valueMapper = (element) -> {\r\n    List collection = listSupplier.get();\r\n    collection.add(element);\r\n    return collection;\r\n};\r\n```","```\r\nBinaryOperator<List> mergeFunction = (existing, replacement) -> {\r\n    existing.addAll(replacement);\r\n    return existing;\r\n};\r\n```","```\r\nsource.stream().collect(Collectors.toMap(keyMapper, valueMapper, mergeFunction, mapSupplier))\r\n```","```\r\nMap<Integer, List> convertedMap = converter.collectorToMapByStringLength(source, HashMap::new, ArrayList::new);\r\nassertTrue(convertedMap.get(3).contains(\"Map\"));\r\n```","```\r\npublic Map<Integer, List> streamCollectByStringLength(List source, \r\n        Supplier<Map<Integer, List>> mapSupplier, \r\n        Supplier<List> listSupplier)\r\n```","```\r\nBiConsumer<Map<Integer, List>, String> accumulator = (response, element) -> {\r\n    Integer key = element.length();\r\n    List values = response.getOrDefault(key, listSupplier.get());\r\n    values.add(element);\r\n    response.put(key, values);\r\n};\r\n```","```\r\nBiConsumer<Map<Integer, List>, Map<Integer, List>> combiner = (res1, res2) -> {\r\n    res1.putAll(res2);\r\n};\r\n```","```\r\nsource.stream().collect(mapSupplier, accumulator, combiner);\r\n```","```\r\nMap<Integer, List> convertedMap = converter.streamCollectByStringLength(source, HashMap::new, ArrayList::new);\r\nassertTrue(convertedMap.get(3).contains(\"Map\")); \r\n```"]