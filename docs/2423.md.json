["```\r\n<dependency>\r\n    <groupId>com.google.code.gson</groupId>\r\n    <artifactId>gson</artifactId>\r\n    <version>2.8.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>commons-lang</groupId>\r\n    <artifactId>commons-lang</artifactId>\r\n    <version>2.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\nclass Address {\r\n\r\n    private String street;\r\n    private String city;\r\n    private String country;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\nclass User {\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private Address address;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenShallowCopying_thenObjectsShouldNotBeSame() {\r\n\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n\r\n    User shallowCopy = new User(\r\n      pm.getFirstName(), pm.getLastName(), pm.getAddress());\r\n\r\n    assertThat(shallowCopy)\r\n      .isNotSameAs(pm);\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_ThenCopyShouldChange() {\r\n\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    User shallowCopy = new User(\r\n      pm.getFirstName(), pm.getLastName(), pm.getAddress());\r\n\r\n    address.setCountry(\"Great Britain\");\r\n    assertThat(shallowCopy.getAddress().getCountry())\r\n      .isEqualTo(pm.getAddress().getCountry());\r\n}\r\n```","```\r\npublic Address(Address that) {\r\n    this(that.getStreet(), that.getCity(), that.getCountry());\r\n}\r\n```","```\r\npublic User(User that) {\r\n    this(that.getFirstName(), that.getLastName(), new Address(that.getAddress()));\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_thenCopyShouldNotChange() {\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    User deepCopy = new User(pm);\r\n\r\n    address.setCountry(\"Great Britain\");\r\n    assertNotEquals(\r\n      pm.getAddress().getCountry(), \r\n      deepCopy.getAddress().getCountry());\r\n}\r\n```","```\r\n@Override\r\npublic Object clone() {\r\n    try {\r\n        return (Address) super.clone();\r\n    } catch (CloneNotSupportedException e) {\r\n        return new Address(this.street, this.getCity(), this.getCountry());\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic Object clone() {\r\n    User user = null;\r\n    try {\r\n        user = (User) super.clone();\r\n    } catch (CloneNotSupportedException e) {\r\n        user = new User(\r\n          this.getFirstName(), this.getLastName(), this.getAddress());\r\n    }\r\n    user.address = (Address) this.address.clone();\r\n    return user;\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_thenCloneCopyShouldNotChange() {\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    User deepCopy = (User) pm.clone();\r\n\r\n    address.setCountry(\"Great Britain\");\r\n\r\n    assertThat(deepCopy.getAddress().getCountry())\r\n      .isNotEqualTo(pm.getAddress().getCountry());\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_thenCommonsCloneShouldNotChange() {\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    User deepCopy = (User) SerializationUtils.clone(pm);\r\n\r\n    address.setCountry(\"Great Britain\");\r\n\r\n    assertThat(deepCopy.getAddress().getCountry())\r\n      .isNotEqualTo(pm.getAddress().getCountry());\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_thenGsonCloneShouldNotChange() {\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    Gson gson = new Gson();\r\n    User deepCopy = gson.fromJson(gson.toJson(pm), User.class);\r\n\r\n    address.setCountry(\"Great Britain\");\r\n\r\n    assertThat(deepCopy.getAddress().getCountry())\r\n      .isNotEqualTo(pm.getAddress().getCountry());\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyingOriginalObject_thenJacksonCopyShouldNotChange() \r\n  throws IOException {\r\n    Address address = new Address(\"Downing St 10\", \"London\", \"England\");\r\n    User pm = new User(\"Prime\", \"Minister\", address);\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n    User deepCopy = objectMapper\r\n      .readValue(objectMapper.writeValueAsString(pm), User.class);\r\n\r\n    address.setCountry(\"Great Britain\");\r\n\r\n    assertThat(deepCopy.getAddress().getCountry())\r\n      .isNotEqualTo(pm.getAddress().getCountry());\r\n}\r\n```"]