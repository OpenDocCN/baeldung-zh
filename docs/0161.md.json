["```\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)\r\npublic class SecurityConfig {\r\n\r\n    // config\r\n\r\n}\r\n```","```\r\n@Bean\r\npublic UserDetailsService userDetailsService(BCryptPasswordEncoder bCryptPasswordEncoder) {\r\n    InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\r\n    manager.createUser(User.withUsername(\"user\")\r\n      .password(bCryptPasswordEncoder.encode(\"userPass\"))\r\n      .roles(\"USER\")\r\n      .build());\r\n    manager.createUser(User.withUsername(\"admin\")\r\n      .password(bCryptPasswordEncoder.encode(\"adminPass\"))\r\n      .roles(\"USER\", \"ADMIN\")\r\n      .build());\r\n    return manager;\r\n}\r\n```","```\r\n@Bean\r\npublic AuthenticationManager authManager(HttpSecurity http, BCryptPasswordEncoder bCryptPasswordEncoder, UserDetailService userDetailService) \r\n  throws Exception {\r\n    return http.getSharedObject(AuthenticationManagerBuilder.class)\r\n      .userDetailsService(userDetailsService)\r\n      .passwordEncoder(bCryptPasswordEncoder)\r\n      .and()\r\n      .build();\r\n} \r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http.csrf()\r\n      .disable()\r\n      .authorizeRequests()\r\n      .antMatchers(HttpMethod.DELETE)\r\n      .hasRole(\"ADMIN\")\r\n      .antMatchers(\"/admin/**\")\r\n      .hasAnyRole(\"ADMIN\")\r\n      .antMatchers(\"/user/**\")\r\n      .hasAnyRole(\"USER\", \"ADMIN\")\r\n      .antMatchers(\"/login/**\")\r\n      .anonymous()\r\n      .anyRequest()\r\n      .authenticated()\r\n      .and()\r\n      .httpBasic()\r\n      .and()\r\n      .sessionManagement()\r\n      .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n\r\n    return http.build();\r\n} \r\n```","```\r\n@Bean\r\npublic WebSecurityCustomizer webSecurityCustomizer() {\r\n    return (web) -> web.debug(securityDebug)\r\n      .ignoring()\r\n      .antMatchers(\"/css/**\", \"/js/**\", \"/img/**\", \"/lib/**\", \"/favicon.ico\");\r\n}\r\n```","```\r\n@RestController\r\npublic class ResourceController {\r\n    @GetMapping(\"/login\")\r\n    public String loginEndpoint() {\r\n        return \"Login!\";\r\n    }\r\n\r\n    @GetMapping(\"/admin\")\r\n    public String adminEndpoint() {\r\n        return \"Admin!\";\r\n    }\r\n\r\n    @GetMapping(\"/user\")\r\n    public String userEndpoint() {\r\n        return \"User!\";\r\n    }\r\n\r\n    @GetMapping(\"/all\")\r\n    public String allRolesEndpoint() {\r\n        return \"All Roles!\";\r\n    }\r\n\r\n    @DeleteMapping(\"/delete\")\r\n    public String deleteEndpoint(@RequestBody String s) {\r\n        return \"I am deleting \" + s;\r\n    }\r\n}\r\n```","```\r\n@Test\r\n@WithAnonymousUser\r\npublic void whenAnonymousAccessLogin_thenOk() throws Exception {\r\n    mvc.perform(get(\"/login\"))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\n@WithAnonymousUser\r\npublic void whenAnonymousAccessRestrictedEndpoint_thenIsUnauthorized() throws Exception {\r\n    mvc.perform(get(\"/all\"))\r\n      .andExpect(status().isUnauthorized());\r\n} \r\n```","```\r\n@Test\r\n@WithUserDetails()\r\npublic void whenUserAccessUserSecuredEndpoint_thenOk() throws Exception {\r\n    mvc.perform(get(\"/user\"))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\n@WithUserDetails()\r\npublic void whenUserAccessRestrictedEndpoint_thenOk() throws Exception {\r\n    mvc.perform(get(\"/all\"))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\n@WithUserDetails()\r\npublic void whenUserAccessAdminSecuredEndpoint_thenIsForbidden() throws Exception {\r\n    mvc.perform(get(\"/admin\"))\r\n      .andExpect(status().isForbidden());\r\n}\r\n\r\n@Test\r\n@WithUserDetails()\r\npublic void whenUserAccessDeleteSecuredEndpoint_thenIsForbidden() throws Exception {\r\n    mvc.perform(delete(\"/delete\"))\r\n      .andExpect(status().isForbidden());\r\n} \r\n```","```\r\n@Test\r\n@WithUserDetails(value = \"admin\")\r\npublic void whenAdminAccessUserEndpoint_thenOk() throws Exception {\r\n    mvc.perform(get(\"/user\"))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\n@WithUserDetails(value = \"admin\")\r\npublic void whenAdminAccessAdminSecuredEndpoint_thenIsOk() throws Exception {\r\n    mvc.perform(get(\"/admin\"))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\n@WithUserDetails(value = \"admin\")\r\npublic void whenAdminAccessDeleteSecuredEndpoint_thenIsOk() throws Exception {\r\n    mvc.perform(delete(\"/delete\").content(\"{}\"))\r\n      .andExpect(status().isOk());\r\n} \r\n```"]