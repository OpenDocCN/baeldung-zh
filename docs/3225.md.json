["```\r\n{\r\n   \"name\": \"Baeldung\",\r\n   \"isOnline\": true,\r\n   \"topics\": [ \"Java\", \"Spring\", \"Kotlin\", \"Scala\", \"Linux\" ]\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>uk.org.webcompere</groupId>\r\n    <artifactId>model-assert</artifactId>\r\n    <version>1.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/name\").isText(\"Baeldung\");\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/topics/1\").isText(\"Spring\");\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/name\").isText(\"Baeldung\")\r\n  .at(\"/topics/1\").isText(\"Spring\");\r\n```","```\r\nString expected = loadFile(EXPECTED_JSON_PATH);\r\nassertThat(jsonString)\r\n  .isEqualTo(expected);\r\n```","```\r\norg.opentest4j.AssertionFailedError: \r\nexpected: \"{\r\n    \"name\": \"Baeldung\",\r\n    \"isOnline\": true,\r\n    \"topics\": [ \"Java\", \"Spring\", \"Kotlin\", \"Scala\", \"Linux\" ]\r\n}\"\r\nbut was : \"{\"name\": \"Baeldung\",\"isOnline\": true,\"topics\": [ \"Java\", \"Spring\", \"Kotlin\", \"Scala\", \"Linux\" ]}\"\r\n```","```\r\nassertJson(jsonString)\r\n  .isEqualTo(EXPECTED_JSON_PATH);\r\n```","```\r\nMap<String, String> map = new HashMap<>();\r\nmap.put(\"name\", \"baeldung\");\r\n\r\nassertJson(map)\r\n  .isEqualToYaml(\"name: baeldung\");\r\n```","```\r\nassertYaml(\"name: baeldung\")\r\n  .isEqualTo(map);\r\n```","```\r\nassertJson(jsonString)\r\n  .isNotNull()\r\n  .isNotNumber()\r\n  .isObject()\r\n  .containsKey(\"name\");\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/topics\").hasSize(5);\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/isOnline\").booleanNode().isTrue();\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/name\").textContains(\"ael\");\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/name\").matches(\"[A-Z].+\");\r\n```","```\r\nassertJson(\"{count: 12}\")\r\n  .at(\"/count\").isBetween(1, 25);\r\n```","```\r\nassertJson(\"{height: 6.3}\")\r\n  .at(\"/height\").isGreaterThanDouble(6.0);\r\n```","```\r\nassertJson(\"{height: 6.3}\")\r\n  .at(\"/height\").isNumberEqualTo(6.3);\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/topics\").isArrayContaining(\"Scala\", \"Spring\");\r\n```","```\r\nassertJson(jsonString)\r\n   .at(\"/topics\")\r\n   .isArrayContainingExactlyInAnyOrder(\"Scala\", \"Spring\", \"Java\", \"Linux\", \"Kotlin\");\r\n```","```\r\nassertJson(ACTUAL_JSON)\r\n  .at(\"/topics\")\r\n  .isArrayContainingExactly(\"Java\", \"Spring\", \"Kotlin\", \"Scala\", \"Linux\");\r\n```","```\r\nassertJson(jsonString)\r\n  .at(\"/topics\")\r\n  .isEqualTo(\"[ \\\"Java\\\", \\\"Spring\\\", \\\"Kotlin\\\", \\\"Scala\\\", \\\"Linux\\\" ]\");\r\n```","```\r\nString actualJson = \"{a:{d:3, c:2, b:1}}\";\r\nString expectedJson = \"{a:{b:1, c:2, d:3}}\";\r\n```","```\r\nassertJson(actualJson)\r\n  .where().keysInAnyOrder()\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nassertJson(actualJson)\r\n  .where()\r\n    .at(\"/a\").keysInAnyOrder()\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nString actualJson = \"{a:[1, 2, 3, 4, 5]}\";\r\nString expectedJson = \"{a:[5, 4, 3, 2, 1]}\";\r\n\r\nassertJson(actualJson)\r\n  .where().arrayInAnyOrder()\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nString actualJson = \"{user:{name: \\\"Baeldung\\\", url:\\\"http://www.baeldung.com\\\"}}\";\r\nString expectedJson = \"{user:{name: \\\"Baeldung\\\"}}\";\r\n\r\nassertJson(actualJson)\r\n  .where()\r\n    .at(\"/user/url\").isIgnored()\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nString actualJson = \"{user:{credentials:[\" +\r\n  \"{id:\\\"a7dc2567-3340-4a3b-b1ab-9ce1778f265d\\\",role:\\\"Admin\\\"},\" +\r\n  \"{id:\\\"09da84ba-19c2-4674-974f-fd5afff3a0e5\\\",role:\\\"Sales\\\"}]}}\";\r\nString expectedJson = \"{user:{credentials:\" +\r\n  \"[{id:\\\"???\\\",role:\\\"Admin\\\"},\" +\r\n  \"{id:\\\"???\\\",role:\\\"Sales\\\"}]}}\";\r\n\r\nassertJson(actualJson)\r\n  .where()\r\n    .path(\"user\",\"credentials\", ANY, \"id\").isIgnored()\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nassertJson(actualJson)\r\n  .where()\r\n    .path(ANY_SUBTREE, \"id\").matches(GUID_PATTERN)\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nprivate static <T> WhereDsl<T> idsAreGuids(WhereDsl<T> where) {\r\n    return where.path(ANY_SUBTREE, \"id\").matches(GUID_PATTERN);\r\n}\r\n```","```\r\nassertJson(actualJson)\r\n  .where()\r\n    .configuredBy(where -> idsAreGuids(where))\r\n  .isEqualTo(expectedJson);\r\n```","```\r\nMatcher<String> matcher = json()\r\n  .at(\"/name\").hasValue(\"Baeldung\");\r\n```","```\r\nMatcherAssert.assertThat(jsonString, json()\r\n  .at(\"/name\").hasValue(\"Baeldung\")\r\n  .at(\"/topics/1\").isText(\"Spring\"));\r\n```","```\r\npublic interface DataService {\r\n    boolean isUserLoggedIn(String userDetails);\r\n}\r\n\r\n@Mock\r\nprivate DataService mockDataService;\r\n\r\n@Test\r\nvoid givenUserIsOnline_thenIsLoggedIn() {\r\n    given(mockDataService.isUserLoggedIn(argThat(json()\r\n      .at(\"/isOnline\").isTrue()\r\n      .toArgumentMatcher())))\r\n      .willReturn(true);\r\n\r\n    assertThat(mockDataService.isUserLoggedIn(jsonString))\r\n      .isTrue();\r\n\r\n    verify(mockDataService)\r\n      .isUserLoggedIn(argThat(json()\r\n        .at(\"/name\").isText(\"Baeldung\")\r\n        .toArgumentMatcher()));\r\n}\r\n```"]