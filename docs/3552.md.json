["```\r\n@MultiField(\r\n  mainField = @Field(type = Text, fielddata = true),\r\n  otherFields = {\r\n      @InnerField(suffix = \"verbatim\", type = Keyword)\r\n  }\r\n)\r\nprivate String title;\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title\", \"elasticsearch data\"))\r\n  .build();\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title.verbatim\", \"Second Article About Elasticsearch\"))\r\n  .build();\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title\",\"Search engines\").operator(Operator.AND))\r\n  .build();\r\nSearchHits<Article> articles = elasticsearchTemplate()\r\n  .search(searchQuery, Article.class, IndexCoordinates.of(\"blog\"));\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title\", \"Engines Solutions\"))\r\n  .build();\r\nSearchHits<Article> articles = elasticsearchTemplate()\r\n  .search(searchQuery, Article.class, IndexCoordinates.of(\"blog\"));\r\nassertEquals(1, articles.getTotalHits());\r\nassertEquals(\"Search engines\", articles.getSearchHit(0).getContent().getTitle());\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title\", \"spring date elasticsearch\")\r\n  .operator(Operator.AND)\r\n  .fuzziness(Fuzziness.ONE)\r\n  .prefixLength(3))\r\n  .build();\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchPhraseQuery(\"title\", \"spring elasticsearch\").slop(1))\r\n  .build();\r\n```","```\r\nNativeSearchQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(multiMatchQuery(\"tutorial\")\r\n    .field(\"title\")\r\n    .field(\"tags\")\r\n    .type(MultiMatchQueryBuilder.Type.BEST_FIELDS))\r\n  .build();\r\n```","```\r\nTermsAggregationBuilder aggregation = AggregationBuilders.terms(\"top_tags\")\r\n  .field(\"tags\")\r\n  .order(Terms.Order.count(false));\r\nSearchSourceBuilder builder = new SearchSourceBuilder().aggregation(aggregation);\r\n\r\nSearchRequest searchRequest = \r\n  new SearchRequest().indices(\"blog\").types(\"article\").source(builder);\r\nSearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);\r\n\r\nMap<String, Aggregation> results = response.getAggregations().asMap();\r\nStringTerms topTags = (StringTerms) results.get(\"top_tags\");\r\n\r\nList<String> keys = topTags.getBuckets()\r\n  .stream()\r\n  .map(b -> b.getKeyAsString())\r\n  .collect(toList());\r\nassertEquals(asList(\"elasticsearch\", \"spring data\", \"search engines\", \"tutorial\"), keys);\r\n```"]