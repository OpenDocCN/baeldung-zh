["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-validator</artifactId>\r\n    <version>6.0.10.Final</version>\r\n</dependency> \r\n```","```\r\n@Documented\r\n@Constraint(validatedBy = ContactNumberValidator.class)\r\n@Target( { ElementType.METHOD, ElementType.FIELD })\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ContactNumberConstraint {\r\n    String message() default \"Invalid phone number\";\r\n    Class<?>[] groups() default {};\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class ContactNumberValidator implements \r\n  ConstraintValidator<ContactNumberConstraint, String> {\r\n\r\n    @Override\r\n    public void initialize(ContactNumberConstraint contactNumber) {\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String contactField,\r\n      ConstraintValidatorContext cxt) {\r\n        return contactField != null && contactField.matches(\"[0-9]+\")\r\n          && (contactField.length() > 8) && (contactField.length() < 14);\r\n    }\r\n\r\n}\r\n```","```\r\n@ContactNumberConstraint\r\nprivate String phone;\r\n```","```\r\n@Controller\r\npublic class ValidatedPhoneController {\r\n\r\n    @GetMapping(\"/validatePhone\")\r\n    public String loadFormPage(Model m) {\r\n        m.addAttribute(\"validatedPhone\", new ValidatedPhone());\r\n        return \"phoneHome\";\r\n    }\r\n\r\n    @PostMapping(\"/addValidatePhone\")\r\n    public String submitForm(@Valid ValidatedPhone validatedPhone,\r\n      BindingResult result, Model m) {\r\n        if(result.hasErrors()) {\r\n            return \"phoneHome\";\r\n        }\r\n        m.addAttribute(\"message\", \"Successfully saved phone: \"\r\n          + validatedPhone.toString());\r\n        return \"phoneHome\";\r\n    }   \r\n}\r\n```","```\r\n<form:form \r\n  action=\"/${pageContext.request.contextPath}/addValidatePhone\"\r\n  modelAttribute=\"validatedPhone\">\r\n    <label for=\"phoneInput\">Phone: </label>\r\n    <form:input path=\"phone\" id=\"phoneInput\" />\r\n    <form:errors path=\"phone\" cssClass=\"error\" />\r\n    <input type=\"submit\" value=\"Submit\" />\r\n</form:form> \r\n```","```\r\n@Test\r\npublic void givenPhonePageUri_whenMockMvc_thenReturnsPhonePage(){\r\n    this.mockMvc.\r\n      perform(get(\"/validatePhone\")).andExpect(view().name(\"phoneHome\"));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenPhoneURIWithPostAndFormData_whenMockMVC_thenVerifyErrorResponse() {\r\n\r\n    this.mockMvc.perform(MockMvcRequestBuilders.post(\"/addValidatePhone\").\r\n      accept(MediaType.TEXT_HTML).\r\n      param(\"phoneInput\", \"123\")).\r\n      andExpect(model().attributeHasFieldErrorCode(\r\n          \"validatedPhone\",\"phone\",\"ContactNumberConstraint\")).\r\n      andExpect(view().name(\"phoneHome\")).\r\n      andExpect(status().isOk()).\r\n      andDo(print());\r\n}\r\n```","```\r\n@Constraint(validatedBy = FieldsValueMatchValidator.class)\r\n@Target({ ElementType.TYPE })\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface FieldsValueMatch {\r\n\r\n    String message() default \"Fields values don't match!\";\r\n\r\n    String field();\r\n\r\n    String fieldMatch();\r\n\r\n    @Target({ ElementType.TYPE })\r\n    @Retention(RetentionPolicy.RUNTIME)\r\n    @interface List {\r\n        FieldsValueMatch[] value();\r\n    }\r\n}\r\n```","```\r\npublic class FieldsValueMatchValidator \r\n  implements ConstraintValidator<FieldsValueMatch, Object> {\r\n\r\n    private String field;\r\n    private String fieldMatch;\r\n\r\n    public void initialize(FieldsValueMatch constraintAnnotation) {\r\n        this.field = constraintAnnotation.field();\r\n        this.fieldMatch = constraintAnnotation.fieldMatch();\r\n    }\r\n\r\n    public boolean isValid(Object value, \r\n      ConstraintValidatorContext context) {\r\n\r\n        Object fieldValue = new BeanWrapperImpl(value)\r\n          .getPropertyValue(field);\r\n        Object fieldMatchValue = new BeanWrapperImpl(value)\r\n          .getPropertyValue(fieldMatch);\r\n\r\n        if (fieldValue != null) {\r\n            return fieldValue.equals(fieldMatchValue);\r\n        } else {\r\n            return fieldMatchValue == null;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@FieldsValueMatch.List({ \r\n    @FieldsValueMatch(\r\n      field = \"password\", \r\n      fieldMatch = \"verifyPassword\", \r\n      message = \"Passwords do not match!\"\r\n    ), \r\n    @FieldsValueMatch(\r\n      field = \"email\", \r\n      fieldMatch = \"verifyEmail\", \r\n      message = \"Email addresses do not match!\"\r\n    )\r\n})\r\npublic class NewUserForm {\r\n    private String email;\r\n    private String verifyEmail;\r\n    private String password;\r\n    private String verifyPassword;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Controller\r\npublic class NewUserController {\r\n\r\n    @GetMapping(\"/user\")\r\n    public String loadFormPage(Model model) {\r\n        model.addAttribute(\"newUserForm\", new NewUserForm());\r\n        return \"userHome\";\r\n    }\r\n\r\n    @PostMapping(\"/user\")\r\n    public String submitForm(@Valid NewUserForm newUserForm, \r\n      BindingResult result, Model model) {\r\n        if (result.hasErrors()) {\r\n            return \"userHome\";\r\n        }\r\n        model.addAttribute(\"message\", \"Valid form\");\r\n        return \"userHome\";\r\n    }\r\n}\r\n```","```\r\npublic class ClassValidationMvcTest {\r\n  private MockMvc mockMvc;\r\n\r\n    @Before\r\n    public void setup(){\r\n        this.mockMvc = MockMvcBuilders\r\n          .standaloneSetup(new NewUserController()).build();\r\n    }\r\n\r\n    @Test\r\n    public void givenMatchingEmailPassword_whenPostNewUserForm_thenOk() \r\n      throws Exception {\r\n        this.mockMvc.perform(MockMvcRequestBuilders\r\n          .post(\"/user\")\r\n          .accept(MediaType.TEXT_HTML).\r\n          .param(\"email\", \"[[email protected]](/web/20221004131738/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n          .param(\"verifyEmail\", \"[[email protected]](/web/20221004131738/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n          .param(\"password\", \"pass\")\r\n          .param(\"verifyPassword\", \"pass\"))\r\n          .andExpect(model().errorCount(0))\r\n          .andExpect(status().isOk());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNotMatchingEmailPassword_whenPostNewUserForm_thenOk() \r\n  throws Exception {\r\n    this.mockMvc.perform(MockMvcRequestBuilders\r\n      .post(\"/user\")\r\n      .accept(MediaType.TEXT_HTML)\r\n      .param(\"email\", \"[[email protected]](/web/20221004131738/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .param(\"verifyEmail\", \"[[email protected]](/web/20221004131738/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .param(\"password\", \"pass\")\r\n      .param(\"verifyPassword\", \"passsss\"))\r\n      .andExpect(model().errorCount(2))\r\n      .andExpect(status().isOk());\r\n    }\r\n```"]