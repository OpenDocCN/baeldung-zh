["```\r\njava.lang.Object\r\n|_java.lang.Throwable\r\n  |_java.lang.Error\r\n    |_java.lang.LinkageError\r\n      |_java.lang.IncompatibleClassChangeError\r\n        |_java.lang.AbstractMethodError\r\n```","```\r\npublic interface BaeldungQueue {\r\n    void enqueue(Object o);\r\n    Object dequeue();\r\n} \r\n```","```\r\npublic class GoodQueue implements BaeldungQueue {\r\n    @Override\r\n    public void enqueue(Object o) {\r\n       //implementation \r\n    }\r\n\r\n    @Override\r\n    public Object dequeue() {\r\n        //implementation \r\n    }\r\n} \r\n```","```\r\npublic class Application {\r\n    BaeldungQueue queue = new GoodQueue();\r\n\r\n    public void someMethod(Object element) {\r\n        queue.enqueue(element);\r\n        // ...\r\n        queue.dequeue();\r\n        // ...\r\n    }\r\n} \r\n```","```\r\npublic interface BaeldungQueue {\r\n    void enqueue(Object o);\r\n    Object dequeue();\r\n\r\n    int size();\r\n} \r\n```","```\r\npublic class Application {\r\n    BaeldungQueue queue = new GoodQueue();\r\n\r\n    public void someMethod(Object element) {\r\n        // ...\r\n        int size = queue.size(); //<-- AbstractMethodError will be thrown\r\n        // ...\r\n    }\r\n} \r\n```","```\r\nclass AbstractMethodErrorUnitTest {\r\n    private static final String url = \"jdbc:h2:mem:A-DATABASE;INIT=CREATE SCHEMA IF NOT EXISTS myschema\";\r\n    private static final String username = \"sa\";\r\n\r\n    @Test\r\n    void givenOldH2Database_whenCallgetSchemaMethod_thenThrowAbstractMethodError() throws SQLException {\r\n        Connection conn = DriverManager.getConnection(url, username, \"\");\r\n        assertNotNull(conn);\r\n        Assertions.assertThrows(AbstractMethodError.class, () -> conn.getSchema());\r\n    }\r\n} \r\n```"]