["```\r\n@GetMapping(\"/greeting\")\r\npublic ResponseEntity<String> greeting(@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String language) {\r\n    // code that uses the language variable\r\n    return new ResponseEntity<String>(greeting, HttpStatus.OK);\r\n}\r\n```","```\r\n@GetMapping(\"/double\")\r\npublic ResponseEntity<String> doubleNumber(@RequestHeader(\"my-number\") int myNumber) {\r\n    return new ResponseEntity<String>(String.format(\"%d * 2 = %d\", \r\n      myNumber, (myNumber * 2)), HttpStatus.OK);\r\n}\r\n```","```\r\n@GetMapping(\"/listHeaders\")\r\npublic ResponseEntity<String> listAllHeaders(\r\n  @RequestHeader Map<String, String> headers) {\r\n    headers.forEach((key, value) -> {\r\n        LOG.info(String.format(\"Header '%s' = %s\", key, value));\r\n    });\r\n\r\n    return new ResponseEntity<String>(\r\n      String.format(\"Listed %d headers\", headers.size()), HttpStatus.OK);\r\n}\r\n```","```\r\n@GetMapping(\"/multiValue\")\r\npublic ResponseEntity<String> multiValue(\r\n  @RequestHeader MultiValueMap<String, String> headers) {\r\n    headers.forEach((key, value) -> {\r\n        LOG.info(String.format(\r\n          \"Header '%s' = %s\", key, value.stream().collect(Collectors.joining(\"|\"))));\r\n    });\r\n\r\n    return new ResponseEntity<String>(\r\n      String.format(\"Listed %d headers\", headers.size()), HttpStatus.OK);\r\n}\r\n```","```\r\n@GetMapping(\"/getBaseUrl\")\r\npublic ResponseEntity<String> getBaseUrl(@RequestHeader HttpHeaders headers) {\r\n    InetSocketAddress host = headers.getHost();\r\n    String url = \"http://\" + host.getHostName() + \":\" + host.getPort();\r\n    return new ResponseEntity<String>(String.format(\"Base URL = %s\", url), HttpStatus.OK);\r\n}\r\n```","```\r\npublic ResponseEntity<String> greeting(@RequestHeader(HttpHeaders.ACCEPT_LANGUAGE) String language) {}\r\n```","```\r\npublic ResponseEntity<String> greeting(\r\n  @RequestHeader(name = HttpHeaders.ACCEPT_LANGUAGE) String language) {}\r\n```","```\r\npublic ResponseEntity<String> greeting(\r\n  @RequestHeader(value = HttpHeaders.ACCEPT_LANGUAGE) String language) {}\r\n```","```\r\n@GetMapping(\"/nonRequiredHeader\")\r\npublic ResponseEntity<String> evaluateNonRequiredHeader(\r\n  @RequestHeader(value = \"optional-header\", required = false) String optionalHeader) {\r\n    return new ResponseEntity<String>(String.format(\r\n      \"Was the optional header present? %s!\",\r\n        (optionalHeader == null ? \"No\" : \"Yes\")),HttpStatus.OK);\r\n}\r\n```","```\r\n@GetMapping(\"/default\")\r\npublic ResponseEntity<String> evaluateDefaultHeaderValue(\r\n  @RequestHeader(value = \"optional-header\", defaultValue = \"3600\") int optionalHeader) {\r\n    return new ResponseEntity<String>(\r\n      String.format(\"Optional Header is %d\", optionalHeader), HttpStatus.OK);\r\n}\r\n```"]