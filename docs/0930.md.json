["```\r\npublic class Vehicles {\r\n\r\n    abstract static class Vehicle {\r\n\r\n        private final String registrationNumber;\r\n\r\n        public Vehicle(String registrationNumber) {\r\n            this.registrationNumber = registrationNumber;\r\n        }\r\n\r\n        public String getRegistrationNumber() {\r\n            return registrationNumber;\r\n        }\r\n\r\n    }\r\n\r\n    public static final class Car extends Vehicle {\r\n\r\n        private final int numberOfSeats;\r\n\r\n        public Car(int numberOfSeats, String registrationNumber) {\r\n            super(registrationNumber);\r\n            this.numberOfSeats = numberOfSeats;\r\n        }\r\n\r\n        public int getNumberOfSeats() {\r\n            return numberOfSeats;\r\n        }\r\n\r\n    }\r\n\r\n    public static final class Truck extends Vehicle {\r\n\r\n        private final int loadCapacity;\r\n\r\n        public Truck(int loadCapacity, String registrationNumber) {\r\n            super(registrationNumber);\r\n            this.loadCapacity = loadCapacity;\r\n        }\r\n\r\n        public int getLoadCapacity() {\r\n            return loadCapacity;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n```","```\r\npublic sealed interface Service permits Car, Truck {\r\n\r\n    int getMaxServiceIntervalInMonths();\r\n\r\n    default int getMaxDistanceBetweenServicesInKilometers() {\r\n        return 100000;\r\n    }\r\n\r\n}\r\n```","```\r\npublic abstract sealed class Vehicle permits Car, Truck {\r\n\r\n    protected final String registrationNumber;\r\n\r\n    public Vehicle(String registrationNumber) {\r\n        this.registrationNumber = registrationNumber;\r\n    }\r\n\r\n    public String getRegistrationNumber() {\r\n        return registrationNumber;\r\n    }\r\n\r\n}\r\n```","```\r\npublic final class Truck extends Vehicle implements Service {\r\n\r\n    private final int loadCapacity;\r\n\r\n    public Truck(int loadCapacity, String registrationNumber) {\r\n        super(registrationNumber);\r\n        this.loadCapacity = loadCapacity;\r\n    }\r\n\r\n    public int getLoadCapacity() {\r\n        return loadCapacity;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxServiceIntervalInMonths() {\r\n        return 18;\r\n    }\r\n\r\n}\r\n```","```\r\npublic non-sealed class Car extends Vehicle implements Service {\r\n\r\n    private final int numberOfSeats;\r\n\r\n    public Car(int numberOfSeats, String registrationNumber) {\r\n        super(registrationNumber);\r\n        this.numberOfSeats = numberOfSeats;\r\n    }\r\n\r\n    public int getNumberOfSeats() {\r\n        return numberOfSeats;\r\n    }\r\n\r\n    @Override\r\n    public int getMaxServiceIntervalInMonths() {\r\n        return 12;\r\n    }\r\n\r\n}\r\n```","```\r\nif (vehicle instanceof Car) {\r\n    return ((Car) vehicle).getNumberOfSeats();\r\n} else if (vehicle instanceof Truck) {\r\n    return ((Truck) vehicle).getLoadCapacity();\r\n} else {\r\n    throw new RuntimeException(\"Unknown instance of Vehicle\");\r\n}\r\n```","```\r\nif (vehicle instanceof Car car) {\r\n    return car.getNumberOfSeats();\r\n} else if (vehicle instanceof Truck truck) {\r\n    return truck.getLoadCapacity();\r\n} else {\r\n    throw new RuntimeException(\"Unknown instance of Vehicle\");\r\n}\r\n```","```\r\npublic sealed interface Vehicle permits Car, Truck {\r\n\r\n    String getRegistrationNumber();\r\n\r\n}\r\n\r\npublic record Car(int numberOfSeats, String registrationNumber) implements Vehicle {\r\n\r\n    @Override\r\n    public String getRegistrationNumber() {\r\n        return registrationNumber;\r\n    }\r\n\r\n    public int getNumberOfSeats() {\r\n        return numberOfSeats;\r\n    }\r\n\r\n}\r\n\r\npublic record Truck(int loadCapacity, String registrationNumber) implements Vehicle {\r\n\r\n    @Override\r\n    public String getRegistrationNumber() {\r\n        return registrationNumber;\r\n    }\r\n\r\n    public int getLoadCapacity() {\r\n        return loadCapacity;\r\n    }\r\n\r\n}\r\n```","```\r\nAssertions.assertThat(truck.getClass().isSealed()).isEqualTo(false);\r\nAssertions.assertThat(truck.getClass().getSuperclass().isSealed()).isEqualTo(true);\r\nAssertions.assertThat(truck.getClass().getSuperclass().getPermittedSubclasses())\r\n  .contains(ClassDesc.of(truck.getClass().getCanonicalName()));\r\n```"]