["```\r\nset1: {\"Kotlin\", \"Java\", \"Rust\", \"Python\", \"C++\"}\r\nset2: {\"Kotlin\", \"Java\", \"Rust\", \"Ruby\", \"C#\"}\r\n```","```\r\nSet<String> set1 = Stream.of(\"Kotlin\", \"Java\", \"Rust\", \"Python\", \"C++\").collect(Collectors.toSet());\r\nSet<String> set2 = Stream.of(\"Kotlin\", \"Java\", \"Rust\", \"Ruby\", \"C#\").collect(Collectors.toSet());\r\nSet<String> expectedOnlyInSet1 = Set.of(\"Python\", \"C++\");\r\n\r\nset1.removeAll(set2);\r\n\r\nassertThat(set1).isEqualTo(expectedOnlyInSet1);\r\n```","```\r\nSet<String> immutableSet1 = Set.of(\"Kotlin\", \"Java\", \"Rust\", \"Python\", \"C++\");\r\nSet<String> immutableSet2 = Set.of(\"Kotlin\", \"Java\", \"Rust\", \"Ruby\", \"C#\");\r\nSet<String> expectedOnlyInSet1 = Set.of(\"Python\", \"C++\");\r\n```","```\r\nSet<String> actualOnlyInSet1 = immutableSet1.stream().filter(e -> !immutableSet2.contains(e)).collect(Collectors.toSet());\r\nassertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1); \r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.1-jre</version>\r\n</dependency> \r\n```","```\r\nSet<String> actualOnlyInSet1 = Sets.difference(immutableSet1, immutableSet2);\r\nassertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1); \r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.4</version>\r\n</dependency> \r\n```","```\r\nSet<String> actualOnlyInSet1 = new HashSet<>(CollectionUtils.removeAll(immutableSet1, immutableSet2));\r\nassertThat(actualOnlyInSet1).isEqualTo(expectedOnlyInSet1); \r\n```","```\r\nSet<String> expectedDiff = Set.of(\"Python\", \"C++\", \"Ruby\", \"C#\");\r\n```","```\r\npublic static <T> Set<T> findSymmetricDiff(Set<T> set1, Set<T> set2) {\r\n    Map<T, Integer> map = new HashMap<>();\r\n    set1.forEach(e -> putKey(map, e));\r\n    set2.forEach(e -> putKey(map, e));\r\n    return map.entrySet().stream()\r\n      .filter(e -> e.getValue() == 1)\r\n      .map(Map.Entry::getKey)\r\n      .collect(Collectors.toSet());\r\n}\r\n\r\nprivate static <T> void putKey(Map<T, Integer> map, T key) {\r\n    if (map.containsKey(key)) {\r\n        map.replace(key, Integer.MAX_VALUE);\r\n    } else {\r\n        map.put(key, 1);\r\n    }\r\n} \r\n```","```\r\nSet<String> actualDiff = SetDiff.findSymmetricDiff(immutableSet1, immutableSet2);\r\nassertThat(actualDiff).isEqualTo(expectedDiff); \r\n```","```\r\nSet<String> actualDiff = SetUtils.disjunction(immutableSet1, immutableSet2);\r\nassertThat(actualDiff).isEqualTo(expectedDiff); \r\n```"]