["```\r\n<dependency>\r\n    <groupId>com.mashape.unirest</groupId>\r\n    <artifactId>unirest-java</artifactId>\r\n    <version>1.4.9</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void shouldReturnStatusOkay() {\r\n    HttpResponse<JsonNode> jsonResponse \r\n      = Unirest.get(\"http://www.mocky.io/v2/5a9ce37b3100004f00ab5154\")\r\n      .header(\"accept\", \"application/json\").queryString(\"apiKey\", \"123\")\r\n      .asJson();\r\n\r\n    assertNotNull(jsonResponse.getBody());\r\n    assertEquals(200, jsonResponse.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void shouldReturnStatusAccepted() {\r\n    Map<String, String> headers = new HashMap<>();\r\n    headers.put(\"accept\", \"application/json\");\r\n    headers.put(\"Authorization\", \"Bearer 5a9ce37b3100004f00ab5154\");\r\n\r\n    Map<String, Object> fields = new HashMap<>();\r\n    fields.put(\"name\", \"Sam Baeldung\");\r\n    fields.put(\"id\", \"PSP123\");\r\n\r\n    HttpResponse<JsonNode> jsonResponse \r\n      = Unirest.put(\"http://www.mocky.io/v2/5a9ce7853100002a00ab515e\")\r\n      .headers(headers).fields(fields)\r\n      .asJson();\r\n\r\n    assertNotNull(jsonResponse.getBody());\r\n    assertEquals(202, jsonResponse.getStatus());\r\n}\r\n```","```\r\nHttpResponse<JsonNode> jsonResponse \r\n  = Unirest.get(\"http://www.mocky.io/v2/5a9ce37b3100004f00ab5154\")\r\n  .queryString(\"apiKey\", \"123\")\r\n```","```\r\nHttpResponse<JsonNode> jsonResponse \r\n  = Unirest.get(\"http://www.mocky.io/v2/5a9ce37b3100004f00ab5154/{userId}\")\r\n  .routeParam(\"userId\", \"123\")\r\n```","```\r\n@Test\r\npublic void givenRequestBodyWhenCreatedThenCorrect() {\r\n\r\n    HttpResponse<JsonNode> jsonResponse \r\n      = Unirest.post(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n      .body(\"{\\\"name\\\":\\\"Sam Baeldung\\\", \\\"city\\\":\\\"viena\\\"}\")\r\n      .asJson();\r\n\r\n    assertEquals(201, jsonResponse.getStatus());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.12.4</version>\r\n</dependency>\r\n```","```\r\nUnirest.setObjectMapper(new ObjectMapper() {\r\n    com.fasterxml.jackson.databind.ObjectMapper mapper \r\n      = new com.fasterxml.jackson.databind.ObjectMapper();\r\n\r\n    public String writeValue(Object value) {\r\n        return mapper.writeValueAsString(value);\r\n    }\r\n\r\n    public <T> T readValue(String value, Class<T> valueType) {\r\n        return mapper.readValue(value, valueType);\r\n    }\r\n});\r\n```","```\r\n@Test\r\npublic void givenArticleWhenCreatedThenCorrect() {\r\n    Article article \r\n      = new Article(\"ID1213\", \"Guide to Rest\", \"baeldung\");\r\n    HttpResponse<JsonNode> jsonResponse \r\n      = Unirest.post(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n      .body(article)\r\n      .asJson();\r\n\r\n    assertEquals(201, jsonResponse.getStatus());\r\n}\r\n```","```\r\nUnirest.post(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\nUnirest.put(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\nUnirest.get(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\nUnirest.delete(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\nUnirest.patch(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\nUnirest.options(\"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n```","```\r\n//...\r\njsonResponse.getStatus()\r\n\r\n//...\r\n```","```\r\n//...\r\njsonResponse.getHeaders();\r\n//...\r\n```","```\r\n//...\r\njsonResponse.getBody();\r\njsonResponse.getRawBody();\r\n//...\r\n```","```\r\n@Test\r\npublic void whenAysncRequestShouldReturnOk() {\r\n    Future<HttpResponse<JsonNode>> future = Unirest.post(\r\n      \"http://www.mocky.io/v2/5a9ce37b3100004f00ab5154?mocky-delay=10000ms\")\r\n      .header(\"accept\", \"application/json\")\r\n      .asJsonAsync(new Callback<JsonNode>() {\r\n\r\n        public void failed(UnirestException e) {\r\n            // Do something if the request failed\r\n        }\r\n\r\n        public void completed(HttpResponse<JsonNode> response) {\r\n            // Do something if the request is successful\r\n        }\r\n\r\n        public void cancelled() {\r\n            // Do something if the request is cancelled\r\n        }\r\n        });\r\n\r\n    assertEquals(200, future.get().getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileWhenUploadedThenCorrect() {\r\n\r\n    HttpResponse<JsonNode> jsonResponse = Unirest.post(\r\n      \"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n      .field(\"file\", new File(\"/path/to/file\"))\r\n      .asJson();\r\n\r\n    assertEquals(201, jsonResponse.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void givenByteStreamWhenUploadedThenCorrect() {\r\n    try (InputStream inputStream = new FileInputStream(\r\n      new File(\"/path/to/file/artcile.txt\"))) {\r\n        byte[] bytes = new byte[inputStream.available()];\r\n        inputStream.read(bytes);\r\n        HttpResponse<JsonNode> jsonResponse = Unirest.post(\r\n          \"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n          .field(\"file\", bytes, \"article.txt\")\r\n          .asJson();\r\n\r\n        assertEquals(201, jsonResponse.getStatus());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenInputStreamWhenUploadedThenCorrect() {\r\n    try (InputStream inputStream = new FileInputStream(\r\n      new File(\"/path/to/file/artcile.txt\"))) {\r\n\r\n        HttpResponse<JsonNode> jsonResponse = Unirest.post(\r\n          \"http://www.mocky.io/v2/5a9ce7663100006800ab515d\")\r\n          .field(\"file\", inputStream, ContentType.APPLICATION_OCTET_STREAM, \"article.txt\").asJson();\r\n\r\n        assertEquals(201, jsonResponse.getStatus());\r\n    }\r\n}\r\n```","```\r\nUnirest.setConcurrency(20, 5);\r\n```","```\r\nUnirest.setTimeouts(20000, 15000);\r\n```","```\r\nUnirest.setDefaultHeader(\"X-app-name\", \"baeldung-unirest\");\r\nUnirest.setDefaultHeader(\"X-request-id\", \"100004f00ab5\");\r\n```","```\r\nUnirest.clearDefaultHeaders();\r\n```","```\r\nUnirest.setProxy(new HttpHost(\"localhost\", 8080));\r\n```","```\r\nUnirest.shutdown();\r\n```"]