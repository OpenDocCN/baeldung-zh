["```\r\n@ApplicationPath(\"/exception-handling/*\")\r\npublic class ExceptionHandlingConfig extends ResourceConfig {\r\n    public ExceptionHandlingConfig() {\r\n        packages(\"com.baeldung.jersey.exceptionhandling.rest\");\r\n    }\r\n}\r\n```","```\r\npublic class Wallet {\r\n    private String id;\r\n    private Double balance = 0.0;\r\n\r\n    // getters and setters\r\n\r\n    public Double addBalance(Double amount) {\r\n        return balance += amount;\r\n    }\r\n\r\n    public boolean hasFunds(Double amount) {\r\n        return (balance - amount) >= 0;\r\n    }\r\n}\r\n```","```\r\n@Path(\"/stocks\")\r\npublic class StocksResource {\r\n    // POST and GET methods\r\n}\r\n```","```\r\n@Path(\"/wallets\")\r\npublic class WalletsResource {\r\n    // POST and GET methods\r\n}\r\n```","```\r\n@GET\r\n@Path(\"/{ticker}\")\r\n@Produces(MediaType.APPLICATION_JSON)\r\npublic Response get(@PathParam(\"ticker\") String id) {\r\n    Optional<Stock> stock = stocksRepository.findById(id);\r\n    stock.orElseThrow(() -> new IllegalArgumentException(\"ticker\"));\r\n\r\n    return Response.ok(stock.get())\r\n      .build();\r\n}\r\n```","```\r\npublic class InvalidTradeException extends WebApplicationException {\r\n    public InvalidTradeException() {\r\n        super(\"invalid trade operation\", Response.Status.NOT_ACCEPTABLE);\r\n    }\r\n}\r\n```","```\r\npublic class RestErrorResponse {\r\n    private Object subject;\r\n    private String message;\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\n@POST\r\n@Path(\"/{wallet}/buy/{ticker}\")\r\n@Produces(MediaType.APPLICATION_JSON)\r\npublic Response postBuyStock(\r\n  @PathParam(\"wallet\") String walletId, @PathParam(\"ticker\") String id) {\r\n    Optional<Stock> stock = stocksRepository.findById(id);\r\n    stock.orElseThrow(InvalidTradeException::new);\r\n\r\n    Optional<Wallet> w = walletsRepository.findById(walletId);\r\n    w.orElseThrow(InvalidTradeException::new);\r\n\r\n    Wallet wallet = w.get();\r\n    Double price = stock.get()\r\n      .getPrice();\r\n\r\n    if (!wallet.hasFunds(price)) {\r\n        RestErrorResponse response = new RestErrorResponse();\r\n        response.setSubject(wallet);\r\n        response.setMessage(\"insufficient balance\");\r\n        throw new WebApplicationException(Response.status(Status.NOT_ACCEPTABLE)\r\n          .entity(response)\r\n          .build());\r\n    }\r\n\r\n    wallet.addBalance(-price);\r\n    walletsRepository.save(wallet);\r\n\r\n    return Response.ok(wallet)\r\n      .build();\r\n}\r\n```","```\r\n$ curl 'http://localhost:8080/jersey/exception-handling/stocks' -H 'Content-Type: application/json' -d '{\r\n    \"id\": \"STOCK\",\r\n    \"price\": 51.57\r\n}'\r\n\r\n{\"id\": \"STOCK\", \"price\": 51.57}\r\n```","```\r\n$ curl 'http://localhost:8080/jersey/exception-handling/wallets' -H 'Content-Type: application/json' -d '{\r\n    \"id\": \"WALLET\",\r\n    \"balance\": 100.0\r\n}'\r\n\r\n{\"balance\": 100.0, \"id\": \"WALLET\"}\r\n```","```\r\n$ curl -X POST 'http://localhost:8080/jersey/exception-handling/wallets/WALLET/buy/STOCK'\r\n\r\n{\"balance\": 48.43, \"id\": \"WALLET\"}\r\n```","```\r\n{\r\n    \"message\": \"insufficient balance\",\r\n    \"subject\": {\r\n        \"balance\": 48.43,\r\n        \"id\": \"WALLET\"\r\n    }\r\n} \r\n```","```\r\npublic class ServerExceptionMapper implements ExceptionMapper<WebApplicationException> {\r\n    @Override\r\n    public Response toResponse(WebApplicationException exception) {\r\n        String message = exception.getMessage();\r\n        Response response = exception.getResponse();\r\n        Status status = response.getStatusInfo().toEnum();\r\n\r\n        return Response.status(status)\r\n          .entity(status + \": \" + message)\r\n          .type(MediaType.TEXT_PLAIN)\r\n          .build();\r\n    }\r\n} \r\n```","```\r\nswitch (status) {\r\n    case METHOD_NOT_ALLOWED:\r\n        message = \"HTTP METHOD NOT ALLOWED\";\r\n        break;\r\n    case INTERNAL_SERVER_ERROR:\r\n        message = \"internal validation - \" + exception;\r\n        break;\r\n    default:\r\n        message = \"[unhandled response code] \" + exception;\r\n}\r\n```","```\r\npublic class IllegalArgumentExceptionMapper\r\n  implements ExceptionMapper<IllegalArgumentException> {\r\n    @Override\r\n    public Response toResponse(IllegalArgumentException exception) {\r\n        return Response.status(Response.Status.EXPECTATION_FAILED)\r\n          .entity(build(exception.getMessage()))\r\n          .type(MediaType.APPLICATION_JSON)\r\n          .build();\r\n    }\r\n\r\n    private RestErrorResponse build(String message) {\r\n        RestErrorResponse response = new RestErrorResponse();\r\n        response.setMessage(\"an illegal argument was provided: \" + message);\r\n        return response;\r\n    }\r\n}\r\n```","```\r\npublic ExceptionHandlingConfig() {\r\n    // packages ...\r\n    register(IllegalArgumentExceptionMapper.class);\r\n    register(ServerExceptionMapper.class);\r\n}\r\n```","```\r\n$ curl 'http://localhost:8080/jersey/exception-handling/stocks/NONEXISTENT'\r\n\r\n{\"message\": \"an illegal argument was provided: ticker\"}\r\n```","```\r\n$ curl -X POST 'http://localhost:8080/jersey/exception-handling/stocks/STOCK'\r\n\r\nMethod Not Allowed: HTTP 405 Method Not Allowed\r\n```"]