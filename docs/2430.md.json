["```\r\nstatic JNINativeMethod methods[] = {\r\n    {\"hashCode\",    \"()I\",                    (void *)&JVM;_IHashCode},\r\n    {\"wait\",        \"(J)V\",                   (void *)&JVM;_MonitorWait},\r\n    {\"notify\",      \"()V\",                    (void *)&JVM;_MonitorNotify},\r\n    {\"notifyAll\",   \"()V\",                    (void *)&JVM;_MonitorNotifyAll},\r\n    {\"clone\",       \"()Ljava/lang/Object;\",   (void *)&JVM;_Clone},\r\n};\r\n\r\nJNIEXPORT void JNICALL\r\nJava_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)\r\n{\r\n    (*env)->RegisterNatives(env, cls,\r\n                            methods, sizeof(methods)/sizeof(methods[0]));\r\n} \r\n```","```\r\npublic class RegisterNativesHelloWorldJNI {\r\n\r\n    public native void register();\r\n    public native String sayHello();\r\n\r\n    public static void main(String[] args) {\r\n        RegisterNativesHelloWorldJNI helloWorldJNI = new RegisterNativesHelloWorldJNI();\r\n        helloWorldJNI.register();\r\n        helloWorldJNI.sayHello();\r\n    }\r\n} \r\n```","```\r\nstatic JNINativeMethod methods[] = {\r\n  {\"sayHello\", \"()Ljava/lang/String;\", (void*) &hello; },\r\n};\r\n\r\nJNIEXPORT void JNICALL Java_com_baeldung_jni_RegisterNativesHelloWorldJNI_register (JNIEnv* env, jobject thsObject) {\r\n    jclass clazz = env->FindClass(\"com/baeldung/jni/RegisterNativesHelloWorldJNI\");\r\n\r\n    (env)->RegisterNatives(clazz, methods, sizeof(methods)/sizeof(methods[0]));\r\n} \r\n```","```\r\nJNIEXPORT jstring JNICALL hello (JNIEnv* env, jobject thisObject) {\r\n    std::string hello = \"Hello from registered native C++ !!\";\r\n    std::cout << hello << std::endl;\r\n    return env->NewStringUTF(hello.c_str());\r\n}\r\n```","```\r\nHello from registered native C++ !!\r\n```"]