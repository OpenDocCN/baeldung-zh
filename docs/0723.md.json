["```\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-web</artifactId> \r\n    <version>2.4.3</version> \r\n</dependency> \r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-validation</artifactId> \r\n    <version>2.4.3</version> \r\n</dependency> \r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId> \r\n    <version>2.4.3</version> \r\n</dependency> \r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-data-jpa</artifactId> \r\n    <version>2.4.3</version> \r\n</dependency> \r\n<dependency> \r\n    <groupId>com.h2database</groupId> \r\n    <artifactId>h2</artifactId> \r\n    <scope>runtime</scope> \r\n    <version>1.4.200</version> \r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @NotEmpty(message = \"User's name cannot be empty.\")\r\n    @Size(min = 5, max = 250)\r\n    private String fullName;\r\n\r\n    @NotEmpty(message = \"User's email cannot be empty.\")\r\n    private String email;\r\n\r\n    @NotNull(message = \"User's age cannot be null.\")\r\n    @Min(value = 18)\r\n    private Integer age;\r\n\r\n    private String country;\r\n\r\n    private String phoneNumber;\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\n@Repository\r\npublic interface UserRepository extends JpaRepository<User, Long> {}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository repository;\r\n    @GetMapping(\"/add\")\r\n    public String showAddUserForm(User user) {\r\n        return \"errors/addUser\";\r\n    }\r\n\r\n    @PostMapping(\"/add\")\r\n    public String addUser(@Valid User user, BindingResult result, Model model) {\r\n        if (result.hasErrors()) {\r\n            return \"errors/addUser\";\r\n        }\r\n        repository.save(user);\r\n        model.addAttribute(\"users\", repository.findAll());\r\n        return \"errors/home\";\r\n    }\r\n}\r\n```","```\r\n<p th:if=\"${#fields.hasErrors('age')}\">Invalid Age</p>\r\n```","```\r\n<p  th:if=\"${#fields.hasErrors('age')}\" th:class=\"${#fields.hasErrors('age')}? error\">\r\n  Invalid Age</p>\r\n```","```\r\n<style>\r\n    .error {\r\n        color: red;\r\n    }\r\n</style>\r\n```","```\r\n<div>\r\n    <label for=\"email\">Email</label> <input type=\"text\" th:field=\"*{email}\" />\r\n    <p th:if=\"${#fields.hasErrors('email')}\" th:errorclass=\"error\" th:errors=\"*{email}\" />\r\n</div>\r\n```","```\r\n<div>\r\n    <label for=\"fullName\">Name</label> <input type=\"text\" th:field=\"*{fullName}\" \r\n      id=\"fullName\" placeholder=\"Full Name\">\r\n    <ul>\r\n        <li th:each=\"err : ${#fields.errors('fullName')}\" th:text=\"${err}\" class=\"error\" />\r\n    </ul>\r\n</div>\r\n```","```\r\n<div th:if=\"${#fields.hasAnyErrors()}\">\r\n    <ul>\r\n        <li th:each=\"err : ${#fields.allErrors()}\" th:text=\"${err}\" />\r\n    </ul>\r\n</div>\r\n```","```\r\n<h4>Errors on a single field:</h4>\r\n<div th:if=\"${#fields.hasErrors('${user.email}')}\"\r\n th:errors=\"*{user.email}\"></div>\r\n<ul>\r\n    <li th:each=\"err : ${#fields.errors('user.*')}\" th:text=\"${err}\" />\r\n</ul>\r\n```","```\r\n<h4>All errors:</h4>\r\n<ul>\r\n<li th:each=\"err : ${#fields.errors('user.*')}\" th:text=\"${err}\" />\r\n</ul>\r\n```","```\r\n@Service\r\npublic class UserValidationService {\r\n    public String validateUser(User user) {\r\n        String message = \"\";\r\n        if (user.getCountry() != null && user.getPhoneNumber() != null) {\r\n            if (user.getCountry().equalsIgnoreCase(\"India\") \r\n              && !user.getPhoneNumber().startsWith(\"91\")) {\r\n                message = \"Phone number is invalid for \" + user.getCountry();\r\n            }\r\n        }\r\n        return message;\r\n    }\r\n}\r\n```","```\r\n@PostMapping(\"/add\")\r\npublic String addUser(@Valid User user, BindingResult result, Model model) {\r\n    String err = validationService.validateUser(user);\r\n    if (!err.isEmpty()) {\r\n        ObjectError error = new ObjectError(\"globalError\", err);\r\n        result.addError(error);\r\n    }\r\n    if (result.hasErrors()) {\r\n        return \"errors/addUser\";\r\n    }\r\n    repository.save(user);\r\n    model.addAttribute(\"users\", repository.findAll());\r\n    return \"errors/home\";\r\n}\r\n```","```\r\n<div th:if=\"${#fields.hasErrors('global')}\">\r\n    <h3>Global errors:</h3>\r\n    <p th:each=\"err : ${#fields.errors('global')}\" th:text=\"${err}\" class=\"error\" />\r\n</div>\r\n```"]