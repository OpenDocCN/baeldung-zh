["```\r\n<dependency>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jooq</artifactId>\r\n    <version>3.14.15</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jdbc</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.191</version>\r\n</dependency>\r\n```","```\r\nDROP TABLE IF EXISTS author_book, author, book;\r\n\r\nCREATE TABLE author (\r\n  id             INT          NOT NULL PRIMARY KEY,\r\n  first_name     VARCHAR(50),\r\n  last_name      VARCHAR(50)  NOT NULL\r\n);\r\n\r\nCREATE TABLE book (\r\n  id             INT          NOT NULL PRIMARY KEY,\r\n  title          VARCHAR(100) NOT NULL\r\n);\r\n\r\nCREATE TABLE author_book (\r\n  author_id      INT          NOT NULL,\r\n  book_id        INT          NOT NULL,\r\n\r\n  PRIMARY KEY (author_id, book_id),\r\n  CONSTRAINT fk_ab_author     FOREIGN KEY (author_id)  REFERENCES author (id)  \r\n    ON UPDATE CASCADE ON DELETE CASCADE,\r\n  CONSTRAINT fk_ab_book       FOREIGN KEY (book_id)    REFERENCES book   (id)\r\n);\r\n\r\nINSERT INTO author VALUES \r\n  (1, 'Kathy', 'Sierra'), \r\n  (2, 'Bert', 'Bates'), \r\n  (3, 'Bryan', 'Basham');\r\n\r\nINSERT INTO book VALUES \r\n  (1, 'Head First Java'), \r\n  (2, 'Head First Servlets and JSP'),\r\n  (3, 'OCA/OCP Java SE 7 Programmer');\r\n\r\nINSERT INTO author_book VALUES (1, 1), (1, 3), (2, 1);\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>properties-maven-plugin</artifactId>\r\n    <version>1.0.0</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>initialize</phase>\r\n            <goals>\r\n                <goal>read-project-properties</goal>\r\n            </goals>\r\n            <configuration>\r\n                <files>\r\n                    <file>src/main/resources/intro_config.properties</file>\r\n                </files>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>sql-maven-plugin</artifactId>\r\n    <version>1.5</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>initialize</phase>\r\n            <goals>\r\n                <goal>execute</goal>\r\n            </goals>\r\n            <configuration>\r\n                <driver>${db.driver}</driver>\r\n                <url>${db.url}</url>\r\n                <username>${db.username}</username>\r\n                <password>${db.password}</password>\r\n                <srcFiles>\r\n                    <srcFile>src/main/resources/intro_schema.sql</srcFile>\r\n                </srcFiles>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>com.h2database</groupId>\r\n            <artifactId>h2</artifactId>\r\n            <version>1.4.191</version>\r\n        </dependency>\r\n    </dependencies>\r\n</plugin>\r\n```","```\r\n<plugin>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jooq-codegen-maven</artifactId>\r\n    <version>${org.jooq.version}</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>generate-sources</phase>\r\n            <goals>\r\n                <goal>generate</goal>\r\n            </goals>\r\n            <configuration>\r\n                <jdbc>\r\n                    <driver>${db.driver}</driver>\r\n                    <url>${db.url}</url>\r\n                    <user>${db.username}</user>\r\n                    <password>${db.password}</password>\r\n                </jdbc>\r\n                <generator>\r\n                    <target>\r\n                        <packageName>com.baeldung.jooq.introduction.db</packageName>\r\n                        <directory>src/main/java</directory>\r\n                    </target>\r\n                </generator>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\npublic class Author extends TableImpl<AuthorRecord> {\r\n    public static final Author AUTHOR = new Author();\r\n\r\n    // other class members\r\n}\r\n```","```\r\npublic class Book extends TableImpl<BookRecord> {\r\n    public static final Book BOOK = new Book();\r\n\r\n    // other class members\r\n}\r\n```","```\r\npublic class AuthorBook extends TableImpl<AuthorBookRecord> {\r\n    public static final AuthorBook AUTHOR_BOOK = new AuthorBook();\r\n\r\n    // other class members\r\n}\r\n```","```\r\npublic class ExceptionTranslator extends DefaultExecuteListener {\r\n    public void exception(ExecuteContext context) {\r\n        SQLDialect dialect = context.configuration().dialect();\r\n        SQLExceptionTranslator translator \r\n          = new SQLErrorCodeSQLExceptionTranslator(dialect.name());\r\n        context.exception(translator\r\n          .translate(\"Access database using Jooq\", context.sql(), context.sqlException()));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan({\"com.baeldung.Jooq.introduction.db.public_.tables\"})\r\n@EnableTransactionManagement\r\n@PropertySource(\"classpath:intro_config.properties\")\r\npublic class PersistenceContext {\r\n    // Other declarations\r\n}\r\n```","```\r\n@Autowired\r\nprivate Environment environment;\r\n\r\n@Bean\r\npublic DataSource dataSource() {\r\n    JdbcDataSource dataSource = new JdbcDataSource();\r\n\r\n    dataSource.setUrl(environment.getRequiredProperty(\"db.url\"));\r\n    dataSource.setUser(environment.getRequiredProperty(\"db.username\"));\r\n    dataSource.setPassword(environment.getRequiredProperty(\"db.password\"));\r\n```","```\r\n return dataSource; \r\n}\r\n```","```\r\n@Bean\r\npublic TransactionAwareDataSourceProxy transactionAwareDataSource() {\r\n    return new TransactionAwareDataSourceProxy(dataSource());\r\n}\r\n\r\n@Bean\r\npublic DataSourceTransactionManager transactionManager() {\r\n    return new DataSourceTransactionManager(dataSource());\r\n}\r\n\r\n@Bean\r\npublic DataSourceConnectionProvider connectionProvider() {\r\n    return new DataSourceConnectionProvider(transactionAwareDataSource());\r\n}\r\n\r\n@Bean\r\npublic ExceptionTranslator exceptionTransformer() {\r\n    return new ExceptionTranslator();\r\n}\r\n\r\n@Bean\r\npublic DefaultDSLContext dsl() {\r\n    return new DefaultDSLContext(configuration());\r\n}\r\n```","```\r\n@Bean\r\npublic DefaultConfiguration configuration() {\r\n    DefaultConfiguration JooqConfiguration = new DefaultConfiguration();\r\n    jooqConfiguration.set(connectionProvider());\r\n    jooqConfiguration.set(new DefaultExecuteListenerProvider(exceptionTransformer()));\r\n\r\n    String sqlDialectName = environment.getRequiredProperty(\"jooq.sql.dialect\");\r\n    SQLDialect dialect = SQLDialect.valueOf(sqlDialectName);\r\n    jooqConfiguration.set(dialect);\r\n\r\n    return jooqConfiguration;\r\n}\r\n```","```\r\n@Autowired\r\nprivate DSLContext dsl;\r\n\r\nAuthor author = Author.AUTHOR;\r\nBook book = Book.BOOK;\r\nAuthorBook authorBook = AuthorBook.AUTHOR_BOOK;\r\n```","```\r\ndsl.insertInto(author)\r\n  .set(author.ID, 4)\r\n  .set(author.FIRST_NAME, \"Herbert\")\r\n  .set(author.LAST_NAME, \"Schildt\")\r\n  .execute();\r\ndsl.insertInto(book)\r\n  .set(book.ID, 4)\r\n  .set(book.TITLE, \"A Beginner's Guide\")\r\n  .execute();\r\ndsl.insertInto(authorBook)\r\n  .set(authorBook.AUTHOR_ID, 4)\r\n  .set(authorBook.BOOK_ID, 4)\r\n  .execute();\r\n```","```\r\nResult<Record3<Integer, String, Integer>> result = dsl\r\n  .select(author.ID, author.LAST_NAME, DSL.count())\r\n  .from(author)\r\n  .join(authorBook)\r\n  .on(author.ID.equal(authorBook.AUTHOR_ID))\r\n  .join(book)\r\n  .on(authorBook.BOOK_ID.equal(book.ID))\r\n  .groupBy(author.LAST_NAME)\r\n  .fetch();\r\n```","```\r\n+----+---------+-----+\r\n|  ID|LAST_NAME|count|\r\n+----+---------+-----+\r\n|   1|Sierra   |    2|\r\n|   2|Bates    |    1|\r\n|   4|Schildt  |    1|\r\n+----+---------+-----+\r\n```","```\r\nassertEquals(3, result.size());\r\nassertEquals(\"Sierra\", result.getValue(0, author.LAST_NAME));\r\nassertEquals(Integer.valueOf(2), result.getValue(0, DSL.count()));\r\nassertEquals(\"Schildt\", result.getValue(2, author.LAST_NAME));\r\nassertEquals(Integer.valueOf(1), result.getValue(2, DSL.count()));\r\n```","```\r\n@Test(expected = DataAccessException.class)\r\npublic void givenInvalidData_whenInserting_thenFail() {\r\n    dsl.insertInto(authorBook)\r\n      .set(authorBook.AUTHOR_ID, 4)\r\n      .set(authorBook.BOOK_ID, 5)\r\n      .execute();\r\n}\r\n```","```\r\ndsl.update(author)\r\n  .set(author.LAST_NAME, \"Baeldung\")\r\n  .where(author.ID.equal(3))\r\n  .execute();\r\ndsl.update(book)\r\n  .set(book.TITLE, \"Building your REST API with Spring\")\r\n  .where(book.ID.equal(3))\r\n  .execute();\r\ndsl.insertInto(authorBook)\r\n  .set(authorBook.AUTHOR_ID, 3)\r\n  .set(authorBook.BOOK_ID, 3)\r\n  .execute();\r\n```","```\r\nResult<Record3<Integer, String, String>> result = dsl\r\n  .select(author.ID, author.LAST_NAME, book.TITLE)\r\n  .from(author)\r\n  .join(authorBook)\r\n  .on(author.ID.equal(authorBook.AUTHOR_ID))\r\n  .join(book)\r\n  .on(authorBook.BOOK_ID.equal(book.ID))\r\n  .where(author.ID.equal(3))\r\n  .fetch();\r\n```","```\r\n+----+---------+----------------------------------+\r\n|  ID|LAST_NAME|TITLE                             |\r\n+----+---------+----------------------------------+\r\n|   3|Baeldung |Building your REST API with Spring|\r\n+----+---------+----------------------------------+\r\n```","```\r\nassertEquals(1, result.size());\r\nassertEquals(Integer.valueOf(3), result.getValue(0, author.ID));\r\nassertEquals(\"Baeldung\", result.getValue(0, author.LAST_NAME));\r\nassertEquals(\"Building your REST API with Spring\", result.getValue(0, book.TITLE));\r\n```","```\r\n@Test(expected = DataAccessException.class)\r\npublic void givenInvalidData_whenUpdating_thenFail() {\r\n    dsl.update(authorBook)\r\n      .set(authorBook.AUTHOR_ID, 4)\r\n      .set(authorBook.BOOK_ID, 5)\r\n      .execute();\r\n}\r\n```","```\r\ndsl.delete(author)\r\n  .where(author.ID.lt(3))\r\n  .execute();\r\n```","```\r\nResult<Record3<Integer, String, String>> result = dsl\r\n  .select(author.ID, author.FIRST_NAME, author.LAST_NAME)\r\n  .from(author)\r\n  .fetch();\r\n```","```\r\n+----+----------+---------+\r\n|  ID|FIRST_NAME|LAST_NAME|\r\n+----+----------+---------+\r\n|   3|Bryan     |Basham   |\r\n+----+----------+---------+\r\n```","```\r\nassertEquals(1, result.size());\r\nassertEquals(\"Bryan\", result.getValue(0, author.FIRST_NAME));\r\nassertEquals(\"Basham\", result.getValue(0, author.LAST_NAME));\r\n```","```\r\n@Test(expected = DataAccessException.class)\r\npublic void givenInvalidData_whenDeleting_thenFail() {\r\n    dsl.delete(book)\r\n      .where(book.ID.equal(1))\r\n      .execute();\r\n}\r\n```"]