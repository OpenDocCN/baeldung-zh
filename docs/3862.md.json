["```\r\n :dependencies [[org.clojure/clojure \"1.10.0\"]\r\n                 [ring/ring-core \"1.7.1\"]\r\n                 [ring/ring-jetty-adapter \"1.7.1\"]]\r\n```","```\r\n(ns ring.core\r\n  (:use ring.adapter.jetty))\r\n\r\n(defn handler [request]\r\n  {:status 200\r\n   :headers {\"Content-Type\" \"text/plain\"}\r\n   :body \"Hello World\"})\r\n\r\n(defn -main\r\n  [& args]\r\n  (run-jetty handler {:port 3000}))\r\n```","```\r\nring.core=> (ring.util.response/response \"Hello\")\r\n{:status 200, :headers {}, :body \"Hello\"}\r\n```","```\r\nring.core=> (ring.util.response/bad-request \"Hello\")\r\n{:status 400, :headers {}, :body \"Hello\"}\r\nring.core=> (ring.util.response/created \"/post/123\")\r\n{:status 201, :headers {\"Location\" \"/post/123\"}, :body nil}\r\nring.core=> (ring.util.response/redirect \"https://ring-clojure.github.io/ring/\")\r\n{:status 302, :headers {\"Location\" \"https://ring-clojure.github.io/ring/\"}, :body \"\"}\r\n```","```\r\nring.core=> (ring.util.response/status (ring.util.response/response \"Hello\") 409)\r\n{:status 409, :headers {}, :body \"Hello\"}\r\n```","```\r\nring.core=> (ring.util.response/content-type (ring.util.response/response \"Hello\") \"text/plain\")\r\n{:status 200, :headers {\"Content-Type\" \"text/plain\"}, :body \"Hello\"}\r\nring.core=> (ring.util.response/header (ring.util.response/response \"Hello\") \"X-Tutorial-For\" \"Baeldung\")\r\n{:status 200, :headers {\"X-Tutorial-For\" \"Baeldung\"}, :body \"Hello\"}\r\nring.core=> (ring.util.response/set-cookie (ring.util.response/response \"Hello\") \"User\" \"123\")\r\n{:status 200, :headers {}, :body \"Hello\", :cookies {\"User\" {:value \"123\"}}}\r\n```","```\r\n(defn handler [request] (ring.util.response/response \"Hello\"))\r\n```","```\r\n(defn check-ip-handler [request]\r\n    (ring.util.response/content-type\r\n        (ring.util.response/response (:remote-addr request))\r\n        \"text/plain\"))\r\n```","```\r\n(defn wrap-content-type [handler content-type]\r\n  (fn [request]\r\n    (let [response (handler request)]\r\n      (assoc-in response [:headers \"Content-Type\"] content-type))))\r\n```","```\r\n(def app-handler (wrap-content-type handler \"text/html\"))\r\n```","```\r\n(def app-handler\r\n  (-> handler\r\n      (wrap-content-type \"text/html\")\r\n      wrap-keyword-params\r\n      wrap-params))\r\n```","```\r\n(use 'ring.middleware.file) \r\n```","```\r\n(def app-handler (wrap-file your-handler \"/var/www/public\"))\r\n```","```\r\n(use 'ring.middleware.resource) \r\n```","```\r\n(def app-handler (wrap-resource your-handler \"public\"))\r\n```","```\r\n(use 'ring.middleware.resource\r\n     'ring.middleware.content-type\r\n     'ring.middleware.not-modified)\r\n\r\n(def app-handler\r\n  (-> your-handler\r\n      (wrap-resource \"public\")\r\n      wrap-content-type\r\n      wrap-not-modified)\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      (wrap-params {:encoding \"UTF-8\"})\r\n  ))\r\n```","```\r\n(defn echo-handler [{params :params}]\r\n    (ring.util.response/content-type\r\n        (ring.util.response/response (get params \"input\"))\r\n        \"text/plain\"))\r\n```","```\r\n// /echo?input=hello\r\n{\"input \"hello\"}\r\n\r\n// /echo?input=hello&name;=Fred\r\n{\"input \"hello\" \"name\" \"Fred\"}\r\n\r\n// /echo?input=hello&input;=world\r\n{\"input [\"hello\" \"world\"]}\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-params\r\n      wrap-multipart-params\r\n  ))\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-params\r\n      (wrap-multipart-params {:store ring.middleware.multipart-params.byte-array/byte-array-store})\r\n  ))\r\n```","```\r\n {\"file\" {:filename     \"words.txt\"\r\n           :content-type \"text/plain\"\r\n           :tempfile     #object[java.io.File ...]\r\n           :size         51}}\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-cookies\r\n  ))\r\n```","```\r\n{\"session_id\" {:value \"session-id-hash\"}}\r\n```","```\r\n{:status 200\r\n :headers {}\r\n :cookies {\"session_id\" {:value \"session-id-hash\"}}\r\n :body \"Setting a cookie.\"}\r\n```","```\r\n(ring.util.response/set-cookie \r\n    (ring.util.response/response \"Setting a cookie.\") \r\n    \"session_id\" \r\n    \"session-id-hash\")\r\n```","```\r\n(ring.util.response/set-cookie\r\n    (ring.util.response/response \"Setting a cookie.\")\r\n    \"session_id\"\r\n    \"session-id-hash\"\r\n    {:secure true :http-only true :max-age 3600})\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-session\r\n  ))\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-cookies\r\n      (wrap-session {:store (cookie-store {:key \"a 16-byte secret\"})})\r\n  ))\r\n```","```\r\n(def app-handler\r\n  (-> your-handler\r\n      wrap-cookies\r\n      (wrap-session {:cookie-attrs {:max-age 3600}})\r\n  ))\r\n```","```\r\n(defn handler [{session :session}]\r\n  (let [count   (:count session 0)\r\n        session (assoc session :count (inc count))]\r\n    (-> (response (str \"You accessed this page \" count \" times.\"))\r\n        (assoc :session session))))\r\n```","```\r\n(defn handler [request]\r\n  (-> (response \"Session deleted.\")\r\n      (assoc :session nil)))\r\n```","```\r\n :plugins [[lein-ring \"0.12.5\"]]\r\n  :ring {:handler ring.core/handler}\r\n```","```\r\n$ lein search ring-core\r\nSearching clojars ...\r\n[ring/ring-core \"1.7.1\"]\r\n  Ring core libraries.\r\n\r\n$ lein search lein-ring\r\nSearching clojars ...\r\n[lein-ring \"0.12.5\"]\r\n  Leiningen Ring plugin\r\n```","```\r\n$ lein ring uberwar\r\n2019-04-12 07:10:08.033:INFO::main: Logging initialized @1054ms to org.eclipse.jetty.util.log.StdErrLog\r\nCreated ./clojure/ring/target/uberjar/ring-0.1.0-SNAPSHOT-standalone.war\r\n```","```\r\n$ lein ring uberjar\r\nCompiling ring.core\r\n2019-04-12 07:11:27.669:INFO::main: Logging initialized @3016ms to org.eclipse.jetty.util.log.StdErrLog\r\nCreated ./clojure/ring/target/uberjar/ring-0.1.0-SNAPSHOT.jar\r\nCreated ./clojure/ring/target/uberjar/ring-0.1.0-SNAPSHOT-standalone.jar\r\n```","```\r\nPORT=2000 java -jar ./clojure/ring/target/uberjar/ring-0.1.0-SNAPSHOT-standalone.jar\r\n2019-04-12 07:14:08.954:INFO::main: Logging initialized @1009ms to org.eclipse.jetty.util.log.StdErrLog\r\nWARNING: seqable? already refers to: #'clojure.core/seqable? in namespace: clojure.core.incubator, being replaced by: #'clojure.core.incubator/seqable?\r\n2019-04-12 07:14:10.795:INFO:oejs.Server:main: jetty-9.4.z-SNAPSHOT; built: 2018-08-30T13:59:14.071Z; git: 27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_77-b03\r\n2019-04-12 07:14:10.863:INFO:oejs.AbstractConnector:main: Started [[email protected]](/web/20221126231944/https://www.baeldung.com/cdn-cgi/l/email-protection){HTTP/1.1,[http/1.1]}{0.0.0.0:2000}\r\n2019-04-12 07:14:10.863:INFO:oejs.Server:main: Started @2918ms\r\nStarted server on port 2000\r\n```","```\r\n$ lein ring server\r\n2019-04-12 07:16:28.908:INFO::main: Logging initialized @1403ms to org.eclipse.jetty.util.log.StdErrLog\r\n2019-04-12 07:16:29.026:INFO:oejs.Server:main: jetty-9.4.12.v20180830; built: 2018-08-30T13:59:14.071Z; git: 27208684755d94a92186989f695db2d7b21ebc51; jvm 1.8.0_77-b03\r\n2019-04-12 07:16:29.092:INFO:oejs.AbstractConnector:main: Started [[email protected]](/web/20221126231944/https://www.baeldung.com/cdn-cgi/l/email-protection){HTTP/1.1,[http/1.1]}{0.0.0.0:3000}\r\n2019-04-12 07:16:29.092:INFO:oejs.Server:main: Started @1587ms\r\n```","```\r\n[ring/ring-devel \"1.7.1\"]\r\n```"]