["```\r\npublic Stream<String> userNames() {\r\n    ArrayList<String> userNameSource = new ArrayList<>();\r\n    userNameSource.add(\"john\");\r\n    userNameSource.add(\"smith\");\r\n    userNameSource.add(\"tom\");\r\n    return userNames.stream();\r\n} \r\n```","```\r\npublic List<String> userNameList() {\r\n    return userNames().collect(Collectors.toList());\r\n}\r\n```","```\r\npublic static Set<String> userNameSet() {\r\n    return userNames().collect(Collectors.toSet());\r\n}\r\n\r\npublic static Map<String, String> userNameMap() {\r\n    return userNames().collect(Collectors.toMap(u1 -> u1.toString(), u1 -> u1.toString()));\r\n} \r\n```","```\r\nFiles.lines(path).limit(10).collect(toList());\r\n```","```\r\nuserNames().filter(i -> i.length() >= 4).forEach(System.out::println);\r\n```","```\r\npublic static Stream<String> filterUserNames() {\r\n    return userNames().filter(i -> i.length() >= 4);\r\n}\r\n\r\npublic static Stream<String> sortUserNames() {\r\n    return userNames().sorted();\r\n}\r\n\r\npublic static Stream<String> limitUserNames() {\r\n    return userNames().limit(3);\r\n}\r\n```","```\r\nuserNames().filter(i -> i.length() >= 4).limit(3).forEach(System.out::println);\r\n```","```\r\npublic static void tryStreamTraversal() {\r\n    Stream<String> userNameStream = userNames();\r\n    userNameStream.forEach(System.out::println);\r\n\r\n    try {\r\n        userNameStream.forEach(System.out::println);\r\n    } catch(IllegalStateException e) {\r\n        System.out.println(\"stream has already been operated upon or closed\");\r\n    }\r\n}\r\n```","```\r\nuserNameList().add(\"bob\");\r\nuserNameList().add(\"pepper\");\r\nuserNameList().remove(2);\r\n```","```\r\nMap<String, String> userNameMap = userNameMap();\r\nuserNameMap.put(\"bob\", \"bob\");\r\nuserNameMap.remove(\"alfred\");\r\n```"]