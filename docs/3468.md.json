["```\r\n@GetMapping(\"/exception/throw\")\r\npublic void getException() throws Exception {\r\n    throw new Exception(\"error\");\r\n} \r\n```","```\r\n{\r\n    \"timestamp\": 1592074599854,\r\n    \"status\": 500,\r\n    \"error\": \"Internal Server Error\",\r\n    \"message\": \"No message available\",\r\n    \"trace\": \"java.lang.Exception\r\n              at com.baeldung.controllers.ExceptionController.getException(ExceptionController.java:26)\r\n              ...\"\r\n}\r\n```","```\r\n@ResponseStatus(HttpStatus.BAD_REQUEST)\r\npublic class BadArgumentsException extends RuntimeException {\r\n\r\n    public BadArgumentsException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```","```\r\n@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\r\npublic class InternalException extends RuntimeException {\r\n\r\n    public InternalException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```","```\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class ResourceNotFoundException extends RuntimeException {\r\n\r\n    public ResourceNotFoundException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/exception/{exception_id}\")\r\npublic void getSpecificException(@PathVariable(\"exception_id\") String pException) {\r\n    if(\"not_found\".equals(pException)) {\r\n        throw new ResourceNotFoundException(\"resource not found\");\r\n    }\r\n    else if(\"bad_arguments\".equals(pException)) {\r\n        throw new BadArgumentsException(\"bad arguments\");\r\n    }\r\n    else {\r\n        throw new InternalException(\"internal error\");\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate MockMvc mvc; \r\n```","```\r\n@Test\r\npublic void givenNotFound_whenGetSpecificException_thenNotFoundCode() throws Exception {\r\n    String exceptionParam = \"not_found\";\r\n\r\n    mvc.perform(get(\"/exception/{exception_id}\", exceptionParam)\r\n      .contentType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isNotFound())\r\n      .andExpect(result -> assertTrue(result.getResolvedException() instanceof ResourceNotFoundException))\r\n      .andExpect(result -> assertEquals(\"resource not found\", result.getResolvedException().getMessage()));\r\n}\r\n\r\n@Test\r\npublic void givenBadArguments_whenGetSpecificException_thenBadRequest() throws Exception {\r\n    String exceptionParam = \"bad_arguments\";\r\n\r\n    mvc.perform(get(\"/exception/{exception_id}\", exceptionParam)\r\n      .contentType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isBadRequest())\r\n      .andExpect(result -> assertTrue(result.getResolvedException() instanceof BadArgumentsException))\r\n      .andExpect(result -> assertEquals(\"bad arguments\", result.getResolvedException().getMessage()));\r\n}\r\n\r\n@Test\r\npublic void givenOther_whenGetSpecificException_thenInternalServerError() throws Exception {\r\n    String exceptionParam = \"dummy\";\r\n\r\n    mvc.perform(get(\"/exception/{exception_id}\", exceptionParam)\r\n      .contentType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isInternalServerError())\r\n      .andExpect(result -> assertTrue(result.getResolvedException() instanceof InternalException))\r\n      .andExpect(result -> assertEquals(\"internal error\", result.getResolvedException().getMessage()));\r\n}\r\n```"]