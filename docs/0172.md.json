["```\r\npublic class Dinosaur {\r\n}\r\n```","```\r\npublic class Anatotitan extends Dinosaur {\r\n    String run() {\r\n        return \"running\";\r\n    }\r\n}\r\n```","```\r\npublic class Euraptor extends Dinosaur {\t\r\n    String flies() {\r\n        return \"flying\";\r\n    }\r\n}\r\n```","```\r\npublic static void moveDinosaur(Dinosaur dinosaur) {\r\n    if (dinosaur instanceof Anatotitan) {\r\n        Anatotitan anatotitan = (Anatotitan) dinosaur;\r\n        anatotitan.run();\r\n    } \r\n    else if (dinosaur instanceof Euraptor) {\r\n        Euraptor euraptor = (Euraptor) dinosaur;\r\n        euraptor.flies();\r\n    }\r\n}\r\n```","```\r\npublic static String moveDinosaurUsingGetClass(Dinosaur dinosaur) {\r\n    if (dinosaur.getClass().equals(Anatotitan.class)) {\r\n        Anatotitan anatotitan = (Anatotitan) dinosaur;\r\n        return anatotitan.run();\r\n    } else if (dinosaur.getClass().equals(Euraptor.class)) {\r\n        Euraptor euraptor = (Euraptor) dinosaur;\r\n        return euraptor.flies();\r\n    }\r\n    return \"\";\r\n}\r\n```","```\r\n@Test\r\npublic void givenADinosaurSpecie_whenUsingGetClass_thenGetMovementOfEuraptor() {\r\n    assertEquals(\"flying\", moveDinosaurUsingGetClass(new Euraptor()));\r\n}\r\n```","```\r\npublic class Dinosaur {\t\r\n    String move() {\r\n        return \"walking\";\r\n    } \r\n}\r\n```","```\r\npublic class Anatotitan extends Dinosaur {\r\n    @Override\r\n    String move() {\r\n        return \"running\";\r\n    }\r\n}\r\n\r\npublic class Euraptor extends Dinosaur {\r\n    @Override\r\n    String move() {\r\n        return \"flying\";\r\n    }\r\n}\r\n```","```\r\npublic static String moveDinosaurUsingPolymorphism(Dinosaur dinosaur) { \r\n    return dinosaur.move(); \r\n}\r\n```","```\r\n@Test \r\npublic void givenADinosaurSpecie_whenUsingPolymorphism_thenGetMovementOfAnatotitan() { \r\n    assertEquals(\"running\", moveDinosaurUsingPolymorphism(new Anatotitan()));\r\n}\r\n```","```\r\npublic enum DinosaurEnum {\r\n    Anatotitan {\r\n        @Override\r\n        public String move() {\r\n            return \"running\";\r\n        }\r\n    },\r\n    Euraptor {\r\n        @Override\r\n        public String move() {\r\n            return \"flying\";\r\n        }\r\n    };\r\n    abstract String move();\r\n}\r\n```","```\r\npublic static String moveDinosaurUsingEnum(DinosaurEnum dinosaurEnum) {\r\n    return dinosaurEnum.move();\r\n}\r\n```","```\r\n@Test\r\npublic void givenADinosaurSpecie_whenUsingEnum_thenGetMovementOfEuraptor() {\r\n    assertEquals(\"flying\", moveDinosaurUsingEnum(DinosaurEnum.Euraptor));\r\n}\r\n```","```\r\npublic interface Dinosaur {\r\n    String move(Visitor visitor);\r\n}\r\n```","```\r\npublic interface Visitor {\r\n    String visit(Anatotitan anatotitan);\r\n    String visit(Euraptor euraptor);\r\n}\r\n```","```\r\npublic class Anatotitan implements Dinosaur {\r\n    public String run() {\r\n        return \"running\";\r\n    }\r\n    @Override\r\n    public String move(Visitor dinoMove) {\r\n        return dinoMove.visit(this);\r\n    }\r\n}\r\n```","```\r\npublic class DinoVisitorImpl implements Visitor {\r\n    @Override\r\n    public String visit(Anatotitan anatotitan) {\r\n        return anatotitan.run();\r\n    }\r\n    @Override\r\n    public String visit(Euraptor euraptor) {\r\n        return euraptor.flies();\r\n    }\r\n}\r\n```","```\r\npublic static String moveDinosaurUsingVisitorPattern(Dinosaur dinosaur) {\r\n    Visitor visitor = new DinoVisitorImpl();\r\n    return dinosaur.move(visitor);\r\n}\r\n```","```\r\n@Test\r\npublic void givenADinosaurSpecie_whenUsingVisitorPattern_thenGetMovementOfAnatotitan() {\r\n    assertEquals(\"running\", moveDinosaurUsingVisitorPattern(new Anatotitan()));\r\n}\r\n```"]