["```\r\n@Test\r\npublic void givenOptional_whenPresent_thenShouldTakeAValueFromIt() {\r\n    //given\r\n    String expected = \"properValue\";\r\n    Optional<String> value = Optional.of(expected);\r\n    Optional<String> defaultValue = Optional.of(\"default\");\r\n\r\n    //when\r\n    Optional<String> result = value.or(() -> defaultValue);\r\n\r\n    //then\r\n    assertThat(result.get()).isEqualTo(expected);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenEmpty_thenShouldTakeAValueFromOr() {\r\n    // given\r\n    String defaultString = \"default\";\r\n    Optional<String> value = Optional.empty();\r\n    Optional<String> defaultValue = Optional.of(defaultString);\r\n\r\n    // when\r\n    Optional<String> result = value.or(() -> defaultValue);\r\n\r\n    // then\r\n    assertThat(result.get()).isEqualTo(defaultString);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenPresent_thenShouldExecuteProperCallback() {\r\n    // given\r\n    Optional<String> value = Optional.of(\"properValue\");\r\n    AtomicInteger successCounter = new AtomicInteger(0);\r\n    AtomicInteger onEmptyOptionalCounter = new AtomicInteger(0);\r\n\r\n    // when\r\n    value.ifPresentOrElse(\r\n      v -> successCounter.incrementAndGet(), \r\n      onEmptyOptionalCounter::incrementAndGet);\r\n\r\n    // then\r\n    assertThat(successCounter.get()).isEqualTo(1);\r\n    assertThat(onEmptyOptionalCounter.get()).isEqualTo(0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenNotPresent_thenShouldExecuteProperCallback() {\r\n    // given\r\n    Optional<String> value = Optional.empty();\r\n    AtomicInteger successCounter = new AtomicInteger(0);\r\n    AtomicInteger onEmptyOptionalCounter = new AtomicInteger(0);\r\n\r\n    // when\r\n    value.ifPresentOrElse(\r\n      v -> successCounter.incrementAndGet(), \r\n      onEmptyOptionalCounter::incrementAndGet);\r\n\r\n    // then\r\n    assertThat(successCounter.get()).isEqualTo(0);\r\n    assertThat(onEmptyOptionalCounter.get()).isEqualTo(1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptionalOfSome_whenToStream_thenShouldTreatItAsOneElementStream() {\r\n    // given\r\n    Optional<String> value = Optional.of(\"a\");\r\n\r\n    // when\r\n    List<String> collect = value.stream().map(String::toUpperCase).collect(Collectors.toList());\r\n\r\n    // then\r\n    assertThat(collect).hasSameElementsAs(List.of(\"A\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptionalOfNone_whenToStream_thenShouldTreatItAsZeroElementStream() {\r\n    // given\r\n    Optional<String> value = Optional.empty();\r\n\r\n    // when\r\n    List<String> collect = value.stream()\r\n      .map(String::toUpperCase)\r\n      .collect(Collectors.toList());\r\n\r\n    // then\r\n    assertThat(collect).isEmpty();\r\n}\r\n```"]