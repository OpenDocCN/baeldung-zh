["```\r\npublic boolean isPalindrome(String text) {\r\n    String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    int length = clean.length();\r\n    int forward = 0;\r\n    int backward = length - 1;\r\n    while (backward > forward) {\r\n        char forwardChar = clean.charAt(forward++);\r\n        char backwardChar = clean.charAt(backward--);\r\n        if (forwardChar != backwardChar)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\npublic boolean isPalindromeReverseTheString(String text) {\r\n    StringBuilder reverse = new StringBuilder();\r\n    String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    char[] plain = clean.toCharArray();\r\n    for (int i = plain.length - 1; i >= 0; i--) {\r\n        reverse.append(plain[i]);\r\n    }\r\n    return (reverse.toString()).equals(clean);\r\n}\r\n```","```\r\npublic boolean isPalindromeUsingStringBuilder(String text) {\r\n    String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    StringBuilder plain = new StringBuilder(clean);\r\n    StringBuilder reverse = plain.reverse();\r\n    return (reverse.toString()).equals(clean);\r\n}\r\n\r\npublic boolean isPalindromeUsingStringBuffer(String text) {\r\n    String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    StringBuffer plain = new StringBuffer(clean);\r\n    StringBuffer reverse = plain.reverse();\r\n    return (reverse.toString()).equals(clean);\r\n}\r\n```","```\r\npublic boolean isPalindromeUsingIntStream(String text) {\r\n    String temp  = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    return IntStream.range(0, temp.length() / 2)\r\n      .noneMatch(i -> temp.charAt(i) != temp.charAt(temp.length() - i - 1));\r\n}\r\n```","```\r\npublic boolean isPalindromeRecursive(String text){\r\n    String clean = text.replaceAll(\"\\\\s+\", \"\").toLowerCase();\r\n    return recursivePalindrome(clean,0,clean.length()-1);\r\n}\r\n\r\nprivate boolean recursivePalindrome(String text, int forward, int backward) {\r\n    if (forward == backward) {\r\n        return true;\r\n    }\r\n    if ((text.charAt(forward)) != (text.charAt(backward))) {\r\n        return false;\r\n    }\r\n    if (forward < backward + 1) {\r\n        return recursivePalindrome(text, forward + 1, backward - 1);\r\n    }\r\n\r\n    return true;\r\n}\r\n```"]