["```\r\n$ ./profiler.sh --version\r\n```","```\r\nAsync-profiler 1.7.1 built on May 14 2020\r\nCopyright 2016-2020 Andrei Pangin\r\n```","```\r\n$ ./profiler.sh\r\n```","```\r\nUsage: ./profiler.sh [action] [options] \r\nActions:\r\n  start             start profiling and return immediately\r\n  resume            resume profiling without resetting collected data\r\n  stop              stop profiling\r\n  check             check if the specified profiling event is available\r\n  status            print profiling status\r\n  list              list profiling events supported by the target JVM\r\n  collect           collect profile for the specified period of time\r\n                    and then stop (default action)\r\nOptions:\r\n  -e event          profiling event: cpu|alloc|lock|cache-misses etc.\r\n  -d duration       run profiling for  seconds\r\n  -f filename       dump output to \r\n  -i interval       sampling interval in nanoseconds\r\n  -j jstackdepth    maximum Java stack depth\r\n  -b bufsize        frame buffer size\r\n  -t                profile different threads separately\r\n  -s                simple class names instead of FQN\r\n  -g                print method signatures\r\n  -a                annotate Java method names\r\n  -o fmt            output format: summary|traces|flat|collapsed|svg|tree|jfr\r\n  -I include        output only stack traces containing the specified pattern\r\n  -X exclude        exclude stack traces with the specified pattern\r\n  -v, --version     display version string\r\n\r\n  --title string    SVG title\r\n  --width px        SVG width\r\n  --height px       SVG frame height\r\n  --minwidth px     skip frames smaller than px\r\n  --reverse         generate stack-reversed FlameGraph / Call tree\r\n\r\n  --all-kernel      only include kernel-mode events\r\n  --all-user        only include user-mode events\r\n  --cstack mode     how to traverse C stack: fp|lbr|no\r\n\r\n is a numeric process ID of the target JVM\r\n      or 'jps' keyword to find running JVM automatically\r\n```","```\r\n$ sudo sh -c 'echo 1 >/proc/sys/kernel/perf_event_paranoid'\r\n```","```\r\n$ sudo sh -c 'echo 0 >/proc/sys/kernel/kptr_restrict'\r\n```","```\r\n$ java -XX:+UnlockDiagnosticVMOptions -XX:+DebugNonSafepoints -jar path-to-jar-file\r\n```","```\r\n$ ./profiler.sh -e cpu -d 30 -o summary 66959\r\nStarted [cpu] profiling\r\n--- Execution profile --- \r\nTotal samples       : 28\r\n\r\nFrame buffer usage  : 0.069%\r\n```","```\r\n$ ./profiler.sh -e cpu -d 30 -f cpu_profile.html 66959\r\n```","```\r\n$ ./profiler.sh -e cpu -d 30 -f cpu_profile.svg 66959\r\n```","```\r\n$ ./profiler.sh -e alloc -d 30 -f alloc_profile.svg 66255\r\n```","```\r\n$ ./profiler.sh -e wall -t -d 30 -f wall_clock_profile.svg 66959\r\n```","```\r\n$ ./profiler.sh list 66959\r\n```","```\r\nBasic events:\r\n  cpu\r\n  alloc\r\n  lock\r\n  wall\r\n  itimer\r\nJava method calls:\r\n  ClassName.methodName\r\n```"]