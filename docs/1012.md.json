["```\r\nprivate boolean isAuthenticated() {\r\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n    if (authentication == null || AnonymousAuthenticationToken.class.\r\n      isAssignableFrom(authentication.getClass())) {\r\n        return false;\r\n    }\r\n    return authentication.isAuthenticated();\r\n}\r\n```","```\r\n@GetMapping(\"/loginUser\")\r\npublic String getUserLoginPage() {\r\n    if (isAuthenticated()) {\r\n        return \"redirect:userMainPage\";\r\n    }\r\n    return \"loginUser\";\r\n}\r\n```","```\r\npublic class LoginPageInterceptor implements HandlerInterceptor {\r\n    UrlPathHelper urlPathHelper = new UrlPathHelper();\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) {\r\n        if (\"/loginUser\".equals(urlPathHelper.getLookupPathForRequest(request)) && isAuthenticated()) {\r\n            String encodedRedirectURL = response.encodeRedirectURL(\r\n              request.getContextPath() + \"/userMainPage\");\r\n            response.setStatus(HttpStatus.SC_TEMPORARY_REDIRECT);\r\n            response.setHeader(\"Location\", encodedRedirectURL);\r\n\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // isAuthenticated method \r\n}\r\n```","```\r\n@Configuration\r\npublic class LoginRedirectMvcConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new LoginPageInterceptor());\r\n    }\r\n} \r\n```","```\r\n<mvc:interceptors>\r\n    <mvc:interceptor>\r\n        <mvc:mapping path=\"/loginUser\"/>\r\n        <bean class=\"com.baeldung.loginredirect.LoginPageInterceptor\"/>\r\n    </mvc:interceptor>\r\n</mvc:interceptors>\r\n```","```\r\npublic class LoginPageFilter extends GenericFilterBean {\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\r\n      throws IOException, ServletException {\r\n        HttpServletRequest servletRequest = (HttpServletRequest) request;\r\n        HttpServletResponse servletResponse = (HttpServletResponse) response;\r\n\r\n        if (isAuthenticated() && \"/loginUser\".equals(servletRequest.getRequestURI())) {\r\n\r\n            String encodedRedirectURL = ((HttpServletResponse) response).encodeRedirectURL(\r\n              servletRequest.getContextPath() + \"/userMainPage\");\r\n\r\n            servletResponse.setStatus(HttpStatus.SC_TEMPORARY_REDIRECT);\r\n            servletResponse.setHeader(\"Location\", encodedRedirectURL);\r\n        }\r\n\r\n        chain.doFilter(servletRequest, servletResponse);\r\n    }\r\n    // isAuthenticated method \r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class LoginRedirectSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .addFilterAfter(new LoginPageFilter(), UsernamePasswordAuthenticationFilter.class)\r\n          .authorizeRequests().antMatchers(\"/loginUser\").permitAll()\r\n\r\n        // Other security configuration\r\n    }\r\n} \r\n```","```\r\n<beans:bean id=\"loginPageFilter\" class=\"com.baeldung.loginredirect.LoginPageFilter\"/>\r\n\r\n<security:http pattern=\"/**\" use-expressions=\"true\" auto-config=\"true\">\r\n    <security:intercept-url pattern=\"/loginUser\" access=\"permitAll\"/>\r\n    <security:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"loginPageFilter\"/>\r\n</security:http>\r\n```"]