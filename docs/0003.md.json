["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-context</artifactId>\r\n        <version>4.3.8.RELEASE</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-jdbc</artifactId>\r\n        <version>4.3.8.RELEASE</version>\r\n    </dependency>\r\n\r\n    <dependency> \r\n        <groupId>org.springframework</groupId> \r\n        <artifactId>spring-test</artifactId>\r\n        <version>4.3.8.RELEASE</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.h2database</groupId>\r\n        <artifactId>h2</artifactId>\r\n        <version>1.4.195</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    </dependency>\r\n    <dependency> \r\n        <groupId>org.springframework.boot</groupId> \r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.h2database</groupId>\r\n        <artifactId>h2</artifactId>\r\n        <version>1.4.195</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\npublic enum ClientDatabase {\r\n    CLIENT_A, CLIENT_B\r\n}\r\n```","```\r\npublic class ClientDatabaseContextHolder {\r\n\r\n    private static ThreadLocal<ClientDatabase> CONTEXT\r\n      = new ThreadLocal<>();\r\n\r\n    public static void set(ClientDatabase clientDatabase) {\r\n        Assert.notNull(clientDatabase, \"clientDatabase cannot be null\");\r\n        CONTEXT.set(clientDatabase);\r\n    }\r\n\r\n    public static ClientDatabase getClientDatabase() {\r\n        return CONTEXT.get();\r\n    }\r\n\r\n    public static void clear() {\r\n        CONTEXT.remove();\r\n    }\r\n}\r\n```","```\r\npublic class ClientDataSourceRouter\r\n  extends AbstractRoutingDataSource {\r\n\r\n    @Override\r\n    protected Object determineCurrentLookupKey() {\r\n        return ClientDatabaseContextHolder.getClientDatabase();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class RoutingTestConfiguration {\r\n\r\n    @Bean\r\n    public ClientService clientService() {\r\n        return new ClientService(new ClientDao(clientDatasource()));\r\n    }\r\n\r\n    @Bean\r\n    public DataSource clientDatasource() {\r\n        Map<Object, Object> targetDataSources = new HashMap<>();\r\n        DataSource clientADatasource = clientADatasource();\r\n        DataSource clientBDatasource = clientBDatasource();\r\n        targetDataSources.put(ClientDatabase.CLIENT_A, \r\n          clientADatasource);\r\n        targetDataSources.put(ClientDatabase.CLIENT_B, \r\n          clientBDatasource);\r\n\r\n        ClientDataSourceRouter clientRoutingDatasource \r\n          = new ClientDataSourceRouter();\r\n        clientRoutingDatasource.setTargetDataSources(targetDataSources);\r\n        clientRoutingDatasource.setDefaultTargetDataSource(clientADatasource);\r\n        return clientRoutingDatasource;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n#database details for CLIENT_A\r\nclient-a.datasource.name=CLIENT_A\r\nclient-a.datasource.script=SOME_SCRIPT.sql\r\n\r\n#database details for CLIENT_B\r\nclient-b.datasource.name=CLIENT_B\r\nclient-b.datasource.script=SOME_SCRIPT.sql\r\n```","```\r\n@Component\r\n@ConfigurationProperties(prefix = \"client-a.datasource\")\r\npublic class ClientADetails {\r\n\r\n    private String name;\r\n    private String script;\r\n\r\n    // Getters & Setters\r\n}\r\n```","```\r\n@Autowired\r\nprivate ClientADetails clientADetails;\r\n@Autowired\r\nprivate ClientBDetails clientBDetails;\r\n\r\nprivate DataSource clientADatasource() {\r\nEmbeddedDatabaseBuilder dbBuilder = new EmbeddedDatabaseBuilder();\r\nreturn dbBuilder.setType(EmbeddedDatabaseType.H2)\r\n.setName(clientADetails.getName())\r\n.addScript(clientADetails.getScript())\r\n.build();\r\n}\r\n\r\nprivate DataSource clientBDatasource() {\r\nEmbeddedDatabaseBuilder dbBuilder = new EmbeddedDatabaseBuilder();\r\nreturn dbBuilder.setType(EmbeddedDatabaseType.H2)\r\n.setName(clientBDetails.getName())\r\n.addScript(clientBDetails.getScript())\r\n.build();\r\n}\r\n```","```\r\npublic class ClientService {\r\n\r\n    private ClientDao clientDao;\r\n\r\n    // standard constructors\r\n\r\n    public String getClientName(ClientDatabase clientDb) {\r\n        ClientDatabaseContextHolder.set(clientDb);\r\n        String clientName = this.clientDao.getClientName();\r\n        ClientDatabaseContextHolder.clear();\r\n        return clientName;\r\n    }\r\n}\r\n```"]