["```\r\n<dependency>\r\n    <groupId>cz.jirutka.rsql</groupId>\r\n    <artifactId>rsql-parser</artifactId>\r\n    <version>2.1.0</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n\r\n    private int age;\r\n}\r\n```","```\r\npublic class CustomRsqlVisitor<T> implements RSQLVisitor<Specification<T>, Void> {\r\n\r\n    private GenericRsqlSpecBuilder<T> builder;\r\n\r\n    public CustomRsqlVisitor() {\r\n        builder = new GenericRsqlSpecBuilder<T>();\r\n    }\r\n\r\n    @Override\r\n    public Specification<T> visit(AndNode node, Void param) {\r\n        return builder.createSpecification(node);\r\n    }\r\n\r\n    @Override\r\n    public Specification<T> visit(OrNode node, Void param) {\r\n        return builder.createSpecification(node);\r\n    }\r\n\r\n    @Override\r\n    public Specification<T> visit(ComparisonNode node, Void params) {\r\n        return builder.createSecification(node);\r\n    }\r\n}\r\n```","```\r\npublic class GenericRsqlSpecBuilder<T> {\r\n\r\n    public Specification<T> createSpecification(Node node) {\r\n        if (node instanceof LogicalNode) {\r\n            return createSpecification((LogicalNode) node);\r\n        }\r\n        if (node instanceof ComparisonNode) {\r\n            return createSpecification((ComparisonNode) node);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Specification<T> createSpecification(LogicalNode logicalNode) {        \r\n        List<Specification> specs = logicalNode.getChildren()\r\n          .stream()\r\n          .map(node -> createSpecification(node))\r\n          .filter(Objects::nonNull)\r\n          .collect(Collectors.toList());\r\n\r\n        Specification<T> result = specs.get(0);\r\n        if (logicalNode.getOperator() == LogicalOperator.AND) {\r\n            for (int i = 1; i < specs.size(); i++) {\r\n                result = Specification.where(result).and(specs.get(i));\r\n            }\r\n        } else if (logicalNode.getOperator() == LogicalOperator.OR) {\r\n            for (int i = 1; i < specs.size(); i++) {\r\n                result = Specification.where(result).or(specs.get(i));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public Specification<T> createSpecification(ComparisonNode comparisonNode) {\r\n        Specification<T> result = Specification.where(\r\n          new GenericRsqlSpecification<T>(\r\n            comparisonNode.getSelector(), \r\n            comparisonNode.getOperator(), \r\n            comparisonNode.getArguments()\r\n          )\r\n        );\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class GenericRsqlSpecification<T> implements Specification<T> {\r\n\r\n    private String property;\r\n    private ComparisonOperator operator;\r\n    private List<String> arguments;\r\n\r\n    @Override\r\n    public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\r\n        List<Object> args = castArguments(root);\r\n        Object argument = args.get(0);\r\n        switch (RsqlSearchOperation.getSimpleOperator(operator)) {\r\n\r\n        case EQUAL: {\r\n            if (argument instanceof String) {\r\n                return builder.like(root.get(property), argument.toString().replace('*', '%'));\r\n            } else if (argument == null) {\r\n                return builder.isNull(root.get(property));\r\n            } else {\r\n                return builder.equal(root.get(property), argument);\r\n            }\r\n        }\r\n        case NOT_EQUAL: {\r\n            if (argument instanceof String) {\r\n                return builder.notLike(root.<String> get(property), argument.toString().replace('*', '%'));\r\n            } else if (argument == null) {\r\n                return builder.isNotNull(root.get(property));\r\n            } else {\r\n                return builder.notEqual(root.get(property), argument);\r\n            }\r\n        }\r\n        case GREATER_THAN: {\r\n            return builder.greaterThan(root.<String> get(property), argument.toString());\r\n        }\r\n        case GREATER_THAN_OR_EQUAL: {\r\n            return builder.greaterThanOrEqualTo(root.<String> get(property), argument.toString());\r\n        }\r\n        case LESS_THAN: {\r\n            return builder.lessThan(root.<String> get(property), argument.toString());\r\n        }\r\n        case LESS_THAN_OR_EQUAL: {\r\n            return builder.lessThanOrEqualTo(root.<String> get(property), argument.toString());\r\n        }\r\n        case IN:\r\n            return root.get(property).in(args);\r\n        case NOT_IN:\r\n            return builder.not(root.get(property).in(args));\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private List<Object> castArguments(final Root<T> root) {\r\n\r\n        Class<? extends Object> type = root.get(property).getJavaType();\r\n\r\n        List<Object> args = arguments.stream().map(arg -> {\r\n            if (type.equals(Integer.class)) {\r\n               return Integer.parseInt(arg);\r\n            } else if (type.equals(Long.class)) {\r\n               return Long.parseLong(arg);\r\n            } else {\r\n                return arg;\r\n            }            \r\n        }).collect(Collectors.toList());\r\n\r\n        return args;\r\n    }\r\n\r\n    // standard constructor, getter, setter\r\n}\r\n```","```\r\npublic enum RsqlSearchOperation {\r\n    EQUAL(RSQLOperators.EQUAL), \r\n    NOT_EQUAL(RSQLOperators.NOT_EQUAL), \r\n    GREATER_THAN(RSQLOperators.GREATER_THAN), \r\n    GREATER_THAN_OR_EQUAL(RSQLOperators.GREATER_THAN_OR_EQUAL), \r\n    LESS_THAN(RSQLOperators.LESS_THAN), \r\n    LESS_THAN_OR_EQUAL(RSQLOperators.LESS_THAN_OR_EQUAL), \r\n    IN(RSQLOperators.IN), \r\n    NOT_IN(RSQLOperators.NOT_IN);\r\n\r\n    private ComparisonOperator operator;\r\n\r\n    private RsqlSearchOperation(ComparisonOperator operator) {\r\n        this.operator = operator;\r\n    }\r\n\r\n    public static RsqlSearchOperation getSimpleOperator(ComparisonOperator operator) {\r\n        for (RsqlSearchOperation operation : values()) {\r\n            if (operation.getOperator() == operator) {\r\n                return operation;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { PersistenceConfig.class })\r\n@Transactional\r\n@TransactionConfiguration\r\npublic class RsqlTest {\r\n\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    private User userJohn;\r\n\r\n    private User userTom;\r\n\r\n    @Before\r\n    public void init() {\r\n        userJohn = new User();\r\n        userJohn.setFirstName(\"john\");\r\n        userJohn.setLastName(\"doe\");\r\n        userJohn.setEmail(\"[[email protected]](/web/20220701014319/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userJohn.setAge(22);\r\n        repository.save(userJohn);\r\n\r\n        userTom = new User();\r\n        userTom.setFirstName(\"tom\");\r\n        userTom.setLastName(\"doe\");\r\n        userTom.setEmail(\"[[email protected]](/web/20220701014319/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userTom.setAge(26);\r\n        repository.save(userTom);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    Node rootNode = new RSQLParser().parse(\"firstName==john;lastName==doe\");\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameInverse_whenGettingListOfUsers_thenCorrect() {\r\n    Node rootNode = new RSQLParser().parse(\"firstName!=john\");\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMinAge_whenGettingListOfUsers_thenCorrect() {\r\n    Node rootNode = new RSQLParser().parse(\"age>25\");\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNamePrefix_whenGettingListOfUsers_thenCorrect() {\r\n    Node rootNode = new RSQLParser().parse(\"firstName==jo*\");\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfFirstName_whenGettingListOfUsers_thenCorrect() {\r\n    Node rootNode = new RSQLParser().parse(\"firstName=in=(john,jack)\");\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/users\")\r\n@ResponseBody\r\npublic List<User> findAllByRsql(@RequestParam(value = \"search\") String search) {\r\n    Node rootNode = new RSQLParser().parse(search);\r\n    Specification<User> spec = rootNode.accept(new CustomRsqlVisitor<User>());\r\n    return dao.findAll(spec);\r\n}\r\n```","```\r\nhttp://localhost:8080/users?search=firstName==jo*;age<25\r\n```","```\r\n[{\r\n    \"id\":1,\r\n    \"firstName\":\"john\",\r\n    \"lastName\":\"doe\",\r\n    \"email\":\"[[email protected]](/web/20220701014319/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\":24\r\n}]\r\n```"]