["```\r\ndef first = 'first'\r\ndef second = \"second\"        \r\ndef concatenation = first + second\r\nassertEquals('firstsecond', concatenation)\r\n```","```\r\ndef name = \"Kacper\"\r\ndef result = \"Hello ${name}!\"\r\nassertEquals(\"Hello Kacper!\", result.toString())\r\n```","```\r\nassertEquals(\"Hello Kacper!\", result)\r\n```","```\r\njava.lang.AssertionError: expected: java.lang.String<Hello Kacper!>\r\n  but was: org.codehaus.groovy.runtime.GStringImpl<Hello Kacper!>\r\nExpected :java.lang.String<Hello Kacper!> \r\nActual   :org.codehaus.groovy.runtime.GStringImpl<Hello Kacper!>\r\n```","```\r\ndef example = 'Hello world'\r\n```","```\r\ndef hardToRead = \"Kacper loves \\\"Lord of the Rings\\\"\"\r\n```","```\r\ndef easyToRead = 'Kacper loves \"Lord of the Rings\"'\r\n```","```\r\n{\r\n    \"name\": \"John\",\r\n    \"age\": 20,\r\n    \"birthDate\": null\r\n}\r\n```","```\r\ndef jsonContent = '''\r\n{\r\n    \"name\": \"John\",\r\n    \"age\": 20,\r\n    \"birthDate\": null\r\n}\r\n'''\r\n```","```\r\ndef triple = '''\r\n    firstline\r\n    secondline\r\n'''\r\n```","```\r\n(newline)\r\n    firstline(newline)\r\n    secondline(newline)\r\n```","```\r\nassertTrue(triple.startsWith(\"\\n\"))\r\n```","```\r\ndef triple = '''\\\r\n    firstline\r\n    secondline\r\n'''\r\n```","```\r\ndef triple = '''\\\r\n    firstline\r\n    secondline'''.stripIndent()\r\nassertEquals(\"firstline\\nsecondline\", triple)\r\n```","```\r\nclass TripleSingleQuotedString {\r\n\r\n    @Test\r\n    void 'triple single quoted with multiline string with last line with only whitespaces'() {\r\n        def triple = '''\\\r\n            firstline\r\n                secondline\\\r\n        '''.stripIndent()\r\n\r\n        // ... use triple\r\n    }\r\n}\r\n```","```\r\nfirstline\r\n    secondline\r\n```","```\r\ndef triple = '''\\\r\n    |firstline\r\n    |secondline'''.stripMargin()\r\n```","```\r\nfirstline\r\nsecondline\r\n```","```\r\ndef specialCharacters = '''hello \\'John\\'. This is backslash - \\\\ \\nSecond line starts here'''\r\n```","```\r\nhello 'John'. This is backslash - \\\r\nSecond line starts here\r\n```","```\r\ndef string = \"example\"\r\ndef stringWithExpression = \"example${2}\"\r\nassertTrue(string instanceof String)\r\nassertTrue(stringWithExpression instanceof GString)\r\nassertTrue(stringWithExpression.toString() instanceof String)\r\n```","```\r\ndef name = \"John\"\r\ndef helloName = \"Hello $name!\"\r\nassertEquals(\"Hello John!\", helloName.toString())\r\n```","```\r\ndef result = \"result is ${2 * 2}\"    \r\nassertEquals(\"result is 4\", result.toString())\r\n```","```\r\ndef person = [name: 'John']\r\ndef myNameIs = \"I'm $person.name, and you?\"\r\nassertEquals(\"I'm John, and you?\", myNameIs.toString())\r\n```","```\r\ndef name = 'John'\r\ndef result = \"Uppercase name: ${name.toUpperCase()}\".toString()\r\nassertEquals(\"Uppercase name: JOHN\", result)\r\n```","```\r\ndef string = \"2+2 is 4\"\r\ndef gstring = \"2+2 is ${4}\"\r\nassertTrue(string.hashCode() != gstring.hashCode())\r\n```","```\r\ndef name = \"John\"\r\ndef multiLine = \"\"\"\r\n    I'm $name.\r\n    \"This is quotation from 'War and Peace'\"\r\n\"\"\"\r\n```","```\r\ndef pattern = \"\\\\d{1,3}\\\\s\\\\w+\\\\s\\\\w+\\\\\\\\\\\\w+\"\r\n```","```\r\ndef pattern = /\\d{3}\\s\\w+\\s\\w+\\\\\\w+/\r\nassertTrue(\"3 Blind Mice\\Men\".matches(pattern))\r\n```","```\r\ndef name = 'John'\r\ndef example = /\r\n    Dear ([A-Z]+),\r\n    Love, $name\r\n/\r\n```","```\r\ndef pattern = /.*foobar.*\\/hello.*/ \r\n```","```\r\n// if ('' == //) {\r\n//     println(\"I can't compile\")\r\n// }\r\n```","```\r\ndef name = \"John\"\r\n\r\ndef dollarSlashy = $/\r\n    Hello $name!,\r\n\r\n    I can show you a $ sign or an escaped dollar sign: $$ \r\n    Both slashes work: \\ or /, but we can still escape it: $/\r\n\r\n    We have to escape opening and closing delimiters:\r\n    - $$$/  \r\n    - $/$$\r\n /$ \r\n```","```\r\nHello John!,\r\n\r\nI can show you a $ sign or an escaped dollar sign: $ \r\nBoth slashes work: \\ or /, but we can still escape it: /\r\n\r\nWe have to escape opening and closing delimiter:\r\n- $/  \r\n- /$\r\n```","```\r\nchar a = 'A'\r\nchar b = 'B' as char\r\nchar c = (char) 'C'\r\nassertTrue(a instanceof Character)\r\nassertTrue(b instanceof Character)\r\nassertTrue(c instanceof Character)\r\n```"]