["```\r\nMap<String, String> map = Collections.synchronizedMap(new HashMap<>());\r\nList<Integer> list = Collections.synchronizedList(new ArrayList<>());\r\n```","```\r\nCopyOnWriteArrayList<String> list = new CopyOnWriteArrayList<>();\r\nMap<String, String> map = new ConcurrentHashMap<>();\r\n```","```\r\nclass Counter {\r\n    private int counter = 0;\r\n\r\n    public void increment() {\r\n        counter++;\r\n    }\r\n\r\n    public int getValue() {\r\n        return counter;\r\n    }\r\n}\r\n```","```\r\nclass SynchronizedCounter {\r\n    private int counter = 0;\r\n\r\n    public synchronized void increment() {\r\n        counter++;\r\n    }\r\n\r\n    public synchronized int getValue() {\r\n        return counter;\r\n    }\r\n}\r\n```","```\r\nAtomicInteger atomicInteger = new AtomicInteger(3);\r\natomicInteger.incrementAndGet();\r\n```","```\r\nList<String> list = Collections.synchronizedList(new ArrayList<>());\r\nif(!list.contains(\"foo\")) {\r\n    list.add(\"foo\");\r\n}\r\n```","```\r\nsynchronized (list) {\r\n    if (!list.contains(\"foo\")) {\r\n        list.add(\"foo\");\r\n    }\r\n}\r\n```","```\r\nMap<String, String> map = new ConcurrentHashMap<>();\r\nmap.putIfAbsent(\"foo\", \"bar\");\r\n```","```\r\nmap.computeIfAbsent(\"foo\", key -> key + \"bar\");\r\n```","```\r\nclass Counter {\r\n    private int counter = 0;\r\n\r\n    public void increment() {\r\n        counter++;\r\n    }\r\n\r\n    public int getValue() {\r\n        return counter;\r\n    }\r\n}\r\n```","```\r\nclass SyncronizedCounter {\r\n    private volatile int counter = 0;\r\n\r\n    public synchronized void increment() {\r\n        counter++;\r\n    }\r\n\r\n    public int getValue() {\r\n        return counter;\r\n    }\r\n}\r\n```","```\r\npublic synchronized void foo() {\r\n    //...\r\n}\r\n```","```\r\npublic void foo() {\r\n    synchronized(this) {\r\n      //...\r\n    }\r\n}\r\n```","```\r\npublic class DeadlockExample {\r\n\r\n    public static Object lock1 = new Object();\r\n    public static Object lock2 = new Object();\r\n\r\n    public static void main(String args[]) {\r\n        Thread threadA = new Thread(() -> {\r\n            synchronized (lock1) {\r\n                System.out.println(\"ThreadA: Holding lock 1...\");\r\n                sleep();\r\n                System.out.println(\"ThreadA: Waiting for lock 2...\");\r\n\r\n                synchronized (lock2) {\r\n                    System.out.println(\"ThreadA: Holding lock 1 & 2...\");\r\n                }\r\n            }\r\n        });\r\n        Thread threadB = new Thread(() -> {\r\n            synchronized (lock2) {\r\n                System.out.println(\"ThreadB: Holding lock 2...\");\r\n                sleep();\r\n                System.out.println(\"ThreadB: Waiting for lock 1...\");\r\n\r\n                synchronized (lock1) {\r\n                    System.out.println(\"ThreadB: Holding lock 1 & 2...\");\r\n                }\r\n            }\r\n        });\r\n        threadA.start();\r\n        threadB.start();\r\n    }\r\n}\r\n```"]