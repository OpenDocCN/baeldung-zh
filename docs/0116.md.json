["```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 30, 22);\r\nZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.of(\"Canada/Atlantic\"));\r\n\r\nassertEquals(localDateTime.getYear(), zonedDateTime.getYear());\r\nassertEquals(localDateTime.getMonth(), zonedDateTime.getMonth());\r\nassertEquals(localDateTime.getDayOfMonth(), zonedDateTime.getDayOfMonth());\r\nassertEquals(localDateTime.getHour(), zonedDateTime.getHour());\r\nassertEquals(localDateTime.getMinute(), zonedDateTime.getMinute());\r\nassertEquals(localDateTime.getSecond(), zonedDateTime.getSecond());\r\n```","```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 1, 1, 0, 30, 22);\r\nZonedDateTime zonedDateTime = localDateTime.atZone(ZoneId.of(\"Africa/Lagos\")).withZoneSameInstant(ZoneId.of(\"Canada/Atlantic\"));\r\n\r\nassertEquals(\"2021-12-31T19:30:22-04:00[Canada/Atlantic]\", zonedDateTime.toString());\r\nassertEquals(\"-04:00\", zonedDateTime.getOffset().toString());\r\n```","```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 11, 5, 7, 30, 22);\r\nZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, ZoneId.of(\"Africa/Accra\")).withZoneSameInstant(ZoneId.of(\"Africa/Lagos\"));\r\n\r\nassertEquals(\"2022-11-05T08:30:22+01:00[Africa/Lagos]\", zonedDateTime.toString()); \r\nassertEquals(localDateTime.getYear(), zonedDateTime.getYear());\r\n```","```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 1, 5, 17, 30, 22);\r\nZoneId zoneId = ZoneId.of(\"Africa/Lagos\");\r\nZoneOffset zoneOffset = zoneId.getRules().getOffset(localDateTime);\r\nZonedDateTime zonedDateTime = ZonedDateTime.ofInstant(localDateTime, zoneOffset, zoneId);\r\n```","```\r\nassertEquals(\"2022-01-05T17:30:22+01:00[Africa/Lagos]\", zonedDateTime.toString());\r\n```","```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 8 , 25, 8, 35, 22);\r\nZoneId zoneId = ZoneId.of(\"Africa/Lagos\");\r\nZoneOffset zoneOffset = zoneId.getRules().getOffset(localDateTime);\r\nZonedDateTime zonedDateTime = ZonedDateTime.ofLocal(localDateTime, zoneId, zoneOffset);\r\n```","```\r\nassertEquals(\"2022-08-25T08:35:22+01:00[Africa/Lagos]\", zonedDateTime.toString());\r\n```","```\r\nLocalDateTime localDateTime = LocalDateTime.of(2022, 12, 25, 6, 18, 2);\r\nZoneId zoneId = ZoneId.of(\"Asia/Tokyo\");\r\nZoneOffset zoneOffset = zoneId.getRules().getOffset(localDateTime);\r\nZonedDateTime zonedDateTime = ZonedDateTime.ofStrict(localDateTime, zoneOffset, zoneId);\r\n```","```\r\nassertEquals(\"2002-12-25T06:18:02+09:00[Asia/Tokyo]\", zonedDateTime.toString());\r\n```","```\r\nzoneId = ZoneId.of(\"Asia/Tokyo\");\r\nzoneOffset = ZoneOffset.UTC;\r\nassertThrows(DateTimeException.class, () -> ZonedDateTime.ofStrict(localDateTime, zoneOffset, zoneId));\r\n```","```\r\nZonedDateTime zonedDateTime = ZonedDateTime.of(2011, 2, 12, 6, 14, 1, 58086000, ZoneId.of(\"Asia/Tokyo\"));\r\nLocalDateTime localDateTime = zonedDateTime.toLocalDateTime();\r\n\r\nassertEquals(\"2011-02-12T06:14:01.058086+09:00[Asia/Tokyo]\", zonedDateTime.toString());\r\n```"]