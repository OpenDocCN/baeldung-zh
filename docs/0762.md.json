["```\r\nassertEquals(1, BigInteger.TEN.signum());\r\nassertEquals(-1, BigInteger.TEN.negate().signum());\r\nassertEquals(0, BigInteger.ZERO.signum());\r\n```","```\r\nassertEquals(new BigInteger(\"1\"), new BigInteger(new byte[]{0b1}))\r\nassertEquals(new BigInteger(\"2\"), new BigInteger(new byte[]{0b10}))\r\nassertEquals(new BigInteger(\"4\"), new BigInteger(new byte[]{0b100}))\r\n```","```\r\nbyte[] bytes = { -128 }; // 1000 0000\r\nassertEquals(new BigInteger(\"128\"), new BigInteger(1, bytes));\r\nassertEquals(new BigInteger(\"-128\"), new BigInteger(-1, bytes));\r\n```","```\r\nassertEquals(\"10000000\", new BigInteger(1, bytes));\r\nassertEquals(\"-10000000\", new BigInteger(-1, bytes));\r\n```","```\r\nassertEquals(0, BigInteger.ZERO.bitCount()); \r\nassertEquals(BigInteger.ZERO, new BigInteger(0, new byte[]{}));\r\n```","```\r\nBigInteger bi1 = BigInteger.ZERO.setBit(63);\r\nString str = bi1.toString(2);\r\nassertEquals(64, bi1.bitLength());\r\nassertEquals(1, bi1.signum());\r\nassertEquals(\"9223372036854775808\", bi1.toString());\r\nassertEquals(BigInteger.ONE, bi1.substract(BigInteger.valueOf(Long.MAX_VALUE)));\r\n\r\nassertEquals(64, str.length());\r\nassertTrue(str.matches(\"^10{63}$\")); // 1000 0000 ... 0000\r\n```","```\r\nbyte[] bytes = ByteBuffer.allocate(Long.BYTES).putLong(Long.MIN_VALUE).array();\r\nBigInteger bi2 = new BigInteger(1, bytes);\r\nassertEquals(bi1, bi2);\r\n...\r\n```"]