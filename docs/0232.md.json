["```\r\nint bytesCount = processInputStream(someInputStream);\r\nassertThat(bytesCount).isEqualTo(expectedNumberOfBytes);\r\n```","```\r\npublic class MockingInputStreamUnitTest { \r\n    int processInputStream(InputStream inputStream) throws IOException {\r\n        int count = 0;\r\n        while(inputStream.read() != -1) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n}\r\n```","```\r\npublic class MockingInputStreamUnitTest {\r\n\r\n@Test\r\npublic void givenSimpleImplementation_shouldProcessInputStream() throws IOException {\r\n    int byteCount = processInputStream(new InputStream() {\r\n        private final byte[] msg = \"Hello World\".getBytes();\r\n        private int index = 0;\r\n        @Override\r\n        public int read() {\r\n            if (index >= msg.length) {\r\n                return -1;\r\n            }\r\n            return msg[index++];\r\n        }\r\n    });\r\n    assertThat(byteCount).isEqualTo(11);\r\n}\r\n```","```\r\nString msg = \"Hello World\";\r\nint bytesCount = processInputStream(new ByteArrayInputStream(msg.getBytes()));\r\nassertThat(bytesCount).isEqualTo(11);\r\n```","```\r\nInputStream inputStream = MockingInputStreamUnitTest.class.getResourceAsStream(\"/mockinginputstreams/msg.txt\");\r\nint bytesCount = processInputStream(inputStream);\r\nassertThat(bytesCount).isEqualTo(11);\r\n```","```\r\npublic class GeneratingInputStream extends InputStream {\r\n    private final int desiredSize;\r\n    private final byte[] seed;\r\n    private int actualSize = 0;\r\n\r\n    public GeneratingInputStream(int desiredSize, String seed) {\r\n        this.desiredSize = desiredSize;\r\n        this.seed = seed.getBytes();\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic int read() {\r\n    if (actualSize >= desiredSize) {\r\n        return -1;\r\n    }\r\n    return seed[actualSize++ % seed.length];\r\n}\r\n```"]