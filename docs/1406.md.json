["```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-core</artifactId>\r\n    <version>1.4.5</version>\r\n</dependency>\r\n```","```\r\npublic interface DataPumpService {\r\n    String generate();\r\n}\r\n```","```\r\npublic class DataPumpServiceImpl implements DataPumpService {\r\n\r\n    @Override\r\n    public String generate() {\r\n        return UUID.randomUUID().toString();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class DependencyModule extends AbstractModule {\r\n\r\n    @Override\r\n    public void configure() {\r\n        bind(DataPumpService.class).to(DataPumpServiceImpl.class)\r\n          .in(Scopes.SINGLETON);\r\n    }\r\n\r\n}\r\n```","```\r\npublic class Application {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n      RatpackServer\r\n          .start(server -> server.registry(Guice\r\n            .registry(bindings -> bindings.module(DependencyModule.class)))\r\n            .handlers(chain -> chain.get(\"randomString\", ctx -> {\r\n                DataPumpService dataPumpService = ctx.get(DataPumpService.class);\r\n                ctx.render(dataPumpService.generate().length());\r\n            })));\r\n    }\r\n}\r\n```","```\r\npublic class Application {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n      RatpackServer.start(server -> server\r\n        .registry(Guice.registry(bindings -> bindings\r\n        .bindInstance(DataPumpService.class, new DataPumpServiceImpl())))\r\n        .handlers(chain -> chain.get(\"randomString\", ctx -> {\r\n            DataPumpService dataPumpService = ctx.get(DataPumpService.class);\r\n            ctx.render(dataPumpService.generate());\r\n        })));\r\n    }\r\n}\r\n```","```\r\npublic class ServiceFactory {\r\n\r\n    private static DataPumpService instance;\r\n\r\n    public static void setInstance(DataPumpService dataPumpService) {\r\n        instance = dataPumpService;\r\n    }\r\n\r\n    public static DataPumpService getInstance() {\r\n        if (instance == null) {\r\n            return new DataPumpServiceImpl();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```","```\r\n.get(\"factory\", ctx -> ctx.render(ServiceFactory.getInstance().generate()))\r\n```","```\r\n@RunWith(JUnit4.class)\r\npublic class ApplicationTest {\r\n\r\n    MainClassApplicationUnderTest appUnderTest\r\n      = new MainClassApplicationUnderTest(Application.class);\r\n\r\n    @Test\r\n    public void givenStaticUrl_getDynamicText() {\r\n        assertEquals(21, appUnderTest.getHttpClient()\r\n          .getText(\"/randomString\").length());\r\n    }\r\n\r\n    @After\r\n    public void shutdown() {\r\n        appUnderTest.close();\r\n    }\r\n}\r\n```"]