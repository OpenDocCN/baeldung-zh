["```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>3.3.3</version>\r\n    <scope>test</scope>\r\n </dependency>\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n    <type>bundle</type>\r\n</dependency>\r\n```","```\r\npublic class Flower {\r\n\r\n    private String name;\r\n    private Integer petals;\r\n\r\n    public Flower(String name, Integer petals) {\r\n        this.name = name;\r\n        this.petals = petals;\r\n    }\r\n\r\n    // default constructor, getters and setters\r\n}\r\n```","```\r\npublic class FlowerJsonStringValidator {\r\n    private ObjectMapper objectMapper;\r\n\r\n    public FlowerJsonStringValidator(ObjectMapper objectMapper) {\r\n        this.objectMapper = objectMapper;\r\n    }\r\n\r\n    public boolean flowerHasPetals(String jsonFlowerAsString) throws JsonProcessingException {\r\n        Flower flower = objectMapper.readValue(jsonFlowerAsString, Flower.class);\r\n        return flower.getPetals() > 0;\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class FlowerJsonStringValidatorUnitTest {\r\n\r\n    @Mock\r\n    private ObjectMapper objectMapper;\r\n\r\n    private FlowerJsonStringValidator flowerJsonStringValidator;\r\n\r\n    @BeforeEach\r\n    public void setUp() {\r\n        flowerJsonStringValidator = new FlowerJsonStringValidator(objectMapper);\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenCallingHasPetalsWithPetals_thenReturnsTrue() throws JsonProcessingException {\r\n    Flower rose = new Flower(\"testFlower\", 100);\r\n\r\n    when(objectMapper.readValue(anyString(), eq(Flower.class))).thenReturn(rose);\r\n\r\n    assertTrue(flowerJsonStringValidator.flowerHasPetals(\"this can be a very long json flower\"));\r\n\r\n    verify(objectMapper, times(1)).readValue(anyString(), eq(Flower.class));\r\n}\r\n```"]