["```\r\nint number = 20;\r\nThread newThread = new Thread(() -> {\r\n    System.out.println(\"Factorial of \" + number + \" is: \" + factorial(number));\r\n});\r\nnewThread.start();\r\n```","```\r\nExecutorService threadpool = Executors.newCachedThreadPool();\r\nFuture<Long> futureTask = threadpool.submit(() -> factorial(number));\r\n\r\nwhile (!futureTask.isDone()) {\r\n    System.out.println(\"FutureTask is not finished yet...\"); \r\n} \r\nlong result = futureTask.get(); \r\n\r\nthreadpool.shutdown();\r\n```","```\r\nCompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> factorial(number));\r\nwhile (!completableFuture.isDone()) {\r\n    System.out.println(\"CompletableFuture is not finished yet...\");\r\n}\r\nlong result = completableFuture.get();\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nExecutorService threadpool = Executors.newCachedThreadPool();\r\nListeningExecutorService service = MoreExecutors.listeningDecorator(threadpool);\r\nListenableFuture<Long> guavaFuture = (ListenableFuture<Long>) service.submit(()-> factorial(number));\r\nlong result = guavaFuture.get();\r\n```","```\r\nListeningExecutorService service = MoreExecutors.listeningDecorator(threadpool);\r\nAsyncCallable<Long> asyncCallable = Callables.asAsyncCallable(new Callable<Long>() {\r\n    public Long call() {\r\n        return factorial(number);\r\n    }\r\n}, service);\r\nListenableFuture<Long> guavaFuture = Futures.submitAsync(asyncCallable, service);\r\n```","```\r\nFutures.addCallback(\r\n  factorialFuture,\r\n  new FutureCallback<Long>() {\r\n      public void onSuccess(Long factorial) {\r\n          System.out.println(factorial);\r\n      }\r\n      public void onFailure(Throwable thrown) {\r\n          thrown.getCause();\r\n      }\r\n  }, \r\n  service);\r\n```","```\r\n<dependency>\r\n    <groupId>com.ea.async</groupId>\r\n    <artifactId>ea-async</artifactId>\r\n    <version>1.2.3</version>\r\n</dependency>\r\n```","```\r\nstatic { \r\n    Async.init(); \r\n}\r\n\r\npublic long factorialUsingEAAsync(int number) {\r\n    CompletableFuture<Long> completableFuture = CompletableFuture.supplyAsync(() -> factorial(number));\r\n    long result = Async.await(completableFuture);\r\n}\r\n```","```\r\njava -javaagent:ea-async-1.2.3.jar -cp <claspath> <MainClass>\r\n```","```\r\nCompletableFuture<Void> completableFuture = hello()\r\n  .thenComposeAsync(hello -> mergeWorld(hello))\r\n  .thenAcceptAsync(helloWorld -> print(helloWorld))\r\n  .exceptionally(throwable -> {\r\n      System.out.println(throwable.getCause()); \r\n      return null;\r\n  });\r\ncompletableFuture.get();\r\n```","```\r\ntry {\r\n    String hello = await(hello());\r\n    String helloWorld = await(mergeWorld(hello));\r\n    await(CompletableFuture.runAsync(() -> print(helloWorld)));\r\n} catch (Exception e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.cactoos</groupId>\r\n    <artifactId>cactoos</artifactId>\r\n    <version>0.43</version>\r\n</dependency>\r\n```","```\r\nAsync<Integer, Long> asyncFunction = new Async<Integer, Long>(input -> factorial(input));\r\nFuture<Long> asyncFuture = asyncFunction.apply(number);\r\nlong result = asyncFuture.get();\r\n```","```\r\n<dependency>\r\n    <groupId>com.jcabi</groupId>\r\n    <artifactId>jcabi-aspects</artifactId>\r\n    <version>0.22.6</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjrt</artifactId>\r\n    <version>1.9.5</version>\r\n</dependency> \r\n```","```\r\n<plugin>\r\n    <groupId>com.jcabi</groupId>\r\n    <artifactId>jcabi-maven-plugin</artifactId>\r\n    <version>0.14.1</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>ajc</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjtools</artifactId>\r\n            <version>1.9.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.9.1</version>\r\n        </dependency>\r\n    </dependencies>\r\n</plugin>\r\n```","```\r\n@Async\r\n@Loggable\r\npublic Future<Long> factorialUsingAspect(int number) {\r\n    Future<Long> factorialFuture = CompletableFuture.completedFuture(factorial(number));\r\n    return factorialFuture;\r\n}\r\n```","```\r\nmvn install\r\n```","```\r\n --- jcabi-maven-plugin:0.14.1:ajc (default) @ java-async ---\r\n[INFO] jcabi-aspects 0.18/55a5c13 started new daemon thread jcabi-loggable for watching of @Loggable annotated methods\r\n[INFO] Unwoven classes will be copied to /tutorials/java-async/target/unwoven\r\n[INFO] jcabi-aspects 0.18/55a5c13 started new daemon thread jcabi-cacheable for automated cleaning of expired @Cacheable values\r\n[INFO] ajc result: 10 file(s) processed, 0 pointcut(s) woven, 0 error(s), 0 warning(s)\r\n```","```\r\nJoin point 'method-execution(java.util.concurrent.Future \r\ncom.baeldung.async.JavaAsync.factorialUsingJcabiAspect(int))' \r\nin Type 'com.baeldung.async.JavaAsync' (JavaAsync.java:158) \r\nadvised by around advice from 'com.jcabi.aspects.aj.MethodAsyncRunner' \r\n(jcabi-aspects-0.22.6.jar!MethodAsyncRunner.class(from MethodAsyncRunner.java))\r\n```","```\r\n17:46:58.245 [main] INFO com.jcabi.aspects.aj.NamedThreads - \r\njcabi-aspects 0.22.6/3f0a1f7 started new daemon thread jcabi-loggable for watching of @Loggable annotated methods\r\n17:46:58.355 [main] INFO com.jcabi.aspects.aj.NamedThreads - \r\njcabi-aspects 0.22.6/3f0a1f7 started new daemon thread jcabi-async for Asynchronous method execution\r\n17:46:58.358 [jcabi-async] INFO com.baeldung.async.JavaAsync - \r\n#factorialUsingJcabiAspect(20): '[[email protected]](/web/20221007090003/https://www.baeldung.com/cdn-cgi/l/email-protection)[Completed normally]' in 44.64µs\r\n```"]