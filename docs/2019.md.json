["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.6</version>\r\n</parent>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jta-atomikos</artifactId>\r\n</dependency>\r\n```","```\r\n+-----------+----------------+\r\n| ID        |  BALANCE       |\r\n+-----------+----------------+\r\n| a0000001  |  1000          |  \r\n| a0000002  |  2000          |\r\n+-----------+----------------+\r\n```","```\r\n@Transactional\r\npublic void executeTransfer(String fromAccontId, String toAccountId, BigDecimal amount) {\r\n    bankAccountService.transfer(fromAccontId, toAccountId, amount);\r\n    auditService.log(fromAccontId, toAccountId, amount);\r\n    ...\r\n}\r\n```","```\r\ntellerService.executeTransfer(\"a0000001\", \"a0000002\", BigDecimal.valueOf(500));\r\nassertThat(accountService.balanceOf(\"a0000001\"))\r\n  .isEqualByComparingTo(BigDecimal.valueOf(500));        \r\nassertThat(accountService.balanceOf(\"a0000002\"))\r\n  .isEqualByComparingTo(BigDecimal.valueOf(2500));\r\n\r\nTransferLog lastTransferLog = auditService\r\n  .lastTransferLog();\r\nassertThat(lastTransferLog)\r\n  .isNotNull();        \r\nassertThat(lastTransferLog.getFromAccountId())\r\n  .isEqualTo(\"a0000001\");\r\nassertThat(lastTransferLog.getToAccountId())\r\n  .isEqualTo(\"a0000002\"); \r\nassertThat(lastTransferLog.getAmount())\r\n  .isEqualByComparingTo(BigDecimal.valueOf(500));\r\n```","```\r\n@Transactional\r\npublic void executeTransfer(String fromAccontId, String toAccountId, BigDecimal amount) {\r\n    bankAccountService.transfer(fromAccontId, toAccountId, amount);\r\n    auditService.log(fromAccontId, toAccountId, amount);\r\n    BigDecimal balance = bankAccountService.balanceOf(fromAccontId);\r\n    if(balance.compareTo(BigDecimal.ZERO) < 0) {\r\n        throw new RuntimeException(\"Insufficient fund.\");\r\n    }\r\n}\r\n```","```\r\nassertThatThrownBy(() -> {\r\n    tellerService.executeTransfer(\"a0000002\", \"a0000001\", BigDecimal.valueOf(10000));\r\n}).hasMessage(\"Insufficient fund.\");\r\n\r\nassertThat(accountService.balanceOf(\"a0000001\")).isEqualByComparingTo(BigDecimal.valueOf(1000));\r\nassertThat(accountService.balanceOf(\"a0000002\")).isEqualByComparingTo(BigDecimal.valueOf(2000));\r\nassertThat(auditServie.lastTransferLog()).isNull();\r\n```","```\r\nuserTransaction.begin();\r\n\r\nbankAccountService.transfer(fromAccontId, toAccountId, amount);\r\nauditService.log(fromAccontId, toAccountId, amount);\r\nBigDecimal balance = bankAccountService.balanceOf(fromAccontId);\r\nif(balance.compareTo(BigDecimal.ZERO) < 0) {\r\n    userTransaction.rollback();\r\n    throw new RuntimeException(\"Insufficient fund.\");\r\n} else {\r\n    userTransaction.commit();\r\n}\r\n```"]