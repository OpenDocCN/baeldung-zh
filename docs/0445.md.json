["```\r\n<repository>\r\n    <id>atlassian-public</id>\r\n    <url>https://packages.atlassian.com/maven/repository/public</url>\r\n</repository>\r\n```","```\r\n<dependency>\r\n    <groupId>com.atlassian.jira</groupId>\r\n    <artifactId>jira-rest-java-client-core</artifactId>\r\n    <version>4.0.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.atlassian.fugue</groupId>\r\n    <artifactId>fugue</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n```","```\r\nMyJiraClient myJiraClient = new MyJiraClient(\r\n  \"user.name\", \r\n  \"password\", \r\n  \"http://jira.company.com\");\r\n```","```\r\npublic MyJiraClient(String username, String password, String jiraUrl) {\r\n    this.username = username;\r\n    this.password = password;\r\n    this.jiraUrl = jiraUrl;\r\n    this.restClient = getJiraRestClient();\r\n}\r\n```","```\r\nprivate JiraRestClient getJiraRestClient() {\r\n    return new AsynchronousJiraRestClientFactory()\r\n      .createWithBasicHttpAuthentication(getJiraUri(), this.username, this.password);\r\n}\r\n```","```\r\nprivate URI getJiraUri() {\r\n    return URI.create(this.jiraUrl);\r\n}\r\n```","```\r\npublic String createIssue(String projectKey, Long issueType, String issueSummary) {\r\n    IssueRestClient issueClient = restClient.getIssueClient();\r\n    IssueInput newIssue = new IssueInputBuilder(\r\n      projectKey, issueType, issueSummary).build();\r\n    return issueClient.createIssue(newIssue).claim().getKey();\r\n}\r\n```","```\r\npublic void updateIssueDescription(String issueKey, String newDescription) {\r\n    IssueInput input = new IssueInputBuilder()\r\n      .setDescription(newDescription)\r\n      .build();\r\n    restClient.getIssueClient()\r\n      .updateIssue(issueKey, input)\r\n      .claim();\r\n}\r\n```","```\r\npublic Issue getIssue(String issueKey) {\r\n    return restClient.getIssueClient()\r\n      .getIssue(issueKey) \r\n      .claim();\r\n}\r\n```","```\r\nIssue issue = myJiraClient.getIssue(issueKey);\r\nSystem.out.println(issue.getDescription());\r\n```","```\r\npublic void voteForAnIssue(Issue issue) {\r\n    restClient.getIssueClient()\r\n      .vote(issue.getVotesUri())\r\n      .claim();\r\n}\r\n```","```\r\npublic int getTotalVotesCount(String issueKey) {\r\n    BasicVotes votes = getIssue(issueKey).getVotes();\r\n    return votes == null ? 0 : votes.getVotes();\r\n}\r\n```","```\r\npublic void addComment(Issue issue, String commentBody) {\r\n    restClient.getIssueClient()\r\n      .addComment(issue.getCommentsUri(), Comment.valueOf(commentBody));\r\n}\r\n```","```\r\npublic List<Comment> getAllComments(String issueKey) {\r\n    return StreamSupport.stream(getIssue(issueKey).getComments().spliterator(), false)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic void deleteIssue(String issueKey, boolean deleteSubtasks) {\r\n    restClient.getIssueClient()\r\n      .deleteIssue(issueKey, deleteSubtasks)\r\n      .claim();\r\n}\r\n```"]