["```\r\npublic class ZipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"test1.txt\";\r\n        FileOutputStream fos = new FileOutputStream(\"compressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n        zipOut.putNextEntry(zipEntry);\r\n        byte[] bytes = new byte[1024];\r\n        int length;\r\n        while((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        zipOut.close();\r\n        fis.close();\r\n        fos.close();\r\n    }\r\n}\r\n```","```\r\npublic class ZipMultipleFiles {\r\n    public static void main(String[] args) throws IOException {\r\n        List<String> srcFiles = Arrays.asList(\"test1.txt\", \"test2.txt\");\r\n        FileOutputStream fos = new FileOutputStream(\"multiCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        for (String srcFile : srcFiles) {\r\n            File fileToZip = new File(srcFile);\r\n            FileInputStream fis = new FileInputStream(fileToZip);\r\n            ZipEntry zipEntry = new ZipEntry(fileToZip.getName());\r\n            zipOut.putNextEntry(zipEntry);\r\n\r\n            byte[] bytes = new byte[1024];\r\n            int length;\r\n            while((length = fis.read(bytes)) >= 0) {\r\n                zipOut.write(bytes, 0, length);\r\n            }\r\n            fis.close();\r\n        }\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n}\r\n```","```\r\npublic class ZipDirectory {\r\n    public static void main(String[] args) throws IOException {\r\n        String sourceFile = \"zipTest\";\r\n        FileOutputStream fos = new FileOutputStream(\"dirCompressed.zip\");\r\n        ZipOutputStream zipOut = new ZipOutputStream(fos);\r\n        File fileToZip = new File(sourceFile);\r\n\r\n        zipFile(fileToZip, fileToZip.getName(), zipOut);\r\n        zipOut.close();\r\n        fos.close();\r\n    }\r\n\r\n    private static void zipFile(File fileToZip, String fileName, ZipOutputStream zipOut) throws IOException {\r\n        if (fileToZip.isHidden()) {\r\n            return;\r\n        }\r\n        if (fileToZip.isDirectory()) {\r\n            if (fileName.endsWith(\"/\")) {\r\n                zipOut.putNextEntry(new ZipEntry(fileName));\r\n                zipOut.closeEntry();\r\n            } else {\r\n                zipOut.putNextEntry(new ZipEntry(fileName + \"/\"));\r\n                zipOut.closeEntry();\r\n            }\r\n            File[] children = fileToZip.listFiles();\r\n            for (File childFile : children) {\r\n                zipFile(childFile, fileName + \"/\" + childFile.getName(), zipOut);\r\n            }\r\n            return;\r\n        }\r\n        FileInputStream fis = new FileInputStream(fileToZip);\r\n        ZipEntry zipEntry = new ZipEntry(fileName);\r\n        zipOut.putNextEntry(zipEntry);\r\n        byte[] bytes = new byte[1024];\r\n        int length;\r\n        while ((length = fis.read(bytes)) >= 0) {\r\n            zipOut.write(bytes, 0, length);\r\n        }\r\n        fis.close();\r\n    }\r\n}\r\n```","```\r\npublic class UnzipFile {\r\n    public static void main(String[] args) throws IOException {\r\n        String fileZip = \"src/main/resources/unzipTest/compressed.zip\";\r\n        File destDir = new File(\"src/main/resources/unzipTest\");\r\n        byte[] buffer = new byte[1024];\r\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(fileZip));\r\n        ZipEntry zipEntry = zis.getNextEntry();\r\n        while (zipEntry != null) {\r\n           // ...\r\n        }\r\n        zis.closeEntry();\r\n        zis.close();\r\n    }\r\n}\r\n```","```\r\nwhile (zipEntry != null) {\r\n     File newFile = newFile(destDir, zipEntry);\r\n     if (zipEntry.isDirectory()) {\r\n         if (!newFile.isDirectory() && !newFile.mkdirs()) {\r\n             throw new IOException(\"Failed to create directory \" + newFile);\r\n         }\r\n     } else {\r\n         // fix for Windows-created archives\r\n         File parent = newFile.getParentFile();\r\n         if (!parent.isDirectory() && !parent.mkdirs()) {\r\n             throw new IOException(\"Failed to create directory \" + parent);\r\n         }\r\n\r\n         // write file content\r\n         FileOutputStream fos = new FileOutputStream(newFile);\r\n         int len;\r\n         while ((len = zis.read(buffer)) > 0) {\r\n             fos.write(buffer, 0, len);\r\n         }\r\n         fos.close();\r\n     }\r\n zipEntry = zis.getNextEntry();\r\n}\r\n```","```\r\npublic static File newFile(File destinationDir, ZipEntry zipEntry) throws IOException {\r\n    File destFile = new File(destinationDir, zipEntry.getName());\r\n\r\n    String destDirPath = destinationDir.getCanonicalPath();\r\n    String destFilePath = destFile.getCanonicalPath();\r\n\r\n    if (!destFilePath.startsWith(destDirPath + File.separator)) {\r\n        throw new IOException(\"Entry is outside of the target dir: \" + zipEntry.getName());\r\n    }\r\n\r\n    return destFile;\r\n}\r\n```"]