["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nRateLimiter rateLimiter = RateLimiter.create(2);\r\n```","```\r\nrateLimiter.acquire(1);\r\n```","```\r\nlong startTime = ZonedDateTime.now().getSecond();\r\nrateLimiter.acquire(1);\r\ndoSomeLimitedOperation();\r\nrateLimiter.acquire(1);\r\ndoSomeLimitedOperation();\r\nlong elapsedTimeSeconds = ZonedDateTime.now().getSecond() - startTime;\r\n```","```\r\nassertThat(elapsedTimeSeconds <= 1);\r\n```","```\r\n@Test\r\npublic void givenLimitedResource_whenRequestOnce_thenShouldPermitWithoutBlocking() {\r\n    // given\r\n    RateLimiter rateLimiter = RateLimiter.create(100);\r\n\r\n    // when\r\n    long startTime = ZonedDateTime.now().getSecond();\r\n    rateLimiter.acquire(100);\r\n    doSomeLimitedOperation();\r\n    long elapsedTimeSeconds = ZonedDateTime.now().getSecond() - startTime;\r\n\r\n    // then\r\n    assertThat(elapsedTimeSeconds <= 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLimitedResource_whenUseRateLimiter_thenShouldLimitPermits() {\r\n    // given\r\n    RateLimiter rateLimiter = RateLimiter.create(100);\r\n\r\n    // when\r\n    long startTime = ZonedDateTime.now().getSecond();\r\n    IntStream.range(0, 1000).forEach(i -> {\r\n        rateLimiter.acquire();\r\n        doSomeLimitedOperation();\r\n    });\r\n    long elapsedTimeSeconds = ZonedDateTime.now().getSecond() - startTime;\r\n\r\n    // then\r\n    assertThat(elapsedTimeSeconds >= 10);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLimitedResource_whenTryAcquire_shouldNotBlockIndefinitely() {\r\n    // given\r\n    RateLimiter rateLimiter = RateLimiter.create(1);\r\n\r\n    // when\r\n    rateLimiter.acquire();\r\n    boolean result = rateLimiter.tryAcquire(2, 10, TimeUnit.MILLISECONDS);\r\n\r\n    // then\r\n    assertThat(result).isFalse();\r\n}\r\n```"]