["```\r\n<dependency>\r\n    <groupId>org.multiverse</groupId>\r\n    <artifactId>multiverse-core</artifactId>\r\n    <version>0.7.0</version>\r\n</dependency>\r\n```","```\r\npublic class Account {\r\n    private TxnLong lastUpdate;\r\n    private TxnInteger balance;\r\n\r\n    public Account(int balance) {\r\n        this.lastUpdate = StmUtils.newTxnLong(System.currentTimeMillis());\r\n        this.balance = StmUtils.newTxnInteger(balance);\r\n    }\r\n}\r\n```","```\r\npublic void adjustBy(int amount) {\r\n    adjustBy(amount, System.currentTimeMillis());\r\n}\r\n\r\npublic void adjustBy(int amount, long date) {\r\n    StmUtils.atomic(() -> {\r\n        balance.increment(amount);\r\n        lastUpdate.set(date);\r\n\r\n        if (balance.get() <= 0) {\r\n            throw new IllegalArgumentException(\"Not enough money\");\r\n        }\r\n    });\r\n}\r\n```","```\r\npublic Integer getBalance() {\r\n    return balance.atomicGet();\r\n}\r\n```","```\r\n@Test\r\npublic void givenAccount_whenDecrement_thenShouldReturnProperValue() {\r\n    Account a = new Account(10);\r\n    a.adjustBy(-5);\r\n\r\n    assertThat(a.getBalance()).isEqualTo(5);\r\n}\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void givenAccount_whenDecrementTooMuch_thenShouldThrow() {\r\n    // given\r\n    Account a = new Account(10);\r\n\r\n    // when\r\n    a.adjustBy(-11);\r\n} \r\n```","```\r\nExecutorService ex = Executors.newFixedThreadPool(2);\r\nAccount a = new Account(10);\r\nCountDownLatch countDownLatch = new CountDownLatch(1);\r\nAtomicBoolean exceptionThrown = new AtomicBoolean(false);\r\n\r\nex.submit(() -> {\r\n    try {\r\n        countDownLatch.await();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n\r\n    try {\r\n        a.adjustBy(-6);\r\n    } catch (IllegalArgumentException e) {\r\n        exceptionThrown.set(true);\r\n    }\r\n});\r\nex.submit(() -> {\r\n    try {\r\n        countDownLatch.await();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    try {\r\n        a.adjustBy(-5);\r\n    } catch (IllegalArgumentException e) {\r\n        exceptionThrown.set(true);\r\n    }\r\n});\r\n```","```\r\ncountDownLatch.countDown();\r\nex.awaitTermination(1, TimeUnit.SECONDS);\r\nex.shutdown();\r\n\r\nassertTrue(exceptionThrown.get());\r\n```","```\r\npublic void transferTo(Account other, int amount) {\r\n    StmUtils.atomic(() -> {\r\n        long date = System.currentTimeMillis();\r\n        adjustBy(-amount, date);\r\n        other.adjustBy(amount, date);\r\n    });\r\n}\r\n```","```\r\nAccount a = new Account(10);\r\nAccount b = new Account(10);\r\n\r\na.transferTo(b, 5);\r\n\r\nassertThat(a.getBalance()).isEqualTo(5);\r\nassertThat(b.getBalance()).isEqualTo(15);\r\n```","```\r\ntry {\r\n    a.transferTo(b, 20);\r\n} catch (IllegalArgumentException e) {\r\n    System.out.println(\"failed to transfer money\");\r\n}\r\n\r\nassertThat(a.getBalance()).isEqualTo(5);\r\nassertThat(b.getBalance()).isEqualTo(15);\r\n```","```\r\nExecutorService ex = Executors.newFixedThreadPool(2);\r\nAccount a = new Account(10);\r\nAccount b = new Account(10);\r\nCountDownLatch countDownLatch = new CountDownLatch(1);\r\n\r\nex.submit(() -> {\r\n    try {\r\n        countDownLatch.await();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    a.transferTo(b, 10);\r\n});\r\nex.submit(() -> {\r\n    try {\r\n        countDownLatch.await();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    b.transferTo(a, 1);\r\n\r\n});\r\n```","```\r\ncountDownLatch.countDown();\r\nex.awaitTermination(1, TimeUnit.SECONDS);\r\nex.shutdown();\r\n\r\nassertThat(a.getBalance()).isEqualTo(1);\r\nassertThat(b.getBalance()).isEqualTo(19);\r\n```"]