["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-couchbase-reactive</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class CouchbaseProperties {\r\n\r\n    private List<String> bootstrapHosts;\r\n    private String bucketName;\r\n    private String bucketPassword;\r\n    private int port;\r\n\r\n    public CouchbaseProperties(\r\n      @Value(\"${spring.couchbase.bootstrap-hosts}\") List<String> bootstrapHosts, \r\n      @Value(\"${spring.couchbase.bucket.name}\") String bucketName, \r\n      @Value(\"${spring.couchbase.bucket.password}\") String bucketPassword, \r\n      @Value(\"${spring.couchbase.port}\") int port) {\r\n        this.bootstrapHosts = Collections.unmodifiableList(bootstrapHosts);\r\n        this.bucketName = bucketName;\r\n        this.bucketPassword = bucketPassword;\r\n        this.port = port;\r\n    }\r\n\r\n    // getters\r\n}\r\n```","```\r\n@Configuration\r\n@EnableReactiveCouchbaseRepositories(\"com.baeldung.couchbase.domain.repository\")\r\npublic class ReactiveCouchbaseConfiguration extends AbstractReactiveCouchbaseConfiguration {\r\n\r\n    private CouchbaseProperties couchbaseProperties;\r\n\r\n    public ReactiveCouchbaseConfiguration(CouchbaseProperties couchbaseProperties) {\r\n        this.couchbaseProperties = couchbaseProperties;\r\n    }\r\n\r\n    @Override\r\n    protected List<String> getBootstrapHosts() {\r\n        return couchbaseProperties.getBootstrapHosts();\r\n    }\r\n\r\n    @Override\r\n    protected String getBucketName() {\r\n        return couchbaseProperties.getBucketName();\r\n    }\r\n\r\n    @Override\r\n    protected String getBucketPassword() {\r\n        return couchbaseProperties.getBucketPassword();\r\n    }\r\n\r\n    @Override\r\n    public CouchbaseEnvironment couchbaseEnvironment() {\r\n        return DefaultCouchbaseEnvironment\r\n          .builder()\r\n          .bootstrapHttpDirectPort(couchbaseProperties.getPort())\r\n          .build();\r\n    }\r\n}\r\n```","```\r\n@Document\r\npublic class Person {\r\n    @Id private UUID id;\r\n    private String firstName;\r\n\r\n   //getters and setters\r\n}\r\n```","```\r\n@Repository\r\n@ViewIndexed(designDoc = ViewPersonRepository.DESIGN_DOCUMENT)\r\npublic interface ViewPersonRepository extends ReactiveCrudRepository<Person, UUID> {\r\n\r\n    String DESIGN_DOCUMENT = \"person\";\r\n}\r\n```","```\r\n@View(designDocument = ViewPersonRepository.DESIGN_DOCUMENT)\r\nFlux<Person> findByFirstName(String firstName);\r\n```","```\r\n@Test\r\npublic void shouldSavePerson_findById_thenDeleteIt() {\r\n    final UUID id = UUID.randomUUID();\r\n    final Person person = new Person(id, \"John\");\r\n    personRepository\r\n      .save(person)\r\n      .subscribe();\r\n\r\n    final Mono<Person> byId = personRepository.findById(id);\r\n\r\n    StepVerifier\r\n      .create(byId)\r\n      .expectNextMatches(result -> result\r\n        .getId()\r\n        .equals(id))\r\n      .expectComplete()\r\n      .verify();\r\n\r\n    personRepository\r\n      .delete(person)\r\n      .subscribe();\r\n}\r\n```","```\r\n@Repository\r\n@N1qlPrimaryIndexed\r\npublic interface N1QLPersonRepository extends ReactiveCrudRepository<Person, UUID> {\r\n    Flux<Person> findAllByFirstName(String firstName);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldFindAll_byLastName() {\r\n    final String firstName = \"John\";\r\n    final Person matchingPerson = new Person(UUID.randomUUID(), firstName);\r\n    final Person nonMatchingPerson = new Person(UUID.randomUUID(), \"NotJohn\");\r\n    personRepository\r\n      .save(matchingPerson)\r\n      .subscribe();\r\n    personRepository\r\n      .save(nonMatchingPerson)\r\n      .subscribe();\r\n\r\n    final Flux<Person> allByFirstName = personRepository.findAllByFirstName(firstName);\r\n\r\n    StepVerifier\r\n      .create(allByFirstName)\r\n      .expectNext(matchingPerson)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Repository\r\npublic interface N1QLSortingPersonRepository extends ReactiveSortingRepository<Person, UUID> {\r\n    Flux<Person> findAllByFirstName(String firstName, Sort sort);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldFindAll_sortedByFirstName() {\r\n    final Person firstPerson = new Person(UUID.randomUUID(), \"John\");\r\n    final Person secondPerson = new Person(UUID.randomUUID(), \"Mikki\");\r\n    personRepository\r\n      .save(firstPerson)\r\n      .subscribe();\r\n    personRepository\r\n      .save(secondPerson)\r\n      .subscribe();\r\n\r\n    final Flux<Person> allByFirstName = personRepository\r\n      .findAll(Sort.by(Sort.Direction.DESC, \"firstName\"));\r\n\r\n    StepVerifier\r\n      .create(allByFirstName)\r\n      .expectNextMatches(person -> person\r\n        .getFirstName()\r\n        .equals(secondPerson.getFirstName()))\r\n      .expectNextMatches(person -> person\r\n        .getFirstName()\r\n        .equals(firstPerson.getFirstName()))\r\n      .verifyComplete();\r\n}\r\n```"]