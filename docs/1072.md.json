["```\r\npublic class UniqueRng implements Iterator<Integer> {\r\n    private List<Integer> numbers = new ArrayList<>();\r\n\r\n    public UniqueRng(int n) {\r\n        for (int i = 1; i <= n; i++) {\r\n            numbers.add(i);\r\n        }\r\n\r\n        Collections.shuffle(numbers);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic Integer next() {\r\n    if (!hasNext()) {\r\n        throw new NoSuchElementException();\r\n    }\r\n    return numbers.remove(0);\r\n}\r\n\r\n@Override\r\npublic boolean hasNext() {\r\n    return !numbers.isEmpty();\r\n}\r\n```","```\r\nUniqueRng rng = new UniqueRng(5);\r\nwhile (rng.hasNext()) {\r\n    System.out.print(rng.next() + \" \");\r\n}\r\n```","```\r\n4 1 2 5 3\r\n```","```\r\npublic class BigUniqueRng implements Iterator<Integer> {\r\n    private Random random = new Random();\r\n    private Set<Integer> generated = new LinkedHashSet<>();\r\n\r\n    public BigUniqueRng(int size, int max) {\r\n        while (generated.size() < size) {\r\n            Integer next = random.nextInt(max);\r\n            generated.add(next);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic Integer next() {\r\n    Iterator<Integer> iterator = generated.iterator();\r\n    Integer next = iterator.next();\r\n    iterator.remove();\r\n    return next;\r\n}\r\n```","```\r\nSet<Integer> set = new Random().ints(-5, 15)\r\n  .distinct()\r\n  .limit(5)\r\n  .boxed()\r\n  .collect(Collectors.toSet());\r\n```","```\r\n-5 13 9 -4 14\r\n```"]