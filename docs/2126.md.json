["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/weather\")\r\npublic class WeatherController {\r\n\r\n    @GetMapping(\"/today\")\r\n    public String getMessage() {\r\n        return \"It's a bright sunny day today!\";\r\n    }\r\n\r\n}\r\n```","```\r\n$ curl -s localhost:8080/weather/today\r\nIt's a bright sunny day today!\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableZuulProxy\r\npublic class ApiGatewayApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ApiGatewayApplication.class, args);\r\n    }\r\n\r\n}\r\n```","```\r\nspring:\r\n   application:\r\n      name: api-gateway\r\nserver:\r\n   port: 7070\r\n\r\nzuul:\r\n   igoredServices: '*'\r\n   routes:\r\n      weather-service:\r\n         path: /weather/**\r\n         serviceId: weather-service\r\n         strip-prefix: false\r\n\r\nribbon:\r\n   eureka:\r\n      enabled: false\r\n\r\nweather-service:\r\n   ribbon:\r\n      listOfServers: localhost:8080\r\n```","```\r\n$ curl -s localhost:7070/weather/today\r\nIt's a bright sunny day today!\r\n```","```\r\n$ curl -s localhost:7070/weather/today\r\n{\"timestamp\":\"2019-10-08T12:42:09.479+0000\",\"status\":500,\r\n\"error\":\"Internal Server Error\",\"message\":\"GENERAL\"}\r\n```","```\r\n@Component\r\nclass WeatherServiceFallback implements FallbackProvider {\r\n\r\n    private static final String DEFAULT_MESSAGE = \"Weather information is not available.\";\r\n\r\n    @Override\r\n    public String getRoute() {\r\n        return \"weather-service\";\r\n    }\r\n\r\n    @Override\r\n    public ClientHttpResponse fallbackResponse(String route, Throwable cause) {\r\n        if (cause instanceof HystrixTimeoutException) {\r\n            return new GatewayClientResponse(HttpStatus.GATEWAY_TIMEOUT, DEFAULT_MESSAGE);\r\n        } else {\r\n            return new GatewayClientResponse(HttpStatus.INTERNAL_SERVER_ERROR, DEFAULT_MESSAGE);\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\n$ curl -s localhost:7070/weather/today\r\nWeather information is not available.\r\n```","```\r\n@Override\r\npublic String getRoute() {\r\n    return \"*\"; // or return null;\r\n}\r\n```"]