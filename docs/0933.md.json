["```\r\npublic abstract class CircleClass {\r\n\r\n    private String color;\r\n    private List<String> allowedColors = Arrays.asList(\"RED\", \"GREEN\", \"BLUE\");\r\n\r\n    public boolean isValid() {\r\n        if (allowedColors.contains(getColor())) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //standard getters and setters\r\n}\r\n```","```\r\npublic class ChildCircleClass extends CircleClass {\r\n}\r\n```","```\r\nCircleClass redCircle = new ChildCircleClass();\r\nredCircle.setColor(\"RED\");\r\nassertTrue(redCircle.isValid());\r\n```","```\r\npublic interface CircleInterface {\r\n    List<String> allowedColors = Arrays.asList(\"RED\", \"GREEN\", \"BLUE\");\r\n\r\n    String getColor();\r\n\r\n    public default boolean isValid() {\r\n        if (allowedColors.contains(getColor())) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class ChidlCircleInterfaceImpl implements CircleInterface {\r\n    private String color;\r\n\r\n    @Override\r\n    public String getColor() {\r\n        return color;\r\n    }\r\n\r\n    public void setColor(String color) {\r\n        this.color = color;\r\n    }\r\n}\r\n```","```\r\nChidlCircleInterfaceImpl redCircleWithoutState = new ChidlCircleInterfaceImpl();\r\nredCircleWithoutState.setColor(\"RED\");\r\nassertTrue(redCircleWithoutState.isValid());\r\n```"]