["```\r\npublic interface Consumer {\r\n    public void consume(String parameter)\r\n}\r\n```","```\r\npublic interface Consumer<T> {\r\n    public void consume(T parameter)\r\n}\r\n```","```\r\npublic class IntegerConsumer implements Consumer<Integer> {\r\n    public void consume(Integer parameter)\r\n}\r\n```","```\r\nList list = new ArrayList();\r\nlist.add(\"foo\");\r\nObject o = list.get(0);\r\nString foo = (String) o;\r\n```","```\r\nlist.add(1)\r\nObject o = list.get(0);\r\nString foo = (String) o;\r\n```","```\r\nList<String> list = new ArrayList<>();\r\nlist.add(\"foo\");\r\nString o = list.get(0);    // No cast\r\nInteger foo = list.get(0); // Compilation error\r\n```","```\r\npublic foo(Consumer<T> consumer) {\r\n   Type type = consumer.getGenericTypeParameter()\r\n}\r\n```","```\r\nList list = new ArrayList();\r\n```","```\r\npublic static <T> T returnType(T argument) { \r\n    return argument; \r\n}\r\n```","```\r\nInteger inferredInteger = returnType(1);\r\nString inferredString = returnType(\"String\");\r\n```","```\r\npublic abstract class Cage<T extends Animal> {\r\n    abstract void addAnimal(T animal)\r\n}\r\n```","```\r\nCage<Cat> catCage;\r\n```","```\r\nCage<Object> objectCage; // Compilation error\r\n```","```\r\npublic void firstAnimalJump() {\r\n    T animal = animals.get(0);\r\n    animal.jump();\r\n}\r\n```","```\r\npublic abstract class Cage<T extends Animal & Comparable>\r\n```","```\r\npublic static void consumeListOfWildcardType(List<?> list)\r\n```","```\r\npublic class Farm {\r\n  private List<Animal> animals;\r\n\r\n  public void addAnimals(Collection<Animal> newAnimals) {\r\n    animals.addAll(newAnimals);\r\n  }\r\n}\r\n```","```\r\nfarm.addAnimals(cats); // Compilation error\r\nfarm.addAnimals(dogs); // Compilation error\r\n```","```\r\npublic void addAnimals(Collection<? extends Animal> newAnimals)\r\n```","```\r\nList<?> wildcardList = new ArrayList<String>(); \r\nList<Object> objectList = new ArrayList<String>(); // Compilation error\r\n```","```\r\npublic static void addDogs(List<? super Animal> list) {\r\n   list.add(new Dog(\"tom\"))\r\n}\r\n```","```\r\nArrayList<Object> objects = new ArrayList<>();\r\naddDogs(objects);\r\n```","```\r\nArrayList<Cat> objects = new ArrayList<>();\r\naddDogs(objects);\r\n```","```\r\npublic static void makeLotsOfNoise(List<? extends Animal> animals) {\r\n    animals.forEach(Animal::makeNoise);   \r\n}\r\n```","```\r\npublic static void addCats(List<? super Animal> animals) {\r\n    animals.add(new Cat());   \r\n}\r\n```","```\r\npublic class CatCage implements Cage<Cat>\r\n```","```\r\n(Class<T>) ((ParameterizedType) getClass()\r\n  .getGenericSuperclass()).getActualTypeArguments()[0];\r\n```"]