["```\r\nserver.error.whitelabel.enabled=false\r\n```","```\r\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration\r\n\r\n#for Spring Boot 2.0\r\n#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration\r\n```","```\r\n@EnableAutoConfiguration(exclude = {ErrorMvcAutoConfiguration.class})\r\n```","```\r\n<!DOCTYPE html>\r\n<html>\r\n<body>\r\n<h1>Something went wrong! </h1>\r\n<h2>Our Engineers are on it</h2>\r\n<a href=\"/\">Go Home</a>\r\n</body>\r\n</html>\r\n```","```\r\n@Controller\r\npublic class MyErrorController implements ErrorController  {\r\n\r\n    @RequestMapping(\"/error\")\r\n    public String handleError() {\r\n        //do something like logging\r\n        return \"error\";\r\n    }\r\n}\r\n```","```\r\nserver.error.path=/error\r\n```","```\r\n@RequestMapping(\"/error\")\r\npublic String handleError(HttpServletRequest request) {\r\n    Object status = request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);\r\n\r\n    if (status != null) {\r\n        Integer statusCode = Integer.valueOf(status.toString());\r\n\r\n        if(statusCode == HttpStatus.NOT_FOUND.value()) {\r\n            return \"error-404\";\r\n        }\r\n        else if(statusCode == HttpStatus.INTERNAL_SERVER_ERROR.value()) {\r\n            return \"error-500\";\r\n        }\r\n    }\r\n    return \"error\";\r\n}\r\n```"]