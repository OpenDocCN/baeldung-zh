["```\r\n@Entity\r\npublic class Employee {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long id;\r\n\r\n    private String name;\r\n\r\n    private int age;\r\n\r\n    @ManyToOne\r\n    private Department department;\r\n\r\n    @OneToMany(mappedBy = \"employee\")\r\n    private List<Phone> phones;\r\n\r\n    // getters and setters...\r\n}\r\n```","```\r\n@Entity\r\npublic class Department {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n\r\n    private String name;\r\n\r\n    @OneToMany(mappedBy = \"department\")\r\n    private List<Employee> employees;\r\n\r\n    // getters and setters...\r\n}\r\n```","```\r\n@Entity\r\npublic class Phone {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long id;\r\n\r\n    private String number;\r\n\r\n    @ManyToOne\r\n    private Employee employee;\r\n\r\n    // getters and setters...\r\n}\r\n```","```\r\n@Test\r\npublic void whenPathExpressionIsUsedForSingleValuedAssociation_thenCreatesImplicitInnerJoin() {\r\n    TypedQuery<Department> query\r\n      = entityManager.createQuery(\r\n          \"SELECT e.department FROM Employee e\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenJoinKeywordIsUsed_thenCreatesExplicitInnerJoin() {\r\n    TypedQuery<Department> query\r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Employee e JOIN e.department d\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenInnerJoinKeywordIsUsed_thenCreatesExplicitInnerJoin() {\r\n    TypedQuery<Department> query\r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Employee e INNER JOIN e.department d\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\nSELECT e.phones FROM Employee e\r\n```","```\r\n@Test\r\npublic void whenCollectionValuedAssociationIsSpecifiedInSelect_ThenReturnsCollections() {\r\n    TypedQuery<Collection> query \r\n      = entityManager.createQuery(\r\n          \"SELECT e.phones FROM Employee e\", Collection.class);\r\n    List<Collection> resultList = query.getResultList();\r\n\r\n    //Assertions\r\n}\r\n```","```\r\n@Test\r\npublic void whenCollectionValuedAssociationIsJoined_ThenCanSelect() {\r\n    TypedQuery<Phone> query \r\n      = entityManager.createQuery(\r\n          \"SELECT ph FROM Employee e JOIN e.phones ph WHERE ph LIKE '1%'\", Phone.class);\r\n    List<Phone> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenLeftKeywordIsSpecified_thenCreatesOuterJoinAndIncludesNonMatched() {\r\n    TypedQuery<Department> query \r\n      = entityManager.createQuery(\r\n          \"SELECT DISTINCT d FROM Department d LEFT JOIN d.employees e\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenEntitiesAreListedInFromAndMatchedInWhere_ThenCreatesJoin() {\r\n    TypedQuery<Department> query \r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Employee e, Department d WHERE e.department = d\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenEntitiesAreListedInFrom_ThenCreatesCartesianProduct() {\r\n    TypedQuery<Department> query\r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Employee e, Department d\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleEntitiesAreListedWithJoin_ThenCreatesMultipleJoins() {\r\n    TypedQuery<Phone> query\r\n      = entityManager.createQuery(\r\n          \"SELECT ph FROM Employee e\r\n      JOIN e.department d\r\n      JOIN e.phones ph\r\n      WHERE d.name IS NOT NULL\", Phone.class);\r\n    List<Phone> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenFetchKeywordIsSpecified_ThenCreatesFetchJoin() {\r\n    TypedQuery<Department> query \r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Department d JOIN FETCH d.employees\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```","```\r\n@Test\r\npublic void whenLeftAndFetchKeywordsAreSpecified_ThenCreatesOuterFetchJoin() {\r\n    TypedQuery<Department> query \r\n      = entityManager.createQuery(\r\n          \"SELECT d FROM Department d LEFT JOIN FETCH d.employees\", Department.class);\r\n    List<Department> resultList = query.getResultList();\r\n\r\n    // Assertions...\r\n}\r\n```"]