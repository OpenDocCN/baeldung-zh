["```\r\n@Test\r\npublic void givenTwoDatesBeforeJava8_whenDifferentiating_thenWeGetSix()\r\n  throws ParseException {\r\n\r\n    SimpleDateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\", Locale.ENGLISH);\r\n    Date firstDate = sdf.parse(\"06/24/2017\");\r\n    Date secondDate = sdf.parse(\"06/30/2017\");\r\n\r\n    long diffInMillies = Math.abs(secondDate.getTime() - firstDate.getTime());\r\n    long diff = TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS);\r\n\r\n    assertEquals(6, diff);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoDateTimesInJava8_whenDifferentiatingInSeconds_thenWeGetTen() {\r\n    LocalDateTime now = LocalDateTime.now();\r\n    LocalDateTime tenSecondsLater = now.plusSeconds(10);\r\n\r\n    long diff = ChronoUnit.SECONDS.between(now, tenSecondsLater);\r\n\r\n    assertEquals(10, diff);\r\n}\r\n```","```\r\nimport static java.time.temporal.ChronoUnit.SECONDS;\r\n\r\n// omitted\r\nlong diff = SECONDS.between(now, tenSecondsLater);\r\n```","```\r\n@Test\r\npublic void givenTwoZonedDateTimesInJava8_whenDifferentiating_thenWeGetSix() {\r\n    LocalDateTime ldt = LocalDateTime.now();\r\n    ZonedDateTime now = ldt.atZone(ZoneId.of(\"America/Montreal\"));\r\n    ZonedDateTime sixMinutesBehind = now\r\n      .withZoneSameInstant(ZoneId.of(\"Asia/Singapore\"))\r\n      .minusMinutes(6);\r\n\r\n    long diff = ChronoUnit.MINUTES.between(sixMinutesBehind, now);\r\n\r\n    assertEquals(6, diff);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoDateTimesInJava8_whenDifferentiatingInSecondsUsingUntil_thenWeGetTen() {\r\n    LocalDateTime now = LocalDateTime.now();\r\n    LocalDateTime tenSecondsLater = now.plusSeconds(10);\r\n\r\n    long diff = now.until(tenSecondsLater, ChronoUnit.SECONDS);\r\n\r\n    assertEquals(10, diff);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoDateTimesInJava8_whenDifferentiating_thenWeGetSix() {\r\n    LocalDateTime now = LocalDateTime.now();\r\n    LocalDateTime sixMinutesBehind = now.minusMinutes(6);\r\n\r\n    Duration duration = Duration.between(now, sixMinutesBehind);\r\n    long diff = Math.abs(duration.toMinutes());\r\n\r\n    assertEquals(6, diff);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoDatesInJava8_whenUsingPeriodGetDays_thenWorks()  {\r\n    LocalDate aDate = LocalDate.of(2020, 9, 11);\r\n    LocalDate sixDaysBehind = aDate.minusDays(6);\r\n\r\n    Period period = Period.between(aDate, sixDaysBehind);\r\n    int diff = Math.abs(period.getDays());\r\n\r\n    assertEquals(6, diff);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoDatesInJava8_whenUsingPeriodGetDays_thenDoesNotWork() {\r\n    LocalDate aDate = LocalDate.of(2020, 9, 11);\r\n    LocalDate sixtyDaysBehind = aDate.minusDays(60);\r\n\r\n    Period period = Period.between(aDate, sixtyDaysBehind);\r\n    int diff = Math.abs(period.getDays());\r\n\r\n    assertEquals(60, diff);\r\n}\r\n```","```\r\njava.lang.AssertionError: \r\nExpected :60\r\nActual   :29\r\n```","```\r\n@Test\r\npublic void givenTwoDatesInJava8_whenUsingPeriod_thenWeGet0Year1Month29Days() {\r\n    LocalDate aDate = LocalDate.of(2020, 9, 11);\r\n    LocalDate sixtyDaysBehind = aDate.minusDays(60);\r\n    Period period = Period.between(aDate, sixtyDaysBehind);\r\n    int years = Math.abs(period.getYears());\r\n    int months = Math.abs(period.getMonths());\r\n    int days = Math.abs(period.getDays());\r\n    assertArrayEquals(new int[] { 0, 1, 29 }, new int[] { years, months, days });\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>joda-time</groupId>\r\n    <artifactId>joda-time</artifactId>\r\n    <version>2.9.9</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenTwoDatesInJodaTime_whenDifferentiating_thenWeGetSix() {\r\n    org.joda.time.LocalDate now = org.joda.time.LocalDate.now();\r\n    org.joda.time.LocalDate sixDaysBehind = now.minusDays(6);\r\n\r\n    long diff = Math.abs(Days.daysBetween(now, sixDaysBehind).getDays());\r\n    assertEquals(6, diff);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoDateTimesInJodaTime_whenDifferentiating_thenWeGetSix() {\r\n    org.joda.time.LocalDateTime now = org.joda.time.LocalDateTime.now();\r\n    org.joda.time.LocalDateTime sixMinutesBehind = now.minusMinutes(6);\r\n\r\n    long diff = Math.abs(Minutes.minutesBetween(now, sixMinutesBehind).getMinutes());\r\n    assertEquals(6, diff);\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>com.darwinsys</groupId>\r\n    <artifactId>hirondelle-date4j</artifactId>\r\n    <version>1.5.1</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenTwoDatesInDate4j_whenDifferentiating_thenWeGetSix() {\r\n    DateTime now = DateTime.now(TimeZone.getDefault());\r\n    DateTime sixDaysBehind = now.minusDays(6);\r\n\r\n    long diff = Math.abs(now.numDaysFrom(sixDaysBehind));\r\n\r\n    assertEquals(6, diff);\r\n}\r\n```"]