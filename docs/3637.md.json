["```\r\npublic class SingleResourceRetrieved extends ApplicationEvent {\r\n    private HttpServletResponse response;\r\n\r\n    public SingleResourceRetrieved(Object source, HttpServletResponse response) {\r\n        super(source);\r\n\r\n        this.response = response;\r\n    }\r\n\r\n    public HttpServletResponse getResponse() {\r\n        return response;\r\n    }\r\n}\r\npublic class ResourceCreated extends ApplicationEvent {\r\n    private HttpServletResponse response;\r\n    private long idOfNewResource;\r\n\r\n    public ResourceCreated(Object source, \r\n      HttpServletResponse response, long idOfNewResource) {\r\n        super(source);\r\n\r\n        this.response = response;\r\n        this.idOfNewResource = idOfNewResource;\r\n    }\r\n\r\n    public HttpServletResponse getResponse() {\r\n        return response;\r\n    }\r\n    public long getIdOfNewResource() {\r\n        return idOfNewResource;\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(value = \"/foos\")\r\npublic class FooController {\r\n\r\n    @Autowired\r\n    private ApplicationEventPublisher eventPublisher;\r\n\r\n    @Autowired\r\n    private IFooService service;\r\n\r\n    @GetMapping(value = \"foos/{id}\")\r\n    public Foo findById(@PathVariable(\"id\") Long id, HttpServletResponse response) {\r\n        Foo resourceById = Preconditions.checkNotNull(service.findOne(id));\r\n\r\n        eventPublisher.publishEvent(new SingleResourceRetrieved(this, response));\r\n        return resourceById;\r\n    }\r\n\r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void create(@RequestBody Foo resource, HttpServletResponse response) {\r\n        Preconditions.checkNotNull(resource);\r\n        Long newId = service.create(resource).getId();\r\n\r\n        eventPublisher.publishEvent(new ResourceCreated(this, response, newId));\r\n    }\r\n}\r\n```","```\r\n@Component\r\nclass ResourceCreatedDiscoverabilityListener\r\n  implements ApplicationListener<ResourceCreated>{\r\n\r\n    @Override\r\n    public void onApplicationEvent(ResourceCreated resourceCreatedEvent){\r\n       Preconditions.checkNotNull(resourceCreatedEvent);\r\n\r\n       HttpServletResponse response = resourceCreatedEvent.getResponse();\r\n       long idOfNewResource = resourceCreatedEvent.getIdOfNewResource();\r\n\r\n       addLinkHeaderOnResourceCreation(response, idOfNewResource);\r\n   }\r\n   void addLinkHeaderOnResourceCreation\r\n     (HttpServletResponse response, long idOfNewResource){\r\n       URI uri = ServletUriComponentsBuilder.fromCurrentRequestUri().\r\n         path(\"/{idOfNewResource}\").buildAndExpand(idOfNewResource).toUri();\r\n       response.setHeader(\"Location\", uri.toASCIIString());\r\n    }\r\n}\r\n```","```\r\n@Component\r\nclass SingleResourceRetrievedDiscoverabilityListener\r\n implements ApplicationListener<SingleResourceRetrieved>{\r\n\r\n    @Override\r\n    public void onApplicationEvent(SingleResourceRetrieved resourceRetrievedEvent){\r\n        Preconditions.checkNotNull(resourceRetrievedEvent);\r\n\r\n        HttpServletResponse response = resourceRetrievedEvent.getResponse();\r\n        addLinkHeaderOnSingleResourceRetrieval(request, response);\r\n    }\r\n    void addLinkHeaderOnSingleResourceRetrieval(HttpServletResponse response){\r\n        String requestURL = ServletUriComponentsBuilder.fromCurrentRequestUri().\r\n          build().toUri().toASCIIString();\r\n        int positionOfLastSlash = requestURL.lastIndexOf(\"/\");\r\n        String uriForResourceCreation = requestURL.substring(0, positionOfLastSlash);\r\n\r\n        String linkHeaderValue = LinkUtil\r\n          .createLinkHeader(uriForResourceCreation, \"collection\");\r\n        response.addHeader(LINK_HEADER, linkHeaderValue);\r\n    }\r\n}\r\n```","```\r\npublic class LinkUtil {\r\n    public static String createLinkHeader(String uri, String rel) {\r\n        return \"<\" + uri + \">; rel=\\\"\" + rel + \"\\\"\";\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/\")\r\n@ResponseStatus(value = HttpStatus.NO_CONTENT)\r\npublic void adminRoot(final HttpServletRequest request, final HttpServletResponse response) {\r\n    String rootUri = request.getRequestURL().toString();\r\n\r\n    URI fooUri = new UriTemplate(\"{rootUri}{resource}\").expand(rootUri, \"foos\");\r\n    String linkToFoos = LinkUtil.createLinkHeader(fooUri.toASCIIString(), \"collection\");\r\n    response.addHeader(\"Link\", linkToFoos);\r\n}\r\n```"]