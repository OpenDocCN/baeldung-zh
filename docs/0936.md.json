["```\r\nList<String> arraysAsList = Arrays.asList(\"ONE\", \"TWO\", \"THREE\");\r\n```","```\r\nString commaSeparatedString = String.join(\",\", arraysAsList);\r\n\r\nassertThat(commaSeparatedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nStringJoiner stringJoiner = new StringJoiner(\",\");\r\narraysAsList.stream()\r\n  .forEach(v -> stringJoiner.add(v));\r\nString commaSeparatedString = stringJoiner.toString();\r\n\r\nassertThat(commaSeparatedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nStringJoiner stringJoinerWithDelimiterPrefixSuffix = new StringJoiner(\",\", \"[\", \"]\");\r\narraysAsList.stream()\r\n  .forEach(v -> stringJoinerWithDelimiterPrefixSuffix.add(v));\r\nString commaSeparatedStringWithDelimiterPrefixSuffix = stringJoinerWithDelimiterPrefixSuffix.toString();\r\n\r\nassertThat(commaSeparatedStringWithDelimiterPrefixSuffix).isEqualTo(\"[ONE,TWO,THREE]\");\r\n```","```\r\nString commaSeparatedUsingCollect = arraysAsList.stream()\r\n  .collect(Collectors.joining(\",\"));\r\n\r\nassertThat(commaSeparatedUsingCollect).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString commaSeparatedObjectToString = arraysAsList.stream()\r\n  .map(Object::toString)\r\n  .collect(Collectors.joining(\",\"));\r\n\r\nassertThat(commaSeparatedObjectToString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString commaSeparatedStringValueOf = arraysAsList.stream()\r\n  .map(String::valueOf)\r\n  .collect(Collectors.joining(\",\"));\r\n\r\nassertThat(commaSeparatedStringValueOf).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString commaSeparatedStringValueOfWithDelimiterPrefixSuffix = arraysAsList.stream()\r\n  .map(String::valueOf)\r\n  .collect(Collectors.joining(\",\", \"[\", \"]\"));\r\n\r\nassertThat(commaSeparatedStringValueOfWithDelimiterPrefixSuffix).isEqualTo(\"[ONE,TWO,THREE]\");\r\n```","```\r\nString commaSeparatedUsingReduce = arraysAsList.stream()\r\n  .reduce((x, y) -> x + \",\" + y)\r\n  .get();\r\n\r\nassertThat(commaSeparatedUsingReduce).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.0</version>\r\n</dependency>\r\n```","```\r\nString commaSeparatedString = StringUtils.join(arraysAsList, \",\");\r\n\r\nassertThat(commaSeparatedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString commaSeparatedStringIndex = StringUtils.join(arraysAsList.toArray(), \",\", 0, 3);\r\n\r\nassertThat(commaSeparatedStringIndex).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>5.3.22</version>\r\n</dependency>\r\n```","```\r\nString collectionToCommaDelimitedString = StringUtils.collectionToCommaDelimitedString(arraysAsList);\r\n\r\nassertThat(collectionToCommaDelimitedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString collectionToDelimitedString = StringUtils.collectionToDelimitedString(arraysAsList, \",\");\r\n\r\nassertThat(collectionToDelimitedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.1-jre</version>\r\n</dependency>\r\n```","```\r\nString commaSeparatedString = Joiner.on(\",\")\r\n  .join(arraysAsList);\r\n\r\nassertThat(commaSeparatedString).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nList<String> arraysAsListWithNull = Arrays.asList(\"ONE\", null, \"TWO\", null, \"THREE\");\r\n```","```\r\nString commaSeparatedStringSkipNulls = Joiner.on(\",\")\r\n  .skipNulls()\r\n  .join(arraysAsListWithNull);\r\n\r\nassertThat(commaSeparatedStringSkipNulls).isEqualTo(\"ONE,TWO,THREE\");\r\n```","```\r\nString commaSeparatedStringUseForNull = Joiner.on(\",\")\r\n  .useForNull(\" \")\r\n  .join(arraysAsListWithNull);\r\n\r\nassertThat(commaSeparatedStringUseForNull).isEqualTo(\"ONE, ,TWO, ,THREE\");\r\n```"]