["```\r\nList<Integer> listOfNumbers = Arrays.asList(1, 2, 3, 4);\r\nlistOfNumbers.stream().forEach(number ->\r\n    System.out.println(number + \" \" + Thread.currentThread().getName())\r\n);\r\n```","```\r\n1 main\r\n2 main\r\n3 main\r\n4 main\r\n```","```\r\nList<Integer> listOfNumbers = Arrays.asList(1, 2, 3, 4);\r\nlistOfNumbers.parallelStream().forEach(number ->\r\n    System.out.println(number + \" \" + Thread.currentThread().getName())\r\n);\r\n```","```\r\n4 ForkJoinPool.commonPool-worker-3\r\n2 ForkJoinPool.commonPool-worker-5\r\n1 ForkJoinPool.commonPool-worker-7\r\n3 main\r\n```","```\r\nList<Integer> listOfNumbers = Arrays.asList(1, 2, 3, 4);\r\nint sum = listOfNumbers.parallelStream().reduce(5, Integer::sum);\r\nassertThat(sum).isNotEqualTo(15);\r\n```","```\r\nList<Integer> listOfNumbers = Arrays.asList(1, 2, 3, 4);\r\nint sum = listOfNumbers.parallelStream().reduce(0, Integer::sum) + 5;\r\nassertThat(sum).isEqualTo(15);\r\n```","```\r\n-D java.util.concurrent.ForkJoinPool.common.parallelism=4\r\n```","```\r\nList<Integer> listOfNumbers = Arrays.asList(1, 2, 3, 4);\r\nForkJoinPool customThreadPool = new ForkJoinPool(4);\r\nint sum = customThreadPool.submit(\r\n    () -> listOfNumbers.parallelStream().reduce(0, Integer::sum)).get();\r\ncustomThreadPool.shutdown();\r\nassertThat(sum).isEqualTo(10);\r\n```","```\r\nIntStream.rangeClosed(1, 100).reduce(0, Integer::sum);\r\nIntStream.rangeClosed(1, 100).parallel().reduce(0, Integer::sum);\r\n```","```\r\nBenchmark                                                     Mode  Cnt        Score        Error  Units\r\nSplittingCosts.sourceSplittingIntStreamParallel               avgt   25      35476,283 ±     204,446  ns/op\r\nSplittingCosts.sourceSplittingIntStreamSequential             avgt   25         68,274 ±       0,963  ns/op\r\n```","```\r\nprivate static final List<Integer> arrayListOfNumbers = new ArrayList<>();\r\nprivate static final List<Integer> linkedListOfNumbers = new LinkedList<>();\r\n\r\nstatic {\r\n    IntStream.rangeClosed(1, 1_000_000).forEach(i -> {\r\n        arrayListOfNumbers.add(i);\r\n        linkedListOfNumbers.add(i);\r\n    });\r\n}\r\n```","```\r\narrayListOfNumbers.stream().reduce(0, Integer::sum)\r\narrayListOfNumbers.parallelStream().reduce(0, Integer::sum);\r\nlinkedListOfNumbers.stream().reduce(0, Integer::sum);\r\nlinkedListOfNumbers.parallelStream().reduce(0, Integer::sum);\r\n```","```\r\nBenchmark                                                     Mode  Cnt        Score        Error  Units\r\nDifferentSourceSplitting.differentSourceArrayListParallel     avgt   25    2004849,711 ±    5289,437  ns/op\r\nDifferentSourceSplitting.differentSourceArrayListSequential   avgt   25    5437923,224 ±   37398,940  ns/op\r\nDifferentSourceSplitting.differentSourceLinkedListParallel    avgt   25   13561609,611 ±  275658,633  ns/op\r\nDifferentSourceSplitting.differentSourceLinkedListSequential  avgt   25   10664918,132 ±  254251,184  ns/op\r\n```","```\r\narrayListOfNumbers.stream().reduce(0, Integer::sum);\r\narrayListOfNumbers.stream().parallel().reduce(0, Integer::sum);\r\narrayListOfNumbers.stream().collect(Collectors.toSet());\r\narrayListOfNumbers.stream().parallel().collect(Collectors.toSet())\r\n```","```\r\nBenchmark                                                     Mode  Cnt        Score        Error  Units\r\nMergingCosts.mergingCostsGroupingParallel                     avgt   25  135093312,675 ± 4195024,803  ns/op\r\nMergingCosts.mergingCostsGroupingSequential                   avgt   25   70631711,489 ± 1517217,320  ns/op\r\nMergingCosts.mergingCostsSumParallel                          avgt   25    2074483,821 ±    7520,402  ns/op\r\nMergingCosts.mergingCostsSumSequential                        avgt   25    5509573,621 ±   60249,942  ns/op\r\n```","```\r\nprivate static final int[] intArray = new int[1_000_000];\r\nprivate static final Integer[] integerArray = new Integer[1_000_000];\r\n\r\nstatic {\r\n    IntStream.rangeClosed(1, 1_000_000).forEach(i -> {\r\n        intArray[i-1] = i;\r\n        integerArray[i-1] = i;\r\n    });\r\n}\r\n```","```\r\nArrays.stream(intArray).reduce(0, Integer::sum);\r\nArrays.stream(intArray).parallel().reduce(0, Integer::sum);\r\nArrays.stream(integerArray).reduce(0, Integer::sum);\r\nArrays.stream(integerArray).parallel().reduce(0, Integer::sum);\r\n```","```\r\nBenchmark                                                     Mode  Cnt        Score        Error  Units\r\nMemoryLocalityCosts.localityIntArrayParallel                sequential stream  avgt   25     116247,787 ±     283,150  ns/op\r\nMemoryLocalityCosts.localityIntArraySequential                avgt   25     293142,385 ±    2526,892  ns/op\r\nMemoryLocalityCosts.localityIntegerArrayParallel              avgt   25    2153732,607 ±   16956,463  ns/op\r\nMemoryLocalityCosts.localityIntegerArraySequential            avgt   25    5134866,640 ±  148283,942  ns/op\r\n```","```\r\nFiles.walk(Paths.get(\"src/main/resources/\")).map(Path::normalize).filter(Files::isRegularFile)\r\n      .filter(path -> path.getFileName().toString().endsWith(\".txt\")).collect(Collectors.toList());\r\nFiles.walk(Paths.get(\"src/main/resources/\")).parallel().map(Path::normalize).filter(Files::\r\n      isRegularFile).filter(path -> path.getFileName().toString().endsWith(\".txt\")).\r\n      collect(Collectors.toList());\r\n```","```\r\nBenchmark                                Mode  Cnt     Score         Error    Units\r\nFileSearchCost.textFileSearchParallel    avgt   25  10808832.831 ± 446934.773  ns/op\r\nFileSearchCost.textFileSearchSequential  avgt   25  13271799.599 ± 245112.749  ns/op\r\n```"]