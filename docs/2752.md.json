["```\r\njava --list-modules\r\n```","```\r\nmodule myModuleName {\r\n    // all directives are optional\r\n}\r\n```","```\r\nmodule my.module {\r\n    requires module.name;\r\n}\r\n```","```\r\nmodule my.module {\r\n    requires static module.name;\r\n}\r\n```","```\r\nmodule my.module {\r\n    requires transitive module.name;\r\n}\r\n```","```\r\nmodule my.module {\r\n    exports com.my.package.name;\r\n}\r\n```","```\r\nmodule my.module {\r\n    export com.my.package.name to com.specific.package;\r\n}\r\n```","```\r\nmodule my.module {\r\n    uses class.name;\r\n}\r\n```","```\r\nmodule my.module {\r\n    provides MyInterface with MyInterfaceImpl;\r\n}\r\n```","```\r\nopen module my.module {\r\n}\r\n```","```\r\nmodule my.module {\r\n  opens com.my.package;\r\n}\r\n```","```\r\nmodule my.module {\r\n    opens com.my.package to moduleOne, moduleTwo, etc.;\r\n}\r\n```","```\r\nmkdir module-project\r\ncd module-project\r\n```","```\r\nmkdir simple-modules\r\n```","```\r\nmodule-project\r\n|- // src if we use the default package\r\n|- // build files also go at this level\r\n|- simple-modules\r\n  |- hello.modules\r\n    |- com\r\n      |- baeldung\r\n        |- modules\r\n          |- hello\r\n  |- main.app\r\n    |- com\r\n      |- baeldung\r\n        |- modules\r\n          |- main\r\n```","```\r\ncom.baeldung.modules.hello\r\n```","```\r\npackage com.baeldung.modules.hello;\r\n\r\npublic class HelloModules {\r\n    public static void doSomething() {\r\n        System.out.println(\"Hello, Modules!\");\r\n    }\r\n}\r\n```","```\r\nmodule hello.modules {\r\n    exports com.baeldung.modules.hello;\r\n}\r\n```","```\r\nmodule main.app {\r\n    requires hello.modules;\r\n}\r\n```","```\r\npackage com.baeldung.modules.main;\r\n\r\nimport com.baeldung.modules.hello.HelloModules;\r\n\r\npublic class MainApp {\r\n    public static void main(String[] args) {\r\n        HelloModules.doSomething();\r\n    }\r\n}\r\n```","```\r\n#!/usr/bin/env bash\r\njavac -d outDir --module-source-path simple-modules $(find simple-modules -name \"*.java\")\r\n```","```\r\n#!/usr/bin/env bash\r\njava --module-path outDir -m main.app/com.baeldung.modules.main.MainApp\r\n```","```\r\n>$ ./run-simple-module-app.sh \r\nHello, Modules!\r\n```","```\r\npublic interface HelloInterface {\r\n    void sayHello();\r\n}\r\n```","```\r\npublic class HelloModules implements HelloInterface {\r\n    public static void doSomething() {\r\n        System.out.println(\"Hello, Modules!\");\r\n    }\r\n\r\n    public void sayHello() {\r\n        System.out.println(\"Hello!\");\r\n    }\r\n}\r\n```","```\r\nprovides com.baeldung.modules.hello.HelloInterface with com.baeldung.modules.hello.HelloModules;\r\n```","```\r\nuses com.baeldung.modules.hello.HelloInterface;\r\n```","```\r\nIterable<HelloInterface> services = ServiceLoader.load(HelloInterface.class);\r\nHelloInterface service = services.iterator().next();\r\nservice.sayHello();\r\n```","```\r\n#> ./run-simple-module-app.sh \r\nHello, Modules!\r\nHello!\r\n```","```\r\n--add-modules java.xml.bind\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-compiler-plugin</artifactId>\r\n    <version>3.8.0</version>\r\n    <configuration>\r\n        <source>9</source>\r\n        <target>9</target>\r\n        <compilerArgs>\r\n            <arg>--add-modules</arg>\r\n            <arg>java.xml.bind</arg>\r\n        </compilerArgs>\r\n    </configuration>\r\n</plugin>\r\n```"]