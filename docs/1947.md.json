["```\r\npublic class ComputeFunction {\r\n    public static void compute(Integer v) {\r\n        try {\r\n            System.out.println(\"compute integer v: \" + v);\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```","```\r\nObservable.range(1, 1_000_000)\r\n  .observeOn(Schedulers.computation())\r\n  .subscribe(ComputeFunction::compute);\r\n```","```\r\ncompute integer v: 1\r\ncompute integer v: 2\r\ncompute integer v: 3\r\ncompute integer v: 4\r\n...\r\n```","```\r\nPublishSubject<Integer> source = PublishSubject.<Integer>create();\r\n\r\nsource.observeOn(Schedulers.computation())\r\n  .subscribe(ComputeFunction::compute, Throwable::printStackTrace);\r\n\r\nIntStream.range(1, 1_000_000).forEach(source::onNext); \r\n```","```\r\nPublishSubject<Integer> source = PublishSubject.<Integer>create();\r\n\r\nsource.buffer(1024)\r\n  .observeOn(Schedulers.computation())\r\n  .subscribe(ComputeFunction::compute, Throwable::printStackTrace); \r\n```","```\r\nPublishSubject<Integer> source = PublishSubject.<Integer>create();\r\n\r\nsource.window(500)\r\n  .observeOn(Schedulers.computation())\r\n  .subscribe(ComputeFunction::compute, Throwable::printStackTrace); \r\n```","```\r\nPublishSubject<Integer> source = PublishSubject.<Integer>create();\r\n\r\nsource.sample(100, TimeUnit.MILLISECONDS)\r\n  .observeOn(Schedulers.computation())\r\n  .subscribe(ComputeFunction::compute, Throwable::printStackTrace);\r\n```","```\r\nObservable.range(1, 1_000_000)\r\n  .onBackpressureBuffer(16, () -> {}, BackpressureOverflow.ON_OVERFLOW_DROP_OLDEST)\r\n  .observeOn(Schedulers.computation())\r\n  .subscribe(e -> {}, Throwable::printStackTrace); \r\n```","```\r\nObservable.range(1, 1_000_000)\r\n  .onBackpressureDrop()\r\n  .observeOn(Schedulers.computation())\r\n  .doOnNext(ComputeFunction::compute)\r\n  .subscribe(v -> {}, Throwable::printStackTrace);\r\n```"]