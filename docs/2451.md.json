["```\r\n<dependency>\r\n    <groupId>net.engio</groupId>\r\n    <artifactId>mbassador</artifactId>\r\n    <version>1.3.1</version>\r\n</dependency>\r\n```","```\r\nprivate MBassador<Object> dispatcher = new MBassador<>();\r\nprivate String messageString;\r\n\r\n@Before\r\npublic void prepareTests() {\r\n    dispatcher.subscribe(this);\r\n}\r\n\r\n@Test\r\npublic void whenStringDispatched_thenHandleString() {\r\n    dispatcher.post(\"TestString\").now();\r\n\r\n    assertNotNull(messageString);\r\n    assertEquals(\"TestString\", messageString);\r\n}\r\n\r\n@Handler\r\npublic void handleString(String message) {\r\n    messageString = message;\r\n} \r\n```","```\r\nprivate Integer messageInteger; \r\n\r\n@Test\r\npublic void whenIntegerDispatched_thenHandleInteger() {\r\n    dispatcher.post(42).now();\r\n\r\n    assertNull(messageString);\r\n    assertNotNull(messageInteger);\r\n    assertTrue(42 == messageInteger);\r\n}\r\n\r\n@Handler\r\npublic void handleInteger(Integer message) {\r\n    messageInteger = message;\r\n} \r\n```","```\r\nprivate Object deadEvent; \r\n\r\n@Test\r\npublic void whenLongDispatched_thenDeadEvent() {\r\n    dispatcher.post(42L).now();\r\n\r\n    assertNull(messageString);\r\n    assertNull(messageInteger);\r\n    assertNotNull(deadEvent);\r\n    assertTrue(deadEvent instanceof Long);\r\n    assertTrue(42L == (Long) deadEvent);\r\n} \r\n\r\n@Handler\r\npublic void handleDeadEvent(DeadMessage message) {\r\n    deadEvent = message.getMessage();\r\n} \r\n```","```\r\npublic class Message {}\r\n\r\npublic class AckMessage extends Message {}\r\n\r\npublic class RejectMessage extends Message {\r\n    int code;\r\n\r\n    // setters and getters\r\n}\r\n```","```\r\nprivate MBassador<Message> dispatcher = new MBassador<>();\r\n\r\nprivate Message message;\r\nprivate AckMessage ackMessage;\r\nprivate RejectMessage rejectMessage;\r\n\r\n@Before\r\npublic void prepareTests() {\r\n    dispatcher.subscribe(this);\r\n}\r\n\r\n@Test\r\npublic void whenMessageDispatched_thenMessageHandled() {\r\n    dispatcher.post(new Message()).now();\r\n    assertNotNull(message);\r\n    assertNull(ackMessage);\r\n    assertNull(rejectMessage);\r\n}\r\n\r\n@Handler\r\npublic void handleMessage(Message message) {\r\n    this.message = message;\r\n}\r\n\r\n@Handler\r\npublic void handleRejectMessage(RejectMessage message) {\r\n   rejectMessage = message;\r\n}\r\n\r\n@Handler\r\npublic void handleAckMessage(AckMessage message) {\r\n    ackMessage = message;\r\n}\r\n```","```\r\n@Test\r\npublic void whenRejectDispatched_thenMessageAndRejectHandled() {\r\n    dispatcher.post(new RejectMessage()).now();\r\n\r\n    assertNotNull(message);\r\n    assertNotNull(rejectMessage);\r\n    assertNull(ackMessage);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAckDispatched_thenMessageAndAckHandled() {\r\n    dispatcher.post(new AckMessage()).now();\r\n\r\n    assertNotNull(message);\r\n    assertNotNull(ackMessage);\r\n    assertNull(rejectMessage);\r\n}\r\n```","```\r\nprivate Message baseMessage;\r\nprivate Message subMessage;\r\n\r\n@Test\r\npublic void whenMessageDispatched_thenMessageFiltered() {\r\n    dispatcher.post(new Message()).now();\r\n\r\n    assertNotNull(baseMessage);\r\n    assertNull(subMessage);\r\n}\r\n\r\n@Test\r\npublic void whenRejectDispatched_thenRejectFiltered() {\r\n    dispatcher.post(new RejectMessage()).now();\r\n\r\n    assertNotNull(subMessage);\r\n    assertNull(baseMessage);\r\n}\r\n\r\n@Handler(filters = { @Filter(Filters.RejectSubtypes.class) })\r\npublic void handleBaseMessage(Message message) {\r\n    this.baseMessage = message;\r\n}\r\n\r\n@Handler(filters = { @Filter(Filters.SubtypesOnly.class) })\r\npublic void handleSubMessage(Message message) {\r\n    this.subMessage = message;\r\n}\r\n```","```\r\nprivate String testString;\r\n\r\n@Test\r\npublic void whenLongStringDispatched_thenStringFiltered() {\r\n    dispatcher.post(\"foobar!\").now();\r\n\r\n    assertNull(testString);\r\n}\r\n\r\n@Handler(condition = \"msg.length() < 7\")\r\npublic void handleStringMessage(String message) {\r\n    this.testString = message;\r\n}\r\n```","```\r\n @Test\r\npublic void whenShortStringDispatched_thenStringHandled() {\r\n    dispatcher.post(\"foobar\").now();\r\n\r\n    assertNotNull(testString);\r\n}\r\n```","```\r\nprivate RejectMessage rejectMessage;\r\n\r\n@Test\r\npublic void whenWrongRejectDispatched_thenRejectFiltered() {\r\n\r\n    RejectMessage testReject = new RejectMessage();\r\n    testReject.setCode(-1);\r\n\r\n    dispatcher.post(testReject).now();\r\n\r\n    assertNull(rejectMessage);\r\n    assertNotNull(subMessage);\r\n    assertEquals(-1, ((RejectMessage) subMessage).getCode());\r\n}\r\n\r\n@Handler(condition = \"msg.getCode() != -1\")\r\npublic void handleRejectMessage(RejectMessage rejectMessage) {\r\n    this.rejectMessage = rejectMessage;\r\n}\r\n```","```\r\nprivate String testString;\r\nprivate FilteredMessage filteredMessage;\r\nprivate DeadMessage deadMessage;\r\n\r\n@Test\r\npublic void whenLongStringDispatched_thenStringFiltered() {\r\n    dispatcher.post(\"foobar!\").now();\r\n\r\n    assertNull(testString);\r\n    assertNotNull(filteredMessage);\r\n    assertTrue(filteredMessage.getMessage() instanceof String);\r\n    assertNull(deadMessage);\r\n}\r\n\r\n@Handler(condition = \"msg.length() < 7\")\r\npublic void handleStringMessage(String message) {\r\n    this.testString = message;\r\n}\r\n\r\n@Handler\r\npublic void handleFilterMessage(FilteredMessage message) {\r\n    this.filteredMessage = message;\r\n}\r\n\r\n@Handler\r\npublic void handleDeadMessage(DeadMessage deadMessage) {\r\n    this.deadMessage = deadMessage;\r\n} \r\n```","```\r\nprivate MBassador<Message> dispatcher = new MBassador<>();\r\nprivate String testString;\r\nprivate AtomicBoolean ready = new AtomicBoolean(false);\r\n\r\n@Test\r\npublic void whenAsyncDispatched_thenMessageReceived() {\r\n    dispatcher.post(\"foobar\").asynchronously();\r\n\r\n    await().untilAtomic(ready, equalTo(true));\r\n    assertNotNull(testString);\r\n}\r\n\r\n@Handler\r\npublic void handleStringMessage(String message) {\r\n    this.testString = message;\r\n    ready.set(true);\r\n}\r\n```","```\r\nprivate Integer testInteger;\r\nprivate String invocationThreadName;\r\nprivate AtomicBoolean ready = new AtomicBoolean(false);\r\n\r\n@Test\r\npublic void whenHandlerAsync_thenHandled() {\r\n    dispatcher.post(42).now();\r\n\r\n    await().untilAtomic(ready, equalTo(true));\r\n    assertNotNull(testInteger);\r\n    assertFalse(Thread.currentThread().getName().equals(invocationThreadName));\r\n}\r\n\r\n@Handler(delivery = Invoke.Asynchronously)\r\npublic void handleIntegerMessage(Integer message) {\r\n\r\n    this.invocationThreadName = Thread.currentThread().getName();\r\n    this.testInteger = message;\r\n    ready.set(true);\r\n}\r\n```","```\r\npublic class MBassadorConfigurationTest\r\n  implements IPublicationErrorHandler {\r\n\r\n    private MBassador dispatcher;\r\n    private String messageString;\r\n    private Throwable errorCause;\r\n\r\n    @Before\r\n    public void prepareTests() {\r\n        dispatcher = new MBassador<String>(this);\r\n        dispatcher.subscribe(this);\r\n    }\r\n\r\n    @Test\r\n    public void whenErrorOccurs_thenErrorHandler() {\r\n        dispatcher.post(\"Error\").now();\r\n\r\n        assertNull(messageString);\r\n        assertNotNull(errorCause);\r\n    }\r\n\r\n    @Test\r\n    public void whenNoErrorOccurs_thenStringHandler() {\r\n        dispatcher.post(\"Error\").now();\r\n\r\n        assertNull(errorCause);\r\n        assertNotNull(messageString);\r\n    }\r\n\r\n    @Handler\r\n    public void handleString(String message) {\r\n        if (\"Error\".equals(message)) {\r\n            throw new Error(\"BOOM\");\r\n        }\r\n        messageString = message;\r\n    }\r\n\r\n    @Override\r\n    public void handleError(PublicationError error) {\r\n        errorCause = error.getCause().getCause();\r\n    }\r\n}\r\n```","```\r\nprivate LinkedList<Integer> list = new LinkedList<>();\r\n\r\n@Test\r\npublic void whenRejectDispatched_thenPriorityHandled() {\r\n    dispatcher.post(new RejectMessage()).now();\r\n\r\n    // Items should pop() off in reverse priority order\r\n    assertTrue(1 == list.pop());\r\n    assertTrue(3 == list.pop());\r\n    assertTrue(5 == list.pop());\r\n}\r\n\r\n@Handler(priority = 5)\r\npublic void handleRejectMessage5(RejectMessage rejectMessage) {\r\n    list.push(5);\r\n}\r\n\r\n@Handler(priority = 3)\r\npublic void handleRejectMessage3(RejectMessage rejectMessage) {\r\n    list.push(3);\r\n}\r\n\r\n@Handler(priority = 2, rejectSubtypes = true)\r\npublic void handleMessage(Message rejectMessage) \r\n    logger.error(\"Reject handler #3\");\r\n    list.push(3);\r\n}\r\n\r\n@Handler(priority = 0)\r\npublic void handleRejectMessage0(RejectMessage rejectMessage) {\r\n    list.push(1);\r\n} \r\n```"]