["```\r\npublic static boolean deepEquals(Object[] a1, Object[] a2)\r\n```","```\r\n Object[] anArray = new Object[] { \"string1\", \"string2\", \"string3\" };\r\n    Object[] anotherArray = new Object[] { \"string1\", \"string2\", \"string3\" };\r\n\r\n    assertTrue(Arrays.equals(anArray, anotherArray));\r\n    assertTrue(Arrays.deepEquals(anArray, anotherArray));\r\n```","```\r\n Object[] anArray = new Object[] { \"string1\", null, \"string3\" };\r\n    Object[] anotherArray = new Object[] { \"string1\", null, \"string3\" };\r\n\r\n    assertTrue(Arrays.equals(anArray, anotherArray));\r\n    assertTrue(Arrays.deepEquals(anArray, anotherArray));\r\n```","```\r\n Object[] anArray = new Object[] { \"string1\", null, new String[] {\"nestedString1\", \"nestedString2\" }};\r\n    Object[] anotherArray = new Object[] { \"string1\", null, new String[] {\"nestedString1\", \"nestedString2\" } };\r\n\r\n    assertFalse(Arrays.equals(anArray, anotherArray));\r\n    assertTrue(Arrays.deepEquals(anArray, anotherArray));\r\n```","```\r\n int[][] anArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\r\n    int[][] anotherArray = { { 1, 2, 3 }, { 4, 5, 6, 9 }, { 7 } };\r\n\r\n    assertFalse(Arrays.equals(anArray, anotherArray));\r\n    assertTrue(Arrays.deepEquals(anArray, anotherArray));\r\n```","```\r\n class Person {\r\n        private int id;\r\n        private String name;\r\n        private int age;\r\n\r\n        // constructor & getters & setters\r\n\r\n        @Override\r\n        public boolean equals(Object obj) {\r\n            if (this == obj) {\r\n                return true;\r\n            }\r\n            if (obj == null) {\r\n                return false;\r\n            }\r\n            if (!(obj instanceof Person))\r\n                return false;\r\n            Person person = (Person) obj;\r\n            return id == person.id && name.equals(person.name) && age == person.age;\r\n        }\r\n    }\r\n```","```\r\n Person personArray1[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) },\r\n      { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\r\n    Person personArray2[][] = { { new Person(1, \"John\", 22), new Person(2, \"Mike\", 23) }, \r\n      { new Person(3, \"Steve\", 27), new Person(4, \"Gary\", 28) } };\r\n\r\n    assertFalse(Arrays.equals(personArray1, personArray2));\r\n    assertTrue(Arrays.deepEquals(personArray1, personArray2));\r\n```","```\r\n assertTrue(Objects.deepEquals(personArray1, personArray2));\r\n```"]