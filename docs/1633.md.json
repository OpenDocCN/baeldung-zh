["```\r\n@Test\r\npublic void whenConvertListToString_thenConverted() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    String result = Joiner.on(\",\").join(names);\r\n\r\n    assertEquals(result, \"John,Jane,Adam,Tom\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertMapToString_thenConverted() {\r\n    Map<String, Integer> salary = Maps.newHashMap();\r\n    salary.put(\"John\", 1000);\r\n    salary.put(\"Jane\", 1500);\r\n    String result = Joiner.on(\" , \").withKeyValueSeparator(\" = \")\r\n                                    .join(salary);\r\n\r\n    assertThat(result, containsString(\"John = 1000\"));\r\n    assertThat(result, containsString(\"Jane = 1500\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenJoinNestedCollections_thenJoined() {\r\n    List<ArrayList<String>> nested = Lists.newArrayList(\r\n      Lists.newArrayList(\"apple\", \"banana\", \"orange\"),\r\n      Lists.newArrayList(\"cat\", \"dog\", \"bird\"),\r\n      Lists.newArrayList(\"John\", \"Jane\", \"Adam\"));\r\n    String result = Joiner.on(\";\").join(Iterables.transform(nested,\r\n      new Function<List<String>, String>() {\r\n          @Override\r\n          public String apply(List<String> input) {\r\n              return Joiner.on(\"-\").join(input);\r\n          }\r\n      }));\r\n\r\n    assertThat(result, containsString(\"apple-banana-orange\"));\r\n    assertThat(result, containsString(\"cat-dog-bird\"));\r\n    assertThat(result, containsString(\"apple-banana-orange\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertListToStringAndSkipNull_thenConverted() {\r\n    List<String> names = Lists.newArrayList(\"John\", null, \"Jane\", \"Adam\", \"Tom\");\r\n    String result = Joiner.on(\",\").skipNulls().join(names);\r\n\r\n    assertEquals(result, \"John,Jane,Adam,Tom\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseForNull_thenUsed() {\r\n    List<String> names = Lists.newArrayList(\"John\", null, \"Jane\", \"Adam\", \"Tom\");\r\n    String result = Joiner.on(\",\").useForNull(\"nameless\").join(names);\r\n\r\n    assertEquals(result, \"John,nameless,Jane,Adam,Tom\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateListFromString_thenCreated() {\r\n    String input = \"apple - banana - orange\";\r\n    List<String> result = Splitter.on(\"-\").trimResults()\r\n                                          .splitToList(input);\r\n\r\n    assertThat(result, contains(\"apple\", \"banana\", \"orange\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateMapFromString_thenCreated() {\r\n    String input = \"John=first,Adam=second\";\r\n    Map<String, String> result = Splitter.on(\",\")\r\n                                         .withKeyValueSeparator(\"=\")\r\n                                         .split(input);\r\n\r\n    assertEquals(\"first\", result.get(\"John\"));\r\n    assertEquals(\"second\", result.get(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSplitStringOnMultipleSeparator_thenSplit() {\r\n    String input = \"apple.banana,,orange,,.\";\r\n    List<String> result = Splitter.onPattern(\"[.,]\")\r\n                                  .omitEmptyStrings()\r\n                                  .splitToList(input);\r\n\r\n    assertThat(result, contains(\"apple\", \"banana\", \"orange\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSplitStringOnSpecificLength_thenSplit() {\r\n    String input = \"Hello world\";\r\n    List<String> result = Splitter.fixedLength(3).splitToList(input);\r\n\r\n    assertThat(result, contains(\"Hel\", \"lo \", \"wor\", \"ld\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenLimitSplitting_thenLimited() {\r\n    String input = \"a,b,c,d,e\";\r\n    List<String> result = Splitter.on(\",\")\r\n                                  .limit(4)\r\n                                  .splitToList(input);\r\n\r\n    assertEquals(4, result.size());\r\n    assertThat(result, contains(\"a\", \"b\", \"c\", \"d,e\"));\r\n}\r\n```"]