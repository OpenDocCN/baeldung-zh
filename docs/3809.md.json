["```\r\n@Entity\r\npublic class Student {\r\n    // ...\r\n\r\n    @ElementCollection\r\n    private List<String> tags = new ArrayList<>();\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Query(\"SELECT s FROM Student s JOIN s.tags t WHERE t = LOWER(:tag)\")\r\nList<Student> retrieveByTag(@Param(\"tag\") String tag);\r\n```","```\r\nStudent student = new Student(0, \"Larry\");\r\nstudent.setTags(Arrays.asList(\"full time\", \"computer science\"));\r\nstudentRepository.save(student);\r\n\r\nStudent student2 = new Student(1, \"Curly\");\r\nstudent2.setTags(Arrays.asList(\"part time\", \"rocket science\"));\r\nstudentRepository.save(student2);\r\n\r\nStudent student3 = new Student(2, \"Moe\");\r\nstudent3.setTags(Arrays.asList(\"full time\", \"philosophy\"));\r\nstudentRepository.save(student3);\r\n\r\nStudent student4 = new Student(3, \"Shemp\");\r\nstudent4.setTags(Arrays.asList(\"part time\", \"mathematics\"));\r\nstudentRepository.save(student4);\r\n```","```\r\n// Grab only the first result\r\nStudent student2 = studentRepository.retrieveByTag(\"full time\").get(0);\r\nassertEquals(\"name incorrect\", \"Larry\", student2.getName());\r\n```","```\r\nList<Student> students = studentRepository.retrieveByTag(\"full time\");\r\nassertEquals(\"size incorrect\", 2, students.size());\r\n```","```\r\n@Query(\"SELECT s FROM Student s JOIN s.tags t WHERE s.name = LOWER(:name) AND t = LOWER(:tag)\")\r\nList<Student> retrieveByNameFilterByTag(@Param(\"name\") String name, @Param(\"tag\") String tag);\r\n```","```\r\nStudent student2 = studentRepository.retrieveByNameFilterByTag(\r\n  \"Moe\", \"full time\").get(0);\r\nassertEquals(\"name incorrect\", \"moe\", student2.getName());\r\n```"]