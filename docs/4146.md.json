["```\r\n@Bean\r\npublic OAuth2ProtectedResourceDetails reddit() {\r\n    AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\r\n    details.setId(\"reddit\");\r\n    details.setClientId(clientID);\r\n    details.setClientSecret(clientSecret);\r\n    details.setAccessTokenUri(accessTokenUri);\r\n    details.setUserAuthorizationUri(userAuthorizationUri);\r\n    details.setTokenName(\"oauth_token\");\r\n    details.setScope(Arrays.asList(\"identity\", \"submit\"));\r\n    details.setGrantType(\"authorization_code\");\r\n    return details;\r\n}\r\n```","```\r\nprivate String needsCaptcha() {\r\n    String result = redditRestTemplate.getForObject(\r\n      \"https://oauth.reddit.com/api/needs_captcha.json\", String.class);\r\n    return result;\r\n}\r\n\r\nprivate String getNewCaptcha() {\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.setContentType(MediaType.APPLICATION_JSON);\r\n    HttpEntity req = new HttpEntity(headers);\r\n\r\n    Map<String, String> param = new HashMap<String, String>();\r\n    param.put(\"api_type\", \"json\");\r\n\r\n    ResponseEntity<String> result = redditRestTemplate.postForEntity(\r\n      \"https://oauth.reddit.com/api/new_captcha\", req, String.class, param);\r\n    String[] split = result.getBody().split(\"\"\"); \r\n    return split[split.length - 2];\r\n}\r\n```","```\r\n@RequestMapping(\"/post\")\r\npublic String showSubmissionForm(Model model) throws JsonProcessingException, IOException {\r\n    String needsCaptchaResult = needsCaptcha();\r\n    if (needsCaptchaResult.equalsIgnoreCase(\"true\")) {\r\n        String iden = getNewCaptcha();\r\n        model.addAttribute(\"iden\", iden);\r\n    }\r\n    return \"submissionForm\";\r\n}\r\n```","```\r\n<form>\r\n    <input name=\"title\"/>\r\n    <input name=\"url\" />\r\n    <input name=\"sr\"/>\r\n    <input  type=\"checkbox\" name=\"sendReplies\" value=\"true\"/>\r\n\r\n    <div th:if=\"${iden != null}\">\r\n        <input type=\"hidden\" name=\"iden\" value=\"${iden}\"/>\r\n        <input name=\"captcha\"/>\r\n        <img src=\"http://www.reddit.com/captcha/${iden}\" alt=\"captcha\" width=\"200\"/>\r\n    </div>\r\n    <button type=\"submit\" onclick=\"submitPost()\">Post</button>\r\n</form>\r\n\r\n<script>\r\nfunction submitPost(){\r\n    var data = {};\r\n    $('form').serializeArray().map(function(x){data[x.name] = x.value;});\r\n    $.ajax({\r\n        url: \"api/posts\",\r\n        data: JSON.stringify(data),\r\n        type: 'POST',\r\n        contentType:'application/json'\r\n    }).done(function(data) {\r\n        if(data.length < 2){ alert(data[0]);}\r\n        else{\r\n            window.location.href=\"submissionResponse?msg=\"+\r\n              data[0]+\"&url;=\"+data[1];\r\n        }\r\n    }).fail(function(error) { alert(error.responseText); }); \r\n}\r\n</script>\r\n```","```\r\n@Controller\r\n@RequestMapping(value = \"/api/posts\")\r\npublic class RedditPostRestController {\r\n\r\n    @Autowired\r\n    private RedditService service;\r\n\r\n    @RequestMapping(method = RequestMethod.POST)\r\n    @ResponseBody\r\n    public List<String> submit(@Valid @RequestBody PostDto postDto) {\r\n        return service.submitPost(postDto);\r\n    }\r\n}\r\n```","```\r\npublic List<String> submitPost(PostDto postDto) {\r\n    MultiValueMap<String, String> param1 = constructParams(postDto);\r\n    JsonNode node = redditTemplate.submitPost(param1);\r\n    return parseResponse(node);\r\n}\r\n\r\nprivate MultiValueMap<String, String> constructParams(PostDto postDto) {\r\n    MultiValueMap<String, String> param = new LinkedMultiValueMap<String, String>();\r\n    param.add(\"title\", postDto.getTitle());\r\n    param.add(\"sr\", postDto.getSubreddit());\r\n    param.add(\"url\", postDto.getUrl());\r\n    param.add(\"iden\", postDto.getIden());\r\n    param.add(\"captcha\", postDto.getCaptcha());\r\n    if (postDto.isSendReplies()) {\r\n        param.add(\"sendReplies\", \"true\");\r\n    }\r\n\r\n    param.add(\"api_type\", \"json\");\r\n    param.add(\"kind\", \"link\");\r\n    param.add(\"resubmit\", \"true\");\r\n    param.add(\"then\", \"comments\");\r\n    return param;\r\n}\r\n```","```\r\nprivate List<String> parseResponse(JsonNode node) {\r\n    String result = \"\";\r\n    JsonNode errorNode = node.get(\"json\").get(\"errors\").get(0);\r\n    if (errorNode != null) {\r\n        for (JsonNode child : errorNode) {\r\n            result = result + child.toString().replaceAll(\"\\\"|null\", \"\") + \"<br>\";\r\n        }\r\n        return Arrays.asList(result);\r\n    } else {\r\n        if ((node.get(\"json\").get(\"data\") != null) && \r\n            (node.get(\"json\").get(\"data\").get(\"url\") != null)) {\r\n            return Arrays.asList(\"Post submitted successfully\", \r\n              node.get(\"json\").get(\"data\").get(\"url\").asText());\r\n        } else {\r\n            return Arrays.asList(\"Error Occurred while parsing Response\");\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class PostDto {\r\n    @NotNull\r\n    private String title;\r\n\r\n    @NotNull\r\n    private String url;\r\n\r\n    @NotNull\r\n    private String subreddit;\r\n\r\n    private boolean sendReplies;\r\n\r\n    private String iden;\r\n    private String captcha;\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h1 th:text=\"${msg}\">Hello</h1>\r\n    <h1 th:if=\"${param.containsKey('msg')}\" th:text=\"${param.msg[0]}\">Hello</h1>\r\n    <h2 th:if=\"${param.containsKey('url')}\"><a th:href=\"${param.url[0]}\">Here</a></h2>\r\n</body>\r\n</html>\r\n```"]