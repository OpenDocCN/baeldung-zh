["```\r\n@Configuration\r\n@EnableScheduling\r\npublic class SpringConfig {\r\n    ...\r\n}\r\n```","```\r\n<task:annotation-driven>\r\n```","```\r\n@Scheduled(fixedDelay = 1000)\r\npublic void scheduleFixedDelayTask() {\r\n    System.out.println(\r\n      \"Fixed delay task - \" + System.currentTimeMillis() / 1000);\r\n}\r\n```","```\r\n@Scheduled(fixedRate = 1000)\r\npublic void scheduleFixedRateTask() {\r\n    System.out.println(\r\n      \"Fixed rate task - \" + System.currentTimeMillis() / 1000);\r\n}\r\n```","```\r\n@EnableAsync\r\npublic class ScheduledFixedRateExample {\r\n    @Async\r\n    @Scheduled(fixedRate = 1000)\r\n    public void scheduleFixedRateTaskAsync() throws InterruptedException {\r\n        System.out.println(\r\n          \"Fixed rate task async - \" + System.currentTimeMillis() / 1000);\r\n        Thread.sleep(2000);\r\n    }\r\n\r\n}\r\n```","```\r\n@Scheduled(fixedDelay = 1000, initialDelay = 1000)\r\npublic void scheduleFixedRateWithInitialDelayTask() {\r\n\r\n    long now = System.currentTimeMillis() / 1000;\r\n    System.out.println(\r\n      \"Fixed rate task with one second initial delay - \" + now);\r\n}\r\n```","```\r\n@Scheduled(cron = \"0 15 10 15 * ?\")\r\npublic void scheduleTaskUsingCronExpression() {\r\n\r\n    long now = System.currentTimeMillis() / 1000;\r\n    System.out.println(\r\n      \"schedule tasks using cron jobs - \" + now);\r\n}\r\n```","```\r\n@Scheduled(cron = \"0 15 10 15 * ?\", zone = \"Europe/Paris\")\r\n```","```\r\n@Scheduled(fixedDelayString = \"${fixedDelay.in.milliseconds}\")\r\n```","```\r\n@Scheduled(fixedRateString = \"${fixedRate.in.milliseconds}\")\r\n```","```\r\n@Scheduled(cron = \"${cron.expression}\")\r\n```","```\r\n<!-- Configure the scheduler -->\r\n<task:scheduler id=\"myScheduler\" pool-size=\"10\" />\r\n\r\n<!-- Configure parameters -->\r\n<task:scheduled-tasks scheduler=\"myScheduler\">\r\n    <task:scheduled ref=\"beanA\" method=\"methodA\" \r\n      fixed-delay=\"5000\" initial-delay=\"1000\" />\r\n    <task:scheduled ref=\"beanB\" method=\"methodB\" \r\n      fixed-rate=\"5000\" />\r\n    <task:scheduled ref=\"beanC\" method=\"methodC\" \r\n      cron=\"*/5 * * * * MON-FRI\" />\r\n</task:scheduled-tasks>\r\n```","```\r\n@Configuration\r\n@EnableScheduling\r\npublic class DynamicSchedulingConfig implements SchedulingConfigurer {\r\n\r\n    @Autowired\r\n    private TickService tickService;\r\n\r\n    @Bean\r\n    public Executor taskExecutor() {\r\n        return Executors.newSingleThreadScheduledExecutor();\r\n    }\r\n\r\n    @Override\r\n    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\r\n        taskRegistrar.setScheduler(taskExecutor());\r\n        taskRegistrar.addTriggerTask(\r\n          new Runnable() {\r\n              @Override\r\n              public void run() {\r\n                  tickService.tick();\r\n              }\r\n          },\r\n          new Trigger() {\r\n              @Override\r\n              public Date nextExecutionTime(TriggerContext context) {\r\n                  Optional<Date> lastCompletionTime =\r\n                    Optional.ofNullable(context.lastCompletionTime());\r\n                  Instant nextExecutionTime =\r\n                    lastCompletionTime.orElseGet(Date::new).toInstant()\r\n                      .plusMillis(tickService.getDelay());\r\n                  return Date.from(nextExecutionTime);\r\n              }\r\n          }\r\n        );\r\n    }\r\n\r\n}\r\n```","```\r\n@Bean\r\npublic TaskScheduler  taskScheduler() {\r\n    ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();\r\n    threadPoolTaskScheduler.setPoolSize(5);\r\n    threadPoolTaskScheduler.setThreadNamePrefix(\"ThreadPoolTaskScheduler\");\r\n    return threadPoolTaskScheduler;\r\n}\r\n```"]