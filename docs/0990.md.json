["```\r\n$ unzip keycloak-legacy-19.0.1.zip \r\n$ cd keycloak-legacy-19.0.1/keycloak-19.0.1/bin\r\n$ ./standalone.sh -Djboss.socket.binding.port-offset=100\r\n```","```\r\nhttp://localhost:8180/auth/realms/SpringBootKeycloak/protocol/openid-connect/token\r\n```","```\r\nclient_id:<your_client_id>\r\nusername:<your_username>\r\npassword:<your_password>\r\ngrant_type:password\r\n```","```\r\nheaders: {\r\n    'Authorization': 'Bearer' + access_token\r\n}\r\n```","```\r\n{\r\n    'client_id': 'your_client_id',\r\n    'refresh_token': refresh_token_from_previous_request,\r\n    'grant_type': 'refresh_token'\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\nspring.security.oauth2.client.registration.keycloak.client-id=login-app\r\nspring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code\r\nspring.security.oauth2.client.registration.keycloak.scope=openid\r\n```","```\r\nspring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/SpringBootKeycloak\r\nspring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\nclass SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    private final KeycloakLogoutHandler keycloakLogoutHandler;\r\n\r\n    SecurityConfig(KeycloakLogoutHandler keycloakLogoutHandler) {\r\n        this.keycloakLogoutHandler = keycloakLogoutHandler;\r\n    }\r\n\r\n    @Bean\r\n    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {\r\n        return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n          .antMatchers(\"/customers*\", \"/users*\")\r\n          .hasRole(\"USER\")\r\n          .anyRequest()\r\n          .permitAll();\r\n        http.oauth2Login()\r\n           .and()\r\n           .logout()\r\n           .addLogoutHandler(keycloakLogoutHandler)\r\n           .logoutSuccessUrl(\"/\");\r\n    }\r\n\r\n}\r\n```","```\r\n@Component\r\npublic class KeycloakLogoutHandler implements LogoutHandler {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(KeycloakLogoutHandler.class);\r\n    private final RestTemplate restTemplate;\r\n\r\n    public KeycloakLogoutHandler(RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n\r\n    @Override\r\n    public void logout(HttpServletRequest request, HttpServletResponse response, Authentication auth) {\r\n        logoutFromKeycloak((OidcUser) auth.getPrincipal());\r\n    }\r\n\r\n    private void logoutFromKeycloak(OidcUser user) {\r\n        String endSessionEndpoint = user.getIssuer() + \"/protocol/openid-connect/logout\";\r\n        UriComponentsBuilder builder = UriComponentsBuilder\r\n          .fromUriString(endSessionEndpoint)\r\n          .queryParam(\"id_token_hint\", user.getIdToken().getTokenValue());\r\n\r\n        ResponseEntity<String> logoutResponse = restTemplate.getForEntity(builder.toUriString(), String.class);\r\n        if (logoutResponse.getStatusCode().is2xxSuccessful()) {\r\n            logger.info(\"Successfulley logged out from Keycloak\");\r\n        } else {\r\n            logger.error(\"Could not propagate logout to Keycloak\");\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\n@GetMapping(path = \"/\")\r\npublic String index() {\r\n    return \"external\";\r\n}\r\n\r\n@GetMapping(path = \"/customers\")\r\npublic String customers(Principal principal, Model model) {\r\n    addCustomers();\r\n    model.addAttribute(\"customers\", customerDAO.findAll());\r\n    model.addAttribute(\"username\", principal.getName());\r\n    return \"customers\";\r\n}\r\n```","```\r\nmvn clean spring-boot:run\r\n```"]