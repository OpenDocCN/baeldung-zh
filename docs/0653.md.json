["```\r\n<dependency>\r\n    <groupId>org.quartz-scheduler</groupId>\r\n    <artifactId>quartz</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>\r\n```","```\r\nSchedulerFactory schedulerFactory = new StdSchedulerFactory();\r\nScheduler scheduler = schedulerFactory.getScheduler();\r\n```","```\r\nscheduler.start();\r\n```","```\r\npublic class SimpleJob implements Job {\r\n    public void execute(JobExecutionContext arg0) throws JobExecutionException {\r\n        System.out.println(\"This is a quartz job!\");\r\n    }\r\n}\r\n```","```\r\nJobDetail job = JobBuilder.newJob(SimpleJob.class)\r\n  .withIdentity(\"myJob\", \"group1\")\r\n  .build();\r\n```","```\r\nJobDetail job = newJob(SimpleJob.class)\r\n  .withIdentity(\"myJob\", \"group1\")\r\n  .usingJobData(\"jobSays\", \"Hello World!\")\r\n  .usingJobData(\"myFloatValue\", 3.141f)\r\n  .build();\r\n```","```\r\npublic class SimpleJob implements Job { \r\n    public void execute(JobExecutionContext context) throws JobExecutionException {\r\n        JobDataMap dataMap = context.getJobDetail().getJobDataMap();\r\n\r\n        String jobSays = dataMap.getString(\"jobSays\");\r\n        float myFloatValue = dataMap.getFloat(\"myFloatValue\");\r\n\r\n        System.out.println(\"Job says: \" + jobSays + \", and val is: \" + myFloatValue);\r\n    } \r\n}\r\n```","```\r\nTrigger trigger = TriggerBuilder.newTrigger()\r\n  .withIdentity(\"myTrigger\", \"group1\")\r\n  .startNow()\r\n  .withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n    .withIntervalInSeconds(40)\r\n    .repeatForever())\r\n  .build();\r\n```","```\r\nTrigger triggerA = TriggerBuilder.newTrigger()\r\n  .withIdentity(\"triggerA\", \"group1\")\r\n  .startNow()\r\n  .withPriority(15)\r\n  .withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n    .withIntervalInSeconds(40)\r\n    .repeatForever())\r\n  .build();\r\n\r\nTrigger triggerB = TriggerBuilder.newTrigger()\r\n  .withIdentity(\"triggerB\", \"group1\")\r\n  .startNow()\r\n  .withPriority(10)\r\n  .withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n    .withIntervalInSeconds(20)\r\n    .repeatForever())\r\n  .build();\r\n```","```\r\nTrigger misFiredTriggerA = TriggerBuilder.newTrigger()\r\n  .startAt(DateUtils.addSeconds(new Date(), -10))\r\n  .build();\r\n\r\nTrigger misFiredTriggerB = TriggerBuilder.newTrigger()\r\n  .startAt(DateUtils.addSeconds(new Date(), -10))\r\n  .withSchedule(SimpleScheduleBuilder.simpleSchedule()\r\n    .withMisfireHandlingInstructionFireNow())\r\n  .build();\r\n```","```\r\nSimpleTrigger trigger = (SimpleTrigger) TriggerBuilder.newTrigger()\r\n  .withIdentity(\"trigger1\", \"group1\")\r\n  .startAt(myStartTime)\r\n  .forJob(\"job1\", \"group1\")\r\n  .build();\r\n```","```\r\nSimpleTrigger trigger = (SimpleTrigger) TriggerBuilder.newTrigger()\r\n  .withIdentity(\"trigger2\", \"group1\")\r\n  .startAt(myStartTime)\r\n  .withSchedule(simpleSchedule()\r\n    .withIntervalInSeconds(10)\r\n    .withRepeatCount(10))\r\n  .forJob(\"job1\") \r\n  .build();\r\n```","```\r\nCronTrigger trigger = TriggerBuilder.newTrigger()\r\n  .withIdentity(\"trigger3\", \"group1\")\r\n  .withSchedule(CronScheduleBuilder.cronSchedule(\"0 0/2 8-17 * * ?\"))\r\n  .forJob(\"myJob\", \"group1\")\r\n  .build();\r\n```"]