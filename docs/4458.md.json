["```\r\nimport java.net.*;\r\n```","```\r\nSocket socket = new Socket();\r\nsocket.connect(new InetSocketAddress(address, port));\r\n```","```\r\nNetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\nEnumeration<InetAddress> nifAddresses = nif.getInetAddresses();\r\n\r\nSocket socket = new Socket();\r\nsocket.bind(new InetSocketAddress(nifAddresses.nextElement(), 0));\r\nsocket.connect(new InetSocketAddress(address, port));\r\n```","```\r\n@Test\r\npublic void givenName_whenReturnsNetworkInterface_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n\r\n    assertNotNull(nif);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInExistentName_whenReturnsNull_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"inexistent_name\");\r\n\r\n    assertNull(nif);\r\n}\r\n```","```\r\n@Test\r\npublic void givenIP_whenReturnsNetworkInterface_thenCorrect() {\r\n    byte[] ip = new byte[] { 127, 0, 0, 1 };\r\n\r\n    NetworkInterface nif = NetworkInterface.getByInetAddress(\r\n      InetAddress.getByAddress(ip));\r\n\r\n    assertNotNull(nif);\r\n}\r\n```","```\r\n@Test\r\npublic void givenHostName_whenReturnsNetworkInterface_thenCorrect()  {\r\n    NetworkInterface nif = NetworkInterface.getByInetAddress(\r\n      InetAddress.getByName(\"localhost\"));\r\n\r\n    assertNotNull(nif);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLocalHost_whenReturnsNetworkInterface_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByInetAddress(\r\n      InetAddress.getLocalHost());\r\n\r\n    assertNotNull(nif);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLoopBack_whenReturnsNetworkInterface_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByInetAddress(\r\n      InetAddress.getLoopbackAddress());\r\n\r\n    assertNotNull(nif);\r\n}\r\n```","```\r\nNetworkInterface nif = NetworkInterface.getByIndex(int index);\r\n```","```\r\nEnumeration<NetworkInterface> nets = NetworkInterface.getNetworkInterfaces();\r\n\r\nfor (NetworkInterface nif: Collections.list(nets)) {\r\n    //do something with the network interface\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenReturnsInetAddresses_thenCorrect()  {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n    Enumeration<InetAddress> addressEnum = nif.getInetAddresses();\r\n    InetAddress address = addressEnum.nextElement();\r\n\r\n    assertEquals(\"127.0.0.1\", address.getHostAddress());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenReturnsInterfaceAddresses_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n    List<InterfaceAddress> addressEnum = nif.getInterfaceAddresses();\r\n    InterfaceAddress address = addressEnum.get(0);\r\n\r\n    InetAddress localAddress=address.getAddress();\r\n    InetAddress broadCastAddress = address.getBroadcast();\r\n\r\n    assertEquals(\"127.0.0.1\", localAddress.getHostAddress());\r\n    assertEquals(\"127.255.255.255\",broadCastAddress.getHostAddress());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenChecksIfUp_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n\r\n    assertTrue(nif.isUp());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenChecksIfLoopback_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n\r\n    assertTrue(nif.isLoopback());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenChecksIfPointToPoint_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n\r\n    assertFalse(nif.isPointToPoint());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenChecksIfVirtual_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n    assertFalse(nif.isVirtual());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenChecksMulticastSupport_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n\r\n    assertTrue(nif.supportsMulticast());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenGetsMacAddress_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"lo\");\r\n    byte[] bytes = nif.getHardwareAddress();\r\n\r\n    assertNotNull(bytes);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInterface_whenGetsMTU_thenCorrect() {\r\n    NetworkInterface nif = NetworkInterface.getByName(\"net0\");\r\n    int mtu = nif.getMTU();\r\n\r\n    assertEquals(1500, mtu);\r\n}\r\n```"]