["```\r\n@RestController\r\n@RequestMapping(\"/students\")\r\npublic class StudentController {\r\n\r\n    @Autowired\r\n    private StudentService service;\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Student read(@PathVariable String id) {\r\n        return service.find(id);\r\n    }\r\n\r\n... \r\n```","```\r\n@PostMapping(\"/\")\r\npublic ResponseEntity<Student> create(@RequestBody Student student) \r\n    throws URISyntaxException {\r\n    Student createdStudent = service.create(student);\r\n    if (createdStudent == null) {\r\n        return ResponseEntity.notFound().build();\r\n    } else {\r\n        URI uri = ServletUriComponentsBuilder.fromCurrentRequest()\r\n          .path(\"/{id}\")\r\n          .buildAndExpand(createdStudent.getId())\r\n          .toUri();\r\n\r\n        return ResponseEntity.created(uri)\r\n          .body(createdStudent);\r\n    }\r\n} \r\n```","```\r\n@GetMapping(\"/{id}\")\r\npublic ResponseEntity<Student> read(@PathVariable(\"id\") Long id) {\r\n    Student foundStudent = service.read(id);\r\n    if (foundStudent == null) {\r\n        return ResponseEntity.notFound().build();\r\n    } else {\r\n        return ResponseEntity.ok(foundStudent);\r\n    }\r\n} \r\n```","```\r\n@PutMapping(\"/{id}\")\r\npublic ResponseEntity<Student> update(@RequestBody Student student, @PathVariable Long id) {\r\n    Student updatedStudent = service.update(id, student);\r\n    if (updatedStudent == null) {\r\n        return ResponseEntity.notFound().build();\r\n    } else {\r\n        return ResponseEntity.ok(updatedStudent);\r\n    }\r\n} \r\n```","```\r\n@DeleteMapping(\"/{id}\")\r\npublic ResponseEntity<Object> deleteStudent(@PathVariable Long id) {\r\n    service.delete(id);\r\n    return ResponseEntity.noContent().build();\r\n} \r\n```"]