["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.1</version>\r\n</dependency> \r\n```","```\r\npublic class OrderMapUnitTest {\r\n    private String[] names = {\"Emily\", \"Mathew\", \"Rose\", \"John\", \"Anna\"};\r\n    private Integer[] ages = {37, 28, 40, 36, 21};\r\n    private LinkedMap<String, Integer> runnersLinkedMap;\r\n\r\n    //...\r\n}\r\n```","```\r\n@Before\r\npublic void createRunners() {\r\n    this.runnersLinkedMap = new LinkedMap<>();\r\n\r\n    for (int i = 0; i < RUNNERS_COUNT; i++) {\r\n        runners.put(this.names[i], this.ages[i]);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenIteratedForwards_thenPreservesOrder() {\r\n    String name = this.runnersLinkedMap.firstKey();\r\n    int i = 0;\r\n    while (name != null) {\r\n        assertEquals(name, names[i]);\r\n        name = this.runnersLinkedMap.nextKey(name);\r\n        i++;\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenIteratedBackwards_thenPreservesOrder() {\r\n    String name = this.runnersLinkedMap.lastKey();\r\n    int i = RUNNERS_COUNT - 1;\r\n    while (name != null) {\r\n        assertEquals(name, this.names[i]);\r\n        name = this.runnersLinkedMap.previousKey(name);\r\n        i--;\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenIteratedWithMapIterator_thenPreservesOrder() {\r\n    OrderedMapIterator<String, Integer> runnersIterator \r\n      = this.runnersLinkedMap.mapIterator();\r\n\r\n    int i = 0;\r\n    while (runnersIterator.hasNext()) {\r\n        runnersIterator.next();\r\n\r\n        assertEquals(runnersIterator.getKey(), this.names[i]);\r\n        assertEquals(runnersIterator.getValue(), this.ages[i]);\r\n        i++;\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenElementRemoved_thenSizeDecrease() {\r\n    LinkedMap<String, Integer> lmap \r\n      = (LinkedMap<String, Integer>) this.runnersLinkedMap;\r\n\r\n    Integer johnAge = lmap.remove(\"John\");\r\n\r\n    assertEquals(johnAge, new Integer(36));\r\n    assertEquals(lmap.size(), RUNNERS_COUNT - 1);\r\n\r\n    Integer emilyAge = lmap.remove(0);\r\n\r\n    assertEquals(emilyAge, new Integer(37));\r\n    assertEquals(lmap.size(), RUNNERS_COUNT - 2);\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenConvertedToList_thenMatchesKeySet() {\r\n    LinkedMap<String, Integer> lmap \r\n      = (LinkedMap<String, Integer>) this.runnersLinkedMap;\r\n\r\n    List<String> listKeys = new ArrayList<>();\r\n    listKeys.addAll(this.runnersLinkedMap.keySet());\r\n    List<String> linkedMap = lmap.asList();\r\n\r\n    assertEquals(listKeys, linkedMap);\r\n} \r\n```","```\r\n@Test\r\npublic void givenALinkedMap_whenSearchByIndexIsUsed_thenMatchesConstantArray() {\r\n    LinkedMap<String, Integer> lmap \r\n      = (LinkedMap<String, Integer>) this.runnersLinkedMap;\r\n\r\n    for (int i = 0; i < RUNNERS_COUNT; i++) {\r\n        String name = lmap.get(i);\r\n\r\n        assertEquals(name, this.names[i]);\r\n        assertEquals(lmap.indexOf(this.names[i]), i);\r\n    }\r\n} \r\n```"]