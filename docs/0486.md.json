["```\r\nint a = 0;\r\na += 1;\r\na += 2;\r\na += 3;\r\n```","```\r\nint a = 0;\r\na += 1;\r\nif (a < 10) {\r\n  a += 2;\r\n}\r\na += 3;\r\n```","```\r\nint a = 0;\r\na += 1;\r\nif (a > 10) {\r\n  a += 2;\r\n}\r\na += 3;\r\n```","```\r\nList<Long> numbers = LongStream.range(0, top)\r\n    .boxed()\r\n    .collect(Collectors.toList());\r\n\r\nif (shuffle) {\r\n    Collections.shuffle(numbers);\r\n}\r\n\r\nlong cutoff = top / 2;\r\nlong count = 0;\r\n\r\nlong start = System.currentTimeMillis();\r\nfor (Long number : numbers) {\r\n    if (number < cutoff) {\r\n        ++count;\r\n    }\r\n}\r\nlong end = System.currentTimeMillis();\r\n\r\nLOG.info(\"Counted {}/{} {} numbers in {}ms\",\r\n    count, top, shuffle ? \"shuffled\" : \"sorted\", end - start);\r\n```","```\r\nif (mostLikely) {\r\n  // Do something\r\n} else if (lessLikely) {\r\n  // Do something\r\n} else if (leastLikely) {\r\n  // Do something\r\n}\r\n```","```\r\nList<Long> numbers = LongStream.range(0, top)\r\n  .boxed()\r\n  .collect(Collectors.toList());\r\nif (shuffle) {\r\n    Collections.shuffle(numbers);\r\n}\r\n\r\nlong cutoff = (long)(top * cutoffPercentage);\r\nlong low = 0;\r\nlong high = 0;\r\n\r\nlong start = System.currentTimeMillis();\r\nfor (Long number : numbers) {\r\n    if (number < cutoff) {\r\n        ++low;\r\n    } else {\r\n        ++high;\r\n    }\r\n}\r\nlong end = System.currentTimeMillis();\r\n\r\nLOG.info(\"Counted {}/{} numbers in {}ms\", low, high, end - start);\r\n```","```\r\nlong[] first = LongStream.range(0, TOP)\r\n  .map(n -> Math.random() < FRACTION ? 0 : n)\r\n  .toArray();\r\nlong[] second = LongStream.range(0, TOP)\r\n  .map(n -> Math.random() < FRACTION ? 0 : n)\r\n  .toArray();\r\n\r\nlong count = 0;\r\nlong start = System.currentTimeMillis();\r\nfor (int i = 0; i < TOP; i++) {\r\n    if (first[i] != 0 && second[i] != 0) {\r\n        ++count;\r\n    }\r\n}\r\nlong end = System.currentTimeMillis();\r\n\r\nLOG.info(\"Counted {}/{} numbers using separate mode in {}ms\", count, TOP, end - start);\r\n```"]