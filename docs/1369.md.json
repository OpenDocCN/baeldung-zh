["```\r\n<dependency>\r\n    <groupId>io.vertx</groupId>\r\n    <artifactId>vertx-core</artifactId>\r\n    <version>3.4.1</version>\r\n</dependency>\r\n```","```\r\npublic class HelloVerticle extends AbstractVerticle {\r\n\r\n    @Override\r\n    public void start(Future<Void> future) {\r\n        LOGGER.info(\"Welcome to Vertx\");\r\n    }\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    Vertx vertx = Vertx.vertx();\r\n    vertx.deployVerticle(new HelloVerticle());\r\n}\r\n```","```\r\n@Override\r\npublic void stop() {\r\n    LOGGER.info(\"Shutting down application\");\r\n}\r\n```","```\r\n@Override\r\npublic void start(Future<Void> future) {\r\n    vertx.createHttpServer()\r\n      .requestHandler(r -> r.response().end(\"Welcome to Vert.x Intro\");\r\n      })\r\n      .listen(config().getInteger(\"http.port\", 9090), \r\n        result -> {\r\n          if (result.succeeded()) {\r\n              future.complete();\r\n          } else {\r\n              future.fail(result.cause());\r\n          }\r\n      });\r\n}\r\n```","```\r\n@Test\r\npublic void whenReceivedResponse_thenSuccess(TestContext testContext) {\r\n    Async async = testContext.async();\r\n\r\n    vertx.createHttpClient()\r\n      .getNow(port, \"localhost\", \"/\", response -> {\r\n        response.handler(responseBody -> {\r\n          testContext.assertTrue(responseBody.toString().contains(\"Hello\"));\r\n          async.complete();\r\n        });\r\n      });\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.vertx</groupId>\r\n    <artifactId>vertx-unit</artifactId>\r\n    <version>3.4.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Before\r\npublic void setup(TestContext testContext) {\r\n    vertx = Vertx.vertx();\r\n\r\n    vertx.deployVerticle(SimpleServerVerticle.class.getName(), \r\n      testContext.asyncAssertSuccess());\r\n}\r\n```","```\r\n@After\r\npublic void tearDown(TestContext testContext) {\r\n    vertx.close(testContext.asyncAssertSuccess());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.vertx</groupId>\r\n    <artifactId>vertx-web</artifactId>\r\n    <version>3.4.1</version>\r\n</dependency>\r\n```","```\r\nRouter router = Router.router(vertx);\r\nrouter.get(\"/api/baeldung/articles/article/:id\")\r\n  .handler(this::getArticles);\r\n```","```\r\nprivate void getArticles(RoutingContext routingContext) {\r\n    String articleId = routingContext.request()\r\n      .getParam(\"id\");\r\n    Article article = new Article(articleId, \r\n      \"This is an intro to vertx\", \"baeldung\", \"01-02-2017\", 1578);\r\n\r\n    routingContext.response()\r\n      .putHeader(\"content-type\", \"application/json\")\r\n      .setStatusCode(200)\r\n      .end(Json.encodePrettily(article));\r\n}\r\n```","```\r\nvertx.createHttpServer()\r\n  .requestHandler(router::accept)\r\n  .listen(config().getInteger(\"http.port\", 8080), \r\n    result -> {\r\n      if (result.succeeded()) {\r\n          future.complete();\r\n      } else {\r\n          future.fail(result.cause());\r\n      }\r\n});\r\n```","```\r\n@Test\r\npublic void givenId_whenReceivedArticle_thenSuccess(TestContext testContext) {\r\n    Async async = testContext.async();\r\n\r\n    vertx.createHttpClient()\r\n      .getNow(8080, \"localhost\", \"/api/baeldung/articles/article/12345\", \r\n        response -> {\r\n            response.handler(responseBody -> {\r\n            testContext.assertTrue(\r\n              responseBody.toString().contains(\"\\\"id\\\" : \\\"12345\\\"\"));\r\n            async.complete();\r\n        });\r\n      });\r\n}\r\n```","```\r\n<configuration>\r\n    <transformers>\r\n        <transformer \r\n          implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\r\n            <manifestEntries>\r\n                <Main-Class>io.vertx.core.Starter</Main-Class>\r\n                <Main-Verticle>com.baeldung.SimpleServerVerticle</Main-Verticle>\r\n            </manifestEntries>\r\n        </transformer>\r\n    </transformers>\r\n    <artifactSet />\r\n    <outputFile>\r\n        ${project.build.directory}/${project.artifactId}-${project.version}-app.jar\r\n    </outputFile>\r\n</configuration>\r\n```"]