["```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<individual>\r\n    <name>Baeldung</name>\r\n    <address>\r\n        <zip>00001</zip>\r\n        <city>New York</city>\r\n    </address>\r\n</individual>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n    <xs:element name=\"individual\">\r\n        <xs:complexType>\r\n            <xs:sequence>\r\n                <xs:element name=\"name\" type=\"xs:string\" />\r\n                <xs:element name=\"address\">\r\n                    <xs:complexType>\r\n                        <xs:sequence>\r\n                            <xs:element name=\"zip\" type=\"xs:positiveInteger\" />\r\n                            <xs:element name=\"city\" type=\"xs:string\" />\r\n                        </xs:sequence>\r\n                    </xs:complexType>\r\n                </xs:element>\r\n            </xs:sequence>\r\n        </xs:complexType>\r\n    </xs:element>\r\n</xs:schema>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\r\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n    <xs:element name=\"individual\">\r\n        <xs:complexType>\r\n            <xs:sequence>\r\n                <xs:element name=\"name\">\r\n                    <xs:simpleType>\r\n                        <xs:restriction base=\"xs:string\">\r\n                            <xs:maxLength value=\"5\" />\r\n                        </xs:restriction>\r\n                    </xs:simpleType>\r\n                </xs:element>\r\n                <xs:element name=\"address\">\r\n                    <xs:complexType>\r\n                        <xs:sequence>\r\n                            <xs:element name=\"zip\" type=\"xs:positiveInteger\" />\r\n                            <xs:element name=\"city\" type=\"xs:string\" />\r\n                            <xs:element name=\"street\" type=\"xs:string\" />\r\n                        </xs:sequence>\r\n                    </xs:complexType>\r\n                </xs:element>\r\n            </xs:sequence>\r\n        </xs:complexType>\r\n    </xs:element>\r\n</xs:schema>\r\n```","```\r\nprivate Validator initValidator(String xsdPath) throws SAXException {\r\n    SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\r\n    Source schemaFile = new StreamSource(getFile(xsdPath));\r\n    Schema schema = factory.newSchema(schemaFile);\r\n    return schema.newValidator();\r\n}\r\n```","```\r\nprivate File getFile(String location) {\r\n    return new File(getClass().getClassLoader().getResource(location).getFile());\r\n}\r\n```","```\r\npublic boolean isValid(String xsdPath, String xmlPath) throws IOException, SAXException {\r\n    Validator validator = initValidator(xsdPath);\r\n    try {\r\n        validator.validate(new StreamSource(getFile(xmlPath)));\r\n        return true;\r\n    } catch (SAXException e) {\r\n        return false;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidXML_WhenIsValid_ThenTrue() throws IOException, SAXException {\r\n    assertTrue(new XmlValidator().isValid(\"person.xsd\", \"baeldung.xml\"));\r\n}\r\n\r\n@Test\r\npublic void givenInvalidXML_WhenIsValid_ThenFalse() throws IOException, SAXException {\r\n    assertFalse(new XmlValidator().isValid(\"full-person.xsd\", \"baeldung.xml\"));\r\n}\r\n```","```\r\npublic class XmlErrorHandler implements ErrorHandler {\r\n\r\n    private List<SAXParseException> exceptions;\r\n\r\n    public XmlErrorHandler() {\r\n        this.exceptions = new ArrayList<>();\r\n    }\r\n\r\n    public List<SAXParseException> getExceptions() {\r\n        return exceptions;\r\n    }\r\n\r\n    @Override\r\n    public void warning(SAXParseException exception) {\r\n        exceptions.add(exception);\r\n    }\r\n\r\n    @Override\r\n    public void error(SAXParseException exception) {\r\n        exceptions.add(exception);\r\n    }\r\n\r\n    @Override\r\n    public void fatalError(SAXParseException exception) {\r\n        exceptions.add(exception);\r\n    }\r\n}\r\n```","```\r\npublic List<SAXParseException> listParsingExceptions(String xsdPath, String xmlPath) throws IOException, SAXException {\r\n    XmlErrorHandler xsdErrorHandler = new XmlErrorHandler();\r\n    Validator validator = initValidator(xsdPath);\r\n    validator.setErrorHandler(xsdErrorHandler);\r\n    try {\r\n        validator.validate(new StreamSource(getFile(xmlPath)));\r\n    } catch (SAXParseException e) \r\n    {\r\n        // ...\r\n    }\r\n    xsdErrorHandler.getExceptions().forEach(e -> LOGGER.info(e.getMessage()));\r\n    return xsdErrorHandler.getExceptions();\r\n}\r\n```","```\r\nXmlValidator - cvc-maxLength-valid: Value 'Baeldung' with length = '8' is not facet-valid with respect to maxLength '5' for type '#AnonType_nameindividual'.\r\nXmlValidator - cvc-type.3.1.3: The value 'Baeldung' of element 'name' is not valid.\r\nXmlValidator - cvc-complex-type.2.4.b: The content of element 'address' is not complete. One of '{street}' is expected.\r\n```"]