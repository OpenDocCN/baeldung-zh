["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-text</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenCapitalized_thenCorrect() {\r\n    String toBeCapitalized = \"to be capitalized!\";\r\n    String result = WordUtils.capitalize(toBeCapitalized);\r\n\r\n    assertEquals(\"To Be Capitalized!\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenContainsWords_thenCorrect() {\r\n    boolean containsWords = WordUtils\r\n      .containsAllWords(\"String to search\", \"to\", \"search\");\r\n\r\n    assertTrue(containsWords);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSubstituted_thenCorrect() {\r\n    Map<String, String> substitutes = new HashMap<>();\r\n    substitutes.put(\"name\", \"John\");\r\n    substitutes.put(\"college\", \"University of Stanford\");\r\n    String templateString = \"My name is ${name} and I am a student at the ${college}.\";\r\n    StrSubstitutor sub = new StrSubstitutor(substitutes);\r\n    String result = sub.replace(templateString);\r\n\r\n    assertEquals(\"My name is John and I am a student at the University of Stanford.\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReplaced_thenCorrect() {\r\n    StrBuilder strBuilder = new StrBuilder(\"example StrBuilder!\");\r\n    strBuilder.replaceAll(\"example\", \"new\");\r\n\r\n    assertEquals(new StrBuilder(\"new StrBuilder!\"), strBuilder);\r\n}\r\n```","```\r\nstrBuilder.clear();\r\n```","```\r\n@Test\r\npublic void whenEditScript_thenCorrect() {\r\n    StringsComparator cmp = new StringsComparator(\"ABCFGH\", \"BCDEFG\");\r\n    EditScript<Character> script = cmp.getScript();\r\n    int mod = script.getModifications();\r\n\r\n    assertEquals(4, mod);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompare_thenCorrect() {\r\n    LongestCommonSubsequence lcs = new LongestCommonSubsequence();\r\n    int countLcs = lcs.apply(\"New York\", \"New Hampshire\");\r\n\r\n    assertEquals(5, countLcs);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculateDistance_thenCorrect() {\r\n    LongestCommonSubsequenceDistance lcsd = new LongestCommonSubsequenceDistance();\r\n    int countLcsd = lcsd.apply(\"New York\", \"New Hampshire\");\r\n\r\n    assertEquals(11, countLcsd);\r\n}\r\n```","```\r\n@Test\r\npublic void whenTranslate_thenCorrect() {\r\n    UnicodeEscaper ue = UnicodeEscaper.above(0);\r\n    String result = ue.translate(\"ABCD\");\r\n\r\n    assertEquals(\"\\\\u0041\\\\u0042\\\\u0043\\\\u0044\", result);\r\n}\r\n```"]