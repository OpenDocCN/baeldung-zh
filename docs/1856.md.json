["```\r\npublic class MyClass {\r\n    private int id;\r\n    private String name;\r\n\r\n    public MyClass(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfMyClass_whenSerializing_thenCorrect() {\r\n    List<MyClass> list = Arrays.asList(new MyClass(1, \"name1\"), new MyClass(2, \"name2\"));\r\n\r\n    Gson gson = new Gson();\r\n    String jsonString = gson.toJson(list);\r\n    String expectedString = \"[{\\\"id\\\":1,\\\"name\\\":\\\"name1\\\"},{\\\"id\\\":2,\\\"name\\\":\\\"name2\\\"}]\";\r\n\r\n    assertEquals(expectedString, jsonString);\r\n}\r\n```","```\r\n@Test(expected = ClassCastException.class)\r\npublic void givenJsonString_whenIncorrectDeserializing_thenThrowClassCastException() {\r\n    String inputString = \"[{\\\"id\\\":1,\\\"name\\\":\\\"name1\\\"},{\\\"id\\\":2,\\\"name\\\":\\\"name2\\\"}]\";\r\n\r\n    Gson gson = new Gson();\r\n    List<MyClass> outputList = gson.fromJson(inputString, ArrayList.class);\r\n\r\n    assertEquals(1, outputList.get(0).getId());\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonString_whenDeserializing_thenReturnListOfMyClass() {\r\n    String inputString = \"[{\\\"id\\\":1,\\\"name\\\":\\\"name1\\\"},{\\\"id\\\":2,\\\"name\\\":\\\"name2\\\"}]\";\r\n    List<MyClass> inputList = Arrays.asList(new MyClass(1, \"name1\"), new MyClass(2, \"name2\"));\r\n\r\n    Type listOfMyClassObject = new TypeToken<ArrayList<MyClass>>() {}.getType();\r\n\r\n    Gson gson = new Gson();\r\n    List<MyClass> outputList = gson.fromJson(inputString, listOfMyClassObject);\r\n\r\n    assertEquals(inputList, outputList);\r\n}\r\n```","```\r\npublic abstract class Animal {\r\n    // ...\r\n}\r\n\r\npublic class Dog extends Animal {\r\n    // ...\r\n}\r\n\r\npublic class Cow extends Animal {\r\n    // ...\r\n}\r\n```","```\r\npublic abstract class Animal {\r\n    public String type = \"Animal\";\r\n}\r\n```","```\r\npublic class Dog extends Animal {\r\n    private String petName;\r\n\r\n    public Dog() {\r\n        petName = \"Milo\";\r\n        type = \"Dog\";\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Cow extends Animal {\r\n    private String breed;\r\n\r\n    public Cow() {\r\n        breed = \"Jersey\";\r\n        type = \"Cow\";\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test \r\npublic void givenPolymorphicList_whenSerializeWithTypeAdapter_thenCorrect() {\r\n    String expectedString\r\n      = \"[{\\\"petName\\\":\\\"Milo\\\",\\\"type\\\":\\\"Dog\\\"},{\\\"breed\\\":\\\"Jersey\\\",\\\"type\\\":\\\"Cow\\\"}]\";\r\n\r\n    List<Animal> inList = new ArrayList<>();\r\n    inList.add(new Dog());\r\n    inList.add(new Cow());\r\n\r\n    String jsonString = new Gson().toJson(inList);\r\n\r\n    assertEquals(expectedString, jsonString);\r\n}\r\n```","```\r\npublic class AnimalDeserializer implements JsonDeserializer<Animal> {\r\n    private String animalTypeElementName;\r\n    private Gson gson;\r\n    private Map<String, Class<? extends Animal>> animalTypeRegistry;\r\n\r\n    public AnimalDeserializer(String animalTypeElementName) {\r\n        this.animalTypeElementName = animalTypeElementName;\r\n        this.gson = new Gson();\r\n        this.animalTypeRegistry = new HashMap<>();\r\n    }\r\n\r\n    public void registerBarnType(String animalTypeName, Class<? extends Animal> animalType) {\r\n        animalTypeRegistry.put(animalTypeName, animalType);\r\n    }\r\n\r\n    public Animal deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) {\r\n        JsonObject animalObject = json.getAsJsonObject();\r\n        JsonElement animalTypeElement = animalObject.get(animalTypeElementName);\r\n\r\n        Class<? extends Animal> animalType = animalTypeRegistry.get(animalTypeElement.getAsString());\r\n        return gson.fromJson(animalObject, animalType);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPolymorphicList_whenDeserializeWithTypeAdapter_thenCorrect() {\r\n    String inputString\r\n      = \"[{\\\"petName\\\":\\\"Milo\\\",\\\"type\\\":\\\"Dog\\\"},{\\\"breed\\\":\\\"Jersey\\\",\\\"type\\\":\\\"Cow\\\"}]\";\r\n\r\n    AnimalDeserializer deserializer = new AnimalDeserializer(\"type\");\r\n    deserializer.registerBarnType(\"Dog\", Dog.class);\r\n    deserializer.registerBarnType(\"Cow\", Cow.class);\r\n    Gson gson = new GsonBuilder()\r\n      .registerTypeAdapter(Animal.class, deserializer)\r\n      .create();\r\n\r\n    List<Animal> outList = gson.fromJson(inputString, new TypeToken<List<Animal>>(){}.getType());\r\n\r\n    assertEquals(2, outList.size());\r\n    assertTrue(outList.get(0) instanceof Dog);\r\n    assertTrue(outList.get(1) instanceof Cow);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPolymorphicList_whenDeserializeWithRuntimeTypeAdapter_thenCorrect() {\r\n    String inputString\r\n      = \"[{\\\"petName\\\":\\\"Milo\\\",\\\"type\\\":\\\"Dog\\\"},{\\\"breed\\\":\\\"Jersey\\\",\\\"type\\\":\\\"Cow\\\"}]\";\r\n\r\n    Type listOfAnimals = new TypeToken<ArrayList<Animal>>(){}.getType();\r\n\r\n    RuntimeTypeAdapterFactory<Animal> adapter = RuntimeTypeAdapterFactory.of(Animal.class, \"type\")\r\n      .registerSubtype(Dog.class)\r\n      .registerSubtype(Cow.class);\r\n\r\n    Gson gson = new GsonBuilder().registerTypeAdapterFactory(adapter).create();\r\n\r\n    List<Animal> outList = gson.fromJson(inputString, listOfAnimals);\r\n\r\n    assertEquals(2, outList.size());\r\n    assertTrue(outList.get(0) instanceof Dog);\r\n    assertTrue(outList.get(1) instanceof Cow);\r\n}\r\n```"]