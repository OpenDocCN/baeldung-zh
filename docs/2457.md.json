["```\r\nThreadLocal<Integer> threadLocalValue = new ThreadLocal<>();\r\n```","```\r\nthreadLocalValue.set(1);\r\nInteger result = threadLocalValue.get();\r\n```","```\r\nThreadLocal<Integer> threadLocal = ThreadLocal.withInitial(() -> 1);\r\n```","```\r\nthreadLocal.remove();\r\n```","```\r\npublic class Context {\r\n    private String userName;\r\n\r\n    public Context(String userName) {\r\n        this.userName = userName;\r\n    }\r\n}\r\n```","```\r\npublic class SharedMapWithUserContext implements Runnable {\r\n\r\n    public static Map<Integer, Context> userContextPerUserId\r\n      = new ConcurrentHashMap<>();\r\n    private Integer userId;\r\n    private UserRepository userRepository = new UserRepository();\r\n\r\n    @Override\r\n    public void run() {\r\n        String userName = userRepository.getUserNameForUserId(userId);\r\n        userContextPerUserId.put(userId, new Context(userName));\r\n    }\r\n\r\n    // standard constructor\r\n}\r\n```","```\r\nSharedMapWithUserContext firstUser = new SharedMapWithUserContext(1);\r\nSharedMapWithUserContext secondUser = new SharedMapWithUserContext(2);\r\nnew Thread(firstUser).start();\r\nnew Thread(secondUser).start();\r\n\r\nassertEquals(SharedMapWithUserContext.userContextPerUserId.size(), 2);\r\n```","```\r\npublic class ThreadLocalWithUserContext implements Runnable {\r\n\r\n    private static ThreadLocal<Context> userContext \r\n      = new ThreadLocal<>();\r\n    private Integer userId;\r\n    private UserRepository userRepository = new UserRepository();\r\n\r\n    @Override\r\n    public void run() {\r\n        String userName = userRepository.getUserNameForUserId(userId);\r\n        userContext.set(new Context(userName));\r\n        System.out.println(\"thread context for given userId: \" \r\n          + userId + \" is: \" + userContext.get());\r\n    }\r\n\r\n    // standard constructor\r\n}\r\n```","```\r\nThreadLocalWithUserContext firstUser \r\n  = new ThreadLocalWithUserContext(1);\r\nThreadLocalWithUserContext secondUser \r\n  = new ThreadLocalWithUserContext(2);\r\nnew Thread(firstUser).start();\r\nnew Thread(secondUser).start();\r\n```","```\r\nthread context for given userId: 1 is: Context{userNameSecret='18a78f8e-24d2-4abf-91d6-79eaa198123f'}\r\nthread context for given userId: 2 is: Context{userNameSecret='e19f6a0a-253e-423e-8b2b-bca1f471ae5c'}\r\n```","```\r\npublic class ThreadLocalAwareThreadPool extends ThreadPoolExecutor {\r\n\r\n    @Override\r\n    protected void afterExecute(Runnable r, Throwable t) {\r\n        // Call remove on each ThreadLocal\r\n    }\r\n}\r\n```"]