["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.7.2</version>\r\n    <relativePath/>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-security</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\nspring.redis.host=localhost\r\nspring.redis.port=6379\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session-data-redis</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session</artifactId>\r\n    <version>1.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-redis</artifactId>\r\n    <version>1.5.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableRedisHttpSession\r\npublic class SessionConfig extends AbstractHttpSessionApplicationInitializer {\r\n    @Bean\r\n    public JedisConnectionFactory connectionFactory() {\r\n        return new JedisConnectionFactory();\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class SessionController {\r\n    @RequestMapping(\"/\")\r\n    public String helloAdmin() {\r\n        return \"hello admin\";\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager userDetailsService(PasswordEncoder passwordEncoder) {\r\n        UserDetails user = User.withUsername(\"admin\")\r\n            .password(passwordEncoder.encode(\"password\"))\r\n            .roles(\"ADMIN\")\r\n            .build();\r\n        return new InMemoryUserDetailsManager(user);\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n            .and()\r\n            .authorizeRequests()\r\n            .antMatchers(\"/\")\r\n            .hasRole(\"ADMIN\")\r\n            .anyRequest()\r\n            .authenticated();\r\n        return http.build();\r\n    }\r\n\r\n    @Bean \r\n    public PasswordEncoder passwordEncoder() { \r\n        return new BCryptPasswordEncoder(); \r\n    } \r\n}\r\n```","```\r\npublic class SessionControllerTest {\r\n\r\n    private Jedis jedis;\r\n    private TestRestTemplate testRestTemplate;\r\n    private TestRestTemplate testRestTemplateWithAuth;\r\n    private String testUrl = \"http://localhost:8080/\";\r\n\r\n    @Before\r\n    public void clearRedisData() {\r\n        testRestTemplate = new TestRestTemplate();\r\n        testRestTemplateWithAuth = new TestRestTemplate(\"admin\", \"password\", null);\r\n\r\n        jedis = new Jedis(\"localhost\", 6379);\r\n        jedis.flushAll();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testRedisIsEmpty() {\r\n    Set<String> result = jedis.keys(\"*\");\r\n    assertEquals(0, result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void testUnauthenticatedCantAccess() {\r\n    ResponseEntity<String> result = testRestTemplate.getForEntity(testUrl, String.class);\r\n    assertEquals(HttpStatus.UNAUTHORIZED, result.getStatusCode());\r\n}\r\n```","```\r\n@Test\r\npublic void testRedisControlsSession() {\r\n    ResponseEntity<String> result = testRestTemplateWithAuth.getForEntity(testUrl, String.class);\r\n    assertEquals(\"hello admin\", result.getBody()); //login worked\r\n\r\n    Set<String> redisResult = jedis.keys(\"*\");\r\n    assertTrue(redisResult.size() > 0); //redis is populated with session data\r\n\r\n    String sessionCookie = result.getHeaders().get(\"Set-Cookie\").get(0).split(\";\")[0];\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(\"Cookie\", sessionCookie);\r\n    HttpEntity<String> httpEntity = new HttpEntity<>(headers);\r\n\r\n    result = testRestTemplate.exchange(testUrl, HttpMethod.GET, httpEntity, String.class);\r\n    assertEquals(\"hello admin\", result.getBody()); //access with session works worked\r\n\r\n    jedis.flushAll(); //clear all keys in redis\r\n\r\n    result = testRestTemplate.exchange(testUrl, HttpMethod.GET, httpEntity, String.class);\r\n    assertEquals(HttpStatus.UNAUTHORIZED, result.getStatusCode());\r\n    //access denied after sessions are removed in redis\r\n}\r\n```"]