["```\r\n<dependency>\r\n    <groupId>org.apache.pdfbox</groupId>\r\n    <artifactId>pdfbox-tools</artifactId>\r\n    <version>2.0.25</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.sf.cssbox</groupId>\r\n    <artifactId>pdf2dom</artifactId>\r\n    <version>2.0.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.itextpdf</groupId>\r\n    <artifactId>itextpdf</artifactId>\r\n    <version>5.5.10</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.itextpdf.tool</groupId>\r\n    <artifactId>xmlworker</artifactId>\r\n    <version>5.5.10</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.poi</groupId>\r\n    <artifactId>poi-ooxml</artifactId>\r\n    <version>3.15</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.poi</groupId>\r\n    <artifactId>poi-scratchpad</artifactId>\r\n    <version>3.15</version>\r\n</dependency>\r\n```","```\r\nprivate void generateHTMLFromPDF(String filename) {\r\n    PDDocument pdf = PDDocument.load(new File(filename));\r\n    Writer output = new PrintWriter(\"src/output/pdf.html\", \"utf-8\");\r\n    new PDFDomTree().writeText(pdf, output);\r\n\r\n    output.close();\r\n} \r\n```","```\r\nprivate static void generatePDFFromHTML(String filename) {\r\n    Document document = new Document();\r\n    PdfWriter writer = PdfWriter.getInstance(document,\r\n      new FileOutputStream(\"src/output/html.pdf\"));\r\n    document.open();\r\n    XMLWorkerHelper.getInstance().parseXHtml(writer, document,\r\n      new FileInputStream(filename));\r\n    document.close();\r\n}\r\n```","```\r\nprivate void generateImageFromPDF(String filename, String extension) {\r\n    PDDocument document = PDDocument.load(new File(filename));\r\n    PDFRenderer pdfRenderer = new PDFRenderer(document);\r\n    for (int page = 0; page < document.getNumberOfPages(); ++page) {\r\n        BufferedImage bim = pdfRenderer.renderImageWithDPI(\r\n          page, 300, ImageType.RGB);\r\n        ImageIOUtil.writeImage(\r\n          bim, String.format(\"src/output/pdf-%d.%s\", page + 1, extension), 300);\r\n    }\r\n    document.close();\r\n}\r\n```","```\r\nprivate static void generatePDFFromImage(String filename, String extension) {\r\n    Document document = new Document();\r\n    String input = filename + \".\" + extension;\r\n    String output = \"src/output/\" + extension + \".pdf\";\r\n    FileOutputStream fos = new FileOutputStream(output);\r\n\r\n    PdfWriter writer = PdfWriter.getInstance(document, fos);\r\n    writer.open();\r\n    document.open();\r\n    document.add(Image.getInstance((new URL(input))));\r\n    document.close();\r\n    writer.close();\r\n}\r\n```","```\r\nFile f = new File(filename);\r\nString parsedText;\r\nPDFParser parser = new PDFParser(new RandomAccessFile(f, \"r\"));\r\nparser.parse();\r\n```","```\r\nCOSDocument cosDoc = parser.getDocument();\r\nPDFTextStripper pdfStripper = new PDFTextStripper();\r\nPDDocument pdDoc = new PDDocument(cosDoc);\r\nparsedText = pdfStripper.getText(pdDoc);\r\n```","```\r\nPrintWriter pw = new PrintWriter(\"src/output/pdf.txt\");\r\npw.print(parsedText);\r\npw.close();\r\n```","```\r\nDocument pdfDoc = new Document(PageSize.A4);\r\nPdfWriter.getInstance(pdfDoc, new FileOutputStream(\"src/output/txt.pdf\"))\r\n  .setPdfVersion(PdfWriter.PDF_VERSION_1_7);\r\npdfDoc.open();\r\n```","```\r\nFont myfont = new Font();\r\nmyfont.setStyle(Font.NORMAL);\r\nmyfont.setSize(11);\r\npdfDoc.add(new Paragraph(\"\\n\"));\r\n```","```\r\nBufferedReader br = new BufferedReader(new FileReader(filename));\r\nString strLine;\r\nwhile ((strLine = br.readLine()) != null) {\r\n    Paragraph para = new Paragraph(strLine + \"\\n\", myfont);\r\n    para.setAlignment(Element.ALIGN_JUSTIFIED);\r\n    pdfDoc.add(para);\r\n}\t\r\npdfDoc.close();\r\nbr.close();\r\n```","```\r\nXWPFDocument doc = new XWPFDocument();\r\nString pdf = filename;\r\nPdfReader reader = new PdfReader(pdf);\r\nPdfReaderContentParser parser = new PdfReaderContentParser(reader); \r\n```","```\r\nfor (int i = 1; i <= reader.getNumberOfPages(); i++) {\r\n    TextExtractionStrategy strategy =\r\n      parser.processContent(i, new SimpleTextExtractionStrategy());\r\n    String text = strategy.getResultantText();\r\n    XWPFParagraph p = doc.createParagraph();\r\n    XWPFRun run = p.createRun();\r\n    run.setText(text);\r\n    run.addBreak(BreakType.PAGE);\r\n}\r\nFileOutputStream out = new FileOutputStream(\"src/output/pdf.docx\");\r\ndoc.write(out);\r\n// Close all open files\r\n```"]