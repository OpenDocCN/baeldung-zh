["```\r\n@WebServlet(\"/hello\")\r\npublic class HelloServlet extends HttpServlet {\r\n\r\n    @Override\r\n    public void doGet(HttpServletRequest request, HttpServletResponse response) {\r\n        try {\r\n            response\r\n              .getOutputStream()\r\n              .write(\"hello\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\n@WebFilter(\"/hello\")\r\npublic class HelloFilter implements Filter {\r\n\r\n    //...\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) \r\n      throws IOException, ServletException {\r\n        servletResponse\r\n          .getOutputStream()\r\n          .print(\"filtering \");\r\n        filterChain.doFilter(servletRequest, servletResponse);\r\n    }\r\n    //...\r\n\r\n}\r\n```","```\r\n@WebListener\r\npublic class AttrListener implements ServletContextListener {\r\n\r\n    @Override\r\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\r\n        servletContextEvent\r\n          .getServletContext()\r\n          .setAttribute(\"servlet-context-attr\", \"test\");\r\n    }\r\n    //...\r\n}\r\n```","```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.4.0</version>\r\n    <relativePath /> <!-- lookup parent from repository -->\r\n</parent>\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n        <version>2.4.0</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@ServletComponentScan\r\n@SpringBootApplication\r\npublic class SpringBootAnnotatedApp {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootAnnotatedApp.class, args);\r\n    }\r\n\r\n}\r\n```","```\r\n@Autowired private TestRestTemplate restTemplate;\r\n\r\n@Test\r\npublic void givenServletFilter_whenGetHello_thenRequestFiltered() {\r\n\r\n    ResponseEntity<String> responseEntity = \r\n      restTemplate.getForEntity(\"/hello\", String.class);\r\n\r\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\r\n    assertEquals(\"filtering hello\", responseEntity.getBody());\r\n}\r\n```","```\r\n@Autowired private ServletContext servletContext;\r\n\r\n@Test\r\npublic void givenServletContext_whenAccessAttrs_thenFoundAttrsPutInServletListner() {\r\n\r\n    assertNotNull(servletContext);\r\n    assertNotNull(servletContext.getAttribute(\"servlet-context-attr\"));\r\n    assertEquals(\"test\", servletContext.getAttribute(\"servlet-context-attr\"));\r\n}\r\n```","```\r\n@ServletComponentScan\r\n```","```\r\n@ServletComponentScan(\"com.baeldung.annotation.components\")\r\n```","```\r\n@ServletComponentScan(basePackages = \"com.baeldung.annotation.components\")\r\n```","```\r\n@ServletComponentScan(\r\n  basePackageClasses = \r\n    {AttrListener.class, HelloFilter.class, HelloServlet.class})\r\n```","```\r\nclass ServletComponentRegisteringPostProcessor\r\n  implements BeanFactoryPostProcessor, ApplicationContextAware {\r\n\r\n    private static final List<ServletComponentHandler> HANDLERS;\r\n\r\n    static {\r\n        List<ServletComponentHandler> handlers = new ArrayList<>();\r\n        handlers.add(new WebServletHandler());\r\n        handlers.add(new WebFilterHandler());\r\n        handlers.add(new WebListenerHandler());\r\n        HANDLERS = Collections.unmodifiableList(handlers);\r\n    }\r\n\r\n    //...\r\n\r\n    private void scanPackage(\r\n      ClassPathScanningCandidateComponentProvider componentProvider, \r\n      String packageToScan){\r\n        //...\r\n        for (ServletComponentHandler handler : HANDLERS) {\r\n            handler.handle(((ScannedGenericBeanDefinition) candidate),\r\n              (BeanDefinitionRegistry) this.applicationContext);\r\n        }\r\n    }\r\n}\r\n```"]