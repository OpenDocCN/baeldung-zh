["```\r\n{\r\n    \"type\": \"donut\",\r\n    \"batters\":\r\n    {\r\n        “batter”:\r\n        [\r\n            { \"id\": \"1001\", \"type\": \"Regular\" },\r\n            { \"id\": \"1002\", \"type\": \"Chocolate\" },\r\n            { \"id\": \"1003\", \"type\": \"Blueberry\" },\r\n            { \"id\": \"1004\", \"type\": \"Devil's Food\" }\r\n        ]\r\n    }\r\n} \r\n```","```\r\npublic Map<Integer, String> buildInnerMap(List<String> batterList) {\r\n     Map<Integer, String> innerBatterMap = new HashMap<Integer, String>();\r\n     int index = 1;\r\n     for (String item : batterList) {\r\n         innerBatterMap.put(index, item);\r\n         index++;\r\n     }\r\n     return innerBatterMap;\r\n} \r\n```","```\r\nassertThat(mUtil.buildInnerMap(batterList), is(notNullValue()));\r\nAssert.assertEquals(actualBakedGoodsMap.keySet().size(), 2);\r\nAssert.assertThat(actualBakedGoodsMap, IsMapContaining.hasValue(equalTo(mUtil.buildInnerMap(batterList))));\r\n```","```\r\nMap<Integer, Map<String, String>> employeeAddressMap = listEmployee.stream()\r\n  .collect(Collectors.groupingBy(e -> e.getAddress().getAddressId(),\r\n    Collectors.toMap(f -> f.getAddress().getAddressLocation(), Employee::getEmployeeName)));\r\nreturn employeeAddressMap;\r\n```","```\r\nMap<Integer, Map<Integer, Address>> employeeMap = new HashMap<>();\r\nemployeeMap = listEmployee.stream().collect(Collectors.groupingBy((Employee emp) -> emp.getEmployeeId(),\r\n  Collectors.toMap((Employee emp) -> emp.getAddress().getAddressId(), fEmpObj -> fEmpObj.getAddress())));\r\nreturn employeeMap;\r\n```","```\r\nfor (Map.Entry<String, Map<Integer, String>> outerBakedGoodsMapEntrySet : outerBakedGoodsMap.entrySet()) {\r\n    Map<Integer, String> valueMap = outerBakedGoodsMapEntrySet.getValue();\r\n    System.out.println(valueMap.entrySet());\r\n}\r\n\r\nfor (Map.Entry<Integer, Map<String, String>> employeeEntrySet : employeeAddressMap.entrySet()) {\r\n    Map<String, String> valueMap = employeeEntrySet.getValue();\r\n    System.out.println(valueMap.entrySet());\r\n}\r\n```","```\r\nassertNotEquals(outerBakedGoodsMap2, actualBakedGoodsMap);\r\n\r\nouterBakedGoodsMap3.put(\"Donut\", mUtil.buildInnerMap(batterList));\r\nassertNotEquals(outerBakedGoodsMap2, actualBakedGoodsMap);\r\n\r\nMap<Integer, Map<String, String>> employeeAddressMap1 = mUtil.createNestedMapfromStream(listEmployee);\r\nassertNotEquals(employeeAddressMap1, actualEmployeeAddressMap);\r\n```","```\r\n//Comparing a Map<Integer, Map<String, String>> and Map<Integer, Map<Integer, Address>> map\r\nassertNotSame(employeeMap1, actualEmployeeMap);\r\nassertNotEquals(employeeMap1, actualEmployeeMap);\r\nMap<Integer, Map<Integer, Address>> expectedMap = setupAddressObjectMap();\r\nassertNotSame(expectedMap, actualEmployeeMap);\r\nassertNotEquals(expectedMap, actualEmployeeMap);\r\n```","```\r\nMap<String, Map<Integer, String>> outerBakedGoodsMap4 = new HashMap<>();\r\nouterBakedGoodsMap4.putAll(actualBakedGoodsMap);\r\nassertEquals(actualBakedGoodsMap, outerBakedGoodsMap4);\r\nMap<Integer, Map<Integer, Address>> employeeMap1 = new HashMap<>();\r\nemployeeMap1.putAll(actualEmployeeMap);\r\nassertEquals(actualEmployeeMap, employeeMap1);\r\n```","```\r\nassertEquals(actualBakedGoodsMap.get(\"Cake\").size(), 5);\r\nactualBakedGoodsMap.get(\"Cake\").put(6, \"Cranberry\");\r\nassertEquals(actualBakedGoodsMap.get(\"Cake\").size(), 6);\r\n```","```\r\nouterBakedGoodsMap.put(\"Eclair\", new HashMap<Integer, String>() {\r\n    {\r\n        put(1, \"Dark Chocolate\");\r\n    }\r\n});\r\n```","```\r\nassertNotEquals(actualBakedGoodsMap.get(\"Cake\").get(5), null);\r\nactualBakedGoodsMap.get(\"Cake\").remove(5);\r\nassertEquals(actualBakedGoodsMap.get(\"Cake\").get(5), null);\r\n```","```\r\nassertNotEquals(actualBakedGoodsMap.get(\"Eclair\").get(1), null);\r\nactualBakedGoodsMap.get(\"Eclair\").remove(1);\r\nassertEquals(actualBakedGoodsMap.get(\"Eclair\").get(1), null);\r\nactualBakedGoodsMap.put(\"Eclair\", new HashMap<Integer, String>() {\r\n    {\r\n        put(1, \"Dark Chocolate\");\r\n    }\r\n});\r\n```","```\r\nassertNotEquals(actualBakedGoodsMap.get(\"Eclair\"), null);\r\nactualBakedGoodsMap.remove(\"Eclair\");\r\nassertEquals(actualBakedGoodsMap.get(\"Eclair\"), null);\r\n```","```\r\nvar flattenedBakedGoodsMap = mUtil.flattenMap(actualBakedGoodsMap);\r\nassertThat(flattenedBakedGoodsMap, IsMapContaining.hasKey(\"Donut.2\"));\r\nvar flattenedEmployeeAddressMap = mUtil.flattenMap(actualEmployeeAddressMap);\r\nassertThat(flattenedEmployeeAddressMap, IsMapContaining.hasKey(\"200.Bag End\"));\r\n```"]