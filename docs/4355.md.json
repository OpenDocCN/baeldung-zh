["```\r\npublic class Member {\r\n    private String name;\r\n    private int age;\r\n\r\n    // constructors and getters\r\n}\r\n```","```\r\nCondition<Member> senior = new Condition<>(\r\n  m -> m.getAge() >= 60, \"senior\");\r\n```","```\r\nCondition<Member> nameJohn = new Condition<>(\r\n  m -> m.getName().equalsIgnoreCase(\"John\"), \r\n  \"name John\"\r\n);\r\n```","```\r\nMember member = new Member(\"John\", 65);\r\nassertThat(member).is(senior);\r\n```","```\r\n// assertion fails with an error message containing \"not to be <senior>\"\r\nassertThat(member).isNot(senior);\r\n```","```\r\nMember member = new Member(\"Jane\", 60);\r\nassertThat(member).doesNotHave(nameJohn);\r\n\r\n// assertion fails with an error message containing \"to have:\\n <name John>\"\r\nassertThat(member).has(nameJohn);\r\n```","```\r\nList<Member> members = new ArrayList<>();\r\nmembers.add(new Member(\"Alice\", 50));\r\nmembers.add(new Member(\"Bob\", 60));\r\n\r\nassertThat(members).haveExactly(1, senior);\r\nassertThat(members).doNotHave(nameJohn);\r\n```","```\r\nMember john = new Member(\"John\", 60);\r\nMember jane = new Member(\"Jane\", 50);\r\n\r\nassertThat(john).is(allOf(senior, nameJohn));\r\nassertThat(jane).is(allOf(not(nameJohn), not(senior)));\r\n```","```\r\nMember john = new Member(\"John\", 50);\r\nMember jane = new Member(\"Jane\", 60);\r\n\r\nassertThat(john).is(anyOf(senior, nameJohn));\r\nassertThat(jane).is(anyOf(nameJohn, senior));\r\n```"]