["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.4.0</version>\r\n    <scope>runtime</scope>\r\n</dependency> \r\n```","```\r\n    java -cp ../lib/hsqldb.jar org.hsqldb.server.Server --database.0 file.testdb --dbname0.testdb\r\n    ```","```\r\nCREATE TABLE customers (\r\n   id INT  NOT NULL,\r\n   name VARCHAR (45),\r\n   email VARCHAR (45),      \r\n   PRIMARY KEY (ID)\r\n); \r\n```","```\r\nspring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver \r\nspring.datasource.url=jdbc:hsqldb:hsql://localhost/testdb \r\nspring.datasource.username=sa \r\nspring.datasource.password= \r\nspring.jpa.hibernate.ddl-auto=update \r\n```","```\r\nspring.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver\r\nspring.datasource.url=jdbc:hsqldb:mem:testdb;DB_CLOSE_DELAY=-1\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nspring.jpa.hibernate.ddl-auto=create \r\n```","```\r\n@Entity\r\n@Table(name = \"customers\")\r\npublic class Customer {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n\r\n    private String name;\r\n\r\n    private String email;\r\n\r\n    // standard constructors / setters / getters / toString\r\n} \r\n```","```\r\n@Repository\r\npublic interface CustomerRepository extends CrudRepository<Customer, Long> {}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class CustomerRepositoryTest {\r\n\r\n    @Autowired\r\n    private CustomerRepository customerRepository;\r\n\r\n    @Test\r\n    public void whenFindingCustomerById_thenCorrect() {\r\n        customerRepository.save(new Customer(\"John\", \"[[email protected]](/web/20220909204051/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n        assertThat(customerRepository.findById(1L)).isInstanceOf(Optional.class);\r\n    }\r\n\r\n    @Test\r\n    public void whenFindingAllCustomers_thenCorrect() {\r\n        customerRepository.save(new Customer(\"John\", \"[[email protected]](/web/20220909204051/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n        customerRepository.save(new Customer(\"Julie\", \"[[email protected]](/web/20220909204051/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n        assertThat(customerRepository.findAll()).isInstanceOf(List.class);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenSavingCustomer_thenCorrect() {\r\n    customerRepository.save(new Customer(\"Bob\", \"[[email protected]](/web/20220909204051/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n    Customer customer = customerRepository.findById(1L).orElseGet(() \r\n      -> new Customer(\"john\", \"[[email protected]](/web/20220909204051/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n    assertThat(customer.getName()).isEqualTo(\"Bob\");\r\n}\r\n```"]