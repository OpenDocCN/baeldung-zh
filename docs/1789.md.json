["```\r\nMap<String, Integer> map = new HashMap<>();\r\nmap.put(\"first\", 1);\r\nmap.put(\"second\", 2); \r\n```","```\r\n{first=1, second=2}\r\n```","```\r\n{1=first, 2=second} \r\n```","```\r\npublic static <V, K> Map<V, K> invertMapUsingForLoop(Map<K, V> map) {\r\n    Map<V, K> inversedMap = new HashMap<V, K>();\r\n    for (Entry<K, V> entry : map.entrySet()) {\r\n        inversedMap.put(entry.getValue(), entry.getKey());\r\n    }\r\n    return inversedMap;\r\n}\r\n```","```\r\npublic static <V, K> Map<V, K> invertMapUsingStreams(Map<K, V> map) {\r\n    Map<V, K> inversedMap = map.entrySet()\r\n        .stream()\r\n        .collect(Collectors.toMap(Entry::getValue, Entry::getKey));\r\n    return inversedMap;\r\n}\r\n```","```\r\npublic static <K, V> Map<V, K> invertMapUsingMapper(Map<K, V> sourceMap) {\r\n    return sourceMap.entrySet()\r\n        .stream().collect(\r\n            Collectors.toMap(Entry::getValue, Entry::getKey, (oldValue, newValue) -> oldValue) \r\n        );\r\n}\r\n```","```\r\n{first=1, second=2, two=2}\r\n```","```\r\nprivate static <V, K> Map<V, List<K>> invertMapUsingGroupingBy(Map<K, V> map) {\r\n    Map<V, List<K>> inversedMap = map.entrySet()\r\n        .stream()\r\n        .collect(Collectors.groupingBy(Map.Entry::getValue, Collectors.mapping(Map.Entry::getKey, Collectors.toList())));\r\n    return inversedMap;\r\n}\r\n```","```\r\n{1=[first], 2=[two, second]}\r\n```"]