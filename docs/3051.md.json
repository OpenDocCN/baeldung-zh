["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-rsocket</artifactId>\r\n</dependency>\r\n```","```\r\nspring.rsocket.server.port=7000\r\n```","```\r\n@Configuration\r\npublic class ClientConfiguration {\r\n\r\n    @Bean\r\n    public RSocketRequester getRSocketRequester(){\r\n        RSocketRequester.Builder builder = RSocketRequester.builder();\r\n\r\n        return builder\r\n          .rsocketConnector(\r\n             rSocketConnector ->\r\n               rSocketConnector.reconnect(Retry.fixedDelay(2, Duration.ofSeconds(2)))\r\n          )\r\n          .dataMimeType(MimeTypeUtils.APPLICATION_JSON)\r\n          .tcp(\"localhost\", 7000);\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class MarketDataRSocketController {\r\n\r\n    private final MarketDataRepository marketDataRepository;\r\n\r\n    public MarketDataRSocketController(MarketDataRepository marketDataRepository) {\r\n        this.marketDataRepository = marketDataRepository;\r\n    }\r\n\r\n    @MessageMapping(\"currentMarketData\")\r\n    public Mono<MarketData> currentMarketData(MarketDataRequest marketDataRequest) {\r\n        return marketDataRepository.getOne(marketDataRequest.getStock());\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class MarketDataRestController {\r\n\r\n    private final RSocketRequester rSocketRequester;\r\n\r\n    public MarketDataRestController(RSocketRequester rSocketRequester) {\r\n        this.rSocketRequester = rSocketRequester;\r\n    }\r\n\r\n    @GetMapping(value = \"/current/{stock}\")\r\n    public Publisher<MarketData> current(@PathVariable(\"stock\") String stock) {\r\n        return rSocketRequester\r\n          .route(\"currentMarketData\")\r\n          .data(new MarketDataRequest(stock))\r\n          .retrieveMono(MarketData.class);\r\n    }\r\n}\r\n```","```\r\n@MessageMapping(\"collectMarketData\")\r\npublic Mono<Void> collectMarketData(MarketData marketData) {\r\n    marketDataRepository.add(marketData);\r\n    return Mono.empty();\r\n}\r\n```","```\r\n@GetMapping(value = \"/collect\")\r\npublic Publisher<Void> collect() {\r\n    return rSocketRequester\r\n      .route(\"collectMarketData\")\r\n      .data(getMarketData())\r\n      .send();\r\n}\r\n```","```\r\n@MessageMapping(\"feedMarketData\")\r\npublic Flux<MarketData> feedMarketData(MarketDataRequest marketDataRequest) {\r\n    return marketDataRepository.getAll(marketDataRequest.getStock());\r\n}\r\n```","```\r\n@GetMapping(value = \"/feed/{stock}\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\r\npublic Publisher<MarketData> feed(@PathVariable(\"stock\") String stock) {\r\n    return rSocketRequester\r\n      .route(\"feedMarketData\")\r\n      .data(new MarketDataRequest(stock))\r\n      .retrieveFlux(MarketData.class);\r\n}\r\n```","```\r\n@MessageExceptionHandler\r\npublic Mono<MarketData> handleException(Exception e) {\r\n    return Mono.just(MarketData.fromException(e));\r\n}\r\n```"]