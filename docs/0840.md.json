["```\r\nString pattern = \"myCustomPattern\";\r\nPathMatcher matcher = FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\r\n```","```\r\nclass SearchFileByWildcard {\r\n    static List<String> matchesList = new ArrayList<String>();\r\n    List<String> searchWithWc(Path rootDir, String pattern) throws IOException {\r\n        matchesList.clear();\r\n        FileVisitor<Path> matcherVisitor = new SimpleFileVisitor<Path>() {\r\n            @Override\r\n            public FileVisitResult visitFile(Path file, BasicFileAttributes attribs) throws IOException {\r\n                FileSystem fs = FileSystems.getDefault();\r\n                PathMatcher matcher = fs.getPathMatcher(pattern);\r\n                Path name = file.getFileName();\r\n                if (matcher.matches(name)) {\r\n                    matchesList.add(name.toString);\r\n                }\r\n\t        return FileVisitResult.CONTINUE;\r\n            }\r\n        };\r\n        Files.walkFileTree(rootDir, matcherVisitor);\r\n        return matchesList;\r\n    }\r\n}\r\n```","```\r\nSearchFileByWildcard sfbw = new SearchFileByWildcard();\r\nList<String> actual = sfbw.searchWithWc(Paths.get(\"src/test/resources/sfbw\"), \"glob:*.{txt,docx}\");\r\n\r\nassertEquals(new HashSet<>(Arrays.asList(\"six.txt\", \"three.txt\", \"two.docx\", \"one.txt\")), \r\n  new HashSet<>(actual)); \r\n```","```\r\nSearchFileByWildcard sfbw = new SearchFileByWildcard();\r\nList<String> actual = sfbw.searchWithWc(Paths.get(\"src/test/resources/sfbw\"), \"glob:????.{csv}\");\r\n\r\nassertEquals(new HashSet<>(Arrays.asList(\"five.csv\")), new HashSet<>(actual)); \r\n```"]