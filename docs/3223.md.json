["```\r\npublic class DatagramChannelBuilder {\r\n    public static DatagramChannel openChannel() throws IOException {\r\n        DatagramChannel datagramChannel = DatagramChannel.open();\r\n        return datagramChannel;\r\n    }\r\n}\r\n```","```\r\npublic static DatagramChannel bindChannel(SocketAddress local) throws IOException {\r\n    return openChannel().bind(local); \r\n}\r\n```","```\r\npublic class DatagramClient {\r\n    public static DatagramChannel startClient() throws IOException {\r\n        DatagramChannel client = DatagramChannelBuilder.bindChannel(null);\r\n        return client;\r\n    }\r\n}\r\n```","```\r\npublic static void sendMessage(DatagramChannel client, String msg, SocketAddress serverAddress) throws IOException {\r\n    ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());\r\n    client.send(buffer, serverAddress);\r\n} \r\n```","```\r\nDatagramChannel client = startClient();\r\nString msg = \"Hello, this is a Baeldung's DatagramChannel based UDP client!\";\r\nInetSocketAddress serverAddress = new InetSocketAddress(\"localhost\", 7001);\r\n\r\nsendMessage(client, msg, serverAddress);\r\n```","```\r\npublic class DatagramServer {\r\n    public static DatagramChannel startServer() throws IOException {\r\n        InetSocketAddress address = new InetSocketAddress(\"localhost\", 7001);\r\n        DatagramChannel server = DatagramChannelBuilder.bindChannel(address);\r\n        System.out.println(\"Server started at #\" + address);\r\n        return server;\r\n    }\r\n}\r\n```","```\r\npublic static void receiveMessage(DatagramChannel server) throws IOException {\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n    SocketAddress remoteAdd = server.receive(buffer);\r\n    String message = extractMessage(buffer);\r\n    System.out.println(\"Client at #\" + remoteAdd + \"  sent: \" + message);\r\n}\r\n```","```\r\nprivate static String extractMessage(ByteBuffer buffer) {\r\n    buffer.flip();\r\n    byte[] bytes = new byte[buffer.remaining()];\r\n    buffer.get(bytes);\r\n    String msg = new String(bytes);\r\n\r\n    return msg;\r\n} \r\n```","```\r\nDatagramChannel server = startServer();\r\nreceiveMessage(server);\r\n```","```\r\nServer started at #localhost/127.0.0.1:7001\r\nClient at #/127.0.0.1:52580  sent: Hello, this is a Baeldung's DatagramChannel based UDP client!\r\n```","```\r\n@Test\r\npublic void whenClientSendsAndServerReceivesUDPPacket_thenCorrect() throws IOException {\r\n    DatagramChannel server = DatagramServer.startServer();\r\n    DatagramChannel client = DatagramClient.startClient();\r\n    String msg1 = \"Hello, this is a Baeldung's DatagramChannel based UDP client!\";\r\n    String msg2 = \"Hi again!, Are you there!\";\r\n    InetSocketAddress serverAddress = new InetSocketAddress(\"localhost\", 7001);\r\n\r\n    DatagramClient.sendMessage(client, msg1, serverAddress);\r\n    DatagramClient.sendMessage(client, msg2, serverAddress);\r\n\r\n    assertEquals(\"Hello, this is a Baeldung's DatagramChannel based UDP client!\", DatagramServer.receiveMessage(server));\r\n    assertEquals(\"Hi again!, Are you there!\", DatagramServer.receiveMessage(server));\r\n}\r\n```","```\r\nclient.configureBlocking(false);\r\n```"]