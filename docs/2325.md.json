["```\r\npublic class SummationServiceTest {\r\n\r\n    private static List<Integer> numbers;\r\n\r\n    @BeforeAll\r\n    public static void initialize() {\r\n        numbers = new ArrayList<>();\r\n    }\r\n\r\n    @AfterAll\r\n    public static void tearDown() {\r\n        numbers = null;\r\n    }\r\n\r\n    @BeforeEach\r\n    public void runBeforeEachTest() {\r\n        numbers.add(1);\r\n        numbers.add(2);\r\n        numbers.add(3);\r\n    }\r\n\r\n    @AfterEach\r\n    public void runAfterEachTest() {\r\n        numbers.clear();\r\n    }\r\n\r\n    @Test\r\n    public void givenNumbers_sumEquals_thenCorrect() {\r\n        int sum = numbers.stream().reduce(0, Integer::sum);\r\n        assertEquals(6, sum);\r\n    }\r\n}\r\n```","```\r\n@BeforeClass\r\npublic void initialize() {\r\n    numbers = new ArrayList<>();\r\n}\r\n\r\n@AfterClass\r\npublic void tearDown() {\r\n    numbers = null;\r\n}\r\n\r\n@BeforeMethod\r\npublic void runBeforeEachTest() {\r\n    numbers.add(1);\r\n    numbers.add(2);\r\n    numbers.add(3);\r\n}\r\n\r\n@AfterMethod\r\npublic void runAfterEachTest() {\r\n    numbers.clear();\r\n}\r\n```","```\r\n@BeforeGroups(\"positive_tests\")\r\npublic void runBeforeEachGroup() {\r\n    numbers.add(1);\r\n    numbers.add(2);\r\n    numbers.add(3);\r\n}\r\n\r\n@AfterGroups(\"negative_tests\")\r\npublic void runAfterEachGroup() {\r\n    numbers.clear(); \r\n}\r\n```","```\r\n<test name=\"test setup\">\r\n    <classes>\r\n        <class name=\"SummationServiceTest\">\r\n            <methods>\r\n                <include name=\"givenNumbers_sumEquals_thenCorrect\" />\r\n            </methods>\r\n        </class>\r\n    </classes>\r\n</test>\r\n```","```\r\n@Ignore\r\n@Test\r\npublic void givenNumbers_sumEquals_thenCorrect() {\r\n    int sum = numbers.stream().reduce(0, Integer::sum);\r\n    Assert.assertEquals(6, sum);\r\n}\r\n```","```\r\n@Test(enabled=false)\r\npublic void givenNumbers_sumEquals_thenCorrect() {\r\n    int sum = numbers.stream.reduce(0, Integer::sum);\r\n    Assert.assertEquals(6, sum);\r\n}\r\n```","```\r\n@Suite\r\n@SelectPackages({ \"org.baeldung.java.suite.childpackage1\", \"org.baeldung.java.suite.childpackage2\" })\r\npublic class SelectPackagesSuiteUnitTest {\r\n\r\n}\r\n```","```\r\n@Suite\r\n@SelectClasses({Class1UnitTest.class, Class2UnitTest.class})\r\npublic class SelectClassesSuiteUnitTest {\r\n\r\n}\r\n```","```\r\n@RunWith(Suite.class)\r\n@Suite.SuiteClasses({ RegistrationTest.class, SignInTest.class })\r\npublic class SuiteTest {\r\n\r\n}\r\n```","```\r\n<suite name=\"suite\">\r\n    <test name=\"test suite\">\r\n        <classes>\r\n            <class name=\"com.baeldung.RegistrationTest\" />\r\n            <class name=\"com.baeldung.SignInTest\" />\r\n        </classes>\r\n    </test>\r\n</suite>\r\n```","```\r\n@Test(groups = \"regression\")\r\npublic void givenNegativeNumber_sumLessthanZero_thenCorrect() {\r\n    int sum = numbers.stream().reduce(0, Integer::sum);\r\n    Assert.assertTrue(sum < 0);\r\n}\r\n```","```\r\n<test name=\"test groups\">\r\n    <groups>\r\n        <run>\r\n            <include name=\"regression\" />\r\n        </run>\r\n    </groups>\r\n    <classes>\r\n        <class \r\n          name=\"com.baeldung.SummationServiceTest\" />\r\n    </classes>\r\n</test>\r\n```","```\r\npublic class Calculator {\r\n    public double divide(double a, double b) {\r\n        if (b == 0) {\r\n            throw new DivideByZeroException(\"Divider cannot be equal to zero!\");\r\n        }\r\n        return a/b;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDividerIsZero_thenDivideByZeroExceptionIsThrown() {\r\n    Calculator calculator = new Calculator();\r\n    assertThrows(DivideByZeroException.class, () -> calculator.divide(10, 0));\r\n}\r\n```","```\r\n@Test(expectedExceptions = ArithmeticException.class) \r\npublic void givenNumber_whenThrowsException_thenCorrect() { \r\n    int i = 1 / 0;\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@ValueSource(strings = { \"Hello\", \"World\" })\r\nvoid givenString_TestNullOrNot(String word) {\r\n    assertNotNull(word);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EnumSource(value = PizzaDeliveryStrategy.class, names = {\"EXPRESS\", \"NORMAL\"})\r\nvoid givenEnum_TestContainsOrNot(PizzaDeliveryStrategy timeUnit) {\r\n    assertTrue(EnumSet.of(PizzaDeliveryStrategy.EXPRESS, PizzaDeliveryStrategy.NORMAL).contains(timeUnit));\r\n}\r\n```","```\r\nstatic Stream<String> wordDataProvider() {\r\n    return Stream.of(\"foo\", \"bar\");\r\n}\r\n\r\n@ParameterizedTest\r\n@MethodSource(\"wordDataProvider\")\r\nvoid givenMethodSource_TestInputStream(String argument) {\r\n    assertNotNull(argument);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({ \"1, Car\", \"2, House\", \"3, Train\" })\r\nvoid givenCSVSource_TestContent(int id, String word) {\r\n\tassertNotNull(id);\r\n\tassertNotNull(word);\r\n}\r\n```","```\r\n@Test\r\n@Parameters({\"value\", \"isEven\"})\r\npublic void \r\n  givenNumberFromXML_ifEvenCheckOK_thenCorrect(int value, boolean isEven) {\r\n    Assert.assertEquals(isEven, value % 2 == 0);\r\n}\r\n```","```\r\n<suite name=\"My test suite\">\r\n    <test name=\"numbersXML\">\r\n        <parameter name=\"value\" value=\"1\"/>\r\n        <parameter name=\"isEven\" value=\"false\"/>\r\n        <classes>\r\n            <class name=\"baeldung.com.ParametrizedTests\"/>\r\n        </classes>\r\n    </test>\r\n</suite>\r\n```","```\r\n@DataProvider(name = \"numbers\")\r\npublic static Object[][] evenNumbers() {\r\n    return new Object[][]{{1, false}, {2, true}, {4, true}};\r\n}\r\n\r\n@Test(dataProvider = \"numbers\")\r\npublic void givenNumberFromDataProvider_ifEvenCheckOK_thenCorrect\r\n  (Integer number, boolean expected) {\r\n    Assert.assertEquals(expected, number % 2 == 0);\r\n}\r\n```","```\r\n@Test(dataProvider = \"numbersObject\")\r\npublic void givenNumberObjectFromDataProvider_ifEvenCheckOK_thenCorrect\r\n  (EvenNumber number) {\r\n    Assert.assertEquals(number.isEven(), number.getValue() % 2 == 0);\r\n}\r\n\r\n@DataProvider(name = \"numbersObject\")\r\npublic Object[][] parameterProvider() {\r\n    return new Object[][]{{new EvenNumber(1, false)},\r\n      {new EvenNumber(2, true)}, {new EvenNumber(4, true)}};\r\n}\r\n```","```\r\n@Test\r\npublic void givenExecution_takeMoreTime_thenFail() throws InterruptedException {\r\n    Assertions.assertTimeout(Duration.ofMillis(1000), () -> Thread.sleep(10000));\r\n}\r\n```","```\r\n@Test(timeOut = 1000)\r\npublic void givenExecution_takeMoreTime_thenFail() {\r\n    while (true);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmail_ifValid_thenTrue() {\r\n    boolean valid = email.contains(\"@\");\r\n    Assert.assertEquals(valid, true);\r\n}\r\n\r\n@Test(dependsOnMethods = {\"givenEmail_ifValid_thenTrue\"})\r\npublic void givenValidEmail_whenLoggedIn_thenTrue() {\r\n    LOGGER.info(\"Email {} valid >> logging in\", email);\r\n}\r\n```","```\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\npublic class SortedTests {\r\n\r\n    @Test\r\n    public void a_givenString_whenChangedtoInt_thenTrue() {\r\n        assertTrue(\r\n          Integer.valueOf(\"10\") instanceof Integer);\r\n    }\r\n\r\n    @Test\r\n    public void b_givenInt_whenChangedtoString_thenTrue() {\r\n        assertTrue(\r\n          String.valueOf(10) instanceof String);\r\n    }\r\n\r\n}\r\n```","```\r\n@Test(priority = 1)\r\npublic void givenString_whenChangedToInt_thenCorrect() {\r\n    Assert.assertTrue(\r\n      Integer.valueOf(\"10\") instanceof Integer);\r\n}\r\n\r\n@Test(priority = 2)\r\npublic void givenInt_whenChangedToString_thenCorrect() {\r\n    Assert.assertTrue(\r\n      String.valueOf(23) instanceof String);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@ValueSource(strings = { \"Hello\", \"World\" })\r\n@DisplayName(\"Test Method to check that the inputs are not nullable\")\r\nvoid givenString_TestNullOrNot(String word) {\r\n    assertNotNull(word);\r\n}\r\n```"]