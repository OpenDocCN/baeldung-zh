["```\r\n@TestMethodOrder(MethodOrderer.MethodName.class)\r\npublic class AlphanumericOrderUnitTest {\r\n    private static StringBuilder output = new StringBuilder(\"\");\r\n\r\n    @Test\r\n    void myATest() {\r\n        output.append(\"A\");\r\n    }\r\n\r\n    @Test\r\n    void myBTest() {\r\n        output.append(\"B\");        \r\n    }\r\n\r\n    @Test\r\n    void myaTest() {\r\n        output.append(\"a\");\r\n    }\r\n\r\n    @AfterAll\r\n    public static void assertOutput() {\r\n        assertEquals(\"ABa\", output.toString());\r\n    }\r\n}\r\n```","```\r\n@TestMethodOrder(OrderAnnotation.class)\r\npublic class OrderAnnotationUnitTest {\r\n    private static StringBuilder output = new StringBuilder(\"\");\r\n\r\n    @Test\r\n    @Order(1)    \r\n    void firstTest() {\r\n        output.append(\"a\");\r\n    }\r\n\r\n    @Test\r\n    @Order(2)    \r\n    void secondTest() {\r\n        output.append(\"b\");\r\n    }\r\n\r\n    @Test\r\n    @Order(3)    \r\n    void thirdTest() {\r\n        output.append(\"c\");\r\n    }\r\n\r\n    @AfterAll\r\n    public static void assertOutput() {\r\n        assertEquals(\"abc\", output.toString());\r\n    }\r\n}\r\n```","```\r\n@TestMethodOrder(MethodOrderer.Random.class)\r\npublic class RandomOrderUnitTest {\r\n\r\n    private static StringBuilder output = new StringBuilder(\"\");\r\n\r\n    @Test\r\n    void myATest() {\r\n        output.append(\"A\");\r\n    }\r\n\r\n    @Test\r\n    void myBTest() {\r\n        output.append(\"B\");\r\n    }\r\n\r\n    @Test\r\n    void myCTest() {\r\n        output.append(\"C\");\r\n    }\r\n\r\n    @AfterAll\r\n    public static void assertOutput() {\r\n        assertEquals(\"ACB\", output.toString());\r\n    }\r\n\r\n}\r\n```","```\r\njunit.jupiter.execution.order.random.seed=100\r\n```","```\r\npublic class CustomOrder implements MethodOrderer {\r\n    @Override\r\n    public void orderMethods(MethodOrdererContext context) {\r\n        context.getMethodDescriptors().sort(\r\n         (MethodDescriptor m1, MethodDescriptor m2)->\r\n           m1.getMethod().getName().compareToIgnoreCase(m2.getMethod().getName()));\r\n    }\r\n}\r\n```","```\r\n@TestMethodOrder(CustomOrder.class)\r\npublic class CustomOrderUnitTest {\r\n\r\n    // ...\r\n\r\n    @AfterAll\r\n    public static void assertOutput() {\r\n        assertEquals(\"AaB\", output.toString());\r\n    }\r\n}\r\n```","```\r\njunit.jupiter.testmethod.order.default = org.junit.jupiter.api.MethodOrderer$DisplayName\r\n```","```\r\n@FixMethodOrder(MethodSorters.DEFAULT)\r\npublic class DefaultOrderOfExecutionTest {\r\n    private static StringBuilder output = new StringBuilder(\"\");\r\n\r\n    @Test\r\n    public void secondTest() {\r\n        output.append(\"b\");\r\n    }\r\n\r\n    @Test\r\n    public void thirdTest() {\r\n        output.append(\"c\");\r\n    }\r\n\r\n    @Test\r\n    public void firstTest() {\r\n        output.append(\"a\");\r\n    }\r\n\r\n    @AfterClass\r\n    public static void assertOutput() {\r\n        assertEquals(output.toString(), \"cab\");\r\n    }\r\n}\r\n```","```\r\n@FixMethodOrder(MethodSorters.JVM)\r\npublic class JVMOrderOfExecutionTest {    \r\n    // same as above\r\n}\r\n```","```\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\npublic class NameAscendingOrderOfExecutionTest {\r\n    // same as above\r\n\r\n    @AfterClass\r\n    public static void assertOutput() {\r\n        assertEquals(output.toString(), \"abc\");\r\n    }\r\n}\r\n```"]