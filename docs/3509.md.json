["```\r\npublic CyclicBarrier(int parties)\r\n```","```\r\npublic CyclicBarrier(int parties, Runnable barrierAction)\r\n```","```\r\npublic class CyclicBarrierDemo {\r\n\r\n    private CyclicBarrier cyclicBarrier;\r\n    private List<List<Integer>> partialResults\r\n     = Collections.synchronizedList(new ArrayList<>());\r\n    private Random random = new Random();\r\n    private int NUM_PARTIAL_RESULTS;\r\n    private int NUM_WORKERS;\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class CyclicBarrierDemo {\r\n\r\n    // ...\r\n\r\n    class NumberCruncherThread implements Runnable {\r\n\r\n        @Override\r\n        public void run() {\r\n            String thisThreadName = Thread.currentThread().getName();\r\n            List<Integer> partialResult = new ArrayList<>();\r\n\r\n            // Crunch some numbers and store the partial result\r\n            for (int i = 0; i < NUM_PARTIAL_RESULTS; i++) {    \r\n                Integer num = random.nextInt(10);\r\n                System.out.println(thisThreadName\r\n                  + \": Crunching some numbers! Final result - \" + num);\r\n                partialResult.add(num);\r\n            }\r\n\r\n            partialResults.add(partialResult);\r\n            try {\r\n                System.out.println(thisThreadName \r\n                  + \" waiting for others to reach barrier.\");\r\n                cyclicBarrier.await();\r\n            } catch (InterruptedException e) {\r\n                // ...\r\n            } catch (BrokenBarrierException e) {\r\n                // ...\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\npublic class CyclicBarrierDemo {\r\n\r\n    // ...\r\n\r\n    class AggregatorThread implements Runnable {\r\n\r\n        @Override\r\n        public void run() {\r\n\r\n            String thisThreadName = Thread.currentThread().getName();\r\n\r\n            System.out.println(\r\n              thisThreadName + \": Computing sum of \" + NUM_WORKERS \r\n              + \" workers, having \" + NUM_PARTIAL_RESULTS + \" results each.\");\r\n            int sum = 0;\r\n\r\n            for (List<Integer> threadResult : partialResults) {\r\n                System.out.print(\"Adding \");\r\n                for (Integer partialResult : threadResult) {\r\n                    System.out.print(partialResult+\" \");\r\n                    sum += partialResult;\r\n                }\r\n                System.out.println();\r\n            }\r\n            System.out.println(thisThreadName + \": Final result = \" + sum);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class CyclicBarrierDemo {\r\n\r\n    // Previous code\r\n\r\n    public void runSimulation(int numWorkers, int numberOfPartialResults) {\r\n        NUM_PARTIAL_RESULTS = numberOfPartialResults;\r\n        NUM_WORKERS = numWorkers;\r\n\r\n        cyclicBarrier = new CyclicBarrier(NUM_WORKERS, new AggregatorThread());\r\n\r\n        System.out.println(\"Spawning \" + NUM_WORKERS\r\n          + \" worker threads to compute \"\r\n          + NUM_PARTIAL_RESULTS + \" partial results each\");\r\n\r\n        for (int i = 0; i < NUM_WORKERS; i++) {\r\n            Thread worker = new Thread(new NumberCruncherThread());\r\n            worker.setName(\"Thread \" + i);\r\n            worker.start();\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        CyclicBarrierDemo demo = new CyclicBarrierDemo();\r\n        demo.runSimulation(5, 3);\r\n    }\r\n} \r\n```","```\r\nSpawning 5 worker threads to compute 3 partial results each\r\nThread 0: Crunching some numbers! Final result - 6\r\nThread 0: Crunching some numbers! Final result - 2\r\nThread 0: Crunching some numbers! Final result - 2\r\nThread 0 waiting for others to reach barrier.\r\nThread 1: Crunching some numbers! Final result - 2\r\nThread 1: Crunching some numbers! Final result - 0\r\nThread 1: Crunching some numbers! Final result - 5\r\nThread 1 waiting for others to reach barrier.\r\nThread 3: Crunching some numbers! Final result - 6\r\nThread 3: Crunching some numbers! Final result - 4\r\nThread 3: Crunching some numbers! Final result - 0\r\nThread 3 waiting for others to reach barrier.\r\nThread 2: Crunching some numbers! Final result - 1\r\nThread 2: Crunching some numbers! Final result - 1\r\nThread 2: Crunching some numbers! Final result - 0\r\nThread 2 waiting for others to reach barrier.\r\nThread 4: Crunching some numbers! Final result - 9\r\nThread 4: Crunching some numbers! Final result - 3\r\nThread 4: Crunching some numbers! Final result - 5\r\nThread 4 waiting for others to reach barrier.\r\nThread 4: Computing final sum of 5 workers, having 3 results each.\r\nAdding 6 2 2 \r\nAdding 2 0 5 \r\nAdding 6 4 0 \r\nAdding 1 1 0 \r\nAdding 9 3 5 \r\nThread 4: Final result = 46 \r\n```"]