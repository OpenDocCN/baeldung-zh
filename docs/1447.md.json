["```\r\ngit clone https://github.com/apereo/cas-overlay-template.git cas-server\r\n```","```\r\ncompile \"org.apereo.cas:cas-server-support-json-service-registry:${casServerVersion}\"\r\ncompile \"org.apereo.cas:cas-server-support-jdbc:${casServerVersion}\"\r\n```","```\r\nserver.port=8443\r\nspring.main.allow-bean-definition-overriding=true\r\nserver.ssl.key-store=classpath:/etc/cas/thekeystore\r\nserver.ssl.key-store-password=changeit\r\n```","```\r\nkeytool -genkey -keyalg RSA -alias thekeystore -keystore thekeystore -storepass changeit -validity 360 -keysize 2048\r\n```","```\r\nkeytool -importkeystore -srckeystore thekeystore -destkeystore $JAVA11_HOME/jre/lib/security/cacerts\r\n```","```\r\n./gradlew run -Dorg.gradle.java.home=$JAVA11_HOME\r\n```","```\r\ncas.authn.accept.users=casuser::Mellon\r\n```","```\r\ntask run(group: \"build\", description: \"Run the CAS web application in embedded container mode\") {\r\n    dependsOn 'build'\r\n    doLast {\r\n        def casRunArgs = new ArrayList<>(Arrays.asList(\r\n          \"-server -noverify -Xmx2048M -XX:+TieredCompilation -XX:TieredStopAtLevel=1\".split(\" \")))\r\n        if (project.hasProperty('args')) {\r\n            casRunArgs.addAll(project.args.split('\\\\s+'))\r\n        }\r\n        javaexec {\r\n            main = \"-jar\"\r\n            jvmArgs = casRunArgs\r\n            args = [\"build/libs/${casWebApplicationBinaryName}\"]\r\n            logger.info \"Started ${commandLine}\"\r\n        }\r\n    }\r\n}\r\n```","```\r\n./gradlew run\r\n  -Dorg.gradle.java.home=$JAVA11_HOME\r\n  -Pargs=\"-Dcas.standalone.configurationDirectory=/cas-server/src/main/resources/etc/cas/config\"\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-cas</artifactId>\r\n    <versionId>5.3.0.RELEASE</versionId>\r\n</dependency>\r\n```","```\r\nserver.port=8900\r\nspring.freemarker.suffix=.ftl\r\n```","```\r\n{\r\n  \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\",\r\n  \"serviceId\" : \"http://localhost:8900/login/cas\",\r\n  \"name\" : \"casSecuredApp\",\r\n  \"id\" : 8900,\r\n  \"logoutType\" : \"BACK_CHANNEL\",\r\n  \"logoutUrl\" : \"http://localhost:8900/exit/cas\"\r\n}\r\n```","```\r\ncas.serviceRegistry.initFromJson=true\r\ncas.serviceRegistry.json.location=classpath:/etc/cas/services\r\n```","```\r\n@Bean\r\npublic CasAuthenticationFilter casAuthenticationFilter(\r\n  AuthenticationManager authenticationManager,\r\n  ServiceProperties serviceProperties) throws Exception {\r\n    CasAuthenticationFilter filter = new CasAuthenticationFilter();\r\n    filter.setAuthenticationManager(authenticationManager);\r\n    filter.setServiceProperties(serviceProperties);\r\n    return filter;\r\n}\r\n\r\n@Bean\r\npublic ServiceProperties serviceProperties() {\r\n    logger.info(\"service properties\");\r\n    ServiceProperties serviceProperties = new ServiceProperties();\r\n    serviceProperties.setService(\"http://cas-client:8900/login/cas\");\r\n    serviceProperties.setSendRenew(false);\r\n    return serviceProperties;\r\n}\r\n\r\n@Bean\r\npublic TicketValidator ticketValidator() {\r\n    return new Cas30ServiceTicketValidator(\"https://localhost:8443\");\r\n}\r\n\r\n@Bean\r\npublic CasAuthenticationProvider casAuthenticationProvider(\r\n  TicketValidator ticketValidator,\r\n  ServiceProperties serviceProperties) {\r\n    CasAuthenticationProvider provider = new CasAuthenticationProvider();\r\n    provider.setServiceProperties(serviceProperties);\r\n    provider.setTicketValidator(ticketValidator);\r\n    provider.setUserDetailsService(\r\n      s -> new User(\"[[email protected]](/web/20220707095557/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"Mellon\", true, true, true, true,\r\n      AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\")));\r\n    provider.setKey(\"CAS_PROVIDER_LOCALHOST_8900\");\r\n    return provider;\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.authorizeRequests().antMatchers( \"/secured\", \"/login\") \r\n      .authenticated() \r\n      .and().exceptionHandling() \r\n      .authenticationEntryPoint(authenticationEntryPoint());\r\n}\r\n```","```\r\n@GetMapping(\"/logout\")\r\npublic String logout(\r\n  HttpServletRequest request, \r\n  HttpServletResponse response, \r\n  SecurityContextLogoutHandler logoutHandler) {\r\n    Authentication auth = SecurityContextHolder\r\n      .getContext().getAuthentication();\r\n    logoutHandler.logout(request, response, auth );\r\n    new CookieClearingLogoutHandler(\r\n      AbstractRememberMeServices.SPRING_SECURITY_REMEMBER_ME_COOKIE_KEY)\r\n      .logout(request, response, auth);\r\n    return \"auth/logout\";\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityContextLogoutHandler securityContextLogoutHandler() {\r\n    return new SecurityContextLogoutHandler();\r\n}\r\n\r\n@Bean\r\npublic LogoutFilter logoutFilter() {\r\n    LogoutFilter logoutFilter = new LogoutFilter(\"https://localhost:8443/logout\",\r\n      securityContextLogoutHandler());\r\n    logoutFilter.setFilterProcessesUrl(\"/logout/cas\");\r\n    return logoutFilter;\r\n}\r\n\r\n@Bean\r\npublic SingleSignOutFilter singleSignOutFilter() {\r\n    SingleSignOutFilter singleSignOutFilter = new SingleSignOutFilter();\r\n    singleSignOutFilter.setCasServerUrlPrefix(\"https://localhost:8443\");\r\n    singleSignOutFilter.setLogoutCallbackPath(\"/exit/cas\");\r\n    singleSignOutFilter.setIgnoreInitConfiguration(true);\r\n    return singleSignOutFilter;\r\n}\r\n```","```\r\ncas.authn.accept.users=\r\n\r\ncas.authn.jdbc.query[0].sql=SELECT * FROM users WHERE email = ?\r\ncas.authn.jdbc.query[0].url=\r\n  jdbc:mysql://127.0.0.1:3306/test?\r\n  useUnicode=true&useJDBCCompliantTimezoneShift;=true&useLegacyDatetimeCode;=false&serverTimezone;=UTC\r\ncas.authn.jdbc.query[0].dialect=org.hibernate.dialect.MySQLDialect\r\ncas.authn.jdbc.query[0].user=root\r\ncas.authn.jdbc.query[0].password=root\r\ncas.authn.jdbc.query[0].ddlAuto=none\r\ncas.authn.jdbc.query[0].driverClass=com.mysql.cj.jdbc.Driver\r\ncas.authn.jdbc.query[0].fieldPassword=password\r\ncas.authn.jdbc.query[0].passwordEncoder.type=NONE\r\n```","```\r\n@Bean\r\npublic CasAuthenticationProvider casAuthenticationProvider() {\r\n    CasAuthenticationProvider provider = new CasAuthenticationProvider();\r\n    provider.setServiceProperties(serviceProperties());\r\n    provider.setTicketValidator(ticketValidator());\r\n    provider.setUserDetailsService(\r\n      s -> new User(\"[[email protected]](/web/20220707095557/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"Mellon\", true, true, true, true,\r\n      AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\")));\r\n    provider.setKey(\"CAS_PROVIDER_LOCALHOST_8900\");\r\n    return provider;\r\n}\r\n```"]