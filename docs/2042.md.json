["```\r\npublic static void mergeSort(int[] a, int n) {\r\n    if (n < 2) {\r\n        return;\r\n    }\r\n    int mid = n / 2;\r\n    int[] l = new int[mid];\r\n    int[] r = new int[n - mid];\r\n\r\n    for (int i = 0; i < mid; i++) {\r\n        l[i] = a[i];\r\n    }\r\n    for (int i = mid; i < n; i++) {\r\n        r[i - mid] = a[i];\r\n    }\r\n    mergeSort(l, mid);\r\n    mergeSort(r, n - mid);\r\n\r\n    merge(a, l, r, mid, n - mid);\r\n}\r\n```","```\r\npublic static void merge(\r\n  int[] a, int[] l, int[] r, int left, int right) {\r\n\r\n    int i = 0, j = 0, k = 0;\r\n    while (i < left && j < right) {\r\n        if (l[i] <= r[j]) {\r\n            a[k++] = l[i++];\r\n        }\r\n        else {\r\n            a[k++] = r[j++];\r\n        }\r\n    }\r\n    while (i < left) {\r\n        a[k++] = l[i++];\r\n    }\r\n    while (j < right) {\r\n        a[k++] = r[j++];\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void positiveTest() {\r\n    int[] actual = { 5, 1, 6, 2, 3, 4 };\r\n    int[] expected = { 1, 2, 3, 4, 5, 6 };\r\n    MergeSort.mergeSort(actual, actual.length);\r\n    assertArrayEquals(expected, actual);\r\n}\r\n```","```\r\nT(n) = 2T(n/2) + O(n)\r\n```"]