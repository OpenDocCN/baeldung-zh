["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\npublic class MultitenantDataSource extends AbstractRoutingDataSource {\r\n\r\n    @Override\r\n    protected String determineCurrentLookupKey() {\r\n        return TenantContext.getCurrentTenant();\r\n    }\r\n}\r\n```","```\r\npublic class TenantContext {\r\n\r\n    private static final ThreadLocal<String> CURRENT_TENANT = new ThreadLocal<>();\r\n\r\n    public static String getCurrentTenant() {\r\n        return CURRENT_TENANT.get();\r\n    }\r\n\r\n    public static void setCurrentTenant(String tenant) {\r\n        CURRENT_TENANT.set(tenant);\r\n    }\r\n}\r\n```","```\r\n@Component\r\n@Order(1)\r\nclass TenantFilter implements Filter {\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response,\r\n      FilterChain chain) throws IOException, ServletException {\r\n\r\n        HttpServletRequest req = (HttpServletRequest) request;\r\n        String tenantName = req.getHeader(\"X-TenantID\");\r\n        TenantContext.setCurrentTenant(tenantName);\r\n\r\n        try {\r\n            chain.doFilter(request, response);\r\n        } finally {\r\n            TenantContext.setCurrentTenant(\"\");\r\n        }\r\n\r\n    }\r\n}\r\n```","```\r\nname=tenant_1\r\ndatasource.url=jdbc:postgresql://localhost:5432/tenant1\r\ndatasource.username=postgres\r\ndatasource.password=123456\r\ndatasource.driver-class-name=org.postgresql.Driver\r\n```","```\r\nname=tenant_2\r\ndatasource.url=jdbc:postgresql://localhost:5432/tenant2\r\ndatasource.username=postgres\r\ndatasource.password=123456\r\ndatasource.driver-class-name=org.postgresql.Driver\r\n```","```\r\n@Configuration\r\npublic class MultitenantConfiguration {\r\n\r\n    @Value(\"${defaultTenant}\")\r\n    private String defaultTenant;\r\n\r\n    @Bean\r\n    @ConfigurationProperties(prefix = \"tenants\")\r\n    public DataSource dataSource() {\r\n        File[] files = Paths.get(\"allTenants\").toFile().listFiles();\r\n        Map<Object, Object> resolvedDataSources = new HashMap<>();\r\n\r\n        for (File propertyFile : files) {\r\n            Properties tenantProperties = new Properties();\r\n            DataSourceBuilder dataSourceBuilder = DataSourceBuilder.create();\r\n\r\n            try {\r\n                tenantProperties.load(new FileInputStream(propertyFile));\r\n                String tenantId = tenantProperties.getProperty(\"name\");\r\n\r\n                dataSourceBuilder.driverClassName(tenantProperties.getProperty(\"datasource.driver-class-name\"));\r\n                dataSourceBuilder.username(tenantProperties.getProperty(\"datasource.username\"));\r\n                dataSourceBuilder.password(tenantProperties.getProperty(\"datasource.password\"));\r\n                dataSourceBuilder.url(tenantProperties.getProperty(\"datasource.url\"));\r\n                resolvedDataSources.put(tenantId, dataSourceBuilder.build());\r\n            } catch (IOException exp) {\r\n                throw new RuntimeException(\"Problem in tenant datasource:\" + exp);\r\n            }\r\n        }\r\n\r\n        AbstractRoutingDataSource dataSource = new MultitenantDataSource();\r\n        dataSource.setDefaultTargetDataSource(resolvedDataSources.get(defaultTenant));\r\n        dataSource.setTargetDataSources(resolvedDataSources);\r\n\r\n        dataSource.afterPropertiesSet();\r\n        return dataSource;\r\n    }\r\n\r\n}\r\n```","```\r\ncreate table employee (id int8 generated by default as identity, name varchar(255), primary key (id));\r\n```","```\r\n@RestController\r\n@Transactional\r\npublic class EmployeeController {\r\n\r\n    @Autowired\r\n    private EmployeeRepository employeeRepository;\r\n\r\n    @PostMapping(path = \"/employee\")\r\n    public ResponseEntity<?> createEmployee() {\r\n        Employee newEmployee = new Employee();\r\n        newEmployee.setName(\"Baeldung\");\r\n        employeeRepository.save(newEmployee);\r\n        return ResponseEntity.ok(newEmployee);\r\n    }\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.jsonwebtoken</groupId>\r\n    <artifactId>jjwt</artifactId>\r\n    <version>0.9.1</version>\r\n</dependency>\r\n```","```\r\n@Override\r\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n    auth.inMemoryAuthentication()\r\n      .passwordEncoder(passwordEncoder())\r\n      .withUser(\"user\")\r\n      .password(passwordEncoder().encode(\"baeldung\"))\r\n      .roles(\"tenant_1\");\r\n\r\n    auth.inMemoryAuthentication()\r\n      .passwordEncoder(passwordEncoder())\r\n      .withUser(\"admin\")\r\n      .password(passwordEncoder().encode(\"baeldung\"))\r\n      .roles(\"tenant_2\");\r\n}\r\n```","```\r\npublic class LoginFilter extends AbstractAuthenticationProcessingFilter {\r\n\r\n    public LoginFilter(String url, AuthenticationManager authManager) {\r\n        super(new AntPathRequestMatcher(url));\r\n        setAuthenticationManager(authManager);\r\n    }\r\n\r\n    @Override\r\n    public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse res)\r\n      throws AuthenticationException, IOException, ServletException {\r\n\r\n        AccountCredentials creds = new ObjectMapper().\r\n          readValue(req.getInputStream(), AccountCredentials.class);\r\n\r\n        return getAuthenticationManager().authenticate(\r\n          new UsernamePasswordAuthenticationToken(creds.getUsername(),\r\n            creds.getPassword(), Collections.emptyList())\r\n        );\r\n    }\r\n```","```\r\npublic class AccountCredentials {\r\n\r\n    private String username;\r\n    private String password;\r\n\r\n   // getter and setter methods\r\n}\r\n```","```\r\n@Override\r\nprotected void successfulAuthentication(HttpServletRequest req, HttpServletResponse res,\r\n  FilterChain chain, Authentication auth) throws IOException, ServletException {\r\n\r\n    Collection<? extends GrantedAuthority> authorities = auth.getAuthorities();\r\n    String tenant = \"\";\r\n    for (GrantedAuthority gauth : authorities) {\r\n        tenant = gauth.getAuthority();\r\n    }\r\n\r\n    AuthenticationService.addToken(res, auth.getName(), tenant.substring(5));\r\n}\r\n```","```\r\npublic class AuthenticationService {\r\n\r\n    private static final long EXPIRATIONTIME = 864_000_00; // 1 day in milliseconds\r\n    private static final String SIGNINGKEY = \"SecretKey\";\r\n    private static final String PREFIX = \"Bearer\";\r\n\r\n    public static void addToken(HttpServletResponse res, String username, String tenant) {\r\n        String JwtToken = Jwts.builder().setSubject(username)\r\n          .setAudience(tenant)\r\n          .setExpiration(new Date(System.currentTimeMillis() + EXPIRATIONTIME))\r\n          .signWith(SignatureAlgorithm.HS512, SIGNINGKEY)\r\n          .compact();\r\n        res.addHeader(\"Authorization\", PREFIX + \" \" + JwtToken);\r\n    }\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http\r\n      .authorizeRequests()\r\n      .antMatchers(\"/login\").permitAll()\r\n      .anyRequest().authenticated()\r\n      .and()\r\n      .sessionManagement()\r\n      .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\r\n      .and()\r\n      .addFilterBefore(new LoginFilter(\"/login\", authenticationManager()),\r\n        UsernamePasswordAuthenticationFilter.class)\r\n      .addFilterBefore(new AuthenticationFilter(),\r\n        UsernamePasswordAuthenticationFilter.class)\r\n      .csrf().disable()\r\n      .headers().frameOptions().disable()\r\n      .and()\r\n      .httpBasic();\r\n}\r\n```","```\r\npublic class AuthenticationFilter extends GenericFilterBean {\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\r\n      throws IOException, ServletException {\r\n\r\n        Authentication authentication = AuthenticationService.getAuthentication((HttpServletRequest) req);\r\n        SecurityContextHolder.getContext().setAuthentication(authentication);\r\n\r\n        chain.doFilter(req, res);\r\n    }\r\n}\r\n```","```\r\nString tenant = AuthenticationService.getTenant((HttpServletRequest) req);\r\nTenantContext.setCurrentTenant(tenant);\r\n```","```\r\npublic static String getTenant(HttpServletRequest req) {\r\n    String token = req.getHeader(\"Authorization\");\r\n    if (token == null) {\r\n        return null;\r\n    }\r\n    String tenant = Jwts.parser()\r\n      .setSigningKey(SIGNINGKEY)\r\n      .parseClaimsJws(token.replace(PREFIX, \"\"))\r\n      .getBody()\r\n      .getAudience();\r\n    return tenant;\r\n}\r\n```","```\r\neyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyIiwiYXVkIjoidGVuYW50XzEiLCJleHAiOjE2NTk2MDk1Njd9.\r\n```","```\r\n{\r\n    alg: \"HS512\"\r\n}.\r\n{\r\n    sub: \"user\",\r\n    aud: \"tenant_1\",\r\n    exp: 1659609567\r\n}.\r\n```"]