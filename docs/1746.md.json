["```\r\nclass CommandHelloWorld extends HystrixCommand<String> {\r\n\r\n    private String name;\r\n\r\n    CommandHelloWorld(String name) {\r\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    protected String run() {\r\n        return \"Hello \" + name + \"!\";\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenInputBobAndDefaultSettings_whenCommandExecuted_thenReturnHelloBob(){\r\n    assertThat(new CommandHelloWorld(\"Bob\").execute(), equalTo(\"Hello Bob!\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.netflix.hystrix</groupId>\r\n    <artifactId>hystrix-core</artifactId>\r\n    <version>1.5.4</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>com.netflix.rxjava</groupId>\r\n    <artifactId>rxjava-core</artifactId>\r\n    <version>0.20.7</version>\r\n</dependency>\r\n```","```\r\nclass RemoteServiceTestSimulator {\r\n\r\n    private long wait;\r\n\r\n    RemoteServiceTestSimulator(long wait) throws InterruptedException {\r\n        this.wait = wait;\r\n    }\r\n\r\n    String execute() throws InterruptedException {\r\n        Thread.sleep(wait);\r\n        return \"Success\";\r\n    }\r\n}\r\n```","```\r\nclass RemoteServiceTestCommand extends HystrixCommand<String> {\r\n\r\n    private RemoteServiceTestSimulator remoteService;\r\n\r\n    RemoteServiceTestCommand(Setter config, RemoteServiceTestSimulator remoteService) {\r\n        super(config);\r\n        this.remoteService = remoteService;\r\n    }\r\n\r\n    @Override\r\n    protected String run() throws Exception {\r\n        return remoteService.execute();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSvcTimeoutOf100AndDefaultSettings_whenRemoteSvcExecuted_thenReturnSuccess()\r\n  throws InterruptedException {\r\n\r\n    HystrixCommand.Setter config = HystrixCommand\r\n      .Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceGroup2\"));\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(100)).execute(),\r\n      equalTo(\"Success\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenSvcTimeoutOf5000AndExecTimeoutOf10000_whenRemoteSvcExecuted_thenReturnSuccess()\r\n  throws InterruptedException {\r\n\r\n    HystrixCommand.Setter config = HystrixCommand\r\n      .Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceGroupTest4\"));\r\n\r\n    HystrixCommandProperties.Setter commandProperties = HystrixCommandProperties.Setter();\r\n    commandProperties.withExecutionTimeoutInMilliseconds(10_000);\r\n    config.andCommandPropertiesDefaults(commandProperties);\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(500)).execute(),\r\n      equalTo(\"Success\"));\r\n}\r\n```","```\r\n@Test(expected = HystrixRuntimeException.class)\r\npublic void givenSvcTimeoutOf15000AndExecTimeoutOf5000_whenRemoteSvcExecuted_thenExpectHre()\r\n  throws InterruptedException {\r\n\r\n    HystrixCommand.Setter config = HystrixCommand\r\n      .Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceGroupTest5\"));\r\n\r\n    HystrixCommandProperties.Setter commandProperties = HystrixCommandProperties.Setter();\r\n    commandProperties.withExecutionTimeoutInMilliseconds(5_000);\r\n    config.andCommandPropertiesDefaults(commandProperties);\r\n\r\n    new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(15_000)).execute();\r\n}\r\n```","```\r\n@Test\r\npublic void givenSvcTimeoutOf500AndExecTimeoutOf10000AndThreadPool_whenRemoteSvcExecuted\r\n  _thenReturnSuccess() throws InterruptedException {\r\n\r\n    HystrixCommand.Setter config = HystrixCommand\r\n      .Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceGroupThreadPool\"));\r\n\r\n    HystrixCommandProperties.Setter commandProperties = HystrixCommandProperties.Setter();\r\n    commandProperties.withExecutionTimeoutInMilliseconds(10_000);\r\n    config.andCommandPropertiesDefaults(commandProperties);\r\n    config.andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()\r\n      .withMaxQueueSize(10)\r\n      .withCoreSize(3)\r\n      .withQueueSizeRejectionThreshold(10));\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(500)).execute(),\r\n      equalTo(\"Success\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCircuitBreakerSetup_whenRemoteSvcCmdExecuted_thenReturnSuccess()\r\n  throws InterruptedException {\r\n\r\n    HystrixCommand.Setter config = HystrixCommand\r\n      .Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"RemoteServiceGroupCircuitBreaker\"));\r\n\r\n    HystrixCommandProperties.Setter properties = HystrixCommandProperties.Setter();\r\n    properties.withExecutionTimeoutInMilliseconds(1000);\r\n    properties.withCircuitBreakerSleepWindowInMilliseconds(4000);\r\n    properties.withExecutionIsolationStrategy\r\n     (HystrixCommandProperties.ExecutionIsolationStrategy.THREAD);\r\n    properties.withCircuitBreakerEnabled(true);\r\n    properties.withCircuitBreakerRequestVolumeThreshold(1);\r\n\r\n    config.andCommandPropertiesDefaults(properties);\r\n    config.andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()\r\n      .withMaxQueueSize(1)\r\n      .withCoreSize(1)\r\n      .withQueueSizeRejectionThreshold(1));\r\n\r\n    assertThat(this.invokeRemoteService(config, 10_000), equalTo(null));\r\n    assertThat(this.invokeRemoteService(config, 10_000), equalTo(null));\r\n    assertThat(this.invokeRemoteService(config, 10_000), equalTo(null));\r\n\r\n    Thread.sleep(5000);\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(500)).execute(),\r\n      equalTo(\"Success\"));\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(500)).execute(),\r\n      equalTo(\"Success\"));\r\n\r\n    assertThat(new RemoteServiceTestCommand(config, new RemoteServiceTestSimulator(500)).execute(),\r\n      equalTo(\"Success\"));\r\n}\r\n```","```\r\npublic String invokeRemoteService(HystrixCommand.Setter config, int timeout)\r\n  throws InterruptedException {\r\n\r\n    String response = null;\r\n\r\n    try {\r\n        response = new RemoteServiceTestCommand(config,\r\n          new RemoteServiceTestSimulator(timeout)).execute();\r\n    } catch (HystrixRuntimeException ex) {\r\n        System.out.println(\"ex = \" + ex);\r\n    }\r\n\r\n    return response;\r\n}\r\n```"]