["```\r\n$ cd <path to docker-compose.yml>\r\n$ docker-compose up\r\n```","```\r\n$ docker exec -it apache-bookkeeper_bookie_1 /opt/bookkeeper/bin/bookkeeper \\\r\n  shell listbookies -readwrite\r\nReadWrite Bookies :\r\n192.168.99.101(192.168.99.101):4181\r\n192.168.99.101(192.168.99.101):4182\r\n192.168.99.101(192.168.99.101):3181 \r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.bookkeeper</groupId>\r\n    <artifactId>bookkeeper-server</artifactId>\r\n    <version>4.10.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.bookkeeper</groupId>\r\n    <artifactId>bookkeeper-server-shaded</artifactId>\r\n    <version>4.10.0</version>\r\n</dependency> \r\n```","```\r\nBookKeeper client = new BookKeeper(\"zookeeper-host:2131\"); \r\n```","```\r\nClientConfiguration cfg = new ClientConfiguration();\r\ncfg.setMetadataServiceUri(\"zk+null://zookeeper-host:2131\");\r\n\r\n// ... set other properties\r\n\r\nBookKeeper.forConfig(cfg).build();\r\n```","```\r\nLedgerHandle lh = bk.createLedger(BookKeeper.DigestType.MAC,\"password\".getBytes());\r\n```","```\r\nLedgerHandle lh = bk.createLedger(\r\n  3,\r\n  2,\r\n  2,\r\n  DigestType.MAC,\r\n  \"password\".getBytes(),\r\n  Collections.singletonMap(\"name\", \"my-ledger\".getBytes()));\r\n```","```\r\nbk.asyncCreateLedger(\r\n  3,\r\n  2,\r\n  2,\r\n  BookKeeper.DigestType.MAC, \"passwd\".getBytes(),\r\n  (rc, lh, ctx) -> {\r\n      // ... use lh to access ledger operations\r\n  },\r\n  null,\r\n  Collections.emptyMap()); \r\n```","```\r\nCompletableFuture<WriteHandle> cf = bk.newCreateLedgerOp()\r\n  .withDigestType(org.apache.bookkeeper.client.api.DigestType.MAC)\r\n  .withPassword(\"password\".getBytes())\r\n  .execute(); \r\n```","```\r\nfor(int i = 0; i < MAX_MESSAGES; i++) {\r\n    byte[] data = new String(\"message-\" + i).getBytes();\r\n    lh.append(data);\r\n} \r\n```","```\r\n// Available in WriteHandle and LedgerHandle\r\nCompletableFuture<Long> f = lh.appendAsync(data);\r\n\r\n// Available only in LedgerHandle\r\nlh.asyncAddEntry(\r\n  data,\r\n  (rc,ledgerHandle,entryId,ctx) -> {\r\n      // ... callback logic omitted\r\n  },\r\n  null);\r\n```","```\r\nLedgerHandle lh = bk.openLedger(\r\n  ledgerId, \r\n  BookKeeper.DigestType.MAC,\r\n  ledgerPassword); \r\n```","```\r\nReadHandle rh = bk.newOpenLedgerOp()\r\n  .withLedgerId(ledgerId)\r\n  .withDigestType(DigestType.MAC)\r\n  .withPassword(\"password\".getBytes())\r\n  .execute()\r\n  .get(); \r\n```","```\r\nlong lastId = lh.readLastConfirmed();\r\nrh.read(0, lastId).forEach((entry) -> {\r\n    // ... do something \r\n});\r\n```","```\r\nrh.readAsync(0, lastId).thenAccept((entries) -> {\r\n    entries.forEach((entry) -> {\r\n        // ... process entry\r\n    });\r\n});\r\n```","```\r\nlh.asyncReadEntries(\r\n  0,\r\n  lastId,\r\n  (rc,lh,entries,ctx) -> {\r\n      while(entries.hasMoreElements()) {\r\n          LedgerEntry e = ee.nextElement();\r\n      }\r\n  },\r\n  null);\r\n```","```\r\npublic List listAllLedgers(BookKeeper bk) {\r\n    List ledgers = Collections.synchronizedList(new ArrayList<>());\r\n    CountDownLatch processDone = new CountDownLatch(1);\r\n\r\n    bk.getLedgerManager()\r\n      .asyncProcessLedgers(\r\n        (ledgerId, cb) -> {\r\n            ledgers.add(ledgerId);\r\n            cb.processResult(BKException.Code.OK, null, null);\r\n        }, \r\n        (rc, s, obj) -> {\r\n            processDone.countDown();\r\n        },\r\n        null,\r\n        BKException.Code.OK,\r\n        BKException.Code.ReadException);\r\n\r\n    try {\r\n        processDone.await(1, TimeUnit.MINUTES);\r\n        return ledgers;\r\n    } catch (InterruptedException ie) {\r\n        throw new RuntimeException(ie);\r\n    }\r\n} \r\n```"]