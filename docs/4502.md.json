["```\r\nclass Order {\r\n    private Collection<OrderLine> orderLines;\r\n    private Money totalCost;\r\n    // ...\r\n}\r\n```","```\r\nclass OrderLine {\r\n    private Product product;\r\n    private int quantity;\r\n    // ...\r\n}\r\n```","```\r\nclass Product {\r\n    private Money price;\r\n    // ...\r\n}\r\n```","```\r\nOrder order = new Order();\r\norder.setOrderLines(Arrays.asList(orderLine0, orderLine1));\r\norder.setTotalCost(Money.zero(CurrencyUnit.USD)); // this doesn't look good...\r\n```","```\r\nclass Order {\r\n    private final List<OrderLine> orderLines;\r\n    private Money totalCost;\r\n\r\n    Order(List<OrderLine> orderLines) {\r\n        checkNotNull(orderLines);\r\n        if (orderLines.isEmpty()) {\r\n            throw new IllegalArgumentException(\"Order must have at least one order line item\");\r\n        }\r\n        this.orderLines = new ArrayList<>(orderLines);\r\n        totalCost = calculateTotalCost();\r\n    }\r\n\r\n    void addLineItem(OrderLine orderLine) {\r\n        checkNotNull(orderLine);\r\n        orderLines.add(orderLine);\r\n        totalCost = totalCost.plus(orderLine.cost());\r\n    }\r\n\r\n    void removeLineItem(int line) {\r\n        OrderLine removedLine = orderLines.remove(line);\r\n        totalCost = totalCost.minus(removedLine.cost());\r\n    }\r\n\r\n    Money totalCost() {\r\n        return totalCost;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n```","```\r\n@DisplayName(\"given order with two line items, when persist, then order is saved\")\r\n@Test\r\npublic void test() throws Exception {\r\n    // given\r\n    JpaOrder order = prepareTestOrderWithTwoLineItems();\r\n\r\n    // when\r\n    JpaOrder savedOrder = repository.save(order);\r\n\r\n    // then\r\n    JpaOrder foundOrder = repository.findById(savedOrder.getId())\r\n      .get();\r\n    assertThat(foundOrder.getOrderLines()).hasSize(2);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n```","```\r\n@DisplayName(\"given order with two line items, when persist using mongo repository, then order is saved\")\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    Order order = prepareTestOrderWithTwoLineItems();\r\n\r\n    // when\r\n    repo.save(order);\r\n\r\n    // then\r\n    List<Order> foundOrders = repo.findAll();\r\n    assertThat(foundOrders).hasSize(1);\r\n    List<OrderLine> foundOrderLines = foundOrders.iterator()\r\n      .next()\r\n      .getOrderLines();\r\n    assertThat(foundOrderLines).hasSize(2);\r\n    assertThat(foundOrderLines).containsOnlyElementsOf(order.getOrderLines());\r\n}\r\n```","```\r\n{\r\n  \"_id\": ObjectId(\"5bd8535c81c04529f54acd14\"),\r\n  \"orderLines\": [\r\n    {\r\n      \"product\": {\r\n        \"price\": {\r\n          \"money\": {\r\n            \"currency\": {\r\n              \"code\": \"USD\",\r\n              \"numericCode\": 840,\r\n              \"decimalPlaces\": 2\r\n            },\r\n            \"amount\": \"10.00\"\r\n          }\r\n        }\r\n      },\r\n      \"quantity\": 2\r\n    },\r\n    {\r\n      \"product\": {\r\n        \"price\": {\r\n          \"money\": {\r\n            \"currency\": {\r\n              \"code\": \"USD\",\r\n              \"numericCode\": 840,\r\n              \"decimalPlaces\": 2\r\n            },\r\n            \"amount\": \"5.00\"\r\n          }\r\n        }\r\n      },\r\n      \"quantity\": 10\r\n    }\r\n  ],\r\n  \"totalCost\": {\r\n    \"money\": {\r\n      \"currency\": {\r\n        \"code\": \"USD\",\r\n        \"numericCode\": 840,\r\n        \"decimalPlaces\": 2\r\n      },\r\n      \"amount\": \"70.00\"\r\n    }\r\n  },\r\n  \"_class\": \"com.baeldung.ddd.order.mongo.Order\"\r\n}\r\n```"]