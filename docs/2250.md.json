["```\r\npublic static boolean isSorted(List<String> listOfStrings) {\r\n    if (isEmpty(listOfStrings) || listOfStrings.size() == 1) {\r\n        return true;\r\n    }\r\n\r\n    Iterator<String> iter = listOfStrings.iterator();\r\n    String current, previous = iter.next();\r\n    while (iter.hasNext()) {\r\n        current = iter.next();\r\n        if (previous.compareTo(current) > 0) {\r\n            return false;\r\n        }\r\n        previous = current;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\npublic static boolean isSorted(List<Employee> employees, Comparator<Employee> employeeComparator) {\r\n    if (isEmpty(employees) || employees.size() == 1) {\r\n        return true;\r\n    }\r\n\r\n    Iterator<Employee> iter = employees.iterator();\r\n    Employee current, previous = iter.next();\r\n    while (iter.hasNext()) {\r\n        current = iter.next();\r\n        if (employeeComparator.compare(previous, current) > 0) {\r\n            return false;\r\n        }\r\n        previous = current;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\npublic static boolean isSorted(List<String> listOfStrings) {\r\n    return isSorted(listOfStrings, listOfStrings.size());\r\n}\r\n\r\npublic static boolean isSorted(List<String> listOfStrings, int index) {\r\n    if (index < 2) {\r\n        return true;\r\n    } else if (listOfStrings.get(index - 2).compareTo(listOfStrings.get(index - 1)) > 0) {\r\n        return false;\r\n    } else {\r\n        return isSorted(listOfStrings, index - 1);\r\n    }\r\n}\r\n```","```\r\npublic static boolean isSorted(List<String> listOfStrings) {\r\n    return Ordering.<String> natural().isOrdered(listOfStrings);\r\n}\r\n```","```\r\npublic static boolean isSorted(List<Employee> employees, Comparator<Employee> employeeComparator) {\r\n    return Ordering.from(employeeComparator).isOrdered(employees);\r\n}\r\n```","```\r\npublic static boolean isSorted(List<String> listOfStrings) {\r\n    return Comparators.isInOrder(listOfStrings, Comparator.<String> naturalOrder());\r\n}\r\n```"]