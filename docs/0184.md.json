["```\r\npublic class Person {\r\n    @Nonnull private String name;\r\n    private int age;\r\n\r\n    // constructor\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class CheckFieldsOneByOne implements Comparator<Person> {\r\n    @Override\r\n    public int compare(Person o1, Person o2) {\r\n        int nameCompare = o1.getName().compareTo(o2.getName());\r\n        if(nameCompare != 0) {\r\n            return nameCompare;\r\n        }\r\n        return Integer.compare(o1.getAge(), o2.getAge());\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic class ComparisonChainExample implements Comparator<Person> {\r\n    @Override\r\n    public int compare(Person o1, Person o2) {\r\n        return ComparisonChain.start()\r\n          .compare(o1.getName(), o2.getName())\r\n          .compare(o1.getAge(), o2.getAge())\r\n          .result();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic class CompareToBuilderExample implements Comparator<Person> {\r\n    @Override\r\n    public int compare(Person o1, Person o2) {\r\n        return new CompareToBuilder()\r\n          .append(o1.getName(), o2.getName())\r\n          .append(o1.getAge(), o2.getAge())\r\n          .build();\r\n    }\r\n}\r\n```","```\r\npublic static Comparator<Person> createPersonLambdaComparator() {\r\n    return Comparator.comparing(Person::getName)\r\n      .thenComparing(Person::getAge);\r\n}\r\n```","```\r\n@Test\r\npublic void testComparePersonsFirstNameThenAge() {\r\n    Person person1 = new Person(\"John\", 21);\r\n    Person person2 = new Person(\"Tom\", 20);\r\n    // Another person named John\r\n    Person person3 = new Person(\"John\", 22);\r\n\r\n    List<Comparator<Person>> comparators =\r\n      Arrays.asList(new CheckFieldsOneByOne(),\r\n        new ComparisonChainExample(),\r\n        new CompareToBuilderExample(),\r\n        createPersonLambdaComparator());\r\n    // All comparators should produce the same result\r\n    for(Comparator<Person> comparator : comparators) {\r\n        Assertions.assertIterableEquals(\r\n          Arrays.asList(person1, person2, person3)\r\n            .stream()\r\n            .sorted(comparator)\r\n            .collect(Collectors.toList()),\r\n          Arrays.asList(person1, person3, person2));\r\n    }\r\n}\r\n```"]