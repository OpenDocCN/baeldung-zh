["```\r\n@Entity\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n    private String password;\r\n    private boolean enabled;\r\n    private boolean tokenExpired;\r\n\r\n    @ManyToMany \r\n    @JoinTable( \r\n        name = \"users_roles\", \r\n        joinColumns = @JoinColumn(\r\n          name = \"user_id\", referencedColumnName = \"id\"), \r\n        inverseJoinColumns = @JoinColumn(\r\n          name = \"role_id\", referencedColumnName = \"id\")) \r\n    private Collection<Role> roles;\r\n}\r\n```","```\r\n@Entity\r\npublic class Role {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String name;\r\n    @ManyToMany(mappedBy = \"roles\")\r\n    private Collection<User> users;\r\n\r\n    @ManyToMany\r\n    @JoinTable(\r\n        name = \"roles_privileges\", \r\n        joinColumns = @JoinColumn(\r\n          name = \"role_id\", referencedColumnName = \"id\"), \r\n        inverseJoinColumns = @JoinColumn(\r\n          name = \"privilege_id\", referencedColumnName = \"id\"))\r\n    private Collection<Privilege> privileges;\r\n}\r\n```","```\r\n@Entity\r\npublic class Privilege {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @ManyToMany(mappedBy = \"privileges\")\r\n    private Collection<Role> roles;\r\n}\r\n```","```\r\n@Component\r\npublic class SetupDataLoader implements\r\n  ApplicationListener<ContextRefreshedEvent> {\r\n\r\n    boolean alreadySetup = false;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private RoleRepository roleRepository;\r\n\r\n    @Autowired\r\n    private PrivilegeRepository privilegeRepository;\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Override\r\n    @Transactional\r\n    public void onApplicationEvent(ContextRefreshedEvent event) {\r\n\r\n        if (alreadySetup)\r\n            return;\r\n        Privilege readPrivilege\r\n          = createPrivilegeIfNotFound(\"READ_PRIVILEGE\");\r\n        Privilege writePrivilege\r\n          = createPrivilegeIfNotFound(\"WRITE_PRIVILEGE\");\r\n\r\n        List<Privilege> adminPrivileges = Arrays.asList(\r\n          readPrivilege, writePrivilege);\r\n        createRoleIfNotFound(\"ROLE_ADMIN\", adminPrivileges);\r\n        createRoleIfNotFound(\"ROLE_USER\", Arrays.asList(readPrivilege));\r\n\r\n        Role adminRole = roleRepository.findByName(\"ROLE_ADMIN\");\r\n        User user = new User();\r\n        user.setFirstName(\"Test\");\r\n        user.setLastName(\"Test\");\r\n        user.setPassword(passwordEncoder.encode(\"test\"));\r\n        user.setEmail(\"[[emailÂ protected]](/web/20220628152411/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        user.setRoles(Arrays.asList(adminRole));\r\n        user.setEnabled(true);\r\n        userRepository.save(user);\r\n\r\n        alreadySetup = true;\r\n    }\r\n\r\n    @Transactional\r\n    Privilege createPrivilegeIfNotFound(String name) {\r\n\r\n        Privilege privilege = privilegeRepository.findByName(name);\r\n        if (privilege == null) {\r\n            privilege = new Privilege(name);\r\n            privilegeRepository.save(privilege);\r\n        }\r\n        return privilege;\r\n    }\r\n\r\n    @Transactional\r\n    Role createRoleIfNotFound(\r\n      String name, Collection<Privilege> privileges) {\r\n\r\n        Role role = roleRepository.findByName(name);\r\n        if (role == null) {\r\n            role = new Role(name);\r\n            role.setPrivileges(privileges);\r\n            roleRepository.save(role);\r\n        }\r\n        return role;\r\n    }\r\n}\r\n```","```\r\n@Service(\"userDetailsService\")\r\n@Transactional\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private IUserService service;\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @Autowired\r\n    private RoleRepository roleRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String email)\r\n      throws UsernameNotFoundException {\r\n\r\n        User user = userRepository.findByEmail(email);\r\n        if (user == null) {\r\n            return new org.springframework.security.core.userdetails.User(\r\n              \" \", \" \", true, true, true, true, \r\n              getAuthorities(Arrays.asList(\r\n                roleRepository.findByName(\"ROLE_USER\"))));\r\n        }\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n          user.getEmail(), user.getPassword(), user.isEnabled(), true, true, \r\n          true, getAuthorities(user.getRoles()));\r\n    }\r\n\r\n    private Collection<? extends GrantedAuthority> getAuthorities(\r\n      Collection<Role> roles) {\r\n\r\n        return getGrantedAuthorities(getPrivileges(roles));\r\n    }\r\n\r\n    private List<String> getPrivileges(Collection<Role> roles) {\r\n\r\n        List<String> privileges = new ArrayList<>();\r\n        List<Privilege> collection = new ArrayList<>();\r\n        for (Role role : roles) {\r\n            privileges.add(role.getName());\r\n            collection.addAll(role.getPrivileges());\r\n        }\r\n        for (Privilege item : collection) {\r\n            privileges.add(item.getName());\r\n        }\r\n        return privileges;\r\n    }\r\n\r\n    private List<GrantedAuthority> getGrantedAuthorities(List<String> privileges) {\r\n        List<GrantedAuthority> authorities = new ArrayList<>();\r\n        for (String privilege : privileges) {\r\n            authorities.add(new SimpleGrantedAuthority(privilege));\r\n        }\r\n        return authorities;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic RoleHierarchy roleHierarchy() {\r\n    RoleHierarchyImpl roleHierarchy = new RoleHierarchyImpl();\r\n    String hierarchy = \"ROLE_ADMIN > ROLE_STAFF \\n ROLE_STAFF > ROLE_USER\";\r\n    roleHierarchy.setHierarchy(hierarchy);\r\n    return roleHierarchy;\r\n}\r\n```","```\r\n@Bean\r\npublic DefaultWebSecurityExpressionHandler webSecurityExpressionHandler() {\r\n    DefaultWebSecurityExpressionHandler expressionHandler = new DefaultWebSecurityExpressionHandler();\r\n    expressionHandler.setRoleHierarchy(roleHierarchy());\r\n    return expressionHandler;\r\n}\r\n```","```\r\n@Override\r\npublic User registerNewUserAccount(UserDto accountDto) throws EmailExistsException {\r\n\r\n    if (emailExist(accountDto.getEmail())) {\r\n        throw new EmailExistsException\r\n          (\"There is an account with that email adress: \" + accountDto.getEmail());\r\n    }\r\n    User user = new User();\r\n\r\n    user.setFirstName(accountDto.getFirstName());\r\n    user.setLastName(accountDto.getLastName());\r\n    user.setPassword(passwordEncoder.encode(accountDto.getPassword()));\r\n    user.setEmail(accountDto.getEmail());\r\n\r\n    user.setRoles(Arrays.asList(roleRepository.findByName(\"ROLE_USER\")));\r\n    return repository.save(user);\r\n}\r\n```"]