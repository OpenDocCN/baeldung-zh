["```\r\npublic class Singleton implements Serializable {\r\n\r\n    private static Singleton INSTANCE;\r\n    private String state = \"State Zero\";\r\n\r\n    private Singleton() {}\r\n\r\n    public static Singleton getInstance() {\r\n        if (INSTANCE == null) {\r\n            INSTANCE = new Singleton();\r\n        }\r\n\r\n        return INSTANCE;\r\n    }\r\n\r\n    public String getState() {\r\n        return state;\r\n    }\r\n\r\n    public void setState(String state) {\r\n        this.state = state;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSingleton_whenSerializedAndDeserialized_thenStatePreserved() {\r\n    Singleton s1 = Singleton.getInstance();\r\n    s1.setState(\"State One\");\r\n\r\n    try (\r\n      FileOutputStream fos = new FileOutputStream(\"singleton_test.txt\");\r\n      ObjectOutputStream oos = new ObjectOutputStream(fos);\r\n      FileInputStream fis = new FileInputStream(\"singleton_test.txt\");\r\n      ObjectInputStream ois = new ObjectInputStream(fis)) {\r\n\r\n        // Serializing.\r\n        oos.writeObject(s1);\r\n\r\n        // Deserializing.\r\n        Singleton s2 = (Singleton) ois.readObject();\r\n\r\n        // Checking if the state is preserved.\r\n        assertEquals(s1.getState(), s2.getState());\r\n\r\n        // Checking if s1 and s2 are not the same instance.\r\n        assertNotEquals(s1, s2);\r\n\r\n    } catch (Exception e) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic enum EnumSingleton {\r\n\r\n    INSTANCE(\"State Zero\");\r\n\r\n    private String state;\r\n\r\n    private EnumSingleton(String state) {\r\n        this.state = state;\r\n    }\r\n\r\n    public EnumSingleton getInstance() {\r\n        return INSTANCE;\r\n    }\r\n\r\n    public String getState() { \r\n        return this.state; \r\n    }\r\n\r\n    public void setState(String state) { \r\n        this.state = state; \r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenEnumSingleton_whenSerializedAndDeserialized_thenStatePreserved() {\r\n    EnumSingleton es1 = EnumSingleton.getInstance();\r\n    es1.setState(\"State One\");\r\n\r\n    try (\r\n      FileOutputStream fos = new FileOutputStream(\"enum_singleton_test.txt\");\r\n      ObjectOutputStream oos = new ObjectOutputStream(fos);\r\n      FileInputStream fis = new FileInputStream(\"enum_singleton_test.txt\");\r\n      ObjectInputStream ois = new ObjectInputStream(fis)) {\r\n\r\n        // Serializing.\r\n        oos.writeObject(es1);\r\n\r\n        // Deserializing.\r\n        EnumSingleton es2 = (EnumSingleton) ois.readObject();\r\n\r\n        // Checking if the state is preserved.\r\n        assertEquals(es1.getState(), es2.getState());\r\n\r\n        // Checking if es1 and es2 are pointing to \r\n        // the same instance in memory.\r\n        assertEquals(es1, es2);\r\n\r\n    } catch (Exception e) {\r\n        // ...\r\n    }\r\n}\r\n```"]