["```\r\nevent: stock\r\nid: 1\r\n: price change\r\nretry: 4000\r\ndata: {\"dateTime\":\"2018-07-14T18:06:00.285\",\"id\":1,\r\ndata: \"name\":\"GOOG\",\"price\":75.7119}\r\n\r\nevent: stock\r\nid: 2\r\n: price change\r\nretry: 4000\r\ndata: {\"dateTime\":\"2018-07-14T18:06:00.285\",\"id\":2,\"name\":\"IBM\",\"price\":83.4611}\r\n```","```\r\n@GET\r\n@Path(\"prices\")\r\n@Produces(\"text/event-stream\")\r\npublic void getStockPrices(@Context SseEventSink sseEventSink, @Context Sse sse) {\r\n    //...\r\n}\r\n```","```\r\nAccept: text/event-stream \r\n```","```\r\n@Context\r\npublic void setSse(Sse sse) {\r\n    this.sse = sse;\r\n    this.eventBuilder = sse.newEventBuilder();\r\n    this.sseBroadcaster = sse.newBroadcaster();\r\n}\r\n```","```\r\nOutboundSseEvent sseEvent = this.eventBuilder\r\n  .name(\"stock\")\r\n  .id(String.valueOf(lastEventId))\r\n  .mediaType(MediaType.APPLICATION_JSON_TYPE)\r\n  .data(Stock.class, stock)\r\n  .reconnectDelay(4000)\r\n  .comment(\"price change\")\r\n  .build();\r\n```","```\r\nOutboundSseEvent sseEvent = sse.newEvent(\"cool Event\");\r\nOutboundSseEvent sseEvent = sse.newEvent(\"typed event\", \"data Event\");\r\n```","```\r\n@GET\r\n@Path(\"prices\")\r\n@Produces(\"text/event-stream\")\r\npublic void getStockPrices(@Context SseEventSink sseEventSink /*..*/) {\r\n    int lastEventId = //..;\r\n    while (running) {\r\n        Stock stock = stockService.getNextTransaction(lastEventId);\r\n        if (stock != null) {\r\n            OutboundSseEvent sseEvent = this.eventBuilder\r\n              .name(\"stock\")\r\n              .id(String.valueOf(lastEventId))\r\n              .mediaType(MediaType.APPLICATION_JSON_TYPE)\r\n              .data(Stock.class, stock)\r\n              .reconnectDelay(3000)\r\n              .comment(\"price change\")\r\n              .build();\r\n            sseEventSink.send(sseEvent);\r\n            lastEventId++;\r\n        }\r\n     //..\r\n    }\r\n    sseEventSink.close();\r\n}\r\n```","```\r\ntry (SseEventSink sink = sseEventSink) {\r\n    OutboundSseEvent sseEvent = //..\r\n    sink.send(sseEvent);\r\n}\r\n```","```\r\nhttp://localhost:9080/sse-jaxrs-server/sse.html\r\n```","```\r\nSseBroadcaster sseBroadcaster = sse.newBroadcaster();\r\n```","```\r\n@GET\r\n@Path(\"subscribe\")\r\n@Produces(MediaType.SERVER_SENT_EVENTS)\r\npublic void listen(@Context SseEventSink sseEventSink) {\r\n    this.sseBroadcaster.register(sseEventSink);\r\n}\r\n```","```\r\n@GET\r\n@Path(\"publish\")\r\npublic void broadcast() {\r\n    OutboundSseEvent sseEvent = //...;\r\n    this.sseBroadcaster.broadcast(sseEvent);\r\n}\r\n```","```\r\nhttp://localhost:9080/sse-jaxrs-server/sse-broadcast.html\r\n```","```\r\ncurl -X GET http://localhost:9080/sse-jaxrs-server/sse/stock/publish\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-rs-client</artifactId>\r\n    <version>${cxf-version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-rs-sse</artifactId>\r\n    <version>${cxf-version}</version>\r\n</dependency>\r\n```","```\r\nClient client = ClientBuilder.newClient();\r\nWebTarget target = client.target(url);\r\ntry (SseEventSource source = SseEventSource.target(target).build()) {\r\n    source.register((inboundSseEvent) -> System.out.println(inboundSseEvent));\r\n    source.open();\r\n}\r\n```","```\r\nString data = inboundSseEvent.readData();\r\n```","```\r\nStock stock = inboundSseEvent.readData(Stock.class, MediaType.Application_Json);\r\n```"]