["```\r\ninterface HelloWorld {\r\n    default String hello() {\r\n        return \"world\";\r\n    }\r\n}\r\n```","```\r\nObject proxy = Proxy.newProxyInstance(getSystemClassLoader(), new Class<?>[] { HelloWorld.class },\r\n    (prox, method, args) -> {\r\n        if (method.isDefault()) {\r\n            return InvocationHandler.invokeDefault(prox, method, args);\r\n        }\r\n        // ...\r\n    }\r\n);\r\nMethod method = proxy.getClass().getMethod(\"hello\");\r\nassertThat(method.invoke(proxy)).isEqualTo(\"world\");\r\n```","```\r\nLocalTime date = LocalTime.parse(\"15:25:08.690791\");\r\nDateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"h B\");\r\nassertThat(date.format(formatter)).isEqualTo(\"3 in the afternoon\");\r\n```","```\r\nList<String> integersAsString = Arrays.asList(\"1\", \"2\", \"3\");\r\nList<Integer> ints = integersAsString.stream().map(Integer::parseInt).collect(Collectors.toList());\r\nList<Integer> intsEquivalent = integersAsString.stream().map(Integer::parseInt).toList();\r\n```","```\r\nint[] a = {1, 2, 3, 4};\r\nint[] b = {5, 6, 7, 8};\r\n\r\nvar c = new int[a.length];\r\n\r\nfor (int i = 0; i < a.length; i++) {\r\n    c[i] = a[i] * b[i];\r\n}\r\n```","```\r\nint[] a = {1, 2, 3, 4};\r\nint[] b = {5, 6, 7, 8};\r\n\r\nvar vectorA = IntVector.fromArray(IntVector.SPECIES_128, a, 0);\r\nvar vectorB = IntVector.fromArray(IntVector.SPECIES_128, b, 0);\r\nvar vectorC = vectorA.mul(vectorB);\r\nvectorC.intoArray(c, 0);\r\n```","```\r\npublic final class Book {\r\n    private final String title;\r\n    private final String author;\r\n    private final String isbn;\r\n\r\n    public Book(String title, String author, String isbn) {\r\n        this.title = title;\r\n        this.author = author;\r\n        this.isbn = isbn;\r\n    }\r\n\r\n    public String getTitle() {\r\n        return title;\r\n    }\r\n\r\n    public String getAuthor() {\r\n        return author;\r\n    }\r\n\r\n    public String getIsbn() {\r\n        return isbn;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(title, author, isbn);\r\n    }\r\n}\r\n```","```\r\npublic record Book(String title, String author, String isbn) {\r\n}\r\n```","```\r\nclass OuterClass {\r\n    class InnerClass {\r\n        Book book = new Book(\"Title\", \"author\", \"isbn\");\r\n    }\r\n}\r\n```","```\r\nObject obj = \"TEST\";\r\n\r\nif (obj instanceof String) {\r\n    String t = (String) obj;\r\n    // do some logic...\r\n}\r\n```","```\r\nObject obj = \"TEST\";\r\n\r\nif (obj instanceof String t) {\r\n    // do some logic\r\n}\r\n```","```\r\npublic sealed interface JungleAnimal permits Monkey, Snake  {\r\n}\r\n\r\npublic final class Monkey implements JungleAnimal {\r\n}\r\n\r\npublic non-sealed class Snake implements JungleAnimal {\r\n}\r\n```","```\r\nJungleAnimal j = // some JungleAnimal instance\r\n\r\nif (j instanceof Monkey m) {\r\n    // do logic\r\n} else if (j instanceof Snake s) {\r\n    // do logic\r\n}\r\n```"]