["```\r\n@Test(expected = EntityNotFoundException.class)\r\npublic void givenNonExistingUserId_whenGetReferenceIsUsed_thenExceptionIsThrown() {\r\n    User user = entityManager.getReference(User.class, 1L);\r\n    user.getName();\r\n} \r\n```","```\r\n@Entity\r\npublic class Item implements Serializable {\r\n    @Id\r\n    @Column(unique = true, nullable = false)\r\n    private long id;\r\n    private String name;\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"category_id\", foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))\r\n    private Category category;\r\n    // getters and setters\r\n}\r\n@Entity\r\npublic class Category implements Serializable {\r\n    @Id\r\n    @Column(unique = true, nullable = false)\r\n    private long id;\r\n    private String name;\r\n    @OneToMany\r\n    @JoinColumn(name = \"category_id\", foreignKey = @ForeignKey(ConstraintMode.NO_CONSTRAINT))\r\n    private List<Item> items = new ArrayList<>();\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test(expected = EntityNotFoundException.class)\r\npublic void givenItem_whenManyToOneEntityIsMissing_thenExceptionIsThrown() {\r\n    entityManager.createNativeQuery(\"Insert into Item (category_id, name, id) values (1, 'test', 1)\").executeUpdate();\r\n    entityManager.flush();\r\n    Item item = entityManager.find(Item.class, 1L);\r\n    item.getCategory().getName();\r\n}\r\n```"]