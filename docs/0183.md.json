["```\r\n<dependency>\r\n    <groupId>io.reactivex.rxjava2</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>2.2.21</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenObservable_whenSuccess_thenOnNext(){\r\n    Observable.just(remoteCallSuccess())\r\n        .subscribe(success -> {\r\n            System.out.println(\"Success\");\r\n            System.out.println(success);\r\n        }, err -> {\r\n            System.out.println(\"Error\");\r\n            System.out.println(err);\r\n        });\r\n}\r\n```","```\r\n@Test\r\npublic void givenObservable_whenError_thenOnError(){\r\n    Observable.just(remoteCallError())\r\n        .subscribe(success -> {\r\n            System.out.println(\"Success\");\r\n            System.out.println(success);\r\n        }, err -> {\r\n            System.out.println(\"Error\");\r\n            System.out.println(err);\r\n        });\r\n}\r\n```","```\r\n@Test\r\npublic void givenError_whenRetry_thenCanDelay(){\r\n    Observable.just(remoteCallError())\r\n        .retryWhen(attempts -> {\r\n            return attempts.flatMap(err -> {\r\n                if (customChecker(err)) {\r\n                    return Observable.timer(5000, TimeUnit.MILLISECONDS);\r\n                } else {\r\n                    return Observable.error(err);\r\n                }\r\n            });\r\n        });\r\n}\r\n```"]