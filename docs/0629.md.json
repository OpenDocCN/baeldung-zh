["```\r\n<dependency>\r\n    <groupId>org.springframework.kafka</groupId>\r\n    <artifactId>spring-kafka</artifactId>\r\n    <version>2.7.2</version>\r\n</dependency>\r\n```","```\r\n$ bin/kafka-topics.sh --create \\\r\n  --zookeeper localhost:2181 \\\r\n  --replication-factor 1 --partitions 1 \\\r\n  --topic mytopic\r\n```","```\r\n@Configuration\r\npublic class KafkaTopicConfig {\r\n\r\n    @Value(value = \"${kafka.bootstrapAddress}\")\r\n    private String bootstrapAddress;\r\n\r\n    @Bean\r\n    public KafkaAdmin kafkaAdmin() {\r\n        Map<String, Object> configs = new HashMap<>();\r\n        configs.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);\r\n        return new KafkaAdmin(configs);\r\n    }\r\n\r\n    @Bean\r\n    public NewTopic topic1() {\r\n         return new NewTopic(\"baeldung\", 1, (short) 1);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class KafkaProducerConfig {\r\n\r\n    @Bean\r\n    public ProducerFactory<String, String> producerFactory() {\r\n        Map<String, Object> configProps = new HashMap<>();\r\n        configProps.put(\r\n          ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \r\n          bootstrapAddress);\r\n        configProps.put(\r\n          ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \r\n          StringSerializer.class);\r\n        configProps.put(\r\n          ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \r\n          StringSerializer.class);\r\n        return new DefaultKafkaProducerFactory<>(configProps);\r\n    }\r\n\r\n    @Bean\r\n    public KafkaTemplate<String, String> kafkaTemplate() {\r\n        return new KafkaTemplate<>(producerFactory());\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate KafkaTemplate<String, String> kafkaTemplate;\r\n\r\npublic void sendMessage(String msg) {\r\n    kafkaTemplate.send(topicName, msg);\r\n}\r\n```","```\r\npublic void sendMessage(String message) {\r\n\r\n    ListenableFuture<SendResult<String, String>> future = \r\n      kafkaTemplate.send(topicName, message);\r\n\r\n    future.addCallback(new ListenableFutureCallback<SendResult<String, String>>() {\r\n\r\n        @Override\r\n        public void onSuccess(SendResult<String, String> result) {\r\n            System.out.println(\"Sent message=[\" + message + \r\n              \"] with offset=[\" + result.getRecordMetadata().offset() + \"]\");\r\n        }\r\n        @Override\r\n        public void onFailure(Throwable ex) {\r\n            System.out.println(\"Unable to send message=[\" \r\n              + message + \"] due to : \" + ex.getMessage());\r\n        }\r\n    });\r\n}\r\n```","```\r\n@EnableKafka\r\n@Configuration\r\npublic class KafkaConsumerConfig {\r\n\r\n    @Bean\r\n    public ConsumerFactory<String, String> consumerFactory() {\r\n        Map<String, Object> props = new HashMap<>();\r\n        props.put(\r\n          ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \r\n          bootstrapAddress);\r\n        props.put(\r\n          ConsumerConfig.GROUP_ID_CONFIG, \r\n          groupId);\r\n        props.put(\r\n          ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \r\n          StringDeserializer.class);\r\n        props.put(\r\n          ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, \r\n          StringDeserializer.class);\r\n        return new DefaultKafkaConsumerFactory<>(props);\r\n    }\r\n\r\n    @Bean\r\n    public ConcurrentKafkaListenerContainerFactory<String, String> \r\n      kafkaListenerContainerFactory() {\r\n\r\n        ConcurrentKafkaListenerContainerFactory<String, String> factory =\r\n          new ConcurrentKafkaListenerContainerFactory<>();\r\n        factory.setConsumerFactory(consumerFactory());\r\n        return factory;\r\n    }\r\n}\r\n```","```\r\n@KafkaListener(topics = \"topicName\", groupId = \"foo\")\r\npublic void listenGroupFoo(String message) {\r\n    System.out.println(\"Received Message in group foo: \" + message);\r\n}\r\n```","```\r\n@KafkaListener(topics = \"topic1, topic2\", groupId = \"foo\")\r\n```","```\r\n@KafkaListener(topics = \"topicName\")\r\npublic void listenWithHeaders(\r\n  @Payload String message, \r\n  @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) {\r\n      System.out.println(\r\n        \"Received Message: \" + message\"\r\n        + \"from partition: \" + partition);\r\n}\r\n```","```\r\n@KafkaListener(\r\n  topicPartitions = @TopicPartition(topic = \"topicName\",\r\n  partitionOffsets = {\r\n    @PartitionOffset(partition = \"0\", initialOffset = \"0\"), \r\n    @PartitionOffset(partition = \"3\", initialOffset = \"0\")}),\r\n  containerFactory = \"partitionsKafkaListenerContainerFactory\")\r\npublic void listenToPartition(\r\n  @Payload String message, \r\n  @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) {\r\n      System.out.println(\r\n        \"Received Message: \" + message\"\r\n        + \"from partition: \" + partition);\r\n}\r\n```","```\r\n@KafkaListener(topicPartitions \r\n  = @TopicPartition(topic = \"topicName\", partitions = { \"0\", \"1\" }))\r\n```","```\r\n@Bean\r\npublic ConcurrentKafkaListenerContainerFactory<String, String>\r\n  filterKafkaListenerContainerFactory() {\r\n\r\n    ConcurrentKafkaListenerContainerFactory<String, String> factory =\r\n      new ConcurrentKafkaListenerContainerFactory<>();\r\n    factory.setConsumerFactory(consumerFactory());\r\n    factory.setRecordFilterStrategy(\r\n      record -> record.value().contains(\"World\"));\r\n    return factory;\r\n}\r\n```","```\r\n@KafkaListener(\r\n  topics = \"topicName\", \r\n  containerFactory = \"filterKafkaListenerContainerFactory\")\r\npublic void listenWithFilter(String message) {\r\n    System.out.println(\"Received Message in filtered listener: \" + message);\r\n}\r\n```","```\r\npublic class Greeting {\r\n\r\n    private String msg;\r\n    private String name;\r\n\r\n    // standard getters, setters and constructor\r\n}\r\n```","```\r\n@Bean\r\npublic ProducerFactory<String, Greeting> greetingProducerFactory() {\r\n    // ...\r\n    configProps.put(\r\n      ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \r\n      JsonSerializer.class);\r\n    return new DefaultKafkaProducerFactory<>(configProps);\r\n}\r\n\r\n@Bean\r\npublic KafkaTemplate<String, Greeting> greetingKafkaTemplate() {\r\n    return new KafkaTemplate<>(greetingProducerFactory());\r\n}\r\n```","```\r\nkafkaTemplate.send(topicName, new Greeting(\"Hello\", \"World\"));\r\n```","```\r\n@Bean\r\npublic ConsumerFactory<String, Greeting> greetingConsumerFactory() {\r\n    // ...\r\n    return new DefaultKafkaConsumerFactory<>(\r\n      props,\r\n      new StringDeserializer(), \r\n      new JsonDeserializer<>(Greeting.class));\r\n}\r\n\r\n@Bean\r\npublic ConcurrentKafkaListenerContainerFactory<String, Greeting> \r\n  greetingKafkaListenerContainerFactory() {\r\n\r\n    ConcurrentKafkaListenerContainerFactory<String, Greeting> factory =\r\n      new ConcurrentKafkaListenerContainerFactory<>();\r\n    factory.setConsumerFactory(greetingConsumerFactory());\r\n    return factory;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.9.7</version>\r\n</dependency>\r\n```","```\r\n@KafkaListener(\r\n  topics = \"topicName\", \r\n  containerFactory = \"greetingKafkaListenerContainerFactory\")\r\npublic void greetingListener(Greeting greeting) {\r\n    // process greeting message\r\n}\r\n```"]