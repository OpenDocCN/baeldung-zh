["```\r\n<dependency>\r\n    <groupId>commons-net</groupId>\r\n    <artifactId>commons-net</artifactId>\r\n    <version>3.6</version>\r\n</dependency>\r\n<dependency> \r\n    <groupId>org.mockftpserver</groupId> \r\n    <artifactId>MockFtpServer</artifactId> \r\n    <version>2.7.1</version> \r\n    <scope>test</scope> \r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenRemoteFile_whenDownloading_thenItIsOnTheLocalFilesystem() throws IOException {\r\n    String ftpUrl = String.format(\r\n      \"ftp://user:[[emailÂ protected]](/web/20220905150932/https://www.baeldung.com/cdn-cgi/l/email-protection):%d/foobar.txt\", fakeFtpServer.getServerControlPort());\r\n\r\n    URLConnection urlConnection = new URL(ftpUrl).openConnection();\r\n    InputStream inputStream = urlConnection.getInputStream();\r\n    Files.copy(inputStream, new File(\"downloaded_buz.txt\").toPath());\r\n    inputStream.close();\r\n\r\n    assertThat(new File(\"downloaded_buz.txt\")).exists();\r\n\r\n    new File(\"downloaded_buz.txt\").delete(); // cleanup\r\n}\r\n```","```\r\nclass FtpClient {\r\n\r\n    private String server;\r\n    private int port;\r\n    private String user;\r\n    private String password;\r\n    private FTPClient ftp;\r\n\r\n    // constructor\r\n\r\n    void open() throws IOException {\r\n        ftp = new FTPClient();\r\n\r\n        ftp.addProtocolCommandListener(new PrintCommandListener(new PrintWriter(System.out)));\r\n\r\n        ftp.connect(server, port);\r\n        int reply = ftp.getReplyCode();\r\n        if (!FTPReply.isPositiveCompletion(reply)) {\r\n            ftp.disconnect();\r\n            throw new IOException(\"Exception in connecting to FTP Server\");\r\n        }\r\n\r\n        ftp.login(user, password);\r\n    }\r\n\r\n    void close() throws IOException {\r\n        ftp.disconnect();\r\n    }\r\n}\r\n```","```\r\npublic class FtpClientIntegrationTest {\r\n\r\n    private FakeFtpServer fakeFtpServer;\r\n\r\n    private FtpClient ftpClient;\r\n\r\n    @Before\r\n    public void setup() throws IOException {\r\n        fakeFtpServer = new FakeFtpServer();\r\n        fakeFtpServer.addUserAccount(new UserAccount(\"user\", \"password\", \"/data\"));\r\n\r\n        FileSystem fileSystem = new UnixFakeFileSystem();\r\n        fileSystem.add(new DirectoryEntry(\"/data\"));\r\n        fileSystem.add(new FileEntry(\"/data/foobar.txt\", \"abcdef 1234567890\"));\r\n        fakeFtpServer.setFileSystem(fileSystem);\r\n        fakeFtpServer.setServerControlPort(0);\r\n\r\n        fakeFtpServer.start();\r\n\r\n        ftpClient = new FtpClient(\"localhost\", fakeFtpServer.getServerControlPort(), \"user\", \"password\");\r\n        ftpClient.open();\r\n    }\r\n\r\n    @After\r\n    public void teardown() throws IOException {\r\n        ftpClient.close();\r\n        fakeFtpServer.stop();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenRemoteFile_whenListingRemoteFiles_thenItIsContainedInList() throws IOException {\r\n    Collection<String> files = ftpClient.listFiles(\"\");\r\n    assertThat(files).contains(\"foobar.txt\");\r\n}\r\n```","```\r\nCollection<String> listFiles(String path) throws IOException {\r\n    FTPFile[] files = ftp.listFiles(path);\r\n    return Arrays.stream(files)\r\n      .map(FTPFile::getName)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\n@Test\r\npublic void givenRemoteFile_whenDownloading_thenItIsOnTheLocalFilesystem() throws IOException {\r\n    ftpClient.downloadFile(\"/buz.txt\", \"downloaded_buz.txt\");\r\n    assertThat(new File(\"downloaded_buz.txt\")).exists();\r\n    new File(\"downloaded_buz.txt\").delete(); // cleanup\r\n}\r\n```","```\r\nvoid downloadFile(String source, String destination) throws IOException {\r\n    FileOutputStream out = new FileOutputStream(destination);\r\n    ftp.retrieveFile(source, out);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLocalFile_whenUploadingIt_thenItExistsOnRemoteLocation() \r\n  throws URISyntaxException, IOException {\r\n\r\n    File file = new File(getClass().getClassLoader().getResource(\"baz.txt\").toURI());\r\n    ftpClient.putFileToPath(file, \"/buz.txt\");\r\n    assertThat(fakeFtpServer.getFileSystem().exists(\"/buz.txt\")).isTrue();\r\n}\r\n```","```\r\nvoid putFileToPath(File file, String path) throws IOException {\r\n    ftp.storeFile(path, new FileInputStream(file));\r\n}\r\n```"]