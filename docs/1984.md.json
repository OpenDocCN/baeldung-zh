["```\r\n@Component\r\npublic class SampleJob implements Job {\r\n\r\n    @Autowired\r\n    private SampleJobService jobService;\r\n\r\n    public void execute(JobExecutionContext context) throws JobExecutionException {\r\n        jobService.executeSampleJob();\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic JobDetail jobDetail() {\r\n    return JobBuilder.newJob().ofType(SampleJob.class)\r\n      .storeDurably()\r\n      .withIdentity(\"Qrtz_Job_Detail\")  \r\n      .withDescription(\"Invoke Sample Job service...\")\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic JobDetailFactoryBean jobDetail() {\r\n    JobDetailFactoryBean jobDetailFactory = new JobDetailFactoryBean();\r\n    jobDetailFactory.setJobClass(SampleJob.class);\r\n    jobDetailFactory.setDescription(\"Invoke Sample Job service...\");\r\n    jobDetailFactory.setDurability(true);\r\n    return jobDetailFactory;\r\n}\r\n```","```\r\n@Bean\r\npublic Trigger trigger(JobDetail job) {\r\n    return TriggerBuilder.newTrigger().forJob(job)\r\n      .withIdentity(\"Qrtz_Trigger\")\r\n      .withDescription(\"Sample trigger\")\r\n      .withSchedule(simpleSchedule().repeatForever().withIntervalInHours(1))\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic SimpleTriggerFactoryBean trigger(JobDetail job) {\r\n    SimpleTriggerFactoryBean trigger = new SimpleTriggerFactoryBean();\r\n    trigger.setJobDetail(job);\r\n    trigger.setRepeatInterval(3600000);\r\n    trigger.setRepeatCount(SimpleTrigger.REPEAT_INDEFINITELY);\r\n    return trigger;\r\n}\r\n```","```\r\norg.quartz.jobStore.class=org.quartz.simpl.RAMJobStore\r\n```","```\r\nspring.quartz.job-store-type=memory\r\n```","```\r\norg.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX\r\norg.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\r\norg.quartz.jobStore.dataSource=quartzDataSource\r\n```","```\r\nspring.quartz.job-store-type=jdbc\r\n```","```\r\n@Configuration\r\n@EnableAutoConfiguration\r\npublic class SpringQrtzScheduler {\r\n\r\n    @Bean\r\n    @QuartzDataSource\r\n    public DataSource quartzDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic Scheduler scheduler(Trigger trigger, JobDetail job, SchedulerFactoryBean factory) \r\n  throws SchedulerException {\r\n    Scheduler scheduler = factory.getScheduler();\r\n    scheduler.scheduleJob(job, trigger);\r\n    scheduler.start();\r\n    return scheduler;\r\n}\r\n```","```\r\n@Bean\r\npublic SchedulerFactoryBean scheduler(Trigger trigger, JobDetail job, DataSource quartzDataSource) {\r\n    SchedulerFactoryBean schedulerFactory = new SchedulerFactoryBean();\r\n    schedulerFactory.setConfigLocation(new ClassPathResource(\"quartz.properties\"));\r\n\r\n    schedulerFactory.setJobFactory(springBeanJobFactory());\r\n    schedulerFactory.setJobDetails(job);\r\n    schedulerFactory.setTriggers(trigger);\r\n    schedulerFactory.setDataSource(quartzDataSource);\r\n    return schedulerFactory;\r\n}\r\n```","```\r\n@Bean\r\npublic SpringBeanJobFactory springBeanJobFactory() {\r\n    AutoWiringSpringBeanJobFactory jobFactory = new AutoWiringSpringBeanJobFactory();\r\n    jobFactory.setApplicationContext(applicationContext);\r\n    return jobFactory;\r\n}\r\n```"]