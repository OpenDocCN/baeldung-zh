["```\r\ndef postmanGet = new URL('https://postman-echo.com/get')\r\ndef getConnection = postmanGet.openConnection()\r\ngetConnection.requestMethod = 'GET'\r\nassert getConnection.responseCode == 200\r\n```","```\r\ndef postmanPost = new URL('https://postman-echo.com/post')\r\ndef postConnection = postmanPost.openConnection()\r\npostConnection.requestMethod = 'POST'\r\nassert postConnection.responseCode == 200\r\n```","```\r\ndef form = \"param1=This is request parameter.\"\r\npostConnection.doOutput = true\r\ndef text\r\npostConnection.with {\r\n    outputStream.withWriter { outputStreamWriter ->\r\n        outputStreamWriter << form\r\n    }\r\n    text = content.text\r\n}\r\nassert postConnection.responseCode == 200\r\n```","```\r\nJsonSlurper jsonSlurper = new JsonSlurper()\r\nassert jsonSlurper.parseText(text)?.json.param1 == \"This is request parameter.\"\r\n```","```\r\ndef rssFeed = new XmlParser()\r\n    .parse(\"https://news.google.com/rss?hl=en-US&gl;=US&ceid;=US:en\")\r\ndef stories = []\r\n(0..4).each {\r\n    def item = rssFeed.channel.item.get(it)\r\n    stories << item.title.text()\r\n}\r\nassert stories.size() == 5\r\n```","```\r\ndef atomFeed = new XmlParser()\r\n    .parse(\"https://news.google.com/atom?hl=en-US&gl;=US&ceid;=US:en\")\r\ndef stories = []\r\n(0..4).each {\r\n    def entry = atomFeed.entry.get(it)\r\n    stories << entry.title.text()\r\n}\r\nassert stories.size() == 5\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.groovy-wslite</groupId>\r\n    <artifactId>groovy-wslite</artifactId>\r\n    <version>1.1.3</version>\r\n</dependency>\r\n```","```\r\ncompile group: 'com.github.groovy-wslite', name: 'groovy-wslite', version: '1.1.3'\r\n```","```\r\n@Grab(group='com.github.groovy-wslite', module='groovy-wslite', version='1.1.3')\r\n```","```\r\ndef url = \"http://www.dataaccess.com/webservicesserver/numberconversion.wso\"\r\ndef soapClient = new SOAPClient(url)\r\ndef message = new SOAPMessageBuilder().build({\r\n    body {\r\n        NumberToWords(xmlns: \"http://www.dataaccess.com/webservicesserver/\") {\r\n            ubiNum(123)\r\n        }\r\n    }\r\n})\r\ndef response = soapClient.send(message.toString());\r\ndef words = response.NumberToWordsResponse\r\nassert words == \"one hundred and twenty three \"\r\n```","```\r\nRESTClient client = new RESTClient(\"https://postman-echo.com\")\r\ndef path = \"/get\"\r\ndef response\r\ntry {\r\n    response = client.get(path: path)\r\n    assert response.statusCode = 200\r\n    assert response.json?.headers?.host == \"postman-echo.com\"\r\n} catch (RESTClientException e) {\r\n    assert e?.response?.statusCode != 200\r\n}\r\n```","```\r\nclient.defaultAcceptHeader = ContentType.JSON\r\ndef path = \"/post\"\r\ndef params = [\"foo\":1,\"bar\":2]\r\ndef response = client.post(path: path) {\r\n    type ContentType.JSON\r\n    json params\r\n}\r\nassert response.json?.data == params \r\n```","```\r\ndef path = \"/basic-auth\"\r\nclient.authorization = new HTTPBasicAuthorization(\"postman\", \"password\")\r\nresponse = client.get(path: path)\r\nassert response.statusCode == 200\r\nassert response.json?.authenticated == true\r\n```","```\r\ndef response = client\r\n.get(path: path, headers: [\"Authorization\": \"Basic cG9zdG1hbjpwYXNzd29yZA==\"])\r\n```","```\r\ndef path = \"/oauth1\"\r\ndef params = [oauth_consumer_key: \"RKCGzna7bv9YD57c\", \r\n    oauth_signature_method: \"HMAC-SHA1\", \r\n    oauth_timestamp:1567089944, oauth_nonce: \"URT7v4\", oauth_version: 1.0, \r\n    oauth_signature: 'RGgR/ktDmclkM0ISWaFzebtlO0A=']\r\ndef response = new RESTClient(\"https://postman-echo.com\")\r\n    .get(path: path, query: params)\r\nassert response.statusCode == 200\r\nassert response.statusMessage == \"OK\"\r\nassert response.json.status == \"pass\"\r\n```"]