["```\r\npublic enum DaysOfWeekEnum {\r\n    SUNDAY,\r\n    MONDAY,\r\n    TUESDAY, \r\n    WEDNESDAY, \r\n    THURSDAY, \r\n    FRIDAY, \r\n    SATURDAY\r\n} \r\n```","```\r\nfor (DaysOfWeekEnum day : DaysOfWeekEnum.values()) { \r\n    System.out.println(day); \r\n}\r\n```","```\r\nStream.of(DaysOfWeekEnum.values());\r\n```","```\r\nArrays.stream(DaysOfWeekEnum.values());\r\n```","```\r\npublic enum DaysOfWeekEnum {\r\n\r\n    SUNDAY(\"off\"), \r\n    MONDAY(\"working\"), \r\n    TUESDAY(\"working\"), \r\n    WEDNESDAY(\"working\"), \r\n    THURSDAY(\"working\"), \r\n    FRIDAY(\"working\"), \r\n    SATURDAY(\"off\");\r\n\r\n    private String typeOfDay;\r\n\r\n    DaysOfWeekEnum(String typeOfDay) {\r\n        this.typeOfDay = typeOfDay;\r\n    }\r\n\r\n    // standard getters and setters \r\n\r\n    public static Stream<DaysOfWeekEnum> stream() {\r\n        return Stream.of(DaysOfWeekEnum.values()); \r\n    }\r\n}\r\n```","```\r\npublic class EnumStreamExample {\r\n\r\n    public static void main() {\r\n        DaysOfWeekEnum.stream()\r\n        .filter(d -> d.getTypeOfDay().equals(\"off\"))\r\n        .forEach(System.out::println);\r\n    }\r\n}\r\n```","```\r\nSUNDAY\r\nSATURDAY\r\n```","```\r\nArrays.asList(DaysOfWeekEnum.values())\r\n  .forEach(day -> System.out.println(day)); \r\n```","```\r\nEnumSet.allOf(DaysOfWeekEnum.class)\r\n  .forEach(day -> System.out.println(day));\r\n```","```\r\nList<DaysOfWeekEnum> days = new ArrayList<>();\r\ndays.add(DaysOfWeekEnum.FRIDAY);\r\ndays.add(DaysOfWeekEnum.SATURDAY);\r\ndays.add(DaysOfWeekEnum.SUNDAY);\r\nfor (DaysOfWeekEnum day : days) {\r\n    System.out.println(day);\r\n}\r\ndays.remove(DaysOfWeekEnum.SATURDAY);\r\nif (!days.contains(DaysOfWeekEnum.SATURDAY)) {\r\n    System.out.println(\"Saturday is no longer in the list\");\r\n}\r\nfor (DaysOfWeekEnum day : days) {\r\n    System.out.println(day);\r\n} \r\n```","```\r\nList<DaysOfWeekEnum> days = Arrays.asList(DaysOfWeekEnum.values());\r\ndays.remove(0); \r\n```"]