["```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<notification>\r\n    <from>[[email protected]](/web/20220826140012/https://www.baeldung.com/cdn-cgi/l/email-protection)</from>\r\n    <heading>Build #7 passed</heading>\r\n    <content>Success: The Jenkins CI build passed</content>\r\n</notification>\r\n```","```\r\n<dependency>\r\n    <groupId>javax.xml</groupId>\r\n    <artifactId>jaxp-api</artifactId>\r\n    <version>1.4.2</version>\r\n</dependency> \r\n```","```\r\nDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\r\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\r\nfactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n\r\nDocument input = factory\r\n  .newDocumentBuilder()\r\n  .parse(resourcePath);\r\nElement xml = input.getDocumentElement(); \r\n```","```\r\nMap<String, String> map = new HashMap<>();\r\nmap.put(\"heading\", \r\n  xml.getElementsByTagName(\"heading\")\r\n    .item(0)\r\n    .getTextContent());\r\nmap.put(\"from\", String.format(\"from: %s\",\r\n  xml.getElementsByTagName(\"from\")\r\n    .item(0)\r\n    .getTextContent()));\r\nmap.put(\"content\", \r\n  xml.getElementsByTagName(\"content\")\r\n    .item(0)\r\n    .getTextContent());\r\n```","```\r\nDocument doc = factory\r\n  .newDocumentBuilder()\r\n  .newDocument(); \r\n```","```\r\nElement html = doc.createElement(\"html\");\r\n\r\nElement head = doc.createElement(\"head\");\r\nhtml.setAttribute(\"lang\", \"en\");\r\n\r\nElement title = doc.createElement(\"title\");\r\ntitle.setTextContent(map.get(\"heading\"));\r\n\r\nhead.appendChild(title);\r\nhtml.appendChild(head);\r\n\r\nElement body = doc.createElement(\"body\");\r\n\r\nElement from = doc.createElement(\"p\");\r\nfrom.setTextContent(map.get(\"from\"));\r\n\r\nElement success = doc.createElement(\"p\");\r\nsuccess.setTextContent(map.get(\"content\"));\r\n\r\nbody.appendChild(from);\r\nbody.appendChild(success);\r\n\r\nhtml.appendChild(body);\r\ndoc.appendChild(html); \r\n```","```\r\nTransformerFactory transformerFactory = TransformerFactory.newInstance();\r\ntransformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\r\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\r\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\r\n\r\ntry (Writer output = new StringWriter()) {\r\n    Transformer transformer = transformerFactory.newTransformer();\r\n    transformer.transform(new DOMSource(doc), new StreamResult(output));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>javax.xml.stream</groupId>\r\n    <artifactId>stax-api</artifactId>\r\n    <version>1.0-2</version>\r\n</dependency> \r\n```","```\r\nXMLInputFactory factory = XMLInputFactory.newInstance();\r\nfactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\r\nfactory.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\r\nXMLStreamReader input = null;\r\ntry (FileInputStream file = new FileInputStream(resourcePath)) {\r\n    input = factory.createXMLStreamReader(file);\r\n\r\n    Map<String, String> map = new HashMap<>();\r\n    while (input.hasNext()) {\r\n        input.next();\r\n        if (input.isStartElement()) {\r\n            if (input.getLocalName().equals(\"heading\")) {\r\n                map.put(\"heading\", input.getElementText());\r\n            }\r\n            if (input.getLocalName().equals(\"from\")) {\r\n                map.put(\"from\", String.format(\"from: %s\", input.getElementText()));\r\n            }\r\n            if (input.getLocalName().equals(\"content\")) {\r\n                map.put(\"content\", input.getElementText());\r\n            }\r\n        }\r\n    }\r\n} finally {\r\n    if (input != null) {\r\n        input.close();\r\n    }\r\n}\r\n```","```\r\ntry (Writer output = new StringWriter()) {\r\n    XMLStreamWriter writer = XMLOutputFactory\r\n      .newInstance()\r\n      .createXMLStreamWriter(output);\r\n\r\n    writer.writeDTD(\"<!DOCTYPE html>\");\r\n    writer.writeStartElement(\"html\");\r\n    writer.writeAttribute(\"lang\", \"en\");\r\n    writer.writeStartElement(\"head\");\r\n    writer.writeDTD(\"<META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\");\r\n    writer.writeStartElement(\"title\");\r\n    writer.writeCharacters(map.get(\"heading\"));\r\n    writer.writeEndElement();\r\n    writer.writeEndElement();\r\n\r\n    writer.writeStartElement(\"body\");\r\n\r\n    writer.writeStartElement(\"p\");\r\n    writer.writeCharacters(map.get(\"from\"));\r\n    writer.writeEndElement();\r\n\r\n    writer.writeStartElement(\"p\");\r\n    writer.writeCharacters(map.get(\"content\"));\r\n    writer.writeEndElement();\r\n\r\n    writer.writeEndElement();\r\n    writer.writeEndDocument();\r\n    writer.flush();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.freemarker</groupId>\r\n    <artifactId>freemarker</artifactId>\r\n    <version>2.3.29</version>\r\n</dependency>\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n    <title>${heading}</title>\r\n</head>\r\n<body>\r\n<p>${from}</p>\r\n<p>${content}</p>\r\n</body>\r\n</html>\r\n```","```\r\nConfiguration cfg = new Configuration(Configuration.VERSION_2_3_29);\r\ncfg.setDirectoryForTemplateLoading(new File(templateDirectory));\r\ncfg.setDefaultEncoding(StandardCharsets.UTF_8.toString());\r\ncfg.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\r\ncfg.setLogTemplateExceptions(false);\r\ncfg.setWrapUncheckedExceptions(true);\r\ncfg.setFallbackOnNullLoopVariable(false);\r\nTemplate temp = cfg.getTemplate(templateFile);\r\ntry (Writer output = new StringWriter()) {\r\n    temp.process(staxTransformer.getMap(), output);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.spullara.mustache.java</groupId>\r\n    <artifactId>compiler</artifactId>\r\n    <version>0.9.6</version>\r\n</dependency>\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n    <title>{{heading}}</title>\r\n</head>\r\n<body>\r\n<p>{{from}}</p>\r\n<p>{{content}}</p>\r\n</body>\r\n</html>\r\n```","```\r\nMustacheFactory mf = new DefaultMustacheFactory();\r\nMustache mustache = mf.compile(templateFile);\r\ntry (Writer output = new StringWriter()) {\r\n    mustache.execute(output, staxTransformer.getMap());\r\n    output.flush();\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n    <title>Build #7 passed</title>\r\n</head>\r\n<body>\r\n<p>from: [[email protected]](/web/20220826140012/https://www.baeldung.com/cdn-cgi/l/email-protection)</p>\r\n<p>Success: The Jenkins CI build passed</p>\r\n</body>\r\n</html>\r\n```"]