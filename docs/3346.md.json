["```\r\n<dependency>\r\n    <groupId>org.jdeferred</groupId>\r\n    <artifactId>jdeferred-core</artifactId>\r\n    <version>1.2.6</version>\r\n</dependency>\r\n```","```\r\n$.ajax(\"/GetEmployees\")\r\n    .done(\r\n        function() {\r\n            alert( \"success\" );\r\n        }\r\n     )\r\n    .fail(\r\n        function() {\r\n            alert( \"error\" );\r\n        }\r\n     )\r\n    .always(\r\n        function() {\r\n            alert( \"complete\" );\r\n        }\r\n    );\r\n```","```\r\nDeferred<String, String, String> deferred\r\n  = new DeferredObject<>();\r\nPromise<String, String, String> promise = deferred.promise();\r\n\r\npromise.done(result -> System.out.println(\"Job done\"))\r\n  .fail(rejection -> System.out.println(\"Job fail\"))\r\n  .progress(progress -> System.out.println(\"Job is in progress\"))\r\n  .always((state, result, rejection) -> \r\n    System.out.println(\"Job execution started\"));\r\n\r\ndeferred.resolve(\"msg\");\r\ndeferred.notify(\"notice\");\r\ndeferred.reject(\"oops\");\r\n```","```\r\nprivate static String modifiedMsg;\r\n\r\nstatic String filter(String msg) {\r\n    Deferred<String, ?, ?> d = new DeferredObject<>();\r\n    Promise<String, ?, ?> p = d.promise();\r\n    Promise<String, ?, ?> filtered = p.then((result) > {\r\n        modifiedMsg = \"Hello \"  result;\r\n    });\r\n\r\n    filtered.done(r > System.out.println(\"filtering done\"));\r\n\r\n    d.resolve(msg);\r\n    return modifiedMsg;\r\n}\r\n```","```\r\npublic enum Result { \r\n    SUCCESS, FAILURE \r\n}; \r\n\r\nprivate static Result status; \r\n\r\npublic static Result validate(int num) { \r\n    Deferred<Integer, ?, ?> d = new DeferredObject<>(); \r\n    Promise<Integer, ?, ?> p = d.promise(); \r\n\r\n    p.then((DonePipe<Integer, Integer, Exception, Void>) result > {\r\n        public Deferred<Integer, Exception, Void> pipeDone(Integer result) {\r\n            if (result < 90) {\r\n                return new DeferredObject<Integer, Exception, Void>()\r\n                  .resolve(result);\r\n            } else {\r\n                return new DeferredObject<Integer, Exception, Void>()\r\n                  .reject(new Exception(\"Unacceptable value\"));\r\n            }\r\n    }).done(r > status = Result.SUCCESS )\r\n      .fail(r > status = Result.FAILURE );\r\n\r\n    d.resolve(num);\r\n    return status;\r\n}\r\n```","```\r\nDeferred<String, String, String> deferred = new DeferredObject<>();\r\nDeferredManager dm = new DefaultDeferredManager();\r\nPromise<String, String, String> p1 = deferred.promise(), \r\n  p2 = deferred.promise(), \r\n  p3 = deferred.promise();\r\ndm.when(p1, p2, p3)\r\n  .done(result -> ... )\r\n  .fail(result -> ... );\r\ndeferred.resolve(\"Hello Baeldung\");\r\n```","```\r\nExecutorService executor = Executors.newFixedThreadPool(10);\r\nDeferredManager dm = new DefaultDeferredManager(executor);\r\n```","```\r\nDeferredManager dm = new DefaultDeferredManager();\r\ndm.when(() -> {\r\n    // return something and raise an exception to interrupt the task\r\n}).done(result -> ... )\r\n  .fail(e -> ... );\r\n```","```\r\nDeferredManager dm = new DefaultDeferredManager();\r\nDeferred<String, String, String> deferred = new DeferredObject<>();\r\nPromise<String, String, String> p1 = deferred.promise();\r\nPromise<String, String, String> p = dm\r\n  .when(p1)\r\n  .done(result -> ... )\r\n  .fail(result -> ... );\r\n\r\nsynchronized (p) {\r\n    while (p.isPending()) {\r\n        try {\r\n            p.wait();\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\ndeferred.resolve(\"Hello Baeldung\");\r\n```","```\r\ntry {\r\n    p.waitSafely();\r\n} catch (InterruptedException e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.jdeferred</groupId>\r\n    <artifactId>jdeferred-android</artifactId>\r\n    <version>1.2.6</version>\r\n    <type>apklib</type>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jdeferred</groupId>\r\n    <artifactId>jdeferred-android-aar</artifactId>\r\n    <version>1.2.6</version>\r\n    <type>aar</type>\r\n</dependency>\r\n```"]