["```\r\n<dependency>\r\n    <groupId>com.github.tomakehurst</groupId>\r\n    <artifactId>wiremock</artifactId>\r\n    <version>2.21.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n\"use composition rather than inheritance\" \r\n```","```\r\npublic class WireMockScenarioExampleIntegrationTest {\r\n    private static final String THIRD_STATE = \"third\";\r\n    private static final String SECOND_STATE = \"second\";\r\n    private static final String TIP_01 = \"finally block is not called when System.exit()\" \r\n      + \" is called in the try block\";\r\n    private static final String TIP_02 = \"keep your code clean\";\r\n    private static final String TIP_03 = \"use composition rather than inheritance\";\r\n    private static final String TEXT_PLAIN = \"text/plain\";\r\n\r\n    static int port = 9999;\r\n\r\n    @Rule\r\n    public WireMockRule wireMockRule = new WireMockRule(port);    \r\n\r\n    @Test\r\n    public void changeStateOnEachCallTest() throws IOException {\r\n        createWireMockStub(Scenario.STARTED, SECOND_STATE, TIP_01);\r\n        createWireMockStub(SECOND_STATE, THIRD_STATE, TIP_02);\r\n        createWireMockStub(THIRD_STATE, Scenario.STARTED, TIP_03);\r\n\r\n    }\r\n\r\n    private void createWireMockStub(String currentState, String nextState, String responseBody) {\r\n        stubFor(get(urlEqualTo(\"/java-tip\"))\r\n          .inScenario(\"java tips\")\r\n          .whenScenarioStateIs(currentState)\r\n          .willSetStateTo(nextState)\r\n          .willReturn(aResponse()\r\n            .withStatus(200)\r\n            .withHeader(\"Content-Type\", TEXT_PLAIN)\r\n            .withBody(responseBody)));\r\n    }\r\n\r\n}\r\n```","```\r\n @Test\r\n    public void changeStateOnEachCallTest() throws IOException {\r\n        createWireMockStub(Scenario.STARTED, SECOND_STATE, TIP_01);\r\n        createWireMockStub(SECOND_STATE, THIRD_STATE, TIP_02);\r\n        createWireMockStub(THIRD_STATE, Scenario.STARTED, TIP_03);\r\n\r\n        assertEquals(TIP_01, nextTip());\r\n        assertEquals(TIP_02, nextTip());\r\n        assertEquals(TIP_03, nextTip());\r\n        assertEquals(TIP_01, nextTip());        \r\n    }\r\n\r\n    private String nextTip() throws ClientProtocolException, IOException {\r\n        CloseableHttpClient httpClient = HttpClients.createDefault();\r\n        HttpGet request = new HttpGet(String.format(\"http://localhost:%s/java-tip\", port));\r\n        HttpResponse httpResponse = httpClient.execute(request);\r\n        return firstLineOfResponse(httpResponse);\r\n    }\r\n\r\n    private static String firstLineOfResponse(HttpResponse httpResponse) throws IOException {\r\n        try (BufferedReader reader = new BufferedReader(\r\n          new InputStreamReader(httpResponse.getEntity().getContent()))) {\r\n            return reader.readLine();\r\n        }\r\n    }\r\n```"]