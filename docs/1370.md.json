["```\r\n<dependency>\r\n    <groupId>io.vertx</groupId>\r\n    <artifactId>vertx-rx-java2</artifactId>\r\n    <version>3.5.0-Beta1</version>\r\n</dependency> \r\n```","```\r\nVertx vertx = io.vertx.reactivex.core.Vertx.vertx();\r\n```","```\r\nFileSystem fileSystem = vertx.fileSystem();\r\nHttpClient httpClient = vertx.createHttpClient();\r\n```","```\r\nfileSystem\r\n  .rxReadFile(\"cities.txt\").toFlowable()\r\n  .flatMap(buffer -> Flowable.fromArray(buffer.toString().split(\"\\\\r?\\\\n\")))\r\n  .flatMap(city -> searchByCityName(httpClient, city))\r\n  .flatMap(HttpClientResponse::toFlowable)\r\n  .map(extractingWoeid())\r\n  .flatMap(cityId -> getDataByPlaceId(httpClient, cityId))\r\n  .flatMap(toBufferFlowable())\r\n  .map(Buffer::toJsonObject)\r\n  .map(toCityAndDayLength())\r\n  .subscribe(System.out::println, Throwable::printStackTrace);\r\n```","```\r\nfileSystem\r\n .rxReadFile(\"cities.txt\").toFlowable()\r\n .flatMap(buffer -> Flowable.fromArray(buffer.toString().split(\"\\\\r?\\\\n\"))) \r\n```","```\r\n.flatMap(city -> searchByCityName(httpClient, city))\r\n.flatMap(HttpClientResponse::toFlowable) \r\n```","```\r\nFlowable<HttpClientResponse> searchByCityName(HttpClient httpClient, String cityName) {\r\n    HttpClientRequest req = httpClient.get(\r\n        new RequestOptions()\r\n          .setHost(\"www.metaweather.com\")\r\n          .setPort(443)\r\n          .setSsl(true)\r\n          .setURI(format(\"/api/location/search/?query=%s\", cityName)));\r\n    return req\r\n      .toFlowable()\r\n      .doOnSubscribe(subscription -> req.end());\r\n}\r\n```","```\r\n.map(extractingWoeid())\r\n```","```\r\nprivate static Function<Buffer, Long> extractingWoeid() {\r\n    return cityBuffer -> cityBuffer\r\n      .toJsonArray()\r\n      .getJsonObject(0)\r\n      .getLong(\"woeid\");\r\n}\r\n```","```\r\n.flatMap(cityId -> getDataByPlaceId(httpClient, cityId))\r\n.flatMap(toBufferFlowable())\r\n```","```\r\nstatic Flowable<HttpClientResponse> getDataByPlaceId(\r\n  HttpClient httpClient, long placeId) {\r\n\r\n    return autoPerformingReq(\r\n      httpClient,\r\n      format(\"/api/location/%s/\", placeId));\r\n}\r\n```","```\r\nstatic Function<HttpClientResponse, Publisher<? extends Buffer>>\r\n  toBufferFlowable() {\r\n    return response -> response\r\n      .toObservable()\r\n      .reduce(\r\n        Buffer.buffer(),\r\n        Buffer::appendBuffer).toFlowable();\r\n}\r\n```","```\r\n.map(toCityAndDayLength())\r\n```","```\r\nstatic Function<JsonObject, CityAndDayLength> toCityAndDayLength() {\r\n    return json -> {\r\n        ZonedDateTime sunRise = ZonedDateTime.parse(json.getString(\"sun_rise\"));\r\n        ZonedDateTime sunSet = ZonedDateTime.parse(json.getString(\"sun_set\"));\r\n        String cityName = json.getString(\"title\");\r\n        return new CityAndDayLength(\r\n          cityName, sunSet.toEpochSecond() - sunRise.toEpochSecond());\r\n    };\r\n}\r\n```","```\r\n.subscribe(\r\n  System.out::println, \r\n  Throwable::printStackTrace)\r\n```","```\r\nIn Chicago there are 13.3 hours of light.\r\nIn Milan there are 13.5 hours of light.\r\nIn Cairo there are 12.9 hours of light.\r\nIn Moscow there are 14.1 hours of light.\r\nIn Santiago there are 11.3 hours of light.\r\nIn Auckland there are 11.2 hours of light.\r\n```"]