["```\r\n@Test\r\npublic void whenListIsOfIntegerThenMaxCanBeDoneUsingIntegerComparator() {\r\n    // given\r\n    List<Integer> listOfIntegers = Arrays.asList(1, 2, 3, 4, 56, 7, 89, 10);\r\n    Integer expectedResult = 89;\r\n\r\n    // then\r\n    Integer max = listOfIntegers\r\n      .stream()\r\n      .mapToInt(v -> v)\r\n      .max().orElseThrow(NoSuchElementException::new);\r\n\r\n    assertEquals(\"Should be 89\", expectedResult, max);\r\n}\r\n```","```\r\nclass Person {\r\n    String name;\r\n    Integer age;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenListIsOfPersonObjectThenMinCanBeDoneUsingCustomComparatorThroughLambda() {\r\n    // given\r\n    Person alex = new Person(\"Alex\", 23);\r\n    Person john = new Person(\"John\", 40);\r\n    Person peter = new Person(\"Peter\", 32);\r\n    List<Person> people = Arrays.asList(alex, john, peter);\r\n\r\n    // then\r\n    Person minByAge = people\r\n      .stream()\r\n      .min(Comparator.comparing(Person::getAge))\r\n      .orElseThrow(NoSuchElementException::new);\r\n\r\n    assertEquals(\"Should be Alex\", alex, minByAge);\r\n}\r\n```"]