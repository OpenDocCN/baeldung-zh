["```\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jdbc</artifactId>\r\n</dependency>\r\n```","```\r\nCREATE TABLE product (\r\n    id              SERIAL PRIMARY KEY,\r\n    title           VARCHAR(40),\r\n    created_ts      timestamp without time zone,\r\n    price           numeric\r\n);\r\n```","```\r\npublic class Product {\r\n    private long id;\r\n    private String title;\r\n    private LocalDateTime createdTs;\r\n    private BigDecimal price;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\nspring.datasource.url=jdbc:postgresql://localhost:5432/sample-baeldung-db\r\nspring.datasource.username=postgres\r\nspring.datasource.password=root\r\nspring.datasource.driver-class-name=org.postgresql.Driver\r\n```","```\r\npublic interface ProductRepository {\r\n    void saveAll(List<Product> products);\r\n} \r\n```","```\r\n@Repository\r\npublic class SimpleProductRepository implements ProductRepository {\r\n\r\n    private JdbcTemplate jdbcTemplate;\r\n\r\n    public SimpleProductRepository(JdbcTemplate jdbcTemplate) {\r\n      this.jdbcTemplate = jdbcTemplate;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void saveAll(List<Product> products) {\r\n      for (Product product : products) {\r\n        jdbcTemplate.update(\"INSERT INTO PRODUCT (TITLE, CREATED_TS, PRICE) \" +\r\n          \"VALUES (?, ?, ?)\",\r\n          product.getTitle(),\r\n          Timestamp.valueOf(product.getCreatedTs()),\r\n          product.getPrice());\r\n      }\r\n    }\r\n\r\n}\r\n```","```\r\npublic class ProductService {\r\n\r\n    private ProductRepository productRepository;\r\n    private Random random;\r\n    private Clock clock;\r\n\r\n    // constructor for the dependencies\r\n\r\n    private List<Product> generate(int count) {\r\n        final String[] titles = { \"car\", \"plane\", \"house\", \"yacht\" };\r\n        final BigDecimal[] prices = {\r\n          new BigDecimal(\"12483.12\"),\r\n          new BigDecimal(\"8539.99\"),\r\n          new BigDecimal(\"88894\"),\r\n          new BigDecimal(\"458694\")\r\n        };\r\n\r\n        final List<Product> products = new ArrayList<>(count);\r\n\r\n        for (int i = 0; i < count; i++) {\r\n            Product product = new Product();\r\n            product.setCreatedTs(LocalDateTime.now(clock));\r\n            product.setPrice(prices[random.nextInt(4)]);\r\n            product.setTitle(titles[random.nextInt(4)]);\r\n            products.add(product);\r\n        }\r\n        return products;\r\n    }\r\n} \r\n```","```\r\n@Transactional\r\npublic long createProducts(int count) {\r\n  List<Product> products = generate(count);\r\n  long startTime = clock.millis();\r\n  productRepository.saveAll(products);\r\n  return clock.millis() - startTime;\r\n}\r\n```","```\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public ProductService simpleProductService(SimpleProductRepository simpleProductRepository) {\r\n      return new ProductService(simpleProductRepository, new Random(), Clock.systemUTC());\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic class BatchProductRepository implements ProductRepository {\r\n\r\n    private JdbcTemplate jdbcTemplate;\r\n\r\n    public BatchProductRepository(JdbcTemplate jdbcTemplate) {\r\n      this.jdbcTemplate = jdbcTemplate;\r\n    }\r\n\r\n    @Override\r\n    @Transactional\r\n    public void saveAll(List<Product> products) {\r\n      jdbcTemplate.batchUpdate(\"INSERT INTO PRODUCT (TITLE, CREATED_TS, PRICE) \" +\r\n        \"VALUES (?, ?, ?)\",\r\n        products,\r\n        100,\r\n        (PreparedStatement ps, Product product) -> {\r\n          ps.setString(1, product.getTitle());\r\n          ps.setTimestamp(2, Timestamp.valueOf(product.getCreatedTs()));\r\n          ps.setBigDecimal(3, product.getPrice());\r\n        });\r\n     }\r\n}\r\n```","```\r\n@Bean\r\npublic ProductService batchProductService(BatchProductRepository batchProductRepository) {\r\n  return new ProductService(batchProductRepository, new Random(), Clock.systemUTC());\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringJdbcBatchPerformanceApplication implements CommandLineRunner {\r\n\r\n    @Autowired\r\n    @Qualifier(\"batchProductService\")\r\n    private ProductService batchProductService;\r\n    @Autowired\r\n    @Qualifier(\"simpleProductService\")\r\n    private ProductService simpleProductService;\r\n\r\n    public static void main(String[] args) {\r\n      SpringApplication.run(SpringJdbcBatchPerformanceApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n      int[] recordCounts = {1, 10, 100, 1000, 10_000, 100_000, 1000_000};\r\n\r\n      for (int recordCount : recordCounts) {\r\n        long regularElapsedTime = simpleProductService.createProducts(recordCount);\r\n        long batchElapsedTime = batchProductService.createProducts(recordCount);\r\n\r\n        System.out.println(String.join(\"\", Collections.nCopies(50, \"-\")));\r\n        System.out.format(\"%-20s%-5s%-10s%-5s%8sms\\n\", \"Regular inserts\", \"|\", recordCount, \"|\", regularElapsedTime);\r\n        System.out.format(\"%-20s%-5s%-10s%-5s%8sms\\n\", \"Batch inserts\", \"|\", recordCount, \"|\", batchElapsedTime);\r\n        System.out.printf(\"Total gain: %d %s\\n\", calculateGainInPercent(regularElapsedTime, batchElapsedTime), \"%\");\r\n      }\r\n\r\n    }\r\n\r\n    int calculateGainInPercent(long before, long after) {\r\n      return (int) Math.floor(100D * (before - after) / before);\r\n    }\r\n}\r\n```","```\r\n--------------------------------------------------\r\nRegular inserts     |    1         |          14ms\r\nBatch inserts       |    1         |           8ms\r\nTotal gain: 42 %\r\n--------------------------------------------------\r\nRegular inserts     |    10        |           4ms\r\nBatch inserts       |    10        |           1ms\r\nTotal gain: 75 %\r\n--------------------------------------------------\r\nRegular inserts     |    100       |          29ms\r\nBatch inserts       |    100       |           6ms\r\nTotal gain: 79 %\r\n--------------------------------------------------\r\nRegular inserts     |    1000      |         175ms\r\nBatch inserts       |    1000      |          24ms\r\nTotal gain: 86 %\r\n--------------------------------------------------\r\nRegular inserts     |    10000     |         861ms\r\nBatch inserts       |    10000     |         128ms\r\nTotal gain: 85 %\r\n--------------------------------------------------\r\nRegular inserts     |    100000    |        5098ms\r\nBatch inserts       |    100000    |        1126ms\r\nTotal gain: 77 %\r\n--------------------------------------------------\r\nRegular inserts     |    1000000   |       47738ms\r\nBatch inserts       |    1000000   |       13066ms\r\nTotal gain: 72 %\r\n-------------------------------------------------- \r\n```","```\r\n-- REGULAR INSERTS TO INSERT 4 RECORDS\r\nINSERT INTO PRODUCT\r\n(TITLE, CREATED_TS, PRICE)\r\nVALUES\r\n ('test1', LOCALTIMESTAMP, 100.10);\r\n\r\nINSERT INTO PRODUCT\r\n(TITLE, CREATED_TS, PRICE)\r\nVALUES\r\n ('test2', LOCALTIMESTAMP, 101.10);\r\n\r\nINSERT INTO PRODUCT\r\n(TITLE, CREATED_TS, PRICE)\r\nVALUES\r\n ('test3', LOCALTIMESTAMP, 102.10);\r\n\r\nINSERT INTO PRODUCT\r\n(TITLE, CREATED_TS, PRICE)\r\nVALUES\r\n ('test4', LOCALTIMESTAMP, 103.10);\r\n\r\n-- EQUIVALENT MULTI-VALUE INSERT\r\nINSERT INTO PRODUCT\r\n(TITLE, CREATED_TS, PRICE)\r\nVALUES\r\n ('test1', LOCALTIMESTAMP, 100.10),\r\n ('test2', LOCALTIMESTAMP, 101.10),\r\n ('test3', LOCALTIMESTAMP, 102.10),\r\n ('test4', LOCALTIMESTAMP, 104.10); \r\n```","```\r\n--------------------------------------------------\r\nRegular inserts     |    1         |          15ms\r\nBatch inserts       |    1         |          10ms\r\nTotal gain: 33 %\r\n--------------------------------------------------\r\nRegular inserts     |    10        |           3ms\r\nBatch inserts       |    10        |           2ms\r\nTotal gain: 33 %\r\n--------------------------------------------------\r\nRegular inserts     |    100       |          42ms\r\nBatch inserts       |    100       |          10ms\r\nTotal gain: 76 %\r\n--------------------------------------------------\r\nRegular inserts     |    1000      |         141ms\r\nBatch inserts       |    1000      |          19ms\r\nTotal gain: 86 %\r\n--------------------------------------------------\r\nRegular inserts     |    10000     |         827ms\r\nBatch inserts       |    10000     |         104ms\r\nTotal gain: 87 %\r\n--------------------------------------------------\r\nRegular inserts     |    100000    |        5093ms\r\nBatch inserts       |    100000    |         981ms\r\nTotal gain: 80 %\r\n--------------------------------------------------\r\nRegular inserts     |    1000000   |       50482ms\r\nBatch inserts       |    1000000   |        9821ms\r\nTotal gain: 80 %\r\n-------------------------------------------------- \r\n```"]