["```\r\ndouble[] getCoordinatesDoubleArray() {\r\n\r\n    double[] coordinates = new double[2];\r\n\r\n    coordinates[0] = 10;\r\n    coordinates[1] = 12.5;\r\n\r\n    return coordinates;\r\n}\r\n```","```\r\nNumber[] getCoordinatesNumberArray() {\r\n\r\n    Number[] coordinates = new Number[2];\r\n\r\n    coordinates[0] = 10;   // Integer\r\n    coordinates[1] = 12.5; // Double\r\n\r\n    return coordinates;\r\n}\r\n```","```\r\nList<Number> getCoordinatesList() {\r\n\r\n    List<Number> coordinates = new ArrayList<>();\r\n\r\n    coordinates.add(10);  // Integer\r\n    coordinates.add(12.5);  // Double\r\n\r\n    return coordinates;\r\n}\r\n```","```\r\nMap<String, Number> getCoordinatesMap() {\r\n\r\n    Map<String, Number> coordinates = new HashMap<>();\r\n\r\n    coordinates.put(\"longitude\", 10);\r\n    coordinates.put(\"latitude\", 12.5);\r\n\r\n    return coordinates;\r\n}\r\n```","```\r\npublic class Coordinates {\r\n\r\n    private double longitude;\r\n    private double latitude;\r\n    private String placeName;\r\n\r\n    public Coordinates(double longitude, double latitude, String placeName) {\r\n\r\n        this.longitude = longitude;\r\n        this.latitude = latitude;\r\n        this.placeName = placeName;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nCoordinates getCoordinates() {\r\n\r\n    double longitude = 10;\r\n    double latitude = 12.5;\r\n    String placeName = \"home\";\r\n\r\n    return new Coordinates(longitude, latitude, placeName);\r\n}\r\n```","```\r\npublic class Tuple2<K, V> {\r\n\r\n    private K first;\r\n    private V second;\r\n\r\n    public Tuple2(K first, V second){\r\n        this.first = first;\r\n        this.second = second;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nTuple2<Coordinates, Double> getMostDistantPoint(List<Coordinates> coordinatesList, \r\n                                                       Coordinates target) {\r\n\r\n    return coordinatesList.stream()\r\n      .map(coor -> new Tuple2<>(coor, coor.calculateDistance(target)))\r\n      .max((d1, d2) -> Double.compare(d1.getSecond(), d2.getSecond())) // compare distances\r\n      .get();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nImmutablePair<Coordinates, Double> getMostDistantPoint(\r\n  List<Coordinates> coordinatesList, Coordinates target) {\r\n    return coordinatesList.stream()\r\n      .map(coordinates -> ImmutablePair.of(coordinates, coordinates.calculateDistance(target)))\r\n      .max(Comparator.comparingDouble(Pair::getRight))\r\n      .get();\r\n}\r\n```","```\r\nImmutableTriple<Double, Double, Double> getMinAvgMaxTriple(\r\n  List<Coordinates> coordinatesList, Coordinates target) {\r\n    List<Double> distanceList = coordinatesList.stream()\r\n      .map(coordinates -> coordinates.calculateDistance(target))\r\n      .collect(Collectors.toList());\r\n    Double minDistance = distanceList.stream().mapToDouble(Double::doubleValue).min().getAsDouble();\r\n    Double avgDistance = distanceList.stream().mapToDouble(Double::doubleValue).average().orElse(0.0D);\r\n    Double maxDistance = distanceList.stream().mapToDouble(Double::doubleValue).max().getAsDouble();\r\n\r\n    return ImmutableTriple.of(minDistance, avgDistance, maxDistance);\r\n}\r\n```"]