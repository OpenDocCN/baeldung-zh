["```\r\ndocker run --name dataflow-rabbit -p 15672:15672 -p 5672:5672 -d rabbitmq:3-management\r\n```","```\r\nCREATE DATABASE dataflow;\r\n```","```\r\n$java -Dloader.path=lib -jar spring-cloud-dataflow-server-local-1.6.3.RELEASE.jar \\\r\n    --spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/dataflow \\\r\n    --spring.datasource.username=postgres_username \\\r\n    --spring.datasource.password=postgres_password \\\r\n    --spring.datasource.driver-class-name=org.postgresql.Driver \\\r\n    --spring.rabbitmq.host=127.0.0.1 \\\r\n    --spring.rabbitmq.port=5672 \\\r\n    --spring.rabbitmq.username=guest \\\r\n    --spring.rabbitmq.password=guest\r\n```","```\r\n$ java -jar spring-cloud-dataflow-shell-1.6.3.RELEASE.jar\r\n  ____                              ____ _                __\r\n / ___| _ __  _ __(_)_ __   __ _   / ___| | ___  _   _  __| |\r\n \\___ \\| '_ \\| '__| | '_ \\ / _` | | |   | |/ _ \\| | | |/ _` |\r\n  ___) | |_) | |  | | | | | (_| | | |___| | (_) | |_| | (_| |\r\n |____/| .__/|_|  |_|_| |_|\\__, |  \\____|_|\\___/ \\__,_|\\__,_|\r\n  ____ |_|    _          __|___/                 __________\r\n |  _ \\  __ _| |_ __ _  |  ___| | _____      __  \\ \\ \\ \\ \\ \\\r\n | | | |/ _` | __/ _` | | |_  | |/ _ \\ \\ /\\ / /   \\ \\ \\ \\ \\ \\\r\n | |_| | (_| | || (_| | |  _| | | (_) \\ V  V /    / / / / / /\r\n |____/ \\__,_|\\__\\__,_| |_|   |_|\\___/ \\_/\\_/    /_/_/_/_/_/\r\n\r\nWelcome to the Spring Cloud Data Flow shell. For assistance hit TAB or type \"help\".\r\ndataflow:>\r\n```","```\r\nserver-unknown:>dataflow config server http://{host}\r\n```","```\r\n$ dataflow:>app import --uri http://bit.ly/Darwin-SR1-stream-applications-rabbit-maven\r\n```","```\r\n$ dataflow:> app list\r\n```","```\r\nCREATE DATABASE crm;\r\n```","```\r\nCREATE TABLE customer (\r\n    id bigint NOT NULL,\r\n    imported boolean DEFAULT false,\r\n    customer_name character varying(50),\r\n    PRIMARY KEY(id)\r\n)\r\n```","```\r\nINSERT INTO customer(id, customer_name, imported) VALUES (1, 'John Doe', false);\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\r\n</dependency>\r\n```","```\r\npublic class Customer {\r\n\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @JsonProperty(\"customer_name\")\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    @JsonProperty(\"name\")\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    // Getters and Setters\r\n}\r\n```","```\r\nimport org.springframework.cloud.stream.annotation.EnableBinding;\r\nimport org.springframework.cloud.stream.messaging.Processor;\r\nimport org.springframework.integration.annotation.Transformer;\r\n\r\n@EnableBinding(Processor.class)\r\npublic class CustomerProcessorConfiguration {\r\n\r\n    @Transformer(inputChannel = Processor.INPUT, outputChannel = Processor.OUTPUT)\r\n    public Customer convertToPojo(Customer payload) {\r\n\r\n        return payload;\r\n    }\r\n}\r\n```","```\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\n\r\n@Document(collection=\"customer\")\r\npublic class Customer {\r\n\r\n    private Long id;\r\n    private String name;\r\n\r\n    // Getters and Setters\r\n}\r\n```","```\r\n@EnableBinding(Sink.class)\r\npublic class CustomerListener {\r\n\r\n    @Autowired\r\n    private CustomerRepository repository;\r\n\r\n    @StreamListener(Sink.INPUT)\r\n    public void save(Customer customer) {\r\n        repository.save(customer);\r\n    }\r\n}\r\n```","```\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface CustomerRepository extends MongoRepository<Customer, Long> {\r\n\r\n} \r\n```","```\r\napp register --name customer-transform --type processor --uri maven://com.customer:customer-transform:0.0.1-SNAPSHOT\r\n```","```\r\napp register --name customer-mongodb-sink --type sink --uri maven://com.customer:customer-mongodb-sink:jar:0.0.1-SNAPSHOT\r\n```","```\r\napp list\r\n```","```\r\nhttp --port=8181 | log\r\n```","```\r\njdbcÂ \r\n    --query='SELECT id, customer_name FROM public.customer WHERE imported = false'\r\n    --update='UPDATE public.customer SET imported = true WHERE id in (:id)'\r\n    --max-rows-per-poll=1000\r\n    --fixed-delay=30 --time-unit=SECONDS\r\n    --driver-class-name=org.postgresql.Driver\r\n    --url=jdbc:postgresql://localhost:5432/crm\r\n    --username=postgres\r\n    --password=postgres\r\n```","```\r\ncustomer-mongodb-sink --spring.data.mongodb.uri=mongodb://localhost/main\r\n```","```\r\nstream create --name jdbc-to-mongodb \r\n  --definition \"jdbc \r\n  --query='SELECT id, customer_name FROM public.customer WHERE imported=false' \r\n  --fixed-delay=30 \r\n  --max-rows-per-poll=1000 \r\n  --update='UPDATE customer SET imported=true WHERE id in (:id)' \r\n  --time-unit=SECONDS \r\n  --password=postgres \r\n  --driver-class-name=org.postgresql.Driver \r\n  --username=postgres \r\n  --url=jdbc:postgresql://localhost:5432/crm | customer-transform | customer-mongodb-sink \r\n  --spring.data.mongodb.uri=mongodb://localhost/main\" \r\n```","```\r\nstream deploy --name jdbc-to-mongodb \r\n```","```\r\nLogs will be in {PATH_TO_LOG}/spring-cloud-deployer/jdbc-to-mongodb/jdbc-to-mongodb.customer-mongodb-sink\r\n\r\nLogs will be in {PATH_TO_LOG}/spring-cloud-deployer/jdbc-to-mongodb/jdbc-to-mongodb.customer-transform\r\n\r\nLogs will be in {PATH_TO_LOG}/spring-cloud-deployer/jdbc-to-mongodb/jdbc-to-mongodb.jdbc\r\n```"]