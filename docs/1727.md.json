["```\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>6.0.6</version>\r\n</dependency>\r\n```","```\r\nClass.forName(\"com.mysql.cj.jdbc.Driver\");\r\n```","```\r\ntry (Connection con = DriverManager\r\n  .getConnection(\"jdbc:mysql://localhost:3306/myDb\", \"user1\", \"pass\")) {\r\n    // use con here\r\n}\r\n```","```\r\njdbc:mysql://localhost:3306/myDb?user=user1&password;=pass\r\n```","```\r\njdbc:postgresql://localhost/myDb\r\n```","```\r\njdbc:hsqldb:mem:myDb\r\n```","```\r\nCREATE DATABASE myDb;\r\nCREATE USER 'user1' IDENTIFIED BY 'pass';\r\nGRANT ALL on myDb.* TO 'user1';\r\n```","```\r\ntry (Statement stmt = con.createStatement()) {\r\n    // use stmt here\r\n}\r\n```","```\r\nString tableSql = \"CREATE TABLE IF NOT EXISTS employees\" \r\n  + \"(emp_id int PRIMARY KEY AUTO_INCREMENT, name varchar(30),\"\r\n  + \"position varchar(30), salary double)\";\r\nstmt.execute(tableSql);\r\n```","```\r\nString insertSql = \"INSERT INTO employees(name, position, salary)\"\r\n  + \" VALUES('john', 'developer', 2000)\";\r\nstmt.executeUpdate(insertSql);\r\n```","```\r\nString selectSql = \"SELECT * FROM employees\"; \r\ntry (ResultSet resultSet = stmt.executeQuery(selectSql)) {\r\n    // use resultSet here\r\n}\r\n```","```\r\nString updatePositionSql = \"UPDATE employees SET position=? WHERE emp_id=?\";\r\ntry (PreparedStatement pstmt = con.prepareStatement(updatePositionSql)) {\r\n    // use pstmt here\r\n}\r\n```","```\r\npstmt.setString(1, \"lead developer\");\r\npstmt.setInt(2, 1);\r\n```","```\r\nint rowsAffected = pstmt.executeUpdate();\r\n```","```\r\nString preparedSql = \"{call insertEmployee(?,?,?,?)}\";\r\ntry (CallableStatement cstmt = con.prepareCall(preparedSql)) {\r\n    // use cstmt here\r\n}\r\n```","```\r\ncstmt.setString(2, \"ana\");\r\ncstmt.setString(3, \"tester\");\r\ncstmt.setDouble(4, 2000);\r\n```","```\r\ncstmt.registerOutParameter(1, Types.INTEGER);\r\n```","```\r\ncstmt.execute();\r\nint new_id = cstmt.getInt(1);\r\n```","```\r\ndelimiter //\r\nCREATE PROCEDURE insertEmployee(OUT emp_id int, \r\n  IN emp_name varchar(30), IN position varchar(30), IN salary double) \r\nBEGIN\r\nINSERT INTO employees(name, position,salary) VALUES (emp_name,position,salary);\r\nSET emp_id = LAST_INSERT_ID();\r\nEND //\r\ndelimiter ;\r\n```","```\r\nGRANT ALL ON mysql.proc TO 'user1';\r\n```","```\r\ncon = DriverManager.getConnection(\r\n  \"jdbc:mysql://localhost:3306/myDb?noAccessToProcedureBodies=true\", \r\n  \"user1\", \"pass\");\r\n```","```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n    private String position;\r\n    private double salary;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\nString selectSql = \"SELECT * FROM employees\"; \r\ntry (ResultSet resultSet = stmt.executeQuery(selectSql)) {\r\n    List<Employee> employees = new ArrayList<>(); \r\n    while (resultSet.next()) { \r\n        Employee emp = new Employee(); \r\n        emp.setId(resultSet.getInt(\"emp_id\")); \r\n        emp.setName(resultSet.getString(\"name\")); \r\n        emp.setPosition(resultSet.getString(\"position\")); \r\n        emp.setSalary(resultSet.getDouble(\"salary\")); \r\n        employees.add(emp); \r\n    }\r\n}\r\n```","```\r\nstmt = con.createStatement(\r\n  ResultSet.TYPE_SCROLL_INSENSITIVE, \r\n  ResultSet.CONCUR_UPDATABLE\r\n);\r\n```","```\r\ntry (Statement updatableStmt = con.createStatement(\r\n  ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {\r\n    try (ResultSet updatableResultSet = updatableStmt.executeQuery(selectSql)) {\r\n        updatableResultSet.moveToInsertRow();\r\n        updatableResultSet.updateString(\"name\", \"mark\");\r\n        updatableResultSet.updateString(\"position\", \"analyst\");\r\n        updatableResultSet.updateDouble(\"salary\", 2000);\r\n        updatableResultSet.insertRow();\r\n    }\r\n}\r\n```","```\r\nDatabaseMetaData dbmd = con.getMetaData();\r\nResultSet tablesResultSet = dbmd.getTables(null, null, \"%\", null);\r\nwhile (tablesResultSet.next()) {\r\n    LOG.info(tablesResultSet.getString(\"TABLE_NAME\"));\r\n}\r\n```","```\r\nResultSetMetaData rsmd = rs.getMetaData();\r\nint nrColumns = rsmd.getColumnCount();\r\n\r\nIntStream.range(1, nrColumns).forEach(i -> {\r\n    try {\r\n        LOG.info(rsmd.getColumnName(i));\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n    }\r\n});\r\n```","```\r\nString updatePositionSql = \"UPDATE employees SET position=? WHERE emp_id=?\";\r\nPreparedStatement pstmt = con.prepareStatement(updatePositionSql);\r\npstmt.setString(1, \"lead developer\");\r\npstmt.setInt(2, 1);\r\n\r\nString updateSalarySql = \"UPDATE employees SET salary=? WHERE emp_id=?\";\r\nPreparedStatement pstmt2 = con.prepareStatement(updateSalarySql);\r\npstmt.setDouble(1, 3000);\r\npstmt.setInt(2, 1);\r\n\r\nboolean autoCommit = con.getAutoCommit();\r\ntry {\r\n    con.setAutoCommit(false);\r\n    pstmt.executeUpdate();\r\n    pstmt2.executeUpdate();\r\n    con.commit();\r\n} catch (SQLException exc) {\r\n    con.rollback();\r\n} finally {\r\n    con.setAutoCommit(autoCommit);\r\n}\r\n```","```\r\ncon.close();\r\n```"]