["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-websocket</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.javafaker</groupId>\r\n    <artifactId>javafaker</artifactId>\r\n    <version>1.0.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.google.code.gson</groupId>\r\n    <artifactId>gson</artifactId>\r\n</dependency>\r\n```","```\r\nFaker faker = new Faker();\r\nChuckNorris chuckNorris = faker.chuckNorris();\r\nString messageFromChuck = chuckNorris.fact();\r\n```","```\r\npublic class OutputMessage {\r\n\r\n    private String from;\r\n    private String text;\r\n    private String time;\r\n\r\n   // standard constructors, getters/setters, equals and hashcode\r\n}\r\n```","```\r\nOutputMessage message = new OutputMessage(\r\n  \"Chatbot 1\", \"Hello there!\", new SimpleDateFormat(\"HH:mm\").format(new Date())));\r\n```","```\r\n<html>\r\n<head>\r\n    <script src=\"./js/sockjs-0.3.4.js\"></script>\r\n    <script src=\"./js/stomp.js\"></script>\r\n    <script type=\"text/javascript\">\r\n        // ...\r\n        stompClient = Stomp.over(socket);\r\n\r\n        stompClient.connect({}, function(frame) {\r\n            // ...\r\n            stompClient.subscribe('/topic/pushmessages', function(messageOutput) {\r\n                showMessageOutput(JSON.parse(messageOutput.body));\r\n            });\r\n        });\r\n        // ...\r\n    </script>\r\n</head>\r\n<!-- ... -->\r\n</html>\r\n```","```\r\n@Configuration\r\n@EnableWebSocketMessageBroker\r\npublic class WebSocketConfig implements WebSocketMessageBrokerConfigurer {\r\n\r\n    @Override\r\n    public void configureMessageBroker(MessageBrokerRegistry config) {\r\n        config.enableSimpleBroker(\"/topic\");\r\n        config.setApplicationDestinationPrefixes(\"/app\");\r\n    }\r\n\r\n    @Override\r\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\r\n        // ...\r\n        registry.addEndpoint(\"/chatwithbots\");\r\n        registry.addEndpoint(\"/chatwithbots\").withSockJS();\r\n    }\r\n}\r\n```","```\r\nsimpMessagingTemplate.convertAndSend(\"/topic/pushmessages\", \r\n  new OutputMessage(\"Chuck Norris\", faker.chuckNorris().fact(), time));\r\n```","```\r\n@Configuration\r\nclass AppConfig {\r\n\r\n    @Bean\r\n    public ChuckNorris chuckNorris() {\r\n        return (new Faker()).chuckNorris();\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class ScheduledPushMessages {\r\n\r\n    @Scheduled(fixedRate = 5000)\r\n    public void sendMessage(SimpMessagingTemplate simpMessagingTemplate, ChuckNorris chuckNorris) {\r\n        String time = new SimpleDateFormat(\"HH:mm\").format(new Date());\r\n        simpMessagingTemplate.convertAndSend(\"/topic/pushmessages\", \r\n          new OutputMessage(\"Chuck Norris (@Scheduled)\", chuckNorris().fact(), time));\r\n    }\r\n\r\n}\r\n```","```\r\n@Service\r\npublic class ReactiveScheduledPushMessages implements InitializingBean {\r\n\r\n    private SimpMessagingTemplate simpMessagingTemplate;\r\n\r\n    private ChuckNorris chuckNorris;\r\n\r\n    @Autowired\r\n    public ReactiveScheduledPushMessages(SimpMessagingTemplate simpMessagingTemplate, ChuckNorris chuckNorris) {\r\n        this.simpMessagingTemplate = simpMessagingTemplate;\r\n        this.chuckNorris = chuckNorris;\r\n    }\r\n\r\n    @Override\r\n    public void afterPropertiesSet() throws Exception {\r\n        Flux.interval(Duration.ofSeconds(5L))\r\n            // discard the incoming Long, replace it by an OutputMessage\r\n            .map((n) -> new OutputMessage(\"Chuck Norris (Flux::interval)\", \r\n                              chuckNorris.fact(), \r\n                              new SimpleDateFormat(\"HH:mm\").format(new Date()))) \r\n            .subscribe(message -> simpMessagingTemplate.convertAndSend(\"/topic/pushmessages\", message));\r\n    }\r\n}\r\n```"]