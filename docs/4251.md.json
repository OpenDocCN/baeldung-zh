["```\r\npublic interface IUserService {\r\n    public boolean addUser(User user);\r\n    public List<User> findByEmail(String email);\r\n    public List<User> findByAge(double age);  \r\n}\r\n```","```\r\npublic class User {\r\n    private long id;\r\n    private String firstName;\r\n    private String lastName;\r\n    private double age;\r\n    private String email;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\nprivate IUserService userService = mock(IUserService.class);\r\n```","```\r\n@Test\r\npublic void givenUserService_whenAddNewUser_thenOK() {        \r\n    expect(userService.addUser(eq(new User()))).andReturn(true);\r\n    replay(userService);\r\n\r\n    boolean result = userService.addUser(new User());\r\n    verify(userService);\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenAddSpecificUser_thenOK() {\r\n    User user = new User();\r\n\r\n    expect(userService.addUser(same(user))).andReturn(true);\r\n    replay(userService);\r\n\r\n    boolean result = userService.addUser(user);\r\n    verify(userService);\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmail_thenFound() {\r\n    expect(userService.findByEmail(anyString()))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenAddUser_thenOK() {\r\n    expect(userService.addUser(isA(User.class))).andReturn(true);\r\n    replay(userService);\r\n\r\n    boolean result = userService.addUser(new User());\r\n    verify(userService);\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenAddNull_thenFail() {\r\n    expect(userService.addUser(isNull())).andReturn(false);\r\n    replay(userService);\r\n\r\n    boolean result = userService.addUser(null);\r\n    verify(userService);\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenAddNotNull_thenOK() {\r\n    expect(userService.addUser(notNull())).andReturn(true);\r\n    replay(userService);\r\n\r\n    boolean result = userService.addUser(new User());\r\n    verify(userService);\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSearchForUserByEmailStartsWith_thenFound() {        \r\n    expect(userService.findByEmail(startsWith(\"test\")))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmailEndsWith_thenFound() {        \r\n    expect(userService.findByEmail(endsWith(\".com\")))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmailContains_thenFound() {        \r\n    expect(userService.findByEmail(contains(\"@\")))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmailMatches_thenFound() {        \r\n    expect(userService.findByEmail(matches(\".+\\\\@.+\\\\..+\")))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByAgeLessThan_thenFound() {    \r\n    expect(userService.findByAge(lt(100.0)))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByAge(20);        \r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByAgeGreaterThan_thenFound() {    \r\n    expect(userService.findByAge(geq(10.0)))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByAge(20);        \r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByAgeRange_thenFound() {\r\n    expect(userService.findByAge(and(gt(10.0),lt(100.0))))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByAge(20);        \r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmailNotEndsWith_thenFound() {\r\n    expect(userService.findByEmail(not(endsWith(\".com\"))))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserService_whenSearchForUserByEmailCharCount_thenFound() {        \r\n    expect(userService.findByEmail(minCharCount(5)))\r\n      .andReturn(Collections.emptyList());\r\n    replay(userService);\r\n\r\n    List<User> result = userService.findByEmail(\"[[email protected]](/web/20220926185918/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    verify(userService);\r\n    assertEquals(0,result.size());\r\n}\r\n```","```\r\npublic static String minCharCount(int value){\r\n    EasyMock.reportMatcher(new IArgumentMatcher() {\r\n        @Override\r\n        public boolean matches(Object argument) {\r\n            return argument instanceof String \r\n              && ((String) argument).length() >= value;\r\n        }\r\n\r\n        @Override\r\n        public void appendTo(StringBuffer buffer) {\r\n            buffer.append(\"charCount(\\\"\" + value + \"\\\")\");\r\n        }\r\n    });    \r\n    return null;\r\n}\r\n```"]