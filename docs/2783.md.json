["```\r\npublic class Event {\r\n    private ZonedDateTime eventTime;\r\n    private String content;\r\n\r\n    // standard constructors/getters\r\n}\r\n```","```\r\nConcurrentSkipListMap<ZonedDateTime, String> events\r\n = new ConcurrentSkipListMap<>(\r\n Comparator.comparingLong(v -> v.toInstant().toEpochMilli()));\r\n```","```\r\npublic void acceptEvent(Event event) {\r\n    events.put(event.getEventTime(), event.getContent());\r\n}\r\n```","```\r\npublic ConcurrentNavigableMap<ZonedDateTime, String> getEventsFromLastMinute() {\r\n    return events.tailMap(ZonedDateTime.now().minusMinutes(1));\r\n} \r\n```","```\r\npublic ConcurrentNavigableMap<ZonedDateTime, String> getEventsOlderThatOneMinute() {\r\n    return events.headMap(ZonedDateTime.now().minusMinutes(1));\r\n}\r\n```","```\r\nExecutorService executorService = Executors.newFixedThreadPool(3);\r\nEventWindowSort eventWindowSort = new EventWindowSort();\r\nint numberOfThreads = 2;\r\n\r\nRunnable producer = () -> IntStream\r\n  .rangeClosed(0, 100)\r\n  .forEach(index -> eventWindowSort.acceptEvent(\r\n      new Event(ZonedDateTime.now().minusSeconds(index), UUID.randomUUID().toString()))\r\n  );\r\n\r\nfor (int i = 0; i < numberOfThreads; i++) {\r\n    executorService.execute(producer);\r\n} \r\n```","```\r\nConcurrentNavigableMap<ZonedDateTime, String> eventsFromLastMinute \r\n  = eventWindowSort.getEventsFromLastMinute();\r\n```","```\r\nlong eventsOlderThanOneMinute = eventsFromLastMinute\r\n  .entrySet()\r\n  .stream()\r\n  .filter(e -> e.getKey().isBefore(ZonedDateTime.now().minusMinutes(1)))\r\n  .count();\r\n\r\nassertEquals(eventsOlderThanOneMinute, 0);\r\n```","```\r\nlong eventYoungerThanOneMinute = eventsFromLastMinute\r\n  .entrySet()\r\n  .stream()\r\n  .filter(e -> e.getKey().isAfter(ZonedDateTime.now().minusMinutes(1)))\r\n  .count();\r\n\r\nassertTrue(eventYoungerThanOneMinute > 0);\r\n```","```\r\nConcurrentNavigableMap<ZonedDateTime, String> eventsFromLastMinute \r\n  = eventWindowSort.getEventsOlderThatOneMinute();\r\n```","```\r\nlong eventsOlderThanOneMinute = eventsFromLastMinute\r\n  .entrySet()\r\n  .stream()\r\n  .filter(e -> e.getKey().isBefore(ZonedDateTime.now().minusMinutes(1)))\r\n  .count();\r\n\r\nassertTrue(eventsOlderThanOneMinute > 0);\r\n```","```\r\nlong eventYoungerThanOneMinute = eventsFromLastMinute\r\n  .entrySet()\r\n  .stream()\r\n  .filter(e -> e.getKey().isAfter(ZonedDateTime.now().minusMinutes(1)))\r\n  .count();\r\n\r\nassertEquals(eventYoungerThanOneMinute, 0);\r\n```"]