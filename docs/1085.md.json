["```\r\npublic static HashMap<String, String> typeCastConvert(Properties prop) {\r\n    Map step1 = prop;\r\n    Map<String, String> step2 = (Map<String, String>) step1;\r\n    return new HashMap<>(step2);\r\n}\r\n```","```\r\nproperties.put(\"property4\", 456);\r\nproperties.put(5, 10.11);\r\n\r\nHashMap<String, String> hMap = typeCastConvert(properties);\r\nassertThrows(ClassCastException.class, () -> {\r\n    String s = hMap.get(\"property4\");\r\n});\r\nassertEquals(Integer.class, ((Object) hMap.get(\"property4\")).getClass());\r\n\r\nassertThrows(ClassCastException.class, () -> {\r\n    String s = hMap.get(5);\r\n});\r\nassertEquals(Double.class, ((Object) hMap.get(5)).getClass());\r\n```","```\r\npublic HashMap<String, String> guavaConvert(Properties prop) {\r\n    return Maps.newHashMap(Maps.fromProperties(prop));\r\n}\r\n```","```\r\nproperties.put(\"property4\", 456);\r\nassertThrows(NullPointerException.class, \r\n    () -> PropertiesToHashMapConverter.guavaConvert(properties));\r\n\r\nproperties.put(5, 10.11);\r\nassertThrows(ClassCastException.class, \r\n    () -> PropertiesToHashMapConverter.guavaConvert(properties));\r\n```","```\r\npublic HashMap<String, String> loopConvert(Properties prop) {\r\n    HashMap<String, String> retMap = new HashMap<>();\r\n    for (Map.Entry<Object, Object> entry : prop.entrySet()) {\r\n        retMap.put(String.valueOf(entry.getKey()), String.valueOf(entry.getValue()));\r\n    }\r\n    return retMap;\r\n}\r\n```","```\r\npublic HashMap<String, String> streamConvert(Properties prop) {\r\n    return prop.entrySet().stream().collect(\r\n      Collectors.toMap(\r\n        e -> String.valueOf(e.getKey()),\r\n        e -> String.valueOf(e.getValue()),\r\n        (prev, next) -> next, HashMap::new\r\n    ));\r\n}\r\n```","```\r\nproperties.put(\"property4\", 456);\r\nproperties.put(5, 10.11);\r\n\r\nHashMap<String, String> hMap1 = loopConvert(properties);\r\nHashMap<String, String> hMap2 = streamConvert(properties);\r\n\r\nassertDoesNotThrow(() -> {\r\n    String s1 = hMap1.get(\"property4\");\r\n    String s2 = hMap2.get(\"property4\");\r\n});\r\nassertEquals(\"456\", hMap1.get(\"property4\"));\r\nassertEquals(\"456\", hMap2.get(\"property4\"));\r\n\r\nassertDoesNotThrow(() -> {\r\n    String s1 = hMap1.get(\"property4\");\r\n    String s2 = hMap2.get(\"property4\");\r\n});\r\nassertEquals(\"10.11\", hMap1.get(\"5\"));\r\nassertEquals(\"10.11\", hMap2.get(\"5\"));\r\n\r\nassertEquals(hMap2, hMap1);\r\n```"]