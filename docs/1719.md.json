["```\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>2.7</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>2.7</version>\r\n    <type>test-jar</type>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\">\r\n    <Appenders>\r\n        <Console name=\"ConsoleAppender\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout \r\n              pattern=\"%d [%t] %-5level %logger{36} - %msg%n%throwable\"/>\r\n        </Console>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"ERROR\">\r\n            <AppenderRef ref=\"ConsoleAppender\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithDefaultConfig_whenLogToConsole_thanOK()\r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(getClass());\r\n    Exception e = new RuntimeException(\"This is only a test!\");\r\n\r\n    logger.info(\"This is a simple message at INFO level. \" +\r\n      \"It will be hidden.\");\r\n    logger.error(\"This is a simple message at ERROR level. \" +\r\n    \"This is the minimum visible level.\", e);\r\n} \r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Console name=\"ConsoleAppender\" target=\"SYSTEM_OUT\">\r\n    <PatternLayout pattern=\"%style{%date{DEFAULT}}{yellow}\r\n      %highlight{%-5level}{FATAL=bg_red, ERROR=red, WARN=yellow, INFO=green} \r\n      %message\"/>\r\n</Console>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\r\n    <Appenders>\r\n        <xi:include href=\"log4j2-includes/\r\n          console-appender_pattern-layout_colored.xml\"/>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Root level=\"DEBUG\">\r\n            <AppenderRef ref=\"ConsoleAppender\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithConsoleConfig_whenLogToConsoleInColors_thanOK() \r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(\"CONSOLE_PATTERN_APPENDER_MARKER\");\r\n    logger.trace(\"This is a colored message at TRACE level.\");\r\n    ...\r\n} \r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\">\r\n    <Appenders>\r\n        ...\r\n        <File name=\"JSONLogfileAppender\" fileName=\"target/logfile.json\">\r\n            <JSONLayout compact=\"true\" eventEol=\"true\"/>\r\n            <BurstFilter level=\"INFO\" rate=\"2\" maxBurst=\"10\"/>\r\n        </File>\r\n        <Async name=\"AsyncAppender\" bufferSize=\"80\">\r\n            <AppenderRef ref=\"JSONLogfileAppender\"/>\r\n        </Async>\r\n    </Appenders>\r\n    <Loggers>\r\n        ...\r\n        <Logger name=\"ASYNC_JSON_FILE_APPENDER\" level=\"INFO\"\r\n          additivity=\"false\">\r\n            <AppenderRef ref=\"AsyncAppender\" />\r\n        </Logger>\r\n        <Root level=\"INFO\">\r\n            <AppenderRef ref=\"ConsoleAppender\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithAsyncConfig_whenLogToJsonFile_thanOK() \r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(\"ASYNC_JSON_FILE_APPENDER\");\r\n\r\n    final int count = 88;\r\n    for (int i = 0; i < count; i++) {\r\n        logger.info(\"This is async JSON message #{} at INFO level.\", count);\r\n    }\r\n\r\n    long logEventsCount \r\n      = Files.lines(Paths.get(\"target/logfile.json\")).count();\r\n    assertTrue(logEventsCount > 0 && logEventsCount <= count);\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\">\r\n    <Appenders>\r\n        <RollingFile name=\"XMLRollingfileAppender\"\r\n          fileName=\"target/logfile.xml\"\r\n          filePattern=\"target/logfile-%d{yyyy-MM-dd}-%i.log.gz\">\r\n            <XMLLayout/>\r\n            <Policies>\r\n                <SizeBasedTriggeringPolicy size=\"17 kB\"/>\r\n            </Policies>\r\n        </RollingFile>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Logger name=\"XML_ROLLING_FILE_APPENDER\" \r\n       level=\"INFO\" additivity=\"false\">\r\n            <AppenderRef ref=\"XMLRollingfileAppender\" />\r\n        </Logger>\r\n        <Root level=\"TRACE\">\r\n            <AppenderRef ref=\"ConsoleAppender\"/>\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithRollingFileConfig_whenLogToXMLFile_thanOK()\r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(\"XML_ROLLING_FILE_APPENDER\");\r\n    final int count = 88;\r\n    for (int i = 0; i < count; i++) {\r\n        logger.info(\r\n          \"This is rolling file XML message #{} at INFO level.\", i);\r\n    }\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration status=\"WARN\">\r\n    <Appenders>\r\n        ...\r\n        <Syslog name=\"Syslog\" \r\n          format=\"RFC5424\" host=\"localhost\" port=\"514\" \r\n          protocol=\"TCP\" facility=\"local3\" connectTimeoutMillis=\"10000\" \r\n          reconnectionDelayMillis=\"5000\">\r\n        </Syslog>\r\n    </Appenders>\r\n    <Loggers>\r\n        ...\r\n        <Logger name=\"FAIL_OVER_SYSLOG_APPENDER\" \r\n          level=\"INFO\" \r\n          additivity=\"false\">\r\n            <AppenderRef ref=\"FailoverAppender\" />\r\n        </Logger>\r\n        <Root level=\"TRACE\">\r\n            <AppenderRef ref=\"Syslog\" />\r\n        </Root>\r\n    </Loggers>\r\n</Configuration>\r\n```","```\r\n<Failover name=\"FailoverAppender\" primary=\"Syslog\">\r\n    <Failovers>\r\n        <AppenderRef ref=\"ConsoleAppender\" />\r\n    </Failovers>\r\n</Failover>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithFailoverConfig_whenLog_thanOK()\r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(\"FAIL_OVER_SYSLOG_APPENDER\");\r\n    Exception e = new RuntimeException(\"This is only a test!\"); \r\n\r\n    logger.trace(\"This is a syslog message at TRACE level.\");\r\n    logger.debug(\"This is a syslog message at DEBUG level.\");\r\n    logger.info(\"This is a syslog message at INFO level. \r\n      This is the minimum visible level.\");\r\n    logger.warn(\"This is a syslog message at WARN level.\");\r\n    logger.error(\"This is a syslog message at ERROR level.\", e);\r\n    logger.fatal(\"This is a syslog message at FATAL level.\");\r\n}\r\n```","```\r\n<JDBC name=\"JDBCAppender\" tableName=\"logs\">\r\n    <ConnectionFactory \r\n      class=\"com.baeldung.logging.log4j2.tests.jdbc.ConnectionFactory\" \r\n      method=\"getConnection\" />\r\n    <Column name=\"when\" isEventTimestamp=\"true\" />\r\n    <Column name=\"logger\" pattern=\"%logger\" />\r\n    <Column name=\"level\" pattern=\"%level\" />\r\n    <Column name=\"message\" pattern=\"%message\" />\r\n    <Column name=\"throwable\" pattern=\"%ex{full}\" />\r\n</JDBC>\r\n```","```\r\n@Test\r\npublic void givenLoggerWithJdbcConfig_whenLogToDataSource_thanOK()\r\n  throws Exception {\r\n    Logger logger = LogManager.getLogger(\"JDBC_APPENDER\");\r\n    final int count = 88;\r\n    for (int i = 0; i < count; i++) {\r\n        logger.info(\"This is JDBC message #{} at INFO level.\", count);\r\n    }\r\n\r\n    Connection connection = ConnectionFactory.getConnection();\r\n    ResultSet resultSet = connection.createStatement()\r\n      .executeQuery(\"SELECT COUNT(*) AS ROW_COUNT FROM logs\");\r\n    int logCount = 0;\r\n    if (resultSet.next()) {\r\n        logCount = resultSet.getInt(\"ROW_COUNT\");\r\n    }\r\n    assertTrue(logCount == count);\r\n}\r\n```"]