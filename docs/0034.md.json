["```\r\n@Test\r\npublic void givenUsingJava5_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(DEFAULT_SIZE);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    StringBuilder textBuilder = new StringBuilder();\r\n    try (Reader reader = new BufferedReader(new InputStreamReader\r\n      (inputStream, Charset.forName(StandardCharsets.UTF_8.name())))) {\r\n        int c = 0;\r\n        while ((c = reader.read()) != -1) {\r\n            textBuilder.append((char) c);\r\n        }\r\n    }\r\n    assertEquals(textBuilder.toString(), originalString);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingJava8_whenConvertingAnInputStreamToAString_thenCorrect() {\r\n    String originalString = randomAlphabetic(DEFAULT_SIZE);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    String text = new BufferedReader(\r\n      new InputStreamReader(inputStream, StandardCharsets.UTF_8))\r\n        .lines()\r\n        .collect(Collectors.joining(\"\\n\"));\r\n\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingJava9_whenConvertingAnInputStreamToAString_thenCorrect() throws IOException {\r\n    String originalString = randomAlphabetic(DEFAULT_SIZE);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    String text = new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);\r\n\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingJava7_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    String text = null;\r\n    try (Scanner scanner = new Scanner(inputStream, StandardCharsets.UTF_8.name())) {\r\n        text = scanner.useDelimiter(\"\\\\A\").next();\r\n    }\r\n\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingPlainJava_whenConvertingAnInputStreamToString_thenCorrect()\r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\r\n    int nRead;\r\n    byte[] data = new byte[1024];\r\n    while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\r\n        buffer.write(data, 0, nRead);\r\n    }\r\n\r\n    buffer.flush();\r\n    byte[] byteArray = buffer.toByteArray();\r\n\r\n    String text = new String(byteArray, StandardCharsets.UTF_8);\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingTempFile_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(DEFAULT_SIZE);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    Path tempFile = \r\n      Files.createTempDirectory(\"\").resolve(UUID.randomUUID().toString() + \".tmp\");\r\n    Files.copy(inputStream, tempFile, StandardCopyOption.REPLACE_EXISTING);\r\n    String result = new String(Files.readAllBytes(tempFile));\r\n\r\n    assertThat(result, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingGuava_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    ByteSource byteSource = new ByteSource() {\r\n        @Override\r\n        public InputStream openStream() throws IOException {\r\n            return inputStream;\r\n        }\r\n    };\r\n\r\n    String text = byteSource.asCharSource(Charsets.UTF_8).read();\r\n\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingGuavaAndJava7_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    String text = null;\r\n    try (Reader reader = new InputStreamReader(inputStream)) {\r\n        text = CharStreams.toString(reader);\r\n    }\r\n\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCommonsIo_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    String text = IOUtils.toString(inputStream, StandardCharsets.UTF_8.name());\r\n    assertThat(text, equalTo(originalString));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCommonsIoWithCopy_whenConvertingAnInputStreamToAString_thenCorrect() \r\n  throws IOException {\r\n    String originalString = randomAlphabetic(8);\r\n    InputStream inputStream = new ByteArrayInputStream(originalString.getBytes());\r\n\r\n    StringWriter writer = new StringWriter();\r\n    String encoding = StandardCharsets.UTF_8.name();\r\n    IOUtils.copy(inputStream, writer, encoding);\r\n\r\n    assertThat(writer.toString(), equalTo(originalString));\r\n}\r\n```"]