["```\r\n<dependency>\r\n    <groupId>org.springframework.ldap</groupId>\r\n    <artifactId>spring-ldap-core</artifactId>\r\n    <version>2.3.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\nou=users,dc=example,dc=com (objectClass=organizationalUnit)\r\n```","```\r\n@Bean\r\npublic LdapContextSource contextSource() {\r\n    LdapContextSource contextSource = new LdapContextSource();\r\n\r\n    contextSource.setUrl(env.getRequiredProperty(\"ldap.url\"));\r\n    contextSource.setBase(\r\n      env.getRequiredProperty(\"ldap.partitionSuffix\"));\r\n    contextSource.setUserDn(\r\n      env.getRequiredProperty(\"ldap.principal\"));\r\n    contextSource.setPassword(\r\n      env.getRequiredProperty(\"ldap.password\"));\r\n\r\n    return contextSource;\r\n}\r\n```","```\r\n@Bean\r\npublic LdapTemplate ldapTemplate() {\r\n    return new LdapTemplate(contextSource());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-ldap</artifactId>\r\n</dependency>\r\n```","```\r\nspring.ldap.url=ldap://localhost:18889\r\nspring.ldap.base=dc=example,dc=com\r\nspring.ldap.username=uid=admin,ou=system\r\nspring.ldap.password=secret\r\n```","```\r\n@Autowired\r\nprivate LdapTemplate ldapTemplate;\r\n```","```\r\npublic void authenticate(String username, String password) {\r\n    contextSource\r\n      .getContext(\r\n        \"cn=\" + \r\n         username + \r\n         \",ou=users,\" + \r\n         env.getRequiredProperty(\"ldap.partitionSuffix\"), password);\r\n}\r\n```","```\r\npublic void create(String username, String password) {\r\n    Name dn = LdapNameBuilder\r\n      .newInstance()\r\n      .add(\"ou\", \"users\")\r\n      .add(\"cn\", username)\r\n      .build();\r\n    DirContextAdapter context = new DirContextAdapter(dn);\r\n\r\n    context.setAttributeValues(\r\n      \"objectclass\", \r\n      new String[] \r\n        { \"top\", \r\n          \"person\", \r\n          \"organizationalPerson\", \r\n          \"inetOrgPerson\" });\r\n    context.setAttributeValue(\"cn\", username);\r\n    context.setAttributeValue(\"sn\", username);\r\n    context.setAttributeValue\r\n      (\"userPassword\", digestSHA(password));\r\n\r\n    ldapTemplate.bind(context);\r\n}\r\n```","```\r\npublic void modify(String username, String password) {\r\n    Name dn = LdapNameBuilder.newInstance()\r\n      .add(\"ou\", \"users\")\r\n      .add(\"cn\", username)\r\n      .build();\r\n    DirContextOperations context \r\n      = ldapTemplate.lookupContext(dn);\r\n\r\n    context.setAttributeValues\r\n      (\"objectclass\", \r\n          new String[] \r\n            { \"top\", \r\n              \"person\", \r\n              \"organizationalPerson\", \r\n              \"inetOrgPerson\" });\r\n    context.setAttributeValue(\"cn\", username);\r\n    context.setAttributeValue(\"sn\", username);\r\n    context.setAttributeValue(\"userPassword\", \r\n      digestSHA(password));\r\n\r\n    ldapTemplate.modifyAttributes(context);\r\n}\r\n```","```\r\npublic List<String> search(String username) {\r\n    return ldapTemplate\r\n      .search(\r\n        \"ou=users\", \r\n        \"cn=\" + username, \r\n        (AttributesMapper<String>) attrs -> (String) attrs.get(\"cn\").get());\r\n}\r\n```","```\r\n@Bean\r\npublic TestContextSourceFactoryBean testContextSource() {\r\n    TestContextSourceFactoryBean contextSource \r\n      = new TestContextSourceFactoryBean();\r\n\r\n    contextSource.setDefaultPartitionName(\r\n      env.getRequiredProperty(\"ldap.partition\"));\r\n    contextSource.setDefaultPartitionSuffix(\r\n      env.getRequiredProperty(\"ldap.partitionSuffix\"));\r\n    contextSource.setPrincipal(\r\n      env.getRequiredProperty(\"ldap.principal\"));\r\n    contextSource.setPassword(\r\n      env.getRequiredProperty(\"ldap.password\"));\r\n    contextSource.setLdifFile(\r\n      resourceLoader.getResource(\r\n        env.getRequiredProperty(\"ldap.ldiffile\")));\r\n    contextSource.setPort(\r\n      Integer.valueOf(\r\n        env.getRequiredProperty(\"ldap.port\")));\r\n    return contextSource;\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenLdapClient_whenCorrectSearchFilter_thenEntriesReturned() {\r\n    List<String> users = ldapClient\r\n      .search(SEARCH_STRING);\r\n\r\n    assertThat(users, Matchers.containsInAnyOrder(USER2, USER3));\r\n}\r\n```"]