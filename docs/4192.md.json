["```\r\nList<String> strings = new ArrayList<String>(); // Java 6\r\nList<String> strings = new ArrayList<>(); // Java 7\r\n```","```\r\nvar strings = new ArrayList<String>();\r\n```","```\r\nvar unknownType; // No value provided to infer type from\r\nvar nullType = null; // Explicit value provided but it's null\r\nvar lambdaType = () -> System.out.println(\"Lambda\"); // Lambda without defining the interface\r\n```","```\r\nOptional<String> name = Optional.empty();\r\nvar nullName = name.orElse(null);\r\n```","```\r\nnames.stream()\r\n  .filter(String name -> name.length() > 5)\r\n  .map(name -> name.toUpperCase());\r\n```","```\r\nnames.stream()\r\n  .filter(var name -> name.length() > 5)\r\n  .map(var name -> name.toUpperCase());\r\n```","```\r\nnumbers.stream()\r\n    .reduce(0, (var a, var b) -> a + b); // Valid\r\n\r\nnumbers.stream()\r\n    .reduce(0, (var a, b) -> a + b); // Invalid\r\n\r\nnumbers.stream()\r\n    .reduce(0, (var a, int b) -> a + b); // Invalid\r\n```","```\r\nswitch (month) {\r\n    case FEBRUARY -> System.out.println(28);\r\n    case APRIL -> System.out.println(30);\r\n    case JUNE -> System.out.println(30);\r\n    case SEPTEMBER -> System.out.println(30);\r\n    case NOVEMBER -> System.out.println(30);\r\n    default -> System.out.println(31);\r\n}\r\n```","```\r\nswitch (month) {\r\n    case FEBRUARY -> {\r\n        int days = 28;\r\n    }\r\n    case APRIL -> {\r\n        int days = 30;\r\n    }\r\n    ....\r\n}\r\n```","```\r\nswitch (month) {\r\n    case FEBRUARY -> System.out.println(28);\r\n    case APRIL, JUNE, SEPTEMBER, NOVEMBER -> System.out.println(30);\r\n    default -> System.out.println(31);\r\n}\r\n```","```\r\nfinal var days = switch (month) {\r\n    case FEBRUARY -> 28;\r\n    case APRIL, JUNE, SEPTEMBER, NOVEMBER -> 30;\r\n    default -> 31;\r\n}\r\n```","```\r\n// File system path\r\n\"C:\\\\Dev\\\\file.txt\"\r\n`C:\\Dev\\file.txt`\r\n\r\n// Regex\r\n\"\\\\d+\\\\.\\\\d\\\\d\"\r\n`\\d+\\.\\d\\d`\r\n\r\n// Multi-Line\r\n\"Hello\\nWorld\"\r\n`Hello\r\nWorld`\r\n```","```\r\n``This string allows a single \"`\" because it's wrapped in two backticks``\r\n```","```\r\njdbcTemplate.queryForObject(\"SELECT * FROM users WHERE user_id = 1\", (rs, _) -> parseUser(rs))\r\n```","```\r\nString key = computeSomeKey();\r\nmap.computeIfAbsent(key, key2 -> key2.length());\r\n```","```\r\nString key = computeSomeKey();\r\nmap.computeIfAbsent(key, key -> key.length());\r\n```","```\r\nm(Predicate<String> ps) { ... }\r\nm(Function<String, String> fss) { ... }\r\n```","```\r\nif (obj instanceof String) {\r\n    String s = (String) obj;\r\n    // use s\r\n}\r\n```","```\r\nif (obj instanceof String s) {\r\n    // use s\r\n}\r\n```","```\r\nif (obj instanceof String s) {\r\n    // can use s here\r\n} else {\r\n    // can't use s here\r\n}\r\n```","```\r\nString s = \"Hello\";\r\nif (obj instanceof String s) {\r\n    // s refers to obj\r\n} else {\r\n    // s refers to the variable defined before the if statement\r\n}\r\n```","```\r\nif (obj instanceof String s && s.length() > 5) {\r\n    // s is a String of greater than 5 characters\r\n}\r\n```","```\r\nToIntFunction<String> lenFn = (String s) -> { return s.length(); };\r\nToIntFunction<String> lenFn = (String s) -> s.length();\r\nToIntFunction<String> lenFn = String::length;\r\n```","```\r\nString getName() -> name;\r\n```","```\r\nint length(String s) = String::length\r\n```","```\r\nenum Primitive<X> {\r\n    INT<Integer>(Integer.class, 0) {\r\n       int mod(int x, int y) { return x % y; }\r\n       int add(int x, int y) { return x + y; }\r\n    },\r\n    FLOAT<Float>(Float.class, 0f)  {\r\n       long add(long x, long y) { return x + y; }\r\n    }, ... ;\r\n\r\n    final Class<X> boxClass;\r\n    final X defaultValue;\r\n\r\n    Primitive(Class<X> boxClass, X defaultValue) {\r\n       this.boxClass = boxClass;\r\n       this.defaultValue = defaultValue;\r\n    }\r\n}\r\n```"]