["```\r\n<dependency>\r\n    <groupId>org.eclipse.microprofile</groupId>\r\n    <artifactId>microprofile</artifactId>\r\n    <version>1.2</version>\r\n    <type>pom</type>\r\n    <scope>provided</scope>\r\n</dependency> \r\n```","```\r\npublic class Book {\r\n    private String id;\r\n    private String name;\r\n    private String author;\r\n    private Integer pages;\r\n    // ...\r\n}\r\n```","```\r\n@ApplicationScoped\r\npublic class BookManager {\r\n\r\n    private ConcurrentMap<String, Book> inMemoryStore\r\n      = new ConcurrentHashMap<>();\r\n\r\n    public String add(Book book) {\r\n        // ...\r\n    }\r\n\r\n    public Book get(String id) {\r\n        // ...\r\n    }\r\n\r\n    public List getAll() {\r\n        // ...\r\n    }\r\n} \r\n```","```\r\n@ApplicationPath(\"/library\")\r\npublic class LibraryApplication extends Application {\r\n}\r\n```","```\r\n@Path(\"books\")\r\n@RequestScoped\r\npublic class BookEndpoint {\r\n\r\n    @Inject\r\n    private BookManager bookManager;\r\n\r\n    @GET\r\n    @Path(\"{id}\")\r\n    @Produces(MediaType.APPLICATION_JSON)\r\n    public Response getBook(@PathParam(\"id\") String id) {\r\n        return Response.ok(bookManager.get(id)).build();\r\n    }\r\n\r\n    @GET\r\n    @Produces(MediaType.APPLICATION_JSON)\r\n    public Response getAllBooks() {\r\n        return Response.ok(bookManager.getAll()).build();\r\n    }\r\n\r\n    @POST\r\n    @Consumes(MediaType.APPLICATION_JSON)\r\n    public Response add(Book book) {\r\n        String bookId = bookManager.add(book);\r\n        return Response.created(\r\n          UriBuilder.fromResource(this.getClass())\r\n            .path(bookId).build())\r\n            .build();\r\n    }\r\n} \r\n```","```\r\n@Provider\r\n@Consumes(MediaType.APPLICATION_JSON)\r\npublic class BookMessageBodyReader implements MessageBodyReader<Book> {\r\n\r\n    @Override\r\n    public boolean isReadable(\r\n      Class<?> type, Type genericType, \r\n      Annotation[] annotations, \r\n      MediaType mediaType) {\r\n\r\n        return type.equals(Book.class);\r\n    }\r\n\r\n    @Override\r\n    public Book readFrom(\r\n      Class type, Type genericType, \r\n      Annotation[] annotations,\r\n      MediaType mediaType, \r\n      MultivaluedMap<String, String> httpHeaders, \r\n      InputStream entityStream) throws IOException, WebApplicationException {\r\n\r\n        return BookMapper.map(entityStream);\r\n    }\r\n} \r\n```","```\r\n@Provider\r\n@Produces(MediaType.APPLICATION_JSON)\r\npublic class BookMessageBodyWriter \r\n  implements MessageBodyWriter<Book> {\r\n\r\n    @Override\r\n    public boolean isWriteable(\r\n      Class<?> type, Type genericType, \r\n      Annotation[] annotations, \r\n      MediaType mediaType) {\r\n\r\n        return type.equals(Book.class);\r\n    }\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public void writeTo(\r\n      Book book, Class<?> type, \r\n      Type genericType, \r\n      Annotation[] annotations, \r\n      MediaType mediaType, \r\n      MultivaluedMap<String, Object> httpHeaders, \r\n      OutputStream entityStream) throws IOException, WebApplicationException {\r\n\r\n        JsonWriter jsonWriter = Json.createWriter(entityStream);\r\n        JsonObject jsonObject = BookMapper.map(book);\r\n        jsonWriter.writeObject(jsonObject);\r\n        jsonWriter.close();\r\n    }\r\n} \r\n```","```\r\n<server description=\"OpenLiberty MicroProfile server\">\r\n    <featureManager>\r\n        <feature>jaxrs-2.0</feature>\r\n        <feature>cdi-1.2</feature>\r\n        <feature>jsonp-1.0</feature>\r\n    </featureManager>\r\n    <httpEndpoint httpPort=\"${default.http.port}\" httpsPort=\"${default.https.port}\"\r\n      id=\"defaultHttpEndpoint\" host=\"*\"/>\r\n    <applicationManager autoExpand=\"true\"/>\r\n    <webApplication context-root=\"${app.context.root}\" location=\"${app.location}\"/>\r\n</server>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<plugin>\r\n    <groupId>net.wasdev.wlp.maven.plugins</groupId>\r\n    <artifactId>liberty-maven-plugin</artifactId>\r\n    <version>2.1.2</version>\r\n    <configuration>\r\n        <assemblyArtifact>\r\n            <groupId>io.openliberty</groupId>\r\n            <artifactId>openliberty-runtime</artifactId>\r\n            <version>17.0.0.4</version>\r\n            <type>zip</type>\r\n        </assemblyArtifact>\r\n        <configFile>${basedir}/src/main/liberty/config/server.xml</configFile>\r\n        <packageFile>${package.file}</packageFile>\r\n        <include>${packaging.type}</include>\r\n        <looseApplication>false</looseApplication>\r\n        <installAppPackages>project</installAppPackages>\r\n        <bootstrapProperties>\r\n            <app.context.root>/</app.context.root>\r\n            <app.location>${project.artifactId}-${project.version}.war</app.location>\r\n            <default.http.port>9080</default.http.port>\r\n            <default.https.port>9443</default.https.port>\r\n        </bootstrapProperties>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>install-server</id>\r\n            <phase>prepare-package</phase>\r\n            <goals>\r\n                <goal>install-server</goal>\r\n                <goal>create-server</goal>\r\n                <goal>install-feature</goal>\r\n            </goals>\r\n        </execution>\r\n        <execution>\r\n            <id>package-server-with-apps</id>\r\n            <phase>package</phase>\r\n            <goals>\r\n                <goal>install-apps</goal>\r\n                <goal>package-server</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<properties>\r\n    <!--...-->\r\n    <app.name>library</app.name>\r\n    <package.file>${project.build.directory}/${app.name}-service.jar</package.file>\r\n    <packaging.type>runnable</packaging.type>\r\n</properties>\r\n```","```\r\nmvn package \r\n```","```\r\njava -jar target/library-service.jar\r\n```","```\r\ncurl http://localhost:9080/library/books\r\n```","```\r\n[\r\n  {\r\n    \"id\": \"0001-201802\",\r\n    \"isbn\": \"1\",\r\n    \"name\": \"Building Microservice With Eclipse MicroProfile\",\r\n    \"author\": \"baeldung\",\r\n    \"pages\": 420\r\n  }\r\n] \r\n```","```\r\ncurl http://localhost:9080/library/books/0001-201802\r\n```","```\r\n{\r\n    \"id\": \"0001-201802\",\r\n    \"isbn\": \"1\",\r\n    \"name\": \"Building Microservice With Eclipse MicroProfile\",\r\n    \"author\": \"baeldung\",\r\n    \"pages\": 420\r\n}\r\n```","```\r\ncurl \r\n  -H \"Content-Type: application/json\" \r\n  -X POST \r\n  -d '{\"isbn\": \"22\", \"name\": \"Gradle in Action\",\"author\": \"baeldung\",\"pages\": 420}' \r\n  http://localhost:9080/library/books \r\n```","```\r\n< HTTP/1.1 201 Created\r\n< Location: http://localhost:9080/library/books/0009-201802\r\n```"]