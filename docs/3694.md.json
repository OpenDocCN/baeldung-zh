["```\r\n<dependency>\r\n    <groupId>org.functionaljava</groupId>\r\n    <artifactId>functionaljava</artifactId>\r\n    <version>4.8.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.functionaljava</groupId>\r\n    <artifactId>functionaljava-java8</artifactId>\r\n    <version>4.8.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.functionaljava</groupId>\r\n    <artifactId>functionaljava-quickcheck</artifactId>\r\n    <version>4.8.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.functionaljava</groupId>\r\n    <artifactId>functionaljava-java-core</artifactId>\r\n    <version>4.8.1</version>\r\n</dependency>\r\n```","```\r\npublic static final Integer timesTwoRegular(Integer i) {\r\n    return i * 2;\r\n}\r\n```","```\r\npublic static final F<Integer, Integer> timesTwo = i -> i * 2;\r\n```","```\r\npublic static final F<Integer, Boolean> isEven = i -> i % 2 == 0;\r\n```","```\r\npublic void multiplyNumbers_givenIntList_returnTrue() {\r\n    List<Integer> fList = List.list(1, 2, 3, 4);\r\n    List<Integer> fList1 = fList.map(timesTwo);\r\n    List<Integer> fList2 = fList.map(i -> i * 2);\r\n\r\n    assertTrue(fList1.equals(fList2));\r\n}\r\n```","```\r\npublic void calculateEvenNumbers_givenIntList_returnTrue() {\r\n    List<Integer> fList = List.list(3, 4, 5, 6);\r\n    List<Boolean> evenList = fList.map(isEven);\r\n    List<Boolean> evenListTrueResult = List.list(false, true, false, true);\r\n\r\n    assertTrue(evenList.equals(evenListTrueResult));\r\n}\r\n```","```\r\npublic void applyMultipleFunctions_givenIntList_returnFalse() {\r\n    List<Integer> fList = List.list(1, 2, 3, 4);\r\n    List<Integer> fList1 = fList.map(timesTwo).map(plusOne);\r\n    List<Integer> fList2 = fList.map(plusOne).map(timesTwo);\r\n\r\n    assertFalse(fList1.equals(fList2));\r\n}\r\n```","```\r\nList(3,5,7,9)\r\nList(4,6,8,10)\r\n```","```\r\npublic void filterList_givenIntList_returnResult() {\r\n    Array<Integer> array = Array.array(3, 4, 5, 6);\r\n    Array<Integer> filteredArray = array.filter(isEven);\r\n    Array<Integer> result = Array.array(4, 6);\r\n\r\n    assertTrue(filteredArray.equals(result));\r\n}\r\n```","```\r\npublic void checkForLowerCase_givenStringArray_returnResult() {\r\n    Array<String> array = Array.array(\"Welcome\", \"To\", \"baeldung\");\r\n    assertTrue(array.exists(s -> List.fromString(s).forall(Characters.isLowerCase)));\r\n\r\n    Array<String> array2 = Array.array(\"Welcome\", \"To\", \"Baeldung\");\r\n    assertFalse(array2.exists(s -> List.fromString(s).forall(Characters.isLowerCase)));\r\n\r\n    assertFalse(array.forall(s -> List.fromString(s).forall(Characters.isLowerCase)));\r\n}\r\n```","```\r\npublic void checkOptions_givenOptions_returnResult() {\r\n    Option<Integer> n1 = Option.some(1);\r\n    Option<Integer> n2 = Option.some(2);\r\n    Option<Integer> n3 = Option.none();\r\n\r\n    F<Integer, Option<Integer>> function = i -> i % 2 == 0 ? Option.some(i + 100) : Option.none();\r\n\r\n    Option<Integer> result1 = n1.bind(function);\r\n    Option<Integer> result2 = n2.bind(function);\r\n    Option<Integer> result3 = n3.bind(function);\r\n\r\n    assertEquals(Option.none(), result1);\r\n    assertEquals(Option.some(102), result2);\r\n    assertEquals(Option.none(), result3);\r\n}\r\n```","```\r\npublic void foldLeft_givenArray_returnResult() {\r\n    Array<Integer> intArray = Array.array(17, 44, 67, 2, 22, 80, 1, 27);\r\n\r\n    int sumAll = intArray.foldLeft(Integers.add, 0);\r\n    assertEquals(260, sumAll);\r\n\r\n    int sumEven = intArray.filter(isEven).foldLeft(Integers.add, 0);\r\n    assertEquals(148, sumEven);\r\n}\r\n```"]