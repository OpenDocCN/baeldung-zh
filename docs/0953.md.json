["```\r\n<dependency>\r\n   <groupId>org.springframework.boot</groupId>\r\n   <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>de.flapdoodle.embed</groupId>\r\n    <artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n    <version>3.3.1</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class MongoConfig {\r\n\r\n    private static final String CONNECTION_STRING = \"mongodb://%s:%d\";\r\n    private static final String HOST = \"localhost\";\r\n\r\n    @Bean\r\n    public MongoTemplate mongoTemplate() throws Exception {\r\n\r\n        int randomPort = SocketUtils.findAvailableTcpPort();\r\n\r\n        ImmutableMongodConfig mongoDbConfig = MongodConfig.builder()\r\n          .version(Version.Main.PRODUCTION)\r\n          .net(new Net(HOST, randomPort, Network.localhostIsIPv6()))\r\n          .build();\r\n\r\n        MongodStarter starter = MongodStarter.getDefaultInstance();\r\n        MongodExecutable mongodExecutable = starter.prepare(mongoDbConfig);\r\n        mongodExecutable.start();\r\n        return new MongoTemplate(MongoClients.create(String.format(CONNECTION_STRING, HOST, randomPort)), \"mongo_auth\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(securedEnabled = true, jsr250Enabled = true)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    // ...\r\n    public SecurityConfig(UserDetailsService userDetailsService) {\r\n        this.userDetailsService = userDetailsService;\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager customAuthenticationManager() throws Exception {\r\n        return authenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public BCryptPasswordEncoder bCryptPasswordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(@Autowired AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.userDetailsService(userDetailsService)\r\n          .passwordEncoder(bCryptPasswordEncoder());\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.csrf()\r\n          .disable()\r\n          .authorizeRequests()\r\n          .and()\r\n          .httpBasic()\r\n          .and()\r\n          .authorizeRequests()\r\n          .anyRequest()\r\n          .permitAll()\r\n          .and()\r\n          .sessionManagement()\r\n          .sessionCreationPolicy(SessionCreationPolicy.STATELESS);\r\n    }\r\n}\r\n```","```\r\n@Document\r\npublic class User implements UserDetails {\r\n    private @MongoId ObjectId id;\r\n    private String username;\r\n    private String password;\r\n    private Set<UserRole> userRoles;\r\n    // getters and setters\r\n} \r\n```","```\r\npublic interface UserRepository extends MongoRepository<User, String> {\r\n\r\n    @Query(\"{username:'?0'}\")\r\n    User findUserByUsername(String username);\r\n}\r\n```","```\r\n@Service\r\npublic class MongoAuthUserDetailService implements UserDetailsService {\r\n    // ...\r\n    @Override\r\n    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {\r\n\r\n        com.baeldung.mongoauth.domain.User user = userRepository.findUserByUsername(userName);\r\n\r\n        Set<GrantedAuthority> grantedAuthorities = new HashSet<>();\r\n\r\n        user.getAuthorities()\r\n          .forEach(role -> {\r\n              grantedAuthorities.add(new SimpleGrantedAuthority(role.getRole()\r\n                 .getName()));\r\n          });\r\n\r\n        return new User(user.getUsername(), user.getPassword(), grantedAuthorities);\r\n    }\r\n\r\n}\r\n```","```\r\n@RestController\r\npublic class ResourceController {\r\n\r\n    @RolesAllowed(\"ROLE_ADMIN\")\r\n    @GetMapping(\"/admin\")\r\n    public String admin() {\r\n        return \"Hello Admin!\";\r\n    }\r\n\r\n    @RolesAllowed({ \"ROLE_ADMIN\", \"ROLE_USER\" })\r\n    @GetMapping(\"/user\")\r\n    public String user() {\r\n        return \"Hello User!\";\r\n    }\r\n\r\n}\r\n```","```\r\nclass MongoAuthApplicationTest {\r\n\r\n    // set up\r\n\r\n    @Test\r\n    void givenUserCredentials_whenInvokeUserAuthorizedEndPoint_thenReturn200() throws Exception {\r\n        mvc.perform(get(\"/user\").with(httpBasic(USER_NAME, PASSWORD)))\r\n          .andExpect(status().isOk());\r\n    }\r\n\r\n    @Test\r\n    void givenUserNotExists_whenInvokeEndPoint_thenReturn401() throws Exception {\r\n        mvc.perform(get(\"/user\").with(httpBasic(\"not_existing_user\", \"password\")))\r\n          .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void givenUserExistsAndWrongPassword_whenInvokeEndPoint_thenReturn401() throws Exception {\r\n        mvc.perform(get(\"/user\").with(httpBasic(USER_NAME, \"wrong_password\")))\r\n          .andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test\r\n    void givenUserCredentials_whenInvokeAdminAuthorizedEndPoint_thenReturn403() throws Exception {\r\n        mvc.perform(get(\"/admin\").with(httpBasic(USER_NAME, PASSWORD)))\r\n          .andExpect(status().isForbidden());\r\n    }\r\n\r\n    @Test\r\n    void givenAdminCredentials_whenInvokeAdminAuthorizedEndPoint_thenReturn200() throws Exception {\r\n        mvc.perform(get(\"/admin\").with(httpBasic(ADMIN_NAME, PASSWORD)))\r\n          .andExpect(status().isOk());\r\n\r\n        mvc.perform(get(\"/user\").with(httpBasic(ADMIN_NAME, PASSWORD)))\r\n          .andExpect(status().isOk());\r\n    }\r\n}\r\n```"]