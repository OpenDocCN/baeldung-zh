["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@BeforeAll\r\nstatic void setup() {\r\n    log.info(\"@BeforeAll - executes once before all test methods in this class\");\r\n}\r\n\r\n@BeforeEach\r\nvoid init() {\r\n    log.info(\"@BeforeEach - executes before each test method in this class\");\r\n}\r\n```","```\r\n@DisplayName(\"Single test successful\")\r\n@Test\r\nvoid testSingleSuccessTest() {\r\n    log.info(\"Success\");\r\n}\r\n\r\n@Test\r\n@Disabled(\"Not implemented yet\")\r\nvoid testShowSomething() {\r\n}\r\n```","```\r\n@AfterEach\r\nvoid tearDown() {\r\n    log.info(\"@AfterEach - executed after each test method.\");\r\n}\r\n\r\n@AfterAll\r\nstatic void done() {\r\n    log.info(\"@AfterAll - executed after all test methods.\");\r\n}\r\n```","```\r\n@Test\r\nvoid lambdaExpressions() {\r\n    List numbers = Arrays.asList(1, 2, 3);\r\n    assertTrue(numbers.stream()\r\n      .mapToInt(Integer::intValue)\r\n      .sum() > 5, () -> \"Sum should be greater than 5\");\r\n}\r\n```","```\r\n @Test\r\n void groupAssertions() {\r\n     int[] numbers = {0, 1, 2, 3, 4};\r\n     assertAll(\"numbers\",\r\n         () -> assertEquals(numbers[0], 1),\r\n         () -> assertEquals(numbers[3], 3),\r\n         () -> assertEquals(numbers[4], 1)\r\n     );\r\n }\r\n```","```\r\n@Test\r\nvoid trueAssumption() {\r\n    assumeTrue(5 > 1);\r\n    assertEquals(5 + 2, 7);\r\n}\r\n\r\n@Test\r\nvoid falseAssumption() {\r\n    assumeFalse(5 < 1);\r\n    assertEquals(5 + 2, 7);\r\n}\r\n\r\n@Test\r\nvoid assumptionThat() {\r\n    String someString = \"Just a string\";\r\n    assumingThat(\r\n        someString.equals(\"Just a string\"),\r\n        () -> assertEquals(2 + 2, 4)\r\n    );\r\n}\r\n```","```\r\n@Test\r\nvoid shouldThrowException() {\r\n    Throwable exception = assertThrows(UnsupportedOperationException.class, () -> {\r\n      throw new UnsupportedOperationException(\"Not supported\");\r\n    });\r\n    assertEquals(\"Not supported\", exception.getMessage());\r\n}\r\n\r\n@Test\r\nvoid assertThrowsException() {\r\n    String str = null;\r\n    assertThrows(IllegalArgumentException.class, () -> {\r\n      Integer.valueOf(str);\r\n    });\r\n}\r\n```","```\r\n@Suite\r\n@SelectPackages(\"com.baeldung\")\r\n@ExcludePackages(\"com.baeldung.suites\")\r\npublic class AllUnitTest {}\r\n```","```\r\n@Suite\r\n@SelectClasses({AssertionTest.class, AssumptionTest.class, ExceptionTest.class})\r\npublic class AllUnitTest {}\r\n```","```\r\n@TestFactory\r\nStream<DynamicTest> translateDynamicTestsFromStream() {\r\n    return in.stream()\r\n      .map(word ->\r\n          DynamicTest.dynamicTest(\"Test translate \" + word, () -> {\r\n            int id = in.indexOf(word);\r\n            assertEquals(out.get(id), translate(word));\r\n          })\r\n    );\r\n}\r\n```"]