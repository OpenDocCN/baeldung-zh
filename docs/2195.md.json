["```\r\nclass GameOfBones {\r\n    static List<Integer> getPossibleStates(int noOfBonesInHeap) {\r\n        return IntStream.rangeClosed(1, 3).boxed()\r\n          .map(i -> noOfBonesInHeap - i)\r\n          .filter(newHeapCount -> newHeapCount >= 0)\r\n          .collect(Collectors.toList());\r\n    }\r\n}\r\n```","```\r\npublic class Node {\r\n    int noOfBones;\r\n    boolean isMaxPlayer;\r\n    int score;\r\n    List<Node> children;\r\n    // setters and getters\r\n}\r\npublic class Tree {\r\n    Node root;\r\n    // setters and getters\r\n}\r\n```","```\r\npublic class MiniMax {\r\n    Tree tree;\r\n\r\n    public void constructTree(int noOfBones) {\r\n        tree = new Tree();\r\n        Node root = new Node(noOfBones, true);\r\n        tree.setRoot(root);\r\n        constructTree(root);\r\n    }\r\n\r\n    private void constructTree(Node parentNode) {\r\n        List<Integer> listofPossibleHeaps \r\n          = GameOfBones.getPossibleStates(parentNode.getNoOfBones());\r\n        boolean isChildMaxPlayer = !parentNode.isMaxPlayer();\r\n        listofPossibleHeaps.forEach(n -> {\r\n            Node newNode = new Node(n, isChildMaxPlayer);\r\n            parentNode.addChild(newNode);\r\n            if (newNode.getNoOfBones() > 0) {\r\n                constructTree(newNode);\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\npublic boolean checkWin() {\r\n    Node root = tree.getRoot();\r\n    checkWin(root);\r\n    return root.getScore() == 1;\r\n}\r\n\r\nprivate void checkWin(Node node) {\r\n    List<Node> children = node.getChildren();\r\n    boolean isMaxPlayer = node.isMaxPlayer();\r\n    children.forEach(child -> {\r\n        if (child.getNoOfBones() == 0) {\r\n            child.setScore(isMaxPlayer ? 1 : -1);\r\n        } else {\r\n            checkWin(child);\r\n        }\r\n    });\r\n    Node bestChild = findBestChild(isMaxPlayer, children);\r\n    node.setScore(bestChild.getScore());\r\n}\r\n```","```\r\nprivate Node findBestChild(boolean isMaxPlayer, List<Node> children) {\r\n    Comparator<Node> byScoreComparator = Comparator.comparing(Node::getScore);\r\n    return children.stream()\r\n      .max(isMaxPlayer ? byScoreComparator : byScoreComparator.reversed())\r\n      .orElseThrow(NoSuchElementException::new);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMiniMax_whenCheckWin_thenComputeOptimal() {\r\n    miniMax.constructTree(6);\r\n    boolean result = miniMax.checkWin();\r\n\r\n    assertTrue(result);\r\n\r\n    miniMax.constructTree(8);\r\n    result = miniMax.checkWin();\r\n\r\n    assertFalse(result);\r\n}\r\n```"]