["```\r\npublic record HealthData(\r\n\r\n    String userId,\r\n\r\n    float temperature, \r\n    float pulseRate,\r\n    int bpSystolic,\r\n    int bpDiastolic,\r\n\r\n    double latitude, \r\n    double longitude, \r\n    ZonedDateTime timestamp) {\r\n}\r\n```","```\r\npublic interface HealthService {\r\n    void process(HealthData healthData);\r\n}\r\n```","```\r\npublic class DefaultHealthService implements HealthService {\r\n\r\n    @Override\r\n    public void process(HealthData healthData) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic interface GeoLocationService {\r\n    String getRegion(double latitude, double longitude);\r\n}\r\n```","```\r\npublic class DefaultGeoLocationService implements GeoLocationService {\r\n\r\n    @Override\r\n    public String getRegion(double latitude, double longitude) {\r\n        return \"US\";\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate GeoLocationService geoLocationService;\r\n```","```\r\npublic void process(HealthData healthData) {\r\n\r\n    String region = geoLocationService.getRegion(\r\n        healthData.latitude(), \r\n        healthData.longitude());\r\n\r\n    // ...\r\n}\r\n```","```\r\nfauna-connections.EU=https://db.eu.fauna.com/\r\nfauna-secrets.EU=eu-secret\r\nfauna-connections.US=https://db.us.fauna.com/\r\nfauna-secrets.US=us-secret\r\n```","```\r\n{\r\n  \"userId\": \"baeldung-user\",\r\n  \"temperature\": \"37.2\",\r\n  \"pulseRate\": \"90\",\r\n  \"bpSystolic\": \"120\",\r\n  \"bpDiastolic\": \"80\",\r\n  \"latitude\": \"40.758896\",\r\n  \"longitude\": \"-73.985130\",\r\n  \"timestamp\": Now()\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.faunadb</groupId>\r\n    <artifactId>faunadb-java</artifactId>\r\n    <version>4.2.0</version>\r\n    <scope>compile</scope>\r\n</dependency>\r\n```","```\r\nFaunaClient client = FaunaClient.builder()\r\n    .withEndpoint(\"connection-url\")\r\n    .withSecret(\"secret\")\r\n    .build();\r\n```","```\r\npublic class FaunaClients {\r\n\r\n    public FaunaClient getFaunaClient(String region) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@ConfigurationProperties\r\npublic class FaunaClients {\r\n\r\n    private final Map<String, String> faunaConnections = new HashMap<>();\r\n    private final Map<String, String> faunaSecrets = new HashMap<>();\r\n\r\n    public Map<String, String> getFaunaConnections() {\r\n        return faunaConnections;\r\n    }\r\n\r\n    public Map<String, String> getFaunaSecrets() {\r\n        return faunaSecrets;\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-configuration-processor</artifactId>\r\n    <optional>true</optional>\r\n</dependency>\r\n```","```\r\npublic FaunaClient getFaunaClient(String region) {\r\n\r\n    String faunaUrl = faunaConnections.get(region);\r\n    String faunaSecret = faunaSecrets.get(region);\r\n\r\n    log.info(\"Creating Fauna Client for Region: {} with URL: {}\", region, faunaUrl);\r\n\r\n    return FaunaClient.builder()\r\n        .withEndpoint(faunaUrl)\r\n        .withSecret(faunaSecret)\r\n        .build();\r\n}\r\n```","```\r\npublic class DefaultHealthService implements HealthService {\r\n\r\n    @Autowired\r\n    private FaunaClients faunaClients;\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic void process(HealthData healthData) {\r\n\r\n    String region = geoLocationService.getRegion(\r\n        healthData.latitude(), \r\n        healthData.longitude());\r\n\r\n    FaunaClient faunaClient = faunaClients.getFaunaClient(region);\r\n}\r\n```","```\r\nValue queryResponse = faunaClient.query(\r\n    Create(Collection(\"healthdata\"), //)\r\n    ).get();\r\n```","```\r\nCreate(Collection(\"healthdata\"), \r\n    Obj(\"data\", \r\n        Obj(Map.of(\r\n            \"userId\", Value(healthData.userId())))))\r\n)\r\n```","```\r\nCreate(Collection(\"healthdata\"), \r\n    Obj(\"data\", \r\n        Obj(Map.of(\r\n            \"userId\", Value(healthData.userId()), \r\n            \"temperature\", Value(healthData.temperature()),\r\n            \"pulseRate\", Value(healthData.pulseRate()),\r\n            \"bpSystolic\", Value(healthData.bpSystolic()),\r\n            \"bpDiastolic\", Value(healthData.bpDiastolic()),\r\n            \"latitude\", Value(healthData.latitude()),\r\n            \"longitude\", Value(healthData.longitude()),\r\n            \"timestamp\", Now()))))\r\n```","```\r\nlog.info(\"Query response received from Fauna: {}\", queryResponse); \r\n```","```\r\n@SpringBootTest\r\nclass DefaultHealthServiceTest {\r\n\r\n    @Autowired\r\n    private DefaultHealthService defaultHealthService;\r\n\r\n    @MockBean\r\n    private GeoLocationService geoLocationService;\r\n\r\n    // ...\r\n} \r\n```","```\r\n@Test\r\nvoid givenEURegion_whenProcess_thenRequestSentToEURegion() {\r\n\r\n    HealthData healthData = new HealthData(\"user-1-eu\",\r\n        37.5f,\r\n        99f,\r\n        120, 80,\r\n        51.50, -0.07,\r\n        ZonedDateTime.now());\r\n\r\n    // ...\r\n}\r\n```","```\r\nwhen(geoLocationService.getRegion(51.50, -0.07)).thenReturn(\"EU\");\r\n\r\ndefaultHealthService.process(healthData);\r\n```","```\r\nCreating Fauna Client for Region:EU with URL:https://db.eu.fauna.com/\r\n```","```\r\nQuery response received from Fauna: \r\n{\r\nref: ref(id = \"338686945465991375\", \r\ncollection = ref(id = \"healthdata\", collection = ref(id = \"collections\"))), \r\nts: 1659255891215000, \r\ndata: {bpDiastolic: 80, \r\nuserId: \"user-1-eu\", \r\ntemperature: 37.5, \r\nlongitude: -0.07, latitude: 51.5, \r\nbpSystolic: 120, \r\npulseRate: 99.0, \r\ntimestamp: 2022-07-31T08:24:51.164033Z}}\r\n```","```\r\n@Test\r\nvoid givenUSRegion_whenProcess_thenRequestSentToUSRegion() {\r\n\r\n    HealthData healthData = new HealthData(\"user-1-us\", //\r\n        38.0f, //\r\n        100f, //\r\n        115, 85, //\r\n        40.75, -74.30, //\r\n        ZonedDateTime.now());\r\n\r\n    when(geoLocationService.getRegion(40.75, -74.30)).thenReturn(\"US\");\r\n\r\n    defaultHealthService.process(healthData);\r\n}\r\n```"]