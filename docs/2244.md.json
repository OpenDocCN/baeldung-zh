["```\r\nString getUniqueCharacterSubstringBruteForce(String input) {\r\n    String output = \"\";\r\n    for (int start = 0; start < input.length(); start++) {\r\n        Set<Character> visited = new HashSet<>();\r\n        int end = start;\r\n        for (; end < input.length(); end++) {\r\n            char currChar = input.charAt(end);\r\n            if (visited.contains(currChar)) {\r\n                break;\r\n            } else {\r\n                visited.add(currChar);\r\n            }\r\n        }\r\n        if (output.length() < end - start + 1) {\r\n            output = input.substring(start, end);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n```","```\r\nString getUniqueCharacterSubstring(String input) {\r\n    Map<Character, Integer> visited = new HashMap<>();\r\n    String output = \"\";\r\n    for (int start = 0, end = 0; end < input.length(); end++) {\r\n        char currChar = input.charAt(end);\r\n        if (visited.containsKey(currChar)) {\r\n            start = Math.max(visited.get(currChar)+1, start);\r\n        }\r\n        if (output.length() < end - start + 1) {\r\n            output = input.substring(start, end + 1);\r\n        }\r\n        visited.put(currChar, end);\r\n    }\r\n    return output;\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenGetUniqueCharacterSubstringCalled_thenResultFoundAsExpected() {\r\n    assertEquals(\"\", getUniqueCharacterSubstring(\"\"));\r\n    assertEquals(\"A\", getUniqueCharacterSubstring(\"A\"));\r\n    assertEquals(\"ABCDEF\", getUniqueCharacterSubstring(\"AABCDEF\"));\r\n    assertEquals(\"ABCDEF\", getUniqueCharacterSubstring(\"ABCDEFF\"));\r\n    assertEquals(\"NGISAWE\", getUniqueCharacterSubstring(\"CODINGISAWESOME\"));\r\n    assertEquals(\"be coding\", getUniqueCharacterSubstring(\"always be coding\"));\r\n}\r\n```"]