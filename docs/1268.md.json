["```\r\nINSERT INTO clients (client_id, client_secret, redirect_uri, scope, authorized_grant_types) \r\nVALUES ('webappclient', 'webappclientsecret', 'http://localhost:9180/callback', \r\n  'resource.read resource.write', 'authorization_code refresh_token');\r\n```","```\r\n@Entity\r\n@Table(name = \"clients\")\r\npublic class Client {\r\n    @Id\r\n    @Column(name = \"client_id\")\r\n    private String clientId;\r\n    @Column(name = \"client_secret\")\r\n    private String clientSecret;\r\n\r\n    @Column(name = \"redirect_uri\")\r\n    private String redirectUri;\r\n\r\n    @Column(name = \"scope\")\r\n    private String scope;\r\n\r\n    // ...\r\n}\r\n```","```\r\nINSERT INTO users (user_id, password, roles, scopes)\r\nVALUES ('appuser', 'appusersecret', 'USER', 'resource.read resource.write');\r\n```","```\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User implements Principal {\r\n    @Id\r\n    @Column(name = \"user_id\")\r\n    private String userId;\r\n\r\n    @Column(name = \"password\")\r\n    private String password;\r\n\r\n    @Column(name = \"roles\")\r\n    private String roles;\r\n\r\n    @Column(name = \"scopes\")\r\n    private String scopes;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@FormAuthenticationMechanismDefinition(\r\n  loginToContinue = @LoginToContinue(loginPage = \"/login.jsp\", errorPage = \"/login.jsp\")\r\n)\r\n```","```\r\nPrincipal principal = securityContext.getCallerPrincipal();\r\n```","```\r\n@FormAuthenticationMechanismDefinition(\r\n  loginToContinue = @LoginToContinue(loginPage = \"/login.jsp\", errorPage = \"/login.jsp\")\r\n)\r\n@Path(\"authorize\")\r\npublic class AuthorizationEndpoint {\r\n    //...    \r\n    @GET\r\n    @Produces(MediaType.TEXT_HTML)\r\n    public Response doGet(@Context HttpServletRequest request,\r\n      @Context HttpServletResponse response,\r\n      @Context UriInfo uriInfo) throws ServletException, IOException {\r\n\r\n        MultivaluedMap<String, String> params = uriInfo.getQueryParameters();\r\n        Principal principal = securityContext.getCallerPrincipal();\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nrequest.getSession().setAttribute(\"ORIGINAL_PARAMS\", params);\r\n```","```\r\nString allowedScopes = checkUserScopes(user.getScopes(), requestedScope);\r\nrequest.setAttribute(\"scopes\", allowedScopes);\r\nrequest.getRequestDispatcher(\"/authorize.jsp\").forward(request, response);\r\n```","```\r\n@POST\r\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\n@Produces(MediaType.TEXT_HTML)\r\npublic Response doPost(@Context HttpServletRequest request, @Context HttpServletResponse response,\r\n  MultivaluedMap<String, String> params) throws Exception {\r\n    MultivaluedMap<String, String> originalParams = \r\n      (MultivaluedMap<String, String>) request.getSession().getAttribute(\"ORIGINAL_PARAMS\");\r\n\r\n    // ...\r\n\r\n    String approvalStatus = params.getFirst(\"approval_status\"); // YES OR NO\r\n\r\n    // ... if YES\r\n\r\n    List<String> approvedScopes = params.get(\"scope\");\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Entity\r\n@Table(name =\"authorization_code\")\r\npublic class AuthorizationCode {\r\n@Id\r\n@GeneratedValue(strategy=GenerationType.AUTO)\r\n@Column(name = \"code\")\r\nprivate String code;\r\n\r\n//...\r\n\r\n}\r\n```","```\r\nAuthorizationCode authorizationCode = new AuthorizationCode();\r\nauthorizationCode.setClientId(clientId);\r\nauthorizationCode.setUserId(userId);\r\nauthorizationCode.setApprovedScopes(String.join(\" \", authorizedScopes));\r\nauthorizationCode.setExpirationDate(LocalDateTime.now().plusMinutes(2));\r\nauthorizationCode.setRedirectUri(redirectUri);\r\n```","```\r\nappDataRepository.save(authorizationCode);\r\nString code = authorizationCode.getCode();\r\n```","```\r\nStringBuilder sb = new StringBuilder(redirectUri);\r\n// ...\r\n\r\nsb.append(\"?code=\").append(code);\r\nString state = params.getFirst(\"state\");\r\nif (state != null) {\r\n    sb.append(\"&state;=\").append(state);\r\n}\r\nURI location = UriBuilder.fromUri(sb.toString()).build();\r\nreturn Response.seeOther(location).build();\r\n```","```\r\n@Path(\"token\")\r\npublic class TokenEndpoint {\r\n\r\n    List<String> supportedGrantTypes = Collections.singletonList(\"authorization_code\");\r\n\r\n    @Inject\r\n    private AppDataRepository appDataRepository;\r\n\r\n    @Inject\r\n    Instance<AuthorizationGrantTypeHandler> authorizationGrantTypeHandlers;\r\n\r\n    @POST\r\n    @Produces(MediaType.APPLICATION_JSON)\r\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\n    public Response token(MultivaluedMap<String, String> params,\r\n       @HeaderParam(HttpHeaders.AUTHORIZATION) String authHeader) throws JOSEException {\r\n        //...\r\n    }\r\n}\r\n```","```\r\nList<String> supportedGrantTypes = Collections.singletonList(\"authorization_code\");\r\n```","```\r\nString grantType = params.getFirst(\"grant_type\");\r\nObjects.requireNonNull(grantType, \"grant_type params is required\");\r\nif (!supportedGrantTypes.contains(grantType)) {\r\n    JsonObject error = Json.createObjectBuilder()\r\n      .add(\"error\", \"unsupported_grant_type\")\r\n      .add(\"error_description\", \"grant type should be one of :\" + supportedGrantTypes)\r\n      .build();\r\n    return Response.status(Response.Status.BAD_REQUEST)\r\n      .entity(error).build();\r\n}\r\n```","```\r\nString[] clientCredentials = extract(authHeader);\r\nString clientId = clientCredentials[0];\r\nString clientSecret = clientCredentials[1];\r\nClient client = appDataRepository.getClient(clientId);\r\nif (client == null || clientSecret == null || !clientSecret.equals(client.getClientSecret())) {\r\n    JsonObject error = Json.createObjectBuilder()\r\n      .add(\"error\", \"invalid_client\")\r\n      .build();\r\n    return Response.status(Response.Status.UNAUTHORIZED)\r\n      .entity(error).build();\r\n}\r\n```","```\r\npublic interface AuthorizationGrantTypeHandler {\r\n    TokenResponse createAccessToken(String clientId, MultivaluedMap<String, String> params) throws Exception;\r\n}\r\n```","```\r\n@Named(\"authorization_code\")\r\n```","```\r\nString grantType = params.getFirst(\"grant_type\");\r\n//...\r\nAuthorizationGrantTypeHandler authorizationGrantTypeHandler = \r\n  authorizationGrantTypeHandlers.select(NamedLiteral.of(grantType)).get();\r\n```","```\r\n# PRIVATE KEY\r\nopenssl genpkey -algorithm RSA -out private-key.pem -pkeyopt rsa_keygen_bits:2048\r\n```","```\r\nsigningkey=/META-INF/private-key.pem\r\n```","```\r\nString signingkey = config.getValue(\"signingkey\", String.class);\r\n```","```\r\n# PUBLIC KEY\r\nopenssl rsa -pubout -in private-key.pem -out public-key.pem\r\n```","```\r\nverificationkey=/META-INF/public-key.pem\r\n```","```\r\n<dependency>\r\n    <groupId>com.nimbusds</groupId>\r\n    <artifactId>nimbus-jose-jwt</artifactId>\r\n    <version>7.7</version>\r\n</dependency>\r\n```","```\r\n@Path(\"jwk\")\r\n@ApplicationScoped\r\npublic class JWKEndpoint {\r\n\r\n    @GET\r\n    public Response getKey(@QueryParam(\"format\") String format) throws Exception {\r\n        //...\r\n\r\n        String verificationkey = config.getValue(\"verificationkey\", String.class);\r\n        String pemEncodedRSAPublicKey = PEMKeyUtils.readKeyAsString(verificationkey);\r\n        if (format == null || format.equals(\"jwk\")) {\r\n            JWK jwk = JWK.parseFromPEMEncodedObjects(pemEncodedRSAPublicKey);\r\n            return Response.ok(jwk.toJSONString()).type(MediaType.APPLICATION_JSON).build();\r\n        } else if (format.equals(\"pem\")) {\r\n            return Response.ok(pemEncodedRSAPublicKey).build();\r\n        }\r\n\r\n        //...\r\n    }\r\n}\r\n```","```\r\nJWSHeader jwsHeader = new JWSHeader.Builder(JWSAlgorithm.RS256).type(JOSEObjectType.JWT).build();\r\n```","```\r\nInstant now = Instant.now();\r\nLong expiresInMin = 30L;\r\nDate in30Min = Date.from(now.plus(expiresInMin, ChronoUnit.MINUTES));\r\n\r\nJWTClaimsSet jwtClaims = new JWTClaimsSet.Builder()\r\n  .issuer(\"http://localhost:9080\")\r\n  .subject(authorizationCode.getUserId())\r\n  .claim(\"upn\", authorizationCode.getUserId())\r\n  .audience(\"http://localhost:9280\")\r\n  .claim(\"scope\", authorizationCode.getApprovedScopes())\r\n  .claim(\"groups\", Arrays.asList(authorizationCode.getApprovedScopes().split(\" \")))\r\n  .expirationTime(in30Min)\r\n  .notBeforeTime(Date.from(now))\r\n  .issueTime(Date.from(now))\r\n  .jwtID(UUID.randomUUID().toString())\r\n  .build();\r\nSignedJWT signedJWT = new SignedJWT(jwsHeader, jwtClaims);\r\n```","```\r\nSignedJWT signedJWT = new SignedJWT(jwsHeader, jwtClaims);\r\n//...\r\nString signingkey = config.getValue(\"signingkey\", String.class);\r\nString pemEncodedRSAPrivateKey = PEMKeyUtils.readKeyAsString(signingkey);\r\nRSAKey rsaKey = (RSAKey) JWK.parseFromPEMEncodedObjects(pemEncodedRSAPrivateKey);\r\n```","```\r\nsignedJWT.sign(new RSASSASigner(rsaKey.toRSAPrivateKey()));\r\nString accessToken = signedJWT.serialize();\r\n```","```\r\nreturn Json.createObjectBuilder()\r\n  .add(\"token_type\", \"Bearer\")\r\n  .add(\"access_token\", accessToken)\r\n  .add(\"expires_in\", expiresInMin * 60)\r\n  .add(\"scope\", authorizationCode.getApprovedScopes())\r\n  .build();\r\n```","```\r\n{\r\n  \"access_token\": \"acb6803a48114d9fb4761e403c17f812\",\r\n  \"token_type\": \"Bearer\",  \r\n  \"expires_in\": 1800,\r\n  \"scope\": \"resource.read resource.write\"\r\n}\r\n```","```\r\n# Client registration\r\nclient.clientId=webappclient\r\nclient.clientSecret=webappclientsecret\r\nclient.redirectUri=http://localhost:9180/callback\r\nclient.scope=resource.read resource.write\r\n\r\n# Provider\r\nprovider.authorizationUri=http://127.0.0.1:9080/authorize\r\nprovider.tokenUri=http://127.0.0.1:9080/token\r\n```","```\r\n@WebServlet(urlPatterns = \"/authorize\")\r\npublic class AuthorizationCodeServlet extends HttpServlet {\r\n\r\n    @Inject\r\n    private Config config;\r\n\r\n    @Override\r\n    protected void doGet(HttpServletRequest request, \r\n      HttpServletResponse response) throws ServletException, IOException {\r\n        //...\r\n    }\r\n}\r\n```","```\r\nString state = UUID.randomUUID().toString();\r\nrequest.getSession().setAttribute(\"CLIENT_LOCAL_STATE\", state);\r\n```","```\r\nString authorizationUri = config.getValue(\"provider.authorizationUri\", String.class);\r\nString clientId = config.getValue(\"client.clientId\", String.class);\r\nString redirectUri = config.getValue(\"client.redirectUri\", String.class);\r\nString scope = config.getValue(\"client.scope\", String.class);\r\n```","```\r\nString authorizationLocation = authorizationUri + \"?response_type=code\"\r\n  + \"&client;_id=\" + clientId\r\n  + \"&redirect;_uri=\" + redirectUri\r\n  + \"&scope;=\" + scope\r\n  + \"&state;=\" + state;\r\n```","```\r\nresponse.sendRedirect(authorizationLocation);\r\n```","```\r\nString localState = (String) request.getSession().getAttribute(\"CLIENT_LOCAL_STATE\");\r\nif (!localState.equals(request.getParameter(\"state\"))) {\r\n    request.setAttribute(\"error\", \"The state attribute doesn't match!\");\r\n    dispatch(\"/\", request, response);\r\n    return;\r\n}\r\n```","```\r\nString code = request.getParameter(\"code\");\r\nClient client = ClientBuilder.newClient();\r\nWebTarget target = client.target(config.getValue(\"provider.tokenUri\", String.class));\r\n\r\nForm form = new Form();\r\nform.param(\"grant_type\", \"authorization_code\");\r\nform.param(\"code\", code);\r\nform.param(\"redirect_uri\", config.getValue(\"client.redirectUri\", String.class));\r\n\r\nTokenResponse tokenResponse = target.request(MediaType.APPLICATION_JSON_TYPE)\r\n  .header(HttpHeaders.AUTHORIZATION, getAuthorizationHeaderValue())\r\n  .post(Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED_TYPE), TokenResponse.class);\r\n```","```\r\nresourceWebTarget = webTarget.path(\"resource/read\");\r\nInvocation.Builder invocationBuilder = resourceWebTarget.request();\r\nresponse = invocationBuilder\r\n  .header(\"authorization\", tokenResponse.getString(\"access_token\"))\r\n  .get(String.class);\r\n```","```\r\n<dependency>\r\n    <groupId>javax</groupId>\r\n    <artifactId>javaee-web-api</artifactId>\r\n    <version>8.0</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.eclipse.microprofile.config</groupId>\r\n    <artifactId>microprofile-config-api</artifactId>\r\n    <version>1.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.eclipse.microprofile.jwt</groupId>\r\n    <artifactId>microprofile-jwt-auth-api</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n```","```\r\n@ApplicationPath(\"/api\")\r\n@DeclareRoles({\"resource.read\", \"resource.write\"})\r\n@LoginConfig(authMethod = \"MP-JWT\")\r\npublic class OAuth2ResourceServerApplication extends Application {\r\n}\r\n```","```\r\nmp.jwt.verify.publickey.location=/META-INF/public-key.pem\r\n```","```\r\nmp.jwt.verify.issuer=http://127.0.0.1:9080\r\n```","```\r\n@Path(\"/resource\")\r\n@RequestScoped\r\npublic class ProtectedResource {\r\n\r\n    @Inject\r\n    private JsonWebToken principal;\r\n\r\n    @GET\r\n    @RolesAllowed(\"resource.read\")\r\n    @Path(\"/read\")\r\n    public String read() {\r\n        return \"Protected Resource accessed by : \" + principal.getName();\r\n    }\r\n\r\n    @POST\r\n    @RolesAllowed(\"resource.write\")\r\n    @Path(\"/write\")\r\n    public String write() {\r\n        return \"Protected Resource accessed by : \" + principal.getName();\r\n    }\r\n}\r\n```","```\r\nmvn package liberty:run-server\r\n```","```\r\n# Authorization Server\r\nhttp://localhost:9080/\r\n\r\n# Client\r\nhttp://localhost:9180/\r\n\r\n# Resource Server\r\nhttp://localhost:9280/ \r\n```"]