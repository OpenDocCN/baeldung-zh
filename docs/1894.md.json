["```\r\nSaslServer ss = Sasl.createSaslServer(\r\n  mechanism, \r\n  protocol, \r\n  serverName, \r\n  props, \r\n  callbackHandler);\r\n```","```\r\nSaslClient sc = Sasl.createSaslClient(\r\n  mechanisms, \r\n  authorizationId, \r\n  protocol, \r\n  serverName, \r\n  props,\r\n  callbackHandler);\r\n```","```\r\npublic class ServerCallbackHandler implements CallbackHandler {\r\n    @Override\r\n    public void handle(Callback[] cbs) throws IOException, UnsupportedCallbackException {\r\n        for (Callback cb : cbs) {\r\n            if (cb instanceof AuthorizeCallback) {\r\n                AuthorizeCallback ac = (AuthorizeCallback) cb;\r\n                //Perform application-specific authorization action\r\n                ac.setAuthorized(true);\r\n            } else if (cb instanceof NameCallback) {\r\n                NameCallback nc = (NameCallback) cb;\r\n                //Collect username in application-specific manner\r\n                nc.setName(\"username\");\r\n            } else if (cb instanceof PasswordCallback) {\r\n                PasswordCallback pc = (PasswordCallback) cb;\r\n                //Collect password in application-specific manner\r\n                pc.setPassword(\"password\".toCharArray());\r\n            } else if (cb instanceof RealmCallback) { \r\n                RealmCallback rc = (RealmCallback) cb; \r\n                //Collect realm data in application-specific manner \r\n                rc.setText(\"myServer\"); \r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class ClientCallbackHandler implements CallbackHandler {\r\n    @Override\r\n    public void handle(Callback[] cbs) throws IOException, UnsupportedCallbackException {\r\n        for (Callback cb : cbs) {\r\n            if (cb instanceof NameCallback) {\r\n                NameCallback nc = (NameCallback) cb;\r\n                //Collect username in application-specific manner\r\n                nc.setName(\"username\");\r\n            } else if (cb instanceof PasswordCallback) {\r\n                PasswordCallback pc = (PasswordCallback) cb;\r\n                //Collect password in application-specific manner\r\n                pc.setPassword(\"password\".toCharArray());\r\n            } else if (cb instanceof RealmCallback) { \r\n                RealmCallback rc = (RealmCallback) cb; \r\n                //Collect realm data in application-specific manner \r\n                rc.setText(\"myServer\"); \r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenHandlers_whenStarted_thenAutenticationWorks() throws SaslException {\r\n    byte[] challenge;\r\n    byte[] response;\r\n\r\n    challenge = saslServer.evaluateResponse(new byte[0]);\r\n    response = saslClient.evaluateChallenge(challenge);\r\n\r\n    challenge = saslServer.evaluateResponse(response);\r\n    response = saslClient.evaluateChallenge(challenge);\r\n\r\n    assertTrue(saslServer.isComplete());\r\n    assertTrue(saslClient.isComplete());\r\n}\r\n```","```\r\nString qop = (String) saslClient.getNegotiatedProperty(Sasl.QOP);\r\n\r\nassertEquals(\"auth-conf\", qop);\r\n```","```\r\nbyte[] outgoing = \"Baeldung\".getBytes();\r\nbyte[] secureOutgoing = saslClient.wrap(outgoing, 0, outgoing.length);\r\n\r\n// Send secureOutgoing to the server over the network\r\n```","```\r\n// Receive secureIncoming from the client over the network\r\nbyte[] incoming = saslServer.unwrap(secureIncoming, 0, netIn.length);\r\n\r\nassertEquals(\"Baeldung\", new String(incoming, StandardCharsets.UTF_8));\r\n```","```\r\nKafkaClient {\r\n  org.apache.kafka.common.security.plain.PlainLoginModule required\r\n  username=\"username\"\r\n  password=\"password\";\r\n};\r\n```","```\r\n-Djava.security.auth.login.config=kafka_jaas.conf\r\n```","```\r\nsecurity.protocol=SASL_SSL\r\nsasl.mechanism=PLAIN\r\n```"]