["```\r\npublic abstract class Vehicle {\r\n    private String name;\r\n    private String manufacturer;\r\n\r\n    // ... getters, setters etc\r\n}\r\n```","```\r\npublic class Car extends Vehicle {\r\n    private String engineType;\r\n\r\n    // ... getters, setters etc\r\n}\r\n```","```\r\n@Autowired\r\nprivate List<Vehicle> vehicles;\r\n```","```\r\n@Target({\r\n  ElementType.FIELD, \r\n  ElementType.METHOD,\r\n  ElementType.TYPE, \r\n  ElementType.PARAMETER})\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Qualifier\r\npublic @interface CarQualifier {\r\n}\r\n```","```\r\n@Autowired\r\n@CarQualifier\r\nprivate List<Vehicle> vehicles;\r\n```","```\r\npublic class CustomConfiguration {\r\n    @Bean\r\n    @CarQualifier\r\n    public Car getMercedes() {\r\n        return new Car(\"E280\", \"Mercedes\", \"Diesel\");\r\n    }\r\n}\r\n```","```\r\npublic class Motorcycle extends Vehicle {\r\n    private boolean twoWheeler;\r\n    //... getters, setters etc\r\n}\r\n```","```\r\n@Autowired\r\nprivate List<Car> vehicles; \r\n```","```\r\nResolvableType vehiclesType = ResolvableType.forField(getClass().getDeclaredField(\"vehicles\"));\r\nSystem.out.println(vehiclesType);\r\n\r\nResolvableType type = vehiclesType.getGeneric();\r\nSystem.out.println(type);\r\n\r\nClass<?> aClass = type.resolve();\r\nSystem.out.println(aClass);\r\n```","```\r\njava.util.List<com.example.model.Vehicle>\r\ncom.example.model.Vehicle\r\nclass com.example.model.Vehicle \r\n```"]