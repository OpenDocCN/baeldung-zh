["```\r\n@SpringBootApplication\r\n@EnableAsync\r\npublic class AsyncVsWebFluxApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AsyncVsWebFluxApp.class, args);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class AsyncFilter implements Filter {\r\n    ...\r\n    @Override\r\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\r\n      throws IOException, ServletException {\r\n        // sleep for 200ms \r\n        filterChain.doFilter(servletRequest, servletResponse);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class AsyncController {\r\n    @GetMapping(\"/async_result\")\r\n    @Async\r\n    public CompletableFuture getResultAsyc(HttpServletRequest request) {\r\n        // sleep for 500 ms\r\n        return CompletableFuture.completedFuture(\"Result is ready!\");\r\n    }\r\n}\r\n```","```\r\nab -n 1600 -c 40 localhost:8080/async_result\r\n```","```\r\n@SpringBootApplication\r\npublic class AsyncVsWebFluxApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AsyncVsWebFluxApp.class, args);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class WebFluxFilter implements org.springframework.web.server.WebFilter {\r\n\r\n    @Override\r\n    public Mono filter(ServerWebExchange serverWebExchange, WebFilterChain webFilterChain) {\r\n        return Mono\r\n          .delay(Duration.ofMillis(200))\r\n          .then(\r\n            webFilterChain.filter(serverWebExchange)\r\n          );\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class WebFluxController {\r\n\r\n    @GetMapping(\"/flux_result\")\r\n    public Mono getResult(ServerHttpRequest request) {\r\n       return Mono.defer(() -> Mono.just(\"Result is ready!\"))\r\n         .delaySubscription(Duration.ofMillis(500));\r\n    }\r\n}\r\n```","```\r\nab -n 1600 -c 40 localhost:8080/flux_result\r\n```"]