["```\r\nprivate static void getCrytpographyProviderName() {\r\n    LOGGER.info(\"1\\. JCE Provider Name: {}\\n\", new SunJCE().getName());\r\n}\r\n```","```\r\nprivate static void getCallStackClassNames() {\r\n    StringBuffer sbStack = new StringBuffer();\r\n    int i = 0;\r\n    Class<?> caller = Reflection.getCallerClass(i++);\r\n    do {\r\n        sbStack.append(i + \".\").append(caller.getName())\r\n            .append(\"\\n\");\r\n        caller = Reflection.getCallerClass(i++);\r\n    } while (caller != null);\r\n    LOGGER.info(\"2\\. Call Stack:\\n{}\", sbStack);\r\n}\r\n```","```\r\nprivate static void getXmlFromObject(Book book) throws JAXBException {\r\n    Marshaller marshallerObj = JAXBContext.newInstance(Book.class).createMarshaller();\r\n    marshallerObj.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\r\n\r\n    StringWriter sw = new StringWriter();\r\n    marshallerObj.marshal(book, sw);\r\n    LOGGER.info(\"3\\. Xml for Book object:\\n{}\", sw);\r\n}\r\n```","```\r\nprivate static void getBase64EncodedString(String inputString) {\r\n    String encodedString = new BASE64Encoder().encode(inputString.getBytes());\r\n    LOGGER.info(\"4\\. Base Encoded String: {}\", encodedString);\r\n}\r\n```","```\r\npublic static void main(String[] args) throws Exception {\r\n    getCrytpographyProviderName();\r\n    getCallStackClassNames();\r\n    getXmlFromObject(new Book(100, \"Java Modules Architecture\"));\r\n    getBase64EncodedString(\"Java\");\r\n}\r\n```","```\r\n> java -jar target\\pre-jpms.jar\r\n[INFO] 1\\. JCE Provider Name: SunJCE\r\n\r\n[INFO] 2\\. Call Stack:\r\n1.sun.reflect.Reflection\r\n2.com.baeldung.prejpms.App\r\n3.com.baeldung.prejpms.App\r\n\r\n[INFO] 3\\. Xml for Book object:\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<book id=\"100\">\r\n    <title>Java Modules Architecture</title>\r\n</book>\r\n\r\n[INFO] 4\\. Base Encoded String: SmF2YQ==\r\n```","```\r\n>java -jar target\\pre-jpms.jar\r\n[INFO] 1\\. JCE Provider Name: SunJCE\r\n\r\n[INFO] 2\\. Call Stack:\r\n1.sun.reflect.Reflection\r\n2.com.baeldung.prejpms.App\r\n3.com.baeldung.prejpms.App\r\n\r\n[ERROR] java.lang.NoClassDefFoundError: javax/xml/bind/JAXBContext\r\n[ERROR] java.lang.NoClassDefFoundError: sun/misc/BASE64Encoder\r\n```","```\r\n>jdeps target\\pre-jpms.jar\r\n   com.baeldung.prejpms            -> com.sun.crypto.provider               JDK internal API (java.base)\r\n   com.baeldung.prejpms            -> java.io                               java.base\r\n   com.baeldung.prejpms            -> java.lang                             java.base\r\n   com.baeldung.prejpms            -> javax.xml.bind                        java.xml.bind\r\n   com.baeldung.prejpms            -> javax.xml.bind.annotation             java.xml.bind\r\n   com.baeldung.prejpms            -> org.slf4j                             not found\r\n   com.baeldung.prejpms            -> sun.misc                              JDK internal API (JDK removed internal API)\r\n   com.baeldung.prejpms            -> sun.reflect                           JDK internal API (jdk.unsupported)\r\n```","```\r\n>java --add-modules java.xml.bind -jar target\\pre-jpms.jar\r\n...\r\nINFO 3\\. Xml for Book object:\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<book id=\"100\">\r\n    <title>Java Modules Architecture</title>\r\n</book>\r\n...\r\n```","```\r\n<dependency>\r\n    <groupId>javax.xml.bind</groupId>\r\n    <artifactId>jaxb-api</artifactId>\r\n    <version>2.3.1</version>\r\n</dependency>\r\n```","```\r\n>jdeps --jdk-internals target\\pre-jpms.jar\r\n...\r\nJDK Internal API                         Suggested Replacement\r\n----------------                         ---------------------\r\ncom.sun.crypto.provider.SunJCE           Use java.security.Security.getProvider(provider-name) @since 1.3\r\nsun.misc.BASE64Encoder                   Use java.util.Base64 @since 1.8\r\nsun.reflect.Reflection                   Use java.lang.StackWalker @since 9\r\n```"]