["```\r\npublic class EndSubscriber<T> implements Subscriber<T> {\r\n    private Subscription subscription;\r\n    public List<T> consumedElements = new LinkedList<>();\r\n\r\n    @Override\r\n    public void onSubscribe(Subscription subscription) {\r\n        this.subscription = subscription;\r\n        subscription.request(1);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void onNext(T item) {\r\n    System.out.println(\"Got : \" + item);\r\n    consumedElements.add(item);\r\n    subscription.request(1);\r\n}\r\n```","```\r\n@Override\r\npublic void onError(Throwable t) {\r\n    t.printStackTrace();\r\n}\r\n\r\n@Override\r\npublic void onComplete() {\r\n    System.out.println(\"Done\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenSubscribeToIt_thenShouldConsumeAll() \r\n  throws InterruptedException {\r\n\r\n    // given\r\n    SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\r\n    EndSubscriber<String> subscriber = new EndSubscriber<>();\r\n    publisher.subscribe(subscriber);\r\n    List<String> items = List.of(\"1\", \"x\", \"2\", \"x\", \"3\", \"x\");\r\n\r\n    // when\r\n    assertThat(publisher.getNumberOfSubscribers()).isEqualTo(1);\r\n    items.forEach(publisher::submit);\r\n    publisher.close();\r\n\r\n    // then\r\n     await().atMost(1000, TimeUnit.MILLISECONDS)\r\n       .until(\r\n         () -> assertThat(subscriber.consumedElements)\r\n         .containsExactlyElementsOf(items)\r\n     );\r\n}\r\n```","```\r\nGot : 1\r\nGot : x\r\nGot : 2\r\nGot : x\r\nGot : 3\r\nGot : x\r\nDone\r\n```","```\r\npublic class TransformProcessor<T, R> \r\n  extends SubmissionPublisher<R> \r\n  implements Flow.Processor<T, R> {\r\n\r\n    private Function<T, R> function;\r\n    private Flow.Subscription subscription;\r\n\r\n    public TransformProcessor(Function<T, R> function) {\r\n        super();\r\n        this.function = function;\r\n    }\r\n\r\n    @Override\r\n    public void onSubscribe(Flow.Subscription subscription) {\r\n        this.subscription = subscription;\r\n        subscription.request(1);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(T item) {\r\n        submit(function.apply(item));\r\n        subscription.request(1);\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable t) {\r\n        t.printStackTrace();\r\n    }\r\n\r\n    @Override\r\n    public void onComplete() {\r\n        close();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSubscribeAndTransformElements_thenShouldConsumeAll()\r\n  throws InterruptedException {\r\n\r\n    // given\r\n    SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\r\n    TransformProcessor<String, Integer> transformProcessor \r\n      = new TransformProcessor<>(Integer::parseInt);\r\n    EndSubscriber<Integer> subscriber = new EndSubscriber<>();\r\n    List<String> items = List.of(\"1\", \"2\", \"3\");\r\n    List<Integer> expectedResult = List.of(1, 2, 3);\r\n\r\n    // when\r\n    publisher.subscribe(transformProcessor);\r\n    transformProcessor.subscribe(subscriber);\r\n    items.forEach(publisher::submit);\r\n    publisher.close();\r\n\r\n    // then\r\n     await().atMost(1000, TimeUnit.MILLISECONDS)\r\n       .until(() -> \r\n         assertThat(subscriber.consumedElements)\r\n         .containsExactlyElementsOf(expectedResult)\r\n     );\r\n}\r\n```","```\r\npublic class EndSubscriber<T> implements Subscriber<T> {\r\n\r\n    private AtomicInteger howMuchMessagesConsume;\r\n    private Subscription subscription;\r\n    public List<T> consumedElements = new LinkedList<>();\r\n\r\n    public EndSubscriber(Integer howMuchMessagesConsume) {\r\n        this.howMuchMessagesConsume \r\n          = new AtomicInteger(howMuchMessagesConsume);\r\n    }\r\n\r\n    @Override\r\n    public void onSubscribe(Subscription subscription) {\r\n        this.subscription = subscription;\r\n        subscription.request(1);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(T item) {\r\n        howMuchMessagesConsume.decrementAndGet();\r\n        System.out.println(\"Got : \" + item);\r\n        consumedElements.add(item);\r\n        if (howMuchMessagesConsume.get() > 0) {\r\n            subscription.request(1);\r\n        }\r\n    }\r\n    //...\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenRequestForOnlyOneElement_thenShouldConsumeOne()\r\n  throws InterruptedException {\r\n\r\n    // given\r\n    SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\r\n    EndSubscriber<String> subscriber = new EndSubscriber<>(1);\r\n    publisher.subscribe(subscriber);\r\n    List<String> items = List.of(\"1\", \"x\", \"2\", \"x\", \"3\", \"x\");\r\n    List<String> expected = List.of(\"1\");\r\n\r\n    // when\r\n    assertThat(publisher.getNumberOfSubscribers()).isEqualTo(1);\r\n    items.forEach(publisher::submit);\r\n    publisher.close();\r\n\r\n    // then\r\n    await().atMost(1000, TimeUnit.MILLISECONDS)\r\n      .until(() -> \r\n        assertThat(subscriber.consumedElements)\r\n       .containsExactlyElementsOf(expected)\r\n    );\r\n}\r\n```"]