["```\r\npublic class MongoConnectionApplicationLiveTest {\r\n    private static final String HOST = \"localhost\";\r\n    private static final String PORT = \"27017\";\r\n    private static final String DB = \"baeldung\";\r\n    private static final String USER = \"admin\";\r\n    private static final String PASS = \"password\";\r\n\r\n    // test cases\r\n}\r\n```","```\r\nprivate void assertInsertSucceeds(ConfigurableApplicationContext context) {\r\n    String name = \"A\";\r\n\r\n    MongoTemplate mongo = context.getBean(MongoTemplate.class);\r\n    Document doc = Document.parse(\"{\\\"name\\\":\\\"\" + name + \"\\\"}\");\r\n    Document inserted = mongo.insert(doc, \"items\");\r\n\r\n    assertNotNull(inserted.get(\"_id\"));\r\n    assertEquals(inserted.get(\"name\"), name);\r\n}\r\n```","```\r\nspring.data.mongodb.host=localhost\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=baeldung\r\nspring.data.mongodb.username=admin\r\nspring.data.mongodb.password=password\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringMongoConnectionViaPropertiesApp {\r\n\r\n    public static void main(String... args) {\r\n        SpringApplication.run(SpringMongoConnectionViaPropertiesApp.class, args);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenPropertiesConfig_thenInsertSucceeds() {\r\n    SpringApplicationBuilder app = new SpringApplicationBuilder(SpringMongoConnectionViaPropertiesApp.class)\r\n    app.run();\r\n\r\n    assertInsertSucceeds(app.context());\r\n}\r\n```","```\r\nmvn spring-boot:run -Dspring-boot.run.arguments='--spring.data.mongodb.port=7017 --spring.data.mongodb.host=localhost'\r\n```","```\r\n@Test\r\npublic void givenPrecedence_whenSystemConfig_thenInsertSucceeds() {\r\n    System.setProperty(\"spring.data.mongodb.host\", HOST);\r\n    System.setProperty(\"spring.data.mongodb.port\", PORT);\r\n    System.setProperty(\"spring.data.mongodb.database\", DB);\r\n    System.setProperty(\"spring.data.mongodb.username\", USER);\r\n    System.setProperty(\"spring.data.mongodb.password\", PASS);\r\n\r\n    SpringApplicationBuilder app = new SpringApplicationBuilder(SpringMongoConnectionViaPropertiesApp.class);\r\n      .properties(\r\n        \"spring.data.mongodb.host=oldValue\",\r\n        \"spring.data.mongodb.port=oldValue\",\r\n        \"spring.data.mongodb.database=oldValue\",\r\n        \"spring.data.mongodb.username=oldValue\",\r\n        \"spring.data.mongodb.password=oldValue\"\r\n      );\r\n    app.run();\r\n\r\n    assertInsertSucceeds(app.context());\r\n}\r\n```","```\r\nspring.data.mongodb.uri=\"mongodb://admin:[[emailÂ protected]](/web/20221004150550/https://www.baeldung.com/cdn-cgi/l/email-protection):27017/baeldung\"\r\n```","```\r\nmongodb://<username>:<password>@<host>:<port>/<database>\r\n```","```\r\n@Test\r\npublic void givenConnectionUri_whenAlsoIncludingIndividualParameters_thenInvalidConfig() {\r\n    System.setProperty(\r\n      \"spring.data.mongodb.uri\", \r\n      \"mongodb://\" + USER + \":\" + PASS + \"@\" + HOST + \":\" + PORT + \"/\" + DB\r\n    );\r\n\r\n    SpringApplicationBuilder app = new SpringApplicationBuilder(SpringMongoConnectionViaPropertiesApp.class)\r\n      .properties(\r\n        \"spring.data.mongodb.host=\" + HOST,\r\n        \"spring.data.mongodb.port=\" + PORT,\r\n        \"spring.data.mongodb.username=\" + USER,\r\n        \"spring.data.mongodb.password=\" + PASS\r\n      );\r\n\r\n    BeanCreationException e = assertThrows(BeanCreationException.class, () -> {\r\n        app.run();\r\n    });\r\n\r\n    Throwable rootCause = e.getRootCause();\r\n    assertTrue(rootCause instanceof IllegalStateException);\r\n    assertThat(rootCause.getMessage()\r\n      .contains(\"Invalid mongo configuration, either uri or host/port/credentials/replicaSet must be specified\"));\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringMongoConnectionViaClientApp extends AbstractMongoClientConfiguration {\r\n    // main method\r\n} \r\n```","```\r\n@Value(\"${spring.data.mongodb.uri}\")\r\nprivate String uri;\r\n\r\n@Value(\"${spring.data.mongodb.database}\")\r\nprivate String db;\r\n```","```\r\nprotected String getDatabaseName() {\r\n    return db;\r\n}\r\n```","```\r\n@Test\r\npublic void whenClientConfig_thenInsertSucceeds() {\r\n    SpringApplicationBuilder app = new SpringApplicationBuilder(SpringMongoConnectionViaClientApp.class);\r\n    app.web(WebApplicationType.NONE)\r\n      .run(\r\n        \"--spring.data.mongodb.uri=mongodb://\" + USER + \":\" + PASS + \"@\" + HOST + \":\" + PORT + \"/\" + DB,\r\n        \"--spring.data.mongodb.database=\" + DB\r\n      );\r\n\r\n    assertInsertSucceeds(app.context());\r\n}\r\n```","```\r\n@Override\r\npublic MongoClient mongoClient() {\r\n    MongoClient client = MongoClients.create(uri);\r\n    ListDatabasesIterable<Document> databases = client.listDatabases();\r\n    databases.forEach(System.out::println);\r\n    return client;\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringMongoConnectionViaFactoryApp {\r\n\r\n    // main method\r\n\r\n    @Bean\r\n    public MongoClientFactoryBean mongo(@Value(\"${custom.uri}\") String uri) {\r\n        MongoClientFactoryBean mongo = new MongoClientFactoryBean();\r\n        ConnectionString conn = new ConnectionString(uri);\r\n        mongo.setConnectionString(conn);\r\n\r\n        MongoClient client = mongo.getObject();\r\n        client.listDatabaseNames()\r\n          .forEach(System.out::println);\r\n        return mongo;\r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringMongoConnectionViaBuilderApp {\r\n\r\n    // main method\r\n\r\n    @Bean\r\n    public MongoClientSettingsBuilderCustomizer customizer(@Value(\"${custom.uri}\") String uri) {\r\n        ConnectionString connection = new ConnectionString(uri);\r\n        return settings -> settings.applyConnectionString(connection);\r\n    }\r\n} \r\n```"]