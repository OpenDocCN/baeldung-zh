["```\r\npublic <T> T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException;\r\n```","```\r\nString jsonString = \"{'employee.name':'Bob','employee.salary':10000}\";\r\nGson gson = new Gson();\r\nMap map = gson.fromJson(jsonString, Map.class);\r\nAssert.assertEquals(2, map.size());\r\nAssert.assertEquals(Double.class, map.get(\"employee.salary\").getClass());\r\n```","```\r\npublic <T> T fromJson(String json, Type typeOfT) throws JsonSyntaxException;\r\n```","```\r\nString jsonString = \"{'Bob' : {'name': 'Bob Willis'},\"\r\n  + \"'Jenny' : {'name': 'Jenny McCarthy'}, \"\r\n  + \"'Steve' : {'name': 'Steven Waugh'}}\";\r\nGson gson = new Gson();\r\nType empMapType = new TypeToken<Map<String, Employee>>() {}.getType();\r\nMap<String, Employee> nameEmployeeMap = gson.fromJson(jsonString, empMapType);\r\nAssert.assertEquals(3, nameEmployeeMap.size());\r\nAssert.assertEquals(Employee.class, nameEmployeeMap.get(\"Bob\").getClass()); \r\n```","```\r\npublic class StringDateMapDeserializer implements JsonDeserializer<Map<String, Date>> {\r\n\r\n    private SimpleDateFormat format = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n\r\n    @Override\r\n    public Map<String, Date> deserialize(JsonElement elem,\r\n          Type type,\r\n          JsonDeserializationContext jsonDeserializationContext) {\r\n        return elem.getAsJsonObject()\r\n          .entrySet()\r\n          .stream()\r\n          .filter(e -> e.getValue().isJsonPrimitive())\r\n          .filter(e -> e.getValue().getAsJsonPrimitive().isString())\r\n          .collect(\r\n            Collectors.toMap(\r\n              Map.Entry::getKey,\r\n              e -> formatDate(e.getValue())));\r\n    }\r\n\r\n    private Date formatDate(Object value) {\r\n        try {\r\n            return format(value.getAsString());\r\n        } catch (ParseException ex) {\r\n            throw new JsonParseException(ex);\r\n        }\r\n    }\r\n} \r\n```","```\r\nString jsonString = \"{'Bob': '2017-06-01', 'Jennie':'2015-01-03'}\";\r\nType type = new TypeToken<Map<String, Date>>(){}.getType();\r\nGson gson = new GsonBuilder()\r\n  .registerTypeAdapter(type, new StringDateMapDeserializer())\r\n  .create();\r\nMap<String, Date> empJoiningDateMap = gson.fromJson(jsonString, type);\r\nAssert.assertEquals(2, empJoiningDateMap.size());\r\nAssert.assertEquals(Date.class, empJoiningDateMap.get(\"Bob\").getClass()); \r\n```"]