["```\r\n<dependency>\r\n    <groupId>org.sql2o</groupId>\r\n    <artifactId>sql2o</artifactId>\r\n    <version>1.6.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.4.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nSql2o sql2o = new Sql2o(\"jdbc:hsqldb:mem:testDB\", \"sa\", \"\");\r\n```","```\r\nSql2o sql2o = new Sql2o(datasource);\r\n```","```\r\ntry (Connection connection = sql2o.open()) {\r\n    // use the connection\r\n}\r\n```","```\r\nconnection.createQuery(\r\n    \"create table project \"\r\n    + \"(id integer identity, name varchar(50), url varchar(100))\").executeUpdate();\r\n```","```\r\nassertEquals(0, connection.getResult());\r\n```","```\r\nQuery query = connection.createQuery(\r\n    \"insert into project (name, url) \"\r\n    + \"values ('tutorials', 'github.com/eugenp/tutorials')\", true);\r\n```","```\r\nassertEquals(0, query.executeUpdate().getKey());\r\n```","```\r\nassertEquals(1, query.executeUpdate().getKeys()[0]);\r\n```","```\r\npublic class Project {\r\n    long id;\r\n    private String name;\r\n    private String url;\r\n    //Standard getters and setters\r\n}\r\n```","```\r\nQuery query = connection.createQuery(\"select * from project order by id\");\r\n```","```\r\nList<Project> list = query.executeAndFetch(Project.class);\r\n```","```\r\npublic class Project {\r\n    long id;\r\n    private String name;\r\n    private String url;\r\n    private Date creationDate;\r\n    //Standard getters and setters\r\n}\r\n```","```\r\nQuery query = connection.createQuery(\r\n    \"select name, url, creation_date as creationDate from project\");\r\n```","```\r\nconnection.createQuery(\"select * from project\")\r\n    .addColumnMapping(\"creation_date\", \"creationDate\");\r\n```","```\r\nMap<String, String> mappings = new HashMap<>();\r\nmappings.put(\"CREATION_DATE\", \"creationDate\");\r\nsql2o.setDefaultColumnMappings(mappings);\r\n```","```\r\nQuery query = connection.createQuery(\r\n    \"select count(*) from project\");\r\nassertEquals(2, query.executeScalar(Integer.class));\r\n```","```\r\nQuery query = connection.createQuery(\r\n    \"select * from project order by id\");\r\nTable table = query.executeAndFetchTable();\r\n```","```\r\nList<Map<String, Object>> list = table.asList();\r\nassertEquals(\"tutorials\", list.get(0).get(\"name\"));\r\n```","```\r\nList<Row> rows = table.rows();\r\nassertEquals(\"tutorials\", rows.get(0).getString(\"name\"));\r\n```","```\r\nQuery query = connection.createQuery(\r\n    \"insert into project (name, url) values (:name, :url)\")\r\n    .addParameter(\"name\", \"REST with Spring\")\r\n    .addParameter(\"url\", \"github.com/eugenp/REST-With-Spring\");\r\nassertEquals(1, query.executeUpdate().getResult());\r\n```","```\r\nProject project = new Project();\r\nproject.setName(\"REST with Spring\");\r\nproject.setUrl(\"github.com/eugenp/REST-With-Spring\");\r\nconnection.createQuery(\r\n    \"insert into project (name, url) values (:name, :url)\")\r\n    .bind(project)\r\n    .executeUpdate();\r\nassertEquals(1, connection.getResult());\r\n```","```\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    // here, the transaction is active\r\n}\r\n```","```\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    boolean transactionSuccessful = false;\r\n    // perform some operations\r\n    if(transactionSuccessful) {\r\n        connection.commit();\r\n    } else {\r\n        connection.rollback();\r\n    }\r\n}\r\n```","```\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    List list = connection.createQuery(\"select * from project\")\r\n        .executeAndFetchTable()\r\n        .asList();\r\n    assertEquals(0, list.size());\r\n    // insert or update some data\r\n    connection.rollback(false);\r\n    // perform some other insert or update queries\r\n}\r\n// implicit rollback\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    List list = connection.createQuery(\"select * from project\")\r\n        .executeAndFetchTable()\r\n        .asList();\r\n    assertEquals(0, list.size());\r\n}\r\n```","```\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    Query query = connection.createQuery(\r\n        \"insert into project (name, url) \" +\r\n        \"values (:name, :url)\");\r\n    for (int i = 0; i < 1000; i++) {\r\n        query.addParameter(\"name\", \"tutorials\" + i);\r\n        query.addParameter(\"url\", \"https://github.com/eugenp/tutorials\" + i);\r\n        query.addToBatch();\r\n    }\r\n    query.executeBatch();\r\n    connection.commit();\r\n}\r\ntry (Connection connection = sql2o.beginTransaction()) {\r\n    assertEquals(\r\n        1000L,\r\n        connection.createQuery(\"select count(*) from project\").executeScalar());\r\n}\r\n```","```\r\nQuery query = connection.createQuery(\"select * from project\");\r\ntry (ResultSetIterable<Project> projects = query.executeAndFetchLazy(Project.class)) {\r\n    for(Project p : projects) {\r\n        // do something with the project\r\n    }\r\n}\r\n```"]