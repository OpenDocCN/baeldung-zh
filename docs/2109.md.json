["```\r\ndef emptyMap = [:]\r\n```","```\r\ndef map = [name: \"Jerry\", age: 42, city: \"New York\"]\r\n```","```\r\ndef map = [name:\"Jerry\"]\r\n```","```\r\nmap[\"age\"] = 42\r\n```","```\r\nmap.city = \"New York\"\r\n```","```\r\ndef hobbyLiteral = \"hobby\"\r\ndef hobbyMap = [(hobbyLiteral): \"Singing\"]\r\nmap.putAll(hobbyMap)\r\nassertTrue(hobbyMap.hobby == \"Singing\")\r\nassertTrue(hobbyMap[hobbyLiteral] == \"Singing\")\r\n```","```\r\ndef map = [name:\"Jerry\", age: 42, city: \"New York\", hobby:\"Singing\"]\r\n```","```\r\nassertTrue(map[\"name\"] == \"Jerry\")\r\n```","```\r\nassertTrue(map.name == \"Jerry\")\r\n```","```\r\ndef map = [1:20, a:30, 2:42, 4:34, ba:67, 6:39, 7:49]\r\n\r\ndef minusMap = map.minus([2:42, 4:34]);\r\nassertTrue(minusMap == [1:20, a:30, ba:67, 6:39, 7:49])\r\n```","```\r\nminusMap.removeAll{it -> it.key instanceof String}\r\nassertTrue(minusMap == [1:20, 6:39, 7:49])\r\n```","```\r\nminusMap.retainAll{it -> it.value % 2 == 0}\r\nassertTrue(minusMap == [1:20])\r\n```","```\r\nmap.each{entry -> println \"$entry.key: $entry.value\"}\r\n```","```\r\nmap.eachWithIndex{entry, i -> println \"$i $entry.key: $entry.value\"}\r\n```","```\r\nmap.eachWithIndex{key, value, i -> println \"$i $key: $value\"}\r\n```","```\r\ndef map = [name:\"Jerry\", age: 42, city: \"New York\", hobby:\"Singing\"]\r\n```","```\r\nassertTrue(map.find{it.value == \"New York\"}.key == \"city\")\r\n```","```\r\nassertTrue(map.findAll{it.value == \"New York\"} == [city : \"New York\"])\r\n```","```\r\nmap.grep{it.value == \"New York\"}.each{it -> assertTrue(it.key == \"city\" && it.value == \"New York\")}\r\n```","```\r\nassertTrue(map.every{it -> it.value instanceof String} == false)\r\n```","```\r\nassertTrue(map.any{it -> it.value instanceof String} == true)\r\n```","```\r\ndef map = [\r\n  1: [name:\"Jerry\", age: 42, city: \"New York\"],\r\n  2: [name:\"Long\", age: 25, city: \"New York\"],\r\n  3: [name:\"Dustin\", age: 29, city: \"New York\"],\r\n  4: [name:\"Dustin\", age: 34, city: \"New York\"]]\r\n```","```\r\ndef names = map.collect{entry -> entry.value.name}\r\nassertTrue(names == [\"Jerry\", \"Long\", \"Dustin\", \"Dustin\"])\r\n```","```\r\ndef uniqueNames = map.collect([] as HashSet){entry -> entry.value.name}\r\nassertTrue(uniqueNames == [\"Jerry\", \"Long\", \"Dustin\"] as Set)\r\n```","```\r\ndef idNames = map.collectEntries{key, value -> [key, value.name]}\r\nassertTrue(idNames == [1:\"Jerry\", 2:\"Long\", 3:\"Dustin\", 4:\"Dustin\"])\r\n```","```\r\ndef below30Names = map.findAll{it.value.age < 30}.collect{key, value -> value.name}\r\nassertTrue(below30Names == [\"Long\", \"Dustin\"])\r\n```","```\r\ndef map = [1:20, 2: 40, 3: 11, 4: 93]\r\n\r\ndef subMap = map.groupBy{it.value % 2}\r\nassertTrue(subMap == [0:[1:20, 2:40], 1:[3:11, 4:93]])\r\n```","```\r\ndef keySubMap = map.subMap([1,2])\r\nassertTrue(keySubMap == [1:20, 2:40])\r\n```","```\r\ndef map = [ab:20, a: 40, cb: 11, ba: 93]\r\n```","```\r\ndef naturallyOrderedMap = map.sort()\r\nassertTrue([a:40, ab:20, ba:93, cb:11] == naturallyOrderedMap)\r\n```","```\r\ndef compSortedMap = map.sort({k1, k2 -> k1 <=> k2} as Comparator)\r\nassertTrue([a:40, ab:20, ba:93, cb:11] == compSortedMap)\r\n```","```\r\ndef cloSortedMap = map.sort({it1, it2 -> it1.value <=> it1.value})\r\nassertTrue([cb:11, ab:20, a:40, ba:93] == cloSortedMap)\r\n```"]