["```\r\nsbt new playframework/play-java-seed.g8\r\n```","```\r\npublic class Student {\r\n    private String firstName;\r\n    private String lastName;\r\n    private int age;\r\n    private int id;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic class StudentStore {\r\n    private Map<Integer, Student> students = new HashMap<>();\r\n\r\n    public Optional<Student> addStudent(Student student) {\r\n        int id = students.size();\r\n        student.setId(id);\r\n        students.put(id, student);\r\n        return Optional.ofNullable(student);\r\n    }\r\n\r\n    public Optional<Student> getStudent(int id) {\r\n        return Optional.ofNullable(students.get(id));\r\n    }\r\n\r\n    public Set<Student> getAllStudents() {\r\n        return new HashSet<>(students.values());\r\n    }\r\n\r\n    public Optional<Student> updateStudent(Student student) {\r\n        int id = student.getId();\r\n        if (students.containsKey(id)) {\r\n            students.put(id, student);\r\n            return Optional.ofNullable(student);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public boolean deleteStudent(int id) {\r\n        return students.remove(id) != null;\r\n    }\r\n}\r\n```","```\r\nprivate HttpExecutionContext ec;\r\nprivate StudentStore studentStore;\r\n\r\n@Inject\r\npublic StudentController(HttpExecutionContext ec, StudentStore studentStore) {\r\n    this.studentStore = studentStore;\r\n    this.ec = ec;\r\n}\r\n```","```\r\npublic class Util {\r\n    public static ObjectNode createResponse(Object response, boolean ok) {\r\n        ObjectNode result = Json.newObject();\r\n        result.put(\"isSuccessful\", ok);\r\n        if (response instanceof String) {\r\n            result.put(\"body\", (String) response);\r\n        } else {\r\n            result.putPOJO(\"body\", response);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic CompletionStage<Result> create(Http.Request request) {\r\n    JsonNode json = request.body().asJson();\r\n    return supplyAsync(() -> {\r\n        if (json == null) {\r\n            return badRequest(Util.createResponse(\"Expecting Json data\", false));\r\n        }\r\n\r\n        Optional<Student> studentOptional = studentStore.addStudent(Json.fromJson(json, Student.class));\r\n        return studentOptional.map(student -> {\r\n            JsonNode jsonObject = Json.toJson(student);\r\n            return created(Util.createResponse(jsonObject, true));\r\n        }).orElse(internalServerError(Util.createResponse(\"Could not create data.\", false)));\r\n    }, ec.current());\r\n}\r\n```","```\r\npublic CompletionStage<Result> update(Http.Request request) {\r\n    JsonNode json = request.body().asJson();\r\n    return supplyAsync(() -> {\r\n        if (json == null) {\r\n            return badRequest(Util.createResponse(\"Expecting Json data\", false));\r\n        }\r\n        Optional<Student> studentOptional = studentStore.updateStudent(Json.fromJson(json, Student.class));\r\n        return studentOptional.map(student -> {\r\n            if (student == null) {\r\n                return notFound(Util.createResponse(\"Student not found\", false));\r\n            }\r\n            JsonNode jsonObject = Json.toJson(student);\r\n            return ok(Util.createResponse(jsonObject, true));\r\n        }).orElse(internalServerError(Util.createResponse(\"Could not create data.\", false)));\r\n    }, ec.current());\r\n}\r\n```","```\r\npublic CompletionStage<Result> retrieve(int id) {\r\n    return supplyAsync(() -> {\r\n        final Optional<Student> studentOptional = studentStore.getStudent(id);\r\n        return studentOptional.map(student -> {\r\n            JsonNode jsonObjects = Json.toJson(student);\r\n            return ok(Util.createResponse(jsonObjects, true));\r\n        }).orElse(notFound(Util.createResponse(\"Student with id:\" + id + \" not found\", false)));\r\n    }, ec.current());\r\n}\r\n```","```\r\npublic CompletionStage<Result> delete(int id) {\r\n    return supplyAsync(() -> {\r\n        boolean status = studentStore.deleteStudent(id);\r\n        if (!status) {\r\n            return notFound(Util.createResponse(\"Student with id:\" + id + \" not found\", false));\r\n        }\r\n        return ok(Util.createResponse(\"Student with id:\" + id + \" deleted\", true));\r\n    }, ec.current());\r\n}\r\n```","```\r\npublic CompletionStage<Result> listStudents() {\r\n    return supplyAsync(() -> {\r\n        Set<Student> result = studentStore.getAllStudents();\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        JsonNode jsonData = mapper.convertValue(result, JsonNode.class);\r\n        return ok(Util.createResponse(jsonData, true));\r\n    }, ec.current());\r\n}\r\n```","```\r\nGET     /                           controllers.StudentController.listStudents()\r\nGET     /:id                        controllers.StudentController.retrieve(id:Int)\r\nPOST    /                           controllers.StudentController.create(request: Request)\r\nPUT     /                           controllers.StudentController.update(request: Request)\r\nDELETE  /:id                        controllers.StudentController.delete(id:Int)\r\nGET     /assets/*file               controllers.Assets.versioned(path=\"/public\", file: Asset)\r\n```","```\r\n{\r\n     \"isSuccessful\":true,\r\n     \"body\":[]\r\n}\r\n```","```\r\ncurl -X POST -H \"Content-Type: application/json\" \\\r\n -d '{\"firstName\":\"John\",\"lastName\":\"Baeldung\",\"age\": 18}' \\\r\n http://localhost:9000/\r\n```","```\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":{ \r\n        \"firstName\":\"John\",\r\n        \"lastName\":\"Baeldung\",\r\n        \"age\":18,\r\n        \"id\":0\r\n    }\r\n}\r\n```","```\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":[ \r\n        { \r\n            \"firstName\":\"John\",\r\n            \"lastName\":\"Baeldung\",\r\n            \"age\":18,\r\n            \"id\":0\r\n        }\r\n    ]\r\n} \r\n```","```\r\ncurl -X DELETE http://localhost:9000/0\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":\"Student with id:0 deleted\"\r\n} \r\n```","```\r\ncurl -X POST -H \"Content-Type: application/json\" \\\r\n-d '{\"firstName\":\"John\",\"lastName\":\"Baeldung\",\"age\": 18}' \\\r\nhttp://localhost:9000/\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":{ \r\n        \"firstName\":\"John\",\r\n        \"lastName\":\"Baeldung\",\r\n        \"age\":18,\r\n        \"id\":0\r\n    }\r\n}\r\n```","```\r\ncurl -X PUT -H \"Content-Type: application/json\" \\\r\n-d '{\"firstName\":\"Andrew\",\"lastName\":\"Baeldung\",\"age\": 30,\"id\":0}' \\\r\nhttp://localhost:9000/\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":{ \r\n        \"firstName\":\"Andrew\",\r\n        \"lastName\":\"Baeldung\",\r\n        \"age\":30,\r\n        \"id\":0\r\n    }\r\n}\r\n```","```\r\ncurl -X POST -H \"Content-Type: application/json\" \\\r\n-d '{\"firstName\":\"John\",\"lastName\":\"Doe\",\"age\": 18}' \\\r\nhttp://localhost:9000/\r\n```","```\r\ncurl -X POST -H \"Content-Type: application/json\" \\\r\n-d '{\"firstName\":\"Sam\",\"lastName\":\"Baeldung\",\"age\": 25}' \\\r\nhttp://localhost:9000/\r\n```","```\r\ncurl -X GET http://localhost:9000/\r\n{ \r\n    \"isSuccessful\":true,\r\n    \"body\":[ \r\n        { \r\n            \"firstName\":\"Andrew\",\r\n            \"lastName\":\"Baeldung\",\r\n            \"age\":30,\r\n            \"id\":0\r\n        },\r\n        { \r\n            \"firstName\":\"John\",\r\n            \"lastName\":\"Doe\",\r\n            \"age\":18,\r\n            \"id\":1\r\n        },\r\n        { \r\n            \"firstName\":\"Sam\",\r\n            \"lastName\":\"Baeldung\",\r\n            \"age\":25,\r\n            \"id\":2\r\n        }\r\n    ]\r\n}\r\n```"]