["```\r\nString inputString = \"hello there, Baeldung\";\r\n```","```\r\nString[] words = {\"hello\", \"Baeldung\"};\r\n```","```\r\npublic static boolean containsWords(String inputString, String[] items) {\r\n    boolean found = true;\r\n    for (String item : items) {\r\n        if (!inputString.contains(item)) {\r\n            found = false;\r\n            break;\r\n        }\r\n    }\r\n    return found;\r\n}\r\n```","```\r\npublic static boolean containsWordsIndexOf(String inputString, String[] words) {\r\n    boolean found = true;\r\n    for (String word : words) {\r\n        if (inputString.indexOf(word) == -1) {\r\n            found = false;\r\n            break;\r\n        }\r\n    }\r\n    return found;\r\n}\r\n```","```\r\nPattern pattern = Pattern.compile(\"(?=.*hello)(?=.*Baeldung)\");\r\n```","```\r\nStringBuilder regexp = new StringBuilder();\r\nfor (String word : words) {\r\n    regexp.append(\"(?=.*\").append(word).append(\")\");\r\n}\r\n```","```\r\npublic static boolean containsWordsPatternMatch(String inputString, String[] words) {\r\n\r\n    StringBuilder regexp = new StringBuilder();\r\n    for (String word : words) {\r\n        regexp.append(\"(?=.*\").append(word).append(\")\");\r\n    }\r\n\r\n    Pattern pattern = Pattern.compile(regexp.toString());\r\n\r\n    return pattern.matcher(inputString).find();\r\n}\r\n```","```\r\nList<String> inputString = Arrays.asList(inputString.split(\" \"));\r\nList<String> words = Arrays.asList(words);\r\n```","```\r\npublic static boolean containsWordsJava8(String inputString, String[] words) {\r\n    List<String> inputStringList = Arrays.asList(inputString.split(\" \"));\r\n    List<String> wordsList = Arrays.asList(words);\r\n\r\n    return wordsList.stream().allMatch(inputStringList::contains);\r\n}\r\n```","```\r\npublic static boolean containsWordsArray(String inputString, String[] words) {\r\n    List<String> inputStringList = Arrays.asList(inputString.split(\" \"));\r\n    List<String> wordsList = Arrays.asList(words);\r\n\r\n    return inputStringList.containsAll(wordsList);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.ahocorasick</groupId>\r\n    <artifactId>ahocorasick</artifactId>\r\n    <version>0.4.0</version>\r\n</dependency>\r\n```","```\r\nTrie trie = Trie.builder().onlyWholeWords().addKeywords(words).build();\r\n```","```\r\nCollection<Emit> emits = trie.parseText(inputString);\r\n```","```\r\nemits.forEach(System.out::println);\r\n```","```\r\n0:4=hello\r\n13:20=Baeldung\r\n```","```\r\npublic static boolean containsWordsAhoCorasick(String inputString, String[] words) {\r\n    Trie trie = Trie.builder().onlyWholeWords().addKeywords(words).build();\r\n\r\n    Collection<Emit> emits = trie.parseText(inputString);\r\n    emits.forEach(System.out::println);\r\n\r\n    boolean found = true;\r\n    for(String word : words) {\r\n        boolean contains = Arrays.toString(emits.toArray()).contains(word);\r\n        if (!contains) {\r\n            found = false;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return found;\r\n}\r\n```"]