["```\r\nQueue<Integer> evictingQueue = EvictingQueue.create(10);\r\n\r\nIntStream.range(0, 10)\r\n  .forEach(evictingQueue::add);\r\n\r\nassertThat(evictingQueue)\r\n  .containsExactly(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n```","```\r\nevictingQueue.add(100);\r\n\r\nassertThat(evictingQueue)\r\n  .containsExactly(1, 2, 3, 4, 5, 6, 7, 8, 9, 100);\r\n```","```\r\nclass CustomClass {\r\n    private Integer value;\r\n\r\n    // standard constructor, getters and setters\r\n}\r\n```","```\r\nMinMaxPriorityQueue<CustomClass> queue = MinMaxPriorityQueue\r\n  .orderedBy(Comparator.comparing(CustomClass::getValue))\r\n  .maximumSize(10)\r\n  .create();\r\n\r\nIntStream\r\n  .iterate(10, i -> i - 1)\r\n  .limit(10)\r\n  .forEach(i -> queue.add(new CustomClass(i)));\r\n```","```\r\nassertThat(\r\n  queue.peekFirst().getValue()).isEqualTo(1);\r\nassertThat(\r\n  queue.peekLast().getValue()).isEqualTo(10);\r\n```","```\r\nqueue.add(new CustomClass(-1));\r\n```","```\r\nassertThat(\r\n  queue.peekFirst().getValue()).isEqualTo(-1);\r\nassertThat(\r\n  queue.peekLast().getValue()).isEqualTo(9);\r\n```","```\r\nqueue.add(new CustomClass(100));\r\nassertThat(queue.peekFirst().getValue())\r\n  .isEqualTo(-1);\r\nassertThat(queue.peekLast().getValue())\r\n  .isEqualTo(9);\r\n```"]