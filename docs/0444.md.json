["```\r\n<dependency>\r\n    <groupId>com.stripe</groupId>\r\n    <artifactId>stripe-java</artifactId>\r\n    <version>4.2.0</version>\r\n</dependency> \r\n```","```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.7.2</version>\r\n</parent>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n</dependency>\r\n```","```\r\n@Controller\r\npublic class CheckoutController {\r\n\r\n    @Value(\"${STRIPE_PUBLIC_KEY}\")\r\n    private String stripePublicKey;\r\n\r\n    @RequestMapping(\"/checkout\")\r\n    public String checkout(Model model) {\r\n        model.addAttribute(\"amount\", 50 * 100); // in cents\r\n        model.addAttribute(\"stripePublicKey\", stripePublicKey);\r\n        model.addAttribute(\"currency\", ChargeRequest.Currency.EUR);\r\n        return \"checkout\";\r\n    }\r\n}\r\n```","```\r\n<form action='/charge' method='POST' id='checkout-form'>\r\n    <input type='hidden' th:value='${amount}' name='amount' />\r\n    <label>Price:<span th:text='${amount/100}' /></label>\r\n    <!-- NOTE: data-key/data-amount/data-currency will be rendered by Thymeleaf -->\r\n    <script\r\n       src='https://checkout.stripe.com/checkout.js' \r\n       class='stripe-button'\r\n       th:attr='data-key=${stripePublicKey}, \r\n         data-amount=${amount}, \r\n         data-currency=${currency}'\r\n       data-name='Baeldung'\r\n       data-description='Spring course checkout'\r\n       data-image\r\n         ='https://www.baeldung.com/wp-content/themes/baeldung/favicon/android-chrome-192x192.png'\r\n       data-locale='auto'\r\n       data-zip-code='false'>\r\n   </script>\r\n</form>\r\n```","```\r\n@Data\r\npublic class ChargeRequest {\r\n\r\n    public enum Currency {\r\n        EUR, USD;\r\n    }\r\n    private String description;\r\n    private int amount;\r\n    private Currency currency;\r\n    private String stripeEmail;\r\n    private String stripeToken;\r\n}\r\n```","```\r\n@Service\r\npublic class StripeService {\r\n\r\n    @Value(\"${STRIPE_SECRET_KEY}\")\r\n    private String secretKey;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        Stripe.apiKey = secretKey;\r\n    }\r\n    public Charge charge(ChargeRequest chargeRequest) \r\n      throws AuthenticationException, InvalidRequestException,\r\n        APIConnectionException, CardException, APIException {\r\n        Map<String, Object> chargeParams = new HashMap<>();\r\n        chargeParams.put(\"amount\", chargeRequest.getAmount());\r\n        chargeParams.put(\"currency\", chargeRequest.getCurrency());\r\n        chargeParams.put(\"description\", chargeRequest.getDescription());\r\n        chargeParams.put(\"source\", chargeRequest.getStripeToken());\r\n        return Charge.create(chargeParams);\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class ChargeController {\r\n\r\n    @Autowired\r\n    private StripeService paymentsService;\r\n\r\n    @PostMapping(\"/charge\")\r\n    public String charge(ChargeRequest chargeRequest, Model model)\r\n      throws StripeException {\r\n        chargeRequest.setDescription(\"Example charge\");\r\n        chargeRequest.setCurrency(Currency.EUR);\r\n        Charge charge = paymentsService.charge(chargeRequest);\r\n        model.addAttribute(\"id\", charge.getId());\r\n        model.addAttribute(\"status\", charge.getStatus());\r\n        model.addAttribute(\"chargeId\", charge.getId());\r\n        model.addAttribute(\"balance_transaction\", charge.getBalanceTransaction());\r\n        return \"result\";\r\n    }\r\n\r\n    @ExceptionHandler(StripeException.class)\r\n    public String handleError(Model model, StripeException ex) {\r\n        model.addAttribute(\"error\", ex.getMessage());\r\n        return \"result\";\r\n    }\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html xmlns='http://www.w3.org/1999/xhtml' xmlns:th='http://www.thymeleaf.org'>\r\n    <head>\r\n        <title>Result</title>\r\n    </head>\r\n    <body>\r\n        <h3 th:if='${error}' th:text='${error}' style='color: red;'></h3>\r\n        <div th:unless='${error}'>\r\n            <h3 style='color: green;'>Success!</h3>\r\n            <div>Id.: <span th:text='${id}' /></div>\r\n            <div>Status: <span th:text='${status}' /></div>\r\n            <div>Charge id.: <span th:text='${chargeId}' /></div>\r\n            <div>Balance transaction id.: <span th:text='${balance_transaction}' /></div>\r\n        </div>\r\n        <a href='/checkout.html'>Checkout again</a>\r\n    </body>\r\n</html>\r\n```"]