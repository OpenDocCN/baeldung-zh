["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n    <version>3.4.16</version>\r\n</dependency>\r\n\r\n<dependency> \r\n    <groupId>ch.qos.logback</groupId> \r\n    <artifactId>logback-classic</artifactId> \r\n    <version>1.2.6</version> \r\n</dependency>\r\n```","```\r\nFlux<Integer> just = Flux.just(1, 2, 3, 4);\r\n```","```\r\nMono<Integer> just = Mono.just(1);\r\n```","```\r\nPublisher<String> just = Mono.just(\"foo\");\r\n```","```\r\nList<Integer> elements = new ArrayList<>();\r\n\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .subscribe(elements::add);\r\n\r\nassertThat(elements).containsExactly(1, 2, 3, 4);\r\n```","```\r\n20:25:19.550 [main] INFO  reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | request(unbounded)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | onNext(1)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | onNext(2)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | onNext(3)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | onNext(4)\r\n20:25:19.553 [main] INFO  reactor.Flux.Array.1 - | onComplete()\r\n```","```\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .subscribe(new Subscriber<Integer>() {\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n      s.request(Long.MAX_VALUE);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(Integer integer) {\r\n      elements.add(integer);\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable t) {}\r\n\r\n    @Override\r\n    public void onComplete() {}\r\n});\r\n```","```\r\nList<Integer> collected = Stream.of(1, 2, 3, 4)\r\n  .collect(toList());\r\n```","```\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .subscribe(new Subscriber<Integer>() {\r\n    private Subscription s;\r\n    int onNextAmount;\r\n\r\n    @Override\r\n    public void onSubscribe(Subscription s) {\r\n        this.s = s;\r\n        s.request(2);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(Integer integer) {\r\n        elements.add(integer);\r\n        onNextAmount++;\r\n        if (onNextAmount % 2 == 0) {\r\n            s.request(2);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable t) {}\r\n\r\n    @Override\r\n    public void onComplete() {}\r\n});\r\n```","```\r\n23:31:15.395 [main] INFO  reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\r\n23:31:15.397 [main] INFO  reactor.Flux.Array.1 - | request(2)\r\n23:31:15.397 [main] INFO  reactor.Flux.Array.1 - | onNext(1)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | onNext(2)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | request(2)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | onNext(3)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | onNext(4)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | request(2)\r\n23:31:15.398 [main] INFO  reactor.Flux.Array.1 - | onComplete()\r\n```","```\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .map(i -> i * 2)\r\n  .subscribe(elements::add);\r\n```","```\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .map(i -> i * 2)\r\n  .zipWith(Flux.range(0, Integer.MAX_VALUE), \r\n    (one, two) -> String.format(\"First Flux: %d, Second Flux: %d\", one, two))\r\n  .subscribe(elements::add);\r\n\r\nassertThat(elements).containsExactly(\r\n  \"First Flux: 2, Second Flux: 0\",\r\n  \"First Flux: 4, Second Flux: 1\",\r\n  \"First Flux: 6, Second Flux: 2\",\r\n  \"First Flux: 8, Second Flux: 3\");\r\n```","```\r\n20:04:38.064 [main] INFO  reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\r\n20:04:38.065 [main] INFO  reactor.Flux.Array.1 - | onNext(1)\r\n20:04:38.066 [main] INFO  reactor.Flux.Range.2 - | onSubscribe([Synchronous Fuseable] FluxRange.RangeSubscription)\r\n20:04:38.066 [main] INFO  reactor.Flux.Range.2 - | onNext(0)\r\n20:04:38.067 [main] INFO  reactor.Flux.Array.1 - | onNext(2)\r\n20:04:38.067 [main] INFO  reactor.Flux.Range.2 - | onNext(1)\r\n20:04:38.067 [main] INFO  reactor.Flux.Array.1 - | onNext(3)\r\n20:04:38.067 [main] INFO  reactor.Flux.Range.2 - | onNext(2)\r\n20:04:38.067 [main] INFO  reactor.Flux.Array.1 - | onNext(4)\r\n20:04:38.067 [main] INFO  reactor.Flux.Range.2 - | onNext(3)\r\n20:04:38.067 [main] INFO  reactor.Flux.Array.1 - | onComplete()\r\n20:04:38.067 [main] INFO  reactor.Flux.Array.1 - | cancel()\r\n20:04:38.067 [main] INFO  reactor.Flux.Range.2 - | cancel()\r\n```","```\r\nConnectableFlux<Object> publish = Flux.create(fluxSink -> {\r\n    while(true) {\r\n        fluxSink.next(System.currentTimeMillis());\r\n    }\r\n})\r\n  .publish();\r\n```","```\r\npublish.subscribe(System.out::println);        \r\npublish.subscribe(System.out::println);\r\n```","```\r\npublish.connect();\r\n```","```\r\nConnectableFlux<Object> publish = Flux.create(fluxSink -> {\r\n    while(true) {\r\n        fluxSink.next(System.currentTimeMillis());\r\n    }\r\n})\r\n  .sample(ofSeconds(2))\r\n  .publish();\r\n```","```\r\nFlux.just(1, 2, 3, 4)\r\n  .log()\r\n  .map(i -> i * 2)\r\n  .subscribeOn(Schedulers.parallel())\r\n  .subscribe(elements::add);\r\n```","```\r\n20:03:27.505 [main] DEBUG reactor.util.Loggers$LoggerFactory - Using Slf4j logging framework\r\n20:03:27.529 [parallel-1] INFO  reactor.Flux.Array.1 - | onSubscribe([Synchronous Fuseable] FluxArray.ArraySubscription)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | request(unbounded)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | onNext(1)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | onNext(2)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | onNext(3)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | onNext(4)\r\n20:03:27.531 [parallel-1] INFO  reactor.Flux.Array.1 - | onComplete()\r\n```"]