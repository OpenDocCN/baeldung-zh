["```\r\nimport java.nio.channels.*;\r\n```","```\r\nAsynchronousServerSocketChannel server\r\n  = AsynchronousServerSocketChannel.open();\r\n```","```\r\nserver.bind(new InetSocketAddress(\"127.0.0.1\", 4555));\r\n```","```\r\nserver.bind(null);\r\n```","```\r\nFuture<AsynchronousSocketChannel> acceptFuture = server.accept();\r\n```","```\r\nAsynchronousSocketChannel worker = future.get();\r\n```","```\r\nAsynchronousSocketChannel worker = acceptFuture.get(10, TimeUnit.SECONDS);\r\n```","```\r\npublic void runServer() {\r\n    clientChannel = acceptResult.get();\r\n    if ((clientChannel != null) && (clientChannel.isOpen())) {\r\n        while (true) {\r\n            ByteBuffer buffer = ByteBuffer.allocate(32);\r\n            Future<Integer> readResult  = clientChannel.read(buffer);\r\n\r\n            // perform other computations\r\n\r\n            readResult.get();\r\n\r\n            buffer.flip();\r\n            Future<Integer> writeResult = clientChannel.write(buffer);\r\n\r\n            // perform other computations\r\n\r\n            writeResult.get();\r\n            buffer.clear();\r\n        } \r\n        clientChannel.close();\r\n        serverChannel.close();\r\n    }\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    AsyncEchoServer server = new AsyncEchoServer();\r\n    server.runServer();\r\n}\r\n```","```\r\nserverChannel = AsynchronousServerSocketChannel.open();\r\nInetSocketAddress hostAddress = new InetSocketAddress(\"localhost\", 4999);\r\nserverChannel.bind(hostAddress);\r\n```","```\r\nwhile (true) {\r\n    serverChannel.accept(\r\n      null, new CompletionHandler<AsynchronousSocketChannel,Object>() {\r\n\r\n        @Override\r\n        public void completed(\r\n          AsynchronousSocketChannel result, Object attachment) {\r\n            if (serverChannel.isOpen()){\r\n                serverChannel.accept(null, this);\r\n            }\r\n\r\n            clientChannel = result;\r\n            if ((clientChannel != null) && (clientChannel.isOpen())) {\r\n                ReadWriteHandler handler = new ReadWriteHandler();\r\n                ByteBuffer buffer = ByteBuffer.allocate(32);\r\n\r\n                Map<String, Object> readInfo = new HashMap<>();\r\n                readInfo.put(\"action\", \"read\");\r\n                readInfo.put(\"buffer\", buffer);\r\n\r\n                clientChannel.read(buffer, readInfo, handler);\r\n             }\r\n         }\r\n         @Override\r\n         public void failed(Throwable exc, Object attachment) {\r\n             // process error\r\n         }\r\n    });\r\n    System.in.read();\r\n}\r\n```","```\r\nclass ReadWriteHandler implements \r\n  CompletionHandler<Integer, Map<String, Object>> {\r\n\r\n    @Override\r\n    public void completed(\r\n      Integer result, Map<String, Object> attachment) {\r\n        Map<String, Object> actionInfo = attachment;\r\n        String action = (String) actionInfo.get(\"action\");\r\n\r\n        if (\"read\".equals(action)) {\r\n            ByteBuffer buffer = (ByteBuffer) actionInfo.get(\"buffer\");\r\n            buffer.flip();\r\n            actionInfo.put(\"action\", \"write\");\r\n\r\n            clientChannel.write(buffer, actionInfo, this);\r\n            buffer.clear();\r\n\r\n        } else if (\"write\".equals(action)) {\r\n            ByteBuffer buffer = ByteBuffer.allocate(32);\r\n\r\n            actionInfo.put(\"action\", \"read\");\r\n            actionInfo.put(\"buffer\", buffer);\r\n\r\n            clientChannel.read(buffer, actionInfo, this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void failed(Throwable exc, Map<String, Object> attachment) {\r\n        // \r\n    }\r\n}\r\n```","```\r\nAsynchronousSocketChannel client = AsynchronousSocketChannel.open();\r\nInetSocketAddress hostAddress = new InetSocketAddress(\"localhost\", 4999)\r\nFuture<Void> future = client.connect(hostAddress);\r\n```","```\r\nfuture.get()\r\n```","```\r\npublic String sendMessage(String message) {\r\n    byte[] byteMsg = new String(message).getBytes();\r\n    ByteBuffer buffer = ByteBuffer.wrap(byteMsg);\r\n    Future<Integer> writeResult = client.write(buffer);\r\n\r\n    // do some computation\r\n\r\n    writeResult.get();\r\n    buffer.flip();\r\n    Future<Integer> readResult = client.read(buffer);\r\n\r\n    // do some computation\r\n\r\n    readResult.get();\r\n    String echo = new String(buffer.array()).trim();\r\n    buffer.clear();\r\n    return echo;\r\n}\r\n```","```\r\n@Test\r\npublic void givenServerClient_whenServerEchosMessage_thenCorrect() {\r\n    String resp1 = client.sendMessage(\"hello\");\r\n    String resp2 = client.sendMessage(\"world\");\r\n\r\n    assertEquals(\"hello\", resp1);\r\n    assertEquals(\"world\", resp2);\r\n}\r\n```"]