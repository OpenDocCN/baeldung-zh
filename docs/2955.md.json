["```\r\nString message = \"Good bye, Java 9\";\r\n```","```\r\n@Test\r\npublic void whenVarInitWithString_thenGetStringTypeVar() {\r\n    var message = \"Hello, Java 10\";\r\n    assertTrue(message instanceof String);\r\n}\r\n```","```\r\nMap<Integer, String> map = new HashMap<>();\r\n```","```\r\nvar idToNameMap = new HashMap<Integer, String>();\r\n```","```\r\nvar n; // error: cannot use 'var' on variable without initializer\r\n```","```\r\nvar emptyList = null; // error: variable initializer is 'null'\r\n```","```\r\npublic var = \"hello\"; // error: 'var' is not allowed here\r\n```","```\r\nvar p = (String s) -> s.length() > 10; // error: lambda expression needs an explicit target-type\r\n```","```\r\nvar arr = { 1, 2, 3 }; // error: array initializer needs an explicit target-type\r\n```","```\r\nvar result = obj.prcoess();\r\n```","```\r\nvar x = emp.getProjects.stream()\r\n  .findFirst()\r\n  .map(String::length)\r\n  .orElse(0);\r\n```","```\r\nvar empList = new ArrayList<>();\r\n```","```\r\nvar empList = new ArrayList<Employee>();\r\n```","```\r\n@Test\r\npublic void whenVarInitWithAnonymous_thenGetAnonymousType() {\r\n    var obj = new Object() {};\r\n    assertFalse(obj.getClass().equals(Object.class));\r\n}\r\n```","```\r\nobj = new Object(); // error: Object cannot be converted to <anonymous Object>\r\n```"]