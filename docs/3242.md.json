["```\r\npublic @interface JsonSerializable {\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.Type)\r\npublic @interface JsonSerializable {\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.FIELD)\r\npublic @interface JsonElement {\r\n    public String key() default \"\";\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.METHOD)\r\npublic @interface Init {\r\n}\r\n```","```\r\n@JsonSerializable\r\npublic class Person {\r\n\r\n    @JsonElement\r\n    private String firstName;\r\n\r\n    @JsonElement\r\n    private String lastName;\r\n\r\n    @JsonElement(key = \"personAge\")\r\n    private String age;\r\n\r\n    private String address;\r\n\r\n    @Init\r\n    private void initNames() {\r\n        this.firstName = this.firstName.substring(0, 1).toUpperCase() \r\n          + this.firstName.substring(1);\r\n        this.lastName = this.lastName.substring(0, 1).toUpperCase() \r\n          + this.lastName.substring(1);\r\n    }\r\n\r\n    // Standard getters and setters\r\n}\r\n```","```\r\nprivate void checkIfSerializable(Object object) {\r\n    if (Objects.isNull(object)) {\r\n        throw new JsonSerializationException(\"The object to serialize is null\");\r\n    }\r\n\r\n    Class<?> clazz = object.getClass();\r\n    if (!clazz.isAnnotationPresent(JsonSerializable.class)) {\r\n        throw new JsonSerializationException(\"The class \" \r\n          + clazz.getSimpleName() \r\n          + \" is not annotated with JsonSerializable\");\r\n    }\r\n}\r\n```","```\r\nprivate void initializeObject(Object object) throws Exception {\r\n    Class<?> clazz = object.getClass();\r\n    for (Method method : clazz.getDeclaredMethods()) {\r\n        if (method.isAnnotationPresent(Init.class)) {\r\n            method.setAccessible(true);\r\n            method.invoke(object);\r\n        }\r\n    }\r\n }\r\n```","```\r\nprivate String getJsonString(Object object) throws Exception {\t\r\n    Class<?> clazz = object.getClass();\r\n    Map<String, String> jsonElementsMap = new HashMap<>();\r\n    for (Field field : clazz.getDeclaredFields()) {\r\n        field.setAccessible(true);\r\n        if (field.isAnnotationPresent(JsonElement.class)) {\r\n            jsonElementsMap.put(getKey(field), (String) field.get(object));\r\n        }\r\n    }\t\t\r\n\r\n    String jsonString = jsonElementsMap.entrySet()\r\n        .stream()\r\n        .map(entry -> \"\\\"\" + entry.getKey() + \"\\\":\\\"\" \r\n          + entry.getValue() + \"\\\"\")\r\n        .collect(Collectors.joining(\",\"));\r\n    return \"{\" + jsonString + \"}\";\r\n}\r\n```","```\r\npublic class ObjectToJsonConverter {\r\n    public String convertToJson(Object object) throws JsonSerializationException {\r\n        try {\r\n            checkIfSerializable(object);\r\n            initializeObject(object);\r\n            return getJsonString(object);\r\n        } catch (Exception e) {\r\n            throw new JsonSerializationException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenObjectSerializedThenTrueReturned() throws JsonSerializationException {\r\n    Person person = new Person(\"soufiane\", \"cheouati\", \"34\");\r\n    ObjectToJsonConverter serializer = new ObjectToJsonConverter(); \r\n    String jsonString = serializer.convertToJson(person);\r\n    assertEquals(\r\n      \"{\\\"personAge\\\":\\\"34\\\",\\\"firstName\\\":\\\"Soufiane\\\",\\\"lastName\\\":\\\"Cheouati\\\"}\",\r\n      jsonString);\r\n}\r\n```"]