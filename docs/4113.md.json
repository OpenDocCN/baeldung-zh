["```\r\npublic interface FactoryBean {\r\n    T getObject() throws Exception;\r\n    Class<?> getObjectType();\r\n    boolean isSingleton();\r\n}\r\n```","```\r\npublic class Tool {\r\n\r\n    private int id;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic class ToolFactory implements FactoryBean<Tool> {\r\n\r\n    private int factoryId;\r\n    private int toolId;\r\n\r\n    @Override\r\n    public Tool getObject() throws Exception {\r\n        return new Tool(toolId);\r\n    }\r\n\r\n    @Override\r\n    public Class<?> getObjectType() {\r\n        return Tool.class;\r\n    }\r\n\r\n    @Override\r\n    public boolean isSingleton() {\r\n        return false;\r\n    }\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\n<beans ...>\r\n\r\n    <bean id=\"tool\" class=\"com.baeldung.factorybean.ToolFactory\">\r\n        <property name=\"factoryId\" value=\"9090\"/>\r\n        <property name=\"toolId\" value=\"1\"/>\r\n    </bean>\r\n</beans>\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = { \"classpath:factorybean-spring-ctx.xml\" })\r\npublic class FactoryBeanXmlConfigTest {\r\n    @Autowired\r\n    private Tool tool;\r\n\r\n    @Test\r\n    public void testConstructWorkerByXml() {\r\n        assertThat(tool.getId(), equalTo(1));\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = { \"classpath:factorybean-spring-ctx.xml\" })\r\npublic class FactoryBeanXmlConfigTest {\r\n\r\n    @Resource(name = \"&tool;\")\r\n    private ToolFactory toolFactory;\r\n\r\n    @Test\r\n    public void testConstructWorkerByXml() {\r\n        assertThat(toolFactory.getFactoryId(), equalTo(9090));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class FactoryBeanAppConfig {\r\n\r\n    @Bean(name = \"tool\")\r\n    public ToolFactory toolFactory() {\r\n        ToolFactory factory = new ToolFactory();\r\n        factory.setFactoryId(7070);\r\n        factory.setToolId(2);\r\n        return factory;\r\n    }\r\n\r\n    @Bean\r\n    public Tool tool() throws Exception {\r\n        return toolFactory().getObject();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = FactoryBeanAppConfig.class)\r\npublic class FactoryBeanJavaConfigTest {\r\n\r\n    @Autowired\r\n    private Tool tool;\r\n\r\n    @Resource(name = \"&tool;\")\r\n    private ToolFactory toolFactory;\r\n\r\n    @Test\r\n    public void testConstructWorkerByJava() {\r\n        assertThat(tool.getId(), equalTo(2));\r\n        assertThat(toolFactory.getFactoryId(), equalTo(7070));\r\n    }\r\n}\r\n```","```\r\npublic class SingleToolFactory extends AbstractFactoryBean<Tool> {\r\n\r\n    private int factoryId;\r\n    private int toolId;\r\n\r\n    @Override\r\n    public Class<?> getObjectType() {\r\n        return Tool.class;\r\n    }\r\n\r\n    @Override\r\n    protected Tool createInstance() throws Exception {\r\n        return new Tool(toolId);\r\n    }\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic class NonSingleToolFactory extends AbstractFactoryBean<Tool> {\r\n\r\n    private int factoryId;\r\n    private int toolId;\r\n\r\n    public NonSingleToolFactory() {\r\n        setSingleton(false);\r\n    }\r\n\r\n    @Override\r\n    public Class<?> getObjectType() {\r\n        return Tool.class;\r\n    }\r\n\r\n    @Override\r\n    protected Tool createInstance() throws Exception {\r\n        return new Tool(toolId);\r\n    }\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\n<beans ...>\r\n\r\n    <bean id=\"singleTool\" class=\"com.baeldung.factorybean.SingleToolFactory\">\r\n        <property name=\"factoryId\" value=\"3001\"/>\r\n        <property name=\"toolId\" value=\"1\"/>\r\n    </bean>\r\n\r\n    <bean id=\"nonSingleTool\" class=\"com.baeldung.factorybean.NonSingleToolFactory\">\r\n        <property name=\"factoryId\" value=\"3002\"/>\r\n        <property name=\"toolId\" value=\"2\"/>\r\n    </bean>\r\n</beans>\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(locations = { \"classpath:factorybean-abstract-spring-ctx.xml\" })\r\npublic class AbstractFactoryBeanTest {\r\n\r\n    @Resource(name = \"singleTool\")\r\n    private Tool tool1;\r\n\r\n    @Resource(name = \"singleTool\")\r\n    private Tool tool2;\r\n\r\n    @Resource(name = \"nonSingleTool\")\r\n    private Tool tool3;\r\n\r\n    @Resource(name = \"nonSingleTool\")\r\n    private Tool tool4;\r\n\r\n    @Test\r\n    public void testSingleToolFactory() {\r\n        assertThat(tool1.getId(), equalTo(1));\r\n        assertTrue(tool1 == tool2);\r\n    }\r\n\r\n    @Test\r\n    public void testNonSingleToolFactory() {\r\n        assertThat(tool3.getId(), equalTo(2));\r\n        assertThat(tool4.getId(), equalTo(2));\r\n        assertTrue(tool3 != tool4);\r\n    }\r\n}\r\n```"]