["```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>java-hamcrest</artifactId>\r\n    <version>2.0.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class City {\r\n    String name;\r\n    String state;\r\n\r\n    // standard constructor, getters and setters\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenHasProperty_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n\r\n    assertThat(city, hasProperty(\"state\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenHasPropertyWithValueEqualTo_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n\r\n    assertThat(city, hasProperty(\"name\", equalTo(\"San Francisco\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenHasPropertyWithValueEqualToIgnoringCase_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n\r\n    assertThat(city, hasProperty(\"state\", equalToIgnoringCase(\"ca\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenSamePropertyValuesAs_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n    City city2 = new City(\"San Francisco\", \"CA\");\r\n\r\n    assertThat(city, samePropertyValuesAs(city2));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenNotSamePropertyValuesAs_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n    City city2 = new City(\"Los Angeles\", \"CA\");\r\n\r\n    assertThat(city, not(samePropertyValuesAs(city2)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenGetPropertyDescriptor_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n    PropertyDescriptor descriptor = getPropertyDescriptor(\"state\", city);\r\n\r\n    assertThat(descriptor\r\n      .getReadMethod()\r\n      .getName(), is(equalTo(\"getState\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenACity_whenGetPropertyDescriptorsFor_thenCorrect() {\r\n    City city = new City(\"San Francisco\", \"CA\");\r\n    PropertyDescriptor[] descriptors = propertyDescriptorsFor(\r\n      city, Object.class);\r\n\r\n    List<String> getters = Arrays.stream(descriptors)\r\n      .map(x -> x.getReadMethod().getName())\r\n      .collect(toList());\r\n\r\n    assertThat(getters, containsInAnyOrder(\"getName\", \"getState\"));\r\n}\r\n```"]