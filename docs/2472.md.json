["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>   \r\n    <version>5.3.2.Final</version>\r\n</dependency>\r\n```","```\r\npublic class Item implements Serializable {\r\n\r\n    private Integer itemId;\r\n    private String itemName;\r\n    private String itemDescription;\r\n    private Integer itemPrice;\r\n\r\n   // standard setters and getters\r\n}\r\n```","```\r\nSession session = HibernateUtil.getHibernateSession();\r\nCriteriaBuilder cb = session.getCriteriaBuilder();\r\nCriteriaQuery<Item> cr = cb.createQuery(Item.class);\r\nRoot<Item> root = cr.from(Item.class);\r\ncr.select(root);\r\n\r\nQuery<Item> query = session.createQuery(cr);\r\nList<Item> results = query.getResultList();\r\n```","```\r\ncr.select(root).where(cb.gt(root.get(\"itemPrice\"), 1000));\r\n```","```\r\ncr.select(root).where(cb.lt(root.get(\"itemPrice\"), 1000));\r\n```","```\r\ncr.select(root).where(cb.like(root.get(\"itemName\"), \"%chair%\"));\r\n```","```\r\ncr.select(root).where(cb.between(root.get(\"itemPrice\"), 100, 200));\r\n```","```\r\ncr.select(root).where(root.get(\"itemName\").in(\"Skate Board\", \"Paint\", \"Glue\"));\r\n```","```\r\ncr.select(root).where(cb.isNull(root.get(\"itemDescription\")));\r\n```","```\r\ncr.select(root).where(cb.isNotNull(root.get(\"itemDescription\")));\r\n```","```\r\nPredicate[] predicates = new Predicate[2];\r\npredicates[0] = cb.isNull(root.get(\"itemDescription\"));\r\npredicates[1] = cb.like(root.get(\"itemName\"), \"chair%\");\r\ncr.select(root).where(predicates);\r\n```","```\r\nPredicate greaterThanPrice = cb.gt(root.get(\"itemPrice\"), 1000);\r\nPredicate chairItems = cb.like(root.get(\"itemName\"), \"Chair%\");\r\n```","```\r\ncr.select(root).where(cb.or(greaterThanPrice, chairItems));\r\n```","```\r\ncr.select(root).where(cb.and(greaterThanPrice, chairItems));\r\n```","```\r\ncr.orderBy(\r\n  cb.asc(root.get(\"itemName\")), \r\n  cb.desc(root.get(\"itemPrice\")));\r\n```","```\r\nCriteriaQuery<Long> cr = cb.createQuery(Long.class);\r\nRoot<Item> root = cr.from(Item.class);\r\ncr.select(cb.count(root));\r\nQuery<Long> query = session.createQuery(cr);\r\nList<Long> itemProjected = query.getResultList();\r\n```","```\r\nCriteriaQuery<Double> cr = cb.createQuery(Double.class);\r\nRoot<Item> root = cr.from(Item.class);\r\ncr.select(cb.avg(root.get(\"itemPrice\")));\r\nQuery<Double> query = session.createQuery(cr);\r\nList avgItemPriceList = query.getResultList();\r\n```","```\r\nCriteriaUpdate<Item> criteriaUpdate = cb.createCriteriaUpdate(Item.class);\r\nRoot<Item> root = criteriaUpdate.from(Item.class);\r\ncriteriaUpdate.set(\"itemPrice\", newPrice);\r\ncriteriaUpdate.where(cb.equal(root.get(\"itemPrice\"), oldPrice));\r\n\r\nTransaction transaction = session.beginTransaction();\r\nsession.createQuery(criteriaUpdate).executeUpdate();\r\ntransaction.commit();\r\n```","```\r\nCriteriaDelete<Item> criteriaDelete = cb.createCriteriaDelete(Item.class);\r\nRoot<Item> root = criteriaDelete.from(Item.class);\r\ncriteriaDelete.where(cb.greaterThan(root.get(\"itemPrice\"), targetPrice));\r\n\r\nTransaction transaction = session.beginTransaction();\r\nsession.createQuery(criteriaDelete).executeUpdate();\r\ntransaction.commit();\r\n```"]