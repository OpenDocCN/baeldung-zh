["```\r\n<dependency>\r\n    <groupId>javax.measure</groupId>\r\n    <artifactId>unit-api</artifactId>\r\n    <version>1.0</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>tec.units</groupId>\r\n    <artifactId>unit-ri</artifactId>\r\n    <version>1.0.3</version>\r\n</dependency>\r\n```","```\r\npublic class WaterTank {\r\n    public void setWaterQuantity(double quantity);\r\n}\r\n```","```\r\npublic class WaterTank {\r\n    public void setCapacityMeasure(Quantity<Volume> capacityMeasure);\r\n}\r\n```","```\r\n@Test\r\npublic void givenQuantity_whenGetUnitAndConvertValue_thenSuccess() {\r\n    WaterTank waterTank = new WaterTank();\r\n    waterTank.setCapacityMeasure(Quantities.getQuantity(9.2, LITRE));\r\n    assertEquals(LITRE, waterTank.getCapacityMeasure().getUnit());\r\n\r\n    Quantity<Volume> waterCapacity = waterTank.getCapacityMeasure();\r\n    double volumeInLitre = waterCapacity.getValue().doubleValue();\r\n    assertEquals(9.2, volumeInLitre, 0.0f);\r\n}\r\n```","```\r\ndouble volumeInMilliLitre = waterCapacity\r\n  .to(MetricPrefix.MILLI(LITRE)).getValue().doubleValue();\r\nassertEquals(9200.0, volumeInMilliLitre, 0.0f);\r\n```","```\r\n// compilation error\r\nwaterCapacity.to(MetricPrefix.MILLI(KILOGRAM));\r\n```","```\r\nUnit<Length> Kilometer = MetricPrefix.KILO(METRE);\r\nUnit<Length> Centimeter = MetricPrefix.CENTI(LITRE); // compilation error\r\n```","```\r\nUnit<Length> inch = CENTI(METER).times(2.54).asType(Length.class);\r\n```","```\r\nUnit<?> kelvinPerSec = KELVIN.divide(SECOND);\r\n```","```\r\nUnit<Length> Kilometer = MetricPrefix.KILO(METRE);\r\nUnit<Length> Centimeter = MetricPrefix.CENTI(METRE);\r\n```","```\r\n@Test\r\npublic void givenUnit_whenAlternateUnit_ThenGetAlternateUnit() {\r\n    Unit<Pressure> PASCAL = NEWTON.divide(METRE.pow(2))\r\n      .alternate(\"Pa\").asType(Pressure.class);\r\n    assertTrue(SimpleUnitFormat.getInstance().parse(\"Pa\")\r\n      .equals(PASCAL));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUnit_whenProduct_ThenGetProductUnit() {\r\n    Unit<Area> squareMetre = METRE.multiply(METRE).asType(Area.class);\r\n    Quantity<Length> line = Quantities.getQuantity(2, METRE);\r\n    assertEquals(line.multiply(line).getUnit(), squareMetre);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMeters_whenConvertToKilometer_ThenConverted() {\r\n    double distanceInMeters = 50.0;\r\n    UnitConverter metreToKilometre = METRE.getConverterTo(MetricPrefix.KILO(METRE));\r\n    double distanceInKilometers = metreToKilometre.convert(distanceInMeters );\r\n    assertEquals(0.05, distanceInKilometers, 0.00f);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSymbol_WhenCompareToSystemUnit_ThenSuccess() {\r\n    assertTrue(SimpleUnitFormat.getInstance().parse(\"kW\")\r\n      .equals(MetricPrefix.KILO(WATT)));\r\n    assertTrue(SimpleUnitFormat.getInstance().parse(\"ms\")\r\n      .equals(SECOND.divide(1000)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUnits_WhenAdd_ThenSuccess() {\r\n    Quantity<Length> total = Quantities.getQuantity(2, METRE)\r\n      .add(Quantities.getQuantity(3, METRE));\r\n    assertEquals(total.getValue().intValue(), 5);\r\n}\r\n```","```\r\n// compilation error\r\nQuantity<Length> total = Quantities.getQuantity(2, METRE)\r\n  .add(Quantities.getQuantity(3, LITRE));\r\n```","```\r\nQuantity<Length> totalKm = Quantities.getQuantity(2, METRE)\r\n  .add(Quantities.getQuantity(3, MetricPrefix.KILO(METRE)));\r\nassertEquals(totalKm.getValue().intValue(), 3002);\r\n```"]