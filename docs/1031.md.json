["```\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.13</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-test</artifactId>\r\n    <version>5.1.16.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@PostMapping(path = \"/upload\")\r\npublic ResponseEntity<String> uploadFile(@RequestParam(\"file\") MultipartFile file) {\r\n    return file.isEmpty() ?\r\n      new ResponseEntity<String>(HttpStatus.NOT_FOUND) : new ResponseEntity<String>(HttpStatus.OK);\r\n}\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext webApplicationContext;\r\n```","```\r\n@Test\r\npublic void whenFileUploaded_thenVerifyStatus() \r\n  throws Exception {\r\n    MockMultipartFile file \r\n      = new MockMultipartFile(\r\n        \"file\", \r\n        \"hello.txt\", \r\n        MediaType.TEXT_PLAIN_VALUE, \r\n        \"Hello, World!\".getBytes()\r\n      );\r\n\r\n    MockMvc mockMvc \r\n      = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\r\n    mockMvc.perform(multipart(\"/upload\").file(file))\r\n      .andExpect(status().isOk());\r\n}\r\n```"]