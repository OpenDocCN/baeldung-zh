["```\r\npublic class JDIExampleDebuggee {\r\n    public static void main(String[] args) {\r\n        String jpda = \"Java Platform Debugger Architecture\";\r\n        System.out.println(\"Hi Everyone, Welcome to \" + jpda); // add a break point here\r\n\r\n        String jdi = \"Java Debug Interface\"; // add a break point here and also stepping in here\r\n        String text = \"Today, we'll dive into \" + jdi;\r\n        System.out.println(text);\r\n    }\r\n}\r\n```","```\r\npublic class JDIExampleDebugger {\r\n    private Class debugClass; \r\n    private int[] breakPointLines;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic VirtualMachine connectAndLaunchVM() throws Exception {\r\n\r\n    LaunchingConnector launchingConnector = Bootstrap.virtualMachineManager()\r\n      .defaultConnector();\r\n    Map<String, Connector.Argument> arguments = launchingConnector.defaultArguments();\r\n    arguments.get(\"main\").setValue(debugClass.getName());\r\n    return launchingConnector.launch(arguments);\r\n}\r\n```","```\r\npublic static void main(String[] args) throws Exception {\r\n\r\n    JDIExampleDebugger debuggerInstance = new JDIExampleDebugger();\r\n    debuggerInstance.setDebugClass(JDIExampleDebuggee.class);\r\n    int[] breakPoints = {6, 9};\r\n    debuggerInstance.setBreakPointLines(breakPoints);\r\n    VirtualMachine vm = null;\r\n    try {\r\n        vm = debuggerInstance.connectAndLaunchVM();\r\n        vm.resume();\r\n    } catch(Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n```","```\r\njavac -g -cp \"/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/tools.jar\" \r\ncom/baeldung/jdi/*.java\r\n```","```\r\njava -cp \"/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/lib/tools.jar:.\" \r\nJDIExampleDebugger\r\n```","```\r\npublic void enableClassPrepareRequest(VirtualMachine vm) {\r\n    ClassPrepareRequest classPrepareRequest = vm.eventRequestManager().createClassPrepareRequest();\r\n    classPrepareRequest.addClassFilter(debugClass.getName());\r\n    classPrepareRequest.enable();\r\n}\r\n```","```\r\npublic void setBreakPoints(VirtualMachine vm, ClassPrepareEvent event) throws AbsentInformationException {\r\n    ClassType classType = (ClassType) event.referenceType();\r\n    for(int lineNumber: breakPointLines) {\r\n        Location location = classType.locationsOfLine(lineNumber).get(0);\r\n        BreakpointRequest bpReq = vm.eventRequestManager().createBreakpointRequest(location);\r\n        bpReq.enable();\r\n    }\r\n}\r\n```","```\r\npublic void displayVariables(LocatableEvent event) throws IncompatibleThreadStateException, \r\nAbsentInformationException {\r\n    StackFrame stackFrame = event.thread().frame(0);\r\n    if(stackFrame.location().toString().contains(debugClass.getName())) {\r\n        Map<LocalVariable, Value> visibleVariables = stackFrame\r\n          .getValues(stackFrame.visibleVariables());\r\n        System.out.println(\"Variables at \" + stackFrame.location().toString() +  \" > \");\r\n        for (Map.Entry<LocalVariable, Value> entry : visibleVariables.entrySet()) {\r\n            System.out.println(entry.getKey().name() + \" = \" + entry.getValue());\r\n        }\r\n    }\r\n}\r\n```","```\r\ntry {\r\n    vm = debuggerInstance.connectAndLaunchVM();\r\n    debuggerInstance.enableClassPrepareRequest(vm);\r\n    EventSet eventSet = null;\r\n    while ((eventSet = vm.eventQueue().remove()) != null) {\r\n        for (Event event : eventSet) {\r\n            if (event instanceof ClassPrepareEvent) {\r\n                debuggerInstance.setBreakPoints(vm, (ClassPrepareEvent)event);\r\n            }\r\n            if (event instanceof BreakpointEvent) {\r\n                debuggerInstance.displayVariables((BreakpointEvent) event);\r\n            }\r\n            vm.resume();\r\n        }\r\n    }\r\n} catch (VMDisconnectedException e) {\r\n    System.out.println(\"Virtual Machine is disconnected.\");\r\n} catch (Exception e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:6 > \r\nargs = instance of java.lang.String[0] (id=93)\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:9 > \r\njpda = \"Java Platform Debugger Architecture\"\r\nargs = instance of java.lang.String[0] (id=93)\r\nVirtual Machine is disconnected.\r\n```","```\r\npublic void enableStepRequest(VirtualMachine vm, BreakpointEvent event) {\r\n    // enable step request for last break point\r\n    if (event.location().toString().\r\n        contains(debugClass.getName() + \":\" + breakPointLines[breakPointLines.length-1])) {\r\n        StepRequest stepRequest = vm.eventRequestManager()\r\n            .createStepRequest(event.thread(), StepRequest.STEP_LINE, StepRequest.STEP_OVER);\r\n        stepRequest.enable();    \r\n    }\r\n}\r\n```","```\r\nif (event instanceof BreakpointEvent) {\r\n    debuggerInstance.enableStepRequest(vm, (BreakpointEvent)event);\r\n}\r\n```","```\r\nif (event instanceof StepEvent) {\r\n    debuggerInstance.displayVariables((StepEvent) event);\r\n}\r\n```","```\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:6 > \r\nargs = instance of java.lang.String[0] (id=93)\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:9 > \r\nargs = instance of java.lang.String[0] (id=93)\r\njpda = \"Java Platform Debugger Architecture\"\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:10 > \r\nargs = instance of java.lang.String[0] (id=93)\r\njpda = \"Java Platform Debugger Architecture\"\r\njdi = \"Java Debug Interface\"\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:11 > \r\nargs = instance of java.lang.String[0] (id=93)\r\njpda = \"Java Platform Debugger Architecture\"\r\njdi = \"Java Debug Interface\"\r\ntext = \"Today, we'll dive into Java Debug Interface\"\r\nVariables at com.baeldung.jdi.JDIExampleDebuggee:12 > \r\nargs = instance of java.lang.String[0] (id=93)\r\njpda = \"Java Platform Debugger Architecture\"\r\njdi = \"Java Debug Interface\"\r\ntext = \"Today, we'll dive into Java Debug Interface\"\r\nVirtual Machine is disconnected.\r\n```","```\r\nfinally {\r\n    InputStreamReader reader = new InputStreamReader(vm.process().getInputStream());\r\n    OutputStreamWriter writer = new OutputStreamWriter(System.out);\r\n    char[] buf = new char[512];\r\n    reader.read(buf);\r\n    writer.write(buf);\r\n    writer.flush();\r\n}\r\n```","```\r\nHi Everyone, Welcome to Java Platform Debugger Architecture\r\nToday, we'll dive into Java Debug Interface\r\n```"]