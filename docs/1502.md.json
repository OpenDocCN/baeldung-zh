["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.3</version>\r\n</dependency>\r\n```","```\r\nMap<String, String> map = new HashMap<>();\r\nmap.put(\"key\", \"value\");\r\n\r\nObjectMapper mapper = new ObjectMapper();\r\nString jsonResult = mapper.writerWithDefaultPrettyPrinter()\r\n  .writeValueAsString(map);\r\n```","```\r\n{\r\n  \"key\" : \"value\"\r\n}\r\n```","```\r\npublic class MyPair {\r\n\r\n    private String first;\r\n    private String second;\r\n\r\n    @Override\r\n    @JsonValue\r\n    public String toString() {\r\n        return first + \" and \" + second;\r\n    }\r\n\r\n    // standard getter, setters, equals, hashCode, constructors\r\n}\r\n```","```\r\npublic class MyPairSerializer extends JsonSerializer<MyPair> {\r\n\r\n    private ObjectMapper mapper = new ObjectMapper();\r\n\r\n    @Override\r\n    public void serialize(MyPair value, \r\n      JsonGenerator gen,\r\n      SerializerProvider serializers) \r\n      throws IOException, JsonProcessingException {\r\n\r\n        StringWriter writer = new StringWriter();\r\n        mapper.writeValue(writer, value);\r\n        gen.writeFieldName(writer.toString());\r\n    }\r\n}\r\n```","```\r\n@JsonSerialize(keyUsing = MyPairSerializer.class) \r\nMap<MyPair, String> map;\r\n```","```\r\nmap = new HashMap<>();\r\nMyPair key = new MyPair(\"Abbott\", \"Costello\");\r\nmap.put(key, \"Comedy\");\r\n\r\nString jsonResult = mapper.writerWithDefaultPrettyPrinter()\r\n  .writeValueAsString(map);\r\n```","```\r\n{\r\n  \"Abbott and Costello\" : \"Comedy\"\r\n}\r\n```","```\r\n@JsonSerialize(keyUsing = MapSerializer.class)\r\nMap<MyPair, MyPair> map;\r\n\r\n@JsonSerialize(keyUsing = MyPairSerializer.class)\r\nMyPair mapKey;\r\n\r\n@JsonSerialize(keyUsing = MyPairSerializer.class)\r\nMyPair mapValue;\r\n```","```\r\nmapKey = new MyPair(\"Abbott\", \"Costello\");\r\nmapValue = new MyPair(\"Comedy\", \"1940s\");\r\nmap.put(mapKey, mapValue);\r\n\r\nString jsonResult = mapper.writerWithDefaultPrettyPrinter()\r\n  .writeValueAsString(map);\r\n```","```\r\n{\r\n  \"Abbott and Costello\" : \"Comedy and 1940s\"\r\n}\r\n```","```\r\nString jsonInput = \"{\\\"key\\\": \\\"value\\\"}\";\r\nTypeReference<HashMap<String, String>> typeRef \r\n  = new TypeReference<HashMap<String, String>>() {};\r\nMap<String, String> map = mapper.readValue(jsonInput, typeRef);\r\n```","```\r\n{key=value}\r\n```","```\r\nString jsonInput = \"{\\\"Abbott and Costello\\\" : \\\"Comedy\\\"}\";\r\n\r\nTypeReference<HashMap<MyPair, String>> typeRef \r\n  = new TypeReference<HashMap<MyPair, String>>() {};\r\nMap<MyPair,String> map = mapper.readValue(jsonInput, typeRef);\r\n```","```\r\npublic MyPair(String both) {\r\n    String[] pairs = both.split(\"and\");\r\n    this.first = pairs[0].trim();\r\n    this.second = pairs[1].trim();\r\n}\r\n```","```\r\n{Abbott and Costello=Comedy}\r\n```","```\r\npublic class ClassWithAMap {\r\n\r\n  @JsonProperty(\"map\")\r\n  @JsonDeserialize(keyUsing = MyPairDeserializer.class)\r\n  private Map<MyPair, String> map;\r\n\r\n  @JsonCreator\r\n  public ClassWithAMap(Map<MyPair, String> map) {\r\n    this.map = map;\r\n  }\r\n\r\n  // public getters/setters omitted\r\n}\r\n```","```\r\npublic class MyPairDeserializer extends KeyDeserializer {\r\n\r\n  @Override\r\n  public MyPair deserializeKey(\r\n    String key, \r\n    DeserializationContext ctxt) throws IOException, \r\n    JsonProcessingException {\r\n\r\n      return new MyPair(key);\r\n    }\r\n}\r\n```","```\r\nString jsonInput = \"{\\\"Abbott and Costello\\\":\\\"Comedy\\\"}\";\r\n\r\nClassWithAMap classWithMap = mapper.readValue(jsonInput,\r\n  ClassWithAMap.class);\r\n```","```\r\n{Abbott and Costello=Comedy}\r\n```","```\r\nString jsonInput = \"{\\\"Abbott and Costello\\\" : \\\"Comedy and 1940s\\\"}\";\r\nTypeReference<HashMap<MyPair, MyPair>> typeRef \r\n  = new TypeReference<HashMap<MyPair, MyPair>>() {};\r\nMap<MyPair,MyPair> map = mapper.readValue(jsonInput, typeRef);\r\n```","```\r\n{Abbott and Costello=Comedy and 1940s}\r\n```"]