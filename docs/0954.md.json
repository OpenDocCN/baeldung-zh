["```\r\ngit clone [[email protected]](/web/20220814172559/https://www.baeldung.com/cdn-cgi/l/email-protection):spring-projects/spring-mvc-showcase.git\r\n```","```\r\n<org.springframework-version>5.0.0.RELEASE</org.springframework-version>\r\n```","```\r\n@Override\r\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n    registry\r\n      .addResourceHandler(\"/resources/**\")\r\n      .addResourceLocations(\"file:./src/\", \"/resources/\");\r\n}\r\n```","```\r\nmvn jetty:run\r\n```","```\r\ncurl 'http://localhost:8080/spring-mvc-showcase/resources/%255c%255c%252e%252e%255c/%252e%252e%255c/%252e%252e%255c/%252e%252e%255c/%252e%252e%255c/windows/system.ini'\r\n```","```\r\nrequest.getServletPath()\r\n```","```\r\nrequest.getPathInfo()\r\n```","```\r\n@Bean\r\npublic HttpFirewall getHttpFirewall() {\r\n    return new DefaultHttpFirewall();\r\n}\r\n```","```\r\n@Bean\r\npublic HttpFirewall getHttpFirewall() {\r\n    StrictHttpFirewall strictHttpFirewall = new StrictHttpFirewall();\r\n    strictHttpFirewall.setAllowSemicolon(true);\r\n    return strictHttpFirewall;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class SpringSecurityHttpFirewallConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .csrf()\r\n          .disable()\r\n          .authorizeRequests()\r\n            .antMatchers(\"/error\").permitAll()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .httpBasic();\r\n    }\r\n}\r\n```","```\r\nspring.security.user.name=user\r\nspring.security.user.password=password\r\n```","```\r\n@PostMapping\r\npublic ResponseEntity<Response> createUser(@RequestBody User user) {\r\n    userService.saveUser(user);\r\n    Response response = new Response()\r\n      .withTimestamp(System.currentTimeMillis())\r\n      .withCode(HttpStatus.CREATED.value())\r\n      .withMessage(\"User created successfully\");\r\n    URI location = URI.create(\"/users/\" + user.getId());\r\n    return ResponseEntity.created(location).body(response);\r\n}\r\n\r\n@DeleteMapping(\"/{userId}\")\r\npublic ResponseEntity<Response> deleteUser(@PathVariable(\"userId\") String userId) {\r\n    userService.deleteUser(userId);\r\n    return ResponseEntity.ok(new Response(200,\r\n      \"The user has been deleted successfully\", System.currentTimeMillis()));\r\n}\r\n```","```\r\nmvn spring-boot:run\r\n```","```\r\ncurl -i --user user:password -d @request.json -H \"Content-Type: application/json\" \r\n     -H \"Accept: application/json\" http://localhost:8080/api/v1/users\r\n```","```\r\n{\r\n    \"id\":\"1\",\r\n    \"username\":\"navuluri\",\r\n    \"email\":\"[[email protected]](/web/20220814172559/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n}\r\n```","```\r\nHTTP/1.1 201\r\nLocation: /users/1\r\nContent-Type: application/json\r\n{\r\n  \"code\":201,\r\n  \"message\":\"User created successfully\",\r\n  \"timestamp\":1632808055618\r\n} \r\n```","```\r\n@Bean\r\npublic HttpFirewall configureFirewall() {\r\n    StrictHttpFirewall strictHttpFirewall = new StrictHttpFirewall();\r\n    strictHttpFirewall\r\n      .setAllowedHttpMethods(Collections.emptyList());\r\n    return strictHttpFirewall;\r\n} \r\n```","```\r\norg.springframework.security.web.firewall.RequestRejectedException: \r\nThe request was rejected because the HTTP method \"POST\" was not included\r\n  within the list of allowed HTTP methods []\r\n```","```\r\n@Bean\r\npublic RequestRejectedHandler requestRejectedHandler() {\r\n   return new HttpStatusRequestRejectedHandler();\r\n}\r\n```","```\r\nstrictHttpFirewall.setAllowBackSlash(true);\r\nstrictHttpFirewall.setAllowedHttpMethods(Arrays.asList(\"GET\",\"POST\",\"DELETE\", \"OPTIONS\")\r\n```","```\r\ncurl -i --user user:password -d @request.json -H \"Content-Type: application/json\" \r\n     -H \"Accept: application/json\" http://localhost:8080/api<strong>\\\\</strong>v1/users\r\n```","```\r\n{\r\n  \"code\":201,\r\n  \"message\":\"User created successfully\",\r\n  \"timestamp\":1632812660569\r\n}\r\n```","```\r\ncurl -i --user user:password -d @request.json -H \"Content-Type: application/json\" \r\n      -H \"Accept: application/json\" http://localhost:8080/api/v1<strong>//</strong>users\r\n```","```\r\ncurl -i --user user:password -d @request.json -H \"Content-Type: application/json\" \r\n      -H \"Accept: application/json\" http://localhost:8080/api/v1<strong>\\\\</strong>users\r\n```","```\r\norg.springframework.security.web.firewall.RequestRejectedException: \r\nThe request was rejected because the URL contained a potentially malicious String \"//\"\r\n```"]