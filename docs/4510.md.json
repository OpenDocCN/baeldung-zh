["```\r\n<dependency>\r\n    <groupId>org.springframework.integration</groupId>\r\n    <artifactId>spring-integration-security</artifactId>\r\n    <version>5.0.3.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n    <version>5.0.3.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableIntegration\r\npublic class SecuredDirectChannel {\r\n    //...\r\n}\r\n```","```\r\n@Autowired\r\n@Bean\r\npublic ChannelSecurityInterceptor channelSecurityInterceptor(\r\n  AuthenticationManager authenticationManager, \r\n  AccessDecisionManager customAccessDecisionManager) {\r\n\r\n    ChannelSecurityInterceptor \r\n      channelSecurityInterceptor = new ChannelSecurityInterceptor();\r\n\r\n    channelSecurityInterceptor\r\n      .setAuthenticationManager(authenticationManager);\r\n\r\n    channelSecurityInterceptor\r\n      .setAccessDecisionManager(customAccessDecisionManager);\r\n\r\n    return channelSecurityInterceptor;\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig extends GlobalMethodSecurityConfiguration {\r\n\r\n    @Override\r\n    @Bean\r\n    public AuthenticationManager \r\n      authenticationManager() throws Exception {\r\n        return super.authenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public AccessDecisionManager customAccessDecisionManager() {\r\n        List<AccessDecisionVoter<? extends Object>> \r\n          decisionVoters = new ArrayList<>();\r\n        decisionVoters.add(new RoleVoter());\r\n        decisionVoters.add(new UsernameAccessDecisionVoter());\r\n        AccessDecisionManager accessDecisionManager\r\n          = new AffirmativeBased(decisionVoters);\r\n        return accessDecisionManager;\r\n    }\r\n}\r\n```","```\r\n@Bean(name = \"startDirectChannel\")\r\n@SecuredChannel(\r\n  interceptor = \"channelSecurityInterceptor\", \r\n  sendAccess = { \"ROLE_VIEWER\",\"jane\" })\r\npublic DirectChannel startDirectChannel() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean(name = \"endDirectChannel\")\r\n@SecuredChannel(\r\n  interceptor = \"channelSecurityInterceptor\", \r\n  sendAccess = {\"ROLE_EDITOR\"})\r\npublic DirectChannel endDirectChannel() {\r\n    return new DirectChannel();\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class SecurityConfig extends GlobalMethodSecurityConfiguration {\r\n    //....\r\n}\r\n```","```\r\n@ServiceActivator(\r\n  inputChannel = \"startDirectChannel\", \r\n  outputChannel = \"endDirectChannel\")\r\n@PreAuthorize(\"hasRole('ROLE_LOGGER')\")\r\npublic Message<?> logMessage(Message<?> message) {\r\n    Logger.getAnonymousLogger().info(message.toString());\r\n    return message;\r\n}\r\n```","```\r\n@Bean(name = \"startPSChannel\")\r\n@SecuredChannel(\r\n  interceptor = \"channelSecurityInterceptor\", \r\n  sendAccess = \"ROLE_VIEWER\")\r\npublic PublishSubscribeChannel startChannel() {\r\n    return new PublishSubscribeChannel(executor());\r\n}\r\n\r\n@ServiceActivator(\r\n  inputChannel = \"startPSChannel\", \r\n  outputChannel = \"finalPSResult\")\r\n@PreAuthorize(\"hasRole('ROLE_LOGGER')\")\r\npublic Message<?> changeMessageToRole(Message<?> message) {\r\n    return buildNewMessage(getRoles(), message);\r\n}\r\n\r\n@ServiceActivator(\r\n  inputChannel = \"startPSChannel\", \r\n  outputChannel = \"finalPSResult\")\r\n@PreAuthorize(\"hasRole('ROLE_VIEWER')\")\r\npublic Message<?> changeMessageToUserName(Message<?> message) {\r\n    return buildNewMessage(getUsername(), message);\r\n}\r\n```","```\r\n@Bean\r\npublic ThreadPoolTaskExecutor executor() {\r\n    ThreadPoolTaskExecutor pool = new ThreadPoolTaskExecutor();\r\n    pool.setCorePoolSize(10);\r\n    pool.setMaxPoolSize(10);\r\n    pool.setWaitForTasksToCompleteOnShutdown(true);\r\n    return pool;\r\n}\r\n```","```\r\n@Bean\r\n@GlobalChannelInterceptor(patterns = { \"startPSChannel\" })\r\npublic ChannelInterceptor securityContextPropagationInterceptor() {\r\n    return new SecurityContextPropagationChannelInterceptor();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-test</artifactId>\r\n    <version>5.0.3.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test(expected = AuthenticationCredentialsNotFoundException.class)\r\npublic void \r\n  givenNoUser_whenSendToDirectChannel_thenCredentialNotFound() {\r\n\r\n    startDirectChannel\r\n      .send(new GenericMessage<String>(DIRECT_CHANNEL_MESSAGE));\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(roles = { \"VIEWER\" })\r\npublic void \r\n  givenRoleViewer_whenSendToDirectChannel_thenAccessDenied() {\r\n    expectedException.expectCause\r\n      (IsInstanceOf.<Throwable> instanceOf(AccessDeniedException.class));\r\n\r\n    startDirectChannel\r\n      .send(new GenericMessage<String>(DIRECT_CHANNEL_MESSAGE));\r\n }\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"jane\", roles = { \"LOGGER\", \"EDITOR\" })\r\npublic void \r\n  givenJaneLoggerEditor_whenSendToDirectChannel_thenFlowCompleted() {\r\n    startDirectChannel\r\n      .send(new GenericMessage<String>(DIRECT_CHANNEL_MESSAGE));\r\n    assertEquals\r\n      (DIRECT_CHANNEL_MESSAGE, messageConsumer.getMessageContent());\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"user\", roles = { \"VIEWER\" })\r\npublic void \r\n  givenRoleUser_whenSendMessageToPSChannel_thenNoMessageArrived() \r\n  throws IllegalStateException, InterruptedException {\r\n\r\n    startPSChannel\r\n      .send(new GenericMessage<String>(DIRECT_CHANNEL_MESSAGE));\r\n\r\n    executor\r\n      .getThreadPoolExecutor()\r\n      .awaitTermination(2, TimeUnit.SECONDS);\r\n\r\n    assertEquals(1, messageConsumer.getMessagePSContent().size());\r\n    assertTrue(\r\n      messageConsumer\r\n      .getMessagePSContent().values().contains(\"user\"));\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"user\", roles = { \"LOGGER\", \"VIEWER\" })\r\npublic void \r\n  givenRoleUserAndLogger_whenSendMessageToPSChannel_then2GetMessages() \r\n  throws IllegalStateException, InterruptedException {\r\n    startPSChannel\r\n      .send(new GenericMessage<String>(DIRECT_CHANNEL_MESSAGE));\r\n\r\n    executor\r\n      .getThreadPoolExecutor()\r\n      .awaitTermination(2, TimeUnit.SECONDS);\r\n\r\n    assertEquals(2, messageConsumer.getMessagePSContent().size());\r\n    assertTrue\r\n      (messageConsumer\r\n      .getMessagePSContent()\r\n      .values().contains(\"user\"));\r\n    assertTrue\r\n      (messageConsumer\r\n      .getMessagePSContent()\r\n      .values().contains(\"ROLE_LOGGER,ROLE_VIEWER\"));\r\n}\r\n```"]