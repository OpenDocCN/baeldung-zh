["```\r\n<dependency> \r\n    <groupId>com.querydsl</groupId> \r\n    <artifactId>querydsl-apt</artifactId> \r\n    <version>4.2.2</version>\r\n    </dependency>\r\n<dependency> \r\n    <groupId>com.querydsl</groupId> \r\n    <artifactId>querydsl-jpa</artifactId> \r\n    <version>4.2.2</version> \r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>com.mysema.maven</groupId>\r\n    <artifactId>apt-maven-plugin</artifactId>\r\n    <version>1.1.3</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>process</goal>\r\n            </goals>\r\n            <configuration>\r\n                <outputDirectory>target/generated-sources/java</outputDirectory>\r\n                <processor>com.mysema.query.apt.jpa.JPAAnnotationProcessor</processor>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n@Entity\r\npublic class MyUser {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n\r\n    private int age;\r\n}\r\n```","```\r\npublic class MyUserPredicate {\r\n\r\n    private SearchCriteria criteria;\r\n\r\n    public BooleanExpression getPredicate() {\r\n        PathBuilder<MyUser> entityPath = new PathBuilder<>(MyUser.class, \"user\");\r\n\r\n        if (isNumeric(criteria.getValue().toString())) {\r\n            NumberPath<Integer> path = entityPath.getNumber(criteria.getKey(), Integer.class);\r\n            int value = Integer.parseInt(criteria.getValue().toString());\r\n            switch (criteria.getOperation()) {\r\n                case \":\":\r\n                    return path.eq(value);\r\n                case \">\":\r\n                    return path.goe(value);\r\n                case \"<\":\r\n                    return path.loe(value);\r\n            }\r\n        } \r\n        else {\r\n            StringPath path = entityPath.getString(criteria.getKey());\r\n            if (criteria.getOperation().equalsIgnoreCase(\":\")) {\r\n                return path.containsIgnoreCase(criteria.getValue().toString());\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\npublic class SearchCriteria {\r\n    private String key;\r\n    private String operation;\r\n    private Object value;\r\n}\r\n```","```\r\npublic interface MyUserRepository extends JpaRepository<MyUser, Long>, \r\n  QuerydslPredicateExecutor<MyUser>, QuerydslBinderCustomizer<QMyUser> {\r\n    @Override\r\n    default public void customize(\r\n      QuerydslBindings bindings, QMyUser root) {\r\n        bindings.bind(String.class)\r\n          .first((SingleValueBinding<StringPath, String>) StringExpression::containsIgnoreCase);\r\n        bindings.excluding(root.email);\r\n      }\r\n}\r\n```","```\r\npublic class MyUserPredicatesBuilder {\r\n    private List<SearchCriteria> params;\r\n\r\n    public MyUserPredicatesBuilder() {\r\n        params = new ArrayList<>();\r\n    }\r\n\r\n    public MyUserPredicatesBuilder with(\r\n      String key, String operation, Object value) {\r\n\r\n        params.add(new SearchCriteria(key, operation, value));\r\n        return this;\r\n    }\r\n\r\n    public BooleanExpression build() {\r\n        if (params.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        List predicates = params.stream().map(param -> {\r\n            MyUserPredicate predicate = new MyUserPredicate(param);\r\n            return predicate.getPredicate();\r\n        }).filter(Objects::nonNull).collect(Collectors.toList());\r\n\r\n        BooleanExpression result = Expressions.asBoolean(true).isTrue();\r\n        for (BooleanExpression predicate : predicates) {\r\n            result = result.and(predicate);\r\n        }        \r\n        return result;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { PersistenceConfig.class })\r\n@Transactional\r\n@Rollback\r\npublic class JPAQuerydslIntegrationTest {\r\n\r\n    @Autowired\r\n    private MyUserRepository repo;\r\n\r\n    private MyUser userJohn;\r\n    private MyUser userTom;\r\n\r\n    @Before\r\n    public void init() {\r\n        userJohn = new MyUser();\r\n        userJohn.setFirstName(\"John\");\r\n        userJohn.setLastName(\"Doe\");\r\n        userJohn.setEmail(\"[[email protected]](/web/20220525000110/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userJohn.setAge(22);\r\n        repo.save(userJohn);\r\n\r\n        userTom = new MyUser();\r\n        userTom.setFirstName(\"Tom\");\r\n        userTom.setLastName(\"Doe\");\r\n        userTom.setEmail(\"[[email protected]](/web/20220525000110/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userTom.setAge(26);\r\n        repo.save(userTom);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenLast_whenGettingListOfUsers_thenCorrect() {\r\n    MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder().with(\"lastName\", \":\", \"Doe\");\r\n\r\n    Iterable<MyUser> results = repo.findAll(builder.build());\r\n    assertThat(results, containsInAnyOrder(userJohn, userTom));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder()\r\n      .with(\"firstName\", \":\", \"John\").with(\"lastName\", \":\", \"Doe\");\r\n\r\n    Iterable<MyUser> results = repo.findAll(builder.build());\r\n\r\n    assertThat(results, contains(userJohn));\r\n    assertThat(results, not(contains(userTom)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenLastAndAge_whenGettingListOfUsers_thenCorrect() {\r\n    MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder()\r\n      .with(\"lastName\", \":\", \"Doe\").with(\"age\", \">\", \"25\");\r\n\r\n    Iterable<MyUser> results = repo.findAll(builder.build());\r\n\r\n    assertThat(results, contains(userTom));\r\n    assertThat(results, not(contains(userJohn)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenWrongFirstAndLast_whenGettingListOfUsers_thenCorrect() {\r\n    MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder()\r\n      .with(\"firstName\", \":\", \"Adam\").with(\"lastName\", \":\", \"Fox\");\r\n\r\n    Iterable<MyUser> results = repo.findAll(builder.build());\r\n    assertThat(results, emptyIterable());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPartialFirst_whenGettingListOfUsers_thenCorrect() {\r\n    MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder().with(\"firstName\", \":\", \"jo\");\r\n\r\n    Iterable<MyUser> results = repo.findAll(builder.build());\r\n\r\n    assertThat(results, contains(userJohn));\r\n    assertThat(results, not(contains(userTom)));\r\n}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private MyUserRepository myUserRepository;\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/myusers\")\r\n    @ResponseBody\r\n    public Iterable<MyUser> search(@RequestParam(value = \"search\") String search) {\r\n        MyUserPredicatesBuilder builder = new MyUserPredicatesBuilder();\r\n\r\n        if (search != null) {\r\n            Pattern pattern = Pattern.compile(\"(\\w+?)(:|<|>)(\\w+?),\");\r\n            Matcher matcher = pattern.matcher(search + \",\");\r\n            while (matcher.find()) {\r\n                builder.with(matcher.group(1), matcher.group(2), matcher.group(3));\r\n            }\r\n        }\r\n        BooleanExpression exp = builder.build();\r\n        return myUserRepository.findAll(exp);\r\n    }\r\n}\r\n```","```\r\nhttp://localhost:8080/myusers?search=lastName:doe,age>25\r\n```","```\r\n[{\r\n    \"id\":2,\r\n    \"firstName\":\"tom\",\r\n    \"lastName\":\"doe\",\r\n    \"email\":\"[[email protected]](/web/20220525000110/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\":26\r\n}]\r\n```"]