["```\r\nSet<String> linkedHashSet = new LinkedHashSet<>();\r\nassertTrue(linkedHashSet.isEmpty());\r\n```","```\r\nLinkedHashSet<String> linkedHashSet = new LinkedHashSet<>(20);\r\n```","```\r\n@Test\r\n void whenCreatingLinkedHashSetWithExistingCollection_shouldContainAllElementOfCollection(){\r\n      Collection<String> data = Arrays.asList(\"first\", \"second\", \"third\", \"fourth\", \"fifth\");\r\n      LinkedHashSet<String> linkedHashSet = new LinkedHashSet<>(data);\r\n\r\n      assertFalse(linkedHashSet.isEmpty());\r\n      assertEquals(data.size(), linkedHashSet.size());\r\n      assertTrue(linkedHashSet.containsAll(data) && data.containsAll(linkedHashSet));\r\n }\r\n```","```\r\nLinkedHashSet<String> linkedHashSet = new LinkedHashSet<>(20, 3);\r\n```","```\r\n@Test\r\nvoid whenAddingElement_shouldAddElement(){\r\n    Set<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    assertTrue(linkedHashSet.add(0));\r\n    assertFalse(linkedHashSet.add(0));\r\n    assertTrue(linkedHashSet.contains(0));\r\n\r\n}\r\n```","```\r\n@Test\r\nvoid whenAddingCollection_shouldAddAllContentOfCollection(){\r\n    Collection<Integer> data = Arrays.asList(1,2,3);\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n\r\n    assertTrue(linkedHashSet.addAll(data));\r\n    assertTrue(data.containsAll(linkedHashSet) && linkedHashSet.containsAll(data));\r\n }\r\n```","```\r\n@Test\r\nvoid whenAddingCollectionWithDuplicateElements_shouldMaintainUniqueValuesInSet(){\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    linkedHashSet.add(2);\r\n    Collection<Integer> data = Arrays.asList(1, 1, 2, 3);\r\n\r\n    assertTrue(linkedHashSet.addAll(data));\r\n    assertEquals(3, linkedHashSet.size());\r\n    assertTrue(data.containsAll(linkedHashSet) && linkedHashSet.containsAll(data));\r\n}\r\n```","```\r\n@Test\r\nvoid whenIteratingWithIterator_assertThatElementIsPresent(){\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    linkedHashSet.add(0);\r\n    linkedHashSet.add(1);\r\n    linkedHashSet.add(2);\r\n\r\n    Iterator<Integer> iterator = linkedHashSet.iterator();\r\n    for (int i = 0; i < linkedHashSet.size(); i++) {\r\n        int nextData = iterator.next();\r\n        assertEquals(i, nextData);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid whenIteratingWithSpliterator_assertThatElementIsPresent(){\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    linkedHashSet.add(0);\r\n    linkedHashSet.add(1);\r\n    linkedHashSet.add(2);\r\n\r\n    Spliterator<Integer> spliterator = linkedHashSet.spliterator();\r\n    AtomicInteger counter = new AtomicInteger();\r\n    spliterator.forEachRemaining(data -> {\r\n       assertEquals(counter.get(), (int)data);\r\n       counter.getAndIncrement();\r\n    });\r\n}\r\n```","```\r\n@Test\r\nvoid whenRemovingAnElement_shouldRemoveElement(){\r\n    Collection<String> data = Arrays.asList(\"first\", \"second\", \"third\", \"fourth\", \"fifth\");\r\n    LinkedHashSet<String> linkedHashSet = new LinkedHashSet<>(data);\r\n\r\n    assertTrue(linkedHashSet.remove(\"second\"));\r\n    assertFalse(linkedHashSet.contains(\"second\"));\r\n}\r\n```","```\r\n@Test\r\nvoid whenRemovingAnElementGreaterThanTwo_shouldRemoveElement(){\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    linkedHashSet.add(0);\r\n    linkedHashSet.add(1);\r\n    linkedHashSet.add(2);\r\n    linkedHashSet.add(3);\r\n    linkedHashSet.add(4);\r\n\r\n    linkedHashSet.removeIf(data -> data > 2);\r\n    assertFalse(linkedHashSet.contains(3));\r\n    assertFalse(linkedHashSet.contains(4));\r\n}\r\n```","```\r\n@Test\r\nvoid whenRemovingAnElementWithIterator_shouldRemoveElement(){\r\n    LinkedHashSet<Integer> linkedHashSet = new LinkedHashSet<>();\r\n    linkedHashSet.add(0);\r\n    linkedHashSet.add(1);\r\n    linkedHashSet.add(2);\r\n\r\n    Iterator<Integer> iterator = linkedHashSet.iterator();\r\n    int elementToRemove = 1;\r\n    assertTrue(linkedHashSet.contains(elementToRemove));\r\n    while(iterator.hasNext()){\r\n        if(elementToRemove == iterator.next()){\r\n           iterator.remove();\r\n       }\r\n    }\r\n    assertFalse(linkedHashSet.contains(elementToRemove));\r\n}\r\n```"]