["```\r\n<dependency>\r\n    <groupId>org.springdoc</groupId>\r\n    <artifactId>springdoc-openapi-ui</artifactId>\r\n    <version>1.6.4</version>\r\n</dependency>\r\n```","```\r\nhttp://localhost:8080/v3/api-docs/\r\n```","```\r\nspringdoc.api-docs.path=/api-docs\r\n```","```\r\nhttp://localhost:8080/api-docs/\r\n```","```\r\nhttp://localhost:8080/api-docs.yaml\r\n```","```\r\nhttp://localhost:8080/swagger-ui.html\r\n```","```\r\nspringdoc.swagger-ui.path=/swagger-ui-custom.html\r\n```","```\r\nspringdoc.swagger-ui.operationsSorter=method\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api/book\")\r\npublic class BookController {\r\n\r\n    @Autowired\r\n    private BookRepository repository;\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Book findById(@PathVariable long id) {\r\n        return repository.findById(id)\r\n            .orElseThrow(() -> new BookNotFoundException());\r\n    }\r\n\r\n    @GetMapping(\"/\")\r\n    public Collection<Book> findBooks() {\r\n        return repository.getBooks();\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public Book updateBook(\r\n      @PathVariable(\"id\") final String id, @RequestBody final Book book) {\r\n        return book;\r\n    }\r\n} \r\n```","```\r\nhttp://localhost:8080/swagger-ui-custom.html\r\n```","```\r\n<dependency>\r\n    <groupId>org.springdoc</groupId>\r\n    <artifactId>springdoc-openapi-webflux-ui</artifactId>\r\n    <version>1.6.4</version>\r\n</dependency>\r\n```","```\r\nhttp://localhost:8080/swagger-ui.html\r\n```","```\r\n@GetMapping(\"/filter\")\r\npublic Page<Book> filterBooks(@ParameterObject Pageable pageable) {\r\n     return repository.getBooks(pageable);\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-maven-plugin</artifactId>\r\n    <version>2.3.3.RELEASE</version>\r\n    <executions>\r\n        <execution>\r\n            <id>pre-integration-test</id>\r\n            <goals>\r\n                <goal>start</goal>\r\n            </goals>\r\n        </execution>\r\n        <execution>\r\n            <id>post-integration-test</id>\r\n            <goals>\r\n                <goal>stop</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n<plugin>\r\n    <groupId>org.springdoc</groupId>\r\n    <artifactId>springdoc-openapi-maven-plugin</artifactId>\r\n    <version>0.2</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>integration-test</phase>\r\n            <goals>\r\n                <goal>generate</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<plugin>\r\n    <executions>\r\n        .........\r\n    </executions>\r\n    <configuration> \r\n        <apiDocsUrl>http://localhost:8080/v3/api-docs</apiDocsUrl> \r\n        <outputFileName>openapi.json</outputFileName> \r\n        <outputDir>${project.build.directory}</outputDir> \r\n    </configuration>\r\n</plugin> \r\n```","```\r\npublic class Book {\r\n\r\n    private long id;\r\n\r\n    @NotBlank\r\n    @Size(min = 0, max = 20)\r\n    private String title;\r\n\r\n    @NotBlank\r\n    @Size(min = 0, max = 30)\r\n    private String author;\r\n\r\n}\r\n```","```\r\n@RestControllerAdvice\r\npublic class GlobalControllerExceptionHandler {\r\n\r\n    @ExceptionHandler(ConversionFailedException.class)\r\n    @ResponseStatus(HttpStatus.BAD_REQUEST)\r\n    public ResponseEntity<String> handleConnversion(RuntimeException ex) {\r\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    @ExceptionHandler(BookNotFoundException.class)\r\n    @ResponseStatus(HttpStatus.NOT_FOUND)\r\n    public ResponseEntity<String> handleBookNotFound(RuntimeException ex) {\r\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);\r\n    }\r\n}\r\n```","```\r\n@Operation(summary = \"Get a book by its id\")\r\n@ApiResponses(value = { \r\n  @ApiResponse(responseCode = \"200\", description = \"Found the book\", \r\n    content = { @Content(mediaType = \"application/json\", \r\n      schema = @Schema(implementation = Book.class)) }),\r\n  @ApiResponse(responseCode = \"400\", description = \"Invalid id supplied\", \r\n    content = @Content), \r\n  @ApiResponse(responseCode = \"404\", description = \"Book not found\", \r\n    content = @Content) })\r\n@GetMapping(\"/{id}\")\r\npublic Book findById(@Parameter(description = \"id of book to be searched\") \r\n  @PathVariable long id) {\r\n    return repository.findById(id).orElseThrow(() -> new BookNotFoundException());\r\n}\r\n```","```\r\n@Entity\r\ndata class Foo(\r\n    @Id\r\n    val id: Long = 0,\r\n\r\n    @NotBlank\r\n    @Size(min = 0, max = 50)\r\n    val name: String = \"\"\r\n)\r\n\r\n@RestController\r\n@RequestMapping(\"/\")\r\nclass FooController() {\r\n    val fooList: List = listOf(Foo(1, \"one\"), Foo(2, \"two\"))\r\n\r\n    @Operation(summary = \"Get all foos\")\r\n    @ApiResponses(value = [\r\n\tApiResponse(responseCode = \"200\", description = \"Found Foos\", content = [\r\n            (Content(mediaType = \"application/json\", array = (\r\n                ArraySchema(schema = Schema(implementation = Foo::class)))))]),\r\n\tApiResponse(responseCode = \"400\", description = \"Bad request\", content = [Content()]),\r\n\tApiResponse(responseCode = \"404\", description = \"Did not find any Foos\", content = [Content()])]\r\n    )\r\n    @GetMapping(\"/foo\")\r\n    fun getAllFoos(): List = fooList\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springdoc</groupId>\r\n    <artifactId>springdoc-openapi-kotlin</artifactId\r\n    <version>1.6.4</version>\r\n</dependency>\r\n```"]