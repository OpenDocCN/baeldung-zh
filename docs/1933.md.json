["```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable\r\n  .filter(i -> i % 2 != 0);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 3, 5, 7, 9);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.take(3);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 3);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.just(1, 2, 3, 4, 3, 2, 1);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable\r\n  .takeWhile(i -> i < 4);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 3);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 2, 3, 4, 5, 7, 6);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable\r\n  .takeFirst(x -> x > 5);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(7);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.first();\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(1);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.empty();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.firstOrDefault(-1);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(-1);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.takeLast(3);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(8, 9, 10);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable\r\n  .last(i -> i % 2 != 0);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(9);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = \r\n  sourceObservable.lastOrDefault(-1, i -> i > 10);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(-1);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 2, 3, 5, 7, 11);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.elementAt(4);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(7);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 2, 3, 5, 7, 11);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable\r\n = sourceObservable.elementAtOrDefault(7, -1);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(-1);\r\n```","```\r\nObservable sourceObservable = Observable.just(1, \"two\", 3, \"five\", 7, 11);\r\nTestSubscriber subscriber = new TestSubscriber();\r\n\r\nObservable filteredObservable = sourceObservable.ofType(String.class);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(\"two\", \"five\");\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.skip(4);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(5, 6, 7, 8, 9, 10);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 2, 3, 4, 5, 4, 3, 2, 1);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable\r\n  .skipWhile(i -> i < 4);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(4, 5, 4, 3, 2, 1);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = sourceObservable.skipLast(5);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 3, 4, 5);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 1, 2, 2, 1, 3, 3, 1);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> distinctObservable = sourceObservable.distinct();\r\n\r\ndistinctObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 3);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable\r\n  .just(1, 1, 2, 2, 1, 3, 3, 1);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> distinctObservable = sourceObservable.distinctUntilChanged();\r\n\r\ndistinctObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 1, 3, 1);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 10);\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> ignoredObservable = sourceObservable.ignoreElements();\r\n\r\nignoredObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertNoValues();\r\n```","```\r\nTestScheduler testScheduler = new TestScheduler();\r\n\r\nObservable<Integer> timedObservable = Observable\r\n  .just(1, 2, 3, 4, 5, 6)\r\n  .zipWith(Observable.interval(\r\n    0, 1, TimeUnit.SECONDS, testScheduler), (item, time) -> item);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> sampledObservable = timedObservable\r\n  .sample(2500L, TimeUnit.MILLISECONDS, testScheduler);\r\n\r\nsampledObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertValues(3, 5, 6);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = timedObservable\r\n  .throttleFirst(4100L, TimeUnit.SECONDS, testScheduler);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertValues(1, 6);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = timedObservable\r\n  .debounce(2000L, TimeUnit.MILLISECONDS, testScheduler);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertValue(6);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = timedObservable\r\n  .timeout(500L, TimeUnit.MILLISECONDS, testScheduler);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertError(TimeoutException.class); subscriber.assertValues(1);\r\n```","```\r\nObservable<Integer> delayedObservable = Observable.just(1)\r\n  .delay(3, TimeUnit.SECONDS, testScheduler);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = timedObservable\r\n  .skipUntil(delayedObservable);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertValues(4, 5, 6);\r\n```","```\r\nTestSubscriber<Integer> subscriber = new TestSubscriber();\r\n\r\nObservable<Integer> filteredObservable = timedObservable\r\n  .takeUntil(delayedObservable);\r\n\r\nfilteredObservable.subscribe(subscriber);\r\n\r\ntestScheduler.advanceTimeBy(7, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertValues(1, 2, 3);\r\n```"]