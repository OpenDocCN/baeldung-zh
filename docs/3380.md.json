["```\r\nHttpClient client = HttpClient.create()\r\n  .responseTimeout(Duration.ofSeconds(1)); \r\n```","```\r\nWebClient webClient = WebClient.builder()\r\n  .clientConnector(new ReactorClientHttpConnector(httpClient))\r\n  .build();\r\n```","```\r\nHttpClient client = HttpClient.create()\r\nÂ  .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\r\n\r\n// create WebClient...\r\n```","```\r\nHttpClient client = HttpClient.create()\r\n  .option(ChannelOption.SO_KEEPALIVE, true)\r\n  .option(EpollChannelOption.TCP_KEEPIDLE, 300)\r\n  .option(EpollChannelOption.TCP_KEEPINTVL, 60)\r\n  .option(EpollChannelOption.TCP_KEEPCNT, 8);\r\n\r\n// create WebClient...\r\n```","```\r\nHttpClient client = HttpClient.create()\r\n  .doOnConnected(conn -> conn\r\n    .addHandler(new ReadTimeoutHandler(10, TimeUnit.SECONDS))\r\n    .addHandler(new WriteTimeoutHandler(10)));\r\n\r\n// create WebClient...\r\n```","```\r\nHttpClient.create()\r\n  .secure(spec -> spec.sslContext(SslContextBuilder.forClient())\r\n    .defaultConfiguration(SslProvider.DefaultConfigurationType.TCP)\r\n    .handshakeTimeout(Duration.ofSeconds(30))\r\n    .closeNotifyFlushTimeout(Duration.ofSeconds(10))\r\n    .closeNotifyReadTimeout(Duration.ofSeconds(10)));\r\n\r\n// create WebClient...\r\n```","```\r\nHttpClient.create()\r\n  .proxy(spec -> spec.type(ProxyProvider.Proxy.HTTP)\r\n    .host(\"proxy\")\r\n    .port(8080)\r\n    .connectTimeoutMillis(30000));\r\n\r\n// create WebClient...\r\n```","```\r\nwebClient.get()\r\n  .uri(\"https://baeldung.com/path\")\r\n  .httpRequest(httpRequest -> {\r\n    HttpClientRequest reactorRequest = httpRequest.getNativeRequest();\r\n    reactorRequest.responseTimeout(Duration.ofSeconds(2));\r\n  });\r\n```","```\r\nwebClient.get()\r\n  .uri(\"https://baeldung.com/path\")\r\n  .retrieve()\r\n  .bodyToFlux(JsonNode.class)\r\n  .timeout(Duration.ofSeconds(5));\r\n```","```\r\nwebClient.get()\r\n  .uri(\"https://baeldung.com/path\")\r\n  .retrieve()\r\n  .bodyToFlux(JsonNode.class)\r\n  .timeout(Duration.ofSeconds(5))\r\n  .onErrorMap(ReadTimeoutException.class, ex -> new HttpTimeoutException(\"ReadTimeout\"))\r\n  .onErrorReturn(SslHandshakeTimeoutException.class, new TextNode(\"SslHandshakeTimeout\"))\r\n  .doOnError(WriteTimeoutException.class, ex -> log.error(\"WriteTimeout\"))\r\n  ...\r\n```","```\r\nwebClient.get()\r\n  .uri(\"https://baeldung.com/path\")\r\n  .onStatus(HttpStatus::is4xxClientError, resp -> {\r\n    log.error(\"ClientError {}\", resp.statusCode());\r\n    return Mono.error(new RuntimeException(\"ClientError\"));\r\n  })\r\n  .retrieve()\r\n  .bodyToFlux(JsonNode.class)\r\n  ...\r\n```"]