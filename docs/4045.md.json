["```\r\n@GetMapping(\"/user/resendRegistrationToken\")\r\npublic GenericResponse resendRegistrationToken(\r\n  HttpServletRequest request, @RequestParam(\"token\") String existingToken) {\r\n    VerificationToken newToken = userService.generateNewVerificationToken(existingToken);\r\n\r\n    User user = userService.getUser(newToken.getToken());\r\n    String appUrl = \r\n      \"http://\" + request.getServerName() + \r\n      \":\" + request.getServerPort() + \r\n      request.getContextPath();\r\n    SimpleMailMessage email = \r\n      constructResendVerificationTokenEmail(appUrl, request.getLocale(), newToken, user);\r\n    mailSender.send(email);\r\n\r\n    return new GenericResponse(\r\n      messages.getMessage(\"message.resendToken\", null, request.getLocale()));\r\n}\r\n```","```\r\nprivate SimpleMailMessage constructResendVerificationTokenEmail\r\n  (String contextPath, Locale locale, VerificationToken newToken, User user) {\r\n    String confirmationUrl = \r\n      contextPath + \"/regitrationConfirm.html?token=\" + newToken.getToken();\r\n    String message = messages.getMessage(\"message.resendToken\", null, locale);\r\n    SimpleMailMessage email = new SimpleMailMessage();\r\n    email.setSubject(\"Resend Registration Token\");\r\n    email.setText(message + \" rn\" + confirmationUrl);\r\n    email.setFrom(env.getProperty(\"support.email\"));\r\n    email.setTo(user.getEmail());\r\n    return email;\r\n}\r\n```","```\r\n@GetMapping(\"/registrationConfirm\")\r\npublic String confirmRegistration(\r\n  Locale locale, Model model, @RequestParam(\"token\") String token) {\r\n    VerificationToken verificationToken = userService.getVerificationToken(token);\r\n    if (verificationToken == null) {\r\n        String message = messages.getMessage(\"auth.message.invalidToken\", null, locale);\r\n        model.addAttribute(\"message\", message);\r\n        return \"redirect:/badUser.html?lang=\" + locale.getLanguage();\r\n    }\r\n\r\n    User user = verificationToken.getUser();\r\n    Calendar cal = Calendar.getInstance();\r\n    if ((verificationToken.getExpiryDate().getTime() - cal.getTime().getTime()) <= 0) {\r\n        model.addAttribute(\"message\", messages.getMessage(\"auth.message.expired\", null, locale));\r\n        model.addAttribute(\"expired\", true);\r\n        model.addAttribute(\"token\", token);\r\n        return \"redirect:/badUser.html?lang=\" + locale.getLanguage();\r\n    }\r\n\r\n    user.setEnabled(true);\r\n    userService.saveRegisteredUser(user);\r\n    model.addAttribute(\"message\", messages.getMessage(\"message.accountVerified\", null, locale));\r\n    return \"redirect:/login.html?lang=\" + locale.getLanguage();\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @ExceptionHandler({ UserNotFoundException.class })\r\n    public ResponseEntity<Object> handleUserNotFound(RuntimeException ex, WebRequest request) {\r\n        logger.error(\"404 Status Code\", ex);\r\n        GenericResponse bodyOfResponse = new GenericResponse(\r\n          messages.getMessage(\"message.userNotFound\", null, request.getLocale()), \"UserNotFound\");\r\n\r\n        return handleExceptionInternal(\r\n          ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_FOUND, request);\r\n    }\r\n\r\n    @ExceptionHandler({ MailAuthenticationException.class })\r\n    public ResponseEntity<Object> handleMail(RuntimeException ex, WebRequest request) {\r\n        logger.error(\"500 Status Code\", ex);\r\n        GenericResponse bodyOfResponse = new GenericResponse(\r\n          messages.getMessage(\r\n            \"message.email.config.error\", null, request.getLocale()), \"MailError\");\r\n\r\n        return handleExceptionInternal(\r\n          ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_FOUND, request);\r\n    }\r\n\r\n    @ExceptionHandler({ Exception.class })\r\n    public ResponseEntity<Object> handleInternal(RuntimeException ex, WebRequest request) {\r\n        logger.error(\"500 Status Code\", ex);\r\n        GenericResponse bodyOfResponse = new GenericResponse(\r\n          messages.getMessage(\r\n            \"message.error\", null, request.getLocale()), \"InternalError\");\r\n\r\n        return handleExceptionInternal(\r\n          ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_FOUND, request);\r\n    }\r\n}\r\n```","```\r\npublic class GenericResponse {\r\n    private String message;\r\n    private String error;\r\n\r\n    public GenericResponse(String message) {\r\n        super();\r\n        this.message = message;\r\n    }\r\n\r\n    public GenericResponse(String message, String error) {\r\n        super();\r\n        this.message = message;\r\n        this.error = error;\r\n    }\r\n}\r\n```","```\r\n<html>\r\n<head>\r\n<title th:text=\"#{label.badUser.title}\">bad user</title>\r\n</head>\r\n<body>\r\n<h1 th:text=\"${param.message[0]}\">error</h1>\r\n<br>\r\n<a th:href=\"@{/user/registration}\" th:text=\"#{label.form.loginSignUp}\">\r\n  signup</a>\r\n\r\n<div th:if=\"${param.expired[0]}\">\r\n<h1 th:text=\"#{label.form.resendRegistrationToken}\">resend</h1>\r\n<button onclick=\"resendToken()\" \r\n  th:text=\"#{label.form.resendRegistrationToken}\">resend</button>\r\n\r\n<script src=\"jquery.min.js\"></script>\r\n<script type=\"text/javascript\">\r\n\r\nvar serverContext = [[@{/}]];\r\n\r\nfunction resendToken(){\r\n    $.get(serverContext + \"user/resendRegistrationToken?token=\" + token, \r\n      function(data){\r\n            window.location.href = \r\n              serverContext +\"login.html?message=\" + data.message;\r\n    })\r\n    .fail(function(data) {\r\n        if(data.responseJSON.error.indexOf(\"MailError\") > -1) {\r\n            window.location.href = serverContext + \"emailError.html\";\r\n        }\r\n        else {\r\n            window.location.href = \r\n              serverContext + \"login.html?message=\" + data.responseJSON.message;\r\n        }\r\n    });\r\n}\r\n</script>\r\n</div>\r\n</body>\r\n</html>\r\n```"]