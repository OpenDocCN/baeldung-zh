["```\r\npublic class Car {\r\n    private String state = \"stop\";\r\n\r\n    public void drive(int speed) {\r\n        Assert.isTrue(speed > 0, \"speed must be positive\");\r\n        this.state = \"drive\";\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nif (!(speed > 0)) {\r\n    throw new IllegalArgumentException(\"speed must be positive\");\r\n}\r\n```","```\r\nException in thread \"main\" java.lang.IllegalArgumentException: speed must be positive\r\n```","```\r\npublic void fuel() {\r\n    Assert.state(this.state.equals(\"stop\"), \"car must be stopped\");\r\n    // ...\r\n}\r\n```","```\r\npublic void сhangeOil(String oil) {\r\n    Assert.notNull(oil, \"oil mustn't be null\");\r\n    // ...\r\n}\r\n```","```\r\npublic void replaceBattery(CarBattery carBattery) {\r\n    Assert.isNull(\r\n      carBattery.getCharge(), \r\n      \"to replace battery the charge must be null\");\r\n    // ...\r\n}\r\n```","```\r\npublic void сhangeEngine(Engine engine) {\r\n    Assert.isInstanceOf(ToyotaEngine.class, engine);\r\n    // ...\r\n}\r\n```","```\r\npublic void repairEngine(Engine engine) {\r\n    Assert.isAssignable(Engine.class, ToyotaEngine.class);\r\n    // ...\r\n}\r\n```","```\r\npublic void startWithHasLength(String key) {\r\n    Assert.hasLength(key, \"key must not be null and must not the empty\");\r\n    // ...\r\n}\r\n```","```\r\npublic void startWithHasText(String key) {\r\n    Assert.hasText(\r\n      key, \r\n      \"key must not be null and must contain at least one non-whitespace  character\");\r\n    // ...\r\n}\r\n```","```\r\npublic void startWithNotContain(String key) {\r\n    Assert.doesNotContain(key, \"123\", \"key mustn't contain 123\");\r\n    // ...\r\n}\r\n```","```\r\npublic void repair(Collection<String> repairParts) {\r\n    Assert.notEmpty(\r\n      repairParts, \r\n      \"collection of repairParts mustn't be empty\");\r\n    // ...\r\n}\r\n```","```\r\npublic void repair(Map<String, String> repairParts) {\r\n    Assert.notEmpty(\r\n      repairParts, \r\n      \"map of repairParts mustn't be empty\");\r\n    // ...\r\n}\r\n```","```\r\npublic void repair(String[] repairParts) {\r\n    Assert.notEmpty(\r\n      repairParts, \r\n      \"array of repairParts mustn't be empty\");\r\n    // ...\r\n}\r\n```","```\r\npublic void repairWithNoNull(String[] repairParts) {\r\n    Assert.noNullElements(\r\n      repairParts, \r\n      \"array of repairParts mustn't contain null elements\");\r\n    // ...\r\n}\r\n```"]