["```\r\nboolean deleteDirectory(File directoryToBeDeleted) {\r\n    File[] allContents = directoryToBeDeleted.listFiles();\r\n    if (allContents != null) {\r\n        for (File file : allContents) {\r\n            deleteDirectory(file);\r\n        }\r\n    }\r\n    return directoryToBeDeleted.delete();\r\n}\r\n```","```\r\n@Test\r\npublic void givenDirectory_whenDeletedWithRecursion_thenIsGone() \r\n  throws IOException {\r\n\r\n    Path pathToBeDeleted = TEMP_DIRECTORY.resolve(DIRECTORY_NAME);\r\n\r\n    boolean result = deleteDirectory(pathToBeDeleted.toFile());\r\n\r\n    assertTrue(result);\r\n    assertFalse(\r\n      \"Directory still exists\", \r\n      Files.exists(pathToBeDeleted));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\nFileUtils.deleteDirectory(file);\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>4.3.10.RELEASE</version>\r\n</dependency>\r\n```","```\r\nboolean result = FileSystemUtils.deleteRecursively(file);\r\n```","```\r\npublic void whenDeletedWithNIO2WalkFileTree_thenIsGone() \r\n  throws IOException {\r\n\r\n    Path pathToBeDeleted = TEMP_DIRECTORY.resolve(DIRECTORY_NAME);\r\n\r\n    Files.walkFileTree(pathToBeDeleted, \r\n      new SimpleFileVisitor<Path>() {\r\n        @Override\r\n        public FileVisitResult postVisitDirectory(\r\n          Path dir, IOException exc) throws IOException {\r\n            Files.delete(dir);\r\n            return FileVisitResult.CONTINUE;\r\n        }\r\n\r\n        @Override\r\n        public FileVisitResult visitFile(\r\n          Path file, BasicFileAttributes attrs) \r\n          throws IOException {\r\n            Files.delete(file);\r\n            return FileVisitResult.CONTINUE;\r\n        }\r\n    });\r\n\r\n    assertFalse(\"Directory still exists\", \r\n      Files.exists(pathToBeDeleted));\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletedWithFilesWalk_thenIsGone() \r\n  throws IOException {\r\n    Path pathToBeDeleted = TEMP_DIRECTORY.resolve(DIRECTORY_NAME);\r\n\r\n    Files.walk(pathToBeDeleted)\r\n      .sorted(Comparator.reverseOrder())\r\n      .map(Path::toFile)\r\n      .forEach(File::delete);\r\n\r\n    assertFalse(\"Directory still exists\", \r\n      Files.exists(pathToBeDeleted));\r\n}\r\n```"]