["```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecSecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeRequests()\r\n            // ... endpoints\r\n            .formLogin()\r\n                .loginPage(\"/login.html\")\r\n                .loginProcessingUrl(\"/login\")\r\n                .defaultSuccessUrl(\"/homepage.html\", true)\r\n            // ... other configuration   \r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    private Map<String, User> roles = new HashMap<>();\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        roles.put(\"admin2\", new User(\"admin\", \"{noop}admin1\", getAuthority(\"ROLE_ADMIN\")));\r\n        roles.put(\"user2\", new User(\"user\", \"{noop}user1\", getAuthority(\"ROLE_USER\")));\r\n    }\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) {\r\n        return roles.get(username);\r\n    }\r\n\r\n    private List<GrantedAuthority> getAuthority(String role) {\r\n        return Collections.singletonList(new SimpleGrantedAuthority(role));\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic AuthenticationSuccessHandler myAuthenticationSuccessHandler(){\r\n    return new MySimpleUrlAuthenticationSuccessHandler();\r\n} \r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n        .authorizeRequests()\r\n        // endpoints\r\n        .formLogin()\r\n            .loginPage(\"/login.html\")\r\n            .loginProcessingUrl(\"/login\")\r\n            .successHandler(myAuthenticationSuccessHandler())\r\n        // other configuration      \r\n    return http.build();\r\n} \r\n```","```\r\n<http use-expressions=\"true\" >\r\n    <!-- other configuration -->\r\n    <form-login login-page='/login.html' \r\n      authentication-failure-url=\"/login.html?error=true\"\r\n      authentication-success-handler-ref=\"myAuthenticationSuccessHandler\"/>\r\n    <logout/>\r\n</http>\r\n\r\n<beans:bean id=\"myAuthenticationSuccessHandler\"\r\n  class=\"com.baeldung.security.MySimpleUrlAuthenticationSuccessHandler\" />\r\n\r\n<authentication-manager>\r\n    <authentication-provider>\r\n        <user-service>\r\n            <user name=\"user1\" password=\"{noop}user1Pass\" authorities=\"ROLE_USER\" />\r\n            <user name=\"admin1\" password=\"{noop}admin1Pass\" authorities=\"ROLE_ADMIN\" />\r\n        </user-service>\r\n    </authentication-provider>\r\n</authentication-manager>\r\n```","```\r\npublic class MySimpleUrlAuthenticationSuccessHandler\r\n  implements AuthenticationSuccessHandler {\r\n\r\n    protected Log logger = LogFactory.getLog(this.getClass());\r\n\r\n    private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy();\r\n\r\n    @Override\r\n    public void onAuthenticationSuccess(HttpServletRequest request, \r\n      HttpServletResponse response, Authentication authentication)\r\n      throws IOException {\r\n\r\n        handle(request, response, authentication);\r\n        clearAuthenticationAttributes(request);\r\n    } \r\n```","```\r\nprotected void handle(\r\n        HttpServletRequest request,\r\n        HttpServletResponse response, \r\n        Authentication authentication\r\n) throws IOException {\r\n\r\n    String targetUrl = determineTargetUrl(authentication);\r\n\r\n    if (response.isCommitted()) {\r\n        logger.debug(\r\n                \"Response has already been committed. Unable to redirect to \"\r\n                        + targetUrl);\r\n        return;\r\n    }\r\n\r\n    redirectStrategy.sendRedirect(request, response, targetUrl);\r\n} \r\n```","```\r\nprotected String determineTargetUrl(final Authentication authentication) {\r\n\r\n    Map<String, String> roleTargetUrlMap = new HashMap<>();\r\n    roleTargetUrlMap.put(\"ROLE_USER\", \"/homepage.html\");\r\n    roleTargetUrlMap.put(\"ROLE_ADMIN\", \"/console.html\");\r\n\r\n    final Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();\r\n    for (final GrantedAuthority grantedAuthority : authorities) {\r\n        String authorityName = grantedAuthority.getAuthority();\r\n        if(roleTargetUrlMap.containsKey(authorityName)) {\r\n            return roleTargetUrlMap.get(authorityName);\r\n        }\r\n    }\r\n\r\n    throw new IllegalStateException();\r\n} \r\n```","```\r\nprotected void clearAuthenticationAttributes(HttpServletRequest request) {\r\n    HttpSession session = request.getSession(false);\r\n    if (session == null) {\r\n        return;\r\n    }\r\n    session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);\r\n}\r\n```"]