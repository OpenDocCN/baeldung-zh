["```\r\nmvn archetype:generate -Dfilter=io.jenkins.archetypes:plugin\r\n```","```\r\n[INFO] Generating project in Interactive mode\r\n[INFO] No archetype defined. Using maven-archetype-quickstart\r\n  (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)\r\nChoose archetype:\r\n1: remote -> io.jenkins.archetypes:empty-plugin (Skeleton of\r\n  a Jenkins plugin with a POM and an empty source tree.)\r\n2: remote -> io.jenkins.archetypes:global-configuration-plugin\r\n  (Skeleton of a Jenkins plugin with a POM and an example piece\r\n  of global configuration.)\r\n3: remote -> io.jenkins.archetypes:hello-world-plugin\r\n  (Skeleton of a Jenkins plugin with a POM and an example build step.)\r\n```","```\r\nclass MyPlugin extends BuildWrapper {\r\n    @Extension\r\n    public static class DescriptorImpl \r\n      extends BuildWrapperDescriptor {\r\n\r\n        @Override\r\n        public boolean isApplicable(AbstractProject<?, ?> item) {\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public String getDisplayName() {\r\n            return \"name to show in UI\";\r\n        }\r\n    }\r\n}\r\n```","```\r\n@DataBoundConstructor\r\npublic Maven(\r\n  String targets,\r\n  String name,\r\n  String pom,\r\n  String properties,\r\n  String jvmOptions,\r\n  boolean usePrivateRepository,\r\n  SettingsProvider settings,\r\n  GlobalSettingsProvider globalSettings,\r\n  boolean injectBuildVariables) { ... }\r\n```","```\r\nclass ProjectStatsBuildWrapper extends BuildWrapper {\r\n\r\n    @DataBoundConstructor\r\n    public ProjectStatsBuildWrapper() {}\r\n\r\n    @Override\r\n    public Environment setUp(\r\n      AbstractBuild build,\r\n      Launcher launcher,\r\n      BuildListener listener) {}\r\n\r\n    @Extension\r\n    public static class DescriptorImpl extends BuildWrapperDescriptor {\r\n\r\n        @Override\r\n        public boolean isApplicable(AbstractProject<?, ?> item) {\r\n            return true;\r\n        }\r\n\r\n        @Nonnull\r\n        @Override\r\n        public String getDisplayName() {\r\n            return \"Construct project stats during build\";\r\n        }\r\n\r\n    }\r\n}\r\n```","```\r\nclass ProjectStats {\r\n\r\n    private int classesNumber;\r\n    private int linesNumber;\r\n\r\n    // standard constructors/getters\r\n}\r\n```","```\r\nprivate ProjectStats buildStats(FilePath root)\r\n  throws IOException, InterruptedException {\r\n\r\n    int classesNumber = 0;\r\n    int linesNumber = 0;\r\n    Stack<FilePath> toProcess = new Stack<>();\r\n    toProcess.push(root);\r\n    while (!toProcess.isEmpty()) {\r\n        FilePath path = toProcess.pop();\r\n        if (path.isDirectory()) {\r\n            toProcess.addAll(path.list());\r\n        } else if (path.getName().endsWith(\".java\")) {\r\n            classesNumber++;\r\n            linesNumber += countLines(path);\r\n        }\r\n    }\r\n    return new ProjectStats(classesNumber, linesNumber);\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>$PROJECT_NAME$</title>\r\n</head>\r\n<body>\r\nProject $PROJECT_NAME$:\r\n<table border=\"1\">\r\n    <tr>\r\n        <th>Classes number</th>\r\n        <th>Lines number</th>\r\n    </tr>\r\n    <tr>\r\n        <td>$CLASSES_NUMBER$</td>\r\n        <td>$LINES_NUMBER$</td>\r\n    </tr>\r\n</table>\r\n</body>\r\n</html>\r\n```","```\r\npublic class ProjectStatsBuildWrapper extends BuildWrapper {\r\n    @Override\r\n    public Environment setUp(\r\n      AbstractBuild build,\r\n      Launcher launcher,\r\n      BuildListener listener) {\r\n        return new Environment() {\r\n\r\n            @Override\r\n            public boolean tearDown(\r\n              AbstractBuild build, BuildListener listener)\r\n              throws IOException, InterruptedException {\r\n\r\n                ProjectStats stats = buildStats(build.getWorkspace());\r\n                String report = generateReport(\r\n                  build.getProject().getDisplayName(),\r\n                  stats);\r\n                File artifactsDir = build.getArtifactsDir();\r\n                String path = artifactsDir.getCanonicalPath() + REPORT_TEMPLATE_PATH;\r\n                File reportFile = new File(\"path\");\r\n                // write report's text to the report's file\r\n            }\r\n        };\r\n    }\r\n}\r\n```","```\r\nmvn install\r\n```","```\r\ncp ./target/jenkins-hello-world.hpi ~/.jenkins/plugins/\r\n```"]