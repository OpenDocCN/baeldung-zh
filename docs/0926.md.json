["```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\"select * from employees\");\r\nResultSet rs = pstmt.executeQuery();\r\n```","```\r\nwhile(rs.next()) {\r\n    String name = rs.getString(\"name\");\r\n    Integer empId = rs.getInt(\"emp_id\");\r\n    Double salary = rs.getDouble(\"salary\");\r\n    String position = rs.getString(\"position\");\r\n} \r\n```","```\r\nInteger empId = rs.getInt(1);\r\nString name = rs.getString(2);\r\nString position = rs.getString(3);\r\nDouble salary = rs.getDouble(4); \r\n```","```\r\nResultSetMetaData metaData = rs.getMetaData();\r\n```","```\r\nInteger columnCount = metaData.getColumnCount();\r\n```","```\r\nfor (int columnNumber = 1; columnNumber <= columnCount; columnNumber++) {\r\n    String catalogName = metaData.getCatalogName(columnNumber);\r\n    String className = metaData.getColumnClassName(columnNumber);\r\n    String label = metaData.getColumnLabel(columnNumber);\r\n    String name = metaData.getColumnName(columnNumber);\r\n    String typeName = metaData.getColumnTypeName(columnNumber);\r\n    int type = metaData.getColumnType(columnNumber);\r\n    String tableName = metaData.getTableName(columnNumber);\r\n    String schemaName = metaData.getSchemaName(columnNumber);\r\n    boolean isAutoIncrement = metaData.isAutoIncrement(columnNumber);\r\n    boolean isCaseSensitive = metaData.isCaseSensitive(columnNumber);\r\n    boolean isCurrency = metaData.isCurrency(columnNumber);\r\n    boolean isDefiniteWritable = metaData.isDefinitelyWritable(columnNumber);\r\n    boolean isReadOnly = metaData.isReadOnly(columnNumber);\r\n    boolean isSearchable = metaData.isSearchable(columnNumber);\r\n    boolean isReadable = metaData.isReadOnly(columnNumber);\r\n    boolean isSigned = metaData.isSigned(columnNumber);\r\n    boolean isWritable = metaData.isWritable(columnNumber);\r\n    int nullable = metaData.isNullable(columnNumber);\r\n}\r\n```","```\r\nDatabaseMetaData dbmd = dbConnection.getMetaData();\r\nboolean isSupported = dbmd.supportsResultSetType(ResultSet.TYPE_SCROLL_INSENSITIVE);\r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\",\r\n  ResultSet.TYPE_SCROLL_INSENSITIVE,\r\n  ResultSet.CONCUR_UPDATABLE); \r\nResultSet rs = pstmt.executeQuery(); \r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\",\r\n  ResultSet.TYPE_SCROLL_SENSITIVE,\r\n  ResultSet.CONCUR_UPDATABLE);\r\nResultSet rs = pstmt.executeQuery();\r\n\r\nwhile (rs.next()) {\r\n    // iterate through the results from first to last\r\n}\r\nrs.beforeFirst(); // jumps back to the starting point, before the first row\r\nrs.afterLast(); // jumps to the end of resultset\r\n\r\nrs.first(); // navigates to the first row\r\nrs.last(); // goes to the last row\r\n\r\nrs.absolute(2); //jumps to 2nd row\r\n\r\nrs.relative(-1); // jumps to the previous row\r\nrs.relative(2); // jumps forward two rows\r\n\r\nwhile (rs.previous()) {\r\n    // iterates from current row to the first row in backward direction\r\n} \r\n```","```\r\nrs.last();\r\nint rowCount = rs.getRow();\r\n```","```\r\nDatabaseMetaData dbmd = dbConnection.getMetaData(); \r\nboolean isSupported = dbmd.supportsResultSetConcurrency(\r\n  ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE); \r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\",\r\n  ResultSet.TYPE_SCROLL_SENSITIVE,\r\n  ResultSet.CONCUR_UPDATABLE);\r\nResultSet rs = pstmt.executeQuery();\r\n```","```\r\nrs.updateDouble(\"salary\", 1100.0);\r\n```","```\r\nrs.updateRow(); \r\n```","```\r\nrs.updateDouble(4, 1100.0);\r\nrs.updateRow(); \r\n```","```\r\nrs.moveToInsertRow();\r\n```","```\r\nrs.updateString(\"name\", \"Venkat\"); \r\nrs.updateString(\"position\", \"DBA\"); \r\nrs.updateDouble(\"salary\", 925.0);\r\n```","```\r\nrs.insertRow();\r\n```","```\r\nrs.moveToCurrentRow();\r\n```","```\r\nrs.absolute(2);\r\nrs.deleteRow();\r\n```","```\r\nboolean isCloseCursorSupported\r\n  = dbmd.supportsResultSetHoldability(ResultSet.CLOSE_CURSORS_AT_COMMIT);\r\nboolean isOpenCursorSupported\r\n  = dbmd.supportsResultSetHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\r\nboolean defaultHoldability\r\n  = dbmd.getResultSetHoldability();\r\n```","```\r\ndbConnection.setHoldability(ResultSet.HOLD_CURSORS_OVER_COMMIT);\r\n```","```\r\nStatement pstmt = dbConnection.createStatement(\r\n  ResultSet.TYPE_SCROLL_SENSITIVE, \r\n  ResultSet.CONCUR_UPDATABLE, \r\n  ResultSet.HOLD_CURSORS_OVER_COMMIT)\r\n```","```\r\ndbConnection.setAutoCommit(false);\r\nResultSet rs = pstmt.executeQuery(\"select * from employees\");\r\nwhile (rs.next()) {\r\n    if(rs.getString(\"name\").equalsIgnoreCase(\"john\")) {\r\n        rs.updateString(\"name\", \"John Doe\");\r\n        rs.updateRow();\r\n        dbConnection.commit();\r\n    }                \r\n}\r\nrs.last(); \r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\", \r\n  ResultSet.TYPE_SCROLL_SENSITIVE, \r\n  ResultSet.CONCUR_READ_ONLY);\r\npstmt.setFetchSize(10);\r\n\r\nResultSet rs = pstmt.executeQuery();\r\n\r\nwhile (rs.next()) {\r\n    // iterate through the resultset\r\n}\r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\", \r\n  ResultSet.TYPE_SCROLL_SENSITIVE, \r\n  ResultSet.CONCUR_READ_ONLY);\r\npstmt.setFetchSize(10);\r\n\r\nResultSet rs = pstmt.executeQuery();\r\n\r\nrs.setFetchSize(20); \r\n\r\nwhile (rs.next()) { \r\n    // iterate through the resultset \r\n}\r\n```","```\r\nPreparedStatement pstmt = dbConnection.prepareStatement(\r\n  \"select * from employees\", \r\n  ResultSet.TYPE_SCROLL_SENSITIVE, \r\n  ResultSet.CONCUR_READ_ONLY);\r\npstmt.setFetchSize(10);\r\n\r\nResultSet rs = pstmt.executeQuery();\r\n\r\nint rowCount = 0;\r\n\r\nwhile (rs.next()) { \r\n    // iterate through the resultset \r\n    if (rowCount == 30) {\r\n        rs.setFetchSize(20); \r\n    }\r\n    rowCount++;\r\n}\r\n```"]