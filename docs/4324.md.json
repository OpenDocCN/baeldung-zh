["```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>java-hamcrest</artifactId>\r\n    <version>2.0.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class IsOnlyDigits extends TypeSafeMatcher<String> {\r\n\r\n    @Override\r\n    protected boolean matchesSafely(String s) {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public void describeTo(Description description) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic class IsOnlyDigits extends TypeSafeMatcher<String> {\r\n\r\n    @Override\r\n    protected boolean matchesSafely(String s) {\r\n        try {\r\n            Integer.parseInt(s);\r\n            return true;\r\n        } catch (NumberFormatException nfe){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void describeTo(Description description) {\r\n        description.appendText(\"only digits\");\r\n    }\r\n}\r\n```","```\r\npublic static Matcher<String> onlyDigits() {\r\n    return new IsOnlyDigits();\r\n}\r\n```","```\r\n@Test\r\npublic void givenAString_whenIsOnlyDigits_thenCorrect() {\r\n    String digits = \"1234\";\r\n\r\n    assertThat(digits, onlyDigits());\r\n}\r\n```","```\r\nassertThat(digits, is(onlyDigits()));\r\n```","```\r\njava.lang.AssertionError: \r\nExpected: only digits\r\n     but: was \"123ABC\"\r\n```","```\r\npublic class IsDivisibleBy extends TypeSafeMatcher<Integer> {\r\n\r\n    private Integer divider;\r\n\r\n    // constructors\r\n\r\n    @Override\r\n    protected boolean matchesSafely(Integer dividend) {\r\n        if (divider == 0) {\r\n            return false;\r\n        }\r\n        return ((dividend % divider) == 0);\r\n    }\r\n\r\n    @Override\r\n    public void describeTo(Description description) {\r\n        description.appendText(\"divisible by \" + divider);\r\n    }\r\n\r\n    public static Matcher<Integer> divisibleBy(Integer divider) {\r\n        return new IsDivisibleBy(divider);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnEvenInteger_whenDivisibleByTwo_thenCorrect() {\r\n    Integer ten = 10;\r\n    Integer two = 2;\r\n\r\n    assertThat(ten,is(divisibleBy(two)));\r\n}\r\n\r\n@Test\r\npublic void givenAnOddInteger_whenNotDivisibleByTwo_thenCorrect() {\r\n    Integer eleven = 11;\r\n    Integer two = 2;\r\n\r\n    assertThat(eleven,is(not(divisibleBy(two))));\r\n}\r\n```"]