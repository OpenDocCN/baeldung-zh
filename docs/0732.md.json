["```\r\n@Bean\r\npublic RouterFunction<ServerResponse> routeRequest(Handler handler) {\r\n    return RouterFunctions.route(RequestPredicates.GET(\"/hello\")\r\n      .and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), \r\n        handler::handleRequest);\r\n    } \r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    return \r\n      //...\r\n        sayHello(request)\r\n      //...\r\n} \r\n```","```\r\nprivate Mono<String> sayHello(ServerRequest request) {\r\n    //...\r\n    return Mono.just(\"Hello, \" + request.queryParam(\"name\").get());\r\n    //...\r\n} \r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    return sayHello(request)\r\n      .onErrorReturn(\"Hello Stranger\")\r\n      .flatMap(s -> ServerResponse.ok()\r\n        .contentType(MediaType.TEXT_PLAIN)\r\n        .bodyValue(s));\r\n} \r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    return sayHello(request)\r\n      .flatMap(s -> ServerResponse.ok()\r\n        .contentType(MediaType.TEXT_PLAIN)\r\n        .bodyValue(s))\r\n      .onErrorResume(e -> Mono.just(\"Error \" + e.getMessage())\r\n        .flatMap(s -> ServerResponse.ok()\r\n          .contentType(MediaType.TEXT_PLAIN)\r\n          .bodyValue(s)));\r\n} \r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    return sayHello(request)\r\n      .flatMap(s -> ServerResponse.ok()\r\n        .contentType(MediaType.TEXT_PLAIN)\r\n        .bodyValue(s))\r\n      .onErrorResume(e -> sayHelloFallback()\r\n        .flatMap(s -> ServerResponse.ok()\r\n        .contentType(MediaType.TEXT_PLAIN)\r\n        .bodyValue(s)));\r\n} \r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    return ServerResponse.ok()\r\n      .body(sayHello(request)\r\n      .onErrorResume(e -> Mono.error(new NameRequiredException(\r\n        HttpStatus.BAD_REQUEST, \r\n        \"username is required\", e))), String.class);\r\n} \r\n```","```\r\npublic class GlobalErrorAttributes extends DefaultErrorAttributes{\r\n\r\n    @Override\r\n    public Map<String, Object> getErrorAttributes(ServerRequest request, \r\n      ErrorAttributeOptions options) {\r\n        Map<String, Object> map = super.getErrorAttributes(\r\n          request, options);\r\n        map.put(\"status\", HttpStatus.BAD_REQUEST);\r\n        map.put(\"message\", \"username is required\");\r\n        return map;\r\n    }\r\n\r\n} \r\n```","```\r\n@Component\r\n@Order(-2)\r\npublic class GlobalErrorWebExceptionHandler extends \r\n    AbstractErrorWebExceptionHandler {\r\n\r\n    // constructors\r\n\r\n    @Override\r\n    protected RouterFunction<ServerResponse> getRoutingFunction(\r\n      ErrorAttributes errorAttributes) {\r\n\r\n        return RouterFunctions.route(\r\n          RequestPredicates.all(), this::renderErrorResponse);\r\n    }\r\n\r\n    private Mono<ServerResponse> renderErrorResponse(\r\n       ServerRequest request) {\r\n\r\n       Map<String, Object> errorPropertiesMap = getErrorAttributes(request, \r\n         ErrorAttributeOptions.defaults());\r\n\r\n       return ServerResponse.status(HttpStatus.BAD_REQUEST)\r\n         .contentType(MediaType.APPLICATION_JSON)\r\n         .body(BodyInserters.fromValue(errorPropertiesMap));\r\n    }\r\n} \r\n```"]