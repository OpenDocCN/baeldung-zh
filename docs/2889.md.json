["```\r\n$ SPRING_APPLICATION_JSON='{\"environment\":{\"name\":\"production\"}}' java -jar app.jar\r\n```","```\r\n$ java -Dspring.application.json='{\"environment\":{\"name\":\"production\"}}' -jar app.jar\r\n```","```\r\n$ java -jar app.jar --spring.application.json='{\"environment\":{\"name\":\"production\"}}'\r\n```","```\r\npublic class JsonProperties {\r\n\r\n    private int port;\r\n\r\n    private boolean resend;\r\n\r\n    private String host;\r\n\r\n   // getters and setters\r\n\r\n}\r\n```","```\r\n{\r\n  \"host\" : \"[[email protected]](/web/20220630133227/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n  \"port\" : 9090,\r\n  \"resend\" : true\r\n}\r\n```","```\r\n@Component\r\n@PropertySource(value = \"classpath:configprops.json\")\r\n@ConfigurationProperties\r\npublic class JsonProperties {\r\n    // same code as before\r\n}\r\n```","```\r\n@SpringBootApplication\r\n@ComponentScan(basePackageClasses = { JsonProperties.class})\r\npublic class ConfigPropertiesDemoApplication {\r\n    public static void main(String[] args) {\r\n        new SpringApplicationBuilder(ConfigPropertiesDemoApplication.class).run();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration(\r\n  classes = ConfigPropertiesDemoApplication.class)\r\npublic class JsonPropertiesIntegrationTest {\r\n\r\n    @Autowired\r\n    private JsonProperties jsonProperties;\r\n\r\n    @Test\r\n    public void whenPropertiesLoadedViaJsonPropertySource_thenLoadFlatValues() {\r\n        assertEquals(\"[[email protected]](/web/20220630133227/https://www.baeldung.com/cdn-cgi/l/email-protection)\", jsonProperties.getHost());\r\n        assertEquals(9090, jsonProperties.getPort());\r\n        assertTrue(jsonProperties.isResend());\r\n    }\r\n}\r\n```","```\r\nConversionFailedException: \r\nFailed to convert from type [java.lang.String] \r\nto type [boolean] for value 'true,'\r\n```","```\r\npublic class JsonPropertySourceFactory \r\n  implements PropertySourceFactory {\r\n\r\n    @Override\r\n    public PropertySource<?> createPropertySource(\r\n      String name, EncodedResource resource)\r\n          throws IOException {\r\n        Map readValue = new ObjectMapper()\r\n          .readValue(resource.getInputStream(), Map.class);\r\n        return new MapPropertySource(\"json-property\", readValue);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@PropertySource(\r\n  value = \"classpath:configprops.json\", \r\n  factory = JsonPropertySourceFactory.class)\r\n@ConfigurationProperties\r\npublic class JsonProperties {\r\n\r\n    // same code as before\r\n\r\n}\r\n```","```\r\nprivate List<String> topics;\r\n// getter and setter\r\n```","```\r\n{\r\n    // same fields as before\r\n    \"topics\" : [\"spring\", \"boot\"]\r\n}\r\n```","```\r\n@Test\r\npublic void whenPropertiesLoadedViaJsonPropertySource_thenLoadListValues() {\r\n    assertThat(\r\n      jsonProperties.getTopics(), \r\n      Matchers.is(Arrays.asList(\"spring\", \"boot\")));\r\n}\r\n```","```\r\nprivate LinkedHashMap<String, ?> sender;\r\n// getter and setter\r\n```","```\r\n{\r\n  // same fields as before\r\n   \"sender\" : {\r\n     \"name\": \"sender\",\r\n     \"address\": \"street\"\r\n  }\r\n}\r\n```","```\r\n@Test\r\npublic void whenPropertiesLoadedViaJsonPropertySource_thenNestedLoadedAsMap() {\r\n    assertEquals(\"sender\", jsonProperties.getSender().get(\"name\"));\r\n    assertEquals(\"street\", jsonProperties.getSender().get(\"address\"));\r\n}\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"custom\")\r\npublic class CustomJsonProperties {\r\n\r\n    private String host;\r\n\r\n    private int port;\r\n\r\n    private boolean resend;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\npublic class JsonPropertyContextInitializer\r\n implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n\r\n    private static String CUSTOM_PREFIX = \"custom.\";\r\n\r\n    @Override\r\n    @SuppressWarnings(\"unchecked\")\r\n    public void \r\n      initialize(ConfigurableApplicationContext configurableApplicationContext) {\r\n        try {\r\n            Resource resource = configurableApplicationContext\r\n              .getResource(\"classpath:configpropscustom.json\");\r\n            Map readValue = new ObjectMapper()\r\n              .readValue(resource.getInputStream(), Map.class);\r\n            Set<Map.Entry> set = readValue.entrySet();\r\n            List<MapPropertySource> propertySources = set.stream()\r\n               .map(entry-> new MapPropertySource(\r\n                 CUSTOM_PREFIX + entry.getKey(),\r\n                 Collections.singletonMap(\r\n                 CUSTOM_PREFIX + entry.getKey(), entry.getValue()\r\n               )))\r\n               .collect(Collectors.toList());\r\n            for (PropertySource propertySource : propertySources) {\r\n                configurableApplicationContext.getEnvironment()\r\n                    .getPropertySources()\r\n                    .addFirst(propertySource);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@EnableAutoConfiguration\r\n@ComponentScan(basePackageClasses = { JsonProperties.class,\r\n  CustomJsonProperties.class })\r\npublic class ConfigPropertiesDemoApplication {\r\n    public static void main(String[] args) {\r\n        new SpringApplicationBuilder(ConfigPropertiesDemoApplication.class)\r\n            .initializers(new JsonPropertyContextInitializer())\r\n            .run();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration(classes = ConfigPropertiesDemoApplication.class, \r\n  initializers = JsonPropertyContextInitializer.class)\r\npublic class JsonPropertiesIntegrationTest {\r\n\r\n    // same code as before\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenLoadedIntoEnvironment_thenFlatValuesPopulated() {\r\n    assertEquals(\"[[email protected]](/web/20220630133227/https://www.baeldung.com/cdn-cgi/l/email-protection)\", customJsonProperties.getHost());\r\n    assertEquals(9090, customJsonProperties.getPort());\r\n    assertTrue(customJsonProperties.isResend());\r\n}\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"custom\")\r\npublic class CustomJsonProperties {\r\n\r\n   // same code as before\r\n\r\n    private Person sender;\r\n\r\n    public static class Person {\r\n\r\n        private String name;\r\n        private String address;\r\n\r\n        // getters and setters for Person class\r\n\r\n   }\r\n\r\n   // getters and setters for sender member\r\n\r\n}\r\n```","```\r\npublic class JsonPropertyContextInitializer \r\n  implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n\r\n    private final static String CUSTOM_PREFIX = \"custom.\";\r\n\r\n    @Override\r\n    @SuppressWarnings(\"unchecked\")\r\n    public void \r\n      initialize(ConfigurableApplicationContext configurableApplicationContext) {\r\n        try {\r\n            Resource resource = configurableApplicationContext\r\n              .getResource(\"classpath:configpropscustom.json\");\r\n            Map readValue = new ObjectMapper()\r\n              .readValue(resource.getInputStream(), Map.class);\r\n            Set<Map.Entry> set = readValue.entrySet();\r\n            List<MapPropertySource> propertySources = convertEntrySet(set, Optional.empty());\r\n            for (PropertySource propertySource : propertySources) {\r\n                configurableApplicationContext.getEnvironment()\r\n                  .getPropertySources()\r\n                  .addFirst(propertySource);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private static List<MapPropertySource> \r\n      convertEntrySet(Set<Map.Entry> entrySet, Optional<String> parentKey) {\r\n        return entrySet.stream()\r\n            .map((Map.Entry e) -> convertToPropertySourceList(e, parentKey))\r\n            .flatMap(Collection::stream)\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n    private static List<MapPropertySource> \r\n      convertToPropertySourceList(Map.Entry e, Optional<String> parentKey) {\r\n        String key = parentKey.map(s -> s + \".\")\r\n          .orElse(\"\") + (String) e.getKey();\r\n        Object value = e.getValue();\r\n        return covertToPropertySourceList(key, value);\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private static List<MapPropertySource> \r\n       covertToPropertySourceList(String key, Object value) {\r\n        if (value instanceof LinkedHashMap) {\r\n            LinkedHashMap map = (LinkedHashMap) value;\r\n            Set<Map.Entry> entrySet = map.entrySet();\r\n            return convertEntrySet(entrySet, Optional.ofNullable(key));\r\n        }\r\n        String finalKey = CUSTOM_PREFIX + key;\r\n        return Collections.singletonList(\r\n          new MapPropertySource(finalKey, \r\n            Collections.singletonMap(finalKey, value)));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenLoadedIntoEnvironment_thenValuesLoadedIntoClassObject() {\r\n    assertNotNull(customJsonProperties.getSender());\r\n    assertEquals(\"sender\", customJsonProperties.getSender()\r\n      .getName());\r\n    assertEquals(\"street\", customJsonProperties.getSender()\r\n      .getAddress());\r\n}\r\n```"]