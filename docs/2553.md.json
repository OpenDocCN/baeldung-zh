["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.apache.camel.springboot</groupId>\r\n        <artifactId>camel-servlet-starter</artifactId>\r\n        <version>3.15.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.apache.camel.springboot</groupId>\r\n        <artifactId>camel-jackson-starter</artifactId>\r\n        <version>3.15.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.apache.camel.springboot</groupId>\r\n        <artifactId>camel-swagger-java-starter</artifactId>\r\n        <version>3.15.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.apache.camel.springboot</groupId>\r\n        <artifactId>camel-spring-boot-starter</artifactId>\r\n        <version>3.15.0</version>\r\n    </dependency>    \r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@SpringBootApplication\r\n@ComponentScan(basePackages=\"com.baeldung.camel\")\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\nlogging.config=classpath:logback.xml\r\ncamel.springboot.name=MyCamel\r\nserver.address=0.0.0.0\r\nmanagement.address=0.0.0.0\r\nmanagement.port=8081\r\nendpoints.enabled = true\r\nendpoints.health.enabled = true\r\n```","```\r\nserver:\r\n  port: 8080\r\ncamel:\r\n  springboot:\r\n    name: ServicesRest\r\nmanagement:\r\n  port: 8081\r\nendpoints:\r\n  enabled: false\r\n  health:\r\n    enabled: true\r\nquickstart:\r\n  generateOrderPeriod: 10s\r\n  processOrderPeriod: 30s\r\n```","```\r\nbaeldung:\r\n  api:\r\n    path: '/camel'\r\n```","```\r\n@Value(\"${baeldung.api.path}\")\r\nString contextPath;\r\n\r\n@Bean\r\nServletRegistrationBean servletRegistrationBean() {\r\n    ServletRegistrationBean servlet = new ServletRegistrationBean\r\n      (new CamelHttpTransportServlet(), contextPath+\"/*\");\r\n    servlet.setName(\"CamelServlet\");\r\n    return servlet;\r\n}\r\n```","```\r\n@Component\r\nclass RestApi extends RouteBuilder {\r\n    @Override\r\n    public void configure() {\r\n        CamelContext context = new DefaultCamelContext();\r\n\r\n        restConfiguration()...\r\n        rest(\"/api/\")... \r\n        from(\"direct:remoteService\")...\r\n    }\r\n}\r\n```","```\r\nrestConfiguration()\r\n  .contextPath(contextPath) \r\n  .port(serverPort)\r\n  .enableCORS(true)\r\n  .apiContextPath(\"/api-doc\")\r\n  .apiProperty(\"api.title\", \"Test REST API\")\r\n  .apiProperty(\"api.version\", \"v1\")\r\n  .apiContextRouteId(\"doc-api\")\r\n  .component(\"servlet\")\r\n  .bindingMode(RestBindingMode.json)\r\n```","```\r\nrest(\"/api/\")\r\n  .id(\"api-route\")\r\n  .consumes(\"application/json\")\r\n  .post(\"/bean\")\r\n  .bindingMode(RestBindingMode.json_xml)\r\n  .type(MyBean.class)\r\n  .to(\"direct:remoteService\");\r\n```","```\r\nfrom(\"direct:remoteService\")\r\n  .routeId(\"direct-route\")\r\n  .tracing()\r\n  .log(\">>> ${body.id}\")\r\n  .log(\">>> ${body.name}\")\r\n  .transform().simple(\"Hello ${in.body.name}\")\r\n  .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(200));\r\n```","```\r\nfrom(\"direct:remoteService\")\r\n  .routeId(\"direct-route\")\r\n  .tracing()\r\n  .log(\">>> ${body.id}\")\r\n  .log(\">>> ${body.name}\")\r\n  .process(new Processor() {\r\n      @Override\r\n      public void process(Exchange exchange) throws Exception {\r\n          MyBean bodyIn = (MyBean) exchange.getIn().getBody();\r\n          ExampleServices.example(bodyIn);\r\n          exchange.getIn().setBody(bodyIn);\r\n      }\r\n  })\r\n  .setHeader(Exchange.HTTP_RESPONSE_CODE, constant(200));\r\n```","```\r\npublic class ExampleServices {\r\n    public static void example(MyBean bodyIn) {\r\n        bodyIn.setName( \"Hello, \" + bodyIn.getName() );\r\n        bodyIn.setId(bodyIn.getId() * 10);\r\n    }\r\n}\r\n```"]