["```\r\n@Service\r\npublic class LoggingService {\r\n}\r\n```","```\r\n@Configuration\r\npublic class AuditConfiguration {\r\n    @Bean\r\n    public AuditService audit() {\r\n          return new AuditService();\r\n    }\r\n}\r\n```","```\r\n@Component(\"myBean\")\r\npublic class MyCustomComponent {\r\n}\r\n```","```\r\n@Configuration\r\npublic class MyConfiguration {\r\n    @Bean(\"beanComponent\")\r\n    public MyCustomComponent myComponent() {\r\n        return new MyCustomComponent();\r\n    }\r\n}\r\n```","```\r\npublic interface Animal {\r\n    String name();\r\n}\r\n```","```\r\n@Component \r\n@Qualifier(\"cat\") \r\npublic class Cat implements Animal { \r\n    @Override \r\n     public String name() { \r\n        return \"Cat\"; \r\n     } \r\n}\r\n```","```\r\n@Component\r\n@Qualifier(\"dog\")\r\npublic class Dog implements Animal {\r\n    @Override\r\n    public String name() {\r\n        return \"Dog\";\r\n    }\r\n}\r\n```","```\r\n@Service \r\npublic class PetShow { \r\n    private final Animal dog; \r\n    private final Animal cat; \r\n\r\n    public PetShow (@Qualifier(\"dog\")Animal dog, @Qualifier(\"cat\")Animal cat) { \r\n      this.dog = dog; \r\n      this.cat = cat; \r\n    }\r\n    public Animal getDog() { \r\n      return dog; \r\n    }\r\n    public Animal getCat() { \r\n      return cat; \r\n    }\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\npublic class SpringBeanNamingUnitTest {\r\n    private AnnotationConfigApplicationContext context;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        context = new AnnotationConfigApplicationContext();\r\n        context.scan(\"com.baeldung.springbean.naming\");\r\n        context.refresh();\r\n    } \r\n```","```\r\n @Test\r\n    void givenMultipleImplementationsOfAnimal_whenFieldIsInjectedWithQualifiedName_thenTheSpecificBeanShouldGetInjected() {\r\n        PetShow petShow = (PetShow) context.getBean(\"petShow\");\r\n        assertThat(petShow.getCat().getClass()).isEqualTo(Cat.class);\r\n        assertThat(petShow.getDog().getClass()).isEqualTo(Dog.class);\r\n    }\r\n```"]