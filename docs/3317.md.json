["```\r\npublic Date addHoursToJavaUtilDate(Date date, int hours) {\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(date);\r\n    calendar.add(Calendar.HOUR_OF_DAY, hours);\r\n    return calendar.getTime();\r\n}\r\n```","```\r\n@Test\r\npublic void givenJavaUtilDate_whenUsingToInstant_thenAddHours() {\r\n    Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0)\r\n      .getTime();\r\n    Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0)\r\n      .getTime();\r\n\r\n    assertThat(Date.from(actualDate.toInstant().plus(Duration.ofHours(2))))\r\n      .isEqualTo(expectedDate);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLocalDateTime_whenUsingPlusHours_thenAddHours() {\r\n    LocalDateTime actualDateTime = LocalDateTime\r\n      .of(2018, Month.JUNE, 25, 5, 0);\r\n    LocalDateTime expectedDateTime = LocalDateTime.\r\n      of(2018, Month.JUNE, 25, 10, 0);\r\n\r\n    assertThat(actualDateTime.plusHours(5)).isEqualTo(expectedDateTime);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLocalDateTime_whenUsingMinusHours_thenSubtractHours() {\r\n    LocalDateTime actualDateTime = LocalDateTime\r\n      .of(2018, Month.JUNE, 25, 5, 0);\r\n    LocalDateTime expectedDateTime = LocalDateTime\r\n      .of(2018, Month.JUNE, 25, 3, 0);\r\n\r\n    assertThat(actualDateTime.minusHours(2)).isEqualTo(expectedDateTime);\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenInstant_whenUsingAddHoursToInstant_thenAddHours() {\r\n    Instant actualValue = Instant.parse(\"2018-06-25T05:12:35Z\");\r\n    Instant expectedValue = Instant.parse(\"2018-06-25T07:12:35Z\");\r\n\r\n    assertThat(actualValue.plus(2, ChronoUnit.HOURS))\r\n      .isEqualTo(expectedValue);\r\n}\r\n```","```\r\npublic static Date addHours(Date date, int amount)\r\n```","```\r\n@Test\r\npublic void givenJavaUtilDate_whenUsingApacheCommons_thenAddHours() {\r\n    Date actualDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 5, 0)\r\n      .getTime();\r\n    Date expectedDate = new GregorianCalendar(2018, Calendar.JUNE, 25, 7, 0)\r\n      .getTime();\r\n\r\n    assertThat(DateUtils.addHours(actualDate, 2)).isEqualTo(expectedDate);\r\n}\r\n```","```\r\n@Test\r\npublic void givenJodaDateTime_whenUsingPlusHoursToDateTime_thenAddHours() {\r\n    DateTime actualDateTime = new DateTime(2018, 5, 25, 5, 0);\r\n    DateTime expectedDateTime = new DateTime(2018, 5, 25, 7, 0);\r\n\r\n    assertThat(actualDateTime.plusHours(2)).isEqualTo(expectedDateTime);\r\n}\r\n```"]