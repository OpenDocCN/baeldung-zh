["```\r\n<dependency>\r\n    <groupId>org.jinq</groupId>\r\n    <artifactId>jinq-jpa</artifactId>\r\n    <version>1.8.22</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-orm</artifactId>\r\n    <version>5.3.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.200</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.7.2</version>\r\n</dependency>\r\n```","```\r\njinqDataProvider.streamAll(entityManager, Car.class)\r\n  .where(c -> c.getModel().equals(model))\r\n  .toList();\r\n```","```\r\nselect c.* from car c where c.model=?\r\n```","```\r\npublic interface CarRepository {\r\n    Optional<Car> findByModel(String model);\r\n}\r\n```","```\r\npublic abstract class BaseJinqRepositoryImpl<T> {\r\n    @Autowired\r\n    private JinqJPAStreamProvider jinqDataProvider;\r\n\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n\r\n    protected abstract Class<T> entityType();\r\n\r\n    public JPAJinqStream<T> stream() {\r\n        return streamOf(entityType());\r\n    }\r\n\r\n    protected <U> JPAJinqStream<U> streamOf(Class<U> clazz) {\r\n        return jinqDataProvider.streamAll(entityManager, clazz);\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic class CarRepositoryImpl \r\n  extends BaseJinqRepositoryImpl<Car> implements CarRepository {\r\n\r\n    @Override\r\n    public Optional<Car> findByModel(String model) {\r\n        return stream()\r\n          .where(c -> c.getModel().equals(model))\r\n          .findFirst();\r\n    }\r\n\r\n    @Override\r\n    protected Class<Car> entityType() {\r\n        return Car.class;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class JinqProviderConfiguration {\r\n\r\n    @Bean\r\n    @Autowired\r\n    JinqJPAStreamProvider jinqProvider(EntityManagerFactory emf) {\r\n        return new JinqJPAStreamProvider(emf);\r\n    }\r\n}\r\n```","```\r\nspring.datasource.url=jdbc:h2:~/jinq\r\nspring.datasource.username=sa\r\nspring.datasource.password=\r\nspring.jpa.hibernate.ddl-auto=create-drop\r\n```","```\r\nstream()\r\n  .where(c -> c.getModel().equals(model)\r\n    && c.getDescription().contains(desc))\r\n  .toList();\r\n```","```\r\nselect c.model, c.description from car c where c.model=? and locate(?, c.description)>0\r\n```","```\r\nstream()\r\n  .select(c -> new Tuple3<>(c.getModel(), c.getYear(), c.getEngine()))\r\n  .toList()\r\n```","```\r\nselect c.model, c.year, c.engine from car c\r\n```","```\r\n@Entity(name = \"CAR\")\r\npublic class Car {\r\n    //...\r\n    @OneToOne\r\n    @JoinColumn(name = \"name\")\r\n    public Manufacturer getManufacturer() {\r\n        return manufacturer;\r\n    }\r\n}\r\n```","```\r\n@Entity(name = \"MANUFACTURER\")\r\npublic class Manufacturer {\r\n    // ...\r\n    @OneToMany(mappedBy = \"model\")\r\n    public List<Car> getCars() {\r\n        return cars;\r\n    }\r\n}\r\n```","```\r\nOptional<Manufacturer> manufacturer = stream()\r\n  .where(c -> c.getModel().equals(model))\r\n  .select(c -> c.getManufacturer())\r\n  .findFirst();\r\n```","```\r\nselect m.name, m.city from car c inner join manufacturer m on c.name=m.name where c.model=?\r\n```","```\r\nList<Pair<Manufacturer, Car>> list = streamOf(Manufacturer.class)\r\n  .join(m -> JinqStream.from(m.getCars()))\r\n  .toList()\r\n```","```\r\nlong total = stream()\r\n  .where(c -> c.getModel().equals(model))\r\n  .count()\r\n```","```\r\nselect count(c.model) from car c where c.model=?\r\n```","```\r\nstream()\r\n  .skip(10)\r\n  .limit(20)\r\n  .toList()\r\n```","```\r\nselect c.* from car c limit ? offset ?\r\n```"]