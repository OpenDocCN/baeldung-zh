["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\nspring.security.user.name\r\nspring.security.user.password\r\n```","```\r\nUsing default security password: c8be15de-4488-4490-9dc6-fab3f91435c6\r\n```","```\r\n@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })\r\npublic class SpringBootSecurityApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootSecurityApplication.class, args);\r\n    }\r\n} \r\n```","```\r\nspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration\r\n```","```\r\nspring.security.user.password=password\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class BasicConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n    \tPasswordEncoder encoder = \r\n          PasswordEncoderFactories.createDelegatingPasswordEncoder();\r\n    \tauth\r\n          .inMemoryAuthentication()\r\n          .withUser(\"user\")\r\n          .password(encoder.encode(\"password\"))\r\n          .roles(\"USER\")\r\n          .and()\r\n          .withUser(\"admin\")\r\n          .password(encoder.encode(\"admin\"))\r\n          .roles(\"USER\", \"ADMIN\");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .httpBasic();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = RANDOM_PORT)\r\npublic class BasicConfigurationIntegrationTest {\r\n\r\n    TestRestTemplate restTemplate;\r\n    URL base;\r\n    @LocalServerPort int port;\r\n\r\n    @Before\r\n    public void setUp() throws MalformedURLException {\r\n        restTemplate = new TestRestTemplate(\"user\", \"password\");\r\n        base = new URL(\"http://localhost:\" + port);\r\n    }\r\n\r\n    @Test\r\n    public void whenLoggedUserRequestsHomePage_ThenSuccess()\r\n     throws IllegalStateException, IOException {\r\n        ResponseEntity<String> response =\r\n          restTemplate.getForEntity(base.toString(), String.class);\r\n\r\n        assertEquals(HttpStatus.OK, response.getStatusCode());\r\n        assertTrue(response.getBody().contains(\"Baeldung\"));\r\n    }\r\n\r\n    @Test\r\n    public void whenUserWithWrongCredentials_thenUnauthorizedPage() \r\n      throws Exception {\r\n\r\n        restTemplate = new TestRestTemplate(\"user\", \"wrongpassword\");\r\n        ResponseEntity<String> response =\r\n          restTemplate.getForEntity(base.toString(), String.class);\r\n\r\n        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());\r\n        assertTrue(response.getBody().contains(\"Unauthorized\"));\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n   <groupId>org.springframework.security.oauth</groupId>\r\n   <artifactId>spring-security-oauth2</artifactId>\r\n</dependency>\r\n```","```\r\nUsing default security password: a81cb256-f243-40c0-a585-81ce1b952a98\r\nsecurity.oauth2.client.client-id = 39d2835b-1f87-4a77-9798-e2975f36972e\r\nsecurity.oauth2.client.client-secret = f1463f8b-0791-46fe-9269-521b86c55b71\r\n```","```\r\ncurl -X POST -u 39d2835b-1f87-4a77-9798-e2975f36972e:f1463f8b-0791-46fe-9269-521b86c55b71 \\\r\n -d grant_type=client_credentials \r\n -d username=user \r\n -d password=a81cb256-f243-40c0-a585-81ce1b952a98 \\\r\n -d scope=write  http://localhost:8080/oauth/token\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>    \r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class JWTSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          ...\r\n          .oauth2ResourceServer(oauth2 -> oauth2.jwt());\r\n          ...\r\n\t}\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n</dependency> \r\n```","```\r\nsecurity.basic.authorize-mode\r\nsecurity.basic.enabled\r\nsecurity.basic.path\r\nsecurity.basic.realm\r\nsecurity.enable-csrf\r\nsecurity.headers.cache\r\nsecurity.headers.content-security-policy\r\nsecurity.headers.content-security-policy-mode\r\nsecurity.headers.content-type\r\nsecurity.headers.frame\r\nsecurity.headers.hsts\r\nsecurity.headers.xss\r\nsecurity.ignored\r\nsecurity.require-ssl\r\nsecurity.sessions\r\n```"]