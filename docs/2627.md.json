["```\r\n<filter>\r\n    <filter-name>metricFilter</filter-name>\r\n    <filter-class>org.baeldung.metrics.filter.MetricFilter</filter-class>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>metricFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```","```\r\npublic class MetricFilter implements Filter {\r\n\r\n    private MetricService metricService;\r\n\r\n    @Override\r\n    public void init(FilterConfig config) throws ServletException {\r\n        metricService = (MetricService) WebApplicationContextUtils\r\n         .getRequiredWebApplicationContext(config.getServletContext())\r\n         .getBean(\"metricService\");\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) \r\n      throws java.io.IOException, ServletException {\r\n        HttpServletRequest httpRequest = ((HttpServletRequest) request);\r\n        String req = httpRequest.getMethod() + \" \" + httpRequest.getRequestURI();\r\n\r\n        chain.doFilter(request, response);\r\n\r\n        int status = ((HttpServletResponse) response).getStatus();\r\n        metricService.increaseCount(req, status);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MetricService {\r\n\r\n    private Map<Integer, Integer> statusMetric;\r\n\r\n    public MetricService() {\r\n        statusMetric = new ConcurrentHashMap<>();\r\n    }\r\n\r\n    public void increaseCount(String request, int status) {\r\n        Integer statusCount = statusMetric.get(status);\r\n        if (statusCount == null) {\r\n            statusMetric.put(status, 1);\r\n        } else {\r\n            statusMetric.put(status, statusCount + 1);\r\n        }\r\n    }\r\n\r\n    public Map getStatusMetric() {\r\n        return statusMetric;\r\n    }\r\n}\r\n```","```\r\n@GetMapping(value = \"/status-metric\")\r\n@ResponseBody\r\npublic Map getStatusMetric() {\r\n    return metricService.getStatusMetric();\r\n}\r\n```","```\r\n{  \r\n    \"404\":1,\r\n    \"200\":6,\r\n    \"409\":1\r\n}\r\n```","```\r\n@Service\r\npublic class MetricService {\r\n\r\n    private Map<String, Map<Integer, Integer>> metricMap;\r\n\r\n    public void increaseCount(String request, int status) {\r\n        Map<Integer, Integer> statusMap = metricMap.get(request);\r\n        if (statusMap == null) {\r\n            statusMap = new ConcurrentHashMap<>();\r\n        }\r\n\r\n        Integer count = statusMap.get(status);\r\n        if (count == null) {\r\n            count = 1;\r\n        } else {\r\n            count++;\r\n        }\r\n        statusMap.put(status, count);\r\n        metricMap.put(request, statusMap);\r\n    }\r\n\r\n    public Map getFullMetric() {\r\n        return metricMap;\r\n    }\r\n}\r\n```","```\r\n@GetMapping(value = \"/metric\")\r\n@ResponseBody\r\npublic Map getMetric() {\r\n    return metricService.getFullMetric();\r\n}\r\n```","```\r\n{\r\n    \"GET /users\":\r\n    {\r\n        \"200\":6,\r\n        \"409\":1\r\n    },\r\n    \"GET /users/1\":\r\n    {\r\n        \"404\":1\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MetricService {\r\n\r\n    private static final SimpleDateFormat DATE_FORMAT = \r\n      new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n    private Map<String, Map<Integer, Integer>> timeMap;\r\n\r\n    public void increaseCount(String request, int status) {\r\n        String time = DATE_FORMAT.format(new Date());\r\n        Map<Integer, Integer> statusMap = timeMap.get(time);\r\n        if (statusMap == null) {\r\n            statusMap = new ConcurrentHashMap<>();\r\n        }\r\n\r\n        Integer count = statusMap.get(status);\r\n        if (count == null) {\r\n            count = 1;\r\n        } else {\r\n            count++;\r\n        }\r\n        statusMap.put(status, count);\r\n        timeMap.put(time, statusMap);\r\n    }\r\n}\r\n```","```\r\npublic Object[][] getGraphData() {\r\n    int colCount = statusMetric.keySet().size() + 1;\r\n    Set<Integer> allStatus = statusMetric.keySet();\r\n    int rowCount = timeMap.keySet().size() + 1;\r\n\r\n    Object[][] result = new Object[rowCount][colCount];\r\n    result[0][0] = \"Time\";\r\n\r\n    int j = 1;\r\n    for (int status : allStatus) {\r\n        result[0][j] = status;\r\n        j++;\r\n    }\r\n    int i = 1;\r\n    Map<Integer, Integer> tempMap;\r\n    for (Entry<String, Map<Integer, Integer>> entry : timeMap.entrySet()) {\r\n        result[i][0] = entry.getKey();\r\n        tempMap = entry.getValue();\r\n        for (j = 1; j < colCount; j++) {\r\n            result[i][j] = tempMap.get(result[0][j]);\r\n            if (result[i][j] == null) {\r\n                result[i][j] = 0;\r\n            }\r\n        }\r\n        i++;\r\n    } \r\n```","```\r\n    for (int k = 1; k < result[0].length; k++) {\r\n        result[0][k] = result[0][k].toString();\r\n    }\r\n```","```\r\n return result; \r\n}\r\n```","```\r\n@GetMapping(value = \"/metric-graph-data\")\r\n@ResponseBody\r\npublic Object[][] getMetricData() {\r\n    return metricService.getGraphData();\r\n}\r\n```","```\r\n<html>\r\n<head>\r\n<title>Metric Graph</title>\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script>\r\n<script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"></script>\r\n<script type=\"text/javascript\">\r\ngoogle.load(\"visualization\", \"1\", {packages : [ \"corechart\" ]});\r\n\r\nfunction drawChart() {\r\n$.get(\"/metric-graph-data\",function(mydata) {\r\n    var data = google.visualization.arrayToDataTable(mydata);\r\n    var options = {title : 'Website Metric',\r\n                   hAxis : {title : 'Time',titleTextStyle : {color : '#333'}},\r\n                   vAxis : {minValue : 0}};\r\n\r\n    var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));\r\n    chart.draw(data, options);\r\n\r\n});\r\n\r\n}\r\n</script>\r\n</head>\r\n<body onload=\"drawChart()\">\r\n    <div id=\"chart_div\" style=\"width: 900px; height: 500px;\"></div>\r\n</body>\r\n</html>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class MetricFilter implements Filter {\r\n\r\n    @Autowired\r\n    private MetricService metricService;\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) \r\n      throws java.io.IOException, ServletException {\r\n        chain.doFilter(request, response);\r\n\r\n        int status = ((HttpServletResponse) response).getStatus();\r\n        metricService.increaseCount(status);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MetricService {\r\n\r\n    @Autowired\r\n    private CounterService counter;\r\n\r\n    private List<String> statusList;\r\n\r\n    public void increaseCount(int status) {\r\n        counter.increment(\"status.\" + status);\r\n        if (!statusList.contains(\"counter.status.\" + status)) {\r\n            statusList.add(\"counter.status.\" + status);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MetricService {\r\n\r\n    @Autowired\r\n    private MetricRepository repo;\r\n\r\n    private List<List<Integer>> statusMetric;\r\n    private List<String> statusList;\r\n\r\n    @Scheduled(fixedDelay = 60000)\r\n    private void exportMetrics() {\r\n        Metric<?> metric;\r\n        List<Integer> statusCount = new ArrayList<>();\r\n        for (String status : statusList) {\r\n            metric = repo.findOne(status);\r\n            if (metric != null) {\r\n                statusCount.add(metric.getValue().intValue());\r\n                repo.reset(status);\r\n            } else {\r\n                statusCount.add(0);\r\n            }\r\n        }\r\n        statusMetric.add(statusCount);\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate MetricReaderPublicMetrics publicMetrics;\r\n\r\nprivate List<List<Integer>> statusMetricsByMinute;\r\nprivate List<String> statusList;\r\nprivate static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n\r\n@Scheduled(fixedDelay = 60000)\r\nprivate void exportMetrics() {\r\n    List<Integer> lastMinuteStatuses = initializeStatuses(statusList.size());\r\n    for (Metric<?> counterMetric : publicMetrics.metrics()) {\r\n        updateMetrics(counterMetric, lastMinuteStatuses);\r\n    }\r\n    statusMetricsByMinute.add(lastMinuteStatuses);\r\n}\r\n```","```\r\nprivate List<Integer> initializeStatuses(int size) {\r\n    List<Integer> counterList = new ArrayList<>();\r\n    for (int i = 0; i < size; i++) {\r\n        counterList.add(0);\r\n    }\r\n    return counterList;\r\n}\r\n```","```\r\nprivate void updateMetrics(Metric<?> counterMetric, List<Integer> statusCount) {\r\n\r\n    if (counterMetric.getName().contains(\"counter.status.\")) {\r\n        String status = counterMetric.getName().substring(15, 18); // example 404, 200\r\n        appendStatusIfNotExist(status, statusCount);\r\n        int index = statusList.indexOf(status);\r\n        int oldCount = statusCount.get(index) == null ? 0 : statusCount.get(index);\r\n        statusCount.set(index, counterMetric.getValue().intValue() + oldCount);\r\n    }\r\n}\r\n\r\nprivate void appendStatusIfNotExist(String status, List<Integer> statusCount) {\r\n    if (!statusList.contains(status)) {\r\n        statusList.add(status);\r\n        statusCount.add(0);\r\n    }\r\n}\r\n```","```\r\npublic Object[][] getGraphData() {\r\n    Date current = new Date();\r\n    int colCount = statusList.size() + 1;\r\n    int rowCount = statusMetricsByMinute.size() + 1;\r\n    Object[][] result = new Object[rowCount][colCount];\r\n    result[0][0] = \"Time\";\r\n    int j = 1;\r\n\r\n    for (String status : statusList) {\r\n        result[0][j] = status;\r\n        j++;\r\n    }\r\n\r\n    for (int i = 1; i < rowCount; i++) {\r\n        result[i][0] = dateFormat.format(\r\n          new Date(current.getTime() - (60000L * (rowCount - i))));\r\n    }\r\n\r\n    List<Integer> minuteOfStatuses;\r\n    List<Integer> last = new ArrayList<Integer>();\r\n\r\n    for (int i = 1; i < rowCount; i++) {\r\n        minuteOfStatuses = statusMetricsByMinute.get(i - 1);\r\n        for (j = 1; j <= minuteOfStatuses.size(); j++) {\r\n            result[i][j] = \r\n              minuteOfStatuses.get(j - 1) - (last.size() >= j ? last.get(j - 1) : 0);\r\n        }\r\n        while (j < colCount) {\r\n            result[i][j] = 0;\r\n            j++;\r\n        }\r\n        last = minuteOfStatuses;\r\n    }\r\n    return result;\r\n}\r\n```","```\r\npublic Object[][] getGraphData() {\r\n    Date current = new Date();\r\n    int colCount = statusList.size() + 1;\r\n    int rowCount = statusMetric.size() + 1;\r\n    Object[][] result = new Object[rowCount][colCount];\r\n    result[0][0] = \"Time\";\r\n\r\n    int j = 1;\r\n    for (String status : statusList) {\r\n        result[0][j] = status;\r\n        j++;\r\n    }\r\n\r\n    ArrayList<Integer> temp;\r\n    for (int i = 1; i < rowCount; i++) {\r\n        temp = statusMetric.get(i - 1);\r\n        result[i][0] = dateFormat.format\r\n          (new Date(current.getTime() - (60000L * (rowCount - i))));\r\n        for (j = 1; j <= temp.size(); j++) {\r\n            result[i][j] = temp.get(j - 1);\r\n        }\r\n        while (j < colCount) {\r\n            result[i][j] = 0;\r\n            j++;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n```","```\r\n@GetMapping(value = \"/metric-graph-data\")\r\n@ResponseBody\r\npublic Object[][] getMetricData() {\r\n    return metricService.getGraphData();\r\n}\r\n```","```\r\n[\r\n    [\"Time\",\"counter.status.302\",\"counter.status.200\",\"counter.status.304\"],\r\n    [\"2015-03-26 19:59\",3,12,7],\r\n    [\"2015-03-26 20:00\",0,4,1]\r\n]\r\n```","```\r\n@Autowired\r\nprivate MeterRegistry registry;\r\n\r\nprivate List<String> statusList;\r\n\r\n@Override\r\npublic void increaseCount(int status) {\r\n    String counterName = \"counter.status.\" + status;\r\n    registry.counter(counterName).increment(1);\r\n    if (!statusList.contains(counterName)) {\r\n        statusList.add(counterName);\r\n    }\r\n}\r\n```","```\r\n{\r\n  \"names\": [\r\n    \"application.ready.time\",\r\n    \"application.started.time\",\r\n    \"counter.status.200\",\r\n    \"disk.free\",\r\n    \"disk.total\",\r\n    .....\r\n  ]\r\n}\r\n```","```\r\n{\r\n  \"name\": \"counter.status.200\",\r\n  \"description\": null,\r\n  \"baseUnit\": null,\r\n  \"measurements\": [\r\n    {\r\n      \"statistic\": \"COUNT\",\r\n      \"value\": 2\r\n    }\r\n  ],\r\n  \"availableTags\": []\r\n}\r\n```","```\r\n@Scheduled(fixedDelay = 60000)\r\nprivate void exportMetrics() {\r\n    List<Integer> statusCount = new ArrayList<>();\r\n    for (String status : statusList) {\r\n        Search search = registry.find(status);\r\n        Counter counter = search.counter();\r\n         if (counter == null) {\r\n             statusCount.add(0);\r\n         } else {\r\n             statusCount.add(counter != null ? ((int) counter.count()) : 0);\r\n             registry.remove(counter);\r\n         }\r\n    }\r\n    statusMetricsByMinute.add(statusCount);\r\n}\r\n```","```\r\n@Scheduled(fixedDelay = 60000)\r\nprivate void exportMetrics() {\r\n    List<Integer> lastMinuteStatuses = initializeStatuses(statusList.size());\r\n\r\n    for (Meter counterMetric : publicMetrics.getMeters()) {\r\n        updateMetrics(counterMetric, lastMinuteStatuses);\r\n    }\r\n    statusMetricsByMinute.add(lastMinuteStatuses);\r\n}\r\n\r\nprivate void updateMetrics(Meter counterMetric, List<Integer> statusCount) {\r\n    String metricName = counterMetric.getId().getName();\r\n    if (metricName.contains(\"counter.status.\")) {\r\n        String status = metricName.substring(15, 18); // example 404, 200\r\n        appendStatusIfNotExist(status, statusCount);\r\n        int index = statusList.indexOf(status);\r\n        int oldCount = statusCount.get(index) == null ? 0 : statusCount.get(index);\r\n        statusCount.set(index, (int)((Counter) counterMetric).count() + oldCount);\r\n    }\r\n}\r\n```"]