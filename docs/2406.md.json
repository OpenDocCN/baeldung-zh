["```\r\n@Autowired\r\nConversionService conversionService;\r\n\r\n@Test\r\npublic void whenConvertStringToIntegerUsingDefaultConverter_thenSuccess() {\r\n    assertThat(\r\n      conversionService.convert(\"25\", Integer.class)).isEqualTo(25);\r\n}\r\n```","```\r\npublic class Employee {\r\n\r\n    private long id;\r\n    private double salary;\r\n\r\n    // standard constructors, getters, setters\r\n}\r\n```","```\r\npublic class StringToEmployeeConverter\r\n  implements Converter<String, Employee> {\r\n\r\n    @Override\r\n    public Employee convert(String from) {\r\n        String[] data = from.split(\",\");\r\n        return new Employee(\r\n          Long.parseLong(data[0]), \r\n          Double.parseDouble(data[1]));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addFormatters(FormatterRegistry registry) {\r\n        registry.addConverter(new StringToEmployeeConverter());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertStringToEmployee_thenSuccess() {\r\n    Employee employee = conversionService\r\n      .convert(\"1,50000.00\", Employee.class);\r\n    Employee actualEmployee = new Employee(1, 50000.00);\r\n\r\n    assertThat(conversionService.convert(\"1,50000.00\", \r\n      Employee.class))\r\n      .isEqualToComparingFieldByField(actualEmployee);\r\n}\r\n```","```\r\n@RestController\r\npublic class StringToEmployeeConverterController {\r\n\r\n    @GetMapping(\"/string-to-employee\")\r\n    public ResponseEntity<Object> getStringToEmployee(\r\n      @RequestParam(\"employee\") Employee employee) {\r\n        return ResponseEntity.ok(employee);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void getStringToEmployeeTest() throws Exception {\r\n    mockMvc.perform(get(\"/string-to-employee?employee=1,2000\"))\r\n      .andDo(print())\r\n      .andExpect(jsonPath(\"$.id\", is(1)))\r\n      .andExpect(jsonPath(\"$.salary\", is(2000.0)))\r\n}\r\n```","```\r\n{\"id\":1,\"salary\":2000.0}\r\n```","```\r\npublic enum Modes {\r\n    ALPHA, BETA;\r\n}\r\n```","```\r\n@Component\r\npublic class StringToEnumConverterFactory \r\n  implements ConverterFactory<String, Enum> {\r\n\r\n    private static class StringToEnumConverter<T extends Enum> \r\n      implements Converter<String, T> {\r\n\r\n        private Class<T> enumType;\r\n\r\n        public StringToEnumConverter(Class<T> enumType) {\r\n            this.enumType = enumType;\r\n        }\r\n\r\n        public T convert(String source) {\r\n            return (T) Enum.valueOf(this.enumType, source.trim());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public <T extends Enum> Converter<String, T> getConverter(\r\n      Class<T> targetType) {\r\n        return new StringToEnumConverter(targetType);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void addFormatters(FormatterRegistry registry) {\r\n    registry.addConverter(new StringToEmployeeConverter());\r\n    registry.addConverterFactory(new StringToEnumConverterFactory());\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertStringToEnum_thenSuccess() {\r\n    assertThat(conversionService.convert(\"ALPHA\", Modes.class))\r\n      .isEqualTo(Modes.ALPHA);\r\n}\r\n```","```\r\npublic class GenericBigDecimalConverter \r\n  implements GenericConverter {\r\n\r\n@Override\r\npublic Set<ConvertiblePair> getConvertibleTypes () {\r\n\r\n    ConvertiblePair[] pairs = new ConvertiblePair[] {\r\n          new ConvertiblePair(Number.class, BigDecimal.class),\r\n          new ConvertiblePair(String.class, BigDecimal.class)};\r\n        return ImmutableSet.copyOf(pairs);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic Object convert (Object source, TypeDescriptor sourceType, \r\n  TypeDescriptor targetType) {\r\n\r\n    if (sourceType.getType() == BigDecimal.class) {\r\n        return source;\r\n    }\r\n\r\n    if(sourceType.getType() == String.class) {\r\n        String number = (String) source;\r\n        return new BigDecimal(number);\r\n    } else {\r\n        Number number = (Number) source;\r\n        BigDecimal converted = new BigDecimal(number.doubleValue());\r\n        return converted.setScale(2, BigDecimal.ROUND_HALF_EVEN);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void addFormatters(FormatterRegistry registry) {\r\n    registry.addConverter(new StringToEmployeeConverter());\r\n    registry.addConverterFactory(new StringToEnumConverterFactory());\r\n    registry.addConverter(new GenericBigDecimalConverter());\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertingToBigDecimalUsingGenericConverter_thenSuccess() {\r\n    assertThat(conversionService\r\n      .convert(Integer.valueOf(11), BigDecimal.class))\r\n      .isEqualTo(BigDecimal.valueOf(11.00)\r\n      .setScale(2, BigDecimal.ROUND_HALF_EVEN));\r\n    assertThat(conversionService\r\n      .convert(Double.valueOf(25.23), BigDecimal.class))\r\n      .isEqualByComparingTo(BigDecimal.valueOf(Double.valueOf(25.23)));\r\n    assertThat(conversionService.convert(\"2.32\", BigDecimal.class))\r\n      .isEqualTo(BigDecimal.valueOf(2.32));\r\n}\r\n```"]