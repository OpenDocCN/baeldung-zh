["```\r\npublic class Invoice {\r\n\r\n    @DecimalMin(value = \"0.0\", inclusive = false)\r\n    @Digits(integer=3, fraction=2)\r\n    private BigDecimal price;\r\n    private String description;\r\n\r\n    public Invoice(BigDecimal price, String description) {\r\n        this.price = price;\r\n        this.description = description;\r\n    }\r\n}\r\n```","```\r\npublic class InvoiceUnitTest {\r\n\r\n    private static Validator validator;\r\n\r\n    @BeforeClass\r\n    public static void setupValidatorInstance() {\r\n        validator = Validation.buildDefaultValidatorFactory().getValidator();\r\n    }\r\n\r\n    @Test\r\n    public void whenMoreThanThreeIntegerDigits_thenShouldGiveConstraintViolations() {\r\n        Invoice invoice = new Invoice(new BigDecimal(\"1021.21\"), \"Book purchased\");\r\n        Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n        assertThat(violations).hasSize(1);\r\n        assertThat(violations)\r\n            .extracting(\"message\")\r\n            .containsOnly(\"numeric value out of bounds (<3 digits>.<2 digits> expected)\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenLessThanThreeIntegerDigits_thenShouldNotGiveConstraintViolations() {\r\n    Invoice invoice = new Invoice(new BigDecimal(\"10.21\"), \"Book purchased\");\r\n    Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n    assertThat(violations).isEmpty();\r\n}\r\n```","```\r\n@Test\r\npublic void whenTwoFractionDigits_thenShouldNotGiveConstraintViolations() {\r\n    Invoice invoice = new Invoice(new BigDecimal(\"99.99\"), \"Book purchased\");\r\n    Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n    assertThat(violations).isEmpty();\r\n}\r\n\r\n@Test\r\npublic void whenMoreThanTwoFractionDigits_thenShouldGiveConstraintViolations() {\r\n    Invoice invoice = new Invoice(new BigDecimal(\"99.999\"), \"Book purchased\");\r\n    Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n    assertThat(violations).hasSize(1);\r\n    assertThat(violations)\r\n        .extracting(\"message\")\r\n        .containsOnly(\"numeric value out of bounds (<3 digits>.<2 digits> expected)\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenPriceIsZero_thenShouldGiveConstraintViolations() {\r\n    Invoice invoice = new Invoice(new BigDecimal(\"0.00\"), \"Book purchased\");\r\n    Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n    assertThat(violations).hasSize(1);\r\n    assertThat(violations)\r\n        .extracting(\"message\")\r\n        .containsOnly(\"must be greater than 0.0\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenPriceIsGreaterThanZero_thenShouldNotGiveConstraintViolations() {\r\n    Invoice invoice = new Invoice(new BigDecimal(\"100.50\"), \"Book purchased\");\r\n    Set<ConstraintViolation<Invoice>> violations = validator.validate(invoice);\r\n    assertThat(violations).isEmpty();\r\n}\r\n```"]