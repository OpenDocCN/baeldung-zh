["```\r\nString[] intro = new String[] { \"once\", \"upon\", \"a\", \"time\" };\r\nString[] abridgement = Arrays.copyOfRange(storyIntro, 0, 3); \r\n\r\nassertArrayEquals(new String[] { \"once\", \"upon\", \"a\" }, abridgement); \r\nassertFalse(Arrays.equals(intro, abridgement));\r\n```","```\r\nString[] revised = Arrays.copyOf(intro, 3);\r\nString[] expanded = Arrays.copyOf(intro, 5);\r\n\r\nassertArrayEquals(Arrays.copyOfRange(intro, 0, 3), revised);\r\nassertNull(expanded[4]);\r\n```","```\r\nString[] stutter = new String[3];\r\nArrays.fill(stutter, \"once\");\r\n\r\nassertTrue(Stream.of(stutter)\r\n  .allMatch(el -> \"once\".equals(el));\r\n```","```\r\nassertTrue(\r\n  Arrays.equals(new String[] { \"once\", \"upon\", \"a\", \"time\" }, intro));\r\nassertFalse(\r\n  Arrays.equals(new String[] { \"once\", \"upon\", \"a\", null }, intro));\r\n```","```\r\nObject[] story = new Object[] \r\n  { intro, new String[] { \"chapter one\", \"chapter two\" }, end };\r\nObject[] copy = new Object[] \r\n  { intro, new String[] { \"chapter one\", \"chapter two\" }, end };\r\n\r\nassertTrue(Arrays.deepEquals(story, copy));\r\nassertFalse(Arrays.equals(story, copy));\r\n```","```\r\nObject[] looping = new Object[]{ intro, intro }; \r\nint hashBefore = Arrays.hashCode(looping);\r\nint deepHashBefore = Arrays.deepHashCode(looping);\r\n```","```\r\nintro[3] = null;\r\nint hashAfter = Arrays.hashCode(looping); \r\n```","```\r\nint deepHashAfter = Arrays.deepHashCode(looping);\r\n```","```\r\nassertEquals(hashAfter, hashBefore);\r\nassertNotEquals(deepHashAfter, deepHashBefore); \r\n```","```\r\nString[] sorted = Arrays.copyOf(intro, 4);\r\nArrays.sort(sorted);\r\n\r\nassertArrayEquals(\r\n  new String[]{ \"a\", \"once\", \"time\", \"upon\" }, \r\n  sorted);\r\n```","```\r\nint exact = Arrays.binarySearch(sorted, \"time\");\r\nint caseInsensitive = Arrays.binarySearch(sorted, \"TiMe\", String::compareToIgnoreCase);\r\n\r\nassertEquals(\"time\", sorted[exact]);\r\nassertEquals(2, exact);\r\nassertEquals(exact, caseInsensitive);\r\n```","```\r\nAssert.assertEquals(Arrays.stream(intro).count(), 4);\r\n\r\nexception.expect(ArrayIndexOutOfBoundsException.class);\r\nArrays.stream(intro, 2, 1).count();\r\n```","```\r\nassertEquals(\"[once, upon, a, time]\", Arrays.toString(storyIntro)); \r\n```","```\r\nassertEquals(\r\n  \"[[once, upon, a, time], [chapter one, chapter two], [the, end]]\",\r\n  Arrays.deepToString(story));\r\n```","```\r\nList<String> rets = Arrays.asList(storyIntro);\r\n\r\nassertTrue(rets.contains(\"upon\"));\r\nassertTrue(rets.contains(\"time\"));\r\nassertEquals(rets.size(), 4);\r\n```","```\r\nString[] longAgo = new String[4];\r\nArrays.setAll(longAgo, i -> this.getWord(i)); \r\nassertArrayEquals(longAgo, new String[]{\"a\",\"long\",\"time\",\"ago\"});\r\n```","```\r\nint[] arr = new int[] { 1, 2, 3, 4};\r\nArrays.parallelPrefix(arr, (left, right) -> left + right);\r\nassertThat(arr, is(new int[] { 1, 3, 6, 10}));\r\n```","```\r\nint[] arri = new int[] { 1, 2, 3, 4, 5 };\r\nArrays.parallelPrefix(arri, 1, 4, (left, right) -> left + right);\r\nassertThat(arri, is(new int[] { 1, 2, 5, 9, 5 }));\r\n```","```\r\nint nonassociativeFunc(int left, int right) {\r\n    return left + right*left;\r\n}\r\n```","```\r\n@Test\r\npublic void whenPrefixNonAssociative_thenError() {\r\n    boolean consistent = true;\r\n    Random r = new Random();\r\n    for (int k = 0; k < 100_000; k++) {\r\n        int[] arrA = r.ints(100, 1, 5).toArray();\r\n        int[] arrB = Arrays.copyOf(arrA, arrA.length);\r\n\r\n        Arrays.parallelPrefix(arrA, this::nonassociativeFunc);\r\n\r\n        for (int i = 1; i < arrB.length; i++) {\r\n            arrB[i] = nonassociativeFunc(arrB[i - 1], arrB[i]);\r\n        }\r\n\r\n        consistent = Arrays.equals(arrA, arrB);\r\n        if(!consistent) break;\r\n    }\r\n    assertFalse(consistent);\r\n}\r\n```","```\r\nBenchmark                      Mode        Cnt       Score   Error        Units\r\nlargeArrayLoopSum             thrpt         5        9.428 ± 0.075        ops/s\r\nlargeArrayParallelPrefixSum   thrpt         5       15.235 ± 0.075        ops/s\r\n\r\nBenchmark                     Mode         Cnt       Score   Error        Units\r\nlargeArrayLoopSum             avgt          5      105.825 ± 0.846        ops/s\r\nlargeArrayParallelPrefixSum   avgt          5       65.676 ± 0.828        ops/s\r\n```","```\r\n@Benchmark\r\npublic void largeArrayLoopSum(BigArray bigArray, Blackhole blackhole) {\r\n  for (int i = 0; i < ARRAY_SIZE - 1; i++) {\r\n    bigArray.data[i + 1] += bigArray.data[i];\r\n  }\r\n  blackhole.consume(bigArray.data);\r\n}\r\n\r\n@Benchmark\r\npublic void largeArrayParallelPrefixSum(BigArray bigArray, Blackhole blackhole) {\r\n  Arrays.parallelPrefix(bigArray.data, (left, right) -> left + right);\r\n  blackhole.consume(bigArray.data);\r\n}\r\n```"]