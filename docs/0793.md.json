["```\r\nstatic Runnable RUNNABLE = () -> {\r\n    try {\r\n        System.out.println(\"launching runnable\");\r\n        Thread.sleep(1000);\r\n    } catch (InterruptedException e) {\r\n    }\r\n};\r\n```","```\r\nList<Runnable> runnables = IntStream.range(0, 5)\r\n    .mapToObj(x -> RUNNABLE)\r\n    .collect(Collectors.toList());\r\n```","```\r\nCompletableFuture<?>[] completableFutures = runnables.stream()\r\n    .map(CompletableFuture::runAsync)\r\n    .toArray(CompletableFuture<?>[]::new);\r\n```","```\r\nboolean isEveryRunnableDone = CompletableFuture.allOf(completableFutures)\r\n    .isDone();\r\n```","```\r\nThreadPoolExecutor executor = (ThreadPoolExecutor) Executors.newFixedThreadPool(5);\r\nrunnables.forEach(executor::execute);\r\n```","```\r\nint numberOfActiveThreads = executor.getActiveCount();\r\n```","```\r\nexecutor.shutdown();\r\n```","```\r\nboolean isEveryRunnableDome = executor.awaitTermination(1000, TimeUnit.MILLISECONDS);\r\n```"]