["```\r\n<dependency>\r\n    <groupId>org.springframework.kafka</groupId>\r\n    <artifactId>spring-kafka</artifactId>\r\n    <version>2.7.2</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.kafka</groupId>\r\n    <artifactId>spring-kafka-test</artifactId>\r\n    <version>2.6.3.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>kafka</artifactId>\r\n    <version>1.15.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\npublic class KafkaProducerConsumerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(KafkaProducerConsumerApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class KafkaProducer {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaProducer.class);\r\n\r\n    @Autowired\r\n    private KafkaTemplate<String, String> kafkaTemplate;\r\n\r\n    public void send(String topic, String payload) {\r\n        LOGGER.info(\"sending payload='{}' to topic='{}'\", payload, topic);\r\n        kafkaTemplate.send(topic, payload);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class KafkaConsumer {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(KafkaConsumer.class);\r\n\r\n    private CountDownLatch latch = new CountDownLatch(1);\r\n    private String payload;\r\n\r\n    @KafkaListener(topics = \"${test.topic}\")\r\n    public void receive(ConsumerRecord<?, ?> consumerRecord) {\r\n        LOGGER.info(\"received payload='{}'\", consumerRecord.toString());\r\n        payload = consumerRecord.toString();\r\n        latch.countDown();\r\n    }\r\n\r\n    public void resetLatch() {\r\n        latch = new CountDownLatch(1);\r\n    }\r\n\r\n    // other getters\r\n}\r\n```","```\r\nspring:\r\n  kafka:\r\n    consumer:\r\n      auto-offset-reset: earliest\r\n      group-id: baeldung\r\ntest:\r\n  topic: embedded-test-topic\r\n```","```\r\n@SpringBootTest\r\n@DirtiesContext\r\n@EmbeddedKafka(partitions = 1, brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"port=9092\" })\r\nclass EmbeddedKafkaIntegrationTest {\r\n\r\n    @Autowired\r\n    private KafkaConsumer consumer;\r\n\r\n    @Autowired\r\n    private KafkaProducer producer;\r\n\r\n    @Value(\"${test.topic}\")\r\n    private String topic;\r\n\r\n    @Test\r\n    public void givenEmbeddedKafkaBroker_whenSendingWithSimpleProducer_thenMessageReceived() \r\n      throws Exception {\r\n        String data = \"Sending with our own simple KafkaProducer\";\r\n\r\n        producer.send(topic, data);\r\n\r\n        boolean messageConsumed = consumer.getLatch().await(10, TimeUnit.SECONDS);\r\n        assertTrue(messageConsumed);\r\n        assertThat(consumer.getPayload(), containsString(data));\r\n    }\r\n}\r\n```","```\r\n...\r\n12:45:35.099 [main] INFO  c.b.kafka.embedded.KafkaProducer -\r\n  sending payload='Sending with our own simple KafkaProducer' to topic='embedded-test-topic'\r\n...\r\n12:45:35.103 [org.springframework.kafka.KafkaListenerEndpointContainer#0-0-C-1]\r\n  INFO  c.b.kafka.embedded.KafkaConsumer - received payload=\r\n  'ConsumerRecord(topic = embedded-test-topic, partition = 0, leaderEpoch = 0, offset = 1,\r\n  CreateTime = 1605267935099, serialized key size = -1, \r\n  serialized value size = 41, headers = RecordHeaders(headers = [], isReadOnly = false),\r\n  key = null, value = Sending with our own simple KafkaProducer key)'\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@Import(com.baeldung.kafka.testcontainers.KafkaTestContainersLiveTest.KafkaTestContainersConfiguration.class)\r\n@SpringBootTest(classes = KafkaProducerConsumerApplication.class)\r\n@DirtiesContext\r\npublic class KafkaTestContainersLiveTest {\r\n\r\n    @ClassRule\r\n    public static KafkaContainer kafka = \r\n      new KafkaContainer(DockerImageName.parse(\"confluentinc/cp-kafka:5.4.3\"));\r\n\r\n    @Autowired\r\n    private KafkaConsumer consumer;\r\n\r\n    @Autowired\r\n    private KafkaProducer producer;\r\n\r\n    @Value(\"${test.topic}\")\r\n    private String topic;\r\n\r\n    @Test\r\n    public void givenKafkaDockerContainer_whenSendingWithSimpleProducer_thenMessageReceived() \r\n      throws Exception {\r\n        String data = \"Sending with our own simple KafkaProducer\";\r\n\r\n        producer.send(topic, data);\r\n\r\n        boolean messageConsumed = consumer.getLatch().await(10, TimeUnit.SECONDS);\r\n\r\n        assertTrue(messageConsumed);\r\n        assertThat(consumer.getPayload(), containsString(data));\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic Map<String, Object> consumerConfigs() {\r\n    Map<String, Object> props = new HashMap<>();\r\n    props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\r\n    props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\r\n    props.put(ConsumerConfig.GROUP_ID_CONFIG, \"baeldung\");\r\n    // more standard configuration\r\n    return props;\r\n}\r\n\r\n@Bean\r\npublic ProducerFactory<String, String> producerFactory() {\r\n    Map<String, Object> configProps = new HashMap<>();\r\n    configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\r\n    // more standard configuration\r\n    return new DefaultKafkaProducerFactory<>(configProps);\r\n}\r\n```","```\r\nbootstrap.servers = [PLAINTEXT://localhost:32789]\r\n```","```\r\n13:33:10.396 [main] INFO  ? [confluentinc/cp-kafka:5.4.3]\r\n  - Creating container for image: confluentinc/cp-kafka:5.4.3\r\n13:33:10.454 [main] INFO  ? [confluentinc/cp-kafka:5.4.3]\r\n  - Starting container with ID: b22b752cee2e9e9e6ade38e46d0c6d881ad941d17223bda073afe4d2fe0559c3\r\n13:33:10.785 [main] INFO  ? [confluentinc/cp-kafka:5.4.3]\r\n  - Container confluentinc/cp-kafka:5.4.3 is starting: b22b752cee2e9e9e6ade38e46d0c6d881ad941d17223bda073afe4d2fe0559c3\r\n```"]