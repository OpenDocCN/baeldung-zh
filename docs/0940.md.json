["```\r\n@Component(\"customAuthenticationEntryPoint\")\r\npublic class CustomAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n\r\n    @Override\r\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) \r\n      throws IOException, ServletException {\r\n\r\n        RestError re = new RestError(HttpStatus.UNAUTHORIZED.toString(), \"Authentication failed\");\r\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\r\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\r\n        OutputStream responseStream = response.getOutputStream();\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        mapper.writeValue(responseStream, re);\r\n        responseStream.flush();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class CustomSecurityConfig {\r\n\r\n    @Autowired\r\n    @Qualifier(\"customAuthenticationEntryPoint\")\r\n    AuthenticationEntryPoint authEntryPoint;\r\n\r\n    @Bean\r\n    public UserDetailsService userDetailsService() {\r\n        UserDetails admin = User.withUsername(\"admin\")\r\n            .password(\"password\")\r\n            .roles(\"ADMIN\")\r\n            .build();\r\n        InMemoryUserDetailsManager userDetailsManager = new InMemoryUserDetailsManager();\r\n        userDetailsManager.createUser(admin);\r\n        return userDetailsManager;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.requestMatchers()\r\n            .antMatchers(\"/login\")\r\n            .and()\r\n            .authorizeRequests()\r\n            .anyRequest()\r\n            .hasRole(\"ADMIN\")\r\n            .and()\r\n            .httpBasic()\r\n            .and()\r\n            .exceptionHandling()\r\n            .authenticationEntryPoint(authEntryPoint);\r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\n@PostMapping(value = \"/login\", produces = MediaType.APPLICATION_JSON_VALUE)\r\npublic ResponseEntity<RestResponse> login() {\r\n    return ResponseEntity.ok(new RestResponse(\"Success\"));\r\n} \r\n```","```\r\n@Test\r\n@WithMockUser(username = \"admin\", roles = { \"ADMIN\" })\r\npublic void whenUserAccessLogin_shouldSucceed() throws Exception {\r\n    mvc.perform(formLogin(\"/login\").user(\"username\", \"admin\")\r\n      .password(\"password\", \"password\")\r\n      .acceptMediaType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk());\r\n} \r\n```","```\r\n@Test\r\npublic void whenUserAccessWithWrongCredentialsWithDelegatedEntryPoint_shouldFail() throws Exception {\r\n    RestError re = new RestError(HttpStatus.UNAUTHORIZED.toString(), \"Authentication failed\");\r\n    mvc.perform(formLogin(\"/login\").user(\"username\", \"admin\")\r\n      .password(\"password\", \"wrong\")\r\n      .acceptMediaType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isUnauthorized())\r\n      .andExpect(jsonPath(\"$.errorMessage\", is(re.getErrorMessage())));\r\n} \r\n```","```\r\n@Component(\"delegatedAuthenticationEntryPoint\")\r\npublic class DelegatedAuthenticationEntryPoint implements AuthenticationEntryPoint {\r\n\r\n    @Autowired\r\n    @Qualifier(\"handlerExceptionResolver\")\r\n    private HandlerExceptionResolver resolver;\r\n\r\n    @Override\r\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) \r\n      throws IOException, ServletException {\r\n        resolver.resolveException(request, response, null, authException);\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class DefaultExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler({ AuthenticationException.class })\r\n    @ResponseBody\r\n    public ResponseEntity<RestError> handleAuthenticationException(Exception ex) {\r\n\r\n        RestError re = new RestError(HttpStatus.UNAUTHORIZED.toString(), \r\n          \"Authentication failed at controller advice\");\r\n        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(re);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class DelegatedSecurityConfig {\r\n\r\n    @Autowired\r\n    @Qualifier(\"delegatedAuthenticationEntryPoint\")\r\n    AuthenticationEntryPoint authEntryPoint;\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.requestMatchers()\r\n            .antMatchers(\"/login-handler\")\r\n            .and()\r\n            .authorizeRequests()\r\n            .anyRequest()\r\n            .hasRole(\"ADMIN\")\r\n            .and()\r\n            .httpBasic()\r\n            .and()\r\n            .exceptionHandling()\r\n            .authenticationEntryPoint(authEntryPoint);\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public InMemoryUserDetailsManager userDetailsService() {\r\n        UserDetails admin = User.withUsername(\"admin\")\r\n            .password(\"password\")\r\n            .roles(\"ADMIN\")\r\n            .build();\r\n        return new InMemoryUserDetailsManager(admin);\r\n    }\r\n}\r\n```","```\r\n@PostMapping(value = \"/login-handler\", produces = MediaType.APPLICATION_JSON_VALUE)\r\npublic ResponseEntity<RestResponse> loginWithExceptionHandler() {\r\n    return ResponseEntity.ok(new RestResponse(\"Success\"));\r\n} \r\n```","```\r\n@Test\r\n@WithMockUser(username = \"admin\", roles = { \"ADMIN\" })\r\npublic void whenUserAccessLogin_shouldSucceed() throws Exception {\r\n    mvc.perform(formLogin(\"/login-handler\").user(\"username\", \"admin\")\r\n      .password(\"password\", \"password\")\r\n      .acceptMediaType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk());\r\n}\r\n\r\n@Test\r\npublic void whenUserAccessWithWrongCredentialsWithDelegatedEntryPoint_shouldFail() throws Exception {\r\n    RestError re = new RestError(HttpStatus.UNAUTHORIZED.toString(), \"Authentication failed at controller advice\");\r\n    mvc.perform(formLogin(\"/login-handler\").user(\"username\", \"admin\")\r\n      .password(\"password\", \"wrong\")\r\n      .acceptMediaType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isUnauthorized())\r\n      .andExpect(jsonPath(\"$.errorMessage\", is(re.getErrorMessage())));\r\n} \r\n```"]