["```\r\n@FunctionalInterface\r\npublic interface Foo {\r\n    String method(String string);\r\n}\r\n```","```\r\npublic String add(String string, Foo foo) {\r\n    return foo.method(string);\r\n}\r\n```","```\r\nFoo foo = parameter -> parameter + \" from lambda\";\r\nString result = useFoo.add(\"Message \", foo);\r\n```","```\r\npublic String add(String string, Function<String, String> fn) {\r\n    return fn.apply(string);\r\n}\r\n```","```\r\nFunction<String, String> fn = \r\n  parameter -> parameter + \" from lambda\";\r\nString result = useFoo.add(\"Message \", fn);\r\n```","```\r\n@FunctionalInterface\r\npublic interface Foo {\r\n    String method();\r\n}\r\n```","```\r\npublic interface Foo {\r\n    String method();\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface Foo {\r\n    String method(String string);\r\n    default void defaultMethod() {}\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface FooExtended extends Baz, Bar {}\r\n\r\n@FunctionalInterface\r\npublic interface Baz {\t\r\n    String method(String string);\t\r\n    default String defaultBaz() {}\t\t\r\n}\r\n\r\n@FunctionalInterface\r\npublic interface Bar {\t\r\n    String method(String string);\t\r\n    default String defaultBar() {}\t\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface Baz {\r\n    String method(String string);\r\n    default String defaultBaz() {}\r\n    default String defaultCommon(){}\r\n}\r\n\r\n@FunctionalInterface\r\npublic interface Bar {\r\n    String method(String string);\r\n    default String defaultBar() {}\r\n    default String defaultCommon() {}\r\n}\r\n```","```\r\ninterface FooExtended inherits unrelated defaults for defaultCommon() from types Baz and Bar...\r\n```","```\r\n@FunctionalInterface\r\npublic interface FooExtended extends Baz, Bar {\r\n    @Override\r\n    default String defaultCommon() {\r\n        return Bar.super.defaultCommon();\r\n    }\r\n}\r\n```","```\r\nFoo foo = parameter -> parameter + \" from Foo\";\r\n```","```\r\nFoo fooByIC = new Foo() {\r\n    @Override\r\n    public String method(String string) {\r\n        return string + \" from Foo\";\r\n    }\r\n}; \r\n```","```\r\npublic interface Processor {\r\n    String process(Callable<String> c) throws Exception;\r\n    String process(Supplier<String> s);\r\n}\r\n\r\npublic class ProcessorImpl implements Processor {\r\n    @Override\r\n    public String process(Callable<String> c) throws Exception {\r\n        // implementation details\r\n    }\r\n\r\n    @Override\r\n    public String process(Supplier<String> s) {\r\n        // implementation details\r\n    }\r\n}\r\n```","```\r\nString result = processor.process(() -> \"abc\");\r\n```","```\r\nreference to process is ambiguous\r\nboth method process(java.util.concurrent.Callable<java.lang.String>) \r\nin com.baeldung.java8.lambda.tips.ProcessorImpl \r\nand method process(java.util.function.Supplier<java.lang.String>) \r\nin com.baeldung.java8.lambda.tips.ProcessorImpl match\r\n```","```\r\nString processWithCallable(Callable<String> c) throws Exception;\r\n\r\nString processWithSupplier(Supplier<String> s);\r\n```","```\r\nString result = processor.process((Supplier<String>) () -> \"abc\");\r\n```","```\r\nprivate String value = \"Enclosing scope value\";\r\n```","```\r\npublic String scopeExperiment() {\r\n    Foo fooIC = new Foo() {\r\n        String value = \"Inner class value\";\r\n\r\n        @Override\r\n        public String method(String string) {\r\n            return this.value;\r\n        }\r\n    };\r\n    String resultIC = fooIC.method(\"\");\r\n\r\n    Foo fooLambda = parameter -> {\r\n        String value = \"Lambda value\";\r\n        return this.value;\r\n    };\r\n    String resultLambda = fooLambda.method(\"\");\r\n\r\n    return \"Results: resultIC = \" + resultIC + \r\n      \", resultLambda = \" + resultLambda;\r\n}\r\n```","```\r\nFoo foo = parameter -> buildString(parameter);\r\n```","```\r\nprivate String buildString(String parameter) {\r\n    String result = \"Something \" + parameter;\r\n    //many lines of code\r\n    return result;\r\n}\r\n```","```\r\nFoo foo = parameter -> { String result = \"Something \" + parameter; \r\n    //many lines of code \r\n    return result; \r\n};\r\n```","```\r\n(a, b) -> a.toLowerCase() + b.toLowerCase();\r\n```","```\r\n(String a, String b) -> a.toLowerCase() + b.toLowerCase();\r\n```","```\r\na -> a.toLowerCase();\r\n```","```\r\n(a) -> a.toLowerCase();\r\n```","```\r\na -> a.toLowerCase();\r\n```","```\r\na -> {return a.toLowerCase()};\r\n```","```\r\na -> a.toLowerCase();\r\n```","```\r\nString::toLowerCase;\r\n```","```\r\npublic void method() {\r\n    String localVariable = \"Local\";\r\n    Foo foo = parameter -> {\r\n        String localVariable = parameter;\r\n        return localVariable;\r\n    };\r\n}\r\n```","```\r\nVariable 'localVariable' is already defined in the scope.\r\n```","```\r\nint[] total = new int[1];\r\nRunnable r = () -> total[0]++;\r\nr.run();\r\n```"]