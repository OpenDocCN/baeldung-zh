["```\r\n@Configuration\r\n@EnableAuthorizationServer\r\npublic class OAuth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\r\n\r\n    @Override\r\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\r\n        clients.inMemory()\r\n               .withClient(\"fooClientId\")\r\n               .secret(passwordEncoder().encode(\"secret\"))\r\n               .authorizedGrantTypes(\"authorization_code\")\r\n               .scopes(\"foo\", \"read\", \"write\")\r\n               .redirectUris(\"http://localhost:8089/\")\r\n...\r\n```","```\r\n<plugin>\r\n    <groupId>com.github.eirslett</groupId>\r\n    <artifactId>frontend-maven-plugin</artifactId>\r\n    <version>1.6</version>\r\n\r\n    <configuration>\r\n        <nodeVersion>v8.11.3</nodeVersion>\r\n        <npmVersion>6.1.0</npmVersion>\r\n        <workingDirectory>src/main/resources</workingDirectory>\r\n    </configuration>\r\n\r\n    <executions>\r\n        <execution>\r\n            <id>install node and npm</id>\r\n            <goals>\r\n                <goal>install-node-and-npm</goal>\r\n            </goals>\r\n        </execution>\r\n\r\n        <execution>\r\n            <id>npm install</id>\r\n            <goals>\r\n                <goal>npm</goal>\r\n            </goals>\r\n        </execution>\r\n\r\n        <execution>\r\n            <id>npm run build</id>\r\n            <goals>\r\n                <goal>npm</goal>\r\n            </goals>\r\n\r\n            <configuration>\r\n                <arguments>run build</arguments>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule }   from '@angular/router';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home.component';\r\nimport { FooComponent } from './foo.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    FooComponent    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot([\r\n     { path: '', component: HomeComponent, pathMatch: 'full' }], {onSameUrlNavigation: 'reload'})\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n```","```\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `<nav class=\"navbar navbar-default\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <a class=\"navbar-brand\" href=\"/\">Spring Security Oauth - Authorization Code</a>\r\n    </div>\r\n  </div>\r\n</nav>\r\n<router-outlet></router-outlet>`\r\n})\r\n\r\nexport class AppComponent {}\r\n```","```\r\nimport {Component} from '@angular/core';\r\nimport {AppService} from './app.service'\r\n\r\n@Component({\r\n    selector: 'home-header',\r\n    providers: [AppService],\r\n  template: `<div class=\"container\" >\r\n    <button *ngIf=\"!isLoggedIn\" class=\"btn btn-primary\" (click)=\"login()\" type=\"submit\">Login</button>\r\n    <div *ngIf=\"isLoggedIn\" class=\"content\">\r\n        <span>Welcome !!</span>\r\n        <a class=\"btn btn-default pull-right\"(click)=\"logout()\" href=\"#\">Logout</a>\r\n        <br/>\r\n        <foo-details></foo-details>\r\n    </div>\r\n</div>`\r\n})\r\n\r\nexport class HomeComponent {\r\n     public isLoggedIn = false;\r\n\r\n    constructor(\r\n        private _service:AppService){}\r\n\r\n    ngOnInit(){\r\n        this.isLoggedIn = this._service.checkCredentials();    \r\n        let i = window.location.href.indexOf('code');\r\n        if(!this.isLoggedIn && i != -1){\r\n            this._service.retrieveToken(window.location.href.substring(i + 5));\r\n        }\r\n    }\r\n\r\n    login() {\r\n        window.location.href = 'http://localhost:8081/spring-security-oauth-server/oauth/authorize?response_type=code&client;_id=' + this._service.clientId + '&redirect;_uri='+ this._service.redirectUri;\r\n    }\r\n\r\n    logout() {\r\n        this._service.logout();\r\n    }\r\n}\r\n```","```\r\nimport { Component } from '@angular/core';\r\nimport {AppService, Foo} from './app.service'\r\n\r\n@Component({\r\n  selector: 'foo-details',\r\n  providers: [AppService],  \r\n  template: `<div class=\"container\">\r\n    <h1 class=\"col-sm-12\">Foo Details</h1>\r\n    <div class=\"col-sm-12\">\r\n        <label class=\"col-sm-3\">ID</label> <span>{{foo.id}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <label class=\"col-sm-3\">Name</label> <span>{{foo.name}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <button class=\"btn btn-primary\" (click)=\"getFoo()\" type=\"submit\">New Foo</button>        \r\n    </div>\r\n</div>`\r\n})\r\n\r\nexport class FooComponent {\r\n    public foo = new Foo(1,'sample foo');\r\n    private foosUrl = 'http://localhost:8082/spring-security-oauth-resource/foos/';  \r\n\r\n    constructor(private _service:AppService) {}\r\n\r\n    getFoo(){\r\n        this._service.getResource(this.foosUrl+this.foo.id)\r\n         .subscribe(\r\n            data => this.foo = data,\r\n            error =>  this.foo.name = 'Error');\r\n    }\r\n}\r\n```","```\r\nimport {Injectable} from '@angular/core';\r\nimport { Cookie } from 'ng2-cookies';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/catch';\r\nimport 'rxjs/add/operator/map';\r\n\r\nexport class Foo {\r\n  constructor(\r\n    public id: number,\r\n    public name: string) { }\r\n} \r\n\r\n@Injectable()\r\nexport class AppService {\r\n   public clientId = 'fooClientId';\r\n   public redirectUri = 'http://localhost:8089/';\r\n\r\n  constructor(\r\n    private _http: HttpClient){}\r\n\r\n  retrieveToken(code){\r\n    let params = new URLSearchParams();   \r\n    params.append('grant_type','authorization_code');\r\n    params.append('client_id', this.clientId);\r\n    params.append('redirect_uri', this.redirectUri);\r\n    params.append('code',code);\r\n\r\n    let headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8', 'Authorization': 'Basic '+btoa(this.clientId+\":secret\")});\r\n     this._http.post('http://localhost:8081/spring-security-oauth-server/oauth/token', params.toString(), { headers: headers })\r\n    .subscribe(\r\n      data => this.saveToken(data),\r\n      err => alert('Invalid Credentials')\r\n    ); \r\n  }\r\n\r\n  saveToken(token){\r\n    var expireDate = new Date().getTime() + (1000 * token.expires_in);\r\n    Cookie.set(\"access_token\", token.access_token, expireDate);\r\n    console.log('Obtained Access token');\r\n    window.location.href = 'http://localhost:8089';\r\n  }\r\n\r\n  getResource(resourceUrl) : Observable<any>{\r\n    var headers = new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8', 'Authorization': 'Bearer '+Cookie.get('access_token')});\r\n    return this._http.get(resourceUrl,{ headers: headers })\r\n                   .catch((error:any) => Observable.throw(error.json().error || 'Server error'));\r\n  }\r\n\r\n  checkCredentials(){\r\n    return Cookie.check('access_token');\r\n  } \r\n\r\n  logout() {\r\n    Cookie.delete('access_token');\r\n    window.location.reload();\r\n  }\r\n}\r\n```","```\r\nmvn clean install\r\n```","```\r\ncd src/main/resources\r\n```","```\r\nnpm start\r\n```"]