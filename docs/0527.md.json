["```\r\ntype Event {\r\n  id: ID!\r\n  name: String\r\n  where: String\r\n  when: String\r\n  description: String\r\n  # Paginate through all comments belonging to an individual post.\r\n  comments(limit: Int, nextToken: String): CommentConnection\r\n}\r\n```","```\r\n <dependency> \r\n      <groupId>org.springframework.boot</groupId> \r\n      <artifactId>spring-boot-starter-webflux</artifactId> \r\n    </dependency>\r\n```","```\r\nWebClient.RequestBodySpec requestBodySpec = WebClient\r\n    .builder()\r\n    .baseUrl(apiUrl)\r\n    .defaultHeader(\"x-api-key\", apiKey)\r\n    .build()\r\n    .method(HttpMethod.POST)\r\n    .uri(\"/graphql\");\r\n```","```\r\nMap<String, Object> requestBody = new HashMap<>();\r\nrequestBody.put(\"query\", \"query ListEvents {\" \r\n  + \" listEvents {\"\r\n  + \"   items {\"\r\n  + \"     id\"\r\n  + \"     name\"\r\n  + \"     where\"\r\n  + \"     when\"\r\n  + \"     description\"\r\n  + \"   }\"\r\n  + \" }\"\r\n  + \"}\");\r\n```","```\r\nWebClient.ResponseSpec response = requestBodySpec\r\n    .body(BodyInserters.fromValue(requestBody))\r\n    .accept(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)\r\n    .acceptCharset(StandardCharsets.UTF_8)\r\n    .retrieve(); \r\n```","```\r\nString bodyString = response.bodyToMono(String.class).block();\r\nassertNotNull(bodyString);\r\nassertTrue(bodyString.contains(\"My First Event\"));\r\n```","```\r\nString queryString = \"mutation add {\"\r\n  + \"    createEvent(\"\r\n  + \"        name:\\\"My added GraphQL event\\\"\"\r\n  + \"        where:\\\"Day 2\\\"\"\r\n  + \"        when:\\\"Saturday night\\\"\"\r\n  + \"        description:\\\"Studying GraphQL\\\"\"\r\n  + \"    ){\"\r\n  + \"        id\"\r\n  + \"        name\"\r\n  + \"        description\"\r\n  + \"    }\"\r\n  + \"}\";\r\n\r\nrequestBody.put(\"query\", queryString);\r\n```","```\r\nassertNotNull(bodyString);\r\nassertTrue(bodyString.contains(\"My added GraphQL event\"));\r\nassertFalse(bodyString.contains(\"where\"));\r\n```"]