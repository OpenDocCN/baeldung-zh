["```\r\n@Test\r\npublic void givenUsingTimer_whenSchedulingTaskOnce_thenCorrect() {\r\n    TimerTask task = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on: \" + new Date() + \"n\" +\r\n              \"Thread's name: \" + Thread.currentThread().getName());\r\n        }\r\n    };\r\n    Timer timer = new Timer(\"Timer\");\r\n\r\n    long delay = 1000L;\r\n    timer.schedule(task, delay);\r\n}\r\n```","```\r\npublic class DatabaseMigrationTask extends TimerTask {\r\n    private List<String> oldDatabase;\r\n    private List<String> newDatabase;\r\n\r\n    public DatabaseMigrationTask(List<String> oldDatabase, List<String> newDatabase) {\r\n        this.oldDatabase = oldDatabase;\r\n        this.newDatabase = newDatabase;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        newDatabase.addAll(oldDatabase);\r\n    }\r\n}\r\n```","```\r\nList<String> oldDatabase = Arrays.asList(\"Harrison Ford\", \"Carrie Fisher\", \"Mark Hamill\");\r\nList<String> newDatabase = new ArrayList<>();\r\n\r\nLocalDateTime twoSecondsLater = LocalDateTime.now().plusSeconds(2);\r\nDate twoSecondsLaterAsDate = Date.from(twoSecondsLater.atZone(ZoneId.systemDefault()).toInstant());\r\n\r\nnew Timer().schedule(new DatabaseMigrationTask(oldDatabase, newDatabase), twoSecondsLaterAsDate);\r\n```","```\r\nwhile (LocalDateTime.now().isBefore(twoSecondsLater)) {\r\n    assertThat(newDatabase).isEmpty();\r\n    Thread.sleep(500);\r\n}\r\nassertThat(newDatabase).containsExactlyElementsOf(oldDatabase);\r\n```","```\r\n0s     1s    2s     3s           5s\r\n|--T1--|\r\n|-----2s-----|--1s--|-----T2-----|\r\n|-----2s-----|--1s--|-----2s-----|--T3--|\r\n```","```\r\n0s     1s    2s     3s    4s\r\n|--T1--|       \r\n|-----2s-----|--1s--|-----T2-----|\r\n|-----2s-----|-----2s-----|--T3--|\r\n```","```\r\npublic class NewsletterTask extends TimerTask {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Email sent at: \" \r\n          + LocalDateTime.ofInstant(Instant.ofEpochMilli(scheduledExecutionTime()), \r\n          ZoneId.systemDefault()));\r\n    }\r\n}\r\n```","```\r\nnew Timer().schedule(new NewsletterTask(), 0, 1000);\r\n\r\nfor (int i = 0; i < 3; i++) {\r\n    Thread.sleep(1000);\r\n}\r\n```","```\r\nEmail sent at: 2020-01-01T10:50:30.860\r\nEmail sent at: 2020-01-01T10:50:31.860\r\nEmail sent at: 2020-01-01T10:50:32.861\r\nEmail sent at: 2020-01-01T10:50:33.861\r\n```","```\r\nnew Timer().scheduleAtFixedRate(new NewsletterTask(), 0, 1000);\r\n\r\nfor (int i = 0; i < 3; i++) {\r\n    Thread.sleep(1000);\r\n}\r\n```","```\r\nEmail sent at: 2020-01-01T10:55:03.805\r\nEmail sent at: 2020-01-01T10:55:04.805\r\nEmail sent at: 2020-01-01T10:55:05.805\r\nEmail sent at: 2020-01-01T10:55:06.805\r\n```","```\r\n@Test\r\npublic void givenUsingTimer_whenSchedulingDailyTask_thenCorrect() {\r\n    TimerTask repeatedTask = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on \" + new Date());\r\n        }\r\n    };\r\n    Timer timer = new Timer(\"Timer\");\r\n\r\n    long delay = 1000L;\r\n    long period = 1000L * 60L * 60L * 24L;\r\n    timer.scheduleAtFixedRate(repeatedTask, delay, period);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingTimer_whenCancelingTimerTask_thenCorrect()\r\n  throws InterruptedException {\r\n    TimerTask task = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on \" + new Date());\r\n            cancel();\r\n        }\r\n    };\r\n    Timer timer = new Timer(\"Timer\");\r\n\r\n    timer.scheduleAtFixedRate(task, 1000L, 1000L);\r\n\r\n    Thread.sleep(1000L * 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingTimer_whenCancelingTimer_thenCorrect() \r\n  throws InterruptedException {\r\n    TimerTask task = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on \" + new Date());\r\n        }\r\n    };\r\n    Timer timer = new Timer(\"Timer\");\r\n\r\n    timer.scheduleAtFixedRate(task, 1000L, 1000L);\r\n\r\n    Thread.sleep(1000L * 2); \r\n    timer.cancel(); \r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingTimer_whenStoppingThread_thenTimerTaskIsCancelled() \r\n  throws InterruptedException {\r\n    TimerTask task = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on \" + new Date());\r\n            // TODO: stop the thread here\r\n        }\r\n    };\r\n    Timer timer = new Timer(\"Timer\");\r\n\r\n    timer.scheduleAtFixedRate(task, 1000L, 1000L);\r\n\r\n    Thread.sleep(1000L * 2); \r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingExecutorService_whenSchedulingRepeatedTask_thenCorrect() \r\n  throws InterruptedException {\r\n    TimerTask repeatedTask = new TimerTask() {\r\n        public void run() {\r\n            System.out.println(\"Task performed on \" + new Date());\r\n        }\r\n    };\r\n    ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\r\n    long delay  = 1000L;\r\n    long period = 1000L;\r\n    executor.scheduleAtFixedRate(repeatedTask, delay, period, TimeUnit.MILLISECONDS);\r\n    Thread.sleep(delay + period * 3);\r\n    executor.shutdown();\r\n}\r\n```"]