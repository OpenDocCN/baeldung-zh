["```\r\n<dependency>\r\n    <groupId>one.util</groupId>\r\n    <artifactId>streamex</artifactId>\r\n    <version>0.6.5</version>\r\n</dependency>\r\n```","```\r\npublic class User {\r\n    int id;\r\n    String name;\r\n    Role role = new Role();\r\n\r\n    // standard getters, setters, and constructors\r\n}\r\n```","```\r\npublic class Role {\r\n}\r\n```","```\r\nusers.stream()\r\n  .map(User::getName)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<String> userNames = StreamEx.of(users)\r\n  .map(User::getName)\r\n  .toList();\r\n```","```\r\nMap<Role, List<User>> role2users = StreamEx.of(users)\r\n  .groupingBy(User::getRole);\r\n```","```\r\nMap<Role, List<User>> role2users = users.stream()\r\n  .collect(Collectors.groupingBy(User::getRole));\r\n```","```\r\nStreamEx.of(1, 2, 3)\r\n  .joining(\"; \"); // \"1; 2; 3\"\r\n```","```\r\nList usersAndRoles = Arrays.asList(new User(), new Role());\r\nList<Role> roles = StreamEx.of(usersAndRoles)\r\n  .select(Role.class)\r\n  .toList();\r\n```","```\r\nList<String> appendedUsers = StreamEx.of(users)\r\n  .map(User::getName)\r\n  .prepend(\"(none)\")\r\n  .append(\"LAST\")\r\n  .toList();\r\n```","```\r\nfor (String line : StreamEx.of(users).map(User::getName).nonNull()) {\r\n    System.out.println(line);\r\n}\r\n```","```\r\nshort[] src = {1,2,3};\r\nchar[] output = IntStreamEx.of(src)\r\n  .map(x -> x * 5)\r\n  .toCharArray();\r\n```","```\r\npublic double[] getDiffBetweenPairs(double... numbers) {\r\n    return DoubleStreamEx.of(numbers)\r\n      .pairMap((a, b) -> b - a)\r\n      .toArray();\r\n}\r\n```","```\r\nMap<String, Role> nameToRole = new HashMap<>();\r\nnameToRole.put(\"first\", new Role());\r\nnameToRole.put(\"second\", null);\r\nSet<String> nonNullRoles = StreamEx.ofKeys(nameToRole, Objects::nonNull)\r\n  .toSet();\r\n```","```\r\npublic Map<User, List<Role>> transformMap( \r\n    Map<Role, List<User>> role2users) {\r\n    Map<User, List<Role>> users2roles = EntryStream.of(role2users)\r\n     .flatMapValues(List::stream)\r\n     .invert()\r\n     .grouping();\r\n    return users2roles;\r\n}\r\n```","```\r\nMap<String, String> mapToString = EntryStream.of(users2roles)\r\n  .mapKeys(String::valueOf)\r\n  .mapValues(String::valueOf)\r\n  .toMap();\r\n```","```\r\nStreamEx.ofLines(reader)\r\n  .remove(String::isEmpty)\r\n  .forEach(System.out::println);\r\n```"]