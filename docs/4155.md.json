["```\r\npublic void callInsurance(Vehicle vehicle) {\r\n    if (vehicle.isValid()) {\r\n        if (vehicle instanceof Car) {\r\n            callCarInsurance();\r\n        } else {\r\n            delegateInsurance();\r\n        }\r\n    }\r\n}\r\n```","```\r\nCC = E - N + 2P\r\n```","```\r\nString content = null;\r\ntry {\r\n    String lowerCaseString = content.toLowerCase();\r\n} finally {\r\n    throw new IOException();\r\n}\r\n```","```\r\nString content = null;\r\ntry {\r\n    String lowerCaseString = content.toLowerCase();\r\n} finally {\r\n    return;\r\n}\r\n```","```\r\nOutputStream outStream = null;\r\nOutputStream outStream2 = null;\r\ntry {\r\n    outStream = new FileOutputStream(\"test1.txt\");\r\n    outStream2  = new FileOutputStream(\"test2.txt\");\r\n    outStream.write(bytes);\r\n    outStream2.write(bytes);\r\n} catch (IOException e) {\r\n    e.printStackTrace();\r\n} finally {\r\n    try {\r\n        outStream.close();\r\n        outStream2.close();\r\n    } catch (IOException e) {\r\n        // Handling IOException\r\n    }\r\n}\r\n```","```\r\nfinally {\r\n    try {\r\n        outStream.close();\r\n    } catch (IOException e) {\r\n        // Handling IOException\r\n    }\r\n    try {\r\n        outStream2.close();\r\n    } catch (IOException e) {\r\n        // Handling IOException\r\n    }\r\n}\r\n```","```\r\nCar car = new Car();\r\nCar car2 = new Car();\r\nif(car.equals(car2)) {\r\n    logger.info(\"They're equal\");\r\n} else {\r\n    logger.info(\"They're not equal\");\r\n}\r\nif(car.compareTo(car2) == 0) {\r\n    logger.info(\"They're equal\");\r\n} else {\r\n    logger.info(\"They're not equal\");\r\n}\r\n```","```\r\nThey're not equal\r\nThey're equal\r\n```","```\r\nboolean equals(Object o) { \r\n    return compareTo(o) == 0; \r\n}\r\n```","```\r\nCar car = null;\r\ncar.doSomething();\r\n```","```\r\nCar car = null;\r\nif (car != null) {\r\n    car.doSomething();\r\n}\r\n```"]