["```\r\n$ docker run -d --name rabbitmq -p 5672:5672 rabbitmq:3 \r\n```","```\r\n$ docker logs rabbitmq\r\n2018-06-09 13:42:29.718 [info] <0.33.0>\r\n  Application lager started on node [[email protected]](/web/20221126222632/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n// ... some lines omitted\r\n2018-06-09 13:42:33.491 [info] <0.226.0>\r\n Starting RabbitMQ 3.7.5 on Erlang 20.3.5\r\n Copyright (C) 2007-2018 Pivotal Software, Inc.\r\n Licensed under the MPL.  See http://www.rabbitmq.com/\r\n\r\n  ##  ##\r\n  ##  ##      RabbitMQ 3.7.5\\. Copyright (C) 2007-2018 Pivotal Software, Inc.\r\n  ##########  Licensed under the MPL.  See http://www.rabbitmq.com/\r\n  ######  ##\r\n  ##########  Logs: <stdout>\r\n\r\n              Starting broker...\r\n2018-06-09 13:42:33.494 [info] <0.226.0>\r\n node           : [[email protected]](/web/20221126222632/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n home dir       : /var/lib/rabbitmq\r\n config file(s) : /etc/rabbitmq/rabbitmq.conf\r\n cookie hash    : CY9rzUYh03PK3k6DJie09g==\r\n log(s)         : <stdout>\r\n database dir   : /var/lib/rabbitmq/mnesia/[[email protected]](/web/20221126222632/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n\r\n// ... more log lines\r\n```","```\r\n$ docker exec rabbitmq rabbitmqctl status\r\nStatus of node [[email protected]](/web/20221126222632/https://www.baeldung.com/cdn-cgi/l/email-protection) ...\r\n[{pid,299},\r\n {running_applications,\r\n     [{rabbit,\"RabbitMQ\",\"3.7.5\"},\r\n      {rabbit_common,\r\n          \"Modules shared by rabbitmq-server and rabbitmq-erlang-client\",\r\n          \"3.7.5\"},\r\n// ... other info omitted for brevity \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-amqp</artifactId>\r\n    <version>2.0.3.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n    <version>2.0.2.RELEASE</version> \r\n</dependency>\r\n```","```\r\n@Autowired\r\nprivate AmqpAdmin amqpAdmin;\r\n\r\n@Autowired\r\nprivate DestinationsConfig destinationsConfig;\r\n\r\n@PostConstruct\r\npublic void setupQueueDestinations() {\r\n    destinationsConfig.getQueues()\r\n        .forEach((key, destination) -> {\r\n            Exchange ex = ExchangeBuilder.directExchange(\r\n              destination.getExchange())\r\n              .durable(true)\r\n              .build();\r\n            amqpAdmin.declareExchange(ex);\r\n            Queue q = QueueBuilder.durable(\r\n              destination.getRoutingKey())\r\n              .build();\r\n            amqpAdmin.declareQueue(q);\r\n            Binding b = BindingBuilder.bind(q)\r\n              .to(ex)\r\n              .with(destination.getRoutingKey())\r\n              .noargs();\r\n            amqpAdmin.declareBinding(b);\r\n        });\r\n}\r\n```","```\r\n@SpringBootApplication\r\n@EnableConfigurationProperties(DestinationsConfig.class)\r\n@RestController\r\npublic class SpringWebfluxAmqpApplication {\r\n\r\n    // ... other members omitted\r\n\r\n    @Autowired\r\n    private AmqpTemplate amqpTemplate;\r\n\r\n    @PostMapping(value = \"/queue/{name}\")\r\n    public Mono<ResponseEntity<?>> sendMessageToQueue(\r\n      @PathVariable String name, @RequestBody String payload) {\r\n\r\n        DestinationInfo d = destinationsConfig\r\n          .getQueues().get(name);\r\n        if (d == null) {\r\n            return Mono.just(\r\n              ResponseEntity.notFound().build());\r\n        }\r\n\r\n        return Mono.fromCallable(() -> {\r\n            amqpTemplate.convertAndSend(\r\n              d.getExchange(), \r\n              d.getRoutingKey(), \r\n              payload);  \r\n            return ResponseEntity.accepted().build();\r\n        });\r\n    } \r\n```","```\r\n@Component\r\npublic class MessageListenerContainerFactory {\r\n\r\n    @Autowired\r\n    private ConnectionFactory connectionFactory;\r\n\r\n    public MessageListenerContainerFactory() {}\r\n\r\n    public MessageListenerContainer createMessageListenerContainer(String queueName) {\r\n        SimpleMessageListenerContainer mlc = new SimpleMessageListenerContainer(connectionFactory);\r\n        mlc.addQueueNames(queueName);\r\n        return mlc;\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate MessageListenerContainerFactory messageListenerContainerFactory;\r\n\r\n@GetMapping(\r\n  value = \"/queue/{name}\",\r\n  produces = MediaType.TEXT_EVENT_STREAM_VALUE)\r\npublic Flux<?> receiveMessagesFromQueue(@PathVariable String name) {\r\n\r\n    DestinationInfo d = destinationsConfig\r\n      .getQueues()\r\n      .get(name);\r\n    if (d == null) {\r\n        return Flux.just(ResponseEntity.notFound()\r\n          .build());\r\n    }\r\n\r\n    MessageListenerContainer mlc = messageListenerContainerFactory\r\n      .createMessageListenerContainer(d.getRoutingKey());\r\n\r\n    Flux<String> f = Flux.<String> create(emitter -> {\r\n        mlc.setupMessageListener((MessageListener) m -> {\r\n            String payload = new String(m.getBody());\r\n            emitter.next(payload);\r\n        });\r\n        emitter.onRequest(v -> {\r\n            mlc.start();\r\n        });\r\n        emitter.onDispose(() -> {\r\n            mlc.stop();\r\n        });\r\n      });\r\n\r\n    return Flux.interval(Duration.ofSeconds(5))\r\n      .map(v -> \"No news is good news\")\r\n      .mergeWith(f);\r\n}\r\n```","```\r\nspring:\r\n  rabbitmq:\r\n    host: localhost\r\n    port: 5672\r\n    username: guest\r\n    password: guest\r\n\r\ndestinations:\r\n  queues:\r\n    NYSE:\r\n      exchange: nyse\r\n      routing-key: NYSE \r\n```","```\r\n$ curl -v -d \"Test message\" http://localhost:8080/queue/NYSE\r\n* timeout on name lookup is not supported\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n> POST /queue/NYSE HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n> Content-Length: 12\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* upload completely sent off: 12 out of 12 bytes\r\n< HTTP/1.1 202 Accepted\r\n< content-length: 0\r\n<\r\n* Connection #0 to host localhost left intact\r\n```","```\r\n$ docker exec rabbitmq rabbitmqctl list_queues\r\nTimeout: 60.0 seconds ...\r\nListing queues for vhost / ...\r\nNYSE    1 \r\n```","```\r\n$ curl -v http://localhost:8080/queue/NYSE\r\n* timeout on name lookup is not supported\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n> GET /queue/NYSE HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< transfer-encoding: chunked\r\n< Content-Type: text/event-stream;charset=UTF-8\r\n<\r\ndata:Test message\r\n\r\ndata:No news is good news...\r\n\r\n... same message repeating every 5 secs\r\n```","```\r\nTimeout: 60.0 seconds ...\r\nListing queues for vhost / ...\r\nNYSE    0\r\n```","```\r\n@PostConstruct\r\npublic void setupTopicDestinations(\r\n    destinationsConfig.getTopics()\r\n      .forEach((key, destination) -> {\r\n          Exchange ex = ExchangeBuilder\r\n            .topicExchange(destination.getExchange())\r\n            .durable(true)\r\n            .build();\r\n            amqpAdmin.declareExchange(ex);\r\n      });\r\n}\r\n```","```\r\n@PostMapping(value = \"/topic/{name}\")\r\npublic Mono<ResponseEntity<?>> sendMessageToTopic(\r\n  @PathVariable String name, @RequestBody String payload) {\r\n\r\n    DestinationInfo d = destinationsConfig\r\n      .getTopics()\r\n      .get(name);\r\n\r\n    if (d == null) {\r\n        return Mono.just(ResponseEntity.notFound().build());\r\n    }      \r\n\r\n   return Mono.fromCallable(() -> {\r\n       amqpTemplate.convertAndSend(\r\n         d.getExchange(), d.getRoutingKey(),payload);   \r\n            return ResponseEntity.accepted().build();\r\n        });\r\n    }\r\n```","```\r\n@GetMapping(\r\n  value = \"/topic/{name}\",\r\n  produces = MediaType.TEXT_EVENT_STREAM_VALUE)\r\npublic Flux<?> receiveMessagesFromTopic(@PathVariable String name) {\r\n    DestinationInfo d = destinationsConfig.getTopics()\r\n        .get(name);\r\n    if (d == null) {\r\n        return Flux.just(ResponseEntity.notFound()\r\n            .build());\r\n    }\r\n    Queue topicQueue = createTopicQueue(d);\r\n    String qname = topicQueue.getName();\r\n    MessageListenerContainer mlc = messageListenerContainerFactory.createMessageListenerContainer(qname);\r\n    Flux<String> f = Flux.<String> create(emitter -> {\r\n        mlc.setupMessageListener((MessageListener) m -> {\r\n            String payload = new String(m.getBody());\r\n            emitter.next(payload);\r\n        });\r\n        emitter.onRequest(v -> {\r\n            mlc.start();\r\n        });\r\n        emitter.onDispose(() -> {\r\n            amqpAdmin.deleteQueue(qname);\r\n            mlc.stop();\r\n        });            \r\n      });\r\n\r\n    return Flux.interval(Duration.ofSeconds(5))\r\n        .map(v -> \"No news is good news\")\r\n        .mergeWith(f);\r\n}\r\n```","```\r\nprivate Queue createTopicQueue(DestinationInfo destination) {\r\n\r\n    Exchange ex = ExchangeBuilder\r\n      .topicExchange(destination.getExchange())\r\n      .durable(true)\r\n      .build();\r\n    amqpAdmin.declareExchange(ex);\r\n    Queue q = QueueBuilder\r\n      .nonDurable()\r\n      .build();     \r\n    amqpAdmin.declareQueue(q);\r\n    Binding b = BindingBuilder.bind(q)\r\n      .to(ex)\r\n      .with(destination.getRoutingKey())\r\n      .noargs();        \r\n    amqpAdmin.declareBinding(b);\r\n    return q;\r\n}\r\n```","```\r\ndestinations:\r\n## ... queue destinations omitted      \r\n  topics:\r\n    weather:\r\n      exchange: alerts\r\n      routing-key: WEATHER\r\n```","```\r\n$ docker exec docker_rabbitmq_1 rabbitmqctl list_exchanges\r\nListing exchanges for vhost / ...\r\namq.topic       topic\r\namq.fanout      fanout\r\namq.match       headers\r\namq.headers     headers\r\n        direct\r\namq.rabbitmq.trace      topic\r\namq.direct      direct\r\nalerts  topic\r\n```","```\r\n$ docker exec rabbitmq rabbitmqctl list_bindings\r\nListing bindings for vhost /...\r\n        exchange        NYSE    queue   NYSE    []\r\nnyse    exchange        NYSE    queue   NYSE    [] \r\n```","```\r\n$ curl -v http://localhost:8080/topic/weather\r\n* timeout on name lookup is not supported\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n> GET /topic/weather HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< transfer-encoding: chunked\r\n< Content-Type: text/event-stream;charset=UTF-8\r\n<\r\ndata:No news is good news...\r\n\r\n# ... same message repeating indefinitely \r\n```","```\r\n$ curl -v -d \"Hurricane approaching!\" http://localhost:8080/topic/weather\r\n* timeout on name lookup is not supported\r\n*   Trying 127.0.0.1...\r\n* Connected to localhost (127.0.0.1) port 8080 (#0)\r\n> POST /topic/weather HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.49.1\r\n> Accept: */*\r\n> Content-Length: 22\r\n> Content-Type: application/x-www-form-urlencoded\r\n>\r\n* upload completely sent off: 22 out of 22 bytes\r\n< HTTP/1.1 202 Accepted\r\n< content-length: 0\r\n<\r\n* Connection #0 to host localhost left intact\r\n```","```\r\n$ docker exec rabbitmq rabbitmqctl list_bindings\r\nListing bindings for vhost /...\r\n        exchange        IBOV    queue   IBOV    []\r\n        exchange        NYSE    queue   NYSE    []\r\n        exchange        spring.gen-i0m0pbyKQMqpz2_KFZCd0g       \r\n  queue   spring.gen-i0m0pbyKQMqpz2_KFZCd0g       []\r\n        exchange        spring.gen-wCHALTsIS1q11PQbARJ7eQ       \r\n  queue   spring.gen-wCHALTsIS1q11PQbARJ7eQ       []\r\nalerts  exchange        spring.gen-i0m0pbyKQMqpz2_KFZCd0g     \r\n  queue   WEATHER []\r\nalerts  exchange        spring.gen-wCHALTsIS1q11PQbARJ7eQ     \r\n  queue   WEATHER []\r\nibov    exchange        IBOV    queue   IBOV    []\r\nnyse    exchange        NYSE    queue   NYSE    []\r\nquotes  exchange        NYSE    queue   NYSE    []\r\n```"]