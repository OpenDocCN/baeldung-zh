["```\r\n<dependency>\r\n    <groupId>org.javamoney</groupId>\r\n    <artifactId>moneta</artifactId>\r\n    <version>1.1</version>\r\n</dependency> \r\n```","```\r\n@Test\r\npublic void givenCurrencyCode_whenString_thanExist() {\r\n    CurrencyUnit usd = Monetary.getCurrency(\"USD\");\r\n\r\n    assertNotNull(usd);\r\n    assertEquals(usd.getCurrencyCode(), \"USD\");\r\n    assertEquals(usd.getNumericCode(), 840);\r\n    assertEquals(usd.getDefaultFractionDigits(), 2);\r\n}\r\n```","```\r\n@Test(expected = UnknownCurrencyException.class)\r\npublic void givenCurrencyCode_whenNoExist_thanThrowsError() {\r\n    Monetary.getCurrency(\"AAA\");\r\n} \r\n```","```\r\n@Test\r\npublic void givenAmounts_whenStringified_thanEquals() {\r\n\r\n    CurrencyUnit usd = Monetary.getCurrency(\"USD\");\r\n    MonetaryAmount fstAmtUSD = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(usd).setNumber(200).create();\r\n    Money moneyof = Money.of(12, usd);\r\n    FastMoney fastmoneyof = FastMoney.of(2, usd);\r\n\r\n    assertEquals(\"USD\", usd.toString());\r\n    assertEquals(\"USD 200\", fstAmtUSD.toString());\r\n    assertEquals(\"USD 12\", moneyof.toString());\r\n    assertEquals(\"USD 2.00000\", fastmoneyof.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenCurrencies_whenCompared_thanNotequal() {\r\n    MonetaryAmount oneDolar = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(\"USD\").setNumber(1).create();\r\n    Money oneEuro = Money.of(1, \"EUR\");\r\n\r\n    assertFalse(oneEuro.equals(FastMoney.of(1, \"EUR\")));\r\n    assertTrue(oneDolar.equals(Money.of(1, \"USD\")));\r\n}\r\n```","```\r\n@Test(expected = ArithmeticException.class)\r\npublic void givenAmount_whenDivided_thanThrowsException() {\r\n    MonetaryAmount oneDolar = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(\"USD\").setNumber(1).create();\r\n    oneDolar.divide(3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenAmounts_whenSummed_thanCorrect() {\r\n    MonetaryAmount[] monetaryAmounts = new MonetaryAmount[] {\r\n      Money.of(100, \"CHF\"), Money.of(10.20, \"CHF\"), Money.of(1.15, \"CHF\")};\r\n\r\n    Money sumAmtCHF = Money.of(0, \"CHF\");\r\n    for (MonetaryAmount monetaryAmount : monetaryAmounts) {\r\n        sumAmtCHF = sumAmtCHF.add(monetaryAmount);\r\n    }\r\n\r\n    assertEquals(\"CHF 111.35\", sumAmtCHF.toString());\r\n}\r\n```","```\r\nMoney calcAmtUSD = Money.of(1, \"USD\").subtract(fstAmtUSD); \r\n```","```\r\nMonetaryAmount multiplyAmount = oneDolar.multiply(0.25);\r\n```","```\r\nMonetaryAmount divideAmount = oneDolar.divide(0.25);\r\n```","```\r\n@Test\r\npublic void givenArithmetic_whenStringified_thanEqualsAmount() {\r\n    CurrencyUnit usd = Monetary.getCurrency(\"USD\");\r\n\r\n    Money moneyof = Money.of(12, usd);\r\n    MonetaryAmount fstAmtUSD = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(usd).setNumber(200.50).create();\r\n    MonetaryAmount oneDolar = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(\"USD\").setNumber(1).create();\r\n    Money subtractedAmount = Money.of(1, \"USD\").subtract(fstAmtUSD);\r\n    MonetaryAmount multiplyAmount = oneDolar.multiply(0.25);\r\n    MonetaryAmount divideAmount = oneDolar.divide(0.25);\r\n\r\n    assertEquals(\"USD\", usd.toString());\r\n    assertEquals(\"USD 1\", oneDolar.toString());\r\n    assertEquals(\"USD 200.5\", fstAmtUSD.toString());\r\n    assertEquals(\"USD 12\", moneyof.toString());\r\n    assertEquals(\"USD -199.5\", subtractedAmount.toString());\r\n    assertEquals(\"USD 0.25\", multiplyAmount.toString());\r\n    assertEquals(\"USD 4\", divideAmount.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAmount_whenRounded_thanEquals() {\r\n    MonetaryAmount fstAmtEUR = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(\"EUR\").setNumber(1.30473908).create();\r\n    MonetaryAmount roundEUR = fstAmtEUR.with(Monetary.getDefaultRounding());\r\n\r\n    assertEquals(\"EUR 1.30473908\", fstAmtEUR.toString());\r\n    assertEquals(\"EUR 1.3\", roundEUR.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAmount_whenConversion_thenNotNull() {\r\n    MonetaryAmount oneDollar = Monetary.getDefaultAmountFactory().setCurrency(\"USD\")\r\n      .setNumber(1).create();\r\n\r\n    CurrencyConversion conversionEUR = MonetaryConversions.getConversion(\"EUR\");\r\n\r\n    MonetaryAmount convertedAmountUSDtoEUR = oneDollar.with(conversionEUR);\r\n\r\n    assertEquals(\"USD 1\", oneDollar.toString());\r\n    assertNotNull(convertedAmountUSDtoEUR);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLocale_whenFormatted_thanEquals() {\r\n    MonetaryAmount oneDollar = Monetary.getDefaultAmountFactory()\r\n      .setCurrency(\"USD\").setNumber(1).create();\r\n\r\n    MonetaryAmountFormat formatUSD = MonetaryFormats.getAmountFormat(Locale.US);\r\n    String usFormatted = formatUSD.format(oneDollar);\r\n\r\n    assertEquals(\"USD 1\", oneDollar.toString());\r\n    assertNotNull(formatUSD);\r\n    assertEquals(\"USD1.00\", usFormatted);\r\n}\r\n```","```\r\n@Test\r\npublic void givenAmount_whenCustomFormat_thanEquals() {\r\n    MonetaryAmount oneDollar = Monetary.getDefaultAmountFactory()\r\n            .setCurrency(\"USD\").setNumber(1).create();\r\n\r\n    MonetaryAmountFormat customFormat = MonetaryFormats.getAmountFormat(AmountFormatQueryBuilder.\r\n      of(Locale.US).set(CurrencyStyle.NAME).set(\"pattern\", \"00000.00 Â¤\").build());\r\n    String customFormatted = customFormat.format(oneDollar);\r\n\r\n    assertNotNull(customFormat);\r\n    assertEquals(\"USD 1\", oneDollar.toString());\r\n    assertEquals(\"00001.00 US Dollar\", customFormatted);\r\n}\r\n```"]