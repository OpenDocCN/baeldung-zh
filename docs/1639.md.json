["```\r\n@Autowired \r\nArbitraryClass arbObject;\r\n```","```\r\nArbitraryClass arbObject = new ArbitraryClass();\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestResourceNameType.class)\r\npublic class FieldResourceInjectionIntegrationTest {\r\n\r\n    @Resource(name=\"namedFile\")\r\n    private File defaultFile;\r\n\r\n    @Test\r\n    public void givenResourceAnnotation_WhenOnField_ThenDependencyValid(){\r\n        assertNotNull(defaultFile);\r\n        assertEquals(\"namedFile.txt\", defaultFile.getName());\r\n    }\r\n}\r\n```","```\r\n@Resource(name=\"namedFile\")\r\nprivate File defaultFile;\r\n```","```\r\n@Configuration\r\npublic class ApplicationContextTestResourceNameType {\r\n\r\n    @Bean(name=\"namedFile\")\r\n    public File namedFile() {\r\n        File namedFile = new File(\"namedFile.txt\");\r\n        return namedFile;\r\n    }\r\n}\r\n```","```\r\n@Resource\r\nprivate File defaultFile;\r\n```","```\r\n@Configuration\r\npublic class ApplicationContextTestResourceQualifier {\r\n\r\n    @Bean(name=\"defaultFile\")\r\n    public File defaultFile() {\r\n        File defaultFile = new File(\"defaultFile.txt\");\r\n        return defaultFile;\r\n    }\r\n\r\n    @Bean(name=\"namedFile\")\r\n    public File namedFile() {\r\n        File namedFile = new File(\"namedFile.txt\");\r\n        return namedFile;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestResourceQualifier.class)\r\npublic class QualifierResourceInjectionIntegrationTest {\r\n\r\n    @Resource\r\n    private File dependency1;\r\n\r\n    @Resource\r\n    private File dependency2;\r\n\r\n    @Test\r\n    public void givenResourceAnnotation_WhenField_ThenDependency1Valid(){\r\n        assertNotNull(dependency1);\r\n        assertEquals(\"defaultFile.txt\", dependency1.getName());\r\n    }\r\n\r\n    @Test\r\n    public void givenResourceQualifier_WhenField_ThenDependency2Valid(){\r\n        assertNotNull(dependency2);\r\n        assertEquals(\"namedFile.txt\", dependency2.getName());\r\n    }\r\n}\r\n```","```\r\n@Resource\r\nprivate File dependency1;\r\n\r\n@Resource\r\nprivate File dependency2;\r\n```","```\r\n@Qualifier(\"defaultFile\")\r\n\r\n@Qualifier(\"namedFile\")\r\n```","```\r\n@Resource\r\n@Qualifier(\"defaultFile\")\r\nprivate File dependency1;\r\n\r\n@Resource\r\n@Qualifier(\"namedFile\")\r\nprivate File dependency2;\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestResourceNameType.class)\r\npublic class MethodResourceInjectionIntegrationTest {\r\n\r\n    private File defaultFile;\r\n\r\n    @Resource(name=\"namedFile\")\r\n    protected void setDefaultFile(File defaultFile) {\r\n        this.defaultFile = defaultFile;\r\n    }\r\n\r\n    @Test\r\n    public void givenResourceAnnotation_WhenSetter_ThenDependencyValid(){\r\n        assertNotNull(defaultFile);\r\n        assertEquals(\"namedFile.txt\", defaultFile.getName());\r\n    }\r\n}\r\n```","```\r\nprivate File defaultFile;\r\n\r\n@Resource(name=\"namedFile\")\r\nprotected void setDefaultFile(File defaultFile) {\r\n    this.defaultFile = defaultFile;\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestResourceNameType.class)\r\npublic class MethodByTypeResourceIntegrationTest {\r\n\r\n    private File defaultFile;\r\n\r\n    @Resource\r\n    protected void setDefaultFile(File defaultFile) {\r\n        this.defaultFile = defaultFile;\r\n    }\r\n\r\n    @Test\r\n    public void givenResourceAnnotation_WhenSetter_ThenValidDependency(){\r\n        assertNotNull(defaultFile);\r\n        assertEquals(\"namedFile.txt\", defaultFile.getName());\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestResourceQualifier.class)\r\npublic class MethodByQualifierResourceIntegrationTest {\r\n\r\n    private File arbDependency;\r\n    private File anotherArbDependency;\r\n\r\n    @Test\r\n    public void givenResourceQualifier_WhenSetter_ThenValidDependencies(){\r\n      assertNotNull(arbDependency);\r\n        assertEquals(\"namedFile.txt\", arbDependency.getName());\r\n        assertNotNull(anotherArbDependency);\r\n        assertEquals(\"defaultFile.txt\", anotherArbDependency.getName());\r\n    }\r\n\r\n    @Resource\r\n    @Qualifier(\"namedFile\")\r\n    public void setArbDependency(File arbDependency) {\r\n        this.arbDependency = arbDependency;\r\n    }\r\n\r\n    @Resource\r\n    @Qualifier(\"defaultFile\")\r\n    public void setAnotherArbDependency(File anotherArbDependency) {\r\n        this.anotherArbDependency = anotherArbDependency;\r\n    }\r\n}\r\n```","```\r\ntestCompile group: 'javax.inject', name: 'javax.inject', version: '1'\r\n```","```\r\n<dependency>\r\n    <groupId>javax.inject</groupId>\r\n    <artifactId>javax.inject</artifactId>\r\n    <version>1</version>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class ArbitraryDependency {\r\n\r\n    private final String label = \"Arbitrary Dependency\";\r\n\r\n    public String toString() {\r\n        return label;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestInjectType.class)\r\npublic class FieldInjectIntegrationTest {\r\n\r\n    @Inject\r\n    private ArbitraryDependency fieldInjectDependency;\r\n\r\n    @Test\r\n    public void givenInjectAnnotation_WhenOnField_ThenValidDependency(){\r\n        assertNotNull(fieldInjectDependency);\r\n        assertEquals(\"Arbitrary Dependency\",\r\n          fieldInjectDependency.toString());\r\n    }\r\n}\r\n```","```\r\n@Inject\r\nprivate ArbitraryDependency fieldInjectDependency;\r\n```","```\r\n@Bean\r\npublic ArbitraryDependency injectDependency() {\r\n    ArbitraryDependency injectDependency = new ArbitraryDependency();\r\n    return injectDependency;\r\n}\r\n```","```\r\npublic class AnotherArbitraryDependency extends ArbitraryDependency {\r\n\r\n    private final String label = \"Another Arbitrary Dependency\";\r\n\r\n    public String toString() {\r\n        return label;\r\n    }\r\n}\r\n```","```\r\n@Inject\r\nprivate ArbitraryDependency defaultDependency;\r\n\r\n@Inject\r\nprivate ArbitraryDependency namedDependency;\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestInjectQualifier.class)\r\npublic class FieldQualifierInjectIntegrationTest {\r\n\r\n    @Inject\r\n    private ArbitraryDependency defaultDependency;\r\n\r\n    @Inject\r\n    private ArbitraryDependency namedDependency;\r\n\r\n    @Test\r\n    public void givenInjectQualifier_WhenOnField_ThenDefaultFileValid(){\r\n        assertNotNull(defaultDependency);\r\n        assertEquals(\"Arbitrary Dependency\",\r\n          defaultDependency.toString());\r\n    }\r\n\r\n    @Test\r\n    public void givenInjectQualifier_WhenOnField_ThenNamedFileValid(){\r\n        assertNotNull(defaultDependency);\r\n        assertEquals(\"Another Arbitrary Dependency\",\r\n          namedDependency.toString());\r\n    }\r\n}\r\n```","```\r\n@Inject \r\nprivate ArbitraryDependency defaultDependency;\r\n\r\n@Inject \r\nprivate ArbitraryDependency namedDependency;\r\n```","```\r\n@Inject\r\nprivate ArbitraryDependency defaultDependency;\r\n\r\n@Inject\r\nprivate ArbitraryDependency namedDependency;\r\n```","```\r\n@Inject\r\n@Qualifier(\"defaultFile\")\r\nprivate ArbitraryDependency defaultDependency;\r\n\r\n@Inject\r\n@Qualifier(\"namedFile\")\r\nprivate ArbitraryDependency namedDependency;\r\n```","```\r\npublic class YetAnotherArbitraryDependency extends ArbitraryDependency {\r\n\r\n    private final String label = \"Yet Another Arbitrary Dependency\";\r\n\r\n    public String toString() {\r\n        return label;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestInjectName.class)\r\npublic class FieldByNameInjectIntegrationTest {\r\n\r\n    @Inject\r\n    @Named(\"yetAnotherFieldInjectDependency\")\r\n    private ArbitraryDependency yetAnotherFieldInjectDependency;\r\n\r\n    @Test\r\n    public void givenInjectQualifier_WhenSetOnField_ThenDependencyValid(){\r\n        assertNotNull(yetAnotherFieldInjectDependency);\r\n        assertEquals(\"Yet Another Arbitrary Dependency\",\r\n          yetAnotherFieldInjectDependency.toString());\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ApplicationContextTestInjectName {\r\n\r\n    @Bean\r\n    public ArbitraryDependency yetAnotherFieldInjectDependency() {\r\n        ArbitraryDependency yetAnotherFieldInjectDependency =\r\n          new YetAnotherArbitraryDependency();\r\n        return yetAnotherFieldInjectDependency;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestAutowiredType.class)\r\npublic class FieldAutowiredIntegrationTest {\r\n\r\n    @Autowired\r\n    private ArbitraryDependency fieldDependency;\r\n\r\n    @Test\r\n    public void givenAutowired_WhenSetOnField_ThenDependencyResolved() {\r\n        assertNotNull(fieldDependency);\r\n        assertEquals(\"Arbitrary Dependency\", fieldDependency.toString());\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ApplicationContextTestAutowiredType {\r\n\r\n    @Bean\r\n    public ArbitraryDependency autowiredFieldDependency() {\r\n        ArbitraryDependency autowiredFieldDependency =\r\n          new ArbitraryDependency();\r\n        return autowiredFieldDependency;\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate ArbitraryDependency fieldDependency;\r\n```","```\r\n@Bean\r\npublic ArbitraryDependency autowiredFieldDependency() {\r\n    ArbitraryDependency autowiredFieldDependency =\r\n      new ArbitraryDependency();\r\n    return autowiredFieldDependency;\r\n}\r\n```","```\r\n@Configuration\r\npublic class ApplicationContextTestAutowiredQualifier {\r\n\r\n    @Bean\r\n    public ArbitraryDependency autowiredFieldDependency() {\r\n        ArbitraryDependency autowiredFieldDependency =\r\n          new ArbitraryDependency();\r\n        return autowiredFieldDependency;\r\n    }\r\n\r\n    @Bean\r\n    public ArbitraryDependency anotherAutowiredFieldDependency() {\r\n        ArbitraryDependency anotherAutowiredFieldDependency =\r\n          new AnotherArbitraryDependency();\r\n        return anotherAutowiredFieldDependency;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestAutowiredQualifier.class)\r\npublic class FieldQualifierAutowiredIntegrationTest {\r\n\r\n    @Autowired\r\n    private ArbitraryDependency fieldDependency1;\r\n\r\n    @Autowired\r\n    private ArbitraryDependency fieldDependency2;\r\n\r\n    @Test\r\n    public void givenAutowiredQualifier_WhenOnField_ThenDep1Valid(){\r\n        assertNotNull(fieldDependency1);\r\n        assertEquals(\"Arbitrary Dependency\", fieldDependency1.toString());\r\n    }\r\n\r\n    @Test\r\n    public void givenAutowiredQualifier_WhenOnField_ThenDep2Valid(){\r\n        assertNotNull(fieldDependency2);\r\n        assertEquals(\"Another Arbitrary Dependency\",\r\n          fieldDependency2.toString());\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate FieldDependency fieldDependency1;\r\n\r\n@Autowired\r\nprivate FieldDependency fieldDependency2;\r\n```","```\r\n@Autowired\r\n@Qualifier(\"autowiredFieldDependency\")\r\nprivate FieldDependency fieldDependency1;\r\n\r\n@Autowired\r\n@Qualifier(\"anotherAutowiredFieldDependency\")\r\nprivate FieldDependency fieldDependency2;\r\n```","```\r\n@Configuration\r\n@ComponentScan(basePackages={\"com.baeldung.dependency\"})\r\n    public class ApplicationContextTestAutowiredName {\r\n}\r\n```","```\r\n@Component(value=\"autowiredFieldDependency\")\r\npublic class ArbitraryDependency {\r\n\r\n    private final String label = \"Arbitrary Dependency\";\r\n\r\n    public String toString() {\r\n        return label;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  loader=AnnotationConfigContextLoader.class,\r\n  classes=ApplicationContextTestAutowiredName.class)\r\npublic class FieldAutowiredNameIntegrationTest {\r\n\r\n    @Autowired\r\n    private ArbitraryDependency autowiredFieldDependency;\r\n\r\n    @Test\r\n    public void givenAutowired_WhenSetOnField_ThenDependencyResolved(){\r\n        assertNotNull(autowiredFieldDependency);\r\n        assertEquals(\"Arbitrary Dependency\",\r\n          autowiredFieldDependency.toString());\r\n\t}\r\n}\r\n```"]