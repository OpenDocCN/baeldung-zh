["```\r\n@Entity\r\n@Table(name = \"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"first_name\")\r\n    private String firstName;\r\n\r\n    @Column(name = \"last_name\")\r\n    private String lastName;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"address_id\", referencedColumnName = \"id\")\r\n    private Address address;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"address\")\r\npublic class Address {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private Long id;\r\n\r\n    @Column(name = \"city\")\r\n    private String city;\r\n\r\n    @Column(name = \"street\")\r\n    private String street;\r\n\r\n    @OneToOne(mappedBy = \"address\")\r\n    private User user;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveEntitiesWithOneToOneAssociation_thenSuccess() {\r\n    User user = new User(\"Bob\", \"Smith\");\r\n    Address address = new Address(\"London\", \"221b Baker Street\");\r\n    user.setAddress(address);\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n    session.save(user);\r\n    session.getTransaction().commit();\r\n    session.close();\r\n}\r\n```","```\r\njava.lang.IllegalStateException: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.baeldung.hibernate.exception.transientobject.entity.Address\r\n```","```\r\n@Entity\r\n@Table(name = \"user\")\r\npublic class User {\r\n    ...\r\n    @OneToOne(cascade = CascadeType.ALL)\r\n    @JoinColumn(name = \"address_id\", referencedColumnName = \"id\")\r\n    private Address address;\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"employee\")\r\npublic class Employee {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"department_id\")\r\n    private Department department;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"department\")\r\npublic class Department {\r\n\r\n    @Id\r\n    @Column(name = \"id\")\r\n    private String id;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n\r\n    @OneToMany(mappedBy = \"department\")\r\n    private Set<Employee> employees = new HashSet<>();\r\n\r\n    public void addEmployee(Employee employee) {\r\n        employees.add(employee);\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenPersistEntitiesWithOneToManyAssociation_thenSuccess() {\r\n    Department department = new Department();\r\n    department.setName(\"IT Support\");\r\n    Employee employee = new Employee(\"John Doe\");\r\n    employee.setDepartment(department);\r\n\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n    session.persist(employee);\r\n    session.getTransaction().commit();\r\n    session.close();\r\n}\r\n```","```\r\njava.lang.IllegalStateException: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.baeldung.hibernate.exception.transientobject.entity.Department\r\n```","```\r\n@Entity\r\n@Table(name = \"employee\")\r\npublic class Employee {\r\n    ...\r\n    @ManyToOne\r\n    @Cascade(CascadeType.SAVE_UPDATE)\r\n    @JoinColumn(name = \"department_id\")\r\n    private Department department;\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"department\")\r\npublic class Department {\r\n    ...\r\n    @OneToMany(mappedBy = \"department\", cascade = CascadeType.ALL, orphanRemoval = true)\r\n    private Set<Employee> employees = new HashSet<>();\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"book\")\r\npublic class Book {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"title\")\r\n    private String title;\r\n\r\n    @ManyToMany\r\n    @JoinColumn(name = \"author_id\")\r\n    private Set<Author> authors = new HashSet<>();\r\n\r\n    public void addAuthor(Author author) {\r\n        authors.add(author);\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"author\")\r\npublic class Author {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n\r\n    @ManyToMany\r\n    @JoinColumn(name = \"book_id\")\r\n    private Set<Book> books = new HashSet<>();\r\n\r\n    public void addBook(Book book) {\r\n        books.add(book);\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveEntitiesWithManyToManyAssociation_thenSuccess_1() {\r\n    Book book = new Book(\"Design Patterns: Elements of Reusable Object-Oriented Software\");\r\n    book.addAuthor(new Author(\"Erich Gamma\"));\r\n    book.addAuthor(new Author(\"John Vlissides\"));\r\n    book.addAuthor(new Author(\"Richard Helm\"));\r\n    book.addAuthor(new Author(\"Ralph Johnson\"));\r\n\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n    session.save(book);\r\n    session.getTransaction().commit();\r\n    session.close();\r\n}\r\n\r\n@Test\r\npublic void whenSaveEntitiesWithManyToManyAssociation_thenSuccess_2() {\r\n    Author author = new Author(\"Erich Gamma\");\r\n    author.addBook(new Book(\"Design Patterns: Elements of Reusable Object-Oriented Software\"));\r\n    author.addBook(new Book(\"Introduction to Object Orient Design in C\"));\r\n\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n    session.save(author);\r\n    session.getTransaction().commit();\r\n    session.close();\r\n}\r\n```","```\r\njava.lang.IllegalStateException: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.baeldung.hibernate.exception.transientobject.entity.Author\r\n\r\njava.lang.IllegalStateException: org.hibernate.TransientObjectException: object references an unsaved transient instance - save the transient instance before flushing: com.baeldung.hibernate.exception.transientobject.entity.Book\r\n```","```\r\n@Entity\r\n@Table(name = \"author\")\r\npublic class Author {\r\n    ...\r\n    @ManyToMany\r\n    @Cascade({ CascadeType.SAVE_UPDATE, CascadeType.MERGE, CascadeType.PERSIST})\r\n    @JoinColumn(name = \"book_id\")\r\n    private Set<Book> books = new HashSet<>();\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"book\")\r\npublic class Book {\r\n    ...\r\n    @ManyToMany\r\n    @Cascade({ CascadeType.SAVE_UPDATE, CascadeType.MERGE, CascadeType.PERSIST})\r\n    @JoinColumn(name = \"author_id\")\r\n    private Set<Author> authors = new HashSet<>();\r\n    ...\r\n}\r\n```"]