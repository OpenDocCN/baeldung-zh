["```\r\ninterface Employee {\r\n    String greet();\r\n    void work(DayOfWeek day);\r\n}\r\n```","```\r\n@Test\r\nvoid givenNonVoidMethod_callingWhen_shouldConfigureBehavior() {\r\n    // given\r\n    when(employee.greet()).thenReturn(\"Hello\");\r\n\r\n    // when\r\n    String greeting = employee.greet();\r\n\r\n    // then\r\n    assertThat(greeting, is(\"Hello\"));\r\n}\r\n```","```\r\n@Test\r\nvoid givenVoidMethod_callingWhen_wontCompile() {\r\n    // given\r\n    when(employee.work(DayOfWeek.SUNDAY)).thenThrow(new IAmOnHolidayException());\r\n\r\n    // when\r\n    Executable workCall = () -> employee.work(DayOfWeek.SUNDAY);\r\n\r\n    // then\r\n    assertThrows(IAmOnHolidayException.class, workCall);\r\n}\r\n```","```\r\n@Test\r\nvoid givenVoidMethod_callingDoThrow_shouldConfigureBehavior() {\r\n    // given\r\n    doThrow(new IAmOnHolidayException()).when(employee).work(DayOfWeek.SUNDAY);\r\n\r\n    // when\r\n    Executable workCall = () -> employee.work(DayOfWeek.SUNDAY);\r\n\r\n    // then\r\n    assertThrows(IAmOnHolidayException.class, workCall);\r\n}\r\n```","```\r\n@Test\r\nvoid givenNonVoidMethod_callingGiven_shouldConfigureBehavior() {\r\n    // given\r\n    given(employee.greet()).willReturn(\"Hello\");\r\n\r\n    // when\r\n    String greeting = employee.greet();\r\n\r\n    // then\r\n    assertThat(greeting, is(\"Hello\"));\r\n}\r\n\r\n@Test\r\nvoid givenVoidMethod_callingWillThrow_shouldConfigureBehavior() {\r\n    // given\r\n    willThrow(new IAmOnHolidayException()).given(employee).work(DayOfWeek.SUNDAY);\r\n\r\n    // when\r\n    Executable workCall = () -> employee.work(DayOfWeek.SUNDAY);\r\n\r\n    // then\r\n    assertThrows(IAmOnHolidayException.class, workCall);\r\n}\r\n```"]