["```\r\n<dependency>\r\n    <groupId>com.esotericsoftware</groupId>\r\n    <artifactId>kryo</artifactId>\r\n    <version>4.0.1</version>\r\n</dependency>\r\n```","```\r\n@Before\r\npublic void init() {\r\n    kryo = new Kryo();\r\n    output = new Output(new FileOutputStream(\"file.dat\"));\r\n    input = new Input(new FileInputStream(\"file.dat\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenSerializing_thenReadCorrectly() {\r\n    Object someObject = \"Some string\";\r\n\r\n    kryo.writeClassAndObject(output, someObject);\r\n    output.close();\r\n\r\n    Object theObject = kryo.readClassAndObject(input);\r\n    input.close();\r\n\r\n    assertEquals(theObject, \"Some string\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenObjects_whenSerializing_thenReadCorrectly() {\r\n    String someString = \"Multiple Objects\";\r\n    Date someDate = new Date(915170400000L);\r\n\r\n    kryo.writeObject(output, someString);\r\n    kryo.writeObject(output, someDate);\r\n    output.close();\r\n\r\n    String readString = kryo.readObject(input, String.class);\r\n    Date readDate = kryo.readObject(input, Date.class);\r\n    input.close();\r\n\r\n    assertEquals(readString, \"Multiple Objects\");\r\n    assertEquals(readDate.getTime(), 915170400000L);\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name = \"John Doe\";\r\n    private int age = 18;\r\n    private Date birthDate = new Date(933191282821L);\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenPerson_whenSerializing_thenReadCorrectly() {\r\n    Person person = new Person();\r\n\r\n    kryo.writeObject(output, person);\r\n    output.close();\r\n\r\n    Person readPerson = kryo.readObject(input, Person.class);\r\n    input.close();\r\n\r\n    assertEquals(readPerson.getName(), \"John Doe\");\r\n}\r\n```","```\r\npublic class PersonSerializer extends Serializer<Person> {\r\n\r\n    public void write(Kryo kryo, Output output, Person object) {\r\n        output.writeString(object.getName());\r\n        output.writeLong(object.getBirthDate().getTime());\r\n    }\r\n\r\n    public Person read(Kryo kryo, Input input, Class<Person> type) {\r\n        Person person = new Person();\r\n        person.setName(input.readString());\r\n        long birthDate = input.readLong();\r\n        person.setBirthDate(new Date(birthDate));\r\n        person.setAge(calculateAge(birthDate));\r\n        return person;\r\n    }\r\n\r\n    private int calculateAge(long birthDate) {\r\n        // Some custom logic\r\n        return 18;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPerson_whenUsingCustomSerializer_thenReadCorrectly() {\r\n    Person person = new Person();\r\n    person.setAge(0);\r\n\r\n    kryo.register(Person.class, new PersonSerializer());\r\n    kryo.writeObject(output, person);\r\n    output.close();\r\n\r\n    Person readPerson = kryo.readObject(input, Person.class);\r\n    input.close();\r\n\r\n    assertEquals(readPerson.getName(), \"John Doe\");\r\n    assertEquals(readPerson.getAge(), 18);\r\n}\r\n```","```\r\n@DefaultSerializer(PersonSerializer.class)\r\npublic class Person implements KryoSerializable {\r\n    // ...\r\n}\r\n```","```\r\npublic class Person implements KryoSerializable {\r\n    // ...\r\n\r\n    public void write(Kryo kryo, Output output) {\r\n        output.writeString(name);\r\n        // ...\r\n    }\r\n\r\n    public void read(Kryo kryo, Input input) {\r\n        name = input.readString();\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic class ComplexObject implements Serializable {\r\n    private String name = \"Bael\";\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenJavaSerializable_whenSerializing_thenReadCorrectly() {\r\n    ComplexClass complexObject = new ComplexClass();\r\n    kryo.register(ComplexClass.class, new JavaSerializer());\r\n\r\n    kryo.writeObject(output, complexObject);\r\n    output.close();\r\n\r\n    ComplexClass readComplexObject = kryo.readObject(input, ComplexClass.class);\r\n    input.close();\r\n\r\n    assertEquals(readComplexObject.getName(), \"Bael\");\r\n}\r\n```"]