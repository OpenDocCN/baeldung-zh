["```\r\n@Embeddable\r\npublic class SkillTag {\r\n    private String name;\r\n    private int value;\r\n\r\n    // constructors, getters, setters\r\n}\r\n```","```\r\n@ElementCollection\r\nprivate List<SkillTag> skillTags = new ArrayList<>();\r\n```","```\r\n@Query(\r\n  \"SELECT s FROM Student s JOIN s.skillTags t WHERE t.name = LOWER(:tagName) AND t.value > :tagValue\")\r\nList<Student> retrieveByNameFilterByMinimumSkillTag(\r\n  @Param(\"tagName\") String tagName, @Param(\"tagValue\") int tagValue);\r\n```","```\r\nStudent student = new Student(1, \"Will\");\r\nSkillTag skill1 = new SkillTag(\"java\", 5);\r\nstudent.setSkillTags(Arrays.asList(skill1));\r\nstudentRepository.save(student);\r\n\r\nStudent student2 = new Student(2, \"Joe\");\r\nSkillTag skill2 = new SkillTag(\"java\", 1);\r\nstudent2.setSkillTags(Arrays.asList(skill2));\r\nstudentRepository.save(student2);\r\n\r\nList<Student> students = \r\n  studentRepository.retrieveByNameFilterByMinimumSkillTag(\"java\", 3);\r\nassertEquals(\"size incorrect\", 1, students.size());\r\n```","```\r\n@Embeddable\r\npublic class LocationTag {\r\n    private String name;\r\n    private int xPos;\r\n    private int yPos;\r\n\r\n    // constructors, getters, setters\r\n}\r\n```","```\r\n@Query(\"SELECT s FROM Student s JOIN s.locationTags t WHERE t.name = LOWER(:tag)\")\r\nList<Student> retrieveByLocationTag(@Param(\"tag\") String tag);\r\n```","```\r\nStudent student = new Student(0, \"Steve\");\r\nstudent.setLocationTags(Arrays.asList(new LocationTag(\"here\", 0, 0));\r\nstudentRepository.save(student);\r\n\r\nStudent student2 = studentRepository.retrieveByLocationTag(\"here\").get(0);\r\nassertEquals(\"name incorrect\", \"Steve\", student2.getName());\r\n```","```\r\n@Embeddable\r\npublic class KVTag {\r\n    private String key;\r\n    private String value;\r\n\r\n    // constructors, getters and setters\r\n}\r\n```","```\r\n@ElementCollection\r\nprivate List<KVTag> kvTags = new ArrayList<>();\r\n```","```\r\n@Query(\"SELECT s FROM Student s JOIN s.kvTags t WHERE t.key = LOWER(:key)\")\r\nList<Student> retrieveByKeyTag(@Param(\"key\") String key);\r\n```","```\r\n@Test\r\npublic void givenStudentWithKVTags_whenSave_thenGetByTagOk(){\r\n    Student student = new Student(0, \"John\");\r\n    student.setKVTags(Arrays.asList(new KVTag(\"department\", \"computer science\")));\r\n    studentRepository.save(student);\r\n\r\n    Student student2 = new Student(1, \"James\");\r\n    student2.setKVTags(Arrays.asList(new KVTag(\"department\", \"humanities\")));\r\n    studentRepository.save(student2);\r\n\r\n    List<Student> students = studentRepository.retrieveByKeyTag(\"department\");\r\n\r\n    assertEquals(\"size incorrect\", 2, students.size());\r\n}\r\n```","```\r\n@Entity\r\npublic class ManyStudent {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private int id;\r\n    private String name;\r\n\r\n    @ManyToMany(cascade = CascadeType.ALL)\r\n    @JoinTable(name = \"manystudent_manytags\",\r\n      joinColumns = @JoinColumn(name = \"manystudent_id\", \r\n      referencedColumnName = \"id\"),\r\n      inverseJoinColumns = @JoinColumn(name = \"manytag_id\", \r\n      referencedColumnName = \"id\"))\r\n    private Set<ManyTag> manyTags = new HashSet<>();\r\n\r\n    // constructors, getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class ManyTag {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private int id;\r\n    private String name;\r\n\r\n    @ManyToMany(mappedBy = \"manyTags\")\r\n    private Set<ManyStudent> students = new HashSet<>();\r\n\r\n    // constructors, getters, setters\r\n}\r\n```","```\r\npublic interface ManyTagRepository extends JpaRepository<ManyTag, Long> {\r\n}\r\n```","```\r\npublic interface ManyStudentRepository extends JpaRepository<ManyStudent, Long> {\r\n    List<ManyStudent> findByManyTags_Name(String name);\r\n}\r\n```","```\r\n@Test\r\npublic void givenStudentWithManyTags_whenSave_theyGetByTagOk() {\r\n    ManyTag tag = new ManyTag(\"full time\");\r\n    manyTagRepository.save(tag);\r\n\r\n    ManyStudent student = new ManyStudent(\"John\");\r\n    student.setManyTags(Collections.singleton(tag));\r\n    manyStudentRepository.save(student);\r\n\r\n    List<ManyStudent> students = manyStudentRepository\r\n      .findByManyTags_Name(\"full time\");\r\n\r\n    assertEquals(\"size incorrect\", 1, students.size());\r\n}\r\n```"]