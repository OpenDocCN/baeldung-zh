["```\r\nenum RomanNumeral {\r\n    I(1), IV(4), V(5), IX(9), X(10), \r\n    XL(40), L(50), XC(90), C(100), \r\n    CD(400), D(500), CM(900), M(1000);\r\n\r\n    private int value;\r\n\r\n    RomanNumeral(int value) {\r\n        this.value = value;\r\n    }\r\n\r\n    public int getValue() {\r\n        return value;\r\n    }\r\n\r\n    public static List<RomanNumeral> getReverseSortedValues() {\r\n        return Arrays.stream(values())\r\n          .sorted(Comparator.comparing((RomanNumeral e) -> e.value).reversed())\r\n          .collect(Collectors.toList());\r\n    }\r\n}\r\n```","```\r\nLET numeral be the input String representing an Roman Numeral\r\nLET symbol be initialy set to RomanNumeral.values()[0]\r\nWHILE numeral.length > 0:\r\n    IF numeral starts with symbol's name:\r\n        add symbol's value to the result\r\n        remove the symbol's name from the numeral's beginning\r\n    ELSE:\r\n        set symbol to the next symbol\r\n```","```\r\npublic static int romanToArabic(String input) {\r\n    String romanNumeral = input.toUpperCase();\r\n    int result = 0;\r\n\r\n    List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();\r\n\r\n    int i = 0;\r\n\r\n    while ((romanNumeral.length() > 0) && (i < romanNumerals.size())) {\r\n        RomanNumeral symbol = romanNumerals.get(i);\r\n        if (romanNumeral.startsWith(symbol.name())) {\r\n            result += symbol.getValue();\r\n            romanNumeral = romanNumeral.substring(symbol.name().length());\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    if (romanNumeral.length() > 0) {\r\n        throw new IllegalArgumentException(input + \" cannot be converted to a Roman Numeral\");\r\n    }\r\n\r\n    return result;\r\n}\r\n```","```\r\n@Test\r\npublic void given2018Roman_WhenConvertingToArabic_ThenReturn2018() {\r\n    String roman2018 = \"MMXVIII\";\r\n\r\n    int result = RomanArabicConverter.romanToArabic(roman2018);\r\n\r\n    assertThat(result).isEqualTo(2018);\r\n}\r\n```","```\r\nLET number be an integer between 1 and 4000\r\nLET symbol be RomanNumeral.values()[0]\r\nLET result be an empty String\r\nWHILE number > 0:\r\n    IF symbol's value <= number:\r\n        append the result with the symbol's name\r\n        subtract symbol's value from number\r\n    ELSE:\r\n        pick the next symbol\r\n```","```\r\npublic static String arabicToRoman(int number) {\r\n    if ((number <= 0) || (number > 4000)) {\r\n        throw new IllegalArgumentException(number + \" is not in range (0,4000]\");\r\n    }\r\n\r\n    List<RomanNumeral> romanNumerals = RomanNumeral.getReverseSortedValues();\r\n\r\n    int i = 0;\r\n    StringBuilder sb = new StringBuilder();\r\n\r\n    while ((number > 0) && (i < romanNumerals.size())) {\r\n        RomanNumeral currentSymbol = romanNumerals.get(i);\r\n        if (currentSymbol.getValue() <= number) {\r\n            sb.append(currentSymbol.name());\r\n            number -= currentSymbol.getValue();\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    return sb.toString();\r\n}\r\n```","```\r\n@Test\r\npublic void given1999Arabic_WhenConvertingToRoman_ThenReturnMCMXCIX() {\r\n    int arabic1999 = 1999;\r\n\r\n    String result = RomanArabicConverter.arabicToRoman(arabic1999);\r\n\r\n    assertThat(result).isEqualTo(\"MCMXCIX\");\r\n}\r\n```"]