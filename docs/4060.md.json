["```\r\n<dependency>\r\n    <groupId>junit</groupId>\r\n    <artifactId>junit</artifactId>\r\n    <version>4.12</version>\r\n</dependency> \r\n```","```\r\n@Rule\r\npublic TemporaryFolder tmpFolder = new TemporaryFolder();\r\n\r\n@Test\r\npublic void givenTempFolderRule_whenNewFile_thenFileIsCreated() throws IOException {\r\n    File testFile = tmpFolder.newFile(\"test-file.txt\");\r\n\r\n    assertTrue(\"The file should have been created: \", testFile.isFile());\r\n    assertEquals(\"Temp folder and test file should match: \", \r\n      tmpFolder.getRoot(), testFile.getParentFile());\r\n}\r\n```","```\r\n    newFile()\r\n    ```","```\r\n    newFolder(String... folderNames)\r\n    ```","```\r\n    newFolder()\r\n    ```","```\r\n@Rule \r\npublic TemporaryFolder folder = TemporaryFolder.builder().assureDeletion().build();\r\n```","```\r\n@Rule\r\npublic final ExpectedException thrown = ExpectedException.none();\r\n\r\n@Test\r\npublic void givenIllegalArgument_whenExceptionThrown_MessageAndCauseMatches() {\r\n    thrown.expect(IllegalArgumentException.class);\r\n    thrown.expectCause(isA(NullPointerException.class));\r\n    thrown.expectMessage(\"This is illegal\");\r\n\r\n    throw new IllegalArgumentException(\"This is illegal\", new NullPointerException());\r\n}\r\n```","```\r\n@Rule public TestName name = new TestName();\r\n\r\n@Test\r\npublic void givenAddition_whenPrintingTestName_thenTestNameIsDisplayed() {\r\n    LOG.info(\"Executing: {}\", name.getMethodName());\r\n    assertEquals(\"givenAddition_whenPrintingTestName_thenTestNameIsDisplayed\", name.getMethodName());\r\n}\r\n```","```\r\nINFO  c.baeldung.rules.JUnitRulesUnitTest - \r\n    Executing: givenAddition_whenPrintingTestName_thenTestNameIsDisplayed\r\n```","```\r\n@Rule\r\npublic Timeout globalTimeout = Timeout.seconds(10);\r\n\r\n@Test\r\npublic void givenLongRunningTest_whenTimout_thenTestFails() throws InterruptedException {\r\n    TimeUnit.SECONDS.sleep(20);\r\n}\r\n```","```\r\norg.junit.runners.model.TestTimedOutException: test timed out after 10 seconds\r\n...\r\n```","```\r\n@Rule \r\npublic final ErrorCollector errorCollector = new ErrorCollector();\r\n\r\n@Test\r\npublic void givenMultipleErrors_whenTestRuns_thenCollectorReportsErrors() {\r\n    errorCollector.addError(new Throwable(\"First thing went wrong!\"));\r\n    errorCollector.addError(new Throwable(\"Another thing went wrong!\"));\r\n\r\n    errorCollector.checkThat(\"Hello World\", not(containsString(\"ERROR!\")));\r\n}\r\n```","```\r\njava.lang.Throwable: First thing went wrong!\r\n...\r\njava.lang.Throwable: Another thing went wrong!\r\n```","```\r\nprivate List messageLog = new ArrayList();\r\n\r\n@Rule\r\npublic Verifier verifier = new Verifier() {\r\n    @Override\r\n    public void verify() {\r\n        assertFalse(\"Message Log is not Empty!\", messageLog.isEmpty());\r\n    }\r\n}; \r\n```","```\r\n@Test\r\npublic void givenNewMessage_whenVerified_thenMessageLogNotEmpty() {\r\n    // ...\r\n    messageLog.add(\"There is a new message!\");\r\n}\r\n```","```\r\n@Rule\r\npublic DisableOnDebug disableTimeout = new DisableOnDebug(Timeout.seconds(30));\r\n```","```\r\n@Rule\r\npublic final ExternalResource externalResource = new ExternalResource() {\r\n    @Override\r\n    protected void before() throws Throwable {\r\n        // code to set up a specific external resource.\r\n    };\r\n\r\n    @Override\r\n    protected void after() {\r\n        // code to tear down the external resource\r\n    };\r\n};\r\n```","```\r\n@ClassRule\r\npublic static TemporaryFolder globalFolder = new TemporaryFolder();\r\n```","```\r\npublic class TestMethodNameLogger implements TestRule {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(TestMethodNameLogger.class);\r\n\r\n    @Override\r\n    public Statement apply(Statement base, Description description) {\r\n        logInfo(\"Before test\", description);\r\n        try {\r\n            return new Statement() {\r\n                @Override\r\n                public void evaluate() throws Throwable {\r\n                    base.evaluate();\r\n                }\r\n            };\r\n        } finally {\r\n            logInfo(\"After test\", description);\r\n        }\r\n    }\r\n\r\n    private void logInfo(String msg, Description description) {\r\n        LOG.info(msg + description.getMethodName());\r\n    }\r\n}\r\n```","```\r\n@Rule\r\npublic RuleChain chain = RuleChain.outerRule(new MessageLogger(\"First rule\"))\r\n    .around(new MessageLogger(\"Second rule\"))\r\n    .around(new MessageLogger(\"Third rule\"));\r\n```","```\r\nStarting: First rule\r\nStarting: Second rule\r\nStarting: Third rule\r\nFinished: Third rule\r\nFinished: Second rule\r\nFinished: First rule\r\n```"]