["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.marcosbarbero.cloud</groupId>\r\n    <artifactId>spring-cloud-zuul-ratelimit</artifactId>\r\n    <version>2.2.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/greeting\")\r\npublic class GreetingController {\r\n\r\n    @GetMapping(\"/simple\")\r\n    public ResponseEntity<String> getSimple() {\r\n        return ResponseEntity.ok(\"Hi!\");\r\n    }\r\n\r\n    @GetMapping(\"/advanced\")\r\n    public ResponseEntity<String> getAdvanced() {\r\n        return ResponseEntity.ok(\"Hello, how you doing?\");\r\n    }\r\n}\r\n```","```\r\nzuul:\r\n  routes:\r\n    serviceSimple:\r\n      path: /greeting/simple\r\n      url: forward:/\r\n    serviceAdvanced:\r\n      path: /greeting/advanced\r\n      url: forward:/\r\n  ratelimit:\r\n    enabled: true\r\n    repository: JPA\r\n    policy-list:\r\n      serviceSimple:\r\n        - limit: 5\r\n          refresh-interval: 60\r\n          type:\r\n            - origin\r\n      serviceAdvanced:\r\n        - limit: 1\r\n          refresh-interval: 2\r\n          type:\r\n            - origin\r\n  strip-prefix: true\r\n```","```\r\n@Test\r\npublic void whenRequestNotExceedingCapacity_thenReturnOkResponse() {\r\n    ResponseEntity<String> response = restTemplate.getForEntity(SIMPLE_GREETING, String.class);\r\n    assertEquals(OK, response.getStatusCode());\r\n\r\n    HttpHeaders headers = response.getHeaders();\r\n    String key = \"rate-limit-application_serviceSimple_127.0.0.1\";\r\n\r\n    assertEquals(\"5\", headers.getFirst(HEADER_LIMIT + key));\r\n    assertEquals(\"4\", headers.getFirst(HEADER_REMAINING + key));\r\n    assertThat(\r\n      parseInt(headers.getFirst(HEADER_RESET + key)),\r\n      is(both(greaterThanOrEqualTo(0)).and(lessThanOrEqualTo(60000)))\r\n    );\r\n}\r\n```","```\r\nX-RateLimit-Limit-rate-limit-application_serviceSimple_127.0.0.1: 5\r\nX-RateLimit-Remaining-rate-limit-application_serviceSimple_127.0.0.1: 4\r\nX-RateLimit-Reset-rate-limit-application_serviceSimple_127.0.0.1: 60000\r\n```","```\r\nX-RateLimit-Limit-rate-limit-application_serviceSimple_127.0.0.1: 5\r\nX-RateLimit-Remaining-rate-limit-application_serviceSimple_127.0.0.1: 3\r\nX-RateLimit-Reset-rate-limit-application_serviceSimple_127.0.0.1: 57031\r\n```","```\r\n@Test\r\npublic void whenRequestExceedingCapacity_thenReturnTooManyRequestsResponse() throws InterruptedException {\r\n    ResponseEntity<String> response = this.restTemplate.getForEntity(ADVANCED_GREETING, String.class);\r\n    assertEquals(OK, response.getStatusCode());\r\n\r\n    for (int i = 0; i < 2; i++) {\r\n        response = this.restTemplate.getForEntity(ADVANCED_GREETING, String.class);\r\n    }\r\n\r\n    assertEquals(TOO_MANY_REQUESTS, response.getStatusCode());\r\n\r\n    HttpHeaders headers = response.getHeaders();\r\n    String key = \"rate-limit-application_serviceAdvanced_127.0.0.1\";\r\n\r\n    assertEquals(\"1\", headers.getFirst(HEADER_LIMIT + key));\r\n    assertEquals(\"0\", headers.getFirst(HEADER_REMAINING + key));\r\n    assertNotEquals(\"2000\", headers.getFirst(HEADER_RESET + key));\r\n\r\n    TimeUnit.SECONDS.sleep(2);\r\n\r\n    response = this.restTemplate.getForEntity(ADVANCED_GREETING, String.class);\r\n    assertEquals(OK, response.getStatusCode());\r\n}\r\n```","```\r\nX-RateLimit-Limit-rate-limit-application_serviceAdvanced_127.0.0.1: 1\r\nX-RateLimit-Remaining-rate-limit-application_serviceAdvanced_127.0.0.1: 0\r\nX-RateLimit-Reset-rate-limit-application_serviceAdvanced_127.0.0.1: 268\r\n```","```\r\n@Bean\r\npublic RateLimitKeyGenerator rateLimitKeyGenerator(RateLimitProperties properties, \r\n  RateLimitUtils rateLimitUtils) {\r\n    return new DefaultRateLimitKeyGenerator(properties, rateLimitUtils) {\r\n        @Override\r\n        public String key(HttpServletRequest request, Route route, \r\n          RateLimitProperties.Policy policy) {\r\n            return super.key(request, route, policy) + \"_\" + request.getMethod();\r\n        }\r\n    };\r\n}\r\n```","```\r\nX-RateLimit-Limit-rate-limit-application_serviceSimple_127.0.0.1_GET: 5\r\n```","```\r\n@Bean\r\npublic RateLimiterErrorHandler rateLimitErrorHandler() {\r\n    return new DefaultRateLimiterErrorHandler() {\r\n        @Override\r\n        public void handleSaveError(String key, Exception e) {\r\n            // implementation\r\n        }\r\n\r\n        @Override\r\n        public void handleFetchError(String key, Exception e) {\r\n            // implementation\r\n        }\r\n\r\n        @Override\r\n        public void handleError(String msg, Exception e) {\r\n            // implementation\r\n        }\r\n    };\r\n}\r\n```"]