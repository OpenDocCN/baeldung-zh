["```\r\npublic class CustomAuthorizationRequestResolver \r\n  implements OAuth2AuthorizationRequestResolver {\r\n\r\n    private OAuth2AuthorizationRequestResolver defaultResolver;\r\n\r\n    public CustomAuthorizationRequestResolver(\r\n      ClientRegistrationRepository repo, String authorizationRequestBaseUri) {\r\n        defaultResolver = new DefaultOAuth2AuthorizationRequestResolver(repo, authorizationRequestBaseUri);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class CustomAuthorizationRequestResolver \r\n  implements OAuth2AuthorizationRequestResolver {\r\n\r\n    //...\r\n\r\n    @Override\r\n    public OAuth2AuthorizationRequest resolve(HttpServletRequest request) {\r\n        OAuth2AuthorizationRequest req = defaultResolver.resolve(request);\r\n        if(req != null) {\r\n            req = customizeAuthorizationRequest(req);\r\n        }\r\n        return req;\r\n    }\r\n\r\n    @Override\r\n    public OAuth2AuthorizationRequest resolve(HttpServletRequest request, String clientRegistrationId) {\r\n        OAuth2AuthorizationRequest req = defaultResolver.resolve(request, clientRegistrationId);\r\n        if(req != null) {\r\n            req = customizeAuthorizationRequest(req);\r\n        }\r\n        return req;\r\n    }\r\n\r\n    private OAuth2AuthorizationRequest customizeAuthorizationRequest(\r\n      OAuth2AuthorizationRequest req) {\r\n        // ...\r\n    }\r\n\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.oauth2Login()\r\n          .authorizationEndpoint()\r\n          .authorizationRequestResolver(\r\n            new CustomAuthorizationRequestResolver(\r\n              clientRegistrationRepository(), \"/oauth2/authorize-client\"))\r\n        //...\r\n    }\r\n}\r\n```","```\r\nprivate OAuth2AuthorizationRequest customizeAuthorizationRequest(\r\n  OAuth2AuthorizationRequest req) {\r\n    return OAuth2AuthorizationRequest\r\n      .from(req).state(\"xyz\").build();\r\n}\r\n```","```\r\nprivate OAuth2AuthorizationRequest customizeAuthorizationRequest(\r\n  OAuth2AuthorizationRequest req) {\r\n    Map<String,Object> extraParams = new HashMap<String,Object>();\r\n    extraParams.putAll(req.getAdditionalParameters()); \r\n    extraParams.put(\"test\", \"extra\");\r\n\r\n    return OAuth2AuthorizationRequest\r\n      .from(req)\r\n      .additionalParameters(extraParams)\r\n      .build();\r\n}\r\n```","```\r\nprivate OAuth2AuthorizationRequest customizeOktaReq(OAuth2AuthorizationRequest req) {\r\n    Map<String,Object> extraParams = new HashMap<String,Object>();\r\n    extraParams.putAll(req.getAdditionalParameters()); \r\n    extraParams.put(\"idp\", \"https://idprovider.com\");\r\n    return OAuth2AuthorizationRequest\r\n      .from(req)\r\n      .additionalParameters(extraParams)\r\n      .build();\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.tokenEndpoint()\r\n          .accessTokenResponseClient(accessTokenResponseClient())\r\n            //...\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> accessTokenResponseClient(){\r\n        DefaultAuthorizationCodeTokenResponseClient accessTokenResponseClient = \r\n          new DefaultAuthorizationCodeTokenResponseClient(); \r\n        accessTokenResponseClient.setRequestEntityConverter(new CustomRequestEntityConverter()); \r\n\r\n        OAuth2AccessTokenResponseHttpMessageConverter tokenResponseHttpMessageConverter = \r\n          new OAuth2AccessTokenResponseHttpMessageConverter(); \r\n        tokenResponseHttpMessageConverter.setTokenResponseConverter(new CustomTokenResponseConverter()); \r\n        RestTemplate restTemplate = new RestTemplate(Arrays.asList(\r\n          new FormHttpMessageConverter(), tokenResponseHttpMessageConverter)); \r\n        restTemplate.setErrorHandler(new OAuth2ErrorResponseErrorHandler()); \r\n\r\n        accessTokenResponseClient.setRestOperations(restTemplate); \r\n        return accessTokenResponseClient;\r\n    }\r\n}\r\n```","```\r\npublic class CustomRequestEntityConverter implements \r\n  Converter<OAuth2AuthorizationCodeGrantRequest, RequestEntity<?>> {\r\n\r\n    private OAuth2AuthorizationCodeGrantRequestEntityConverter defaultConverter;\r\n\r\n    public CustomRequestEntityConverter() {\r\n        defaultConverter = new OAuth2AuthorizationCodeGrantRequestEntityConverter();\r\n    }\r\n\r\n    @Override\r\n    public RequestEntity<?> convert(OAuth2AuthorizationCodeGrantRequest req) {\r\n        RequestEntity<?> entity = defaultConverter.convert(req);\r\n        MultiValueMap<String, String> params = (MultiValueMap<String,String>) entity.getBody();\r\n        params.add(\"test2\", \"extra2\");\r\n        return new RequestEntity<>(params, entity.getHeaders(), \r\n          entity.getMethod(), entity.getUrl());\r\n    }\r\n\r\n}\r\n```","```\r\npublic class CustomTokenResponseConverter implements \r\n  Converter<Map<String, String>, OAuth2AccessTokenResponse> {\r\n    private static final Set<String> TOKEN_RESPONSE_PARAMETER_NAMES = Stream.of(\r\n        OAuth2ParameterNames.ACCESS_TOKEN, \r\n        OAuth2ParameterNames.TOKEN_TYPE, \r\n        OAuth2ParameterNames.EXPIRES_IN, \r\n        OAuth2ParameterNames.REFRESH_TOKEN, \r\n        OAuth2ParameterNames.SCOPE).collect(Collectors.toSet());\r\n\r\n    @Override\r\n    public OAuth2AccessTokenResponse convert(Map<String, String> tokenResponseParameters) {\r\n        String accessToken = tokenResponseParameters.get(OAuth2ParameterNames.ACCESS_TOKEN);\r\n\r\n        Set<String> scopes = Collections.emptySet();\r\n        if (tokenResponseParameters.containsKey(OAuth2ParameterNames.SCOPE)) {\r\n            String scope = tokenResponseParameters.get(OAuth2ParameterNames.SCOPE);\r\n            scopes = Arrays.stream(StringUtils.delimitedListToStringArray(scope, \",\"))\r\n                .collect(Collectors.toSet());\r\n        }\r\n\r\n        //...\r\n        return OAuth2AccessTokenResponse.withToken(accessToken)\r\n          .tokenType(accessTokenType)\r\n          .expiresIn(expiresIn)\r\n          .scopes(scopes)\r\n          .refreshToken(refreshToken)\r\n          .additionalParameters(additionalParameters)\r\n          .build();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class LinkedinTokenResponseConverter \r\n  implements Converter<Map<String, String>, OAuth2AccessTokenResponse> {\r\n\r\n    @Override\r\n    public OAuth2AccessTokenResponse convert(Map<String, String> tokenResponseParameters) {\r\n        String accessToken = tokenResponseParameters.get(OAuth2ParameterNames.ACCESS_TOKEN);\r\n        long expiresIn = Long.valueOf(tokenResponseParameters.get(OAuth2ParameterNames.EXPIRES_IN));\r\n\r\n        OAuth2AccessToken.TokenType accessTokenType = OAuth2AccessToken.TokenType.BEARER;\r\n\r\n        return OAuth2AccessTokenResponse.withToken(accessToken)\r\n          .tokenType(accessTokenType)\r\n          .expiresIn(expiresIn)\r\n          .build();\r\n    }\r\n}\r\n```"]