["```\r\npublic class CustomList<E> implements List<E> {\r\n    private Object[] internal = {};\r\n    // empty implementation methods\r\n} \r\n```","```\r\n@Override\r\npublic boolean isEmpty() {\r\n    return false;\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmptyList_whenIsEmpty_thenTrueIsReturned() {\r\n    List<Object> list = new CustomList<>();\r\n\r\n    assertTrue(list.isEmpty());\r\n}\r\n```","```\r\n@Override\r\npublic boolean isEmpty() {\r\n    return true;\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonEmptyList_whenIsEmpty_thenFalseIsReturned() {\r\n    List<Object> list = new CustomList<>();\r\n    list.add(null);\r\n\r\n    assertFalse(list.isEmpty());\r\n}\r\n```","```\r\n@Override\r\npublic boolean add(E element) {\r\n    return false;\r\n}\r\n```","```\r\n@Override\r\npublic boolean add(E element) {\r\n    internal = new Object[] { element };\r\n    return false;\r\n}\r\n```","```\r\n@Override\r\npublic boolean isEmpty() {\r\n    if (internal.length != 0) {\r\n        return false;\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic boolean isEmpty() {\r\n    return internal.length == 0;\r\n}\r\n```","```\r\n@Override\r\npublic int size() {\r\n    return 0;\r\n}\r\n```","```\r\n@Test\r\npublic void givenListWithAnElement_whenSize_thenOneIsReturned() {\r\n    List<Object> list = new CustomList<>();\r\n    list.add(null);\r\n\r\n    assertEquals(1, list.size());\r\n}\r\n```","```\r\n@Override\r\npublic int size() {\r\n    if (isEmpty()) {\r\n        return 0;\r\n    } else {\r\n        return internal.length;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic int size() {\r\n    return internal.length;\r\n}\r\n```","```\r\n@Override\r\npublic E get(int index) {\r\n    return null;\r\n}\r\n```","```\r\n@Test\r\npublic void givenListWithAnElement_whenGet_thenThatElementIsReturned() {\r\n    List<Object> list = new CustomList<>();\r\n    list.add(\"baeldung\");\r\n    Object element = list.get(0);\r\n\r\n    assertEquals(\"baeldung\", element);\r\n}\r\n```","```\r\n@Override\r\npublic E get(int index) {\r\n    return (E) internal[0];\r\n}\r\n```","```\r\n@Override\r\npublic E get(int index) {\r\n    return (E) internal[index];\r\n}\r\n```","```\r\n@Override\r\npublic boolean add(E element) {\r\n    internal = new Object[] { element };\r\n    return false;\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmptyList_whenElementIsAdded_thenGetReturnsThatElement() {\r\n    List<Object> list = new CustomList<>();\r\n    boolean succeeded = list.add(null);\r\n\r\n    assertTrue(succeeded);\r\n}\r\n```","```\r\n@Override\r\npublic boolean add(E element) {\r\n    internal = new Object[] { element };\r\n    return true;\r\n}\r\n```","```\r\n@Test\r\npublic void givenListWithAnElement_whenAnotherIsAdded_thenGetReturnsBoth() {\r\n    List<Object> list = new CustomList<>();\r\n    list.add(\"baeldung\");\r\n    list.add(\".com\");\r\n    Object element1 = list.get(0);\r\n    Object element2 = list.get(1);\r\n\r\n    assertEquals(\"baeldung\", element1);\r\n    assertEquals(\".com\", element2);\r\n}\r\n```","```\r\n@Override\r\npublic boolean add(E element) {\r\n    Object[] temp = Arrays.copyOf(internal, internal.length + 1);\r\n    temp[internal.length] = element;\r\n    internal = temp;\r\n    return true;\r\n}\r\n```"]