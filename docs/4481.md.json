["```\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\n@Plugin(\r\n  name = \"MapAppender\", \r\n  category = Core.CATEGORY_NAME, \r\n  elementType = Appender.ELEMENT_TYPE)\r\npublic class MapAppender extends AbstractAppender {\r\n\r\n    private ConcurrentMap<String, LogEvent> eventMap = new ConcurrentHashMap<>();\r\n\r\n    protected MapAppender(String name, Filter filter) {\r\n        super(name, filter, null);\r\n    }\r\n\r\n    @PluginFactory\r\n    public static MapAppender createAppender(\r\n      @PluginAttribute(\"name\") String name, \r\n      @PluginElement(\"Filter\") Filter filter) {\r\n        return new MapAppender(name, filter);\r\n    }\r\n\r\n    @Override\r\n    public void append(LogEvent event) {\r\n        eventMap.put(Instant.now().toString(), event);\r\n    }\r\n}\r\n```","```\r\n<Configuration xmlns:xi=\"http://www.w3.org/2001/XInclude\" packages=\"com.baeldung\" status=\"WARN\">\r\n```","```\r\n<MapAppender name=\"MapAppender\" />\r\n```","```\r\n<Root level=\"DEBUG\">\r\n    <AppenderRef ref=\"MapAppender\" />\r\n</Root>\r\n```","```\r\npublic void append(LogEvent event) {\r\n    if (event.getLevel().isLessSpecificThan(Level.WARN)) {\r\n        error(\"Unable to log less than WARN level.\");\r\n        return;\r\n    }\r\n    eventMap.put(Instant.now().toString(), event);\r\n}\r\n```"]