["```\r\nString[] arr = new String[]{\"a\", \"b\", \"c\"};\r\nStream<String> stream = Arrays.stream(arr);\r\nstream = Stream.of(\"a\", \"b\", \"c\");\r\n```","```\r\nStream<String> stream = list.stream(); \r\n```","```\r\nlist.parallelStream().forEach(element -> doWork(element));\r\n```","```\r\nlong count = list.stream().distinct().count();\r\n```","```\r\nfor (String string : list) {\r\n    if (string.contains(\"a\")) {\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nboolean isExist = list.stream().anyMatch(element -> element.contains(\"a\"));\r\n```","```\r\nArrayList<String> list = new ArrayList<>();\r\nlist.add(\"One\");\r\nlist.add(\"OneAndOnly\");\r\nlist.add(\"Derek\");\r\nlist.add(\"Change\");\r\nlist.add(\"factory\");\r\nlist.add(\"justBefore\");\r\nlist.add(\"Italy\");\r\nlist.add(\"Italy\");\r\nlist.add(\"Thursday\");\r\nlist.add(\"\");\r\nlist.add(\"\");\r\n```","```\r\nStream<String> stream = list.stream().filter(element -> element.contains(\"d\"));\r\n```","```\r\nList<String> uris = new ArrayList<>();\r\nuris.add(\"C:\\\\My.txt\");\r\nStream<Path> stream = uris.stream().map(uri -> Paths.get(uri));\r\n```","```\r\nList<Detail> details = new ArrayList<>();\r\ndetails.add(new Detail());\r\nStream<String> stream\r\n  = details.stream().flatMap(detail -> detail.getParts().stream());\r\n```","```\r\nboolean isValid = list.stream().anyMatch(element -> element.contains(\"h\")); // true\r\nboolean isValidOne = list.stream().allMatch(element -> element.contains(\"h\")); // false\r\nboolean isValidTwo = list.stream().noneMatch(element -> element.contains(\"h\")); // false\r\n```","```\r\nStream.empty().allMatch(Objects::nonNull); // true\r\n```","```\r\nStream.empty().anyMatch(Objects::nonNull); // false\r\n```","```\r\nList<Integer> integers = Arrays.asList(1, 1, 1);\r\nInteger reduced = integers.stream().reduce(23, (a, b) -> a + b);\r\n```","```\r\nList<String> resultList \r\n  = list.stream().map(element -> element.toUpperCase()).collect(Collectors.toList());\r\n```"]