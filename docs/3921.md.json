["```\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth</groupId>\r\n    <artifactId>spring-security-oauth2</artifactId>\r\n    <version>2.0.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableOAuth2Client\r\n@PropertySource(\"classpath:reddit.properties\")\r\nprotected static class ResourceConfiguration {\r\n\r\n    @Value(\"${accessTokenUri}\")\r\n    private String accessTokenUri;\r\n\r\n    @Value(\"${userAuthorizationUri}\")\r\n    private String userAuthorizationUri;\r\n\r\n    @Value(\"${clientID}\")\r\n    private String clientID;\r\n\r\n    @Value(\"${clientSecret}\")\r\n    private String clientSecret;\r\n\r\n    @Bean\r\n    public OAuth2ProtectedResourceDetails reddit() {\r\n        AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\r\n        details.setId(\"reddit\");\r\n        details.setClientId(clientID);\r\n        details.setClientSecret(clientSecret);\r\n        details.setAccessTokenUri(accessTokenUri);\r\n        details.setUserAuthorizationUri(userAuthorizationUri);\r\n        details.setTokenName(\"oauth_token\");\r\n        details.setScope(Arrays.asList(\"identity\"));\r\n        details.setPreEstablishedRedirectUri(\"http://localhost/login\");\r\n        details.setUseCurrentUri(false);\r\n        return details;\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2RestTemplate redditRestTemplate(OAuth2ClientContext clientContext) {\r\n        OAuth2RestTemplate template = new OAuth2RestTemplate(reddit(), clientContext);\r\n        AccessTokenProvider accessTokenProvider = new AccessTokenProviderChain(\r\n          Arrays.<AccessTokenProvider> asList(\r\n            new MyAuthorizationCodeAccessTokenProvider(), \r\n            new ImplicitAccessTokenProvider(), \r\n            new ResourceOwnerPasswordAccessTokenProvider(),\r\n            new ClientCredentialsAccessTokenProvider())\r\n        );\r\n        template.setAccessTokenProvider(accessTokenProvider);\r\n        return template;\r\n    }\r\n\r\n}\r\n```","```\r\nclientID=xxxxxxxx\r\nclientSecret=xxxxxxxx\r\naccessTokenUri=https://www.reddit.com/api/v1/access_token\r\nuserAuthorizationUri=https://www.reddit.com/api/v1/authorize\r\n```","```\r\n requestParameters.put(\"duration\", \"permanent\");\r\n```","```\r\npublic class ServletInitializer extends AbstractDispatcherServletInitializer {\r\n\r\n    @Override\r\n    protected WebApplicationContext createServletApplicationContext() {\r\n        AnnotationConfigWebApplicationContext context = \r\n          new AnnotationConfigWebApplicationContext();\r\n        context.register(WebConfig.class, SecurityConfig.class);\r\n        return context;\r\n    }\r\n\r\n    @Override\r\n    protected String[] getServletMappings() {\r\n        return new String[] { \"/\" };\r\n    }\r\n\r\n    @Override\r\n    protected WebApplicationContext createRootApplicationContext() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletContext) throws ServletException {\r\n        super.onStartup(servletContext);\r\n        registerProxyFilter(servletContext, \"oauth2ClientContextFilter\");\r\n        registerProxyFilter(servletContext, \"springSecurityFilterChain\");\r\n    }\r\n\r\n    private void registerProxyFilter(ServletContext servletContext, String name) {\r\n        DelegatingFilterProxy filter = new DelegatingFilterProxy(name);\r\n        filter.setContextAttribute(\r\n          \"org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher\");\r\n        servletContext.addFilter(name, filter).addMappingForUrlPatterns(null, false, \"/*\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(basePackages = { \"org.baeldung.web\" })\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public static PropertySourcesPlaceholderConfigurer \r\n      propertySourcesPlaceholderConfigurer() {\r\n        return new PropertySourcesPlaceholderConfigurer();\r\n    }\r\n\r\n    @Bean\r\n    public ViewResolver viewResolver() {\r\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\r\n        viewResolver.setPrefix(\"/WEB-INF/jsp/\");\r\n        viewResolver.setSuffix(\".jsp\");\r\n        return viewResolver;\r\n    }\r\n\r\n    @Override\r\n    public void configureDefaultServletHandling(\r\n      DefaultServletHandlerConfigurer configurer) {\r\n        configurer.enable();\r\n    }\r\n\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/resources/\");\r\n    }\r\n\r\n    @Override\r\n    public void addViewControllers(ViewControllerRegistry registry) {\r\n        registry.addViewController(\"/home.html\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) \r\n      throws Exception {\r\n        auth.inMemoryAuthentication();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            .anonymous().disable()\r\n            .csrf().disable()\r\n            .authorizeRequests()\r\n            .antMatchers(\"/home.html\").hasRole(\"USER\")\r\n            .and()\r\n            .httpBasic()\r\n            .authenticationEntryPoint(oauth2AuthenticationEntryPoint());\r\n    }\r\n\r\n    private LoginUrlAuthenticationEntryPoint oauth2AuthenticationEntryPoint() {\r\n        return new LoginUrlAuthenticationEntryPoint(\"/login\");\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class RedditController {\r\n\r\n    @Autowired\r\n    private OAuth2RestTemplate redditRestTemplate;\r\n\r\n    @RequestMapping(\"/login\")\r\n    public String redditLogin() {\r\n        JsonNode node = redditRestTemplate.getForObject(\r\n          \"https://oauth.reddit.com/api/v1/me\", JsonNode.class);\r\n        UsernamePasswordAuthenticationToken auth = \r\n          new UsernamePasswordAuthenticationToken(node.get(\"name\").asText(), \r\n          redditRestTemplate.getAccessToken().getValue(), \r\n          Arrays.asList(new SimpleGrantedAuthority(\"ROLE_USER\")));\r\n\r\n        SecurityContextHolder.getContext().setAuthentication(auth);\r\n        return \"redirect:home.html\";\r\n    }\r\n\r\n}\r\n```","```\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\r\n<%@ taglib prefix=\"sec\" uri=\"http://www.springframework.org/security/tags\"%>\r\n<html>\r\n<body>\r\n    <h1>Welcome, <small><sec:authentication property=\"principal.username\" /></small></h1>\r\n</body>\r\n</html>\r\n```"]