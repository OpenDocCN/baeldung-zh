["```\r\npublic class PrimitiveClass {\r\n\r\n    private boolean primitiveBoolean;\r\n    private int primitiveInt;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + (primitiveBoolean ? 1231 : 1237);\r\n    result = prime * result + primitiveInt;\r\n    return result;\r\n}\r\n\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) return true;\r\n    if (obj == null) return false;\r\n    if (getClass() != obj.getClass()) return false;\r\n    PrimitiveClass other = (PrimitiveClass) obj;\r\n    if (primitiveBoolean != other.primitiveBoolean) return false;\r\n    if (primitiveInt != other.primitiveInt) return false;\r\n    return true;\r\n}\r\n```","```\r\nPrimitiveClass aObject = new PrimitiveClass(false, 2);\r\nPrimitiveClass bObject = new PrimitiveClass(false, 2);\r\nPrimitiveClass dObject = new PrimitiveClass(true, 2);\r\n\r\nassertTrue(aObject.equals(bObject) && bObject.equals(aObject));\r\nassertTrue(aObject.hashCode() == bObject.hashCode());\r\n\r\nassertFalse(aObject.equals(dObject));\r\nassertFalse(aObject.hashCode() == dObject.hashCode());\r\n```","```\r\npublic class ComplexClass {\r\n\r\n    private List<?> genericList;\r\n    private Set<Integer> integerSet;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((genericList == null)\r\n      ? 0 : genericList.hashCode());\r\n    result = prime * result + ((integerSet == null)\r\n      ? 0 : integerSet.hashCode());\r\n    return result;\r\n}\r\n\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) return true;\r\n    if (obj == null) return false;\r\n    if (!(obj instanceof ComplexClass)) return false;\r\n    ComplexClass other = (ComplexClass) obj;\r\n    if (genericList == null) {\r\n        if (other.genericList != null)\r\n            return false;\r\n    } else if (!genericList.equals(other.genericList))\r\n        return false;\r\n    if (integerSet == null) {\r\n        if (other.integerSet != null)\r\n            return false;\r\n    } else if (!integerSet.equals(other.integerSet))\r\n        return false;\r\n    return true;\r\n}\r\n```","```\r\nArrayList<String> strArrayList = new ArrayList<String>();\r\nstrArrayList.add(\"abc\");\r\nstrArrayList.add(\"def\");\r\nComplexClass aObject = new ComplexClass(strArrayList, new HashSet<Integer>(45,67));\r\nComplexClass bObject = new ComplexClass(strArrayList, new HashSet<Integer>(45,67));\r\n\r\nArrayList<String> strArrayListD = new ArrayList<String>();\r\nstrArrayListD.add(\"lmn\");\r\nstrArrayListD.add(\"pqr\");\r\nComplexClass dObject = new ComplexClass(strArrayListD, new HashSet<Integer>(45,67));\r\n\r\nassertTrue(aObject.equals(bObject) && bObject.equals(aObject));\r\nassertTrue(aObject.hashCode() == bObject.hashCode());\r\n\r\nassertFalse(aObject.equals(dObject));\r\nassertFalse(aObject.hashCode() == dObject.hashCode());\r\n```","```\r\npublic abstract class Shape {\r\n    public abstract double area();\r\n\r\n    public abstract double perimeter();\r\n}\r\n\r\npublic class Rectangle extends Shape {\r\n    private double width;\r\n    private double length;\r\n\r\n    @Override\r\n    public double area() {\r\n        return width * length;\r\n    }\r\n\r\n    @Override\r\n    public double perimeter() {\r\n        return 2 * (width + length);\r\n    }\r\n    // constructor, getters and setters\r\n}\r\n\r\npublic class Square extends Rectangle {\r\n    Color color;\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((color == null) ? 0 : color.hashCode());\r\n    return result;\r\n}\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) return true;\r\n    if (obj == null) return false;\r\n    if (getClass() != obj.getClass()) return false;\r\n    Square other = (Square) obj;\r\n    if (color == null) {\r\n        if (other.color != null)\r\n            return false;\r\n    } else if (!color.equals(other.color))\r\n        return false;\r\n    return true;\r\n}\r\n```","```\r\nSquare aObject = new Square(10, Color.BLUE);     \r\nSquare dObject = new Square(20, Color.BLUE);\r\n\r\nAssert.assertFalse(aObject.equals(dObject));\r\nAssert.assertFalse(aObject.hashCode() == dObject.hashCode()); \r\n```","```\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = 1;\r\n    long temp;\r\n    temp = Double.doubleToLongBits(length);\r\n    result = prime * result + (int) (temp ^ (temp >>> 32));\r\n    temp = Double.doubleToLongBits(width);\r\n    result = prime * result + (int) (temp ^ (temp >>> 32));\r\n    return result;\r\n}\r\n\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) return true;\r\n    if (obj == null) return false;\r\n    if (getClass() != obj.getClass()) return false;\r\n    Rectangle other = (Rectangle) obj;\r\n    if (Double.doubleToLongBits(length)\r\n      != Double.doubleToLongBits(other.length)) return false;\r\n    if (Double.doubleToLongBits(width)\r\n      != Double.doubleToLongBits(other.width)) return false;\r\n    return true;\r\n}\r\n```","```\r\n@Override\r\npublic int hashCode() {\r\n    final int prime = 31;\r\n    int result = super.hashCode();\r\n    result = prime * result + ((color == null) ? 0 : color.hashCode());\r\n    return result;\r\n}\r\n\r\n@Override\r\npublic boolean equals(Object obj) {\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (!super.equals(obj)) {\r\n        return false;\r\n    }\r\n    if (!(obj instanceof Square)) {\r\n        return false;\r\n    }\r\n    Square other = (Square) obj;\r\n    if (color == null) {\r\n        if (other.color != null) {\r\n            return false;\r\n       }\r\n    } else if (!color.equals(other.color)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n```"]