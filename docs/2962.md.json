["```\r\npublic class BroadcastingClient {\r\n    private static DatagramSocket socket = null;\r\n\r\n    public static void main((String[] args)) throws IOException {\r\n        broadcast(\"Hello\", InetAddress.getByName(\"255.255.255.255\"));\r\n    }\r\n\r\n    public static void broadcast(\r\n      String broadcastMessage, InetAddress address) throws IOException {\r\n        socket = new DatagramSocket();\r\n        socket.setBroadcast(true);\r\n\r\n        byte[] buffer = broadcastMessage.getBytes();\r\n\r\n        DatagramPacket packet \r\n          = new DatagramPacket(buffer, buffer.length, address, 4445);\r\n        socket.send(packet);\r\n        socket.close();\r\n    }\r\n}\r\n```","```\r\nList<InetAddress> listAllBroadcastAddresses() throws SocketException {\r\n    List<InetAddress> broadcastList = new ArrayList<>();\r\n    Enumeration<NetworkInterface> interfaces \r\n      = NetworkInterface.getNetworkInterfaces();\r\n    while (interfaces.hasMoreElements()) {\r\n        NetworkInterface networkInterface = interfaces.nextElement();\r\n\r\n        if (networkInterface.isLoopback() || !networkInterface.isUp()) {\r\n            continue;\r\n        }\r\n\r\n        networkInterface.getInterfaceAddresses().stream() \r\n          .map(a -> a.getBroadcast())\r\n          .filter(Objects::nonNull)\r\n          .forEach(broadcastList::add);\r\n    }\r\n    return broadcastList;\r\n}\r\n```","```\r\npublic class MulticastReceiver extends Thread {\r\n    protected MulticastSocket socket = null;\r\n    protected byte[] buf = new byte[256];\r\n\r\n    public void run() {\r\n        socket = new MulticastSocket(4446);\r\n        InetAddress group = InetAddress.getByName(\"230.0.0.0\");\r\n        socket.joinGroup(group);\r\n        while (true) {\r\n            DatagramPacket packet = new DatagramPacket(buf, buf.length);\r\n            socket.receive(packet);\r\n            String received = new String(\r\n              packet.getData(), 0, packet.getLength());\r\n            if (\"end\".equals(received)) {\r\n                break;\r\n            }\r\n        }\r\n        socket.leaveGroup(group);\r\n        socket.close();\r\n    }\r\n}\r\n```","```\r\npublic class MulticastPublisher {\r\n    private DatagramSocket socket;\r\n    private InetAddress group;\r\n    private byte[] buf;\r\n\r\n    public void multicast(\r\n      String multicastMessage) throws IOException {\r\n        socket = new DatagramSocket();\r\n        group = InetAddress.getByName(\"230.0.0.0\");\r\n        buf = multicastMessage.getBytes();\r\n\r\n        DatagramPacket packet \r\n          = new DatagramPacket(buf, buf.length, group, 4446);\r\n        socket.send(packet);\r\n        socket.close();\r\n    }\r\n}\r\n```"]