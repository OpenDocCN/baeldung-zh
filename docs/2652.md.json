["```\r\n<dependency>\r\n    <groupId>com.squareup</groupId>\r\n    <artifactId>javapoet</artifactId>\r\n    <version>1.10.0</version>\r\n</dependency>\r\n```","```\r\nMethodSpec sumOfTen = MethodSpec\r\n  .methodBuilder(\"sumOfTen\")\r\n  .addStatement(\"int sum = 0\")\r\n  .beginControlFlow(\"for (int i = 0; i <= 10; i++)\")\r\n  .addStatement(\"sum += i\")\r\n  .endControlFlow()\r\n  .build();\r\n```","```\r\nvoid sumOfTen() {\r\n    int sum = 0;\r\n    for (int i = 0; i <= 10; i++) {\r\n        sum += i;\r\n    }\r\n}\r\n```","```\r\nCodeBlock sumOfTenImpl = CodeBlock\r\n  .builder()\r\n  .addStatement(\"int sum = 0\")\r\n  .beginControlFlow(\"for (int i = 0; i <= 10; i++)\")\r\n  .addStatement(\"sum += i\")\r\n  .endControlFlow()\r\n  .build();\r\n```","```\r\nint sum = 0;\r\nfor (int i = 0; i <= 10; i++) {\r\n    sum += i;\r\n}\r\n```","```\r\nMethodSpec sumOfTen = MethodSpec\r\n  .methodBuilder(\"sumOfTen\")\r\n  .addCode(sumOfTenImpl)\r\n  .build();\r\n```","```\r\nFieldSpec name = FieldSpec\r\n  .builder(String.class, \"name\")\r\n  .addModifiers(Modifier.PRIVATE)\r\n  .build();\r\n```","```\r\nprivate String name;\r\n```","```\r\nFieldSpec defaultName = FieldSpec\r\n  .builder(String.class, \"DEFAULT_NAME\")\r\n  .addModifiers(Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL)\r\n  .initializer(\"\\\"Alice\\\"\")\r\n  .build();\r\n```","```\r\nprivate static final String DEFAULT_NAME = \"Alice\";\r\n```","```\r\nParameterSpec strings = ParameterSpec\r\n  .builder(\r\n    ParameterizedTypeName.get(ClassName.get(List.class), TypeName.get(String.class)), \r\n    \"strings\")\r\n  .build();\r\n```","```\r\nMethodSpec sumOfTen = MethodSpec\r\n  .methodBuilder(\"sumOfTen\")\r\n  .addParameter(int.class, \"number\")\r\n  .addParameter(strings)\r\n  .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\r\n  .addCode(sumOfTenImpl)\r\n  .build();\r\n```","```\r\npublic static void sumOfTen(int number, List<String> strings) {\r\n    int sum = 0;\r\n    for (int i = 0; i <= 10; i++) {\r\n        sum += i;\r\n    }\r\n}\r\n```","```\r\nTypeSpec person = TypeSpec\r\n  .classBuilder(\"Person\")\r\n  .addModifiers(Modifier.PUBLIC)\r\n  .addField(name)\r\n  .addMethod(MethodSpec\r\n    .methodBuilder(\"getName\")\r\n    .addModifiers(Modifier.PUBLIC)\r\n    .returns(String.class)\r\n    .addStatement(\"return this.name\")\r\n    .build())\r\n  .addMethod(MethodSpec\r\n    .methodBuilder(\"setName\")\r\n    .addParameter(String.class, \"name\")\r\n    .addModifiers(Modifier.PUBLIC)\r\n    .returns(String.class)\r\n    .addStatement(\"this.name = name\")\r\n    .build())\r\n  .addMethod(sumOfTen)\r\n  .build();\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n\r\n    public String getName() {\r\n        return this.name;\r\n    }\r\n\r\n    public String setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public static void sumOfTen(int number, List<String> strings) {\r\n        int sum = 0;\r\n        for (int i = 0; i <= 10; i++) {\r\n            sum += i;\r\n        }\r\n    }\r\n}\r\n```","```\r\nTypeSpec person = TypeSpec\r\n  .interfaceBuilder(\"Person\")\r\n  .addModifiers(Modifier.PUBLIC)\r\n  .addField(defaultName)\r\n  .addMethod(MethodSpec\r\n    .methodBuilder(\"getName\")\r\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\r\n    .build())\r\n  .addMethod(MethodSpec\r\n    .methodBuilder(\"getDefaultName\")\r\n    .addModifiers(Modifier.PUBLIC, Modifier.DEFAULT)\r\n    .addCode(CodeBlock\r\n      .builder()\r\n      .addStatement(\"return DEFAULT_NAME\")\r\n      .build())\r\n    .build())\r\n  .build();\r\n```","```\r\npublic interface Person {\r\n    private static final String DEFAULT_NAME = \"Alice\";\r\n\r\n    void getName();\r\n\r\n    default void getDefaultName() {\r\n        return DEFAULT_NAME;\r\n    }\r\n}\r\n```","```\r\nTypeSpec gender = TypeSpec\r\n  .enumBuilder(\"Gender\")\r\n  .addModifiers(Modifier.PUBLIC)\r\n  .addEnumConstant(\"MALE\")\r\n  .addEnumConstant(\"FEMALE\")\r\n  .addEnumConstant(\"UNSPECIFIED\")\r\n  .build();\r\n```","```\r\npublic enum Gender {\r\n    MALE,\r\n    FEMALE,\r\n    UNSPECIFIED\r\n}\r\n```","```\r\nTypeSpec comparator = TypeSpec\r\n  .anonymousClassBuilder(\"\")\r\n  .addSuperinterface(ParameterizedTypeName.get(Comparator.class, String.class))\r\n  .addMethod(MethodSpec\r\n    .methodBuilder(\"compare\")\r\n    .addModifiers(Modifier.PUBLIC)\r\n    .addParameter(String.class, \"a\")\r\n    .addParameter(String.class, \"b\")\r\n    .returns(int.class)\r\n    .addStatement(\"return a.length() - b.length()\")\r\n    .build())\r\n  .build();\r\n```","```\r\nnew Comparator<String>() {\r\n    public int compare(String a, String b) {\r\n        return a.length() - b.length();\r\n    }\r\n});\r\n```","```\r\nMethodSpec sumOfTen = MethodSpec\r\n  .methodBuilder(\"sumOfTen\")\r\n  .addAnnotation(Override.class)\r\n  .addParameter(int.class, \"number\")\r\n  .addParameter(strings)\r\n  .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\r\n  .addCode(sumOfTenImpl)\r\n  .build();\r\n```","```\r\n@Override\r\npublic static void sumOfTen(int number, List<String> strings) {\r\n    int sum = 0;\r\n    for (int i = 0; i <= 10; i++) {\r\n        sum += i;\r\n    }\r\n}\r\n```","```\r\nAnnotationSpec toString = AnnotationSpec\r\n  .builder(ToString.class)\r\n  .addMember(\"exclude\", \"\\\"name\\\"\")\r\n  .build();\r\n```","```\r\n@ToString(\r\n    exclude = \"name\"\r\n)\r\n```","```\r\nMethodSpec sumOfTen = MethodSpec\r\n  .methodBuilder(\"sumOfTen\")\r\n  .addJavadoc(CodeBlock\r\n    .builder()\r\n    .add(\"Sum of all integers from 0 to 10\")\r\n    .build())\r\n  .addAnnotation(Override.class)\r\n  .addParameter(int.class, \"number\")\r\n  .addParameter(strings)\r\n  .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\r\n  .addCode(sumOfTenImpl)\r\n  .build();\r\n```","```\r\n/**\r\n * Sum of all integers from 0 to 10\r\n */\r\n@Override\r\npublic static void sumOfTen(int number, List<String> strings) {\r\n    int sum = 0;\r\n    for (int i = 0; i <= 10; i++) {\r\n        sum += i;\r\n    }\r\n}\r\n```","```\r\ninitializer(\"\\\"Alice\\\"\")\r\n```","```\r\naddMember(\"exclude\", \"\\\"name\\\"\")\r\n```","```\r\nprivate MethodSpec generateSumMethod(String name, int from, int to, String operator) {\r\n    return MethodSpec\r\n      .methodBuilder(name)\r\n      .returns(int.class)\r\n      .addStatement(\"int sum = 0\")\r\n      .beginControlFlow(\"for (int i = $L; i <= $L; i++)\", from, to)\r\n      .addStatement(\"sum = sum $L i\", operator)\r\n      .endControlFlow()\r\n      .addStatement(\"return sum\")\r\n      .build();\r\n}\r\n```","```\r\ngenerateSumMethod(\"sumOfOneHundred\", 0, 100, \"+\");\r\n```","```\r\nint sumOfOneHundred() {\r\n    int sum = 0;\r\n    for (int i = 0; i <= 100; i++) {\r\n        sum = sum + i;\r\n    }\r\n    return sum;\r\n}\r\n```","```\r\nprivate static MethodSpec generateStringSupplier(String methodName, String fieldName) {\r\n    return MethodSpec\r\n      .methodBuilder(methodName)\r\n      .returns(String.class)\r\n      .addStatement(\"return $S\", fieldName)\r\n      .build();\r\n}\r\n```","```\r\ngenerateStringSupplier(\"getDefaultName\", \"Bob\");\r\n```","```\r\nString getDefaultName() {\r\n    return \"Bob\";\r\n}\r\n```","```\r\nMethodSpec getCurrentDateMethod = MethodSpec\r\n  .methodBuilder(\"getCurrentDate\")\r\n  .returns(Date.class)\r\n  .addStatement(\"return new $T()\", Date.class)\r\n  .build();\r\n```","```\r\nDate getCurrentDate() {\r\n    return new Date();\r\n}\r\n```","```\r\nMethodSpec dateToString = MethodSpec\r\n  .methodBuilder(\"getCurrentDateAsString\")\r\n  .returns(String.class)\r\n  .addStatement(\r\n    \"$T formatter = new $T($S)\", \r\n    DateFormat.class, \r\n    SimpleDateFormat.class, \r\n    \"MM/dd/yyyy HH:mm:ss\")\r\n  .addStatement(\"return formatter.format($N())\", getCurrentDateMethod)\r\n  .build();\r\n```","```\r\nString getCurrentDateAsString() {\r\n    DateFormat formatter = new SimpleDateFormat(\"MM/dd/yyyy HH:mm:ss\");\r\n    return formatter.format(getCurrentDate());\r\n}\r\n```","```\r\nCodeBlock printNameMultipleTimes = CodeBlock\r\n  .builder()\r\n  .addStatement(\"$T<$T> names = new $T<>()\", List.class, String.class, ArrayList.class)\r\n  .addStatement(\"$T.range($L, $L).forEach(i -> names.add(name))\", IntStream.class, 0, 10)\r\n  .addStatement(\"names.forEach(System.out::println)\")\r\n  .build();\r\n```","```\r\nList<String> names = new ArrayList<>();\r\nIntStream.range(0, 10).forEach(i -> names.add(name));\r\nnames.forEach(System.out::println);\r\n```","```\r\nJavaFile javaFile = JavaFile\r\n  .builder(\"com.baeldung.javapoet.person\", person)\r\n  .indent(\"    \")\r\n  .build();\r\n```","```\r\nJavaFile javaFile = JavaFile\r\n  .builder(\"com.baeldung.javapoet.person\", person)\r\n  .indent(\"    \")\r\n  .addStaticImport(Date.class, \"UTC\")\r\n  .addStaticImport(ClassName.get(\"java.time\", \"ZonedDateTime\"), \"*\")\r\n  .build();\r\n```","```\r\nimport static java.util.Date.UTC;\r\nimport static java.time.ZonedDateTime.*;\r\n```","```\r\nJavaFile javaFile = JavaFile\r\n  .builder(\"com.baeldung.javapoet.person\", person)\r\n  .indent(\"    \")\r\n  .addStaticImport(Date.class, \"UTC\")\r\n  .addStaticImport(ClassName.get(\"java.time\", \"ZonedDateTime\"), \"*\")\r\n  .build();\r\n\r\njavaFile.writeTo(System.out);\r\n```","```\r\nPath path = Paths.get(destinationPath);\r\njavaFile.writeTo(path);\r\n```"]