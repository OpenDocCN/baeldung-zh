["```\r\npublic static String hmacWithJava(String algorithm, String data, String key)\r\n  throws NoSuchAlgorithmException, InvalidKeyException {\r\n    SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);\r\n    Mac mac = Mac.getInstance(algorithm);\r\n    mac.init(secretKeySpec);\r\n    return bytesToHex(mac.doFinal(data.getBytes()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataAndKeyAndAlgorithm_whenHmacWithJava_thenSuccess()\r\n    throws NoSuchAlgorithmException, InvalidKeyException {\r\n\r\n    String hmacSHA256Value = \"5b50d80c7dc7ae8bb1b1433cc0b99ecd2ac8397a555c6f75cb8a619ae35a0c35\";\r\n    String hmacSHA256Algorithm = \"HmacSHA256\";\r\n    String data = \"baeldung\";\r\n    String key = \"123456\";\r\n\r\n    String result = HMACUtil.hmacWithJava(hmacSHA256Algorithm, data, key);\r\n\r\n    assertEquals(hmacSHA256Value, result);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>commons-codec</groupId>\r\n    <artifactId>commons-codec</artifactId>\r\n    <version>1.15</version>\r\n</dependency> \r\n```","```\r\npublic static String hmacWithApacheCommons(String algorithm, String data, String key) {\r\n    String hmac = new HmacUtils(algorithm, key).hmacHex(data);\r\n    return hmac;\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataAndKeyAndAlgorithm_whenHmacWithApacheCommons_thenSuccess() {\r\n\r\n    String hmacMD5Value = \"621dc816b3bf670212e0c261dc9bcdb6\";\r\n    String hmacMD5Algorithm = \"HmacMD5\";\r\n    String data = \"baeldung\";\r\n    String key = \"123456\";\r\n\r\n    String result = HMACUtil.hmacWithApacheCommons(hmacMD5Algorithm, data, key);\r\n\r\n    assertEquals(hmacMD5Value, result);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcpkix-jdk15to18</artifactId>\r\n    <version>1.69</version>\r\n</dependency>\r\n```","```\r\npublic static String hmacWithBouncyCastle(String algorithm, String data, String key) {\r\n    Digest digest = getHashDigest(algorithm);\r\n\r\n    HMac hMac = new HMac(digest);\r\n    hMac.init(new KeyParameter(key.getBytes()));\r\n\r\n    byte[] hmacIn = data.getBytes();\r\n    hMac.update(hmacIn, 0, hmacIn.length);\r\n    byte[] hmacOut = new byte[hMac.getMacSize()];\r\n\r\n    hMac.doFinal(hmacOut, 0);\r\n    return bytesToHex(hmacOut);\r\n}\r\n\r\nprivate static Digest getHashDigest(String algorithm) {\r\n    switch (algorithm) {\r\n      case \"HmacMD5\":\r\n        return new MD5Digest();\r\n      case \"HmacSHA256\":\r\n        return new SHA256Digest();\r\n      case \"HmacSHA384\":\r\n        return new SHA384Digest();\r\n      case \"HmacSHA512\":\r\n        return new SHA512Digest();\r\n    }\r\n    return new SHA256Digest();\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataAndKeyAndAlgorithm_whenHmacWithBouncyCastle_thenSuccess() {\r\n\r\n    String hmacSHA512Value = \"b313a21908df55c9e322e3c65a4b0b7561ab1594ca806b3affbc0d769a1\" +\r\n      \"290c1922aa6622587bea3c0c4d871470a6d06f54dbd20dbda84250e2741eb01f08e33\";\r\n    String hmacSHA512Algorithm = \"HmacSHA512\";\r\n    String data = \"baeldung\";\r\n    String key = \"123456\";\r\n\r\n    String result = HMACUtil.hmacWithBouncyCastle(hmacSHA512Algorithm, data, key);\r\n\r\n    assertEquals(hmacSHA512Value, result);\r\n}\r\n```"]