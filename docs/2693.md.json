["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\n Function<Integer, String> function = new Function<Integer, String>() {\r\n        @Override\r\n        public String apply(Integer from) {\r\n            return Integer.toBinaryString(from.intValue());\r\n        }\r\n    };\r\n```","```\r\nMap<Integer, String> immutableMap = Maps.toMap(set, function);\r\n```","```\r\n@Test\r\npublic void givenStringSetAndSimpleMap_whenMapsToElementLength_thenCorrect() {\r\n    Set set = new TreeSet(Arrays.asList(32, 64, 128));\r\n    Map<Integer, String> immutableMap = Maps.toMap(set, function);\r\n    assertTrue(immutableMap.get(32).equals(\"100000\")\r\n      && immutableMap.get(64).equals(\"1000000\")\r\n      && immutableMap.get(128).equals(\"10000000\"));\r\n} \r\n```","```\r\nMap<Integer, String> liveMap = Maps.asMap(set, function);\r\n```","```\r\n@Test\r\npublic void givenStringSet_whenMapsToElementLength_thenCorrect() {\r\n    Set<Integer> set = new TreeSet<Integer>(Arrays.asList(32, 64, 128));\r\n    Map<Integer, String> liveMap = Maps.asMap(set, function);\r\n    assertTrue(liveMap.get(32).equals(\"100000\")\r\n            && liveMap.get(64).equals(\"1000000\")\r\n            && liveMap.get(128).equals(\"10000000\"));\r\n\r\n    set.add(256);\r\n    assertTrue(liveMap.get(256).equals(\"100000000\") && liveMap.size() == 4);\r\n} \r\n```","```\r\npublic class GuavaMapFromSet<K, V> extends AbstractMap<K, V> {\r\n    public GuavaMapFromSet(Set<K> keys, \r\n        Function<? super K, ? extends V> function) { \r\n    }\r\n}\r\n```","```\r\nprivate Set<Entry<K, V>> entries;\r\n```","```\r\npublic GuavaMapFromSet(Set<K> keys,Function<? super K, ? extends V> function) {\r\n    this.entries=keys;\r\n}\r\n```","```\r\n@Override\r\npublic Set<java.util.Map.Entry<K, V>> entrySet() {\r\n    return this.entries;\r\n}\r\n```","```\r\nprivate WeakHashMap<K, V> cache;\r\n```","```\r\nprivate class SingleEntry implements Entry<K, V> {\r\n    private K key;\r\n    public SingleEntry( K key) {\r\n        this.key = key;\r\n    }\r\n    @Override\r\n    public K getKey() {\r\n        return this.key;\r\n    }\r\n    @Override\r\n    public V getValue() {\r\n        V value = GuavaMapFromSet.this.cache.get(this.key);\r\n  if (value == null) {\r\n      value = GuavaMapFromSet.this.function.apply(this.key);\r\n      GuavaMapFromSet.this.cache.put(this.key, value);\r\n  }\r\n  return value;\r\n    }\r\n    @Override\r\n    public V setValue( V value) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n}\r\n```","```\r\nprivate class MyEntrySet extends AbstractSet<Entry<K, V>> {\r\n    private Set<K> keys;\r\n    public MyEntrySet(Set<K> keys) {\r\n        this.keys = keys;\r\n    }\r\n    @Override\r\n    public Iterator<Map.Entry<K, V>> iterator() {\r\n        return new LiveViewIterator();\r\n    }\r\n    @Override\r\n    public int size() {\r\n        return this.keys.size();\r\n    }\r\n}\r\n```","```\r\npublic class LiveViewIterator implements Iterator<Entry<K, V>> {\r\n    private Iterator<K> inner;\r\n\r\n    public LiveViewIterator () {\r\n        this.inner = MyEntrySet.this.keys.iterator();\r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        return this.inner.hasNext();\r\n    }\r\n    @Override\r\n    public Map.Entry<K, V> next() {\r\n        K key = this.inner.next();\r\n        return new SingleEntry(key);\r\n    }\r\n    @Override\r\n    public void remove() {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenIntSet_whenMapsToElementBinaryValue_thenCorrect() {\r\n    Set<Integer> set = new TreeSet<>(Arrays.asList(32, 64, 128));\r\n    Map<Integer, String> customMap = new GuavaMapFromSet<Integer, String>(set, function);\r\n\r\n    assertTrue(customMap.get(32).equals(\"100000\")\r\n      && customMap.get(64).equals(\"1000000\")\r\n      && customMap.get(128).equals(\"10000000\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringSet_whenMapsToElementLength_thenCorrect() {\r\n    Set<Integer> set = new TreeSet<Integer>(Arrays.asList(32, 64, 128));\r\n    Map<Integer, String> customMap = Maps.asMap(set, function);\r\n\r\n    assertTrue(customMap.get(32).equals(\"100000\")\r\n      && customMap.get(64).equals(\"1000000\")\r\n      && customMap.get(128).equals(\"10000000\"));\r\n\r\n    set.add(256);\r\n    assertTrue(customMap.get(256).equals(\"100000000\") && customMap.size() == 4);\r\n}\r\n```"]