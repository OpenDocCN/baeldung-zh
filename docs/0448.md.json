["```\r\n<dependency>\r\n    <groupId>org.apache.camel</groupId>\r\n    <artifactId>camel-jackson</artifactId>\r\n    <version>3.6.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.camel</groupId>\r\n    <artifactId>camel-test</artifactId>\r\n    <version>3.6.0</version>\r\n</dependency>\r\n```","```\r\npublic class Fruit {\r\n\r\n    private String name;\r\n    private int id;\r\n\r\n    // standard getter and setters\r\n}\r\n```","```\r\npublic class FruitList {\r\n\r\n    private List<Fruit> fruits;\r\n\r\n    public List<Fruit> getFruits() {\r\n        return fruits;\r\n    }\r\n\r\n    public void setFruits(List<Fruit> fruits) {\r\n        this.fruits = fruits;\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"fruits\": [\r\n        {\r\n            \"id\": 100,\r\n            \"name\": \"Banana\"\r\n        },\r\n        {\r\n            \"id\": 101,\r\n            \"name\": \"Apple\"\r\n        }\r\n    ]\r\n}\r\n```","```\r\n@Override\r\nprotected RouteBuilder createRouteBuilder() throws Exception {\r\n    return new RouteBuilder() {\r\n        @Override\r\n        public void configure() throws Exception {\r\n            from(\"direct:jsonInput\")\r\n              .unmarshal(new JacksonDataFormat(FruitList.class))\r\n              .to(\"mock:marshalledObject\");\r\n        }\r\n    };\r\n}\r\n```","```\r\npublic class FruitListJacksonUnmarshalUnitTest extends CamelTestSupport {\r\n\r\n    @Test\r\n    public void givenJsonFruitList_whenUnmarshalled_thenSuccess() throws Exception {\r\n        MockEndpoint mock = getMockEndpoint(\"mock:marshalledObject\");\r\n        mock.expectedMessageCount(1);\r\n        mock.message(0).body().isInstanceOf(FruitList.class);\r\n\r\n        String json = readJsonFromFile(\"/json/fruit-list.json\");\r\n        template.sendBody(\"direct:jsonInput\", json);\r\n        assertMockEndpointsSatisfied();\r\n\r\n        FruitList fruitList = mock.getReceivedExchanges().get(0).getIn().getBody(FruitList.class);\r\n        assertNotNull(\"Fruit lists should not be null\", fruitList);\r\n\r\n        List<Fruit> fruits = fruitList.getFruits();\r\n        assertEquals(\"There should be two fruits\", 2, fruits.size());\r\n\r\n        Fruit fruit = fruits.get(0);\r\n        assertEquals(\"Fruit name\", \"Banana\", fruit.getName());\r\n        assertEquals(\"Fruit id\", 100, fruit.getId());\r\n\r\n        fruit = fruits.get(1);\r\n        assertEquals(\"Fruit name\", \"Apple\", fruit.getName());\r\n        assertEquals(\"Fruit id\", 101, fruit.getId());\r\n    }\r\n}\r\n```","```\r\n[\r\n    {\r\n        \"id\": 100,\r\n        \"name\": \"Banana\"\r\n    },\r\n    {\r\n        \"id\": 101,\r\n        \"name\": \"Apple\"\r\n    }\r\n]\r\n```","```\r\n@Override\r\nprotected RouteBuilder createRouteBuilder() throws Exception {\r\n    return new RouteBuilder() {\r\n        @Override\r\n        public void configure() throws Exception {\r\n            from(\"direct:jsonInput\")\r\n              .unmarshal(new ListJacksonDataFormat(Fruit.class))\r\n              .to(\"mock:marshalledObject\");\r\n        }\r\n    };\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonFruitArray_whenUnmarshalled_thenSuccess() throws Exception {\r\n    MockEndpoint mock = getMockEndpoint(\"mock:marshalledObject\");\r\n    mock.expectedMessageCount(1);\r\n    mock.message(0).body().isInstanceOf(List.class);\r\n\r\n    String json = readJsonFromFile(\"/json/fruit-array.json\");\r\n    template.sendBody(\"direct:jsonInput\", json);\r\n    assertMockEndpointsSatisfied();\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    List<Fruit> fruitList = mock.getReceivedExchanges().get(0).getIn().getBody(List.class);\r\n    assertNotNull(\"Fruit lists should not be null\", fruitList);\r\n\r\n    // more standard assertions\r\n}\r\n```"]