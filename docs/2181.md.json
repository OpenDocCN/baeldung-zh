["```\r\n<dependency>\r\n    <groupId>org.springframework.statemachine</groupId>\r\n    <artifactId>spring-statemachine-core</artifactId>\r\n    <version>3.2.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableStateMachine\r\npublic class SimpleStateMachineConfiguration \r\n  extends StateMachineConfigurerAdapter<String, String> {\r\n\r\n    @Override\r\n    public void configure(StateMachineStateConfigurer<String, String> states) \r\n      throws Exception {\r\n\r\n        states\r\n          .withStates()\r\n          .initial(\"SI\")\r\n          .end(\"SF\")\r\n          .states(\r\n            new HashSet<String>(Arrays.asList(\"S1\", \"S2\", \"S3\")));\r\n\r\n    }\r\n\r\n    @Override\r\n    public void configure(\r\n      StateMachineTransitionConfigurer<String, String> transitions) \r\n      throws Exception {\r\n\r\n        transitions.withExternal()\r\n          .source(\"SI\").target(\"S1\").event(\"E1\").and()\r\n          .withExternal()\r\n          .source(\"S1\").target(\"S2\").event(\"E2\").and()\r\n          .withExternal()\r\n          .source(\"S2\").target(\"SF\").event(\"end\");\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate StateMachine<String, String> stateMachine;\r\n```","```\r\nstateMachine.start();\r\n```","```\r\nstateMachine.sendEvent(\"E1\");\r\n```","```\r\nstateMachine.getState();\r\n```","```\r\n@Bean\r\npublic Action<String, String> initAction() {\r\n    return ctx -> System.out.println(ctx.getTarget().getId());\r\n}\r\n```","```\r\n@Override\r\npublic void configure(\r\n  StateMachineTransitionConfigurer<String, String> transitions)\r\n  throws Exception {\r\n\r\n    transitions.withExternal()\r\n      transitions.withExternal()\r\n      .source(\"SI\").target(\"S1\")\r\n      .event(\"E1\").action(initAction())\r\n```","```\r\n@Bean\r\npublic Action<String, String> executeAction() {\r\n    return ctx -> System.out.println(\"Do\" + ctx.getTarget().getId());\r\n}\r\n\r\nstates\r\n  .withStates()\r\n  .state(\"S3\", executeAction(), errorAction());\r\n```","```\r\n@Bean\r\npublic Action<String, String> errorAction() {\r\n    return ctx -> System.out.println(\r\n      \"Error \" + ctx.getSource().getId() + ctx.getException());\r\n}\r\n```","```\r\n@Bean\r\npublic Action<String, String> entryAction() {\r\n    return ctx -> System.out.println(\r\n      \"Entry \" + ctx.getTarget().getId());\r\n}\r\n\r\n@Bean\r\npublic Action<String, String> executeAction() {\r\n    return ctx -> \r\n      System.out.println(\"Do \" + ctx.getTarget().getId());\r\n}\r\n\r\n@Bean\r\npublic Action<String, String> exitAction() {\r\n    return ctx -> System.out.println(\r\n      \"Exit \" + ctx.getSource().getId() + \" -> \" + ctx.getTarget().getId());\r\n}\r\n```","```\r\nstates\r\n  .withStates()\r\n  .stateEntry(\"S3\", entryAction())\r\n  .state(\"S3\", executeAction())\r\n  .stateExit(\"S3\", exitAction());\r\n```","```\r\npublic class StateMachineListener extends StateMachineListenerAdapter {\r\n\r\n    @Override\r\n    public void stateChanged(State from, State to) {\r\n        System.out.printf(\"Transitioned from %s to %s%n\", from == null ? \r\n          \"none\" : from.getId(), to.getId());\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic Action<String, String> executeAction() {\r\n    return ctx -> {\r\n        int approvals = (int) ctx.getExtendedState().getVariables()\r\n          .getOrDefault(\"approvalCount\", 0);\r\n        approvals++;\r\n        ctx.getExtendedState().getVariables()\r\n          .put(\"approvalCount\", approvals);\r\n    };\r\n}\r\n```","```\r\n@Bean\r\npublic Guard<String, String> simpleGuard() {\r\n    return ctx -> (int) ctx.getExtendedState()\r\n      .getVariables()\r\n      .getOrDefault(\"approvalCount\", 0) > 0;\r\n}\r\n```","```\r\n.guardExpression(\"extendedState.variables.approvalCount > 0\")\r\n```","```\r\nStateMachineBuilder.Builder<String, String> builder \r\n  = StateMachineBuilder.builder();\r\nbuilder.configureStates().withStates()\r\n  .initial(\"SI\")\r\n  .state(\"S1\")\r\n  .end(\"SF\");\r\n\r\nbuilder.configureTransitions()\r\n  .withExternal()\r\n  .source(\"SI\").target(\"S1\").event(\"E1\")\r\n  .and().withExternal()\r\n  .source(\"S1\").target(\"SF\").event(\"E2\");\r\n\r\nStateMachine<String, String> machine = builder.build();\r\n```","```\r\nstates\r\n  .withStates()\r\n    .initial(\"SI\")\r\n    .state(\"SI\")\r\n    .end(\"SF\")\r\n    .and()\r\n  .withStates()\r\n    .parent(\"SI\")\r\n    .initial(\"SUB1\")\r\n    .state(\"SUB2\")\r\n    .end(\"SUBEND\");\r\n```","```\r\nstateMachine.getState().getIds()\r\n[\"SI\", \"SUB1\"]\r\n```","```\r\nstates\r\n  .withStates()\r\n  .junction(\"SJ\")\r\n```","```\r\n.withJunction()\r\n  .source(\"SJ\")\r\n  .first(\"high\", highGuard())\r\n  .then(\"medium\", mediumGuard())\r\n  .last(\"low\")\r\n```","```\r\n@Bean\r\npublic Guard<String, String> mediumGuard() {\r\n    return ctx -> false;\r\n}\r\n\r\n@Bean\r\npublic Guard<String, String> highGuard() {\r\n    return ctx -> false;\r\n}\r\n```","```\r\nstates\r\n  .withStates()\r\n  .initial(\"SI\")\r\n  .fork(\"SFork\")\r\n  .and()\r\n  .withStates()\r\n    .parent(\"SFork\")\r\n    .initial(\"Sub1-1\")\r\n    .end(\"Sub1-2\")\r\n  .and()\r\n  .withStates()\r\n    .parent(\"SFork\")\r\n    .initial(\"Sub2-1\")\r\n    .end(\"Sub2-2\");\r\n```","```\r\n.withFork()\r\n  .source(\"SFork\")\r\n  .target(\"Sub1-1\")\r\n  .target(\"Sub2-1\");\r\n```","```\r\nstates\r\n  .withStates()\r\n  .join(\"SJoin\")\r\n```","```\r\ntransitions\r\n  .withJoin()\r\n    .source(\"Sub1-2\")\r\n    .source(\"Sub2-2\")\r\n    .target(\"SJoin\");\r\n```","```\r\npublic enum ApplicationReviewStates {\r\n    PEER_REVIEW, PRINCIPAL_REVIEW, APPROVED, REJECTED\r\n}\r\n\r\npublic enum ApplicationReviewEvents {\r\n    APPROVE, REJECT\r\n}\r\n```","```\r\npublic class SimpleEnumStateMachineConfiguration \r\n  extends StateMachineConfigurerAdapter\r\n  <ApplicationReviewStates, ApplicationReviewEvents>\r\n```","```\r\ntransitions.withExternal()\r\n  .source(ApplicationReviewStates.PEER_REVIEW)\r\n  .target(ApplicationReviewStates.PRINCIPAL_REVIEW)\r\n  .event(ApplicationReviewEvents.APPROVE)\r\n```"]