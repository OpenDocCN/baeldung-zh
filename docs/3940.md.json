["```\r\npublic class User {\r\n\r\n    // implementation details\r\n\r\n}\r\n```","```\r\npublic class Lender extends User {\r\n\r\n    // implementation details\r\n\r\n}\r\n```","```\r\npublic class Borrower extends User {\r\n\r\n    // implementation details\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenLender_whenGetClass_thenEqualsLenderType() {\r\n    User lender = new Lender();\r\n    assertEquals(Lender.class, lender.getClass());\r\n    assertNotEquals(User.class, lender.getClass());\r\n}\r\n```","```\r\n@Ignore\r\n@Test\r\npublic void givenBorrower_whenDoubleOrNotString_thenRequestLoan() {\r\n    Borrower borrower = new Borrower();\r\n    double amount = 100.0;\r\n\r\n    if(amount instanceof Double) { // Compilation error, no autoboxing\r\n        borrower.requestLoan(amount);\r\n    }\r\n\r\n    if(!(amount instanceof String)) { // Compilation error, incompatible operands\r\n        borrower.requestLoan(amount);\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenBorrower_whenLoanAmountIsDouble_thenRequestLoan() {\r\n    Borrower borrower = new Borrower();\r\n    double amount = 100.0;\r\n\r\n    if(Double.class.isInstance(amount)) { // No compilation error\r\n        borrower.requestLoan(amount);\r\n    }\r\n    assertEquals(100, borrower.getTotalLoanAmount());\r\n}\r\n```","```\r\n@Test\r\npublic void givenBorrower_whenLoanAmountIsNotString_thenRequestLoan() {\r\n    Borrower borrower = new Borrower();\r\n    Double amount = 100.0;\r\n\r\n    if(!String.class.isInstance(amount)) { // No compilation error\r\n        borrower.requestLoan(amount);\r\n    }\r\n    assertEquals(100, borrower.getTotalLoanAmount());\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenIsInstanceOfLender_thenDowncast() {\r\n    User user = new Lender();\r\n    Lender lender = null;\r\n\r\n    if(Lender.class.isInstance(user)) {\r\n        lender = (Lender) user;\r\n    }\r\n\r\n    assertNotNull(lender);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLender_whenInstanceOf_thenReturnTrue() {\r\n    User lender = new Lender();\r\n    assertTrue(lender instanceof Lender);\r\n    assertTrue(lender instanceof User);\r\n}\r\n```"]