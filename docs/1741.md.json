["```\r\nString text = \"Hello Baeldung!\\nThis is Java 12 article.\";\r\n\r\ntext = text.indent(4);\r\nSystem.out.println(text);\r\n\r\ntext = text.indent(-10);\r\nSystem.out.println(text);\r\n```","```\r\n Hello Baeldung!\r\n    This is Java 12 article.\r\n\r\nHello Baeldung!\r\nThis is Java 12 article.\r\n```","```\r\n@Test\r\npublic void givenString_thenRevertValue() {\r\n    String text = \"Baeldung\";\r\n    String transformed = text.transform(value ->\r\n      new StringBuilder(value).reverse().toString()\r\n    );\r\n\r\n    assertEquals(\"gnudleaB\", transformed);\r\n}\r\n```","```\r\npublic static long mismatch(Path path, Path path2) throws IOException\r\n```","```\r\n@Test\r\npublic void givenIdenticalFiles_thenShouldNotFindMismatch() {\r\n    Path filePath1 = Files.createTempFile(\"file1\", \".txt\");\r\n    Path filePath2 = Files.createTempFile(\"file2\", \".txt\");\r\n    Files.writeString(filePath1, \"Java 12 Article\");\r\n    Files.writeString(filePath2, \"Java 12 Article\");\r\n\r\n    long mismatch = Files.mismatch(filePath1, filePath2);\r\n    assertEquals(-1, mismatch);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDifferentFiles_thenShouldFindMismatch() {\r\n    Path filePath3 = Files.createTempFile(\"file3\", \".txt\");\r\n    Path filePath4 = Files.createTempFile(\"file4\", \".txt\");\r\n    Files.writeString(filePath3, \"Java 12 Article\");\r\n    Files.writeString(filePath4, \"Java 12 Tutorial\");\r\n\r\n    long mismatch = Files.mismatch(filePath3, filePath4);\r\n    assertEquals(8, mismatch);\r\n}\r\n```","```\r\nCollector<T, ?, R> teeing(Collector<? super T, ?, R1> downstream1,\r\n  Collector<? super T, ?, R2> downstream2, BiFunction<? super R1, ? super R2, R> merger)\r\n```","```\r\n@Test\r\npublic void givenSetOfNumbers_thenCalculateAverage() {\r\n    double mean = Stream.of(1, 2, 3, 4, 5)\r\n      .collect(Collectors.teeing(Collectors.summingDouble(i -> i), \r\n        Collectors.counting(), (sum, count) -> sum / count));\r\n    assertEquals(3.0, mean);\r\n}\r\n```","```\r\npublic static NumberFormat getCompactNumberInstance(Locale locale, NumberFormat.Style formatStyle)\r\n```","```\r\n@Test\r\npublic void givenNumber_thenCompactValues() {\r\n    NumberFormat likesShort = \r\n      NumberFormat.getCompactNumberInstance(new Locale(\"en\", \"US\"), NumberFormat.Style.SHORT);\r\n    likesShort.setMaximumFractionDigits(2);\r\n    assertEquals(\"2.59K\", likesShort.format(2592));\r\n\r\n    NumberFormat likesLong = \r\n      NumberFormat.getCompactNumberInstance(new Locale(\"en\", \"US\"), NumberFormat.Style.LONG);\r\n    likesLong.setMaximumFractionDigits(2);\r\n    assertEquals(\"2.59 thousand\", likesLong.format(2592));\r\n}\r\n```","```\r\njavac -Xlint:preview --enable-preview -source 12 src/main/java/File.java\r\n```","```\r\nDayOfWeek dayOfWeek = LocalDate.now().getDayOfWeek();\r\nString typeOfDay = \"\";\r\nswitch (dayOfWeek) {\r\n    case MONDAY:\r\n    case TUESDAY:\r\n    case WEDNESDAY:\r\n    case THURSDAY:\r\n    case FRIDAY:\r\n        typeOfDay = \"Working Day\";\r\n        break;\r\n    case SATURDAY:\r\n    case SUNDAY:\r\n        typeOfDay = \"Day Off\";\r\n}\r\n```","```\r\ntypeOfDay = switch (dayOfWeek) {\r\n    case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> \"Working Day\";\r\n    case SATURDAY, SUNDAY -> \"Day Off\";\r\n};\r\n```","```\r\nswitch (dayOfWeek) {\r\n    case MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> System.out.println(\"Working Day\");\r\n    case SATURDAY, SUNDAY -> System.out.println(\"Day Off\");\r\n}\r\n```","```\r\ncase MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -> {\r\n    // more logic\r\n    System.out.println(\"Working Day\")\r\n}\r\n```","```\r\nObject obj = \"Hello World!\";\r\nif (obj instanceof String) {\r\n    String s = (String) obj;\r\n    int length = s.length();\r\n}\r\n```","```\r\nif (obj instanceof String s) {\r\n    int length = s.length();\r\n}\r\n```","```\r\njava -Xshare:off HelloWorld.java\r\n```"]