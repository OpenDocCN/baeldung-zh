["```\r\n@Configuration\r\n@EnableAspectJAutoProxy\r\npublic class AopConfiguration {\r\n    ...\r\n}\r\n```","```\r\n@Component\r\n@Aspect\r\npublic class LoggingAspect {\r\n\r\n    private Logger logger = Logger.getLogger(LoggingAspect.class.getName());\r\n\r\n    @Pointcut(\"@target(org.springframework.stereotype.Repository)\")\r\n    public void repositoryMethods() {};\r\n\r\n    @Before(\"repositoryMethods()\")\r\n    public void logMethodCall(JoinPoint jp) {\r\n        String methodName = jp.getSignature().getName();\r\n        logger.info(\"Before \" + methodName);\r\n    }\r\n}\r\n```","```\r\n@Component\r\n@Aspect\r\npublic class PublishingAspect {\r\n\r\n    private ApplicationEventPublisher eventPublisher;\r\n\r\n    @Autowired\r\n    public void setEventPublisher(ApplicationEventPublisher eventPublisher) {\r\n        this.eventPublisher = eventPublisher;\r\n    }\r\n\r\n    @Pointcut(\"@target(org.springframework.stereotype.Repository)\")\r\n    public void repositoryMethods() {}\r\n\r\n    @Pointcut(\"execution(* *..create*(Long,..))\")\r\n    public void firstLongParamMethods() {}\r\n\r\n    @Pointcut(\"repositoryMethods() && firstLongParamMethods()\")\r\n    public void entityCreationMethods() {}\r\n\r\n    @AfterReturning(value = \"entityCreationMethods()\", returning = \"entity\")\r\n    public void logMethodCall(JoinPoint jp, Object entity) throws Throwable {\r\n        eventPublisher.publishEvent(new FooCreationEvent(entity));\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class FooCreationEventListener implements ApplicationListener<FooCreationEvent> {\r\n\r\n    private Logger logger = Logger.getLogger(getClass().getName());\r\n\r\n    @Override\r\n    public void onApplicationEvent(FooCreationEvent event) {\r\n        logger.info(\"Created foo instance: \" + event.getSource().toString());\r\n    }\r\n}\r\n```","```\r\n@Aspect\r\n@Component\r\npublic class PerformanceAspect {\r\n\r\n    private Logger logger = Logger.getLogger(getClass().getName());\r\n\r\n    @Pointcut(\"within(@org.springframework.stereotype.Repository *)\")\r\n    public void repositoryClassMethods() {};\r\n\r\n    @Around(\"repositoryClassMethods()\")\r\n    public Object measureMethodExecutionTime(ProceedingJoinPoint pjp) throws Throwable {\r\n        long start = System.nanoTime();\r\n        Object retval = pjp.proceed();\r\n        long end = System.nanoTime();\r\n        String methodName = pjp.getSignature().getName();\r\n        logger.info(\"Execution of \" + methodName + \" took \" + \r\n          TimeUnit.NANOSECONDS.toMillis(end - start) + \" ms\");\r\n        return retval;\r\n    }\r\n}\r\n```"]