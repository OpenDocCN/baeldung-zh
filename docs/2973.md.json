["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenCalledisBlank_thenCorrect() {\r\n    assertThat(StringUtils.isBlank(\" \")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisEmpty_thenCorrect() {\r\n    assertThat(StringUtils.isEmpty(\"\")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisAllLowerCase_thenCorrect() {\r\n    assertThat(StringUtils.isAllLowerCase(\"abd\")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisAllUpperCase_thenCorrect() {\r\n    assertThat(StringUtils.isAllUpperCase(\"ABC\")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisMixedCase_thenCorrect() {\r\n    assertThat(StringUtils.isMixedCase(\"abC\")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisAlpha_thenCorrect() {\r\n    assertThat(StringUtils.isAlpha(\"abc\")).isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledisAlphanumeric_thenCorrect() {\r\n    assertThat(StringUtils.isAlphanumeric(\"abc123\")).isTrue();\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledtoString_thenCorrect() {\r\n    String[] array = {\"a\", \"b\", \"c\"};\r\n    assertThat(ArrayUtils.toString(array))\r\n      .isEqualTo(\"{a,b,c}\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledtoStringIfArrayisNull_thenCorrect() {\r\n    assertThat(ArrayUtils.toString(null, \"Array is null\"))\r\n      .isEqualTo(\"Array is null\");\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledhashCode_thenCorrect() {\r\n    String[] array = {\"a\", \"b\", \"c\"};\r\n    assertThat(ArrayUtils.hashCode(array))\r\n      .isEqualTo(997619);\r\n}\r\n\r\n@Test\r\npublic void whenCalledtoMap_thenCorrect() {\r\n    String[][] array = {{\"1\", \"one\", }, {\"2\", \"two\", }, {\"3\", \"three\"}};\r\n    Map map = new HashMap();\r\n    map.put(\"1\", \"one\");\r\n    map.put(\"2\", \"two\");\r\n    map.put(\"3\", \"three\");\r\n    assertThat(ArrayUtils.toMap(array))\r\n      .isEqualTo(map);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledisSameLength_thenCorrect() {\r\n    int[] array1 = {1, 2, 3};\r\n    int[] array2 = {1, 2, 3};\r\n    assertThat(ArrayUtils.isSameLength(array1, array2))\r\n      .isTrue();\r\n}\r\n\r\n@Test\r\npublic void whenCalledIndexOf_thenCorrect() {\r\n    int[] array = {1, 2, 3};\r\n    assertThat(ArrayUtils.indexOf(array, 1, 0))\r\n      .isEqualTo(0);\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledcompareWithIntegers_thenCorrect() {\r\n    assertThat(NumberUtils.compare(1, 1))\r\n      .isEqualTo(0);\r\n}\r\n\r\n@Test\r\npublic void whenCalledcompareWithLongs_thenCorrect() {\r\n    assertThat(NumberUtils.compare(1L, 1L))\r\n      .isEqualTo(0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledcreateNumber_thenCorrect() {\r\n    assertThat(NumberUtils.createNumber(\"123456\"))\r\n      .isEqualTo(123456);\r\n}\r\n\r\n@Test\r\npublic void whenCalledisDigits_thenCorrect() {\r\n    assertThat(NumberUtils.isDigits(\"123456\")).isTrue();\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledmaxwithIntegerArray_thenCorrect() {\r\n    int[] array = {1, 2, 3, 4, 5, 6};\r\n    assertThat(NumberUtils.max(array))\r\n      .isEqualTo(6);\r\n}\r\n\r\n@Test\r\npublic void whenCalledminwithIntegerArray_thenCorrect() {\r\n    int[] array = {1, 2, 3, 4, 5, 6};\r\n    assertThat(NumberUtils.min(array)).isEqualTo(1);\r\n}\r\n\r\n@Test\r\npublic void whenCalledminwithByteArray_thenCorrect() {\r\n    byte[] array = {1, 2, 3, 4, 5, 6};\r\n    assertThat(NumberUtils.min(array))\r\n      .isEqualTo((byte) 1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledgetFraction_thenCorrect() {\r\n    assertThat(Fraction.getFraction(5, 6)).isInstanceOf(Fraction.class);\r\n}\r\n\r\n@Test\r\npublic void givenTwoFractionInstances_whenCalledadd_thenCorrect() {\r\n    Fraction fraction1 = Fraction.getFraction(1, 4);\r\n    Fraction fraction2 = Fraction.getFraction(3, 4);\r\n    assertThat(fraction1.add(fraction2).toString()).isEqualTo(\"1/1\");\r\n}\r\n\r\n@Test\r\npublic void givenTwoFractionInstances_whenCalledsubstract_thenCorrect() {\r\n    Fraction fraction1 = Fraction.getFraction(3, 4);\r\n    Fraction fraction2 = Fraction.getFraction(1, 4);\r\n    assertThat(fraction1.subtract(fraction2).toString()).isEqualTo(\"1/2\");\r\n}\r\n\r\n@Test\r\npublic void givenTwoFractionInstances_whenCalledmultiply_thenCorrect() {\r\n    Fraction fraction1 = Fraction.getFraction(3, 4);\r\n    Fraction fraction2 = Fraction.getFraction(1, 4);\r\n    assertThat(fraction1.multiplyBy(fraction2).toString()).isEqualTo(\"3/16\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledgetJavaHome_thenCorrect() {\r\n    assertThat(SystemUtils.getJavaHome())\r\n      .isEqualTo(new File(\"path/to/java/jdk\"));\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetUserHome_thenCorrect() {\r\n    assertThat(SystemUtils.getUserHome())\r\n      .isEqualTo(new File(\"path/to/user/home\"));\r\n}\r\n\r\n@Test\r\npublic void whenCalledisJavaVersionAtLeast_thenCorrect() {\r\n    assertThat(SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_RECENT)).isTrue();\r\n}\r\n```","```\r\npublic class UserInitializer extends LazyInitializer<User> {\r\n\r\n    @Override\r\n    protected User initialize() {\r\n        return new User(\"John\", \"[[email protected]](/web/20221229040443/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    }\r\n}\r\n```","```\r\n@Test \r\npublic void whenCalledget_thenCorrect() \r\n  throws ConcurrentException { \r\n    UserInitializer userInitializer = new UserInitializer(); \r\n    assertThat(userInitializer.get()).isInstanceOf(User.class); \r\n}\r\n```","```\r\nprivate volatile User instance;\r\n\r\nUser get() { \r\n    if (instance == null) { \r\n        synchronized(this) { \r\n            if (instance == null) \r\n                instance = new User(\"John\", \"[[email protected]](/web/20221229040443/https://www.baeldung.com/cdn-cgi/l/email-protection)\"); \r\n            }\r\n        } \r\n    } \r\n    return instance; \r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledtoHashCode_thenCorrect() {\r\n    int hashcode = new HashCodeBuilder(17, 37)\r\n      .append(\"John\")\r\n      .append(\"[[email protected]](/web/20221229040443/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .toHashCode();\r\n    assertThat(hashcode).isEqualTo(1269178828);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledBuilder_thenCorrect() {\r\n    BasicThreadFactory factory = new BasicThreadFactory.Builder()\r\n      .namingPattern(\"workerthread-%d\")\r\n      .daemon(true)\r\n      .priority(Thread.MAX_PRIORITY)\r\n      .build();\r\n    assertThat(factory).isInstanceOf(BasicThreadFactory.class);\r\n}\r\n```","```\r\npublic class User {\r\n\r\n    private String name;\r\n    private String email;\r\n\r\n    // standard constructors / getters / setters / toString\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledgetAccessibleConstructor_thenCorrect() {\r\n    assertThat(ConstructorUtils\r\n      .getAccessibleConstructor(User.class, String.class, String.class))\r\n      .isInstanceOf(Constructor.class);\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledinvokeConstructor_thenCorrect() \r\n  throws Exception {\r\n      assertThat(ConstructorUtils.invokeConstructor(User.class, \"name\", \"email\"))\r\n        .isInstanceOf(User.class);\r\n}\r\n\r\n@Test\r\npublic void whenCalledinvokeExactConstructor_thenCorrect() \r\n  throws Exception {\r\n      String[] args = {\"name\", \"email\"};\r\n      Class[] parameterTypes= {String.class, String.class};\r\n      assertThat(ConstructorUtils.invokeExactConstructor(User.class, args, parameterTypes))\r\n        .isInstanceOf(User.class);\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledgetField_thenCorrect() {\r\n    assertThat(FieldUtils.getField(User.class, \"name\", true).getName())\r\n      .isEqualTo(\"name\");\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledgetDeclaredFieldForceAccess_thenCorrect() {\r\n    assertThat(FieldUtils.getDeclaredField(User.class, \"name\", true).getName())\r\n      .isEqualTo(\"name\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledgetAllFields_thenCorrect() {\r\n    assertThat(FieldUtils.getAllFields(User.class).length)\r\n      .isEqualTo(2);  \r\n}\r\n\r\n@Test\r\npublic void whenCalledwriteField_thenCorrect() \r\n  throws IllegalAccessException {\r\n    FieldUtils.writeField(user, \"name\", \"Julie\", true);\r\n    assertThat(FieldUtils.readField(user, \"name\", true))\r\n      .isEqualTo(\"Julie\");     \r\n}\r\n\r\n@Test\r\npublic void givenFieldUtilsClass_whenCalledwriteDeclaredField_thenCorrect() throws IllegalAccessException {\r\n    FieldUtils.writeDeclaredField(user, \"name\", \"Julie\", true);\r\n    assertThat(FieldUtils.readField(user, \"name\", true))\r\n      .isEqualTo(\"Julie\");    \r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledgetAccessibleMethod_thenCorrect() {\r\n    assertThat(MethodUtils.getAccessibleMethod(User.class, \"getName\"))\r\n      .isInstanceOf(Method.class);\r\n} \r\n```","```\r\n@Test\r\npublic \r\n  void whenCalledinvokeExactMethod_thenCorrect() \r\n  throws Exception {\r\n    assertThat(MethodUtils.invokeExactMethod(new User(\"John\", \"[[email protected]](/web/20221229040443/https://www.baeldung.com/cdn-cgi/l/email-protection)\"), \"getName\"))\r\n     .isEqualTo(\"John\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledinvokeMethod_thenCorrect() \r\n  throws Exception {\r\n    User user = new User(\"John\", \"[[email protected]](/web/20221229040443/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    Object method = MethodUtils.invokeMethod(user, true, \"setName\", \"John\");\r\n    assertThat(user.getName()).isEqualTo(\"John\");\r\n}\r\n```","```\r\n@BeforeClass\r\npublic static void setUpMutableObject() {\r\n    mutableObject = new MutableObject(\"Initial value\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetValue_thenCorrect() {\r\n    assertThat(mutableObject.getValue()).isInstanceOf(String.class);\r\n}\r\n\r\n@Test\r\npublic void whenCalledsetValue_thenCorrect() {\r\n    mutableObject.setValue(\"Another value\");\r\n    assertThat(mutableObject.getValue()).isEqualTo(\"Another value\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledtoString_thenCorrect() {\r\n    assertThat(mutableObject.toString()).isEqualTo(\"Another value\");    \r\n} \r\n```","```\r\nprivate static MutablePair<String, String> mutablePair;\r\n\r\n@BeforeClass\r\npublic static void setUpMutablePairInstance() {\r\n    mutablePair = new MutablePair<>(\"leftElement\", \"rightElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetLeft_thenCorrect() {\r\n    assertThat(mutablePair.getLeft()).isEqualTo(\"leftElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetRight_thenCorrect() {\r\n    assertThat(mutablePair.getRight()).isEqualTo(\"rightElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledsetLeft_thenCorrect() {\r\n    mutablePair.setLeft(\"newLeftElement\");\r\n    assertThat(mutablePair.getLeft()).isEqualTo(\"newLeftElement\");\r\n} \r\n```","```\r\nprivate static ImmutablePair<String, String> immutablePair = new ImmutablePair<>(\"leftElement\", \"rightElement\");\r\n\r\n@Test\r\npublic void whenCalledgetLeft_thenCorrect() {\r\n    assertThat(immutablePair.getLeft()).isEqualTo(\"leftElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetRight_thenCorrect() {\r\n    assertThat(immutablePair.getRight()).isEqualTo(\"rightElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledof_thenCorrect() {\r\n    assertThat(ImmutablePair.of(\"leftElement\", \"rightElement\"))\r\n      .isInstanceOf(ImmutablePair.class);\r\n}\r\n\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void whenCalledSetValue_thenThrowUnsupportedOperationException() {\r\n    immutablePair.setValue(\"newValue\");\r\n} \r\n```","```\r\n@BeforeClass\r\npublic static void setUpTripleInstance() {\r\n    triple = Triple.of(\"leftElement\", \"middleElement\", \"rightElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetLeft_thenCorrect() {\r\n    assertThat(triple.getLeft()).isEqualTo(\"leftElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetMiddle_thenCorrect() {\r\n    assertThat(triple.getMiddle()).isEqualTo(\"middleElement\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledgetRight_thenCorrect() {\r\n    assertThat(triple.getRight()).isEqualTo(\"rightElement\");\r\n}\r\n```"]