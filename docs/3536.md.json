["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-redis-reactive</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic ReactiveRedisConnectionFactory reactiveRedisConnectionFactory() {\r\n    return new LettuceConnectionFactory(host, port);\r\n}\r\n```","```\r\n@Autowired\r\nprivate ReactiveStringRedisTemplate redisTemplate;\r\nprivate ReactiveListOperations<String, String> reactiveListOps;\r\n@Before\r\npublic void setup() {\r\n    reactiveListOps = redisTemplate.opsForList();\r\n}\r\n```","```\r\n@Test\r\npublic void givenListAndValues_whenLeftPushAndLeftPop_thenLeftPushAndLeftPop() {\r\n    Mono<Long> lPush = reactiveListOps.leftPushAll(LIST_NAME, \"first\", \"second\")\r\n      .log(\"Pushed\");\r\n    StepVerifier.create(lPush)\r\n      .expectNext(2L)\r\n      .verifyComplete();\r\n    Mono<String> lPop = reactiveListOps.leftPop(LIST_NAME)\r\n      .log(\"Popped\");\r\n    StepVerifier.create(lPop)\r\n      .expectNext(\"second\")\r\n      .verifyComplete();\r\n}\r\n```","```\r\npublic class Employee implements Serializable {\r\n    private String id;\r\n    private String name;\r\n    private String department;\r\n    // ... getters and setters\r\n    // ... hashCode and equals\r\n}\r\n```","```\r\n@Bean\r\npublic ReactiveRedisTemplate<String, Employee> reactiveRedisTemplate(\r\n  ReactiveRedisConnectionFactory factory) {\r\n    StringRedisSerializer keySerializer = new StringRedisSerializer();\r\n    Jackson2JsonRedisSerializer<Employee> valueSerializer =\r\n      new Jackson2JsonRedisSerializer<>(Employee.class);\r\n    RedisSerializationContext.RedisSerializationContextBuilder<String, Employee> builder =\r\n      RedisSerializationContext.newSerializationContext(keySerializer);\r\n    RedisSerializationContext<String, Employee> context = \r\n      builder.value(valueSerializer).build();\r\n    return new ReactiveRedisTemplate<>(factory, context);\r\n}\r\n```","```\r\n@Autowired\r\nprivate ReactiveRedisTemplate<String, Employee> redisTemplate;\r\nprivate ReactiveValueOperations<String, Employee> reactiveValueOps;\r\n@Before\r\npublic void setup() {\r\n    reactiveValueOps = redisTemplate.opsForValue();\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployee_whenSet_thenSet() {\r\n    Mono<Boolean> result = reactiveValueOps.set(\"123\", \r\n      new Employee(\"123\", \"Bill\", \"Accounts\"));\r\n    StepVerifier.create(result)\r\n      .expectNext(true)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeId_whenGet_thenReturnsEmployee() {\r\n    Mono<Employee> fetchedEmployee = reactiveValueOps.get(\"123\");\r\n    StepVerifier.create(fetchedEmployee)\r\n      .expectNext(new Employee(\"123\", \"Bill\", \"Accounts\"))\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployee_whenSetWithExpiry_thenSetsWithExpiryTime() \r\n  throws InterruptedException {\r\n    Mono<Boolean> result = reactiveValueOps.set(\"129\", \r\n      new Employee(\"129\", \"John\", \"Programming\"), \r\n      Duration.ofSeconds(1));\r\n    StepVerifier.create(result)\r\n      .expectNext(true)\r\n      .verifyComplete();\r\n    Thread.sleep(2000L); \r\n    Mono<Employee> fetchedEmployee = reactiveValueOps.get(\"129\");\r\n    StepVerifier.create(fetchedEmployee)\r\n      .expectNextCount(0L)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Bean\r\npublic ReactiveKeyCommands keyCommands(ReactiveRedisConnectionFactory \r\n  reactiveRedisConnectionFactory) {\r\n    return reactiveRedisConnectionFactory.getReactiveConnection().keyCommands();\r\n}\r\n@Bean\r\npublic ReactiveStringCommands stringCommands(ReactiveRedisConnectionFactory \r\n  reactiveRedisConnectionFactory) {\r\n    return reactiveRedisConnectionFactory.getReactiveConnection().stringCommands();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxOfKeys_whenPerformOperations_thenPerformOperations() {\r\n    Flux<SetCommand> keys = Flux.just(\"key1\", \"key2\", \"key3\", \"key4\");\r\n      .map(String::getBytes)\r\n      .map(ByteBuffer::wrap)\r\n      .map(key -> SetCommand.set(key).value(key));\r\n    StepVerifier.create(stringCommands.set(keys))\r\n      .expectNextCount(4L)\r\n      .verifyComplete();\r\n    Mono<Long> keyCount = keyCommands.keys(ByteBuffer.wrap(\"key*\".getBytes()))\r\n      .flatMapMany(Flux::fromIterable)\r\n      .count();\r\n    StepVerifier.create(keyCount)\r\n      .expectNext(4L)\r\n      .verifyComplete();\r\n}\r\n```"]