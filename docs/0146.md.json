["```\r\npublic class Student {\r\n\r\n    private String name;\r\n    private int year;\r\n    private List<Integer> marks;\r\n    private Profile profile;\r\n\r\n    // constructor getters and setters\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingMultipleFilters_dataShouldBeFiltered() {\r\n    List<Student> filteredStream = students.stream()\r\n      .filter(s -> s.getMarksAverage() > 50)\r\n      .filter(s -> s.getMarks().size() > 3)\r\n      .filter(not(s -> s.getProfile() == Student.Profile.PHYSICS))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(filteredStream).containsExactly(mathStudent);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingSingleComplexFilter_dataShouldBeFiltered() {\r\n    List<Student> filteredStream = students.stream()\r\n      .filter(s -> s.getMarksAverage() > 50 \r\n        && s.getMarks().size() > 3 \r\n        && s.getProfile() != Student.Profile.PHYSICS)\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(filteredStream).containsExactly(mathStudent);\r\n}\r\n```","```\r\npublic boolean isEligibleForScholarship() {\r\n    return getMarksAverage() > 50\r\n      && marks.size() > 3\r\n      && profile != Profile.PHYSICS;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingSingleComplexFilterExtracted_dataShouldBeFiltered() {\r\n    List<Student> filteredStream = students.stream()\r\n        .filter(Student::isEligibleForScholarship)\r\n        .collect(Collectors.toList());\r\n\r\n    assertThat(filteredStream).containsExactly(mathStudent);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWrongFilterOrder_whenUsingMultipleFilters_shouldEvaluateManyConditions() {\r\n    long filteredStreamSize = IntStream.range(0, 100).boxed()\r\n      .filter(this::isEvenNumber)\r\n      .filter(this::isSmallerThanTwenty)\r\n      .count();\r\n\r\n    assertThat(filteredStreamSize).isEqualTo(10);\r\n    assertThat(numberOfOperations).hasValue(150);\r\n}\r\n```"]