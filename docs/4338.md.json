["```\r\nclass Customer {\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\nclass CustomerDto {\r\n\r\n    private String forename;\r\n    private String surname;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\n@Mapper\r\npublic interface CustomerDtoMapper {\r\n\r\n    @Mapping(source = \"firstName\", target = \"forename\")\r\n    @Mapping(source = \"lastName\", target = \"surname\")\r\n    CustomerDto from(Customer customer);\r\n\r\n}\r\n```","```\r\nclass DeliveryAddress {\r\n\r\n    private String forename;\r\n    private String surname;\r\n    private String street;\r\n    private String postalcode;\r\n    private String county;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\nclass Address {\r\n\r\n    private String street;\r\n    private String postalcode;\r\n    private String county;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\n@Mapper\r\ninterface DeliveryAddressMapper {\r\n\r\n    @Mapping(source = \"customer.firstName\", target = \"forename\")\r\n    @Mapping(source = \"customer.lastName\", target = \"surname\")\r\n    @Mapping(source = \"address.street\", target = \"street\")\r\n    @Mapping(source = \"address.postalcode\", target = \"postalcode\")\r\n    @Mapping(source = \"address.county\", target = \"county\")\r\n    DeliveryAddress from(Customer customer, Address address);\r\n\r\n}\r\n```","```\r\n// given a customer\r\nCustomer customer = new Customer().setFirstName(\"Max\")\r\n  .setLastName(\"Powers\");\r\n\r\n// and some address\r\nAddress homeAddress = new Address().setStreet(\"123 Some Street\")\r\n  .setCounty(\"Nevada\")\r\n  .setPostalcode(\"89123\");\r\n\r\n// when calling DeliveryAddressMapper::from\r\nDeliveryAddress deliveryAddress = deliveryAddressMapper.from(customer, homeAddress);\r\n\r\n// then a new DeliveryAddress is created, based on the given customer and his home address\r\nassertEquals(deliveryAddress.getForename(), customer.getFirstName());\r\nassertEquals(deliveryAddress.getSurname(), customer.getLastName());\r\nassertEquals(deliveryAddress.getStreet(), homeAddress.getStreet());\r\nassertEquals(deliveryAddress.getCounty(), homeAddress.getCounty());\r\nassertEquals(deliveryAddress.getPostalcode(), homeAddress.getPostalcode());\r\n```","```\r\n@Mapper\r\ninterface DeliveryAddressMapper {\r\n\r\n    @Mapping(source = \"address.postalcode\", target = \"postalcode\")\r\n    @Mapping(source = \"address.county\", target = \"county\")\r\n    DeliveryAddress updateAddress(@MappingTarget DeliveryAddress deliveryAddress, Address address);\r\n\r\n}\r\n```","```\r\n// given a delivery address\r\nDeliveryAddress deliveryAddress = new DeliveryAddress().setForename(\"Max\")\r\n  .setSurname(\"Powers\")\r\n  .setStreet(\"123 Some Street\")\r\n  .setCounty(\"Nevada\")\r\n  .setPostalcode(\"89123\");\r\n\r\n// and some new address\r\nAddress newAddress = new Address().setStreet(\"456 Some other street\")\r\n  .setCounty(\"Arizona\")\r\n  .setPostalcode(\"12345\");\r\n\r\n// when calling DeliveryAddressMapper::updateAddress\r\nDeliveryAddress updatedDeliveryAddress = deliveryAddressMapper.updateAddress(deliveryAddress, newAddress);\r\n\r\n// then the *existing* delivery address is updated\r\nassertSame(deliveryAddress, updatedDeliveryAddress);\r\n\r\nassertEquals(deliveryAddress.getStreet(), newAddress.getStreet());\r\nassertEquals(deliveryAddress.getCounty(), newAddress.getCounty());\r\nassertEquals(deliveryAddress.getPostalcode(), newAddress.getPostalcode());\r\n```"]