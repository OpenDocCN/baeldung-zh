["```\r\n<dependency>\r\n    <groupId>org.javers</groupId>\r\n    <artifactId>javers-spring-boot-starter-sql</artifactId>\r\n    <version>6.5.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n</dependency>\r\n```","```\r\njavers.newObjectSnapshot=true \r\n```","```\r\n@Entity\r\npublic class Store {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private int id;\r\n    private String name;\r\n\r\n    @Embedded\r\n    private Address address;\r\n\r\n    @OneToMany(\r\n      mappedBy = \"store\",\r\n      cascade = CascadeType.ALL,\r\n      orphanRemoval = true\r\n    )\r\n    private List<Product> products = new ArrayList<>();\r\n\r\n    // constructors, getters, setters\r\n}\r\n```","```\r\n@Embeddable\r\npublic class Address {\r\n    private String address;\r\n    private Integer zipCode;\r\n}\r\n```","```\r\n@JaversSpringDataAuditable\r\npublic interface StoreRepository extends CrudRepository<Store, Integer> {\r\n}\r\n```","```\r\npublic interface ProductRepository extends CrudRepository<Product, Integer> {\r\n}\r\n```","```\r\n@JaversAuditable\r\npublic void saveProduct(Product product) {\r\n    // save object\r\n}\r\n```","```\r\npublic interface ProductRepository extends CrudRepository<Product, Integer> {\r\n    @Override\r\n    @JaversAuditable\r\n    <S extends Product> S save(S s);\r\n}\r\n```","```\r\nprivate static class SimpleAuthorProvider implements AuthorProvider {\r\n    @Override\r\n    public String provide() {\r\n        return \"Baeldung Author\";\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic AuthorProvider provideJaversAuthor() {\r\n    return new SimpleAuthorProvider();\r\n}\r\n```","```\r\n@EventListener\r\npublic void appReady(ApplicationReadyEvent event) {\r\n    Store store = new Store(\"Baeldung store\", new Address(\"Some street\", 22222));\r\n    for (int i = 1; i < 3; i++) {\r\n        Product product = new Product(\"Product #\" + i, 100 * i);\r\n        store.addProduct(product);\r\n    }\r\n    storeRepository.save(store);\r\n}\r\n```","```\r\n@GetMapping(\"/stores/snapshots\")\r\npublic String getStoresSnapshots() {\r\n    QueryBuilder jqlQuery = QueryBuilder.byClass(Store.class);\r\n    List<CdoSnapshot> snapshots = javers.findSnapshots(jqlQuery.build());\r\n    return javers.getJsonConverter().toJson(snapshots);\r\n}\r\n```","```\r\n[\r\n  {\r\n    \"commitMetadata\": {\r\n      \"author\": \"Baeldung Author\",\r\n      \"properties\": [],\r\n      \"commitDate\": \"2019-08-26T07:04:06.776\",\r\n      \"commitDateInstant\": \"2019-08-26T04:04:06.776Z\",\r\n      \"id\": 1.00\r\n    },\r\n    \"globalId\": {\r\n      \"entity\": \"com.baeldung.springjavers.domain.Store\",\r\n      \"cdoId\": 1\r\n    },\r\n    \"state\": {\r\n      \"address\": {\r\n        \"valueObject\": \"com.baeldung.springjavers.domain.Address\",\r\n        \"ownerId\": {\r\n          \"entity\": \"com.baeldung.springjavers.domain.Store\",\r\n          \"cdoId\": 1\r\n        },\r\n        \"fragment\": \"address\"\r\n      },\r\n      \"name\": \"Baeldung store\",\r\n      \"id\": 1,\r\n      \"products\": [\r\n        {\r\n          \"entity\": \"com.baeldung.springjavers.domain.Product\",\r\n          \"cdoId\": 2\r\n        },\r\n        {\r\n          \"entity\": \"com.baeldung.springjavers.domain.Product\",\r\n          \"cdoId\": 3\r\n        }\r\n      ]\r\n    },\r\n    \"changedProperties\": [\r\n      \"address\",\r\n      \"name\",\r\n      \"id\",\r\n      \"products\"\r\n    ],\r\n    \"type\": \"INITIAL\",\r\n    \"version\": 1\r\n  }\r\n]\r\n```","```\r\n@DiffIgnore\r\nprivate List<Product> products = new ArrayList<>();\r\n```","```\r\npublic void rebrandStore(int storeId, String updatedName) {\r\n    Optional<Store> storeOpt = storeRepository.findById(storeId);\r\n    storeOpt.ifPresent(store -> {\r\n        store.setName(updatedName);\r\n        store.getProducts().forEach(product -> {\r\n            product.setNamePrefix(updatedName);\r\n        });\r\n        storeRepository.save(store);\r\n    });\r\n}\r\n```","```\r\n11:29:35.439 [http-nio-8080-exec-2] INFO  org.javers.core.Javers - Commit(id:2.0, snapshots:3, author:Baeldung Author, changes - ValueChange:3), done in 48 millis (diff:43, persist:5)\r\n```","```\r\n@GetMapping(\"/products/snapshots\")\r\npublic String getProductSnapshots() {\r\n    QueryBuilder jqlQuery = QueryBuilder.byClass(Product.class);\r\n    List<CdoSnapshot> snapshots = javers.findSnapshots(jqlQuery.build());\r\n    return javers.getJsonConverter().toJson(snapshots);\r\n}\r\n```","```\r\n {\r\n    \"commitMetadata\": {\r\n      \"author\": \"Baeldung Author\",\r\n      \"properties\": [],\r\n      \"commitDate\": \"2019-08-26T12:55:20.197\",\r\n      \"commitDateInstant\": \"2019-08-26T09:55:20.197Z\",\r\n      \"id\": 2.00\r\n    },\r\n    \"globalId\": {\r\n      \"entity\": \"com.baeldung.springjavers.domain.Product\",\r\n      \"cdoId\": 3\r\n    },\r\n    \"state\": {\r\n      \"price\": 200.0,\r\n      \"name\": \"NewProduct #2\",\r\n      \"id\": 3,\r\n      \"store\": {\r\n        \"entity\": \"com.baeldung.springjavers.domain.Store\",\r\n        \"cdoId\": 1\r\n      }\r\n    }\r\n}\r\n```","```\r\npublic void updateProductPrice(Integer productId, Double price) {\r\n    Optional<Product> productOpt = productRepository.findById(productId);\r\n    productOpt.ifPresent(product -> {\r\n        product.setPrice(price);\r\n        productRepository.save(product);\r\n    });\r\n}\r\n```","```\r\n@GetMapping(\"/products/{productId}/changes\")\r\npublic String getProductChanges(@PathVariable int productId) {\r\n    Product product = storeService.findProductById(productId);\r\n    QueryBuilder jqlQuery = QueryBuilder.byInstance(product);\r\n    Changes changes = javers.findChanges(jqlQuery.build());\r\n    return javers.getJsonConverter().toJson(changes);\r\n}\r\n```","```\r\n[\r\n  {\r\n    \"changeType\": \"ValueChange\",\r\n    \"globalId\": {\r\n      \"entity\": \"com.baeldung.springjavers.domain.Product\",\r\n      \"cdoId\": 2\r\n    },\r\n    \"commitMetadata\": {\r\n      \"author\": \"Baeldung Author\",\r\n      \"properties\": [],\r\n      \"commitDate\": \"2019-08-26T16:22:33.339\",\r\n      \"commitDateInstant\": \"2019-08-26T13:22:33.339Z\",\r\n      \"id\": 2.00\r\n    },\r\n    \"property\": \"price\",\r\n    \"propertyChangeType\": \"PROPERTY_VALUE_CHANGED\",\r\n    \"left\": 100.0,\r\n    \"right\": 3333.0\r\n  }\r\n]\r\n```","```\r\n@GetMapping(\"/stores/{storeId}/shadows\")\r\npublic String getStoreShadows(@PathVariable int storeId) {\r\n    Store store = storeService.findStoreById(storeId);\r\n    JqlQuery jqlQuery = QueryBuilder.byInstance(store)\r\n      .withChildValueObjects().build();\r\n    List<Shadow<Store>> shadows = javers.findShadows(jqlQuery);\r\n    return javers.getJsonConverter().toJson(shadows.get(0));\r\n}\r\n```","```\r\n{\r\n  \"commitMetadata\": {\r\n    \"author\": \"Baeldung Author\",\r\n    \"properties\": [],\r\n    \"commitDate\": \"2019-08-26T16:09:20.674\",\r\n    \"commitDateInstant\": \"2019-08-26T13:09:20.674Z\",\r\n    \"id\": 1.00\r\n  },\r\n  \"it\": {\r\n    \"id\": 1,\r\n    \"name\": \"Baeldung store\",\r\n    \"address\": {\r\n      \"address\": \"Some street\",\r\n      \"zipCode\": 22222\r\n    },\r\n    \"products\": []\r\n  }\r\n}\r\n```"]