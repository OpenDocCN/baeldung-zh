["```\r\npublic static Map<String, String> articleMapOne;\r\nstatic {\r\n    articleMapOne = new HashMap<>();\r\n    articleMapOne.put(\"ar01\", \"Intro to Map\");\r\n    articleMapOne.put(\"ar02\", \"Some article\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenStaticMap_whenUpdated_thenCorrect() {\r\n\r\n    MapInitializer.articleMapOne.put(\r\n      \"NewArticle1\", \"Convert array to List\");\r\n\r\n    assertEquals(\r\n      MapInitializer.articleMapOne.get(\"NewArticle1\"), \r\n      \"Convert array to List\");  \r\n}\r\n```","```\r\nMap<String, String> doubleBraceMap  = new HashMap<String, String>() {{\r\n    put(\"key1\", \"value1\");\r\n    put(\"key2\", \"value2\");\r\n}};\r\n```","```\r\npublic static Map<String, String> createSingletonMap() {\r\n    return Collections.singletonMap(\"username1\", \"password1\");\r\n}\r\n```","```\r\nMap<String, String> emptyMap = Collections.emptyMap();\r\n```","```\r\nMap<String, String> map = Stream.of(new String[][] {\r\n  { \"Hello\", \"World\" }, \r\n  { \"John\", \"Doe\" }, \r\n}).collect(Collectors.toMap(data -> data[0], data -> data[1]));\r\n```","```\r\n Map<String, Integer> map = Stream.of(new Object[][] { \r\n     { \"data1\", 1 }, \r\n     { \"data2\", 2 }, \r\n }).collect(Collectors.toMap(data -> (String) data[0], data -> (Integer) data[1]));\r\n```","```\r\nMap<String, Integer> map = Stream.of(\r\n  new AbstractMap.SimpleEntry<>(\"idea\", 1), \r\n  new AbstractMap.SimpleEntry<>(\"mobile\", 2))\r\n  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\r\n```","```\r\nMap<String, Integer> map = Stream.of(\r\n  new AbstractMap.SimpleImmutableEntry<>(\"idea\", 1),    \r\n  new AbstractMap.SimpleImmutableEntry<>(\"mobile\", 2))\r\n  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\r\n```","```\r\nMap<String, String> map = Stream.of(new String[][] { \r\n    { \"Hello\", \"World\" }, \r\n    { \"John\", \"Doe\" },\r\n}).collect(Collectors.collectingAndThen(\r\n    Collectors.toMap(data -> data[0], data -> data[1]), \r\n    Collections::<String, String> unmodifiableMap));\r\n```","```\r\nMap<String, String> emptyMap = Map.of();\r\nMap<String, String> singletonMap = Map.of(\"key1\", \"value\");\r\nMap<String, String> map = Map.of(\"key1\",\"value1\", \"key2\", \"value2\");\r\n```","```\r\nMap<String, String> map = Map.ofEntries(\r\n  new AbstractMap.SimpleEntry<String, String>(\"name\", \"John\"),\r\n  new AbstractMap.SimpleEntry<String, String>(\"city\", \"budapest\"),\r\n  new AbstractMap.SimpleEntry<String, String>(\"zip\", \"000000\"),\r\n  new AbstractMap.SimpleEntry<String, String>(\"home\", \"1231231231\")\r\n);\r\n```","```\r\nMap<String, String> map = new HashMap<String, String> (\r\n  Map.of(\"key1\",\"value1\", \"key2\", \"value2\"));\r\nMap<String, String> map2 = new HashMap<String, String> (\r\n  Map.ofEntries(\r\n    new AbstractMap.SimpleEntry<String, String>(\"name\", \"John\"),    \r\n    new AbstractMap.SimpleEntry<String, String>(\"city\", \"budapest\")));\r\n```","```\r\nMap<String, String> articles \r\n  = ImmutableMap.of(\"Title\", \"My New Article\", \"Title2\", \"Second Article\");\r\n```","```\r\nMap<String, String> articles \r\n  = Maps.newHashMap(ImmutableMap.of(\"Title\", \"My New Article\", \"Title2\", \"Second Article\"));\r\n```","```\r\nImmutableMap.of(\"key1\", \"value1\", \"key2\", \"value2\");\r\n```"]