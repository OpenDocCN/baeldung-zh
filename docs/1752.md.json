["```\r\nFeature: A short description of the desired functionality\r\n\r\n  Scenario: A business situation\r\n    Given a precondition\r\n    And another precondition\r\n    When an event happens\r\n    And another event happens too\r\n    Then a testable outcome is achieved\r\n    And something else is also completed\r\n```","```\r\n<dependency>\r\n    <groupId>io.cucumber</groupId>\r\n    <artifactId>cucumber-java</artifactId>\r\n    <version>6.8.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.cucumber</groupId>\r\n    <artifactId>cucumber-junit</artifactId>\r\n    <version>6.8.0</version>\r\n</dependency>\r\n```","```\r\nGiven I have registered a course in Baeldung\r\n```","```\r\n@Given(\"I have registered a course in Baeldung\")\r\npublic void verifyAccount() {\r\n    // method implementation\r\n}\r\n```","```\r\nFeature: Testing a REST API\r\n  Users should be able to submit GET and POST requests to a web service, \r\n  represented by WireMock\r\n\r\n  Scenario: Data Upload to a web service\r\n    When users upload data on a project\r\n    Then the server should handle it and return a success status\r\n\r\n  Scenario: Data retrieval from a web service\r\n    When users want to get information on the 'Cucumber' project\r\n    Then the requested data is returned\r\n```","```\r\n@RunWith(Cucumber.class)\r\n@CucumberOptions(features = \"classpath:Feature\")\r\npublic class CucumberIntegrationTest {\r\n\r\n}\r\n```","```\r\n@When(\"users upload data on a project\")\r\npublic void usersUploadDataOnAProject() throws IOException {\r\n\r\n}\r\n```","```\r\n@When(\"users want to get information on the {string} project\")\r\npublic void usersGetInformationOnAProject(String projectName) throws IOException {\r\n\r\n}\r\n```","```\r\n@When(\"^users want to get information on the '(.+)' project$\")\r\npublic void usersGetInformationOnAProject(String projectName) throws IOException {\r\n\r\n}\r\n```","```\r\n{\r\n    \"testing-framework\": \"cucumber\",\r\n    \"supported-language\": \r\n    [\r\n        \"Ruby\",\r\n        \"Java\",\r\n        \"Javascript\",\r\n        \"PHP\",\r\n        \"Python\",\r\n        \"C++\"\r\n    ],\r\n\r\n    \"website\": \"cucumber.io\"\r\n}\r\n```","```\r\nWireMockServer wireMockServer = new WireMockServer(options().dynamicPort());\r\n```","```\r\nCloseableHttpClient httpClient = HttpClients.createDefault();\r\n```","```\r\nwireMockServer.start();\r\n```","```\r\nconfigureFor(\"localhost\", wireMockServer.port());\r\nstubFor(post(urlEqualTo(\"/create\"))\r\n  .withHeader(\"content-type\", equalTo(\"application/json\"))\r\n  .withRequestBody(containing(\"testing-framework\"))\r\n  .willReturn(aResponse().withStatus(200)));\r\n```","```\r\nHttpPost request = new HttpPost(\"http://localhost:\" + wireMockServer.port() + \"/create\");\r\nStringEntity entity = new StringEntity(jsonString);\r\nrequest.addHeader(\"content-type\", \"application/json\");\r\nrequest.setEntity(entity);\r\nHttpResponse response = httpClient.execute(request);\r\n```","```\r\nassertEquals(200, response.getStatusLine().getStatusCode());\r\nverify(postRequestedFor(urlEqualTo(\"/create\"))\r\n  .withHeader(\"content-type\", equalTo(\"application/json\")));\r\n```","```\r\nwireMockServer.stop();\r\n```","```\r\nwireMockServer.start();\r\n\r\nconfigureFor(\"localhost\", wireMockServer.port());\r\nstubFor(get(urlEqualTo(\"/projects/cucumber\"))\r\n  .withHeader(\"accept\", equalTo(\"application/json\"))\r\n  .willReturn(aResponse().withBody(jsonString)));\r\n```","```\r\nHttpGet request = new HttpGet(\"http://localhost:\" + wireMockServer.port() + \"/projects/\" + projectName.toLowerCase());\r\nrequest.addHeader(\"accept\", \"application/json\");\r\nHttpResponse httpResponse = httpClient.execute(request);\r\n```","```\r\nString responseString = convertResponseToString(httpResponse);\r\n```","```\r\nprivate String convertResponseToString(HttpResponse response) throws IOException {\r\n    InputStream responseStream = response.getEntity().getContent();\r\n    Scanner scanner = new Scanner(responseStream, \"UTF-8\");\r\n    String responseString = scanner.useDelimiter(\"\\\\Z\").next();\r\n    scanner.close();\r\n    return responseString;\r\n}\r\n```","```\r\nassertThat(responseString, containsString(\"\\\"testing-framework\\\": \\\"cucumber\\\"\"));\r\nassertThat(responseString, containsString(\"\\\"website\\\": \\\"cucumber.io\\\"\"));\r\nverify(getRequestedFor(urlEqualTo(\"/projects/cucumber\"))\r\n  .withHeader(\"accept\", equalTo(\"application/json\")));\r\n```","```\r\n<plugin>\r\n    <artifactId>maven-failsafe-plugin</artifactId>\r\n    <version>${maven-failsafe-plugin.version}</version>\r\n    <configuration>\r\n        <includes>\r\n            <include>CucumberIntegrationTest.java</include>\r\n        </includes>\r\n        <parallel>methods</parallel>\r\n        <threadCount>2</threadCount>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>integration-test</goal>\r\n                <goal>verify</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```"]