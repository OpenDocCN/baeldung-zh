["```\r\nDateTimeFormatter.ISO_LOCAL_DATE.format(LocalDate.of(2018, 3, 9));\r\n```","```\r\nDateTimeFormatter.ISO_OFFSET_DATE.format(LocalDate.of(2018, 3, 9).atStartOfDay(ZoneId.of(\"UTC-3\")));\r\n```","```\r\nDateTimeFormatter.RFC_1123_DATE_TIME.format(LocalDate.of(2018, 3, 9).atStartOfDay(ZoneId.of(\"UTC-3\")));\r\n```","```\r\nLocalDate.from(DateTimeFormatter.ISO_LOCAL_DATE.parse(\"2018-03-09\")).plusDays(3);\r\n```","```\r\nLocalDate anotherSummerDay = LocalDate.of(2016, 8, 23);\r\nSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL).format(anotherSummerDay));\r\nSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG).format(anotherSummerDay));\r\nSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).format(anotherSummerDay));\r\nSystem.out.println(DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT).format(anotherSummerDay));\r\n```","```\r\nTuesday, August 23, 2016\r\nAugust 23, 2016\r\nAug 23, 2016\r\n8/23/16\r\n```","```\r\nLocalDate anotherSummerDay = LocalDate.of(2016, 8, 23);\r\nLocalTime anotherTime = LocalTime.of(13, 12, 45);\r\nZonedDateTime zonedDateTime = ZonedDateTime.of(anotherSummerDay, anotherTime, ZoneId.of(\"Europe/Helsinki\"));\r\nSystem.out.println(\r\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL)\r\n  .format(zonedDateTime));\r\nSystem.out.println(\r\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG)\r\n  .format(zonedDateTime));\r\nSystem.out.println(\r\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM)\r\n  .format(zonedDateTime));\r\nSystem.out.println(\r\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)\r\n  .format(zonedDateTime));\r\n```","```\r\nTuesday, August 23, 2016 1:12:45 PM EEST\r\nAugust 23, 2016 1:12:45 PM EEST\r\nAug 23, 2016 1:12:45 PM\r\n8/23/16 1:12 PM\r\n```","```\r\nZonedDateTime dateTime = ZonedDateTime.from(\r\n  DateTimeFormatter.ofLocalizedDateTime(FormatStyle.FULL)\r\n    .parse(\"Tuesday, August 23, 2016 1:12:45 PM EET\"));\r\nSystem.out.println(dateTime.plusHours(9));\r\n```","```\r\nString europeanDatePattern = \"dd.MM.yyyy\";\r\nDateTimeFormatter europeanDateFormatter = DateTimeFormatter.ofPattern(europeanDatePattern);\r\nSystem.out.println(europeanDateFormatter.format(LocalDate.of(2016, 7, 31)));\r\n```","```\r\n Symbol  Meaning                     Presentation      Examples\r\n  ------  -------                     ------------      -------\r\n   u       year                        year              2004; 04\r\n   y       year-of-era                 year              2004; 04\r\n   M/L     month-of-year               number/text       7; 07; Jul; July; J\r\n   d       day-of-month                number            10\r\n```","```\r\nDateTimeFormatter europeanDateFormatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");\r\nSystem.out.println(LocalDate.from(europeanDateFormatter.parse(\"15.08.2014\")).isLeapYear());\r\n```","```\r\n Symbol  Meaning                     Presentation      Examples\r\n  ------  -------                     ------------      -------\r\n   H       hour-of-day (0-23)          number            0\r\n   m       minute-of-hour              number            30\r\n   s       second-of-minute            number            55\r\n   S       fraction-of-second          fraction          978\r\n   n       nano-of-second              number            987654321\r\n```","```\r\nString timeColonPattern = \"HH:mm:ss\";\r\nDateTimeFormatter timeColonFormatter = DateTimeFormatter.ofPattern(timeColonPattern);\r\nLocalTime colonTime = LocalTime.of(17, 35, 50);\r\nSystem.out.println(timeColonFormatter.format(colonTime));\r\n```","```\r\nString timeColonPattern = \"HH:mm:ss SSS\";\r\nDateTimeFormatter timeColonFormatter = DateTimeFormatter.ofPattern(timeColonPattern);\r\nLocalTime colonTime = LocalTime.of(17, 35, 50).plus(329, ChronoUnit.MILLIS);\r\nSystem.out.println(timeColonFormatter.format(colonTime));\r\n```","```\r\nString timeColonPattern = \"hh:mm:ss a\";\r\nDateTimeFormatter timeColonFormatter = DateTimeFormatter.ofPattern(timeColonPattern);\r\nLocalTime colonTime = LocalTime.of(17, 35, 50);\r\nSystem.out.println(timeColonFormatter.format(colonTime));\r\n```","```\r\nDateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(\"hh:mm:ss a\");\r\nSystem.out.println(LocalTime.from(timeFormatter.parse(\"12:25:30 AM\")).isBefore(LocalTime.NOON));\r\n```","```\r\nString newYorkDateTimePattern = \"dd.MM.yyyy HH:mm z\";\r\nDateTimeFormatter newYorkDateFormatter = DateTimeFormatter.ofPattern(newYorkDateTimePattern);\r\nLocalDateTime summerDay = LocalDateTime.of(2016, 7, 31, 14, 15);\r\nSystem.out.println(newYorkDateFormatter.format(ZonedDateTime.of(summerDay, ZoneId.of(\"UTC-4\"))));\r\n```","```\r\nDateTimeFormatter zonedFormatter = DateTimeFormatter.ofPattern(\"dd.MM.yyyy HH:mm z\");\r\nSystem.out.println(ZonedDateTime.from(zonedFormatter.parse(\"31.07.2016 14:15 GMT+02:00\")).getOffset().getTotalSeconds());\r\n```","```\r\n@Test(expected = UnsupportedTemporalTypeException.class)\r\npublic void shouldExpectAnExceptionIfInputIsLocalDateTime() {\r\n    DateTimeFormatter.ISO_INSTANT.format(LocalDateTime.now());\r\n}\r\n```","```\r\n@Test\r\npublic void shouldPrintFormattedZonedDateTime() {\r\n    ZonedDateTime zonedDateTime = ZonedDateTime.of(2021, 02, 15, 0, 0, 0, 0, ZoneId.of(\"Europe/Paris\"));\r\n    String formattedZonedDateTime = DateTimeFormatter.ISO_INSTANT.format(zonedDateTime);\r\n\r\n    Assert.assertEquals(\"2021-02-14T23:00:00Z\", formattedZonedDateTime);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldParseZonedDateTime() {\r\n    DateTimeFormatter formatter = DateTimeFormatter.ISO_INSTANT.withZone(ZoneId.systemDefault());\r\n    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"2021-10-01T05:06:20Z\", formatter);\r\n\r\n    Assert.assertEquals(\"2021-10-01T05:06:20Z\", DateTimeFormatter.ISO_INSTANT.format(zonedDateTime));\r\n}\r\n```","```\r\n@Test(expected = DateTimeParseException.class)\r\npublic void shouldExpectAnExceptionIfTimeZoneIsMissing() {\r\n    ZonedDateTime zonedDateTime = ZonedDateTime.parse(\"2021-11-01T05:06:20Z\", DateTimeFormatter.ISO_INSTANT);\r\n}\r\n```"]