["```\r\nvoid sort(int[] numbers) {\r\n    int maximumNumber = findMaximumNumberIn(numbers);\r\n    int numberOfDigits = calculateNumberOfDigitsIn(maximumNumber);\r\n    int placeValue = 1;\r\n    while (numberOfDigits-- > 0) {\r\n        applyCountingSortOn(numbers, placeValue);\r\n        placeValue *= 10;\r\n    }\r\n}\r\n```","```\r\nvoid applyCountingSortOn(int[] numbers, int placeValue) {\r\n\r\n    int range = 10 // decimal system, numbers from 0-9\r\n\r\n    // ...\r\n\r\n    // calculate the frequency of digits\r\n    for (int i = 0; i < length; i++) {\r\n        int digit = (numbers[i] / placeValue) % range;\r\n        frequency[digit]++;\r\n    }\r\n\r\n    for (int i = 1; i < range; i++) {\r\n        frequency[i] += frequency[i - 1];\r\n    }\r\n\r\n    for (int i = length - 1; i >= 0; i--) {\r\n        int digit = (numbers[i] / placeValue) % range;\r\n        sortedValues[frequency[digit] - 1] = numbers[i];\r\n        frequency[digit]--;\r\n    }\r\n\r\n    System.arraycopy(result, 0, numbers, 0, length); \r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenUnsortedArray_whenRadixSort_thenArraySorted() {\r\n    int[] numbers = {387, 468, 134, 123, 68, 221, 769, 37, 7};\r\n    RadixSort.sort(numbers);\r\n    int[] numbersSorted = {7, 37, 68, 123, 134, 221, 387, 468, 769};\r\n    assertArrayEquals(numbersSorted, numbers); \r\n}\r\n```"]