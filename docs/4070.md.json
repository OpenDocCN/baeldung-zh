["```\r\n<properties>\r\n    <auto-service.version>1.0-rc2</auto-service.version>\r\n    <maven-compiler-plugin.version>\r\n      3.5.1\r\n    </maven-compiler-plugin.version>\r\n</properties>\r\n\r\n<dependencies>\r\n\r\n    <dependency>\r\n        <groupId>com.google.auto.service</groupId>\r\n        <artifactId>auto-service</artifactId>\r\n        <version>${auto-service.version}</version>\r\n        <scope>provided</scope>\r\n    </dependency>\r\n\r\n</dependencies>\r\n\r\n<build>\r\n    <plugins>\r\n\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-compiler-plugin</artifactId>\r\n            <version>${maven-compiler-plugin.version}</version>\r\n            <configuration>\r\n                <source>1.8</source>\r\n                <target>1.8</target>\r\n            </configuration>\r\n        </plugin>\r\n\r\n    </plugins>\r\n</build>\r\n```","```\r\n<dependency>\r\n    <groupId>com.baeldung</groupId>\r\n    <artifactId>annotation-processing</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n</dependency>\r\n```","```\r\npublic class Person {\r\n\r\n    private int age;\r\n\r\n    private String name;\r\n\r\n    // getters and setters …\r\n\r\n}\r\n```","```\r\nPerson person = new PersonBuilder()\r\n  .setAge(25)\r\n  .setName(\"John\")\r\n  .build();\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.SOURCE)\r\npublic @interface BuilderProperty {\r\n}\r\n```","```\r\npublic class Person {\r\n\r\n    private int age;\r\n\r\n    private String name;\r\n\r\n    @BuilderProperty\r\n    public void setAge(int age) {\r\n        this.age = age;\r\n    }\r\n\r\n    @BuilderProperty\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // getters …\r\n\r\n}\r\n```","```\r\n@SupportedAnnotationTypes(\r\n  \"com.baeldung.annotation.processor.BuilderProperty\")\r\n@SupportedSourceVersion(SourceVersion.RELEASE_8)\r\n@AutoService(Processor.class)\r\npublic class BuilderProcessor extends AbstractProcessor {\r\n\r\n    @Override\r\n    public boolean process(Set<? extends TypeElement> annotations, \r\n      RoundEnvironment roundEnv) {\r\n        return false;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic boolean process(Set<? extends TypeElement> annotations, \r\n  RoundEnvironment roundEnv) {\r\n\r\n    for (TypeElement annotation : annotations) {\r\n        Set<? extends Element> annotatedElements \r\n          = roundEnv.getElementsAnnotatedWith(annotation);\r\n\r\n        // …\r\n    }\r\n\r\n    return true;\r\n}\r\n```","```\r\nMap<Boolean, List<Element>> annotatedMethods = annotatedElements.stream().collect(\r\n  Collectors.partitioningBy(element ->\r\n    ((ExecutableType) element.asType()).getParameterTypes().size() == 1\r\n    && element.getSimpleName().toString().startsWith(\"set\")));\r\n\r\nList<Element> setters = annotatedMethods.get(true);\r\nList<Element> otherMethods = annotatedMethods.get(false);\r\n```","```\r\notherMethods.forEach(element ->\r\n  processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,\r\n    \"@BuilderProperty must be applied to a setXxx method \" \r\n      + \"with a single argument\", element));\r\n```","```\r\nif (setters.isEmpty()) {\r\n    continue;\r\n}\r\n```","```\r\nString className = ((TypeElement) setters.get(0)\r\n  .getEnclosingElement()).getQualifiedName().toString();\r\n```","```\r\nMap<String, String> setterMap = setters.stream().collect(Collectors.toMap(\r\n    setter -> setter.getSimpleName().toString(),\r\n    setter -> ((ExecutableType) setter.asType())\r\n      .getParameterTypes().get(0).toString()\r\n));\r\n```","```\r\nJavaFileObject builderFile = processingEnv.getFiler()\r\n  .createSourceFile(builderClassName);\r\ntry (PrintWriter out = new PrintWriter(builderFile.openWriter())) {\r\n    // writing generated file to out …\r\n}\r\n```","```\r\nprivate void writeBuilderFile(\r\n  String className, Map<String, String> setterMap) \r\n  throws IOException {\r\n\r\n    String packageName = null;\r\n    int lastDot = className.lastIndexOf('.');\r\n    if (lastDot > 0) {\r\n        packageName = className.substring(0, lastDot);\r\n    }\r\n\r\n    String simpleClassName = className.substring(lastDot + 1);\r\n    String builderClassName = className + \"Builder\";\r\n    String builderSimpleClassName = builderClassName\r\n      .substring(lastDot + 1);\r\n\r\n    JavaFileObject builderFile = processingEnv.getFiler()\r\n      .createSourceFile(builderClassName);\r\n\r\n    try (PrintWriter out = new PrintWriter(builderFile.openWriter())) {\r\n\r\n        if (packageName != null) {\r\n            out.print(\"package \");\r\n            out.print(packageName);\r\n            out.println(\";\");\r\n            out.println();\r\n        }\r\n\r\n        out.print(\"public class \");\r\n        out.print(builderSimpleClassName);\r\n        out.println(\" {\");\r\n        out.println();\r\n\r\n        out.print(\"    private \");\r\n        out.print(simpleClassName);\r\n        out.print(\" object = new \");\r\n        out.print(simpleClassName);\r\n        out.println(\"();\");\r\n        out.println();\r\n\r\n        out.print(\"    public \");\r\n        out.print(simpleClassName);\r\n        out.println(\" build() {\");\r\n        out.println(\"        return object;\");\r\n        out.println(\"    }\");\r\n        out.println();\r\n\r\n        setterMap.entrySet().forEach(setter -> {\r\n            String methodName = setter.getKey();\r\n            String argumentType = setter.getValue();\r\n\r\n            out.print(\"    public \");\r\n            out.print(builderSimpleClassName);\r\n            out.print(\" \");\r\n            out.print(methodName);\r\n\r\n            out.print(\"(\");\r\n\r\n            out.print(argumentType);\r\n            out.println(\" value) {\");\r\n            out.print(\"        object.\");\r\n            out.print(methodName);\r\n            out.println(\"(value);\");\r\n            out.println(\"        return this;\");\r\n            out.println(\"    }\");\r\n            out.println();\r\n        });\r\n\r\n        out.println(\"}\");\r\n    }\r\n}\r\n```","```\r\npackage com.baeldung.annotation;\r\n\r\npublic class PersonBuilder {\r\n\r\n    private Person object = new Person();\r\n\r\n    public Person build() {\r\n        return object;\r\n    }\r\n\r\n    public PersonBuilder setName(java.lang.String value) {\r\n        object.setName(value);\r\n        return this;\r\n    }\r\n\r\n    public PersonBuilder setAge(int value) {\r\n        object.setAge(value);\r\n        return this;\r\n    }\r\n}\r\n```","```\r\njavac com/baeldung/annotation/processor/BuilderProcessor\r\njavac com/baeldung/annotation/processor/BuilderProperty\r\n```","```\r\njavac -processor com.baeldung.annotation.processor.MyProcessor Person.java\r\n```","```\r\njavac -processor package1.Processor1,package2.Processor2 SourceFile.java\r\n```","```\r\n<build>\r\n    <plugins>\r\n\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-compiler-plugin</artifactId>\r\n            <version>3.5.1</version>\r\n            <configuration>\r\n                <source>1.8</source>\r\n                <target>1.8</target>\r\n                <encoding>UTF-8</encoding>\r\n                <generatedSourcesDirectory>${project.build.directory}\r\n                  /generated-sources/</generatedSourcesDirectory>\r\n                <annotationProcessors>\r\n                    <annotationProcessor>\r\n                        com.baeldung.annotation.processor.BuilderProcessor\r\n                    </annotationProcessor>\r\n                </annotationProcessors>\r\n            </configuration>\r\n        </plugin>\r\n\r\n    </plugins>\r\n</build>\r\n```","```\r\ncom.baeldung.annotation.processor.BuilderProcessor\r\n```","```\r\npackage1.Processor1\r\npackage2.Processor2\r\npackage3.Processor3\r\n```","```\r\n[ERROR] Bad service configuration file, or exception thrown while \r\nconstructing Processor object: javax.annotation.processing.Processor: \r\nProvider com.baeldung.annotation.processor.BuilderProcessor not found\r\n```","```\r\n@AutoService(Processor.class)\r\npublic BuilderProcessor extends AbstractProcessor {\r\n    // …\r\n}\r\n```"]