["```\r\nString[] planes1 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\nString[] planes2 = planes1;\r\n```","```\r\nassertThat(planes1).isSameAs(planes2);\r\n```","```\r\nplanes2[0] = \"747\";\r\n```","```\r\nassertThat(planes1).isSameAs(planes2);\r\nassertThat(planes2[0]).isEqualTo(\"747\");\r\nassertThat(planes1[0]).isEqualTo(\"747\");\r\n```","```\r\nString[] planes1 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\nString[] planes2 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\n```","```\r\nassertThat(planes1).isNotSameAs(planes2);\r\n```","```\r\nfinal String[] planes1 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\nfinal Integer[] quantities = new Integer[] { 10, 12, 34, 45, 12, 43, 5, 2 };\r\n```","```\r\nassertThat(planes1).hasSize(8);\r\nassertThat(quantities).hasSize(8);\r\n```","```\r\nString[] planes1 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\nString[] planes2 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\n```","```\r\nassertThat(Arrays.equals(planes1, planes2)).isTrue();\r\n```","```\r\nString[] planes1 = new String[] { \"A320\", \"B738\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" };\r\nString[] planes2 = new String[] { \"B738\", \"A320\", \"A321\", \"A319\", \"B77W\", \"B737\", \"A333\", \"A332\" }; \r\n```","```\r\nassertThat(Arrays.equals(planes1, planes2)).isFalse();\r\n```","```\r\npublic class Plane {\r\n    private final String name;\r\n    private final String model;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    Plane plane = (Plane) o;\r\n    return Objects.equals(name, plane.name) && Objects.equals(model, plane.model);\r\n}\r\n\r\n@Override\r\npublic int hashCode() {\r\n    return Objects.hash(name, model);\r\n}\r\n```","```\r\nPlane[][] planes1 \r\n  = new Plane[][] { new Plane[]{new Plane(\"Plane 1\", \"A320\")}, new Plane[]{new Plane(\"Plane 2\", \"B738\") }};\r\nPlane[][] planes2 \r\n  = new Plane[][] { new Plane[]{new Plane(\"Plane 1\", \"A320\")}, new Plane[]{new Plane(\"Plane 2\", \"B738\") }}; \r\n```","```\r\nassertThat(Arrays.deepEquals(planes1, planes2)).isTrue();\r\n```","```\r\nPlane[][] planes1 \r\n  = new Plane[][] { new Plane[]{new Plane(\"Plane 1\", \"A320\")}, new Plane[]{new Plane(\"Plane 2\", \"B738\") }};\r\nPlane[][] planes2 \r\n  = new Plane[][] { new Plane[]{new Plane(\"Plane 2\", \"B738\")}, new Plane[]{new Plane(\"Plane 1\", \"A320\") }};\r\n```","```\r\nassertThat(Arrays.deepEquals(planes1, planes2)).isFalse();\r\n```","```\r\nComparator<Plane> planeComparator = (o1, o2) -> {\r\n    if (o1.getName().equals(o2.getName())) {\r\n        return o2.getModel().compareTo(o1.getModel());\r\n    }\r\n    return o2.getName().compareTo(o1.getName());\r\n};\r\n```","```\r\nArrays.sort(planes1[0], planeComparator);\r\nArrays.sort(planes2[0], planeComparator);\r\n```","```\r\nassertThat(Arrays.deepEquals(planes1, planes2)).isTrue();\r\n```"]