["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n        <version>2.4.4</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n        <version>2.4.4</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <version>2.4.4</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>com.h2database</groupId>\r\n        <artifactId>h2</artifactId>\r\n        <version>1.4.200</version>\r\n        <scope>runtime</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@Entity\r\n@Table(name = \"client\")\r\npublic class Client {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n    private String email;\r\n\r\n    // getter, setters, contructors\r\n}\r\n```","```\r\npublic interface ClientRepository extends JpaRepository<Client, Long> {\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/clients\")\r\npublic class ClientsController {\r\n\r\n    private final ClientRepository clientRepository;\r\n\r\n    public ClientsController(ClientRepository clientRepository) {\r\n        this.clientRepository = clientRepository;\r\n    }\r\n\r\n    @GetMapping\r\n    public List<Client> getClients() {\r\n        return clientRepository.findAll();\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Client getClient(@PathVariable Long id) {\r\n        return clientRepository.findById(id).orElseThrow(RuntimeException::new);\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity createClient(@RequestBody Client client) throws URISyntaxException {\r\n        Client savedClient = clientRepository.save(client);\r\n        return ResponseEntity.created(new URI(\"/clients/\" + savedClient.getId())).body(savedClient);\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity updateClient(@PathVariable Long id, @RequestBody Client client) {\r\n        Client currentClient = clientRepository.findById(id).orElseThrow(RuntimeException::new);\r\n        currentClient.setName(client.getName());\r\n        currentClient.setEmail(client.getEmail());\r\n        currentClient = clientRepository.save(client);\r\n\r\n        return ResponseEntity.ok(currentClient);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity deleteClient(@PathVariable Long id) {\r\n        clientRepository.deleteById(id);\r\n        return ResponseEntity.ok().build();\r\n    }\r\n}\r\n```","```\r\nmvn spring-boot:run\r\n```","```\r\ncurl -X POST http://localhost:8080/clients -d '{\"name\": \"John Doe\", \"email\": \"[[email protected]](/web/20220827170201/https://www.baeldung.com/cdn-cgi/l/email-protection)\"}'\r\n```","```\r\nnpx create-react-app frontend\r\n```","```\r\nnpm install --save [[email protected]](/web/20220827170201/https://www.baeldung.com/cdn-cgi/l/email-protection) [[email protected]](/web/20220827170201/https://www.baeldung.com/cdn-cgi/l/email-protection) [[email protected]](/web/20220827170201/https://www.baeldung.com/cdn-cgi/l/email-protection) [[email protected]](/web/20220827170201/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n```","```\r\nnpm start\r\n```","```\r\n...\r\n\"proxy\": \"http://localhost:8080\",\r\n...\r\n```","```\r\nclass App extends Component {\r\n  state = {\r\n    clients: []\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch('/clients');\r\n    const body = await response.json();\r\n    this.setState({clients: body});\r\n  }\r\n\r\n  render() {\r\n    const {clients} = this.state;\r\n    return (\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <div className=\"App-intro\">\r\n              <h2>Clients</h2>\r\n              {clients.map(client =>\r\n                  <div key={client.id}>\r\n                    {client.name} ({client.email})\r\n                  </div>\r\n              )}\r\n            </div>\r\n          </header>\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default App; \r\n```","```\r\nimport React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass ClientList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {clients: []};\r\n        this.remove = this.remove.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('/clients')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({clients: data}));\r\n    }\r\n}\r\nexport default ClientList;\r\n```","```\r\nasync remove(id) {\r\n    await fetch(`/clients/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(() => {\r\n        let updatedClients = [...this.state.clients].filter(i => i.id !== id);\r\n        this.setState({clients: updatedClients});\r\n    });\r\n}\r\n\r\nrender() {\r\n    const {clients, isLoading} = this.state;\r\n\r\n    if (isLoading) {\r\n        return <p>Loading...</p>;\r\n    }\r\n\r\n    const clientList = clients.map(client => {\r\n        return <tr key={client.id}>\r\n            <td style={{whiteSpace: 'nowrap'}}>{client.name}</td>\r\n            <td>{client.email}</td>\r\n            <td>\r\n                <ButtonGroup>\r\n                    <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/clients/\" + client.id}>Edit</Button>\r\n                    <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(client.id)}>Delete</Button>\r\n                </ButtonGroup>\r\n            </td>\r\n        </tr>\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <AppNavbar/>\r\n            <Container fluid>\r\n                <div className=\"float-right\">\r\n                    <Button color=\"success\" tag={Link} to=\"/clients/new\">Add Client</Button>\r\n                </div>\r\n                <h3>Clients</h3>\r\n                <Table className=\"mt-4\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th width=\"30%\">Name</th>\r\n                        <th width=\"30%\">Email</th>\r\n                        <th width=\"40%\">Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {clientList}\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n```","```\r\nimport React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\n\r\nclass ClientEdit extends Component {\r\n\r\n    emptyItem = {\r\n        name: '',\r\n        email: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyItem\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n}\r\nexport default withRouter(ClientEdit);\r\n```","```\r\nasync componentDidMount() {\r\n    if (this.props.match.params.id !== 'new') {\r\n        const client = await (await fetch(`/clients/${this.props.match.params.id}`)).json();\r\n        this.setState({item: client});\r\n    }\r\n}\r\n```","```\r\nhandleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n}\r\n```","```\r\nasync handleSubmit(event) {\r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    await fetch('/clients' + (item.id ? '/' + item.id : ''), {\r\n        method: (item.id) ? 'PUT' : 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push('/clients');\r\n}\r\n```","```\r\nrender() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit Client' : 'Add Client'}</h2>;\r\n\r\n    return <div>\r\n        <AppNavbar/>\r\n        <Container>\r\n            {title}\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <FormGroup>\r\n                    <Label for=\"name\">Name</Label>\r\n                    <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                           onChange={this.handleChange} autoComplete=\"name\"/>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"email\">Email</Label>\r\n                    <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\r\n                           onChange={this.handleChange} autoComplete=\"email\"/>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                    <Button color=\"secondary\" tag={Link} to=\"/clients\">Cancel</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        </Container>\r\n    </div>\r\n}\r\n```","```\r\nimport React, {Component} from 'react';\r\nimport {Navbar, NavbarBrand} from 'reactstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class AppNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isOpen: false};\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <Navbar color=\"dark\" dark expand=\"md\">\r\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\r\n        </Navbar>;\r\n    }\r\n}\r\n```","```\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <Container fluid>\r\n                    <Button color=\"link\"><Link to=\"/clients\">Clients</Link></Button>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Home;\r\n```","```\r\nimport React, { Component } from 'react';\r\nimport './App.css';\r\nimport Home from './Home';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport ClientList from './ClientList';\r\nimport ClientEdit from \"./ClientEdit\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n        <Router>\r\n          <Switch>\r\n            <Route path='/' exact={true} component={Home}/>\r\n            <Route path='/clients' exact={true} component={ClientList}/>\r\n            <Route path='/clients/:id' component={ClientEdit}/>\r\n          </Switch>\r\n        </Router>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n```","```\r\n<properties>\r\n    ...\r\n    <frontend-maven-plugin.version>1.6</frontend-maven-plugin.version>\r\n    <node.version>v14.8.0</node.version>\r\n    <yarn.version>v1.12.1</yarn.version>\r\n    ...\r\n</properties>\r\n...\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-resources-plugin</artifactId>\r\n            <version>3.1.0</version>\r\n            <executions>\r\n                ...\r\n            </executions>\r\n        </plugin>\r\n        <plugin>\r\n            <groupId>com.github.eirslett</groupId>\r\n            <artifactId>frontend-maven-plugin</artifactId>\r\n            <version>${frontend-maven-plugin.version}</version>\r\n            <configuration>\r\n                ...\r\n            </configuration>\r\n            <executions>\r\n                ...\r\n            </executions>\r\n        </plugin>\r\n        ...\r\n    </plugins>\r\n</build>\r\n```","```\r\n...\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-resources-plugin</artifactId>\r\n    <version>3.1.0</version>\r\n    <executions>\r\n        <execution>\r\n            <id>copy-resources</id>\r\n            <phase>process-classes</phase>\r\n            <goals>\r\n                <goal>copy-resources</goal>\r\n            </goals>\r\n            <configuration>\r\n                <outputDirectory>${basedir}/target/classes/static</outputDirectory>\r\n                <resources>\r\n                    <resource>\r\n                        <directory>frontend/build</directory>\r\n                    </resource>\r\n                </resources>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n...\r\n```","```\r\n...\r\n<plugin>\r\n    <groupId>com.github.eirslett</groupId>\r\n    <artifactId>frontend-maven-plugin</artifactId>\r\n    <version>${frontend-maven-plugin.version}</version>\r\n    <configuration>\r\n        <workingDirectory>frontend</workingDirectory>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>install node</id>\r\n            <goals>\r\n                <goal>install-node-and-yarn</goal>\r\n            </goals>\r\n            <configuration>\r\n                <nodeVersion>${node.version}</nodeVersion>\r\n                <yarnVersion>${yarn.version}</yarnVersion>\r\n            </configuration>\r\n        </execution>\r\n        <execution>\r\n            <id>yarn install</id>\r\n            <goals>\r\n                <goal>yarn</goal>\r\n            </goals>\r\n            <phase>generate-resources</phase>\r\n        </execution>\r\n        <execution>\r\n            <id>yarn test</id>\r\n            <goals>\r\n                <goal>yarn</goal>\r\n            </goals>\r\n            <phase>test</phase>\r\n            <configuration>\r\n                <arguments>test</arguments>\r\n                <environmentVariables>\r\n                    <CI>true</CI>\r\n                </environmentVariables>\r\n            </configuration>\r\n        </execution>\r\n        <execution>\r\n            <id>yarn build</id>\r\n            <goals>\r\n                <goal>yarn</goal>\r\n            </goals>\r\n            <phase>compile</phase>\r\n            <configuration>\r\n                <arguments>build</arguments>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n...\r\n```","```\r\nmvn spring-boot:run\r\n```"]