["```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n\r\n    private int age;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class UserSpecification implements Specification<User> {\r\n\r\n    private SearchCriteria criteria;\r\n\r\n    @Override\r\n    public Predicate toPredicate\r\n      (Root<User> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\r\n\r\n        if (criteria.getOperation().equalsIgnoreCase(\">\")) {\r\n            return builder.greaterThanOrEqualTo(\r\n              root.<String> get(criteria.getKey()), criteria.getValue().toString());\r\n        } \r\n        else if (criteria.getOperation().equalsIgnoreCase(\"<\")) {\r\n            return builder.lessThanOrEqualTo(\r\n              root.<String> get(criteria.getKey()), criteria.getValue().toString());\r\n        } \r\n        else if (criteria.getOperation().equalsIgnoreCase(\":\")) {\r\n            if (root.get(criteria.getKey()).getJavaType() == String.class) {\r\n                return builder.like(\r\n                  root.<String>get(criteria.getKey()), \"%\" + criteria.getValue() + \"%\");\r\n            } else {\r\n                return builder.equal(root.get(criteria.getKey()), criteria.getValue());\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\npublic class SearchCriteria {\r\n    private String key;\r\n    private String operation;\r\n    private Object value;\r\n}\r\n```","```\r\npublic interface UserRepository \r\n  extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { PersistenceJPAConfig.class })\r\n@Transactional\r\n@TransactionConfiguration\r\npublic class JPASpecificationIntegrationTest {\r\n\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    private User userJohn;\r\n    private User userTom;\r\n\r\n    @Before\r\n    public void init() {\r\n        userJohn = new User();\r\n        userJohn.setFirstName(\"John\");\r\n        userJohn.setLastName(\"Doe\");\r\n        userJohn.setEmail(\"[[email protected]](/web/20220926194244/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userJohn.setAge(22);\r\n        repository.save(userJohn);\r\n\r\n        userTom = new User();\r\n        userTom.setFirstName(\"Tom\");\r\n        userTom.setLastName(\"Doe\");\r\n        userTom.setEmail(\"[[email protected]](/web/20220926194244/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userTom.setAge(26);\r\n        repository.save(userTom);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenLast_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = \r\n      new UserSpecification(new SearchCriteria(\"lastName\", \":\", \"doe\"));\r\n\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, isIn(results));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec1 = \r\n      new UserSpecification(new SearchCriteria(\"firstName\", \":\", \"john\"));\r\n    UserSpecification spec2 = \r\n      new UserSpecification(new SearchCriteria(\"lastName\", \":\", \"doe\"));\r\n\r\n    List<User> results = repository.findAll(Specification.where(spec1).and(spec2));\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenLastAndAge_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec1 = \r\n      new UserSpecification(new SearchCriteria(\"age\", \">\", \"25\"));\r\n    UserSpecification spec2 = \r\n      new UserSpecification(new SearchCriteria(\"lastName\", \":\", \"doe\"));\r\n\r\n    List<User> results = \r\n      repository.findAll(Specification.where(spec1).and(spec2));\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenWrongFirstAndLast_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec1 = \r\n      new UserSpecification(new SearchCriteria(\"firstName\", \":\", \"Adam\"));\r\n    UserSpecification spec2 = \r\n      new UserSpecification(new SearchCriteria(\"lastName\", \":\", \"Fox\"));\r\n\r\n    List<User> results = \r\n      repository.findAll(Specification.where(spec1).and(spec2));\r\n\r\n    assertThat(userJohn, not(isIn(results)));\r\n    assertThat(userTom, not(isIn(results)));  \r\n}\r\n```","```\r\n@Test\r\npublic void givenPartialFirst_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = \r\n      new UserSpecification(new SearchCriteria(\"firstName\", \":\", \"jo\"));\r\n\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\npublic class UserSpecificationsBuilder {\r\n\r\n    private final List<SearchCriteria> params;\r\n\r\n    public UserSpecificationsBuilder() {\r\n        params = new ArrayList<SearchCriteria>();\r\n    }\r\n\r\n    public UserSpecificationsBuilder with(String key, String operation, Object value) {\r\n        params.add(new SearchCriteria(key, operation, value));\r\n        return this;\r\n    }\r\n\r\n    public Specification<User> build() {\r\n        if (params.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        List<Specification> specs = params.stream()\r\n          .map(UserSpecification::new)\r\n          .collect(Collectors.toList());\r\n\r\n        Specification result = specs.get(0);\r\n\r\n        for (int i = 1; i < params.size(); i++) {\r\n            result = params.get(i)\r\n              .isOrPredicate()\r\n                ? Specification.where(result)\r\n                  .or(specs.get(i))\r\n                : Specification.where(result)\r\n                  .and(specs.get(i));\r\n        }       \r\n        return result;\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserRepository repo;\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/users\")\r\n    @ResponseBody\r\n    public List<User> search(@RequestParam(value = \"search\") String search) {\r\n        UserSpecificationsBuilder builder = new UserSpecificationsBuilder();\r\n        Pattern pattern = Pattern.compile(\"(\\\\w+?)(:|<|>)(\\\\w+?),\");\r\n        Matcher matcher = pattern.matcher(search + \",\");\r\n        while (matcher.find()) {\r\n            builder.with(matcher.group(1), matcher.group(2), matcher.group(3));\r\n        }\r\n\r\n        Specification<User> spec = builder.build();\r\n        return repo.findAll(spec);\r\n    }\r\n}\r\n```","```\r\nPattern pattern = Pattern.compile(\"(\\\\w+?)(:|<|>)(\\\\w+?),\", Pattern.UNICODE_CHARACTER_CLASS);\r\n```","```\r\nhttp://localhost:8080/users?search=lastName:doe,age>25\r\n```","```\r\n[{\r\n    \"id\":2,\r\n    \"firstName\":\"tom\",\r\n    \"lastName\":\"doe\",\r\n    \"email\":\"[[email protected]](/web/20220926194244/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\":26\r\n}]\r\n```","```\r\nPattern pattern = Pattern.compile(\"(\\\\w+?)(:|<|>)(\\\"([^\\\"]+)\\\")\");\r\n```"]