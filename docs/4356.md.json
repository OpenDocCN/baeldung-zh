["```\r\npublic class Person {\r\n    private String fullName;\r\n    private int age;\r\n    private List<String> nicknames;\r\n\r\n    public Person(String fullName, int age) {\r\n        this.fullName = fullName;\r\n        this.age = age;\r\n        this.nicknames = new ArrayList<>();\r\n    }\r\n\r\n    public void addNickname(String nickname) {\r\n        nicknames.add(nickname);\r\n    }\r\n\r\n    // getters\r\n} \r\n```","```\r\npublic class PersonAssert extends AbstractAssert<PersonAssert, Person> {\r\n\r\n    public PersonAssert(Person actual) {\r\n        super(actual, PersonAssert.class);\r\n    }\r\n\r\n    // assertion methods described later\r\n}\r\n```","```\r\npublic static PersonAssert assertThat(Person actual) {\r\n    return new PersonAssert(actual);\r\n}\r\n```","```\r\npublic PersonAssert hasFullName(String fullName) {\r\n    isNotNull();\r\n    if (!actual.getFullName().equals(fullName)) {\r\n        failWithMessage(\"Expected person to have full name %s but was %s\", \r\n          fullName, actual.getFullName());\r\n    }\r\n    return this;\r\n}\r\n```","```\r\npublic PersonAssert isAdult() {\r\n    isNotNull();\r\n    if (actual.getAge() < 18) {\r\n        failWithMessage(\"Expected person to be adult\");\r\n    }\r\n    return this;\r\n}\r\n```","```\r\npublic PersonAssert hasNickName(String nickName) {\r\n    isNotNull();\r\n    if (!actual.getNickNames().contains(nickName)) {\r\n        failWithMessage(\"Expected person to have nickname %s\", \r\n          nickName);\r\n    }\r\n    return this;\r\n}\r\n```","```\r\npublic class Assertions {\r\n    public static PersonAssert assertThat(Person actual) {\r\n        return new PersonAssert(actual);\r\n    }\r\n\r\n    // static factory methods of other assertion classes\r\n}\r\n```","```\r\n@Test\r\npublic void whenPersonNameMatches_thenCorrect() {\r\n    Person person = new Person(\"John Doe\", 20);\r\n    assertThat(person)\r\n      .hasFullName(\"John Doe\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenPersonAgeLessThanEighteen_thenNotAdult() {\r\n    Person person = new Person(\"Jane Roe\", 16);\r\n\r\n    // assertion fails\r\n    assertThat(person).isAdult();\r\n}\r\n```","```\r\n@Test\r\npublic void whenPersonDoesNotHaveAMatchingNickname_thenIncorrect() {\r\n    Person person = new Person(\"John Doe\", 20);\r\n    person.addNickname(\"Nick\");\r\n\r\n    // assertion will fail\r\n    assertThat(person)\r\n      .hasNickname(\"John\");\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-assertions-generator-maven-plugin</artifactId>\r\n    <version>2.1.0</version>\r\n    <configuration>\r\n        <classes>\r\n            <param>com.baeldung.testing.assertj.custom.Person</param>\r\n        </classes>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\nmvn assertj:generate-assertions\r\n```","```\r\n// generated comments are stripped off for brevity\r\n\r\npackage com.baeldung.testing.assertj.custom;\r\n\r\n@javax.annotation.Generated(value=\"assertj-assertions-generator\")\r\npublic class Assertions {\r\n\r\n    @org.assertj.core.util.CheckReturnValue\r\n    public static com.baeldung.testing.assertj.custom.PersonAssert\r\n      assertThat(com.baeldung.testing.assertj.custom.Person actual) {\r\n        return new com.baeldung.testing.assertj.custom.PersonAssert(actual);\r\n    }\r\n\r\n    protected Assertions() {\r\n        // empty\r\n    }\r\n}\r\n```"]