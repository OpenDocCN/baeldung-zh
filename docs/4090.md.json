["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.jdbi</groupId>\r\n        <artifactId>jdbi3-core</artifactId>\r\n        <version>3.1.0</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.4.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nJdbi jdbi = Jdbi.create(\"jdbc:hsqldb:mem:testDB\", \"sa\", \"\");\r\n```","```\r\nProperties properties = new Properties();\r\nproperties.setProperty(\"username\", \"sa\");\r\nproperties.setProperty(\"password\", \"\");\r\nJdbi jdbi = Jdbi.create(\"jdbc:hsqldb:mem:testDB\", properties);\r\n```","```\r\nJdbi jdbi = Jdbi.create(datasource);\r\n```","```\r\njdbi.useHandle(handle -> {\r\n    doStuffWith(handle);\r\n});\r\n```","```\r\njdbi.withHandle(handle -> {\r\n    return computeValue(handle);\r\n});\r\n```","```\r\nJdbi jdbi = Jdbi.create(\"jdbc:hsqldb:mem:testDB\", \"sa\", \"\");\r\ntry (Handle handle = jdbi.open()) {\r\n    doStuffWith(handle);\r\n}\r\n```","```\r\nhandle.execute(\r\n  \"create table project \"\r\n  + \"(id integer identity, name varchar(50), url varchar(100))\");\r\n```","```\r\nint updateCount = handle.execute(\r\n  \"insert into project values \"\r\n  + \"(1, 'tutorials', 'github.com/eugenp/tutorials')\");\r\n\r\nassertEquals(1, updateCount);\r\n```","```\r\nQuery query = handle.createQuery(\"select * from project\");\r\n```","```\r\nquery.mapToMap();\r\n```","```\r\nhandle.createQuery(\"select name from project\").mapTo(String.class);\r\n```","```\r\nList<Map<String, Object>> results = query.mapToMap().list();\r\n```","```\r\nList<String> results = query.mapTo(String.class).collect(Collectors.toSet());\r\n```","```\r\nquery.mapTo(String.class).useStream((Stream<String> stream) -> {\r\n    doStuffWith(stream)\r\n});\r\n```","```\r\nOptional<Map<String, Object>> first = query.mapToMap().findFirst();\r\n```","```\r\nDate onlyResult = query.mapTo(Date.class).findOnly();\r\n```","```\r\nQuery positionalParamsQuery =\r\n  handle.createQuery(\"select * from project where name = ?\");\r\n```","```\r\nQuery namedParamsQuery =\r\n  handle.createQuery(\"select * from project where url like :pattern\");\r\n```","```\r\npositionalParamsQuery.bind(0, \"tutorials\");\r\nnamedParamsQuery.bind(\"pattern\", \"%github.com/eugenp/%\");\r\n```","```\r\nQuery query = handle.createQuery(\r\n  \"select id from project where name = :name and url = :url\");\r\nMap<String, String> params = new HashMap<>();\r\nparams.put(\"name\", \"REST with Spring\");\r\nparams.put(\"url\", \"github.com/eugenp/REST-With-Spring\");\r\n```","```\r\nquery.bindMap(params);\r\n```","```\r\nquery.bindBean(paramsBean);\r\n```","```\r\nUpdate update = handle.createUpdate(\r\n  \"INSERT INTO PROJECT (NAME, URL) VALUES (:name, :url)\");\r\n```","```\r\nint rows = update.execute();\r\n```","```\r\nUpdate update = handle.createUpdate(\r\n  \"INSERT INTO PROJECT (NAME, URL) \"\r\n  + \"VALUES ('tutorials', 'github.com/eugenp/tutorials')\");\r\nResultBearing generatedKeys = update.executeAndReturnGeneratedKeys();\r\n```","```\r\ngeneratedKeys.mapToMap()\r\n  .findOnly().get(\"id\");\r\n```","```\r\nhandle.useTransaction((Handle h) -> {\r\n    haveFunWith(h);\r\n});\r\n```","```\r\nhandle.useTransaction((Handle h) -> {\r\n    h.execute(\"...\");\r\n    h.commit();\r\n});\r\n```","```\r\nhandle.inTransaction((Handle h) -> {\r\n    h.execute(\"...\");\r\n    h.commit();\r\n    return true;\r\n});\r\n```","```\r\nhandle.begin();\r\n// ...\r\nhandle.commit();\r\nhandle.close();\r\n```"]