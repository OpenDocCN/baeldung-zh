["```\r\npublic enum Modes {\r\n    ALPHA, BETA;\r\n} \r\n```","```\r\n@GetMapping(\"/mode2str\")\r\npublic String getStringToMode(@RequestParam(\"mode\") Modes mode) {\r\n    // ...\r\n} \r\n```","```\r\n@GetMapping(\"/findbymode/{mode}\")\r\npublic String findByEnum(@PathVariable(\"mode\") Modes mode) {\r\n    // ...\r\n} \r\n```","```\r\npublic class StringToEnumConverter implements Converter<String, Modes> {\r\n    @Override\r\n    public Modes convert(String source) {\r\n        return Modes.valueOf(source.toUpperCase());\r\n    }\r\n} \r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void addFormatters(FormatterRegistry registry) {\r\n        registry.addConverter(new StringToEnumConverter());\r\n    }\r\n} \r\n```","```\r\npublic class StringToEnumConverter implements Converter<String, Modes> {\r\n    @Override\r\n    public Modes convert(String source) {\r\n        try {\r\n            return Modes.valueOf(source.toUpperCase());\r\n        } catch (IllegalArgumentException e) {\r\n            return null;\r\n        }\r\n    }\r\n} \r\n```","```\r\n@ControllerAdvice\r\npublic class GlobalControllerExceptionHandler {\r\n    @ExceptionHandler(ConversionFailedException.class)\r\n    public ResponseEntity<String> handleConflict(RuntimeException ex) {\r\n        return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);\r\n    }\r\n}\r\n```"]