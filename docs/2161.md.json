["```\r\n<dependency>\r\n    <groupId>net.sourceforge.htmlunit</groupId>\r\n    <artifactId>htmlunit</artifactId>\r\n    <version>2.23</version>\r\n</dependency> \r\n```","```\r\nprivate WebClient webClient;\r\n\r\n@Before\r\npublic void init() throws Exception {\r\n    webClient = new WebClient();\r\n}\r\n\r\n@After\r\npublic void close() throws Exception {\r\n    webClient.close();\r\n}\r\n\r\n@Test\r\npublic void givenAClient_whenEnteringBaeldung_thenPageTitleIsOk()\r\n  throws Exception {\r\n    HtmlPage page = webClient.getPage(\"/\");\r\n\r\n    Assert.assertEquals(\r\n      \"Baeldung | Java, Spring and Web Development tutorials\",\r\n        page.getTitleText());\r\n} \r\n```","```\r\n@Test\r\npublic void givenAClient_whenEnteringBaeldung_thenPageTitleIsCorrect()\r\n  throws Exception {\r\n    webClient.getOptions().setThrowExceptionOnScriptError(false);\r\n    HtmlPage page = webClient.getPage(\"/\");\r\n\r\n    Assert.assertEquals(\r\n      \"Baeldung | Java, Spring and Web Development tutorials\",\r\n        page.getTitleText());\r\n}\r\n```","```\r\n@Test\r\npublic void givenBaeldungArchive_whenRetrievingArticle_thenHasH1() \r\n  throws Exception {\r\n    webClient.getOptions().setCssEnabled(false);\r\n    webClient.getOptions().setJavaScriptEnabled(false);\r\n\r\n    String url = \"/full_archive\";\r\n    HtmlPage page = webClient.getPage(url);\r\n    String xpath = \"(//ul[@class='car-monthlisting']/li)[1]/a\";\r\n    HtmlAnchor latestPostLink \r\n      = (HtmlAnchor) page.getByXPath(xpath).get(0);\r\n    HtmlPage postPage = latestPostLink.click();\r\n\r\n    List<HtmlHeading1> h1  \r\n      = (List<HtmlHeading1>) postPage.getByXPath(\"//h1\");\r\n\r\n    Assert.assertTrue(h1.size() > 0);\r\n} \r\n```","```\r\nJava Web Weekly, Issue 135\r\n1\\. Spring and Java\r\n2\\. Technical and Musings\r\n3\\. Comics\r\n4\\. Pick of the Week\r\n```","```\r\nfor (int i = 0; i < 20; i++) {\r\n    if (condition_to_happen_after_js_execution) {\r\n        break;\r\n    }\r\n    synchronized (page) {\r\n        page.wait(500);\r\n    }\r\n}\r\n```","```\r\nWebClient webClient = new WebClient(BrowserVersion.CHROME);\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration(classes = { TestConfig.class })\r\npublic class HtmlUnitAndSpringTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    private WebClient webClient;\r\n\r\n    @Before\r\n    public void setup() {\r\n        webClient = MockMvcWebClientBuilder\r\n          .webAppContextSetup(wac).build();\r\n    }\r\n\r\n    @Test\r\n    public void givenAMessage_whenSent_thenItShows() throws Exception {\r\n        String text = \"Hello world!\";\r\n        HtmlPage page;\r\n\r\n        String url = \"http://localhost/message/showForm\";\r\n        page = webClient.getPage(url);\r\n\r\n        HtmlTextInput messageText = page.getHtmlElementById(\"message\");\r\n        messageText.setValueAttribute(text);\r\n\r\n        HtmlForm form = page.getForms().get(0);\r\n        HtmlSubmitInput submit = form.getOneHtmlElementByAttribute(\r\n          \"input\", \"type\", \"submit\");\r\n        HtmlPage newPage = submit.click();\r\n\r\n        String receivedText = newPage.getHtmlElementById(\"received\")\r\n            .getTextContent();\r\n\r\n        Assert.assertEquals(receivedText, text);     \r\n    }\r\n}\r\n```"]