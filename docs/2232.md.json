["```\r\nvoid bubbleSort(Integer[] arr) {\r\n    int n = arr.length;\r\n    IntStream.range(0, n - 1)\r\n    .flatMap(i -> IntStream.range(1, n - i))\r\n    .forEach(j -> {\r\n        if (arr[j - 1] > arr[j]) {\r\n            int temp = arr[j];\r\n            arr[j] = arr[j - 1];\r\n            arr[j - 1] = temp;\r\n            }\r\n     });\r\n}\r\n```","```\r\n@Test\r\npublic void whenSortedWithBubbleSort_thenGetSortedArray() {\r\n    Integer[] array = { 2, 1, 4, 6, 3, 5 };\r\n    Integer[] sortedArray = { 1, 2, 3, 4, 5, 6 };\r\n    BubbleSort bubbleSort = new BubbleSort();\r\n    bubbleSort.bubbleSort(array);\r\n\r\n    assertArrayEquals(array, sortedArray);\r\n}\r\n```","```\r\npublic void optimizedBubbleSort(Integer[] arr) {\r\n    int i = 0, n = arr.length;\r\n    boolean swapNeeded = true;\r\n    while (i < n - 1 && swapNeeded) {\r\n        swapNeeded = false;\r\n        for (int j = 1; j < n - i; j++) {\r\n            if (arr[j - 1] > arr[j]) {\r\n                int temp = arr[j - 1];\r\n                arr[j - 1] = arr[j];\r\n                arr[j] = temp;\r\n                swapNeeded = true;\r\n            }\r\n        }\r\n        if(!swapNeeded) {\r\n            break;\r\n        }\r\n        i++;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenIntegerArray_whenSortedWithOptimizedBubbleSort_thenGetSortedArray() {\r\n      Integer[] array = { 2, 1, 4, 6, 3, 5 };\r\n      Integer[] sortedArray = { 1, 2, 3, 4, 5, 6 };\r\n      BubbleSort bubbleSort = new BubbleSort();\r\n      bubbleSort.optimizedBubbleSort(array);\r\n\r\n      assertArrayEquals(array, sortedArray);\r\n}\r\n```"]