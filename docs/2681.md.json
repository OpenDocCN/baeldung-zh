["```\r\nsetA : {1, 2, 3, 4}\r\n\r\nsetB : {2, 4, 6, 8}\r\n```","```\r\nsetA intersection setB = {2, 4}\r\n```","```\r\nsetA union setB = {1, 2, 3, 4, 6, 8}\r\n```","```\r\nrelative complement of setA in setB = {6, 8}\r\n\r\nrelative complement of setB in setA = {1, 3}\r\n```","```\r\nprivate Set<Integer> setA = setOf(1,2,3,4);\r\nprivate Set<Integer> setB = setOf(2,4,6,8);\r\n\r\nprivate static Set<Integer> setOf(Integer... values) {\r\n    return new HashSet<Integer>(Arrays.asList(values));\r\n}\r\n```","```\r\nSet<Integer> intersectSet = new HashSet<>(setA);\r\nintersectSet.retainAll(setB);\r\nassertEquals(setOf(2,4), intersectSet);\r\n```","```\r\nSet<Integer> unionSet = new HashSet<>(setA);\r\nunionSet.addAll(setB);\r\nassertEquals(setOf(1,2,3,4,6,8), unionSet);\r\n```","```\r\nSet<Integer> differenceSet = new HashSet<>(setA);\r\ndifferenceSet.removeAll(setB);\r\nassertEquals(setOf(1,3), differenceSet);\r\n```","```\r\nSet<Integer> intersectSet = setA.stream()\r\n    .filter(setB::contains)\r\n    .collect(Collectors.toSet());\r\nassertEquals(setOf(2,4), intersectSet);\r\n```","```\r\nSet<Integer> unionSet = Stream.concat(setA.stream(), setB.stream())\r\n    .collect(Collectors.toSet());\r\nassertEquals(setOf(1,2,3,4,6,8), unionSet);\r\n```","```\r\nSet<Integer> differenceSet = setA.stream()\r\n    .filter(val -> !setB.contains(val))\r\n    .collect(Collectors.toSet());\r\nassertEquals(setOf(1,3), differenceSet);\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.3</version>\r\n</dependency>\r\n```","```\r\nSet<Integer> intersectSet = Sets.intersection(setA, setB);\r\nassertEquals(setOf(2,4), intersectSet);\r\n\r\nSet<Integer> unionSet = Sets.union(setA, setB);\r\nassertEquals(setOf(1,2,3,4,6,8), unionSet);\r\n```","```\r\nSet<Integer> intersectSet = SetUtils.intersection(setA, setB);\r\nassertEquals(setOf(2,4), intersectSet);\r\n\r\nSet<Integer> unionSet = SetUtils.union(setA, setB);\r\nassertEquals(setOf(1,2,3,4,6,8), unionSet);\r\n```"]