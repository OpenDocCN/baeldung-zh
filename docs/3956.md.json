["```\r\n<dependency>\r\n    <groupId>com.github.ben-manes.caffeine</groupId>\r\n    <artifactId>caffeine</artifactId>\r\n    <version>2.5.5</version>\r\n</dependency>\r\n```","```\r\nclass DataObject {\r\n    private final String data;\r\n\r\n    private static int objectCounter = 0;\r\n    // standard constructors/getters\r\n\r\n    public static DataObject get(String data) {\r\n        objectCounter++;\r\n        return new DataObject(data);\r\n    }\r\n}\r\n```","```\r\nCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .expireAfterWrite(1, TimeUnit.MINUTES)\r\n  .maximumSize(100)\r\n  .build();\r\n```","```\r\nString key = \"A\";\r\nDataObject dataObject = cache.getIfPresent(key);\r\n\r\nassertNull(dataObject);\r\n```","```\r\ncache.put(key, dataObject);\r\ndataObject = cache.getIfPresent(key);\r\n\r\nassertNotNull(dataObject);\r\n```","```\r\ndataObject = cache\r\n  .get(key, k -> DataObject.get(\"Data for A\"));\r\n\r\nassertNotNull(dataObject);\r\nassertEquals(\"Data for A\", dataObject.getData());\r\n```","```\r\ncache.invalidate(key);\r\ndataObject = cache.getIfPresent(key);\r\n\r\nassertNull(dataObject);\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .maximumSize(100)\r\n  .expireAfterWrite(1, TimeUnit.MINUTES)\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\nDataObject dataObject = cache.get(key);\r\n\r\nassertNotNull(dataObject);\r\nassertEquals(\"Data for \" + key, dataObject.getData());\r\n```","```\r\nMap<String, DataObject> dataObjectMap \r\n  = cache.getAll(Arrays.asList(\"A\", \"B\", \"C\"));\r\n\r\nassertEquals(3, dataObjectMap.size());\r\n```","```\r\nAsyncLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .maximumSize(100)\r\n  .expireAfterWrite(1, TimeUnit.MINUTES)\r\n  .buildAsync(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\nString key = \"A\";\r\n\r\ncache.get(key).thenAccept(dataObject -> {\r\n    assertNotNull(dataObject);\r\n    assertEquals(\"Data for \" + key, dataObject.getData());\r\n});\r\n\r\ncache.getAll(Arrays.asList(\"A\", \"B\", \"C\"))\r\n  .thenAccept(dataObjectMap -> assertEquals(3, dataObjectMap.size()));\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .maximumSize(1)\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n\r\nassertEquals(0, cache.estimatedSize());\r\n```","```\r\ncache.get(\"A\");\r\n\r\nassertEquals(1, cache.estimatedSize());\r\n```","```\r\ncache.get(\"B\");\r\ncache.cleanUp();\r\n\r\nassertEquals(1, cache.estimatedSize());\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .maximumWeight(10)\r\n  .weigher((k,v) -> 5)\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n\r\nassertEquals(0, cache.estimatedSize());\r\n\r\ncache.get(\"A\");\r\nassertEquals(1, cache.estimatedSize());\r\n\r\ncache.get(\"B\");\r\nassertEquals(2, cache.estimatedSize());\r\n```","```\r\ncache.get(\"C\");\r\ncache.cleanUp();\r\n\r\nassertEquals(2, cache.estimatedSize());\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .expireAfterAccess(5, TimeUnit.MINUTES)\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\ncache = Caffeine.newBuilder()\r\n  .expireAfterWrite(10, TimeUnit.SECONDS)\r\n  .weakKeys()\r\n  .weakValues()\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\ncache = Caffeine.newBuilder().expireAfter(new Expiry<String, DataObject>() {\r\n    @Override\r\n    public long expireAfterCreate(\r\n      String key, DataObject value, long currentTime) {\r\n        return value.getData().length() * 1000;\r\n    }\r\n    @Override\r\n    public long expireAfterUpdate(\r\n      String key, DataObject value, long currentTime, long currentDuration) {\r\n        return currentDuration;\r\n    }\r\n    @Override\r\n    public long expireAfterRead(\r\n      String key, DataObject value, long currentTime, long currentDuration) {\r\n        return currentDuration;\r\n    }\r\n}).build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .expireAfterWrite(10, TimeUnit.SECONDS)\r\n  .weakKeys()\r\n  .weakValues()\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n\r\ncache = Caffeine.newBuilder()\r\n  .expireAfterWrite(10, TimeUnit.SECONDS)\r\n  .softValues()\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\nCaffeine.newBuilder()\r\n  .refreshAfterWrite(1, TimeUnit.MINUTES)\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\n```","```\r\nLoadingCache<String, DataObject> cache = Caffeine.newBuilder()\r\n  .maximumSize(100)\r\n  .recordStats()\r\n  .build(k -> DataObject.get(\"Data for \" + k));\r\ncache.get(\"A\");\r\ncache.get(\"A\");\r\n\r\nassertEquals(1, cache.stats().hitCount());\r\nassertEquals(1, cache.stats().missCount());\r\n```"]