["```\r\npublic class Word {\r\n    private String name;\r\n\r\n    public Word(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\nHashtable<Word, String> table = new Hashtable<>();\r\n```","```\r\nWord word = new Word(\"cat\");\r\ntable.put(word, \"an animal\");\r\n```","```\r\nString definition = table.get(word);\r\n```","```\r\ndefinition = table.remove(word);\r\n```","```\r\nindex(k)=k,\r\nwhere k is a key\r\n```","```\r\nint index = (hash & 0x7FFFFFFF) % tab.length;\r\n```","```\r\nWord word = new Word(\"cat\");\r\ntable.put(word, \"an animal\");\r\nString extracted = table.get(new Word(\"cat\"));\r\n```","```\r\npublic boolean equals(Object o) {\r\n    if (o == this)\r\n        return true;\r\n    if (!(o instanceof Word))\r\n        return false;\r\n\r\n    Word word = (Word) o;\r\n    return word.getName().equals(this.name);\r\n}\r\n```","```\r\npublic int hashCode() {\r\n    return name.hashCode();\r\n}\r\n```","```\r\nHashtable<Word, String> table = new Hashtable<Word, String>();\r\ntable.put(new Word(\"cat\"), \"an animal\");\r\ntable.put(new Word(\"dog\"), \"another animal\");\r\n```","```\r\nIterator<Word> it = table.keySet().iterator();\r\n```","```\r\ntable.remove(new Word(\"dog\"));\r\n```","```\r\nwhile (it.hasNext()) {\r\n    Word key = it.next();\r\n}\r\n```","```\r\njava.util.ConcurrentModificationException\r\n\tat java.util.Hashtable$Enumerator.next(Hashtable.java:1378)\r\n```","```\r\nHashtable<Word, String> table = new Hashtable<Word, String>();\r\ntable.put(new Word(\"1\"), \"one\");\r\ntable.put(new Word(\"2\"), \"two\");\r\n```","```\r\nEnumeration<Word> enumKey = table.keys();\r\n```","```\r\ntable.remove(new Word(\"1\"));\r\n```","```\r\nwhile (enumKey.hasMoreElements()) {\r\n    Word key = enumKey.nextElement();\r\n}\r\n```","```\r\nHashtable<Word, String> table = new Hashtable<Word, String>();\r\n    table.put(new Word(\"1\"), \"one\");\r\n    table.put(new Word(\"2\"), \"two\");\r\n    // ...\r\n    table.put(new Word(\"8\"), \"eight\");\r\n\r\n    Iterator<Map.Entry<Word, String>> it = table.entrySet().iterator();\r\n    while (it.hasNext()) {\r\n        Map.Entry<Word, String> entry = it.next();\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nfive\r\nfour\r\nthree\r\ntwo\r\none\r\neight\r\nseven\r\n```","```\r\nWord key = new Word(\"dog\");\r\nString definition;\r\n\r\nif (table.containsKey(key)) {\r\n     definition = table.get(key);\r\n} else {\r\n     definition = \"not found\";\r\n}\r\n```","```\r\ndefinition = table.getOrDefault(key, \"not found\");\r\n```","```\r\nif (!table.containsKey(new Word(\"cat\"))) {\r\n    table.put(new Word(\"cat\"), definition);\r\n}\r\n```","```\r\ntable.putIfAbsent(new Word(\"cat\"), definition);\r\n```","```\r\nif (table.get(new Word(\"cat\")).equals(\"an animal\")) {\r\n    table.remove(new Word(\"cat\"));\r\n}\r\n```","```\r\nboolean result = table.remove(new Word(\"cat\"), \"an animal\");\r\n```","```\r\nif (table.containsKey(new Word(\"cat\")) \r\n    && table.get(new Word(\"cat\")).equals(\"a small domesticated carnivorous mammal\")) {\r\n    table.put(new Word(\"cat\"), definition);\r\n}\r\n```","```\r\ntable.replace(new Word(\"cat\"), \"a small domesticated carnivorous mammal\", definition);\r\n```","```\r\ntable.computeIfAbsent(new Word(\"cat\"), key -> \"an animal\");\r\n```","```\r\nif (!table.containsKey(cat)) {\r\n    String definition = \"an animal\"; // note that calculations take place inside if block\r\n    table.put(new Word(\"cat\"), definition);\r\n}\r\n```","```\r\ntable.computeIfPresent(cat, (key, value) -> key.getName() + \" - \" + value);\r\n```","```\r\nif (table.containsKey(cat)) {\r\n    String concatination=cat.getName() + \" - \" + table.get(cat);\r\n    table.put(cat, concatination);\r\n}\r\n```","```\r\nString[] animals = { \"cat\", \"dog\", \"dog\", \"cat\", \"bird\", \"mouse\", \"mouse\" };\r\n```","```\r\nHashtable<String, Integer> table = new Hashtable<String, Integer>();\r\n\r\nfor (String animal : animals) {\r\n    table.compute(animal, \r\n        (key, value) -> (value == null ? 1 : value + 1));\r\n}\r\n```","```\r\nassertThat(table.values(), hasItems(2, 2, 2, 1));\r\n```","```\r\nfor (String animal : animals) {\r\n    table.merge(animal, 1, (oldValue, value) -> (oldValue + value));\r\n}\r\n```","```\r\ntable.forEach((k, v) -> System.out.println(k.getName() + \" - \" + v)\r\n```","```\r\ntable.replaceAll((k, v) -> k.getName() + \" - \" + v);\r\n```"]