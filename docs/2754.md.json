["```\r\npublic class VariableHandlesUnitTest {\r\n    public int publicTestVariable = 1;\r\n    private int privateTestVariable = 1;\r\n    public int variableToSet = 1;\r\n    public int variableToCompareAndSet = 1;\r\n    public int variableToGetAndAdd = 0;\r\n    public byte variableToBitwiseOr = 0;\r\n}\r\n```","```\r\nprivate volatile V value;\r\nprivate static final VarHandle VALUE;\r\nstatic {\r\n    try {\r\n        MethodHandles.Lookup l = MethodHandles.lookup();\r\n        VALUE = l.findVarHandle(AtomicReference.class, \"value\", Object.class);\r\n    } catch (ReflectiveOperationException e) {\r\n        throw new ExceptionInInitializerError(e);\r\n    }\r\n}\r\n```","```\r\nVarHandle PUBLIC_TEST_VARIABLE = MethodHandles\r\n  .lookup()\r\n  .in(VariableHandlesUnitTest.class)\r\n  .findVarHandle(VariableHandlesUnitTest.class, \"publicTestVariable\", int.class);\r\n\r\nassertEquals(1, PUBLIC_TEST_VARIABLE.coordinateTypes().size());\r\nassertEquals(VariableHandlesUnitTest.class, PUBLIC_TEST_VARIABLE.coordinateTypes().get(0));\r\n```","```\r\nVarHandle PRIVATE_TEST_VARIABLE = MethodHandles\r\n  .privateLookupIn(VariableHandlesUnitTest.class, MethodHandles.lookup())\r\n  .findVarHandle(VariableHandlesUnitTest.class, \"privateTestVariable\", int.class);\r\n\r\nassertEquals(1, PRIVATE_TEST_VARIABLE.coordinateTypes().size());\r\nassertEquals(VariableHandlesUnitTest.class, PRIVATE_TEST_VARIABLE.coordinateTypes().get(0));\r\n```","```\r\nVarHandle arrayVarHandle = MethodHandles.arrayElementVarHandle(int[].class);\r\n\r\nassertEquals(2, arrayVarHandle.coordinateTypes().size());\r\nassertEquals(int[].class, arrayVarHandle.coordinateTypes().get(0));\r\n```","```\r\nassertEquals(1, (int) PUBLIC_TEST_VARIABLE.get(this));\r\n```","```\r\nVARIABLE_TO_SET.set(this, 15);\r\nassertEquals(15, (int) VARIABLE_TO_SET.get(this));\r\n```","```\r\nVARIABLE_TO_COMPARE_AND_SET.compareAndSet(this, 1, 100);\r\nassertEquals(100, (int) VARIABLE_TO_COMPARE_AND_SET.get(this));\r\n```","```\r\nint before = (int) VARIABLE_TO_GET_AND_ADD.getAndAdd(this, 200);\r\n\r\nassertEquals(0, before);\r\nassertEquals(200, (int) VARIABLE_TO_GET_AND_ADD.get(this));\r\n```","```\r\nbyte before = (byte) VARIABLE_TO_BITWISE_OR.getAndBitwiseOr(this, (byte) 127);\r\n\r\nassertEquals(0, before);\r\nassertEquals(127, (byte) VARIABLE_TO_BITWISE_OR.get(this));\r\n```"]