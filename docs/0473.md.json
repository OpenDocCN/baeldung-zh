["```\r\n<script src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n```","```\r\nlibraryDependencies += \"com.typesafe.akka\" %% \"akka-actor\" % akkaVersion\r\nlibraryDependencies += \"com.typesafe.akka\" %% \"akka-testkit\" % akkaVersion\r\n```","```\r\nlibraryDependencies += \"com.typesafe.akka\" %% \"akka-stream\" % akkaVersion\r\n```","```\r\nlibraryDependencies += \"com.typesafe.akka\" %% \"akka-http-jackson\" % akkaHttpVersion\r\nlibraryDependencies += \"com.typesafe.akka\" %% \"akka-http\" % akkaHttpVersion\r\n```","```\r\nprivate ActorSystem actorSystem;\r\nprivate Materializer materializer;\r\n\r\n@Inject\r\npublic HomeController(\r\n  ActorSystem actorSystem, Materializer materializer) {\r\n    this.actorSystem = actorSystem;\r\n    this.materializer = materializer;\r\n}\r\n```","```\r\npublic WebSocket socket() {\r\n    return WebSocket.Json\r\n      .acceptOrResult(this::createActorFlow);\r\n}\r\n```","```\r\nprivate CompletionStage<F.Either<Result, Flow<JsonNode, JsonNode, ?>>> \r\n  createActorFlow(Http.RequestHeader request) {\r\n    return CompletableFuture.completedFuture(\r\n      F.Either.Right(createFlowForActor()));\r\n}\r\n```","```\r\nprivate CompletionStage<F.Either<Result, Flow<JsonNode, JsonNode, ?>>> \r\n  createActorFlow2(Http.RequestHeader request) {\r\n    return CompletableFuture.completedFuture(\r\n      request.session()\r\n      .getOptional(\"username\")\r\n      .map(username -> \r\n        F.Either.<Result, Flow<JsonNode, JsonNode, ?>>Right(\r\n          createFlowForActor()))\r\n      .orElseGet(() -> F.Either.Left(forbidden())));\r\n}\r\n```","```\r\nprivate Flow<JsonNode, JsonNode, ?> createFlowForActor() {\r\n    return ActorFlow.actorRef(out -> Messenger.props(out), \r\n      actorSystem, materializer);\r\n}\r\n```","```\r\nGET  /                    controllers.HomeController.index(request: Request)\r\nGET  /chat                controllers.HomeController.socket\r\nGET  /chat/with/streams   controllers.HomeController.akkaStreamsSocket\r\nGET  /assets/*file        controllers.Assets.versioned(path=\"/public\", file: Asset)\r\n```","```\r\n@Override\r\npublic Receive createReceive() {\r\n    return receiveBuilder()\r\n      .match(JsonNode.class, this::onSendMessage)\r\n      .matchAny(o -> log.error(\"Received unknown message: {}\", o.getClass()))\r\n      .build();\r\n}\r\n```","```\r\nprivate void onSendMessage(JsonNode jsonNode) {\r\n    RequestDTO requestDTO = MessageConverter.jsonNodeToRequest(jsonNode);\r\n    String message = requestDTO.getMessage().toLowerCase();\r\n    //..\r\n    processMessage(requestDTO);\r\n}\r\n```","```\r\nprivate void processMessage(RequestDTO requestDTO) {\r\n    CompletionStage<HttpResponse> responseFuture = getRandomMessage();\r\n    responseFuture.thenCompose(this::consumeHttpResponse)\r\n      .thenAccept(messageDTO ->\r\n        out.tell(MessageConverter.messageToJsonNode(messageDTO), getSelf()));\r\n}\r\n```","```\r\nprivate CompletionStage<HttpResponse> getRandomMessage() {\r\n    int postId = ThreadLocalRandom.current().nextInt(0, 100);\r\n    return Http.get(getContext().getSystem())\r\n      .singleRequest(HttpRequest.create(\r\n        \"https://jsonplaceholder.typicode.com/posts/\" + postId));\r\n}\r\n```","```\r\nprivate CompletionStage<MessageDTO> consumeHttpResponse(\r\n  HttpResponse httpResponse) {\r\n    Materializer materializer = \r\n      Materializer.matFromSystem(getContext().getSystem());\r\n    return Jackson.unmarshaller(MessageDTO.class)\r\n      .unmarshal(httpResponse.entity(), materializer)\r\n      .thenApply(messageDTO -> {\r\n          log.info(\"Received message: {}\", messageDTO);\r\n          discardEntity(httpResponse, materializer);\r\n          return messageDTO;\r\n      });\r\n}\r\n```","```\r\npublic static MessageDTO jsonNodeToMessage(JsonNode jsonNode) {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    return mapper.convertValue(jsonNode, MessageDTO.class);\r\n}\r\n```","```\r\nprivate void discardEntity(\r\n  HttpResponse httpResponse, Materializer materializer) {\r\n    HttpMessage.DiscardedEntity discarded = \r\n      httpResponse.discardEntityBytes(materializer);\r\n    discarded.completionStage()\r\n      .whenComplete((done, ex) -> \r\n        log.info(\"Entity discarded completely!\"));\r\n}\r\n```","```\r\npublic Result index(Http.Request request) {\r\n    String url = routes.HomeController.socket()\r\n      .webSocketURL(request);\r\n    return ok(views.html.index.render(url));\r\n} \r\n```","```\r\n<div id=\"messageContent\"></div>F\r\n<form>\r\n    <textarea id=\"messageInput\"></textarea>\r\n    <button id=\"sendButton\">Send</button>\r\n</form>\r\n```","```\r\n@(url: String)\r\n```","```\r\nvar webSocket;\r\nvar messageInput;\r\n\r\nfunction init() {\r\n    initWebSocket();\r\n}\r\n\r\nfunction initWebSocket() {\r\n    webSocket = new WebSocket(\"@url\");\r\n    webSocket.onopen = onOpen;\r\n    webSocket.onclose = onClose;\r\n    webSocket.onmessage = onMessage;\r\n    webSocket.onerror = onError;\r\n}\r\n```","```\r\nfunction onOpen(evt) {\r\n    writeToScreen(\"CONNECTED\");\r\n}\r\n\r\nfunction onClose(evt) {\r\n    writeToScreen(\"DISCONNECTED\");\r\n}\r\n\r\nfunction onError(evt) {\r\n    writeToScreen(\"ERROR: \" + JSON.stringify(evt));\r\n}\r\n\r\nfunction onMessage(evt) {\r\n    var receivedData = JSON.parse(evt.data);\r\n    appendMessageToView(\"Server\", receivedData.body);\r\n}\r\n```","```\r\nfunction appendMessageToView(title, message) {\r\n    $(\"#messageContent\").append(\"<p>\" + title + \": \" + message + \"</p>\");\r\n}\r\n\r\nfunction writeToScreen(message) {\r\n    console.log(\"New message: \", message);\r\n}\r\n```","```\r\ncd websockets\r\nsbt run\r\n```","```\r\npublic WebSocket akkaStreamsSocket() {\r\n    return WebSocket.Json.accept(request -> {\r\n        Sink<JsonNode, ?> in = Sink.foreach(System.out::println);\r\n        MessageDTO messageDTO = \r\n          new MessageDTO(\"1\", \"1\", \"Title\", \"Test Body\");\r\n        Source<JsonNode, ?> out = Source.tick(\r\n          Duration.ofSeconds(2),\r\n          Duration.ofSeconds(2),\r\n          MessageConverter.messageToJsonNode(messageDTO)\r\n        );\r\n        return Flow.fromSinkAndSource(in, out);\r\n    });\r\n}\r\n```","```\r\nString url = routes.HomeController.akkaStreamsSocket().webSocketURL(request);\r\n```","```\r\n@Override\r\npublic void postStop() throws Exception {\r\n    log.info(\"Messenger actor stopped at {}\",\r\n      OffsetDateTime.now()\r\n      .format(DateTimeFormatter.ISO_OFFSET_DATE_TIME));\r\n}\r\n```","```\r\nprivate void onSendMessage(JsonNode jsonNode) {\r\n    RequestDTO requestDTO = MessageConverter.jsonNodeToRequest(jsonNode);\r\n    String message = requestDTO.getMessage().toLowerCase();\r\n    if(\"stop\".equals(message)) {\r\n        MessageDTO messageDTO = \r\n          createMessageDTO(\"1\", \"1\", \"Stop\", \"Stopping actor\");\r\n        out.tell(MessageConverter.messageToJsonNode(messageDTO), getSelf());\r\n        self().tell(PoisonPill.getInstance(), getSelf());\r\n    } else {\r\n        log.info(\"Actor received. {}\", requestDTO);\r\n        processMessage(requestDTO);\r\n    }\r\n}\r\n```","```\r\nplay.server.websocket.frame.maxLength = 64k\r\n```","```\r\nsbt -Dwebsocket.frame.maxLength=64k run\r\n```","```\r\nplay.server.http.idleTimeout = \"infinite\"\r\n```","```\r\nsbt -Dhttp.idleTimeout=infinite run\r\n```","```\r\nPlayKeys.devSettings += \"play.server.http.idleTimeout\" -> \"infinite\"\r\n```","```\r\nPlayKeys.devSettings += \"play.server.http.idleTimeout\" -> \"120 s\"\r\n```"]