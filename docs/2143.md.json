["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\r\n</dependency> \r\n```","```\r\npublic class Book {\r\n    private String title;\r\n    private String author;\r\n}\r\n```","```\r\n@FeignClient(value=\"simple-books-client\", url=\"${book.service.url}\")\r\npublic interface BooksClient {\r\n\r\n    @RequestMapping(\"/books\")\r\n    List<Book> getBooks();\r\n\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.tomakehurst</groupId>\r\n    <artifactId>wiremock</artifactId>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@TestConfiguration\r\npublic class WireMockConfig {\r\n\r\n    @Autowired\r\n    private WireMockServer wireMockServer;\r\n\r\n    @Bean(initMethod = \"start\", destroyMethod = \"stop\")\r\n    public WireMockServer mockBooksService() {\r\n        return new WireMockServer(9561);\r\n    }\r\n\r\n}\r\n```","```\r\nbook:\r\n  service:\r\n    url: http://localhost:9561\r\n```","```\r\n[\r\n  {\r\n    \"title\": \"Dune\",\r\n    \"author\": \"Frank Herbert\"\r\n  },\r\n  {\r\n    \"title\": \"Foundation\",\r\n    \"author\": \"Isaac Asimov\"\r\n  }\r\n]\r\n```","```\r\npublic class BookMocks {\r\n\r\n    public static void setupMockBooksResponse(WireMockServer mockService) throws IOException {\r\n        mockService.stubFor(WireMock.get(WireMock.urlEqualTo(\"/books\"))\r\n          .willReturn(WireMock.aResponse()\r\n            .withStatus(HttpStatus.OK.value())\r\n            .withHeader(\"Content-Type\", MediaType.APPLICATION_JSON_VALUE)\r\n            .withBody(\r\n              copyToString(\r\n                BookMocks.class.getClassLoader().getResourceAsStream(\"payload/get-books-response.json\"),\r\n                defaultCharset()))));\r\n    }\r\n\r\n}\r\n```","```\r\n@SpringBootTest\r\n@ActiveProfiles(\"test\")\r\n@EnableConfigurationProperties\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(classes = { WireMockConfig.class })\r\nclass BooksClientIntegrationTest {\r\n\r\n    @Autowired\r\n    private WireMockServer mockBooksService;\r\n\r\n    @Autowired\r\n    private BooksClient booksClient;\r\n\r\n    @BeforeEach\r\n    void setUp() throws IOException {\r\n        BookMocks.setupMockBooksResponse(mockBooksService);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetBooks_thenBooksShouldBeReturned() {\r\n    assertFalse(booksClient.getBooks().isEmpty());\r\n}\r\n\r\n@Test\r\npublic void whenGetBooks_thenTheCorrectBooksShouldBeReturned() {\r\n    assertTrue(booksClient.getBooks()\r\n      .containsAll(asList(\r\n        new Book(\"Dune\", \"Frank Herbert\"),\r\n        new Book(\"Foundation\", \"Isaac Asimov\"))));\r\n}\r\n```","```\r\n@FeignClient(\"books-service\")\r\npublic interface BooksClient {\r\n...\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\r\n</dependency>\r\n```","```\r\nbooks-service:\r\n  ribbon:\r\n    listOfServers: http://localhost:9561\r\n```","```\r\n@TestConfiguration\r\n@ActiveProfiles(\"ribbon-test\")\r\npublic class RibbonTestConfig {\r\n\r\n    @Autowired\r\n    private WireMockServer mockBooksService;\r\n\r\n    @Autowired\r\n    private WireMockServer secondMockBooksService;\r\n\r\n    @Bean(initMethod = \"start\", destroyMethod = \"stop\")\r\n    public WireMockServer mockBooksService() {\r\n        return new WireMockServer(options().dynamicPort());\r\n    }\r\n\r\n    @Bean(name=\"secondMockBooksService\", initMethod = \"start\", destroyMethod = \"stop\")\r\n    public WireMockServer secondBooksMockService() {\r\n        return new WireMockServer(options().dynamicPort());\r\n    }\r\n\r\n    @Bean\r\n    public ServerList ribbonServerList() {\r\n        return new StaticServerList<>(\r\n          new Server(\"localhost\", mockBooksService.port()),\r\n          new Server(\"localhost\", secondMockBooksService.port()));\r\n    }\r\n\r\n}\r\n```","```\r\n@SpringBootTest\r\n@ActiveProfiles(\"ribbon-test\")\r\n@EnableConfigurationProperties\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(classes = { RibbonTestConfig.class })\r\nclass LoadBalancerBooksClientIntegrationTest {\r\n\r\n    @Autowired\r\n    private WireMockServer mockBooksService;\r\n\r\n    @Autowired\r\n    private WireMockServer secondMockBooksService;\r\n\r\n    @Autowired\r\n    private BooksClient booksClient;\r\n\r\n    @BeforeEach\r\n    void setUp() throws IOException {\r\n        setupMockBooksResponse(mockBooksService);\r\n        setupMockBooksResponse(secondMockBooksService);\r\n    }\r\n\r\n    @Test\r\n    void whenGetBooks_thenRequestsAreLoadBalanced() {\r\n        for (int k = 0; k < 10; k++) {\r\n            booksClient.getBooks();\r\n        }\r\n\r\n        mockBooksService.verify(\r\n          moreThan(0), getRequestedFor(WireMock.urlEqualTo(\"/books\")));\r\n        secondMockBooksService.verify(\r\n          moreThan(0), getRequestedFor(WireMock.urlEqualTo(\"/books\")));\r\n    }\r\n\r\n    @Test\r\n    public void whenGetBooks_thenTheCorrectBooksShouldBeReturned() {\r\n        assertTrue(booksClient.getBooks()\r\n          .containsAll(asList(\r\n            new Book(\"Dune\", \"Frank Herbert\"),\r\n            new Book(\"Foundation\", \"Isaac Asimov\"))));\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>testcontainers</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class EurekaContainerConfig {\r\n\r\n    public static class Initializer implements ApplicationContextInitializer {\r\n\r\n        public static GenericContainer eurekaServer = \r\n          new GenericContainer(\"springcloud/eureka\").withExposedPorts(8761);\r\n\r\n        @Override\r\n        public void initialize(@NotNull ConfigurableApplicationContext configurableApplicationContext) {\r\n\r\n            Startables.deepStart(Stream.of(eurekaServer)).join();\r\n\r\n            TestPropertyValues\r\n              .of(\"eureka.client.serviceUrl.defaultZone=http://localhost:\" \r\n                + eurekaServer.getFirstMappedPort().toString() \r\n                + \"/eureka\")\r\n              .applyTo(configurableApplicationContext);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@RestController\r\n@ActiveProfiles(\"eureka-test\")\r\npublic class MockBookServiceConfig {\r\n\r\n    @RequestMapping(\"/books\")\r\n    public List getBooks() {\r\n        return Collections.singletonList(new Book(\"Hitchhiker's Guide to the Galaxy\", \"Douglas Adams\"));\r\n    }\r\n}\r\n```","```\r\n@ActiveProfiles(\"eureka-test\")\r\n@EnableConfigurationProperties\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest(classes = Application.class, webEnvironment =  SpringBootTest.WebEnvironment.RANDOM_PORT)\r\n@ContextConfiguration(classes = { MockBookServiceConfig.class }, \r\n  initializers = { EurekaContainerConfig.Initializer.class })\r\nclass ServiceDiscoveryBooksClientIntegrationTest {\r\n\r\n    @Autowired\r\n    private BooksClient booksClient;\r\n\r\n    @Lazy\r\n    @Autowired\r\n    private EurekaClient eurekaClient;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        await().atMost(60, SECONDS).until(() -> eurekaClient.getApplications().size() > 0);\r\n    }\r\n\r\n    @Test\r\n    public void whenGetBooks_thenTheCorrectBooksAreReturned() {\r\n        List books = booksClient.getBooks();\r\n\r\n        assertEquals(1, books.size());\r\n        assertEquals(\r\n          new Book(\"Hitchhiker's guide to the galaxy\", \"Douglas Adams\"), \r\n          books.stream().findFirst().get());\r\n    }\r\n\r\n}\r\n```"]