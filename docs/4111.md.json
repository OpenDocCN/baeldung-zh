["```\r\npublic class FileNotFoundExceptionTest {\r\n\r\n    private static final Logger LOG\r\n      = Logger.getLogger(FileNotFoundExceptionTest.class);\r\n    private String fileName = Double.toString(Math.random());\r\n\r\n    protected void readFailingFile() throws IOException {\r\n        BufferedReader rd = new BufferedReader(new FileReader(new File(fileName)));\r\n        rd.readLine();\r\n        // no need to close file\r\n    }\r\n\r\n    class BusinessException extends RuntimeException {\r\n        public BusinessException(String string, FileNotFoundException ex) {\r\n            super(string, ex);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void logError() throws IOException {\r\n    try {\r\n        readFailingFile();\r\n    } catch (FileNotFoundException ex) {\r\n        LOG.error(\"Optional file \" + fileName + \" was not found.\", ex);\r\n    }\r\n}\r\n```","```\r\n@Test(expected = BusinessException.class)\r\npublic void raiseBusinessSpecificException() throws IOException {\r\n    try {\r\n        readFailingFile();\r\n    } catch (FileNotFoundException ex) {\r\n        throw new BusinessException(\r\n          \"BusinessException: necessary file was not present.\", ex);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void createFile() throws IOException {\r\n    try {\r\n        readFailingFile();\r\n    } catch (FileNotFoundException ex) {\r\n        try {\r\n            new File(fileName).createNewFile();\r\n            readFailingFile();            \r\n        } catch (IOException ioe) {\r\n            throw new RuntimeException(\r\n              \"BusinessException: even creation is not possible.\", ioe);\r\n        }\r\n    }\r\n}\r\n```"]