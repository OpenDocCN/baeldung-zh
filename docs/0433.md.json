["```\r\npublic class User {\r\n\r\n    public User(String id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    private String id;\r\n\r\n    private String name;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public String getId() {\r\n        return id;\r\n    }\r\n}\r\n```","```\r\npublic class UserRepositoryWithNull {\r\n\r\n    private final List<User> dbUsers = Arrays.asList(new User(\"1\", \"John\"), new User(\"2\", \"Maria\"), new User(\"3\", \"Daniel\"));\r\n\r\n    public User findById(String id) {\r\n\r\n        for (User u : dbUsers) {\r\n            if (u.getId().equals(id)) {\r\n                return u;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonExistentUserId_whenSearchForUser_andNoNullCheck_thenThrowException() {\r\n\r\n    UserRepositoryWithNull userRepositoryWithNull = new UserRepositoryWithNull();\r\n    String nonExistentUserId = \"4\";\r\n\r\n    assertThrows(NullPointerException.class, () -> {\r\n        System.out.println(\"User name: \" + userRepositoryWithNull.findById(nonExistentUserId)\r\n          .getName());\r\n    });\r\n}\r\n```","```\r\npublic class UserRepositoryWithOptional {\r\n\r\n    private final List<User> dbUsers = Arrays.asList(new User(\"1\", \"John\"), new User(\"2\", \"Maria\"), new User(\"3\", \"Daniel\"));\r\n\r\n    public Optional<User> findById(String id) {\r\n\r\n        for (User u : dbUsers) {\r\n            if (u.getId().equals(id)) {\r\n                return Optional.of(u);\r\n            }\r\n        }\r\n\r\n        return Optional.empty();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonExistentUserId_whenSearchForUser_thenOptionalShouldBeTreatedProperly() {\r\n\r\n    UserRepositoryWithOptional userRepositoryWithOptional = new UserRepositoryWithOptional();\r\n    String nonExistentUserId = \"4\";\r\n\r\n    String userName = userRepositoryWithOptional.findById(nonExistentUserId)\r\n      .orElse(new User(\"0\", \"admin\"))\r\n      .getName();\r\n\r\n    assertEquals(\"admin\", userName);\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistentUserId_whenFoundUserWithNameStartingWithMInRepositoryUsingNull_thenNameShouldBeUpperCased() {\r\n\r\n    UserRepositoryWithNull userRepositoryWithNull = new UserRepositoryWithNull();\r\n\r\n    User user = userRepositoryWithNull.findById(\"2\");\r\n    String upperCasedName = \"\";\r\n\r\n    if (user != null) {\r\n        if (user.getName().startsWith(\"M\")) {\r\n            upperCasedName = user.getName().toUpperCase();\r\n        }\r\n    }\r\n\r\n    assertEquals(\"MARIA\", upperCasedName);\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistentUserId_whenFoundUserWithNameStartingWithMInRepositoryUsingOptional_thenNameShouldBeUpperCased() {\r\n\r\n    UserRepositoryWithOptional userRepositoryWithOptional = new UserRepositoryWithOptional();\r\n\r\n    String upperCasedName = userRepositoryWithOptional.findById(\"2\")\r\n      .filter(u -> u.getName().startsWith(\"M\"))\r\n      .map(u -> u.getName().toUpperCase())\r\n      .orElse(\"\");\r\n\r\n    assertEquals(\"MARIA\", upperCasedName);\r\n}\r\n```"]