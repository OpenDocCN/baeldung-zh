["```\r\n{\r\n  \"my\": 1,\r\n  \"name\": 1,\r\n  \"is\": 1,\r\n  \"hesam\": 1\r\n}\r\n```","```\r\nEvent\r\n```","```\r\nEvent Queue\r\n```","```\r\nEvent Handler\r\n```","```\r\nThread Pool\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-integration</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t<scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n\t<groupId>org.springframework.integration</groupId>\r\n\t<artifactId>spring-integration-test</artifactId>\r\n\t<scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@MessagingGateway\r\npublic interface IncomingGateway {\r\n    @Gateway(requestChannel = \"receiveTextChannel\", replyChannel = \"returnResponseChannel\")\r\n    public Map<String, Long> countWords(String input);\r\n}\r\n```","```\r\nincomingGateway.countWords(\"My name is Hesam\");\r\n```","```\r\n@Bean(\"receiveTextChannelThreadPool\")\r\nTaskExecutor receiveTextChannelThreadPool() {\r\n    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\r\n    executor.setCorePoolSize(1);\r\n    executor.setMaxPoolSize(5);\r\n    executor.setThreadNamePrefix(\"receive-text-channel-thread-pool\");\r\n    executor.initialize();\r\n    return executor;\r\n}\r\n```","```\r\n@Bean(name = \"receiveTextChannel\")\r\nMessageChannel getReceiveTextChannel() {\r\n    return MessageChannels.executor(\"receive-text\", receiveTextChannelThreadPool)\r\n      .get();\r\n}\r\n```","```\r\n@Bean\r\nIntegrationFlow receiveText() {\r\n    return IntegrationFlows.from(receiveTextChannel)\r\n      .channel(splitWordsChannel)\r\n      .get();\r\n}\r\n```","```\r\n@Bean\r\nIntegrationFlow splitWords() {\r\n    return IntegrationFlows.from(splitWordsChannel)\r\n      .transform(splitWordsFunction)\r\n      .channel(toLowerCaseChannel)\r\n      .get();\r\n}\r\n```","```\r\nfinal Function<String, String[]> splitWordsFunction = sentence -> sentence.split(\" \");\r\n```","```\r\n@Bean\r\nIntegrationFlow toLowerCase() {\r\n    return IntegrationFlows.from(toLowerCaseChannel)\r\n      .split()\r\n      .transform(toLowerCase)\r\n      .aggregate(aggregatorSpec -> aggregatorSpec.releaseStrategy(listSizeReached)\r\n        .outputProcessor(buildMessageWithListPayload))\r\n      .channel(countWordsChannel)\r\n      .get();\r\n}\r\n```","```\r\nfinal ReleaseStrategy listSizeReached = r -> r.size() == r.getSequenceSize();\r\n```","```\r\nfinal MessageGroupProcessor buildMessageWithListPayload = messageGroup ->\r\n  MessageBuilder.withPayload(messageGroup.streamMessages()\r\n      .map(Message::getPayload)\r\n      .toList())\r\n    .build();\r\n```","```\r\n@Bean\r\nIntegrationFlow countWords() {\r\n    return IntegrationFlows.from(countWordsChannel)\r\n      .transform(convertArrayListToCountMap)\r\n      .channel(returnResponseChannel)\r\n      .get();\r\n}\r\n```","```\r\nfinal Function<List<String>, Map<String, Long>> convertArrayListToCountMap = list -> list.stream()\r\n  .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\r\n```","```\r\npublic class SpringIntegrationSedaIntegrationTest {\r\n    @Autowired\r\n    TestGateway testGateway;\r\n\r\n    @Test\r\n    void givenTextWithCapitalAndSmallCaseAndWithoutDuplicateWords_whenCallingCountWordOnGateway_thenWordCountReturnedAsMap() {\r\n        Map<String, Long> actual = testGateway.countWords(\"My name is Hesam\");\r\n        Map<String, Long> expected = new HashMap<>();\r\n        expected.put(\"my\", 1L);\r\n        expected.put(\"name\", 1L);\r\n        expected.put(\"is\", 1L);\r\n        expected.put(\"hesam\", 1L);\r\n\r\n        assertEquals(expected, actual);\r\n    }\r\n}\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.apache.camel</groupId>\r\n        <artifactId>camel-core</artifactId>\r\n        <version>3.18.0</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.apache.camel</groupId>\r\n        <artifactId>camel-test-junit5</artifactId>\r\n        <version>3.18.0</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\nstatic final String receiveTextUri = \"seda:receiveText?concurrentConsumers=5\";\r\nstatic final String splitWordsUri = \"seda:splitWords?concurrentConsumers=5\";\r\nstatic final String toLowerCaseUri = \"seda:toLowerCase?concurrentConsumers=5\";\r\nstatic final String countWordsUri = \"seda:countWords?concurrentConsumers=5\";\r\nstatic final String returnResponse = \"mock:result\";\r\n```","```\r\npublic class WordCountRoute extends RouteBuilder {\r\n    @Override\r\n    public void configure() throws Exception {\r\n    }\r\n} \r\n```","```\r\nfrom(receiveTextUri).to(splitWordsUri);\r\n```","```\r\nfrom(splitWordsUri)\r\n  .transform(ExpressionBuilder.bodyExpression(s -> s.toString().split(\" \")))\r\n  .to(toLowerCaseUri);\r\n```","```\r\nfrom(toLowerCaseUri)\r\n  .split(body(), new ArrayListAggregationStrategy())\r\n  .transform(ExpressionBuilder.bodyExpression(body -> body.toString().toLowerCase()))\r\n  .end()\r\n  .to(countWordsUri);\r\n```","```\r\nclass ArrayListAggregationStrategy extends AbstractListAggregationStrategy<String> {\r\n    @Override\r\n    public String getValue(Exchange exchange) {\r\n        return exchange.getIn()\r\n          .getBody(String.class);\r\n    }\r\n}\r\n```","```\r\nfrom(countWordsUri)\r\n  .transform(ExpressionBuilder.bodyExpression(List.class, body -> body.stream()\r\n    .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))))\r\n  .to(returnResponse);\r\n```","```\r\npublic class ApacheCamelSedaIntegrationTest extends CamelTestSupport {\r\n    @Test\r\n    public void givenTextWithCapitalAndSmallCaseAndWithoutDuplicateWords_whenSendingTextToInputUri_thenWordCountReturnedAsMap()\r\n      throws InterruptedException {\r\n        Map<String, Long> expected = new HashMap<>();\r\n        expected.put(\"my\", 1L);\r\n        expected.put(\"name\", 1L);\r\n        expected.put(\"is\", 1L);\r\n        expected.put(\"hesam\", 1L);\r\n        getMockEndpoint(WordCountRoute.returnResponse).expectedBodiesReceived(expected);\r\n        template.sendBody(WordCountRoute.receiveTextUri, \"My name is Hesam\");\r\n\r\n        assertMockEndpointsSatisfied();\r\n    }\r\n\r\n    @Override\r\n    protected RoutesBuilder createRouteBuilder() throws Exception {\r\n        RoutesBuilder wordCountRoute = new WordCountRoute();\r\n        return wordCountRoute;\r\n    }\r\n}\r\n```"]