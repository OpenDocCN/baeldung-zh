["```\r\n<dependency>\r\n    <groupId>org.jboss.weld.se</groupId>\r\n    <artifactId>weld-se-core</artifactId>\r\n    <version>3.0.5.Final</version>\r\n</dependency>\r\n```","```\r\n@InterceptorBinding\r\n@Target( { METHOD, TYPE } )\r\n@Retention( RUNTIME )\r\npublic @interface Audited {\r\n}\r\n```","```\r\n@Audited\r\n@Interceptor\r\npublic class AuditedInterceptor {\r\n    public static boolean calledBefore = false;\r\n    public static boolean calledAfter = false;\r\n\r\n    @AroundInvoke\r\n    public Object auditMethod(InvocationContext ctx) throws Exception {\r\n        calledBefore = true;\r\n        Object result = ctx.proceed();\r\n        calledAfter = true;\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class SuperService {\r\n    @Audited\r\n    public String deliverService(String uid) {\r\n        return uid;\r\n    }\r\n}\r\n```","```\r\n<beans \r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\r\n      http://java.sun.com/xml/ns/javaee/beans_1_2.xsd\">\r\n    <interceptors>\r\n        <class>com.baeldung.interceptor.AuditedInterceptor</class>\r\n    </interceptors>\r\n</beans>\r\n```","```\r\npublic class TestInterceptor {\r\n    Weld weld;\r\n    WeldContainer container;\r\n\r\n    @Before\r\n    public void init() {\r\n        weld = new Weld();\r\n        container = weld.initialize();\r\n    }\r\n\r\n    @After\r\n    public void shutdown() {\r\n        weld.shutdown();\r\n    }\r\n\r\n    @Test\r\n    public void givenTheService_whenMethodAndInterceptorExecuted_thenOK() {\r\n        SuperService superService = container.select(SuperService.class).get();\r\n        String code = \"123456\";\r\n        superService.deliverService(code);\r\n\r\n        Assert.assertTrue(AuditedInterceptor.calledBefore);\r\n        Assert.assertTrue(AuditedInterceptor.calledAfter);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.2.8.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjweaver</artifactId>\r\n    <version>1.9.2</version>\r\n</dependency>\r\n```","```\r\n@Aspect\r\npublic class SpringTestAspect {\r\n    @Autowired\r\n    private List accumulator;\r\n\r\n    @Around(\"execution(* com.baeldung.spring.service.SpringSuperService.*(..))\")\r\n    public Object auditMethod(ProceedingJoinPoint jp) throws Throwable {\r\n        String methodName = jp.getSignature().getName();\r\n        accumulator.add(\"Call to \" + methodName);\r\n        Object obj = jp.proceed();\r\n        accumulator.add(\"Method called successfully: \" + methodName);\r\n        return obj;\r\n    }\r\n}\r\n```","```\r\npublic class SpringSuperService {\r\n    public String getInfoFromService(String code) {\r\n        return code;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@ContextConfiguration(classes = { AppConfig.class })\r\npublic class TestSpringInterceptor {\r\n    @Autowired\r\n    SpringSuperService springSuperService;\r\n\r\n    @Autowired\r\n    private List accumulator;\r\n\r\n    @Test\r\n    public void givenService_whenServiceAndAspectExecuted_thenOk() {\r\n        String code = \"123456\";\r\n        String result = springSuperService.getInfoFromService(code);\r\n\r\n        Assert.assertThat(accumulator.size(), is(2));\r\n        Assert.assertThat(accumulator.get(0), is(\"Call to getInfoFromService\"));\r\n        Assert.assertThat(accumulator.get(1), is(\"Method called successfully: getInfoFromService\"));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableAspectJAutoProxy\r\npublic class AppConfig {\r\n    @Bean\r\n    public SpringSuperService springSuperService() {\r\n        return new SpringSuperService();\r\n    }\r\n\r\n    @Bean\r\n    public SpringTestAspect springTestAspect() {\r\n        return new SpringTestAspect();\r\n    }\r\n\r\n    @Bean\r\n    public List getAccumulator() {\r\n        return new ArrayList();\r\n    }\r\n}\r\n```"]