["```\r\n<logger name=\"org.springframework.data.mongodb.core.MongoTemplate\" level=\"DEBUG\" />\r\n```","```\r\nlogging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG\r\n```","```\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        data:\r\n          mongodb:\r\n            core:\r\n              MongoTemplate: DEBUG \r\n```","```\r\n@Document(collection = \"book\")\r\npublic class Book {\r\n\r\n    @MongoId\r\n    private ObjectId id;\r\n    private String bookName;\r\n    private String authorName;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>de.flapdoodle.embed</groupId>\r\n    <artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n    <version>${embed.mongo.version}</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootTest\r\n@TestPropertySource(properties = { \"logging.level.org.springframework.data.mongodb.core.MongoTemplate=DEBUG\" })\r\npublic class LoggingUnitTest {\r\n\r\n    private static final String CONNECTION_STRING = \"mongodb://%s:%d\";\r\n\r\n    private MongodExecutable mongodExecutable;\r\n    private MongoTemplate mongoTemplate;\r\n\r\n    @AfterEach\r\n    void clean() {\r\n        mongodExecutable.stop();\r\n    }\r\n\r\n    @BeforeEach\r\n    void setup() throws Exception {\r\n        String ip = \"localhost\";\r\n        int port = 27017;\r\n\r\n        ImmutableMongodConfig mongodbConfig = MongodConfig.builder()\r\n          .version(Version.Main.PRODUCTION)\r\n          .net(new Net(ip, port, Network.localhostIsIPv6()))\r\n          .build();\r\n\r\n        MongodStarter starter = MongodStarter.getDefaultInstance();\r\n        mongodExecutable = starter.prepare(mongodbConfig);\r\n        mongodExecutable.start();\r\n        mongoTemplate = new MongoTemplate(MongoClients.create(String.format(CONNECTION_STRING, ip, port)), \"test\");\r\n    }\r\n    // tests\r\n} \r\n```","```\r\nBook book = new Book();\r\nbook.setBookName(\"Book\");\r\nbook.setAuthorName(\"Author\");\r\n\r\nmongoTemplate.insert(book); \r\n```","```\r\n[2022-03-20 17:42:47,093]-[main] DEBUG MongoTemplate - Inserting Document containing fields: [bookName, authorName, _class] in collection: book\r\n...\r\n[2022-03-20 17:42:47,144]-[main] DEBUG MongoTemplate - findOne using query: { \"id\" : { \"$oid\" : \"623759871ff6275fe96a5ecb\"}} fields: Document{{}} for class: class com.baeldung.mongodb.models.Book in collection: book\r\n[2022-03-20 17:42:47,149]-[main] DEBUG MongoTemplate - findOne using query: { \"_id\" : { \"$oid\" : \"623759871ff6275fe96a5ecb\"}} fields: {} in db.collection: test.book \r\n```","```\r\nBook book = new Book();\r\nbook.setBookName(\"Book\");\r\nbook.setAuthorName(\"Author\");\r\n\r\nmongoTemplate.insert(book);\r\n\r\nString authorNameUpdate = \"AuthorNameUpdate\";\r\n\r\nbook.setAuthorName(authorNameUpdate);\r\nmongoTemplate.updateFirst(query(where(\"bookName\").is(\"Book\")), update(\"authorName\", authorNameUpdate), Book.class); \r\n```","```\r\n[2022-03-20 17:48:31,759]-[main] DEBUG MongoTemplate - Calling update using query: { \"bookName\" : \"Book\"} and update: { \"$set\" : { \"authorName\" : \"AuthorNameUpdate\"}} in collection: book\r\n```","```\r\nBook book = new Book();\r\nbook.setBookName(\"Book\");\r\nbook.setAuthorName(\"Author\");\r\n\r\nBook book1 = new Book();\r\nbook1.setBookName(\"Book1\");\r\nbook1.setAuthorName(\"Author1\");\r\n\r\nmongoTemplate.insert(Arrays.asList(book, book1), Book.class);\r\n```","```\r\n[2022-03-20 17:52:00,564]-[main] DEBUG MongoTemplate - Inserting list of Documents containing 2 items\r\n```","```\r\nBook book = new Book();\r\nbook.setBookName(\"Book\");\r\nbook.setAuthorName(\"Author\");\r\n\r\nmongoTemplate.insert(book);\r\n\r\nmongoTemplate.remove(book); \r\n```","```\r\n[2022-03-20 17:56:42,151]-[main] DEBUG MongoTemplate - Remove using query: { \"_id\" : { \"$oid\" : \"62375cca2a2cba4db774d8c1\"}} in collection: book.\r\n```","```\r\npublic class GroupByAuthor {\r\n\r\n    @Id\r\n    private String authorName;\r\n    private int authCount;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nBook book = new Book();\r\nbook.setBookName(\"Book\");\r\nbook.setAuthorName(\"Author\");\r\n\r\nBook book1 = new Book();\r\nbook1.setBookName(\"Book1\");\r\nbook1.setAuthorName(\"Author\");\r\n\r\nBook book2 = new Book();\r\nbook2.setBookName(\"Book2\");\r\nbook2.setAuthorName(\"Author\");\r\n\r\nmongoTemplate.insert(Arrays.asList(book, book1, book2), Book.class);\r\n\r\nGroupOperation groupByAuthor = group(\"authorName\")\r\n  .count()\r\n  .as(\"authCount\");\r\n\r\nAggregation aggregation = newAggregation(groupByAuthor);\r\n\r\nAggregationResults<GroupByAuthor> aggregationResults = mongoTemplate.aggregate(aggregation, \"book\", GroupByAuthor.class);\r\n```","```\r\n[2022-03-20 17:58:51,237]-[main] DEBUG MongoTemplate - Executing aggregation: [{ \"$group\" : { \"_id\" : \"$authorName\", \"authCount\" : { \"$sum\" : 1}}}] in collection book\r\n```"]