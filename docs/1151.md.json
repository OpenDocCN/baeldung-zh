["```\r\n{\r\n  \"title\": \"Not Found\",\r\n  \"status\": 404\r\n}\r\n```","```\r\n{\r\n  \"title\": \"Service Unavailable\",\r\n  \"status\": 503,\r\n  \"detail\": \"Database not reachable\"\r\n}\r\n```","```\r\nProblem.builder()\r\n  .withType(URI.create(\"https://example.org/out-of-stock\"))\r\n  .withTitle(\"Out of Stock\")\r\n  .withStatus(BAD_REQUEST)\r\n  .withDetail(\"Item B00027Y5QG is no longer available\")\r\n  .with(\"product\", \"B00027Y5QG\")\r\n  .build();\r\n```","```\r\n<dependency>\r\n    <groupId>org.zalando</groupId>\r\n    <artifactId>problem-spring-web</artifactId>\r\n    <version>0.23.0</version>\r\n</dependency>\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.4.0</version> \r\n</dependency>\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.4.0</version>  \r\n</dependency>\r\n```","```\r\n@EnableAutoConfiguration(exclude = ErrorMvcAutoConfiguration.class)\r\n```","```\r\n@Bean\r\npublic ObjectMapper objectMapper() {\r\n    return new ObjectMapper().registerModules(\r\n      new ProblemModule(),\r\n      new ConstraintViolationProblemModule());\r\n} \r\n```","```\r\nspring.resources.add-mappings=false\r\nspring.mvc.throw-exception-if-no-handler-found=true\r\nspring.http.encoding.force=true\r\n```","```\r\n@ControllerAdvice\r\npublic class ExceptionHandler implements ProblemHandling {}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@Import(SecurityProblemSupport.class)\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private SecurityProblemSupport problemSupport;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        // Other security-related configuration\r\n        http.exceptionHandling()\r\n          .authenticationEntryPoint(problemSupport)\r\n          .accessDeniedHandler(problemSupport);\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class SecurityExceptionHandler implements SecurityAdviceTrait {}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/tasks\")\r\npublic class ProblemDemoController {\r\n\r\n    private static final Map<Long, Task> MY_TASKS;\r\n\r\n    static {\r\n        MY_TASKS = new HashMap<>();\r\n        MY_TASKS.put(1L, new Task(1L, \"My first task\"));\r\n        MY_TASKS.put(2L, new Task(2L, \"My second task\"));\r\n    }\r\n\r\n    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)\r\n    public List<Task> getTasks() {\r\n        return new ArrayList<>(MY_TASKS.values());\r\n    }\r\n\r\n    @GetMapping(value = \"/{id}\",\r\n      produces = MediaType.APPLICATION_JSON_VALUE)\r\n    public Task getTasks(@PathVariable(\"id\") Long taskId) {\r\n        if (MY_TASKS.containsKey(taskId)) {\r\n            return MY_TASKS.get(taskId);\r\n        } else {\r\n            throw new TaskNotFoundProblem(taskId);\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public void updateTask(@PathVariable(\"id\") Long id) {\r\n        throw new UnsupportedOperationException();\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public void deleteTask(@PathVariable(\"id\") Long id) {\r\n        throw new AccessDeniedException(\"You can't delete this task\");\r\n    }\r\n\r\n}\r\n```","```\r\nthrow new UnsupportedOperationException();\r\n```","```\r\n{\r\n    \"title\": \"Not Implemented\",\r\n    \"status\": 501\r\n}\r\n```","```\r\nthrow new AccessDeniedException(\"You can't delete this task\");\r\n```","```\r\n{\r\n    \"title\": \"Forbidden\",\r\n    \"status\": 403,\r\n    \"detail\": \"You can't delete this task\"\r\n}\r\n```","```\r\npublic class TaskNotFoundProblem extends AbstractThrowableProblem {\r\n\r\n    private static final URI TYPE\r\n      = URI.create(\"https://example.org/not-found\");\r\n\r\n    public TaskNotFoundProblem(Long taskId) {\r\n        super(\r\n          TYPE,\r\n          \"Not found\",\r\n          Status.NOT_FOUND,\r\n          String.format(\"Task '%s' not found\", taskId));\r\n    }\r\n\r\n}\r\n```","```\r\nif (MY_TASKS.containsKey(taskId)) {\r\n    return MY_TASKS.get(taskId);\r\n} else {\r\n    throw new TaskNotFoundProblem(taskId);\r\n}\r\n```","```\r\n{\r\n    \"type\": \"https://example.org/not-found\",\r\n    \"title\": \"Not found\",\r\n    \"status\": 404,\r\n    \"detail\": \"Task '3' not found\"\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper()\r\n  .registerModule(new ProblemModule().withStackTraces());\r\n```","```\r\n@ControllerAdvice\r\nclass ExceptionHandling implements ProblemHandling {\r\n\r\n    @Override\r\n    public boolean isCausalChainsEnabled() {\r\n        return true;\r\n    }\r\n\r\n}\r\n```","```\r\n{\r\n  \"title\": \"Internal Server Error\",\r\n  \"status\": 500,\r\n  \"detail\": \"Illegal State\",\r\n  \"stacktrace\": [\r\n    \"org.example.ExampleRestController\r\n      .newIllegalState(ExampleRestController.java:96)\",\r\n    \"org.example.ExampleRestController\r\n      .nestedThrowable(ExampleRestController.java:91)\"\r\n  ],\r\n  \"cause\": {\r\n    \"title\": \"Internal Server Error\",\r\n    \"status\": 500,\r\n    \"detail\": \"Illegal Argument\",\r\n    \"stacktrace\": [\r\n      \"org.example.ExampleRestController\r\n        .newIllegalArgument(ExampleRestController.java:100)\",\r\n      \"org.example.ExampleRestController\r\n        .nestedThrowable(ExampleRestController.java:88)\"\r\n    ],\r\n    \"cause\": {\r\n      // ....\r\n    }\r\n  }\r\n}\r\n```"]