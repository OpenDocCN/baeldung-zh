["```\r\n{\r\n   \"firstName\" : \"John\",\r\n   \"lastName\"  :\"Smith\",\r\n   \"age\" : 10,\r\n   \"address\" : {\r\n      \"streetName\" : \"Example Street\",\r\n      \"streetNumber\" : \"10A\",\r\n      \"postalCode\" : \"1QW34\",\r\n      \"city\" : \"Timisoara\",\r\n      \"country\" : \"Romania\"\r\n   }\r\n}\r\n```","```\r\npublic class UserDto {\r\n    private String firstName;\r\n    private String lastName;\r\n    private String age;\r\n    private AddressDto address;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class AddressDto {\r\n\r\n    private String streetName;\r\n    private String streetNumber;\r\n    private String postalCode;\r\n    private String city;\r\n    private String country;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/user\")\r\npublic class UserController {\r\n\r\n    @PostMapping(\"/process\")\r\n    public ResponseEntity process(@RequestBody UserDto user) {\r\n        /* business processing */\r\n        return ResponseEntity.ok()\r\n            .body(user.toString());\r\n    }\r\n}\r\n```","```\r\n@Target(ElementType.PARAMETER)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface JsonArg {\r\n    String value() default \"\";\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/user\")\r\npublic class UserController {\r\n    @PostMapping(\"/process/custom\")\r\n    public ResponseEntity process(@JsonArg(\"firstName\") String firstName,\r\n      @JsonArg(\"address.city\") String city) {\r\n        /* business processing */\r\n        return ResponseEntity.ok()\r\n            .body(String.format(\"{\\\"firstName\\\": %s, \\\"city\\\" : %s}\", firstName, city));\r\n    }\r\n}\r\n```","```\r\npublic class JsonArgumentResolver implements HandlerMethodArgumentResolver {\r\n\r\n    private static final String JSON_BODY_ATTRIBUTE = \"JSON_REQUEST_BODY\";\r\n\r\n    @Override\r\n    public boolean supportsParameter(MethodParameter parameter) {\r\n        return parameter.hasParameterAnnotation(JsonArg.class);\r\n    }\r\n\r\n    @Override\r\n    public Object resolveArgument(\r\n      MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest,\r\n      WebDataBinderFactory binderFactory) \r\n      throws Exception {\r\n        String body = getRequestBody(webRequest);\r\n        String jsonPath = Objects.requireNonNull(\r\n          Objects.requireNonNull(parameter.getParameterAnnotation(JsonArg.class)).value());\r\n        Class<?> parameterType = parameter.getParameterType();\r\n        return JsonPath.parse(body).read(jsonPath, parameterType);\r\n    }\r\n\r\n    private String getRequestBody(NativeWebRequest webRequest) {\r\n        HttpServletRequest servletRequest = Objects.requireNonNull(\r\n          webRequest.getNativeRequest(HttpServletRequest.class));\r\n        String jsonBody = (String) servletRequest.getAttribute(JSON_BODY_ATTRIBUTE);\r\n        if (jsonBody == null) {\r\n            try {\r\n                jsonBody = IOUtils.toString(servletRequest.getInputStream());\r\n                servletRequest.setAttribute(JSON_BODY_ATTRIBUTE, jsonBody);\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n        return jsonBody;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\r\n        JsonArgumentResolver jsonArgumentResolver = new JsonArgumentResolver();\r\n        argumentResolvers.add(jsonArgumentResolver);\r\n    }\r\n}\r\n```","```\r\n@PostMapping(\"/process/custompojo\")\r\npublic ResponseEntity process(\r\n  @JsonArg(\"firstName\") String firstName, @JsonArg(\"lastName\") String lastName,\r\n  @JsonArg(\"address\") AddressDto address) {\r\n    /* business processing */\r\n    return ResponseEntity.ok()\r\n      .body(String.format(\"{\\\"firstName\\\": %s, \\\"lastName\\\": %s, \\\"address\\\" : %s}\",\r\n        firstName, lastName, address));\r\n}\r\n```","```\r\n@Test\r\nvoid whenSendingAPostJSON_thenReturnFirstNameAndCity() throws Exception {\r\n\r\n    String jsonString = \"{\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"age\\\":10,\\\"address\\\":{\\\"streetName\\\":\\\"Example Street\\\",\\\"streetNumber\\\":\\\"10A\\\",\\\"postalCode\\\":\\\"1QW34\\\",\\\"city\\\":\\\"Timisoara\\\",\\\"country\\\":\\\"Romania\\\"}}\";\r\n\r\n    mockMvc.perform(post(\"/user/process/custom\").content(jsonString)\r\n      .contentType(MediaType.APPLICATION_JSON)\r\n      .accept(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$.firstName\").value(\"John\"))\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$.city\").value(\"Timisoara\"));\r\n}\r\n```","```\r\n@Test\r\nvoid whenSendingAPostJSON_thenReturnUserAndAddress() throws Exception {\r\n    String jsonString = \"{\\\"firstName\\\":\\\"John\\\",\\\"lastName\\\":\\\"Smith\\\",\\\"address\\\":{\\\"streetName\\\":\\\"Example Street\\\",\\\"streetNumber\\\":\\\"10A\\\",\\\"postalCode\\\":\\\"1QW34\\\",\\\"city\\\":\\\"Timisoara\\\",\\\"country\\\":\\\"Romania\\\"}}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    UserDto user = mapper.readValue(jsonString, UserDto.class);\r\n    AddressDto address = user.getAddress();\r\n\r\n    String mvcResult = mockMvc.perform(post(\"/user/process/custompojo\").content(jsonString)\r\n      .contentType(MediaType.APPLICATION_JSON)\r\n      .accept(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk())\r\n      .andReturn()\r\n      .getResponse()\r\n      .getContentAsString();\r\n\r\n    assertEquals(String.format(\"{\\\"firstName\\\": %s, \\\"lastName\\\": %s, \\\"address\\\" : %s}\",\r\n      user.getFirstName(), user.getLastName(), address), mvcResult);\r\n}\r\n```"]