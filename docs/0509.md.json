["```\r\npublic class CustomerOrder {\r\n    private int orderId;\r\n    private String paymentMethod;\r\n    private String address;\r\n    private List<OrderItem> orderItems;\r\n\r\n    public float calculateTotalPrice() {\r\n        return orderItems.stream().map(OrderItem::getTotalPrice)\r\n          .reduce(0F, Float::sum);\r\n    }\r\n}\r\n```","```\r\npublic class OrderItem {\r\n    private int productId;\r\n    private int quantity;\r\n    private float unitPrice;\r\n    private float unitWeight;\r\n}\r\n```","```\r\npublic class CustomerOrderService implements OrderService {\r\n    public static final String EVENT_ORDER_READY_FOR_SHIPMENT = \"OrderReadyForShipmentEvent\";\r\n\r\n    private CustomerOrderRepository orderRepository;\r\n    private EventBus eventBus;\r\n\r\n    @Override\r\n    public void placeOrder(CustomerOrder order) {\r\n        this.orderRepository.saveCustomerOrder(order);\r\n        Map<String, String> payload = new HashMap<>();\r\n        payload.put(\"order_id\", String.valueOf(order.getOrderId()));\r\n        ApplicationEvent event = new ApplicationEvent(payload) {\r\n            @Override\r\n            public String getType() {\r\n                return EVENT_ORDER_READY_FOR_SHIPMENT;\r\n            }\r\n        };\r\n        this.eventBus.publish(event);\r\n    }\r\n}\r\n```","```\r\npublic interface OrderService extends ApplicationService {\r\n    void placeOrder(CustomerOrder order);\r\n\r\n    void setOrderRepository(CustomerOrderRepository orderRepository);\r\n}\r\n```","```\r\npublic interface CustomerOrderRepository {\r\n    void saveCustomerOrder(CustomerOrder order);\r\n}\r\n```","```\r\npublic class ShippableOrder {\r\n    private int orderId;\r\n    private String address;\r\n    private List<PackageItem> packageItems;\r\n}\r\n```","```\r\npublic class Parcel {\r\n    private int orderId;\r\n    private String address;\r\n    private String trackingId;\r\n    private List<PackageItem> packageItems;\r\n\r\n    public float calculateTotalWeight() {\r\n        return packageItems.stream().map(PackageItem::getWeight)\r\n          .reduce(0F, Float::sum);\r\n    }\r\n\r\n    public boolean isTaxable() {\r\n        return calculateEstimatedValue() > 100;\r\n    }\r\n\r\n    public float calculateEstimatedValue() {\r\n        return packageItems.stream().map(PackageItem::getWeight)\r\n          .reduce(0F, Float::sum);\r\n    }\r\n}\r\n```","```\r\npublic class ParcelShippingService implements ShippingService {\r\n    public static final String EVENT_ORDER_READY_FOR_SHIPMENT = \"OrderReadyForShipmentEvent\";\r\n    private ShippingOrderRepository orderRepository;\r\n    private EventBus eventBus;\r\n    private Map<Integer, Parcel> shippedParcels = new HashMap<>();\r\n\r\n    @Override\r\n    public void shipOrder(int orderId) {\r\n        Optional<ShippableOrder> order = this.orderRepository.findShippableOrder(orderId);\r\n        order.ifPresent(completedOrder -> {\r\n            Parcel parcel = new Parcel(completedOrder.getOrderId(), completedOrder.getAddress(), \r\n              completedOrder.getPackageItems());\r\n            if (parcel.isTaxable()) {\r\n                // Calculate additional taxes\r\n            }\r\n            // Ship parcel\r\n            this.shippedParcels.put(completedOrder.getOrderId(), parcel);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void listenToOrderEvents() {\r\n        this.eventBus.subscribe(EVENT_ORDER_READY_FOR_SHIPMENT, new EventSubscriber() {\r\n            @Override\r\n            public <E extends ApplicationEvent> void onEvent(E event) {\r\n                shipOrder(Integer.parseInt(event.getPayloadValue(\"order_id\")));\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public Optional<Parcel> getParcelByOrderId(int orderId) {\r\n        return Optional.ofNullable(this.shippedParcels.get(orderId));\r\n    }\r\n}\r\n```","```\r\npublic interface EventBus {\r\n    <E extends ApplicationEvent> void publish(E event);\r\n\r\n    <E extends ApplicationEvent> void subscribe(String eventType, EventSubscriber subscriber);\r\n\r\n    <E extends ApplicationEvent> void unsubscribe(String eventType, EventSubscriber subscriber);\r\n}\r\n```","```\r\npublic interface ApplicationService {\r\n\r\n    default <E extends ApplicationEvent> void publishEvent(E event) {\r\n        EventBus eventBus = getEventBus();\r\n        if (eventBus != null) {\r\n            eventBus.publish(event);\r\n        }\r\n    }\r\n\r\n    default <E extends ApplicationEvent> void subscribe(String eventType, EventSubscriber subscriber) {\r\n        EventBus eventBus = getEventBus();\r\n        if (eventBus != null) {\r\n            eventBus.subscribe(eventType, subscriber);\r\n        }\r\n    }\r\n\r\n    default <E extends ApplicationEvent> void unsubscribe(String eventType, EventSubscriber subscriber) {\r\n        EventBus eventBus = getEventBus();\r\n        if (eventBus != null) {\r\n            eventBus.unsubscribe(eventType, subscriber);\r\n        }\r\n    }\r\n\r\n    EventBus getEventBus();\r\n\r\n    void setEventBus(EventBus eventBus);\r\n}\r\n```","```\r\nmodule com.baeldung.dddmodules.sharedkernel {\r\n    exports com.baeldung.dddmodules.sharedkernel.events;\r\n    exports com.baeldung.dddmodules.sharedkernel.service;\r\n}\r\n```","```\r\nmodule com.baeldung.dddmodules.ordercontext {\r\n    requires com.baeldung.dddmodules.sharedkernel;\r\n    exports com.baeldung.dddmodules.ordercontext.service;\r\n    exports com.baeldung.dddmodules.ordercontext.model;\r\n    exports com.baeldung.dddmodules.ordercontext.repository;\r\n    provides com.baeldung.dddmodules.ordercontext.service.OrderService\r\n      with com.baeldung.dddmodules.ordercontext.service.CustomerOrderService;\r\n}\r\n```","```\r\nmodule com.baeldung.dddmodules.shippingcontext {\r\n    requires com.baeldung.dddmodules.sharedkernel;\r\n    exports com.baeldung.dddmodules.shippingcontext.service;\r\n    exports com.baeldung.dddmodules.shippingcontext.model;\r\n    exports com.baeldung.dddmodules.shippingcontext.repository;\r\n    provides com.baeldung.dddmodules.shippingcontext.service.ShippingService\r\n      with com.baeldung.dddmodules.shippingcontext.service.ParcelShippingService;\r\n}\r\n```","```\r\npublic class SimpleEventBus implements EventBus {\r\n    private final Map<String, Set<EventSubscriber>> subscribers = new ConcurrentHashMap<>();\r\n\r\n    @Override\r\n    public <E extends ApplicationEvent> void publish(E event) {\r\n        if (subscribers.containsKey(event.getType())) {\r\n            subscribers.get(event.getType())\r\n              .forEach(subscriber -> subscriber.onEvent(event));\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public <E extends ApplicationEvent> void subscribe(String eventType, EventSubscriber subscriber) {\r\n        Set<EventSubscriber> eventSubscribers = subscribers.get(eventType);\r\n        if (eventSubscribers == null) {\r\n            eventSubscribers = new CopyOnWriteArraySet<>();\r\n            subscribers.put(eventType, eventSubscribers);\r\n        }\r\n        eventSubscribers.add(subscriber);\r\n    }\r\n\r\n    @Override\r\n    public <E extends ApplicationEvent> void unsubscribe(String eventType, EventSubscriber subscriber) {\r\n        if (subscribers.containsKey(eventType)) {\r\n            subscribers.get(eventType).remove(subscriber);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic static class PersistenceOrder {\r\n    public int orderId;\r\n    public String paymentMethod;\r\n    public String address;\r\n    public List<OrderItem> orderItems;\r\n\r\n    public static class OrderItem {\r\n        public int productId;\r\n        public float unitPrice;\r\n        public float itemWeight;\r\n        public int quantity;\r\n    }\r\n}\r\n```","```\r\npublic class InMemoryOrderStore implements CustomerOrderRepository, ShippingOrderRepository {\r\n    private Map<Integer, PersistenceOrder> ordersDb = new HashMap<>();\r\n\r\n    @Override\r\n    public void saveCustomerOrder(CustomerOrder order) {\r\n        this.ordersDb.put(order.getOrderId(), new PersistenceOrder(order.getOrderId(),\r\n          order.getPaymentMethod(),\r\n          order.getAddress(),\r\n          order\r\n            .getOrderItems()\r\n            .stream()\r\n            .map(orderItem ->\r\n              new PersistenceOrder.OrderItem(orderItem.getProductId(),\r\n                orderItem.getQuantity(),\r\n                orderItem.getUnitWeight(),\r\n                orderItem.getUnitPrice()))\r\n            .collect(Collectors.toList())\r\n        ));\r\n    }\r\n\r\n    @Override\r\n    public Optional<ShippableOrder> findShippableOrder(int orderId) {\r\n        if (!this.ordersDb.containsKey(orderId)) return Optional.empty();\r\n        PersistenceOrder orderRecord = this.ordersDb.get(orderId);\r\n        return Optional.of(\r\n          new ShippableOrder(orderRecord.orderId, orderRecord.orderItems\r\n            .stream().map(orderItem -> new PackageItem(orderItem.productId,\r\n              orderItem.itemWeight,\r\n              orderItem.quantity * orderItem.unitPrice)\r\n            ).collect(Collectors.toList())));\r\n    }\r\n}\r\n```","```\r\nmodule com.baeldung.dddmodules.infrastructure {\r\n    requires transitive com.baeldung.dddmodules.sharedkernel;\r\n    requires transitive com.baeldung.dddmodules.ordercontext;\r\n    requires transitive com.baeldung.dddmodules.shippingcontext;\r\n    provides com.baeldung.dddmodules.sharedkernel.events.EventBus\r\n      with com.baeldung.dddmodules.infrastructure.events.SimpleEventBus;\r\n    provides com.baeldung.dddmodules.ordercontext.repository.CustomerOrderRepository\r\n      with com.baeldung.dddmodules.infrastructure.db.InMemoryOrderStore;\r\n    provides com.baeldung.dddmodules.shippingcontext.repository.ShippingOrderRepository\r\n      with com.baeldung.dddmodules.infrastructure.db.InMemoryOrderStore;\r\n}\r\n```","```\r\nmodule com.baeldung.dddmodules.mainapp {\r\n    uses com.baeldung.dddmodules.sharedkernel.events.EventBus;\r\n    uses com.baeldung.dddmodules.ordercontext.service.OrderService;\r\n    uses com.baeldung.dddmodules.ordercontext.repository.CustomerOrderRepository;\r\n    uses com.baeldung.dddmodules.shippingcontext.repository.ShippingOrderRepository;\r\n    uses com.baeldung.dddmodules.shippingcontext.service.ShippingService;\r\n    requires transitive com.baeldung.dddmodules.infrastructure;\r\n}\r\n```","```\r\nddd-modules (the root directory)\r\npom.xml\r\n|-- infrastructure\r\n    |-- src\r\n        |-- main\r\n            | -- java\r\n            module-info.java\r\n            |-- com.baeldung.dddmodules.infrastructure\r\n    pom.xml\r\n|-- mainapp\r\n    |-- src\r\n        |-- main\r\n            | -- java\r\n            module-info.java\r\n            |-- com.baeldung.dddmodules.mainapp\r\n    pom.xml\r\n|-- ordercontext\r\n    |-- src\r\n        |-- main\r\n            | -- java\r\n            module-info.java\r\n            |--com.baeldung.dddmodules.ordercontext\r\n    pom.xml\r\n|-- sharedkernel\r\n    |-- src\r\n        |-- main\r\n            | -- java\r\n            module-info.java\r\n            |-- com.baeldung.dddmodules.sharedkernel\r\n    pom.xml\r\n|-- shippingcontext\r\n    |-- src\r\n        |-- main\r\n            | -- java\r\n            module-info.java\r\n            |-- com.baeldung.dddmodules.shippingcontext\r\n    pom.xml\r\n```","```\r\npublic static void main(String args[]) {\r\n    Map<Class<?>, Object> container = createContainer();\r\n    OrderService orderService = (OrderService) container.get(OrderService.class);\r\n    ShippingService shippingService = (ShippingService) container.get(ShippingService.class);\r\n    shippingService.listenToOrderEvents();\r\n\r\n    CustomerOrder customerOrder = new CustomerOrder();\r\n    int orderId = 1;\r\n    customerOrder.setOrderId(orderId);\r\n    List<OrderItem> orderItems = new ArrayList<OrderItem>();\r\n    orderItems.add(new OrderItem(1, 2, 3, 1));\r\n    orderItems.add(new OrderItem(2, 1, 1, 1));\r\n    orderItems.add(new OrderItem(3, 4, 11, 21));\r\n    customerOrder.setOrderItems(orderItems);\r\n    customerOrder.setPaymentMethod(\"PayPal\");\r\n    customerOrder.setAddress(\"Full address here\");\r\n    orderService.placeOrder(customerOrder);\r\n\r\n    if (orderId == shippingService.getParcelByOrderId(orderId).get().getOrderId()) {\r\n        System.out.println(\"Order has been processed and shipped successfully\");\r\n    }\r\n}\r\n```","```\r\npublic static Map<Class<?>, Object> createContainer() {\r\n    EventBus eventBus = ServiceLoader.load(EventBus.class).findFirst().get();\r\n\r\n    CustomerOrderRepository customerOrderRepository = ServiceLoader.load(CustomerOrderRepository.class)\r\n      .findFirst().get();\r\n    ShippingOrderRepository shippingOrderRepository = ServiceLoader.load(ShippingOrderRepository.class)\r\n      .findFirst().get();\r\n\r\n    ShippingService shippingService = ServiceLoader.load(ShippingService.class).findFirst().get();\r\n    shippingService.setEventBus(eventBus);\r\n    shippingService.setOrderRepository(shippingOrderRepository);\r\n    OrderService orderService = ServiceLoader.load(OrderService.class).findFirst().get();\r\n    orderService.setEventBus(eventBus);\r\n    orderService.setOrderRepository(customerOrderRepository);\r\n\r\n    HashMap<Class<?>, Object> container = new HashMap<>();\r\n    container.put(OrderService.class, orderService);\r\n    container.put(ShippingService.class, shippingService);\r\n\r\n    return container;\r\n}\r\n```","```\r\npublic class InMemoryOrderStore implements CustomerOrderRepository, ShippingOrderRepository {\r\n    private volatile static InMemoryOrderStore instance = new InMemoryOrderStore();\r\n\r\n    public static InMemoryOrderStore provider() {\r\n        return instance;\r\n    }\r\n}\r\n```"]