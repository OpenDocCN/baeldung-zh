["```\r\npublic double divide(double a, double b) {\r\n    return a / b;\r\n}\r\n```","```\r\npublic double divide(double a, double b) {\r\n    if (b == 0) {\r\n        throw new ArithmeticException(\"Divider cannot be equal to zero!\");\r\n    }\r\n    return a / b;\r\n}\r\n```","```\r\npublic static Integer valueOf(String s) throws NumberFormatException \r\n```","```\r\npublic class DivideByZeroException extends RuntimeException {\r\n\r\n    public DivideByZeroException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```","```\r\npublic class DataAcessException extends RuntimeException {\r\n\r\n    public DataAcessException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n}\r\n```","```\r\npublic List<String> findAll() throws SQLException {\r\n    throw new SQLException();\r\n}\r\n```","```\r\npublic void wrappingException() {\r\n    try {\r\n        personRepository.findAll();\r\n    } catch (SQLException e) {\r\n        throw new DataAccessException(\"SQL Exception\", e);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid whenSQLExceptionIsThrown_thenShouldBeRethrownWithWrappedException() {\r\n    assertThrows(DataAccessException.class,\r\n      () -> simpleService.wrappingException());\r\n}\r\n```","```\r\ntry {\r\n    tryCatch.execute();\r\n} catch (ConnectionException | SocketException ex) {\r\n    System.out.println(\"IOException\");\r\n} catch (Exception ex) {\r\n    System.out.println(\"General exception\");\r\n}\r\n```","```\r\npublic static void execute() throws SocketException, ConnectionException, Exception\r\n```","```\r\nFile file = new File(\"not_existing_file.txt\");\r\ntry {\r\n    FileInputStream stream = new FileInputStream(file);\r\n} catch (FileNotFoundException e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\nprivate static void uncheckedException() throws FileNotFoundException {\r\n    File file = new File(\"not_existing_file.txt\");\r\n    FileInputStream stream = new FileInputStream(file);\r\n}\r\n```","```\r\npublic void runtimeNullPointerException() {\r\n    String a = null;\r\n    a.length();\r\n}\r\n```","```\r\n@Test\r\nvoid whenCalled_thenNullPointerExceptionIsThrown() {\r\n    assertThrows(NullPointerException.class,\r\n      () -> simpleService.runtimeNullPointerException());\r\n}\r\n```"]