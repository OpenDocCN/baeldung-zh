["```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>java-hamcrest</artifactId>\r\n    <version>2.0.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenVerifyingFileName_thenCorrect() {\r\n    File file = new File(\"src/test/resources/test1.in\");\r\n\r\n    assertThat(file, aFileNamed(equalToIgnoringCase(\"test1.in\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenVerifyingFilePath_thenCorrect() {\r\n    File file = new File(\"src/test/resources/test1.in\");\r\n\r\n    assertThat(file, aFileWithCanonicalPath(containsString(\"src/test/resources\")));\r\n    assertThat(file, aFileWithAbsolutePath(containsString(\"src/test/resources\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenVerifyingFileSize_thenCorrect() {\r\n    File file = new File(\"src/test/resources/test1.in\");\r\n\r\n    assertThat(file, aFileWithSize(11));\r\n    assertThat(file, aFileWithSize(greaterThan(1L)));;\r\n}\r\n```","```\r\n@Test\r\npublic void whenVerifyingFileIsReadableAndWritable_thenCorrect() {\r\n    File file = new File(\"src/test/resources/test1.in\");\r\n\r\n    assertThat(file, aReadableFile());\r\n    assertThat(file, aWritableFile());        \r\n}\r\n```","```\r\n@Test\r\npublic void whenVerifyingFileOrDirExist_thenCorrect() {\r\n    File file = new File(\"src/test/resources/test1.in\");\r\n    File dir = new File(\"src/test/resources\");\r\n\r\n    assertThat(file, anExistingFile());\r\n    assertThat(dir, anExistingDirectory());\r\n    assertThat(file, anExistingFileOrDirectory());\r\n    assertThat(dir, anExistingFileOrDirectory());\r\n}\r\n```"]