["```\r\npublic class ConsoleCallbackHandler implements CallbackHandler {\r\n\r\n    @Override\r\n    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {\r\n        Console console = System.console();\r\n        for (Callback callback : callbacks) {\r\n            if (callback instanceof NameCallback) {\r\n                NameCallback nameCallback = (NameCallback) callback;\r\n                nameCallback.setName(console.readLine(nameCallback.getPrompt()));\r\n            } else if (callback instanceof PasswordCallback) {\r\n                PasswordCallback passwordCallback = (PasswordCallback) callback;\r\n                passwordCallback.setPassword(console.readPassword(passwordCallback.getPrompt()));\r\n            } else {\r\n                throw new UnsupportedCallbackException(callback);\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\nNameCallback nameCallback = (NameCallback) callback;\r\nnameCallback.setName(console.readLine(nameCallback.getPrompt()));\r\n```","```\r\nPasswordCallback passwordCallback = (PasswordCallback) callback;\r\npasswordCallback.setPassword(console.readPassword(passwordCallback.getPrompt()));\r\n```","```\r\npublic class InMemoryLoginModule implements LoginModule {\r\n\r\n    private static final String USERNAME = \"testuser\";\r\n    private static final String PASSWORD = \"testpassword\";\r\n\r\n    private Subject subject;\r\n    private CallbackHandler callbackHandler;\r\n    private Map<String, ?> sharedState;\r\n    private Map<String, ?> options;\r\n\r\n    private boolean loginSucceeded = false;\r\n    private Principal userPrincipal;\r\n    //...\r\n}\r\n```","```\r\npublic void initialize(\r\n  Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) {\r\n    this.subject = subject;\r\n    this.callbackHandler = callbackHandler;\r\n    this.sharedState = sharedState;\r\n    this.options = options;\r\n}\r\n```","```\r\n@Override\r\npublic boolean login() throws LoginException {\r\n    NameCallback nameCallback = new NameCallback(\"username: \");\r\n    PasswordCallback passwordCallback = new PasswordCallback(\"password: \", false);\r\n    try {\r\n        callbackHandler.handle(new Callback[]{nameCallback, passwordCallback});\r\n        String username = nameCallback.getName();\r\n        String password = new String(passwordCallback.getPassword());\r\n        if (USERNAME.equals(username) && PASSWORD.equals(password)) {\r\n            loginSucceeded = true;\r\n        }\r\n    } catch (IOException | UnsupportedCallbackException e) {\r\n        //...\r\n    }\r\n    return loginSucceeded;\r\n}\r\n```","```\r\n@Override\r\npublic boolean commit() throws LoginException {\r\n    if (!loginSucceeded) {\r\n        return false;\r\n    }\r\n    userPrincipal = new UserPrincipal(username);\r\n    subject.getPrincipals().add(userPrincipal);\r\n    return true;\r\n}\r\n```","```\r\njaasApplication {\r\n   com.baeldung.jaas.loginmodule.InMemoryLoginModule required debug=true;\r\n};\r\n```","```\r\n$ java -Djava.security.auth.login.config=src/main/resources/jaas/jaas.login.config\r\n```","```\r\nlogin.config.url.1=file:${user.home}/.java.login.config\r\n```","```\r\nLoginContext(String name, Subject subject, CallbackHandler callbackHandler, Configuration config)\r\n```","```\r\nLoginContext(String name, CallbackHandler callbackHandler)\r\n```","```\r\nLoginContext loginContext = new LoginContext(\"jaasApplication\", new ConsoleCallbackHandler());\r\n```","```\r\nloginContext.login();\r\n```","```\r\nSubject subject = loginContext.getSubject();\r\n```","```\r\n$ mvn clean package\r\n$ java -Djava.security.auth.login.config=src/main/resources/jaas/jaas.login.config \\\r\n    -classpath target/core-java-security-2-0.1.0-SNAPSHOT.jar com.baeldung.jaas.JaasAuthentication\r\n```","```\r\nSecurityManager.checkPermission(Permission perm)\r\n```","```\r\npublic final class ResourcePermission extends BasicPermission {\r\n    public ResourcePermission(String name) {\r\n        super(name);\r\n    }\r\n}\r\n```","```\r\ngrant principal com.sun.security.auth.UserPrincipal testuser {\r\n    permission com.baeldung.jaas.ResourcePermission \"test_resource\"\r\n};\r\n```","```\r\npublic class ResourceAction implements PrivilegedAction {\r\n    @Override\r\n    public Object run() {\r\n        SecurityManager sm = System.getSecurityManager();\r\n        if (sm != null) {\r\n            sm.checkPermission(new ResourcePermission(\"test_resource\"));\r\n        }\r\n        System.out.println(\"I have access to test_resource !\");\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nSubject subject = loginContext.getSubject();\r\nPrivilegedAction privilegedAction = new ResourceAction();\r\nSubject.doAsPrivileged(subject, privilegedAction, null);\r\n```","```\r\n$ mvn clean package\r\n$ java -Djava.security.manager -Djava.security.policy=src/main/resources/jaas/jaas.policy \\\r\n    -Djava.security.auth.login.config=src/main/resources/jaas/jaas.login.config \\\r\n    -classpath target/core-java-security-2-0.1.0-SNAPSHOT.jar com.baeldung.jaas.JaasAuthorization\r\n```"]