["```\r\n@Entity\r\npublic class Book {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n    private String title;\r\n\r\n    // standard constructors\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface BookRepository extends CrudRepository<Book, Long> {}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = {Application.class})\r\npublic class DeleteFromRepositoryUnitTest {\r\n\r\n    @Autowired\r\n    private BookRepository repository;\r\n\r\n    Book book1;\r\n    Book book2;\r\n    List<Book> books;\r\n\r\n    // data initialization\r\n\r\n    @Test\r\n    public void whenDeleteByIdFromRepository_thenDeletingShouldBeSuccessful() {\r\n        repository.deleteById(book1.getId());\r\n        assertThat(repository.count()).isEqualTo(1);\r\n    }\r\n\r\n    @Test\r\n    public void whenDeleteAllFromRepository_thenRepositoryShouldBeEmpty() {\r\n        repository.deleteAll();\r\n        assertThat(repository.count()).isEqualTo(0);\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic interface BookRepository extends CrudRepository<Book, Long> {\r\n    long deleteByTitle(String title);\r\n}\r\n```","```\r\n@Test\r\n@Transactional\r\npublic void whenDeleteFromDerivedQuery_thenDeletingShouldBeSuccessful() {\r\n    long deletedRecords = repository.deleteByTitle(\"The Hobbit\");\r\n    assertThat(deletedRecords).isEqualTo(1);\r\n}\r\n```","```\r\n@Modifying\r\n@Query(\"delete from Book b where b.title=:title\")\r\nvoid deleteBooks(@Param(\"title\") String title);\r\n```","```\r\n@Test\r\n@Transactional\r\npublic void whenDeleteFromCustomQuery_thenDeletingShouldBeSuccessful() {\r\n    repository.deleteBooks(\"The Hobbit\");\r\n    assertThat(repository.count()).isEqualTo(1);\r\n}\r\n```","```\r\n@Entity\r\npublic class Category {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n    private String name;\r\n\r\n    @OneToMany(mappedBy = \"category\", cascade = CascadeType.ALL, orphanRemoval = true)\r\n    private List<Book> books;\r\n\r\n    // standard constructors\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface CategoryRepository extends CrudRepository<Category, Long> {}\r\n```","```\r\n@ManyToOne\r\nprivate Category category;\r\n```","```\r\n@Test\r\npublic void whenDeletingCategories_thenBooksShouldAlsoBeDeleted() {\r\n    categoryRepository.deleteAll();\r\n    assertThat(bookRepository.count()).isEqualTo(0);\r\n    assertThat(categoryRepository.count()).isEqualTo(0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletingBooks_thenCategoriesShouldAlsoBeDeleted() {\r\n    bookRepository.deleteAll();\r\n    assertThat(bookRepository.count()).isEqualTo(0);\r\n    assertThat(categoryRepository.count()).isEqualTo(2);\r\n}\r\n```"]