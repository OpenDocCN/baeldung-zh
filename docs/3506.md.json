["```\r\nThread thread1 = new Thread(() ->\r\n  System.out.println(\"Hello World from Runnable!\"));\r\nthread1.start();\r\n```","```\r\nThread thread2 = new Thread() {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Hello World from subclass!\");\r\n    }\r\n};\r\nthread2.start();\r\n```","```\r\nThread daemon = new Thread(()\r\n  -> System.out.println(\"Hello from daemon!\"));\r\ndaemon.setDaemon(true);\r\ndaemon.start();\r\n```","```\r\nsynchronized(object) {\r\n    // ...\r\n}\r\n```","```\r\nsynchronized void instanceMethod() {\r\n    // ...\r\n}\r\n```","```\r\nstatic synchronized void staticMethod() {\r\n    // ...\r\n}\r\n```","```\r\npublic class BlockingQueue<T> {\r\n\r\n    private List<T> queue = new LinkedList<T>();\r\n\r\n    private int limit = 10;\r\n\r\n    public synchronized void put(T item) {\r\n        while (queue.size() == limit) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        if (queue.isEmpty()) {\r\n            notifyAll();\r\n        }\r\n        queue.add(item);\r\n    }\r\n\r\n    public synchronized T take() throws InterruptedException {\r\n        while (queue.isEmpty()) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        if (queue.size() == limit) {\r\n            notifyAll();\r\n        }\r\n        return queue.remove(0);\r\n    }\r\n\r\n}\r\n```"]