["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security.extensions</groupId>\r\n    <artifactId>spring-security-saml2-core</artifactId>\r\n    <version>1.0.10.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<repository>\r\n    <id>Shibboleth</id>\r\n    <name>Shibboleth</name>\r\n    <url>https://build.shibboleth.net/nexus/content/repositories/releases/</url>\r\n</repository>\r\n```","```\r\ncompile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: \"2.5.1\" \r\ncompile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: \"2.5.1\"\r\ncompile group: 'org.springframework.security.extensions', name: 'spring-security-saml2-core', version: \"1.0.10.RELEASE\" \r\n```","```\r\n@Bean\r\npublic WebSSOProfileOptions defaultWebSSOProfileOptions() {\r\n    WebSSOProfileOptions webSSOProfileOptions = new WebSSOProfileOptions();\r\n    webSSOProfileOptions.setIncludeScoping(false);\r\n    return webSSOProfileOptions;\r\n}\r\n\r\n@Bean\r\npublic SAMLEntryPoint samlEntryPoint() {\r\n    SAMLEntryPoint samlEntryPoint = new SAMLEntryPoint();\r\n    samlEntryPoint.setDefaultProfileOptions(defaultWebSSOProfileOptions());\r\n    return samlEntryPoint;\r\n}\r\n```","```\r\n@Bean\r\npublic FilterChainProxy samlFilter() throws Exception {\r\n    List<SecurityFilterChain> chains = new ArrayList<>();\r\n    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/SSO/**\"),\r\n        samlWebSSOProcessingFilter()));\r\n    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/discovery/**\"),\r\n        samlDiscovery()));\r\n    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/login/**\"),\r\n        samlEntryPoint));\r\n    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/logout/**\"),\r\n        samlLogoutFilter));\r\n    chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/SingleLogout/**\"),\r\n        samlLogoutProcessingFilter));\r\n    return new FilterChainProxy(chains);\r\n}\r\n```","```\r\n@Bean\r\npublic SAMLProcessingFilter samlWebSSOProcessingFilter() throws Exception {\r\n    SAMLProcessingFilter samlWebSSOProcessingFilter = new SAMLProcessingFilter();\r\n    samlWebSSOProcessingFilter.setAuthenticationManager(authenticationManager());\r\n    samlWebSSOProcessingFilter.setAuthenticationSuccessHandler(successRedirectHandler());\r\n    samlWebSSOProcessingFilter.setAuthenticationFailureHandler(authenticationFailureHandler());\r\n    return samlWebSSOProcessingFilter;\r\n}\r\n\r\n@Bean\r\npublic SAMLDiscovery samlDiscovery() {\r\n    SAMLDiscovery idpDiscovery = new SAMLDiscovery();\r\n    return idpDiscovery;\r\n}\r\n\r\n@Bean\r\npublic SavedRequestAwareAuthenticationSuccessHandler successRedirectHandler() {\r\n    SavedRequestAwareAuthenticationSuccessHandler successRedirectHandler = new SavedRequestAwareAuthenticationSuccessHandler();\r\n    successRedirectHandler.setDefaultTargetUrl(\"/home\");\r\n    return successRedirectHandler;\r\n}\r\n\r\n@Bean\r\npublic SimpleUrlAuthenticationFailureHandler authenticationFailureHandler() {\r\n    SimpleUrlAuthenticationFailureHandler failureHandler = new SimpleUrlAuthenticationFailureHandler();\r\n    failureHandler.setUseForward(true);\r\n    failureHandler.setDefaultFailureUrl(\"/error\");\r\n    return failureHandler;\r\n}\r\n```","```\r\n@Bean\r\npublic SimpleUrlLogoutSuccessHandler successLogoutHandler() {\r\n    SimpleUrlLogoutSuccessHandler successLogoutHandler = new SimpleUrlLogoutSuccessHandler();\r\n    successLogoutHandler.setDefaultTargetUrl(\"/\");\r\n    return successLogoutHandler;\r\n}\r\n\r\n@Bean\r\npublic SecurityContextLogoutHandler logoutHandler() {\r\n    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();\r\n    logoutHandler.setInvalidateHttpSession(true);\r\n    logoutHandler.setClearAuthentication(true);\r\n    return logoutHandler;\r\n}\r\n\r\n@Bean\r\npublic SAMLLogoutProcessingFilter samlLogoutProcessingFilter() {\r\n    return new SAMLLogoutProcessingFilter(successLogoutHandler(), logoutHandler());\r\n}\r\n\r\n@Bean\r\npublic SAMLLogoutFilter samlLogoutFilter() {\r\n    return new SAMLLogoutFilter(successLogoutHandler(),\r\n        new LogoutHandler[] { logoutHandler() },\r\n        new LogoutHandler[] { logoutHandler() });\r\n}\r\n```","```\r\npublic MetadataGenerator metadataGenerator() {\r\n    MetadataGenerator metadataGenerator = new MetadataGenerator();\r\n    metadataGenerator.setEntityId(samlAudience);\r\n    metadataGenerator.setExtendedMetadata(extendedMetadata());\r\n    metadataGenerator.setIncludeDiscoveryExtension(false);\r\n    metadataGenerator.setKeyManager(keyManager());\r\n    return metadataGenerator;\r\n}\r\n\r\n@Bean\r\npublic MetadataGeneratorFilter metadataGeneratorFilter() {\r\n    return new MetadataGeneratorFilter(metadataGenerator());\r\n}\r\n\r\n@Bean\r\npublic ExtendedMetadata extendedMetadata() {\r\n    ExtendedMetadata extendedMetadata = new ExtendedMetadata();\r\n    extendedMetadata.setIdpDiscoveryEnabled(false);\r\n    return extendedMetadata;\r\n}\r\n```","```\r\n@Bean\r\npublic KeyManager keyManager() {\r\n    DefaultResourceLoader loader = new DefaultResourceLoader();\r\n    Resource storeFile = loader.getResource(samlKeystoreLocation);\r\n    Map<String, String> passwords = new HashMap<>();\r\n    passwords.put(samlKeystoreAlias, samlKeystorePassword);\r\n    return new JKSKeyManager(storeFile, samlKeystorePassword, passwords, samlKeystoreAlias);\r\n}\r\n```","```\r\nkeytool -genkeypair -alias baeldungspringsaml -keypass baeldungsamlokta -keystore saml-keystore.jks\r\n```","```\r\n@Bean\r\n@Qualifier(\"okta\")\r\npublic ExtendedMetadataDelegate oktaExtendedMetadataProvider() throws MetadataProviderException {\r\n    org.opensaml.util.resource.Resource resource = null\r\n    try {\r\n        resource = new ClasspathResource(\"/saml/metadata/sso.xml\");\r\n    } catch (ResourceException e) {\r\n        e.printStackTrace();\r\n    }\r\n    Timer timer = new Timer(\"saml-metadata\")\r\n    ResourceBackedMetadataProvider provider = new ResourceBackedMetadataProvider(timer,resource);\r\n    provider.setParserPool(parserPool());\r\n    return new ExtendedMetadataDelegate(provider, extendedMetadata());\r\n}\r\n\r\n@Bean\r\n@Qualifier(\"metadata\")\r\npublic CachingMetadataManager metadata() throws MetadataProviderException, ResourceException {\r\n    List<MetadataProvider> providers = new ArrayList<>(); \r\n    providers.add(oktaExtendedMetadataProvider());\r\n    CachingMetadataManager metadataManager = new CachingMetadataManager(providers);\r\n    metadataManager.setDefaultIDP(defaultIdp);\r\n    return metadataManager;\r\n}\r\n```","```\r\n@Bean(initMethod = \"initialize\")\r\npublic StaticBasicParserPool parserPool() {\r\n    return new StaticBasicParserPool();\r\n}\r\n\r\n@Bean(name = \"parserPoolHolder\")\r\npublic ParserPoolHolder parserPoolHolder() {\r\n    return new ParserPoolHolder();\r\n}\r\n```","```\r\n@Bean\r\npublic HTTPPostBinding httpPostBinding() {\r\n    return new HTTPPostBinding(parserPool(), VelocityFactory.getEngine());\r\n}\r\n\r\n@Bean\r\npublic HTTPRedirectDeflateBinding httpRedirectDeflateBinding() {\r\n    return new HTTPRedirectDeflateBinding(parserPool());\r\n}\r\n\r\n@Bean\r\npublic SAMLProcessorImpl processor() {\r\n    ArrayList<SAMLBinding> bindings = new ArrayList<>();\r\n    bindings.add(httpRedirectDeflateBinding());\r\n    bindings.add(httpPostBinding());\r\n    return new SAMLProcessorImpl(bindings);\r\n}\r\n```","```\r\npublic class CustomSAMLAuthenticationProvider extends SAMLAuthenticationProvider {\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getEntitlements(SAMLCredential credential, Object userDetail) {\r\n        if (userDetail instanceof ExpiringUsernameAuthenticationToken) {\r\n            List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\r\n            authorities.addAll(((ExpiringUsernameAuthenticationToken) userDetail).getAuthorities());\r\n            return authorities;\r\n        } else {\r\n            return Collections.emptyList();\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic SAMLAuthenticationProvider samlAuthenticationProvider() {\r\n    return new CustomSAMLAuthenticationProvider();\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.csrf().disable();\r\n\r\n    http.httpBasic().authenticationEntryPoint(samlEntryPoint);\r\n\r\n    http\r\n      .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class)\r\n      .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class)\r\n      .addFilterBefore(samlFilter(), CsrfFilter.class);\r\n\r\n    http\r\n      .authorizeRequests()\r\n      .antMatchers(\"/\").permitAll()\r\n      .anyRequest().authenticated();\r\n\r\n    http\r\n      .logout()\r\n      .addLogoutHandler((request, response, authentication) -> {\r\n          response.sendRedirect(\"/saml/logout\");\r\n      });\r\n}\r\n```","```\r\n@RequestMapping(\"/\")\r\npublic String index() {\r\n    return \"index\";\r\n}\r\n\r\n@GetMapping(value = \"/auth\")\r\npublic String handleSamlAuth() {\r\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n    if (auth != null) {\r\n        return \"redirect:/home\";\r\n    } else {\r\n        return \"/\";\r\n    }\r\n}\r\n```","```\r\n<!doctype html>\r\n<html>\r\n<head>\r\n<title>Baeldung Spring Security SAML</title>\r\n</head>\r\n<body>\r\n    <h3><Strong>Welcome to Baeldung Spring Security SAML</strong></h3>\r\n    <a th:href=\"@{/auth}\">Login</a>\r\n</body>\r\n</html>\r\n```","```\r\n@RequestMapping(\"/home\")\r\npublic String home(Model model) {\r\n    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\n    model.addAttribute(\"username\", authentication.getPrincipal());\r\n    return \"home\";\r\n}\r\n```","```\r\n<!doctype html>\r\n<html>\r\n<head>\r\n<title>Baeldung Spring Security SAML: Home</title>\r\n</head>\r\n<body>\r\n    <h3><Strong>Welcome!</strong><br/>You are successfully logged in!</h3>\r\n    <p>You are logged as <span th:text=\"${username}\">null</span>.</p>\r\n    <small>\r\n        <a th:href=\"@{/logout}\">Logout</a>\r\n    </small>\r\n</body>\r\n</html>\r\n```"]