["```\r\nObjectMapper mapper = new ObjectMapper();\r\n```","```\r\nJsonNode node = mapper.createObjectNode();\r\n```","```\r\nJsonNode node = JsonNodeFactory.instance.objectNode();\r\n```","```\r\nJsonNode node = mapper.valueToTree(fromValue);\r\n```","```\r\nJsonNode node = mapper.convertValue(fromValue, JsonNode.class);\r\n```","```\r\npublic class NodeBean {\r\n    private int id;\r\n    private String name;\r\n\r\n    public NodeBean() {\r\n    }\r\n\r\n    public NodeBean(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnObject_whenConvertingIntoNode_thenCorrect() {\r\n    NodeBean fromValue = new NodeBean(2016, \"baeldung.com\");\r\n\r\n    JsonNode node = mapper.valueToTree(fromValue);\r\n\r\n    assertEquals(2016, node.get(\"id\").intValue());\r\n    assertEquals(\"baeldung.com\", node.get(\"name\").textValue());\r\n}\r\n```","```\r\nmapper.writeValue(destination, node);\r\n```","```\r\nfinal String pathToTestFile = \"node_to_json_test.json\";\r\n\r\n@Test\r\npublic void givenANode_whenModifyingIt_thenCorrect() throws IOException {\r\n    String newString = \"{\\\"nick\\\": \\\"cowtowncoder\\\"}\";\r\n    JsonNode newNode = mapper.readTree(newString);\r\n\r\n    JsonNode rootNode = ExampleStructure.getExampleRoot();\r\n    ((ObjectNode) rootNode).set(\"name\", newNode);\r\n\r\n    assertFalse(rootNode.path(\"name\").path(\"nick\").isMissingNode());\r\n    assertEquals(\"cowtowncoder\", rootNode.path(\"name\").path(\"nick\").textValue());\r\n}\r\n```","```\r\nNodeBean toValue = mapper.treeToValue(node, NodeBean.class);\r\n```","```\r\nNodeBean toValue = mapper.convertValue(node, NodeBean.class)\r\n```","```\r\nJsonParser parser = mapper.treeAsTokens(node);\r\nNodeBean toValue = mapper.readValue(parser, NodeBean.class);\r\n```","```\r\n@Test\r\npublic void givenANode_whenConvertingIntoAnObject_thenCorrect()\r\n  throws JsonProcessingException {\r\n    JsonNode node = mapper.createObjectNode();\r\n    ((ObjectNode) node).put(\"id\", 2016);\r\n    ((ObjectNode) node).put(\"name\", \"baeldung.com\");\r\n\r\n    NodeBean toValue = mapper.treeToValue(node, NodeBean.class);\r\n\r\n    assertEquals(2016, toValue.getId());\r\n    assertEquals(\"baeldung.com\", toValue.getName());\r\n}\r\n```","```\r\n{\r\n    \"name\": \r\n        {\r\n            \"first\": \"Tatu\",\r\n            \"last\": \"Saloranta\"\r\n        },\r\n\r\n    \"title\": \"Jackson founder\",\r\n    \"company\": \"FasterXML\"\r\n}\r\n```","```\r\npublic class ExampleStructure {\r\n    private static ObjectMapper mapper = new ObjectMapper();\r\n\r\n    static JsonNode getExampleRoot() throws IOException {\r\n        InputStream exampleInput = \r\n          ExampleStructure.class.getClassLoader()\r\n          .getResourceAsStream(\"example.json\");\r\n\r\n        JsonNode rootNode = mapper.readTree(exampleInput);\r\n        return rootNode;\r\n    }\r\n}\r\n```","```\r\nJsonNode locatedNode = rootNode.path(\"name\").path(\"last\");\r\n```","```\r\nObjectNode newNode = ((ObjectNode) locatedNode).put(fieldName, value);\r\n```","```\r\n\"address\":\r\n{\r\n    \"city\": \"Seattle\",\r\n    \"state\": \"Washington\",\r\n    \"country\": \"United States\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenANode_whenAddingIntoATree_thenCorrect() throws IOException {\r\n    JsonNode rootNode = ExampleStructure.getExampleRoot();\r\n    ObjectNode addedNode = ((ObjectNode) rootNode).putObject(\"address\");\r\n    addedNode\r\n      .put(\"city\", \"Seattle\")\r\n      .put(\"state\", \"Washington\")\r\n      .put(\"country\", \"United States\");\r\n\r\n    assertFalse(rootNode.path(\"address\").isMissingNode());\r\n\r\n    assertEquals(\"Seattle\", rootNode.path(\"address\").path(\"city\").textValue());\r\n    assertEquals(\"Washington\", rootNode.path(\"address\").path(\"state\").textValue());\r\n    assertEquals(\r\n      \"United States\", rootNode.path(\"address\").path(\"country\").textValue();\r\n}\r\n```","```\r\nJsonNode locatedNode = locatedNode.set(fieldName, value);\r\n```","```\r\n@Test\r\npublic void givenANode_whenModifyingIt_thenCorrect() throws IOException {\r\n    String newString = \"{\\\"nick\\\": \\\"cowtowncoder\\\"}\";\r\n    JsonNode newNode = mapper.readTree(newString);\r\n\r\n    JsonNode rootNode = ExampleStructure.getExampleRoot();\r\n    ((ObjectNode) rootNode).set(\"name\", newNode);\r\n\r\n    assertFalse(rootNode.path(\"name\").path(\"nick\").isMissingNode());\r\n    assertEquals(\"cowtowncoder\", rootNode.path(\"name\").path(\"nick\").textValue());\r\n}\r\n```","```\r\nJsonNode removedNode = locatedNode.remove(fieldName);\r\n```","```\r\nObjectNode locatedNode = locatedNode.remove(fieldNames);\r\n```","```\r\n@Test\r\npublic void givenANode_whenRemovingFromATree_thenCorrect() throws IOException {\r\n    JsonNode rootNode = ExampleStructure.getExampleRoot();\r\n    ((ObjectNode) rootNode).remove(\"company\");\r\n\r\n    assertTrue(rootNode.path(\"company\").isMissingNode());\r\n}\r\n```","```\r\n{\r\n    \"name\": \r\n        {\r\n            \"first\": \"Tatu\",\r\n            \"last\": \"Saloranta\"\r\n        },\r\n\r\n    \"title\": \"Jackson founder\",\r\n    \"company\": \"FasterXML\",\r\n    \"pets\" : [\r\n        {\r\n            \"type\": \"dog\",\r\n            \"number\": 1\r\n        },\r\n        {\r\n            \"type\": \"fish\",\r\n            \"number\": 50\r\n        }\r\n    ]\r\n}\r\n```","```\r\nname: \r\n  first: Tatu\r\n  last: Saloranta\r\ntitle: Jackson founder\r\ncompany: FasterXML\r\npets: \r\n- type: dog\r\n  number: 1\r\n- type: fish\r\n  number: 50\r\n```","```\r\n@Test\r\npublic void givenANodeTree_whenIteratingSubNodes_thenWeFindExpected() throws IOException {\r\n    JsonNode rootNode = ExampleStructure.getExampleRoot();\r\n\r\n    String yaml = onTest.toYaml(rootNode);\r\n\r\n    assertEquals(expectedYaml, yaml); \r\n}\r\n\r\npublic String toYaml(JsonNode root) {\r\n    StringBuilder yaml = new StringBuilder(); \r\n    processNode(root, yaml, 0); \r\n    return yaml.toString(); }\r\n}\r\n```","```\r\nprivate void processNode(JsonNode jsonNode, StringBuilder yaml, int depth) {\r\n    if (jsonNode.isValueNode()) {\r\n        yaml.append(jsonNode.asText());\r\n    }\r\n    else if (jsonNode.isArray()) {\r\n        for (JsonNode arrayItem : jsonNode) {\r\n            appendNodeToYaml(arrayItem, yaml, depth, true);\r\n        }\r\n    }\r\n    else if (jsonNode.isObject()) {\r\n        appendNodeToYaml(jsonNode, yaml, depth, false);\r\n    }\r\n}\r\n```","```\r\nObject  {\"first\": \"Tatu\", \"last\": \"Saloranta\"}\r\nValue  \"Jackson Founder\"\r\nValue  \"FasterXML\"\r\nArray  [{\"type\": \"dog\", \"number\": 1},{\"type\": \"fish\", \"number\": 50}]\r\n```","```\r\nKey=\"name\", Value=Object  {\"first\": \"Tatu\", \"last\": \"Saloranta\"}\r\nKey=\"title\", Value=Value  \"Jackson Founder\"\r\nKey=\"company\", Value=Value  \"FasterXML\"\r\nKey=\"pets\", Value=Array  [{\"type\": \"dog\", \"number\": 1},{\"type\": \"fish\", \"number\": 50}]\r\n```","```\r\nprivate void appendNodeToYaml(\r\n  JsonNode node, StringBuilder yaml, int depth, boolean isArrayItem) {\r\n    Iterator<Entry<String, JsonNode>> fields = node.fields();\r\n    boolean isFirst = true;\r\n    while (fields.hasNext()) {\r\n        Entry<String, JsonNode> jsonField = fields.next();\r\n        addFieldNameToYaml(yaml, jsonField.getKey(), depth, isArrayItem && isFirst);\r\n        processNode(jsonField.getValue(), yaml, depth+1);\r\n        isFirst = false;\r\n    }\r\n\r\n}\r\n```","```\r\nprivate void addFieldNameToYaml(\r\n  StringBuilder yaml, String fieldName, int depth, boolean isFirstInArray) {\r\n    if (yaml.length()>0) {\r\n        yaml.append(\"\\n\");\r\n        int requiredDepth = (isFirstInArray) ? depth-1 : depth;\r\n        for(int i = 0; i < requiredDepth; i++) {\r\n            yaml.append(\"  \");\r\n        }\r\n        if (isFirstInArray) {\r\n            yaml.append(\"- \");\r\n        }\r\n    }\r\n    yaml.append(fieldName);\r\n    yaml.append(\": \");\r\n}\r\n```"]