["```\r\n<html>\r\n<body>\r\n<h1 th:text=\"#{label.form.title}\">form</h1>\r\n<form action=\"/\" th:object=\"${user}\" method=\"POST\" enctype=\"utf8\">\r\n    <div>\r\n        <label th:text=\"#{label.user.firstName}\">first</label>\r\n        <input th:field=\"*{firstName}\"/>\r\n        <p th:each=\"error: ${#fields.errors('firstName')}\" \r\n          th:text=\"${error}\">Validation error</p>\r\n    </div>\r\n    <div>\r\n        <label th:text=\"#{label.user.lastName}\">last</label>\r\n        <input th:field=\"*{lastName}\"/>\r\n        <p th:each=\"error : ${#fields.errors('lastName')}\" \r\n          th:text=\"${error}\">Validation error</p>\r\n    </div>\r\n    <div>\r\n        <label th:text=\"#{label.user.email}\">email</label>\r\n        <input type=\"email\" th:field=\"*{email}\"/>\r\n        <p th:each=\"error : ${#fields.errors('email')}\" \r\n          th:text=\"${error}\">Validation error</p>\r\n    </div>\r\n    <div>\r\n        <label th:text=\"#{label.user.password}\">password</label>\r\n        <input type=\"password\" th:field=\"*{password}\"/>\r\n        <p th:each=\"error : ${#fields.errors('password')}\" \r\n          th:text=\"${error}\">Validation error</p>\r\n    </div>\r\n    <div>\r\n        <label th:text=\"#{label.user.confirmPass}\">confirm</label>\r\n        <input type=\"password\" th:field=\"*{matchingPassword}\"/>\r\n    </div>\r\n    <button type=\"submit\" th:text=\"#{label.form.submit}\">submit</button>\r\n</form>\r\n\r\n<a th:href=\"@{/login.html}\" th:text=\"#{label.form.loginLink}\">login</a>\r\n</body>\r\n</html>\r\n```","```\r\npublic class UserDto {\r\n    @NotNull\r\n    @NotEmpty\r\n    private String firstName;\r\n\r\n    @NotNull\r\n    @NotEmpty\r\n    private String lastName;\r\n\r\n    @NotNull\r\n    @NotEmpty\r\n    private String password;\r\n    private String matchingPassword;\r\n\r\n    @NotNull\r\n    @NotEmpty\r\n    private String email;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@GetMapping(\"/user/registration\")\r\npublic String showRegistrationForm(WebRequest request, Model model) {\r\n    UserDto userDto = new UserDto();\r\n    model.addAttribute(\"user\", userDto);\r\n    return \"registration\";\r\n}\r\n```","```\r\npublic ModelAndView registerUserAccount(@ModelAttribute(\"user\") @Valid UserDto userDto,\r\n  HttpServletRequest request, Errors errors) {\r\n    //...\r\n}\r\n```","```\r\n@Target({TYPE, FIELD, ANNOTATION_TYPE})\r\n@Retention(RUNTIME)\r\n@Constraint(validatedBy = EmailValidator.class)\r\n@Documented\r\npublic @interface ValidEmail {\r\n    String message() default \"Invalid email\";\r\n    Class<?>[] groups() default {};\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class EmailValidator \r\n  implements ConstraintValidator<ValidEmail, String> {\r\n\r\n    private Pattern pattern;\r\n    private Matcher matcher;\r\n    private static final String EMAIL_PATTERN = \"^[_A-Za-z0-9-+]+\r\n        (.[_A-Za-z0-9-]+)*@\" + \"[A-Za-z0-9-]+(.[A-Za-z0-9]+)*\r\n        (.[A-Za-z]{2,})$\"; \r\n    @Override\r\n    public void initialize(ValidEmail constraintAnnotation) {\r\n    }\r\n    @Override\r\n    public boolean isValid(String email, ConstraintValidatorContext context){\r\n        return (validateEmail(email));\r\n    } \r\n    private boolean validateEmail(String email) {\r\n        pattern = Pattern.compile(EMAIL_PATTERN);\r\n        matcher = pattern.matcher(email);\r\n        return matcher.matches();\r\n    }\r\n}\r\n```","```\r\n@ValidEmail\r\n@NotNull\r\n@NotEmpty\r\nprivate String email;\r\n```","```\r\n@Target({TYPE,ANNOTATION_TYPE})\r\n@Retention(RUNTIME)\r\n@Constraint(validatedBy = PasswordMatchesValidator.class)\r\n@Documented\r\npublic @interface PasswordMatches {\r\n    String message() default \"Passwords don't match\";\r\n    Class<?>[] groups() default {};\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class PasswordMatchesValidator\r\n  implements ConstraintValidator<PasswordMatches, Object> {\r\n\r\n    @Override\r\n    public void initialize(PasswordMatches constraintAnnotation) {\r\n    }\r\n    @Override\r\n    public boolean isValid(Object obj, ConstraintValidatorContext context){\r\n        UserDto user = (UserDto) obj;\r\n        return user.getPassword().equals(user.getMatchingPassword());\r\n    }\r\n}\r\n```","```\r\n@PasswordMatches\r\npublic class UserDto {\r\n    //...\r\n}\r\n```","```\r\n@PostMapping(\"/user/registration\")\r\npublic ModelAndView registerUserAccount(\r\n  @ModelAttribute(\"user\") @Valid UserDto userDto,\r\n  HttpServletRequest request,\r\n  Errors errors) {\r\n\r\n    try {\r\n        User registered = userService.registerNewUserAccount(userDto);\r\n    } catch (UserAlreadyExistException uaeEx) {\r\n        mav.addObject(\"message\", \"An account for that username/email already exists.\");\r\n        return mav;\r\n    }\r\n\r\n    // rest of the implementation\r\n} \r\n```","```\r\n@Service\r\n@Transactional\r\npublic class UserService implements IUserService {\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    @Override\r\n    public User registerNewUserAccount(UserDto userDto) throws UserAlreadyExistException {\r\n        if (emailExists(userDto.getEmail())) {\r\n            throw new UserAlreadyExistException(\"There is an account with that email address: \"\r\n              + userDto.getEmail());\r\n        }\r\n\r\n        // the rest of the registration operation\r\n    }\r\n    private boolean emailExists(String email) {\r\n        return userRepository.findByEmail(email) != null;\r\n    }\r\n}\r\n```","```\r\n@PostMapping(\"/user/registration\")\r\npublic ModelAndView registerUserAccount(\r\n  @ModelAttribute(\"user\") @Valid UserDto userDto,\r\n  HttpServletRequest request,\r\n  Errors errors) {\r\n\r\n    try {\r\n        User registered = userService.registerNewUserAccount(userDto);\r\n    } catch (UserAlreadyExistException uaeEx) {\r\n        mav.addObject(\"message\", \"An account for that username/email already exists.\");\r\n        return mav;\r\n    }\r\n\r\n    return new ModelAndView(\"successRegister\", \"user\", userDto);\r\n} \r\n```","```\r\npublic interface IUserService {\r\n    User registerNewUserAccount(UserDto userDto);\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class UserService implements IUserService {\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    @Override\r\n    public User registerNewUserAccount(UserDto userDto) throws UserAlreadyExistException {\r\n        if (emailExists(userDto.getEmail())) {\r\n            throw new UserAlreadyExistException(\"There is an account with that email address: \"\r\n              + userDto.getEmail());\r\n        }\r\n\r\n        User user = new User();\r\n        user.setFirstName(userDto.getFirstName());\r\n        user.setLastName(userDto.getLastName());\r\n        user.setPassword(userDto.getPassword());\r\n        user.setEmail(userDto.getEmail());\r\n        user.setRoles(Arrays.asList(\"ROLE_USER\"));\r\n\r\n        return repository.save(user);\r\n    }\r\n\r\n    private boolean emailExists(String email) {\r\n        return userRepository.findByEmail(email) != null;\r\n    }\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\r\n        User user = userRepository.findByEmail(email);\r\n        if (user == null) {\r\n            throw new UsernameNotFoundException(\"No user found with username: \" + email);\r\n        }\r\n        boolean enabled = true;\r\n        boolean accountNonExpired = true;\r\n        boolean credentialsNonExpired = true;\r\n        boolean accountNonLocked = true;\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n          user.getEmail(), user.getPassword().toLowerCase(), enabled, accountNonExpired,\r\n          credentialsNonExpired, accountNonLocked, getAuthorities(user.getRoles()));\r\n    }\r\n\r\n    private static List<GrantedAuthority> getAuthorities (List<String> roles) {\r\n        List<GrantedAuthority> authorities = new ArrayList<>();\r\n        for (String role : roles) {\r\n            authorities.add(new SimpleGrantedAuthority(role));\r\n        }\r\n        return authorities;\r\n    }\r\n}\r\n```","```\r\n<authentication-manager>\r\n    <authentication-provider user-service-ref=\"userDetailsService\" />\r\n</authentication-manager>\r\n\r\n<beans:bean id=\"userDetailsService\" class=\"com.baeldung.security.MyUserDetailsService\" />\r\n```","```\r\n@Autowired\r\nprivate MyUserDetailsService userDetailsService;\r\n\r\n@Override\r\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n    auth.userDetailsService(userDetailsService);\r\n}\r\n```"]