["```\r\npublic interface Function<T, R> { â€¦ }\r\n```","```\r\nMap<String, Integer> nameMap = new HashMap<>();\r\nInteger value = nameMap.computeIfAbsent(\"John\", s -> s.length());\r\n```","```\r\nInteger value = nameMap.computeIfAbsent(\"John\", String::length);\r\n```","```\r\nFunction<Integer, String> intToString = Object::toString;\r\nFunction<String, String> quote = s -> \"'\" + s + \"'\";\r\n\r\nFunction<Integer, String> quoteIntToString = quote.compose(intToString);\r\n\r\nassertEquals(\"'5'\", quoteIntToString.apply(5));\r\n```","```\r\n@FunctionalInterface\r\npublic interface ShortToByteFunction {\r\n\r\n    byte applyAsByte(short s);\r\n\r\n}\r\n```","```\r\npublic byte[] transformArray(short[] array, ShortToByteFunction function) {\r\n    byte[] transformedArray = new byte[array.length];\r\n    for (int i = 0; i < array.length; i++) {\r\n        transformedArray[i] = function.applyAsByte(array[i]);\r\n    }\r\n    return transformedArray;\r\n}\r\n```","```\r\nshort[] array = {(short) 1, (short) 2, (short) 3};\r\nbyte[] transformedArray = transformArray(array, s -> (byte) (s * 2));\r\n\r\nbyte[] expectedArray = {(byte) 2, (byte) 4, (byte) 6};\r\nassertArrayEquals(expectedArray, transformedArray);\r\n```","```\r\nMap<String, Integer> salaries = new HashMap<>();\r\nsalaries.put(\"John\", 40000);\r\nsalaries.put(\"Freddy\", 30000);\r\nsalaries.put(\"Samuel\", 50000);\r\n\r\nsalaries.replaceAll((name, oldValue) -> \r\n  name.equals(\"Freddy\") ? oldValue : oldValue + 10000);\r\n```","```\r\npublic double squareLazy(Supplier<Double> lazyValue) {\r\n    return Math.pow(lazyValue.get(), 2);\r\n}\r\n```","```\r\nSupplier<Double> lazyValue = () -> {\r\n    Uninterruptibles.sleepUninterruptibly(1000, TimeUnit.MILLISECONDS);\r\n    return 9d;\r\n};\r\n\r\nDouble valueSquared = squareLazy(lazyValue);\r\n```","```\r\nint[] fibs = {0, 1};\r\nStream<Integer> fibonacci = Stream.generate(() -> {\r\n    int result = fibs[1];\r\n    int fib3 = fibs[0] + fibs[1];\r\n    fibs[0] = fibs[1];\r\n    fibs[1] = fib3;\r\n    return result;\r\n});\r\n```","```\r\nList<String> names = Arrays.asList(\"John\", \"Freddy\", \"Samuel\");\r\nnames.forEach(name -> System.out.println(\"Hello, \" + name));\r\n```","```\r\nMap<String, Integer> ages = new HashMap<>();\r\nages.put(\"John\", 25);\r\nages.put(\"Freddy\", 24);\r\nages.put(\"Samuel\", 30);\r\n\r\nages.forEach((name, age) -> System.out.println(name + \" is \" + age + \" years old\"));\r\n```","```\r\nList<String> names = Arrays.asList(\"Angela\", \"Aaron\", \"Bob\", \"Claire\", \"David\");\r\n\r\nList<String> namesWithA = names.stream()\r\n  .filter(name -> name.startsWith(\"A\"))\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<String> names = Arrays.asList(\"bob\", \"josh\", \"megan\");\r\n\r\nnames.replaceAll(name -> name.toUpperCase());\r\n```","```\r\nnames.replaceAll(String::toUpperCase);\r\n```","```\r\nList<Integer> values = Arrays.asList(3, 5, 8, 9, 12);\r\n\r\nint sum = values.stream()\r\n  .reduce(0, (i1, i2) -> i1 + i2); \r\n```","```\r\nop.apply(a, op.apply(b, c)) == op.apply(op.apply(a, b), c)\r\n```","```\r\nThread thread = new Thread(() -> System.out.println(\"Hello From Another Thread\"));\r\nthread.start();\r\n```"]