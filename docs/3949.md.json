["```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.ext</groupId>\r\n    <artifactId>jersey-mvc-freemarker</artifactId>\r\n    <version>2.27</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.containers</groupId>\r\n    <artifactId>jersey-container-grizzly2-servlet</artifactId>\r\n    <version>2.27</version>\r\n</dependency>\r\n```","```\r\npublic class ViewApplicationConfig extends ResourceConfig {    \r\n    public ViewApplicationConfig() {\r\n        packages(\"com.baeldung.jersey.server\");\r\n        property(FreemarkerMvcFeature.TEMPLATE_BASE_PATH, \"templates/freemarker\");\r\n        register(FreemarkerMvcFeature.class);;\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>exec-maven-plugin</artifactId>\r\n    <configuration>                \r\n        <mainClass>com.baeldung.jersey.server.http.EmbeddedHttpServer</mainClass>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\nmvn clean compile exec:java\r\n...\r\nJul 28, 2018 6:21:08 PM org.glassfish.grizzly.http.server.HttpServer start\r\nINFO: [HttpServer] Started.\r\nApplication started.\r\nTry out http://localhost:8082/fruit\r\nStop the application using CTRL+C \r\n```","```\r\n@Path(\"/fruit\")\r\npublic class FruitResource {\r\n    @GET\r\n    public Viewable get() {\r\n        return new Viewable(\"/index.ftl\", \"Fruit Index Page\");\r\n    }\r\n}\r\n```","```\r\n@GET\r\n@Template(name = \"/all.ftl\")\r\n@Path(\"/all\")\r\n@Produces(MediaType.TEXT_HTML)\r\npublic Map<String, Object> getAllFruit() {\r\n    List<Fruit> fruits = new ArrayList<>();\r\n    fruits.add(new Fruit(\"banana\", \"yellow\"));\r\n    fruits.add(new Fruit(\"apple\", \"red\"));\r\n    fruits.add(new Fruit(\"kiwi\", \"green\"));\r\n\r\n    Map<String, Object> model = new HashMap<>();\r\n    model.put(\"items\", fruits);\r\n    return model;\r\n}\r\n```","```\r\n@GET\r\n@ErrorTemplate(name = \"/error.ftl\")\r\n@Template(name = \"/named.ftl\")\r\n@Path(\"{name}\")\r\n@Produces(MediaType.TEXT_HTML)\r\npublic String getFruitByName(@PathParam(\"name\") String name) {\r\n    if (!\"banana\".equalsIgnoreCase(name)) {\r\n        throw new IllegalArgumentException(\"Fruit not found: \" + name);\r\n    }\r\n    return name;\r\n} \r\n```","```\r\n<body>\r\n    <h1>Error - ${model.message}!</h1>\r\n</body>\r\n```","```\r\n@Test\r\npublic void givenGetFruitByName_whenFruitUnknown_thenErrorTemplateInvoked() {\r\n    String response = target(\"/fruit/orange\").request()\r\n      .get(String.class);\r\n    assertThat(response, containsString(\"Error -  Fruit not found: orange!\"));\r\n} \r\n```"]