["```\r\n<dependency>\r\n    <groupId>net.serenity-bdd</groupId>\r\n    <artifactId>serenity-core</artifactId>\r\n    <version>1.4.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.serenity-bdd</groupId>\r\n    <artifactId>serenity-spring</artifactId>\r\n    <version>1.4.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>net.serenity-bdd.maven.plugins</groupId>\r\n    <artifactId>serenity-maven-plugin</artifactId>\r\n    <version>1.4.0</version>\r\n    <executions>\r\n        <execution>\r\n            <id>serenity-reports</id>\r\n            <phase>post-integration-test</phase>\r\n            <goals>\r\n                <goal>aggregate</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<util:properties id=\"props\">\r\n    <prop key=\"adder\">4</prop>\r\n</util:properties>\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\n@ContextConfiguration(locations = \"classpath:adder-beans.xml\")\r\npublic class AdderMethodRuleIntegrationTest {\r\n\r\n    @Rule \r\n    public SpringIntegrationMethodRule springMethodIntegration \r\n      = new SpringIntegrationMethodRule();\r\n\r\n    @Steps \r\n    private AdderSteps adderSteps;\r\n\r\n    @Value(\"#{props['adder']}\") \r\n    private int adder;\r\n\r\n    @Test\r\n    public void givenNumber_whenAdd_thenSummedUp() {\r\n        adderSteps.givenNumber();\r\n        adderSteps.whenAdd(adder);\r\n        adderSteps.thenSummedUp(); \r\n    }\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\n@ContextConfiguration(classes = AdderService.class)\r\npublic class AdderMethodDirtiesContextIntegrationTest {\r\n\r\n    @Steps private AdderServiceSteps adderServiceSteps;\r\n\r\n    @Rule public SpringIntegrationMethodRule springIntegration = new SpringIntegrationMethodRule();\r\n\r\n    @DirtiesContext\r\n    @Test\r\n    public void _0_givenNumber_whenAddAndAccumulate_thenSummedUp() {\r\n        adderServiceSteps.givenBaseAndAdder(randomInt(), randomInt());\r\n        adderServiceSteps.whenAccumulate();\r\n        adderServiceSteps.summedUp();\r\n\r\n        adderServiceSteps.whenAdd();\r\n        adderServiceSteps.sumWrong();\r\n    }\r\n\r\n    @Test\r\n    public void _1_givenNumber_whenAdd_thenSumWrong() {\r\n        adderServiceSteps.whenAdd();\r\n        adderServiceSteps.sumWrong();\r\n    }\r\n\r\n}\r\n```","```\r\n@ContextConfiguration(classes = AdderService.class)\r\npublic class AdderServiceSteps {\r\n\r\n    @Autowired\r\n    private AdderService adderService;\r\n\r\n    private int givenNumber;\r\n    private int base;\r\n    private int sum;\r\n\r\n    public void givenBaseAndAdder(int base, int adder) {\r\n        this.base = base;\r\n        adderService.baseNum(base);\r\n        this.givenNumber = adder;\r\n    }\r\n\r\n    public void whenAdd() {\r\n        sum = adderService.add(givenNumber);\r\n    }\r\n\r\n    public void summedUp() {\r\n        assertEquals(base + givenNumber, sum);\r\n    }\r\n\r\n    public void sumWrong() {\r\n        assertNotEquals(base + givenNumber, sum);\r\n    }\r\n\r\n    public void whenAccumulate() {\r\n        sum = adderService.accumulate(givenNumber);\r\n    }\r\n\r\n}\r\n```","```\r\n@Service\r\npublic class AdderService {\r\n\r\n    private int num;\r\n\r\n    public void baseNum(int base) {\r\n        this.num = base;\r\n    }\r\n\r\n    public int currentBase() {\r\n        return num;\r\n    }\r\n\r\n    public int add(int adder) {\r\n        return this.num + adder;\r\n    }\r\n\r\n    public int accumulate(int adder) {\r\n        return this.num += adder;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\n@ContextConfiguration(classes = AdderService.class)\r\npublic class AdderMethodDirtiesContextDependencyWorkaroundIntegrationTest {\r\n\r\n    private AdderConstructorDependencySteps adderSteps;\r\n\r\n    @Autowired private AdderService adderService;\r\n\r\n    @Before\r\n    public void init() {\r\n        adderSteps = new AdderConstructorDependencySteps(adderService);\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\npublic class AdderConstructorDependencySteps {\r\n\r\n    private AdderService adderService;\r\n\r\n    public AdderConstructorDependencySteps(AdderService adderService) {\r\n        this.adderService = adderService;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\n@ContextConfiguration(classes = AdderService.class)\r\npublic class AdderMethodDirtiesContextInitWorkaroundIntegrationTest {\r\n\r\n    @Steps private AdderServiceSteps adderServiceSteps;\r\n\r\n    @Before\r\n    public void init() {\r\n        adderServiceSteps.givenBaseAndAdder(randomInt(), randomInt());\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\n@ContextConfiguration(classes = AdderService.class)\r\npublic static abstract class Base {\r\n\r\n    @Steps AdderServiceSteps adderServiceSteps;\r\n\r\n    @ClassRule public static SpringIntegrationClassRule springIntegrationClassRule = new SpringIntegrationClassRule();\r\n\r\n    void whenAccumulate_thenSummedUp() {\r\n        adderServiceSteps.whenAccumulate();\r\n        adderServiceSteps.summedUp();\r\n    }\r\n\r\n    void whenAdd_thenSumWrong() {\r\n        adderServiceSteps.whenAdd();\r\n        adderServiceSteps.sumWrong();\r\n    }\r\n\r\n    void whenAdd_thenSummedUp() {\r\n        adderServiceSteps.whenAdd();\r\n        adderServiceSteps.summedUp();\r\n    }\r\n}\r\n```","```\r\n@DirtiesContext(classMode = AFTER_CLASS)\r\npublic static class DirtiesContextIntegrationTest extends Base {\r\n\r\n    @Test\r\n    public void givenNumber_whenAdd_thenSumWrong() {\r\n        super.whenAdd_thenSummedUp();\r\n        adderServiceSteps.givenBaseAndAdder(randomInt(), randomInt());\r\n        super.whenAccumulate_thenSummedUp();\r\n        super.whenAdd_thenSumWrong();\r\n    }\r\n}\r\n```","```\r\n@DirtiesContext(classMode = AFTER_CLASS)\r\npublic static class AnotherDirtiesContextIntegrationTest extends Base {\r\n\r\n    @Test\r\n    public void givenNumber_whenAdd_thenSumWrong() {\r\n        super.whenAdd_thenSummedUp();\r\n        adderServiceSteps.givenBaseAndAdder(randomInt(), randomInt());\r\n        super.whenAccumulate_thenSummedUp();\r\n        super.whenAdd_thenSumWrong();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringIntegrationSerenityRunner.class)\r\n@ContextConfiguration(locations = \"classpath:adder-beans.xml\")\r\npublic class AdderSpringSerenityRunnerIntegrationTest {\r\n\r\n    @Steps private AdderSteps adderSteps;\r\n\r\n    @Value(\"#{props['adder']}\") private int adder;\r\n\r\n    @Test\r\n    public void givenNumber_whenAdd_thenSummedUp() {\r\n        adderSteps.givenNumber();\r\n        adderSteps.whenAdd(adder);\r\n        adderSteps.thenSummedUp();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.rest-assured</groupId>\r\n    <artifactId>spring-mock-mvc</artifactId>\r\n    <version>3.0.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@RequestMapping(value = \"/adder\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\r\n@RestController\r\npublic class PlainAdderController {\r\n\r\n    private final int currentNumber = RandomUtils.nextInt();\r\n\r\n    @GetMapping(\"/current\")\r\n    public int currentNum() {\r\n        return currentNumber;\r\n    }\r\n\r\n    @PostMapping\r\n    public int add(@RequestParam int num) {\r\n        return currentNumber + num;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\npublic class AdderMockMvcIntegrationTest {\r\n\r\n    @Before\r\n    public void init() {\r\n        RestAssuredMockMvc.standaloneSetup(new PlainAdderController());\r\n    }\r\n\r\n    @Steps AdderRestSteps steps;\r\n\r\n    @Test\r\n    public void givenNumber_whenAdd_thenSummedUp() throws Exception {\r\n        steps.givenCurrentNumber();\r\n        steps.whenAddNumber(randomInt());\r\n        steps.thenSummedUp();\r\n    }\r\n}\r\n```","```\r\npublic class AdderRestSteps {\r\n\r\n    private MockMvcResponse mockMvcResponse;\r\n    private int currentNum;\r\n\r\n    @Step(\"get the current number\")\r\n    public void givenCurrentNumber() throws UnsupportedEncodingException {\r\n        currentNum = Integer.valueOf(given()\r\n          .when()\r\n          .get(\"/adder/current\")\r\n          .mvcResult()\r\n          .getResponse()\r\n          .getContentAsString());\r\n    }\r\n\r\n    @Step(\"adding {0}\")\r\n    public void whenAddNumber(int num) {\r\n        mockMvcResponse = given()\r\n          .queryParam(\"num\", num)\r\n          .when()\r\n          .post(\"/adder\");\r\n        currentNum += num;\r\n    }\r\n\r\n    @Step(\"got the sum\")\r\n    public void thenSummedUp() {\r\n        mockMvcResponse\r\n          .then()\r\n          .statusCode(200)\r\n          .body(equalTo(currentNum + \"\"));\r\n    }\r\n}\r\n```","```\r\nScenario: A user can submit a number to adder and get the sum\r\nGiven a number\r\nWhen I submit another number 5 to adder\r\nThen I get a sum of the numbers\r\n```","```\r\n@RequestMapping(value = \"/adder\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\r\n@RestController\r\npublic class AdderController {\r\n\r\n    private AdderService adderService;\r\n\r\n    public AdderController(AdderService adderService) {\r\n        this.adderService = adderService;\r\n    }\r\n\r\n    @GetMapping(\"/current\")\r\n    public int currentNum() {\r\n        return adderService.currentBase();\r\n    }\r\n\r\n    @PostMapping\r\n    public int add(@RequestParam int num) {\r\n        return adderService.add(num);\r\n    }\r\n}\r\n```","```\r\n@ContextConfiguration(classes = { \r\n  AdderController.class, AdderService.class })\r\npublic class AdderIntegrationTest extends SerenityStory {\r\n\r\n    @Autowired private AdderService adderService;\r\n\r\n    @BeforeStory\r\n    public void init() {\r\n        RestAssuredMockMvc.standaloneSetup(new AdderController(adderService));\r\n    }\r\n}\r\n```","```\r\npublic class AdderStory {\r\n\r\n    @Steps AdderRestSteps restSteps;\r\n\r\n    @Given(\"a number\")\r\n    public void givenANumber() throws Exception{\r\n        restSteps.givenCurrentNumber();\r\n    }\r\n\r\n    @When(\"I submit another number $num to adder\")\r\n    public void whenISubmitToAdderWithNumber(int num){\r\n        restSteps.whenAddNumber(num);\r\n    }\r\n\r\n    @Then(\"I get a sum of the numbers\")\r\n    public void thenIGetTheSum(){\r\n        restSteps.thenSummedUp();\r\n    }\r\n}\r\n```"]