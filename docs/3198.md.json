["```\r\npublic static <T> Mono<T> defer(Supplier<? extends Mono<? extends T>> supplier)\r\n```","```\r\nprivate Mono<String> sampleMsg(String str) {\r\n    log.debug(\"Call to Retrieve Sample Message!! --> {} at: {}\", str, System.currentTimeMillis());\r\n    return Mono.just(str);\r\n}\r\n```","```\r\npublic void whenUsingMonoJust_thenEagerEvaluation() throws InterruptedException {\r\n\r\n    Mono<String> msg = sampleMsg(\"Eager Publisher\");\r\n\r\n    log.debug(\"Intermediate Test Message....\");\r\n\r\n    StepVerifier.create(msg)\r\n      .expectNext(\"Eager Publisher\")\r\n      .verifyComplete();\r\n\r\n    Thread.sleep(5000);\r\n\r\n    StepVerifier.create(msg)\r\n      .expectNext(\"Eager Publisher\")\r\n      .verifyComplete();\r\n}\r\n```","```\r\n20:44:30.250 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --> Eager Publisher at: 1622819670247\r\n20:44:30.365 [main] DEBUG reactor.util.Loggers$LoggerFactory - Using Slf4j logging framework\r\n20:44:30.365 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\r\n```","```\r\npublic void whenUsingMonoDefer_thenLazyEvaluation() throws InterruptedException {\r\n\r\n    Mono<String> deferMsg = Mono.defer(() -> sampleMsg(\"Lazy Publisher\"));\r\n\r\n    log.debug(\"Intermediate Test Message....\");\r\n\r\n    StepVerifier.create(deferMsg)\r\n      .expectNext(\"Lazy Publisher\")\r\n      .verifyComplete();\r\n\r\n    Thread.sleep(5000);\r\n\r\n    StepVerifier.create(deferMsg)\r\n      .expectNext(\"Lazy Publisher\")\r\n      .verifyComplete();\r\n\r\n}\r\n```","```\r\n20:01:05.149 [main] DEBUG com.baeldung.mono.MonoUnitTest - Intermediate Test Message....\r\n20:01:05.187 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --> Lazy Publisher at: 1622817065187\r\n20:01:10.197 [main] DEBUG com.baeldung.mono.MonoUnitTest - Call to Retrieve Sample Message!! --> Lazy Publisher at: 1622817070197\r\n```","```\r\npublic void whenEmptyList_thenMonoDeferExecuted() {\r\n\r\n    Mono<List<String>> emptyList = Mono.defer(() -> monoOfEmptyList());\r\n\r\n    //Empty list, hence Mono publisher in switchIfEmpty executed after condition evaluation\r\n    Flux<String> emptyListElements = emptyList.flatMapIterable(l -> l)\r\n      .switchIfEmpty(Mono.defer(() -> sampleMsg(\"EmptyList\")))\r\n      .log();\r\n\r\n    StepVerifier.create(emptyListElements)\r\n      .expectNext(\"EmptyList\")\r\n      .verifyComplete();\r\n}\r\n```","```\r\npublic void whenNonEmptyList_thenMonoDeferNotExecuted() {\r\n\r\n    Mono<List<String>> nonEmptyist = Mono.defer(() -> monoOfList());\r\n\r\n    //Non empty list, hence Mono publisher in switchIfEmpty won't evaluated.\r\n    Flux<String> listElements = nonEmptyist.flatMapIterable(l -> l)\r\n      .switchIfEmpty(Mono.defer(() -> sampleMsg(\"NonEmptyList\")))\r\n      .log();\r\n\r\n    StepVerifier.create(listElements)\r\n      .expectNext(\"one\", \"two\", \"three\", \"four\")\r\n      .verifyComplete();\r\n}\r\n```"]