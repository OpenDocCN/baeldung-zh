["```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>vavr</artifactId>\r\n    <version>0.9.0</version>\r\n</dependency>\r\n```","```\r\npublic static Map<String, Object> computeWithoutEitherUsingMap(int marks) {\r\n    Map<String, Object> results = new HashMap<>();\r\n    if (marks < 85) {\r\n        results.put(\"FAILURE\", \"Marks not acceptable\");\r\n    } else {\r\n        results.put(\"SUCCESS\", marks);\r\n    }\r\n    return results;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    Map<String, Object> results = computeWithoutEitherUsingMap(8);\r\n\r\n    String error = (String) results.get(\"FAILURE\");\r\n    int marks = (int) results.get(\"SUCCESS\");\r\n}\r\n```","```\r\npublic static Object[] computeWithoutEitherUsingArray(int marks) {\r\n    Object[] results = new Object[2];\r\n    if (marks < 85) {\r\n        results[0] = \"Marks not acceptable\";\r\n    } else {\r\n        results[1] = marks;\r\n    }\r\n    return results;\r\n}\r\n```","```\r\nprivate static Either<String, Integer> computeWithEither(int marks) {\r\n    if (marks < 85) {\r\n        return Either.left(\"Marks not acceptable\");\r\n    } else {\r\n        return Either.right(marks);\r\n    }\r\n} \r\n```","```\r\ncomputeWithEither(80)\r\n  .right()\r\n  .filter(...)\r\n  .map(...)\r\n  // ...\r\n```","```\r\ncomputeWithEither(90).right()\r\n  .filter(...)\r\n  .map(...)\r\n  .getOrElse(Collections::emptyList);\r\n```","```\r\ncomputeWithEither(9).left()\r\n  .map(FetchError::getMsg)\r\n  .forEach(System.out::println);\r\n```","```\r\nresult.isLeft();\r\nresult.isRight();\r\n```","```\r\nresult.contains(100)\r\n```","```\r\nEither<String, Integer> either = Either.right(42);\r\nString result = either.fold(i -> i, Object::toString);\r\n```","```\r\nEither<String, Integer> either = Either.right(42);\r\nEither<Integer, String> swap = either.swap();\r\n```"]