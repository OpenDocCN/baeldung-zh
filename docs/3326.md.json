["```\r\npublic class CreditCard {\r\n\r\n    private String rawCardNumber;\r\n    private Integer bankIdNo;\r\n    private Integer accountNo;\r\n    private Integer checkCode;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic class CreditCardEditor extends PropertyEditorSupport {\r\n\r\n    @Override\r\n    public String getAsText() {\r\n        CreditCard creditCard = (CreditCard) getValue();\r\n\r\n        return creditCard == null ? \"\" : creditCard.getRawCardNumber();\r\n    }\r\n\r\n    @Override\r\n    public void setAsText(String text) throws IllegalArgumentException {\r\n        if (StringUtils.isEmpty(text)) {\r\n            setValue(null);\r\n        } else {\r\n            CreditCard creditCard = new CreditCard();\r\n            creditCard.setRawCardNumber(text);\r\n\r\n            String cardNo = text.replaceAll(\"-\", \"\");\r\n            if (cardNo.length() != 16)\r\n                throw new IllegalArgumentException(\r\n                  \"Credit card format should be xxxx-xxxx-xxxx-xxxx\");\r\n\r\n            try {\r\n                creditCard.setBankIdNo( Integer.valueOf(cardNo.substring(0, 6)) );\r\n                creditCard.setAccountNo( Integer.valueOf(\r\n                  cardNo.substring(6, cardNo.length() - 1)) );\r\n                creditCard.setCheckCode( Integer.valueOf(\r\n                  cardNo.substring(cardNo.length() - 1)) );\r\n            } catch (NumberFormatException nfe) {\r\n                throw new IllegalArgumentException(nfe);\r\n            }\r\n\r\n            setValue(creditCard);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@GetMapping(value = \"/credit-card/{card-no}\", \r\n  produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\r\npublic CreditCard parseCreditCardNumber(\r\n    @PathVariable(\"card-no\") CreditCard creditCard) {\r\n    return creditCard;\r\n}\r\n```","```\r\n{\r\n    \"rawCardNumber\": \"1234-1234-1111-0011\",\r\n    \"bankIdNo\": 123412,\r\n    \"accountNo\": 341111001,\r\n    \"checkCode\": 9\r\n}\r\n```","```\r\npublic class ExoticType {\r\n    private String name;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic class CustomExoticTypeEditor extends PropertyEditorSupport {\r\n\r\n    @Override\r\n    public String getAsText() {\r\n        ExoticType exoticType = (ExoticType) getValue();\r\n        return exoticType == null ? \"\" : exoticType.getName();\r\n    }\r\n\r\n    @Override\r\n    public void setAsText(String text) throws IllegalArgumentException {\r\n        ExoticType exoticType = new ExoticType();\r\n        exoticType.setName(text.toUpperCase());\r\n\r\n        setValue(exoticType);\r\n    }\r\n}\r\n```","```\r\n@InitBinder\r\npublic void initBinder(WebDataBinder binder) {\r\n    binder.registerCustomEditor(ExoticType.class, \r\n        new CustomExoticTypeEditor());\r\n}\r\n```","```\r\n@GetMapping(\r\n  value = \"/exotic-type/{value}\", \r\n  produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\r\npublic ExoticType parseExoticType(\r\n  @PathVariable(\"value\") ExoticType exoticType) {\r\n    return exoticType;\r\n}\r\n```","```\r\n{\r\n    \"name\": \"PASSION-FRUIT\"\r\n}\r\n```"]