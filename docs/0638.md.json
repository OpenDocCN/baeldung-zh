["```\r\nObjectId objectId = new ObjectId();\r\n```","```\r\nObjectId objectId = ObjectId.get();\r\n```","```\r\n@Test\r\npublic void givenSameDateAndCounter_whenComparingObjectIds_thenTheyAreNotEqual() {\r\n    Date date = new Date();\r\n    ObjectId objectIdDate = new ObjectId(date); // 635981f6e40f61599e839ddb\r\n    ObjectId objectIdDateCounter1 = new ObjectId(date, 100); // 635981f6e40f61599e000064\r\n    ObjectId objectIdDateCounter2 = new ObjectId(date, 100); // 635981f6e40f61599e000064\r\n\r\n    assertThat(objectIdDate).isNotEqualTo(objectIdDateCounter1);\r\n    assertThat(objectIdDate).isNotEqualTo(objectIdDateCounter2);\r\n\r\n    assertThat(objectIdDateCounter1).isEqualTo(objectIdDateCounter2);\r\n}\r\n```","```\r\nObjectId objectIdHex = new ObjectId(\"635981f6e40f61599e000064\");\r\n```","```\r\n@Test\r\npublic void givenSameArrayOfBytes_whenComparingObjectIdsCreatedViaDifferentMethods_thenTheObjectIdsAreEqual(){\r\n    byte[] bytes = \"123456789012\".getBytes();\r\n    ObjectId objectIdBytes = new ObjectId(bytes);\r\n\r\n    ByteBuffer buffer = ByteBuffer.wrap(bytes);\r\n    ObjectId objectIdByteBuffer = new ObjectId(buffer);\r\n\r\n    assertThat(objectIdBytes).isEqualTo(objectIdByteBuffer);\r\n}\r\n```","```\r\npublic class User {\r\n    public static final String NAME_FIELD = \"name\";\r\n\r\n    private final ObjectId id;\r\n    private final String name;\r\n\r\n    // constructor\r\n    // getters\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserInDatabase_whenInsertingAnotherUserWithTheSameObjectId_DKEThrownAndInsertRetried() {\r\n    // given\r\n    String userName = \"Kevin\";\r\n    User firstUser = new User(ObjectId.get(), userName);\r\n    User secondUser = new User(ObjectId.get(), userName);\r\n\r\n    mongoTemplate.insert(firstUser);\r\n\r\n    // when\r\n    try {\r\n        mongoTemplate.insert(firstUser);\r\n    } catch (DuplicateKeyException dke) {\r\n        mongoTemplate.insert(secondUser);\r\n    }\r\n\r\n    // then\r\n    Query query = new Query();\r\n    query.addCriteria(Criteria.where(User.NAME_FIELD)\r\n      .is(userName));\r\n    List<User> users = mongoTemplate.find(query, User.class);\r\n    assertThat(users).usingRecursiveComparison()\r\n      .isEqualTo(Lists.newArrayList(firstUser, secondUser));\r\n}\r\n```"]