["```\r\n@Test\r\npublic void whenBinomialOnTwoInt_shouldReturnResultIfUnderInt() {\r\n    int result = IntMath.binomial(6, 3);\r\n\r\n    assertEquals(20, result);\r\n}\r\n\r\n@Test\r\npublic void whenBinomialOnTwoInt_shouldReturnIntMaxIfOVerflowInt() {\r\n    int result = IntMath.binomial(Integer.MAX_VALUE, 3);\r\n\r\n    assertEquals(Integer.MAX_VALUE, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCeilPowOfTwoInt_shouldReturnResult() {\r\n  int result = IntMath.ceilingPowerOfTwo(20);\r\n\r\n  assertEquals(32, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddTwoInt_shouldReturnTheSumIfNotOverflow() {\r\n    int result = IntMath.checkedAdd(1, 2);\r\n\r\n    assertEquals(3, result);\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenAddTwoInt_shouldThrowArithmeticExceptionIfOverflow() {\r\n    IntMath.checkedAdd(Integer.MAX_VALUE, 100);\r\n} \r\n```","```\r\n@Test\r\npublic void whenDivideTwoInt_shouldReturnTheResultForCeilingRounding() {\r\n    int result = IntMath.divide(10, 3, RoundingMode.CEILING);\r\n\r\n    assertEquals(4, result);\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenDivideTwoInt_shouldThrowArithmeticExIfRoundNotDefinedButNeeded() {\r\n    IntMath.divide(10, 3, RoundingMode.UNNECESSARY);\r\n}\r\n```","```\r\n@Test\r\npublic void whenFactorialInt_shouldReturnTheResultIfInIntRange() {\r\n    int result = IntMath.factorial(5);\r\n\r\n    assertEquals(120, result);\r\n}\r\n\r\n@Test\r\npublic void whenFactorialInt_shouldReturnIntMaxIfNotInIntRange() {\r\n    int result = IntMath.factorial(Integer.MAX_VALUE);\r\n\r\n    assertEquals(Integer.MAX_VALUE, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenFloorPowerOfInt_shouldReturnValue() {\r\n    int result = IntMath.floorPowerOfTwo(30);\r\n\r\n    assertEquals(16, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGcdOfTwoInt_shouldReturnValue() {\r\n    int result = IntMath.gcd(30, 40);\r\n    assertEquals(10, result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenIntOfPowerTwo_whenIsPowOfTwo_shouldReturnTrue() {\r\n    boolean result = IntMath.isPowerOfTwo(16);\r\n\r\n    assertTrue(result);\r\n}\r\n\r\n@Test\r\npublic void givenIntNotOfPowerTwo_whenIsPowOfTwo_shouldReturnFalse() {\r\n    boolean result = IntMath.isPowerOfTwo(20);\r\n\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonPrimeInt_whenIsPrime_shouldReturnFalse() {\r\n    boolean result = IntMath.isPrime(20);\r\n\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLog10Int_shouldReturnTheResultForCeilingRounding() {\r\n    int result = IntMath.log10(30, RoundingMode.CEILING);\r\n\r\n    assertEquals(2, result);\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenLog10Int_shouldThrowArithmeticExIfRoundNotDefinedButNeeded() {\r\n    IntMath.log10(30, RoundingMode.UNNECESSARY);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLog2Int_shouldReturnTheResultForCeilingRounding() {\r\n    int result = IntMath.log2(30, RoundingMode.CEILING);\r\n\r\n    assertEquals(5, result);\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenLog2Int_shouldThrowArithmeticExIfRoundNotDefinedButNeeded() {\r\n    IntMath.log2(30, RoundingMode.UNNECESSARY);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMeanTwoInt_shouldReturnTheResult() {\r\n    int result = IntMath.mean(30, 20);\r\n\r\n    assertEquals(25, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenModTwoInt_shouldReturnTheResult() {\r\n    int result = IntMath.mod(30, 4);\r\n    assertEquals(2, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenPowTwoInt_shouldReturnTheResult() {\r\n    int result = IntMath.pow(6, 4);\r\n\r\n    assertEquals(1296, result);\r\n}\r\n```","```\r\n@Test:\r\npublic void whenSaturatedAddTwoInt_shouldReturnTheResult() {\r\n    int result = IntMath.saturatedAdd(6, 4);\r\n\r\n    assertEquals(10, result);\r\n}\r\n\r\n@Test\r\npublic void whenSaturatedAddTwoInt_shouldReturnIntMaxIfOverflow() {\r\n    int result = IntMath.saturatedAdd(Integer.MAX_VALUE, 1000);\r\n\r\n    assertEquals(Integer.MAX_VALUE, result);\r\n} \r\n```","```\r\n@Test\r\npublic void whenSqrtInt_shouldReturnTheResultForCeilingRounding() {\r\n    int result = IntMath.sqrt(30, RoundingMode.CEILING);\r\n\r\n    assertEquals(6, result);\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenSqrtInt_shouldThrowArithmeticExIfRoundNotDefinedButNeded() {\r\n    IntMath.sqrt(30, RoundingMode.UNNECESSARY);\r\n}\r\n```","```\r\n@Test\r\npublic void whenModLongAndInt_shouldModThemAndReturnTheResult() {\r\n    int result = LongMath.mod(30L, 4);\r\n\r\n    assertEquals(2, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenModTwoLongValues_shouldModThemAndReturnTheResult() {\r\n    long result = LongMath.mod(30L, 4L);\r\n\r\n    assertEquals(2L, result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInt_whenMathematicalDouble_shouldReturnTrue() {\r\n    boolean result = DoubleMath.isMathematicalInteger(5);\r\n\r\n    assertTrue(result);\r\n}\r\n\r\n@Test\r\npublic void givenDouble_whenMathematicalInt_shouldReturnFalse() {\r\n    boolean result = DoubleMath.isMathematicalInteger(5.2);\r\n\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLog2Double_shouldReturnResult() {\r\n    double result = DoubleMath.log2(4);\r\n\r\n    assertEquals(2, result, 0);\r\n}\r\n```"]