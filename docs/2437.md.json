["```\r\n@RestController\r\n@RequestMapping(\"/user\")\r\npublic class UserRestController {\r\n\r\n    @GetMapping(\"/authorities\")\r\n    public Map<String,Object> getPrincipalInfo(JwtAuthenticationToken principal) {\r\n\r\n        Collection<String> authorities = principal.getAuthorities()\r\n          .stream()\r\n          .map(GrantedAuthority::getAuthority)\r\n          .collect(Collectors.toList());\r\n\r\n        Map<String,Object> info = new HashMap<>();\r\n        info.put(\"name\", principal.getName());\r\n        info.put(\"authorities\", authorities);\r\n        info.put(\"tokenAttributes\", principal.getTokenAttributes());\r\n\r\n        return info;\r\n    }\r\n} \r\n```","```\r\n{\r\n  \"aud\": \"api://f84f66ca-591f-4504-960a-3abc21006b45\",\r\n  \"iss\": \"https://sts.windows.net/2e9fde3a-38ec-44f9-8bcd-c184dc1e8033/\",\r\n  \"iat\": 1648512013,\r\n  \"nbf\": 1648512013,\r\n  \"exp\": 1648516868,\r\n  \"email\": \"[[emailÂ protected]](/web/20220815050014/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n  \"family_name\": \"Sevestre\",\r\n  \"given_name\": \"Philippe\",\r\n  \"name\": \"Philippe Sevestre\",\r\n  \"scp\": \"profile.read\",\r\n  \"sub\": \"eXWysuqIJmK1yDywH3gArS98PVO1SV67BLt-dvmQ-pM\",\r\n  ... more claims omitted\r\n}\r\n```","```\r\n{\r\n  \"tokenAttributes\": {\r\n     // ... token claims omitted\r\n  },\r\n  \"name\": \"0047af40-473a-4dd3-bc46-07c3fe2b69a5\",\r\n  \"authorities\": [\r\n    \"SCOPE_profile\",\r\n    \"SCOPE_email\",\r\n    \"SCOPE_openid\"\r\n  ]\r\n}\r\n```","```\r\n@Bean\r\nSecurityFilterChain customJwtSecurityChain(HttpSecurity http) throws Exception {\r\n    return http.authorizeRequests(auth -> {\r\n      auth.antMatchers(\"/user/**\")\r\n        .hasAuthority(\"SCOPE_profile\");\r\n    })\r\n    .build();\r\n}\r\n```","```\r\n@GetMapping(\"/authorities\")\r\n@PreAuthorize(\"hasAuthority('SCOPE_profile.read')\")\r\npublic Map<String,Object> getPrincipalInfo(JwtAuthenticationToken principal) {\r\n    // ... same code as before\r\n}\r\n```","```\r\n@Configuration\r\n@EnableConfigurationProperties(JwtMappingProperties.class)\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n    // ... fields and constructor omitted\r\n    @Bean\r\n    public Converter<Jwt, Collection<GrantedAuthority>> jwtGrantedAuthoritiesConverter() {\r\n        JwtGrantedAuthoritiesConverter converter = new JwtGrantedAuthoritiesConverter();\r\n        if (StringUtils.hasText(mappingProps.getAuthoritiesPrefix())) {\r\n            converter.setAuthorityPrefix(mappingProps.getAuthoritiesPrefix().trim());\r\n        }\r\n        return converter;\r\n    }\r\n\r\n    @Bean\r\n    public JwtAuthenticationConverter customJwtAuthenticationConverter() {\r\n        JwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\n        converter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter();\r\n        return converter;\r\n    } \r\n```","```\r\n{\r\n  \"tokenAttributes\": {\r\n    // ... token claims omitted \r\n  },\r\n  \"name\": \"0047af40-473a-4dd3-bc46-07c3fe2b69a5\",\r\n  \"authorities\": [\r\n    \"MY_SCOPE_profile\",\r\n    \"MY_SCOPE_email\",\r\n    \"MY_SCOPE_openid\"\r\n  ]\r\n}\r\n```","```\r\n@Bean\r\npublic String jwtGrantedAuthoritiesPrefix() {\r\n  return mappingProps.getAuthoritiesPrefix() != null ?\r\n    mappingProps.getAuthoritiesPrefix() : \r\n      \"SCOPE_\";\r\n} \r\n```","```\r\n@GetMapping(\"/authorities\")\r\n@PreAuthorize(\"hasAuthority(@jwtGrantedAuthoritiesPrefix + 'profile.read')\")\r\npublic Map<String,Object> getPrincipalInfo(JwtAuthenticationToken principal) {\r\n    // ... method implementation omitted\r\n}\r\n```","```\r\n@Bean\r\nSecurityFilterChain customJwtSecurityChain(HttpSecurity http) throws Exception {\r\n    return http.authorizeRequests(auth -> {\r\n        auth.antMatchers(\"/user/**\")\r\n          .hasAuthority(mappingProps.getAuthoritiesPrefix() + \"profile\");\r\n      })\r\n      // ... other customizations omitted\r\n      .build();\r\n} \r\n```","```\r\n{\r\n  // ... other claims omitted\r\n  \"sub\": \"0047af40-473a-4dd3-bc46-07c3fe2b69a5\",\r\n  \"scope\": \"openid profile email\",\r\n  \"email_verified\": true,\r\n  \"name\": \"User Primo\",\r\n  \"preferred_username\": \"user1\",\r\n  \"given_name\": \"User\",\r\n  \"family_name\": \"Primo\"\r\n}\r\n```","```\r\n@Bean\r\npublic JwtAuthenticationConverter customJwtAuthenticationConverter() {\r\n\r\n    JwtAuthenticationConverter converter = new JwtAuthenticationConverter();\r\n    converter.setJwtGrantedAuthoritiesConverter(jwtGrantedAuthoritiesConverter());\r\n\r\n    if (StringUtils.hasText(mappingProps.getPrincipalClaimName())) {\r\n        converter.setPrincipalClaimName(mappingProps.getPrincipalClaimName());\r\n    }\r\n    return converter;\r\n} \r\n```","```\r\n{\r\n  \"tokenAttributes\": {\r\n    // ... token claims omitted \r\n  },\r\n  \"name\": \"user1\",\r\n  \"authorities\": [\r\n    \"MY_SCOPE_profile\",\r\n    \"MY_SCOPE_email\",\r\n    \"MY_SCOPE_openid\"\r\n  ]\r\n}\r\n```","```\r\npublic class MappingJwtGrantedAuthoritiesConverter implements Converter<Jwt, Collection<GrantedAuthority>> {\r\n    private static Collection<String> WELL_KNOWN_AUTHORITIES_CLAIM_NAMES = Arrays.asList(\"scope\", \"scp\");\r\n    private Map<String,String> scopes;\r\n    private String authoritiesClaimName = null;\r\n    private String authorityPrefix = \"SCOPE_\";\r\n\r\n    // ... constructor and setters omitted\r\n\r\n    @Override\r\n    public Collection<GrantedAuthority> convert(Jwt jwt) {\r\n\r\n        Collection<String> tokenScopes = parseScopesClaim(jwt);\r\n        if (tokenScopes.isEmpty()) {\r\n            return Collections.emptyList();\r\n        }\r\n\r\n        return tokenScopes.stream()\r\n          .map(s -> scopes.getOrDefault(s, s))\r\n          .map(s -> this.authorityPrefix + s)\r\n          .map(SimpleGrantedAuthority::new)\r\n          .collect(Collectors.toCollection(HashSet::new));\r\n    }\r\n\r\n    protected Collection<String> parseScopesClaim(Jwt jwt) {\r\n       // ... parse logic omitted \r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic Converter<Jwt, Collection<GrantedAuthority>> jwtGrantedAuthoritiesConverter() {\r\n    MappingJwtGrantedAuthoritiesConverter converter = new MappingJwtGrantedAuthoritiesConverter(mappingProps.getScopes());\r\n\r\n    if (StringUtils.hasText(mappingProps.getAuthoritiesPrefix())) {\r\n        converter.setAuthorityPrefix(mappingProps.getAuthoritiesPrefix());\r\n    }\r\n    if (StringUtils.hasText(mappingProps.getAuthoritiesClaimName())) {\r\n        converter.setAuthoritiesClaimName(mappingProps.getAuthoritiesClaimName());\r\n    }\r\n    return converter;\r\n} \r\n```","```\r\n@Bean\r\nSecurityFilterChain customJwtSecurityChain(HttpSecurity http) throws Exception {\r\n    return http.oauth2ResourceServer(oauth2 -> {\r\n        oauth2.jwt()\r\n          .jwtAuthenticationConverter(customJwtAuthenticationConverter());\r\n      })\r\n      .build();\r\n} \r\n```","```\r\npublic class CustomJwtAuthenticationConverter implements Converter<Jwt, AbstractAuthenticationToken> {\r\n\r\n    // ...private fields and construtor omitted\r\n    @Override\r\n    public AbstractAuthenticationToken convert(Jwt source) {\r\n\r\n        Collection<GrantedAuthority> authorities = jwtGrantedAuthoritiesConverter.convert(source);\r\n        String principalClaimValue = source.getClaimAsString(this.principalClaimName);\r\n        Account acc = accountService.findAccountByPrincipal(principalClaimValue);\r\n        return new AccountToken(source, authorities, principalClaimValue, acc);\r\n    }\r\n} \r\n```","```\r\n@GetMapping(\"/authorities\")\r\npublic Map<String,Object> getPrincipalInfo(JwtAuthenticationToken principal) {\r\n\r\n    // ... create result map as before (omitted)\r\n    if (principal instanceof AccountToken) {\r\n        info.put( \"account\", ((AccountToken)principal).getAccount());\r\n    }\r\n    return info;\r\n} \r\n```","```\r\n@GetMapping(\"/account/{accountNumber}\")\r\n@PreAuthorize(\"authentication.account.accountNumber == #accountNumber\")\r\npublic Account getAccountById(@PathVariable(\"accountNumber\") String accountNumber, AccountToken authentication) {\r\n    return authentication.getAccount();\r\n} \r\n```"]