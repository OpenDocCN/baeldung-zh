["```\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth</groupId>\r\n    <artifactId>spring-security-oauth2</artifactId>\r\n    <version>2.2.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic TokenStore tokenStore() {\r\n    return new JwtTokenStore(accessTokenConverter());\r\n}\r\n\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n    converter.setSigningKey(\"123\");\r\n    converter.setJwtClaimsSetVerifier(jwtClaimsSetVerifier());\r\n    return converter;\r\n}\r\n```","```\r\n@Bean\r\npublic JwtClaimsSetVerifier issuerClaimVerifier() {\r\n    try {\r\n        return new IssuerClaimVerifier(new URL(\"http://localhost:8081\"));\r\n    } catch (MalformedURLException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic JwtClaimsSetVerifier customJwtClaimVerifier() {\r\n    return new CustomClaimVerifier();\r\n}\r\n```","```\r\npublic class CustomClaimVerifier implements JwtClaimsSetVerifier {\r\n    @Override\r\n    public void verify(Map<String, Object> claims) throws InvalidTokenException {\r\n        String username = (String) claims.get(\"user_name\");\r\n        if ((username == null) || (username.length() == 0)) {\r\n            throw new InvalidTokenException(\"user_name claim is empty\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic JwtClaimsSetVerifier jwtClaimsSetVerifier() {\r\n    return new DelegatingJwtClaimsSetVerifier(Arrays.asList(\r\n      issuerClaimVerifier(), customJwtClaimVerifier()));\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(\r\n  classes = ResourceServerApplication.class, \r\n  webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic class JwtClaimsVerifierIntegrationTest {\r\n\r\n    @Autowired\r\n    private JwtTokenStore tokenStore;\r\n\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenTokenDontContainIssuer_thenSuccess() {\r\n    String tokenValue = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....\";\r\n    OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n\r\n    assertTrue(auth.isAuthenticated());\r\n}\r\n```","```\r\n@Test\r\npublic void whenTokenContainValidIssuer_thenSuccess() {\r\n    String tokenValue = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9....\";\r\n    OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n\r\n    assertTrue(auth.isAuthenticated());\r\n}\r\n```","```\r\n@Test(expected = InvalidTokenException.class)\r\npublic void whenTokenContainInvalidIssuer_thenException() {\r\n    String tokenValue = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9....\";\r\n    OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n\r\n    assertTrue(auth.isAuthenticated());\r\n}\r\n```","```\r\n@Test(expected = InvalidTokenException.class)\r\npublic void whenTokenDontContainUsername_thenException() {\r\n    String tokenValue = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9....\";\r\n    OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n\r\n    assertTrue(auth.isAuthenticated());\r\n}\r\n```","```\r\n@Test(expected = InvalidTokenException.class)\r\npublic void whenTokenContainEmptyUsername_thenException() {\r\n    String tokenValue = \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9....\";\r\n    OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n\r\n    assertTrue(auth.isAuthenticated());\r\n}\r\n```"]