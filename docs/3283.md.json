["```\r\npublic <T> Map<T, Long> countByClassicalLoop(List<T> inputList) {\r\n    Map<T, Long> resultMap = new HashMap<>();\r\n    for (T element : inputList) {\r\n        if (resultMap.containsKey(element)) {\r\n            resultMap.put(element, resultMap.get(element) + 1L);\r\n        } else {\r\n            resultMap.put(element, 1L);\r\n        }\r\n    }\r\n    return resultMap;\r\n}\r\n```","```\r\npublic <T> Map<T, Long> countByForEachLoopWithGetOrDefault(List<T> inputList) {\r\n    Map<T, Long> resultMap = new HashMap<>();\r\n    inputList.forEach(e -> resultMap.put(e, resultMap.getOrDefault(e, 0L) + 1L));\r\n    return resultMap;\r\n}\r\n```","```\r\nprivate List<String> INPUT_LIST = Lists.list(\r\n  \"expect1\",\r\n  \"expect2\", \"expect2\",\r\n  \"expect3\", \"expect3\", \"expect3\",\r\n  \"expect4\", \"expect4\", \"expect4\", \"expect4\"); \r\n```","```\r\nprivate void verifyResult(Map<String, Long> resultMap) {\r\n    assertThat(resultMap)\r\n      .isNotEmpty().hasSize(4)\r\n      .containsExactly(\r\n        entry(\"expect1\", 1L),\r\n        entry(\"expect2\", 2L),\r\n        entry(\"expect3\", 3L),\r\n        entry(\"expect4\", 4L));\r\n} \r\n```","```\r\npublic <T> Map<T, Long> countByForEachLoopWithMapCompute(List<T> inputList) {\r\n    Map<T, Long> resultMap = new HashMap<>();\r\n    inputList.forEach(e -> resultMap.compute(e, (k, v) -> v == null ? 1L : v + 1L));\r\n    return resultMap;\r\n}\r\n```","```\r\npublic <T> Map<T, Long> countByForEachLoopWithMapMerge(List<T> inputList) {\r\n    Map<T, Long> resultMap = new HashMap<>();\r\n    inputList.forEach(e -> resultMap.merge(e, 1L, Long::sum));\r\n    return resultMap;\r\n}\r\n```","```\r\npublic <T> Map<T, Long> countByStreamToMap(List<T> inputList) {\r\n    return inputList.stream().collect(Collectors.toMap(Function.identity(), v -> 1L, Long::sum));\r\n}\r\n```","```\r\npublic <T> Map<T, Long> countByStreamGroupBy(List<T> inputList) {\r\n    return inputList.stream().collect(Collectors.groupingBy(k -> k, Collectors.counting()));\r\n}\r\n```"]