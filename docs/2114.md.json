["```\r\n<articles>\r\n    <article>\r\n        <title>First steps in Java</title>\r\n        <author id=\"1\">\r\n            <firstname>Siena</firstname>\r\n            <lastname>Kerr</lastname>\r\n        </author>\r\n        <release-date>2018-12-01</release-date>\r\n    </article>\r\n    <article>\r\n        <title>Dockerize your SpringBoot application</title>\r\n        <author id=\"2\">\r\n            <firstname>Jonas</firstname>\r\n            <lastname>Lugo</lastname>\r\n        </author>\r\n        <release-date>2018-12-01</release-date>\r\n    </article>\r\n    <article>\r\n        <title>SpringBoot tutorial</title>\r\n        <author id=\"3\">\r\n            <firstname>Daniele</firstname>\r\n            <lastname>Ferguson</lastname>\r\n        </author>\r\n        <release-date>2018-06-12</release-date>\r\n    </article>\r\n    <article>\r\n        <title>Java 12 insights</title>\r\n        <author id=\"1\">\r\n            <firstname>Siena</firstname>\r\n            <lastname>Kerr</lastname>\r\n        </author>\r\n        <release-date>2018-07-22</release-date>\r\n    </article>\r\n</articles>\r\n```","```\r\ndef xmlFile = getClass().getResourceAsStream(\"articles.xml\")\r\n```","```\r\ndef articles = new XmlParser().parse(xmlFile)\r\n```","```\r\ndef \"Should read XML file properly\"() {\r\n    given: \"XML file\"\r\n\r\n    when: \"Using XmlParser to read file\"\r\n    def articles = new XmlParser().parse(xmlFile)\r\n\r\n    then: \"Xml is loaded properly\"\r\n    articles.'*'.size() == 4\r\n    articles.article[0].author.firstname.text() == \"Siena\"\r\n    articles.article[2].'release-date'.text() == \"2018-06-12\"\r\n    articles.article[3].title.text() == \"Java 12 insights\"\r\n    articles.article.find { it.author.'@id'.text() == \"3\" }.author.firstname.text() == \"Daniele\"\r\n}\r\n```","```\r\ndef \"Should add node to existing xml using NodeBuilder\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlParser().parse(xmlFile)\r\n\r\n    when: \"Adding node to xml\"\r\n    def articleNode = new NodeBuilder().article(id: '5') {\r\n        title('Traversing XML in the nutshell')\r\n        author {\r\n            firstname('Martin')\r\n            lastname('Schmidt')\r\n        }\r\n        'release-date'('2019-05-18')\r\n    }\r\n    articles.append(articleNode)\r\n\r\n    then: \"Node is added to xml properly\"\r\n    articles.'*'.size() == 5\r\n    articles.article[4].title.text() == \"Traversing XML in the nutshell\"\r\n}\r\n```","```\r\ndef \"Should modify node\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlParser().parse(xmlFile)\r\n\r\n    when: \"Changing value of one of the nodes\"\r\n    articles.article.each { it.'release-date'[0].value = \"2019-05-18\" }\r\n\r\n    then: \"XML is updated\"\r\n    articles.article.findAll { it.'release-date'.text() != \"2019-05-18\" }.isEmpty()\r\n}\r\n```","```\r\ndef \"Should replace node\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlParser().parse(xmlFile)\r\n\r\n    when: \"Adding node to xml\"\r\n    def articleNode = new NodeBuilder().article(id: '5') {\r\n        title('Traversing XML in the nutshell')\r\n        author {\r\n            firstname('Martin')\r\n            lastname('Schmidt')\r\n        }\r\n        'release-date'('2019-05-18')\r\n    }\r\n    articles.article[0].replaceNode(articleNode)\r\n\r\n    then: \"Node is added to xml properly\"\r\n    articles.'*'.size() == 4\r\n    articles.article[0].title.text() == \"Traversing XML in the nutshell\"\r\n}\r\n```","```\r\ndef \"Should remove article from xml\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlParser().parse(xmlFile)\r\n\r\n    when: \"Removing all articles but the ones with id==3\"\r\n    articles.article\r\n      .findAll { it.author.'@id'.text() != \"3\" }\r\n      .each { articles.remove(it) }\r\n\r\n    then: \"There is only one article left\"\r\n    articles.children().size() == 1\r\n    articles.article[0].author.'@id'.text() == \"3\"\r\n}\r\n```","```\r\ndef \"Should read XML file properly\"() {\r\n    given: \"XML file\"\r\n\r\n    when: \"Using XmlSlurper to read file\"\r\n    def articles = new XmlSlurper().parse(xmlFile)\r\n\r\n    then: \"Xml is loaded properly\"\r\n    articles.'*'.size() == 4\r\n    articles.article[0].author.firstname == \"Siena\"\r\n    articles.article[2].'release-date' == \"2018-06-12\"\r\n    articles.article[3].title == \"Java 12 insights\"\r\n    articles.article.find { it.author.'@id' == \"3\" }.author.firstname == \"Daniele\"\r\n}\r\n```","```\r\ndef \"Should add node to existing xml\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlSlurper().parse(xmlFile)\r\n\r\n    when: \"Adding node to xml\"\r\n    articles.appendNode {\r\n        article(id: '5') {\r\n            title('Traversing XML in the nutshell')\r\n            author {\r\n                firstname('Martin')\r\n                lastname('Schmidt')\r\n            }\r\n            'release-date'('2019-05-18')\r\n        }\r\n    }\r\n\r\n    articles = new XmlSlurper().parseText(XmlUtil.serialize(articles))\r\n\r\n    then: \"Node is added to xml properly\"\r\n    articles.'*'.size() == 5\r\n    articles.article[4].title == \"Traversing XML in the nutshell\"\r\n}\r\n```","```\r\ndef \"Should modify node\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlSlurper().parse(xmlFile)\r\n\r\n    when: \"Changing value of one of the nodes\"\r\n    articles.article.each { it.'release-date' = \"2019-05-18\" }\r\n\r\n    then: \"XML is updated\"\r\n    articles.article.findAll { it.'release-date' != \"2019-05-18\" }.isEmpty()\r\n}\r\n```","```\r\ndef \"Should replace node\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlSlurper().parse(xmlFile)\r\n\r\n    when: \"Replacing node\"\r\n    articles.article[0].replaceNode {\r\n        article(id: '5') {\r\n            title('Traversing XML in the nutshell')\r\n            author {\r\n                firstname('Martin')\r\n                lastname('Schmidt')\r\n            }\r\n            'release-date'('2019-05-18')\r\n        }\r\n    }\r\n\r\n    articles = new XmlSlurper().parseText(XmlUtil.serialize(articles))\r\n\r\n    then: \"Node is replaced properly\"\r\n    articles.'*'.size() == 4\r\n    articles.article[0].title == \"Traversing XML in the nutshell\"\r\n}\r\n```","```\r\ndef \"Should remove article from xml\"() {\r\n    given: \"XML object\"\r\n    def articles = new XmlSlurper().parse(xmlFile)\r\n\r\n    when: \"Removing all articles but the ones with id==3\"\r\n    articles.article\r\n      .findAll { it.author.'@id' != \"3\" }\r\n      .replaceNode {}\r\n\r\n    articles = new XmlSlurper().parseText(XmlUtil.serialize(articles))\r\n\r\n    then: \"There is only one article left\"\r\n    articles.children().size() == 1\r\n    articles.article[0].author.'@id' == \"3\"\r\n}\r\n```","```\r\ndef \"Should create XML properly\"() {\r\n    given: \"Node structures\"\r\n\r\n    when: \"Using MarkupBuilderTest to create xml structure\"\r\n    def writer = new StringWriter()\r\n    new MarkupBuilder(writer).articles {\r\n        article {\r\n            title('First steps in Java')\r\n            author(id: '1') {\r\n                firstname('Siena')\r\n                lastname('Kerr')\r\n            }\r\n            'release-date'('2018-12-01')\r\n        }\r\n        article {\r\n            title('Dockerize your SpringBoot application')\r\n            author(id: '2') {\r\n                firstname('Jonas')\r\n                lastname('Lugo')\r\n            }\r\n            'release-date'('2018-12-01')\r\n        }\r\n    }\r\n\r\n    then: \"Xml is created properly\"\r\n    XmlUtil.serialize(writer.toString()) == XmlUtil.serialize(xmlFile.text)\r\n}\r\n```"]