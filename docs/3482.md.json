["```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n\r\n    private int age;\r\n}\r\n```","```\r\n@Repository\r\npublic class UserDAO implements IUserDAO {\r\n\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n\r\n    @Override\r\n    public List<User> searchUser(List<SearchCriteria> params) {\r\n        CriteriaBuilder builder = entityManager.getCriteriaBuilder();\r\n        CriteriaQuery<User> query = builder.createQuery(User.class);\r\n        Root r = query.from(User.class);\r\n\r\n        Predicate predicate = builder.conjunction();\r\n\r\n        UserSearchQueryCriteriaConsumer searchConsumer = \r\n          new UserSearchQueryCriteriaConsumer(predicate, builder, r);\r\n        params.stream().forEach(searchConsumer);\r\n        predicate = searchConsumer.getPredicate();\r\n        query.where(predicate);\r\n\r\n        List<User> result = entityManager.createQuery(query).getResultList();\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void save(User entity) {\r\n        entityManager.persist(entity);\r\n    }\r\n}\r\n```","```\r\npublic class UserSearchQueryCriteriaConsumer implements Consumer<SearchCriteria>{\r\n\r\n    private Predicate predicate;\r\n    private CriteriaBuilder builder;\r\n    private Root r;\r\n\r\n    @Override\r\n    public void accept(SearchCriteria param) {\r\n        if (param.getOperation().equalsIgnoreCase(\">\")) {\r\n            predicate = builder.and(predicate, builder\r\n              .greaterThanOrEqualTo(r.get(param.getKey()), param.getValue().toString()));\r\n        } else if (param.getOperation().equalsIgnoreCase(\"<\")) {\r\n            predicate = builder.and(predicate, builder.lessThanOrEqualTo(\r\n              r.get(param.getKey()), param.getValue().toString()));\r\n        } else if (param.getOperation().equalsIgnoreCase(\":\")) {\r\n            if (r.get(param.getKey()).getJavaType() == String.class) {\r\n                predicate = builder.and(predicate, builder.like(\r\n                  r.get(param.getKey()), \"%\" + param.getValue() + \"%\"));\r\n            } else {\r\n                predicate = builder.and(predicate, builder.equal(\r\n                  r.get(param.getKey()), param.getValue()));\r\n            }\r\n        }\r\n    }\r\n\r\n    // standard constructor, getter, setter\r\n}\r\n```","```\r\npublic class SearchCriteria {\r\n    private String key;\r\n    private String operation;\r\n    private Object value;\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { PersistenceConfig.class })\r\n@Transactional\r\n@TransactionConfiguration\r\npublic class JPACriteriaQueryTest {\r\n\r\n    @Autowired\r\n    private IUserDAO userApi;\r\n\r\n    private User userJohn;\r\n\r\n    private User userTom;\r\n\r\n    @Before\r\n    public void init() {\r\n        userJohn = new User();\r\n        userJohn.setFirstName(\"John\");\r\n        userJohn.setLastName(\"Doe\");\r\n        userJohn.setEmail(\"[[email protected]](/web/20220529020840/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userJohn.setAge(22);\r\n        userApi.save(userJohn);\r\n\r\n        userTom = new User();\r\n        userTom.setFirstName(\"Tom\");\r\n        userTom.setLastName(\"Doe\");\r\n        userTom.setEmail(\"[[email protected]](/web/20220529020840/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userTom.setAge(26);\r\n        userApi.save(userTom);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n    params.add(new SearchCriteria(\"firstName\", \":\", \"John\"));\r\n    params.add(new SearchCriteria(\"lastName\", \":\", \"Doe\"));\r\n\r\n    List<User> results = userApi.searchUser(params);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenLast_whenGettingListOfUsers_thenCorrect() {\r\n    List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n    params.add(new SearchCriteria(\"lastName\", \":\", \"Doe\"));\r\n\r\n    List<User> results = userApi.searchUser(params);\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, isIn(results));\r\n}\r\n```","```\r\n@Test\r\npublic void givenLastAndAge_whenGettingListOfUsers_thenCorrect() {\r\n    List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n    params.add(new SearchCriteria(\"lastName\", \":\", \"Doe\"));\r\n    params.add(new SearchCriteria(\"age\", \">\", \"25\"));\r\n\r\n    List<User> results = userApi.searchUser(params);\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenWrongFirstAndLast_whenGettingListOfUsers_thenCorrect() {\r\n    List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n    params.add(new SearchCriteria(\"firstName\", \":\", \"Adam\"));\r\n    params.add(new SearchCriteria(\"lastName\", \":\", \"Fox\"));\r\n\r\n    List<User> results = userApi.searchUser(params);\r\n    assertThat(userJohn, not(isIn(results)));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPartialFirst_whenGettingListOfUsers_thenCorrect() {\r\n    List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n    params.add(new SearchCriteria(\"firstName\", \":\", \"jo\"));\r\n\r\n    List<User> results = userApi.searchUser(params);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private IUserDao api;\r\n\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/users\")\r\n    @ResponseBody\r\n    public List<User> findAll(@RequestParam(value = \"search\", required = false) String search) {\r\n        List<SearchCriteria> params = new ArrayList<SearchCriteria>();\r\n        if (search != null) {\r\n            Pattern pattern = Pattern.compile(\"(\\w+?)(:|<|>)(\\w+?),\");\r\n            Matcher matcher = pattern.matcher(search + \",\");\r\n            while (matcher.find()) {\r\n                params.add(new SearchCriteria(matcher.group(1), \r\n                  matcher.group(2), matcher.group(3)));\r\n            }\r\n        }\r\n        return api.searchUser(params);\r\n    }\r\n}\r\n```","```\r\nhttp://localhost:8080/users?search=lastName:doe,age>25\r\n```","```\r\n[{\r\n    \"id\":2,\r\n    \"firstName\":\"tom\",\r\n    \"lastName\":\"doe\",\r\n    \"email\":\"[[email protected]](/web/20220529020840/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\":26\r\n}]\r\n```"]