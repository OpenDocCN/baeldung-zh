["```\r\nBufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {\r\n    BufferedImage resizedImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\r\n    Graphics2D graphics2D = resizedImage.createGraphics();\r\n    graphics2D.drawImage(originalImage, 0, 0, targetWidth, targetHeight, null);\r\n    graphics2D.dispose();\r\n    return resizedImage;\r\n}\r\n```","```\r\ngraphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\r\n```","```\r\nBufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws IOException {\r\n    Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_DEFAULT);\r\n    BufferedImage outputImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\r\n    outputImage.getGraphics().drawImage(resultingImage, 0, 0, null);\r\n    return outputImage;\r\n}\r\n```","```\r\nImage resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);\r\n```","```\r\n<dependency>\r\n    <groupId>org.imgscalr</groupId>\r\n    <artifactId>imgscalr-lib</artifactId>\r\n    <version>4.2</version>\r\n</dependency>\r\n```","```\r\nBufferedImage simpleResizeImage(BufferedImage originalImage, int targetWidth) throws Exception {\r\n    return Scalr.resize(originalImage, targetWidth);\r\n}\r\n```","```\r\nBufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {\r\n    return Scalr.resize(originalImage, Scalr.Method.AUTOMATIC, Scalr.Mode.AUTOMATIC, targetWidth, targetHeight, Scalr.OP_ANTIALIAS);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>net.coobird</groupId>\r\n    <artifactId>thumbnailator</artifactId>\r\n    <version>0.4.11</version>\r\n</dependency>\r\n```","```\r\nBufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) throws Exception {\r\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\r\n    Thumbnails.of(originalImage)\r\n        .size(targetWidth, targetHeight)\r\n        .outputFormat(\"JPEG\")\r\n        .outputQuality(1)\r\n        .toOutputStream(outputStream);\r\n    byte[] data = outputStream.toByteArray();\r\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(data);\r\n    return ImageIO.read(inputStream);\r\n}\r\n```","```\r\nThumbnails.of(new File(\"path/to/directory\").listFiles())\r\n    .size(300, 300)\r\n    .outputFormat(\"JPEG\")\r\n    .outputQuality(0.80)\r\n    .toFiles(Rename.PREFIX_DOT_THUMBNAIL);\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.downgoon</groupId>\r\n    <artifactId>marvin</artifactId>\r\n    <version>1.5.5</version>\r\n    <type>pom</type>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.downgoon</groupId>\r\n    <artifactId>MarvinPlugins</artifactId>\r\n    <version>1.5.5</version>\r\n</dependency>\r\n```","```\r\nBufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {\r\n    MarvinImage image = new MarvinImage(originalImage);\r\n    Scale scale = new Scale();\r\n    scale.load();\r\n    scale.setAttribute(\"newWidth\", targetWidth);\r\n    scale.setAttribute(\"newHeight\", targetHeight);\r\n    scale.process(image.clone(), image, null, null, false);\r\n    return image.getBufferedImageNoAlpha();\r\n}\r\n```"]