["```\r\n@Test\r\npublic void givenTwoCollections_whenStreamedSequentially_thenCheckOutputDifferent() {\r\n    List<String> list = Arrays.asList(\"B\", \"A\", \"C\", \"D\", \"F\");\r\n    Set<String> set = new TreeSet<>(list);\r\n\r\n    Object[] listOutput = list.stream().toArray();\r\n    Object[] setOutput = set.stream().toArray();\r\n\r\n    assertEquals(\"[B, A, C, D, F]\", Arrays.toString(listOutput));\r\n    assertEquals(\"[A, B, C, D, F]\", Arrays.toString(setOutput)); \r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoCollections_whenStreamedInParallel_thenCheckOutputDifferent() {\r\n    List<String> list = Arrays.asList(\"B\", \"A\", \"C\", \"D\", \"F\");\r\n    Set<String> set = new TreeSet<>(list);\r\n\r\n    Object[] listOutput = list.stream().parallel().toArray();\r\n    Object[] setOutput = set.stream().parallel().toArray();\r\n\r\n    assertEquals(\"[B, A, C, D, F]\", Arrays.toString(listOutput));\r\n    assertEquals(\"[A, B, C, D, F]\", Arrays.toString(setOutput));\r\n}\r\n```","```\r\nSet<Integer> set = new TreeSet<>(\r\n  Arrays.asList(-9, -5, -4, -2, 1, 2, 4, 5, 7, 9, 12, 13, 16, 29, 23, 34, 57, 102, 230));\r\n```","```\r\nset.stream().parallel().limit(5).toArray();\r\n```","```\r\n[-9, -5, -4, -2, 1]\r\n```","```\r\nset.stream().unordered().parallel().limit(5).toArray();\r\n```","```\r\n[1, 4, 7, 9, 23]\r\n```","```\r\n@Test\r\npublic void givenUnsortedStreamInput_whenStreamSorted_thenCheckOrderChanged() {\r\n    List<Integer> list = Arrays.asList(-3, 10, -4, 1, 3);\r\n\r\n    Object[] listOutput = list.stream().toArray();\r\n    Object[] listOutputSorted = list.stream().sorted().toArray();\r\n\r\n    assertEquals(\"[-3, 10, -4, 1, 3]\", Arrays.toString(listOutput));\r\n    assertEquals(\"[-4, -3, 1, 3, 10]\", Arrays.toString(listOutputSorted));\r\n}\r\n```","```\r\nList<String> list = Arrays.asList(\"B\", \"A\", \"C\", \"D\", \"F\");\r\n```","```\r\nlist.stream().parallel().forEachOrdered(e -> logger.log(Level.INFO, e));\r\n```","```\r\nINFO: B\r\nINFO: A\r\nINFO: C\r\nINFO: D\r\nINFO: F\r\n```","```\r\nlist.stream().parallel().forEach(e -> logger.log(Level.INFO, e));\r\n```","```\r\nINFO: C\r\nINFO: F\r\nINFO: B\r\nINFO: D\r\nINFO: A\r\n```","```\r\n@Test\r\npublic void givenSameCollection_whenStreamCollected_checkOutput() {\r\n    List<String> list = Arrays.asList(\"B\", \"A\", \"C\", \"D\", \"F\");\r\n\r\n    List<String> collectionList = list.stream().parallel().collect(Collectors.toList());\r\n    Set<String> collectionSet = list.stream().parallel()\r\n      .collect(Collectors.toCollection(TreeSet::new)); \r\n\r\n    assertEquals(\"[B, A, C, D, F]\", collectionList.toString()); \r\n    assertEquals(\"[A, B, C, D, F]\", collectionSet.toString()); \r\n}\r\n```","```\r\n@Test\r\npublic void givenList_whenStreamCollectedToHashMap_thenCheckOrderChanged() {\r\n  List<String> list = Arrays.asList(\"A\", \"BB\", \"CCC\");\r\n\r\n  Map<String, Integer> hashMap = list.stream().collect(Collectors\r\n    .toMap(Function.identity(), String::length));\r\n\r\n  Object[] keySet = hashMap.keySet().toArray();\r\n\r\n  assertEquals(\"[BB, A, CCC]\", Arrays.toString(keySet));\r\n}\r\n```","```\r\n@Test\r\npublic void givenList_whenCollectedtoLinkedHashMap_thenCheckOrderMaintained(){\r\n    List<String> list = Arrays.asList(\"A\", \"BB\", \"CCC\");\r\n\r\n    Map<String, Integer> linkedHashMap = list.stream().collect(Collectors.toMap(\r\n      Function.identity(),\r\n      String::length,\r\n      (u, v) -> u,\r\n      LinkedHashMap::new\r\n    ));\r\n\r\n    Object[] keySet = linkedHashMap.keySet().toArray();\r\n\r\n    assertEquals(\"[A, BB, CCC]\", Arrays.toString(keySet));\r\n}\r\n```","```\r\n@Benchmark \r\npublic void givenOrderedStreamInput_whenStreamDistinct_thenShowOpsPerMS() { \r\n    IntStream.range(1, 1_000_000).parallel().distinct().toArray(); \r\n}\r\n\r\n@Benchmark\r\npublic void givenUnorderedStreamInput_whenStreamDistinct_thenShowOpsPerMS() {\r\n    IntStream.range(1, 1_000_000).unordered().parallel().distinct().toArray();\r\n}\r\n```","```\r\nBenchmark                        Mode  Cnt       Score   Error  Units\r\nTestBenchmark.givenOrdered...    avgt    2  222252.283          us/op\r\nTestBenchmark.givenUnordered...  avgt    2   78221.357          us/op \r\n```","```\r\n@Benchmark\r\npublic void givenOrderedStreamInput_whenStreamFiltered_thenShowOpsPerMS() {\r\n    IntStream.range(1, 100_000_000).parallel().filter(i -> i % 10 == 0).toArray();\r\n}\r\n\r\n@Benchmark\r\npublic void givenUnorderedStreamInput_whenStreamFiltered_thenShowOpsPerMS(){\r\n    IntStream.range(1,100_000_000).unordered().parallel().filter(i -> i % 10 == 0).toArray();\r\n}\r\n```","```\r\nBenchmark                        Mode  Cnt       Score   Error  Units\r\nTestBenchmark.givenOrdered...    avgt    2  116333.431          us/op\r\nTestBenchmark.givenUnordered...  avgt    2  111471.676          us/op\r\n```"]