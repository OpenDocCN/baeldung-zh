["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>1.3.0.RELEASE</version>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.data</groupId>\r\n        <artifactId>spring-data-commons</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.mysema.querydsl</groupId>\r\n        <artifactId>querydsl-apt</artifactId>\r\n        <version>${querydsl.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.mysema.querydsl</groupId>\r\n        <artifactId>querydsl-jpa</artifactId>\r\n        <version>${querydsl.version}</version>\r\n    </dependency>\r\n...\r\n```","```\r\npublic interface UserRepository extends \r\n  JpaRepository<User, Long>, QueryDslPredicateExecutor<User>, QuerydslBinderCustomizer<QUser> {\r\n    @Override\r\n    default public void customize(QuerydslBindings bindings, QUser root) {\r\n        bindings.bind(String.class).first(\r\n          (StringPath path, String value) -> path.containsIgnoreCase(value));\r\n        bindings.excluding(root.email);\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/users\")\r\n@ResponseBody\r\npublic Iterable<User> findAllByWebQuerydsl(\r\n  @QuerydslPredicate(root = User.class) Predicate predicate) {\r\n    return userRepository.findAll(predicate);\r\n}\r\n```","```\r\nhttp://localhost:8080/users?firstName=john\r\n```","```\r\n[\r\n   {\r\n      \"id\":1,\r\n      \"firstName\":\"john\",\r\n      \"lastName\":\"doe\",\r\n      \"email\":\"[[email protected]](/web/20220701020622/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n      \"age\":11\r\n   }\r\n]\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Application.class)\r\n@WebAppConfiguration\r\npublic class UserLiveTest {\r\n\r\n    private ObjectMapper mapper = new ObjectMapper();\r\n    private User userJohn = new User(\"john\", \"doe\", \"[[email protected]](/web/20220701020622/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    private User userTom = new User(\"tom\", \"doe\", \"[[email protected]](/web/20220701020622/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n\r\n    private static boolean setupDataCreated = false;\r\n\r\n    @Before\r\n    public void setupData() throws JsonProcessingException {\r\n        if (!setupDataCreated) {\r\n            givenAuth().contentType(MediaType.APPLICATION_JSON_VALUE)\r\n                       .body(mapper.writeValueAsString(userJohn))\r\n                       .post(\"http://localhost:8080/users\");\r\n\r\n            givenAuth().contentType(MediaType.APPLICATION_JSON_VALUE)\r\n                       .body(mapper.writeValueAsString(userTom))\r\n                       .post(\"http://localhost:8080/users\");\r\n            setupDataCreated = true;\r\n        }\r\n    }\r\n\r\n    private RequestSpecification givenAuth() {\r\n        return RestAssured.given().auth().preemptive().basic(\"user1\", \"user1Pass\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(\"http://localhost:8080/users\");\r\n    User[] result = response.as(User[].class);\r\n    assertEquals(result.length, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstName_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(\"http://localhost:8080/users?firstName=john\");\r\n    User[] result = response.as(User[].class);\r\n    assertEquals(result.length, 1);\r\n    assertEquals(result[0].getEmail(), userJohn.getEmail());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPartialLastName_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(\"http://localhost:8080/users?lastName=do\");\r\n    User[] result = response.as(User[].class);\r\n    assertEquals(result.length, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmail_whenGettingListOfUsers_thenIgnored() {\r\n    Response response = givenAuth().get(\"http://localhost:8080/users?email=john\");\r\n    User[] result = response.as(User[].class);\r\n    assertEquals(result.length, 2);\r\n}\r\n```"]