["```\r\npublic class UserAccount {\r\n\r\n    @NotNull\r\n    @Size(min = 4, max = 15)\r\n    private String password;\r\n\r\n    @NotBlank\r\n    private String name;\r\n\r\n    // standard constructors / setters / getters / toString\r\n\r\n} \r\n```","```\r\n@RequestMapping(value = \"/saveBasicInfo\", method = RequestMethod.POST)\r\npublic String saveBasicInfo(\r\n  @Valid @ModelAttribute(\"useraccount\") UserAccount useraccount, \r\n  BindingResult result, \r\n  ModelMap model) {\r\n    if (result.hasErrors()) {\r\n        return \"error\";\r\n    }\r\n    return \"success\";\r\n}\r\n```","```\r\n@Test\r\npublic void givenSaveBasicInfo_whenCorrectInput_thenSuccess() throws Exception {\r\n    this.mockMvc.perform(MockMvcRequestBuilders.post(\"/saveBasicInfo\")\r\n      .accept(MediaType.TEXT_HTML)\r\n      .param(\"name\", \"test123\")\r\n      .param(\"password\", \"pass\"))\r\n      .andExpect(view().name(\"success\"))\r\n      .andExpect(status().isOk())\r\n      .andDo(print());\r\n}\r\n```","```\r\npublic class UserAccount {\r\n\r\n    @NotNull\r\n    @Size(min = 4, max = 15)\r\n    private String password;\r\n\r\n    @NotBlank\r\n    private String name;\r\n\r\n    @Min(value = 18, message = \"Age should not be less than 18\")\r\n    private int age;\r\n\r\n    @NotBlank\r\n    private String phone;\r\n\r\n    // standard constructors / setters / getters / toString   \r\n\r\n} \r\n```","```\r\npublic class UserAccount {\r\n\r\n    @NotNull(groups = BasicInfo.class)\r\n    @Size(min = 4, max = 15, groups = BasicInfo.class)\r\n    private String password;\r\n\r\n    @NotBlank(groups = BasicInfo.class)\r\n    private String name;\r\n\r\n    @Min(value = 18, message = \"Age should not be less than 18\", groups = AdvanceInfo.class)\r\n    private int age;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String phone;\r\n\r\n    // standard constructors / setters / getters / toString   \r\n\r\n} \r\n```","```\r\n@RequestMapping(value = \"/saveBasicInfoStep1\", method = RequestMethod.POST)\r\npublic String saveBasicInfoStep1(\r\n  @Validated(BasicInfo.class) \r\n  @ModelAttribute(\"useraccount\") UserAccount useraccount, \r\n  BindingResult result, ModelMap model) {\r\n    if (result.hasErrors()) {\r\n        return \"error\";\r\n    }\r\n    return \"success\";\r\n}\r\n```","```\r\n@Test\r\npublic void givenSaveBasicInfoStep1_whenCorrectInput_thenSuccess() throws Exception {\r\n    this.mockMvc.perform(MockMvcRequestBuilders.post(\"/saveBasicInfoStep1\")\r\n      .accept(MediaType.TEXT_HTML)\r\n      .param(\"name\", \"test123\")\r\n      .param(\"password\", \"pass\"))\r\n      .andExpect(view().name(\"success\"))\r\n      .andExpect(status().isOk())\r\n      .andDo(print());\r\n}\r\n```","```\r\npublic class UserAddress {\r\n\r\n    @NotBlank\r\n    private String countryCode;\r\n\r\n    // standard constructors / setters / getters / toString\r\n}\r\n```","```\r\npublic class UserAccount {\r\n\r\n    //...\r\n\r\n    @Valid\r\n    @NotNull(groups = AdvanceInfo.class)\r\n    private UserAddress useraddress;\r\n\r\n    // standard constructors / setters / getters / toString \r\n}\r\n```"]