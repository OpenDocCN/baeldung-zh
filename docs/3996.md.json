["```\r\nLocalDate firstDate = LocalDate.of(2019, 8, 10);\r\nLocalDate secondDate = LocalDate.of(2019, 7, 1);\r\n```","```\r\nassertThat(firstDate.isAfter(secondDate), is(true));\r\n```","```\r\nassertThat(firstDate.isBefore(secondDate), is(false));\r\n```","```\r\nassertThat(firstDate.isEqual(firstDate), is(true));\r\nassertThat(firstDate.isEqual(secondDate), is(false));\r\n```","```\r\nassertThat(firstDate.equals(secondDate), is(false));\r\n```","```\r\nassertThat(firstDate.compareTo(secondDate), is(1));\r\nassertThat(secondDate.compareTo(firstDate), is(-1));\r\n```","```\r\nZonedDateTime timeInNewYork = \r\n  ZonedDateTime.of(2019, 8, 10, 8, 0, 0, 0, ZoneId.of(\"America/New_York\"));\r\nZonedDateTime timeInBerlin = \r\n  ZonedDateTime.of(2019, 8, 10, 14, 0, 0, 0, ZoneId.of(\"Europe/Berlin\"));\r\n\r\nassertThat(timeInNewYork.isAfter(timeInBerlin), is(false));\r\nassertThat(timeInNewYork.isBefore(timeInBerlin), is(false));\r\nassertThat(timeInNewYork.isEqual(timeInBerlin), is(true));\r\n```","```\r\nassertThat(timeInNewYork.equals(timeInBerlin), is(false)); \r\nassertThat(timeInNewYork.compareTo(timeInBerlin), is(-1));\r\n```","```\r\npublic static boolean isSameDay(LocalDateTime timestamp, \r\n  LocalDate localDateToCompare) {\r\n    return timestamp.toLocalDate().isEqual(localDateToCompare);\r\n}\r\n```","```\r\npublic static boolean isSameDay(LocalDateTime timestamp, \r\n  LocalDateTime timestampToCompare) {\r\n    return timestamp.truncatedTo(DAYS)\r\n      .isEqual(timestampToCompare.truncatedTo(DAYS));\r\n}\r\n```","```\r\npublic static boolean isSameHour(LocalDateTime timestamp, \r\n  LocalDateTime timestampToCompare) {\r\n    return timestamp.truncatedTo(HOURS)\r\n      .isEqual(timestampToCompare.truncatedTo(HOURS));\r\n}\r\n```","```\r\npublic static boolean isSameHour(ZonedDateTime zonedTimestamp, \r\n  ZonedDateTime zonedTimestampToCompare) {\r\n    return zonedTimestamp.truncatedTo(HOURS)\r\n      .isEqual(zonedTimestampToCompare.truncatedTo(HOURS));\r\n}\r\n```","```\r\nZonedDateTime zonedTimestamp = \r\n  ZonedDateTime.of(2019, 8, 10, 8, 30, 0, 0, ZoneId.of(\"America/New_York\"));\r\nZonedDateTime zonedTimestampToCompare = \r\n  ZonedDateTime.of(2019, 8, 10, 14, 0, 0, 0, ZoneId.of(\"Europe/Berlin\"));\r\n\r\nassertThat(DateTimeComparisonUtils.\r\n  isSameHour(zonedTimestamp, zonedTimestampToCompare), is(true));\r\n```","```\r\nDate firstDate = toDate(LocalDateTime.of(2019, 8, 10, 0, 00, 00));\r\nDate secondDate = toDate(LocalDateTime.of(2019, 8, 15, 0, 00, 00));\r\n\r\nassertThat(firstDate.after(secondDate), is(false));\r\nassertThat(firstDate.before(secondDate), is(true));\r\nassertThat(firstDate.compareTo(secondDate), is(-1));\r\nassertThat(firstDate.equals(secondDate), is(false));\r\n```","```\r\npublic static boolean isSameDay(Date date, Date dateToCompare) {\r\n    return DateUtils.isSameDay(date, dateToCompare);\r\n}\r\n\r\npublic static boolean isSameHour(Date date, Date dateToCompare) {\r\n    return DateUtils.truncatedEquals(date, dateToCompare, Calendar.HOUR);\r\n}\r\n```"]