["```\r\nAtomicStampedReference<Integer> account = new AtomicStampedReference<>(100, 0);\r\n```","```\r\nif (!account.compareAndSet(balance, balance + 100, stamp, stamp + 1)) {\r\n    // retry\r\n}\r\n```","```\r\npublic boolean withdrawal(int funds) {\r\n    int[] stamps = new int[1];\r\n    int current = this.account.get(stamps);\r\n    int newStamp = this.stamp.incrementAndGet();\r\n    return this.account.compareAndSet(current, current - funds, stamps[0], newStamp);\r\n}\r\n```","```\r\npublic boolean deposit(int funds) {\r\n    int[] stamps = new int[1];\r\n    int current = this.account.get(stamps);\r\n    int newStamp = this.stamp.incrementAndGet();\r\n    return this.account.compareAndSet(current, current + funds, stamps[0], newStamp);\r\n}\r\n```","```\r\nint[] stamps = new int[1];\r\nint current = this.account.get(stamps);\r\nint newStamp = this.stamp.incrementAndGet(); \r\n// Thread 1 is paused here\r\n```","```\r\nreturn this.account.compareAndSet(current, current + 100, stamps[0], newStamp);\r\n```","```\r\npublic class ThreadStampedAccountUnitTest {\r\n\r\n    @Test\r\n    public void givenMultiThread_whenStampedAccount_thenSetBalance() throws InterruptedException {\r\n        StampedAccount account = new StampedAccount();\r\n\r\n        Thread t = new Thread(() -> {\r\n            while (!account.deposit(100)) {\r\n                Thread.yield();\r\n            }\r\n        });\r\n        t.start();\r\n\r\n        Thread t2 = new Thread(() -> {\r\n            while (!account.withdrawal(100)) {\r\n                Thread.yield();\r\n            }\r\n        });\r\n        t2.start();\r\n\r\n        t.join(10_000);\r\n        t2.join(10_000);\r\n\r\n        assertFalse(t.isAlive());\r\n        assertFalse(t2.isAlive());\r\n\r\n        assertEquals(0, account.getBalance());\r\n        assertTrue(account.getStamp() > 0);\r\n    }\r\n}\r\n```"]