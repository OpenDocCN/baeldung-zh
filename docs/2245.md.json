["```\r\npublic Set<String> findAllPalindromesUsingBruteForceApproach(String input) {\r\n    Set<String> palindromes = new HashSet<>();\r\n    for (int i = 0; i < input.length(); i++) {\r\n        for (int j = i + 1; j <= input.length(); j++) {\r\n            if (isPalindrome(input.substring(i, j))) {\r\n                palindromes.add(input.substring(i, j));\r\n            }\r\n        }\r\n    }\r\n    return palindromes;\r\n}\r\n```","```\r\nprivate boolean isPalindrome(String input) {\r\n    StringBuilder plain = new StringBuilder(input);\r\n    StringBuilder reverse = plain.reverse();\r\n    return (reverse.toString()).equals(input);\r\n}\r\n```","```\r\npublic Set<String> findAllPalindromesUsingCenter(String input) {\r\n    Set<String> palindromes = new HashSet<>();\r\n    for (int i = 0; i < input.length(); i++) {\r\n        palindromes.addAll(findPalindromes(input, i, i + 1));\r\n        palindromes.addAll(findPalindromes(input, i, i));\r\n    }\r\n    return palindromes;\r\n}\r\n```","```\r\nprivate Set<String> findPalindromes(String input, int low, int high) {\r\n    Set<String> result = new HashSet<>();\r\n    while (low >= 0 && high < input.length() && input.charAt(low) == input.charAt(high)) {\r\n        result.add(input.substring(low, high + 1));\r\n        low--;\r\n        high++;\r\n    }\r\n    return result;\r\n}\r\n```","```\r\nString formattedInput = \"@\" + input + \"#\";\r\nchar inputCharArr[] = formattedInput.toCharArray();\r\n```","```\r\nint radius[][] = new int[2][input.length() + 1];\r\n```","```\r\nSet<String> palindromes = new HashSet<>();\r\nint max;\r\nfor (int j = 0; j <= 1; j++) {\r\n    radius[j][0] = max = 0;\r\n    int i = 1;\r\n    while (i <= input.length()) {\r\n        palindromes.add(Character.toString(inputCharArr[i]));\r\n        while (inputCharArr[i - max - 1] == inputCharArr[i + j + max])\r\n            max++;\r\n        radius[j][i] = max;\r\n        int k = 1;\r\n        while ((radius[j][i - k] != max - k) && (k < max)) {\r\n            radius[j][i + k] = Math.min(radius[j][i - k], max - k);\r\n            k++;\r\n        }\r\n        max = Math.max(max - k, 0);\r\n        i += k;\r\n    }\r\n}\r\n```","```\r\nfor (int i = 1; i <= input.length(); i++) {\r\n    for (int j = 0; j <= 1; j++) {\r\n        for (max = radius[j][i]; max > 0; max--) {\r\n            palindromes.add(input.substring(i - max - 1, max + j + i - 1));\r\n        }\r\n    }\r\n}\r\n```"]