["```\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <version>1.17.3</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\nspring.datasource.driver-class-name=org.testcontainers.jdbc.ContainerDatabaseDriver\r\nspring.jpa.hibernate.ddl-auto=create\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\n@ContextConfiguration(initializers = {UserRepositoryTCIntegrationTest.Initializer.class})\r\npublic class UserRepositoryTCIntegrationTest extends UserRepositoryCommonIntegrationTests {\r\n\r\n    @ClassRule\r\n    public static PostgreSQLContainer postgreSQLContainer = new PostgreSQLContainer(\"postgres:11.1\")\r\n      .withDatabaseName(\"integration-tests-db\")\r\n      .withUsername(\"sa\")\r\n      .withPassword(\"sa\");\r\n\r\n    static class Initializer\r\n      implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n        public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\r\n            TestPropertyValues.of(\r\n              \"spring.datasource.url=\" + postgreSQLContainer.getJdbcUrl(),\r\n              \"spring.datasource.username=\" + postgreSQLContainer.getUsername(),\r\n              \"spring.datasource.password=\" + postgreSQLContainer.getPassword()\r\n            ).applyTo(configurableApplicationContext.getEnvironment());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Modifying\r\n@Query(\"update User u set u.status = :status where u.name = :name\")\r\nint updateUserSetStatusForName(@Param(\"status\") Integer status, \r\n  @Param(\"name\") String name);\r\n\r\n@Modifying\r\n@Query(value = \"UPDATE Users u SET u.status = ? WHERE u.name = ?\", \r\n  nativeQuery = true)\r\nint updateUserSetStatusForNameNative(Integer status, String name);\r\n```","```\r\n@Test\r\n@Transactional\r\npublic void givenUsersInDB_WhenUpdateStatusForNameModifyingQueryAnnotationJPQL_ThenModifyMatchingUsers(){\r\n    insertUsers();\r\n    int updatedUsersSize = userRepository.updateUserSetStatusForName(0, \"SAMPLE\");\r\n    assertThat(updatedUsersSize).isEqualTo(2);\r\n}\r\n\r\n@Test\r\n@Transactional\r\npublic void givenUsersInDB_WhenUpdateStatusForNameModifyingQueryAnnotationNative_ThenModifyMatchingUsers(){\r\n    insertUsers();\r\n    int updatedUsersSize = userRepository.updateUserSetStatusForNameNative(0, \"SAMPLE\");\r\n    assertThat(updatedUsersSize).isEqualTo(2);\r\n}\r\n\r\nprivate void insertUsers() {\r\n    userRepository.save(new User(\"SAMPLE\", \"[[email protected]](/web/20220926190100/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 1));\r\n    userRepository.save(new User(\"SAMPLE1\", \"em[[email protected]](/web/20220926190100/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 1));\r\n    userRepository.save(new User(\"SAMPLE\", \"[[email protected]](/web/20220926190100/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 1));\r\n    userRepository.save(new User(\"SAMPLE3\", \"[[email protected]](/web/20220926190100/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 1));\r\n    userRepository.flush();\r\n}\r\n```","```\r\nCaused by: org.postgresql.util.PSQLException: ERROR: column \"u\" of relation \"users\" does not exist\r\n```","```\r\n@Modifying\r\n@Query(value = \"UPDATE Users u SET status = ? WHERE u.name = ?\", \r\n  nativeQuery = true)\r\nint updateUserSetStatusForNameNative(Integer status, String name);\r\n```","```\r\nspring.datasource.url=jdbc:tc:postgresql:11.1:///integration-tests-db\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = Application.class)\r\npublic class UserRepositoryTCJdbcLiveTest extends UserRepositoryCommon {\r\n\r\n    @Test\r\n    @Transactional\r\n    public void givenUsersInDB_WhenUpdateStatusForNameModifyingQueryAnnotationNative_ThenModifyMatchingUsers() {\r\n        // same as above\r\n    }\r\n}\r\n```","```\r\npublic class BaeldungPostgresqlContainer extends PostgreSQLContainer<BaeldungPostgresqlContainer> {\r\n    private static final String IMAGE_VERSION = \"postgres:11.1\";\r\n    private static BaeldungPostgresqlContainer container;\r\n\r\n    private BaeldungPostgresqlContainer() {\r\n        super(IMAGE_VERSION);\r\n    }\r\n\r\n    public static BaeldungPostgresqlContainer getInstance() {\r\n        if (container == null) {\r\n            container = new BaeldungPostgresqlContainer();\r\n        }\r\n        return container;\r\n    }\r\n\r\n    @Override\r\n    public void start() {\r\n        super.start();\r\n        System.setProperty(\"DB_URL\", container.getJdbcUrl());\r\n        System.setProperty(\"DB_USERNAME\", container.getUsername());\r\n        System.setProperty(\"DB_PASSWORD\", container.getPassword());\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        //do nothing, JVM handles shut down\r\n    }\r\n}\r\n```","```\r\nspring.datasource.url=${DB_URL}\r\nspring.datasource.username=${DB_USERNAME}\r\nspring.datasource.password=${DB_PASSWORD}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class UserRepositoryTCAutoIntegrationTest {\r\n\r\n    @ClassRule\r\n    public static PostgreSQLContainer postgreSQLContainer = BaeldungPostgresqlContainer.getInstance();\r\n\r\n    // tests\r\n}\r\n```"]