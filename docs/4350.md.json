["```\r\n<dependency>           \r\n    <groupId>com.insightfullogic</groupId>\r\n    <artifactId>lambda-behave</artifactId>\r\n    <version>0.4</version>\r\n</dependency> \r\n```","```\r\npublic class Calculator {\r\n\r\n    public int add() {\r\n        return this.x + this.y;\r\n    }\r\n\r\n    public int divide(int a, int b) {\r\n        if (b == 0) {\r\n            throw new ArithmeticException();\r\n        }\r\n        return a / b;\r\n    }\r\n}\r\n```","```\r\n{\r\n    Suite.describe(\"Lambda behave example tests\", it -> {\r\n        it.isSetupWith(() -> {\r\n            calculator = new Calculator(1, 2);\r\n        });\r\n\r\n        it.should(\"Add the given numbers\", expect -> {\r\n            expect.that(calculator.add()).is(3);\r\n        });\r\n}\r\n```","```\r\nit.should(\"Throw an exception if divide by 0\", expect -> {\r\n    expect.exception(ArithmeticException.class, () -> {\r\n        calculator.divide(1, 0);\r\n    });\r\n});\r\n```","```\r\npublic int add(int a, int b) {\r\n    return a + b;\r\n}\r\n```","```\r\nit.uses(2, 3, 5)\r\n  .and(23, 10, 33)\r\n  .toShow(\"%d + %d = %d\", (expect, a, b, c) -> {\r\n    expect.that(calculator.add(a, b)).is(c);\r\n});\r\n```","```\r\n0: 2 + 3 = 5 (seed: 42562700892554)(Lambda behave example tests)\r\n1: 23 + 10 = 33 (seed: 42562700892554)(Lambda behave example tests)\r\n```","```\r\nit.requires(2)\r\n  .example(Generator.asciiStrings())\r\n  .toShow(\"Reversing a String twice returns the original String\", \r\n    (expect, str) -> {\r\n        String same = new StringBuilder(str)\r\n          .reverse().reverse().toString();\r\n        expect.that(same).isEqualTo(str);\r\n   });\r\n```","```\r\n0: Reversing a String twice returns the original String(ljL+qz2) \r\n  (seed: 42562700892554)(Lambda behave example tests)\r\n1: Reversing a String twice returns the original String(g) \r\n  (seed: 42562700892554)(Lambda behave example tests)\r\n```","```\r\n it.requires(2)\r\n   .withSource(SourceGenerator.deterministicNumbers(42562700892554L))\r\n   .example(Generator.asciiStrings())\r\n   .toShow(\"Reversing a String twice returns the original String\", \r\n     (expect, str) -> {\r\n       String same = new StringBuilder(str).reverse()\r\n         .reverse()\r\n         .toString();\r\n       expect.that(same).isEqualTo(str);\r\n});\r\n```"]