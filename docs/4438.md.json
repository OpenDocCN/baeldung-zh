["```\r\n<dependency>\r\n    <groupId>org.xmlunit</groupId>\r\n    <artifactId>xmlunit-core</artifactId>\r\n    <version>2.2.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.xmlunit</groupId>\r\n    <artifactId>xmlunit-matchers</artifactId>\r\n    <version>2.2.1</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void given2XMLS_whenIdentical_thenCorrect() {\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    assertThat(testXml, CompareMatcher.isIdenticalTo(controlXml));\r\n}\r\n```","```\r\n@Test\r\npublic void given2XMLSWithSimilarNodesButDifferentSequence_whenNotIdentical_thenCorrect() {\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n    assertThat(testXml, assertThat(testXml, not(isIdenticalTo(controlXml)));\r\n}\r\n```","```\r\n@Test\r\npublic void given2XMLS_whenGeneratesDifferences_thenCorrect(){\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n    Diff myDiff = DiffBuilder.compare(controlXml).withTest(testXml).build();\r\n\r\n    Iterator<Difference> iter = myDiff.getDifferences().iterator();\r\n    int size = 0;\r\n    while (iter.hasNext()) {\r\n        iter.next().toString();\r\n        size++;\r\n    }\r\n    assertThat(size, greaterThan(1));\r\n}\r\n```","```\r\nExpected element tag name 'int' but was 'boolean' - \r\n  comparing <int...> at /struct[1]/int[1] to <boolean...> \r\n    at /struct[1]/boolean[1] (DIFFERENT)\r\nExpected text value '3' but was 'false' - \r\n  comparing <int ...>3</int> at /struct[1]/int[1]/text()[1] to \r\n    <boolean ...>false</boolean> at /struct[1]/boolean[1]/text()[1] (DIFFERENT)\r\nExpected element tag name 'boolean' but was 'int' - \r\n  comparing <boolean...> at /struct[1]/boolean[1] \r\n    to <int...> at /struct[1]/int[1] (DIFFERENT)\r\nExpected text value 'false' but was '3' - \r\n  comparing <boolean ...>false</boolean> at /struct[1]/boolean[1]/text()[1] \r\n    to <int ...>3</int> at /struct[1]/int[1]/text()[1] (DIFFERENT)\r\n```","```\r\n@Test\r\npublic void given2XMLS_whenGeneratesOneDifference_thenCorrect(){\r\n    String myControlXML = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String myTestXML = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n\r\n    Diff myDiff = DiffBuilder\r\n      .compare(myControlXML)\r\n      .withTest(myTestXML)\r\n      .withComparisonController(ComparisonControllers.StopWhenDifferent)\r\n       .build();\r\n\r\n    Iterator<Difference> iter = myDiff.getDifferences().iterator();\r\n    int size = 0;\r\n    while (iter.hasNext()) {\r\n        iter.next().toString();\r\n        size++;\r\n    }\r\n    assertThat(size, equalTo(1));\r\n}\r\n```","```\r\nExpected element tag name 'int' but was 'boolean' - \r\n  comparing <int...> at /struct[1]/int[1] \r\n    to <boolean...> at /struct[1]/boolean[1] (DIFFERENT)\r\n```","```\r\n@Test\r\npublic void givenFileSource_whenAbleToInput_thenCorrect() {\r\n    ClassLoader classLoader = getClass().getClassLoader();\r\n    String testPath = classLoader.getResource(\"test.xml\").getPath();\r\n    String controlPath = classLoader.getResource(\"control.xml\").getPath();\r\n\r\n    assertThat(\r\n      Input.fromFile(testPath), isSimilarTo(Input.fromFile(controlPath)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringSource_whenAbleToInput_thenCorrect() {\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n\r\n    assertThat(\r\n      Input.fromString(testXml),isSimilarTo(Input.fromString(controlXml)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStreamAsSource_whenAbleToInput_thenCorrect() {\r\n    assertThat(Input.fromStream(XMLUnitTests.class\r\n      .getResourceAsStream(\"/test.xml\")),\r\n        isSimilarTo(\r\n          Input.fromStream(XMLUnitTests.class\r\n            .getResourceAsStream(\"/control.xml\"))));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileSourceAsObject_whenAbleToInput_thenCorrect() {\r\n    ClassLoader classLoader = getClass().getClassLoader();\r\n\r\n    assertThat(\r\n      Input.from(new File(classLoader.getResource(\"test.xml\").getFile())), \r\n      isSimilarTo(Input.from(new File(classLoader.getResource(\"control.xml\").getFile()))));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringSourceAsObject_whenAbleToInput_thenCorrect() {\r\n    assertThat(\r\n      Input.from(\"<struct><int>3</int><boolean>false</boolean></struct>\"),\r\n      isSimilarTo(Input.from(\"<struct><int>3</int><boolean>false</boolean></struct>\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStreamAsObject_whenAbleToInput_thenCorrect() {\r\n    assertThat(\r\n      Input.from(XMLUnitTest.class.getResourceAsStream(\"/test.xml\")), \r\n      isSimilarTo(Input.from(XMLUnitTest.class.getResourceAsStream(\"/control.xml\"))));\r\n}\r\n```","```\r\n@Test\r\npublic void given2XMLS_whenSimilar_thenCorrect() {\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n\r\n    assertThat(testXml, isSimilarTo(controlXml));\r\n}\r\n```","```\r\njava.lang.AssertionError: \r\nExpected: Expected element tag name 'int' but was 'boolean' - \r\n  comparing <int...> at /struct[1]/int[1] to <boolean...> at /struct[1]/boolean[1]:\r\n<int>3</int>\r\n   but: result was: \r\n<boolean>false</boolean>\r\n```","```\r\n@Test\r\npublic void given2XMLS_whenSimilar_thenCorrect() {\r\n    String controlXml = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String testXml = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n\r\n    assertThat(testXml, \r\n      isSimilarTo(controlXml).withNodeMatcher(\r\n      new DefaultNodeMatcher(ElementSelectors.byName)));\r\n}\r\n```","```\r\n@Test\r\npublic void given2XMLs_whenSimilarWithDiff_thenCorrect() throws Exception {\r\n    String myControlXML = \"<struct><int>3</int><boolean>false</boolean></struct>\";\r\n    String myTestXML = \"<struct><boolean>false</boolean><int>3</int></struct>\";\r\n    Diff myDiffSimilar = DiffBuilder.compare(myControlXML).withTest(myTestXML)\r\n      .withNodeMatcher(new DefaultNodeMatcher(ElementSelectors.byName))\r\n      .checkForSimilar().build();\r\n\r\n    assertFalse(\"XML similar \" + myDiffSimilar.toString(),\r\n      myDiffSimilar.hasDifferences());\r\n}\r\n```","```\r\n<a>\r\n    <b attr=\"abc\">\r\n    </b>\r\n</a>\r\n```","```\r\n<a>\r\n    <b attr=\"xyz\">\r\n    </b>\r\n</a>\r\n```","```\r\n@Test\r\npublic void given2XMLsWithDifferences_whenTestsDifferentWithoutDifferenceEvaluator_thenCorrect(){\r\n    final String control = \"<a><b attr=\\\"abc\\\"></b></a>\";\r\n    final String test = \"<a><b attr=\\\"xyz\\\"></b></a>\";\r\n    Diff myDiff = DiffBuilder.compare(control).withTest(test)\r\n      .checkForSimilar().build();\r\n    assertFalse(myDiff.toString(), myDiff.hasDifferences());\r\n}\r\n```","```\r\njava.lang.AssertionError: Expected attribute value 'abc' but was 'xyz' - \r\n  comparing <b attr=\"abc\"...> at /a[1]/b[1]/@attr \r\n  to <b attr=\"xyz\"...> at /a[1]/b[1]/@attr\r\n```","```\r\npublic class IgnoreAttributeDifferenceEvaluator implements DifferenceEvaluator {\r\n    private String attributeName;\r\n    public IgnoreAttributeDifferenceEvaluator(String attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n\r\n    @Override\r\n    public ComparisonResult evaluate(Comparison comparison, ComparisonResult outcome) {\r\n        if (outcome == ComparisonResult.EQUAL)\r\n            return outcome;\r\n        final Node controlNode = comparison.getControlDetails().getTarget();\r\n        if (controlNode instanceof Attr) {\r\n            Attr attr = (Attr) controlNode;\r\n            if (attr.getName().equals(attributeName)) {\r\n                return ComparisonResult.SIMILAR;\r\n            }\r\n        }\r\n        return outcome;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void given2XMLsWithDifferences_whenTestsSimilarWithDifferenceEvaluator_thenCorrect() {\r\n    final String control = \"<a><b attr=\\\"abc\\\"></b></a>\";\r\n    final String test = \"<a><b attr=\\\"xyz\\\"></b></a>\";\r\n    Diff myDiff = DiffBuilder.compare(control).withTest(test)\r\n      .withDifferenceEvaluator(new IgnoreAttributeDifferenceEvaluator(\"attr\"))\r\n      .checkForSimilar().build();\r\n\r\n    assertFalse(myDiff.toString(), myDiff.hasDifferences());\r\n}\r\n```","```\r\nValidator v = Validator.forLanguage(Languages.W3C_XML_SCHEMA_NS_URI);\r\n```","```\r\n<?xml version = \"1.0\"?>\r\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\r\n    <xs:element name='class'>\r\n        <xs:complexType>\r\n            <xs:sequence>\r\n                <xs:element name='student' type='StudentObject'\r\n                   minOccurs='0' maxOccurs='unbounded' />\r\n            </xs:sequence>\r\n        </xs:complexType>\r\n    </xs:element>\r\n    <xs:complexType name=\"StudentObject\">\r\n        <xs:sequence>\r\n            <xs:element name=\"name\" type=\"xs:string\" />\r\n            <xs:element name=\"age\" type=\"xs:positiveInteger\" />\r\n        </xs:sequence>\r\n        <xs:attribute name='id' type='xs:positiveInteger' />\r\n    </xs:complexType>\r\n</xs:schema>\r\n```","```\r\n<?xml version = \"1.0\"?>\r\n<class>\r\n    <student id=\"393\">\r\n        <name>Rajiv</name>\r\n        <age>18</age>\r\n    </student>\r\n    <student id=\"493\">\r\n        <name>Candie</name>\r\n        <age>19</age>\r\n    </student>\r\n</class>\r\n```","```\r\n@Test\r\npublic void givenXml_whenValidatesAgainstXsd_thenCorrect() {\r\n    Validator v = Validator.forLanguage(Languages.W3C_XML_SCHEMA_NS_URI);\r\n    v.setSchemaSource(Input.fromStream(\r\n      XMLUnitTests.class.getResourceAsStream(\"/students.xsd\")).build());\r\n    ValidationResult r = v.validateInstance(Input.fromStream(\r\n      XMLUnitTests.class.getResourceAsStream(\"/students.xml\")).build());\r\n    Iterator<ValidationProblem> probs = r.getProblems().iterator();\r\n    while (probs.hasNext()) {\r\n        probs.next().toString();\r\n    }\r\n    assertTrue(r.isValid());\r\n}\r\n```","```\r\n<?xml version = \"1.0\"?>\r\n<class>\r\n    <studet id=\"393\">\r\n        <name>Rajiv</name>\r\n        <age>18</age>\r\n    </student>\r\n    <studet id=\"493\">\r\n        <name>Candie</name>\r\n        <age>19</age>\r\n    </student>\r\n</class>\r\n```","```\r\n@Test\r\npublic void givenXmlWithErrors_whenReturnsValidationProblems_thenCorrect() {\r\n    Validator v = Validator.forLanguage(Languages.W3C_XML_SCHEMA_NS_URI);\r\n    v.setSchemaSource(Input.fromStream(\r\n       XMLUnitTests.class.getResourceAsStream(\"/students.xsd\")).build());\r\n    ValidationResult r = v.validateInstance(Input.fromStream(\r\n      XMLUnitTests.class.getResourceAsStream(\"/students_with_error.xml\")).build());\r\n    Iterator<ValidationProblem> probs = r.getProblems().iterator();\r\n    int count = 0;\r\n    while (probs.hasNext()) {\r\n        count++;\r\n        probs.next().toString();\r\n    }\r\n    assertTrue(count > 0);\r\n}\r\n```","```\r\nValidationProblem { line=3, column=19, type=ERROR,message='cvc-complex-type.2.4.a: \r\n  Invalid content was found starting with element 'studet'. \r\n    One of '{student}' is expected.' }\r\nValidationProblem { line=6, column=4, type=ERROR, message='The element type \"studet\" \r\n  must be terminated by the matching end-tag \"</studet>\".' }\r\nValidationProblem { line=6, column=4, type=ERROR, message='The element type \"studet\" \r\n  must be terminated by the matching end-tag \"</studet>\".' }\r\n```","```\r\n<teachers>\r\n    <teacher department=\"science\" id='309'>\r\n        <subject>math</subject>\r\n        <subject>physics</subject>\r\n    </teacher>\r\n    <teacher department=\"arts\" id='310'>\r\n        <subject>political education</subject>\r\n        <subject>english</subject>\r\n    </teacher>\r\n</teachers>\r\n```","```\r\n@Test\r\npublic void givenXPath_whenAbleToRetrieveNodes_thenCorrect() {\r\n    Iterable<Node> i = new JAXPXPathEngine()\r\n      .selectNodes(\"//teacher\", Input.fromFile(new File(\"teachers.xml\")).build());\r\n    assertNotNull(i);\r\n    int count = 0;\r\n    for (Iterator<Node> it = i.iterator(); it.hasNext();) {\r\n        count++;\r\n        Node node = it.next();\r\n        assertEquals(\"teacher\", node.getNodeName());\r\n\r\n        NamedNodeMap map = node.getAttributes();\r\n        assertEquals(\"department\", map.item(0).getNodeName());\r\n        assertEquals(\"id\", map.item(1).getNodeName());\r\n        assertEquals(\"teacher\", node.getNodeName());\r\n    }\r\n    assertEquals(2, count);\r\n}\r\n```","```\r\n@Test\r\npublic void givenXmlSource_whenAbleToValidateExistingXPath_thenCorrect() {\r\n    assertThat(Input.fromFile(new File(\"teachers.xml\")), hasXPath(\"//teachers\"));\r\n    assertThat(Input.fromFile(new File(\"teachers.xml\")), hasXPath(\"//teacher\"));\r\n    assertThat(Input.fromFile(new File(\"teachers.xml\")), hasXPath(\"//subject\"));\r\n    assertThat(Input.fromFile(new File(\"teachers.xml\")), hasXPath(\"//@department\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenXmlSource_whenFailsToValidateInExistentXPath_thenCorrect() {\r\n    assertThat(Input.fromFile(new File(\"teachers.xml\")), not(hasXPath(\"//sujet\")));\r\n}\r\n```"]