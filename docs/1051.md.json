["```\r\nprivate static long BYTE = 1L;\r\nprivate static long KiB = BYTE << 10;\r\nprivate static long MiB = KiB << 10;\r\nprivate static long GiB = MiB << 10;\r\nprivate static long TiB = GiB << 10;\r\nprivate static long PiB = TiB << 10;\r\nprivate static long EiB = PiB << 10; \r\n```","```\r\nprivate static long KB = BYTE * 1000;\r\nprivate static long MB = KB * 1000;\r\nprivate static long GB = MB * 1000;\r\nprivate static long TB = GB * 1000;\r\nprivate static long PB = TB * 1000;\r\nprivate static long EB = PB * 1000;\r\n```","```\r\nprivate static DecimalFormat DEC_FORMAT = new DecimalFormat(\"#.##\");\r\n\r\nprivate static String formatSize(long size, long divider, String unitName) {\r\n    return DEC_FORMAT.format((double) size / divider) + \" \" + unitName;\r\n} \r\n```","```\r\npublic static String toHumanReadableBinaryPrefixes(long size) {\r\n    if (size < 0)\r\n        throw new IllegalArgumentException(\"Invalid file size: \" + size);\r\n    if (size >= EiB) return formatSize(size, EiB, \"EiB\");\r\n    if (size >= PiB) return formatSize(size, PiB, \"PiB\");\r\n    if (size >= TiB) return formatSize(size, TiB, \"TiB\");\r\n    if (size >= GiB) return formatSize(size, GiB, \"GiB\");\r\n    if (size >= MiB) return formatSize(size, MiB, \"MiB\");\r\n    if (size >= KiB) return formatSize(size, KiB, \"KiB\");\r\n    return formatSize(size, BYTE, \"Bytes\");\r\n} \r\n```","```\r\npublic static String toHumanReadableSIPrefixes(long size) {\r\n    if (size < 0)\r\n        throw new IllegalArgumentException(\"Invalid file size: \" + size);\r\n    if (size >= EB) return formatSize(size, EB, \"EB\");\r\n    if (size >= PB) return formatSize(size, PB, \"PB\");\r\n    if (size >= TB) return formatSize(size, TB, \"TB\");\r\n    if (size >= GB) return formatSize(size, GB, \"GB\");\r\n    if (size >= MB) return formatSize(size, MB, \"MB\");\r\n    if (size >= KB) return formatSize(size, KB, \"KB\");\r\n    return formatSize(size, BYTE, \"Bytes\");\r\n} \r\n```","```\r\nprivate static Map<Long, String> DATA_MAP_BINARY_PREFIXES = new HashMap<Long, String>() {{\r\n    put(0L, \"0 Bytes\");\r\n    put(1023L, \"1023 Bytes\");\r\n    put(1024L, \"1 KiB\");\r\n    put(12_345L, \"12.06 KiB\");\r\n    put(10_123_456L, \"9.65 MiB\");\r\n    put(10_123_456_798L, \"9.43 GiB\");\r\n    put(1_777_777_777_777_777_777L, \"1.54 EiB\");\r\n}}; \r\n```","```\r\nprivate final static Map<Long, String> DATA_MAP_SI_PREFIXES = new HashMap<Long, String>() {{\r\n    put(0L, \"0 Bytes\");\r\n    put(999L, \"999 Bytes\");\r\n    put(1000L, \"1 KB\");\r\n    put(12_345L, \"12.35 KB\");\r\n    put(10_123_456L, \"10.12 MB\");\r\n    put(10_123_456_798L, \"10.12 GB\");\r\n    put(1_777_777_777_777_777_777L, \"1.78 EB\");\r\n}};\r\n```","```\r\nDATA_MAP.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadable(in)));\r\n```","```\r\nenum SizeUnitBinaryPrefixes {\r\n    Bytes(1L),\r\n    KiB(Bytes.unitBase << 10),\r\n    MiB(KiB.unitBase << 10),\r\n    GiB(MiB.unitBase << 10),\r\n    TiB(GiB.unitBase << 10),\r\n    PiB(TiB.unitBase << 10),\r\n    EiB(PiB.unitBase << 10);\r\n\r\n    private final Long unitBase;\r\n\r\n    public static List<SizeUnitBinaryPrefixes> unitsInDescending() {\r\n        List<SizeUnitBinaryPrefixes> list = Arrays.asList(values());\r\n        Collections.reverse(list);\r\n        return list;\r\n    }\r\n   //getter and constructor are omitted\r\n} \r\n```","```\r\nenum SizeUnitSIPrefixes {\r\n    Bytes(1L),\r\n    KB(Bytes.unitBase * 1000),\r\n    MB(KB.unitBase * 1000),\r\n    GB(MB.unitBase * 1000),\r\n    TB(GB.unitBase * 1000),\r\n    PB(TB.unitBase * 1000),\r\n    EB(PB.unitBase * 1000);\r\n\r\n    private final Long unitBase;\r\n\r\n    public static List<SizeUnitSIPrefixes> unitsInDescending() {\r\n        List<SizeUnitSIPrefixes> list = Arrays.asList(values());\r\n        Collections.reverse(list);\r\n        return list;\r\n     }\r\n    //getter and constructor are omitted\r\n}\r\n```","```\r\npublic static String toHumanReadableWithEnum(long size) {\r\n    List<SizeUnit> units = SizeUnit.unitsInDescending();\r\n    if (size < 0) {\r\n        throw new IllegalArgumentException(\"Invalid file size: \" + size);\r\n    }\r\n    String result = null;\r\n    for (SizeUnit unit : units) {\r\n        if (size >= unit.getUnitBase()) {\r\n            result = formatSize(size, unit.getUnitBase(), unit.name());\r\n            break;\r\n        }\r\n    }\r\n    return result == null ? formatSize(size, SizeUnit.Bytes.getUnitBase(), SizeUnit.Bytes.name()) : result;\r\n} \r\n```","```\r\nDATA_MAP.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableWithEnum(in)));\r\n```","```\r\n1L  = 00... (63 zeros in total) ..            0001 -> Long.numberOfLeadingZeros(1L) = 63\r\n1024L = 00... (53 zeros in total) .. 0100 0000 0000 -> Long.numberOfLeadingZeros(1024L) = 53\r\n```","```\r\nIndex  Unit\tnumberOfLeadingZeros(unit.baseValue)\r\n----------------------------------------------------\r\n0      Byte\t63\r\n1      KiB  \t53\r\n2      MiB  \t43\r\n3      GiB  \t33\r\n4      TiB  \t23\r\n5      PiB  \t13\r\n6      EiB       3 \r\n```","```\r\nif 4096 < 1024 (Byte's base value)  -> Byte \r\nelse:\r\n    numberOfLeadingZeros(4096) = 51\r\n    unitIdx = (numberOfLeadingZeros(1) - 51) / 10 = (63 - 51) / 10 = 1\r\n    unitIdx = 1  -> KB (Found the unit)\r\n    unitBase = 1 << (unitIdx * 10) = 1 << 10 = 1024\r\n```","```\r\npublic static String toHumanReadableByNumOfLeadingZeros(long size) {\r\n    if (size < 0) {\r\n        throw new IllegalArgumentException(\"Invalid file size: \" + size);\r\n    }\r\n    if (size < 1024) return size + \" Bytes\";\r\n    int unitIdx = (63 - Long.numberOfLeadingZeros(size)) / 10;\r\n    return formatSize(size, 1L << (unitIdx * 10), \" KMGTPE\".charAt(unitIdx) + \"iB\");\r\n} \r\n```","```\r\nDATA_MAP.forEach((in, expected) -> Assert.assertEquals(expected, FileSizeFormatUtil.toHumanReadableByNumOfLeadingZeros(in)));\r\n```","```\r\nDATA_MAP.forEach((in, expected) -> System.out.println(in + \" bytes -> \" + FileUtils.byteCountToDisplaySize(in)));\r\n```","```\r\n0 bytes -> 0 bytes\r\n1024 bytes -> 1 KB\r\n1777777777777777777 bytes -> 1 EB\r\n12345 bytes -> 12 KB\r\n10123456 bytes -> 9 MB\r\n10123456798 bytes -> 9 GB\r\n1023 bytes -> 1023 bytes\r\n```"]