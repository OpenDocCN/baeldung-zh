["```\r\npublic interface ClusterService {\r\n    Bucket openBucket(String name, String password);\r\n}\r\n```","```\r\n@Service\r\npublic class ClusterServiceImpl implements ClusterService {\r\n    private Cluster cluster;\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        CouchbaseEnvironment env = DefaultCouchbaseEnvironment.create();\r\n        cluster = CouchbaseCluster.create(env, \"localhost\");\r\n    }\r\n...\r\n}\r\n```","```\r\nprivate Map<String, Bucket> buckets = new ConcurrentHashMap<>();\r\n\r\n@Override\r\nsynchronized public Bucket openBucket(String name, String password) {\r\n    if(!buckets.containsKey(name)) {\r\n        Bucket bucket = cluster.openBucket(name, password);\r\n        buckets.put(name, bucket);\r\n    }\r\n    return buckets.get(name);\r\n}\r\n```","```\r\npublic interface BucketService {\r\n    Bucket getBucket();\r\n}\r\n```","```\r\n@Service\r\n@Qualifier(\"TutorialBucketService\")\r\npublic class TutorialBucketService implements BucketService {\r\n\r\n    @Autowired\r\n    private ClusterService couchbase;\r\n\r\n    private Bucket bucket;\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        bucket = couchbase.openBucket(\"baeldung-tutorial\", \"\");\r\n    }\r\n\r\n    @Override\r\n    public Bucket getBucket() {\r\n        return bucket;\r\n    }\r\n}\r\n```","```\r\npublic class Person {\r\n\r\n    private String id;\r\n    private String type;\r\n    private String name;\r\n    private String homeTown;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic interface JsonDocumentConverter<T> {\r\n    JsonDocument toDocument(T t);\r\n    T fromDocument(JsonDocument doc);\r\n}\r\n```","```\r\n@Service\r\npublic class PersonDocumentConverter\r\n  implements JsonDocumentConverter<Person> {\r\n    ...\r\n}\r\n```","```\r\n@Override\r\npublic JsonDocument toDocument(Person p) {\r\n    JsonObject content = JsonObject.empty()\r\n            .put(\"type\", \"Person\")\r\n            .put(\"name\", p.getName())\r\n            .put(\"homeTown\", p.getHomeTown());\r\n    return JsonDocument.create(p.getId(), content);\r\n}\r\n```","```\r\n@Override\r\npublic Person fromDocument(JsonDocument doc) {\r\n    JsonObject content = doc.content();\r\n    Person p = new Person();\r\n    p.setId(doc.id());\r\n    p.setType(\"Person\");\r\n    p.setName(content.getString(\"name\"));\r\n    p.setHomeTown(content.getString(\"homeTown\"));\r\n    return p;\r\n}\r\n```","```\r\npublic interface CrudService<T> {\r\n    void create(T t);\r\n    T read(String id);\r\n    T readFromReplica(String id);\r\n    void update(T t);\r\n    void delete(String id);\r\n    boolean exists(String id);\r\n}\r\n```","```\r\n@Service\r\npublic class PersonCrudService implements CrudService<Person> {\r\n\r\n    @Autowired\r\n    private TutorialBucketService bucketService;\r\n\r\n    @Autowired\r\n    private PersonDocumentConverter converter;\r\n\r\n    private Bucket bucket;\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        bucket = bucketService.getBucket();\r\n    }\r\n\r\n    @Override\r\n    public void create(Person person) {\r\n        if(person.getId() == null) {\r\n            person.setId(UUID.randomUUID().toString());\r\n        }\r\n        JsonDocument document = converter.toDocument(person);\r\n        bucket.insert(document);\r\n    }\r\n\r\n    @Override\r\n    public Person read(String id) {\r\n        JsonDocument doc = bucket.get(id);\r\n        return (doc != null ? converter.fromDocument(doc) : null);\r\n    }\r\n\r\n    @Override\r\n    public Person readFromReplica(String id) {\r\n        List<JsonDocument> docs = bucket.getFromReplica(id, ReplicaMode.FIRST);\r\n        return (docs.isEmpty() ? null : converter.fromDocument(docs.get(0)));\r\n    }\r\n\r\n    @Override\r\n    public void update(Person person) {\r\n        JsonDocument document = converter.toDocument(person);\r\n        bucket.upsert(document);\r\n    }\r\n\r\n    @Override\r\n    public void delete(String id) {\r\n        bucket.remove(id);\r\n    }\r\n\r\n    @Override\r\n    public boolean exists(String id) {\r\n        return bucket.exists(id);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class RegistrationService {\r\n\r\n    @Autowired\r\n    private PersonCrudService crud;\r\n\r\n    public void registerNewPerson(String name, String homeTown) {\r\n        Person person = new Person();\r\n        person.setName(name);\r\n        person.setHomeTown(homeTown);\r\n        crud.create(person);\r\n    }\r\n\r\n    public Person findRegistrant(String id) {\r\n        try{\r\n            return crud.read(id);\r\n        }\r\n        catch(CouchbaseException e) {\r\n            return crud.readFromReplica(id);\r\n        }\r\n    }\r\n}\r\n```"]