["```\r\nusername, userid, transaction_date, transaction_amount\r\ndevendra, 1234, 31/10/2015, 10000\r\njohn, 2134, 3/12/2015, 12321\r\nrobin, 2134, 2/02/2015, 23411\r\n```","```\r\n<!-- SQLite database driver -->\r\n<dependency>\r\n    <groupId>org.xerial</groupId>\r\n    <artifactId>sqlite-jdbc</artifactId>\r\n    <version>3.15.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-oxm</artifactId>\r\n    <version>5.3.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jdbc</artifactId>\r\n    <version>5.3.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.batch</groupId>\r\n    <artifactId>spring-batch-core</artifactId>\r\n    <version>4.3.0</version>\r\n</dependency>\r\n```","```\r\n<!-- connect to SQLite database -->\r\n<bean id=\"dataSource\"\r\n  class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\r\n    <property name=\"driverClassName\" value=\"org.sqlite.JDBC\" />\r\n    <property name=\"url\" value=\"jdbc:sqlite:repository.sqlite\" />\r\n    <property name=\"username\" value=\"\" />\r\n    <property name=\"password\" value=\"\" />\r\n</bean>\r\n\r\n<!-- create job-meta tables automatically -->\r\n<jdbc:initialize-database data-source=\"dataSource\">\r\n    <jdbc:script\r\n      location=\"org/springframework/batch/core/schema-drop-sqlite.sql\" />\r\n    <jdbc:script location=\"org/springframework/batch/core/schema-sqlite.sql\" />\r\n</jdbc:initialize-database>\r\n\r\n<!-- stored job-meta in memory -->\r\n<!-- \r\n<bean id=\"jobRepository\" \r\n  class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\"> \r\n    <property name=\"transactionManager\" ref=\"transactionManager\" />\r\n</bean> \r\n-->\r\n\r\n<!-- stored job-meta in database -->\r\n<bean id=\"jobRepository\"\r\n  class=\"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\">\r\n    <property name=\"dataSource\" ref=\"dataSource\" />\r\n    <property name=\"transactionManager\" ref=\"transactionManager\" />\r\n    <property name=\"databaseType\" value=\"sqlite\" />\r\n</bean>\r\n\r\n<bean id=\"transactionManager\" class=\r\n  \"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" />\r\n\r\n<bean id=\"jobLauncher\"\r\n  class=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\">\r\n    <property name=\"jobRepository\" ref=\"jobRepository\" />\r\n</bean>\r\n```","```\r\n@Configuration\r\n@EnableBatchProcessing\r\n@Profile(\"spring\")\r\npublic class SpringConfig {\r\n\r\n    @Value(\"org/springframework/batch/core/schema-drop-sqlite.sql\")\r\n    private Resource dropReopsitoryTables;\r\n\r\n    @Value(\"org/springframework/batch/core/schema-sqlite.sql\")\r\n    private Resource dataReopsitorySchema;\r\n\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\"org.sqlite.JDBC\");\r\n        dataSource.setUrl(\"jdbc:sqlite:repository.sqlite\");\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean\r\n    public DataSourceInitializer dataSourceInitializer(DataSource dataSource)\r\n      throws MalformedURLException {\r\n        ResourceDatabasePopulator databasePopulator = \r\n          new ResourceDatabasePopulator();\r\n\r\n        databasePopulator.addScript(dropReopsitoryTables);\r\n        databasePopulator.addScript(dataReopsitorySchema);\r\n        databasePopulator.setIgnoreFailedDrops(true);\r\n\r\n        DataSourceInitializer initializer = new DataSourceInitializer();\r\n        initializer.setDataSource(dataSource);\r\n        initializer.setDatabasePopulator(databasePopulator);\r\n\r\n        return initializer;\r\n    }\r\n\r\n    private JobRepository getJobRepository() throws Exception {\r\n        JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();\r\n        factory.setDataSource(dataSource());\r\n        factory.setTransactionManager(getTransactionManager());\r\n        factory.afterPropertiesSet();\r\n        return (JobRepository) factory.getObject();\r\n    }\r\n\r\n    private PlatformTransactionManager getTransactionManager() {\r\n        return new ResourcelessTransactionManager();\r\n    }\r\n\r\n    public JobLauncher getJobLauncher() throws Exception {\r\n        SimpleJobLauncher jobLauncher = new SimpleJobLauncher();\r\n        jobLauncher.setJobRepository(getJobRepository());\r\n        jobLauncher.afterPropertiesSet();\r\n        return jobLauncher;\r\n    }\r\n}\r\n```","```\r\n<import resource=\"spring.xml\" />\r\n\r\n<bean id=\"record\" class=\"com.baeldung.spring_batch_intro.model.Transaction\"></bean>\r\n<bean id=\"itemReader\"\r\n  class=\"org.springframework.batch.item.file.FlatFileItemReader\">\r\n\r\n    <property name=\"resource\" value=\"input/record.csv\" />\r\n\r\n    <property name=\"lineMapper\">\r\n        <bean class=\"org.springframework.batch.item.file.mapping.DefaultLineMapper\">\r\n            <property name=\"lineTokenizer\">\r\n                <bean class=\r\n                  \"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\">\r\n                    <property name=\"names\" value=\"username,userid,transactiondate,amount\" />\r\n                </bean>\r\n            </property>\r\n            <property name=\"fieldSetMapper\">\r\n                <bean class=\"com.baeldung.spring_batch_intro.service.RecordFieldSetMapper\" />\r\n            </property>\r\n        </bean>\r\n    </property>\r\n</bean>\r\n\r\n<bean id=\"itemProcessor\"\r\n  class=\"com.baeldung.spring_batch_intro.service.CustomItemProcessor\" />\r\n\r\n<bean id=\"itemWriter\"\r\n  class=\"org.springframework.batch.item.xml.StaxEventItemWriter\">\r\n    <property name=\"resource\" value=\"file:xml/output.xml\" />\r\n    <property name=\"marshaller\" ref=\"recordMarshaller\" />\r\n    <property name=\"rootTagName\" value=\"transactionRecord\" />\r\n</bean>\r\n\r\n<bean id=\"recordMarshaller\" class=\"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\r\n    <property name=\"classesToBeBound\">\r\n        <list>\r\n            <value>com.baeldung.spring_batch_intro.model.Transaction</value>\r\n        </list>\r\n    </property>\r\n</bean>\r\n<batch:job id=\"firstBatchJob\">\r\n    <batch:step id=\"step1\">\r\n        <batch:tasklet>\r\n            <batch:chunk reader=\"itemReader\" writer=\"itemWriter\"\r\n              processor=\"itemProcessor\" commit-interval=\"10\">\r\n            </batch:chunk>\r\n        </batch:tasklet>\r\n    </batch:step>\r\n</batch:job>\r\n```","```\r\n@Profile(\"spring\")\r\npublic class SpringBatchConfig {\r\n\r\n    @Autowired\r\n    private JobBuilderFactory jobs;\r\n\r\n    @Autowired\r\n    private StepBuilderFactory steps;\r\n\r\n    @Value(\"input/record.csv\")\r\n    private Resource inputCsv;\r\n\r\n    @Value(\"file:xml/output.xml\")\r\n    private Resource outputXml;\r\n\r\n    @Bean\r\n    public ItemReader<Transaction> itemReader()\r\n      throws UnexpectedInputException, ParseException {\r\n        FlatFileItemReader<Transaction> reader = new FlatFileItemReader<Transaction>();\r\n        DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\r\n        String[] tokens = { \"username\", \"userid\", \"transactiondate\", \"amount\" };\r\n        tokenizer.setNames(tokens);\r\n        reader.setResource(inputCsv);\r\n        DefaultLineMapper<Transaction> lineMapper = \r\n          new DefaultLineMapper<Transaction>();\r\n        lineMapper.setLineTokenizer(tokenizer);\r\n        lineMapper.setFieldSetMapper(new RecordFieldSetMapper());\r\n        reader.setLineMapper(lineMapper);\r\n        return reader;\r\n    }\r\n\r\n    @Bean\r\n    public ItemProcessor<Transaction, Transaction> itemProcessor() {\r\n        return new CustomItemProcessor();\r\n    }\r\n\r\n    @Bean\r\n    public ItemWriter<Transaction> itemWriter(Marshaller marshaller)\r\n      throws MalformedURLException {\r\n        StaxEventItemWriter<Transaction> itemWriter = \r\n          new StaxEventItemWriter<Transaction>();\r\n        itemWriter.setMarshaller(marshaller);\r\n        itemWriter.setRootTagName(\"transactionRecord\");\r\n        itemWriter.setResource(outputXml);\r\n        return itemWriter;\r\n    }\r\n\r\n    @Bean\r\n    public Marshaller marshaller() {\r\n        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\r\n        marshaller.setClassesToBeBound(new Class[] { Transaction.class });\r\n        return marshaller;\r\n    }\r\n\r\n    @Bean\r\n    protected Step step1(ItemReader<Transaction> reader,\r\n      ItemProcessor<Transaction, Transaction> processor,\r\n      ItemWriter<Transaction> writer) {\r\n        return steps.get(\"step1\").<Transaction, Transaction> chunk(10)\r\n          .reader(reader).processor(processor).writer(writer).build();\r\n    }\r\n\r\n    @Bean(name = \"firstBatchJob\")\r\n    public Job job(@Qualifier(\"step1\") Step step1) {\r\n        return jobs.get(\"firstBatchJob\").start(step1).build();\r\n    }\r\n}\r\n```","```\r\n@SuppressWarnings(\"restriction\")\r\n@XmlRootElement(name = \"transactionRecord\")\r\npublic class Transaction {\r\n    private String username;\r\n    private int userId;\r\n    private LocalDateTime transactionDate;\r\n    private double amount;\r\n\r\n    /* getters and setters for the attributes */\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Transaction [username=\" + username + \", userId=\" + userId\r\n          + \", transactionDate=\" + transactionDate + \", amount=\" + amount\r\n          + \"]\";\r\n    }\r\n}\r\n```","```\r\npublic class RecordFieldSetMapper implements FieldSetMapper<Transaction> {\r\n\r\n    public Transaction mapFieldSet(FieldSet fieldSet) throws BindException {\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"d/M/yyy\");\r\n        Transaction transaction = new Transaction();\r\n\r\n        transaction.setUsername(fieldSet.readString(\"username\"));\r\n        transaction.setUserId(fieldSet.readInt(1));\r\n        transaction.setAmount(fieldSet.readDouble(3));\r\n        String dateString = fieldSet.readString(2);\r\n        transaction.setTransactionDate(LocalDate.parse(dateString, formatter).atStartOfDay());\r\n        return transaction;\r\n    }\r\n}\r\n```","```\r\npublic class CustomItemProcessor implements ItemProcessor<Transaction, Transaction> {\r\n\r\n    public Transaction process(Transaction item) {\r\n        return item;\r\n    }\r\n}\r\n```","```\r\n<bean id=\"itemWriter\"\r\n  class=\"org.springframework.batch.item.xml.StaxEventItemWriter\">\r\n    <property name=\"resource\" value=\"file:xml/output.xml\" />\r\n    <property name=\"marshaller\" ref=\"recordMarshaller\" />\r\n    <property name=\"rootTagName\" value=\"transactionRecord\" />\r\n</bean>\r\n```","```\r\n<batch:job id=\"firstBatchJob\">\r\n    <batch:step id=\"step1\">\r\n        <batch:tasklet>\r\n            <batch:chunk reader=\"itemReader\" writer=\"itemWriter\"\r\n              processor=\"itemProcessor\" commit-interval=\"10\">\r\n            </batch:chunk>\r\n        </batch:tasklet>\r\n    </batch:step>\r\n</batch:job>\r\n```","```\r\n@Profile(\"spring\")\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        // Spring Java config\r\n        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\r\n        context.register(SpringConfig.class);\r\n        context.register(SpringBatchConfig.class);\r\n        context.refresh();\r\n\r\n        JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\");\r\n        Job job = (Job) context.getBean(\"firstBatchJob\");\r\n        System.out.println(\"Starting the batch job\");\r\n        try {\r\n            JobExecution execution = jobLauncher.run(job, new JobParameters());\r\n            System.out.println(\"Job Status : \" + execution.getStatus());\r\n            System.out.println(\"Job completed\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.out.println(\"Job failed\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-batch</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.7.0</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBatchApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication springApp = new SpringApplication(SpringBatchApplication.class);\r\n        springApp.setAdditionalProfiles(\"spring-boot\");\r\n        springApp.run(args);\r\n    }\r\n\r\n}\r\n```","```\r\n@Configuration\r\n@EnableBatchProcessing\r\n@Profile(\"spring-boot\")\r\npublic class SpringBootBatchConfig {\r\n    @Autowired\r\n    private JobBuilderFactory jobBuilderFactory;\r\n\r\n    @Autowired\r\n    private StepBuilderFactory stepBuilderFactory;\r\n\r\n    @Value(\"input/record.csv\")\r\n    private Resource inputCsv;\r\n\r\n    @Value(\"input/recordWithInvalidData.csv\")\r\n    private Resource invalidInputCsv;\r\n\r\n    @Value(\"file:xml/output.xml\")\r\n    private Resource outputXml;\r\n\r\n    // ...\r\n}\r\n```"]