["```\r\n@Test\r\npublic void whenAssertingEquality_thenEqual() {\r\n    String expected = \"Baeldung\";\r\n    String actual = \"Baeldung\";\r\n\r\n    assertEquals(expected, actual);\r\n}\r\n```","```\r\nassertEquals(\"failure - strings are not equal\", expected, actual);\r\n```","```\r\n@Test\r\npublic void whenAssertingArraysEquality_thenEqual() {\r\n    char[] expected = {'J','u','n','i','t'};\r\n    char[] actual = \"Junit\".toCharArray();\r\n\r\n    assertArrayEquals(expected, actual);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNullArrays_whenAssertingArraysEquality_thenEqual() {\r\n    int[] expected = null;\r\n    int[] actual = null;\r\n\r\n    assertArrayEquals(expected, actual);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssertingNull_thenTrue() {\r\n    Object car = null;\r\n\r\n    assertNull(\"The car should be null\", car);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssertingNotSameObject_thenDifferent() {\r\n    Object cat = new Object();\r\n    Object dog = new Object();\r\n\r\n    assertNotSame(cat, dog);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssertingConditions_thenVerified() {\r\n    assertTrue(\"5 is greater then 4\", 5 > 4);\r\n    assertFalse(\"5 is not greater then 6\", 5 > 6);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingExceptionMessage_thenEqual() {\r\n    try {\r\n        methodThatShouldThrowException();\r\n        fail(\"Exception not thrown\");\r\n    } catch (UnsupportedOperationException e) {\r\n        assertEquals(\"Operation Not Supported\", e.getMessage());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testAssertThatHasItems() {\r\n    assertThat(\r\n      Arrays.asList(\"Java\", \"Kotlin\", \"Scala\"), \r\n      hasItems(\"Java\", \"Kotlin\"));\r\n} \r\n```","```\r\n@Test\r\npublic void whenAssertingArraysEquality_thenEqual() {\r\n    char[] expected = { 'J', 'u', 'p', 'i', 't', 'e', 'r' };\r\n    char[] actual = \"Jupiter\".toCharArray();\r\n\r\n    assertArrayEquals(expected, actual, \"Arrays should be equal\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingEquality_thenEqual() {\r\n    float square = 2 * 2;\r\n    float rectangle = 2 * 2;\r\n\r\n    assertEquals(square, rectangle);\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingEqualityWithDelta_thenEqual() {\r\n    float square = 2 * 2;\r\n    float rectangle = 3 * 2;\r\n    float delta = 2;\r\n\r\n    assertEquals(square, rectangle, delta);\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingConditions_thenVerified() {\r\n    assertTrue(5 > 4, \"5 is greater the 4\");\r\n    assertTrue(null == null, \"null is equal to null\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenBooleanSupplier_whenAssertingCondition_thenVerified() {\r\n    BooleanSupplier condition = () -> 5 > 6;\r\n\r\n    assertFalse(condition, \"5 is not greater then 6\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingNotNull_thenTrue() {\r\n    Object dog = new Object();\r\n\r\n    assertNotNull(dog, () -> \"The dog should not be null\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssertingNull_thenTrue() {\r\n    Object cat = null;\r\n\r\n    assertNull(cat, () -> \"The cat should be null\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingSameObject_thenSuccessfull() {\r\n    String language = \"Java\";\r\n    Optional<String> optional = Optional.of(language);\r\n\r\n    assertSame(language, optional.get());\r\n}\r\n```","```\r\n@Test\r\npublic void whenFailingATest_thenFailed() {\r\n    // Test not completed\r\n    fail(\"FAIL - test not completed\");\r\n}\r\n```","```\r\n@Test\r\nvoid givenMultipleAssertion_whenAssertingAll_thenOK() {\r\n    Object obj = null;\r\n    assertAll(\r\n      \"heading\",\r\n      () -> assertEquals(4, 2 * 2, \"4 is 2 times 2\"),\r\n      () -> assertEquals(\"java\", \"JAVA\".toLowerCase()),\r\n      () -> assertNull(obj, \"obj is null\")\r\n    );\r\n}\r\n```","```\r\n@Test\r\nvoid givenTwoLists_whenAssertingIterables_thenEquals() {\r\n    Iterable<String> al = new ArrayList<>(asList(\"Java\", \"Junit\", \"Test\"));\r\n    Iterable<String> ll = new LinkedList<>(asList(\"Java\", \"Junit\", \"Test\"));\r\n\r\n    assertIterableEquals(al, ll);\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingEqualityListOfStrings_thenEqual() {\r\n    List<String> expected = asList(\"Java\", \"\\\\d+\", \"JUnit\");\r\n    List<String> actual = asList(\"Java\", \"11\", \"JUnit\");\r\n\r\n    assertLinesMatch(expected, actual);\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingEquality_thenNotEqual() {\r\n    Integer value = 5; // result of an algorithm\r\n\r\n    assertNotEquals(0, value, \"The result cannot be 0\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingException_thenThrown() {\r\n    Throwable exception = assertThrows(\r\n      IllegalArgumentException.class, \r\n      () -> {\r\n          throw new IllegalArgumentException(\"Exception message\");\r\n      }\r\n    );\r\n    assertEquals(\"Exception message\", exception.getMessage());\r\n}\r\n```","```\r\n@Test\r\nvoid whenAssertingTimeout_thenNotExceeded() {\r\n    assertTimeout(\r\n      ofSeconds(2), \r\n      () -> {\r\n        // code that requires less than 2 minutes to execute\r\n        Thread.sleep(1000);\r\n      }\r\n    );\r\n}\r\n```"]