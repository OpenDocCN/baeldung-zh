["```\r\n> sdk install micronaut 1.0.0.RC2\r\n```","```\r\n@Inject\r\nprivate EmployeeService service;\r\n```","```\r\n@Primary\r\n@Singleton\r\npublic class BlueCar implements Car {}\r\n```","```\r\n@Singleton\r\n@Requires(beans = DataSource.class)\r\n@Requires(property = \"enabled\")\r\n@Requires(missingBeans = EmployeeService)\r\n@Requires(sdk = Sdk.JAVA, value = \"1.8\")\r\npublic class JdbcEmployeeService implements EmployeeService {}\r\n```","```\r\n> mn create-app hello-world-server -build maven\r\n```","```\r\npublic class ServerApplication {\r\n    public static void main(String[] args) {\r\n        Micronaut.run(ServerApplication.class);\r\n    }\r\n}\r\n```","```\r\n@Controller(\"/greet\")\r\npublic class GreetController {\r\n\r\n    @Inject\r\n    private GreetingService greetingService;\r\n\r\n    @Get(\"/{name}\")\r\n    public String greet(String name) {\r\n        return greetingService.getGreeting() + name;\r\n    }\r\n\r\n    @Post(value = \"/{name}\", consumes = MediaType.TEXT_PLAIN)\r\n    public String setGreeting(@Body String name) {\r\n        return greetingService.getGreeting() + name;\r\n    }\r\n}\r\n```","```\r\n@Get(\"/{name}\")\r\npublic Mono<String> greet(String name) {\r\n    return Mono.just(greetingService.getGreeting() + name);\r\n}\r\n```","```\r\n@Client(\"/greet\")\r\npublic interface GreetingClient {\r\n    @Get(\"/{name}\")\r\n    String greet(String name);\r\n}\r\n```","```\r\npublic class GreetingClientTest {\r\n    private EmbeddedServer server;\r\n    private GreetingClient client;\r\n\r\n    @Before\r\n    public void setup() {\r\n        server = ApplicationContext.run(EmbeddedServer.class);\r\n        client = server.getApplicationContext().getBean(GreetingClient.class);\r\n    }\r\n\r\n    @After\r\n    public void cleanup() {\r\n        server.stop();\r\n    }\r\n\r\n    @Test\r\n    public void testGreeting() {\r\n        assertEquals(client.greet(\"Mike\"), \"Hello Mike\");\r\n    }\r\n}\r\n```","```\r\n@Singleton\r\npublic class ConcreteGreetingClient {\r\n   private RxHttpClient httpClient;\r\n\r\n   public ConcreteGreetingClient(@Client(\"/\") RxHttpClient httpClient) {\r\n      this.httpClient = httpClient;\r\n   }\r\n\r\n   public String greet(String name) {\r\n      HttpRequest<String> req = HttpRequest.GET(\"/greet/\" + name);\r\n      return httpClient.retrieve(req).blockingFirst();\r\n   }\r\n\r\n   public Single<String> greetAsync(String name) {\r\n      HttpRequest<String> req = HttpRequest.GET(\"/async/greet/\" + name);\r\n      return httpClient.retrieve(req).first(\"An error as occurred\");\r\n   }\r\n}\r\n```","```\r\n> mn profile-info service\r\n\r\nProvided Features:\r\n--------------------\r\n* annotation-api - Adds Java annotation API\r\n* config-consul - Adds support for Distributed Configuration with Consul\r\n* discovery-consul - Adds support for Service Discovery with Consul\r\n* discovery-eureka - Adds support for Service Discovery with Eureka\r\n* groovy - Creates a Groovy application\r\n[...] More features available\r\n```","```\r\n> mn help\r\n| Command Name         Command Description\r\n-----------------------------------------------\r\ncreate-bean            Creates a singleton bean\r\ncreate-client          Creates a client interface\r\ncreate-controller      Creates a controller and associated test\r\ncreate-job             Creates a job with scheduled method\r\n```"]