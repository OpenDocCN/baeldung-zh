["```\r\n<dependency>        \r\n    <groupId>org.apache.lucene</groupId>          \r\n    <artifactId>lucene-core</artifactId>\r\n    <version>7.1.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.lucene</groupId>\r\n    <artifactId>lucene-queryparser</artifactId>\r\n    <version>7.1.0</version>\r\n</dependency>\r\n```","```\r\ntitle: Goodness of Tea\r\nbody: Discussing goodness of drinking herbal tea...\r\n```","```\r\nfieldName:text\r\n\r\neg: title:tea\r\n```","```\r\ntimestamp:[1509909322,1572981321] \r\n```","```\r\ndri?nk\r\n```","```\r\nd*k\r\n```","```\r\nuni*\r\n```","```\r\ntitle: \"Tea in breakfast\" AND \"coffee\"\r\n```","```\r\n...\r\nDirectory memoryIndex = new RAMDirectory();\r\nStandardAnalyzer analyzer = new StandardAnalyzer();\r\nIndexWriterConfig indexWriterConfig = new IndexWriterConfig(analyzer);\r\nIndexWriter writter = new IndexWriter(memoryIndex, indexWriterConfig);\r\nDocument document = new Document();\r\n\r\ndocument.add(new TextField(\"title\", title, Field.Store.YES));\r\ndocument.add(new TextField(\"body\", body, Field.Store.YES));\r\n\r\nwritter.addDocument(document);\r\nwritter.close(); \r\n```","```\r\npublic List<Document> searchIndex(String inField, String queryString) {\r\n    Query query = new QueryParser(inField, analyzer)\r\n      .parse(queryString);\r\n\r\n    IndexReader indexReader = DirectoryReader.open(memoryIndex);\r\n    IndexSearcher searcher = new IndexSearcher(indexReader);\r\n    TopDocs topDocs = searcher.search(query, 10);\r\n    List<Document> documents = new ArrayList<>();\r\n    for (ScoreDoc scoreDoc : topDocs.scoreDocs) {\r\n        documents.add(searcher.doc(scoreDoc.doc));\r\n    }\r\n\r\n    return documents;\r\n}\r\n```","```\r\n@Test\r\npublic void givenSearchQueryWhenFetchedDocumentThenCorrect() {\r\n    InMemoryLuceneIndex inMemoryLuceneIndex \r\n      = new InMemoryLuceneIndex(new RAMDirectory(), new StandardAnalyzer());\r\n    inMemoryLuceneIndex.indexDocument(\"Hello world\", \"Some hello world\");\r\n\r\n    List<Document> documents \r\n      = inMemoryLuceneIndex.searchIndex(\"body\", \"world\");\r\n\r\n    assertEquals(\r\n      \"Hello world\", \r\n      documents.get(0).get(\"title\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenTermQueryWhenFetchedDocumentThenCorrect() {\r\n    InMemoryLuceneIndex inMemoryLuceneIndex \r\n      = new InMemoryLuceneIndex(new RAMDirectory(), new StandardAnalyzer());\r\n    inMemoryLuceneIndex.indexDocument(\"activity\", \"running in track\");\r\n    inMemoryLuceneIndex.indexDocument(\"activity\", \"Cars are running on road\");\r\n\r\n    Term term = new Term(\"body\", \"running\");\r\n    Query query = new TermQuery(term);\r\n\r\n    List<Document> documents = inMemoryLuceneIndex.searchIndex(query);\r\n    assertEquals(2, documents.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPrefixQueryWhenFetchedDocumentThenCorrect() {\r\n    InMemoryLuceneIndex inMemoryLuceneIndex \r\n      = new InMemoryLuceneIndex(new RAMDirectory(), new StandardAnalyzer());\r\n    inMemoryLuceneIndex.indexDocument(\"article\", \"Lucene introduction\");\r\n    inMemoryLuceneIndex.indexDocument(\"article\", \"Introduction to Lucene\");\r\n\r\n    Term term = new Term(\"body\", \"intro\");\r\n    Query query = new PrefixQuery(term);\r\n\r\n    List<Document> documents = inMemoryLuceneIndex.searchIndex(query);\r\n    assertEquals(2, documents.size());\r\n}\r\n```","```\r\n// ...\r\nTerm term = new Term(\"body\", \"intro*\");\r\nQuery query = new WildcardQuery(term);\r\n// ...\r\n```","```\r\n// ...\r\ninMemoryLuceneIndex.indexDocument(\r\n  \"quotes\", \r\n  \"A rose by any other name would smell as sweet.\");\r\n\r\nQuery query = new PhraseQuery(\r\n  1, \"body\", new BytesRef(\"smell\"), new BytesRef(\"sweet\"));\r\n\r\nList<Document> documents = inMemoryLuceneIndex.searchIndex(query);\r\n// ...\r\n```","```\r\n// ...\r\ninMemoryLuceneIndex.indexDocument(\"article\", \"Halloween Festival\");\r\ninMemoryLuceneIndex.indexDocument(\"decoration\", \"Decorations for Halloween\");\r\n\r\nTerm term = new Term(\"body\", \"hallowen\");\r\nQuery query = new FuzzyQuery(term);\r\n\r\nList<Document> documents = inMemoryLuceneIndex.searchIndex(query);\r\n// ...\r\n```","```\r\n// ...\r\ninMemoryLuceneIndex.indexDocument(\"Destination\", \"Las Vegas singapore car\");\r\ninMemoryLuceneIndex.indexDocument(\"Commutes in singapore\", \"Bus Car Bikes\");\r\n\r\nTerm term1 = new Term(\"body\", \"singapore\");\r\nTerm term2 = new Term(\"body\", \"car\");\r\n\r\nTermQuery query1 = new TermQuery(term1);\r\nTermQuery query2 = new TermQuery(term2);\r\n\r\nBooleanQuery booleanQuery \r\n  = new BooleanQuery.Builder()\r\n    .add(query1, BooleanClause.Occur.MUST)\r\n    .add(query2, BooleanClause.Occur.MUST)\r\n    .build();\r\n// ...\r\n```","```\r\n@Test\r\npublic void givenSortFieldWhenSortedThenCorrect() {\r\n    InMemoryLuceneIndex inMemoryLuceneIndex \r\n      = new InMemoryLuceneIndex(new RAMDirectory(), new StandardAnalyzer());\r\n    inMemoryLuceneIndex.indexDocument(\"Ganges\", \"River in India\");\r\n    inMemoryLuceneIndex.indexDocument(\"Mekong\", \"This river flows in south Asia\");\r\n    inMemoryLuceneIndex.indexDocument(\"Amazon\", \"Rain forest river\");\r\n    inMemoryLuceneIndex.indexDocument(\"Rhine\", \"Belongs to Europe\");\r\n    inMemoryLuceneIndex.indexDocument(\"Nile\", \"Longest River\");\r\n\r\n    Term term = new Term(\"body\", \"river\");\r\n    Query query = new WildcardQuery(term);\r\n\r\n    SortField sortField \r\n      = new SortField(\"title\", SortField.Type.STRING_VAL, false);\r\n    Sort sortByTitle = new Sort(sortField);\r\n\r\n    List<Document> documents \r\n      = inMemoryLuceneIndex.searchIndex(query, sortByTitle);\r\n    assertEquals(4, documents.size());\r\n    assertEquals(\"Amazon\", documents.get(0).getField(\"title\").stringValue());\r\n}\r\n```","```\r\n// ...\r\nIndexWriterConfig indexWriterConfig = new IndexWriterConfig(analyzer);\r\nIndexWriter writer = new IndexWriter(memoryIndex, indexWriterConfig);\r\nwriter.deleteDocuments(term);\r\n// ...\r\n```","```\r\n@Test\r\npublic void whenDocumentDeletedThenCorrect() {\r\n    InMemoryLuceneIndex inMemoryLuceneIndex \r\n      = new InMemoryLuceneIndex(new RAMDirectory(), new StandardAnalyzer());\r\n    inMemoryLuceneIndex.indexDocument(\"Ganges\", \"River in India\");\r\n    inMemoryLuceneIndex.indexDocument(\"Mekong\", \"This river flows in south Asia\");\r\n\r\n    Term term = new Term(\"title\", \"ganges\");\r\n    inMemoryLuceneIndex.deleteDocument(term);\r\n\r\n    Query query = new TermQuery(term);\r\n\r\n    List<Document> documents = inMemoryLuceneIndex.searchIndex(query);\r\n    assertEquals(0, documents.size());\r\n}\r\n```"]