["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.4</version>\r\n    <relativePath />\r\n</parent>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\nplugins {\r\n    id 'org.springframework.boot' version '2.6.4'\r\n}\r\n```","```\r\ncompile 'org.springframework.boot:spring-boot-starter-data-mongodb'\r\ncompile 'org.springframework.boot:spring-boot-starter-web'\r\n```","```\r\n@Document(collection = \"user\")\r\npublic class User {\r\n\r\n    @MongoId\r\n    private ObjectId id;\r\n\r\n    private String name;\r\n\r\n    private String surname;\r\n    private String email;\r\n\r\n    private int age;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Document(collection = \"account\")\r\npublic class Account {\r\n\r\n    @MongoId\r\n    private ObjectId id;\r\n\r\n    private String userEmail;\r\n\r\n    private String nickName;\r\n\r\n    private String accountDomain;\r\n\r\n    private String password;\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\n@Repository\r\npublic interface UserRepository extends MongoRepository<User, String> {\r\n\r\n    User findByEmail(String email);\r\n}\r\n```","```\r\n@Repository\r\npublic interface AccountRepository extends MongoRepository<Account, String> {\r\n\r\n    Account findByAccountDomain(String account);\r\n}\r\n```","```\r\nmongodb.primary.host=localhost\r\nmongodb.primary.database=db1\r\nmongodb.primary.authenticationDatabase=admin\r\nmongodb.primary.username=user1\r\nmongodb.primary.password=password\r\nmongodb.primary.port=27017\r\n\r\nmongodb.secondary.host=localhost\r\nmongodb.secondary.database=db2\r\nmongodb.secondary.authenticationDatabase=admin\r\nmongodb.secondary.username=user2\r\nmongodb.secondary.password=password\r\nmongodb.secondary.port=27017\r\n```","```\r\n@Configuration\r\n@EnableMongoRepositories(basePackageClasses = UserRepository.class, mongoTemplateRef = \"primaryMongoTemplate\")\r\n@EnableConfigurationProperties\r\npublic class PrimaryConfig {\r\n    // beans\r\n}\r\n```","```\r\n@Bean(name = \"primaryProperties\")\r\n@ConfigurationProperties(prefix = \"mongodb.primary\")\r\n@Primary\r\npublic MongoProperties primaryProperties() {\r\n    return new MongoProperties();\r\n} \r\n```","```\r\n@Bean(name = \"primaryMongoClient\")\r\npublic MongoClient mongoClient(@Qualifier(\"primaryProperties\") MongoProperties mongoProperties) {\r\n\r\n    MongoCredential credential = MongoCredential\r\n      .createCredential(mongoProperties.getUsername(), mongoProperties.getAuthenticationDatabase(), mongoProperties.getPassword());\r\n\r\n    return MongoClients.create(MongoClientSettings.builder()\r\n      .applyToClusterSettings(builder -> builder\r\n        .hosts(singletonList(new ServerAddress(mongoProperties.getHost(), mongoProperties.getPort()))))\r\n      .credential(credential)\r\n      .build());\r\n} \r\n```","```\r\n@Primary\r\n@Bean(name = \"primaryMongoDBFactory\")\r\npublic MongoDatabaseFactory mongoDatabaseFactory(\r\n  @Qualifier(\"primaryMongoClient\") MongoClient mongoClient, \r\n  @Qualifier(\"primaryProperties\") MongoProperties mongoProperties) {\r\n    return new SimpleMongoClientDatabaseFactory(mongoClient, mongoProperties.getDatabase());\r\n} \r\n```","```\r\n@EnableMongoRepositories(basePackageClasses = UserRepository.class, mongoTemplateRef = \"primaryMongoTemplate\")\r\n```","```\r\n@Configuration\r\n@EnableMongoRepositories(basePackageClasses = AccountRepository.class, mongoTemplateRef = \"secondaryMongoTemplate\")\r\n@EnableConfigurationProperties\r\npublic class SecondaryConfig {\r\n\r\n    @Bean(name = \"secondaryProperties\")\r\n    @ConfigurationProperties(prefix = \"mongodb.secondary\")\r\n    public MongoProperties secondaryProperties() {\r\n        return new MongoProperties();\r\n    }\r\n\r\n    @Bean(name = \"secondaryMongoClient\")\r\n    public MongoClient mongoClient(@Qualifier(\"secondaryProperties\") MongoProperties mongoProperties) {\r\n\r\n        MongoCredential credential = MongoCredential\r\n          .createCredential(mongoProperties.getUsername(), mongoProperties.getAuthenticationDatabase(), mongoProperties.getPassword());\r\n\r\n        return MongoClients.create(MongoClientSettings.builder()\r\n          .applyToClusterSettings(builder -> builder\r\n            .hosts(singletonList(new ServerAddress(mongoProperties.getHost(), mongodProperties.getPort()))))\r\n          .credential(credential)\r\n          .build());\r\n    }\r\n\r\n    @Bean(name = \"secondaryMongoDBFactory\")\r\n    public MongoDatabaseFactory mongoDatabaseFactory(\r\n      @Qualifier(\"secondaryMongoClient\") MongoClient mongoClient, \r\n      @Qualifier(\"secondaryProperties\") MongoProperties mongoProperties) {\r\n        return new SimpleMongoClientDatabaseFactory(mongoClient, mongoProperties.getDatabase());\r\n    }\r\n\r\n    @Bean(name = \"secondaryMongoTemplate\")\r\n    public MongoTemplate mongoTemplate(@Qualifier(\"secondaryMongoDBFactory\") MongoDatabaseFactory mongoDatabaseFactory) {\r\n        return new MongoTemplate(mongoDatabaseFactory);\r\n    }\r\n}\r\n```","```\r\nservices:\r\n  mongo:\r\n    hostname: localhost\r\n    container_name: 'mongo'\r\n    image: 'mongo:latest'\r\n    expose:\r\n      - 27017\r\n    ports:\r\n      - 27017:27017\r\n    environment:\r\n      - MONGO_INITDB_DATABASE=admin\r\n      - MONGO_INITDB_ROOT_USERNAME=admin\r\n      - MONGO_INITDB_ROOT_PASSWORD=admin\r\n    volumes:\r\n      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js\r\n```","```\r\ndb.createUser(\r\n    {\r\n        user: \"user1\",\r\n        pwd: \"password\",\r\n        roles: [ { role: \"readWrite\", db: \"db1\" } ]\r\n    }\r\n)\r\n\r\ndb.createUser(\r\n    {\r\n        user: \"user2\",\r\n        pwd: \"password\",\r\n        roles: [ { role: \"readWrite\", db: \"db2\" } ]\r\n    }\r\n)\r\n```","```\r\ndocker-compose up -d\r\n```","```\r\n@SpringBootTest(classes = { SpringBootMultipeDbApplication.class })\r\n@TestPropertySource(\"/multipledb/multidb.properties\")\r\npublic class MultipleDbUnitTest {\r\n\r\n    // set up\r\n\r\n    @Test\r\n    void whenFindUserByEmail_thenNameOk() {\r\n        assertEquals(\"name\", userRepository.findByEmail(\"[[email protected]](/web/20221029180113/https://www.baeldung.com/cdn-cgi/l/email-protection).com\")\r\n          .getName());\r\n    }\r\n\r\n    @Test\r\n    void whenFindAccountByDomain_thenNickNameOk() {\r\n        assertEquals(\"nickname\", accountRepository.findByAccountDomain(\"[[email protected]](/web/20221029180113/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n          .getNickName());\r\n    }\r\n}\r\n```","```\r\ndocker logs 30725c8635d4\r\n```","```\r\ndocker-compose down -v\r\n```"]