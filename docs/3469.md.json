["```\r\n<dependency>\r\n    <groupId>org.springframework.batch</groupId>\r\n    <artifactId>spring-batch-core</artifactId>\r\n    <version>4.3.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.batch</groupId>\r\n    <artifactId>spring-batch-test</artifactId>\r\n    <version>4.3.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nMae Hodges,10/22/1972\r\nGary Potter,02/22/1953\r\nBetty Wise,02/17/1968\r\nWayne Rose,04/06/1977\r\nAdam Caldwell,09/27/1995\r\nLucille Phillips,05/14/1992\r\n```","```\r\nMae Hodges,45\r\nGary Potter,64\r\nBetty Wise,49\r\nWayne Rose,40\r\nAdam Caldwell,22\r\nLucille Phillips,25\r\n```","```\r\npublic class LinesReader implements Tasklet {\r\n    // ...\r\n}\r\n```","```\r\npublic class LinesProcessor implements Tasklet {\r\n    // ...\r\n}\r\n```","```\r\npublic class LinesWriter implements Tasklet {\r\n    // ...\r\n}\r\n```","```\r\n@Override\r\npublic RepeatStatus execute(StepContribution stepContribution, \r\n  ChunkContext chunkContext) throws Exception {\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\n@EnableBatchProcessing\r\npublic class TaskletsConfig {\r\n\r\n    @Autowired \r\n    private JobBuilderFactory jobs;\r\n\r\n    @Autowired \r\n    private StepBuilderFactory steps;\r\n\r\n    @Bean\r\n    protected Step readLines() {\r\n        return steps\r\n          .get(\"readLines\")\r\n          .tasklet(linesReader())\r\n          .build();\r\n    }\r\n\r\n    @Bean\r\n    protected Step processLines() {\r\n        return steps\r\n          .get(\"processLines\")\r\n          .tasklet(linesProcessor())\r\n          .build();\r\n    }\r\n\r\n    @Bean\r\n    protected Step writeLines() {\r\n        return steps\r\n          .get(\"writeLines\")\r\n          .tasklet(linesWriter())\r\n          .build();\r\n    }\r\n\r\n    @Bean\r\n    public Job job() {\r\n        return jobs\r\n          .get(\"taskletsJob\")\r\n          .start(readLines())\r\n          .next(processLines())\r\n          .next(writeLines())\r\n          .build();\r\n    }\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\npublic class Line implements Serializable {\r\n\r\n    private String name;\r\n    private LocalDate dob;\r\n    private Long age;\r\n\r\n    // standard constructor, getters, setters and toString implementation\r\n\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.opencsv</groupId>\r\n    <artifactId>opencsv</artifactId>\r\n    <version>4.1</version>\r\n</dependency>\r\n```","```\r\npublic class FileUtils {\r\n\r\n    public Line readLine() throws Exception {\r\n        if (CSVReader == null) \r\n          initReader();\r\n        String[] line = CSVReader.readNext();\r\n        if (line == null) \r\n          return null;\r\n        return new Line(\r\n          line[0], \r\n          LocalDate.parse(\r\n            line[1], \r\n            DateTimeFormatter.ofPattern(\"MM/dd/yyyy\")));\r\n    }\r\n\r\n    public void writeLine(Line line) throws Exception {\r\n        if (CSVWriter == null) \r\n          initWriter();\r\n        String[] lineStr = new String[2];\r\n        lineStr[0] = line.getName();\r\n        lineStr[1] = line\r\n          .getAge()\r\n          .toString();\r\n        CSVWriter.writeNext(lineStr);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class LinesReader implements Tasklet, StepExecutionListener {\r\n\r\n    private final Logger logger = LoggerFactory\r\n      .getLogger(LinesReader.class);\r\n\r\n    private List<Line> lines;\r\n    private FileUtils fu;\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        lines = new ArrayList<>();\r\n        fu = new FileUtils(\r\n          \"taskletsvschunks/input/tasklets-vs-chunks.csv\");\r\n        logger.debug(\"Lines Reader initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public RepeatStatus execute(StepContribution stepContribution, \r\n      ChunkContext chunkContext) throws Exception {\r\n        Line line = fu.readLine();\r\n        while (line != null) {\r\n            lines.add(line);\r\n            logger.debug(\"Read line: \" + line.toString());\r\n            line = fu.readLine();\r\n        }\r\n        return RepeatStatus.FINISHED;\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        fu.closeReader();\r\n        stepExecution\r\n          .getJobExecution()\r\n          .getExecutionContext()\r\n          .put(\"lines\", this.lines);\r\n        logger.debug(\"Lines Reader ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\nstepExecution\r\n  .getJobExecution()\r\n  .getExecutionContext()\r\n  .put(\"lines\", this.lines);\r\n```","```\r\npublic class LinesProcessor implements Tasklet, StepExecutionListener {\r\n\r\n    private Logger logger = LoggerFactory.getLogger(\r\n      LinesProcessor.class);\r\n\r\n    private List<Line> lines;\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        ExecutionContext executionContext = stepExecution\r\n          .getJobExecution()\r\n          .getExecutionContext();\r\n        this.lines = (List<Line>) executionContext.get(\"lines\");\r\n        logger.debug(\"Lines Processor initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public RepeatStatus execute(StepContribution stepContribution, \r\n      ChunkContext chunkContext) throws Exception {\r\n        for (Line line : lines) {\r\n            long age = ChronoUnit.YEARS.between(\r\n              line.getDob(), \r\n              LocalDate.now());\r\n            logger.debug(\"Calculated age \" + age + \" for line \" + line.toString());\r\n            line.setAge(age);\r\n        }\r\n        return RepeatStatus.FINISHED;\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        logger.debug(\"Lines Processor ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\npublic class LinesWriter implements Tasklet, StepExecutionListener {\r\n\r\n    private final Logger logger = LoggerFactory\r\n      .getLogger(LinesWriter.class);\r\n\r\n    private List<Line> lines;\r\n    private FileUtils fu;\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        ExecutionContext executionContext = stepExecution\r\n          .getJobExecution()\r\n          .getExecutionContext();\r\n        this.lines = (List<Line>) executionContext.get(\"lines\");\r\n        fu = new FileUtils(\"output.csv\");\r\n        logger.debug(\"Lines Writer initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public RepeatStatus execute(StepContribution stepContribution, \r\n      ChunkContext chunkContext) throws Exception {\r\n        for (Line line : lines) {\r\n            fu.writeLine(line);\r\n            logger.debug(\"Wrote line \" + line.toString());\r\n        }\r\n        return RepeatStatus.FINISHED;\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        fu.closeWriter();\r\n        logger.debug(\"Lines Writer ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = TaskletsConfig.class)\r\npublic class TaskletsTest {\r\n\r\n    @Autowired \r\n    private JobLauncherTestUtils jobLauncherTestUtils;\r\n\r\n    @Test\r\n    public void givenTaskletsJob_whenJobEnds_thenStatusCompleted()\r\n      throws Exception {\r\n\r\n        JobExecution jobExecution = jobLauncherTestUtils.launchJob();\r\n        assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus());\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic JobLauncherTestUtils jobLauncherTestUtils() {\r\n    return new JobLauncherTestUtils();\r\n}\r\n\r\n@Bean\r\npublic JobRepository jobRepository() throws Exception {\r\n    JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean();\r\n    factory.setDataSource(dataSource());\r\n    factory.setTransactionManager(transactionManager());\r\n    return factory.getObject();\r\n}\r\n\r\n@Bean\r\npublic DataSource dataSource() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n    dataSource.setDriverClassName(\"org.sqlite.JDBC\");\r\n    dataSource.setUrl(\"jdbc:sqlite:repository.sqlite\");\r\n    return dataSource;\r\n}\r\n\r\n@Bean\r\npublic PlatformTransactionManager transactionManager() {\r\n    return new ResourcelessTransactionManager();\r\n}\r\n\r\n@Bean\r\npublic JobLauncher jobLauncher() throws Exception {\r\n    SimpleJobLauncher jobLauncher = new SimpleJobLauncher();\r\n    jobLauncher.setJobRepository(jobRepository());\r\n    return jobLauncher;\r\n}\r\n```","```\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Lines Reader initialized.\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Mae Hodges,10/22/1972]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Gary Potter,02/22/1953]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Betty Wise,02/17/1968]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Wayne Rose,04/06/1977]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Adam Caldwell,09/27/1995]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Read line: [Lucille Phillips,05/14/1992]\r\n[main] DEBUG o.b.t.tasklets.LinesReader - Lines Reader ended.\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Lines Processor initialized.\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 45 for line [Mae Hodges,10/22/1972]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 64 for line [Gary Potter,02/22/1953]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 49 for line [Betty Wise,02/17/1968]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 40 for line [Wayne Rose,04/06/1977]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 22 for line [Adam Caldwell,09/27/1995]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Calculated age 25 for line [Lucille Phillips,05/14/1992]\r\n[main] DEBUG o.b.t.tasklets.LinesProcessor - Lines Processor ended.\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Lines Writer initialized.\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Mae Hodges,10/22/1972,45]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Gary Potter,02/22/1953,64]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Betty Wise,02/17/1968,49]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Wayne Rose,04/06/1977,40]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Adam Caldwell,09/27/1995,22]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Wrote line [Lucille Phillips,05/14/1992,25]\r\n[main] DEBUG o.b.t.tasklets.LinesWriter - Lines Writer ended.\r\n```","```\r\npublic class LineReader {\r\n     // ...\r\n}\r\n```","```\r\npublic class LineProcessor {\r\n    // ...\r\n}\r\n```","```\r\npublic class LinesWriter {\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\n@EnableBatchProcessing\r\npublic class ChunksConfig {\r\n\r\n    @Autowired \r\n    private JobBuilderFactory jobs;\r\n\r\n    @Autowired \r\n    private StepBuilderFactory steps;\r\n\r\n    @Bean\r\n    public ItemReader<Line> itemReader() {\r\n        return new LineReader();\r\n    }\r\n\r\n    @Bean\r\n    public ItemProcessor<Line, Line> itemProcessor() {\r\n        return new LineProcessor();\r\n    }\r\n\r\n    @Bean\r\n    public ItemWriter<Line> itemWriter() {\r\n        return new LinesWriter();\r\n    }\r\n\r\n    @Bean\r\n    protected Step processLines(ItemReader<Line> reader,\r\n      ItemProcessor<Line, Line> processor, ItemWriter<Line> writer) {\r\n        return steps.get(\"processLines\").<Line, Line> chunk(2)\r\n          .reader(reader)\r\n          .processor(processor)\r\n          .writer(writer)\r\n          .build();\r\n    }\r\n\r\n    @Bean\r\n    public Job job() {\r\n        return jobs\r\n          .get(\"chunksJob\")\r\n          .start(processLines(itemReader(), itemProcessor(), itemWriter()))\r\n          .build();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class LineReader implements ItemReader<Line> {\r\n     @Override\r\n     public Line read() throws Exception {\r\n         Line line = fu.readLine();\r\n         if (line != null) \r\n           logger.debug(\"Read line: \" + line.toString());\r\n         return line;\r\n     }\r\n}\r\n```","```\r\npublic class LineReader implements \r\n  ItemReader<Line>, StepExecutionListener {\r\n\r\n    private final Logger logger = LoggerFactory\r\n      .getLogger(LineReader.class);\r\n\r\n    private FileUtils fu;\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        fu = new FileUtils(\"taskletsvschunks/input/tasklets-vs-chunks.csv\");\r\n        logger.debug(\"Line Reader initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public Line read() throws Exception {\r\n        Line line = fu.readLine();\r\n        if (line != null) logger.debug(\"Read line: \" + line.toString());\r\n        return line;\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        fu.closeReader();\r\n        logger.debug(\"Line Reader ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\npublic class LineProcessor implements ItemProcessor<Line, Line> {\r\n\r\n    private Logger logger = LoggerFactory.getLogger(LineProcessor.class);\r\n\r\n    @Override\r\n    public Line process(Line line) throws Exception {\r\n        long age = ChronoUnit.YEARS\r\n          .between(line.getDob(), LocalDate.now());\r\n        logger.debug(\"Calculated age \" + age + \" for line \" + line.toString());\r\n        line.setAge(age);\r\n        return line;\r\n    }\r\n\r\n}\r\n```","```\r\npublic class LineProcessor implements \r\n  ItemProcessor<Line, Line>, StepExecutionListener {\r\n\r\n    private Logger logger = LoggerFactory.getLogger(LineProcessor.class);\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        logger.debug(\"Line Processor initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public Line process(Line line) throws Exception {\r\n        long age = ChronoUnit.YEARS\r\n          .between(line.getDob(), LocalDate.now());\r\n        logger.debug(\r\n          \"Calculated age \" + age + \" for line \" + line.toString());\r\n        line.setAge(age);\r\n        return line;\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        logger.debug(\"Line Processor ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\npublic class LinesWriter implements \r\n  ItemWriter<Line>, StepExecutionListener {\r\n\r\n    private final Logger logger = LoggerFactory\r\n      .getLogger(LinesWriter.class);\r\n\r\n    private FileUtils fu;\r\n\r\n    @Override\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        fu = new FileUtils(\"output.csv\");\r\n        logger.debug(\"Line Writer initialized.\");\r\n    }\r\n\r\n    @Override\r\n    public void write(List<? extends Line> lines) throws Exception {\r\n        for (Line line : lines) {\r\n            fu.writeLine(line);\r\n            logger.debug(\"Wrote line \" + line.toString());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ExitStatus afterStep(StepExecution stepExecution) {\r\n        fu.closeWriter();\r\n        logger.debug(\"Line Writer ended.\");\r\n        return ExitStatus.COMPLETED;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = ChunksConfig.class)\r\npublic class ChunksTest {\r\n\r\n    @Autowired\r\n    private JobLauncherTestUtils jobLauncherTestUtils;\r\n\r\n    @Test\r\n    public void givenChunksJob_whenJobEnds_thenStatusCompleted() \r\n      throws Exception {\r\n\r\n        JobExecution jobExecution = jobLauncherTestUtils.launchJob();\r\n\r\n        assertEquals(ExitStatus.COMPLETED, jobExecution.getExitStatus()); \r\n    }\r\n}\r\n```","```\r\n[main] DEBUG o.b.t.chunks.LineReader - Line Reader initialized.\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Line Writer initialized.\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Line Processor initialized.\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Mae Hodges,10/22/1972]\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Gary Potter,02/22/1953]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 45 for line [Mae Hodges,10/22/1972]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 64 for line [Gary Potter,02/22/1953]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Mae Hodges,10/22/1972,45]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Gary Potter,02/22/1953,64]\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Betty Wise,02/17/1968]\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Wayne Rose,04/06/1977]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 49 for line [Betty Wise,02/17/1968]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 40 for line [Wayne Rose,04/06/1977]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Betty Wise,02/17/1968,49]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Wayne Rose,04/06/1977,40]\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Adam Caldwell,09/27/1995]\r\n[main] DEBUG o.b.t.chunks.LineReader - Read line: [Lucille Phillips,05/14/1992]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 22 for line [Adam Caldwell,09/27/1995]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Calculated age 25 for line [Lucille Phillips,05/14/1992]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Adam Caldwell,09/27/1995,22]\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Wrote line [Lucille Phillips,05/14/1992,25]\r\n[main] DEBUG o.b.t.chunks.LineProcessor - Line Processor ended.\r\n[main] DEBUG o.b.t.chunks.LinesWriter - Line Writer ended.\r\n[main] DEBUG o.b.t.chunks.LineReader - Line Reader ended.\r\n```"]