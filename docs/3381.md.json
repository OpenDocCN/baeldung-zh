["```\r\n@Configuration\r\n@EnableAsync\r\npublic class SpringAsyncConfig { ... }\r\n```","```\r\n<task:executor id=\"myexecutor\" pool-size=\"5\"  />\r\n<task:annotation-driven executor=\"myexecutor\"/>\r\n```","```\r\n@Async\r\npublic void asyncMethodWithVoidReturnType() {\r\n    System.out.println(\"Execute method asynchronously. \" \r\n      + Thread.currentThread().getName());\r\n}\r\n```","```\r\n@Async\r\npublic Future<String> asyncMethodWithReturnType() {\r\n    System.out.println(\"Execute method asynchronously - \" \r\n      + Thread.currentThread().getName());\r\n    try {\r\n        Thread.sleep(5000);\r\n        return new AsyncResult<String>(\"hello world !!!!\");\r\n    } catch (InterruptedException e) {\r\n        //\r\n    }\r\n\r\n    return null;\r\n}\r\n```","```\r\npublic void testAsyncAnnotationForMethodsWithReturnType()\r\n  throws InterruptedException, ExecutionException {\r\n    System.out.println(\"Invoking an asynchronous method. \" \r\n      + Thread.currentThread().getName());\r\n    Future<String> future = asyncAnnotationExample.asyncMethodWithReturnType();\r\n\r\n    while (true) {\r\n        if (future.isDone()) {\r\n            System.out.println(\"Result from asynchronous process - \" + future.get());\r\n            break;\r\n        }\r\n        System.out.println(\"Continue doing something else. \");\r\n        Thread.sleep(1000);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableAsync\r\npublic class SpringAsyncConfig {\r\n\r\n    @Bean(name = \"threadPoolTaskExecutor\")\r\n    public Executor threadPoolTaskExecutor() {\r\n        return new ThreadPoolTaskExecutor();\r\n    }\r\n}\r\n```","```\r\n@Async(\"threadPoolTaskExecutor\")\r\npublic void asyncMethodWithConfiguredExecutor() {\r\n    System.out.println(\"Execute method with configured executor - \"\r\n      + Thread.currentThread().getName());\r\n}\r\n```","```\r\n@Configuration\r\n@EnableAsync\r\npublic class SpringAsyncConfig implements AsyncConfigurer {\r\n\r\n    @Override\r\n    public Executor getAsyncExecutor() {\r\n        return new ThreadPoolTaskExecutor();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class CustomAsyncExceptionHandler\r\n  implements AsyncUncaughtExceptionHandler {\r\n\r\n    @Override\r\n    public void handleUncaughtException(\r\n      Throwable throwable, Method method, Object... obj) {\r\n\r\n        System.out.println(\"Exception message - \" + throwable.getMessage());\r\n        System.out.println(\"Method name - \" + method.getName());\r\n        for (Object param : obj) {\r\n            System.out.println(\"Parameter value - \" + param);\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\n@Override\r\npublic AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\r\n    return new CustomAsyncExceptionHandler();\r\n}\r\n```"]