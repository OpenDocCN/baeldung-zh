["```\r\nCREATE TABLE `employee` (\r\n  `employee_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `first_name` varchar(50) DEFAULT NULL,\r\n  `last_name` varchar(50) DEFAULT NULL,\r\n  PRIMARY KEY (`employee_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;\r\n\r\nCREATE TABLE `project` (\r\n  `project_id` int(11) NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(50) DEFAULT NULL,\r\n  PRIMARY KEY (`project_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;\r\n\r\nCREATE TABLE `employee_project` (\r\n  `employee_id` int(11) NOT NULL,\r\n  `project_id` int(11) NOT NULL,\r\n  PRIMARY KEY (`employee_id`,`project_id`),\r\n  KEY `project_id` (`project_id`),\r\n  CONSTRAINT `employee_project_ibfk_1` \r\n   FOREIGN KEY (`employee_id`) REFERENCES `employee` (`employee_id`),\r\n  CONSTRAINT `employee_project_ibfk_2` \r\n   FOREIGN KEY (`project_id`) REFERENCES `project` (`project_id`)\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8; \r\n```","```\r\n@Entity\r\n@Table(name = \"Employee\")\r\npublic class Employee { \r\n    // ...\r\n\r\n    @ManyToMany(cascade = { CascadeType.ALL })\r\n    @JoinTable(\r\n        name = \"Employee_Project\", \r\n        joinColumns = { @JoinColumn(name = \"employee_id\") }, \r\n        inverseJoinColumns = { @JoinColumn(name = \"project_id\") }\r\n    )\r\n    Set<Project> projects = new HashSet<>();\r\n\r\n    // standard constructor/getters/setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"Project\")\r\npublic class Project {    \r\n    // ...  \r\n\r\n    @ManyToMany(mappedBy = \"projects\")\r\n    private Set<Employee> employees = new HashSet<>();\r\n\r\n    // standard constructors/getters/setters   \r\n}\r\n```","```\r\npublic class HibernateManyToManyAnnotationMainIntegrationTest {\r\n\tprivate static SessionFactory sessionFactory;\r\n\tprivate Session session;\r\n\r\n\t//...\r\n\r\n\t@Test\r\n        public void givenSession_whenRead_thenReturnsMtoMdata() {\r\n\t    prepareData();\r\n       \t    @SuppressWarnings(\"unchecked\")\r\n\t    List<Employee> employeeList = session.createQuery(\"FROM Employee\").list();\r\n            @SuppressWarnings(\"unchecked\")\r\n\t    List<Project> projectList = session.createQuery(\"FROM Project\").list();\r\n            assertNotNull(employeeList);\r\n            assertNotNull(projectList);\r\n            assertEquals(2, employeeList.size());\r\n            assertEquals(2, projectList.size());\r\n\r\n            for(Employee employee : employeeList) {\r\n               assertNotNull(employee.getProjects());\r\n               assertEquals(2, employee.getProjects().size());\r\n            }\r\n            for(Project project : projectList) {\r\n               assertNotNull(project.getEmployees());\r\n               assertEquals(2, project.getEmployees().size());\r\n            }\r\n        }\r\n\r\n\tprivate void prepareData() {\r\n\t    String[] employeeData = { \"Peter Oven\", \"Allan Norman\" };\r\n\t    String[] projectData = { \"IT Project\", \"Networking Project\" };\r\n\t    Set<Project> projects = new HashSet<Project>();\r\n\r\n\t    for (String proj : projectData) {\r\n\t\tprojects.add(new Project(proj));\r\n\t    }\r\n\r\n\t    for (String emp : employeeData) {\r\n\t\tEmployee employee = new Employee(emp.split(\" \")[0], emp.split(\" \")[1]);\r\n\t\temployee.setProjects(projects);\r\n\r\n\t        for (Project proj : projects) {\r\n\t\t    proj.getEmployees().add(employee);\r\n\t\t}\r\n\r\n\t\tsession.persist(employee);\r\n\t    }\r\n\t}\r\n\r\n\t//...\r\n}\r\n```"]