["```\r\n@Bean \r\npublic TokenStore tokenStore() { \r\n    return new JdbcTokenStore(dataSource()); \r\n}\r\n\r\n@Bean \r\npublic DataSource dataSource() { \r\n    DriverManagerDataSource dataSource =  new DriverManagerDataSource();\r\n    dataSource.setDriverClassName(env.getProperty(\"jdbc.driverClassName\"));\r\n    dataSource.setUrl(env.getProperty(\"jdbc.url\"));\r\n    dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n    dataSource.setPassword(env.getProperty(\"jdbc.pass\")); \r\n    return dataSource;\r\n}\r\n```","```\r\n@Bean\r\n@Primary\r\npublic DefaultTokenServices tokenServices() {\r\n    DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\r\n    defaultTokenServices.setTokenStore(tokenStore());\r\n    defaultTokenServices.setSupportRefreshToken(true);\r\n    return defaultTokenServices;\r\n}\r\n```","```\r\n@Resource(name=\"tokenStore\")\r\nTokenStore tokenStore;\r\n\r\n@RequestMapping(method = RequestMethod.GET, value = \"/tokens\")\r\n@ResponseBody\r\npublic List<String> getTokens() {\r\n    List<String> tokenValues = new ArrayList<String>();\r\n    Collection<OAuth2AccessToken> tokens = tokenStore.findTokensByClientId(\"sampleClientId\"); \r\n    if (tokens!=null){\r\n        for (OAuth2AccessToken token:tokens){\r\n            tokenValues.add(token.getValue());\r\n        }\r\n    }\r\n    return tokenValues;\r\n}\r\n```","```\r\n@Resource(name=\"tokenServices\")\r\nConsumerTokenServices tokenServices;\r\n\r\n@RequestMapping(method = RequestMethod.POST, value = \"/tokens/revoke/{tokenId:.*}\")\r\n@ResponseBody\r\npublic String revokeToken(@PathVariable String tokenId) {\r\n    tokenServices.revokeToken(tokenId);\r\n    return tokenId;\r\n}\r\n```","```\r\n$scope.revokeToken = \r\n  $resource(\"http://localhost:8082/spring-security-oauth-resource/tokens/revoke/:tokenId\",\r\n  {tokenId:'@tokenId'});\r\n$scope.tokens = $resource(\"http://localhost:8082/spring-security-oauth-resource/tokens\");\r\n\r\n$scope.getTokens = function(){\r\n    $scope.tokenList = $scope.tokens.query();\t\r\n}\r\n\r\n$scope.revokeAccessToken = function(){\r\n    if ($scope.tokenToRevoke && $scope.tokenToRevoke.length !=0){\r\n        $scope.revokeToken.save({tokenId:$scope.tokenToRevoke});\r\n        $rootScope.message=\"Token:\"+$scope.tokenToRevoke+\" was revoked!\";\r\n        $scope.tokenToRevoke=\"\";\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.POST, value = \"/tokens/revokeRefreshToken/{tokenId:.*}\")\r\n@ResponseBody\r\npublic String revokeRefreshToken(@PathVariable String tokenId) {\r\n    if (tokenStore instanceof JdbcTokenStore){\r\n        ((JdbcTokenStore) tokenStore).removeRefreshToken(tokenId);\r\n    }\r\n    return tokenId;\r\n}\r\n```","```\r\npublic class TokenRevocationLiveTest {\r\n    private String refreshToken;\r\n\r\n    private String obtainAccessToken(String clientId, String username, String password) {\r\n        Map<String, String> params = new HashMap<String, String>();\r\n        params.put(\"grant_type\", \"password\");\r\n        params.put(\"client_id\", clientId);\r\n        params.put(\"username\", username);\r\n        params.put(\"password\", password);\r\n\r\n        Response response = RestAssured.given().auth().\r\n          preemptive().basic(clientId,\"secret\").and().with().params(params).\r\n          when().post(\"http://localhost:8081/spring-security-oauth-server/oauth/token\");\r\n        refreshToken = response.jsonPath().getString(\"refresh_token\");\r\n\r\n        return response.jsonPath().getString(\"access_token\");\r\n    }\r\n\r\n    private String obtainRefreshToken(String clientId) {\r\n        Map<String, String> params = new HashMap<String, String>();\r\n        params.put(\"grant_type\", \"refresh_token\");\r\n        params.put(\"client_id\", clientId);\r\n        params.put(\"refresh_token\", refreshToken);\r\n\r\n        Response response = RestAssured.given().auth()\r\n          .preemptive().basic(clientId,\"secret\").and().with().params(params)\r\n          .when().post(\"http://localhost:8081/spring-security-oauth-server/oauth/token\");\r\n\r\n        return response.jsonPath().getString(\"access_token\");\r\n    }\r\n\r\n    private void authorizeClient(String clientId) {\r\n        Map<String, String> params = new HashMap<String, String>();\r\n        params.put(\"response_type\", \"code\");\r\n        params.put(\"client_id\", clientId);\r\n        params.put(\"scope\", \"read,write\");\r\n\r\n        Response response = RestAssured.given().auth().preemptive()\r\n          .basic(clientId,\"secret\").and().with().params(params).\r\n          when().post(\"http://localhost:8081/spring-security-oauth-server/oauth/authorize\");\r\n    }\r\n\r\n    @Test\r\n    public void givenUser_whenRevokeRefreshToken_thenRefreshTokenInvalidError() {\r\n        String accessToken1 = obtainAccessToken(\"fooClientIdPassword\", \"john\", \"123\");\r\n        String accessToken2 = obtainAccessToken(\"fooClientIdPassword\", \"tom\", \"111\");\r\n        authorizeClient(\"fooClientIdPassword\");\r\n\r\n        String accessToken3 = obtainRefreshToken(\"fooClientIdPassword\");\r\n        authorizeClient(\"fooClientIdPassword\");\r\n        Response refreshTokenResponse = RestAssured.given().\r\n          header(\"Authorization\", \"Bearer \" + accessToken3)\r\n          .get(\"http://localhost:8082/spring-security-oauth-resource/tokens\");\r\n        assertEquals(200, refreshTokenResponse.getStatusCode());\r\n\r\n        Response revokeRefreshTokenResponse = RestAssured.given()\r\n          .header(\"Authorization\", \"Bearer \" + accessToken1)\r\n          .post(\"http://localhost:8082/spring-security-oauth-resource/tokens/revokeRefreshToken/\"+refreshToken);\r\n        assertEquals(200, revokeRefreshTokenResponse.getStatusCode());\r\n\r\n        String accessToken4 = obtainRefreshToken(\"fooClientIdPassword\");\r\n        authorizeClient(\"fooClientIdPassword\");\r\n        Response refreshTokenResponse2 = RestAssured.given()\r\n          .header(\"Authorization\", \"Bearer \" + accessToken4)\r\n          .get(\"http://localhost:8082/spring-security-oauth-resource/tokens\");\r\n        assertEquals(401, refreshTokenResponse2.getStatusCode());\r\n    }\r\n}\r\n```"]