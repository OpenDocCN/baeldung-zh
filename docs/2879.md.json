["```\r\n    testAborted​(ExtensionContext context, Throwable cause)\r\n    ```","```\r\n    testDisabled​(ExtensionContext context, Optional reason)\r\n    ```","```\r\n    testFailed(ExtensionContext context, Throwable cause)\r\n    ```","```\r\n    testSuccessful(ExtensionContext context)\r\n    ```","```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-api</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class TestResultLoggerExtension implements TestWatcher, AfterAllCallback {\r\n    private List<TestResultStatus> testResultsStatus = new ArrayList<>();\r\n\r\n    private enum TestResultStatus {\r\n        SUCCESSFUL, ABORTED, FAILED, DISABLED;\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@Override\r\npublic void testDisabled(ExtensionContext context, Optional<String> reason) {\r\n    LOG.info(\"Test Disabled for test {}: with reason :- {}\", \r\n      context.getDisplayName(),\r\n      reason.orElse(\"No reason\"));\r\n\r\n    testResultsStatus.add(TestResultStatus.DISABLED);\r\n}\r\n\r\n@Override\r\npublic void testSuccessful(ExtensionContext context) {\r\n    LOG.info(\"Test Successful for test {}: \", context.getDisplayName());\r\n\r\n    testResultsStatus.add(TestResultStatus.SUCCESSFUL);\r\n} \r\n```","```\r\n@Override\r\npublic void testAborted(ExtensionContext context, Throwable cause) {\r\n    LOG.info(\"Test Aborted for test {}: \", context.getDisplayName());\r\n\r\n    testResultsStatus.add(TestResultStatus.ABORTED);\r\n}\r\n\r\n@Override\r\npublic void testFailed(ExtensionContext context, Throwable cause) {\r\n    LOG.info(\"Test Failed for test {}: \", context.getDisplayName());\r\n\r\n    testResultsStatus.add(TestResultStatus.FAILED);\r\n}\r\n```","```\r\n@Override\r\npublic void afterAll(ExtensionContext context) throws Exception {\r\n    Map<TestResultStatus, Long> summary = testResultsStatus.stream()\r\n      .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\r\n\r\n    LOG.info(\"Test result summary for {} {}\", context.getDisplayName(), summary.toString());\r\n}\r\n```","```\r\n@ExtendWith(TestResultLoggerExtension.class)\r\nclass TestWatcherAPIUnitTest {\r\n\r\n    @Test\r\n    void givenFalseIsTrue_whenTestAbortedThenCaptureResult() {\r\n        Assumptions.assumeTrue(false);\r\n    }\r\n\r\n    @Disabled\r\n    @Test\r\n    void givenTrueIsTrue_whenTestDisabledThenCaptureResult() {\r\n        Assert.assertTrue(true);\r\n    }\r\n\r\n    //...\r\n```","```\r\nINFO  c.b.e.t.TestResultLoggerExtension - \r\n    Test Successful for test givenTrueIsTrue_whenTestAbortedThenCaptureResult()\r\n...\r\nTest result summary for TestWatcherAPIUnitTest {ABORTED=1, SUCCESSFUL=1, DISABLED=2}\r\n```"]