["```\r\norganization in ThisBuild := \"com.baeldung\"\r\n\r\nscalaVersion in ThisBuild := \"2.11.8\"\r\n\r\nlagomKafkaEnabled in ThisBuild := false\r\n\r\nlazy val greetingApi = project(\"greeting-api\")\r\n  .settings(\r\n    version := \"1.0-SNAPSHOT\",\r\n    libraryDependencies ++= Seq(\r\n      lagomJavadslApi\r\n    )\r\n  )\r\n\r\nlazy val greetingImpl = project(\"greeting-impl\")\r\n  .enablePlugins(LagomJava)\r\n  .settings(\r\n    version := \"1.0-SNAPSHOT\",\r\n    libraryDependencies ++= Seq(\r\n      lagomJavadslPersistenceCassandra\r\n    )\r\n  )\r\n  .dependsOn(greetingApi, weatherApi)\r\n\r\nlazy val weatherApi = project(\"weather-api\")\r\n  .settings(\r\n    version := \"1.0-SNAPSHOT\",\r\n    libraryDependencies ++= Seq(\r\n      lagomJavadslApi\r\n    )\r\n  )\r\n\r\nlazy val weatherImpl = project(\"weather-impl\")\r\n  .enablePlugins(LagomJava)\r\n  .settings(\r\n    version := \"1.0-SNAPSHOT\"\r\n  )\r\n  .dependsOn(weatherApi)\r\n\r\ndef project(id: String) = Project(id, base = file(id))\r\n```","```\r\naddSbtPlugin(\"com.lightbend.lagom\" % \"lagom-sbt-plugin\" % \"1.3.1\")\r\naddSbtPlugin(\"com.typesafe.sbteclipse\" % \"sbteclipse-plugin\" % \"3.0.0\")\r\n```","```\r\nsbt.version=0.13.11\r\n```","```\r\npublic interface GreetingService extends Service {\r\n\r\n    public ServiceCall<NotUsed, String> handleGreetFrom(String user);\r\n\r\n    @Override\r\n    default Descriptor descriptor() {\r\n        return named(\"greetingservice\")\r\n          .withCalls(restCall(Method.GET, \"/api/greeting/:fromUser\",\r\n            this::handleGreetFrom))\r\n          .withAutoAcl(true);\r\n    }\r\n}\r\n```","```\r\npublic interface WeatherService extends Service {\r\n\r\n    public ServiceCall<NotUsed, WeatherStats> weatherStatsForToday();\r\n\r\n    @Override\r\n    default Descriptor descriptor() {\r\n        return named(\"weatherservice\")\r\n          .withCalls(\r\n            restCall(Method.GET, \"/api/weather\",\r\n              this::weatherStatsForToday))\r\n          .withAutoAcl(true);\r\n    }\r\n};\r\n```","```\r\npublic enum WeatherStats {\r\n\r\n    STATS_RAINY(\"Going to Rain, Take Umbrella\"), \r\n    STATS_HUMID(\"Going to be very humid, Take Water\");\r\n\r\n    public static WeatherStats forToday() {\r\n        return VALUES.get(RANDOM.nextInt(SIZE));\r\n    }\r\n}\r\n```","```\r\npublic class GreetingEntity extends \r\n  PersistentEntity<GreetingCommand, GreetingEvent, GreetingState> {\r\n\r\n      @Override\r\n      public Behavior initialBehavior(\r\n        Optional<GreetingState> snapshotState) {\r\n            BehaviorBuilder b \r\n              = newBehaviorBuilder(new GreetingState(\"Hello \"));\r\n\r\n            b.setCommandHandler(\r\n              ReceivedGreetingCommand.class,\r\n              (cmd, ctx) -> {\r\n                  String fromUser = cmd.getFromUser();\r\n                  String currentGreeting = state().getMessage();\r\n                  return ctx.thenPersist(\r\n                    new ReceivedGreetingEvent(fromUser),\r\n                    evt -> ctx.reply(\r\n                      currentGreeting + fromUser + \"!\"));\r\n              });\r\n\r\n            b.setEventHandler(\r\n              ReceivedGreetingEvent.class,\r\n              evt -> state().withMessage(\"Hello Again \"));\r\n\r\n            return b.build();\r\n      }\r\n}\r\n```","```\r\npublic interface GreetingCommand extends Jsonable {\r\n\r\n    @JsonDeserialize\r\n    public class ReceivedGreetingCommand implements \r\n      GreetingCommand, \r\n      CompressedJsonable, \r\n      PersistentEntity.ReplyType<String> {      \r\n          @JsonCreator\r\n          public ReceivedGreetingCommand(String fromUser) {\r\n              this.fromUser = Preconditions.checkNotNull(\r\n                fromUser, \"fromUser\");\r\n          }\r\n    }\r\n}\r\n```","```\r\npublic interface GreetingEvent extends Jsonable {\r\n    class ReceivedGreetingEvent implements GreetingEvent {\r\n\r\n        @JsonCreator\r\n        public ReceivedGreetingEvent(String fromUser) {\r\n            this.fromUser = fromUser;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class GreetingServiceImpl implements GreetingService {\r\n\r\n    @Inject\r\n    public GreetingServiceImpl(\r\n      PersistentEntityRegistry persistentEntityRegistry, \r\n      WeatherService weatherService) {\r\n          this.persistentEntityRegistry = persistentEntityRegistry;\r\n          this.weatherService = weatherService;\r\n          persistentEntityRegistry.register(GreetingEntity.class);\r\n      }\r\n\r\n    @Override\r\n    public ServiceCall<NotUsed, String> handleGreetFrom(String user) {\r\n        return request -> {\r\n            PersistentEntityRef<GreetingCommand> ref\r\n              = persistentEntityRegistry.refFor(\r\n                GreetingEntity.class, user);\r\n            CompletableFuture<String> greetingResponse \r\n              = ref.ask(new ReceivedGreetingCommand(user))\r\n                .toCompletableFuture();\r\n            CompletableFuture<WeatherStats> todaysWeatherInfo\r\n              = (CompletableFuture<WeatherStats>) weatherService\r\n                .weatherStatsForToday().invoke();\r\n\r\n            try {\r\n                return CompletableFuture.completedFuture(\r\n                  greetingResponse.get() + \" Today's weather stats: \"\r\n                    + todaysWeatherInfo.get().getMessage());\r\n            } catch (InterruptedException | ExecutionException e) {\r\n                return CompletableFuture.completedFuture(\r\n                  \"Sorry Some Error at our end, working on it\");\r\n            }\r\n        };\r\n    }\r\n}\r\n```","```\r\npublic class GreetingServiceModule extends AbstractModule \r\n  implements ServiceGuiceSupport {\r\n\r\n      @Override\r\n      protected void configure() {\r\n          bindServices(\r\n            serviceBinding(GreetingService.class, GreetingServiceImpl.class));\r\n          bindClient(WeatherService.class);\r\n    }\r\n} \r\n```","```\r\nplay.modules.enabled\r\n  += com.baeldung.lagom.helloworld.greeting.impl.GreetingServiceModule\r\n```","```\r\npublic class WeatherServiceImpl implements WeatherService {\r\n\r\n    @Override\r\n    public ServiceCall<NotUsed, WeatherStats> weatherStatsForToday() {\r\n        return req -> \r\n          CompletableFuture.completedFuture(WeatherStats.forToday());\r\n    }\r\n}\r\n```","```\r\npublic class WeatherServiceModule \r\n  extends AbstractModule \r\n  implements ServiceGuiceSupport {\r\n\r\n      @Override\r\n      protected void configure() {\r\n          bindServices(serviceBinding(\r\n            WeatherService.class, \r\n            WeatherServiceImpl.class));\r\n      }\r\n}\r\n```","```\r\nplay.modules.enabled\r\n  += com.baeldung.lagom.helloworld.weather.impl.WeatherServiceModule\r\n```","```\r\nsbt lagom:runAll\r\n```","```\r\n................\r\n[info] Cassandra server running at 127.0.0.1:4000\r\n[info] Service locator is running at http://localhost:8000\r\n[info] Service gateway is running at http://localhost:9000\r\n[info] Service weather-impl listening for HTTP on 0:0:0:0:0:0:0:0:56231 and how the services interact via\r\n[info] Service greeting-impl listening for HTTP on 0:0:0:0:0:0:0:0:49356\r\n[info] (Services started, press enter to stop and go back to the console...)\r\n```","```\r\ncurl http://localhost:9000/api/greeting/Amit\r\n```","```\r\nHello Amit! Today's weather stats: Going to Rain, Take Umbrella\r\n```","```\r\nHello Again Amit! Today's weather stats: Going to Rain, Take Umbrella\r\n```"]