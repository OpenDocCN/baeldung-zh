["```\r\n@Repository\r\npublic interface FooRepository extends PagingAndSortingRepository<Foo, Long>{}\r\n\r\n@Entity\r\npublic class Foo {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long id;\r\n\r\n    @Column(nullable = false)\r\n    private String title;\r\n\r\n    @Column()\r\n    private String body;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/foo\")\r\npublic class FooController {\r\n\r\n    @Autowired\r\n    FooRepository repository;\r\n\r\n    @GetMapping\r\n    public ResponseEntity<List<Foo>> getAllFoos() {\r\n        // implementation\r\n    }\r\n\r\n    @GetMapping(value = \"{id}\")\r\n    public ResponseEntity<Foo> getFooById(@PathVariable(\"id\") Long id) {\r\n        // implementation\r\n    }\r\n\r\n    @PostMapping\r\n    public ResponseEntity<Foo> addFoo(@RequestBody @Valid Foo foo) {\r\n        // implementation\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<Void> deleteFoo(@PathVariable(\"id\") long id) {\r\n        // implementation\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<Foo> updateFoo(@PathVariable(\"id\") long id, @RequestBody Foo foo) {\r\n        // implementation\r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication()\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic OpenAPI customOpenAPI(@Value(\"${springdoc.version}\") String appVersion) {\r\n    return new OpenAPI().info(new Info()\r\n      .title(\"Foobar API\")\r\n      .version(appVersion)\r\n      .description(\"This is a sample Foobar server created using springdocs - \" + \r\n        \"a library for OpenAPI 3 with spring boot.\")\r\n      .termsOfService(\"http://swagger.io/terms/\")\r\n      .license(new License().name(\"Apache 2.0\")\r\n      .url(\"http://springdoc.org\")));\r\n} \r\n```","```\r\n@RestController\r\n@RequestMapping(\"/foobar\")\r\n@Tag(name = \"foobar\", description = \"the foobar API with documentation annotations\")\r\npublic class FooBarController {\r\n    @Autowired\r\n    FooRepository repository;\r\n\r\n    @Operation(summary = \"Get a foo by foo id\")\r\n    @ApiResponses(value = {\r\n      @ApiResponse(responseCode = \"200\", description = \"found the foo\", content = { \r\n        @Content(mediaType = \"application/json\", schema = @Schema(implementation = Foo.class))}),\r\n      @ApiResponse(responseCode = \"400\", description = \"Invalid id supplied\", content = @Content), \r\n      @ApiResponse(responseCode = \"404\", description = \"Foo not found\", content = @Content) })\r\n    @GetMapping(value = \"{id}\")\r\n    public ResponseEntity getFooById(@Parameter(description = \"id of foo to be searched\") \r\n      @PathVariable(\"id\") String id) {\r\n        // implementation omitted for brevity\r\n    }\r\n    // other mappings, similarly annotated with @Operation and @ApiResponses\r\n} \r\n```","```\r\n@ExtendWith({ RestDocumentationExtension.class, SpringExtension.class })\r\n@SpringBootTest(classes = Application.class)\r\npublic class SpringRestDocsIntegrationTest {\r\n    private MockMvc mockMvc;\r\n\r\n    @Autowired\r\n    private ObjectMapper objectMapper;\r\n\r\n    @BeforeEach\r\n    public void setup(WebApplicationContext webApplicationContext, \r\n      RestDocumentationContextProvider restDocumentation) {\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext)\r\n          .apply(documentationConfiguration(restDocumentation))\r\n          .build();\r\n    }\r\n\r\n    @Test\r\n    public void whenGetFooById_thenSuccessful() throws Exception {\r\n        ConstraintDescriptions desc = new ConstraintDescriptions(Foo.class);\r\n        this.mockMvc.perform(get(\"/foo/{id}\", 1))\r\n          .andExpect(status().isOk())\r\n          .andDo(document(\"getAFoo\", preprocessRequest(prettyPrint()), \r\n            preprocessResponse(prettyPrint()), \r\n            pathParameters(parameterWithName(\"id\").description(\"id of foo to be searched\")),\r\n            responseFields(fieldWithPath(\"id\")\r\n              .description(\"The id of the foo\" + \r\n                collectionToDelimitedString(desc.descriptionsForProperty(\"id\"), \". \")),\r\n              fieldWithPath(\"title\").description(\"The title of the foo\"), \r\n              fieldWithPath(\"body\").description(\"The body of the foo\"))));\r\n    }\r\n\r\n    // more test methods to cover other mappings\r\n```","```\r\n[source,http,options=\"nowrap\"]\r\n----\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: 60\r\n\r\n{\r\n  \"id\" : 1,\r\n  \"title\" : \"Foo 1\",\r\n  \"body\" : \"Foo body 1\"\r\n}\r\n----\r\n```","```\r\n=== Accessing the foo GET\r\nA `GET` request is used to access the foo read.\r\n\r\n==== Request structure\r\ninclude::{snippets}/getAFoo/http-request.adoc[]\r\n\r\n==== Path Parameters\r\ninclude::{snippets}/getAFoo/path-parameters.adoc[]\r\n\r\n==== Example response\r\ninclude::{snippets}/getAFoo/http-response.adoc[]\r\n\r\n==== CURL request\r\ninclude::{snippets}/getAFoo/curl-request.adoc[]\r\n```"]