["```\r\n<dependency>\r\n    <groupId>de.codecentric</groupId>\r\n    <artifactId>spring-boot-admin-starter-server</artifactId>\r\n    <version>2.4.1</version>\r\n</dependency>\r\n```","```\r\n@EnableAdminServer\r\n@SpringBootApplication\r\npublic class SpringBootAdminServerApplication(exclude = AdminServerHazelcastAutoConfiguration.class) {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootAdminServerApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>de.codecentric</groupId>\r\n    <artifactId>spring-boot-admin-starter-client</artifactId>\r\n    <version>2.4.1</version>\r\n</dependency>\r\n```","```\r\nspring.boot.admin.client.url=http://localhost:8080\r\n```","```\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.endpoint.health.show-details=always\r\n```","```\r\n<dependency>\r\n    <groupId>de.codecentric</groupId>\r\n    <artifactId>spring-boot-admin-server-ui-login</artifactId>\r\n    <version>1.5.7</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class WebSecurityConfig {\r\n    private final AdminServerProperties adminServer;\r\n\r\n    public WebSecurityConfig(AdminServerProperties adminServer) {\r\n        this.adminServer = adminServer;\r\n    }\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        SavedRequestAwareAuthenticationSuccessHandler successHandler = \r\n          new SavedRequestAwareAuthenticationSuccessHandler();\r\n        successHandler.setTargetUrlParameter(\"redirectTo\");\r\n        successHandler.setDefaultTargetUrl(this.adminServer.getContextPath() + \"/\");\r\n\r\n        http\r\n            .authorizeRequests()\r\n                .antMatchers(this.adminServer.getContextPath() + \"/assets/**\").permitAll()\r\n                .antMatchers(this.adminServer.getContextPath() + \"/login\").permitAll()\r\n                .anyRequest().authenticated()\r\n                .and()\r\n            .formLogin()\r\n                .loginPage(this.adminServer.getContextPath() + \"/login\")\r\n                .successHandler(successHandler)\r\n                .and()\r\n            .logout()\r\n                .logoutUrl(this.adminServer.getContextPath() + \"/logout\")\r\n                .and()\r\n            .httpBasic()\r\n                .and()\r\n            .csrf()\r\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\r\n                .ignoringRequestMatchers(\r\n                  new AntPathRequestMatcher(this.adminServer.getContextPath() + \r\n                   \"/instances\", HttpMethod.POST.toString()), \r\n                  new AntPathRequestMatcher(this.adminServer.getContextPath() + \r\n                   \"/instances/*\", HttpMethod.DELETE.toString()),\r\n                  new AntPathRequestMatcher(this.adminServer.getContextPath() + \"/actuator/**\"))\r\n                .and()\r\n            .rememberMe()\r\n                .key(UUID.randomUUID().toString())\r\n                .tokenValiditySeconds(1209600);\r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\nspring.boot.admin.client.username=admin\r\nspring.boot.admin.client.password=admin\r\n```","```\r\nspring.security.user.name=client\r\nspring.security.user.password=client\r\nspring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}\r\nspring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}\r\n```","```\r\nspring.boot.admin.routes.endpoints=env, metrics, trace, jolokia, info, configprops\r\n```","```\r\n<dependency>\r\n    <groupId>com.hazelcast</groupId>\r\n    <artifactId>hazelcast</artifactId>\r\n    <version>4.0.3</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class HazelcastConfig {\r\n\r\n    @Bean\r\n    public Config hazelcast() {\r\n        MapConfig eventStoreMap = new MapConfig(\"spring-boot-admin-event-store\")\r\n          .setInMemoryFormat(InMemoryFormat.OBJECT)\r\n          .setBackupCount(1)\r\n          .setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.NONE))\r\n          .setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));\r\n\r\n        MapConfig sentNotificationsMap = new MapConfig(\"spring-boot-admin-application-store\")\r\n          .setInMemoryFormat(InMemoryFormat.OBJECT)\r\n          .setBackupCount(1)\r\n          .setEvictionConfig(new EvictionConfig().setEvictionPolicy(EvictionPolicy.LRU))\r\n          .setMergePolicyConfig(new MergePolicyConfig(PutIfAbsentMergePolicy.class.getName(), 100));\r\n\r\n        Config config = new Config();\r\n        config.addMapConfig(eventStoreMap);\r\n        config.addMapConfig(sentNotificationsMap);\r\n        config.setProperty(\"hazelcast.jmx\", \"true\");\r\n\r\n        config.getNetworkConfig()\r\n          .getJoin()\r\n          .getMulticastConfig()\r\n          .setEnabled(false);\r\n        TcpIpConfig tcpIpConfig = config.getNetworkConfig()\r\n          .getJoin()\r\n          .getTcpIpConfig();\r\n        tcpIpConfig.setEnabled(true);\r\n        tcpIpConfig.setMembers(Collections.singletonList(\"127.0.0.1\"));\r\n        return config;\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-mail</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\nspring.mail.host=smtp.example.com\r\nspring.mail.username=smtp_user\r\nspring.mail.password=smtp_password\r\n[[emailÂ protected]](/web/20220926192843/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nspring.boot.admin.notify.hipchat.auth-token=<generated_token>\r\nspring.boot.admin.notify.hipchat.room-id=<room-id>\r\nspring.boot.admin.notify.hipchat.url=https://yourcompany.hipchat.com/v2/\r\n```","```\r\n@Configuration\r\npublic class NotifierConfiguration {\r\n    private final InstanceRepository repository;\r\n    private final ObjectProvider<List<Notifier>> otherNotifiers;\r\n\r\n    public NotifierConfiguration(InstanceRepository repository, \r\n      ObjectProvider<List<Notifier>> otherNotifiers) {\r\n        this.repository = repository;\r\n        this.otherNotifiers = otherNotifiers;\r\n    }\r\n\r\n    @Bean\r\n    public FilteringNotifier filteringNotifier() {\r\n        CompositeNotifier delegate = \r\n          new CompositeNotifier(this.otherNotifiers.getIfAvailable(Collections::emptyList));\r\n        return new FilteringNotifier(delegate, this.repository);\r\n    }\r\n\r\n    @Bean\r\n    public LoggingNotifier notifier() {\r\n        return new LoggingNotifier(repository);\r\n    }\r\n\r\n    @Primary\r\n    @Bean(initMethod = \"start\", destroyMethod = \"stop\")\r\n    public RemindingNotifier remindingNotifier() {\r\n        RemindingNotifier remindingNotifier = new RemindingNotifier(filteringNotifier(), repository);\r\n        remindingNotifier.setReminderPeriod(Duration.ofMinutes(5));\r\n        remindingNotifier.setCheckReminderInverval(Duration.ofSeconds(60));\r\n        return remindingNotifier;\r\n    }\r\n}\r\n```"]