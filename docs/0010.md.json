["```\r\nsession.createNativeQuery(\"SELECT * FROM Student student\")\r\n  .list();\r\n```","```\r\npublic List<Object[]> fetchColumnWithScalar() {\r\n    return session.createNativeQuery(\"SELECT * FROM Student student\")\r\n      .addScalar(\"studentId\", StandardBasicTypes.LONG)\r\n      .addScalar(\"name\", StandardBasicTypes.STRING)\r\n      .addScalar(\"age\", StandardBasicTypes.INTEGER)\r\n      .list();\r\n}\r\n```","```\r\npublic List<String> fetchLimitedColumnWithScalar() {\r\n    return session.createNativeQuery(\"SELECT * FROM Student student\")\r\n      .addScalar(\"name\", StandardBasicTypes.STRING)\r\n      .list();\r\n}\r\n```","```\r\nSELECT * FROM Student student\r\n```","```\r\nList<String> list = scalarExample.fetchLimitedColumnWithScalar();\r\nfor (String colValue : list) {\r\n    assertTrue(colValue.startsWith(\"John\"));\r\n}\r\n```","```\r\npublic Integer fetchAvgAgeWithScalar() {\r\n    return (Integer) session.createNativeQuery(\"SELECT AVG(age) as avgAge FROM Student student\")\r\n      .addScalar(\"avgAge\")\r\n      .uniqueResult();\r\n}\r\n```","```\r\nInteger avgAge = scalarExample.fetchAvgAgeWithScalar();\r\nassertEquals(true, (avgAge >= 5 && avgAge <= 24));\r\n```","```\r\npublic List<Object[]> fetchWithOverloadedScalar() {\r\n    return session.createNativeQuery(\"SELECT * FROM Student student\")\r\n      .addScalar(\"name\", StandardBasicTypes.STRING)\r\n      .addScalar(\"age\")\r\n      .list();\r\n}\r\n```","```\r\nList<Object[]> list = scalarExample.fetchColumnWithOverloadedScalar();\r\nfor (Object[] colArray : list) {\r\n    assertEquals(2, colArray.length);\r\n}\r\n```"]