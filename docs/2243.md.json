["```\r\nIndex: 0 1 2 3 4 5\r\nValue: 0 1 3 4 6 7\r\n```","```\r\npublic class SmallestMissingPositiveInteger {\r\n    public static int searchInSortedArray(int[] input) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nfor (int i = 0; i < input.length; i++) {\r\n    if (i != input[i]) {\r\n        return i;\r\n    }\r\n}\r\n```","```\r\nreturn input.length;\r\n```","```\r\nint[] input = new int[] {0, 1, 2, 4, 5};\r\n```","```\r\nint result = SmallestMissingPositiveInteger.searchInSortedArray(input);\r\n\r\nassertThat(result).isEqualTo(3);\r\n```","```\r\nint[] input = new int[] {0, 1, 2, 3, 4, 5};\r\n```","```\r\nint result = SmallestMissingPositiveInteger.searchInSortedArray(input);\r\n\r\nassertThat(result).isEqualTo(input.length);\r\n```","```\r\nArrays.sort(input);\r\n```","```\r\nreturn searchInSortedArray(input);\r\n```","```\r\nint[] input = new int[] {4, 2, 0, 5};\r\n```","```\r\nint result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\r\n\r\nassertThat(result).isEqualTo(1);\r\n```","```\r\nint[] input = new int[] {4, 5, 1, 3, 0, 2};\r\n\r\nint result = SmallestMissingPositiveInteger.searchInUnsortedArraySortingFirst(input);\r\n\r\nassertThat(result).isEqualTo(input.length);\r\n```","```\r\nboolean[] flags = new boolean[input.length];\r\nfor (int number : input) {\r\n    if (number < flags.length) {\r\n        flags[number] = true;\r\n    }\r\n}\r\n```","```\r\nfor (int i = 0; i < flags.length; i++) {\r\n    if (!flags[i]) {\r\n        return i;\r\n    }\r\n}\r\n\r\nreturn flags.length;\r\n```","```\r\nint[] input = new int[] {4, 2, 0, 5};\r\n```","```\r\nint result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\r\n\r\nassertThat(result).isEqualTo(1);\r\n```","```\r\nint[] input = new int[] {4, 5, 1, 3, 0, 2};\r\n\r\nint result = SmallestMissingPositiveInteger.searchInUnsortedArrayBooleanArray(input);\r\n\r\nassertThat(result).isEqualTo(input.length);\r\n```"]