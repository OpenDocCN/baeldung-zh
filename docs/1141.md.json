["```\r\npublic class User {\r\n\r\n    private String name;\r\n    private String email;\r\n\r\n    // constructors / standard setters / getters\r\n}\r\n```","```\r\npublic interface Dao<T> {\r\n\r\n    Optional<T> get(long id);\r\n\r\n    List<T> getAll();\r\n\r\n    void save(T t);\r\n\r\n    void update(T t, String[] params);\r\n\r\n    void delete(T t);\r\n}\r\n```","```\r\npublic class UserDao implements Dao<User> {\r\n\r\n    private List<User> users = new ArrayList<>();\r\n\r\n    public UserDao() {\r\n        users.add(new User(\"John\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n        users.add(new User(\"Susan\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n    }\r\n\r\n    @Override\r\n    public Optional<User> get(long id) {\r\n        return Optional.ofNullable(users.get((int) id));\r\n    }\r\n\r\n    @Override\r\n    public List<User> getAll() {\r\n        return users;\r\n    }\r\n\r\n    @Override\r\n    public void save(User user) {\r\n        users.add(user);\r\n    }\r\n\r\n    @Override\r\n    public void update(User user, String[] params) {\r\n        user.setName(Objects.requireNonNull(\r\n          params[0], \"Name cannot be null\"));\r\n        user.setEmail(Objects.requireNonNull(\r\n          params[1], \"Email cannot be null\"));\r\n\r\n        users.add(user);\r\n    }\r\n\r\n    @Override\r\n    public void delete(User user) {\r\n        users.remove(user);\r\n    }\r\n}\r\n```","```\r\npublic class UserApplication {\r\n\r\n    private static Dao<User> userDao;\r\n\r\n    public static void main(String[] args) {\r\n        userDao = new UserDao();\r\n\r\n        User user1 = getUser(0);\r\n        System.out.println(user1);\r\n        userDao.update(user1, new String[]{\"Jake\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"});\r\n\r\n        User user2 = getUser(1);\r\n        userDao.delete(user2);\r\n        userDao.save(new User(\"Julie\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n\r\n        userDao.getAll().forEach(user -> System.out.println(user.getName()));\r\n    }\r\n\r\n    private static User getUser(long id) {\r\n        Optional<User> user = userDao.get(id);\r\n\r\n        return user.orElseGet(\r\n          () -> new User(\"non-existing user\", \"no-email\"));\r\n    }\r\n}\r\n```","```\r\npublic class JpaUserDao implements Dao<User> {\r\n\r\n    private EntityManager entityManager;\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public Optional<User> get(long id) {\r\n        return Optional.ofNullable(entityManager.find(User.class, id));\r\n    }\r\n\r\n    @Override\r\n    public List<User> getAll() {\r\n        Query query = entityManager.createQuery(\"SELECT e FROM User e\");\r\n        return query.getResultList();\r\n    }\r\n\r\n    @Override\r\n    public void save(User user) {\r\n        executeInsideTransaction(entityManager -> entityManager.persist(user));\r\n    }\r\n\r\n    @Override\r\n    public void update(User user, String[] params) {\r\n        user.setName(Objects.requireNonNull(params[0], \"Name cannot be null\"));\r\n        user.setEmail(Objects.requireNonNull(params[1], \"Email cannot be null\"));\r\n        executeInsideTransaction(entityManager -> entityManager.merge(user));\r\n    }\r\n\r\n    @Override \r\n    public void delete(User user) {\r\n        executeInsideTransaction(entityManager -> entityManager.remove(user));\r\n    }\r\n\r\n    private void executeInsideTransaction(Consumer<EntityManager> action) {\r\n        EntityTransaction tx = entityManager.getTransaction();\r\n        try {\r\n            tx.begin();\r\n            action.accept(entityManager);\r\n            tx.commit(); \r\n        }\r\n        catch (RuntimeException e) {\r\n            tx.rollback();\r\n            throw e;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n\r\n    private String name;\r\n    private String email;\r\n\r\n    // standard constructors / setters / getters\r\n}\r\n```","```\r\npublic class UserApplication {\r\n\r\n    private static Dao<User> jpaUserDao;\r\n\r\n    // standard constructors\r\n\r\n    public static void main(String[] args) {\r\n        User user1 = getUser(1);\r\n        System.out.println(user1);\r\n        updateUser(user1, new String[]{\"Jake\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"});\r\n        saveUser(new User(\"Monica\", \"[[email protected]](/web/20220926183157/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n        deleteUser(getUser(2));\r\n        getAllUsers().forEach(user -> System.out.println(user.getName()));\r\n    }\r\n\r\n    public static User getUser(long id) {\r\n        Optional<User> user = jpaUserDao.get(id);\r\n\r\n        return user.orElseGet(\r\n          () -> new User(\"non-existing user\", \"no-email\"));\r\n    }\r\n\r\n    public static List<User> getAllUsers() {\r\n        return jpaUserDao.getAll();\r\n    }\r\n\r\n    public static void updateUser(User user, String[] params) {\r\n        jpaUserDao.update(user, params);\r\n    }\r\n\r\n    public static void saveUser(User user) {\r\n        jpaUserDao.save(user);\r\n    }\r\n\r\n    public static void deleteUser(User user) {\r\n        jpaUserDao.delete(user);\r\n    }\r\n}\r\n```"]