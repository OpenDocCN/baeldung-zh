["```\r\n@Test\r\npublic void givenUserDoesNotExists_whenUserInfoIsRetrieved_then404IsReceived()\r\n  throws ClientProtocolException, IOException {\r\n\r\n    // Given\r\n    String name = RandomStringUtils.randomAlphabetic( 8 );\r\n    HttpUriRequest request = new HttpGet( \"https://api.github.com/users/\" + name );\r\n\r\n    // When\r\n    HttpResponse httpResponse = HttpClientBuilder.create().build().execute( request );\r\n\r\n    // Then\r\n    assertThat(\r\n      httpResponse.getStatusLine().getStatusCode(),\r\n      equalTo(HttpStatus.SC_NOT_FOUND));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\ngivenRequestWithNoAcceptHeader_whenRequestIsExecuted_thenDefaultResponseContentTypeIsJson()\r\n  throws ClientProtocolException, IOException {\r\n\r\n   // Given\r\n   String jsonMimeType = \"application/json\";\r\n   HttpUriRequest request = new HttpGet( \"https://api.github.com/users/eugenp\" );\r\n\r\n   // When\r\n   HttpResponse response = HttpClientBuilder.create().build().execute( request );\r\n\r\n   // Then\r\n   String mimeType = ContentType.getOrDefault(response.getEntity()).getMimeType();\r\n   assertEquals( jsonMimeType, mimeType );\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenUserExists_whenUserInformationIsRetrieved_thenRetrievedResourceIsCorrect()\r\n  throws ClientProtocolException, IOException {\r\n\r\n    // Given\r\n    HttpUriRequest request = new HttpGet( \"https://api.github.com/users/eugenp\" );\r\n\r\n    // When\r\n    HttpResponse response = HttpClientBuilder.create().build().execute( request );\r\n\r\n    // Then\r\n    GitHubUser resource = RetrieveUtil.retrieveResourceFromResponse(\r\n      response, GitHubUser.class);\r\n    assertThat( \"eugenp\", Matchers.is( resource.getLogin() ) );\r\n}\r\n```","```\r\npublic class GitHubUser {\r\n\r\n    private String login;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic static <T> T retrieveResourceFromResponse(HttpResponse response, Class<T> clazz) \r\n  throws IOException {\r\n\r\n    String jsonFromResponse = EntityUtils.toString(response.getEntity());\r\n    ObjectMapper mapper = new ObjectMapper()\r\n      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    return mapper.readValue(jsonFromResponse, clazz);\r\n}\r\n```"]