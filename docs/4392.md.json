["```\r\n<dependency>\r\n    <groupId>commons-chain</groupId>\r\n    <artifactId>commons-chain</artifactId>\r\n    <version>1.2</version>\r\n</dependency> \r\n```","```\r\npublic class AtmRequestContext extends ContextBase {\r\n    int totalAmountToBeWithdrawn;\r\n    int noOfHundredsDispensed;\r\n    int noOfFiftiesDispensed;\r\n    int noOfTensDispensed;\r\n    int amountLeftToBeWithdrawn;\r\n\r\n    // standard setters & getters\r\n}\r\n```","```\r\npublic class HundredDenominationDispenser implements Command {\r\n\r\n    @Override\r\n    public boolean execute(Context context) throws Exception {\r\n        intamountLeftToBeWithdrawn = (int) context.get(\"amountLeftToBeWithdrawn);\r\n        if (amountLeftToBeWithdrawn >= 100) {\r\n            context.put(\"noOfHundredsDispensed\", amountLeftToBeWithdrawn / 100);\r\n            context.put(\"amountLeftToBeWithdrawn\", amountLeftToBeWithdrawn % 100);\r\n        }\r\n        return false;\r\n    }\r\n} \r\n```","```\r\npublic class AtmWithdrawalChain extends ChainBase {\r\n\r\n    public AtmWithdrawalChain() {\r\n        super();\r\n        addCommand(new HundredDenominationDispenser());\r\n        addCommand(new FiftyDenominationDispenser());\r\n        addCommand(new TenDenominationDispenser());\r\n        addCommand(new AuditFilter());\r\n    }\r\n}\r\n```","```\r\npublic class AuditFilter implements Filter {\r\n\r\n    @Override\r\n    public boolean postprocess(Context context, Exception exception) {\r\n        // send notification to bank and user\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public boolean execute(Context context) throws Exception {\r\n        return false;\r\n    }\r\n}\r\n```","```\r\npublic class AtmCatalog extends CatalogBase {\r\n\r\n    public AtmCatalog() {\r\n        super();\r\n        addCommand(\"atmWithdrawalChain\", new AtmWithdrawalChain());\r\n    }\r\n}\r\n```","```\r\npublic class AtmChainTest {\r\n\r\n    @Test\r\n    public void givenInputsToContext_whenAppliedChain_thenExpectedContext() throws Exception {\r\n        Context context = new AtmRequestContext();\r\n        context.put(\"totalAmountToBeWithdrawn\", 460);\r\n        context.put(\"amountLeftToBeWithdrawn\", 460);\r\n\r\n        Catalog catalog = new AtmCatalog();\r\n        Command atmWithdrawalChain = catalog.getCommand(\"atmWithdrawalChain\");\r\n\r\n        atmWithdrawalChain.execute(context);\r\n\r\n        assertEquals(460, (int) context.get(\"totalAmountToBeWithdrawn\"));\r\n        assertEquals(0, (int) context.get(\"amountLeftToBeWithdrawn\"));\r\n        assertEquals(4, (int) context.get(\"noOfHundredsDispensed\"));\r\n        assertEquals(1, (int) context.get(\"noOfFiftiesDispensed\"));\r\n        assertEquals(1, (int) context.get(\"noOfTensDispensed\"));\r\n    }\r\n}\r\n```"]