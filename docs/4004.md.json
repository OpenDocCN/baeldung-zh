["```\r\npublic class FooParameterResolver implements ParameterResolver {\r\n  @Override\r\n  public boolean supportsParameter(ParameterContext parameterContext, \r\n    ExtensionContext extensionContext) throws ParameterResolutionException {\r\n      return parameterContext.getParameter().getType() == Foo.class;\r\n  }\r\n\r\n  @Override\r\n  public Object resolveParameter(ParameterContext parameterContext, \r\n    ExtensionContext extensionContext) throws ParameterResolutionException {\r\n      return new Foo();\r\n  }\r\n} \r\n```","```\r\n@ExtendWith(FooParameterResolver.class)\r\npublic class FooTest {\r\n    @Test\r\n    public void testIt(Foo fooInstance) {\r\n        // TEST CODE GOES HERE\r\n    }  \r\n} \r\n```","```\r\npublic class ValidPersonParameterResolver implements ParameterResolver {\r\n\r\n  public static Person[] VALID_PERSONS = {\r\n      new Person().setId(1L).setLastName(\"Adams\").setFirstName(\"Jill\"),\r\n      new Person().setId(2L).setLastName(\"Baker\").setFirstName(\"James\"),\r\n      new Person().setId(3L).setLastName(\"Carter\").setFirstName(\"Samanta\"),\r\n      new Person().setId(4L).setLastName(\"Daniels\").setFirstName(\"Joseph\"),\r\n      new Person().setId(5L).setLastName(\"English\").setFirstName(\"Jane\"),\r\n      new Person().setId(6L).setLastName(\"Fontana\").setFirstName(\"Enrique\"),\r\n  }; \r\n```","```\r\n@Override\r\npublic boolean supportsParameter(ParameterContext parameterContext, \r\n  ExtensionContext extensionContext) throws ParameterResolutionException {\r\n    boolean ret = false;\r\n    if (parameterContext.getParameter().getType() == Person.class) {\r\n        ret = true;\r\n    }\r\n    return ret;\r\n} \r\n```","```\r\n@Override\r\npublic Object resolveParameter(ParameterContext parameterContext, \r\n  ExtensionContext extensionContext) throws ParameterResolutionException {\r\n    Object ret = null;\r\n    if (parameterContext.getParameter().getType() == Person.class) {\r\n        ret = VALID_PERSONS[new Random().nextInt(VALID_PERSONS.length)];\r\n    }\r\n    return ret;\r\n}\r\n```","```\r\npublic class InvalidPersonParameterResolver implements ParameterResolver {\r\n  public static Person[] INVALID_PERSONS = {\r\n      new Person().setId(1L).setLastName(\"Ad_ams\").setFirstName(\"Jill,\"),\r\n      new Person().setId(2L).setLastName(\",Baker\").setFirstName(\"\"),\r\n      new Person().setId(3L).setLastName(null).setFirstName(null),\r\n      new Person().setId(4L).setLastName(\"Daniel&\").setFirstName(\"{Joseph}\"),\r\n      new Person().setId(5L).setLastName(\"\").setFirstName(\"English, Jane\"),\r\n      new Person()/*.setId(6L).setLastName(\"Fontana\").setFirstName(\"Enrique\")*/,\r\n  }; \r\n```","```\r\n@Override\r\npublic Object resolveParameter(ParameterContext parameterContext, \r\n  ExtensionContext extensionContext) throws ParameterResolutionException {\r\n    Object ret = null;\r\n    if (parameterContext.getParameter().getType() == Person.class) {\r\n        ret = INVALID_PERSONS[new Random().nextInt(INVALID_PERSONS.length)];\r\n    }\r\n    return ret;\r\n}\r\n\r\n@Override\r\npublic boolean supportsParameter(ParameterContext parameterContext, \r\n  ExtensionContext extensionContext) throws ParameterResolutionException {\r\n    boolean ret = false;\r\n    if (parameterContext.getParameter().getType() == Person.class) {\r\n        ret = true;\r\n    }\r\n    return ret;\r\n} \r\n```","```\r\n@DisplayName(\"Testing PersonValidator\")\r\npublic class PersonValidatorTest {\r\n\r\n    @Nested\r\n    @DisplayName(\"When using Valid data\")\r\n    @ExtendWith(ValidPersonParameterResolver.class)\r\n    public class ValidData {\r\n\r\n        @RepeatedTest(value = 10)\r\n        @DisplayName(\"All first names are valid\")\r\n        public void validateFirstName(Person person) {\r\n            try {\r\n                assertTrue(PersonValidator.validateFirstName(person));\r\n            } catch (PersonValidator.ValidationException e) {\r\n                fail(\"Exception not expected: \" + e.getLocalizedMessage());\r\n            }\r\n        }\r\n    }\r\n\r\n    @Nested\r\n    @DisplayName(\"When using Invalid data\")\r\n    @ExtendWith(InvalidPersonParameterResolver.class)\r\n    public class InvalidData {\r\n\r\n        @RepeatedTest(value = 10)\r\n        @DisplayName(\"All first names are invalid\")\r\n        public void validateFirstName(Person person) {\r\n            assertThrows(\r\n              PersonValidator.ValidationException.class, \r\n              () -> PersonValidator.validateFirstName(person));\r\n        }\r\n    }\r\n} \r\n```"]