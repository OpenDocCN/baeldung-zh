["```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.core</groupId>\r\n    <artifactId>jersey-client</artifactId>\r\n    <version>2.29</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.media</groupId>\r\n    <artifactId>jersey-media-sse</artifactId>\r\n    <version>2.29</version>\r\n</dependency>\r\n```","```\r\npublic class AddHeaderOnRequestFilter implements ClientRequestFilter {\r\n\r\n    public static final String FILTER_HEADER_VALUE = \"filter-header-value\";\r\n    public static final String FILTER_HEADER_KEY = \"x-filter-header\";\r\n\r\n    @Override\r\n    public void filter(ClientRequestContext requestContext) throws IOException {\r\n        requestContext.getHeaders().add(FILTER_HEADER_KEY, FILTER_HEADER_VALUE);\r\n    }\r\n}\r\n```","```\r\nClient client = ClientBuilder.newBuilder()\r\n  .register(AddHeaderOnRequestFilter.class)\r\n  .build();\r\n\r\nWebTarget webTarget = client.target(\"https://sse.example.org/\");\r\n\r\nSseEventSource sseEventSource = SseEventSource.target(webTarget).build();\r\nsseEventSource.register((event) -> { /* Consume event here */ });\r\nsseEventSource.open();\r\n// do something here until ready to close\r\nsseEventSource.close();\r\n```","```\r\nSystem.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");\r\n```","```\r\npublic Response simpleHeader(String headerKey, String headerValue) {\r\n    Client client = ClientBuilder.newClient();\r\n    WebTarget webTarget = client.target(\"https://sse.example.org/\");\r\n    Invocation.Builder invocationBuilder = webTarget.request();\r\n    invocationBuilder.header(headerKey, headerValue);\r\n    return invocationBuilder.get();\r\n}\r\n```","```\r\npublic Response simpleHeaderFluently(String headerKey, String headerValue) {\r\n    Client client = ClientBuilder.newClient();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .header(headerKey, headerValue)\r\n      .get();\r\n}\r\n```","```\r\npublic Response basicAuthenticationAtClientLevel(String username, String password) {\r\n    HttpAuthenticationFeature feature = HttpAuthenticationFeature.basic(username, password);\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .get();\r\n}\r\n```","```\r\npublic Response basicAuthenticationAtRequestLevel(String username, String password) {\r\n    HttpAuthenticationFeature feature = HttpAuthenticationFeature.basicBuilder().build();\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .property(HTTP_AUTHENTICATION_BASIC_USERNAME, username)\r\n      .property(HTTP_AUTHENTICATION_BASIC_PASSWORD, password)\r\n      .get();\r\n}\r\n```","```\r\npublic Response digestAuthenticationAtClientLevel(String username, String password) {\r\n    HttpAuthenticationFeature feature = HttpAuthenticationFeature.digest(username, password);\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .get();\r\n}\r\n```","```\r\npublic Response digestAuthenticationAtRequestLevel(String username, String password) {\r\n    HttpAuthenticationFeature feature = HttpAuthenticationFeature.digest();\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"http://sse.example.org/\")\r\n      .request()\r\n      .property(HTTP_AUTHENTICATION_DIGEST_USERNAME, username)\r\n      .property(HTTP_AUTHENTICATION_DIGEST_PASSWORD, password)\r\n      .get();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.security</groupId>\r\n    <artifactId>oauth2-client</artifactId>\r\n    <version>2.29</version>\r\n</dependency>\r\n```","```\r\npublic Response bearerAuthenticationWithOAuth2AtClientLevel(String token) {\r\n    Feature feature = OAuth2ClientSupport.feature(token);\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.examples.org/\")\r\n      .request()\r\n      .get();\r\n}\r\n```","```\r\npublic Response bearerAuthenticationWithOAuth2AtRequestLevel(String token, String otherToken) {\r\n    Feature feature = OAuth2ClientSupport.feature(token);\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .property(OAuth2ClientSupport.OAUTH2_PROPERTY_ACCESS_TOKEN, otherToken)\r\n      .get();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.security</groupId>\r\n    <artifactId>oauth1-client</artifactId>\r\n    <version>2.29</version>\r\n</dependency>\r\n```","```\r\npublic Response bearerAuthenticationWithOAuth1AtClientLevel(String token, String consumerKey) {\r\n    ConsumerCredentials consumerCredential = \r\n      new ConsumerCredentials(consumerKey, \"my-consumer-secret\");\r\n    AccessToken accessToken = new AccessToken(token, \"my-access-token-secret\");\r\n\r\n    Feature feature = OAuth1ClientSupport\r\n      .builder(consumerCredential)\r\n      .feature()\r\n      .accessToken(accessToken)\r\n      .build();\r\n\r\n    Client client = ClientBuilder.newBuilder().register(feature).build();\r\n\r\n    return client.target(\"https://sse.example.org/\")\r\n      .request()\r\n      .get();\r\n}\r\n```"]