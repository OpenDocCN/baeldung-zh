["```\r\n@Configuration\r\n@PropertySource(\"classpath:foo.properties\")\r\npublic class PropertiesWithJavaConfig {\r\n    //...\r\n}\r\n```","```\r\n@PropertySource({ \r\n  \"classpath:persistence-${envTarget:mysql}.properties\"\r\n})\r\n...\r\n```","```\r\n@PropertySource(\"classpath:foo.properties\")\r\n@PropertySource(\"classpath:bar.properties\")\r\npublic class PropertiesWithJavaConfig {\r\n    //...\r\n}\r\n```","```\r\n@PropertySources({\r\n    @PropertySource(\"classpath:foo.properties\"),\r\n    @PropertySource(\"classpath:bar.properties\")\r\n})\r\npublic class PropertiesWithJavaConfig {\r\n    //...\r\n}\r\n```","```\r\n@Value( \"${jdbc.url}\" )\r\nprivate String jdbcUrl;\r\n```","```\r\n@Value( \"${jdbc.url:aDefaultUrl}\" )\r\nprivate String jdbcUrl;\r\n```","```\r\n@Autowired\r\nprivate Environment env;\r\n...\r\ndataSource.setUrl(env.getProperty(\"jdbc.url\"));\r\n```","```\r\njava -jar app.jar --spring.config.location=classpath:/another-location.properties\r\n```","```\r\njava -jar app.jar --spring.config.location=config/*/\r\n```","```\r\nbaeldung.customProperty=defaultValue\r\n#---\r\nbaeldung.customProperty=overriddenValue\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@TestPropertySource(\"/foo.properties\")\r\npublic class FilePropertyInjectionUnitTest {\r\n\r\n    @Value(\"${foo}\")\r\n    private String foo;\r\n\r\n    @Test\r\n    public void whenFilePropertyProvided_thenProperlyInjected() {\r\n        assertThat(foo).isEqualTo(\"bar\");\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@TestPropertySource(properties = {\"foo=bar\"})\r\npublic class PropertyInjectionUnitTest {\r\n\r\n    @Value(\"${foo}\")\r\n    private String foo;\r\n\r\n    @Test\r\n    public void whenPropertyProvided_thenProperlyInjected() {\r\n        assertThat(foo).isEqualTo(\"bar\");\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(\r\n  properties = {\"foo=bar\"}, classes = SpringBootPropertiesTestApplication.class)\r\npublic class SpringBootPropertyInjectionIntegrationTest {\r\n\r\n    @Value(\"${foo}\")\r\n    private String foo;\r\n\r\n    @Test\r\n    public void whenSpringBootPropertyProvided_thenProperlyInjected() {\r\n        assertThat(foo).isEqualTo(\"bar\");\r\n    }\r\n}\r\n```","```\r\ndatabase.url=jdbc:postgresql:/localhost:5432/instance\r\ndatabase.username=foo\r\ndatabase.password=bar\r\n```","```\r\n@ConfigurationProperties(prefix = \"database\")\r\npublic class Database {\r\n    String url;\r\n    String username;\r\n    String password;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\ndatabase.url=jdbc:postgresql:/localhost:5432/instance\r\ndatabase.username=foo\r\ndatabase.password=bar\r\nsecret: foo\r\n```","```\r\ndatabase:\r\n  url: jdbc:postgresql:/localhost:5432/instance\r\n  username: foo\r\n  password: bar\r\nsecret: foo\r\n```","```\r\nspring.config.import=classpath:additional-application.properties,\r\n  classpath:additional-application[.yml],\r\n  optional:file:./external.properties,\r\n  classpath:additional-application-properties/\r\n```","```\r\njava -jar app.jar --property=\"value\"\r\n```","```\r\njava -Dproperty.name=\"value\" -jar app.jar\r\n```","```\r\nexport name=value\r\njava -jar app.jar \r\n```","```\r\nrandom.number=${random.int}\r\nrandom.long=${random.long}\r\nrandom.uuid=${random.uuid}\r\n```","```\r\n@Bean\r\npublic static PropertySourcesPlaceholderConfigurer properties(){\r\n    PropertySourcesPlaceholderConfigurer pspc\r\n      = new PropertySourcesPlaceholderConfigurer();\r\n    Resource[] resources = new ClassPathResource[ ]\r\n      { new ClassPathResource( \"foo.properties\" ) };\r\n    pspc.setLocations( resources );\r\n    pspc.setIgnoreUnresolvablePlaceholders( true );\r\n    return pspc;\r\n}\r\n```"]