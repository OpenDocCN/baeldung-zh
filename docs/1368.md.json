["```\r\n<dependency>\r\n    <groupId>org.openjdk.jmh</groupId>\r\n    <artifactId>jmh-core</artifactId>\r\n    <version>1.35</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.openjdk.jmh</groupId>\r\n    <artifactId>jmh-generator-annprocess</artifactId>\r\n    <version>1.35</version>\r\n</dependency>\r\n```","```\r\n@Fork(1)\r\n@Warmup(iterations = 2)\r\n@Measurement(iterations = 10)\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\r\npublic class ExceptionBenchmark {\r\n    private static final int LIMIT = 10_000;\r\n    // benchmarks go here\r\n}\r\n```","```\r\npublic class MappingFrameworksPerformance {\r\n    public static void main(String[] args) throws Exception {\r\n        org.openjdk.jmh.Main.main(args);\r\n    }\r\n}\r\n```","```\r\n<groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-jar-plugin</artifactId>\r\n    <version>3.2.0</version>\r\n    <configuration>\r\n        <archive>\r\n            <manifest>\r\n                <mainClass>com.baeldung.performancetests.MappingFrameworksPerformance</mainClass>\r\n            </manifest>\r\n        </archive>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n@Benchmark\r\npublic void doNotThrowException(Blackhole blackhole) {\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        blackhole.consume(new Object());\r\n    }\r\n}\r\n```","```\r\nBenchmark                               Mode  Cnt  Score   Error  Units\r\nExceptionBenchmark.doNotThrowException  avgt   10  0.049 ± 0.006  ms/op\r\n```","```\r\n@Benchmark\r\npublic void throwAndCatchException(Blackhole blackhole) {\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        try {\r\n            throw new Exception();\r\n        } catch (Exception e) {\r\n            blackhole.consume(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\nBenchmark                                  Mode  Cnt   Score   Error  Units\r\nExceptionBenchmark.doNotThrowException     avgt   10   0.048 ± 0.003  ms/op\r\nExceptionBenchmark.throwAndCatchException  avgt   10  17.942 ± 0.846  ms/op\r\n```","```\r\n@Benchmark\r\npublic void createExceptionWithoutThrowingIt(Blackhole blackhole) {\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        blackhole.consume(new Exception());\r\n    }\r\n}\r\n```","```\r\nBenchmark                                            Mode  Cnt   Score   Error  Units\r\nExceptionBenchmark.createExceptionWithoutThrowingIt  avgt   10  17.601 ± 3.152  ms/op\r\nExceptionBenchmark.doNotThrowException               avgt   10   0.054 ± 0.014  ms/op\r\nExceptionBenchmark.throwAndCatchException            avgt   10  17.174 ± 0.474  ms/op\r\n```","```\r\n@Benchmark\r\n@Fork(value = 1, jvmArgs = \"-XX:-StackTraceInThrowable\")\r\npublic void throwExceptionWithoutAddingStackTrace(Blackhole blackhole) {\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        try {\r\n            throw new Exception();\r\n        } catch (Exception e) {\r\n            blackhole.consume(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\nBenchmark                                                 Mode  Cnt   Score   Error  Units\r\nExceptionBenchmark.createExceptionWithoutThrowingIt       avgt   10  17.874 ± 3.199  ms/op\r\nExceptionBenchmark.doNotThrowException                    avgt   10   0.046 ± 0.003  ms/op\r\nExceptionBenchmark.throwAndCatchException                 avgt   10  16.268 ± 0.239  ms/op\r\nExceptionBenchmark.throwExceptionWithoutAddingStackTrace  avgt   10   1.174 ± 0.014  ms/op\r\n```","```\r\n@Benchmark\r\npublic void throwExceptionAndUnwindStackTrace(Blackhole blackhole) {\r\n    for (int i = 0; i < LIMIT; i++) {\r\n        try {\r\n            throw new Exception();\r\n        } catch (Exception e) {\r\n            blackhole.consume(e.getStackTrace());\r\n        }\r\n    }\r\n}\r\n```","```\r\nBenchmark                                                 Mode  Cnt    Score   Error  Units\r\nExceptionBenchmark.createExceptionWithoutThrowingIt       avgt   10   16.605 ± 0.988  ms/op\r\nExceptionBenchmark.doNotThrowException                    avgt   10    0.047 ± 0.006  ms/op\r\nExceptionBenchmark.throwAndCatchException                 avgt   10   16.449 ± 0.304  ms/op\r\nExceptionBenchmark.throwExceptionAndUnwindStackTrace      avgt   10  326.560 ± 4.991  ms/op\r\nExceptionBenchmark.throwExceptionWithoutAddingStackTrace  avgt   10    1.185 ± 0.015  ms/op\r\n```"]