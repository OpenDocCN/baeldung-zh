["```\r\n<dependency>\r\n    <groupId>com.datastax.oss</groupId>\r\n    <artifactId>java-driver-core</artifactId>\r\n    <version>4.1.0</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>com.datastax.oss</groupId>\r\n    <artifactId>java-driver-query-builder</artifactId>\r\n    <version>4.1.0</version>\r\n</dependency>\r\n```","```\r\nCqlSession session = CqlSession.builder().build();\r\n```","```\r\npublic class CassandraConnector {\r\n\r\n    private CqlSession session;\r\n\r\n    public void connect(String node, Integer port, String dataCenter) {\r\n        CqlSessionBuilder builder = CqlSession.builder();\r\n        builder.addContactPoint(new InetSocketAddress(node, port));\r\n        builder.withLocalDatacenter(dataCenter);\r\n\r\n        session = builder.build();\r\n    }\r\n\r\n    public CqlSession getSession() {\r\n        return this.session;\r\n    }\r\n\r\n    public void close() {\r\n        session.close();\r\n    }\r\n}\r\n```","```\r\npublic class KeyspaceRepository {\r\n\r\n    public void createKeyspace(String keyspaceName, int numberOfReplicas) {\r\n        CreateKeyspace createKeyspace = SchemaBuilder.createKeyspace(keyspaceName)\r\n          .ifNotExists()\r\n          .withSimpleStrategy(numberOfReplicas);\r\n\r\n        session.execute(createKeyspace.build());\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class KeyspaceRepository {\r\n\r\n    //...\r\n\r\n    public void useKeyspace(String keyspace) {\r\n        session.execute(\"USE \" + CqlIdentifier.fromCql(keyspace));\r\n    }\r\n}\r\n```","```\r\npublic class Video {\r\n    private UUID id;\r\n    private String title;\r\n    private Instant creationDate;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class VideoRepository {\r\n    private static final String TABLE_NAME = \"videos\";\r\n\r\n    public void createTable() {\r\n        createTable(null);\r\n    }\r\n\r\n    public void createTable(String keyspace) {\r\n        CreateTable createTable = SchemaBuilder.createTable(TABLE_NAME)\r\n          .withPartitionKey(\"video_id\", DataTypes.UUID)\r\n          .withColumn(\"title\", DataTypes.TEXT)\r\n          .withColumn(\"creation_date\", DataTypes.TIMESTAMP);\r\n\r\n        executeStatement(createTable.build(), keyspace);\r\n    }\r\n\r\n    private ResultSet executeStatement(SimpleStatement statement, String keyspace) {\r\n        if (keyspace != null) {\r\n            statement.setKeyspace(CqlIdentifier.fromCql(keyspace));\r\n        }\r\n\r\n        return session.execute(statement);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class VideoRepository {\r\n\r\n    //...\r\n\r\n    public UUID insertVideo(Video video, String keyspace) {\r\n        UUID videoId = UUID.randomUUID();\r\n\r\n        video.setId(videoId);\r\n\r\n        RegularInsert insertInto = QueryBuilder.insertInto(TABLE_NAME)\r\n          .value(\"video_id\", QueryBuilder.bindMarker())\r\n          .value(\"title\", QueryBuilder.bindMarker())\r\n          .value(\"creation_date\", QueryBuilder.bindMarker());\r\n\r\n        SimpleStatement insertStatement = insertInto.build();\r\n\r\n        if (keyspace != null) {\r\n            insertStatement = insertStatement.setKeyspace(keyspace);\r\n        }\r\n\r\n        PreparedStatement preparedStatement = session.prepare(insertStatement);\r\n\r\n        BoundStatement statement = preparedStatement.bind()\r\n          .setUuid(0, video.getId())\r\n          .setString(1, video.getTitle())\r\n          .setInstant(2, video.getCreationDate());\r\n\r\n        session.execute(statement);\r\n\r\n        return videoId;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class VideoRepository {\r\n\r\n    // ...\r\n\r\n    public List<Video> selectAll(String keyspace) {\r\n        Select select = QueryBuilder.selectFrom(TABLE_NAME).all();\r\n\r\n        ResultSet resultSet = executeStatement(select.build(), keyspace);\r\n\r\n        List<Video> result = new ArrayList<>();\r\n\r\n        resultSet.forEach(x -> result.add(\r\n            new Video(x.getUuid(\"video_id\"), x.getString(\"title\"), x.getInstant(\"creation_date\"))\r\n        ));\r\n\r\n        return result;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class Application {\r\n\r\n    public void run() {\r\n        CassandraConnector connector = new CassandraConnector();\r\n        connector.connect(\"127.0.0.1\", 9042, \"datacenter1\");\r\n        CqlSession session = connector.getSession();\r\n\r\n        KeyspaceRepository keyspaceRepository = new KeyspaceRepository(session);\r\n\r\n        keyspaceRepository.createKeyspace(\"testKeyspace\", 1);\r\n        keyspaceRepository.useKeyspace(\"testKeyspace\");\r\n\r\n        VideoRepository videoRepository = new VideoRepository(session);\r\n\r\n        videoRepository.createTable();\r\n\r\n        videoRepository.insertVideo(new Video(\"Video Title 1\", Instant.now()));\r\n        videoRepository.insertVideo(new Video(\"Video Title 2\",\r\n          Instant.now().minus(1, ChronoUnit.DAYS)));\r\n\r\n        List<Video> videos = videoRepository.selectAll();\r\n\r\n        videos.forEach(x -> LOG.info(x.toString()));\r\n\r\n        connector.close();\r\n    }\r\n}\r\n```","```\r\nINFO com.baeldung.datastax.cassandra.Application - [id:733249eb-914c-4153-8698-4f58992c4ad4, title:Video Title 1, creationDate: 2019-07-10T19:43:35.112Z]\r\nINFO com.baeldung.datastax.cassandra.Application - [id:a6568236-77d7-42f2-a35a-b4c79afabccf, title:Video Title 2, creationDate: 2019-07-09T19:43:35.181Z]\r\n```"]