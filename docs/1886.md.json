["```\r\nList<Integer> myList = new ArrayList<>; \r\nint one = 1; \r\nmyList.add(one);\r\n```","```\r\n<dependency>\r\n    <groupId>org.eclipse.collections</groupId>\r\n    <artifactId>eclipse-collections-api</artifactId>\r\n    <version>10.0.0</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.eclipse.collections</groupId>\r\n    <artifactId>eclipse-collections</artifactId>\r\n    <version>10.0.0</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenListOfLongHasOneTwoThree_thenSumIsSix() {\r\n    MutableLongList longList = LongLists.mutable.of(1L, 2L, 3L);\r\n    assertEquals(6, longList.sum());\r\n}\r\n```","```\r\n@Test\r\npublic void whenListOfIntHasOneTwoThree_thenMaxIsThree() {\r\n    ImmutableIntList intList = IntLists.immutable.of(1, 2, 3);\r\n    assertEquals(3, intList.max());\r\n}\r\n```","```\r\n@Test\r\npublic void testOperationsOnIntIntMap() {\r\n    MutableIntIntMap map = new IntIntHashMap();\r\n    assertEquals(5, map.addToValue(0, 5));\r\n    assertEquals(5, map.get(0));\r\n    assertEquals(3, map.getIfAbsentPut(1, 3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertFromIterableToPrimitive_thenValuesAreEqual() {\r\n    Iterable<Integer> iterable = Interval.oneTo(3);\r\n    MutableIntSet intSet = IntSets.mutable.withAll(iterable);\r\n    IntInterval intInterval = IntInterval.oneTo(3);\r\n    assertEquals(intInterval.toSet(), intSet);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateMapFromStream_thenValuesMustMatch() {\r\n    Iterable<Integer> integers = Interval.oneTo(3);\r\n    MutableIntIntMap map = \r\n      IntIntMaps.mutable.from(\r\n        integers,\r\n        key -> key,\r\n        value -> value * value);\r\n    MutableIntIntMap expected = IntIntMaps.mutable.empty()\r\n      .withKeyValue(1, 1)\r\n      .withKeyValue(2, 4)\r\n      .withKeyValue(3, 9);\r\n    assertEquals(expected, map);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateDoubleStream_thenAverageIsThree() {\r\n    DoubleStream doubleStream = DoubleLists\r\n      .mutable.with(1.0, 2.0, 3.0, 4.0, 5.0)\r\n      .primitiveStream();\r\n    assertEquals(3, doubleStream.average().getAsDouble(), 0.001);\r\n}\r\n```"]