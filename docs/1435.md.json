["```\r\n<dependency>\r\n    <groupId>com.bladejava</groupId>\r\n    <artifactId>blade-mvc</artifactId>\r\n    <version>2.0.14.RELEASE</version>\r\n</dependency> \r\n```","```\r\njava -jar target/sample-blade-app.jar \r\n```","```\r\nBlade.of()\r\n  .get(\"/basic-routes-example\", ctx -> ctx.text(\"GET called\"))\r\n  .post(\"/basic-routes-example\", ctx -> ctx.text(\"POST called\"))\r\n  .put(\"/basic-routes-example\", ctx -> ctx.text(\"PUT called\"))\r\n  .delete(\"/basic-routes-example\", ctx -> ctx.text(\"DELETE called\"))\r\n  .start(App.class, args); \r\n```","```\r\n@Path\r\npublic class RouteExampleController {    \r\n\r\n    @GetRoute(\"/routes-example\") \r\n    public String get(){ \r\n        return \"get.html\"; \r\n    }\r\n\r\n    @PostRoute(\"/routes-example\") \r\n    public String post(){ \r\n        return \"post.html\"; \r\n    }\r\n\r\n    @PutRoute(\"/routes-example\") \r\n    public String put(){ \r\n        return \"put.html\"; \r\n    }\r\n\r\n    @DeleteRoute(\"/routes-example\") \r\n    public String delete(){ \r\n        return \"delete.html\"; \r\n    }\r\n} \r\n```","```\r\n@Route(value=\"/another-route-example\", method=HttpMethod.GET) \r\npublic String anotherGet(){ \r\n    return \"get.html\" ; \r\n} \r\n```","```\r\n@GetRoute(\"/home\")\r\npublic void formParam(@Param String name){\r\n    System.out.println(\"name: \" + name);\r\n} \r\n```","```\r\n@GetRoute(\"/users/:uid\")\r\npublic void restfulParam(@PathParam Integer uid){\r\n    System.out.println(\"uid: \" + uid);\r\n} \r\n```","```\r\n@PostRoute(\"/upload\")\r\npublic void fileParam(@MultipartParam FileItem fileItem){\r\n    byte[] file = fileItem.getData();\r\n} \r\n```","```\r\n@GetRoute(\"/header\")\r\npublic void headerParam(@HeaderParam String referer){\r\n    System.out.println(\"Referer: \" + referer);\r\n} \r\n```","```\r\n@GetRoute(\"/cookie\")\r\npublic void cookieParam(@CookieParam String myCookie){\r\n    System.out.println(\"myCookie: \" + myCookie);\r\n} \r\n```","```\r\n@PostRoute(\"/bodyParam\")\r\npublic void bodyParam(@BodyParam User user){\r\n    System.out.println(\"user: \" + user.toString());\r\n} \r\n```","```\r\n@PostRoute(\"/voParam\")\r\npublic void voParam(@Param User user){\r\n    System.out.println(\"user: \" + user.toString());\r\n} \r\n```","```\r\n<form method=\"post\">\r\n    <input type=\"text\" name=\"age\"/>\r\n    <input type=\"text\" name=\"name\"/>\r\n</form> \r\n```","```\r\nblade.addStatics(\"/custom-static\"); \r\n```","```\r\nmvc.statics=/custom-static \r\n```","```\r\nblade.showFileList(true); \r\n```","```\r\nmvc.statics.show-list=true \r\n```","```\r\n<dependency>\r\n    <groupId>org.webjars</groupId>\r\n    <artifactId>bootstrap</artifactId>\r\n    <version>4.2.1</version>\r\n</dependency> \r\n```","```\r\n@PostRoute(\"/save\")\r\npublic void formParams(@Param String username){\r\n    // ...\r\n} \r\n```","```\r\n@PostRoute(\"/save\")\r\npublic void formParams(Request request){\r\n    String username = request.query(\"username\", \"Baeldung\");\r\n} \r\n```","```\r\ncurl -X POST http://localhost:9000/users -H 'Content-Type: application/json' \\ \r\n  -d '{\"name\":\"Baeldung\",\"site\":\"baeldung.com\"}' \r\n```","```\r\npublic class User {\r\n    @Getter @Setter private String name;\r\n    @Getter @Setter private String site;\r\n} \r\n```","```\r\n@PostRoute(\"/users\")\r\npublic void bodyParams(@BodyParam User user){\r\n    // ...\r\n} \r\n```","```\r\n@PostRoute(\"/users\")\r\npublic void bodyParams(Request request) {\r\n    String bodyString = request.bodyToString();\r\n} \r\n```","```\r\n@GetRoute(\"/user/:id\")\r\npublic void user(@PathParam Integer id){\r\n    // ...\r\n} \r\n```","```\r\n@GetRoute(\"/user\")\r\npublic void user(Request request){\r\n    Integer id = request.pathInt(\"id\");\r\n} \r\n```","```\r\n@PostRoute(\"/users\")\r\npublic void bodyParams(User user){} \r\n```","```\r\nSession session = request.session();\r\nrequest.attribute(\"request-val\", \"Some Request value\");\r\nsession.attribute(\"session-val\", 1337); \r\n```","```\r\nString requestVal = request.attribute(\"request-val\");\r\nString sessionVal = session.attribute(\"session-val\"); //It's an Integer \r\n```","```\r\nString header1 = request.header(\"a-header\");\r\nString header2 = request.header(\"a-safe-header\", \"with a default value\");\r\nMap<String, String> allHeaders = request.headers(); \r\n```","```\r\nOptional<Cookie> cookieRaw(String name); \r\n```","```\r\nString cookie(String name, String defaultValue); \r\n```","```\r\nMap<String, String> cookies = request.cookies(); \r\n```","```\r\n@GetRoute(\"/\")\r\npublic void home(Response response) {} \r\n```","```\r\nresponse.text(\"Hello World!\");\r\n```","```\r\nresponse.html(\"<h1>Hello World!</h1>\");\r\n```","```\r\nresponse.xml(\"<Msg>Hello World!</Msg>\");\r\n```","```\r\nresponse.json(\"{\\\"The Answer\\\":42}\"); \r\n```","```\r\nUser user = new User(\"Baeldung\", \"baeldung.com\"); \r\nresponse.json(user); \r\n```","```\r\nresponse.download(\"the-file.txt\", \"/path/to/the/file.txt\"); \r\n```","```\r\nresponse.render(\"admin/users.html\"); \r\n```","```\r\nresponse.redirect(\"/target-route\"); \r\n```","```\r\nresponse.cookie(\"cookie-name\", \"Some value here\"); \r\n```","```\r\nresponse.removeCookie(\"cookie-name\"); \r\n```","```\r\n@FunctionalInterface\r\npublic interface WebHook {\r\n\r\n    boolean before(RouteContext ctx);\r\n\r\n    default boolean after(RouteContext ctx) {\r\n        return true;\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic class BaeldungHook implements WebHook {\r\n\r\n    @Override\r\n    public boolean before(RouteContext ctx) {\r\n        System.out.println(\"[BaeldungHook] called before Route method\");\r\n        return true;\r\n    }\r\n} \r\n```","```\r\nBlade.of()\r\n  .before(\"/user/*\", ctx -> System.out.println(\"Before: \" + ctx.uri()));\r\n  .start(App.class, args); \r\n```","```\r\npublic class BaeldungMiddleware implements WebHook {\r\n\r\n    @Override\r\n    public boolean before(RouteContext context) {\r\n        System.out.println(\"[BaeldungMiddleware] called before Route method and other WebHooks\");\r\n        return true;\r\n    }\r\n} \r\n```","```\r\nBlade.of()\r\n  .use(new BaeldungMiddleware())\r\n  .start(App.class, args); \r\n```","```\r\nBlade.of()\r\n  .on(EventType.SERVER_STARTED, e -> {\r\n      Optional<String> version = WebContext.blade().env(\"app.version\");\r\n  })\r\n  .start(App.class, args); \r\n```","```\r\n@GetRoute(\"/some-route\")\r\npublic void someRoute(){\r\n    String authors = WebContext.blade().env(\"app.authors\",\"Unknown authors\");\r\n} \r\n```","```\r\n@Bean\r\npublic class LoadConfig implements BladeLoader {\r\n\r\n    @Override\r\n    public void load(Blade blade) {\r\n        Optional<String> version = WebContext.blade().env(\"app.version\");\r\n        String authors = WebContext.blade().env(\"app.authors\",\"Unknown authors\");\r\n    }\r\n} \r\n```","```\r\nEnvironment environment = blade.environment();\r\nMap<String, Object> map = environment.getPrefix(\"app\");\r\nString version = map.get(\"version\").toString();\r\nString authors = map.get(\"authors\",\"Unknown authors\").toString(); \r\n```","```\r\njava -jar target/sample-blade-app.jar --app.env=prod \r\n```","```\r\n<h1>Hello, ${name}!</h1> \r\n```","```\r\n<dependency>\r\n    <groupId>com.bladejava</groupId>\r\n    <artifactId>blade-template-jetbrick</artifactId>\r\n    <version>0.1.3</version>\r\n</dependency> \r\n```","```\r\n@Bean\r\npublic class TemplateConfig implements BladeLoader {\r\n\r\n    @Override\r\n    public void load(Blade blade) {\r\n        blade.templateEngine(new JetbrickTemplateEngine());\r\n    }\r\n} \r\n```","```\r\nvoid render (ModelAndView modelAndView, Writer writer) throws TemplateException; \r\n```","```\r\nprivate static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(LogExample.class); \r\n```","```\r\n# Root Logger\r\ncom.blade.logger.rootLevel=info\r\n\r\n# Package Custom Logging Level\r\ncom.blade.logger.somepackage=debug\r\n\r\n# Class Custom Logging Level\r\ncom.blade.logger.com.baeldung.sample.SomeClass=trace \r\n```","```\r\n# Date and Time\r\ncom.blade.logger.showDate=false\r\n\r\n# Date and Time Pattern\r\ncom.blade.logger.datePattern=yyyy-MM-dd HH:mm:ss:SSS Z\r\n\r\n# Thread Name\r\ncom.blade.logger.showThread=true\r\n\r\n# Logger Instance Name\r\ncom.blade.logger.showLogName=true\r\n\r\n# Only the Last Part of FQCN\r\ncom.blade.logger.shortName=true \r\n```","```\r\n# Path \r\ncom.blade.logger.dir=./logs\r\n\r\n# Name (it defaults to the current app.name)\r\ncom.blade.logger.name=sample \r\n```","```\r\n<dependency>\r\n    <groupId>com.bladejava</groupId>\r\n    <artifactId>blade-mvc</artifactId>\r\n    <version>${blade.version}</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>com.bladejava</groupId>\r\n            <artifactId>blade-log</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency> \r\n```","```\r\n@Bean\r\npublic class GlobalExceptionHandler extends DefaultExceptionHandler {\r\n\r\n    @Override\r\n    public void handle(Exception e) {\r\n        if (e instanceof BaeldungException) {\r\n            BaeldungException baeldungException = (BaeldungException) e;\r\n            String msg = baeldungException.getMessage();\r\n            WebContext.response().json(RestResponse.fail(msg));\r\n        } else {\r\n            super.handle(e);\r\n        }\r\n    }\r\n} \r\n```","```\r\nmvc.view.404=my-404.html\r\nmvc.view.500=my-500.html \r\n```","```\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>500 Internal Server Error</title>\r\n    </head>\r\n    <body>\r\n        <h1> Custom Error 500 Page </h1>\r\n        <p> The following error occurredï¼š \"<strong>${message}</strong>\"</p>\r\n        <pre> ${stackTrace} </pre>\r\n    </body>\r\n</html>\r\n```","```\r\n@Bean\r\npublic class ScheduleExample {\r\n\r\n    @Schedule(name = \"baeldungTask\", cron = \"0 */1 * * * ?\")\r\n    public void runScheduledTask() {\r\n        System.out.println(\"This is a scheduled Task running once per minute.\");\r\n    }\r\n} \r\n```","```\r\nList<Task> allScheduledTasks = TaskManager.getTasks(); \r\n```","```\r\nTask myTask = TaskManager.getTask(\"baeldungTask\"); \r\n```","```\r\nboolean closed = TaskManager.stopTask(\"baeldungTask\"); \r\n```","```\r\npublic enum EventType {\r\n    SERVER_STARTING,\r\n    SERVER_STARTED,\r\n    SERVER_STOPPING,\r\n    SERVER_STOPPED,\r\n    SESSION_CREATED,\r\n    SESSION_DESTROY,\r\n    SOURCE_CHANGED,\r\n    ENVIRONMENT_CHANGED\r\n} \r\n```","```\r\nBlade.of()\r\n  .on(EventType.SESSION_CREATED, e -> {\r\n      Session session = (Session) e.attribute(\"session\");\r\n      session.attribute(\"name\", \"Baeldung\");\r\n  })\r\n  .start(App.class, args); \r\n```","```\r\n@Bean\r\npublic class SessionConfig implements BladeLoader {\r\n\r\n    @Override\r\n    public void load(Blade blade) {\r\n        blade.sessionType(new RedisSession());\r\n    }\r\n} \r\n```","```\r\njava -jar target/sample-blade-app.jar --server.address=192.168.1.100 \r\n```","```\r\njava -jar target/sample-blade-app.jar --server.port=8080 \r\n```","```\r\njava -jar target/sample-blade-app.jar --app.env=prod \r\n```"]