["```\r\nclass CastFunction<F, T extends F> implements Function<F, T> {\r\n    @Override\r\n    public final T apply(final F from) {\r\n        return (T) from;\r\n    }\r\n}\r\nList<TypeParent> originalList = Lists.newArrayList();\r\nList<TypeChild> theList = Lists.transform(originalList, \r\n    new CastFunction<TypeParent, TypeChild>());\r\n```","```\r\nList<Number> originalList = Lists.newArrayList();\r\nList<Integer> theList = (List<Integer>) (List<? extends Number>) originalList;\r\n```","```\r\nIterable<String> iter = Lists.newArrayList();\r\nCollection<String> collector = Lists.newArrayList();\r\nIterables.addAll(collector, iter);\r\n```","```\r\nIterable<String> theCollection = Lists.newArrayList(\"a\", \"bc\", \"def\");\r\n    boolean contains = Iterables.any(theCollection, new Predicate<String>() {\r\n    @Override\r\n    public boolean apply(final String input) {\r\n        return input.length() == 1;\r\n    }\r\n});\r\nassertTrue(contains);\r\n```","```\r\nIterable<String> theCollection = Sets.newHashSet(\"a\", \"bc\", \"def\");\r\nboolean contains = Iterables.find(theCollection, new Predicate<String>() {\r\n    @Override\r\n    public boolean apply(final String input) {\r\n       return input.length() == 1;\r\n    }\r\n}) != null;\r\nassertTrue(contains);\r\n```","```\r\nSet<String> theCollection = Sets.newHashSet(\"a\", \"bc\", \"def\");\r\nboolean contains = !Sets.filter(theCollection, new Predicate<String>() {\r\n    @Override\r\n    public boolean apply(final String input) {\r\n        return input.length() == 1;\r\n    }\r\n}).isEmpty();\r\nassertTrue(contains);\r\n```","```\r\nIterable<String> theCollection = Sets.newHashSet(\"abcd\", \"efgh\", \"ijkl\");\r\nPredicate<String> inputOfLengthOne = new Predicate<String>() {\r\n    @Override\r\n    public boolean apply(final String input) {\r\n        return input.length() == 1;\r\n    }\r\n};\r\nString found = Iterables.find(theCollection, inputOfLengthOne);\r\n```","```\r\njava.util.NoSuchElementException\r\n\tat com.google.common.collect.AbstractIterator.next(AbstractIterator.java:154)\r\n\tat com.google.common.collect.Iterators.find(Iterators.java:712)\r\n\tat com.google.common.collect.Iterables.find(Iterables.java:643)\r\n```","```\r\nString found = Iterables.find(theCollection, inputOfLengthOne, null);\r\n```","```\r\nList<String> values = Lists.newArrayList(\"a\", null, \"b\", \"c\");\r\nIterable<String> withoutNulls = Iterables.filter(values, Predicates.notNull());\r\n```","```\r\nImmutableList<String> immutableList = ImmutableList.of(\"a\", \"b\", \"c\");\r\nImmutableSet<String> immutableSet = ImmutableSet.of(\"a\", \"b\", \"c\");\r\nImmutableMap<String, String> imuttableMap = \r\n    ImmutableMap.of(\"k1\", \"v1\", \"k2\", \"v2\", \"k3\", \"v3\");\r\n```","```\r\nList<String> muttableList = Lists.newArrayList();\r\nImmutableList<String> immutableList = ImmutableList.copyOf(muttableList);\r\n\r\nSet<String> muttableSet = Sets.newHashSet();\r\nImmutableSet<String> immutableSet = ImmutableSet.copyOf(muttableSet);\r\n\r\nMap<String, String> muttableMap = Maps.newHashMap();\r\nImmutableMap<String, String> imuttableMap = ImmutableMap.copyOf(muttableMap);\r\n```","```\r\nList<String> muttableList = Lists.newArrayList();\r\nImmutableList<String> immutableList = \r\n    ImmutableList.<String> builder().addAll(muttableList).build();\r\n\r\nSet<String> muttableSet = Sets.newHashSet();\r\nImmutableSet<String> immutableSet = \r\n    ImmutableSet.<String> builder().addAll(muttableSet).build();\r\n\r\nMap<String, String> muttableMap = Maps.newHashMap();\r\nImmutableMap<String, String> imuttableMap = \r\n    ImmutableMap.<String, String> builder().putAll(muttableMap).build();\r\n```"]