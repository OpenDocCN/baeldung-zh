["```\r\nclass AvroHttpRequest {\r\n\r\n    private long requestTime;\r\n    private ClientIdentifier clientIdentifier;\r\n    private List<String> employeeNames;\r\n    private Active active;\r\n} \r\n```","```\r\n{\r\n   \"type\":\"record\",\r\n   \"name\":\"ClientIdentifier\",\r\n   \"namespace\":\"com.baeldung.avro\",\r\n   \"fields\":[\r\n      {\r\n         \"name\":\"hostName\",\r\n         \"type\":\"string\"\r\n      },\r\n      {\r\n         \"name\":\"ipAddress\",\r\n         \"type\":\"string\"\r\n      }\r\n   ]\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.avro</groupId>\r\n    <artifactId>avro-compiler</artifactId>\r\n    <version>1.8.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.avro</groupId>\r\n    <artifactId>avro-maven-plugin</artifactId>\r\n    <version>1.8.2</version>\r\n</dependency>\r\n```","```\r\nSchema clientIdentifier = SchemaBuilder.record(\"ClientIdentifier\")\r\n  .namespace(\"com.baeldung.avro\")\r\n  .fields().requiredString(\"hostName\").requiredString(\"ipAddress\")\r\n  .endRecord();\r\n```","```\r\nSchema avroHttpRequest = SchemaBuilder.record(\"AvroHttpRequest\")\r\n  .namespace(\"com.baeldung.avro\")\r\n  .fields().requiredLong(\"requestTime\")\r\n  .name(\"clientIdentifier\")\r\n    .type(clientIdentifier)\r\n    .noDefault()\r\n  .name(\"employeeNames\")\r\n    .type()\r\n    .array()\r\n    .items()\r\n    .stringType()\r\n    .arrayDefault(null)\r\n  .name(\"active\")\r\n    .type()\r\n    .enumeration(\"Active\")\r\n    .symbols(\"YES\",\"NO\")\r\n    .noDefault()\r\n  .endRecord();\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.avro</groupId>\r\n    <artifactId>avro-maven-plugin</artifactId>\r\n    <version>${avro.version}</version>\r\n        <executions>\r\n            <execution>\r\n                <id>schemas</id>\r\n                <phase>generate-sources</phase>\r\n                <goals>\r\n                    <goal>schema</goal>\r\n                    <goal>protocol</goal>\r\n                    <goal>idl-protocol</goal>\r\n                </goals>\r\n                <configuration>\r\n                    <sourceDirectory>${project.basedir}/src/main/resources/</sourceDirectory>\r\n                    <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>\r\n                </configuration>\r\n            </execution>\r\n        </executions>\r\n</plugin> \r\n```","```\r\npublic byte[] serealizeAvroHttpRequestJSON(\r\n  AvroHttpRequest request) {\r\n\r\n    DatumWriter<AvroHttpRequest> writer = new SpecificDatumWriter<>(\r\n      AvroHttpRequest.class);\r\n    byte[] data = new byte[0];\r\n    ByteArrayOutputStream stream = new ByteArrayOutputStream();\r\n    Encoder jsonEncoder = null;\r\n    try {\r\n        jsonEncoder = EncoderFactory.get().jsonEncoder(\r\n          AvroHttpRequest.getClassSchema(), stream);\r\n        writer.write(request, jsonEncoder);\r\n        jsonEncoder.flush();\r\n        data = stream.toByteArray();\r\n    } catch (IOException e) {\r\n        logger.error(\"Serialization error:\" + e.getMessage());\r\n    }\r\n    return data;\r\n} \r\n```","```\r\n@Test\r\npublic void whenSerialized_UsingJSONEncoder_ObjectGetsSerialized(){\r\n    byte[] data = serealizer.serealizeAvroHttpRequestJSON(request);\r\n    assertTrue(Objects.nonNull(data));\r\n    assertTrue(data.length > 0);\r\n}\r\n```","```\r\nEncoder jsonEncoder = EncoderFactory.get().binaryEncoder(stream,null);\r\n```","```\r\npublic AvroHttpRequest deSerealizeAvroHttpRequestJSON(byte[] data) {\r\n    DatumReader<AvroHttpRequest> reader\r\n     = new SpecificDatumReader<>(AvroHttpRequest.class);\r\n    Decoder decoder = null;\r\n    try {\r\n        decoder = DecoderFactory.get().jsonDecoder(\r\n          AvroHttpRequest.getClassSchema(), new String(data));\r\n        return reader.read(null, decoder);\r\n    } catch (IOException e) {\r\n        logger.error(\"Deserialization error:\" + e.getMessage());\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenDeserializeUsingJSONDecoder_thenActualAndExpectedObjectsAreEqual(){\r\n    byte[] data = serealizer.serealizeAvroHttpRequestJSON(request);\r\n    AvroHttpRequest actualRequest = deSerealizer\r\n      .deSerealizeAvroHttpRequestJSON(data);\r\n    assertEquals(actualRequest,request);\r\n    assertTrue(actualRequest.getRequestTime()\r\n      .equals(request.getRequestTime()));\r\n}\r\n```","```\r\nDecoder decoder = DecoderFactory.get().binaryDecoder(data, null);\r\n```"]