["```\r\narrayOfStrings=Baeldung,dot,com\r\n```","```\r\n@Value(\"${arrayOfStrings}\")\r\nprivate String[] arrayOfStrings;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedArrayContainsExpectedValues() {\r\n    assertArrayEquals(new String[] {\"Baeldung\", \"dot\", \"com\"}, arrayOfStrings);\r\n}\r\n```","```\r\n@Value(\"${arrayOfStrings}\")\r\nprivate List<String> unexpectedListOfStrings;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedListContainsUnexpectedValues() {\r\n    assertEquals(Collections.singletonList(\"Baeldung,dot,com\"), unexpectedListOfStrings);\r\n}\r\n```","```\r\n@Value(\"#{'${arrayOfStrings}'.split(',')}\")\r\nprivate List<String> listOfStrings;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedListContainsExpectedValues() {\r\n    assertEquals(Arrays.asList(\"Baeldung\", \"dot\", \"com\"), listOfStrings);\r\n}\r\n```","```\r\nlistOfStrings={'Baeldung','dot','com'}\r\n```","```\r\n@Value(\"#{${listOfStrings}}\")\r\nprivate List<String> listOfStringsV2;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedListV2ContainsExpectedValues() {\r\n    assertEquals(Arrays.asList(\"Baeldung\", \"dot\", \"com\"), listOfStringsV2);\r\n}\r\n```","```\r\nlistOfStringsWithCustomDelimiter=Baeldung;dot;com\r\n```","```\r\n@Value(\"#{'${listOfStringsWithCustomDelimiter}'.split(';')}\")\r\nprivate List<String> listOfStringsWithCustomDelimiter;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedListWithCustomDelimiterContainsExpectedValues() {\r\n    assertEquals(Arrays.asList(\"Baeldung\", \"dot\", \"com\"), listOfStringsWithCustomDelimiter);\r\n}\r\n```","```\r\nlistOfBooleans=false,false,true\r\nlistOfIntegers=1,2,3,4\r\nlistOfCharacters=a,b,c\r\n```","```\r\n@Value(\"#{'${listOfBooleans}'.split(',')}\")\r\nprivate List<Boolean> listOfBooleans;\r\n\r\n@Value(\"#{'${listOfIntegers}'.split(',')}\")\r\nprivate List<Integer> listOfIntegers;\r\n\r\n@Value(\"#{'${listOfCharacters}'.split(',')}\")\r\nprivate List<Character> listOfCharacters;\r\n```","```\r\n@Test\r\nvoid whenContextIsInitialized_thenInjectedListOfBasicTypesContainsExpectedValues() {\r\n    assertEquals(Arrays.asList(false, false, true), listOfBooleans);\r\n    assertEquals(Arrays.asList(1, 2, 3, 4), listOfIntegers);\r\n    assertEquals(Arrays.asList('a', 'b', 'c'), listOfCharacters);\r\n}\r\n```","```\r\n@Autowired\r\nprivate Environment environment;\r\n```","```\r\n@Test\r\nvoid whenReadingFromSpringEnvironment_thenPropertiesHaveExpectedValues() {\r\n    String[] arrayOfStrings = environment.getProperty(\"arrayOfStrings\", String[].class);\r\n    List<String> listOfStrings = (List<String>)environment.getProperty(\"arrayOfStrings\", List.class);\r\n\r\n    assertArrayEquals(new String[] {\"Baeldung\", \"dot\", \"com\"}, arrayOfStrings);\r\n    assertEquals(Arrays.asList(\"Baeldung\", \"dot\", \"com\"), listOfStrings);\r\n}\r\n```"]