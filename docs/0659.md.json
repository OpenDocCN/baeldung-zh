["```\r\npublic class Event {\r\n\r\n    Date date;\r\n\r\n    // constructor, getter and setter\r\n}\r\n```","```\r\nDate TODAY = new Date();\r\nEvent TODAYS_EVENT = new Event(TODAY);\r\nDate TOMORROW = DateUtils.addDays(TODAY, 1);\r\nEvent TOMORROWS_EVENT = new Event(TOMORROW);\r\nDate NEXT_WEEK = DateUtils.addDays(TODAY, 7);\r\nEvent NEXT_WEEK_EVENT = new Event(NEXT_WEEK);\r\nList<Event> events = List.of(TODAYS_EVENT, TOMORROWS_EVENT, NEXT_WEEK_EVENT);\r\n```","```\r\npublic class LocalEvent {\r\n\r\n    LocalDate date;\r\n\r\n    // constructor, getter and setter\r\n}\r\n```","```\r\nLocalDate TODAY_LOCAL = LocalDate.now();\r\nLocalEvent TODAY_LOCAL_EVENT = new LocalEvent(TODAY_LOCAL);\r\nLocalDate TOMORROW_LOCAL = TODAY_LOCAL.plusDays(1);\r\nLocalEvent TOMORROW_LOCAL_EVENT = new LocalEvent(TOMORROW_LOCAL);\r\nLocalDate NEXT_WEEK_LOCAL = TODAY_LOCAL.plusWeeks(1);\r\nLocalEvent NEXT_WEEK_LOCAL_EVENT = new LocalEvent(NEXT_WEEK_LOCAL);\r\nList<LocalEvent> localEvents = List.of(TODAY_LOCAL_EVENT, TOMORROW_LOCAL_EVENT, NEXT_WEEK_LOCAL_EVENT);\r\n```","```\r\nDate findMaxDateOf(List<Event> events) {\r\n    if (events == null || events.isEmpty()) {\r\n        return null;\r\n    }\r\n    return events.stream()\r\n      .map(Event::getDate)\r\n      .max(Date::compareTo)\r\n      .get();\r\n}\r\n```","```\r\nDate findMaxDateOf(List<Event> events) {\r\n    if (events == null || events.isEmpty()) {\r\n        return null;\r\n    }\r\n    return events.stream()\r\n      .map(Event::getDate)\r\n      .max(Comparator.naturalOrder())\r\n      .get();\r\n}\r\n```","```\r\nassertEquals(NEXT_WEEK, findMaxDateOf(List.of(TODAYS_EVENT, TOMORROWS_EVENT, NEXT_WEEK_EVENT);\r\n```","```\r\nLocalDate findMaxDateOf(List<LocalEvent> events) {\r\n    if (events == null || events.isEmpty()) {\r\n        return null;\r\n    }\r\n    return events.stream()\r\n      .map(LocalEvent::getDate)\r\n      .max(LocalDate::compareTo)\r\n      .get();\r\n}\r\n```","```\r\nLocalDate findMaxDateOf(List<LocalEvent> events) {\r\n    if (events == null || events.isEmpty()) {\r\n        return null;\r\n    }\r\n    return events.stream()\r\n      .map(LocalEvent::getDate)\r\n      .max(Comparator.naturalOrder())\r\n      .get();\r\n}\r\n```","```\r\nassertEquals(NEXT_WEEK_LOCAL, findMaxDateOf(List.of(TODAY_LOCAL_EVENT, TOMORROW_LOCAL_EVENT, NEXT_WEEK_LOCAL_EVENT)));\r\n```"]