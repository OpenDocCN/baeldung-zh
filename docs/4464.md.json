["```\r\npublic class Outer {\r\n\r\n    public void outerPublic() {\r\n    }\r\n\r\n    private void outerPrivate() {\r\n    }\r\n\r\n    class Inner {\r\n\r\n        public void innerPublic() {\r\n            outerPrivate();\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void innerPublicReflection(Outer ob) throws Exception {\r\n    Method method = ob.getClass().getDeclaredMethod(\"outerPrivate\");\r\n    method.invoke(ob);\r\n}\r\n```","```\r\njava.lang.IllegalAccessException: \r\nClass com.baeldung.Outer$Inner can not access a member of class com.baeldung.Outer with modifiers \"private\"\r\n```","```\r\n@Test\r\npublic void whenGetNestHostFromOuter_thenGetNestHost() {\r\n    is(Outer.class.getNestHost().getName()).equals(\"com.baeldung.Outer\");\r\n}\r\n\r\n@Test\r\npublic void whenGetNestHostFromInner_thenGetNestHost() {\r\n    is(Outer.Inner.class.getNestHost().getName()).equals(\"com.baeldung.Outer\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckNestmatesForNestedClasses_thenGetTrue() {\r\n    is(Outer.Inner.class.isNestmateOf(Outer.class)).equals(true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetNestMembersForNestedClasses_thenGetAllNestedClasses() {\r\n    Set<String> nestMembers = Arrays.stream(Outer.Inner.class.getNestMembers())\r\n      .map(Class::getName)\r\n      .collect(Collectors.toSet());\r\n\r\n    is(nestMembers.size()).equals(2);\r\n\r\n    assertTrue(nestMembers.contains(\"com.baeldung.Outer\"));\r\n    assertTrue(nestMembers.contains(\"com.baeldung.Outer$Inner\"));\r\n}\r\n```","```\r\n$ javap -c Outer\r\nCompiled from \"Outer.java\"\r\npublic class com.baeldung.Outer {\r\n  public com.baeldung.Outer();\r\n    Code:\r\n       0: aload_0\r\n       1: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\r\n       4: return\r\n\r\n  public void outerPublic();\r\n    Code:\r\n       0: return\r\n\r\n  static void access$000(com.baeldung.Outer);\r\n    Code:\r\n       0: aload_0\r\n       1: invokespecial #1                  // Method outerPrivate:()V\r\n       4: return\r\n}\r\n```","```\r\n$ javap -c Outer\\$Inner\r\nCompiled from \"Outer.java\"\r\nclass com.baeldung.Outer$Inner {\r\n  final com.baeldung.Outer this$0;\r\n\r\n  com.baeldung.Outer$Inner(com.baeldung.Outer);\r\n    Code:\r\n       0: aload_0\r\n       1: aload_1\r\n       2: putfield      #1                  // Field this$0:Lcom/baeldung/Outer;\r\n       5: aload_0\r\n       6: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\r\n       9: return\r\n\r\n  public void innerPublic();\r\n    Code:\r\n       0: aload_0\r\n       1: getfield      #1                  // Field this$0:Lcom/baeldung/Outer;\r\n       4: invokestatic  #3                  // Method com/baeldung/Outer.access$000:(Lcom/baeldung/Outer;)V\r\n       7: return\r\n}\r\n```","```\r\n$ javap -c Outer\r\nCompiled from \"Outer.java\"\r\npublic class com.baeldung.Outer {\r\n  public com.baeldung.Outer();\r\n    Code:\r\n       0: aload_0\r\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\r\n       4: return\r\n\r\n  public void outerPublic();\r\n    Code:\r\n       0: return\r\n}\r\n```","```\r\n$ javap -c Outer\\$Inner.class \r\nCompiled from \"Outer.java\"\r\nclass com.baeldung.Outer$Inner {\r\n  final com.baeldung.Outer this$0;\r\n\r\n  com.baeldung.Outer$Inner(com.baeldung.Outer);\r\n    Code:\r\n       0: aload_0\r\n       1: aload_1\r\n       2: putfield      #1                  // Field this$0:Lcom/baeldung/Outer;\r\n       5: aload_0\r\n       6: invokespecial #2                  // Method java/lang/Object.\"<init>\":()V\r\n       9: return\r\n\r\n  public void innerPublic();\r\n    Code:\r\n       0: aload_0\r\n       1: getfield      #1                  // Field this$0:Lcom/baeldung/Outer;\r\n       4: invokevirtual #3                  // Method com/baeldung/Outer.outerPrivate:()V\r\n       7: return\r\n}\r\n```"]