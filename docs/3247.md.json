["```\r\n@Test\r\npublic void givenUsingPlainJavaOnFixedSizeStream_whenConvertingAnInputStreamToAByteArray_thenCorrect() \r\n  throws IOException {\r\n    InputStream is = new ByteArrayInputStream(new byte[] { 0, 1, 2 });\r\n    byte[] targetArray = new byte[is.available()];\r\n\r\n    is.read(targetArray);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingPlainJavaOnUnknownSizeStream_whenConvertingAnInputStreamToAByteArray_thenCorrect() \r\n  throws IOException {\r\n    InputStream is = new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5, 6 }); // not really known\r\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\r\n\r\n    int nRead;\r\n    byte[] data = new byte[4];\r\n\r\n    while ((nRead = is.read(data, 0, data.length)) != -1) {\r\n        buffer.write(data, 0, nRead);\r\n    }\r\n\r\n    buffer.flush();\r\n    byte[] targetArray = buffer.toByteArray();\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingPlainJava9OnUnknownSizeStream_whenConvertingAnInputStreamToAByteArray_thenCorrect() \r\n  throws IOException {\r\n    InputStream is = new ByteArrayInputStream(new byte[] { 0, 1, 2, 3, 4, 5, 6 });\r\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\r\n\r\n    int nRead;\r\n    byte[] data = new byte[4];\r\n\r\n    while ((nRead = is.readNBytes(data, 0, data.length)) != 0) {\r\n        System.out.println(\"here \" + nRead);\r\n        buffer.write(data, 0, nRead);\r\n    }\r\n\r\n    buffer.flush();\r\n    byte[] targetArray = buffer.toByteArray();\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenUsingPlainJava9_whenConvertingAnInputStreamToAByteArray_thenCorrect()\r\n  throws IOException {\r\n    InputStream is = new ByteArrayInputStream(new byte[] { 0, 1, 2 });\r\n\r\n    byte[] data = is.readAllBytes();\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingGuava_whenConvertingAnInputStreamToAByteArray_thenCorrect() \r\n  throws IOException {\r\n    InputStream initialStream = ByteSource.wrap(new byte[] { 0, 1, 2 }).openStream();\r\n\r\n    byte[] targetArray = ByteStreams.toByteArray(initialStream);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCommonsIO_whenConvertingAnInputStreamToAByteArray_thenCorrect() \r\n  throws IOException {\r\n    ByteArrayInputStream initialStream = new ByteArrayInputStream(new byte[] { 0, 1, 2 });\r\n\r\n    byte[] targetArray = IOUtils.toByteArray(initialStream);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCoreClasses_whenByteArrayInputStreamToAByteBuffer_thenLengthMustMatch() \r\n  throws IOException {\r\n    byte[] input = new byte[] { 0, 1, 2 };\r\n    InputStream initialStream = new ByteArrayInputStream(input);\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(3);\r\n    while (initialStream.available() > 0) {\r\n        byteBuffer.put((byte) initialStream.read());\r\n    }\r\n\r\n    assertEquals(byteBuffer.position(), input.length);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingGuava__whenByteArrayInputStreamToAByteBuffer_thenLengthMustMatch() \r\n  throws IOException {\r\n    InputStream initialStream = ByteSource\r\n      .wrap(new byte[] { 0, 1, 2 })\r\n      .openStream();\r\n    byte[] targetArray = ByteStreams.toByteArray(initialStream);\r\n    ByteBuffer bufferByte = ByteBuffer.wrap(targetArray);\r\n    while (bufferByte.hasRemaining()) {\r\n        bufferByte.get();\r\n    }\r\n\r\n    assertEquals(bufferByte.position(), targetArray.length);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCommonsIo_whenByteArrayInputStreamToAByteBuffer_thenLengthMustMatch() \r\n  throws IOException {\r\n    byte[] input = new byte[] { 0, 1, 2 };\r\n    InputStream initialStream = new ByteArrayInputStream(input);\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(3);\r\n    ReadableByteChannel channel = newChannel(initialStream);\r\n    IOUtils.readFully(channel, byteBuffer);\r\n\r\n    assertEquals(byteBuffer.position(), input.length);\r\n}\r\n```"]