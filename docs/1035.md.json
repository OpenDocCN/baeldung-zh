["```\r\nHttpClient client = HttpClient.newHttpClient();\r\n```","```\r\nHttpRequest request = HttpRequest.newBuilder()\r\n  .uri(URI.create(serviceUrl))\r\n  .POST(HttpRequest.BodyPublishers.noBody())\r\n  .build();\r\n```","```\r\nHttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString())\r\n```","```\r\nassertThat(response.statusCode())\r\n  .isEqualTo(200);\r\nassertThat(response.body())\r\n  .isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\r\n```","```\r\nCompletableFuture<HttpResponse<String>> futureResponse = client.sendAsync(request, HttpResponse.BodyHandlers.ofString());\r\n```","```\r\nHttpResponse<String> response = futureResponse.get();\r\nassertThat(response.statusCode()).isEqualTo(200);\r\nassertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\r\n```","```\r\nList<CompletableFuture<HttpResponse<String>>> completableFutures = serviceUrls.stream()\r\n  .map(URI::create)\r\n  .map(HttpRequest::newBuilder)\r\n  .map(builder -> builder.POST(HttpRequest.BodyPublishers.noBody()))\r\n  .map(HttpRequest.Builder::build)\r\n  .map(request -> client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))\r\n  .collect(Collectors.toList());\r\n```","```\r\nCompletableFuture<List<HttpResponse<String>>> combinedFutures = CompletableFuture\r\n  .allOf(completableFutures.toArray(new CompletableFuture[0]))\r\n  .thenApply(future ->\r\n    completableFutures.stream()\r\n      .map(CompletableFuture::join)\r\n      .collect(Collectors.toList()));\r\n```","```\r\nList<HttpResponse<String>> responses = combinedFutures.get();\r\nresponses.forEach((response) -> {\r\n  assertThat(response.statusCode()).isEqualTo(200);\r\n  assertThat(response.body()).isEqualTo(\"{\\\"message\\\":\\\"ok\\\"}\");\r\n});\r\n```","```\r\nHttpClient client = HttpClient.newBuilder()\r\n  .authenticator(new Authenticator() {\r\n    @Override\r\n    protected PasswordAuthentication getPasswordAuthentication() {\r\n      return new PasswordAuthentication(\r\n        \"baeldung\",\r\n        \"123456\".toCharArray());\r\n      }\r\n  })\r\n  .build();\r\n```","```\r\nHttpRequest request = HttpRequest.newBuilder()\r\n  .uri(URI.create(serviceUrl))\r\n  .POST(HttpRequest.BodyPublishers.noBody())\r\n  .header(\"Authorization\", \"Basic \" + \r\n    Base64.getEncoder().encodeToString((\"baeldung:123456\").getBytes()))\r\n  .build();\r\n```","```\r\nHttpRequest request = HttpRequest.newBuilder()\r\n  .uri(URI.create(serviceUrl))\r\n  .POST(HttpRequest.BodyPublishers.ofString(\"{\\\"action\\\":\\\"hello\\\"}\"))\r\n  .build();\r\n```","```\r\nPath file = tempDir.resolve(\"temp.txt\");\r\nList<String> lines = Arrays.asList(\"1\", \"2\", \"3\");\r\nFiles.write(file, lines);\r\n```","```\r\nHttpRequest request = HttpRequest.newBuilder()\r\n  .uri(URI.create(serviceUrl))\r\n  .POST(HttpRequest.BodyPublishers.ofFile(file))\r\n  .build();\r\n```","```\r\nMap<String, String> formData = new HashMap<>();\r\nformData.put(\"username\", \"baeldung\");\r\nformData.put(\"message\", \"hello\");\r\n\r\nHttpRequest request = HttpRequest.newBuilder()\r\n  .uri(URI.create(serviceUrl))\r\n  .POST(HttpRequest.BodyPublishers.ofString(getFormDataAsString(formData)))\r\n  .build();\r\n```","```\r\nprivate static String getFormDataAsString(Map<String, String> formData) {\r\n    StringBuilder formBodyBuilder = new StringBuilder();\r\n    for (Map.Entry<String, String> singleEntry : formData.entrySet()) {\r\n        if (formBodyBuilder.length() > 0) {\r\n            formBodyBuilder.append(\"&\");\r\n        }\r\n        formBodyBuilder.append(URLEncoder.encode(singleEntry.getKey(), StandardCharsets.UTF_8));\r\n        formBodyBuilder.append(\"=\");\r\n        formBodyBuilder.append(URLEncoder.encode(singleEntry.getValue(), StandardCharsets.UTF_8));\r\n    }\r\n    return formBodyBuilder.toString();\r\n}\r\n```"]