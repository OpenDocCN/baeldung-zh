["```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>Hoxton.SR4</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-gateway</artifactId>\r\n</dependency>\r\n```","```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: service_route\r\n        uri: http://localhost:8081\r\n        predicates:\r\n        - Path=/service/**\r\n        filters:\r\n        - RewritePath=/service(?<segment>/?.*), $\\{segment}\r\n```","```\r\nlogging:\r\n  level:\r\n    org.springframework.cloud.gateway: DEBUG\r\n    reactor.netty.http.client: DEBUG\r\n```","```\r\n@Component\r\npublic class LoggingGlobalPreFilter implements GlobalFilter {\r\n\r\n    final Logger logger =\r\n      LoggerFactory.getLogger(LoggingGlobalPreFilter.class);\r\n\r\n    @Override\r\n    public Mono<Void> filter(\r\n      ServerWebExchange exchange,\r\n      GatewayFilterChain chain) {\r\n        logger.info(\"Global Pre Filter executed\");\r\n        return chain.filter(exchange);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class LoggingGlobalFiltersConfigurations {\r\n\r\n    final Logger logger =\r\n      LoggerFactory.getLogger(\r\n        LoggingGlobalFiltersConfigurations.class);\r\n\r\n    @Bean\r\n    public GlobalFilter postGlobalFilter() {\r\n        return (exchange, chain) -> {\r\n            return chain.filter(exchange)\r\n              .then(Mono.fromRunnable(() -> {\r\n                  logger.info(\"Global Post Filter executed\");\r\n              }));\r\n        };\r\n    }\r\n}\r\n```","```\r\nDEBUG --- o.s.c.g.h.RoutePredicateHandlerMapping:\r\n  Route matched: service_route\r\nDEBUG --- o.s.c.g.h.RoutePredicateHandlerMapping:\r\n  Mapping [Exchange: GET http://localhost/service/resource]\r\n  to Route{id='service_route', uri=http://localhost:8081, order=0, predicate=Paths: [/service/**],\r\n  match trailing slash: true, gatewayFilters=[[[RewritePath /service(?<segment>/?.*) = '${segment}'], order = 1]]}\r\nINFO  --- c.b.s.c.f.global.LoggingGlobalPreFilter:\r\n  Global Pre Filter executed\r\nDEBUG --- r.netty.http.client.HttpClientConnect:\r\n  [id: 0x58f7e075, L:/127.0.0.1:57215 - R:localhost/127.0.0.1:8081]\r\n  Handler is being applied: {uri=http://localhost:8081/resource, method=GET}\r\nDEBUG --- r.n.http.client.HttpClientOperations:\r\n  [id: 0x58f7e075, L:/127.0.0.1:57215 - R:localhost/127.0.0.1:8081]\r\n  Received response (auto-read:false) : [Content-Type=text/html;charset=UTF-8, Content-Length=16]\r\nINFO  --- c.f.g.LoggingGlobalFiltersConfigurations:\r\n  Global Post Filter executed\r\nDEBUG --- r.n.http.client.HttpClientOperations:\r\n  [id: 0x58f7e075, L:/127.0.0.1:57215 - R:localhost/127.0.0.1:8081] Received last HTTP packet\r\n```","```\r\n@Component\r\npublic class FirstPreLastPostGlobalFilter\r\n  implements GlobalFilter, Ordered {\r\n\r\n    final Logger logger =\r\n      LoggerFactory.getLogger(FirstPreLastPostGlobalFilter.class);\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange exchange,\r\n      GatewayFilterChain chain) {\r\n        logger.info(\"First Pre Global Filter\");\r\n        return chain.filter(exchange)\r\n          .then(Mono.fromRunnable(() -> {\r\n              logger.info(\"Last Post Global Filter\");\r\n            }));\r\n    }\r\n\r\n    @Override\r\n    public int getOrder() {\r\n        return -1;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class LoggingGatewayFilterFactory extends \r\n  AbstractGatewayFilterFactory<LoggingGatewayFilterFactory.Config> {\r\n\r\n    final Logger logger =\r\n      LoggerFactory.getLogger(LoggingGatewayFilterFactory.class);\r\n\r\n    public LoggingGatewayFilterFactory() {\r\n        super(Config.class);\r\n    }\r\n\r\n    @Override\r\n    public GatewayFilter apply(Config config) {\r\n        // ...\r\n    }\r\n\r\n    public static class Config {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic static class Config {\r\n    private String baseMessage;\r\n    private boolean preLogger;\r\n    private boolean postLogger;\r\n\r\n    // contructors, getters and setters...\r\n}\r\n```","```\r\n@Override\r\npublic GatewayFilter apply(Config config) {\r\n    return (exchange, chain) -> {\r\n        // Pre-processing\r\n        if (config.isPreLogger()) {\r\n            logger.info(\"Pre GatewayFilter logging: \"\r\n              + config.getBaseMessage());\r\n        }\r\n        return chain.filter(exchange)\r\n          .then(Mono.fromRunnable(() -> {\r\n              // Post-processing\r\n              if (config.isPostLogger()) {\r\n                  logger.info(\"Post GatewayFilter logging: \"\r\n                    + config.getBaseMessage());\r\n              }\r\n          }));\r\n    };\r\n}\r\n```","```\r\n...\r\nfilters:\r\n- RewritePath=/service(?<segment>/?.*), $\\{segment}\r\n- name: Logging\r\n  args:\r\n    baseMessage: My Custom Message\r\n    preLogger: true\r\n    postLogger: true\r\n```","```\r\nfilters:\r\n- RewritePath=/service(?<segment>/?.*), $\\{segment}\r\n- Logging=My Custom Message, true, true\r\n```","```\r\n@Override\r\npublic List<String> shortcutFieldOrder() {\r\n    return Arrays.asList(\"baseMessage\",\r\n      \"preLogger\",\r\n      \"postLogger\");\r\n}\r\n```","```\r\n@Override\r\npublic GatewayFilter apply(Config config) {\r\n    return new OrderedGatewayFilter((exchange, chain) -> {\r\n        // ...\r\n    }, 1);\r\n}\r\n```","```\r\n@Bean\r\npublic RouteLocator routes(\r\n  RouteLocatorBuilder builder,\r\n  LoggingGatewayFilterFactory loggingFactory) {\r\n    return builder.routes()\r\n      .route(\"service_route_java_config\", r -> r.path(\"/service/**\")\r\n        .filters(f -> \r\n            f.rewritePath(\"/service(?<segment>/?.*)\", \"$\\\\{segment}\")\r\n              .filter(loggingFactory.apply(\r\n              new Config(\"My Custom Message\", true, true))))\r\n            .uri(\"http://localhost:8081\"))\r\n      .build();\r\n}\r\n```","```\r\n(exchange, chain) -> {\r\n    if (exchange.getRequest()\r\n      .getHeaders()\r\n      .getAcceptLanguage()\r\n      .isEmpty()) {\r\n        // populate the Accept-Language header...\r\n    }\r\n\r\n    // remove the query param...\r\n    return chain.filter(exchange);\r\n};\r\n```","```\r\nString queryParamLocale = exchange.getRequest()\r\n  .getQueryParams()\r\n  .getFirst(\"locale\");\r\n\r\nLocale requestLocale = Optional.ofNullable(queryParamLocale)\r\n  .map(l -> Locale.forLanguageTag(l))\r\n  .orElse(config.getDefaultLocale());\r\n```","```\r\nexchange.getRequest()\r\n  .mutate()\r\n  .headers(h -> h.setAcceptLanguageAsLocales(\r\n    Collections.singletonList(requestLocale)))\r\n```","```\r\nServerWebExchange modifiedExchange = exchange.mutate()\r\n  // Here we'll modify the original request:\r\n  .request(originalRequest -> originalRequest)\r\n  .build();\r\n\r\nreturn chain.filter(modifiedExchange);\r\n```","```\r\noriginalRequest -> originalRequest.uri(\r\n  UriComponentsBuilder.fromUri(exchange.getRequest()\r\n    .getURI())\r\n  .replaceQueryParams(new LinkedMultiValueMap<String, String>())\r\n  .build()\r\n  .toUri())\r\n```","```\r\n(exchange, chain) -> {\r\n    return chain.filter(exchange)\r\n      .then(Mono.fromRunnable(() -> {\r\n          ServerHttpResponse response = exchange.getResponse();\r\n\r\n          Optional.ofNullable(exchange.getRequest()\r\n            .getQueryParams()\r\n            .getFirst(\"locale\"))\r\n            .ifPresent(qp -> {\r\n                String responseContentLanguage = response.getHeaders()\r\n                  .getContentLanguage()\r\n                  .getLanguage();\r\n\r\n                response.getHeaders()\r\n                  .add(\"Bael-Custom-Language-Header\", responseContentLanguage);\r\n                });\r\n        }));\r\n}\r\n```","```\r\n(exchange, chain) -> {\r\n    return WebClient.create().get()\r\n      .uri(config.getLanguageEndpoint())\r\n      .exchange()\r\n      // ...\r\n}\r\n```","```\r\n// ...\r\n.flatMap(response -> {\r\n    return (response.statusCode()\r\n      .is2xxSuccessful()) ? response.bodyToMono(String.class) : Mono.just(config.getDefaultLanguage());\r\n}).map(LanguageRange::parse)\r\n// ...\r\n```","```\r\n.map(range -> {\r\n    exchange.getRequest()\r\n      .mutate()\r\n      .headers(h -> h.setAcceptLanguage(range))\r\n      .build();\r\n\r\n    return exchange;\r\n}).flatMap(chain::filter);\r\n```"]