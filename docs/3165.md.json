["```\r\n@Entity\r\npublic class PaymentReceipt {\r\n    ...\r\n    @OneToOne(fetch = FetchType.LAZY)\r\n    private Payment payment;\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\n@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\r\npublic abstract class Payment {\r\n    ...\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    protected WebUser webUser;\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void givenPaymentReceipt_whenAccessingPayment_thenVerifyType() {\r\n    PaymentReceipt paymentReceipt = entityManager.find(PaymentReceipt.class, 3L);\r\n    Assert.assertTrue(paymentReceipt.getPayment() instanceof HibernateProxy);\r\n}\r\n```","```\r\npaymentReceipt = {[[email protected]](/web/20220525124241/https://www.baeldung.com/cdn-cgi/l/email-protection)} \r\n payment = {[[email protected]](/web/20220525124241/https://www.baeldung.com/cdn-cgi/l/email-protection)} \"[[email protected]](/web/20220525124241/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n  $$_hibernate_interceptor = {[[email protected]](/web/20220525124241/https://www.baeldung.com/cdn-cgi/l/email-protection)} \r\n```","```\r\npublic class PaymentReceipt {\r\n    ...\r\n    @OneToOne\r\n    private Payment payment;\r\n    ...\r\n}\r\n```","```\r\npublic abstract class Payment {\r\n    ...\r\n    @ManyToOne\r\n    protected WebUser webUser;\r\n    ...\r\n}\r\n```","```\r\nselect\r\n    paymentrec0_.id as id1_2_0_,\r\n    paymentrec0_.payment_id as payment_3_2_0_,\r\n    paymentrec0_.transactionNumber as transact2_2_0_,\r\n    payment1_.id as id1_1_1_,\r\n    payment1_.amount as amount2_1_1_,\r\n    payment1_.webUser_id as webuser_3_1_1_,\r\n    payment1_.cardNumber as cardnumb1_0_1_,\r\n    payment1_.clazz_ as clazz_1_,\r\n    webuser2_.id as id1_3_2_,\r\n    webuser2_.name as name2_3_2_ \r\nfrom\r\n    PaymentReceipt paymentrec0_ \r\nleft outer join\r\n    (\r\n        select\r\n            id,\r\n            amount,\r\n            webUser_id,\r\n            cardNumber,\r\n            1 as clazz_ \r\n        from\r\n            CreditCardPayment \r\n    ) payment1_ \r\n        on paymentrec0_.payment_id=payment1_.id \r\nleft outer join\r\n    WebUser webuser2_ \r\n        on payment1_.webUser_id=webuser2_.id \r\nwhere\r\n    paymentrec0_.id=?\r\n```","```\r\nselect\r\n    paymentrec0_.id as id1_2_0_,\r\n    paymentrec0_.payment_id as payment_3_2_0_,\r\n    paymentrec0_.transactionNumber as transact2_2_0_ \r\nfrom\r\n    PaymentReceipt paymentrec0_ \r\nwhere\r\n    paymentrec0_.id=?\r\n```","```\r\n@Test\r\npublic void givenWebUserProxy_whenCreatingPayment_thenExecuteSingleStatement() {\r\n    entityManager.getTransaction().begin();\r\n\r\n    WebUser webUser = entityManager.getReference(WebUser.class, 1L);\r\n    Payment payment = new CreditCardPayment(new BigDecimal(100), webUser, \"CN-1234\");\r\n    entityManager.persist(payment);\r\n\r\n    entityManager.getTransaction().commit();\r\n    Assert.assertTrue(webUser instanceof HibernateProxy);\r\n}\r\n```","```\r\ninsert \r\ninto\r\n    CreditCardPayment\r\n    (amount, webUser_id, cardNumber, id) \r\nvalues\r\n    (?, ?, ?, ?)\r\n```","```\r\n@Entity\r\npublic class CreditCardPayment extends Payment {\r\n\r\n    private String cardNumber;\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void givenPaymentReceipt_whenCastingPaymentToConcreteClass_thenThrowClassCastException() {\r\n    PaymentReceipt paymentReceipt = entityManager.find(PaymentReceipt.class, 3L);\r\n    assertThrows(ClassCastException.class, () -> {\r\n        CreditCardPayment creditCardPayment = (CreditCardPayment) paymentReceipt.getPayment();\r\n    });\r\n}\r\n```","```\r\nHibernate.unproxy(paymentReceipt.getPayment());\r\n```","```\r\n@Test\r\npublic void givenPaymentReceipt_whenPaymentIsUnproxied_thenReturnRealEntityObject() {\r\n    PaymentReceipt paymentReceipt = entityManager.find(PaymentReceipt.class, 3L);\r\n    Assert.assertTrue(Hibernate.unproxy(paymentReceipt.getPayment()) instanceof CreditCardPayment);\r\n}\r\n```","```\r\nHibernateProxy hibernateProxy = (HibernateProxy) paymentReceipt.getPayment();\r\nLazyInitializer initializer = hibernateProxy.getHibernateLazyInitializer();\r\nCreditCardPayment unproxiedEntity = (CreditCardPayment) initializer.getImplementation();\r\n```"]