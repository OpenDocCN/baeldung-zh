["```\r\n@GetMapping(\"/spring5/{*id}\")\r\npublic String URIVariableHandler(@PathVariable String id) {\r\n    return id;\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleURIVariablePattern_thenGotPathVariable() {\r\n\r\n    client.get()\r\n      .uri(\"/spring5/baeldung/tutorial\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .is2xxSuccessful()\r\n      .expectBody()\r\n      .equals(\"/baeldung/tutorial\");\r\n\r\n    client.get()\r\n      .uri(\"/spring5/baeldung\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .is2xxSuccessful()\r\n      .expectBody()\r\n      .equals(\"/baeldung\");\r\n}\r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() {\r\n    return route(GET(\"/test/{*id}\"), \r\n      serverRequest -> ok().body(fromValue(serverRequest.pathVariable(\"id\"))));\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleURIVariablePattern_thenGotPathVariable() \r\n  throws Exception {\r\n\r\n    client.get()\r\n      .uri(\"/test/ab/cd\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .isOk()\r\n      .expectBody(String.class)\r\n      .isEqualTo(\"/ab/cd\");\r\n}\r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n    return RouterFunctions.resources(\r\n      \"/files/{*filepaths}\", \r\n      new ClassPathResource(\"files/\"))); \r\n} \r\n```","```\r\n@Test \r\npublic void whenMultipleURIVariablePattern_thenGotPathVariable() \r\n  throws Exception { \r\n      client.get() \r\n        .uri(\"/files/test/test.txt\") \r\n        .exchange() \r\n        .expectStatus() \r\n        .isOk() \r\n        .expectBody(String.class) \r\n        .isEqualTo(\"test\");\r\n\r\n      client.get() \r\n        .uri(\"/files/hello.txt\") \r\n        .exchange() \r\n        .expectStatus() \r\n        .isOk() \r\n        .expectBody(String.class) \r\n        .isEqualTo(\"hello\"); \r\n}\r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n    return route(GET(\"/t?st\"), \r\n      serverRequest -> ok().body(fromValue(\"Path /t?st is accessed\"))); \r\n}\r\n\r\n@Test\r\npublic void whenGetPathWithSingleCharWildcard_thenGotPathPattern()   \r\n  throws Exception {\r\n\r\n      client.get()\r\n        .uri(\"/test\")\r\n        .exchange()\r\n        .expectStatus()\r\n        .isOk()\r\n        .expectBody(String.class)\r\n        .isEqualTo(\"Path /t?st is accessed\");\r\n} \r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n    returnroute(\r\n      GET(\"/baeldung/*Id\"), \r\n      serverRequest -> ok().body(fromValue(\"/baeldung/*Id path was accessed\"))); }\r\n\r\n@Test\r\npublic void whenGetMultipleCharWildcard_thenGotPathPattern() \r\n  throws Exception {\r\n      client.get()\r\n        .uri(\"/baeldung/tutorialId\")\r\n        .exchange()\r\n        .expectStatus()\r\n        .isOk()\r\n        .expectBody(String.class)\r\n        .isEqualTo(\"/baeldung/*Id path was accessed\");\r\n} \r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n    return RouterFunctions.resources(\r\n      \"/resources/**\", \r\n      new ClassPathResource(\"resources/\"))); \r\n}\r\n\r\n@Test\r\npublic void whenAccess_thenGot() throws Exception {\r\n    client.get()\r\n      .uri(\"/resources/test/test.txt\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .isOk()\r\n      .expectBody(String.class)\r\n      .isEqualTo(\"content of file test.txt\");\r\n} \r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n    return route(GET(\"/{baeldung:[a-z]+}\"), \r\n      serverRequest ->  ok()\r\n        .body(fromValue(\"/{baeldung:[a-z]+} was accessed and \"\r\n        + \"baeldung=\" + serverRequest.pathVariable(\"baeldung\")))); \r\n}\r\n\r\n@Test\r\npublic void whenGetRegexInPathVarible_thenGotPathVariable() \r\n  throws Exception {\r\n\r\n      client.get()\r\n        .uri(\"/abcd\")\r\n        .exchange()\r\n        .expectStatus()\r\n        .isOk()\r\n        .expectBody(String.class)\r\n        .isEqualTo(\"/{baeldung:[a-z]+} was accessed and \"\r\n          + \"baeldung=abcd\");\r\n} \r\n```","```\r\nprivate RouterFunction<ServerResponse> routingFunction() { \r\n\r\n    return route(\r\n      GET(\"/{var1}_{var2}\"),\r\n      serverRequest -> ok()\r\n        .body(fromValue( serverRequest.pathVariable(\"var1\") + \" , \" \r\n        + serverRequest.pathVariable(\"var2\"))));\r\n }\r\n\r\n@Test\r\npublic void whenGetMultiplePathVaribleInSameSegment_thenGotPathVariables() \r\n  throws Exception {\r\n      client.get()\r\n        .uri(\"/baeldung_tutorial\")\r\n        .exchange()\r\n        .expectStatus()\r\n        .isOk()\r\n        .expectBody(String.class)\r\n        .isEqualTo(\"baeldung , tutorial\");\r\n}\r\n```"]