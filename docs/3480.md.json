["```\r\nhttp://localhost:8080/users?search=firstName:john,'lastName:doe\r\n```","```\r\npublic SpecSearchCriteria(\r\n  String orPredicate, String key, SearchOperation operation, Object value) {\r\n    super();\r\n\r\n    this.orPredicate \r\n      = orPredicate != null\r\n      && orPredicate.equals(SearchOperation.OR_PREDICATE_FLAG);\r\n\r\n    this.key = key;\r\n    this.operation = operation;\r\n    this.value = value;\r\n}\r\n```","```\r\npublic Specification<User> build() {\r\n    if (params.size() == 0) {\r\n        return null;\r\n    }\r\n    Specification<User> result = new UserSpecification(params.get(0));\r\n\r\n    for (int i = 1; i < params.size(); i++) {\r\n        result = params.get(i).isOrPredicate()\r\n          ? Specification.where(result).or(new UserSpecification(params.get(i))) \r\n          : Specification.where(result).and(new UserSpecification(params.get(i)));\r\n    }\r\n    return result;\r\n }\r\n```","```\r\n@GetMapping(\"/users/espec\")\r\n@ResponseBody\r\npublic List<User> findAllByOrPredicate(@RequestParam String search) {\r\n    Specification<User> spec = resolveSpecification(search);\r\n    return dao.findAll(spec);\r\n}\r\n\r\nprotected Specification<User> resolveSpecification(String searchParameters) {\r\n    UserSpecificationsBuilder builder = new UserSpecificationsBuilder();\r\n    String operationSetExper = Joiner.on(\"|\")\r\n      .join(SearchOperation.SIMPLE_OPERATION_SET);\r\n    Pattern pattern = Pattern.compile(\r\n      \"(\\\\p{Punct}?)(\\\\w+?)(\"\r\n      + operationSetExper \r\n      + \")(\\\\p{Punct}?)(\\\\w+?)(\\\\p{Punct}?),\");\r\n    Matcher matcher = pattern.matcher(searchParameters + \",\");\r\n    while (matcher.find()) {\r\n        builder.with(matcher.group(1), matcher.group(2), matcher.group(3), \r\n        matcher.group(5), matcher.group(4), matcher.group(6));\r\n    }\r\n\r\n    return builder.build();\r\n}\r\n```","```\r\nprivate String EURL_PREFIX\r\n  = \"http://localhost:8082/spring-rest-full/auth/users/espec?search=\";\r\n\r\n@Test\r\npublic void givenFirstOrLastName_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(EURL_PREFIX + \"firstName:john,'lastName:doe\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertTrue(result.contains(userTom.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstOrLastName_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecificationsBuilder builder = new UserSpecificationsBuilder();\r\n\r\n    SpecSearchCriteria spec \r\n      = new SpecSearchCriteria(\"firstName\", SearchOperation.EQUALITY, \"john\");\r\n    SpecSearchCriteria spec1 \r\n      = new SpecSearchCriteria(\"'\",\"lastName\", SearchOperation.EQUALITY, \"doe\");\r\n\r\n    List<User> results = repository\r\n      .findAll(builder.with(spec).with(spec1).build());\r\n\r\n    assertThat(results, hasSize(2));\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, isIn(results));\r\n}\r\n```","```\r\nhttp://localhost:8080/users?search=( firstName:john OR firstName:tom ) AND age>22\r\n```","```\r\npublic Deque<?> parse(String searchParam) {\r\n\r\n    Deque<Object> output = new LinkedList<>();\r\n    Deque<String> stack = new LinkedList<>();\r\n\r\n    Arrays.stream(searchParam.split(\"\\\\s+\")).forEach(token -> {\r\n        if (ops.containsKey(token)) {\r\n            while (!stack.isEmpty() && isHigerPrecedenceOperator(token, stack.peek())) {\r\n                output.push(stack.pop().equalsIgnoreCase(SearchOperation.OR_OPERATOR)\r\n                  ? SearchOperation.OR_OPERATOR : SearchOperation.AND_OPERATOR);\r\n            }\r\n            stack.push(token.equalsIgnoreCase(SearchOperation.OR_OPERATOR) \r\n              ? SearchOperation.OR_OPERATOR : SearchOperation.AND_OPERATOR);\r\n\r\n        } else if (token.equals(SearchOperation.LEFT_PARANTHESIS)) {\r\n            stack.push(SearchOperation.LEFT_PARANTHESIS);\r\n        } else if (token.equals(SearchOperation.RIGHT_PARANTHESIS)) {\r\n            while (!stack.peek().equals(SearchOperation.LEFT_PARANTHESIS)) { \r\n                output.push(stack.pop());\r\n            }\r\n            stack.pop();\r\n        } else {\r\n            Matcher matcher = SpecCriteraRegex.matcher(token);\r\n            while (matcher.find()) {\r\n                output.push(new SpecSearchCriteria(\r\n                  matcher.group(1), \r\n                  matcher.group(2), \r\n                  matcher.group(3), \r\n                  matcher.group(4), \r\n                  matcher.group(5)));\r\n            }\r\n        }\r\n    });\r\n\r\n    while (!stack.isEmpty()) {\r\n        output.push(stack.pop());\r\n    }\r\n\r\n    return output;\r\n}\r\n```","```\r\n public Specification<U> build(Deque<?> postFixedExprStack, \r\n        Function<SpecSearchCriteria, Specification<U>> converter) {\r\n\r\n        Deque<Specification<U>> specStack = new LinkedList<>();\r\n\r\n        while (!postFixedExprStack.isEmpty()) {\r\n            Object mayBeOperand = postFixedExprStack.pollLast();\r\n\r\n            if (!(mayBeOperand instanceof String)) {\r\n                specStack.push(converter.apply((SpecSearchCriteria) mayBeOperand));\r\n            } else {\r\n                Specification<U> operand1 = specStack.pop();\r\n                Specification<U> operand2 = specStack.pop();\r\n                if (mayBeOperand.equals(SearchOperation.AND_OPERATOR)) {\r\n                    specStack.push(Specification.where(operand1)\r\n                      .and(operand2));\r\n                }\r\n                else if (mayBeOperand.equals(SearchOperation.OR_OPERATOR)) {\r\n                    specStack.push(Specification.where(operand1)\r\n                      .or(operand2));\r\n                }\r\n            }\r\n        }\r\n        return specStack.pop();\r\n```","```\r\n@GetMapping(\"/users/spec/adv\")\r\n@ResponseBody\r\npublic List<User> findAllByAdvPredicate(@RequestParam String search) {\r\n    Specification<User> spec = resolveSpecificationFromInfixExpr(search);\r\n    return dao.findAll(spec);\r\n}\r\n\r\nprotected Specification<User> resolveSpecificationFromInfixExpr(String searchParameters) {\r\n    CriteriaParser parser = new CriteriaParser();\r\n    GenericSpecificationsBuilder<User> specBuilder = new GenericSpecificationsBuilder<>();\r\n    return specBuilder.build(parser.parse(searchParameters), UserSpecification::new);\r\n}\r\n```"]