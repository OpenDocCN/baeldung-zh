["```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>2.21.0</version>\r\n</dependency>\r\n```","```\r\nimport static org.mockito.BDDMockito.*;\r\n```","```\r\nwhen(phoneBookRepository.contains(momContactName))\r\n  .thenReturn(false);\r\n\r\nphoneBookService.register(momContactName, momPhoneNumber);\r\n\r\nverify(phoneBookRepository)\r\n  .insert(momContactName, momPhoneNumber);\r\n```","```\r\ngiven(phoneBookRepository.contains(momContactName))\r\n  .willReturn(false);\r\n\r\nphoneBookService.register(momContactName, momPhoneNumber);\r\n\r\nthen(phoneBookRepository)\r\n  .should()\r\n  .insert(momContactName, momPhoneNumber);\r\n```","```\r\npublic class PhoneBookService {\r\n    private PhoneBookRepository phoneBookRepository;\r\n\r\n    public void register(String name, String phone) {\r\n        if(!name.isEmpty() && !phone.isEmpty()\r\n          && !phoneBookRepository.contains(name)) {\r\n            phoneBookRepository.insert(name, phone);\r\n        }\r\n    }\r\n\r\n    public String search(String name) {\r\n        if(!name.isEmpty() && phoneBookRepository.contains(name)) {\r\n            return phoneBookRepository.getPhoneNumberByContactName(name);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\ngiven(phoneBookRepository.contains(momContactName))\r\n  .willReturn(false);\r\n\r\nphoneBookService.register(xContactName, \"\");\r\n\r\nthen(phoneBookRepository)\r\n  .should(never())\r\n  .insert(momContactName, momPhoneNumber);\r\n```","```\r\ngiven(phoneBookRepository.contains(momContactName))\r\n  .willReturn(true);\r\ngiven(phoneBookRepository.getPhoneNumberByContactName(momContactName))\r\n  .will((InvocationOnMock invocation) ->\r\n    invocation.getArgument(0).equals(momContactName) \r\n      ? momPhoneNumber \r\n      : null);\r\nphoneBookService.search(momContactName);\r\nthen(phoneBookRepository)\r\n  .should()\r\n  .getPhoneNumberByContactName(momContactName); \r\n```","```\r\ngiven(phoneBookRepository.contains(xContactName))\r\n  .willReturn(false);\r\nwillThrow(new RuntimeException())\r\n  .given(phoneBookRepository)\r\n  .insert(any(String.class), eq(tooLongPhoneNumber));\r\n\r\ntry {\r\n    phoneBookService.register(xContactName, tooLongPhoneNumber);\r\n    fail(\"Should throw exception\");\r\n} catch (RuntimeException ex) { }\r\n\r\nthen(phoneBookRepository)\r\n  .should(never())\r\n  .insert(momContactName, tooLongPhoneNumber);\r\n```"]