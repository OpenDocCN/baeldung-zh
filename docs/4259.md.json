["```\r\nString toStringWithConcatenation(final char c) {\r\n    return String.valueOf(c);\r\n}\r\n```","```\r\nString appendWithConcatenation(final String prefix, final char c) {\r\n    return prefix + c;\r\n}\r\n```","```\r\nString appendWithStringBuilder(final String prefix, final char c) {\r\n    return new StringBuilder(prefix).append(c).toString();\r\n}\r\n```","```\r\nchar getCharacterByIndex(final String text, final int index) {\r\n    return text.charAt(index);\r\n}\r\n```","```\r\nint asciiValue(final char character) {\r\n    return (int) character;\r\n}\r\n\r\nchar fromAsciiValue(final int value) {\r\n    Assert.isTrue(value >= 0 && value < 65536, \"value is not a valid character\");\r\n    return (char) value;\r\n}\r\n```","```\r\nString removeWhiteSpace(final String text) {\r\n    return text.replaceAll(\"\\\\s+\", \"\");\r\n}\r\n```","```\r\n<T> String fromCollection(final Collection<T> collection) { \r\n   return collection.stream().map(Objects::toString).collect(Collectors.joining(\", \"));\r\n}\r\n```","```\r\nString[] splitByRegExPipe(final String text) {\r\n   return text.split(\"\\\\|\");\r\n}\r\n```","```\r\nString[] splitByPatternPipe(final String text) {\r\n    return text.split(Pattern.quote(\"|\"));\r\n}\r\n```","```\r\nIntStream getStream(final String text) {\r\n    return text.chars();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingEquals_thenWeCheckForTheSameValue() {\r\n    assertTrue(\"Values are equal\", new String(\"Test\").equals(\"Test\"));\r\n}\r\n\r\n@Test\r\npublic void whenUsingEqualsSign_thenWeCheckForReferenceEquality() {\r\n    assertFalse(\"References are not equal\", new String(\"Test\") == \"Test\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenTheCompileCanBuildUpAString_thenWeGetTheSameReference() {\r\n    assertTrue(\"Literals are concatenated by the compiler\", \"Test\" == \"Te\"+\"st\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingIsEmpty_thenWeCheckForNullorLengthZero() {\r\n    assertTrue(\"null is empty\", isEmpty(null));\r\n    assertTrue(\"nothing is empty\", isEmpty(\"\"));\r\n    assertFalse(\"whitespace is not empty\", isEmpty(\" \"));\r\n    assertFalse(\"whitespace is not empty\", isEmpty(\"\\n\"));\r\n    assertFalse(\"whitespace is not empty\", isEmpty(\"\\t\"));\r\n    assertFalse(\"text is not empty\", isEmpty(\"Anything!\"));\r\n}\r\n\r\n@Test\r\npublic void whenUsingIsBlank_thenWeCheckForNullorOnlyContainingWhitespace() {\r\n    assertTrue(\"null is blank\", isBlank(null));\r\n    assertTrue(\"nothing is blank\", isBlank(\"\"));\r\n    assertTrue(\"whitespace is blank\", isBlank(\"\\t\\t \\t\\n\\r\"));\r\n    assertFalse(\"test is not blank\", isBlank(\"Anything!\"));\r\n}\r\n```"]