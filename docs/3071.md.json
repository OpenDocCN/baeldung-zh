["```\r\npublic class Stack<E> extends Vector<E> { ... }\r\n```","```\r\npublic class UserActivityStack extends ActivityCollection { ... }\r\n```","```\r\npublic interface Deque<E> extends Queue<E> { ... }\r\n```","```\r\npublic class UserActivityStack extends ActivityCollection implements Deque<UserActivity> { ... }\r\n```","```\r\n@Test\r\nvoid givenAStack_whenIterate_thenFromBottomToTop() {\r\n    Stack<String> myStack = new Stack<>();\r\n    myStack.push(\"I am at the bottom.\");\r\n    myStack.push(\"I am in the middle.\");\r\n    myStack.push(\"I am at the top.\");\r\n\r\n    Iterator<String> it = myStack.iterator();\r\n\r\n    assertThat(it).toIterable().containsExactly(\r\n      \"I am at the bottom.\",\r\n      \"I am in the middle.\",\r\n      \"I am at the top.\");\r\n} \r\n```","```\r\n@Test\r\nvoid givenADeque_whenIterate_thenFromTopToBottom() {\r\n    Deque<String> myStack = new ArrayDeque<>();\r\n    myStack.push(\"I am at the bottom.\");\r\n    myStack.push(\"I am in the middle.\");\r\n    myStack.push(\"I am at the top.\");\r\n\r\n    Iterator<String> it = myStack.iterator();\r\n\r\n    assertThat(it).toIterable().containsExactly(\r\n      \"I am at the top.\",\r\n      \"I am in the middle.\",\r\n      \"I am at the bottom.\");\r\n} \r\n```","```\r\n@Test\r\nvoid givenAStack_whenAccessByIndex_thenElementCanBeRead() {\r\n    Stack<String> myStack = new Stack<>();\r\n    myStack.push(\"I am the 1st element.\"); //index 0\r\n    myStack.push(\"I am the 2nd element.\"); //index 1\r\n    myStack.push(\"I am the 3rd element.\"); //index 2\r\n\r\n    assertThat(myStack.get(0)).isEqualTo(\"I am the 1st element.\");\r\n} \r\n```","```\r\n@Test\r\nvoid givenAStack_whenAddOrRemoveByIndex_thenElementCanBeAddedOrRemoved() {\r\n    Stack<String> myStack = new Stack<>();\r\n    myStack.push(\"I am the 1st element.\");\r\n    myStack.push(\"I am the 3rd element.\");\r\n\r\n    assertThat(myStack.size()).isEqualTo(2);\r\n\r\n    myStack.add(1, \"I am the 2nd element.\");\r\n    assertThat(myStack.size()).isEqualTo(3);\r\n    assertThat(myStack.get(1)).isEqualTo(\"I am the 2nd element.\");\r\n\r\n    myStack.remove(1);\r\n    assertThat(myStack.size()).isEqualTo(2);\r\n} \r\n```","```\r\n@Test\r\nvoid givenADeque_whenAddOrRemoveLastElement_thenTheLastElementCanBeAddedOrRemoved() {\r\n    Deque<String> myStack = new ArrayDeque<>();\r\n    myStack.push(\"I am the 1st element.\");\r\n    myStack.push(\"I am the 2nd element.\");\r\n    myStack.push(\"I am the 3rd element.\");\r\n\r\n    assertThat(myStack.size()).isEqualTo(3);\r\n\r\n    //insert element to the bottom of the stack\r\n    myStack.addLast(\"I am the NEW element.\");\r\n    assertThat(myStack.size()).isEqualTo(4);\r\n    assertThat(myStack.peek()).isEqualTo(\"I am the 3rd element.\");\r\n\r\n    //remove element from the bottom of the stack\r\n    String removedStr = myStack.removeLast();\r\n    assertThat(myStack.size()).isEqualTo(3);\r\n    assertThat(removedStr).isEqualTo(\"I am the NEW element.\");\r\n} \r\n```","```\r\npublic interface LifoStack<E> extends Collection<E> {\r\n    E peek();\r\n    E pop();\r\n    void push(E item);\r\n} \r\n```","```\r\npublic class ArrayLifoStack<E> implements LifoStack<E> {\r\n    private final Deque<E> deque = new ArrayDeque<>();\r\n\r\n    @Override\r\n    public void push(E item) {\r\n        deque.addFirst(item);\r\n    }\r\n\r\n    @Override\r\n    public E pop() {\r\n        return deque.removeFirst();\r\n    }\r\n\r\n    @Override\r\n    public E peek() {\r\n        return deque.peekFirst();\r\n    }\r\n\r\n    // forward methods in Collection interface\r\n    // to the deque object\r\n\r\n    @Override\r\n    public int size() {\r\n        return deque.size();\r\n    }\r\n...\r\n}\r\n```"]