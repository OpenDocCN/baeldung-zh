["```\r\n<dependency>\r\n    <groupId>com.rabbitmq</groupId>\r\n    <artifactId>amqp-client</artifactId>\r\n    <version>5.16.0</version>\r\n</dependency> \r\n```","```\r\nConnectionFactory factory = new ConnectionFactory();\r\nfactory.setHost(\"amqp.example.com\"); \r\n```","```\r\nConnection conn = factory.newConnection();\r\n```","```\r\nchannel = conn.createChannel();\r\n```","```\r\nchannel.queueDeclare(\"example.queue\", true, false, true, null);\r\n```","```\r\nchannel.basicPublish(\"\", queue, null, payload);\r\n```","```\r\npublic class Worker implements Callable<Worker.WorkerResult> {\r\n\r\n    // ... field and constructor omitted\r\n    @Override\r\n    public WorkerResult call() throws Exception {\r\n\r\n        try {\r\n            long start = System.currentTimeMillis();\r\n            for (int i = 0; i < iterations; i++) {\r\n                channel.basicPublish(\"\", queue, null, payload);\r\n            }\r\n\r\n            long elapsed = System.currentTimeMillis() - start;\r\n            channel.queueDelete(queue);\r\n            return new WorkerResult(elapsed);\r\n        } finally {\r\n            counter.countDown();\r\n        }\r\n    }\r\n\r\n    public static class WorkerResult {\r\n        public final long elapsed;\r\n\r\n        WorkerResult(long elapsed) {\r\n            this.elapsed = elapsed;\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Override\r\npublic Long call() {\r\n\r\n    try {\r\n        Connection connection = factory.newConnection();\r\n        CountDownLatch counter = new CountDownLatch(workerCount);\r\n        List<Worker> workers = new ArrayList<>();\r\n\r\n        for( int i = 0 ; i < workerCount ; i++ ) {\r\n            workers.add(new Worker(\"queue_\" + i, connection, iterations, counter,payloadSize));\r\n        }\r\n\r\n        ExecutorService executor = new ThreadPoolExecutor(workerCount, workerCount, 0,\r\n          TimeUnit.SECONDS, new ArrayBlockingQueue<>(workerCount, true));\r\n        long start = System.currentTimeMillis();\r\n        executor.invokeAll(workers);\r\n\r\n        if( counter.await(5, TimeUnit.MINUTES)) {\r\n            long elapsed = System.currentTimeMillis() - start;\r\n            return throughput(workerCount,iterations,elapsed);\r\n        }\r\n        else {\r\n            throw new RuntimeException(\"Timeout waiting workers to complete\");\r\n        }        \r\n    }\r\n    catch(Exception ex) {\r\n        throw new RuntimeException(ex);\r\n    }\r\n} \r\n```","```\r\nfor (int i = 0; i < workerCount; i++) {\r\n    Connection conn = factory.newConnection();\r\n    workers.add(new Worker(\"queue_\" + i, conn, iterations, counter, payloadSize));\r\n} \r\n```","```\r\nprivate static long throughput(int workerCount, int iterations, long elapsed) {\r\n    return (iterations * workerCount * 1000) / elapsed;\r\n} \r\n```"]