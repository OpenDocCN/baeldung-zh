["```\r\npublic class MyList extends AbstractList<String> {\r\n\r\n    @Override\r\n    public String get(final int index) {\r\n        return null;\r\n    }\r\n    @Override\r\n    public int size() {\r\n        return 0;\r\n    }\r\n} \r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.size();\r\nverify(mockedList).size();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.size();\r\nverify(mockedList, times(1)).size();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nverifyNoInteractions(mockedList);\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nverify(mockedList, times(0)).size();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.size();\r\nmockedList.clear();\r\nverify(mockedList).size();\r\nverifyNoMoreInteractions(mockedList);\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.size();\r\nmockedList.add(\"a parameter\");\r\nmockedList.clear();\r\n\r\nInOrder inOrder = Mockito.inOrder(mockedList);\r\ninOrder.verify(mockedList).size();\r\ninOrder.verify(mockedList).add(\"a parameter\");\r\ninOrder.verify(mockedList).clear();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.size();\r\nverify(mockedList, never()).clear();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.clear();\r\nmockedList.clear();\r\nmockedList.clear();\r\n\r\nverify(mockedList, atLeast(1)).clear();\r\nverify(mockedList, atMost(10)).clear();\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.add(\"test\");\r\nverify(mockedList).add(\"test\");\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.add(\"test\");\r\nverify(mockedList).add(anyString());\r\n```","```\r\nList<String> mockedList = mock(MyList.class);\r\nmockedList.addAll(Lists.<String> newArrayList(\"someElement\"));\r\n\r\nArgumentCaptor<List<String>> argumentCaptor = ArgumentCaptor.forClass(List.class);\r\nverify(mockedList).addAll(argumentCaptor.capture());\r\n\r\nList<String> capturedArgument = argumentCaptor.getValue();\r\nassertThat(capturedArgument).contains(\"someElement\");\r\n```"]