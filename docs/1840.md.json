["```\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-http_2.12</artifactId>\r\n    <version>10.0.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-stream_2.12</artifactId>\r\n    <version>2.5.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-http-jackson_2.12</artifactId>\r\n    <version>10.0.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-http-testkit_2.12</artifactId>\r\n    <version>10.0.11</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nclass UserActor extends AbstractActor {\r\n\r\n  private UserService userService = new UserService();\r\n\r\n  static Props props() {\r\n    return Props.create(UserActor.class);\r\n  }\r\n\r\n  @Override\r\n  public Receive createReceive() {\r\n    return receiveBuilder()\r\n      .match(CreateUserMessage.class, handleCreateUser())\r\n      .match(GetUserMessage.class, handleGetUser())\r\n      .build();\r\n  }\r\n\r\n  private FI.UnitApply<CreateUserMessage> handleCreateUser() {\r\n    return createUserMessage -> {\r\n      userService.createUser(createUserMessage.getUser());\r\n      sender()\r\n        .tell(new ActionPerformed(\r\n           String.format(\"User %s created.\", createUserMessage.getUser().getName())), getSelf());\r\n    };\r\n  }\r\n\r\n  private FI.UnitApply<GetUserMessage> handleGetUser() {\r\n    return getUserMessage -> {\r\n      sender().tell(userService.getUser(getUserMessage.getUserId()), getSelf());\r\n    };\r\n  }\r\n}\r\n```","```\r\nclass UserServer extends HttpApp {\r\n\r\n  private final ActorRef userActor;\r\n\r\n  Timeout timeout = new Timeout(Duration.create(5, TimeUnit.SECONDS));\r\n\r\n  UserServer(ActorRef userActor) {\r\n    this.userActor = userActor;\r\n  }\r\n\r\n  @Override\r\n  public Route routes() {\r\n    return path(\"users\", this::postUser)\r\n      .orElse(path(segment(\"users\").slash(longSegment()), id -> route(getUser(id))));\r\n  }\r\n\r\n  private Route getUser(Long id) {\r\n    return get(() -> {\r\n      CompletionStage<Optional<User>> user = \r\n        PatternsCS.ask(userActor, new GetUserMessage(id), timeout)\r\n          .thenApply(obj -> (Optional<User>) obj);\r\n\r\n      return onSuccess(() -> user, performed -> {\r\n        if (performed.isPresent())\r\n          return complete(StatusCodes.OK, performed.get(), Jackson.marshaller());\r\n        else\r\n          return complete(StatusCodes.NOT_FOUND);\r\n      });\r\n    });\r\n  }\r\n\r\n  private Route postUser() {\r\n    return route(post(() -> entity(Jackson.unmarshaller(User.class), user -> {\r\n      CompletionStage<ActionPerformed> userCreated = \r\n        PatternsCS.ask(userActor, new CreateUserMessage(user), timeout)\r\n          .thenApply(obj -> (ActionPerformed) obj);\r\n\r\n      return onSuccess(() -> userCreated, performed -> {\r\n        return complete(StatusCodes.CREATED, performed, Jackson.marshaller());\r\n      });\r\n    })));\r\n  }\r\n} \r\n```","```\r\npublic static void main(String[] args) throws Exception {\r\n  ActorSystem system = ActorSystem.create(\"userServer\");\r\n  ActorRef userActor = system.actorOf(UserActor.props(), \"userActor\");\r\n  UserServer server = new UserServer(userActor);\r\n  server.startServer(\"localhost\", 8080, system);\r\n}\r\n```"]