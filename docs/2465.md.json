["```\r\npublic static List<String> usingSplitMethod(String text, int n) {\r\n    String[] results = text.split(\"(?<=\\\\G.{\" + n + \"})\");\r\n\r\n    return Arrays.asList(results);\r\n}\r\n```","```\r\npublic class SplitStringEveryNthCharUnitTest {\r\n\r\n    public static final String TEXT = \"abcdefgh123456\";\r\n\r\n    @Test\r\n    public void givenString_whenUsingSplit_thenSplit() {\r\n        List<String> results = SplitStringEveryNthChar.usingSplitMethod(TEXT, 3);\r\n\r\n        assertThat(results, contains(\"abc\", \"def\", \"gh1\", \"234\", \"56\"));\r\n    }\r\n}\r\n```","```\r\npublic static List<String> usingSubstringMethod(String text, int n) {\r\n    List<String> results = new ArrayList<>();\r\n    int length = text.length();\r\n\r\n    for (int i = 0; i < length; i += n) {\r\n        results.add(text.substring(i, Math.min(length, i + n)));\r\n    }\r\n\r\n    return results;\r\n}\r\n```","```\r\n@Test\r\npublic void givenString_whenUsingSubstring_thenSplit() {\r\n    List<String> results = SplitStringEveryNthChar.usingSubstringMethod(TEXT, 4);\r\n\r\n    assertThat(results, contains(\"abcd\", \"efgh\", \"1234\", \"56\"));\r\n}\r\n```","```\r\npublic static List<String> usingPattern(String text, int n) {\r\n    return Pattern.compile(\".{1,\" + n + \"}\")\r\n        .matcher(text)\r\n        .results()\r\n        .map(MatchResult::group)\r\n        .collect(Collectors.toList());\r\n}\r\n```","```\r\n@Test\r\npublic void givenString_whenUsingPattern_thenSplit() {\r\n    List<String> results = SplitStringEveryNthChar.usingPattern(TEXT, 5);\r\n\r\n    assertThat(results, contains(\"abcde\", \"fgh12\", \"3456\"));\r\n}\r\n```","```\r\npublic static List<String> usingGuava(String text, int n) {\r\n    Iterable<String> parts = Splitter.fixedLength(n).split(text);\r\n\r\n    return ImmutableList.copyOf(parts);\r\n}\r\n```","```\r\n@Test\r\npublic void givenString_whenUsingGuava_thenSplit() {\r\n    List<String> results = SplitStringEveryNthChar.usingGuava(TEXT, 6);\r\n\r\n    assertThat(results, contains(\"abcdef\", \"gh1234\", \"56\"));\r\n}\r\n```"]