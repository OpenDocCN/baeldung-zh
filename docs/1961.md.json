["```\r\nForkJoinPool commonPool = ForkJoinPool.commonPool();\r\n```","```\r\npublic static ForkJoinPool forkJoinPool = new ForkJoinPool(2);\r\n```","```\r\nForkJoinPool forkJoinPool = PoolUtil.forkJoinPool;\r\n```","```\r\npublic class CustomRecursiveAction extends RecursiveAction {\r\n\r\n    private String workload = \"\";\r\n    private static final int THRESHOLD = 4;\r\n\r\n    private static Logger logger = \r\n      Logger.getAnonymousLogger();\r\n\r\n    public CustomRecursiveAction(String workload) {\r\n        this.workload = workload;\r\n    }\r\n\r\n    @Override\r\n    protected void compute() {\r\n        if (workload.length() > THRESHOLD) {\r\n            ForkJoinTask.invokeAll(createSubtasks());\r\n        } else {\r\n           processing(workload);\r\n        }\r\n    }\r\n\r\n    private List<CustomRecursiveAction> createSubtasks() {\r\n        List<CustomRecursiveAction> subtasks = new ArrayList<>();\r\n\r\n        String partOne = workload.substring(0, workload.length() / 2);\r\n        String partTwo = workload.substring(workload.length() / 2, workload.length());\r\n\r\n        subtasks.add(new CustomRecursiveAction(partOne));\r\n        subtasks.add(new CustomRecursiveAction(partTwo));\r\n\r\n        return subtasks;\r\n    }\r\n\r\n    private void processing(String work) {\r\n        String result = work.toUpperCase();\r\n        logger.info(\"This result - (\" + result + \") - was processed by \" \r\n          + Thread.currentThread().getName());\r\n    }\r\n}\r\n```","```\r\npublic class CustomRecursiveTask extends RecursiveTask<Integer> {\r\n    private int[] arr;\r\n\r\n    private static final int THRESHOLD = 20;\r\n\r\n    public CustomRecursiveTask(int[] arr) {\r\n        this.arr = arr;\r\n    }\r\n\r\n    @Override\r\n    protected Integer compute() {\r\n        if (arr.length > THRESHOLD) {\r\n            return ForkJoinTask.invokeAll(createSubtasks())\r\n              .stream()\r\n              .mapToInt(ForkJoinTask::join)\r\n              .sum();\r\n        } else {\r\n            return processing(arr);\r\n        }\r\n    }\r\n\r\n    private Collection<CustomRecursiveTask> createSubtasks() {\r\n        List<CustomRecursiveTask> dividedTasks = new ArrayList<>();\r\n        dividedTasks.add(new CustomRecursiveTask(\r\n          Arrays.copyOfRange(arr, 0, arr.length / 2)));\r\n        dividedTasks.add(new CustomRecursiveTask(\r\n          Arrays.copyOfRange(arr, arr.length / 2, arr.length)));\r\n        return dividedTasks;\r\n    }\r\n\r\n    private Integer processing(int[] arr) {\r\n        return Arrays.stream(arr)\r\n          .filter(a -> a > 10 && a < 27)\r\n          .map(a -> a * 10)\r\n          .sum();\r\n    }\r\n}\r\n```","```\r\nforkJoinPool.execute(customRecursiveTask);\r\nint result = customRecursiveTask.join();\r\n```","```\r\nint result = forkJoinPool.invoke(customRecursiveTask);\r\n```","```\r\ncustomRecursiveTaskFirst.fork();\r\nresult = customRecursiveTaskLast.join();\r\n```"]