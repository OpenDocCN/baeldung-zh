["```\r\npublic class MathUtils {\r\n\r\n    public static BigInteger factorial(int number) {\r\n        BigInteger f = new BigInteger(\"1\");\r\n        for (int i = 2; i <= number; i++) {\r\n            f = f.multiply(BigInteger.valueOf(i));\r\n        }\r\n        return f;\r\n    }\r\n} \r\n```","```\r\npublic class MessageService {\r\n\r\n    private final String message;\r\n\r\n    public MessageService(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    // standard getter\r\n\r\n}\r\n```","```\r\npublic class ThreadA extends Thread {\r\n\r\n    private final List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\r\n\r\n    @Override\r\n    public void run() {\r\n        numbers.forEach(System.out::println);\r\n    }\r\n}\r\n```","```\r\npublic class ThreadB extends Thread {\r\n\r\n    private final List<String> letters = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\r\n\r\n    @Override\r\n    public void run() {\r\n        letters.forEach(System.out::println);\r\n    }\r\n}\r\n```","```\r\npublic class StateHolder {\r\n\r\n    private final String state;\r\n\r\n    // standard constructors / getter\r\n}\r\n```","```\r\npublic class ThreadState {\r\n\r\n    public static final ThreadLocal<StateHolder> statePerThread = new ThreadLocal<StateHolder>() {\r\n\r\n        @Override\r\n        protected StateHolder initialValue() {\r\n            return new StateHolder(\"active\");  \r\n        }\r\n    };\r\n\r\n    public static StateHolder getState() {\r\n        return statePerThread.get();\r\n    }\r\n}\r\n```","```\r\nCollection<Integer> syncCollection = Collections.synchronizedCollection(new ArrayList<>());\r\nThread thread1 = new Thread(() -> syncCollection.addAll(Arrays.asList(1, 2, 3, 4, 5, 6)));\r\nThread thread2 = new Thread(() -> syncCollection.addAll(Arrays.asList(7, 8, 9, 10, 11, 12)));\r\nthread1.start();\r\nthread2.start(); \r\n```","```\r\nMap<String,String> concurrentMap = new ConcurrentHashMap<>();\r\nconcurrentMap.put(\"1\", \"one\");\r\nconcurrentMap.put(\"2\", \"two\");\r\nconcurrentMap.put(\"3\", \"three\"); \r\n```","```\r\npublic class Counter {\r\n\r\n    private int counter = 0;\r\n\r\n    public void incrementCounter() {\r\n        counter += 1;\r\n    }\r\n\r\n    public int getCounter() {\r\n        return counter;\r\n    }\r\n}\r\n```","```\r\npublic class AtomicCounter {\r\n\r\n    private final AtomicInteger counter = new AtomicInteger();\r\n\r\n    public void incrementCounter() {\r\n        counter.incrementAndGet();\r\n    }\r\n\r\n    public int getCounter() {\r\n        return counter.get();\r\n    }\r\n}\r\n```","```\r\npublic synchronized void incrementCounter() {\r\n    counter += 1;\r\n}\r\n```","```\r\npublic void incrementCounter() {\r\n    // additional unsynced operations\r\n    synchronized(this) {\r\n        counter += 1;Â \r\n    }\r\n}\r\n```","```\r\npublic class ObjectLockCounter {\r\n\r\n    private int counter = 0;\r\n    private final Object lock = new Object();\r\n\r\n    public void incrementCounter() {\r\n        synchronized(lock) {\r\n            counter += 1;\r\n        }\r\n    }\r\n\r\n    // standard getter\r\n}\r\n```","```\r\npublic class Class1 {\r\n    private static final String LOCK  = \"Lock\";\r\n\r\n    // uses the LOCK as the intrinsic lock\r\n}\r\n\r\npublic class Class2 {\r\n    private static final String LOCK  = \"Lock\";\r\n\r\n    // uses the LOCK as the intrinsic lock\r\n}\r\n```","```\r\npublic class Counter {\r\n\r\n    private volatile int counter;\r\n\r\n    // standard constructors / getter\r\n\r\n}\r\n```","```\r\npublic class User {\r\n\r\n    private String name;\r\n    private volatile int age;\r\n\r\n    // standard constructors / getters\r\n\r\n}\r\n```","```\r\npublic class ReentrantLockCounter {\r\n\r\n    private int counter;\r\n    private final ReentrantLock reLock = new ReentrantLock(true);\r\n\r\n    public void incrementCounter() {\r\n        reLock.lock();\r\n        try {\r\n            counter += 1;\r\n        } finally {\r\n            reLock.unlock();\r\n        }\r\n    }\r\n\r\n    // standard constructors / getter\r\n\r\n}\r\n```","```\r\npublic class ReentrantReadWriteLockCounter {\r\n\r\n    private int counter;\r\n    private final ReentrantReadWriteLock rwLock = new ReentrantReadWriteLock();\r\n    private final Lock readLock = rwLock.readLock();\r\n    private final Lock writeLock = rwLock.writeLock();\r\n\r\n    public void incrementCounter() {\r\n        writeLock.lock();\r\n        try {\r\n            counter += 1;\r\n        } finally {\r\n            writeLock.unlock();\r\n        }\r\n    }\r\n\r\n    public int getCounter() {\r\n        readLock.lock();\r\n        try {\r\n            return counter;\r\n        } finally {\r\n            readLock.unlock();\r\n        }\r\n    }\r\n\r\n   // standard constructors\r\n\r\n} \r\n```"]