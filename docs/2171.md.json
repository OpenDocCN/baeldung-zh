["```\r\nprivate double c = 1.0;\r\nprivate double alpha = 1;\r\nprivate double beta = 5;\r\nprivate double evaporation = 0.5;\r\nprivate double Q = 500;\r\nprivate double antFactor = 0.8;\r\nprivate double randomFactor = 0.01;\r\n```","```\r\npublic void visitCity(int currentIndex, int city) {\r\n    trail[currentIndex + 1] = city;\r\n    visited[city] = true;\r\n}\r\n\r\npublic boolean visited(int i) {\r\n    return visited[i];\r\n}\r\n\r\npublic double trailLength(double graph[][]) {\r\n    double length = graph[trail[trailSize - 1]][trail[0]];\r\n    for (int i = 0; i < trailSize - 1; i++) {\r\n        length += graph[trail[i]][trail[i + 1]];\r\n    }\r\n    return length;\r\n} \r\n```","```\r\ngraph = generateRandomMatrix(noOfCities);\r\nnumberOfCities = graph.length;\r\nnumberOfAnts = (int) (numberOfCities * antFactor);\r\n\r\ntrails = new double[numberOfCities][numberOfCities];\r\nprobabilities = new double[numberOfCities];\r\nants = new Ant[numberOfAnts];\r\nIntStream.range(0, numberOfAnts).forEach(i -> ants.add(new Ant(numberOfCities)));\r\n```","```\r\npublic void setupAnts() {\r\n    IntStream.range(0, numberOfAnts)\r\n      .forEach(i -> {\r\n          ants.forEach(ant -> {\r\n              ant.clear();\r\n              ant.visitCity(-1, random.nextInt(numberOfCities));\r\n          });\r\n      });\r\n    currentIndex = 0;\r\n}\r\n```","```\r\nIntStream.range(0, maxIterations).forEach(i -> {\r\n    moveAnts();\r\n    updateTrails();\r\n    updateBest();\r\n});\r\n```","```\r\npublic void moveAnts() {\r\n    IntStream.range(currentIndex, numberOfCities - 1).forEach(i -> {\r\n        ants.forEach(ant -> {\r\n            ant.visitCity(currentIndex, selectNextCity(ant));\r\n        });\r\n        currentIndex++;\r\n    });\r\n}\r\n```","```\r\nint t = random.nextInt(numberOfCities - currentIndex);\r\nif (random.nextDouble() < randomFactor) {\r\n    OptionalInt cityIndex = IntStream.range(0, numberOfCities)\r\n      .filter(i -> i == t && !ant.visited(i))\r\n      .findFirst();\r\n    if (cityIndex.isPresent()) {\r\n        return cityIndex.getAsInt();\r\n    }\r\n}\r\n```","```\r\npublic void calculateProbabilities(Ant ant) {\r\n    int i = ant.trail[currentIndex];\r\n    double pheromone = 0.0;\r\n    for (int l = 0; l < numberOfCities; l++) {\r\n        if (!ant.visited(l)){\r\n            pheromone\r\n              += Math.pow(trails[i][l], alpha) * Math.pow(1.0 / graph[i][l], beta);\r\n        }\r\n    }\r\n    for (int j = 0; j < numberOfCities; j++) {\r\n        if (ant.visited(j)) {\r\n            probabilities[j] = 0.0;\r\n        } else {\r\n            double numerator\r\n              = Math.pow(trails[i][j], alpha) * Math.pow(1.0 / graph[i][j], beta);\r\n            probabilities[j] = numerator / pheromone;\r\n        }\r\n    }\r\n} \r\n```","```\r\ndouble r = random.nextDouble();\r\ndouble total = 0;\r\nfor (int i = 0; i < numberOfCities; i++) {\r\n    total += probabilities[i];\r\n    if (total >= r) {\r\n        return i;\r\n    }\r\n}\r\n```","```\r\npublic void updateTrails() {\r\n    for (int i = 0; i < numberOfCities; i++) {\r\n        for (int j = 0; j < numberOfCities; j++) {\r\n            trails[i][j] *= evaporation;\r\n        }\r\n    }\r\n    for (Ant a : ants) {\r\n        double contribution = Q / a.trailLength(graph);\r\n        for (int i = 0; i < numberOfCities - 1; i++) {\r\n            trails[a.trail[i]][a.trail[i + 1]] += contribution;\r\n        }\r\n        trails[a.trail[numberOfCities - 1]][a.trail[0]] += contribution;\r\n    }\r\n}\r\n```","```\r\nprivate void updateBest() {\r\n    if (bestTourOrder == null) {\r\n        bestTourOrder = ants[0].trail;\r\n        bestTourLength = ants[0].trailLength(graph);\r\n    }\r\n    for (Ant a : ants) {\r\n        if (a.trailLength(graph) < bestTourLength) {\r\n            bestTourLength = a.trailLength(graph);\r\n            bestTourOrder = a.trail.clone();\r\n        }\r\n    }\r\n}\r\n```"]