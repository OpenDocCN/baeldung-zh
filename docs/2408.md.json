["```\r\n<welcome-file-list>\r\n    <welcome-file>index.html</welcome-file>\r\n    <welcome-file>index.htm</welcome-file>\r\n    <welcome-file>index.jsp</welcome-file>\r\n</welcome-file-list>\r\n<servlet>\r\n    <servlet-name>Example</servlet-name>\r\n    <servlet-class>com.baeldung.Example</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>Example</servlet-name>\r\n    <url-pattern>/Example</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n@WebServlet(\r\n  name = \"AnnotationExample\",\r\n  description = \"Example Servlet Using Annotations\",\r\n  urlPatterns = {\"/AnnotationExample\"}\r\n)\r\npublic class Example extends HttpServlet {\t\r\n\r\n    @Override\r\n    protected void doGet(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response) throws ServletException, IOException {\r\n\r\n        response.setContentType(\"text/html\");\r\n        PrintWriter out = response.getWriter();\r\n        out.println(\"<p>Hello World!</p>\");\r\n    }\r\n}\r\n```","```\r\npublic class WebAppInitializer implements WebApplicationInitializer {\r\n\r\n    public void onStartup(ServletContext container) throws ServletException {\r\n        AnnotationConfigWebApplicationContext ctx\r\n          = new AnnotationConfigWebApplicationContext();\r\n        ctx.register(WebMvcConfigure.class);\r\n        ctx.setServletContext(container);\r\n\r\n        ServletRegistration.Dynamic servlet = container.addServlet(\r\n          \"dispatcherExample\", new DispatcherServlet(ctx));\r\n        servlet.setLoadOnStartup(1);\r\n        servlet.addMapping(\"/\");\r\n     }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebMvcConfigure implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public ViewResolver getViewResolver() {\r\n        InternalResourceViewResolver resolver\r\n          = new InternalResourceViewResolver();\r\n        resolver.setPrefix(\"/WEB-INF/\");\r\n        resolver.setSuffix(\".jsp\");\r\n        return resolver;\r\n    }\r\n\r\n    @Override\r\n    public void configureDefaultServletHandling(\r\n      DefaultServletHandlerConfigurer configurer) {\r\n        configurer.enable();\r\n    }\r\n\r\n    @Override\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler(\"/resources/**\")\r\n          .addResourceLocations(\"/resources/\").setCachePeriod(3600)\r\n          .resourceChain(true).addResolver(new PathResourceResolver());\r\n    }\r\n}\r\n```","```\r\n<servlet>\r\n    <servlet-name>dispatcher</servlet-name>\r\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\r\n    <init-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>/WEB-INF/spring/dispatcher.xml</param-value>\r\n    </init-param>\r\n    <load-on-startup>1</load-on-startup>\r\n</servlet>\r\n\r\n<servlet-mapping>\r\n    <servlet-name>dispatcher</servlet-name>\r\n    <url-pattern>/</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n<beans ...>\r\n\r\n    <context:component-scan base-package=\"com.baeldung\"/>\r\n\r\n    <bean \r\n      class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <property name=\"prefix\" value=\"/WEB-INF/jsp/\"/>\r\n        <property name=\"suffix\" value=\".jsp\"/>\r\n    </bean>\r\n</beans>\r\n```","```\r\npublic void onStartup(ServletContext container) throws ServletException {\r\n   XmlWebApplicationContext xctx = new XmlWebApplicationContext();\r\n   xctx.setConfigLocation('classpath:/context.xml');\r\n   xctx.setServletContext(container);\r\n\r\n   ServletRegistration.Dynamic servlet = container.addServlet(\r\n     \"dispatcher\", new DispatcherServlet(ctx));\r\n   servlet.setLoadOnStartup(1);\r\n   servlet.addMapping(\"/\");\r\n}\r\n```","```\r\n<beans ...>\r\n\r\n    <context:component-scan base-package=\"com.baeldung\"/>\r\n    <bean class=\"com.baeldung.configuration.WebAppInitializer\"/>\r\n</beans>\r\n```","```\r\n@Bean\r\npublic ServletRegistrationBean exampleServletBean() {\r\n    ServletRegistrationBean bean = new ServletRegistrationBean(\r\n      new CustomServlet(), \"/exampleServlet/*\");\r\n    bean.setLoadOnStartup(1);\r\n    return bean;\r\n}\r\n```","```\r\npublic class CustomServlet extends HttpServlet{\r\n    ...\r\n}\r\n```","```\r\nservlet.name=dispatcherExample\r\nservlet.mapping=/dispatcherExampleURL\r\n```","```\r\nSystem.setProperty(\"custom.config.location\", \"classpath:custom.properties\");\r\n```","```\r\nSystem.getProperty(\"custom.config.location\");\r\n```","```\r\nservlet.name=dispatcherExample\r\nservlet.mapping=/dispatcherExampleURL\r\n```","```\r\npublic Properties getProperties(String file) throws IOException {\r\n  Properties prop = new Properties();\r\n  InputStream input = null;\r\n  input = getClass().getResourceAsStream(file);\r\n  prop.load(input);\r\n  if (input != null) {\r\n      input.close();\r\n  }\r\n  return prop;\r\n}\r\n```","```\r\nprivate static final PropertyLoader pl = new PropertyLoader(); \r\nprivate static final Properties springProps\r\n  = pl.getProperties(\"custom_spring.properties\"); \r\n\r\npublic static final String SERVLET_NAME\r\n  = springProps.getProperty(\"servlet.name\"); \r\npublic static final String SERVLET_MAPPING\r\n  = springProps.getProperty(\"servlet.mapping\");\r\n```","```\r\nServletRegistration.Dynamic servlet = container.addServlet(\r\n  SERVLET_NAME, new DispatcherServlet(ctx));\r\nservlet.setLoadOnStartup(1);\r\nservlet.addMapping(SERVLET_MAPPING);\r\n```","```\r\n@Configuration \r\n@PropertySource(\"classpath:/com/yourapp/custom.properties\") \r\npublic class ExampleCustomConfig { \r\n    @Autowired \r\n    ConfigurableEnvironment env; \r\n\r\n    public String getProperty(String key) { \r\n        return env.getProperty(key); \r\n    } \r\n}\r\n```","```\r\nConfigurableEnvironment env = new StandardEnvironment(); \r\nMutablePropertySources props = env.getPropertySources(); \r\nMap map = new HashMap(); map.put(\"key\", \"value\"); \r\nprops.addFirst(new MapPropertySource(\"Map\", map));\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n     <artifactId>tomcat-embed-core</artifactId>\r\n     <version>8.5.11</version>\r\n</dependency>\r\n```","```\r\n<build>\r\n    <finalName>embeddedTomcatExample</finalName>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.codehaus.mojo</groupId>\r\n            <artifactId>appassembler-maven-plugin</artifactId>\r\n            <version>2.0.0</version>\r\n            <configuration>\r\n                <assembleDirectory>target</assembleDirectory>\r\n                <programs>\r\n                    <program>\r\n                        <mainClass>launch.Main</mainClass>\r\n                        <name>webapp</name>\r\n                    </program>\r\n            </programs>\r\n            </configuration>\r\n            <executions>\r\n                <execution>\r\n                    <phase>package</phase>\r\n                    <goals>\r\n                        <goal>assemble</goal>\r\n                    </goals>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-tomcat</artifactId>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\nserver.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet \r\nserver.jsp-servlet.registered=true\r\nserver.port=8080\r\nserver.servlet-path=/\r\n```","```\r\nYamlPropertySourceLoader sourceLoader = new YamlPropertySourceLoader();\r\nPropertySource<?> yamlProps = sourceLoader.load(\"yamlProps\", resource, null);\r\n```","```\r\n@Bean\r\npublic ConfigurableServletWebServerFactory servletContainer() {\r\n    TomcatServletWebServerFactory tomcatContainerFactory\r\n      = new TomcatServletWebServerFactory();\r\n    return tomcatContainerFactory;\r\n}\r\n```","```\r\ntomcatContainerFactory.setPort(9000);\r\ntomcatContainerFactory.setContextPath(\"/springboottomcatexample\");\r\n```","```\r\nTomcat tomcat = new Tomcat();\r\ntomcat.setPort(port);\r\ntomcat.setContextPath(\"/springboottomcatexample\");\r\ntomcat.start();\r\n```"]