["```\r\n<dependency>\r\n    <groupId>com.github.javafaker</groupId>\r\n    <artifactId>javafaker</artifactId>\r\n    <version>0.15</version>\r\n</dependency>\r\n```","```\r\ncompile group: 'com.github.javafaker', name: 'javafaker', version: '0.15'\r\n```","```\r\n@Test\r\npublic void whenBothifyCalled_checkPatternMatches() throws Exception {\r\n\r\n    FakeValuesService fakeValuesService = new FakeValuesService(\r\n      new Locale(\"en-GB\"), new RandomService());\r\n\r\n    String email = fakeValuesService.bothify(\"????##@gmail.com\");\r\n    Matcher emailMatcher = Pattern.compile(\"\\\\w{4}\\\\d{2}@gmail.com\").matcher(email);\r\n\r\n    assertTrue(emailMatcher.find());\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidService_whenRegexifyCalled_checkPattern() throws Exception {\r\n\r\n    FakeValuesService fakeValuesService = new FakeValuesService(\r\n      new Locale(\"en-GB\"), new RandomService());\r\n\r\n    String alphaNumericString = fakeValuesService.regexify(\"[a-z1-9]{10}\");\r\n    Matcher alphaNumericMatcher = Pattern.compile(\"[a-z1-9]{10}\").matcher(alphaNumericString);\r\n\r\n    assertTrue(alphaNumericMatcher.find());\r\n}\r\n```","```\r\nFaker faker = new Faker();\r\n\r\nString streetName = faker.address().streetName();\r\nString number = faker.address().buildingNumber();\r\nString city = faker.address().city();\r\nString country = faker.address().country();\r\n\r\nSystem.out.println(String.format(\"%s\\n%s\\n%s\\n%s\",\r\n  number,\r\n  streetName,\r\n  city,\r\n  country));\r\n```","```\r\n3188\r\nDayna Mountains\r\nNew Granvilleborough\r\nTonga\r\n```","```\r\n@Test\r\npublic void givenJavaFakersWithDifferentLocals_thenHeckZipCodesMatchRegex() {\r\n\r\n    Faker ukFaker = new Faker(new Locale(\"en-GB\"));\r\n    Faker usFaker = new Faker(new Locale(\"en-US\"));\r\n\r\n    System.out.println(String.format(\"American zipcode: %s\", usFaker.address().zipCode()));\r\n    System.out.println(String.format(\"British postcode: %s\", ukFaker.address().zipCode()));\r\n\r\n    Pattern ukPattern = Pattern.compile(\r\n      \"([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|\"\r\n      + \"(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([A-Za-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y]\" \r\n      + \"[0-9]?[A-Za-z]))))\\\\s?[0-9][A-Za-z]{2})\");\r\n    Matcher ukMatcher = ukPattern.matcher(ukFaker.address().zipCode());\r\n\r\n    assertTrue(ukMatcher.find());\r\n\r\n    Matcher usMatcher = Pattern.compile(\"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\")\r\n      .matcher(usFaker.address().zipCode());\r\n\r\n    assertTrue(usMatcher.find());\r\n}\r\n```","```\r\n@Test(expected = LocaleDoesNotExistException.class)\r\npublic void givenWrongLocale_whenFakerInitialised_testExceptionThrown() {\r\n    Faker wrongLocaleFaker = new Faker(new Locale(\"en-seaWorld\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJavaFakersWithSameSeed_whenNameCalled_CheckSameName() {\r\n\r\n    Faker faker1 = new Faker(new Random(24));\r\n    Faker faker2 = new Faker(new Random(24));\r\n\r\n    assertEquals(faker1.name().firstName(), faker2.name().firstName());\r\n} \r\n```"]