["```\r\npublic class MyList extends AbstractList {\r\n    final public int finalMethod() {\r\n        return 0;\r\n    }\r\n}\r\n```","```\r\npublic final class FinalList extends MyList {\r\n\r\n    @Override\r\n    public int size() {\r\n        return 1;\r\n    }\r\n} \r\n```","```\r\nmock-maker-inline \r\n```","```\r\n@Test\r\npublic void whenMockFinalMethodMockWorks() {\r\n\r\n    MyList myList = new MyList();\r\n\r\n    MyList mock = mock(MyList.class);\r\n    when(mock.finalMethod()).thenReturn(1);\r\n\r\n    assertThat(mock.finalMethod()).isNotEqualTo(myList.finalMethod());\r\n} \r\n```","```\r\n@Test\r\npublic void whenMockFinalClassMockWorks() {\r\n\r\n    FinalList finalList = new FinalList();\r\n\r\n    FinalList mock = mock(FinalList.class);\r\n    when(mock.size()).thenReturn(2);\r\n\r\n    assertThat(mock.size()).isNotEqualTo(finalList.size());\r\n} \r\n```"]