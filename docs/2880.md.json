["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-api</artifactId>\r\n    <version>5.8.1</version>\r\n</dependency>\r\n```","```\r\ntestCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.8.1'\r\ntestCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.1'\r\n```","```\r\npublic class UserIdGeneratorImpl implements UserIdGenerator {\r\n    private boolean isFeatureEnabled;\r\n\r\n    public UserIdGeneratorImpl(boolean isFeatureEnabled) {\r\n        this.isFeatureEnabled = isFeatureEnabled;\r\n    }\r\n\r\n    public String generate(String firstName, String lastName) {\r\n        String initialAndLastName = firstName.substring(0, 1).concat(lastName);\r\n        return isFeatureEnabled ? \"bael\".concat(initialAndLastName) : initialAndLastName;\r\n    }\r\n}\r\n```","```\r\nGiven feature switch is disabled When firstName = \"John\" and lastName = \"Smith\" Then \"JSmith\" is returned\r\nGiven feature switch is enabled When firstName = \"John\" and lastName = \"Smith\" Then \"baelJSmith\" is returned\r\n```","```\r\npublic class UserIdGeneratorImplUnitTest {\r\n    @TestTemplate\r\n    @ExtendWith(UserIdGeneratorTestInvocationContextProvider.class)\r\n    public void whenUserIdRequested_thenUserIdIsReturnedInCorrectFormat(UserIdGeneratorTestCase testCase) {\r\n        UserIdGenerator userIdGenerator = new UserIdGeneratorImpl(testCase.isFeatureEnabled());\r\n\r\n        String actualUserId = userIdGenerator.generate(testCase.getFirstName(), testCase.getLastName());\r\n\r\n        assertThat(actualUserId).isEqualTo(testCase.getExpectedUserId());\r\n    }\r\n}\r\n```","```\r\npublic class UserIdGeneratorTestCase {\r\n    private boolean isFeatureEnabled;\r\n    private String firstName;\r\n    private String lastName;\r\n    private String expectedUserId;\r\n\r\n    // Standard setters and getters\r\n}\r\n```","```\r\npublic class UserIdGeneratorTestInvocationContextProvider implements TestTemplateInvocationContextProvider {\r\n    //...\r\n}\r\n```","```\r\n@Override\r\npublic boolean supportsTestTemplate(ExtensionContext extensionContext) {\r\n    return true;\r\n}\r\n```","```\r\n@Override\r\npublic Stream<TestTemplateInvocationContext> provideTestTemplateInvocationContexts(\r\n  ExtensionContext extensionContext) {\r\n    boolean featureDisabled = false;\r\n    boolean featureEnabled = true;\r\n\r\n    return Stream.of(\r\n      featureDisabledContext(\r\n        new UserIdGeneratorTestCase(\r\n          \"Given feature switch disabled When user name is John Smith Then generated userid is JSmith\",\r\n          featureDisabled,\r\n          \"John\",\r\n          \"Smith\",\r\n          \"JSmith\")),\r\n      featureEnabledContext(\r\n        new UserIdGeneratorTestCase(\r\n          \"Given feature switch enabled When user name is John Smith Then generated userid is baelJSmith\",\r\n          featureEnabled,\r\n          \"John\",\r\n          \"Smith\",\r\n          \"baelJSmith\"))\r\n    );\r\n}\r\n```","```\r\nprivate TestTemplateInvocationContext featureDisabledContext(\r\n  UserIdGeneratorTestCase userIdGeneratorTestCase) {\r\n    return new TestTemplateInvocationContext() {\r\n        @Override\r\n        public String getDisplayName(int invocationIndex) {\r\n            return userIdGeneratorTestCase.getDisplayName();\r\n        }\r\n\r\n        @Override\r\n        public List<Extension> getAdditionalExtensions() {\r\n            return asList(\r\n              new GenericTypedParameterResolver(userIdGeneratorTestCase), \r\n              new BeforeTestExecutionCallback() {\r\n                  @Override\r\n                  public void beforeTestExecution(ExtensionContext extensionContext) {\r\n                      System.out.println(\"BeforeTestExecutionCallback:Disabled context\");\r\n                  }\r\n              }, \r\n              new AfterTestExecutionCallback() {\r\n                  @Override\r\n                  public void afterTestExecution(ExtensionContext extensionContext) {\r\n                      System.out.println(\"AfterTestExecutionCallback:Disabled context\");\r\n                  }\r\n              }\r\n            );\r\n        }\r\n    };\r\n}\r\n```","```\r\nprivate TestTemplateInvocationContext featureEnabledContext(\r\n  UserIdGeneratorTestCase userIdGeneratorTestCase) {\r\n    return new TestTemplateInvocationContext() {\r\n        @Override\r\n        public String getDisplayName(int invocationIndex) {\r\n            return userIdGeneratorTestCase.getDisplayName();\r\n        }\r\n\r\n        @Override\r\n        public List<Extension> getAdditionalExtensions() {\r\n            return asList(\r\n              new GenericTypedParameterResolver(userIdGeneratorTestCase), \r\n              new DisabledOnQAEnvironmentExtension(), \r\n              new BeforeEachCallback() {\r\n                  @Override\r\n                  public void beforeEach(ExtensionContext extensionContext) {\r\n                      System.out.println(\"BeforeEachCallback:Enabled context\");\r\n                  }\r\n              }, \r\n              new AfterEachCallback() {\r\n                  @Override\r\n                  public void afterEach(ExtensionContext extensionContext) {\r\n                      System.out.println(\"AfterEachCallback:Enabled context\");\r\n                  }\r\n              }\r\n            );\r\n        }\r\n    };\r\n}\r\n```"]