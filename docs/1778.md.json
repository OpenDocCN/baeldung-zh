["```\r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session-data-mongodb</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\nspring.session.store-type=mongodb\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session-data-mongodb</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-mongodb</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@EnableMongoHttpSession\r\npublic class HttpSessionConfig {\r\n\r\n    @Bean\r\n    public JdkMongoSessionConverter jdkMongoSessionConverter() {\r\n        return new JdkMongoSessionConverter(Duration.ofMinutes(30));\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class SpringSessionMongoDBController {\r\n\r\n    @GetMapping(\"/\")\r\n    public ResponseEntity<Integer> count(HttpSession session) {\r\n\r\n        Integer counter = (Integer) session.getAttribute(\"count\");\r\n\r\n        if (counter == null) {\r\n            counter = 1;\r\n        } else {\r\n            counter++;\r\n        }\r\n\r\n        session.setAttribute(\"count\", counter);\r\n\r\n        return ResponseEntity.ok(counter);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenEndpointIsCalledTwiceAndResponseIsReturned_whenMongoDBIsQueriedForCount_thenCountMustBeSame() {\r\n\r\n    HttpEntity<String> response = restTemplate\r\n      .exchange(\"http://localhost:\" + 8080, HttpMethod.GET, null, String.class);\r\n    HttpHeaders headers = response.getHeaders();\r\n    String set_cookie = headers.getFirst(HttpHeaders.SET_COOKIE);\r\n\r\n    Assert.assertEquals(response.getBody(),\r\n      repository.findById(getSessionId(set_cookie)).getAttribute(\"count\").toString());\r\n}\r\n\r\nprivate String getSessionId(String cookie) {\r\n    return new String(Base64.getDecoder().decode(cookie.split(\";\")[0].split(\"=\")[1]));\r\n}\r\n```","```\r\n@Bean\r\npublic DefaultCookieSerializer customCookieSerializer(){\r\n    DefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer();\r\n\r\n    cookieSerializer.setUseHttpOnlyCookie(false);\r\n\r\n    return cookieSerializer;\r\n}\r\n```","```\r\ndb.sessions.findOne()\r\n```","```\r\n{\r\n    \"_id\" : \"5d985be4-217c-472c-ae02-d6fca454662b\",\r\n    \"created\" : ISODate(\"2019-05-14T16:45:41.021Z\"),\r\n    \"accessed\" : ISODate(\"2019-05-14T17:18:59.118Z\"),\r\n    \"interval\" : \"PT30M\",\r\n    \"principal\" : null,\r\n    \"expireAt\" : ISODate(\"2019-05-14T17:48:59.118Z\"),\r\n    \"attr\" : BinData(0,\"rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAx3CAAAABAAAAABdAAFY291bnRzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAC3g=\")\r\n}\r\n```"]