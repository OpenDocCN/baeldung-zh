["```\r\nIterator<Integer> iterator = Arrays.asList(1, 2, 3).iterator(); \r\n```","```\r\nList<Integer> actualList = new ArrayList<Integer>();\r\nwhile (iterator.hasNext()) {\r\n    actualList.add(iterator.next());\r\n}\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3)); \r\n```","```\r\nList<Integer> actualList = new ArrayList<Integer>();\r\niterator.forEachRemaining(actualList::add);\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3)); \r\n```","```\r\nIterable<Integer> iterable = () -> iterator; \r\n```","```\r\nList<Integer> actualList = StreamSupport\r\n  .stream(iterable.spliterator(), false)\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3));\r\n```","```\r\nList<Integer> actualList = ImmutableList.copyOf(iterator);\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3));\r\n```","```\r\nList<Integer> actualList = Lists.newArrayList(iterator);\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3));\r\n```","```\r\nList<Integer> actualList = IteratorUtils.toList(iterator);\r\n\r\nassertThat(actualList, containsInAnyOrder(1, 2, 3));\r\n```"]