["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenRequestingChunks10_thenMessagesAreReceived() {\r\n    Flux request = Flux.range(1, 50);\r\n\r\n    request.subscribe(\r\n      System.out::println,\r\n      err -> err.printStackTrace(),\r\n      () -> System.out.println(\"All 50 items have been successfully processed!!!\"),\r\n      subscription -> {\r\n          for (int i = 0; i < 5; i++) {\r\n              System.out.println(\"Requesting the next 10 elements!!!\");\r\n              subscription.request(10);\r\n          }\r\n      }\r\n    );\r\n\r\n    StepVerifier.create(request)\r\n      .expectSubscription()\r\n      .thenRequest(10)\r\n      .expectNext(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n      .thenRequest(10)\r\n      .expectNext(11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\r\n      .thenRequest(10)\r\n      .expectNext(21, 22, 23, 24, 25, 26, 27 , 28, 29 ,30)\r\n      .thenRequest(10)\r\n      .expectNext(31, 32, 33, 34, 35, 36, 37 , 38, 39 ,40)\r\n      .thenRequest(10)\r\n      .expectNext(41, 42, 43, 44, 45, 46, 47 , 48, 49 ,50)\r\n      .verifyComplete();\r\n```","```\r\n@Test\r\npublic void whenLimitRateSet_thenSplitIntoChunks() throws InterruptedException {\r\n    Flux<Integer> limit = Flux.range(1, 25);\r\n\r\n    limit.limitRate(10);\r\n    limit.subscribe(\r\n      value -> System.out.println(value),\r\n      err -> err.printStackTrace(),\r\n      () -> System.out.println(\"Finished!!\"),\r\n      subscription -> subscription.request(15)\r\n    );\r\n\r\n    StepVerifier.create(limit)\r\n      .expectSubscription()\r\n      .thenRequest(15)\r\n      .expectNext(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\r\n      .expectNext(11, 12, 13, 14, 15)\r\n      .thenRequest(10)\r\n      .expectNext(16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCancel_thenSubscriptionFinished() {\r\n    Flux<Integer> cancel = Flux.range(1, 10).log();\r\n\r\n    cancel.subscribe(new BaseSubscriber<Integer>() {\r\n        @Override\r\n        protected void hookOnNext(Integer value) {\r\n            request(3);\r\n            System.out.println(value);\r\n            cancel();\r\n        }\r\n    });\r\n\r\n    StepVerifier.create(cancel)\r\n      .expectNext(1, 2, 3)\r\n      .thenCancel()\r\n      .verify();\r\n}\r\n```"]