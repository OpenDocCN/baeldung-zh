["```\r\n<groupId>com.baeldung.instrumentation</groupId>\r\n<artifactId>base</artifactId>\r\n<version>1.0.0</version>\r\n<packaging>pom</packaging>\r\n<modules>\r\n    <module>agent</module>\r\n    <module>application</module>\r\n</modules>\r\n```","```\r\njava -javaagent:agent.jar -jar application.jar\r\n```","```\r\n22:24:39.296 [main] INFO - [Agent] In premain method\r\n22:24:39.300 [main] INFO - [Agent] Transforming class MyAtm\r\n22:24:39.407 [main] INFO - [Application] Starting ATM application\r\n22:24:41.409 [main] INFO - [Application] Successful Withdrawal of [7] units!\r\n22:24:41.410 [main] INFO - [Application] Withdrawal operation completed in:2 seconds!\r\n22:24:53.411 [main] INFO - [Application] Successful Withdrawal of [8] units!\r\n22:24:53.411 [main] INFO - [Application] Withdrawal operation completed in:2 seconds!\r\n```","```\r\nVirtualMachine jvm = VirtualMachine.attach(jvmPid);\r\njvm.loadAgent(agentFile.getAbsolutePath());\r\njvm.detach();\r\n```","```\r\npublic class Launcher {\r\n    public static void main(String[] args) throws Exception {\r\n        if(args[0].equals(\"StartMyAtmApplication\")) {\r\n            new MyAtmApplication().run(args);\r\n        } else if(args[0].equals(\"LoadAgent\")) {\r\n            new AgentLoader().run(args);\r\n        }\r\n    }\r\n}\r\n```","```\r\njava -jar application.jar StartMyAtmApplication\r\n22:44:21.154 [main] INFO - [Application] Starting ATM application\r\n22:44:23.157 [main] INFO - [Application] Successful Withdrawal of [7] units!\r\n```","```\r\njava -jar application.jar LoadAgent\r\n22:44:27.022 [main] INFO - Attaching to target JVM with PID: 6575\r\n22:44:27.306 [main] INFO - Attached to target JVM and loaded Java agent successfully \r\n```","```\r\n22:44:27.229 [Attach Listener] INFO - [Agent] In agentmain method\r\n22:44:27.230 [Attach Listener] INFO - [Agent] Transforming class MyAtm\r\n22:44:33.157 [main] INFO - [Application] Successful Withdrawal of [8] units!\r\n22:44:33.157 [main] INFO - [Application] Withdrawal operation completed in:2 seconds!\r\n```","```\r\npublic static void premain(\r\n  String agentArgs, Instrumentation inst) {\r\n\r\n    LOGGER.info(\"[Agent] In premain method\");\r\n    String className = \"com.baeldung.instrumentation.application.MyAtm\";\r\n    transformClass(className,inst);\r\n}\r\npublic static void agentmain(\r\n  String agentArgs, Instrumentation inst) {\r\n\r\n    LOGGER.info(\"[Agent] In agentmain method\");\r\n    String className = \"com.baeldung.instrumentation.application.MyAtm\";\r\n    transformClass(className,inst);\r\n}\r\n```","```\r\nprivate static void transformClass(\r\n  String className, Instrumentation instrumentation) {\r\n    Class<?> targetCls = null;\r\n    ClassLoader targetClassLoader = null;\r\n    // see if we can get the class using forName\r\n    try {\r\n        targetCls = Class.forName(className);\r\n        targetClassLoader = targetCls.getClassLoader();\r\n        transform(targetCls, targetClassLoader, instrumentation);\r\n        return;\r\n    } catch (Exception ex) {\r\n        LOGGER.error(\"Class [{}] not found with Class.forName\");\r\n    }\r\n    // otherwise iterate all loaded classes and find what we want\r\n    for(Class<?> clazz: instrumentation.getAllLoadedClasses()) {\r\n        if(clazz.getName().equals(className)) {\r\n            targetCls = clazz;\r\n            targetClassLoader = targetCls.getClassLoader();\r\n            transform(targetCls, targetClassLoader, instrumentation);\r\n            return;\r\n        }\r\n    }\r\n    throw new RuntimeException(\r\n      \"Failed to find class [\" + className + \"]\");\r\n}\r\n\r\nprivate static void transform(\r\n  Class<?> clazz, \r\n  ClassLoader classLoader,\r\n  Instrumentation instrumentation) {\r\n    AtmTransformer dt = new AtmTransformer(\r\n      clazz.getName(), classLoader);\r\n    instrumentation.addTransformer(dt, true);\r\n    try {\r\n        instrumentation.retransformClasses(clazz);\r\n    } catch (Exception ex) {\r\n        throw new RuntimeException(\r\n          \"Transform failed for: [\" + clazz.getName() + \"]\", ex);\r\n    }\r\n}\r\n```","```\r\npublic class AtmTransformer implements ClassFileTransformer {\r\n    @Override\r\n    public byte[] transform(\r\n      ClassLoader loader, \r\n      String className, \r\n      Class<?> classBeingRedefined, \r\n      ProtectionDomain protectionDomain, \r\n      byte[] classfileBuffer) {\r\n        byte[] byteCode = classfileBuffer;\r\n        String finalTargetClassName = this.targetClassName\r\n          .replaceAll(\"\\\\.\", \"/\"); \r\n        if (!className.equals(finalTargetClassName)) {\r\n            return byteCode;\r\n        }\r\n\r\n        if (className.equals(finalTargetClassName) \r\n              && loader.equals(targetClassLoader)) {\r\n\r\n            LOGGER.info(\"[Agent] Transforming class MyAtm\");\r\n            try {\r\n                ClassPool cp = ClassPool.getDefault();\r\n                CtClass cc = cp.get(targetClassName);\r\n                CtMethod m = cc.getDeclaredMethod(\r\n                  WITHDRAW_MONEY_METHOD);\r\n                m.addLocalVariable(\r\n                  \"startTime\", CtClass.longType);\r\n                m.insertBefore(\r\n                  \"startTime = System.currentTimeMillis();\");\r\n\r\n                StringBuilder endBlock = new StringBuilder();\r\n\r\n                m.addLocalVariable(\"endTime\", CtClass.longType);\r\n                m.addLocalVariable(\"opTime\", CtClass.longType);\r\n                endBlock.append(\r\n                  \"endTime = System.currentTimeMillis();\");\r\n                endBlock.append(\r\n                  \"opTime = (endTime-startTime)/1000;\");\r\n\r\n                endBlock.append(\r\n                  \"LOGGER.info(\\\"[Application] Withdrawal operation completed in:\" +\r\n                                \"\\\" + opTime + \\\" seconds!\\\");\");\r\n\r\n                m.insertAfter(endBlock.toString());\r\n\r\n                byteCode = cc.toBytecode();\r\n                cc.detach();\r\n            } catch (NotFoundException | CannotCompileException | IOException e) {\r\n                LOGGER.error(\"Exception\", e);\r\n            }\r\n        }\r\n        return byteCode;\r\n    }\r\n}\r\n```","```\r\nAgent-Class: com.baeldung.instrumentation.agent.MyInstrumentationAgent\r\nCan-Redefine-Classes: true\r\nCan-Retransform-Classes: true\r\nPremain-Class: com.baeldung.instrumentation.agent.MyInstrumentationAgent\r\n```"]