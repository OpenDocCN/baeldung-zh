["```\r\nspring.data.mongodb.auto-index-creation=true\r\n```","```\r\n@Document\r\npublic class Company {\r\n    @Id\r\n    private String id;\r\n\r\n    private String name;\r\n\r\n    @Indexed(unique = true)\r\n    private String email;\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\n@Test\r\npublic void givenUniqueIndex_whenInsertingDupe_thenExceptionIsThrown() {\r\n    Company a = new Company();\r\n    a.setName(\"Name\");\r\n    a.setEmail(\"[[email protected]](/web/20220813065802/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n\r\n    companyRepo.insert(a);\r\n\r\n    Company b = new Company();\r\n    b.setName(\"Other\");\r\n    b.setEmail(\"[[email protected]](/web/20220813065802/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    assertThrows(DuplicateKeyException.class, () -> {\r\n        companyRepo.insert(b);\r\n    });\r\n}\r\n```","```\r\n@Document\r\npublic class Asset {\r\n    @Indexed(unique = true)\r\n    private String name;\r\n\r\n    @Indexed(unique = true)\r\n    private Integer number;\r\n}\r\n```","```\r\n@Test\r\npublic void givenMultipleIndexes_whenAnyFieldDupe_thenExceptionIsThrown() {\r\n    Asset a = new Asset();\r\n    a.setName(\"Name\");\r\n    a.setNumber(1);\r\n\r\n    assetRepo.insert(a);\r\n\r\n    assertThrows(DuplicateKeyException.class, () -> {\r\n        Asset b = new Asset();\r\n        b.setName(\"Name\");\r\n        b.setNumber(2);\r\n\r\n        assetRepo.insert(b);\r\n    });\r\n\r\n    assertThrows(DuplicateKeyException.class, () -> {\r\n        Asset b = new Asset();\r\n        b.setName(\"Other\");\r\n        b.setNumber(1);\r\n\r\n        assetRepo.insert(b);\r\n    });\r\n}\r\n```","```\r\npublic class SaleId {\r\n    private Long item;\r\n    private String date;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Document\r\npublic class Sale {\r\n    @Indexed(unique = true)\r\n    private SaleId saleId;\r\n\r\n    private Double value;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenCustomTypeIndex_whenInsertingDupe_thenExceptionIsThrown() {\r\n    SaleId id = new SaleId();\r\n    id.setDate(\"2022-06-15\");\r\n    id.setItem(1L);\r\n\r\n    Sale a = new Sale(id);\r\n    a.setValue(53.94);\r\n\r\n    saleRepo.insert(a);\r\n\r\n    assertThrows(DuplicateKeyException.class, () -> {\r\n        Sale b = new Sale(id);\r\n        b.setValue(100.00);\r\n\r\n        saleRepo.insert(b);\r\n    });\r\n}\r\n```","```\r\n@Document\r\n@CompoundIndex(def = \"{'storeId': 1, 'number': 1}\", unique = true)\r\npublic class Customer {\r\n    @Id\r\n    private String id;\r\n\r\n    private Long storeId;\r\n    private Long number;\r\n    private String name;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenCompoundIndex_whenDupeInsert_thenExceptionIsThrown() {\r\n    Customer customerA = new Customer(\"Name A\");\r\n    customerA.setNumber(1l);\r\n    customerA.setStoreId(2l);\r\n\r\n    Customer customerB = new Customer(\"Name B\");\r\n    customerB.setNumber(1l);\r\n    customerB.setStoreId(2l);\r\n\r\n    customerRepo.insert(customerA);\r\n\r\n    assertThrows(DuplicateKeyException.class, () -> {\r\n        customerRepo.insert(customerB);\r\n    });\r\n}\r\n```"]