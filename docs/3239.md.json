["```\r\nSet<String> set = new HashSet<>();\r\nset.add(\"foo\");\r\nset.add(\"bar\");\r\nset.add(\"baz\");\r\nset = Collections.unmodifiableSet(set);\r\n```","```\r\nList<String> list = Arrays.asList(\"foo\", \"bar\", \"baz\");\r\n```","```\r\nSet<String> set = Collections.unmodifiableSet(new HashSet<String>() {{\r\n    add(\"foo\"); add(\"bar\"); add(\"baz\");\r\n}});\r\n```","```\r\nStream.of(\"foo\", \"bar\", \"baz\")\r\n  .collect(collectingAndThen(toSet(), Collections::unmodifiableSet));\r\n```","```\r\nstatic <E> List<E> of(E e1, E e2, E e3)\r\nstatic <E> Set<E>  of(E e1, E e2, E e3)\r\n```","```\r\nList<String> list = List.of(\"foo\", \"bar\", \"baz\");\r\nSet<String> set = Set.of(\"foo\", \"bar\", \"baz\");\r\n```","```\r\nstatic <E> List<E> of()\r\nstatic <E> List<E> of(E e1)\r\nstatic <E> List<E> of(E e1, E e2)\r\n// ....and so on\r\n\r\nstatic <E> List<E> of(E... elems)\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void onDuplicateElem_IfIllegalArgExp_thenSuccess() {\r\n    Set.of(\"foo\", \"bar\", \"baz\", \"foo\");\r\n}\r\n```","```\r\nint[] arr = { 1, 2, 3, 4, 5 };\r\nList<int[]> list = List.of(arr);\r\n```","```\r\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)\r\n```","```\r\nMap<String, String> map = Map.of(\"foo\", \"a\", \"bar\", \"b\", \"baz\", \"c\");\r\n```","```\r\nstatic <K,V> Map<K,V> ofEntries(Map.Entry<? extends K,? extends V>... entries)\r\n```","```\r\nMap<String, String> map = Map.ofEntries(\r\n  new AbstractMap.SimpleEntry<>(\"foo\", \"a\"),\r\n  new AbstractMap.SimpleEntry<>(\"bar\", \"b\"),\r\n  new AbstractMap.SimpleEntry<>(\"baz\", \"c\"));\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void givenDuplicateKeys_ifIllegalArgExp_thenSuccess() {\r\n    Map.of(\"foo\", \"a\", \"foo\", \"b\");\r\n}\r\n```","```\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void onElemAdd_ifUnSupportedOpExpnThrown_thenSuccess() {\r\n    Set<String> set = Set.of(\"foo\", \"bar\");\r\n    set.add(\"baz\");\r\n}\r\n```","```\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void onElemModify_ifUnSupportedOpExpnThrown_thenSuccess() {\r\n    List<String> list = List.of(\"foo\", \"bar\");\r\n    list.set(0, \"baz\");\r\n}\r\n```","```\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void onElemRemove_ifUnSupportedOpExpnThrown_thenSuccess() {\r\n    Map<String, String> map = Map.of(\"foo\", \"a\", \"bar\", \"b\");\r\n    map.remove(\"foo\");\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void onNullElem_ifNullPtrExpnThrown_thenSuccess() {\r\n    List.of(\"foo\", \"bar\", null);\r\n}\r\n```","```\r\nList<String> list1 = List.of(\"foo\", \"bar\");\r\nList<String> list2 = List.of(\"foo\", \"bar\");\r\n```"]