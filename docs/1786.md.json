["```\r\n@Remote\r\npublic interface CounterEJBRemote {    \r\n    int count();\r\n    String getName();\r\n    void setName(String name);\r\n}\r\n```","```\r\n@Singleton\r\npublic class CounterEJB implements CounterEJBRemote {\r\n    private int count = 1;\r\n    private String name;\r\n\r\n    public int count() {\r\n        return count++;\r\n    }\r\n\r\n    // getter and setter for name\r\n} \r\n```","```\r\n@BeforeClass\r\npublic void initializeContext() throws NamingException {\r\n    ejbContainer = EJBContainer.createEJBContainer();\r\n    context = ejbContainer.getContext();\r\n    context.bind(\"inject\", this);\r\n} \r\n```","```\r\n@Test\r\npublic void givenSingletonBean_whenCounterInvoked_thenCountIsIncremented() throws NamingException {\r\n\r\n    int count = 0;\r\n    CounterEJBRemote firstCounter = (CounterEJBRemote) context.lookup(\"java:global/ejb-beans/CounterEJB\");\r\n    firstCounter.setName(\"first\");\r\n\r\n    for (int i = 0; i < 10; i++) {\r\n        count = firstCounter.count();\r\n    }\r\n\r\n    assertEquals(10, count);\r\n    assertEquals(\"first\", firstCounter.getName());\r\n\r\n    CounterEJBRemote secondCounter = (CounterEJBRemote) context.lookup(\"java:global/ejb-beans/CounterEJB\");\r\n\r\n    int count2 = 0;\r\n    for (int i = 0; i < 10; i++) {\r\n        count2 = secondCounter.count();\r\n    }\r\n\r\n    assertEquals(20, count2);\r\n    assertEquals(\"first\", secondCounter.getName());\r\n} \r\n```","```\r\n@Component\r\npublic class CounterBean {\r\n    // same content as in the EJB\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(basePackages = \"com.baeldung.ejbspringcomparison.spring\")\r\npublic class ApplicationConfig {} \r\n```","```\r\n@BeforeClass\r\npublic static void init() {\r\n    context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\r\n} \r\n```","```\r\n@Test\r\npublic void whenCounterInvoked_thenCountIsIncremented() throws NamingException {    \r\n    CounterBean firstCounter = context.getBean(CounterBean.class);\r\n    firstCounter.setName(\"first\");\r\n    int count = 0;\r\n    for (int i = 0; i < 10; i++) {\r\n        count = firstCounter.count();\r\n    }\r\n\r\n    assertEquals(10, count);\r\n    assertEquals(\"first\", firstCounter.getName());\r\n\r\n    CounterBean secondCounter = context.getBean(CounterBean.class);\r\n    int count2 = 0;\r\n    for (int i = 0; i < 10; i++) {\r\n        count2 = secondCounter.count();\r\n    }\r\n\r\n    assertEquals(20, count2);\r\n    assertEquals(\"first\", secondCounter.getName());\r\n} \r\n```","```\r\n@Stateful\r\npublic class ShoppingCartEJB implements ShoppingCartEJBRemote {\r\n    private String name;\r\n    private List<String> shoppingCart;\r\n\r\n    public void addItem(String item) {\r\n        shoppingCart.add(item);\r\n    }\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenStatefulBean_whenBathingCartWithThreeItemsAdded_thenItemsSizeIsThree()\r\n  throws NamingException {\r\n    ShoppingCartEJBRemote bathingCart = (ShoppingCartEJBRemote) context.lookup(\r\n      \"java:global/ejb-beans/ShoppingCartEJB\");\r\n\r\n    bathingCart.setName(\"bathingCart\");\r\n    bathingCart.addItem(\"soap\");\r\n    bathingCart.addItem(\"shampoo\");\r\n    bathingCart.addItem(\"oil\");\r\n\r\n    assertEquals(3, bathingCart.getItems().size());\r\n    assertEquals(\"bathingCart\", bathingCart.getName());\r\n} \r\n```","```\r\nShoppingCartEJBRemote fruitCart = \r\n  (ShoppingCartEJBRemote) context.lookup(\"java:global/ejb-beans/ShoppingCartEJB\");\r\n\r\nfruitCart.addItem(\"apples\");\r\nfruitCart.addItem(\"oranges\");\r\n\r\nassertEquals(2, fruitCart.getItems().size());\r\nassertNull(fruitCart.getName()); \r\n```","```\r\n@Component\r\n@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\r\npublic class ShoppingCartBean {\r\n   // same contents as in the EJB\r\n} \r\n```","```\r\nShoppingCartBean bathingCart = context.getBean(ShoppingCartBean.class); \r\n```","```\r\n@Stateless\r\npublic class FinderEJB implements FinderEJBRemote {\r\n\r\n    private Map<String, String> alphabet;\r\n\r\n    public FinderEJB() {\r\n        alphabet = new HashMap<String, String>();\r\n        alphabet.put(\"A\", \"Apple\");\r\n        // add more values in map here\r\n    }\r\n\r\n    public String search(String keyword) {\r\n        return alphabet.get(keyword);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenStatelessBean_whenSearchForA_thenApple() throws NamingException {\r\n    assertEquals(\"Apple\", alphabetFinder.search(\"A\"));        \r\n} \r\n```","```\r\n@EJB\r\nprivate FinderEJBRemote alphabetFinder; \r\n```","```\r\n@MessageDriven(activationConfig = { \r\n  @ActivationConfigProperty(propertyName = \"destination\", propertyValue = \"myQueue\"), \r\n  @ActivationConfigProperty(propertyName = \"destinationType\", propertyValue = \"javax.jms.Queue\") \r\n})\r\npublic class RecieverMDB implements MessageListener {\r\n\r\n    @Resource\r\n    private ConnectionFactory connectionFactory;\r\n\r\n    @Resource(name = \"ackQueue\")\r\n    private Queue ackQueue;\r\n\r\n    public void onMessage(Message message) {\r\n        try {\r\n            TextMessage textMessage = (TextMessage) message;\r\n            String producerPing = textMessage.getText();\r\n\r\n            if (producerPing.equals(\"marco\")) {\r\n                acknowledge(\"polo\");\r\n            }\r\n        } catch (JMSException e) {\r\n            throw new IllegalStateException(e);\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenMDB_whenMessageSent_thenAcknowledgementReceived()\r\n  throws InterruptedException, JMSException, NamingException {\r\n    Connection connection = connectionFactory.createConnection();\r\n    connection.start();\r\n    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\r\n    MessageProducer producer = session.createProducer(myQueue);\r\n    producer.send(session.createTextMessage(\"marco\"));\r\n    MessageConsumer response = session.createConsumer(ackQueue);\r\n\r\n    assertEquals(\"polo\", ((TextMessage) response.receive(1000)).getText());\r\n} \r\n```","```\r\n@EnableJms\r\npublic class ApplicationConfig {\r\n\r\n    @Bean\r\n    public DefaultJmsListenerContainerFactory jmsListenerContainerFactory() {\r\n        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\r\n        factory.setConnectionFactory(connectionFactory());\r\n        return factory;\r\n    }\r\n\r\n    @Bean\r\n    public ConnectionFactory connectionFactory() {\r\n        return new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\r\n    }\r\n\r\n    @Bean\r\n    public JmsTemplate jmsTemplate() {\r\n        JmsTemplate template = new JmsTemplate(connectionFactory());\r\n        template.setConnectionFactory(connectionFactory());\r\n        return template;\r\n    }\r\n} \r\n```","```\r\n@Component\r\npublic class Producer {\r\n    @Autowired\r\n    private JmsTemplate jmsTemplate;\r\n\r\n    public void sendMessageToDefaultDestination(final String message) {\r\n        jmsTemplate.convertAndSend(\"myQueue\", message);\r\n    }\r\n\r\n    public String receiveAck() {\r\n        return (String) jmsTemplate.receiveAndConvert(\"ackQueue\");\r\n    }\r\n} \r\n```","```\r\n@Component\r\npublic class Receiver {\r\n    @Autowired\r\n    private JmsTemplate jmsTemplate;\r\n\r\n    @JmsListener(destination = \"myQueue\")\r\n    public void receiveMessage(String msg) {\r\n        sendAck();\r\n    }\r\n\r\n    private void sendAck() {\r\n        jmsTemplate.convertAndSend(\"ackQueue\", \"polo\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenJMSBean_whenMessageSent_thenAcknowledgementReceived() throws NamingException {\r\n    Producer producer = context.getBean(Producer.class);\r\n    producer.sendMessageToDefaultDestination(\"marco\");\r\n\r\n    assertEquals(\"polo\", producer.receiveAck());\r\n} \r\n```"]