["```\r\ngfsh> start locator --name=locator --bind-address=localhost\r\n```","```\r\ngfsh> start server --name=server1 --server-port=0\r\n```","```\r\ngfsh> create region --name=baeldung --type=REPLICATE\r\n```","```\r\ngfsh> list members\r\n Name   | Id\r\n------- | ----------------------------------------------------------\r\nserver1 | 192.168.0.105(server1:6119)<v1>:1024\r\nlocator | 127.0.0.1(locator:5996:locator)<ec><v0>:1024 [Coordinator]\r\n```","```\r\ngfsh> describe region --name=baeldung\r\n..........................................................\r\nName            : baeldung\r\nData Policy     : replicate\r\nHosting Members : server1\r\n\r\nNon-Default Attributes Shared By Hosting Members  \r\n\r\n Type  |    Name     | Value\r\n------ | ----------- | ---------------\r\nRegion | data-policy | REPLICATE\r\n       | size        | 0\r\n       | scope       | distributed-ack\r\n```","```\r\n<dependency>\r\n     <groupId>org.apache.geode</groupId>\r\n     <artifactId>geode-core</artifactId>\r\n     <version>1.6.0</version>\r\n</dependency>\r\n```","```\r\n@Before\r\npublic void connect() {\r\n    this.cache = new ClientCacheFactory()\r\n      .addPoolLocator(\"localhost\", 10334)\r\n        .create();\r\n    this.region = cache.<String, String> \r\n      createClientRegionFactory(ClientRegionShortcut.CACHING_PROXY)\r\n        .create(\"baeldung\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendMessageToRegion_thenMessageSavedSuccessfully() {\r\n\r\n    this.region.put(\"A\", \"Hello\");\r\n    this.region.put(\"B\", \"Baeldung\");\r\n\r\n    assertEquals(\"Hello\", region.get(\"A\"));\r\n    assertEquals(\"Baeldung\", region.get(\"B\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenPutMultipleValuesAtOnce_thenValuesSavedSuccessfully() {\r\n\r\n    Supplier<Stream<String>> keys = () -> Stream.of(\"A\", \"B\", \"C\", \"D\", \"E\");\r\n    Map<String, String> values = keys.get()\r\n        .collect(Collectors.toMap(Function.identity(), String::toLowerCase));\r\n\r\n    this.region.putAll(values);\r\n\r\n    keys.get()\r\n        .forEach(k -> assertEquals(k.toLowerCase(), this.region.get(k)));\r\n}\r\n```","```\r\npublic class CustomerKey implements Serializable {\r\n    private long id;\r\n    private String country;\r\n\r\n    // getters and setters\r\n    // equals and hashcode\r\n}\r\n```","```\r\npublic class Customer implements Serializable {\r\n    private CustomerKey key;\r\n    private String firstName;\r\n    private String lastName;\r\n    private Integer age;\r\n\r\n    // getters and setters \r\n}\r\n```","```\r\ngfsh> stop server --name=server1\r\ngfsh> start server --name=server1 --classpath=../lib/apache-geode-1.0-SNAPSHOT.jar --server-port=0\r\n```","```\r\ngfsh> create region --name=baeldung-customers --type=REPLICATE\r\n```","```\r\n@Before\r\npublic void connect() {\r\n    // ... connect through the locator\r\n    this.customerRegion = this.cache.<CustomerKey, Customer> \r\n      createClientRegionFactory(ClientRegionShortcut.CACHING_PROXY)\r\n        .create(\"baeldung-customers\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenPutCustomKey_thenValuesSavedSuccessfully() {\r\n    CustomerKey key = new CustomerKey(123);\r\n    Customer customer = new Customer(key, \"William\", \"Russell\", 35);\r\n\r\n    this.customerRegion.put(key, customer);\r\n\r\n    Customer storedCustomer = this.customerRegion.get(key);\r\n    assertEquals(\"William\", storedCustomer.getFirstName());\r\n    assertEquals(\"Russell\", storedCustomer.getLastName());\r\n}\r\n```","```\r\ngfsh> start server --name=server2 --classpath=../lib/apache-geode-1.0-SNAPSHOT.jar --server-port=0\r\n```","```\r\ngfsh> stop server --name=server1\r\n```","```\r\ngfsh> query --query='select e.key from /baeldung.entries e'\r\nResult : true\r\nLimit  : 100\r\nRows   : 5\r\n\r\nResult\r\n------\r\nC\r\nB\r\nA \r\nE\r\nD\r\n```","```\r\ngfsh> create region --name=baeldung-partitioned --type=PARTITION\r\n```","```\r\ngfsh> put --region=baeldung-partitioned --key=\"1\" --value=\"one\"\r\ngfsh> put --region=baeldung-partitioned --key=\"2\" --value=\"two\"\r\ngfsh> put --region=baeldung-partitioned --key=\"3\" --value=\"three\"\r\n```","```\r\ngfsh> query --query='select e.key, e.value from /baeldung-partitioned.entries e'\r\nResult : true\r\nLimit  : 100\r\nRows   : 3\r\n\r\nkey | value\r\n--- | -----\r\n2   | two\r\n1   | one\r\n3   | three\r\n```","```\r\ngfsh> stop server --name=server1\r\ngfsh> query --query='select e.key, e.value from /baeldung-partitioned.entries e'\r\nResult : true\r\nLimit  : 100\r\nRows   : 1\r\n\r\nkey | value\r\n--- | -----\r\n2   | two\r\n```","```\r\nMap<CustomerKey, Customer> data = new HashMap<>();\r\ndata.put(new CustomerKey(1), new Customer(\"Gheorge\", \"Manuc\", 36));\r\ndata.put(new CustomerKey(2), new Customer(\"Allan\", \"McDowell\", 43));\r\nthis.customerRegion.putAll(data);\r\n```","```\r\nQueryService queryService = this.cache.getQueryService();\r\nString query = \r\n  \"select * from /baeldung-customers c where c.firstName = 'Allan'\";\r\nSelectResults<Customer> results =\r\n  (SelectResults<Customer>) queryService.newQuery(query).execute();\r\nassertEquals(1, results.size());\r\n```","```\r\npublic class UpperCaseNames implements Function<Boolean> {\r\n    @Override\r\n    public void execute(FunctionContext<Boolean> context) {\r\n        RegionFunctionContext regionContext = (RegionFunctionContext) context;\r\n        Region<CustomerKey, Customer> region = regionContext.getDataSet();\r\n\r\n        for ( Map.Entry<CustomerKey, Customer> entry : region.entrySet() ) {\r\n            Customer customer = entry.getValue();\r\n            customer.setFirstName(customer.getFirstName().toUpperCase());\r\n        }\r\n        context.getResultSender().lastResult(true);   \r\n    }\r\n\r\n    @Override\r\n    public String getId() {\r\n        return getClass().getName();\r\n    }\r\n}\r\n```","```\r\ngfsh> deploy --jar=./lib/apache-geode-1.0-SNAPSHOT.jar\r\n```","```\r\n@Test\r\npublic void whenExecuteUppercaseNames_thenCustomerNamesAreUppercased() {\r\n    Execution execution = FunctionService.onRegion(this.customerRegion);\r\n    execution.execute(UpperCaseNames.class.getName());\r\n    Customer customer = this.customerRegion.get(new CustomerKey(1));\r\n    assertEquals(\"GHEORGE\", customer.getFirstName());\r\n}\r\n```"]