["```\r\nExchangeFilterFunction filterFunction = (clientRequest, nextFilter) -> {\r\n    LOG.info(\"WebClient fitler executed\");\r\n    return nextFilter.exchange(clientRequest);\r\n};\r\n```","```\r\nWebClient webClient = WebClient.create();\r\n```","```\r\nWebClient webClient = WebClient.builder()\r\n  .filter(filterFunction)\r\n  .build();\r\n```","```\r\nExchangeFilterFunction countingFunction = (clientRequest, nextFilter) -> {\r\n    HttpMethod httpMethod = clientRequest.method();\r\n    if (httpMethod == HttpMethod.GET) {\r\n        getCounter.incrementAndGet();\r\n    }\r\n    return nextFilter.exchange(clientRequest);\r\n};\r\n```","```\r\nExchangeFilterFunction urlModifyingFilter = (clientRequest, nextFilter) -> {\r\n    String oldUrl = clientRequest.url().toString();\r\n    URI newUrl = URI.create(oldUrl + \"/\" + version);\r\n    ClientRequest filteredRequest = ClientRequest.from(clientRequest)\r\n      .url(newUrl)\r\n      .build();\r\n    return nextFilter.exchange(filteredRequest);\r\n};\r\n```","```\r\nExchangeFilterFunction loggingFilter = (clientRequest, nextFilter) -> {\r\n    printStream.print(\"Sending request \" + clientRequest.method() + \" \" + clientRequest.url());\r\n    return nextFilter.exchange(clientRequest);\r\n};\r\n```","```\r\nWebClient webClient = WebClient.builder()\r\n  .filter(ExchangeFilterFunctions.basicAuthentication(user, password))\r\n  .build(); \r\n```"]