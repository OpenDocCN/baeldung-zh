["```\r\nGET http://bank.com/transfer?accountNo=1234&amount;=100\r\n```","```\r\nGET http://bank.com/transfer?accountNo=5678&amount;=1000\r\n```","```\r\n<a href=\"http://bank.com/transfer?accountNo=5678&amount;=1000\">\r\nShow Kittens Pictures\r\n</a>\r\n```","```\r\n<img src=\"http://bank.com/transfer?accountNo=5678&amount;=1000\"/>\r\n```","```\r\nPOST http://bank.com/transfer\r\naccountNo=1234&amount;=100\r\n```","```\r\nPOST http://bank.com/transfer\r\naccountNo=5678&amount;=1000\r\n```","```\r\n<form action=\"http://bank.com/transfer\" method=\"POST\">\r\n    <input type=\"hidden\" name=\"accountNo\" value=\"5678\"/>\r\n    <input type=\"hidden\" name=\"amount\" value=\"1000\"/>\r\n    <input type=\"submit\" value=\"Show Kittens Pictures\"/>\r\n</form>\r\n```","```\r\n<body onload=\"document.forms[0].submit()\">\r\n<form>\r\n...\r\n```","```\r\n@Controller\r\npublic class BankController {\r\n    private Logger logger = LoggerFactory.getLogger(getClass());\r\n\r\n    @RequestMapping(value = \"/transfer\", method = RequestMethod.GET)\r\n    @ResponseBody\r\n    public String transfer(@RequestParam(\"accountNo\") int accountNo, \r\n      @RequestParam(\"amount\") final int amount) {\r\n        logger.info(\"Transfer to {}\", accountNo);\r\n        ...\r\n    }\r\n\r\n    @RequestMapping(value = \"/transfer\", method = RequestMethod.POST)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void transfer2(@RequestParam(\"accountNo\") int accountNo, \r\n      @RequestParam(\"amount\") final int amount) {\r\n        logger.info(\"Transfer to {}\", accountNo);\r\n        ...\r\n    }\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h1>CSRF test on Origin</h1>\r\n    <a href=\"transfer?accountNo=1234&amount;=100\">Transfer Money to John</a>\r\n\r\n    <form action=\"transfer\" method=\"POST\">\r\n        <label>Account Number</label> \r\n        <input name=\"accountNo\" type=\"number\"/>\r\n\r\n        <label>Amount</label>         \r\n        <input name=\"amount\" type=\"number\"/>\r\n\r\n        <input type=\"submit\">\r\n    </form>\r\n</body>\r\n</html>\r\n```","```\r\n<html>\r\n<body>\r\n    <a href=\"http://localhost:8080/transfer?accountNo=5678&amount;=1000\">Show Kittens Pictures</a>\r\n\r\n    <img src=\"http://localhost:8080/transfer?accountNo=5678&amount;=1000\"/>\r\n\r\n    <form action=\"http://localhost:8080/transfer\" method=\"POST\">\r\n        <input name=\"accountNo\" type=\"hidden\" value=\"5678\"/>\r\n        <input name=\"amount\" type=\"hidden\" value=\"1000\"/>\r\n        <input type=\"submit\" value=\"Show Kittens Picture\">\r\n    </form>\r\n</body>\r\n</html>\r\n```","```\r\nhttp://localhost:8081/spring-rest-full/csrfHome.html\r\n```","```\r\nhttp://localhost:8081/spring-security-rest/api/csrfAttacker.html\r\n```","```\r\n<http>\r\n    ...\r\n    <csrf />\r\n</http>\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http\r\n      .csrf().disable();\r\n}\r\n```","```\r\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\r\n```","```\r\n<meta name=\"_csrf\" content=\"${_csrf.token}\"/>\r\n<meta name=\"_csrf_header\" content=\"${_csrf.headerName}\"/>\r\n```","```\r\nvar token = $(\"meta[name='_csrf']\").attr(\"content\");\r\nvar header = $(\"meta[name='_csrf_header']\").attr(\"content\"); \r\n```","```\r\n$(document).ajaxSend(function(e, xhr, options) {\r\n    xhr.setRequestHeader(header, token);\r\n});\r\n```","```\r\n@Configuration\r\npublic class SpringSecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n    @Override\r\n    public void configure(HttpSecurity http) throws {\r\n        http\r\n          .csrf()\r\n          .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());\r\n    }\r\n}\r\n```","```\r\nconst csrfToken = document.cookie.replace(/(?:(?:^|.*;\\s*)XSRF-TOKEN\\s*\\=\\s*([^;]*).*$)|^.*$/, '$1');\r\n```","```\r\nfetch(url, {\r\n  method: 'POST',\r\n  body: /* data to send */,\r\n  headers: { 'X-XSRF-TOKEN': csrfToken },\r\n})\r\n```","```\r\n@ContextConfiguration(classes = { SecurityWithoutCsrfConfig.class, ...})\r\npublic class CsrfDisabledIntegrationTest extends CsrfAbstractIntegrationTest {\r\n\r\n    @Test\r\n    public void givenNotAuth_whenAddFoo_thenUnauthorized() throws Exception {\r\n        mvc.perform(\r\n          post(\"/foos\").contentType(MediaType.APPLICATION_JSON)\r\n            .content(createFoo())\r\n          ).andExpect(status().isUnauthorized());\r\n    }\r\n\r\n    @Test \r\n    public void givenAuth_whenAddFoo_thenCreated() throws Exception {\r\n        mvc.perform(\r\n          post(\"/foos\").contentType(MediaType.APPLICATION_JSON)\r\n            .content(createFoo())\r\n            .with(testUser())\r\n        ).andExpect(status().isCreated()); \r\n    } \r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@WebAppConfiguration\r\npublic class CsrfAbstractIntegrationTest {\r\n    @Autowired\r\n    private WebApplicationContext context;\r\n\r\n    @Autowired\r\n    private Filter springSecurityFilterChain;\r\n\r\n    protected MockMvc mvc;\r\n\r\n    @Before\r\n    public void setup() {\r\n        mvc = MockMvcBuilders.webAppContextSetup(context)\r\n          .addFilters(springSecurityFilterChain)\r\n          .build();\r\n    }\r\n\r\n    protected RequestPostProcessor testUser() {\r\n        return user(\"user\").password(\"userPass\").roles(\"USER\");\r\n    }\r\n\r\n    protected String createFoo() throws JsonProcessingException {\r\n        return new ObjectMapper().writeValueAsString(new Foo(randomAlphabetic(6)));\r\n    }\r\n}\r\n```","```\r\n@ContextConfiguration(classes = { SecurityWithCsrfConfig.class, ...})\r\npublic class CsrfEnabledIntegrationTest extends CsrfAbstractIntegrationTest {\r\n\r\n    @Test\r\n    public void givenNoCsrf_whenAddFoo_thenForbidden() throws Exception {\r\n        mvc.perform(\r\n          post(\"/foos\").contentType(MediaType.APPLICATION_JSON)\r\n            .content(createFoo())\r\n            .with(testUser())\r\n          ).andExpect(status().isForbidden());\r\n    }\r\n\r\n    @Test\r\n    public void givenCsrf_whenAddFoo_thenCreated() throws Exception {\r\n        mvc.perform(\r\n          post(\"/foos\").contentType(MediaType.APPLICATION_JSON)\r\n            .content(createFoo())\r\n            .with(testUser()).with(csrf())\r\n          ).andExpect(status().isCreated());\r\n    }\r\n}\r\n```"]