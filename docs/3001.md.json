["```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\nbyte[] fileContent = FileUtils.readFileToByteArray(new File(filePath));\r\nString encodedString = Base64.getEncoder().encodeToString(fileContent);\r\n```","```\r\nbyte[] decodedBytes = Base64.getDecoder().decode(encodedString);\r\nFileUtils.writeByteArrayToFile(new File(outputFileName), decodedBytes);\r\n```","```\r\npublic class FileToBase64StringConversionUnitTest {\r\n\r\n    private String inputFilePath = \"test_image.jpg\";\r\n    private String outputFilePath = \"test_image_copy.jpg\";\r\n\r\n    @Test\r\n    public void fileToBase64StringConversion() throws IOException {\r\n        // load file from /src/test/resources\r\n        ClassLoader classLoader = getClass().getClassLoader();\r\n        File inputFile = new File(classLoader\r\n          .getResource(inputFilePath)\r\n          .getFile());\r\n\r\n        byte[] fileContent = FileUtils.readFileToByteArray(inputFile);\r\n        String encodedString = Base64\r\n          .getEncoder()\r\n          .encodeToString(fileContent);\r\n\r\n        // create output file\r\n        File outputFile = new File(inputFile\r\n          .getParentFile()\r\n          .getAbsolutePath() + File.pathSeparator + outputFilePath);\r\n\r\n        // decode the string and write to file\r\n        byte[] decodedBytes = Base64\r\n          .getDecoder()\r\n          .decode(encodedString);\r\n        FileUtils.writeByteArrayToFile(outputFile, decodedBytes);\r\n\r\n        assertTrue(FileUtils.contentEquals(inputFile, outputFile));\r\n    }\r\n}\r\n```"]