["```\r\nimport static io.vavr.API.*;\r\n```","```\r\n@Test\r\npublic void whenSwitchWorksAsMatcher_thenCorrect() {\r\n    int input = 2;\r\n    String output;\r\n    switch (input) {\r\n    case 0:\r\n        output = \"zero\";\r\n        break;\r\n    case 1:\r\n        output = \"one\";\r\n        break;\r\n    case 2:\r\n        output = \"two\";\r\n        break;\r\n    case 3:\r\n        output = \"three\";\r\n        break;\r\n    default:\r\n        output = \"unknown\";\r\n        break;\r\n    }\r\n\r\n    assertEquals(\"two\", output);\r\n}\r\n```","```\r\n@Test\r\npublic void whenIfWorksAsMatcher_thenCorrect() {\r\n    int input = 3;\r\n    String output;\r\n    if (input == 0) {\r\n        output = \"zero\";\r\n    }\r\n    if (input == 1) {\r\n        output = \"one\";\r\n    }\r\n    if (input == 2) {\r\n        output = \"two\";\r\n    }\r\n    if (input == 3) {\r\n        output = \"three\";\r\n    } else {\r\n        output = \"unknown\";\r\n    }\r\n\r\n    assertEquals(\"three\", output);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchworks_thenCorrect() {\r\n    int input = 2;\r\n    String output = Match(input).of(\r\n      Case($(1), \"one\"), \r\n      Case($(2), \"two\"), \r\n      Case($(3), \"three\"), \r\n      Case($(), \"?\"));\r\n\r\n    assertEquals(\"two\", output);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchesDefault_thenCorrect() {\r\n    int input = 5;\r\n    String output = Match(input).of(\r\n      Case($(1), \"one\"), \r\n      Case($(), \"unknown\"));\r\n\r\n    assertEquals(\"unknown\", output);\r\n}\r\n```","```\r\n@Test(expected = MatchError.class)\r\npublic void givenNoMatchAndNoDefault_whenThrows_thenCorrect() {\r\n    int input = 5;\r\n    Match(input).of(\r\n      Case($(1), \"one\"), \r\n      Case($(2), \"two\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchWorksWithOption_thenCorrect() {\r\n    int i = 10;\r\n    Option<String> s = Match(i)\r\n      .option(Case($(0), \"zero\"));\r\n\r\n    assertTrue(s.isEmpty());\r\n    assertEquals(\"None\", s.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchWorksWithPredicate_thenCorrect() {\r\n    int i = 3;\r\n    String s = Match(i).of(\r\n      Case($(is(1)), \"one\"), \r\n      Case($(is(2)), \"two\"), \r\n      Case($(is(3)), \"three\"),\r\n      Case($(), \"?\"));\r\n\r\n    assertEquals(\"three\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenMatchesClass_thenCorrect() {\r\n    Object obj=5;\r\n    String s = Match(obj).of(\r\n      Case($(instanceOf(String.class)), \"string matched\"), \r\n      Case($(), \"not string\"));\r\n\r\n    assertEquals(\"not string\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenMatchesNull_thenCorrect() {\r\n    Object obj=5;\r\n    String s = Match(obj).of(\r\n      Case($(isNull()), \"no value\"), \r\n      Case($(isNotNull()), \"value found\"));\r\n\r\n    assertEquals(\"value found\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenContainsWorks_thenCorrect() {\r\n    int i = 5;\r\n    String s = Match(i).of(\r\n      Case($(isIn(2, 4, 6, 8)), \"Even Single Digit\"), \r\n      Case($(isIn(1, 3, 5, 7, 9)), \"Odd Single Digit\"), \r\n      Case($(), \"Out of range\"));\r\n\r\n    assertEquals(\"Odd Single Digit\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenMatchAllWorks_thenCorrect() {\r\n    Integer i = null;\r\n    String s = Match(i).of(\r\n      Case($(allOf(isNotNull(),isIn(1,2,3,null))), \"Number found\"), \r\n      Case($(), \"Not found\"));\r\n\r\n    assertEquals(\"Not found\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenMatchesAnyOfWorks_thenCorrect() {\r\n    Integer year = 1990;\r\n    String s = Match(year).of(\r\n      Case($(anyOf(isIn(1990, 1991, 1992), is(1986))), \"Age match\"), \r\n      Case($(), \"No age match\"));\r\n    assertEquals(\"Age match\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenMatchesNoneOfWorks_thenCorrect() {\r\n    Integer year = 1990;\r\n    String s = Match(year).of(\r\n      Case($(noneOf(isIn(1990, 1991, 1992), is(1986))), \"Age match\"), \r\n      Case($(), \"No age match\"));\r\n\r\n    assertEquals(\"No age match\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchWorksWithCustomPredicate_thenCorrect() {\r\n    int i = 3;\r\n    String s = Match(i).of(\r\n      Case($(n -> n == 1), \"one\"), \r\n      Case($(n -> n == 2), \"two\"), \r\n      Case($(n -> n == 3), \"three\"), \r\n      Case($(), \"?\"));\r\n    assertEquals(\"three\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInput_whenContainsWorks_thenCorrect2() {\r\n    int i = 5;\r\n    BiFunction<Integer, List<Integer>, Boolean> contains \r\n      = (t, u) -> u.contains(t);\r\n\r\n    String s = Match(i).of(\r\n      Case($(o -> contains\r\n        .apply(i, Arrays.asList(2, 4, 6, 8))), \"Even Single Digit\"), \r\n      Case($(o -> contains\r\n        .apply(i, Arrays.asList(1, 3, 5, 7, 9))), \"Odd Single Digit\"), \r\n      Case($(), \"Out of range\"));\r\n\r\n    assertEquals(\"Odd Single Digit\", s);\r\n}\r\n```","```\r\npublic class Employee {\r\n\r\n    private String name;\r\n    private String id;\r\n\r\n    //standard constructor, getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenDecomposesJavaWay_thenCorrect() {\r\n    Employee person = new Employee(\"Carl\", \"EMP01\");\r\n\r\n    String result = \"not found\";\r\n    if (person != null && \"Carl\".equals(person.getName())) {\r\n        String id = person.getId();\r\n        result=\"Carl has employee id \"+id;\r\n    }\r\n\r\n    assertEquals(\"Carl has employee id EMP01\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenDecomposesVavrWay_thenCorrect() {\r\n    Employee person = new Employee(\"Carl\", \"EMP01\");\r\n\r\n    String result = Match(person).of(\r\n      Case(Employee($(\"Carl\"), $()),\r\n        (name, id) -> \"Carl has employee id \"+id),\r\n      Case($(),\r\n        () -> \"not found\"));\r\n\r\n    assertEquals(\"Carl has employee id EMP01\", result);\r\n}\r\n```","```\r\n@Patterns\r\nclass Demo {\r\n    @Unapply\r\n    static Tuple2<String, String> Employee(Employee Employee) {\r\n        return Tuple.of(Employee.getName(), Employee.getId());\r\n    }\r\n\r\n    // other unapply patterns\r\n}\r\n```","```\r\nimport static com.baeldung.vavr.DemoPatterns.*;\r\n```","```\r\n@Unapply\r\nstatic Tuple3<Integer, Integer, Integer> LocalDate(LocalDate date) {\r\n    return Tuple.of(\r\n      date.getYear(), date.getMonthValue(), date.getDayOfMonth());\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenDecomposesVavrWay_thenCorrect2() {\r\n    LocalDate date = LocalDate.of(2017, 2, 13);\r\n\r\n    String result = Match(date).of(\r\n      Case(LocalDate($(2016), $(3), $(13)), \r\n        () -> \"2016-02-13\"),\r\n      Case(LocalDate($(2016), $(), $()),\r\n        (y, m, d) -> \"month \" + m + \" in 2016\"),\r\n      Case(LocalDate($(), $(), $()),  \r\n        (y, m, d) -> \"month \" + m + \" in \" + y),\r\n      Case($(), \r\n        () -> \"(catch all)\")\r\n    );\r\n\r\n    assertEquals(\"month 2 in 2017\",result);\r\n}\r\n```","```\r\npublic void displayEven() {\r\n    System.out.println(\"Input is even\");\r\n}\r\n```","```\r\npublic void displayOdd() {\r\n    System.out.println(\"Input is odd\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchCreatesSideEffects_thenCorrect() {\r\n    int i = 4;\r\n    Match(i).of(\r\n      Case($(isIn(2, 4, 6, 8)), o -> run(this::displayEven)), \r\n      Case($(isIn(1, 3, 5, 7, 9)), o -> run(this::displayOdd)), \r\n      Case($(), o -> run(() -> {\r\n          throw new IllegalArgumentException(String.valueOf(i));\r\n      })));\r\n}\r\n```","```\r\nInput is even\r\n```"]