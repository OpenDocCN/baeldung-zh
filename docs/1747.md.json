["```\r\n<build>\r\n    <plugins>\r\n        // ...\r\n        <plugin>\r\n            <groupId>org.codehaus.gmavenplus</groupId>\r\n            <artifactId>gmavenplus-plugin</artifactId>\r\n            <version>1.5</version>\r\n       </plugin>\r\n   </plugins>\r\n</build>\r\n<dependencies>\r\n    // ...\r\n    <dependency>\r\n        <groupId>org.codehaus.groovy</groupId>\r\n        <artifactId>groovy-all</artifactId>\r\n        <version>2.4.10</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\nclass Duck {\r\n    String getName() {\r\n        'Duck'\r\n    }\r\n}\r\nclass Cat {\r\n    String getName() {\r\n        'Cat'\r\n    }\r\n} \r\n```","```\r\nDuck duck = new Duck()\r\nCat cat = new Cat()\r\n\r\ndef list = [duck, cat]\r\nlist.each { obj ->\r\n    println obj.getName()\r\n}\r\n```","```\r\nDuck\r\nCat\r\n```","```\r\nif(\"hello\") {...}\r\nif(15) {...}\r\nif(someObject) {...}\r\n```","```\r\nimport java.lang.* \r\nimport java.util.* \r\nimport java.io.* \r\nimport java.net.* \r\n\r\nimport groovy.lang.* \r\nimport groovy.util.* \r\n\r\nimport java.math.BigInteger \r\nimport java.math.BigDecimal\r\n```","```\r\nclass Universe {\r\n    @TypeChecked\r\n    int answer() { \"forty two\" }\r\n}\r\n```","```\r\n[Static type checking] - Cannot return value of type java.lang.String on method returning type int\r\n```","```\r\nclass Person {\r\n    String name\r\n    String lastName\r\n}\r\n```","```\r\nresourceGroup.getResourcePrototype().getName() == SERVER_TYPE_NAME\r\nresourceGroup.resourcePrototype.name == SERVER_TYPE_NAME\r\n\r\nresourcePrototype.setName(\"something\")\r\nresourcePrototype.name = \"something\"\r\n```","```\r\nString name = person?.organization?.parent?.name\r\n```","```\r\nString name = person.name ?: defaultName\r\n```","```\r\nString name = person.name ? person.name : defaultName\r\n```","```\r\nprintln 5 <=> null\r\n```","```\r\ndef name = \"Bill Gates\"\r\ndef greeting = \"Hello, ${name}\"\r\n```","```\r\ndef name = \"Bill Gates\"\r\ndef greeting = \"Hello, ${name.toUpperCase()}\"\r\n```","```\r\ndef a = \"hello\" \r\nassert a.class.name == 'java.lang.String'\r\n\r\ndef b = 'hello'\r\nassert b.class.name == 'java.lang.String'\r\n\r\ndef c = \"${b}\"\r\nassert c.class.name == 'org.codehaus.groovy.runtime.GStringImpl'\r\n```","```\r\nList<String> list = new ArrayList<>();\r\nlist.add(\"Hello\");\r\nlist.add(\"World\");\r\n```","```\r\nList list = ['Hello', 'World']\r\n```","```\r\nSet greeting = ['Hello', 'World']\r\n```","```\r\ndef greeting = ['Hello', 'World'] as Set\r\n```","```\r\ndef key = 'Key3'\r\ndef aMap = [\r\n    'Key1': 'Value 1', \r\n    Key2: 'Value 2',\r\n    (key): 'Another value'\r\n]\r\n```","```\r\nprintln aMap['Key1']\r\nprintln aMap[key]\r\nprintln aMap.Key1\r\n```","```\r\nif (...) {\r\n    // ...\r\n} else if (...) {\r\n    // ...\r\n} else {\r\n    // ...\r\n} \r\n```","```\r\ndef x = 1.23\r\ndef result = \"\"\r\n\r\nswitch ( x ) {\r\n    case \"foo\":\r\n        result = \"found foo\"\r\n        break\r\n\r\n    case \"bar\":\r\n        result += \"bar\"\r\n        break\r\n\r\n    case [4, 5, 6, 'inList']:\r\n        result = \"list\"\r\n        break\r\n\r\n    case 12..30:\r\n        result = \"range\"\r\n        break\r\n\r\n    case Number:\r\n        result = \"number\"\r\n        break\r\n\r\n    case ~/fo*/: \r\n        result = \"foo regex\"\r\n        break\r\n\r\n    case { it < 0 }: // or { x < 0 }\r\n        result = \"negative\"\r\n        break\r\n\r\n    default:\r\n        result = \"default\"\r\n}\r\n\r\nprintln(result)\r\n```","```\r\ndef x = 0\r\ndef y = 5\r\n\r\nwhile ( y-- > 0 ) {\r\n    x++\r\n}\r\n```","```\r\nfor (variable in iterable) { body }\r\n```","```\r\ndef x = 0\r\nfor ( i in 0..9 ) {\r\n    x += i\r\n}\r\n\r\nx = 0\r\nfor ( i in [0, 1, 2, 3, 4] ) {\r\n    x += i\r\n}\r\n\r\ndef array = (0..4).toArray()\r\nx = 0\r\nfor ( i in array ) {\r\n    x += i\r\n}\r\n\r\ndef map = ['abc':1, 'def':2, 'xyz':3]\r\nx = 0\r\nfor ( e in map ) {\r\n    x += e.value\r\n}\r\n\r\nx = 0\r\nfor ( v in map.values() ) {\r\n    x += v\r\n}\r\n\r\ndef text = \"abc\"\r\ndef list = []\r\nfor (c in text) {\r\n    list.add(c)\r\n}\r\n```","```\r\nfor (x in 0..9) { println x }\r\n```","```\r\n(0..9).each { println it }\r\n```","```\r\ntry {\r\n    someActionThatWillThrowAnException()\r\n} catch (e)\r\n    // log the error message, and/or handle in some way\r\n}\r\n```","```\r\ndef helloWorld = {\r\n    println \"Hello World\"\r\n}\r\n```","```\r\nhelloWorld.call()\r\n```","```\r\nhelloWorld()\r\n```","```\r\ndef printTheParam = { println it }\r\n```","```\r\nprintTheParam('hello')\r\nprintTheParam 'hello'\r\n```","```\r\ndef power = { int x, int y ->\r\n    return Math.pow(x, y)\r\n}\r\nprintln power(2, 3)\r\n```","```\r\ndef say = { what ->\r\n    println what\r\n}\r\nsay \"Hello World\"\r\n```","```\r\ndef square = { it * it }\r\nprintln square(4)\r\n```"]