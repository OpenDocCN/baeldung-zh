["```\r\npublic <K, V extends Comparable<V>> V maxUsingIteration(Map<K, V> map) {\r\n    Map.Entry<K, V> maxEntry = null;\r\n    for (Map.Entry<K, V> entry : map.entrySet()) {\r\n        if (maxEntry == null || entry.getValue()\r\n            .compareTo(maxEntry.getValue()) > 0) {\r\n            maxEntry = entry;\r\n        }\r\n    }\r\n    return maxEntry.getValue();\r\n}\r\n```","```\r\npublic <K, V extends Comparable<V>> V maxUsingCollectionsMax(Map<K, V> map) {\r\n    Entry<K, V> maxEntry = Collections.max(map.entrySet(), new Comparator<Entry<K, V>>() {\r\n        public int compare(Entry<K, V> e1, Entry<K, V> e2) {\r\n            return e1.getValue()\r\n                .compareTo(e2.getValue());\r\n        }\r\n    });\r\n    return maxEntry.getValue();\r\n}\r\n```","```\r\npublic <K, V extends Comparable<V>> V maxUsingCollectionsMaxAndLambda(Map<K, V> map) {\r\n    Entry<K, V> maxEntry = Collections.max(map.entrySet(), (Entry<K, V> e1, Entry<K, V> e2) -> e1.getValue()\r\n        .compareTo(e2.getValue()));\r\n    return maxEntry.getValue();\r\n}\r\n```","```\r\npublic <K, V extends Comparable<V>> V maxUsingStreamAndLambda(Map<K, V> map) {\r\n    Optional<Entry<K, V>> maxEntry = map.entrySet()\r\n        .stream()\r\n        .max((Entry<K, V> e1, Entry<K, V> e2) -> e1.getValue()\r\n            .compareTo(e2.getValue())\r\n        );\r\n\r\n    return maxEntry.get().getValue();\r\n}\r\n```","```\r\npublic <K, V extends Comparable<V>> V maxUsingStreamAndMethodReference(Map<K, V> map) {\r\n    Optional<Entry<K, V>> maxEntry = map.entrySet()\r\n        .stream()\r\n        .max(Comparator.comparing(Map.Entry::getValue));\r\n    return maxEntry.get()\r\n        .getValue();\r\n}\r\n```"]