["```\r\npublic class User {\r\n\r\n    private long id;\r\n    private String name;\r\n\r\n    public User(long id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return MoreObjects.toStringHelper(this)\r\n            .add(\"id\", id)\r\n            .add(\"name\", name)\r\n            .toString();\r\n    }\r\n} \r\n```","```\r\nUser user = new User(12L, \"John Doe\");\r\nString userState = user.toString();\r\n// userState: User{ id=12,name=John Doe } \r\n```","```\r\n@Override\r\npublic String toString() {\r\n    return MoreObjects.toStringHelper(User.class)\r\n        .add(\"id\", id)\r\n        .add(\"name\", name)\r\n        .toString();\r\n}\r\n```","```\r\n@Override\r\npublic String toString() {\r\n    return MoreObjects.toStringHelper(\"User\")\r\n        .add(\"id\", id)\r\n        .add(\"name\", name)\r\n        .toString();\r\n}\r\n```","```\r\npublic class Player extends User {\r\n    public Player(long id, String name) {\r\n        super(id, name);\r\n    }\r\n}\r\n\r\npublic class Administrator extends User {\r\n    public Administrator(long id, String name) {\r\n        super(id, name);\r\n    }\r\n}\r\n```","```\r\nList<User> users = new ArrayList<>();\r\nusers.add(new User(1L, \"John\", 45));\r\nusers.add(new User(2L, \"Michelle\", 27));\r\nusers.add(new User(3L, \"Max\", 16));\r\nusers.add(new User(4L, \"Sue\", 10));\r\nusers.add(new User(5L, \"Bill\", 65));\r\n\r\nPredicate<User> byAge = user -> user.getAge() >= 18;\r\n\r\nList<String> results = FluentIterable.from(users)\r\n                           .filter(byAge)\r\n                           .transform(Functions.toStringFunction())\r\n                           .toList(); \r\n```","```\r\nUser[] usersArray = { new User(1L, \"John\", 45), new User(2L, \"Max\", 15) } ;\r\nFluentIterable<User> users = FluentIterable.of(usersArray); \r\n```","```\r\nUser[] usersArray = {new User(1L, \"John\", 45), new User(2L, \"Max\", 15)};\r\n\r\nFluentIterable<User> users = FluentIterable.of(usersArray).append(\r\n                                 new User(3L, \"Sue\", 23),\r\n                                 new User(4L, \"Bill\", 17)\r\n                             ); \r\n```","```\r\nUser[] usersArray = { new User(1L, \"John\", 45), new User(2L, \"Max\", 15) };\r\n\r\nList<User> usersList = new ArrayList<>();\r\nusersList.add(new User(3L, \"Diana\", 32));\r\n\r\nFluentIterable<User> users = FluentIterable.of(usersArray).append(usersList); \r\n```","```\r\nUser[] usersArray = { new User(1L, \"John\", 45), new User(2L, \"Max\", 15) };\r\nFluentIterable<User> users = FluentIterable.of(usersArray);\r\nString usersString = users.join(Joiner.on(\"; \")); \r\n```","```\r\nint receivedData = 123;\r\nHashCode hashCode = Hashing.crc32c().hashInt(receivedData);\r\n// hashCode: 495be649\r\n```","```\r\nInetAddress address = InetAddress.getByName(\"127.0.0.5\");\r\nInetAddress decrementedAddress = InetAddresses.decrement(address);\r\n// decrementedAddress: 127.0.0.4\r\n```","```\r\nConcurrentHashMap<String, Boolean> threadExecutions = new ConcurrentHashMap<>();\r\nRunnable logThreadRun = () -> threadExecutions.put(Thread.currentThread().getName(), true);\r\n\r\nThread t = new Thread(logThreadRun);\r\nt.run();\r\n\r\nBoolean isThreadExecuted = threadExecutions.get(\"main\");\r\n```","```\r\nExecutorService executorService = Executors.newFixedThreadPool(2);\r\nexecutorService.submit(logThreadRun);\r\nexecutorService.submit(logThreadRun);\r\nexecutorService.shutdown();\r\n\r\nBoolean isThread1Executed = threadExecutions.get(\"pool-1-thread-1\");\r\nBoolean isThread2Executed = threadExecutions.get(\"pool-1-thread-2\");\r\n// isThread1Executed: true\r\n// isThread2Executed: true\r\n```","```\r\nExecutor executor = MoreExecutors.directExecutor();\r\nexecutor.execute(logThreadRun);\r\n\r\nBoolean isThreadExecuted = threadExecutions.get(\"main\");\r\n// isThreadExecuted: true\r\n```","```\r\nListeningExecutorService executor = MoreExecutors.newDirectExecutorService();\r\nexecutor.execute(logThreadRun); \r\n```"]