["```\r\n<dependency>\r\n    <groupId>net.java.dev.jna</groupId>\r\n    <artifactId>jna-platform</artifactId>\r\n    <version>5.6.0</version>\r\n</dependency> \r\n```","```\r\n#include <math.h>\r\n#include <stdio.h>\r\nint main(int argc, char** argv) {\r\n    double v = cosh(0.0);\r\n    printf(\"Result: %f\\n\", v);\r\n}\r\n```","```\r\npublic interface CMath extends Library { \r\n    double cosh(double value);\r\n} \r\n```","```\r\nCMath lib = Native.load(Platform.isWindows()?\"msvcrt\":\"c\", CMath.class);\r\ndouble result = lib.cosh(0); \r\n```","```\r\npublic interface CMath extends Library {\r\n    CMath INSTANCE = Native.load(Platform.isWindows() ? \"msvcrt\" : \"c\", CMath.class);\r\n    double cosh(double value);\r\n} \r\n```","```\r\nstruct foo_t {\r\n    int field1;\r\n    int field2;\r\n    char *field3;\r\n};\r\n```","```\r\n@FieldOrder({\"field1\",\"field2\",\"field3\"})\r\npublic class FooType extends Structure {\r\n    int field1;\r\n    int field2;\r\n    String field3;\r\n};\r\n```","```\r\npublic class MyUnion extends Union {\r\n    public String foo;\r\n    public double bar;\r\n}; \r\n```","```\r\nMyUnion u = new MyUnion();\r\nu.foo = \"test\";\r\nu.setType(String.class);\r\nlib.some_method(u); \r\n```","```\r\nu.foo = \"test\";\r\nu.setType(\"foo\");\r\nlib.some_method(u);\r\n```","```\r\npublic interface StdC extends Library {\r\n    StdC INSTANCE = // ... instance creation omitted\r\n    Pointer malloc(long n);\r\n    void free(Pointer p);\r\n} \r\n```","```\r\nStdC lib = StdC.INSTANCE;\r\nPointer p = lib.malloc(1024);\r\np.setMemory(0l, 1024l, (byte) 0);\r\nlib.free(p); \r\n```","```\r\nint fd = open(\"some path\", O_RDONLY);\r\nif (fd < 0) {\r\n    printf(\"Open failed: errno=%d\\n\", errno);\r\n    exit(1);\r\n}\r\n```","```\r\n// ... excerpt from bits/errno.h on Linux\r\n#define errno (*__errno_location ())\r\n\r\n// ... excerpt from <errno.h> from Visual Studio\r\n#define errno (*_errno())\r\n```","```\r\npublic interface StdC extends Library {\r\n    // ... other methods omitted\r\n    int open(String path, int flags) throws LastErrorException;\r\n    int close(int fd) throws LastErrorException;\r\n} \r\n```","```\r\nStdC lib = StdC.INSTANCE;\r\nint fd = 0;\r\ntry {\r\n    fd = lib.open(\"/some/path\",0);\r\n    // ... use fd\r\n}\r\ncatch (LastErrorException err) {\r\n    // ... error handling\r\n}\r\nfinally {\r\n    if (fd > 0) {\r\n       lib.close(fd);\r\n    }\r\n} \r\n```","```\r\nNative.setProtected(true);\r\nPointer p = new Pointer(0l);\r\ntry {\r\n    p.setMemory(0, 100*1024, (byte) 0);\r\n}\r\ncatch (Error err) {\r\n    // ... error handling omitted\r\n} \r\n```"]