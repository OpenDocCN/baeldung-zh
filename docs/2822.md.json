["```\r\npublic interface DateValidator {\r\n   boolean isValid(String dateStr);\r\n}\r\n```","```\r\npublic class DateValidatorUsingDateFormat implements DateValidator {\r\n    private String dateFormat;\r\n\r\n    public DateValidatorUsingDateFormat(String dateFormat) {\r\n        this.dateFormat = dateFormat;\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String dateStr) {\r\n        DateFormat sdf = new SimpleDateFormat(this.dateFormat);\r\n        sdf.setLenient(false);\r\n        try {\r\n            sdf.parse(dateStr);\r\n        } catch (ParseException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nDateValidator validator = new DateValidatorUsingDateFormat(\"MM/dd/yyyy\");\r\n\r\nassertTrue(validator.isValid(\"02/28/2019\"));        \r\nassertFalse(validator.isValid(\"02/30/2019\"));\r\n```","```\r\npublic static LocalDate parse​(CharSequence text)\r\n// parses dates using using DateTimeFormatter.ISO_LOCAL_DATE\r\n\r\npublic static LocalDate parse​(CharSequence text, DateTimeFormatter formatter)\r\n// parses dates using the provided formatter\r\n```","```\r\npublic class DateValidatorUsingLocalDate implements DateValidator {\r\n    private DateTimeFormatter dateFormatter;\r\n\r\n    public DateValidatorUsingLocalDate(DateTimeFormatter dateFormatter) {\r\n        this.dateFormatter = dateFormatter;\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String dateStr) {\r\n        try {\r\n            LocalDate.parse(dateStr, this.dateFormatter);\r\n        } catch (DateTimeParseException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nDateTimeFormatter dateFormatter = DateTimeFormatter.BASIC_ISO_DATE;\r\nDateValidator validator = new DateValidatorUsingLocalDate(dateFormatter);\r\n\r\nassertTrue(validator.isValid(\"20190228\"));\r\nassertFalse(validator.isValid(\"20190230\"));\r\n```","```\r\npublic class DateValidatorUsingDateTimeFormatter implements DateValidator {\r\n    private DateTimeFormatter dateFormatter;\r\n\r\n    public DateValidatorUsingDateTimeFormatter(DateTimeFormatter dateFormatter) {\r\n        this.dateFormatter = dateFormatter;\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String dateStr) {\r\n        try {\r\n            this.dateFormatter.parse(dateStr);\r\n        } catch (DateTimeParseException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nDateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"uuuu-MM-dd\", Locale.US)\r\n    .withResolverStyle(ResolverStyle.STRICT);\r\nDateValidator validator = new DateValidatorUsingDateTimeFormatter(dateFormatter);\r\n\r\nassertTrue(validator.isValid(\"2019-02-28\"));\r\nassertFalse(validator.isValid(\"2019-02-30\"));\r\n```","```\r\npublic static boolean isDate(String value, Locale locale)\r\n\r\npublic static boolean isDate(String value,String datePattern, boolean strict)\r\n```","```\r\n<dependency>\r\n    <groupId>commons-validator</groupId>\r\n    <artifactId>commons-validator</artifactId>\r\n    <version>1.6</version>\r\n</dependency>\r\n```","```\r\nassertTrue(GenericValidator.isDate(\"2019-02-28\", \"yyyy-MM-dd\", true));\r\nassertFalse(GenericValidator.isDate(\"2019-02-29\", \"yyyy-MM-dd\", true));\r\n```"]