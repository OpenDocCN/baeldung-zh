["```\r\npublic long factorialUsingForLoop(int n) {\r\n    long fact = 1;\r\n    for (int i = 2; i <= n; i++) {\r\n        fact = fact * i;\r\n    }\r\n    return fact;\r\n}\r\n```","```\r\npublic long factorialUsingStreams(int n) {\r\n    return LongStream.rangeClosed(1, n)\r\n        .reduce(1, (long x, long y) -> x * y);\r\n}\r\n```","```\r\npublic long factorialUsingRecursion(int n) {\r\n    if (n <= 2) {\r\n        return n;\r\n    }\r\n    return n * factorialUsingRecursion(n - 1);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-math3</artifactId>\r\n    <version>3.6.1</version>\r\n</dependency>\r\n```","```\r\npublic long factorialUsingApacheCommons(int n) {\r\n    return CombinatoricsUtils.factorial(n);\r\n}\r\n```","```\r\npublic BigInteger factorialHavingLargeResult(int n) {\r\n    BigInteger result = BigInteger.ONE;\r\n    for (int i = 2; i <= n; i++)\r\n        result = result.multiply(BigInteger.valueOf(i));\r\n    return result;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic BigInteger factorialUsingGuava(int n) {\r\n    return BigIntegerMath.factorial(n);\r\n}\r\n```"]