["```\r\n<dependency>\r\n  <groupId>org.eclipse.paho</groupId>\r\n  <artifactId>org.eclipse.paho.client.mqttv3</artifactId>\r\n  <version>1.2.0</version>\r\n</dependency>\r\n```","```\r\nString publisherId = UUID.randomUUID().toString();\r\nIMqttClient publisher = new MqttClient(\"tcp://iot.eclipse.org:1883\",publisherId);\r\n```","```\r\nMqttConnectOptions options = new MqttConnectOptions();\r\noptions.setAutomaticReconnect(true);\r\noptions.setCleanSession(true);\r\noptions.setConnectionTimeout(10);\r\npublisher.connect(options);\r\n```","```\r\npublic class EngineTemperatureSensor implements Callable<Void> {\r\n\r\n    // ... private members omitted\r\n\r\n    public EngineTemperatureSensor(IMqttClient client) {\r\n        this.client = client;\r\n    }\r\n\r\n    @Override\r\n    public Void call() throws Exception {        \r\n        if ( !client.isConnected()) {\r\n            return null;\r\n        }           \r\n        MqttMessage msg = readEngineTemp();\r\n        msg.setQos(0);\r\n        msg.setRetained(true);\r\n        client.publish(TOPIC,msg);        \r\n        return null;        \r\n    }\r\n\r\n    private MqttMessage readEngineTemp() {             \r\n        double temp =  80 + rnd.nextDouble() * 20.0;        \r\n        byte[] payload = String.format(\"T:%04.2f\",temp)\r\n          .getBytes();        \r\n        return new MqttMessage(payload);           \r\n    }\r\n}\r\n```","```\r\nCountDownLatch receivedSignal = new CountDownLatch(10);\r\nsubscriber.subscribe(EngineTemperatureSensor.TOPIC, (topic, msg) -> {\r\n    byte[] payload = msg.getPayload();\r\n    // ... payload handling omitted\r\n    receivedSignal.countDown();\r\n});    \r\nreceivedSignal.await(1, TimeUnit.MINUTES);\r\n```"]