["```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-hystrix</artifactId>\r\n    <version>1.4.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-rx</artifactId>\r\n    <version>1.4.6</version>\r\n</dependency>\r\n```","```\r\npublic class HystrixReactiveHttpCommand extends HystrixObservableCommand<String> {\r\n\r\n    //...\r\n\r\n    @Override\r\n    protected Observable<String> construct() {\r\n        return RxRatpack.observe(httpClient\r\n          .get(uri, r -> r.headers(h -> h.add(\"User-Agent\", \"Baeldung HttpClient\")))\r\n          .map(res -> res.getBody().getText()));\r\n    }\r\n\r\n    @Override\r\n    protected Observable<String> resumeWithFallback() {\r\n        return Observable.just(\"eugenp's reactive fallback profile\");\r\n    }\r\n}\r\n```","```\r\nchain.get(\"rx\", ctx -> \r\n  new HystrixReactiveHttpCommand(\r\n    ctx.get(HttpClient.class), eugenGithubProfileUri, timeout)\r\n    .toObservable()\r\n    .subscribe(ctx::render));\r\n```","```\r\n@Test\r\npublic void whenFetchReactive_thenGotEugenProfile() {\r\n    assertThat(appUnderTest.getHttpClient().getText(\"rx\"), \r\n      containsString(\"www.baeldung.com\"));\r\n}\r\n```","```\r\nchain.get(\"async\", ctx -> ctx.render(\r\n  new HystrixAsyncHttpCommand(eugenGithubProfileUri, timeout)\r\n    .queue()\r\n    .get()));\r\n```","```\r\npublic class HystrixAsyncHttpCommand extends HystrixCommand<String> {\r\n\r\n    //...\r\n\r\n    @Override\r\n    protected String run() throws Exception {\r\n        return EntityUtils.toString(HttpClientBuilder.create()\r\n          .setDefaultRequestConfig(requestConfig)\r\n          .setDefaultHeaders(Collections.singleton(\r\n            new BasicHeader(\"User-Agent\", \"Baeldung Blocking HttpClient\")))\r\n          .build().execute(new HttpGet(uri)).getEntity());\r\n    }\r\n\r\n    @Override\r\n    protected String getFallback() {\r\n        return \"eugenp's async fallback profile\";\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenFetchAsync_thenGotEugenProfile() {\r\n    assertThat(appUnderTest.getHttpClient().getText(\"async\"),\r\n      containsString(\"www.baeldung.com\"));\r\n}\r\n```","```\r\nchain.get(\"sync\", ctx -> ctx.render(\r\n  new HystrixSyncHttpCommand(eugenGithubProfileUri, timeout).execute()));\r\n```","```\r\n@Test\r\npublic void whenFetchSync_thenGotEugenProfile() {\r\n    assertThat(appUnderTest.getHttpClient().getText(\"sync\"),\r\n      containsString(\"www.baeldung.com\"));\r\n}\r\n```","```\r\nserverSpec.registry(\r\n  Guice.registry(spec -> spec.module(new HystrixModule().sse())))\r\n  .handlers(c -> c.get(\"hystrix\", new HystrixMetricsEventStreamHandler()));\r\n```","```\r\npublic class HystrixModule extends ConfigurableModule<HystrixModule.Config> {\r\n\r\n    //...\r\n\r\n    @Override\r\n    protected void configure() {\r\n      try {\r\n        HystrixPlugins.getInstance().registerConcurrencyStrategy(\r\n          new HystrixRegistryBackedConcurrencyStrategy());\r\n      } catch (IllegalStateException e) {\r\n        //...\r\n      }\r\n    }\r\n\r\n    //...\r\n\r\n}\r\n```"]