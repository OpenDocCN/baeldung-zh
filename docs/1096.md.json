["```\r\npublic final class Singleton {\r\n    private static final Singleton instance = new Singleton();\r\n\r\n    private Singleton() {}\r\n\r\n    public static Singleton getInstance() {\r\n        return instance;\r\n    }\r\n} \r\n```","```\r\n@Singleton\r\npublic class CarServiceSingleton {\r\n    // ...\r\n} \r\n```","```\r\n@Test\r\npublic void givenASingleton_whenGetBeanIsCalledTwice_thenTheSameInstanceIsReturned() {       \r\n    CarServiceSingleton one = getBean(CarServiceSingleton.class);\r\n    CarServiceSingleton two = getBean(CarServiceSingleton.class);\r\n    assertTrue(one == two);\r\n} \r\n```","```\r\nprivate static int serviceQueue;\r\n\r\npublic int service(Car car) {\r\n    serviceQueue++;\r\n    Thread.sleep(100);\r\n    car.setServiced(true); \r\n    serviceQueue--;\r\n    return serviceQueue;\r\n} \r\n```","```\r\n@Test\r\npublic void whenEjb_thenLockingIsProvided() {\r\n    for (int i = 0; i < 10; i++) {\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                int serviceQueue = carServiceEjbSingleton.service(new Car(\"Speedster xyz\"));\r\n                assertEquals(0, serviceQueue);\r\n            }\r\n        }).start();\r\n    }\r\n    return;\r\n} \r\n```"]