["```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-document</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-key-value</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-column</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-document</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>mongodb-driver</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n#Define Host and Port\r\nmongodb-server-host-1=localhost:27017\r\n```","```\r\nMap<String, Object> map = new HashMap<>();\r\nmap.put(\"mongodb-server-host-1\", \"localhost:27017\");\r\n```","```\r\nDocumentConfiguration configuration = new MongoDBDocumentConfiguration();\r\n```","```\r\nDocumentCollectionManagerFactory managerFactory = configuration.get();\r\n```","```\r\nDocumentCollectionManagerFactory managerFactory \r\n  = configuration.get(Settings.of(map));\r\n```","```\r\nDocumentCollectionManager manager = managerFactory.get(\"my-db\");\r\n```","```\r\nDocumentEntity documentEntity = DocumentEntity.of(\"books\");\r\ndocumentEntity.add(Document.of(\"_id\", \"100\"));\r\ndocumentEntity.add(Document.of(\"name\", \"JNoSQL in Action\"));\r\ndocumentEntity.add(Document.of(\"pages\", \"620\"));\r\nDocumentEntity saved = manager.insert(documentEntity);\r\n```","```\r\nDocumentQuery query = select().from(\"books\").where(\"_id\").eq(100).build();\r\nList<DocumentEntity> entities = manager.select(query);\r\n```","```\r\nsaved.add(Document.of(\"author\", \"baeldung\"));\r\nDocumentEntity updated = manager.update(saved);\r\n```","```\r\nDocumentDeleteQuery deleteQuery = delete().from(\"books\").where(\"_id\").eq(\"100\").build();\r\nmanager.delete(deleteQuery);\r\n```","```\r\nDefaultDocumentEntity{documents={pages=620, name=JNoSQL in Action, _id=100}, name='books'}\r\nDefaultDocumentEntity{documents={pages=620, author=baeldung, name=JNoSQL in Action, _id=100}, name='books'}\r\n[]\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-column</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>cassandra-driver</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\nColumnConfiguration configuration = new CassandraConfiguration();\r\nColumnFamilyManagerFactory managerFactory = configuration.get();\r\nColumnFamilyManager entityManager = managerFactory.get(\"my-keySpace\");\r\n```","```\r\nColumnEntity columnEntity = ColumnEntity.of(\"books\");\r\nColumn key = Columns.of(\"id\", 10L);\r\nColumn name = Columns.of(\"name\", \"JNoSQL in Action\");\r\ncolumnEntity.add(key);\r\ncolumnEntity.add(name);\r\nColumnEntity saved = entityManager.insert(columnEntity);\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>diana-key-value</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>hazelcast-driver</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\nKeyValueConfiguration configuration = new HazelcastKeyValueConfiguration();\r\nBucketManagerFactory managerFactory = configuration.get();\r\nBucketManager entityManager = managerFactory.getBucketManager(\"books\"); \r\n```","```\r\npublic class Book implements Serializable {\r\n\r\n    private String isbn;\r\n    private String name;\r\n    private String author;\r\n    private int pages;\r\n\r\n    // standard constructor\r\n    // standard getters and setters\r\n}\r\n```","```\r\nBook book = new Book(\r\n  \"12345\", \"JNoSQL in Action\", \r\n  \"baeldung\", 420);\r\nKeyValueEntity keyValueEntity = KeyValueEntity.of(\r\n  book.getIsbn(), book);\r\nentityManager.put(keyValueEntity);\r\n```","```\r\nOptional<Value> optionalValue = manager.get(\"12345\");\r\nValue value = optionalValue.get(); // or any other adequate Optional handling\r\nBook savedBook = value.get(Book.class);\r\n```","```\r\n<dependency>\r\n    <groupId>org.jnosql.artemis</groupId>\r\n    <artifactId>artemis-configuration</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jnosql.artemis</groupId>\r\n    <artifactId>artemis-document</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jnosql.diana</groupId>\r\n    <artifactId>mongodb-driver</artifactId>\r\n    <version>0.0.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>javax</groupId>\r\n    <artifactId>javaee-web-api</artifactId>\r\n    <version>8.0</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\n[\r\n    {\r\n        \"description\": \"The mongodb document configuration\",\r\n        \"name\": \"document\",\r\n        \"provider\": \"org.jnosql.diana.mongodb.document.MongoDBDocumentConfiguration\",\r\n        \"settings\": {\r\n            \"mongodb-server-host-1\":\"localhost:27019\"\r\n        }\r\n    }\r\n]\r\n```","```\r\n@Inject\r\n@ConfigurationUnit(name = \"document\")\r\nprivate DocumentCollectionManagerFactory<MongoDBDocumentCollectionManager> managerFactory;\r\n```","```\r\n@Produces\r\npublic MongoDBDocumentCollectionManager getEntityManager() {\r\n    return managerFactory.get(\"todos\");\r\n}\r\n```","```\r\n@Entity\r\npublic class Todo implements Serializable {\r\n\r\n    @Id(\"id\")\r\n    public long id;\r\n\r\n    @Column\r\n    public String name;\r\n\r\n    @Column\r\n    public String description;\r\n\r\n    // standard constructor\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Inject\r\nDocumentTemplate documentTemplate;\r\n```","```\r\npublic Todo add(Todo todo) {\r\n    return documentTemplate.insert(todo);\r\n}\r\n```","```\r\npublic Todo get(String id) {\r\n    Optional<Todo> todo = documentTemplate\r\n      .find(Todo.class, id);\r\n    return todo.get(); // or any other proper Optional handling\r\n}\r\n```","```\r\npublic List<Todo> getAll() {\r\n    DocumentQuery query = select().from(\"Todo\").build();\r\n    return documentTemplate.select(query);\r\n}\r\n```","```\r\npublic void delete(String id) {\r\n    documentTemplate.delete(Todo.class, id);\r\n}\r\n```","```\r\npublic interface TodoRepository extends Repository<Todo, String> {\r\n    List<Todo> findByName(String name);\r\n    List<Todo> findAll();\r\n}\r\n```","```\r\n@Inject\r\nTodoRepository todoRepository;\r\n```","```\r\n@Inject\r\n@Database(value = DatabaseType.DOCUMENT)\r\nTodoRepository todoRepository;\r\n```","```\r\n@Inject\r\n@Database(value = DatabaseType.DOCUMENT, provider=\"org.jnosql.diana.mongodb.document.MongoDBDocumentConfiguration\")\r\nTodoRepository todoRepository;\r\n```","```\r\nmvn package liberty:run\r\n```","```\r\ncurl -d '{\"id\":\"120\", \"name\":\"task120\", \"description\":\"Description 120\"}' -H \"Content-Type: application/json\" -X POST http://localhost:9080/jnosql-artemis/todos\r\n```","```\r\ncurl -H \"Accept: application/json\" -X GET http://localhost:9080/jnosql-artemis/todos\r\n```","```\r\ncurl -H \"Accept: application/json\" -X GET http://localhost:9080/jnosql-artemis/todos/120\r\n```"]