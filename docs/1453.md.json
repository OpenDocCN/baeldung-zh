["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.4</version>\r\n</dependency>\r\n```","```\r\nBiMap<Integer, String> daysOfWeek = HashBiMap.create();\r\n```","```\r\ndaysOfWeek.put(1, \"Monday\");\r\ndaysOfWeek.put(2, \"Tuesday\");\r\ndaysOfWeek.put(3, \"Wednesday\");\r\ndaysOfWeek.put(4, \"Thursday\");\r\ndaysOfWeek.put(5, \"Friday\");\r\ndaysOfWeek.put(6, \"Saturday\");\r\ndaysOfWeek.put(7, \"Sunday\");\r\n```","```\r\n@Test\r\npublic void givenBiMap_whenValue_thenKeyReturned() {\r\n    assertEquals(Integer.valueOf(7), daysOfWeek.inverse().get(\"Sunday\"));\r\n}\r\n\r\n@Test\r\npublic void givenBiMap_whenKey_thenValueReturned() {\r\n    assertEquals(\"Tuesday\", daysOfWeek.get(2));\r\n}\r\n```","```\r\nBidiMap<Integer, String> daysOfWeek = new TreeBidiMap<Integer, String>();\r\n```","```\r\n@Test\r\npublic void givenBidiMap_whenValue_thenKeyReturned() {\r\n    assertEquals(Integer.valueOf(7), daysOfWeek.inverseBidiMap().get(\"Sunday\"));\r\n}\r\n\r\n@Test\r\npublic void givenBidiMap_whenKey_thenValueReturned() {\r\n    assertEquals(\"Tuesday\", daysOfWeek.get(2));\r\n}\r\n```","```\r\nMultimap<String, String> groceryCart = ArrayListMultimap.create();\r\n\r\ngroceryCart.put(\"Fruits\", \"Apple\");\r\ngroceryCart.put(\"Fruits\", \"Grapes\");\r\ngroceryCart.put(\"Fruits\", \"Strawberries\");\r\ngroceryCart.put(\"Vegetables\", \"Spinach\");\r\ngroceryCart.put(\"Vegetables\", \"Cabbage\");\r\n```","```\r\n@Test\r\npublic void givenMultiValuedMap_whenFruitsFetched_thenFruitsReturned() {\r\n    List<String> fruits = Arrays.asList(\"Apple\", \"Grapes\", \"Strawberries\");\r\n    assertEquals(fruits, groceryCart.get(\"Fruits\"));\r\n}\r\n\r\n@Test\r\npublic void givenMultiValuedMap_whenVeggiesFetched_thenVeggiesReturned() {\r\n    List<String> veggies = Arrays.asList(\"Spinach\", \"Cabbage\");\r\n    assertEquals(veggies, groceryCart.get(\"Vegetables\"));\r\n} \r\n```","```\r\n@Test\r\npublic void givenMultiValuedMap_whenFuitsRemoved_thenVeggiesPreserved() {\r\n\r\n    assertEquals(5, groceryCart.size());\r\n\r\n    groceryCart.remove(\"Fruits\", \"Apple\");\r\n    assertEquals(4, groceryCart.size());\r\n\r\n    groceryCart.removeAll(\"Fruits\");\r\n    assertEquals(2, groceryCart.size());\r\n}\r\n```","```\r\nMultiValuedMap<String, String> groceryCart = new ArrayListValuedHashMap<>();\r\n```","```\r\n@Test\r\npublic void givenMultiValuedMap_whenFruitsFetched_thenFruitsReturned() {\r\n    List<String> fruits = Arrays.asList(\"Apple\", \"Grapes\", \"Strawberries\");\r\n    assertEquals(fruits, groceryCart.get(\"Fruits\"));\r\n}\r\n\r\n@Test\r\npublic void givenMultiValuedMap_whenVeggiesFetched_thenVeggiesReturned() {\r\n    List<String> veggies = Arrays.asList(\"Spinach\", \"Cabbage\");\r\n    assertEquals(veggies, groceryCart.get(\"Vegetables\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMultiValuedMap_whenFuitsRemoved_thenVeggiesPreserved() {\r\n    assertEquals(5, groceryCart.size());\r\n\r\n    groceryCart.remove(\"Fruits\");\r\n    assertEquals(2, groceryCart.size());\r\n}\r\n```","```\r\ncityCoordinates.put(\"40.7128° N\", \"74.0060° W\", \"New York\");\r\ncityCoordinates.put(\"48.8566° N\", \"2.3522° E\", \"Paris\");\r\ncityCoordinates.put(\"19.0760° N\", \"72.8777° E\", \"Mumbai\");\r\n```","```\r\nTable<String, String, String> cityCoordinates = HashBasedTable.create();\r\n```","```\r\n@Test\r\npublic void givenCoordinatesTable_whenFetched_thenOK() {\r\n\r\n    List expectedLongitudes = Arrays.asList(\"74.0060° W\", \"2.3522° E\", \"72.8777° E\");\r\n    assertArrayEquals(expectedLongitudes.toArray(), cityCoordinates.columnKeySet().toArray());\r\n\r\n    List expectedCities = Arrays.asList(\"New York\", \"Paris\", \"Mumbai\");\r\n    assertArrayEquals(expectedCities.toArray(), cityCoordinates.values().toArray());\r\n    assertTrue(cityCoordinates.rowKeySet().contains(\"48.8566° N\"));\r\n}\r\n```","```\r\nTable<String, String, String> movies = HashBasedTable.create();\r\n\r\nmovies.put(\"Tom Hanks\", \"Meg Ryan\", \"You've Got Mail\");\r\nmovies.put(\"Tom Hanks\", \"Catherine Zeta-Jones\", \"The Terminal\");\r\nmovies.put(\"Bradley Cooper\", \"Lady Gaga\", \"A Star is Born\");\r\nmovies.put(\"Keenu Reaves\", \"Sandra Bullock\", \"Speed\");\r\nmovies.put(\"Tom Hanks\", \"Sandra Bullock\", \"Extremely Loud & Incredibly Close\");\r\n```","```\r\n@Test\r\npublic void givenMoviesTable_whenFetched_thenOK() {\r\n    assertEquals(3, movies.row(\"Tom Hanks\").size());\r\n    assertEquals(2, movies.column(\"Sandra Bullock\").size());\r\n    assertEquals(\"A Star is Born\", movies.get(\"Bradley Cooper\", \"Lady Gaga\"));\r\n    assertTrue(movies.containsValue(\"Speed\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCoordinatesMultiKeyMap_whenQueried_thenOK() {\r\n    MultiKeyMap<String, String> cityCoordinates = new MultiKeyMap<String, String>();\r\n\r\n    // populate with keys and values as shown previously\r\n\r\n    List expectedLongitudes = Arrays.asList(\"72.8777° E\", \"2.3522° E\", \"74.0060° W\");\r\n    List longitudes = new ArrayList<>();\r\n\r\n    cityCoordinates.forEach((key, value) -> {\r\n      longitudes.add(key.getKey(1));\r\n    });\r\n    assertArrayEquals(expectedLongitudes.toArray(), longitudes.toArray());\r\n\r\n    List expectedCities = Arrays.asList(\"Mumbai\", \"Paris\", \"New York\");\r\n    List cities = new ArrayList<>();\r\n\r\n    cityCoordinates.forEach((key, value) -> {\r\n      cities.add(value);\r\n    });\r\n    assertArrayEquals(expectedCities.toArray(), cities.toArray());\r\n}\r\n```","```\r\n@Test\r\npublic void givenDaysMultiKeyMap_whenFetched_thenOK() {\r\n    days = new MultiKeyMap<String, String>();\r\n    days.put(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Weekday\");\r\n    days.put(\"Saturday\", \"Sunday\", \"Weekend\");\r\n\r\n    assertFalse(days.get(\"Saturday\", \"Sunday\").equals(\"Weekday\"));\r\n}\r\n```"]