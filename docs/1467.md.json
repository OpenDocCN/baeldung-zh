["```\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Lampshade\",\r\n    \"price\": 0\r\n}\r\n```","```\r\n{\r\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r\n    \"title\": \"Product\",\r\n    \"description\": \"A product from the catalog\",\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"id\": {\r\n            \"description\": \"The unique identifier for a product\",\r\n            \"type\": \"integer\"\r\n        },\r\n        \"name\": {\r\n            \"description\": \"Name of the product\",\r\n            \"type\": \"string\"\r\n        },\r\n        \"price\": {\r\n            \"type\": \"number\",\r\n            \"minimum\": 0,\r\n            \"exclusiveMinimum\": true\r\n        }\r\n    },\r\n    \"required\": [\"id\", \"name\", \"price\"]\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.networknt</groupId>\r\n    <artifactId>json-schema-validator</artifactId>\r\n    <version>1.0.72</version>\r\n</dependency> \r\n```","```\r\n@Test\r\npublic void givenInvalidInput_whenValidating_thenInvalid() throws IOException {\r\n    JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V4);\r\n    JsonSchema jsonSchema = factory.getSchema(\r\n     JSONSchemaUnitTest.class.getResourceAsStream(\"/schema.json\"));\r\n    JsonNode jsonNode = mapper.readTree(\r\n     JSONSchemaUnitTest.class.getResourceAsStream(\"/product_invalid.json\"));\r\n    Set<ValidationMessage> errors = jsonSchema.validate(jsonNode);\r\n    assertThat(errors).isNotEmpty().asString().contains(\"price: must have a minimum value of 0\");\r\n}\r\n```","```\r\n@Test \r\npublic void givenValidInput_whenValidating_thenValid() throws ValidationException { \r\n    JsonSchemaFactory factory = JsonSchemaFactory.getInstance(SpecVersion.VersionFlag.V4); \r\n    JsonSchema jsonSchema = factory.getSchema( \r\n     JSONSchemaUnitTest.class.getResourceAsStream(\"/schema.json\")); \r\n    JsonNode jsonNode = mapper.readTree( \r\n     JSONSchemaUnitTest.class.getResourceAsStream(\"/product_valid.json\")); \r\n    Set<ValidationMessage> errors = jsonSchema.validate(jsonNode); \r\n    assertThat(errors).isEmpty(); \r\n}\r\n```"]