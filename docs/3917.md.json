["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>    \r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jdbc</artifactId>\r\n</dependency>  \r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth</groupId>\r\n    <artifactId>spring-security-oauth2</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableAuthorizationServer\r\npublic class AuthServerOAuth2Config\r\n  extends AuthorizationServerConfigurerAdapter {\r\n\r\n    @Autowired\r\n    @Qualifier(\"authenticationManagerBean\")\r\n    private AuthenticationManager authenticationManager;\r\n\r\n    @Override\r\n    public void configure(\r\n      AuthorizationServerSecurityConfigurer oauthServer) \r\n      throws Exception {\r\n        oauthServer\r\n          .tokenKeyAccess(\"permitAll()\")\r\n          .checkTokenAccess(\"isAuthenticated()\");\r\n    }\r\n\r\n    @Override\r\n    public void configure(ClientDetailsServiceConfigurer clients) \r\n      throws Exception {\r\n        clients.jdbc(dataSource())\r\n          .withClient(\"sampleClientId\")\r\n          .authorizedGrantTypes(\"implicit\")\r\n          .scopes(\"read\")\r\n          .autoApprove(true)\r\n          .and()\r\n          .withClient(\"clientIdPassword\")\r\n          .secret(\"secret\")\r\n          .authorizedGrantTypes(\r\n            \"password\",\"authorization_code\", \"refresh_token\")\r\n          .scopes(\"read\");\r\n    }\r\n\r\n    @Override\r\n    public void configure(\r\n      AuthorizationServerEndpointsConfigurer endpoints) \r\n      throws Exception {\r\n\r\n        endpoints\r\n          .tokenStore(tokenStore())\r\n          .authenticationManager(authenticationManager);\r\n    }\r\n\r\n    @Bean\r\n    public TokenStore tokenStore() {\r\n        return new JdbcTokenStore(dataSource());\r\n    }\r\n}\r\n```","```\r\n@Value(\"classpath:schema.sql\")\r\nprivate Resource schemaScript;\r\n\r\n@Bean\r\npublic DataSourceInitializer dataSourceInitializer(DataSource dataSource) {\r\n    DataSourceInitializer initializer = new DataSourceInitializer();\r\n    initializer.setDataSource(dataSource);\r\n    initializer.setDatabasePopulator(databasePopulator());\r\n    return initializer;\r\n}\r\n\r\nprivate DatabasePopulator databasePopulator() {\r\n    ResourceDatabasePopulator populator = new ResourceDatabasePopulator();\r\n    populator.addScript(schemaScript);\r\n    return populator;\r\n}\r\n\r\n@Bean\r\npublic DataSource dataSource() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n    dataSource.setDriverClassName(env.getProperty(\"jdbc.driverClassName\"));\r\n    dataSource.setUrl(env.getProperty(\"jdbc.url\"));\r\n    dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n    dataSource.setPassword(env.getProperty(\"jdbc.pass\"));\r\n    return dataSource;\r\n}\r\n```","```\r\ndrop table if exists oauth_client_details;\r\ncreate table oauth_client_details (\r\n  client_id VARCHAR(255) PRIMARY KEY,\r\n  resource_ids VARCHAR(255),\r\n  client_secret VARCHAR(255),\r\n  scope VARCHAR(255),\r\n  authorized_grant_types VARCHAR(255),\r\n  web_server_redirect_uri VARCHAR(255),\r\n  authorities VARCHAR(255),\r\n  access_token_validity INTEGER,\r\n  refresh_token_validity INTEGER,\r\n  additional_information VARCHAR(4096),\r\n  autoapprove VARCHAR(255)\r\n);\r\n\r\ndrop table if exists oauth_client_token;\r\ncreate table oauth_client_token (\r\n  token_id VARCHAR(255),\r\n  token LONG VARBINARY,\r\n  authentication_id VARCHAR(255) PRIMARY KEY,\r\n  user_name VARCHAR(255),\r\n  client_id VARCHAR(255)\r\n);\r\n\r\ndrop table if exists oauth_access_token;\r\ncreate table oauth_access_token (\r\n  token_id VARCHAR(255),\r\n  token LONG VARBINARY,\r\n  authentication_id VARCHAR(255) PRIMARY KEY,\r\n  user_name VARCHAR(255),\r\n  client_id VARCHAR(255),\r\n  authentication LONG VARBINARY,\r\n  refresh_token VARCHAR(255)\r\n);\r\n\r\ndrop table if exists oauth_refresh_token;\r\ncreate table oauth_refresh_token (\r\n  token_id VARCHAR(255),\r\n  token LONG VARBINARY,\r\n  authentication LONG VARBINARY\r\n);\r\n\r\ndrop table if exists oauth_code;\r\ncreate table oauth_code (\r\n  code VARCHAR(255), authentication LONG VARBINARY\r\n);\r\n\r\ndrop table if exists oauth_approvals;\r\ncreate table oauth_approvals (\r\n\tuserId VARCHAR(255),\r\n\tclientId VARCHAR(255),\r\n\tscope VARCHAR(255),\r\n\tstatus VARCHAR(10),\r\n\texpiresAt TIMESTAMP,\r\n\tlastModifiedAt TIMESTAMP\r\n);\r\n\r\ndrop table if exists ClientDetails;\r\ncreate table ClientDetails (\r\n  appId VARCHAR(255) PRIMARY KEY,\r\n  resourceIds VARCHAR(255),\r\n  appSecret VARCHAR(255),\r\n  scope VARCHAR(255),\r\n  grantTypes VARCHAR(255),\r\n  redirectUrl VARCHAR(255),\r\n  authorities VARCHAR(255),\r\n  access_token_validity INTEGER,\r\n  refresh_token_validity INTEGER,\r\n  additionalInformation VARCHAR(4096),\r\n  autoApproveScopes VARCHAR(255)\r\n);\r\n```","```\r\n@Configuration\r\npublic class ServerSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) \r\n      throws Exception {\r\n        auth.inMemoryAuthentication()\r\n          .withUser(\"john\").password(\"123\").roles(\"USER\");\r\n    }\r\n\r\n    @Override\r\n    @Bean\r\n    public AuthenticationManager authenticationManagerBean() \r\n      throws Exception {\r\n        return super.authenticationManagerBean();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n            .antMatchers(\"/login\").permitAll()\r\n            .anyRequest().authenticated()\r\n            .and()\r\n            .formLogin().permitAll();\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate Environment env;\r\n\r\n@Bean\r\npublic DataSource dataSource() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n    dataSource.setDriverClassName(env.getProperty(\"jdbc.driverClassName\"));\r\n    dataSource.setUrl(env.getProperty(\"jdbc.url\"));\r\n    dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n    dataSource.setPassword(env.getProperty(\"jdbc.pass\"));\r\n    return dataSource;\r\n}\r\n\r\n@Bean\r\npublic TokenStore tokenStore() {\r\n    return new JdbcTokenStore(dataSource());\r\n}\r\n```","```\r\n@Primary\r\n@Bean\r\npublic RemoteTokenServices tokenService() {\r\n    RemoteTokenServices tokenService = new RemoteTokenServices();\r\n    tokenService.setCheckTokenEndpointUrl(\r\n      \"http://localhost:8080/spring-security-oauth-server/oauth/check_token\");\r\n    tokenService.setClientId(\"fooClientIdPassword\");\r\n    tokenService.setClientSecret(\"secret\");\r\n    return tokenService;\r\n}\r\n```","```\r\n@Controller\r\npublic class FooController {\r\n\r\n    @PreAuthorize(\"#oauth2.hasScope('read')\")\r\n    @RequestMapping(method = RequestMethod.GET, value = \"/foos/{id}\")\r\n    @ResponseBody\r\n    public Foo findById(@PathVariable long id) {\r\n        return \r\n          new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableResourceServer\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class OAuth2ResourceServerConfig \r\n  extends GlobalMethodSecurityConfiguration {\r\n\r\n    @Override\r\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\r\n        return new OAuth2MethodSecurityExpressionHandler();\r\n    }\r\n}\r\n```","```\r\npublic class Foo {\r\n    private long id;\r\n    private String name;\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"org.baeldung.web.controller\" })\r\npublic class ResourceWebConfig implements WebMvcConfigurer {}\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>com.github.eirslett</groupId>\r\n            <artifactId>frontend-maven-plugin</artifactId>\r\n            <version>1.3</version>\r\n            <configuration>\r\n                <nodeVersion>v6.10.2</nodeVersion>\r\n                <npmVersion>3.10.10</npmVersion>\r\n                <workingDirectory>src/main/resources</workingDirectory>\r\n            </configuration>\r\n            <executions>\r\n                <execution>\r\n                    <id>install node and npm</id>\r\n                    <goals>\r\n                        <goal>install-node-and-npm</goal>\r\n                    </goals>\r\n                </execution>\r\n                <execution>\r\n                    <id>npm install</id>\r\n                    <goals>\r\n                        <goal>npm</goal>\r\n                    </goals>\r\n                </execution>\r\n                <execution>\r\n                    <id>npm run build</id>\r\n                    <goals>\r\n                        <goal>npm</goal>\r\n                    </goals>\r\n                    <configuration>\r\n                        <arguments>run build</arguments>\r\n                    </configuration>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\nng new oauthApp\r\n```","```\r\nexport class Foo {\r\n  constructor(\r\n    public id: number,\r\n    public name: string) { }\r\n} \r\n\r\n@Injectable()\r\nexport class AppService {\r\n  constructor(\r\n    private _router: Router, private _http: Http){}\r\n\r\n  obtainAccessToken(loginData){\r\n    let params = new URLSearchParams();\r\n    params.append('username',loginData.username);\r\n    params.append('password',loginData.password);    \r\n    params.append('grant_type','password');\r\n    params.append('client_id','fooClientIdPassword');\r\n    let headers = \r\n      new Headers({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Basic '+btoa(\"fooClientIdPassword:secret\")});\r\n    let options = new RequestOptions({ headers: headers });\r\n\r\n    this._http.post('http://localhost:8081/spring-security-oauth-server/oauth/token', \r\n      params.toString(), options)\r\n      .map(res => res.json())\r\n      .subscribe(\r\n        data => this.saveToken(data),\r\n        err => alert('Invalid Credentials')); \r\n  }\r\n\r\n  saveToken(token){\r\n    var expireDate = new Date().getTime() + (1000 * token.expires_in);\r\n    Cookie.set(\"access_token\", token.access_token, expireDate);\r\n    this._router.navigate(['/']);\r\n  }\r\n\r\n  getResource(resourceUrl) : Observable<Foo>{\r\n    var headers = \r\n      new Headers({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n      'Authorization': 'Bearer '+Cookie.get('access_token')});\r\n    var options = new RequestOptions({ headers: headers });\r\n    return this._http.get(resourceUrl, options)\r\n                   .map((res:Response) => res.json())\r\n                   .catch((error:any) => \r\n                     Observable.throw(error.json().error || 'Server error'));\r\n  }\r\n\r\n  checkCredentials(){\r\n    if (!Cookie.check('access_token')){\r\n        this._router.navigate(['/login']);\r\n    }\r\n  } \r\n\r\n  logout() {\r\n    Cookie.delete('access_token');\r\n    this._router.navigate(['/login']);\r\n  }\r\n}\r\n```","```\r\n@Component({\r\n  selector: 'login-form',\r\n  providers: [AppService],  \r\n  template: `<h1>Login</h1>\r\n    <input type=\"text\" [(ngModel)]=\"loginData.username\" />\r\n    <input type=\"password\"  [(ngModel)]=\"loginData.password\"/>\r\n    <button (click)=\"login()\" type=\"submit\">Login</button>`\r\n})\r\nexport class LoginComponent {\r\n    public loginData = {username: \"\", password: \"\"};\r\n\r\n    constructor(private _service:AppService) {}\r\n\r\n    login() {\r\n        this._service.obtainAccessToken(this.loginData);\r\n    }\r\n```","```\r\n@Component({\r\n    selector: 'home-header',\r\n    providers: [AppService],\r\n  template: `<span>Welcome !!</span>\r\n    <a (click)=\"logout()\" href=\"#\">Logout</a>\r\n    <foo-details></foo-details>`\r\n})\r\n\r\nexport class HomeComponent {\r\n    constructor(\r\n        private _service:AppService){}\r\n\r\n    ngOnInit(){\r\n        this._service.checkCredentials();\r\n    }\r\n\r\n    logout() {\r\n        this._service.logout();\r\n    }\r\n}\r\n```","```\r\n@Component({\r\n  selector: 'foo-details',\r\n  providers: [AppService],  \r\n  template: `<h1>Foo Details</h1>\r\n    <label>ID</label> <span>{{foo.id}}</span>\r\n    <label>Name</label> <span>{{foo.name}}</span>\r\n    <button (click)=\"getFoo()\" type=\"submit\">New Foo</button>`\r\n})\r\n\r\nexport class FooComponent {\r\n    public foo = new Foo(1,'sample foo');\r\n    private foosUrl = 'http://localhost:8082/spring-security-oauth-resource/foos/';  \r\n\r\n    constructor(private _service:AppService) {}\r\n\r\n    getFoo(){\r\n        this._service.getResource(this.foosUrl+this.foo.id)\r\n          .subscribe(\r\n            data => this.foo = data,\r\n            error =>  this.foo.name = 'Error');\r\n    }\r\n}\r\n```","```\r\n@Component({\r\n    selector: 'app-root',\r\n    template: `<router-outlet></router-outlet>`\r\n})\r\n\r\nexport class AppComponent {}\r\n```","```\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    FooComponent    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    RouterModule.forRoot([\r\n     { path: '', component: HomeComponent },\r\n    { path: 'login', component: LoginComponent }])\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n```","```\r\n@Injectable()\r\nexport class AppService {\r\n\r\n  constructor(\r\n    private _router: Router, private _http: Http, private oauthService: OAuthService){\r\n        this.oauthService.loginUrl = \r\n          'http://localhost:8081/spring-security-oauth-server/oauth/authorize'; \r\n        this.oauthService.redirectUri = 'http://localhost:8086/';\r\n        this.oauthService.clientId = \"sampleClientId\";\r\n        this.oauthService.scope = \"read write foo bar\";    \r\n        this.oauthService.setStorage(sessionStorage);\r\n        this.oauthService.tryLogin({});      \r\n    }\r\n\r\n  obtainAccessToken(){\r\n      this.oauthService.initImplicitFlow();\r\n  }\r\n\r\n  getResource(resourceUrl) : Observable<Foo>{\r\n    var headers = \r\n      new Headers({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8',\r\n     'Authorization': 'Bearer '+this.oauthService.getAccessToken()});\r\n    var options = new RequestOptions({ headers: headers });\r\n    return this._http.get(resourceUrl, options)\r\n      .map((res:Response) => res.json())\r\n      .catch((error:any) => Observable.throw(error.json().error || 'Server error'));\r\n  }\r\n\r\n  isLoggedIn(){\r\n    if (this.oauthService.getAccessToken() === null){\r\n       return false;\r\n    }\r\n    return true;\r\n  } \r\n\r\n  logout() {\r\n      this.oauthService.logOut();\r\n      location.reload();\r\n  }\r\n}\r\n```","```\r\n@Component({\r\n    selector: 'home-header',\r\n    providers: [AppService],\r\n  template: `\r\n    <button *ngIf=\"!isLoggedIn\" (click)=\"login()\" type=\"submit\">Login</button>\r\n    <div *ngIf=\"isLoggedIn\">\r\n        <span>Welcome !!</span>\r\n        <a (click)=\"logout()\" href=\"#\">Logout</a>\r\n        <br/>\r\n        <foo-details></foo-details>\r\n    </div>`\r\n})\r\n\r\nexport class HomeComponent {\r\n    public isLoggedIn = false;\r\n\r\n    constructor(\r\n        private _service:AppService){}\r\n\r\n    ngOnInit(){\r\n        this.isLoggedIn = this._service.isLoggedIn();\r\n    }\r\n\r\n    login() {\r\n        this._service.obtainAccessToken();\r\n    }\r\n\r\n    logout() {\r\n        this._service.logout();\r\n    }\r\n}\r\n```","```\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    FooComponent    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpModule,\r\n    OAuthModule.forRoot(),    \r\n    RouterModule.forRoot([\r\n     { path: '', component: HomeComponent }])\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n```","```\r\nmvn clean install\r\n```","```\r\ncd src/main/resources\r\n```","```\r\nnpm start\r\n```","```\r\n\"start\": \"ng serve\"\r\n```","```\r\n\"start\": \"ng serve --port 8086\"\r\n```"]