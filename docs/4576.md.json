["```\r\npublic interface IUserQueryService {\r\n\r\n    List<User> getUsersList(int page, int size, String sortDir, String sort);\r\n\r\n    String checkPasswordResetToken(long userId, String token);\r\n\r\n    String checkConfirmRegistrationToken(String token);\r\n\r\n    long countAllUsers();\r\n\r\n}\r\n```","```\r\npublic interface IUserCommandService {\r\n\r\n    void registerNewUser(String username, String email, String password, String appUrl);\r\n\r\n    void updateUserPassword(User user, String password, String oldPassword);\r\n\r\n    void changeUserPassword(User user, String password);\r\n\r\n    void resetPassword(String email, String appUrl);\r\n\r\n    void createVerificationTokenForUser(User user, String token);\r\n\r\n    void updateUser(User user);\r\n\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(value = \"/api/users\")\r\npublic class UserQueryRestController {\r\n\r\n    @Autowired\r\n    private IUserQueryService userService;\r\n\r\n    @Autowired\r\n    private IScheduledPostQueryService scheduledPostService;\r\n\r\n    @Autowired\r\n    private ModelMapper modelMapper;\r\n\r\n    @PreAuthorize(\"hasRole('USER_READ_PRIVILEGE')\")\r\n    @RequestMapping(method = RequestMethod.GET)\r\n    @ResponseBody\r\n    public List<UserQueryDto> getUsersList(...) {\r\n        PagingInfo pagingInfo = new PagingInfo(page, size, userService.countAllUsers());\r\n        response.addHeader(\"PAGING_INFO\", pagingInfo.toString());\r\n\r\n        List<User> users = userService.getUsersList(page, size, sortDir, sort);\r\n        return users.stream().map(\r\n          user -> convertUserEntityToDto(user)).collect(Collectors.toList());\r\n    }\r\n\r\n    private UserQueryDto convertUserEntityToDto(User user) {\r\n        UserQueryDto dto = modelMapper.map(user, UserQueryDto.class);\r\n        dto.setScheduledPostsCount(scheduledPostService.countScheduledPostsByUser(user));\r\n        return dto;\r\n    }\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(value = \"/api/users\")\r\npublic class UserCommandRestController {\r\n\r\n    @Autowired\r\n    private IUserCommandService userService;\r\n\r\n    @Autowired\r\n    private ModelMapper modelMapper;\r\n\r\n    @RequestMapping(value = \"/registration\", method = RequestMethod.POST)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void register(\r\n      HttpServletRequest request, @RequestBody UserRegisterCommandDto userDto) {\r\n        String appUrl = request.getRequestURL().toString().replace(request.getRequestURI(), \"\");\r\n\r\n        userService.registerNewUser(\r\n          userDto.getUsername(), userDto.getEmail(), userDto.getPassword(), appUrl);\r\n    }\r\n\r\n    @PreAuthorize(\"isAuthenticated()\")\r\n    @RequestMapping(value = \"/password\", method = RequestMethod.PUT)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void updateUserPassword(@RequestBody UserUpdatePasswordCommandDto userDto) {\r\n        userService.updateUserPassword(\r\n          getCurrentUser(), userDto.getPassword(), userDto.getOldPassword());\r\n    }\r\n\r\n    @RequestMapping(value = \"/passwordReset\", method = RequestMethod.POST)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void createAResetPassword(\r\n      HttpServletRequest request, \r\n      @RequestBody UserTriggerResetPasswordCommandDto userDto) \r\n    {\r\n        String appUrl = request.getRequestURL().toString().replace(request.getRequestURI(), \"\");\r\n        userService.resetPassword(userDto.getEmail(), appUrl);\r\n    }\r\n\r\n    @RequestMapping(value = \"/password\", method = RequestMethod.POST)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void changeUserPassword(@RequestBody UserchangePasswordCommandDto userDto) {\r\n        userService.changeUserPassword(getCurrentUser(), userDto.getPassword());\r\n    }\r\n\r\n    @PreAuthorize(\"hasRole('USER_WRITE_PRIVILEGE')\")\r\n    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void updateUser(@RequestBody UserUpdateCommandDto userDto) {\r\n        userService.updateUser(convertToEntity(userDto));\r\n    }\r\n\r\n    private User convertToEntity(UserUpdateCommandDto userDto) {\r\n        return modelMapper.map(userDto, User.class);\r\n    }\r\n}\r\n```","```\r\npublic class UserQueryDto {\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private boolean enabled;\r\n\r\n    private Set<Role> roles;\r\n\r\n    private long scheduledPostsCount;\r\n}\r\n```","```\r\npublic class UserRegisterCommandDto {\r\n    private String username;\r\n    private String email;\r\n    private String password;\r\n}\r\n```","```\r\npublic class UserUpdatePasswordCommandDto {\r\n    private String oldPassword;\r\n    private String password;\r\n}\r\n```","```\r\npublic class UserTriggerResetPasswordCommandDto {\r\n    private String email;\r\n}\r\n```","```\r\npublic class UserChangePasswordCommandDto {\r\n    private String password;\r\n}\r\n```","```\r\npublic class UserUpdateCommandDto {\r\n    private Long id;\r\n\r\n    private boolean enabled;\r\n\r\n    private Set<Role> roles;\r\n}\r\n```"]