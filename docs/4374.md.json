["```\r\n<dependency>\r\n    <groupId>io.github.classgraph</groupId>\r\n    <artifactId>classgraph</artifactId>\r\n    <version>4.8.28</version>\r\n</dependency>\r\n```","```\r\n@Target({TYPE, METHOD, FIELD})\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface TestAnnotation {\r\n\r\n    String value() default \"\";\r\n}\r\n```","```\r\n@TestAnnotation\r\npublic class ClassWithAnnotation {\r\n}\r\n```","```\r\ntry (ScanResult result = new ClassGraph().enableClassInfo().enableAnnotationInfo()\r\n  .whitelistPackages(getClass().getPackage().getName()).scan()) {\r\n\r\n    ClassInfoList classInfos = result.getClassesWithAnnotation(TestAnnotation.class.getName());\r\n\r\n    assertThat(classInfos).extracting(ClassInfo::getName).contains(ClassWithAnnotation.class.getName());\r\n}\r\n```","```\r\npublic class MethodWithAnnotation {\r\n\r\n    @TestAnnotation\r\n    public void service() {\r\n    }\r\n}\r\n```","```\r\ntry (ScanResult result = new ClassGraph().enableAllInfo()\r\n  .whitelistPackages(getClass().getPackage().getName()).scan()) {\r\n\r\n    ClassInfoList classInfos = result.getClassesWithMethodAnnotation(TestAnnotation.class.getName());\r\n\r\n    assertThat(classInfos).extracting(ClassInfo::getName).contains(MethodWithAnnotation.class.getName());\r\n}\r\n```","```\r\npublic class MethodWithAnnotationParameterDao {\r\n\r\n    @TestAnnotation(\"dao\")\r\n    public void service() {\r\n    }\r\n}\r\n```","```\r\npublic class MethodWithAnnotationParameterWeb {\r\n\r\n    @TestAnnotation(\"web\")\r\n    public void service() {\r\n    }\r\n}\r\n```","```\r\ntry (ScanResult result = new ClassGraph().enableAllInfo()\r\n  .whitelistPackages(getClass().getPackage().getName()).scan()) {\r\n\r\n    ClassInfoList classInfos = result.getClassesWithMethodAnnotation(TestAnnotation.class.getName());\r\n    ClassInfoList webClassInfos = classInfos.filter(classInfo -> {\r\n        return classInfo.getMethodInfo().stream().anyMatch(methodInfo -> {\r\n            AnnotationInfo annotationInfo = methodInfo.getAnnotationInfo(TestAnnotation.class.getName());\r\n            if (annotationInfo == null) {\r\n                return false;\r\n            }\r\n            return \"web\".equals(annotationInfo.getParameterValues().getValue(\"value\"));\r\n        });\r\n    });\r\n\r\n    assertThat(webClassInfos).extracting(ClassInfo::getName)\r\n      .contains(MethodWithAnnotationParameterWeb.class.getName());\r\n}\r\n```","```\r\npublic class FieldWithAnnotation {\r\n\r\n    @TestAnnotation\r\n    private String s;\r\n}\r\n```","```\r\ntry (ScanResult result = new ClassGraph().enableAllInfo()\r\n  .whitelistPackages(getClass().getPackage().getName()).scan()) {\r\n\r\n    ClassInfoList classInfos = result.getClassesWithFieldAnnotation(TestAnnotation.class.getName());\r\n\r\n    assertThat(classInfos).extracting(ClassInfo::getName).contains(FieldWithAnnotation.class.getName());\r\n}\r\n```","```\r\nmy data\r\n```","```\r\ntry (ScanResult result = new ClassGraph().whitelistPaths(\"classgraph\").scan()) {\r\n    ResourceList resources = result.getResourcesWithExtension(\"config\");\r\n    assertThat(resources).extracting(Resource::getPath).containsOnly(\"classgraph/my.config\");\r\n    assertThat(resources.get(0).getContentAsString()).isEqualTo(\"my data\");\r\n}\r\n```"]