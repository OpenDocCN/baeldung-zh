["```\r\npublic interface Notifier<T> {\r\n    void notify(T obj);\r\n}\r\n```","```\r\npublic class StringNotifier implements Notifier<String> {\r\n\r\n    @Override\r\n    public void notify(String str) {\r\n        System.out.println(\"Notifying: \" + str);\r\n    }\r\n} public class DateNotifier implements Notifier<Date> {\r\n\r\n    @Override\r\n    public void notify(Date date) {\r\n        System.out.println(\"Notifying: \" + date);\r\n    }\r\n}\r\n```","```\r\npublic class NotifierFactory {\r\n\r\n    public <T> Notifier<T> getNotifier(Class<T> c) {\r\n        if (c == String.class) {\r\n            return Record.STRING.make();\r\n        }\r\n        if (c == Date.class) {\r\n            return Record.DATE.make();\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n```","```\r\npublic enum Record {\r\n    STRING {\r\n        @Override\r\n        public Notifier<String> make() {\r\n            return new StringNotifier();\r\n        }\r\n    },\r\n    DATE {\r\n        @Override\r\n        public Notifier<Date> make() {\r\n            return new DateNotifier();\r\n        }\r\n    };\r\n\r\n    public abstract <T> Notifier<T> make();\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    NotifierFactory factory = new NotifierFactory();\r\n    Notifier<String> stringNotifier = factory.getNotifier(String.class);\r\n    Notifier<Date> dateNotifier = factory.getNotifier(Date.class);\r\n\r\n    stringNotifier.notify(\"Hello world!\");\r\n    dateNotifier.notify(new Date());\r\n}\r\n```","```\r\n$ javac Main.java\r\n$ java Main\r\nNotifying: Hello world!\r\nNotifying: Wed Oct 19 17:36:38 TRT 2022\r\n```"]