["```\r\n@EventHandler\r\npublic void on(ProductAddedEvent event) {\r\n    orders.computeIfPresent(event.getOrderId(), (orderId, order) -> {\r\n      order.addProduct(event.getProductId());\r\n      return order;\r\n    });\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.axonframework.extensions.mongo</groupId>\r\n    <artifactId>axon-mongo</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic TokenStore getTokenStore(MongoClient client, Serializer serializer){\r\n    return MongoTokenStore.builder()\r\n      .mongoTemplate(\r\n        DefaultMongoTemplate.builder()\r\n          .mongoDatabase(client)\r\n          .build()\r\n      )\r\n      .serializer(serializer)\r\n      .build();\r\n}\r\n```","```\r\n@Service\r\n@ProcessingGroup(\"orders\")\r\n@Profile(\"mongo\")\r\npublic class MongoOrdersEventHandler implements OrdersEventHandler {\r\n    // all methods regarding updating an querying the projection\r\n}\r\n```","```\r\npublic MongoOrdersEventHandler(MongoClient client, QueryUpdateEmitter emitter) {\r\n    orders = client\r\n      .getDatabase(AXON_FRAMEWORK_DATABASE_NAME)\r\n      .getCollection(ORDER_COLLECTION_NAME);\r\n    orders.createIndex(Indexes.ascending(ORDER_ID_PROPERTY_NAME),\r\n      new IndexOptions().unique(true));\r\n    this.emitter = emitter;\r\n}\r\n```","```\r\n@QueryHandler\r\npublic List<Order> handle(FindAllOrderedProductsQuery query) {\r\n    List<Order> orderList = new ArrayList<>();\r\n    orders\r\n      .find()\r\n      .forEach(d -> orderList.add(documentToOrder(d)));\r\n    return orderList;\r\n}\r\n```","```\r\nprivate Bson shippedProductFilter(String productId){\r\n    return and(\r\n      eq(ORDER_STATUS_PROPERTY_NAME, OrderStatus.SHIPPED.toString()),\r\n      exists(String.format(PRODUCTS_PROPERTY_NAME + \".%s\", productId))\r\n    );\r\n}\r\n```","```\r\n@QueryHandler\r\npublic Integer handle(TotalProductsShippedQuery query) {\r\n    AtomicInteger result = new AtomicInteger();\r\n    orders\r\n      .find(shippedProductFilter(query.getProductId()))\r\n      .map(d -> d.get(PRODUCTS_PROPERTY_NAME, Document.class))\r\n      .map(d -> d.getInteger(query.getProductId(), 0))\r\n      .forEach(result::addAndGet);\r\n    return result.get();\r\n}\r\n```","```\r\n@Override\r\nprotected OrdersEventHandler getHandler() {\r\n    mongoClient.getDatabase(\"axonframework\").drop();\r\n    return new MongoOrdersEventHandler(mongoClient, emitter);\r\n}\r\n```","```\r\n@Override\r\npublic void reset(List<Order> orderList) {\r\n    orders.deleteMany(new Document());\r\n    orderList.forEach(o -> orders.insertOne(orderToDocument(o)));\r\n}\r\n```","```\r\n@BeforeEach\r\nvoid setUp() {\r\n    orderId = UUID.randomUUID().toString();\r\n    Order order = new Order(orderId);\r\n    handler.reset(Collections.singletonList(order));\r\n}\r\n```"]