["```\r\nint id;\r\n```","```\r\nid = 1;\r\n```","```\r\npublic class User {\r\n    private String name;\r\n    private int id;\r\n\r\n    // standard constructor, getters, setters,\r\n}\r\n```","```\r\n@Test\r\npublic void whenIntializedWithNew_thenInstanceIsNotNull() {\r\n    User user = new User();\r\n\r\n    assertThat(user).isNotNull();\r\n}\r\n```","```\r\npublic User(String name, int id) {\r\n    this.name = name;\r\n    this.id = id;\r\n}\r\n```","```\r\nUser user = new User(\"Alice\", 1);\r\n```","```\r\n@Test\r\npublic void whenValuesAreNotInitialized_thenUserNameAndIdReturnDefault() {\r\n    User user = new User();\r\n\r\n    assertThat(user.getName()).isNull();\r\n    assertThat(user.getId() == 0);\r\n}\r\n```","```\r\npublic void print(){\r\n    int i;\r\n    System.out.println(i);\r\n}\r\n```","```\r\nprivate static final int YEAR = 2000;\r\n```","```\r\n{\r\n    id = 0;\r\n}\r\n```","```\r\nprivate static String forum;\r\nstatic {\r\n    forum = \"Java\";\r\n}\r\n```","```\r\n@Test\r\npublic void whenInitializedWithReflection_thenInstanceIsNotNull() \r\n  throws Exception {\r\n    User user = User.class.getConstructor(String.class, int.class)\r\n      .newInstance(\"Alice\", 2);\r\n\r\n    assertThat(user).isNotNull();\r\n}\r\n```","```\r\npublic class User implements Cloneable { //... }\r\n```","```\r\n@Test\r\npublic void whenCopiedWithClone_thenExactMatchIsCreated() \r\n  throws CloneNotSupportedException {\r\n    User user = new User(\"Alice\", 3);\r\n    User clonedUser = (User) user.clone();\r\n\r\n    assertThat(clonedUser).isEqualTo(user);\r\n}\r\n```","```\r\nUser u = (User) unsafeInstance.allocateInstance(User.class);\r\n```"]