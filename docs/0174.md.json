["```\r\nString SPACE = \" \";\r\nString TAB = \"\t\";\r\nString NEW_LINE = \"\\n\";\r\n```","```\r\nString FRUITS_TAB_SEPARATED = \"Apple\" + TAB + \"Banana\" + TAB + \"Mango\" + TAB + \"Orange\";\r\nString FRUITS_SPACE_SEPARATED = \"Apple\" + SPACE + \"Banana\" + SPACE + \"Mango\" + SPACE + \"Orange\";\r\nString FRUITS_NEWLINE_SEPARATED = \"Apple\" + NEW_LINE + \"Banana\" + NEW_LINE + \"Mango\" + NEW_LINE + \"Orange\";\r\n```","```\r\nprivate void verifySplit(String[] fruitArray) {\r\n    assertEquals(4, fruitArray.length);\r\n    assertEquals(\"Apple\", fruitArray[0]);\r\n    assertEquals(\"Banana\", fruitArray[1]);\r\n    assertEquals(\"Mango\", fruitArray[2]);\r\n    assertEquals(\"Orange\", fruitArray[3]);\r\n}\r\n```","```\r\nString[] split(String regex);\r\n```","```\r\n@Test\r\npublic void givenSpaceSeparatedString_whenSplitUsingSpace_shouldGetExpectedResult() {\r\n    String fruits = FRUITS_SPACE_SEPARATED;\r\n    String[] fruitArray = fruits.split(SPACE);\r\n    verifySplit(fruitArray);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhiteSpaceSeparatedString_whenSplitUsingWhiteSpaceRegex_shouldGetExpectedResult() {\r\n    String whitespaceRegex = SPACE + \"|\" + TAB + \"|\" + NEW_LINE;\r\n    String[] allSamples = new String[] { FRUITS_SPACE_SEPARATED, FRUITS_TAB_SEPARATED, FRUITS_NEWLINE_SEPARATED };\r\n    for (String fruits : allSamples) {\r\n        String[] fruitArray = fruits.split(whitespaceRegex);\r\n        verifySplit(fruitArray);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNewlineSeparatedString_whenSplitUsingWhiteSpaceMetaChar_shouldGetExpectedResult() {\r\n    String whitespaceMetaChar = \"\\\\s\";\r\n    String[] allSamples = new String[] { FRUITS_SPACE_SEPARATED, FRUITS_TAB_SEPARATED, FRUITS_NEWLINE_SEPARATED };\r\n    for (String fruits : allSamples) {\r\n        String[] fruitArray = fruits.split(whitespaceMetaChar);\r\n        verifySplit(fruitArray);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSpaceSeparatedString_whenSplitUsingStringTokenizer_shouldGetExpectedResult() {\r\n    String fruits = FRUITS_SPACE_SEPARATED;\r\n    StringTokenizer tokenizer = new StringTokenizer(fruits);\r\n    String[] fruitArray = new String[tokenizer.countTokens()];\r\n    int index = 0;\r\n    while (tokenizer.hasMoreTokens()) {\r\n        fruitArray[index++] = tokenizer.nextToken();\r\n    }\r\n    verifySplit(fruitArray);\r\n}\r\n```","```\r\npublic static String[] split(String str);\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenWhiteSpaceSeparatedString_whenSplitUsingStringUtils_shouldGetExpectedResult() {\r\n    String[] allSamples = new String[] { FRUITS_SPACE_SEPARATED, FRUITS_TAB_SEPARATED, FRUITS_NEWLINE_SEPARATED };\r\n    for (String fruits : allSamples) {\r\n        String[] fruitArray = StringUtils.split(fruits);\r\n        verifySplit(fruitArray);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNullString_whenSplitUsingStringUtils_shouldReturnNull() {\r\n    String fruits = null;\r\n    String[] fruitArray = StringUtils.split(fruits);\r\n    assertNull(fruitArray);\r\n}\r\n```"]