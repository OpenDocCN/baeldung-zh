["```\r\n<dependency>\r\n    <groupId>org.javers</groupId>\r\n    <artifactId>javers-core</artifactId>\r\n    <version>3.1.0</version>\r\n</dependency>\r\n```","```\r\npublic class Person {\r\n    private Integer id;\r\n    private String name;\r\n\r\n    // standard getters/constructors\r\n}\r\n```","```\r\n@Test\r\npublic void givenPersonObject_whenApplyModificationOnIt_thenShouldDetectChange() {\r\n    // given\r\n    Javers javers = JaversBuilder.javers().build();\r\n\r\n    Person person = new Person(1, \"Michael Program\");\r\n    Person personAfterModification = new Person(1, \"Michael Java\");\r\n\r\n    // when\r\n    Diff diff = javers.compare(person, personAfterModification);\r\n\r\n    // then\r\n    ValueChange change = diff.getChangesByType(ValueChange.class).get(0);\r\n\r\n    assertThat(diff.getChanges()).hasSize(1);\r\n    assertThat(change.getPropertyName()).isEqualTo(\"name\");\r\n    assertThat(change.getLeft()).isEqualTo(\"Michael Program\");\r\n    assertThat(change.getRight()).isEqualTo(\"Michael Java\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfPersons_whenCompare_ThenShouldDetectChanges() {\r\n    // given\r\n    Javers javers = JaversBuilder.javers().build();\r\n    Person personThatWillBeRemoved = new Person(2, \"Thomas Link\");\r\n    List<Person> oldList = \r\n      Lists.asList(new Person(1, \"Michael Program\"), personThatWillBeRemoved);\r\n    List<Person> newList = \r\n      Lists.asList(new Person(1, \"Michael Not Program\"));\r\n\r\n    // when\r\n    Diff diff = javers.compareCollections(oldList, newList, Person.class);\r\n\r\n    // then\r\n    assertThat(diff.getChanges()).hasSize(3);\r\n\r\n    ValueChange valueChange = \r\n      diff.getChangesByType(ValueChange.class).get(0);\r\n\r\n    assertThat(valueChange.getPropertyName()).isEqualTo(\"name\");\r\n    assertThat(valueChange.getLeft()).isEqualTo(\"Michael Program\");\r\n    assertThat(valueChange.getRight()).isEqualTo(\"Michael Not Program\");\r\n\r\n    ObjectRemoved objectRemoved = diff.getChangesByType(ObjectRemoved.class).get(0);\r\n    assertThat(\r\n      objectRemoved.getAffectedObject().get().equals(personThatWillBeRemoved))\r\n      .isTrue();\r\n\r\n    ListChange listChange = diff.getChangesByType(ListChange.class).get(0);\r\n    assertThat(listChange.getValueRemovedChanges().size()).isEqualTo(1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfPerson_whenPersonHasNewAddress_thenDetectThatChange() {\r\n    // given\r\n    Javers javers = JaversBuilder.javers().build();\r\n\r\n    PersonWithAddress person = \r\n      new PersonWithAddress(1, \"Tom\", Arrays.asList(new Address(\"England\")));\r\n\r\n    PersonWithAddress personWithNewAddress = \r\n      new PersonWithAddress(1, \"Tom\", \r\n        Arrays.asList(new Address(\"England\"), new Address(\"USA\")));\r\n\r\n    // when\r\n    Diff diff = javers.compare(person, personWithNewAddress);\r\n    List objectsByChangeType = diff.getObjectsByChangeType(NewObject.class);\r\n\r\n    // then\r\n    assertThat(objectsByChangeType).hasSize(1);\r\n    assertThat(objectsByChangeType.get(0).equals(new Address(\"USA\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfPerson_whenPersonRemovedAddress_thenDetectThatChange() {\r\n    // given\r\n    Javers javers = JaversBuilder.javers().build();\r\n\r\n    PersonWithAddress person = \r\n      new PersonWithAddress(1, \"Tom\", Arrays.asList(new Address(\"England\")));\r\n\r\n    PersonWithAddress personWithNewAddress = \r\n      new PersonWithAddress(1, \"Tom\", Collections.emptyList());\r\n\r\n    // when\r\n    Diff diff = javers.compare(person, personWithNewAddress);\r\n    List objectsByChangeType = diff.getObjectsByChangeType(ObjectRemoved.class);\r\n\r\n    // then\r\n    assertThat(objectsByChangeType).hasSize(1);\r\n    assertThat(objectsByChangeType.get(0).equals(new Address(\"England\")));\r\n}\r\n```"]