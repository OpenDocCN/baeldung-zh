["```\r\n<dependency>\r\n    <groupId>com.google.truth</groupId>\r\n    <artifactId>truth</artifactId>\r\n    <version>0.32</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.google.truth.extensions</groupId>\r\n    <artifactId>truth-java8-extension</artifactId>\r\n    <version>0.32</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nimport static com.google.common.truth.Truth.*;\r\nimport static com.google.common.truth.Truth8.*;\r\n```","```\r\npublic class User {\r\n    private String name = \"John Doe\";\r\n    private List<String> emails\r\n      = Arrays.asList(\"[[email protected]](/web/20221128115819/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"[[email protected]](/web/20221128115819/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n\r\n    public boolean equals(Object obj) {\r\n        if (obj == null || getClass() != obj.getClass()) {\r\n            return false;\r\n        }\r\n\r\n        User other = (User) obj;\r\n        return Objects.equals(this.name, other.name);\r\n    }\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUsers_thenEqual() {\r\n    User aUser = new User(\"John Doe\");\r\n    User anotherUser = new User(\"John Doe\");\r\n\r\n    assertThat(aUser).isEqualTo(anotherUser);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUser_thenInList() {\r\n    User aUser = new User();\r\n\r\n    assertThat(aUser).isIn(Arrays.asList(1, 3, aUser, null));\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUser_thenNotInList() {\r\n    // ...\r\n\r\n    assertThat(aUser).isNotIn(Arrays.asList(1, 3, \"Three\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUser_thenIsNull() {\r\n    User aUser = null;\r\n\r\n    assertThat(aUser).isNull();\r\n}\r\n\r\n@Test\r\npublic void whenComparingUser_thenNotNull() {\r\n    User aUser = new User();\r\n\r\n    assertThat(aUser).isNotNull();\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUser_thenInstanceOf() {\r\n    // ...\r\n\r\n    assertThat(aUser).isInstanceOf(User.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingInteger_thenEqual() {\r\n    int anInt = 10;\r\n\r\n    assertThat(anInt).isEqualTo(10);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingFloat_thenIsBigger() {\r\n    float aFloat = 10.0f;\r\n\r\n    assertThat(aFloat).isGreaterThan(1.0f);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingDouble_thenIsSmaller() {\r\n    double aDouble = 10.0f;\r\n\r\n    assertThat(aDouble).isLessThan(20.0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingDouble_thenWithinPrecision() {\r\n    double aDouble = 22.18;\r\n\r\n    assertThat(aDouble).isWithin(2).of(23d);\r\n}\r\n\r\n@Test\r\npublic void whenComparingFloat_thenNotWithinPrecision() {\r\n    float aFloat = 23.04f;\r\n\r\n    assertThat(aFloat).isNotWithin(1.3f).of(100f);\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingBigDecimal_thenEqualIgnoringScale() {\r\n    BigDecimal aBigDecimal = BigDecimal.valueOf(1000, 3);\r\n\r\n    assertThat(aBigDecimal).isEqualToIgnoringScale(new BigDecimal(1.0));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingBoolean_thenTrue() {\r\n    boolean aBoolean = true;\r\n\r\n    assertThat(aBoolean).isTrue();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingString_thenStartsWith() {\r\n    String aString = \"This is a string\";\r\n\r\n    assertThat(aString).startsWith(\"This\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingArrays_thenEqual() {\r\n    String[] firstArrayOfStrings = { \"one\", \"two\", \"three\" };\r\n    String[] secondArrayOfStrings = { \"one\", \"two\", \"three\" };\r\n\r\n    assertThat(firstArrayOfStrings).isEqualTo(secondArrayOfStrings);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingArray_thenEmpty() {\r\n    Object[] anArray = {};\r\n\r\n    assertThat(anArray).isEmpty();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingComparable_thenAtLeast() {\r\n    Comparable<Integer> aComparable = 5;\r\n\r\n    assertThat(aComparable).isAtLeast(1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingComparable_thenInRange() {\r\n    // ...\r\n\r\n    assertThat(aComparable).isIn(Range.closed(1, 10));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingComparable_thenInList() {\r\n    // ...\r\n\r\n    assertThat(aComparable).isIn(Arrays.asList(4, 5, 6));\r\n}\r\n```","```\r\npublic class User implements Comparable<User> {\r\n    // ...\r\n\r\n    public int compareTo(User o) {\r\n        return this.getName().compareToIgnoreCase(o.getName());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingUsers_thenEquivalent() {\r\n    User aUser = new User();\r\n    aUser.setName(\"John Doe\");\r\n\r\n    User anotherUser = new User();\r\n    anotherUser.setName(\"john doe\");\r\n\r\n    assertThat(aUser).isEquivalentAccordingToCompareTo(anotherUser);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingIterable_thenContains() {\r\n    List<Integer> aList = Arrays.asList(4, 5, 6);\r\n\r\n    assertThat(aList).contains(5);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingIterable_thenContainsAnyInList() {\r\n    List<Integer> aList = Arrays.asList(1, 2, 3);\r\n\r\n    assertThat(aList).containsAnyIn(Arrays.asList(1, 5, 10));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingIterable_thenContainsExactElements() {\r\n    List<String> aList = Arrays.asList(\"10\", \"20\", \"30\");\r\n    List<String> anotherList = Arrays.asList(\"10\", \"20\", \"30\");\r\n\r\n    assertThat(aList)\r\n      .containsExactlyElementsIn(anotherList)\r\n      .inOrder();\r\n}\r\n```","```\r\n@Test\r\npublic void givenComparator_whenCheckingIterable_thenOrdered() {\r\n    Comparator<String> aComparator\r\n      = (a, b) -> new Float(a).compareTo(new Float(b));\r\n\r\n    List<String> aList = Arrays.asList(\"1\", \"012\", \"0020\", \"100\");\r\n\r\n    assertThat(aList).isOrdered(aComparator);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingMap_thenContainsEntry() {\r\n    Map<String, Object> aMap = new HashMap<>();\r\n    aMap.put(\"one\", 1L);\r\n\r\n    assertThat(aMap).containsEntry(\"one\", 1L);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingMap_thenContainsKey() {\r\n    // ...\r\n\r\n    assertThat(map).containsKey(\"one\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingMap_thenContainsEntries() {\r\n    Map<String, Object> aMap = new HashMap<>();\r\n    aMap.put(\"first\", 1L);\r\n    aMap.put(\"second\", 2.0);\r\n    aMap.put(\"third\", 3f);\r\n\r\n    Map<String, Object> anotherMap = new HashMap<>(aMap);\r\n\r\n    assertThat(aMap).containsExactlyEntriesIn(anotherMap);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingException_thenInstanceOf() {\r\n    Exception anException\r\n      = new IllegalArgumentException(new NumberFormatException());\r\n\r\n    assertThat(anException)\r\n      .hasCauseThat()\r\n      .isInstanceOf(NumberFormatException.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingException_thenCauseMessageIsKnown() {\r\n    Exception anException\r\n      = new IllegalArgumentException(\"Bad value\");\r\n\r\n    assertThat(anException)\r\n      .hasMessageThat()\r\n      .startsWith(\"Bad\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingClass_thenIsAssignable() {\r\n    Class<Double> aClass = Double.class;\r\n\r\n    assertThat(aClass).isAssignableTo(Number.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingJavaOptional_thenHasValue() {\r\n    Optional<Integer> anOptional = Optional.of(1);\r\n\r\n    assertThat(anOptional).hasValue(1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingJavaOptional_thenPresent() {\r\n    Optional<String> anOptional = Optional.of(\"Baeldung\");\r\n\r\n    assertThat(anOptional).isPresent();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingJavaOptional_thenEmpty() {\r\n    Optional anOptional = Optional.empty();\r\n\r\n    assertThat(anOptional).isEmpty();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingStream_thenContainsInOrder() {\r\n    Stream<Integer> anStream = Stream.of(1, 2, 3);\r\n\r\n    assertThat(anStream)\r\n      .containsAllOf(1, 2, 3)\r\n      .inOrder();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingGuavaOptional_thenIsAbsent() {\r\n    Optional anOptional = Optional.absent();\r\n\r\n    assertThat(anOptional).isAbsent();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingGuavaMultimap_thenExpectedSize() {\r\n    Multimap<String, Object> aMultimap = ArrayListMultimap.create();\r\n    aMultimap.put(\"one\", 1L);\r\n    aMultimap.put(\"one\", 2.0);\r\n\r\n    assertThat(aMultimap)\r\n      .valuesForKey(\"one\")\r\n      .hasSize(2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingGuavaMultiset_thenExpectedCount() {\r\n    TreeMultiset<String> aMultiset = TreeMultiset.create();\r\n    aMultiset.add(\"baeldung\", 10);\r\n\r\n    assertThat(aMultiset).hasCount(\"baeldung\", 10);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingGuavaTable_thenContains() {\r\n    Table<String, String, String> aTable = TreeBasedTable.create();\r\n    aTable.put(\"firstRow\", \"firstColumn\", \"baeldung\");\r\n\r\n    assertThat(aTable).contains(\"firstRow\", \"firstColumn\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingGuavaTable_thenContainsCell() {\r\n    Table<String, String, String> aTable = getDummyGuavaTable();\r\n\r\n    assertThat(aTable).containsCell(\"firstRow\", \"firstColumn\", \"baeldung\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenFailingAssertion_thenCustomMessage() {\r\n    assertWithMessage(\"TEST-985: Secret user subject was NOT null!\")\r\n      .that(new User())\r\n      .isNull();\r\n}\r\n```","```\r\nTEST-985: Secret user subject was NOT null!:\r\n  Not true that <[[email protected]](/web/20221128115819/https://www.baeldung.com/cdn-cgi/l/email-protection)> is null\r\n```","```\r\n@Test\r\npublic void whenFailingAssertion_thenMessagePrefix() {\r\n    User aUser = new User();\r\n\r\n    assertThat(aUser)\r\n      .named(\"User [%s]\", aUser.getName())\r\n      .isNull();\r\n}\r\n```","```\r\nNot true that User [John Doe]\r\n  (<[[email protected]](/web/20221128115819/https://www.baeldung.com/cdn-cgi/l/email-protection)>) is null\r\n```","```\r\npublic class UserSubject\r\n  extends ComparableSubject<UserSubject, User> {\r\n\r\n    private UserSubject(\r\n      FailureStrategy failureStrategy, User target) {\r\n        super(failureStrategy, target);\r\n    }\r\n\r\n    private static final\r\n      SubjectFactory<UserSubject, User> USER_SUBJECT_FACTORY\r\n      = new SubjectFactory<UserSubject, User>() {\r\n\r\n        public UserSubject getSubject(\r\n          FailureStrategy failureStrategy, User target) {\r\n            return new UserSubject(failureStrategy, target);\r\n        }\r\n    };\r\n\r\n    public static UserSubject assertThat(User user) {\r\n        return Truth.assertAbout(USER_SUBJECT_FACTORY).that(user);\r\n    }\r\n\r\n    public void hasName(String name) {\r\n        if (!actual().getName().equals(name)) {\r\n            fail(\"has name\", name);\r\n        }\r\n    }\r\n\r\n    public void hasNameIgnoringCase(String name) {\r\n        if (!actual().getName().equalsIgnoreCase(name)) {\r\n            fail(\"has name ignoring case\", name);\r\n        }\r\n    }\r\n\r\n    public IterableSubject emails() {\r\n        return Truth.assertThat(actual().getEmails());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingUser_thenHasName() {\r\n    User aUser = new User();\r\n\r\n    assertThat(aUser).hasName(\"John Doe\");\r\n}\r\n\r\n@Test\r\npublic void whenCheckingUser_thenHasNameIgnoringCase() {\r\n    // ...\r\n\r\n    assertThat(aUser).hasNameIgnoringCase(\"john doe\");\r\n}\r\n\r\n@Test\r\npublic void givenUser_whenCheckingEmails_thenExpectedSize() {\r\n    // ...\r\n\r\n    assertThat(aUser)\r\n      .emails()\r\n      .hasSize(2);\r\n}\r\n```"]