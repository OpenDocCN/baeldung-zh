["```\r\n<dependency>\r\n    <groupId>org.jsoup</groupId>\r\n    <artifactId>jsoup</artifactId>\r\n    <version>1.13.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.xhtmlrenderer</groupId>\r\n    <artifactId>flying-saucer-pdf-openpdf</artifactId>\r\n    <version>9.1.20</version>\r\n</dependency> \r\n```","```\r\n<html>\r\n    <head>\r\n        <style>\r\n            .center_div {\r\n                border: 1px solid gray;\r\n                margin-left: auto;\r\n                margin-right: auto;\r\n                width: 90%;\r\n                background-color: #d0f0f6;\r\n                text-align: left;\r\n                padding: 8px;\r\n            }\r\n        </style>\r\n        <link href=\"style.css\" rel=\"stylesheet\">\r\n    </head>\r\n    <body>\r\n        <div class=\"center_div\">\r\n            <h1>Hello Baeldung!</h1>\r\n            <img src=\"Java_logo.png\">\r\n            <div class=\"myclass\">\r\n                <p>This is the tutorial to convert html to pdf.</p>\r\n            </div>\r\n        </div>\r\n    </body>\r\n</html>\r\n```","```\r\nFile inputHTML = new File(HTML);\r\n```","```\r\nDocument document = Jsoup.parse(inputHTML, \"UTF-8\");\r\ndocument.outputSettings().syntax(Document.OutputSettings.Syntax.xml);\r\nreturn document;\r\n```","```\r\ntry (OutputStream outputStream = new FileOutputStream(outputPdf)) {\r\n    ITextRenderer renderer = new ITextRenderer();\r\n    SharedContext sharedContext = renderer.getSharedContext();\r\n    sharedContext.setPrint(true);\r\n    sharedContext.setInteractive(false);\r\n    renderer.setDocumentFromString(xhtml.html());\r\n    renderer.layout();\r\n    renderer.createPDF(outputStream);\r\n}\r\n```","```\r\nrenderer.getFontResolver().addFont(getClass().getClassLoader().getResource(\"fonts/PRISTINA.ttf\").toString(), true);\r\n```","```\r\nString baseUrl = FileSystems.getDefault()\r\n  .getPath(\"src/main/resources/\")\r\n  .toUri().toURL().toString();\r\nrenderer.setDocumentFromString(xhtml, baseUrl); \r\n```","```\r\npublic ReplacedElement createReplacedElement(LayoutContext lc, BlockBox box, UserAgentCallback uac, int cssWidth, int cssHeight) {\r\n    Element e = box.getElement();\r\n    String nodeName = e.getNodeName();\r\n    if (nodeName.equals(\"img\")) {\r\n        String imagePath = e.getAttribute(\"src\");\r\n        try {\r\n            InputStream input = new FileInputStream(\"src/main/resources/\"+imagePath);\r\n            byte[] bytes = IOUtils.toByteArray(input);\r\n            Image image = Image.getInstance(bytes);\r\n            FSImage fsImage = new ITextFSImage(image);\r\n            if (cssWidth != -1 || cssHeight != -1) {\r\n                fsImage.scale(cssWidth, cssHeight);\r\n            } else {\r\n                fsImage.scale(2000, 1000);\r\n            }\r\n            return new ITextImageElement(fsImage);\r\n        } catch (Exception e1) {\r\n            e1.printStackTrace();\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```","```\r\nsharedContext.setReplacedElementFactory(new CustomElementFactoryImpl()); \r\n```","```\r\n<dependency>\r\n    <groupId>com.openhtmltopdf</groupId>\r\n    <artifactId>openhtmltopdf-core</artifactId>\r\n    <version>1.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.openhtmltopdf</groupId>\r\n    <artifactId>openhtmltopdf-pdfbox</artifactId>\r\n    <version>1.0.6</version>\r\n</dependency>\r\n```","```\r\ntry (OutputStream os = new FileOutputStream(outputPdf)) {\r\n    PdfRendererBuilder builder = new PdfRendererBuilder();\r\n    builder.withUri(outputPdf);\r\n    builder.toStream(os);\r\n    builder.withW3cDocument(new W3CDom().fromJsoup(doc), \"/\");\r\n    builder.run();\r\n}\r\n```","```\r\nbuilder.useFont(new File(getClass().getClassLoader().getResource(\"fonts/PRISTINA.ttf\").getFile()), \"PRISTINA\");\r\n```","```\r\nString baseUrl = FileSystems.getDefault()\r\n  .getPath(\"src/main/resources/\")\r\n  .toUri().toURL().toString();\r\nbuilder.withW3cDocument(new W3CDom().fromJsoup(doc), baseUrl);\r\n```"]