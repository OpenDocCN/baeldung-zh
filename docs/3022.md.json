["```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-jwt</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableAuthorizationServer\r\npublic class OAuth2AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\r\n    @Override\r\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) \r\n      throws Exception {\r\n        endpoints.tokenStore(tokenStore())\r\n                 .accessTokenConverter(accessTokenConverter())\r\n                 .authenticationManager(authenticationManager);\r\n    }\r\n\r\n    @Bean\r\n    public TokenStore tokenStore() {\r\n        return new JwtTokenStore(accessTokenConverter());\r\n    }\r\n\r\n    @Bean\r\n    public JwtAccessTokenConverter accessTokenConverter() {\r\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n        converter.setSigningKey(\"123\");\r\n        return converter;\r\n    }\r\n\r\n    @Bean\r\n    @Primary\r\n    public DefaultTokenServices tokenServices() {\r\n        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\r\n        defaultTokenServices.setTokenStore(tokenStore());\r\n        defaultTokenServices.setSupportRefreshToken(true);\r\n        return defaultTokenServices;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableResourceServer\r\npublic class OAuth2ResourceServerConfig extends ResourceServerConfigurerAdapter {\r\n    @Override\r\n    public void configure(ResourceServerSecurityConfigurer config) {\r\n        config.tokenServices(tokenServices());\r\n    }\r\n\r\n    @Bean\r\n    public TokenStore tokenStore() {\r\n        return new JwtTokenStore(accessTokenConverter());\r\n    }\r\n\r\n    @Bean\r\n    public JwtAccessTokenConverter accessTokenConverter() {\r\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n        converter.setSigningKey(\"123\");\r\n        return converter;\r\n    }\r\n\r\n    @Bean\r\n    @Primary\r\n    public DefaultTokenServices tokenServices() {\r\n        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\r\n        defaultTokenServices.setTokenStore(tokenStore());\r\n        return defaultTokenServices;\r\n    }\r\n}\r\n```","```\r\npublic class CustomTokenEnhancer implements TokenEnhancer {\r\n    @Override\r\n    public OAuth2AccessToken enhance(\r\n      OAuth2AccessToken accessToken, \r\n      OAuth2Authentication authentication) {\r\n        Map<String, Object> additionalInfo = new HashMap<>();\r\n        additionalInfo.put(\r\n          \"organization\", authentication.getName() + randomAlphabetic(4));\r\n        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(\r\n          additionalInfo);\r\n        return accessToken;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void configure(\r\n  AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\r\n    TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\r\n    tokenEnhancerChain.setTokenEnhancers(\r\n      Arrays.asList(tokenEnhancer(), accessTokenConverter()));\r\n\r\n    endpoints.tokenStore(tokenStore())\r\n             .tokenEnhancer(tokenEnhancerChain)\r\n             .authenticationManager(authenticationManager);\r\n}\r\n\r\n@Bean\r\npublic TokenEnhancer tokenEnhancer() {\r\n    return new CustomTokenEnhancer();\r\n}\r\n```","```\r\n{\r\n    \"user_name\": \"john\",\r\n    \"scope\": [\r\n        \"foo\",\r\n        \"read\",\r\n        \"write\"\r\n    ],\r\n    \"organization\": \"johnIiCh\",\r\n    \"exp\": 1458126622,\r\n    \"authorities\": [\r\n        \"ROLE_USER\"\r\n    ],\r\n    \"jti\": \"e0ad1ef3-a8a5-4eef-998d-00b26bc2c53f\",\r\n    \"client_id\": \"fooClientIdPassword\"\r\n}\r\n```","```\r\n<p class=\"navbar-text navbar-right\">{{organization}}</p>\r\n\r\n<script type=\"text/javascript\" \r\n  src=\"https://cdn.rawgit.com/auth0/angular-jwt/master/dist/angular-jwt.js\">\r\n</script>\r\n\r\n<script>\r\nvar app = \r\n  angular.module('myApp', [\"ngResource\",\"ngRoute\", \"ngCookies\", \"angular-jwt\"]);\r\n\r\napp.controller('mainCtrl', function($scope, $cookies, jwtHelper,...) {\r\n    $scope.organiztion = \"\";\r\n\r\n    function getOrganization(){\r\n    \tvar token = $cookies.get(\"access_token\");\r\n    \tvar payload = jwtHelper.decodeToken(token);\r\n    \t$scope.organization = payload.organization;\r\n    }\r\n    ...\r\n});\r\n```","```\r\npublic Map<String, Object> getExtraInfo(OAuth2Authentication auth) {\r\n    OAuth2AuthenticationDetails details =\r\n      (OAuth2AuthenticationDetails) auth.getDetails();\r\n    OAuth2AccessToken accessToken = tokenStore\r\n      .readAccessToken(details.getTokenValue());\r\n    return accessToken.getAdditionalInformation();\r\n}\r\n```","```\r\n@Component\r\npublic class CustomAccessTokenConverter extends DefaultAccessTokenConverter {\r\n\r\n    @Override\r\n    public OAuth2Authentication extractAuthentication(Map<String, ?> claims) {\r\n        OAuth2Authentication authentication =\r\n          super.extractAuthentication(claims);\r\n        authentication.setDetails(claims);\r\n        return authentication;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableResourceServer\r\npublic class OAuth2ResourceServerConfigJwt\r\n extends ResourceServerConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private CustomAccessTokenConverter customAccessTokenConverter;\r\n\r\n    @Bean\r\n    public TokenStore tokenStore() {\r\n        return new JwtTokenStore(accessTokenConverter());\r\n    }\r\n\r\n    @Bean\r\n    public JwtAccessTokenConverter accessTokenConverter() {\r\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n        converter.setAccessTokenConverter(customAccessTokenConverter);\r\n    }\r\n    // ...\r\n}\r\n```","```\r\npublic Map<String, Object> getExtraInfo(Authentication auth) {\r\n    OAuth2AuthenticationDetails oauthDetails =\r\n      (OAuth2AuthenticationDetails) auth.getDetails();\r\n    return (Map<String, Object>) oauthDetails\r\n      .getDecodedDetails();\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(\r\n  classes = ResourceServerApplication.class, \r\n  webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic class AuthenticationClaimsIntegrationTest {\r\n\r\n    @Autowired\r\n    private JwtTokenStore tokenStore;\r\n\r\n    @Test\r\n    public void whenTokenDoesNotContainIssuer_thenSuccess() {\r\n        String tokenValue = obtainAccessToken(\"fooClientIdPassword\", \"john\", \"123\");\r\n        OAuth2Authentication auth = tokenStore.readAuthentication(tokenValue);\r\n        Map<String, Object> details = (Map<String, Object>) auth.getDetails();\r\n\r\n        assertTrue(details.containsKey(\"organization\"));\r\n    }\r\n\r\n    private String obtainAccessToken(\r\n      String clientId, String username, String password) {\r\n\r\n        Map<String, String> params = new HashMap<>();\r\n        params.put(\"grant_type\", \"password\");\r\n        params.put(\"client_id\", clientId);\r\n        params.put(\"username\", username);\r\n        params.put(\"password\", password);\r\n        Response response = RestAssured.given()\r\n          .auth().preemptive().basic(clientId, \"secret\")\r\n          .and().with().params(params).when()\r\n          .post(\"http://localhost:8081/spring-security-oauth-server/oauth/token\");\r\n        return response.jsonPath().getString(\"access_token\");\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n    converter.setSigningKey(\"123\");\r\n    return converter;\r\n}\r\n```","```\r\nkeytool -genkeypair -alias mytest \r\n                    -keyalg RSA \r\n                    -keypass mypass \r\n                    -keystore mytest.jks \r\n                    -storepass mypass\r\n```","```\r\nkeytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey\r\n```","```\r\n-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgIK2Wt4x2EtDl41C7vfp\r\nOsMquZMyOyteO2RsVeMLF/hXIeYvicKr0SQzVkodHEBCMiGXQDz5prijTq3RHPy2\r\n/5WJBCYq7yHgTLvspMy6sivXN7NdYE7I5pXo/KHk4nz+Fa6P3L8+L90E/3qwf6j3\r\nDKWnAgJFRY8AbSYXt1d5ELiIG1/gEqzC0fZmNhhfrBtxwWXrlpUDT0Kfvf0QVmPR\r\nxxCLXT+tEe1seWGEqeOLL5vXRLqmzZcBe1RZ9kQQm43+a9Qn5icSRnDfTAesQ3Cr\r\nlAWJKl2kcWU1HwJqw+dZRSZ1X4kEXNMyzPdPBbGmU6MHdhpywI7SKZT7mX4BDnUK\r\neQIDAQAB\r\n-----END PUBLIC KEY-----\r\n-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIEGtZIUzANBgkqhkiG9w0BAQsFADA2MQswCQYDVQQGEwJ1\r\nczELMAkGA1UECBMCY2ExCzAJBgNVBAcTAmxhMQ0wCwYDVQQDEwR0ZXN0MB4XDTE2\r\nMDMxNTA4MTAzMFoXDTE2MDYxMzA4MTAzMFowNjELMAkGA1UEBhMCdXMxCzAJBgNV\r\nBAgTAmNhMQswCQYDVQQHEwJsYTENMAsGA1UEAxMEdGVzdDCCASIwDQYJKoZIhvcN\r\nAQEBBQADggEPADCCAQoCggEBAICCtlreMdhLQ5eNQu736TrDKrmTMjsrXjtkbFXj\r\nCxf4VyHmL4nCq9EkM1ZKHRxAQjIhl0A8+aa4o06t0Rz8tv+ViQQmKu8h4Ey77KTM\r\nurIr1zezXWBOyOaV6Pyh5OJ8/hWuj9y/Pi/dBP96sH+o9wylpwICRUWPAG0mF7dX\r\neRC4iBtf4BKswtH2ZjYYX6wbccFl65aVA09Cn739EFZj0ccQi10/rRHtbHlhhKnj\r\niy+b10S6ps2XAXtUWfZEEJuN/mvUJ+YnEkZw30wHrENwq5QFiSpdpHFlNR8CasPn\r\nWUUmdV+JBFzTMsz3TwWxplOjB3YacsCO0imU+5l+AQ51CnkCAwEAAaMhMB8wHQYD\r\nVR0OBBYEFOGefUBGquEX9Ujak34PyRskHk+WMA0GCSqGSIb3DQEBCwUAA4IBAQB3\r\n1eLfNeq45yO1cXNl0C1IQLknP2WXg89AHEbKkUOA1ZKTOizNYJIHW5MYJU/zScu0\r\nyBobhTDe5hDTsATMa9sN5CPOaLJwzpWV/ZC6WyhAWTfljzZC6d2rL3QYrSIRxmsp\r\n/J1Vq9WkesQdShnEGy7GgRgJn4A8CKecHSzqyzXulQ7Zah6GoEUD+vjb+BheP4aN\r\nhiYY1OuXD+HsdKeQqS+7eM5U7WW6dz2Q8mtFJ5qAxjY75T0pPrHwZMlJUhUZ+Q2V\r\nFfweJEaoNB9w9McPe1cAiE+oeejZ0jq0el3/dJsx3rlVqZN+lMhRJJeVHFyeb3XF\r\nlLFCUGhA7hxn2xf3x1JW\r\n-----END CERTIFICATE-----\r\n```","```\r\n-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgIK2Wt4x2EtDl41C7vfp\r\nOsMquZMyOyteO2RsVeMLF/hXIeYvicKr0SQzVkodHEBCMiGXQDz5prijTq3RHPy2\r\n/5WJBCYq7yHgTLvspMy6sivXN7NdYE7I5pXo/KHk4nz+Fa6P3L8+L90E/3qwf6j3\r\nDKWnAgJFRY8AbSYXt1d5ELiIG1/gEqzC0fZmNhhfrBtxwWXrlpUDT0Kfvf0QVmPR\r\nxxCLXT+tEe1seWGEqeOLL5vXRLqmzZcBe1RZ9kQQm43+a9Qn5icSRnDfTAesQ3Cr\r\nlAWJKl2kcWU1HwJqw+dZRSZ1X4kEXNMyzPdPBbGmU6MHdhpywI7SKZT7mX4BDnUK\r\neQIDAQAB\r\n-----END PUBLIC KEY-----\r\n```","```\r\nkeytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey -noout\r\n```","```\r\n<build>\r\n    <resources>\r\n        <resource>\r\n            <directory>src/main/resources</directory>\r\n            <filtering>true</filtering>\r\n            <excludes>\r\n                <exclude>*.jks</exclude>\r\n            </excludes>\r\n        </resource>\r\n    </resources>\r\n</build>\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-maven-plugin</artifactId>\r\n            <configuration>\r\n                <addResources>true</addResources>\r\n            </configuration>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n    KeyStoreKeyFactory keyStoreKeyFactory = \r\n      new KeyStoreKeyFactory(new ClassPathResource(\"mytest.jks\"), \"mypass\".toCharArray());\r\n    converter.setKeyPair(keyStoreKeyFactory.getKeyPair(\"mytest\"));\r\n    return converter;\r\n}\r\n```","```\r\n@Bean\r\npublic JwtAccessTokenConverter accessTokenConverter() {\r\n    JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\r\n    Resource resource = new ClassPathResource(\"public.txt\");\r\n    String publicKey = null;\r\n    try {\r\n        publicKey = IOUtils.toString(resource.getInputStream());\r\n    } catch (final IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n    converter.setVerifierKey(publicKey);\r\n    return converter;\r\n}\r\n```"]