["```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.TYPE)\r\npublic @interface Animal { }\r\n```","```\r\n@Animal\r\npublic class Elephant { }\r\n```","```\r\n@Configuration\r\n@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION,\r\n        classes = Animal.class))\r\npublic class ComponentScanAnnotationFilterApp { }\r\n```","```\r\n@Test\r\npublic void whenAnnotationFilterIsUsed_thenComponentScanShouldRegisterBeanAnnotatedWithAnimalAnootation() {\r\n    ApplicationContext applicationContext =\r\n            new AnnotationConfigApplicationContext(ComponentScanAnnotationFilterApp.class);\r\n    List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\r\n            .filter(bean -> !bean.contains(\"org.springframework\")\r\n                    && !bean.contains(\"componentScanAnnotationFilterApp\"))\r\n            .collect(Collectors.toList());\r\n    assertThat(beans.size(), equalTo(1));\r\n    assertThat(beans.get(0), equalTo(\"elephant\"));\r\n}\r\n```","```\r\npublic interface Animal { }\r\n```","```\r\npublic class Elephant implements Animal { }\r\n```","```\r\npublic class Cat implements Animal { }\r\n```","```\r\n@Configuration\r\n@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,\r\n        classes = Animal.class))\r\npublic class ComponentScanAssignableTypeFilterApp { }\r\n```","```\r\n@Test\r\npublic void whenAssignableTypeFilterIsUsed_thenComponentScanShouldRegisterBean() {\r\n    ApplicationContext applicationContext =\r\n      new AnnotationConfigApplicationContext(ComponentScanAssignableTypeFilterApp.class);\r\n    List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\r\n      .filter(bean -> !bean.contains(\"org.springframework\")\r\n        && !bean.contains(\"componentScanAssignableTypeFilterApp\"))\r\n      .collect(Collectors.toList());\r\n    assertThat(beans.size(), equalTo(2));\r\n    assertThat(beans.contains(\"cat\"), equalTo(true));\r\n    assertThat(beans.contains(\"elephant\"), equalTo(true));\r\n}\r\n```","```\r\npublic class Elephant { }\r\n```","```\r\npublic class Cat { }\r\n```","```\r\npublic class Loin { }\r\n```","```\r\n@Configuration\r\n@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.REGEX,\r\n        pattern = \".*[nt]\"))\r\npublic class ComponentScanRegexFilterApp { }\r\n```","```\r\n@Test\r\npublic void whenRegexFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingRegex() {\r\n    ApplicationContext applicationContext =\r\n      new AnnotationConfigApplicationContext(ComponentScanRegexFilterApp.class);\r\n    List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\r\n      .filter(bean -> !bean.contains(\"org.springframework\")\r\n        && !bean.contains(\"componentScanRegexFilterApp\"))\r\n      .collect(Collectors.toList());\r\n    assertThat(beans.size(), equalTo(1));\r\n    assertThat(beans.contains(\"elephant\"), equalTo(true));\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.ASPECTJ,\r\n  pattern = \"com.baeldung.componentscan.filter.aspectj.* \"\r\n  + \"&& !(com.baeldung.componentscan.filter.aspectj.L* \"\r\n  + \"|| com.baeldung.componentscan.filter.aspectj.C*)\"))\r\npublic class ComponentScanAspectJFilterApp { }\r\n```","```\r\n@Test\r\npublic void whenAspectJFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingAspectJCreteria() {\r\n    ApplicationContext applicationContext =\r\n      new AnnotationConfigApplicationContext(ComponentScanAspectJFilterApp.class);\r\n    List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\r\n      .filter(bean -> !bean.contains(\"org.springframework\")\r\n        && !bean.contains(\"componentScanAspectJFilterApp\"))\r\n      .collect(Collectors.toList());\r\n    assertThat(beans.size(), equalTo(1));\r\n    assertThat(beans.get(0), equalTo(\"elephant\"));\r\n}\r\n```","```\r\npublic class ComponentScanCustomFilter implements TypeFilter {\r\n\r\n    @Override\r\n    public boolean match(MetadataReader metadataReader,\r\n      MetadataReaderFactory metadataReaderFactory) throws IOException {\r\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\r\n        String fullyQualifiedName = classMetadata.getClassName();\r\n        String className = fullyQualifiedName.substring(fullyQualifiedName.lastIndexOf(\".\") + 1);\r\n        return className.length() > 5 ? true : false;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(includeFilters = @ComponentScan.Filter(type = FilterType.CUSTOM,\r\n  classes = ComponentScanCustomFilter.class))\r\npublic class ComponentScanCustomFilterApp { }\r\n```","```\r\n@Test\r\npublic void whenCustomFilterIsUsed_thenComponentScanShouldRegisterBeanMatchingCustomFilter() {\r\n    ApplicationContext applicationContext =\r\n      new AnnotationConfigApplicationContext(ComponentScanCustomFilterApp.class);\r\n    List<String> beans = Arrays.stream(applicationContext.getBeanDefinitionNames())\r\n      .filter(bean -> !bean.contains(\"org.springframework\")\r\n        && !bean.contains(\"componentScanCustomFilterApp\")\r\n        && !bean.contains(\"componentScanCustomFilter\"))\r\n      .collect(Collectors.toList());\r\n    assertThat(beans.size(), equalTo(1));\r\n    assertThat(beans.get(0), equalTo(\"elephant\"));\r\n}\r\n```"]