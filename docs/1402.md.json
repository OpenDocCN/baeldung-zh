["```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-core</artifactId>\r\n    <version>1.6.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-rx</artifactId>\r\n    <version>1.6.0</version>\r\n</dependency> \r\n```","```\r\nRxRatpack.initialise(); \r\n```","```\r\nHandler movieHandler = (ctx) -> {\r\n    MovieService movieSvc = ctx.get(MovieService.class);\r\n    Observable<Movie> movieObs = movieSvc.getMovie();\r\n    RxRatpack.promiseSingle(movieObs)\r\n      .then(movie -> ctx.render(Jackson.json(movie)));\r\n};\r\n```","```\r\nHandler moviesHandler = (ctx) -> {\r\n    MovieService movieSvc = ctx.get(MovieService.class);\r\n    Observable<Movie> movieObs = movieSvc.getMovies();\r\n    RxRatpack.promise(movieObs)\r\n      .then(movie -> ctx.render(Jackson.json(movie)));\r\n};\r\n```","```\r\nRatpackServer.start(def -> def.registryOf(rSpec -> rSpec.add(MovieService.class, new MovieServiceImpl()))\r\n  .handlers(chain -> chain\r\n    .get(\"movie\", movieHandler)\r\n    .get(\"movies\", moviesHandler)));\r\n```","```\r\nHandler moviePromiseHandler = ctx -> {\r\n    MoviePromiseService promiseSvc = ctx.get(MoviePromiseService.class);\r\n    Promise<Movie> moviePromise = promiseSvc.getMovie();\r\n    RxRatpack.observe(moviePromise)\r\n      .subscribe(movie -> ctx.render(Jackson.json(movie)));\r\n};\r\n```","```\r\nHandler moviesPromiseHandler = ctx -> {\r\n    MoviePromiseService promiseSvc = ctx.get(MoviePromiseService.class);\r\n    Promise<List<Movie>> moviePromises = promiseSvc.getMovies();\r\n    RxRatpack.observeEach(moviePromises)\r\n        .toList()\r\n        .subscribe(movie -> ctx.render(Jackson.json(movie)));\r\n};\r\n```","```\r\nRatpackServer.start(def -> def.registryOf(regSpec -> regSpec\r\n  .add(MoviePromiseService.class, new MoviePromiseServiceImpl()))\r\n    .handlers(chain -> chain\r\n      .get(\"movie\", moviePromiseHandler)\r\n      .get(\"movies\", moviesPromiseHandler)));\r\n```","```\r\nObservable<Movie> movieObs = movieSvc.getMovies();\r\nObservable<String> upperCasedNames = movieObs.compose(RxRatpack::forkEach)\r\n  .map(movie -> movie.getName().toUpperCase())\r\n  .serialize();\r\n```","```\r\nRatpackServer.start(def -> def.registryOf(regSpec -> regSpec\r\n  .add(ServerErrorHandler.class, (ctx, throwable) -> {\r\n        ctx.render(\"Error caught by handler : \" + throwable.getMessage());\r\n    }))\r\n  .handlers(chain -> chain\r\n    .get(\"error\", ctx -> {\r\n        Observable.<String> error(new Exception(\"Error from observable\")).subscribe(s -> {});\r\n    })));\r\n```"]