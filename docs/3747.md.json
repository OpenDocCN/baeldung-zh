["```\r\nusername, userid, transaction_date, transaction_amount\r\nsammy, 1234, 31/10/2015, 10000\r\njohn, 9999, 3/12/2015, 12321\r\n```","```\r\npublic class RetryItemProcessor implements ItemProcessor<Transaction, Transaction> {\r\n\r\n    @Override\r\n    public Transaction process(Transaction transaction) throws IOException {\r\n        log.info(\"RetryItemProcessor, attempting to process: {}\", transaction);\r\n        HttpResponse response = fetchMoreUserDetails(transaction.getUserId());\r\n        //parse user's age and postCode from response and update transaction\r\n        ...\r\n        return transaction;\r\n    }\r\n    ...\r\n}\r\n```","```\r\n<transactionRecord>\r\n    <transactionRecord>\r\n        <amount>10000.0</amount>\r\n        <transactionDate>2015-10-31 00:00:00</transactionDate>\r\n        <userId>1234</userId>\r\n        <username>sammy</username>\r\n        <age>10</age>\r\n        <postCode>430222</postCode>\r\n    </transactionRecord>\r\n    ...\r\n</transactionRecord>\r\n```","```\r\n@Bean\r\npublic Step retryStep(\r\n  ItemProcessor<Transaction, Transaction> processor,\r\n  ItemWriter<Transaction> writer) throws ParseException {\r\n    return stepBuilderFactory\r\n      .get(\"retryStep\")\r\n      .<Transaction, Transaction>chunk(10)\r\n      .reader(itemReader(inputCsv))\r\n      .processor(processor)\r\n      .writer(writer)\r\n      .faultTolerant()\r\n      .retryLimit(3)\r\n      .retry(ConnectTimeoutException.class)\r\n      .retry(DeadlockLoserDataAccessException.class)\r\n      .build();\r\n}\r\n```","```\r\n@Test\r\npublic void whenEndpointFailsTwicePasses3rdTime_thenSuccess() throws Exception {\r\n    FileSystemResource expectedResult = new FileSystemResource(EXPECTED_OUTPUT);\r\n    FileSystemResource actualResult = new FileSystemResource(TEST_OUTPUT);\r\n\r\n    when(httpResponse.getEntity())\r\n      .thenReturn(new StringEntity(\"{ \\\"age\\\":10, \\\"postCode\\\":\\\"430222\\\" }\"));\r\n\r\n    //fails for first two calls and passes third time onwards\r\n    when(httpClient.execute(any()))\r\n      .thenThrow(new ConnectTimeoutException(\"Timeout count 1\"))\r\n      .thenThrow(new ConnectTimeoutException(\"Timeout count 2\"))\r\n      .thenReturn(httpResponse);\r\n\r\n    JobExecution jobExecution = jobLauncherTestUtils\r\n      .launchJob(defaultJobParameters());\r\n    JobInstance actualJobInstance = jobExecution.getJobInstance();\r\n    ExitStatus actualJobExitStatus = jobExecution.getExitStatus();\r\n\r\n    assertThat(actualJobInstance.getJobName(), is(\"retryBatchJob\"));\r\n    assertThat(actualJobExitStatus.getExitCode(), is(\"COMPLETED\"));\r\n    AssertFile.assertFileEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\n19:06:57.742 [main] INFO  o.s.batch.core.job.SimpleStepHandler - Executing step: [retryStep]\r\n19:06:57.758 [main] INFO  o.b.batch.service.RetryItemProcessor - Attempting to process user with id=1234\r\n19:06:57.758 [main] INFO  o.b.batch.service.RetryItemProcessor - Attempting to process user with id=1234\r\n19:06:57.758 [main] INFO  o.b.batch.service.RetryItemProcessor - Attempting to process user with id=1234\r\n19:06:57.758 [main] INFO  o.b.batch.service.RetryItemProcessor - Attempting to process user with id=9999\r\n19:06:57.773 [main] INFO  o.s.batch.core.step.AbstractStep - Step: [retryStep] executed in 31ms\r\n```","```\r\n@Test\r\npublic void whenEndpointAlwaysFail_thenJobFails() throws Exception {\r\n    when(httpClient.execute(any()))\r\n      .thenThrow(new ConnectTimeoutException(\"Endpoint is down\"));\r\n\r\n    JobExecution jobExecution = jobLauncherTestUtils\r\n      .launchJob(defaultJobParameters());\r\n    JobInstance actualJobInstance = jobExecution.getJobInstance();\r\n    ExitStatus actualJobExitStatus = jobExecution.getExitStatus();\r\n\r\n    assertThat(actualJobInstance.getJobName(), is(\"retryBatchJob\"));\r\n    assertThat(actualJobExitStatus.getExitCode(), is(\"FAILED\"));\r\n    assertThat(actualJobExitStatus.getExitDescription(),\r\n      containsString(\"org.apache.http.conn.ConnectTimeoutException\"));\r\n}\r\n```","```\r\n<batch:job id=\"retryBatchJob\">\r\n    <batch:step id=\"retryStep\">\r\n        <batch:tasklet>\r\n            <batch:chunk reader=\"itemReader\" writer=\"itemWriter\"\r\n              processor=\"retryItemProcessor\" commit-interval=\"10\"\r\n              retry-limit=\"3\">\r\n                <batch:retryable-exception-classes>\r\n                    <batch:include class=\"org.apache.http.conn.ConnectTimeoutException\"/>\r\n                    <batch:include class=\"org.springframework.dao.DeadlockLoserDataAccessException\"/>\r\n                </batch:retryable-exception-classes>\r\n            </batch:chunk>\r\n        </batch:tasklet>\r\n    </batch:step>\r\n</batch:job>\r\n```"]