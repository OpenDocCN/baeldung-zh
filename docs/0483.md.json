["```\r\n[1, 2, 3]\r\n\r\n[1, 3, 2]\r\n\r\n[2, 1, 3]\r\n\r\n[2, 3, 1]\r\n\r\n[3, 1, 2]\r\n\r\n[3, 2, 1]\r\n```","```\r\nprivate static void permutationsInternal(List<Integer> sequence, List<List<Integer>> results, int index) {\r\n    if (index == sequence.size() - 1) {\r\n        permutations.add(new ArrayList<>(sequence));\r\n    }\r\n\r\n    for (int i = index; i < sequence.size(); i++) {\r\n        swap(sequence, i, index);\r\n        permutationsInternal(sequence, permutations, index + 1);\r\n        swap(sequence, i, index);\r\n    }\r\n}\r\n```","```\r\npublic static List<List<Integer>> generatePermutations(List<Integer> sequence) {\r\n    List<List<Integer>> permutations = new ArrayList<>();\r\n    permutationsInternal(sequence, permutations, 0);\r\n    return permutations;\r\n} \r\n```","```\r\n[]\r\n\r\n[a]\r\n\r\n[b]\r\n\r\n[c]\r\n\r\n[a, b]\r\n\r\n[a, c]\r\n\r\n[b, c]\r\n\r\n[a, b, c]\r\n```","```\r\nprivate static void powersetInternal(\r\n  List<Character> set, List<List<Character>> powerset, List<Character> accumulator, int index) {\r\n    if (index == set.size()) {\r\n        results.add(new ArrayList<>(accumulator));\r\n    } else {\r\n        accumulator.add(set.get(index));\r\n        powerSetInternal(set, powerset, accumulator, index + 1);\r\n        accumulator.remove(accumulator.size() - 1);\r\n        powerSetInternal(set, powerset, accumulator, index + 1);\r\n    }\r\n}\r\n```","```\r\npublic static List<List<Character>> generatePowerset(List<Character> sequence) {\r\n    List<List<Character>> powerset = new ArrayList<>();\r\n    powerSetInternal(sequence, powerset, new ArrayList<>(), 0);\r\n    return powerset;\r\n}\r\n```","```\r\n[a, b]\r\n\r\n[a, c]\r\n\r\n[b, c]\r\n```","```\r\nprivate static void combinationsInternal(\r\n  List<Integer> inputSet, int k, List<List<Integer>> results, ArrayList<Integer> accumulator, int index) {\r\n  int needToAccumulate = k - accumulator.size();\r\n  int canAcculumate = inputSet.size() - index;\r\n\r\n  if (accumulator.size() == k) {\r\n      results.add(new ArrayList<>(accumulator));\r\n  } else if (needToAccumulate <= canAcculumate) {\r\n      combinationsInternal(inputSet, k, results, accumulator, index + 1);\r\n      accumulator.add(inputSet.get(index));\r\n      combinationsInternal(inputSet, k, results, accumulator, index + 1);\r\n      accumulator.remove(accumulator.size() - 1);\r\n  }\r\n}\r\n```","```\r\npublic static List<List<Integer>> combinations(List<Integer> inputSet, int k) {\r\n    List<List<Integer>> results = new ArrayList<>();\r\n    combinationsInternal(inputSet, k, results, new ArrayList<>(), 0);\r\n    return results;\r\n}\r\n```"]