["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n    <version>2.5.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.junit.vintage</groupId>\r\n    <artifactId>junit-vintage-engine</artifactId>\r\n    <scope>test</scope>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.hamcrest</groupId>\r\n            <artifactId>hamcrest-core</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(\r\n  webEnvironment = SpringBootTest.WebEnvironment.MOCK,\r\n  classes = Application.class)\r\n@AutoConfigureMockMvc\r\n@TestPropertySource(\r\n  locations = \"classpath:application-integrationtest.properties\")\r\npublic class EmployeeRestControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mvc;\r\n\r\n    @Autowired\r\n    private EmployeeRepository repository;\r\n\r\n    // write test cases here\r\n}\r\n```","```\r\nspring.datasource.url = jdbc:h2:mem:test\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect\r\n```","```\r\n@Test\r\npublic void givenEmployees_whenGetEmployees_thenStatus200()\r\n  throws Exception {\r\n\r\n    createTestEmployee(\"bob\");\r\n\r\n    mvc.perform(get(\"/api/employees\")\r\n      .contentType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk())\r\n      .andExpect(content()\r\n      .contentTypeCompatibleWith(MediaType.APPLICATION_JSON))\r\n      .andExpect(jsonPath(\"$[0].name\", is(\"bob\")));\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class EmployeeServiceImplIntegrationTest {\r\n\r\n    @Autowired\r\n    private EmployeeService employeeService;\r\n\r\n    // class code ...\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\npublic class EmployeeServiceImplIntegrationTest {\r\n\r\n    @TestConfiguration\r\n    static class EmployeeServiceImplTestContextConfiguration {\r\n        @Bean\r\n        public EmployeeService employeeService() {\r\n            return new EmployeeService() {\r\n                // implement methods\r\n            };\r\n        }\r\n    }\r\n\r\n    @Autowired\r\n    private EmployeeService employeeService;\r\n}\r\n```","```\r\n@TestConfiguration\r\npublic class EmployeeServiceImplTestContextConfiguration {\r\n\r\n    @Bean\r\n    public EmployeeService employeeService() {\r\n        return new EmployeeService() { \r\n            // implement methods \r\n        };\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@Import(EmployeeServiceImplTestContextConfiguration.class)\r\npublic class EmployeeServiceImplIntegrationTest {\r\n\r\n    @Autowired\r\n    private EmployeeService employeeService;\r\n\r\n    // remaining class code\r\n}\r\n```","```\r\n@Service\r\npublic class EmployeeServiceImpl implements EmployeeService {\r\n\r\n    @Autowired\r\n    private EmployeeRepository employeeRepository;\r\n\r\n    @Override\r\n    public Employee getEmployeeByName(String name) {\r\n        return employeeRepository.findByName(name);\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\npublic class EmployeeServiceImplIntegrationTest {\r\n\r\n    @TestConfiguration\r\n    static class EmployeeServiceImplTestContextConfiguration {\r\n\r\n        @Bean\r\n        public EmployeeService employeeService() {\r\n            return new EmployeeServiceImpl();\r\n        }\r\n    }\r\n\r\n    @Autowired\r\n    private EmployeeService employeeService;\r\n\r\n    @MockBean\r\n    private EmployeeRepository employeeRepository;\r\n\r\n    // write test cases here\r\n}\r\n```","```\r\n@Before\r\npublic void setUp() {\r\n    Employee alex = new Employee(\"alex\");\r\n\r\n    Mockito.when(employeeRepository.findByName(alex.getName()))\r\n      .thenReturn(alex);\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidName_thenEmployeeShouldBeFound() {\r\n    String name = \"alex\";\r\n    Employee found = employeeService.getEmployeeByName(name);\r\n\r\n     assertThat(found.getName())\r\n      .isEqualTo(name);\r\n }\r\n```","```\r\n@Entity\r\n@Table(name = \"person\")\r\npublic class Employee {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Size(min = 3, max = 20)\r\n    private String name;\r\n\r\n    // standard getters and setters, constructors\r\n}\r\n```","```\r\n@Repository\r\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\r\n\r\n    public Employee findByName(String name);\r\n\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@DataJpaTest\r\npublic class EmployeeRepositoryIntegrationTest {\r\n\r\n    @Autowired\r\n    private TestEntityManager entityManager;\r\n\r\n    @Autowired\r\n    private EmployeeRepository employeeRepository;\r\n\r\n    // write test cases here\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindByName_thenReturnEmployee() {\r\n    // given\r\n    Employee alex = new Employee(\"alex\");\r\n    entityManager.persist(alex);\r\n    entityManager.flush();\r\n\r\n    // when\r\n    Employee found = employeeRepository.findByName(alex.getName());\r\n\r\n    // then\r\n    assertThat(found.getName())\r\n      .isEqualTo(alex.getName());\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class EmployeeRestController {\r\n\r\n    @Autowired\r\n    private EmployeeService employeeService;\r\n\r\n    @GetMapping(\"/employees\")\r\n    public List<Employee> getAllEmployees() {\r\n        return employeeService.getAllEmployees();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebMvcTest(EmployeeRestController.class)\r\npublic class EmployeeRestControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mvc;\r\n\r\n    @MockBean\r\n    private EmployeeService service;\r\n\r\n    // write test cases here\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployees_whenGetEmployees_thenReturnJsonArray()\r\n  throws Exception {\r\n\r\n    Employee alex = new Employee(\"alex\");\r\n\r\n    List<Employee> allEmployees = Arrays.asList(alex);\r\n\r\n    given(service.getAllEmployees()).willReturn(allEmployees);\r\n\r\n    mvc.perform(get(\"/api/employees\")\r\n      .contentType(MediaType.APPLICATION_JSON))\r\n      .andExpect(status().isOk())\r\n      .andExpect(jsonPath(\"$\", hasSize(1)))\r\n      .andExpect(jsonPath(\"$[0].name\", is(alex.getName())));\r\n}\r\n```"]