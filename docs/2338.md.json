["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class Customer {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long id;\r\n\r\n    private String contactInfo;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Entity\r\npublic class ContactInfoExpression {\r\n\r\n    @Id\r\n    @Column(name=\"expression_type\")\r\n    private String type;\r\n\r\n    private String pattern;\r\n\r\n    //standard constructor, getters, setters\r\n}\r\n```","```\r\npublic interface ContactInfoExpressionRepository \r\n  extends Repository<ContactInfoExpression, String> {\r\n\r\n    Optional<ContactInfoExpression> findById(String id);\r\n}\r\n```","```\r\n@EnableJpaRepositories(\"com.baeldung.dynamicvalidation.dao\")\r\n@EntityScan(\"com.baeldung.dynamicvalidation.model\")\r\n@Configuration\r\npublic class PersistenceConfig {\r\n\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        EmbeddedDatabaseBuilder builder = new EmbeddedDatabaseBuilder();\r\n        EmbeddedDatabase db = builder.setType(EmbeddedDatabaseType.H2)\r\n          .addScript(\"schema-expressions.sql\")\r\n          .addScript(\"data-expressions.sql\")\r\n          .build();\r\n        return db;\r\n    }\r\n}\r\n```","```\r\nCREATE TABLE contact_info_expression(\r\n  expression_type varchar(50) not null,\r\n  pattern varchar(500) not null,\r\n  PRIMARY KEY ( expression_type )\r\n);\r\n```","```\r\ninsert into contact_info_expression values ('email',\r\n  '[a-z0-9!#$%&*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?')\r\ninsert into contact_info_expression values ('phone',\r\n  '^([0-9]( |-)?)?(\\(?[0-9]{3}\\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$')\r\ninsert into contact_info_expression values ('website',\r\n  '^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$')\r\n```","```\r\npublic class ContactInfoValidator implements ConstraintValidator<ContactInfo, String> {\r\n\r\n    private static final Logger LOG = Logger.getLogger(ContactInfoValidator.class);\r\n\r\n    @Value(\"${contactInfoType}\")\r\n    private String expressionType;\r\n\r\n    private String pattern;\r\n\r\n    @Autowired\r\n    private ContactInfoExpressionRepository expressionRepository;\r\n\r\n    @Override\r\n    public void initialize(ContactInfo contactInfo) {\r\n        if (StringUtils.isEmptyOrWhitespace(expressionType)) {\r\n            LOG.error(\"Contact info type missing!\");\r\n        } else {\r\n            pattern = expressionRepository.findById(expressionType)\r\n              .map(ContactInfoExpression::getPattern).get();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String value, ConstraintValidatorContext context) {\r\n        if (!StringUtils.isEmptyOrWhitespace(pattern)) {\r\n            return Pattern.matches(pattern, value);\r\n        }\r\n        LOG.error(\"Contact info pattern missing!\");\r\n        return false;\r\n    }\r\n}\r\n```","```\r\ncontactInfoType=email\r\n```","```\r\n@Constraint(validatedBy = { ContactInfoValidator.class })\r\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ContactInfo {\r\n    String message() default \"Invalid value\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class Customer {\r\n\r\n    // ...\r\n    @ContactInfo\r\n    @NotNull\r\n    private String contactInfo;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@PostMapping(\"/customer\")\r\npublic String validateCustomer(@Valid Customer customer, BindingResult result, Model model) {\r\n    if (result.hasErrors()) {\r\n        model.addAttribute(\"message\", \"The information is invalid!\");\r\n    } else {\r\n        model.addAttribute(\"message\", \"The information is valid!\");\r\n    }\r\n    return \"customer\";\r\n}\r\n```","```\r\n<form action=\"customer\" method=\"POST\">\r\nContact Info: <input type=\"text\" name=\"contactInfo\" /> <br />\r\n<input type=\"submit\" value=\"Submit\" />\r\n</form>\r\n<span th:text=\"${message}\"></span>\r\n```","```\r\n@SpringBootApplication\r\npublic class DynamicValidationApp {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DynamicValidationApp.class, args);\r\n    }\r\n}\r\n```"]