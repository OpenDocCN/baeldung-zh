["```\r\n@Test\r\npublic void whenConnectTimeoutExceeded_thenSocketTimeoutException() {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .connectTimeout(10, TimeUnit.MILLISECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"http://203.0.113.1\") // non routable address\r\n      .build();\r\n\r\n    Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\r\n\r\n    assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadTimeoutExceeded_thenSocketTimeoutException() {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .readTimeout(10, TimeUnit.MILLISECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"https://httpbin.org/delay/2\") // 2-second response time\r\n      .build();\r\n\r\n    Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\r\n\r\n    assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteTimeoutExceeded_thenSocketTimeoutException() {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .writeTimeout(10, TimeUnit.MILLISECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"https://httpbin.org/delay/2\")\r\n      .post(RequestBody.create(MediaType.parse(\"text/plain\"), create1MBString()))\r\n      .build();\r\n\r\n    Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\r\n\r\n    assertThat(thrown).isInstanceOf(SocketTimeoutException.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCallTimeoutExceeded_thenInterruptedIOException() {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .callTimeout(1, TimeUnit.SECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"https://httpbin.org/delay/2\")\r\n      .build();\r\n\r\n    Throwable thrown = catchThrowable(() -> client.newCall(request).execute());\r\n\r\n    assertThat(thrown).isInstanceOf(InterruptedIOException.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenPerRequestTimeoutExtended_thenResponseSuccess() throws IOException {\r\n    OkHttpClient defaultClient = new OkHttpClient.Builder()\r\n      .readTimeout(1, TimeUnit.SECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"https://httpbin.org/delay/2\")\r\n      .build();\r\n\r\n    Throwable thrown = catchThrowable(() -> defaultClient.newCall(request).execute());\r\n\r\n    assertThat(thrown).isInstanceOf(InterruptedIOException.class);\r\n\r\n    OkHttpClient extendedTimeoutClient = defaultClient.newBuilder()\r\n      .readTimeout(5, TimeUnit.SECONDS)\r\n      .build();\r\n\r\n    Response response = extendedTimeoutClient.newCall(request).execute();\r\n    assertThat(response.code()).isEqualTo(200);\r\n}\r\n```"]