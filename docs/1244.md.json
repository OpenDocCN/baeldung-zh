["```\r\npublic abstract class AbstractHibernateDao<T extends Serializable> {\r\n    private Class<T> clazz;\r\n\r\n    @Autowired\r\n    protected SessionFactory sessionFactory;\r\n\r\n    public final void setClazz(final Class<T> clazzToSet) {\r\n        clazz = Preconditions.checkNotNull(clazzToSet);\r\n    }\r\n\r\n    // API\r\n    public T findOne(final long id) {\r\n        return (T) getCurrentSession().get(clazz, id);\r\n    }\r\n\r\n    public List<T> findAll() {\r\n        return getCurrentSession().createQuery(\"from \" + clazz.getName()).list();\r\n    }\r\n\r\n    public T create(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        getCurrentSession().saveOrUpdate(entity);\r\n        return entity;\r\n    }\r\n\r\n    public T update(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        return (T) getCurrentSession().merge(entity);\r\n    }\r\n\r\n    public void delete(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        getCurrentSession().delete(entity);\r\n    }\r\n\r\n    public void deleteById(final long entityId) {\r\n        final T entity = findOne(entityId);\r\n        Preconditions.checkState(entity != null);\r\n        delete(entity);\r\n    }\r\n\r\n    protected Session getCurrentSession() {\r\n        return sessionFactory.getCurrentSession();\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic class FooDAO extends AbstractHibernateDAO< Foo > implements IFooDAO{\r\n\r\n   public FooDAO(){\r\n      setClazz(Foo.class );\r\n   }\r\n}\r\n```"]