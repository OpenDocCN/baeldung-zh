["```\r\npublic class StaticTest {\r\n    public static List<Double> list = new ArrayList<>();\r\n\r\n    public void populateList() {\r\n        for (int i = 0; i < 10000000; i++) {\r\n            list.add(Math.random());\r\n        }\r\n        Log.info(\"Debug Point 2\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Log.info(\"Debug Point 1\");\r\n        new StaticTest().populateList();\r\n        Log.info(\"Debug Point 3\");\r\n    }\r\n}\r\n```","```\r\npublic class Person {\r\n    public String name;\r\n\r\n    public Person(String name) {\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenMap_whenEqualsAndHashCodeNotOverridden_thenMemoryLeak() {\r\n    Map<Person, Integer> map = new HashMap<>();\r\n    for(int i=0; i<100; i++) {\r\n        map.put(new Person(\"jon\"), 1);\r\n    }\r\n    Assert.assertFalse(map.size() == 1);\r\n}\r\n```","```\r\npublic class Person {\r\n    public String name;\r\n\r\n    public Person(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (o == this) return true;\r\n        if (!(o instanceof Person)) {\r\n            return false;\r\n        }\r\n        Person person = (Person) o;\r\n        return person.name.equals(name);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int result = 17;\r\n        result = 31 * result + name.hashCode();\r\n        return result;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenMap_whenEqualsAndHashCodeNotOverridden_thenMemoryLeak() {\r\n    Map<Person, Integer> map = new HashMap<>();\r\n    for(int i=0; i<2; i++) {\r\n        map.put(new Person(\"jon\"), 1);\r\n    }\r\n    Assert.assertTrue(map.size() == 1);\r\n}\r\n```","```\r\n    -XX:MaxPermSize=512m\r\n    ```","```\r\ntry {\r\n    threadLocal.set(System.nanoTime());\r\n    //... further processing\r\n}\r\nfinally {\r\n    threadLocal.remove();\r\n}\r\n```","```\r\n-verbose:gc\r\n```"]