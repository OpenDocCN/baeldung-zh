["```\r\ndouble myDouble = 1.1;\r\nint myInt = (int) myDouble;\r\n\r\nassertNotEquals(myDouble, myInt);\r\n```","```\r\npublic class Animal {\r\n\r\n    public void eat() {\r\n        // ... \r\n    }\r\n}\r\n```","```\r\npublic class Cat extends Animal {\r\n\r\n    public void eat() {\r\n         // ... \r\n    }\r\n\r\n    public void meow() {\r\n         // ... \r\n    }\r\n}\r\n```","```\r\nCat cat = new Cat();\r\n```","```\r\nAnimal animal = cat;\r\n```","```\r\nanimal = (Animal) cat;\r\n```","```\r\n// animal.meow(); The method meow() is undefined for the type Animal\r\n```","```\r\npublic class Dog extends Animal {\r\n\r\n    public void eat() {\r\n         // ... \r\n    }\r\n}\r\n```","```\r\npublic class AnimalFeeder {\r\n\r\n    public void feed(List<Animal> animals) {\r\n        animals.forEach(animal -> {\r\n            animal.eat();\r\n        });\r\n    }\r\n}\r\n```","```\r\nList<Animal> animals = new ArrayList<>();\r\nanimals.add(new Cat());\r\nanimals.add(new Dog());\r\nnew AnimalFeeder().feed(animals);\r\n```","```\r\nObject object = new Animal();\r\n```","```\r\npublic interface Mew {\r\n    public void meow();\r\n}\r\n\r\npublic class Cat extends Animal implements Mew {\r\n\r\n    public void eat() {\r\n         // ... \r\n    }\r\n\r\n    public void meow() {\r\n         // ... \r\n    }\r\n}\r\n```","```\r\nMew mew = new Cat();\r\n```","```\r\npublic void feed(List<Animal> animals) {\r\n    animals.forEach(animal -> {\r\n        animal.eat();\r\n    });\r\n}\r\n```","```\r\nweb - 2018-02-15 22:48:49,354 [main] INFO com.baeldung.casting.Cat - cat is eating\r\nweb - 2018-02-15 22:48:49,363 [main] INFO com.baeldung.casting.Dog - dog is eating \r\n```","```\r\nAnimal animal = new Cat();\r\n```","```\r\n((Cat) animal).meow();\r\n```","```\r\npublic class AnimalFeeder {\r\n\r\n    public void feed(List<Animal> animals) {\r\n        animals.forEach(animal -> {\r\n            animal.eat();\r\n            if (animal instanceof Cat) {\r\n                ((Cat) animal).meow();\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\nweb - 2018-02-16 18:13:45,445 [main] INFO com.baeldung.casting.Cat - cat is eating\r\nweb - 2018-02-16 18:13:45,454 [main] INFO com.baeldung.casting.Cat - meow\r\nweb - 2018-02-16 18:13:45,455 [main] INFO com.baeldung.casting.Dog - dog is eating\r\n```","```\r\nif (animal instanceof Cat) {\r\n    ((Cat) animal).meow();\r\n}\r\n```","```\r\npublic void uncheckedFeed(List<Animal> animals) {\r\n    animals.forEach(animal -> {\r\n        animal.eat();\r\n        ((Cat) animal).meow();\r\n    });\r\n}\r\n```","```\r\nAnimal animal;\r\nString s = (String) animal;\r\n```","```\r\npublic void whenDowncastToCatWithCastMethod_thenMeowIsCalled() {\r\n    Animal animal = new Cat();\r\n    if (Cat.class.isInstance(animal)) {\r\n        Cat cat = Cat.class.cast(animal);\r\n        cat.meow();\r\n    }\r\n}\r\n```","```\r\npublic class AnimalFeederGeneric<T> {\r\n    private Class<T> type;\r\n\r\n    public AnimalFeederGeneric(Class<T> type) {\r\n        this.type = type;\r\n    }\r\n\r\n    public List<T> feed(List<Animal> animals) {\r\n        List<T> list = new ArrayList<T>();\r\n        animals.forEach(animal -> {\r\n            if (type.isInstance(animal)) {\r\n                T objAsType = type.cast(animal);\r\n                list.add(objAsType);\r\n            }\r\n        });\r\n        return list;\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenParameterCat_thenOnlyCatsFed() {\r\n    List<Animal> animals = new ArrayList<>();\r\n    animals.add(new Cat());\r\n    animals.add(new Dog());\r\n    AnimalFeederGeneric<Cat> catFeeder\r\n      = new AnimalFeederGeneric<Cat>(Cat.class);\r\n    List<Cat> fedAnimals = catFeeder.feed(animals);\r\n\r\n    assertTrue(fedAnimals.size() == 1);\r\n    assertTrue(fedAnimals.get(0) instanceof Cat);\r\n}\r\n```"]