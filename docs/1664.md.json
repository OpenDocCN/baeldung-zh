["```\r\nstatic String usingSubstringMethod(String text, int length) {\r\n    if (text.length() <= length) {\r\n        return text;\r\n    } else {\r\n        return text.substring(0, length);\r\n    }\r\n}\r\n```","```\r\nstatic final String TEXT = \"Welcome to baeldung.com\";\r\n\r\n@Test\r\npublic void givenStringAndLength_whenUsingSubstringMethod_thenTrim() {\r\n\r\n    assertEquals(TrimStringOnLength.usingSubstringMethod(TEXT, 10), \"Welcome to\");\r\n}\r\n```","```\r\nstatic String usingSplitMethod(String text, int length) {\r\n\r\n    String[] results = text.split(\"(?<=\\\\G.{\" + length + \"})\");\r\n\r\n    return results[0];\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringAndLength_whenUsingSplitMethod_thenTrim() {\r\n\r\n    assertEquals(TrimStringOnLength.usingSplitMethod(TEXT, 13), \"Welcome to ba\");\r\n}\r\n```","```\r\nstatic String usingPattern(String text, int length) {\r\n\r\n    Optional<String> result = Pattern.compile(\".{1,\" + length + \"}\")\r\n      .matcher(text)\r\n      .results()\r\n      .map(MatchResult::group)\r\n      .findFirst();\r\n\r\n    return result.isPresent() ? result.get() : EMPTY;\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringAndLength_whenUsingPattern_thenTrim() {\r\n\r\n    assertEquals(TrimStringOnLength.usingPattern(TEXT, 19), \"Welcome to baeldung\");\r\n}\r\n```","```\r\nstatic String usingCodePointsMethod(String text, int length) {\r\n\r\n    return text.codePoints()\r\n      .limit(length)\r\n      .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\r\n      .toString();\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringAndLength_whenUsingCodePointsMethod_thenTrim() {\r\n\r\n    assertEquals(TrimStringOnLength.usingCodePointsMethod(TEXT, 6), \"Welcom\");\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nstatic String usingLeftMethod(String text, int length) {\r\n\r\n    return StringUtils.left(text, length);\r\n}\r\n```","```\r\npublic static String usingTruncateMethod(String text, int length) {\r\n\r\n    return StringUtils.truncate(text, length);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nstatic String usingSplitter(String text, int length) {\r\n\r\n    Iterable<String> parts = Splitter.fixedLength(length)\r\n      .split(text);\r\n\r\n    return parts.iterator()\r\n      .next();\r\n}\r\n```"]