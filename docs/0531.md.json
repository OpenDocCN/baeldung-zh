["```\r\npublic class User {\r\nprivate String userid;\r\n    private String firstName;\r\n    private String lastName;\r\n    private Set<Contact> contacts;\r\n    private Set<Address> addresses;\r\n    // getters and setters\r\n}\r\n\r\npublic class Contact {\r\n    private String type;\r\n    private String detail;\r\n    // getters and setters\r\n}\r\n\r\npublic class Address {\r\n    private String city;\r\n    private String state;\r\n    private String postcode;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class UserRepository {\r\n    private Map<String, User> store = new HashMap<>();\r\n}\r\n```","```\r\npublic class UserService {\r\n    private UserRepository repository;\r\n    public UserService(UserRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    public void createUser(String userId, String firstName, String lastName) {\r\n        User user = new User(userId, firstName, lastName);\r\n        repository.addUser(userId, user);\r\n    }\r\n\r\n    public void updateUser(String userId, Set<Contact> contacts, Set<Address> addresses) {\r\n        User user = repository.getUser(userId);\r\n        user.setContacts(contacts);\r\n        user.setAddresses(addresses);\r\n        repository.addUser(userId, user);\r\n    }\r\n\r\n    public Set<Contact> getContactByType(String userId, String contactType) {\r\n        User user = repository.getUser(userId);\r\n        Set<Contact> contacts = user.getContacts();\r\n        return contacts.stream()\r\n          .filter(c -> c.getType().equals(contactType))\r\n          .collect(Collectors.toSet());\r\n    }\r\n\r\n    public Set<Address> getAddressByRegion(String userId, String state) {\r\n        User user = repository.getUser(userId);\r\n        Set<Address> addresses = user.getAddresses();\r\n        return addresses.stream()\r\n          .filter(a -> a.getState().equals(state))\r\n          .collect(Collectors.toSet());\r\n    }\r\n}\r\n```","```\r\npublic class CreateUserCommand {\r\n    private String userId;\r\n    private String firstName;\r\n    private String lastName;\r\n}\r\n\r\npublic class UpdateUserCommand {\r\n    private String userId;\r\n    private Set<Address> addresses;\r\n    private Set<Contact> contacts;\r\n}\r\n```","```\r\npublic class UserAggregate {\r\n    private UserWriteRepository writeRepository;\r\n    public UserAggregate(UserWriteRepository repository) {\r\n        this.writeRepository = repository;\r\n    }\r\n\r\n    public User handleCreateUserCommand(CreateUserCommand command) {\r\n        User user = new User(command.getUserId(), command.getFirstName(), command.getLastName());\r\n        writeRepository.addUser(user.getUserid(), user);\r\n        return user;\r\n    }\r\n\r\n    public User handleUpdateUserCommand(UpdateUserCommand command) {\r\n        User user = writeRepository.getUser(command.getUserId());\r\n        user.setAddresses(command.getAddresses());\r\n        user.setContacts(command.getContacts());\r\n        writeRepository.addUser(user.getUserid(), user);\r\n        return user;\r\n    }\r\n}\r\n```","```\r\npublic class UserWriteRepository {\r\n    private Map<String, User> store = new HashMap<>();\r\n    // accessors and mutators\r\n}\r\n```","```\r\npublic class UserAddress {\r\n    private Map<String, Set<Address>> addressByRegion = new HashMap<>();\r\n}\r\n\r\npublic class UserContact {\r\n    private Map<String, Set<Contact>> contactByType = new HashMap<>();\r\n}\r\n```","```\r\npublic class UserReadRepository {\r\n    private Map<String, UserAddress> userAddress = new HashMap<>();\r\n    private Map<String, UserContact> userContact = new HashMap<>();\r\n    // accessors and mutators\r\n}\r\n```","```\r\npublic class ContactByTypeQuery {\r\n    private String userId;\r\n    private String contactType;\r\n}\r\n\r\npublic class AddressByRegionQuery {\r\n    private String userId;\r\n    private String state;\r\n}\r\n```","```\r\npublic class UserProjection {\r\n    private UserReadRepository readRepository;\r\n    public UserProjection(UserReadRepository readRepository) {\r\n        this.readRepository = readRepository;\r\n    }\r\n\r\n    public Set<Contact> handle(ContactByTypeQuery query) {\r\n        UserContact userContact = readRepository.getUserContact(query.getUserId());\r\n        return userContact.getContactByType()\r\n          .get(query.getContactType());\r\n    }\r\n\r\n    public Set<Address> handle(AddressByRegionQuery query) {\r\n        UserAddress userAddress = readRepository.getUserAddress(query.getUserId());\r\n        return userAddress.getAddressByRegion()\r\n          .get(query.getState());\r\n    }\r\n}\r\n```","```\r\npublic class UserProjector {\r\n    UserReadRepository readRepository = new UserReadRepository();\r\n    public UserProjector(UserReadRepository readRepository) {\r\n        this.readRepository = readRepository;\r\n    }\r\n\r\n    public void project(User user) {\r\n        UserContact userContact = Optional.ofNullable(\r\n          readRepository.getUserContact(user.getUserid()))\r\n            .orElse(new UserContact());\r\n        Map<String, Set<Contact>> contactByType = new HashMap<>();\r\n        for (Contact contact : user.getContacts()) {\r\n            Set<Contact> contacts = Optional.ofNullable(\r\n              contactByType.get(contact.getType()))\r\n                .orElse(new HashSet<>());\r\n            contacts.add(contact);\r\n            contactByType.put(contact.getType(), contacts);\r\n        }\r\n        userContact.setContactByType(contactByType);\r\n        readRepository.addUserContact(user.getUserid(), userContact);\r\n\r\n        UserAddress userAddress = Optional.ofNullable(\r\n          readRepository.getUserAddress(user.getUserid()))\r\n            .orElse(new UserAddress());\r\n        Map<String, Set<Address>> addressByRegion = new HashMap<>();\r\n        for (Address address : user.getAddresses()) {\r\n            Set<Address> addresses = Optional.ofNullable(\r\n              addressByRegion.get(address.getState()))\r\n                .orElse(new HashSet<>());\r\n            addresses.add(address);\r\n            addressByRegion.put(address.getState(), addresses);\r\n        }\r\n        userAddress.setAddressByRegion(addressByRegion);\r\n        readRepository.addUserAddress(user.getUserid(), userAddress);\r\n    }\r\n}\r\n```","```\r\npublic abstract class Event {\r\n    public final UUID id = UUID.randomUUID();\r\n    public final Date created = new Date();\r\n}\r\n```","```\r\npublic class UserCreatedEvent extends Event {\r\n    private String userId;\r\n    private String firstName;\r\n    private String lastName;\r\n}\r\n\r\npublic class UserContactAddedEvent extends Event {\r\n    private String contactType;\r\n    private String contactDetails;\r\n}\r\n\r\npublic class UserContactRemovedEvent extends Event {\r\n    private String contactType;\r\n    private String contactDetails;\r\n}\r\n\r\npublic class UserAddressAddedEvent extends Event {\r\n    private String city;\r\n    private String state;\r\n    private String postCode;\r\n}\r\n\r\npublic class UserAddressRemovedEvent extends Event {\r\n    private String city;\r\n    private String state;\r\n    private String postCode;\r\n}\r\n```","```\r\npublic class EventStore {\r\n    private Map<String, List<Event>> store = new HashMap<>();\r\n}\r\n```","```\r\npublic class UserService {\r\n    private EventStore repository;\r\n    public UserService(EventStore repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    public void createUser(String userId, String firstName, String lastName) {\r\n        repository.addEvent(userId, new UserCreatedEvent(userId, firstName, lastName));\r\n    }\r\n\r\n    public void updateUser(String userId, Set<Contact> contacts, Set<Address> addresses) {\r\n        User user = UserUtility.recreateUserState(repository, userId);\r\n        user.getContacts().stream()\r\n          .filter(c -> !contacts.contains(c))\r\n          .forEach(c -> repository.addEvent(\r\n            userId, new UserContactRemovedEvent(c.getType(), c.getDetail())));\r\n        contacts.stream()\r\n          .filter(c -> !user.getContacts().contains(c))\r\n          .forEach(c -> repository.addEvent(\r\n            userId, new UserContactAddedEvent(c.getType(), c.getDetail())));\r\n        user.getAddresses().stream()\r\n          .filter(a -> !addresses.contains(a))\r\n          .forEach(a -> repository.addEvent(\r\n            userId, new UserAddressRemovedEvent(a.getCity(), a.getState(), a.getPostcode())));\r\n        addresses.stream()\r\n          .filter(a -> !user.getAddresses().contains(a))\r\n          .forEach(a -> repository.addEvent(\r\n            userId, new UserAddressAddedEvent(a.getCity(), a.getState(), a.getPostcode())));\r\n    }\r\n\r\n    public Set<Contact> getContactByType(String userId, String contactType) {\r\n        User user = UserUtility.recreateUserState(repository, userId);\r\n        return user.getContacts().stream()\r\n          .filter(c -> c.getType().equals(contactType))\r\n          .collect(Collectors.toSet());\r\n    }\r\n\r\n    public Set<Address> getAddressByRegion(String userId, String state) throws Exception {\r\n        User user = UserUtility.recreateUserState(repository, userId);\r\n        return user.getAddresses().stream()\r\n          .filter(a -> a.getState().equals(state))\r\n          .collect(Collectors.toSet());\r\n    }\r\n}\r\n```","```\r\npublic class UserAggregate {\r\n    private EventStore writeRepository;\r\n    public UserAggregate(EventStore repository) {\r\n        this.writeRepository = repository;\r\n    }\r\n\r\n    public List<Event> handleCreateUserCommand(CreateUserCommand command) {\r\n        UserCreatedEvent event = new UserCreatedEvent(command.getUserId(), \r\n          command.getFirstName(), command.getLastName());\r\n        writeRepository.addEvent(command.getUserId(), event);\r\n        return Arrays.asList(event);\r\n    }\r\n\r\n    public List<Event> handleUpdateUserCommand(UpdateUserCommand command) {\r\n        User user = UserUtility.recreateUserState(writeRepository, command.getUserId());\r\n        List<Event> events = new ArrayList<>();\r\n\r\n        List<Contact> contactsToRemove = user.getContacts().stream()\r\n          .filter(c -> !command.getContacts().contains(c))\r\n          .collect(Collectors.toList());\r\n        for (Contact contact : contactsToRemove) {\r\n            UserContactRemovedEvent contactRemovedEvent = new UserContactRemovedEvent(contact.getType(), \r\n              contact.getDetail());\r\n            events.add(contactRemovedEvent);\r\n            writeRepository.addEvent(command.getUserId(), contactRemovedEvent);\r\n        }\r\n        List<Contact> contactsToAdd = command.getContacts().stream()\r\n          .filter(c -> !user.getContacts().contains(c))\r\n          .collect(Collectors.toList());\r\n        for (Contact contact : contactsToAdd) {\r\n            UserContactAddedEvent contactAddedEvent = new UserContactAddedEvent(contact.getType(), \r\n              contact.getDetail());\r\n            events.add(contactAddedEvent);\r\n            writeRepository.addEvent(command.getUserId(), contactAddedEvent);\r\n        }\r\n\r\n        // similarly process addressesToRemove\r\n        // similarly process addressesToAdd\r\n\r\n        return events;\r\n    }\r\n}\r\n```","```\r\npublic class UserProjector {\r\n    UserReadRepository readRepository = new UserReadRepository();\r\n    public UserProjector(UserReadRepository readRepository) {\r\n        this.readRepository = readRepository;\r\n    }\r\n\r\n    public void project(String userId, List<Event> events) {\r\n        for (Event event : events) {\r\n            if (event instanceof UserAddressAddedEvent)\r\n                apply(userId, (UserAddressAddedEvent) event);\r\n            if (event instanceof UserAddressRemovedEvent)\r\n                apply(userId, (UserAddressRemovedEvent) event);\r\n            if (event instanceof UserContactAddedEvent)\r\n                apply(userId, (UserContactAddedEvent) event);\r\n            if (event instanceof UserContactRemovedEvent)\r\n                apply(userId, (UserContactRemovedEvent) event);\r\n        }\r\n    }\r\n\r\n    public void apply(String userId, UserAddressAddedEvent event) {\r\n        Address address = new Address(\r\n          event.getCity(), event.getState(), event.getPostCode());\r\n        UserAddress userAddress = Optional.ofNullable(\r\n          readRepository.getUserAddress(userId))\r\n            .orElse(new UserAddress());\r\n        Set<Address> addresses = Optional.ofNullable(userAddress.getAddressByRegion()\r\n          .get(address.getState()))\r\n          .orElse(new HashSet<>());\r\n        addresses.add(address);\r\n        userAddress.getAddressByRegion()\r\n          .put(address.getState(), addresses);\r\n        readRepository.addUserAddress(userId, userAddress);\r\n    }\r\n\r\n    public void apply(String userId, UserAddressRemovedEvent event) {\r\n        Address address = new Address(\r\n          event.getCity(), event.getState(), event.getPostCode());\r\n        UserAddress userAddress = readRepository.getUserAddress(userId);\r\n        if (userAddress != null) {\r\n            Set<Address> addresses = userAddress.getAddressByRegion()\r\n              .get(address.getState());\r\n            if (addresses != null)\r\n                addresses.remove(address);\r\n            readRepository.addUserAddress(userId, userAddress);\r\n        }\r\n    }\r\n\r\n    public void apply(String userId, UserContactAddedEvent event) {\r\n        // Similarly handle UserContactAddedEvent event\r\n    }\r\n\r\n    public void apply(String userId, UserContactRemovedEvent event) {\r\n        // Similarly handle UserContactRemovedEvent event\r\n    }\r\n}\r\n```"]