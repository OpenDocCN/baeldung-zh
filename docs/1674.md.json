["```\r\nprivate static int counter = 0;\r\n\r\npublic static int incrementCounter() {\r\n    return ++counter;\r\n}\r\n\r\npublic static int getCounterValue() {\r\n    return counter;\r\n}\r\n```","```\r\nint oldValue = StaticCounter.getCounterValue();\r\nint newValue = StaticCounter.incrementCounter();\r\nassertThat(newValue).isEqualTo(oldValue + 1);\r\n```","```\r\nString str = StringUtils.capitalize(\"baeldung\");\r\nassertThat(str).isEqualTo(\"Baeldung\"); \r\n```","```\r\nList<String> list = Arrays.asList(\"1\", \"2\", \"3\");\r\nCollections.reverse(list);\r\nassertThat(list).containsExactly(\"3\", \"2\", \"1\");\r\n```","```\r\npublic final class CustomStringUtils {\r\n\r\n    private CustomStringUtils() {\r\n    }\r\n\r\n    public static boolean isEmpty(CharSequence cs) { \r\n        return cs == null || cs.length() == 0; \r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenNonEmptyString_whenIsEmptyMethodIsCalled_thenFalseIsReturned() {\r\n    boolean empty = CustomStringUtils.isEmpty(\"baeldung\");\r\n    assertThat(empty).isFalse();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-inline</artifactId>\r\n    <version>3.8.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\ntry (MockedStatic<StringUtils> utilities = Mockito.mockStatic(StringUtils.class)) {\r\n    utilities.when(() -> StringUtils.capitalize(\"karoq\")).thenReturn(\"Karoq\");\r\n\r\n    Car car1 = new Car(1, \"karoq\");\r\n    assertThat(car1.getModelCapitalized()).isEqualTo(\"Karoq\");\r\n}\r\n```"]