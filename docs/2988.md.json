["```\r\n<dependencies>\r\n    // ...\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>de.flapdoodle.embed</groupId>\r\n        <artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@EnableReactiveMongoRepositories\r\npublic class MongoReactiveApplication\r\n  extends AbstractReactiveMongoConfiguration {\r\n\r\n    @Bean\r\n    public MongoClient mongoClient() {\r\n        return MongoClients.create();\r\n    }\r\n\r\n    @Override\r\n    protected String getDatabaseName() {\r\n        return \"reactive\";\r\n    }\r\n}\r\n```","```\r\n@Document\r\npublic class Account {\r\n\r\n    @Id\r\n    private String id;\r\n    private String owner;\r\n    private Double value;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface AccountCrudRepository \r\n  extends ReactiveCrudRepository<Account, String> {\r\n\r\n    Flux<Account> findAllByValue(String value);\r\n    Mono<Account> findFirstByOwner(Mono<String> owner);\r\n}\r\n```","```\r\n@Repository\r\npublic interface AccountReactiveRepository \r\n  extends ReactiveMongoRepository<Account, String> { }\r\n```","```\r\nFlux<Account> accountFlux = repository\r\n  .findAll(Example.of(new Account(null, \"owner\", null)));\r\n```","```\r\nMono<Account> accountMono \r\n  = repository.save(new Account(null, \"owner\", 12.3));\r\nMono<Account> accountMono2 = repository\r\n  .findById(\"123456\");\r\n```","```\r\n@Repository\r\npublic interface AccountRxJavaRepository \r\n  extends RxJava2CrudRepository<Account, String> {\r\n\r\n    Observable<Account> findAllByValue(Double value);\r\n    Single<Account> findFirstByOwner(Single<String> owner);\r\n}\r\n```","```\r\n@Test\r\npublic void givenValue_whenFindAllByValue_thenFindAccount() {\r\n    repository.save(new Account(null, \"Bill\", 12.3)).block();\r\n    Flux<Account> accountFlux = repository.findAllByValue(12.3);\r\n\r\n    StepVerifier\r\n      .create(accountFlux)\r\n      .assertNext(account -> {\r\n          assertEquals(\"Bill\", account.getOwner());\r\n          assertEquals(Double.valueOf(12.3) , account.getValue());\r\n          assertNotNull(account.getId());\r\n      })\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n\r\n@Test\r\npublic void givenOwner_whenFindFirstByOwner_thenFindAccount() {\r\n    repository.save(new Account(null, \"Bill\", 12.3)).block();\r\n    Mono<Account> accountMono = repository\r\n      .findFirstByOwner(Mono.just(\"Bill\"));\r\n\r\n    StepVerifier\r\n      .create(accountMono)\r\n      .assertNext(account -> {\r\n          assertEquals(\"Bill\", account.getOwner());\r\n          assertEquals(Double.valueOf(12.3) , account.getValue());\r\n          assertNotNull(account.getId());\r\n      })\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n\r\n@Test\r\npublic void givenAccount_whenSave_thenSaveAccount() {\r\n    Mono<Account> accountMono = repository.save(new Account(null, \"Bill\", 12.3));\r\n\r\n    StepVerifier\r\n      .create(accountMono)\r\n      .assertNext(account -> assertNotNull(account.getId()))\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Configuration\r\npublic class ReactiveMongoConfig {\r\n\r\n    @Autowired\r\n    MongoClient mongoClient;\r\n\r\n    @Bean\r\n    public ReactiveMongoTemplate reactiveMongoTemplate() {\r\n        return new ReactiveMongoTemplate(mongoClient, \"test\");\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class AccountTemplateOperations {\r\n\r\n    @Autowired\r\n    ReactiveMongoTemplate template;\r\n\r\n    public Mono<Account> findById(String id) {\r\n        return template.findById(id, Account.class);\r\n    }\r\n\r\n    public Flux<Account> findAll() {\r\n        return template.findAll(Account.class);\r\n    } \r\n    public Mono<Account> save(Mono<Account> account) {\r\n        return template.save(account);\r\n    }\r\n}\r\n```"]