["```\r\npublic class MyList extends AbstractList<String> {\r\n\r\n    @Override\r\n    public String get(final int index) {\r\n        return null;\r\n    }\r\n    @Override\r\n    public int size() {\r\n        return 1;\r\n    }\r\n} \r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\nwhen(listMock.add(anyString())).thenReturn(false);\r\n\r\nboolean added = listMock.add(randomAlphabetic(6));\r\nassertThat(added).isFalse();\r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\ndoReturn(false).when(listMock).add(anyString());\r\n\r\nboolean added = listMock.add(randomAlphabetic(6));\r\nassertThat(added).isFalse();\r\n```","```\r\n@Test(expected = IllegalStateException.class)\r\npublic void givenMethodIsConfiguredToThrowException_whenCallingMethod_thenExceptionIsThrown() {\r\n    MyList listMock = Mockito.mock(MyList.class);\r\n    when(listMock.add(anyString())).thenThrow(IllegalStateException.class);\r\n\r\n    listMock.add(randomAlphabetic(6));\r\n}\r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\ndoThrow(NullPointerException.class).when(listMock).clear();\r\n\r\nlistMock.clear();\r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\nwhen(listMock.add(anyString()))\r\n  .thenReturn(false)\r\n  .thenThrow(IllegalStateException.class);\r\n\r\nlistMock.add(randomAlphabetic(6));\r\nlistMock.add(randomAlphabetic(6)); // will throw the exception\r\n```","```\r\nMyList instance = new MyList();\r\nMyList spy = Mockito.spy(instance);\r\n\r\ndoThrow(NullPointerException.class).when(spy).size();\r\nspy.size(); // will throw the exception\r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\nwhen(listMock.size()).thenCallRealMethod();\r\n\r\nassertThat(listMock).hasSize(1);\r\n```","```\r\nMyList listMock = Mockito.mock(MyList.class);\r\ndoAnswer(invocation -> \"Always the same\").when(listMock).get(anyInt());\r\n\r\nString element = listMock.get(1);\r\nassertThat(element).isEqualTo(\"Always the same\");\r\n```"]