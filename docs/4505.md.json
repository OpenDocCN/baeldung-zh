["```\r\n@EnableIntegration\r\n@IntegrationComponentScan\r\npublic class SubflowsConfiguration {\r\n\r\n    @Bean\r\n    QueueChannel multipleOfThreeChannel() {\r\n        return new QueueChannel();\r\n    }\r\n\r\n    @Bean\r\n    QueueChannel remainderIsOneChannel() {\r\n        return new QueueChannel();\r\n    }\r\n\r\n    @Bean\r\n    QueueChannel remainderIsTwoChannel() {\r\n        return new QueueChannel();\r\n    }\r\n\r\n    boolean isMultipleOfThree(Integer number) {\r\n       return number % 3 == 0;\r\n    }\r\n\r\n    boolean isRemainderIOne(Integer number) {\r\n        return number % 3 == 1;\r\n    }\r\n\r\n    boolean isRemainderTwo(Integer number) {\r\n        return number % 3 == 2;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow multipleOfThreeFlow() {\r\n    return flow -> flow.split()\r\n      .<Integer> filter(this::isMultipleOfThree)\r\n      .channel(\"multipleOfThreeChannel\");\r\n}\r\n```","```\r\n@MessagingGateway\r\npublic interface NumbersClassifier {\r\n\r\n    @Gateway(requestChannel = \"multipleOfThreeFlow.input\")\r\n    void multipleOfThree(Collection<Integer> numbers);\r\n\r\n    @Gateway(requestChannel = \"remainderIsOneFlow.input\")\r\n    void remainderIsOne(Collection<Integer> numbers);\r\n\r\n    @Gateway(requestChannel = \"remainderIsTwoFlow.input\")\r\n    void remainderIsTwo(Collection<Integer> numbers);\r\n\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { SeparateFlowsConfiguration.class })\r\npublic class SeparateFlowsUnitTest {\r\n\r\n    @Autowired\r\n    private QueueChannel multipleOfThreeChannel;\r\n\r\n    @Autowired\r\n    private NumbersClassifier numbersClassifier; \r\n```","```\r\n @Test\r\n    public void whenSendMessagesToMultipleOf3Flow_thenOutputMultiplesOf3() {\r\n        numbersClassifier.multipleOfThree(Arrays.asList(1, 2, 3, 4, 5, 6));\r\n        Message<?> outMessage = multipleOfThreeChannel.receive(0);\r\n        assertEquals(outMessage.getPayload(), 3);\r\n        outMessage = multipleOfThreeChannel.receive(0);\r\n        assertEquals(outMessage.getPayload(), 6);\r\n        outMessage = multipleOfThreeChannel.receive(0);\r\n        assertNull(outMessage);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow classify() {\r\n    return flow -> flow.split()\r\n        .publishSubscribeChannel(subscription -> \r\n           subscription\r\n             .subscribe(subflow -> subflow\r\n               .<Integer> filter(this::isMultipleOfThree)\r\n               .channel(\"multipleOfThreeChannel\"))\r\n             .subscribe(subflow -> subflow\r\n                .<Integer> filter(this::isRemainderOne)\r\n                .channel(\"remainderIsOneChannel\"))\r\n             .subscribe(subflow -> subflow\r\n                .<Integer> filter(this::isRemainderTwo)\r\n                .channel(\"remainderIsTwoChannel\")));\r\n}\r\n```","```\r\n@Gateway(requestChannel = \"classify.input\")\r\nvoid classify(Collection<Integer> numbers);\r\n```","```\r\n@Test\r\npublic void whenSendMessagesToFlow_thenNumbersAreClassified() {\r\n    numbersClassifier.classify(Arrays.asList(1, 2, 3, 4, 5, 6));\r\n\r\n    // same assertions as before\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow classify() {\r\n    return flow -> flow.split()\r\n        .routeToRecipients(route -> route\r\n          .<Integer> recipient(\"multipleOfThreeChannel\", \r\n            this::isMultipleOfThree)       \r\n          .<Integer> recipient(\"remainderIsOneChannel\", \r\n            this::isRemainderOne)\r\n          .<Integer> recipient(\"remainderIsTwoChannel\", \r\n            this::isRemainderTwo));\r\n}\r\n```","```\r\n.routeToRecipients(route -> route\r\n  .recipientFlow(subflow -> subflow\r\n      .<Integer> filter(this::isMultipleOfThree)\r\n      .channel(\"mutipleOfThreeChannel\"))\r\n  ...);\r\n```","```\r\n@Bean\r\npublic IntegrationFlow classify() {\r\n    return flow -> flow.split()\r\n        .<Integer> filter(this::isMultipleOfThree, \r\n           notMultiple -> notMultiple\r\n             .discardFlow(oneflow -> oneflow\r\n               .<Integer> filter(this::isRemainderOne,\r\n                 twoflow -> twoflow\r\n                   .discardChannel(\"remainderIsTwoChannel\"))\r\n               .channel(\"remainderIsOneChannel\"))\r\n        .channel(\"multipleofThreeChannel\");\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow classify() {\r\n    return classify -> classify.split()\r\n      .<Integer, Integer> route(number -> number % 3, \r\n        mapping -> mapping\r\n         .channelMapping(0, \"multipleOfThreeChannel\")\r\n         .channelMapping(1, \"remainderIsOneChannel\")\r\n         .channelMapping(2, \"remainderIsTwoChannel\"));\r\n}\r\n```","```\r\nroute(p -> p % 3,...\r\n```","```\r\nchannelMapping(0, \"multipleof3Channel\")\r\n```","```\r\n.subFlowMapping(1, subflow -> subflow.channel(\"remainderIsOneChannel\"))\r\n```","```\r\n.subFlowMapping(2, subflow -> subflow\r\n  .<Integer> handle((payload, headers) -> {\r\n      // do extra work on the payload\r\n     return payload;\r\n  }))).channel(\"remainderIsTwoChannel\");\r\n```"]