["```\r\nMap<String, Integer> someMap = new HashMap<>();\r\n```","```\r\nSet<Map.Entry<String, Integer>> entries = someMap.entrySet();\r\n```","```\r\nSet<String> keySet = someMap.keySet();\r\n```","```\r\nCollection<Integer> values = someMap.values();\r\n```","```\r\nStream<Map.Entry<String, Integer>> entriesStream = entries.stream();\r\nStream<Integer> valuesStream = values.stream();\r\nStream<String> keysStream = keySet.stream();\r\n```","```\r\nMap<String, String> books = new HashMap<>();\r\nbooks.put(\r\n\"978-0201633610\", \"Design patterns : elements of reusable object-oriented software\");\r\nbooks.put(\r\n  \"978-1617291999\", \"Java 8 in Action: Lambdas, Streams, and functional-style programming\");\r\nbooks.put(\"978-0134685991\", \"Effective Java\");\r\n```","```\r\nOptional<String> optionalIsbn = books.entrySet().stream()\r\n  .filter(e -> \"Effective Java\".equals(e.getValue()))\r\n  .map(Map.Entry::getKey)\r\n  .findFirst();\r\n\r\nassertEquals(\"978-0134685991\", optionalIsbn.get());\r\n```","```\r\nOptional<String> optionalIsbn = books.entrySet().stream()\r\n  .filter(e -> \"Non Existent Title\".equals(e.getValue()))\r\n  .map(Map.Entry::getKey).findFirst();\r\n\r\nassertEquals(false, optionalIsbn.isPresent());\r\n```","```\r\nbooks.put(\"978-0321356680\", \"Effective Java: Second Edition\"); \r\n```","```\r\nList<String> isbnCodes = books.entrySet().stream()\r\n  .filter(e -> e.getValue().startsWith(\"Effective Java\"))\r\n  .map(Map.Entry::getKey)\r\n  .collect(Collectors.toList());\r\n\r\nassertTrue(isbnCodes.contains(\"978-0321356680\"));\r\nassertTrue(isbnCodes.contains(\"978-0134685991\"));\r\n```","```\r\nList<String> titles = books.entrySet().stream()\r\n  .filter(e -> e.getKey().startsWith(\"978-0\"))\r\n  .map(Map.Entry::getValue)\r\n  .collect(Collectors.toList());\r\n\r\nassertEquals(2, titles.size());\r\nassertTrue(titles.contains(\r\n  \"Design patterns : elements of reusable object-oriented software\"));\r\nassertTrue(titles.contains(\"Effective Java\"));\r\n```"]