["```\r\n@FunctionalInterface\r\npublic interface TriFunction<T, U, V, R> {\r\n\r\n    R apply(T t, U u, V v);\r\n\r\n    default <K> TriFunction<T, U, V, K> andThen(Function<? super R, ? extends K> after) {\r\n        Objects.requireNonNull(after);\r\n        return (T t, U u, V v) -> after.apply(apply(t, u, v));\r\n    }\r\n}\r\n```","```\r\nstatic TriFunction<Integer, Integer, Integer, Integer> multiplyThenAdd = (x, y, z) -> x * y + z;\r\n```","```\r\nstatic TriFunction<Integer, Integer, Integer, Integer> multiplyThenAddThenDivideByTen = multiplyThenAdd.andThen(x -> x / 10);\r\n```","```\r\n@Test\r\nvoid whenMultiplyThenAdd_ThenReturnsCorrectResult() {\r\n    assertEquals(25, multiplyThenAdd.apply(2, 10, 5));\r\n}\r\n\r\n@Test\r\nvoid whenMultiplyThenAddThenDivideByTen_ThenReturnsCorrectResult() {\r\n    assertEquals(2, multiplyThenAddThenDivideByTen.apply(2, 10, 5));\r\n}\r\n```","```\r\nstatic TriFunction<Integer, String, Boolean, String> convertIntegerOrReturnStringDependingOnCondition = (myInt, myStr, myBool) -> {\r\n    if (Boolean.TRUE.equals(myBool)) {\r\n        return myInt != null ? myInt.toString() : \"\";\r\n    } else {\r\n        return myStr;\r\n    }\r\n};\r\n```","```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>vavr</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\nstatic Function3<Integer, Integer, Integer, Integer> multiplyThenAdd = (x, y, z) -> x * y + z;\r\n\r\nstatic Function3<Integer, Integer, Integer, Integer> multiplyThenAddThenDivideByTen = multiplyThenAdd.andThen(x -> x / 10);\r\n```"]