["```\r\n<dependency>\r\n    <groupId>org.springframework.credhub</groupId>\r\n    <artifactId>spring-credhub-starter</artifactId>\r\n    <version>2.2.0</version>\r\n</dependency>\r\n```","```\r\nspring:\r\n  credhub:\r\n    url: <CredHub URL>\r\n```","```\r\nspring:\r\n  credhub:\r\n    url: <CredHub URL>\r\n    oauth2:\r\n      registration-id: <credhub-client>\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          credhub-client:\r\n            provider: uaa\r\n            client-id: <OAuth2 client ID>\r\n            client-secret: <OAuth2 client secret>\r\n            authorization-grant-type: <client_credentials>\r\n        provider:\r\n          uaa:\r\n            token-uri: <UAA token server endpoint>\r\n```","```\r\npublic class CredentialService {\r\n    private final CredHubCredentialOperations credentialOperations;\r\n    private final CredHubPermissionV2Operations permissionOperations;\r\n\r\n    public CredentialService(CredHubOperations credHubOperations) {\r\n        this.credentialOperations = credHubOperations.credentials();\r\n        this.permissionOperations = credHubOperations.permissionsV2();\r\n    }\r\n}\r\n```","```\r\nSimpleCredentialName credentialName = new SimpleCredentialName(credential.getName());\r\nPasswordCredential passwordCredential = new PasswordCredential((String) value.get(\"password\"));\r\nPasswordCredentialRequest request = PasswordCredentialRequest.builder()\r\n  .name(credentialName)\r\n  .value(passwordCredential)\r\n  .build();\r\ncredentialOperations.write(request);\r\n```","```\r\nValueCredential valueCredential = new ValueCredential((String) value.get(\"value\"));\r\nrequest = ValueCredentialRequest.builder()\r\n  .name(credentialName)\r\n  .value(valueCredential)\r\n  .build();\r\n```","```\r\nRsaCredential rsaCredential = new RsaCredential((String) value.get(\"public_key\"), (String) value.get(\"private_key\"));\r\nrequest = RsaCredentialRequest.builder()\r\n  .name(credentialName)\r\n  .value(rsaCredential)\r\n  .build();\r\n```","```\r\nSimpleCredentialName credentialName = new SimpleCredentialName(\"api_key\");\r\nPasswordParameters parameters = PasswordParameters.builder()\r\n  .length(24)\r\n  .excludeUpper(false)\r\n  .excludeLower(false)\r\n  .includeSpecial(true)\r\n  .excludeNumber(false)\r\n  .build();\r\n\r\nCredentialDetails<PasswordCredential> generatedCred = credentialOperations.generate(PasswordParametersRequest.builder()\r\n  .name(credentialName)\r\n  .parameters(parameters)\r\n  .build());\r\n\r\nString password = generatedCred.getValue().getPassword();\r\n```","```\r\nCredentialDetails<PasswordCredential> newPassword = credentialOperations.regenerate(credentialName, PasswordCredential.class); \r\n```","```\r\ncredentialOperations.deleteByName(credentialName);\r\n```","```\r\npublic ResponseEntity<Collection<Order>> getAllOrders() {\r\n    try {\r\n        String apiKey = credentialService.getPassword(\"api_key\");\r\n        return new ResponseEntity<>(getOrderList(apiKey), HttpStatus.OK);\r\n    } catch (Exception e) {\r\n        return new ResponseEntity<>(HttpStatus.FORBIDDEN);\r\n    }\r\n}\r\n\r\npublic String getPassword(String name) {\r\n    SimpleCredentialName credentialName = new SimpleCredentialName(name);\r\n    return credentialOperations.getByName(credentialName, PasswordCredential.class)\r\n      .getValue()\r\n      .getPassword();\r\n}\r\n```","```\r\nPermission permission = Permission.builder()\r\n  .app(UUID.randomUUID().toString())\r\n  .operations(Operation.READ, Operation.WRITE)\r\n  .user(\"u101\")\r\n  .build();\r\npermissionOperations.addPermissions(name, permission);\r\n```"]