["```\r\npublic static Instant between(Instant startInclusive, Instant endExclusive) {\r\n    long startSeconds = startInclusive.getEpochSecond();\r\n    long endSeconds = endExclusive.getEpochSecond();\r\n    long random = ThreadLocalRandom\r\n      .current()\r\n      .nextLong(startSeconds, endSeconds);\r\n\r\n    return Instant.ofEpochSecond(random);\r\n}\r\n```","```\r\nInstant hundredYearsAgo = Instant.now().minus(Duration.ofDays(100 * 365));\r\nInstant tenDaysAgo = Instant.now().minus(Duration.ofDays(10));\r\nInstant random = RandomDateTimes.between(hundredYearsAgo, tenDaysAgo);\r\nassertThat(random).isBetween(hundredYearsAgo, tenDaysAgo);\r\n```","```\r\npublic static Instant after(Instant startInclusive) {\r\n    return between(startInclusive, Instant.MAX);\r\n}\r\n\r\npublic static Instant before(Instant upperExclusive) {\r\n    return between(Instant.MIN, upperExclusive);\r\n}\r\n```","```\r\npublic static Date between(Date startInclusive, Date endExclusive) {\r\n    long startMillis = startInclusive.getTime();\r\n    long endMillis = endExclusive.getTime();\r\n    long randomMillisSinceEpoch = ThreadLocalRandom\r\n      .current()\r\n      .nextLong(startMillis, endMillis);\r\n\r\n    return new Date(randomMillisSinceEpoch);\r\n}\r\n```","```\r\nlong aDay = TimeUnit.DAYS.toMillis(1);\r\nlong now = new Date().getTime();\r\nDate hundredYearsAgo = new Date(now - aDay * 365 * 100);\r\nDate tenDaysAgo = new Date(now - aDay * 10);\r\nDate random = LegacyRandomDateTimes.between(hundredYearsAgo, tenDaysAgo);\r\nassertThat(random).isBetween(hundredYearsAgo, tenDaysAgo);\r\n```","```\r\npublic static Instant timestamp() {\r\n    return Instant.ofEpochSecond(ThreadLocalRandom.current().nextInt());\r\n}\r\n```","```\r\nInstant random = RandomDateTimes.timestamp();\r\nassertThat(random).isBetween(Instant.MIN, Instant.MAX);\r\n```","```\r\npublic static Date timestamp() {\r\n    return new Date(ThreadLocalRandom.current().nextInt() * 1000L);\r\n}\r\n```","```\r\nDate MIN_DATE = new Date(Long.MIN_VALUE);\r\nDate MAX_DATE = new Date(Long.MAX_VALUE);\r\nDate random = LegacyRandomDateTimes.timestamp();\r\nassertThat(random).isBetween(MIN_DATE, MAX_DATE);\r\n```","```\r\npublic static LocalDate between(LocalDate startInclusive, LocalDate endExclusive) {\r\n    long startEpochDay = startInclusive.toEpochDay();\r\n    long endEpochDay = endExclusive.toEpochDay();\r\n    long randomDay = ThreadLocalRandom\r\n      .current()\r\n      .nextLong(startEpochDay, endEpochDay);\r\n\r\n    return LocalDate.ofEpochDay(randomDay);\r\n}\r\n```","```\r\nLocalDate start = LocalDate.of(1989, Month.OCTOBER, 14);\r\nLocalDate end = LocalDate.now();\r\nLocalDate random = RandomDates.between(start, end);\r\nassertThat(random).isAfterOrEqualTo(start, end);\r\n```","```\r\npublic static LocalDate date() {\r\n    int hundredYears = 100 * 365;\r\n    return LocalDate.ofEpochDay(ThreadLocalRandom\r\n      .current().nextInt(-hundredYears, hundredYears));\r\n}\r\n```","```\r\nLocalDate randomDay = RandomDates.date();\r\nassertThat(randomDay).isBetween(LocalDate.MIN, LocalDate.MAX);\r\n```","```\r\npublic static LocalTime between(LocalTime startTime, LocalTime endTime) {\r\n    int startSeconds = startTime.toSecondOfDay();\r\n    int endSeconds = endTime.toSecondOfDay();\r\n    int randomTime = ThreadLocalRandom\r\n      .current()\r\n      .nextInt(startSeconds, endSeconds);\r\n\r\n    return LocalTime.ofSecondOfDay(randomTime);\r\n}\r\n```","```\r\nLocalTime morning = LocalTime.of(8, 30);\r\nLocalTime randomTime = RandomTimes.between(LocalTime.MIDNIGHT, morning);\r\nassertThat(randomTime)\r\n  .isBetween(LocalTime.MIDNIGHT, morning)\r\n  .isBetween(LocalTime.MIN, LocalTime.MAX);\r\n```","```\r\npublic static LocalTime time() {\r\n    return between(LocalTime.MIN, LocalTime.MAX);\r\n}\r\n```"]