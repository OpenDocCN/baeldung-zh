["```\r\nprivate List<String> aMethodReturningNullList(){\r\n    return null;\r\n}\r\n\r\n@Test\r\npublic void givenNullObject_whenRequireNonNullElse_thenElse() {\r\n    List<String> aList = Objects.<List>requireNonNullElse(\r\n      aMethodReturningNullList(), Collections.EMPTY_LIST);\r\n\r\n    assertThat(aList, is(Collections.EMPTY_LIST));\r\n}\r\n\r\nprivate List<String> aMethodReturningNonNullList() {\r\n    return List.of(\"item1\", \"item2\");\r\n}\r\n\r\n@Test\r\npublic void givenObject_whenRequireNonNullElse_thenObject() {\r\n    List<String> aList = Objects.<List>requireNonNullElse(\r\n      aMethodReturningNonNullList(), Collections.EMPTY_LIST);\r\n\r\n    assertThat(aList, is(List.of(\"item1\", \"item2\")));\r\n}\r\n\r\n@Test(expected = NullPointerException.class)\r\npublic void givenNull_whenRequireNonNullElse_thenException() {\r\n    Objects.<List>requireNonNullElse(null, null);\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenRequireNonNullElseGet_thenObject() {\r\n    List<String> aList = Objects.<List>requireNonNullElseGet(\r\n      null, List::of);\r\n    assertThat(aList, is(List.of()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNumber_whenInvokeCheckIndex_thenNumber() {\r\n    int length = 5;\r\n\r\n    assertThat(Objects.checkIndex(4, length), is(4));\r\n}\r\n\r\n@Test(expected = IndexOutOfBoundsException.class)\r\npublic void givenOutOfRangeNumber_whenInvokeCheckIndex_thenException() {\r\n    int length = 5;\r\n    Objects.checkIndex(5, length);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSubRange_whenCheckFromToIndex_thenNumber() {\r\n    int length = 6;\r\n\r\n    assertThat(Objects.checkFromToIndex(2,length,length), is(2));\r\n}\r\n\r\n@Test(expected = IndexOutOfBoundsException.class)\r\npublic void givenInvalidSubRange_whenCheckFromToIndex_thenException() {\r\n    int length = 6;\r\n    Objects.checkFromToIndex(2,7,length);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSubRange_whenCheckFromIndexSize_thenNumber() {\r\n    int length = 6;\r\n\r\n    assertThat(Objects.checkFromIndexSize(2,3,length), is(2));\r\n}\r\n\r\n@Test(expected = IndexOutOfBoundsException.class)\r\npublic void givenInvalidSubRange_whenCheckFromIndexSize_thenException() {\r\n    int length = 6;\r\n    Objects.checkFromIndexSize(2, 6, length);\r\n}\r\n```"]