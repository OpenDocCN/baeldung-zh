["```\r\npublic class PersonName implements Serializable {\r\n\r\n    private String name;\r\n    private String surname;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Entity(name = \"PersonTable\")\r\npublic class Person {\r\n\r\n    private PersonName personName;\r\n\r\n    //...\r\n}\r\n```","```\r\n@Converter\r\npublic class PersonNameConverter implements \r\n  AttributeConverter<PersonName, String> {\r\n\r\n    private static final String SEPARATOR = \", \";\r\n\r\n    @Override\r\n    public String convertToDatabaseColumn(PersonName personName) {\r\n        if (personName == null) {\r\n            return null;\r\n        }\r\n\r\n        StringBuilder sb = new StringBuilder();\r\n        if (personName.getSurname() != null && !personName.getSurname()\r\n            .isEmpty()) {\r\n            sb.append(personName.getSurname());\r\n            sb.append(SEPARATOR);\r\n        }\r\n\r\n        if (personName.getName() != null \r\n          && !personName.getName().isEmpty()) {\r\n            sb.append(personName.getName());\r\n        }\r\n\r\n        return sb.toString();\r\n    }\r\n\r\n    @Override\r\n    public PersonName convertToEntityAttribute(String dbPersonName) {\r\n        if (dbPersonName == null || dbPersonName.isEmpty()) {\r\n            return null;\r\n        }\r\n\r\n        String[] pieces = dbPersonName.split(SEPARATOR);\r\n\r\n        if (pieces == null || pieces.length == 0) {\r\n            return null;\r\n        }\r\n\r\n        PersonName personName = new PersonName();        \r\n        String firstPiece = !pieces[0].isEmpty() ? pieces[0] : null;\r\n        if (dbPersonName.contains(SEPARATOR)) {\r\n            personName.setSurname(firstPiece);\r\n\r\n            if (pieces.length >= 2 && pieces[1] != null \r\n              && !pieces[1].isEmpty()) {\r\n                personName.setName(pieces[1]);\r\n            }\r\n        } else {\r\n            personName.setName(firstPiece);\r\n        }\r\n\r\n        return personName;\r\n    }\r\n}\r\n```","```\r\n@Entity(name = \"PersonTable\")\r\npublic class Person {\r\n\r\n    @Convert(converter = PersonNameConverter.class)\r\n    private PersonName personName;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void givenPersonName_whenSaving_thenNameAndSurnameConcat() {\r\n    String name = \"name\";\r\n    String surname = \"surname\";\r\n\r\n    PersonName personName = new PersonName();\r\n    personName.setName(name);\r\n    personName.setSurname(surname);\r\n\r\n    Person person = new Person();\r\n    person.setPersonName(personName);\r\n\r\n    Long id = (Long) session.save(person);\r\n\r\n    session.flush();\r\n    session.clear();\r\n}\r\n```","```\r\n@Test\r\npublic void givenPersonName_whenSaving_thenNameAndSurnameConcat() {\r\n    // ...\r\n\r\n    String dbPersonName = (String) session.createNativeQuery(\r\n      \"select p.personName from PersonTable p where p.id = :id\")\r\n      .setParameter(\"id\", id)\r\n      .getSingleResult();\r\n\r\n    assertEquals(surname + \", \" + name, dbPersonName);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPersonName_whenSaving_thenNameAndSurnameConcat() {\r\n    // ...\r\n\r\n    Person dbPerson = session.createNativeQuery(\r\n      \"select * from PersonTable p where p.id = :id\", Person.class)\r\n        .setParameter(\"id\", id)\r\n        .getSingleResult();\r\n\r\n    assertEquals(dbPerson.getPersonName()\r\n      .getName(), name);\r\n    assertEquals(dbPerson.getPersonName()\r\n      .getSurname(), surname);\r\n}\r\n```"]