["```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>okhttp</artifactId>\r\n    <version>4.9.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>mockwebserver</artifactId>\r\n    <version>4.9.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class SimpleLogEventsListener extends EventListener {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleLogEventsListener.class);\r\n\r\n    @Override\r\n    public void callStart(Call call) {\r\n        LOGGER.info(\"callStart at {}\", LocalDateTime.now());\r\n    }\r\n\r\n    @Override\r\n    public void requestHeadersEnd(Call call, Request request) {\r\n        LOGGER.info(\"requestHeadersEnd at {} with headers {}\", LocalDateTime.now(), request.headers());\r\n    }\r\n\r\n    @Override\r\n    public void responseHeadersEnd(Call call, Response response) {\r\n        LOGGER.info(\"responseHeadersEnd at {} with headers {}\", LocalDateTime.now(), response.headers());\r\n    }\r\n\r\n    @Override\r\n    public void callEnd(Call call) {\r\n        LOGGER.info(\"callEnd at {}\", LocalDateTime.now());\r\n    }\r\n}\r\n```","```\r\nOkHttpClient client = new OkHttpClient.Builder() \r\n  .eventListener(new SimpleLogEventsListener())\r\n  .build();\r\n```","```\r\n@Rule\r\npublic MockWebServer server = new MockWebServer();\r\n\r\n@Test\r\npublic void givenSimpleEventLogger_whenRequestSent_thenCallsLogged() throws IOException {\r\n    server.enqueue(new MockResponse().setBody(\"Hello Baeldung Readers!\"));\r\n\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .eventListener(new SimpleLogEventsListener())\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(server.url(\"/\"))\r\n      .build();\r\n\r\n    try (Response response = client.newCall(request).execute()) {\r\n        assertEquals(\"Response code should be: \", 200, response.code());\r\n        assertEquals(\"Body should be: \", \"Hello Baeldung Readers!\", response.body().string());\r\n    }\r\n }\r\n```","```\r\ncallStart at 2021-05-04T17:51:33.024\r\n...\r\nrequestHeadersEnd at 2021-05-04T17:51:33.046 with headers User-Agent: A Baeldung Reader\r\nHost: localhost:51748\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\n...\r\nresponseHeadersEnd at 2021-05-04T17:51:33.053 with headers Content-Length: 23\r\ncallEnd at 2021-05-04T17:51:33.055\r\n```","```\r\npublic class EventTimer extends EventListener {\r\n\r\n    private long start;\r\n\r\n    private void logTimedEvent(String name) {\r\n        long now = System.nanoTime();\r\n        if (name.equals(\"callStart\")) {\r\n            start = now;\r\n        }\r\n        long elapsedNanos = now - start;\r\n        System.out.printf(\"%.3f %s%n\", elapsedNanos / 1000000000d, name);\r\n    }\r\n\r\n    @Override\r\n    public void callStart(Call call) {\r\n        logTimedEvent(\"callStart\");\r\n    }\r\n\r\n    // More event listener methods\r\n}\r\n```","```\r\n0.000 callStart\r\n0.012 proxySelectStart\r\n0.012 proxySelectEnd\r\n0.012 dnsStart\r\n0.175 dnsEnd\r\n0.183 connectStart\r\n0.248 secureConnectStart\r\n0.608 secureConnectEnd\r\n0.608 connectEnd\r\n0.609 connectionAcquired\r\n0.612 requestHeadersStart\r\n0.613 requestHeadersEnd\r\n0.706 responseHeadersStart\r\n0.707 responseHeadersEnd\r\n0.765 responseBodyStart\r\n0.765 responseBodyEnd\r\n0.765 connectionReleased\r\n0.765 callEnd \r\n```","```\r\n@Test (expected = SocketTimeoutException.class)\r\npublic void givenConnectionError_whenRequestSent_thenFailedCallsLogged() throws IOException {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .eventListener(new EventTimer())\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(server.url(\"/\"))\r\n      .build();\r\n\r\n    client.newCall(request).execute();\r\n}\r\n```","```\r\n0.000 callStart\r\n...\r\n10.008 responseFailed\r\n10.009 connectionReleased\r\n10.009 callFailed\r\n```"]