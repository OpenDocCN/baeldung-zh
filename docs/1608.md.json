["```\r\npublic interface Service {\r\n    void doAction(String request, Callback<Response> callback);\r\n}\r\n```","```\r\npublic interface Callback<T> {\r\n    void reply(T response);\r\n} \r\n```","```\r\npublic void doAction() {\r\n    service.doAction(\"our-request\", new Callback<Response>() {\r\n        @Override\r\n        public void reply(Response response) {\r\n            handleResponse(response);\r\n        }\r\n    });\r\n} \r\n```","```\r\nprivate void handleResponse(Response response) {\r\n    if (response.isValid()) {\r\n        response.setData(new Data(\"Successful data response\"));\r\n    }\r\n}\r\n```","```\r\nservice.doAction(\"our-request\", response -> handleResponse(response)); \r\n```","```\r\n@Test\r\npublic void givenServiceWithValidResponse_whenCallbackReceived_thenProcessed() {\r\n    ActionHandler handler = new ActionHandler(service);\r\n    handler.doAction();\r\n\r\n    verify(service).doAction(anyString(), callbackCaptor.capture());\r\n\r\n    Callback<Response> callback = callbackCaptor.getValue();\r\n    Response response = new Response();\r\n    callback.reply(response);\r\n\r\n    String expectedMessage = \"Successful data response\";\r\n    Data data = response.getData();\r\n    assertEquals(\r\n      \"Should receive a successful message: \", \r\n      expectedMessage, data.getMessage());\r\n}\r\n```","```\r\n@Test\r\npublic void givenServiceWithInvalidResponse_whenCallbackReceived_thenNotProcessed() {\r\n    Response response = new Response();\r\n    response.setIsValid(false);\r\n\r\n    doAnswer((Answer<Void>) invocation -> {\r\n        Callback<Response> callback = invocation.getArgument(1);\r\n        callback.reply(response);\r\n\r\n        Data data = response.getData();\r\n        assertNull(\"No data in invalid response: \", data);\r\n        return null;\r\n    }).when(service)\r\n        .doAction(anyString(), any(Callback.class));\r\n\r\n    ActionHandler handler = new ActionHandler(service);\r\n    handler.doAction();\r\n} \r\n```"]