["```\r\nMap<String, Double> priceMap = new HashMap<>();\r\npriceMap.put(\"apple\", 2.45);\r\npriceMap.put(\"grapes\", 1.22);\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenPuttingAList_thenHashMapUpdatesAndInsertsValues() {\r\n    Double newValue = 2.11;\r\n    fruitMap.put(\"apple\", newValue);\r\n    fruitMap.put(\"orange\", newValue);\r\n\r\n    Assertions.assertEquals(newValue, fruitMap.get(\"apple\"));\r\n    Assertions.assertTrue(fruitMap.containsKey(\"orange\"));\r\n    Assertions.assertEquals(newValue, fruitMap.get(\"orange\"));\r\n} \r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenKeyExists_thenValuesUpdated() {\r\n    double newValue = 2.31;\r\n    if (fruitMap.containsKey(\"apple\")) {\r\n        fruitMap.put(\"apple\", newValue);\r\n    }\r\n\r\n    Assertions.assertEquals(Double.valueOf(newValue), fruitMap.get(\"apple\"));\r\n}\r\n```","```\r\npublic V replace(K key, V value);\r\npublic boolean replace(K key, V oldValue, V newValue);\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenReplacingOldValue_thenNewValueSet() {\r\n    double newPrice = 3.22;\r\n    Double applePrice = fruitMap.get(\"apple\");\r\n\r\n    Double oldValue = fruitMap.replace(\"apple\", newPrice);\r\n\r\n    Assertions.assertNotNull(oldValue);\r\n    Assertions.assertEquals(oldValue, applePrice);\r\n    Assertions.assertEquals(Double.valueOf(newPrice), fruitMap.get(\"apple\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenReplacingWithRealOldValue_thenNewValueSet() {\r\n    double newPrice = 3.22;\r\n    Double applePrice = fruitMap.get(\"apple\");\r\n\r\n    boolean isUpdated = fruitMap.replace(\"apple\", applePrice, newPrice);\r\n\r\n    Assertions.assertTrue(isUpdated);\r\n}\r\n\r\n@Test\r\npublic void givenFruitMap_whenReplacingWithWrongOldValue_thenNewValueNotSet() {\r\n    double newPrice = 3.22;\r\n    boolean isUpdated = fruitMap.replace(\"apple\", Double.valueOf(0), newPrice);\r\n\r\n    Assertions.assertFalse(isUpdated);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenGetOrDefaultUsedWithPut_thenNewEntriesAdded() {\r\n    fruitMap.put(\"plum\", fruitMap.getOrDefault(\"plum\", 2.41));\r\n\r\n    Assertions.assertTrue(fruitMap.containsKey(\"plum\"));\r\n    Assertions.assertEquals(Double.valueOf(2.41), fruitMap.get(\"plum\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenPutIfAbsentUsed_thenNewEntriesAdded() {\r\n    double newValue = 1.78;\r\n    fruitMap.putIfAbsent(\"apple\", newValue);\r\n    fruitMap.putIfAbsent(\"pear\", newValue);\r\n\r\n    Assertions.assertTrue(fruitMap.containsKey(\"pear\"));\r\n    Assertions.assertNotEquals(Double.valueOf(newValue), fruitMap.get(\"apple\"));\r\n    Assertions.assertEquals(Double.valueOf(newValue), fruitMap.get(\"pear\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenComputeUsed_thenValueUpdated() {\r\n    double oldPrice = fruitMap.get(\"apple\");\r\n    BiFunction<Double, Integer, Double> powFunction = (x1, x2) -> Math.pow(x1, x2);\r\n\r\n    fruitMap.compute(\"apple\", (k, v) -> powFunction.apply(v, 2));\r\n\r\n    Assertions.assertEquals(\r\n      Double.valueOf(Math.pow(oldPrice, 2)), fruitMap.get(\"apple\"));\r\n\r\n    Assertions.assertThrows(\r\n      NullPointerException.class, () -> fruitMap.compute(\"blueberry\", (k, v) -> powFunction.apply(v, 2)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenComputeIfAbsentUsed_thenNewEntriesAdded() {\r\n    fruitMap.computeIfAbsent(\"lemon\", k -> Double.valueOf(k.length()));\r\n\r\n    Assertions.assertTrue(fruitMap.containsKey(\"lemon\"));\r\n    Assertions.assertEquals(Double.valueOf(\"lemon\".length()), fruitMap.get(\"lemon\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenComputeIfPresentUsed_thenValuesUpdated() {\r\n    Double oldAppleValue = fruitMap.get(\"apple\");\r\n    BiFunction<Double, Integer, Double> powFunction = (x1, x2) -> Math.pow(x1, x2);\r\n\r\n    fruitMap.computeIfPresent(\"apple\", (k, v) -> powFunction.apply(v, 2));\r\n\r\n    Assertions.assertEquals(Double.valueOf(Math.pow(oldAppleValue, 2)), fruitMap.get(\"apple\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFruitMap_whenMergeUsed_thenNewEntriesAdded() {\r\n    double defaultValue = 1.25;\r\n    BiFunction<Double, Integer, Double> powFunction = (x1, x2) -> Math.pow(x1, x2);\r\n\r\n    fruitMap.merge(\"apple\", defaultValue, (k, v) -> powFunction.apply(v, 2));\r\n    fruitMap.merge(\"strawberry\", defaultValue, (k, v) -> powFunction.apply(v, 2));\r\n\r\n    Assertions.assertTrue(fruitMap.containsKey(\"strawberry\"));\r\n    Assertions.assertEquals(Double.valueOf(defaultValue), fruitMap.get(\"strawberry\"));\r\n    Assertions.assertEquals(Double.valueOf(Math.pow(defaultValue, 2)), fruitMap.get(\"apple\"));\r\n}\r\n```"]