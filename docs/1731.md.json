["```\r\npublic class Product {\r\n\r\n    private String name;\r\n    private String description;\r\n    private List<String> tags;\r\n\r\n    // standard getters/setters/constructors\r\n\r\n    public Product addTagsOfOtherProduct(Product product) {\r\n        this.tags.addAll(product.getTags());\r\n        return this;\r\n    }\r\n}\r\n```","```\r\nMap<String, Product> productsByName = new HashMap<>(); \r\n```","```\r\nProduct eBike = new Product(\"E-Bike\", \"A bike with a battery\");\r\nProduct roadBike = new Product(\"Road bike\", \"A bike for competition\");\r\nproductsByName.put(eBike.getName(), eBike);\r\nproductsByName.put(roadBike.getName(), roadBike); \r\n```","```\r\nProduct nextPurchase = productsByName.get(\"E-Bike\");\r\nassertEquals(\"A bike with a battery\", nextPurchase.getDescription());\r\n```","```\r\nProduct nextPurchase = productsByName.get(\"Car\");\r\nassertNull(nextPurchase);\r\n```","```\r\nProduct newEBike = new Product(\"E-Bike\", \"A bike with a better battery\");\r\nproductsByName.put(newEBike.getName(), newEBike);\r\nassertEquals(\"A bike with a better battery\", productsByName.get(\"E-Bike\").getDescription());\r\n```","```\r\nProduct defaultProduct = new Product(\"Chocolate\", \"At least buy chocolate\");\r\nproductsByName.put(null, defaultProduct);\r\n\r\nProduct nextPurchase = productsByName.get(null);\r\nassertEquals(\"At least buy chocolate\", nextPurchase.getDescription());\r\n```","```\r\nproductsByName.put(defaultProduct.getName(), defaultProduct);\r\nassertSame(productsByName.get(null), productsByName.get(\"Chocolate\"));\r\n```","```\r\nproductsByName.remove(\"E-Bike\");\r\nassertNull(productsByName.get(\"E-Bike\"));\r\n```","```\r\nproductsByName.containsKey(\"E-Bike\");\r\n```","```\r\nproductsByName.containsValue(eBike);\r\n```","```\r\nfor(String key : productsByName.keySet()) {\r\n    Product product = productsByName.get(key);\r\n}\r\n```","```\r\nfor(Map.Entry<String, Product> entry : productsByName.entrySet()) {\r\n    Product product =  entry.getValue();\r\n    String key = entry.getKey();\r\n    //do something with the key and value\r\n}\r\n```","```\r\nList<Product> products = new ArrayList<>(productsByName.values());\r\n```","```\r\nHashMap<Product, Integer> priceByProduct = new HashMap<>();\r\npriceByProduct.put(eBike, 900);\r\n```","```\r\n@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n\r\n    Product product = (Product) o;\r\n    return Objects.equals(name, product.name) &&\r\n      Objects.equals(description, product.description);\r\n}\r\n\r\n@Override\r\npublic int hashCode() {\r\n    return Objects.hash(name, description);\r\n}\r\n```","```\r\nproductsByName.forEach( (key, product) -> {\r\n    System.out.println(\"Key: \" + key + \" Product:\" + product.getDescription());\r\n    //do something with the key and value\r\n}); \r\n```","```\r\nfor(Map.Entry<String, Product> entry : productsByName.entrySet()) {\r\n    Product product =  entry.getValue();\r\n    String key = entry.getKey();\r\n    //do something with the key and value\r\n}\r\n```","```\r\nProduct chocolate = new Product(\"chocolate\", \"something sweet\");\r\nProduct defaultProduct = productsByName.getOrDefault(\"horse carriage\", chocolate); \r\nProduct bike = productsByName.getOrDefault(\"E-Bike\", chocolate);\r\n```","```\r\nProduct bike2 = productsByName.containsKey(\"E-Bike\") \r\n    ? productsByName.get(\"E-Bike\") \r\n    : chocolate;\r\nProduct defaultProduct2 = productsByName.containsKey(\"horse carriage\") \r\n    ? productsByName.get(\"horse carriage\") \r\n    : chocolate; \r\n```","```\r\nproductsByName.putIfAbsent(\"E-Bike\", chocolate); \r\n```","```\r\nif(productsByName.containsKey(\"E-Bike\")) {\r\n    productsByName.put(\"E-Bike\", chocolate);\r\n}\r\n```","```\r\nProduct eBike2 = new Product(\"E-Bike\", \"A bike with a battery\");\r\neBike2.getTags().add(\"sport\");\r\nproductsByName.merge(\"E-Bike\", eBike2, Product::addTagsOfOtherProduct);\r\n```","```\r\nif(productsByName.containsKey(\"E-Bike\")) {\r\n    productsByName.get(\"E-Bike\").addTagsOfOtherProduct(eBike2);\r\n} else {\r\n    productsByName.put(\"E-Bike\", eBike2);\r\n} \r\n```","```\r\nproductsByName.compute(\"E-Bike\", (k,v) -> {\r\n    if(v != null) {\r\n        return v.addTagsOfOtherProduct(eBike2);\r\n    } else {\r\n        return eBike2;\r\n    }\r\n});\r\n```","```\r\nif(productsByName.containsKey(\"E-Bike\")) {    \r\n    productsByName.get(\"E-Bike\").addTagsOfOtherProduct(eBike2); \r\n} else {\r\n    productsByName.put(\"E-Bike\", eBike2); \r\n} \r\n```","```\r\npublic class MutableKey {\r\n    private String name;\r\n\r\n    // standard constructor, getter and setter\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (this == o) {\r\n            return true;\r\n        }\r\n        if (o == null || getClass() != o.getClass()) {\r\n            return false;\r\n        }\r\n        MutableKey that = (MutableKey) o;\r\n        return Objects.equals(name, that.name);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(name);\r\n    }\r\n}\r\n```","```\r\nMutableKey key = new MutableKey(\"initial\");\r\n\r\nMap<MutableKey, String> items = new HashMap<>();\r\nitems.put(key, \"success\");\r\n\r\nkey.setName(\"changed\");\r\n\r\nassertNull(items.get(key));\r\n```"]