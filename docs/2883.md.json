["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-params</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\ntestCompile(\"org.junit.jupiter:junit-jupiter-params:5.8.1\")\r\n```","```\r\npublic class Numbers {\r\n    public static boolean isOdd(int number) {\r\n        return number % 2 != 0;\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@ValueSource(ints = {1, 3, 5, -3, 15, Integer.MAX_VALUE}) // six numbers\r\nvoid isOdd_ShouldReturnTrueForOddNumbers(int number) {\r\n    assertTrue(Numbers.isOdd(number));\r\n}\r\n```","```\r\npublic class Strings {\r\n    public static boolean isBlank(String input) {\r\n        return input == null || input.trim().isEmpty();\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@ValueSource(strings = {\"\", \"  \"})\r\nvoid isBlank_ShouldReturnTrueForNullOrBlankStrings(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n} \r\n```","```\r\n@ParameterizedTest\r\n@NullSource\r\nvoid isBlank_ShouldReturnTrueForNullInputs(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EmptySource\r\nvoid isBlank_ShouldReturnTrueForEmptyStrings(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@NullAndEmptySource\r\nvoid isBlank_ShouldReturnTrueForNullAndEmptyStrings(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@NullAndEmptySource\r\n@ValueSource(strings = {\"  \", \"\\t\", \"\\n\"})\r\nvoid isBlank_ShouldReturnTrueForAllTypesOfBlankStrings(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EnumSource(Month.class) // passing all 12 months\r\nvoid getValueForAMonth_IsAlwaysBetweenOneAndTwelve(Month month) {\r\n    int monthNumber = month.getValue();\r\n    assertTrue(monthNumber >= 1 && monthNumber <= 12);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EnumSource(value = Month.class, names = {\"APRIL\", \"JUNE\", \"SEPTEMBER\", \"NOVEMBER\"})\r\nvoid someMonths_Are30DaysLong(Month month) {\r\n    final boolean isALeapYear = false;\r\n    assertEquals(30, month.length(isALeapYear));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EnumSource(\r\n  value = Month.class,\r\n  names = {\"APRIL\", \"JUNE\", \"SEPTEMBER\", \"NOVEMBER\", \"FEBRUARY\"},\r\n  mode = EnumSource.Mode.EXCLUDE)\r\nvoid exceptFourMonths_OthersAre31DaysLong(Month month) {\r\n    final boolean isALeapYear = false;\r\n    assertEquals(31, month.length(isALeapYear));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@EnumSource(value = Month.class, names = \".+BER\", mode = EnumSource.Mode.MATCH_ANY)\r\nvoid fourMonths_AreEndingWithBer(Month month) {\r\n    EnumSet<Month> months =\r\n      EnumSet.of(Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER);\r\n    assertTrue(months.contains(month));\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({\"test,TEST\", \"tEst,TEST\", \"Java,JAVA\"})\r\nvoid toUpperCase_ShouldGenerateTheExpectedUppercaseValue(String input, String expected) {\r\n    String actualValue = input.toUpperCase();\r\n    assertEquals(expected, actualValue);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource(value = {\"test:test\", \"tEst:test\", \"Java:java\"}, delimiter = ':')\r\nvoid toLowerCase_ShouldGenerateTheExpectedLowercaseValue(String input, String expected) {\r\n    String actualValue = input.toLowerCase();\r\n    assertEquals(expected, actualValue);\r\n}\r\n```","```\r\ninput,expected\r\ntest,TEST\r\ntEst,TEST\r\nJava,JAVA\r\n```","```\r\n@ParameterizedTest\r\n@CsvFileSource(resources = \"/data.csv\", numLinesToSkip = 1)\r\nvoid toUpperCase_ShouldGenerateTheExpectedUppercaseValueCSVFile(\r\n  String input, String expected) {\r\n    String actualValue = input.toUpperCase();\r\n    assertEquals(expected, actualValue);\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@MethodSource(\"provideStringsForIsBlank\")\r\nvoid isBlank_ShouldReturnTrueForNullOrBlankStrings(String input, boolean expected) {\r\n    assertEquals(expected, Strings.isBlank(input));\r\n}\r\n```","```\r\nprivate static Stream<Arguments> provideStringsForIsBlank() {\r\n    return Stream.of(\r\n      Arguments.of(null, true),\r\n      Arguments.of(\"\", true),\r\n      Arguments.of(\"  \", true),\r\n      Arguments.of(\"not blank\", false)\r\n    );\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@MethodSource // hmm, no method name ...\r\nvoid isBlank_ShouldReturnTrueForNullOrBlankStringsOneArgument(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n\r\nprivate static Stream<String> isBlank_ShouldReturnTrueForNullOrBlankStringsOneArgument() {\r\n    return Stream.of(null, \"\", \"  \");\r\n}\r\n```","```\r\nclass StringsUnitTest {\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"com.baeldung.parameterized.StringParams#blankStrings\")\r\n    void isBlank_ShouldReturnTrueForNullOrBlankStringsExternalSource(String input) {\r\n        assertTrue(Strings.isBlank(input));\r\n    }\r\n}\r\n\r\npublic class StringParams {\r\n\r\n    static Stream<String> blankStrings() {\r\n        return Stream.of(null, \"\", \"  \");\r\n    }\r\n}\r\n```","```\r\nclass BlankStringsArgumentsProvider implements ArgumentsProvider {\r\n\r\n    @Override\r\n    public Stream<? extends Arguments> provideArguments(ExtensionContext context) {\r\n        return Stream.of(\r\n          Arguments.of((String) null), \r\n          Arguments.of(\"\"), \r\n          Arguments.of(\"   \") \r\n        );\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@ArgumentsSource(BlankStringsArgumentsProvider.class)\r\nvoid isBlank_ShouldReturnTrueForNullOrBlankStringsArgProvider(String input) {\r\n    assertTrue(Strings.isBlank(input));\r\n}\r\n```","```\r\nstatic Stream<Arguments> arguments = Stream.of(\r\n  Arguments.of(null, true), // null strings should be considered blank\r\n  Arguments.of(\"\", true),\r\n  Arguments.of(\"  \", true),\r\n  Arguments.of(\"not blank\", false)\r\n);\r\n\r\n@ParameterizedTest\r\n@VariableSource(\"arguments\")\r\nvoid isBlank_ShouldReturnTrueForNullOrBlankStringsVariableSource(\r\n  String input, boolean expected) {\r\n    assertEquals(expected, Strings.isBlank(input));\r\n}\r\n```","```\r\n@Documented\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@ArgumentsSource(VariableArgumentsProvider.class)\r\npublic @interface VariableSource {\r\n\r\n    /**\r\n     * The name of the static variable\r\n     */\r\n    String value();\r\n}\r\n```","```\r\nclass VariableArgumentsProvider \r\n  implements ArgumentsProvider, AnnotationConsumer<VariableSource> {\r\n\r\n    private String variableName;\r\n\r\n    @Override\r\n    public Stream<? extends Arguments> provideArguments(ExtensionContext context) {\r\n        return context.getTestClass()\r\n                .map(this::getField)\r\n                .map(this::getValue)\r\n                .orElseThrow(() -> \r\n                  new IllegalArgumentException(\"Failed to load test arguments\"));\r\n    }\r\n\r\n    @Override\r\n    public void accept(VariableSource variableSource) {\r\n        variableName = variableSource.value();\r\n    }\r\n\r\n    private Field getField(Class<?> clazz) {\r\n        try {\r\n            return clazz.getDeclaredField(variableName);\r\n        } catch (Exception e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    private Stream<Arguments> getValue(Field field) {\r\n        Object value = null;\r\n        try {\r\n            value = field.get(null);\r\n        } catch (Exception ignored) {}\r\n\r\n        return value == null ? null : (Stream<Arguments>) value;\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({\"APRIL\", \"JUNE\", \"SEPTEMBER\", \"NOVEMBER\"}) // Pssing strings\r\nvoid someMonths_Are30DaysLongCsv(Month month) {\r\n    final boolean isALeapYear = false;\r\n    assertEquals(30, month.length(isALeapYear));\r\n}\r\n```","```\r\nclass SlashyDateConverter implements ArgumentConverter {\r\n\r\n    @Override\r\n    public Object convert(Object source, ParameterContext context)\r\n      throws ArgumentConversionException {\r\n        if (!(source instanceof String)) {\r\n            throw new IllegalArgumentException(\r\n              \"The argument should be a string: \" + source);\r\n        }\r\n        try {\r\n            String[] parts = ((String) source).split(\"/\");\r\n            int year = Integer.parseInt(parts[0]);\r\n            int month = Integer.parseInt(parts[1]);\r\n            int day = Integer.parseInt(parts[2]);\r\n\r\n            return LocalDate.of(year, month, day);\r\n        } catch (Exception e) {\r\n            throw new IllegalArgumentException(\"Failed to convert\", e);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({\"2018/12/25,2018\", \"2019/02/11,2019\"})\r\nvoid getYear_ShouldWorkAsExpected(\r\n  @ConvertWith(SlashyDateConverter.class) LocalDate date, int expected) {\r\n    assertEquals(expected, date.getYear());\r\n}\r\n```","```\r\nclass Person {\r\n\r\n    String firstName;\r\n    String middleName;\r\n    String lastName;\r\n\r\n    // constructor\r\n\r\n    public String fullName() {\r\n        if (middleName == null || middleName.trim().isEmpty()) {\r\n            return String.format(\"%s %s\", firstName, lastName);\r\n        }\r\n\r\n        return String.format(\"%s %s %s\", firstName, middleName, lastName);\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({\"Isaac,,Newton,Isaac Newton\", \"Charles,Robert,Darwin,Charles Robert Darwin\"})\r\nvoid fullName_ShouldGenerateTheExpectedFullName(ArgumentsAccessor argumentsAccessor) {\r\n    String firstName = argumentsAccessor.getString(0);\r\n    String middleName = (String) argumentsAccessor.get(1);\r\n    String lastName = argumentsAccessor.get(2, String.class);\r\n    String expectedFullName = argumentsAccessor.getString(3);\r\n\r\n    Person person = new Person(firstName, middleName, lastName);\r\n    assertEquals(expectedFullName, person.fullName());\r\n}\r\n```","```\r\nclass PersonAggregator implements ArgumentsAggregator {\r\n\r\n    @Override\r\n    public Object aggregateArguments(ArgumentsAccessor accessor, ParameterContext context)\r\n      throws ArgumentsAggregationException {\r\n        return new Person(\r\n          accessor.getString(1), accessor.getString(2), accessor.getString(3));\r\n    }\r\n}\r\n```","```\r\n@ParameterizedTest\r\n@CsvSource({\"Isaac Newton,Isaac,,Newton\", \"Charles Robert Darwin,Charles,Robert,Darwin\"})\r\nvoid fullName_ShouldGenerateTheExpectedFullName(\r\n  String expectedFullName,\r\n  @AggregateWith(PersonAggregator.class) Person person) {\r\n\r\n    assertEquals(expectedFullName, person.fullName());\r\n}\r\n```","```\r\n├─ someMonths_Are30DaysLongCsv(Month)\r\n│     │  ├─ [1] APRIL\r\n│     │  ├─ [2] JUNE\r\n│     │  ├─ [3] SEPTEMBER\r\n│     │  └─ [4] NOVEMBER\r\n```","```\r\n@ParameterizedTest(name = \"{index} {0} is 30 days long\")\r\n@EnumSource(value = Month.class, names = {\"APRIL\", \"JUNE\", \"SEPTEMBER\", \"NOVEMBER\"})\r\nvoid someMonths_Are30DaysLong(Month month) {\r\n    final boolean isALeapYear = false;\r\n    assertEquals(30, month.length(isALeapYear));\r\n}\r\n```","```\r\n├─ someMonths_Are30DaysLong(Month)\r\n│     │  ├─ 1 APRIL is 30 days long\r\n│     │  ├─ 2 JUNE is 30 days long\r\n│     │  ├─ 3 SEPTEMBER is 30 days long\r\n│     │  └─ 4 NOVEMBER is 30 days long\r\n```"]