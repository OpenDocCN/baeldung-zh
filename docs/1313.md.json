["```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>jvavr-test</artifactId>\r\n    <version>${vavr.test.version}</version>\r\n</dependency>\r\n\r\n<properties>\r\n    <vavr.test.version>2.0.5</vavr.test.version> \r\n</properties>\r\n```","```\r\nprivate static Predicate<Integer> divisibleByTwo = i -> i % 2 == 0;\r\nprivate static Predicate<Integer> divisibleByFive = i -> i % 5 == 0;\r\n\r\nprivate Stream<String> stringsSupplier() {\r\n    return Stream.from(0).map(i -> Match(i).of(\r\n      Case($(divisibleByFive.and(divisibleByTwo)), \"DividedByTwoAndFiveWithoutRemainder\"),\r\n      Case($(divisibleByFive), \"DividedByFiveWithoutRemainder\"),\r\n      Case($(divisibleByTwo), \"DividedByTwoWithoutRemainder\"),\r\n      Case($(), \"\")));\r\n}\r\n```","```\r\nArbitrary<Integer> multiplesOf2 = Arbitrary.integer()\r\n  .filter(i -> i > 0)\r\n  .filter(i -> i % 2 == 0 && i % 5 != 0);\r\n```","```\r\nCheckedFunction1<Integer, Boolean> mustEquals\r\n  = i -> stringsSupplier().get(i).equals(\"DividedByTwoWithoutRemainder\");\r\n```","```\r\nCheckResult result = Property\r\n  .def(\"Every second element must equal to DividedByTwoWithoutRemainder\")\r\n  .forAll(multiplesOf2)\r\n  .suchThat(mustEquals)\r\n  .check(10_000, 100);\r\n\r\nresult.assertIsSatisfied();\r\n```","```\r\nArbitrary<Integer> multiplesOf5 = Arbitrary.integer()\r\n  .filter(i -> i > 0)\r\n  .filter(i -> i % 5 == 0 && i % 2 == 0);\r\n\r\nCheckedFunction1<Integer, Boolean> mustEquals\r\n  = i -> stringsSupplier().get(i).endsWith(\"DividedByTwoAndFiveWithoutRemainder\");\r\n```","```\r\nProperty.def(\"Every fifth element must equal to DividedByTwoAndFiveWithoutRemainder\")\r\n  .forAll(multiplesOf5)\r\n  .suchThat(mustEquals)\r\n  .check(10_000, 1_000)\r\n  .assertIsSatisfied();\r\n```"]