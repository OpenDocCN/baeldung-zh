["```\r\nString greetings = String.format(\r\n  \"Hello Folks, welcome to %s !\", \r\n  \"Baeldung\");\r\n```","```\r\n\"Hello Folks, welcome to Baeldung !\"\r\n```","```\r\n%[argument_index$][flags][width][.precision]conversion\r\n```","```\r\nString greetings = String.format(\r\n  \"Hello %2$s, welcome to %1$s !\", \r\n  \"Baeldung\", \r\n  \"Folks\");\r\n```","```\r\n%[argument_index$][flags][width]conversion\r\n```","```\r\n@Test\r\npublic void whenFormatSpecifierForCalendar_thenGotExpected() {\r\n    Calendar c = new GregorianCalendar(2017, 11, 10);\r\n    String s = String.format(\r\n      \"The date is: %tm %1$te,%1$tY\", c);\r\n\r\n    assertEquals(\"The date is: 12 10,2017\", s);\r\n}\r\n```","```\r\n%[flags][width]conversion\r\n```","```\r\n@Test\r\npublic void whenNoArguments_thenExpected() {\r\n    String s = String.format(\"John scored 90%% in Fall semester\");\r\n\r\n    assertEquals(\"John scored 90% in Fall semester\", s);\r\n} \r\n```","```\r\n@Test\r\npublic void givenString_whenGeneralConversion_thenConvertedString() {\r\n    String s = String.format(\"The correct answer is %s\", false);\r\n    assertEquals(\"The correct answer is false\", s);\r\n\r\n    s = String.format(\"The correct answer is %b\", null);\r\n    assertEquals(\"The correct answer is false\", s);\r\n\r\n    s = String.format(\"The correct answer is %B\", true);\r\n    assertEquals(\"The correct answer is TRUE\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void givenString_whenCharConversion_thenConvertedString() {\r\n    String s = String.format(\"The correct answer is %c\", 'a');\r\n    assertEquals(\"The correct answer is a\", s);\r\n\r\n    s = String.format(\"The correct answer is %c\", null);\r\n    assertEquals(\"The correct answer is null\", s);\r\n\r\n    s = String.format(\"The correct answer is %C\", 'b');\r\n    assertEquals(\"The correct answer is B\", s);\r\n\r\n    s = String.format(\"The valid unicode character: %c\", 0x0400);\r\n    assertTrue(Character.isValidCodePoint(0x0400));\r\n    assertEquals(\"The valid unicode character: Ѐ\", s);\r\n}\r\n```","```\r\n@Test(expected = IllegalFormatCodePointException.class)\r\npublic void whenIllegalCodePointForConversion_thenError() {\r\n    String s = String.format(\"The valid unicode character: %c\", 0x11FFFF);\r\n\r\n    assertFalse(Character.isValidCodePoint(0x11FFFF));\r\n    assertEquals(\"The valid unicode character: Ā\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenNumericIntegralConversion_thenConvertedString() {\r\n    String s = String.format(\"The number 25 in decimal = %d\", 25);\r\n    assertEquals(\"The number 25 in decimal = 25\", s);\r\n\r\n    s = String.format(\"The number 25 in octal = %o\", 25);\r\n    assertEquals(\"The number 25 in octal = 31\", s);\r\n\r\n    s = String.format(\"The number 25 in hexadecimal = %x\", 25);\r\n    assertEquals(\"The number 25 in hexadecimal = 19\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenNumericFloatingConversion_thenConvertedString() {\r\n    String s = String.format(\r\n      \"The computerized scientific format of 10000.00 \"\r\n      + \"= %e\", 10000.00);\r\n\r\n    assertEquals(\r\n      \"The computerized scientific format of 10000.00 = 1.000000e+04\", s);\r\n\r\n    String s2 = String.format(\"The decimal format of 10.019 = %f\", 10.019);\r\n    assertEquals(\"The decimal format of 10.019 = 10.019000\", s2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLineSeparatorConversion_thenConvertedString() {\r\n    String s = String.format(\"First Line %nSecond Line\");\r\n\r\n    assertEquals(\"First Line \\n\" + \"Second Line\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSpecifyFlag_thenGotFormattedString() {\r\n    String s = String.format(\"Without left justified flag: %5d\", 25);\r\n    assertEquals(\"Without left justified flag:    25\", s);\r\n\r\n    s = String.format(\"With left justified flag: %-5d\", 25);\r\n    assertEquals(\"With left justified flag: 25   \", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSpecifyPrecision_thenGotExpected() {\r\n    String s = String.format(\r\n      \"Output of 25.09878 with Precision 2: %.2f\", 25.09878);\r\n\r\n    assertEquals(\"Output of 25.09878 with Precision 2: 25.10\", s);\r\n\r\n    String s2 = String.format(\r\n      \"Output of general conversion type with Precision 2: %.2b\", true);\r\n\r\n    assertEquals(\"Output of general conversion type with Precision 2: tr\", s2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSpecifyArgumentIndex_thenGotExpected() {\r\n    Calendar c = Calendar.getInstance();\r\n    String s = String.format(\"The date is: %tm %1$te,%1$tY\", c);\r\n    assertEquals(\"The date is: 12 10,2017\", s);\r\n\r\n    s = String.format(\"The date is: %tm %<te,%<tY\", c);\r\n    assertEquals(\"The date is: 12 10,2017\", s);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateFormatter_thenFormatterWithAppendable() {\r\n    StringBuilder sb = new StringBuilder();\r\n    Formatter formatter = new Formatter(sb);\r\n    formatter.format(\"I am writting to a %s Instance.\", sb.getClass());\r\n\r\n    assertEquals(\r\n      \"I am writting to a class java.lang.StringBuilder Instance.\", \r\n      sb.toString());\r\n}\r\n```"]