["```\r\npublic class Entry {\r\n    private String data;\r\n    private int rank;\r\n}\r\n```","```\r\npublic Entry(String data, int rank) {\r\n    this.data = data;\r\n    this.rank = rank;\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonGenericConstructor_whenCreateNonGenericEntry_thenOK() {\r\n    Entry entry = new Entry(\"sample\", 1);\r\n\r\n    assertEquals(\"sample\", entry.getData());\r\n    assertEquals(1, entry.getRank());\r\n}\r\n```","```\r\npublic <E extends Rankable & Serializable> Entry(E element) {\r\n    this.data = element.toString();\r\n    this.rank = element.getRank();\r\n}\r\n```","```\r\npublic interface Rankable {\r\n    public int getRank();\r\n}\r\n```","```\r\npublic class Product implements Rankable, Serializable {\r\n    private String name;\r\n    private double price;\r\n    private int sales;\r\n\r\n    public Product(String name, double price) {\r\n        this.name = name;\r\n        this.price = price;\r\n    }\r\n\r\n    @Override\r\n    public int getRank() {\r\n        return sales;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenGenericConstructor_whenCreateNonGenericEntry_thenOK() {\r\n    Product product = new Product(\"milk\", 2.5);\r\n    product.setSales(30);\r\n\r\n    Entry entry = new Entry(product);\r\n\r\n    assertEquals(product.toString(), entry.getData());\r\n    assertEquals(30, entry.getRank());\r\n}\r\n```","```\r\npublic class GenericEntry<T> {\r\n    private T data;\r\n    private int rank;\r\n}\r\n```","```\r\npublic GenericEntry(int rank) {\r\n    this.rank = rank;\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonGenericConstructor_whenCreateGenericEntry_thenOK() {\r\n    GenericEntry<String> entry = new GenericEntry<String>(1);\r\n\r\n    assertNull(entry.getData());\r\n    assertEquals(1, entry.getRank());\r\n}\r\n```","```\r\npublic GenericEntry(T data, int rank) {\r\n    this.data = data;\r\n    this.rank = rank;\r\n}\r\n```","```\r\n@Test\r\npublic void givenGenericConstructor_whenCreateGenericEntry_thenOK() {\r\n    GenericEntry<String> entry = new GenericEntry<String>(\"sample\", 1);\r\n\r\n    assertEquals(\"sample\", entry.getData());\r\n    assertEquals(1, entry.getRank());        \r\n}\r\n```","```\r\npublic <E extends Rankable & Serializable> GenericEntry(E element) {\r\n    this.data = (T) element;\r\n    this.rank = element.getRank();\r\n}\r\n```","```\r\n@Test\r\npublic void givenGenericConstructorWithDifferentType_whenCreateGenericEntry_thenOK() {\r\n    Product product = new Product(\"milk\", 2.5);\r\n    product.setSales(30);\r\n\r\n    GenericEntry<Serializable> entry = new GenericEntry<Serializable>(product);\r\n\r\n    assertEquals(product, entry.getData());\r\n    assertEquals(30, entry.getRank());\r\n}\r\n```","```\r\npublic class MapEntry<K, V> {\r\n    private K key;\r\n    private V value;\r\n\r\n    public MapEntry(K key, V value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenGenericConstructor_whenCreateGenericEntryWithTwoTypes_thenOK() {\r\n    MapEntry<String,Integer> entry = new MapEntry<String,Integer>(\"sample\", 1);\r\n\r\n    assertEquals(\"sample\", entry.getKey());\r\n    assertEquals(1, entry.getValue().intValue());        \r\n}\r\n```","```\r\npublic GenericEntry(Optional<? extends Rankable> optional) {\r\n    if (optional.isPresent()) {\r\n        this.data = (T) optional.get();\r\n        this.rank = optional.get().getRank();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenGenericConstructorWithWildCard_whenCreateGenericEntry_thenOK() {\r\n    Product product = new Product(\"milk\", 2.5);\r\n    product.setSales(30);\r\n    Optional<Product> optional = Optional.of(product);\r\n\r\n    GenericEntry<Serializable> entry = new GenericEntry<Serializable>(optional);\r\n\r\n    assertEquals(product, entry.getData());\r\n    assertEquals(30, entry.getRank());\r\n}\r\n```"]