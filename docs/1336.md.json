["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.projectreactor</groupId>\r\n    <artifactId>reactor-spring</artifactId>\r\n    <version>1.0.1.RELEASE</version>\r\n</dependency>\r\n```","```\r\n[{\r\n    \"id\": 1,\r\n    \"name\": \"reader1\",\r\n    \"favouriteBook\": { \r\n        \"author\": \"Milan Kundera\",\r\n        \"title\": \"The Unbearable Lightness of Being\"\r\n    } }, {\r\n    \"id\": 2,\r\n    \"name\": \"reader2\"\r\n    \"favouriteBook\": { \r\n        \"author\": \"Douglas Adams\",\r\n        \"title\": \"The Hitchhiker's Guide to the Galaxy\"\r\n    }\r\n}]\r\n```","```\r\npublic class Reader {\r\n    private int id;\r\n    private String name;\r\n    private Book favouriteBook;\r\n\r\n    // getters and setters..\r\n}\r\n```","```\r\npublic class Book {\r\n    private final String author;\r\n    private final String title;\r\n\r\n   // getters and setters..\r\n}\r\n```","```\r\npublic class ReaderConsumerServiceImpl implements ReaderConsumerService {\r\n\r\n    private final WebClient webClient;\r\n\r\n    public ReaderConsumerServiceImpl(WebClient webclient) {\r\n        this.webclient = webclient;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\nMono<Object[]> response = webClient.get()\r\n  .accept(MediaType.APPLICATION_JSON)\r\n  .retrieve()\r\n  .bodyToMono(Object[].class).log();\r\n```","```\r\nObject[] objects = response.block();\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\n```","```\r\nreturn Arrays.stream(objects)\r\n  .map(object -> mapper.convertValue(object, Reader.class))\r\n  .map(Reader::getFavouriteBook)\r\n  .collect(Collectors.toList());\r\n```","```\r\nMono<Reader[]> response = webClient.get()\r\n  .accept(MediaType.APPLICATION_JSON)\r\n  .retrieve()\r\n  .bodyToMono(Reader[].class).log();\r\nReader[] readers = response.block();\r\nreturn Arrays.stream(readers)\r\n  .map(Reader:getFavouriteBook)\r\n  .collect(Collectors.toList());\r\n```","```\r\nMono<List<Reader>> response = webClient.get()\r\n  .accept(MediaType.APPLICATION_JSON)\r\n  .retrieve()\r\n  .bodyToMono(new ParameterizedTypeReference<List<Reader>>() {});\r\nList<Reader> readers = response.block();\r\n\r\nreturn readers.stream()\r\n  .map(Reader::getFavouriteBook)\r\n  .collect(Collectors.toList());\r\n```"]