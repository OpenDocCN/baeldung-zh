["```\r\npublic class BinaryTreeModel {\r\n\r\n    private Object value;\r\n    private BinaryTreeModel left;\r\n    private BinaryTreeModel right;\r\n\r\n    public BinaryTreeModel(Object value) {\r\n        this.value = value;\r\n    }\r\n\r\n    // standard getters and setters\r\n\r\n} \r\n```","```\r\nBinaryTreeModel root = new BinaryTreeModel(\"root\");\r\n\r\nBinaryTreeModel node1 = new BinaryTreeModel(\"node1\");\r\nBinaryTreeModel node2 = new BinaryTreeModel(\"node2\");\r\nroot.setLeft(node1);\r\nroot.setRight(node2);\r\n\r\nBinaryTreeModel node3 = new BinaryTreeModel(\"node3\");\r\nBinaryTreeModel node4 = new BinaryTreeModel(\"node4\");\r\nnode1.setLeft(node3);\r\nnode1.setRight(node4);\r\n\r\nnode2.setLeft(new BinaryTreeModel(\"node5\"));\r\nnode2.setRight(new BinaryTreeModel(\"node6\"));\r\n\r\nBinaryTreeModel node7 = new BinaryTreeModel(\"node7\");\r\nnode3.setLeft(node7);\r\nnode7.setLeft(new BinaryTreeModel(\"node8\"));\r\nnode7.setRight(new BinaryTreeModel(\"node9\"));\r\n```","```\r\npublic void traversePreOrder(StringBuilder sb, BinaryTreeModel node) {\r\n    if (node != null) {\r\n        sb.append(node.getValue());\r\n        sb.append(\"\\n\");\r\n        traversePreOrder(sb, node.getLeft());\r\n        traversePreOrder(sb, node.getRight());\r\n    }\r\n} \r\n```","```\r\npublic void print(PrintStream os) {\r\n    StringBuilder sb = new StringBuilder();\r\n    traversePreOrder(sb, this.tree);\r\n    os.print(sb.toString());\r\n} \r\n```","```\r\nnew BinaryTreePrinter(root).print(System.out); \r\n```","```\r\nroot\r\nnode1\r\nnode3\r\nnode7\r\nnode8\r\nnode9\r\nnode4\r\nnode2\r\nnode5\r\nnode6 \r\n```","```\r\npublic void traversePreOrder(StringBuilder sb, String padding, String pointer, BinaryTreeModel node) {\r\n    if (node != null) {\r\n        sb.append(padding);\r\n        sb.append(pointer);\r\n        sb.append(node.getValue());\r\n        sb.append(\"\\n\");\r\n\r\n        StringBuilder paddingBuilder = new StringBuilder(padding);\r\n        paddingBuilder.append(\"│  \");\r\n\r\n        String paddingForBoth = paddingBuilder.toString();\r\n        String pointerForRight = \"└──\";\r\n        String pointerForLeft = (node.getRight() != null) ? \"├──\" : \"└──\";\r\n\r\n        traversePreOrder(sb, paddingForBoth, pointerForLeft, node.getLeft());\r\n        traversePreOrder(sb, paddingForBoth, pointerForRight, node.getRight());\r\n    }\r\n} \r\n```","```\r\npublic void print(PrintStream os) {\r\n    StringBuilder sb = new StringBuilder();\r\n    traversePreOrder(sb, \"\", \"\", this.tree);\r\n    os.print(sb.toString());\r\n} \r\n```","```\r\npublic String traversePreOrder(BinaryTreeModel root) {\r\n\r\n    if (root == null) {\r\n        return \"\";\r\n    }\r\n\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(root.getValue());\r\n\r\n    String pointerRight = \"└──\";\r\n    String pointerLeft = (root.getRight() != null) ? \"├──\" : \"└──\";\r\n\r\n    traverseNodes(sb, \"\", pointerLeft, root.getLeft(), root.getRight() != null);\r\n    traverseNodes(sb, \"\", pointerRight, root.getRight(), false);\r\n\r\n    return sb.toString();\r\n} \r\n```","```\r\npublic void traverseNodes(StringBuilder sb, String padding, String pointer, BinaryTreeModel node, \r\n  boolean hasRightSibling) {\r\n    if (node != null) {\r\n        sb.append(\"\\n\");\r\n        sb.append(padding);\r\n        sb.append(pointer);\r\n        sb.append(node.getValue());\r\n\r\n        StringBuilder paddingBuilder = new StringBuilder(padding);\r\n        if (hasRightSibling) {\r\n            paddingBuilder.append(\"│  \");\r\n        } else {\r\n            paddingBuilder.append(\"   \");\r\n        }\r\n\r\n        String paddingForBoth = paddingBuilder.toString();\r\n        String pointerRight = \"└──\";\r\n        String pointerLeft = (node.getRight() != null) ? \"├──\" : \"└──\";\r\n\r\n        traverseNodes(sb, paddingForBoth, pointerLeft, node.getLeft(), node.getRight() != null);\r\n        traverseNodes(sb, paddingForBoth, pointerRight, node.getRight(), false);\r\n    }\r\n} \r\n```","```\r\npublic void print(PrintStream os) {\r\n    os.print(traversePreOrder(tree));\r\n} \r\n```"]