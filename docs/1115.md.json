["```\r\npublic interface Color {\r\n    String fill();\r\n}\r\n```","```\r\npublic class Blue implements Color {\r\n    @Override\r\n    public String fill() {\r\n        return \"Color is Blue\";\r\n    }\r\n}\r\n```","```\r\npublic abstract class Shape {\r\n    protected Color color;\r\n\r\n    //standard constructors\r\n\r\n    abstract public String draw();\r\n}\r\n```","```\r\npublic class Square extends Shape {\r\n\r\n    public Square(Color color) {\r\n        super(color);\r\n    }\r\n\r\n    @Override\r\n    public String draw() {\r\n        return \"Square drawn. \" + color.fill();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenBridgePatternInvoked_thenConfigSuccess() {\r\n    //a square with red color\r\n    Shape square = new Square(new Red());\r\n\r\n    assertEquals(square.draw(), \"Square drawn. Color is Red\");\r\n}\r\n```","```\r\nSquare drawn. Color: Red\r\nTriangle drawn. Color: Blue\r\n```"]