["```\r\n@NoRepositoryBean\r\npublic interface ExtendedRepository<T, ID extends Serializable> \r\n  extends JpaRepository<T, ID> {\r\n\r\n    public List<T> findByAttributeContainsText(String attributeName, String text);\r\n}\r\n```","```\r\npublic class ExtendedRepositoryImpl<T, ID extends Serializable>\r\n  extends SimpleJpaRepository<T, ID> implements ExtendedRepository<T, ID> {\r\n\r\n    private EntityManager entityManager;\r\n\r\n    public ExtendedRepositoryImpl(JpaEntityInformation<T, ?> \r\n      entityInformation, EntityManager entityManager) {\r\n        super(entityInformation, entityManager);\r\n        this.entityManager = entityManager;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Transactional\r\npublic List<T> findByAttributeContainsText(String attributeName, String text) {\r\n    CriteriaBuilder builder = entityManager.getCriteriaBuilder();\r\n    CriteriaQuery<T> cQuery = builder.createQuery(getDomainClass());\r\n    Root<T> root = cQuery.from(getDomainClass());\r\n    cQuery\r\n      .select(root)\r\n      .where(builder\r\n        .like(root.<String>get(attributeName), \"%\" + text + \"%\"));\r\n    TypedQuery<T> query = entityManager.createQuery(cQuery);\r\n    return query.getResultList();\r\n}\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(basePackages = \"org.baeldung.persistence.dao\", \r\n  repositoryBaseClass = ExtendedRepositoryImpl.class)\r\npublic class StudentJPAH2Config {\r\n    // additional JPA Configuration\r\n}\r\n```","```\r\n@Entity\r\npublic class Student {\r\n\r\n    @Id\r\n    private long id;\r\n    private String name;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic interface ExtendedStudentRepository extends ExtendedRepository<Student, Long> {\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { StudentJPAH2Config.class })\r\npublic class ExtendedStudentRepositoryIntegrationTest {\r\n\r\n    @Resource\r\n    private ExtendedStudentRepository extendedStudentRepository;\r\n\r\n    @Before\r\n    public void setup() {\r\n        Student student = new Student(1, \"john\");\r\n        extendedStudentRepository.save(student);\r\n        Student student2 = new Student(2, \"johnson\");\r\n        extendedStudentRepository.save(student2);\r\n        Student student3 = new Student(3, \"tom\");\r\n        extendedStudentRepository.save(student3);\r\n    }\r\n\r\n    @Test\r\n    public void givenStudents_whenFindByName_thenOk(){\r\n        List<Student> students \r\n          = extendedStudentRepository.findByAttributeContainsText(\"name\", \"john\");\r\n\r\n        assertEquals(\"size incorrect\", 2, students.size());        \r\n    }\r\n}\r\n```"]