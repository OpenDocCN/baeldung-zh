["```\r\n<dependency>\r\n    <groupId>org.springframework.integration</groupId>\r\n    <artifactId>spring-integration-core</artifactId>\r\n    <version>5.0.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.integration</groupId>\r\n    <artifactId>spring-integration-file</artifactId>\r\n    <version>5.0.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<int:channel id=\"input\"/>\r\n\r\n<int:transformer input-channel=\"input\" expression=\"payload.toUpperCase()\" />\r\n```","```\r\n@Bean\r\npublic IntegrationFlow upcaseFlow() {\r\n    return IntegrationFlows.from(\"input\")\r\n      .transform(String::toUpperCase)\r\n      .get();\r\n}\r\n```","```\r\nIntegrationFlows.from(...)\r\n```","```\r\nIntegrationFlow flow = IntegrationFlows.from(sourceDirectory())\r\n  .filter(onlyJpgs())\r\n  .handle(targetDirectory())\r\n  // add more components\r\n  .get();\r\n```","```\r\n@Bean\r\npublic MessageSource<File> sourceDirectory() {\r\n  // .. create a message source\r\n}\r\n```","```\r\n@Bean\r\npublic MessageSource<File> sourceDirectory() {\r\n    FileReadingMessageSource messageSource = new FileReadingMessageSource();\r\n    messageSource.setDirectory(new File(INPUT_DIR));\r\n    return messageSource;\r\n}\r\n```","```\r\nIntegrationFlows.from(sourceDirectory());\r\n```","```\r\nIntegrationFlows.from(sourceDirectory(), configurer -> configurer.poller(Pollers.fixedDelay(10000)));\r\n```","```\r\n@Bean\r\npublic GenericSelector<File> onlyJpgs() {\r\n    return new GenericSelector<File>() {\r\n\r\n        @Override\r\n        public boolean accept(File source) {\r\n          return source.getName().endsWith(\".jpg\");\r\n        }\r\n    };\r\n}\r\n```","```\r\nIntegrationFlows.from(sourceDirectory())\r\n  .filter(onlyJpgs());\r\n```","```\r\nIntegrationFlows.from(sourceDirectory())\r\n  .filter(source -> ((File) source).getName().endsWith(\".jpg\"));\r\n```","```\r\n@Bean\r\npublic MessageHandler targetDirectory() {\r\n    FileWritingMessageHandler handler = new FileWritingMessageHandler(new File(OUTPUT_DIR));\r\n    handler.setFileExistsMode(FileExistsMode.REPLACE);\r\n    handler.setExpectReply(false);\r\n    return handler;\r\n}\r\n```","```\r\nIntegrationFlows.from(sourceDirectory())\r\n  .filter(onlyJpgs())\r\n  .handle(targetDirectory());\r\n```","```\r\n@Bean\r\npublic IntegrationFlow fileMover() {\r\n    return IntegrationFlows.from(sourceDirectory(), c -> c.poller(Pollers.fixedDelay(10000)))\r\n      .filter(onlyJpgs())\r\n      .handle(targetDirectory())\r\n      .get();\r\n}\r\n```","```\r\nIntegrationFlows.from(\"anyChannel\")\r\n```","```\r\n@Bean\r\npublic PriorityChannel alphabetically() {\r\n    return new PriorityChannel(1000, (left, right) -> \r\n      ((File)left.getPayload()).getName().compareTo(\r\n        ((File)right.getPayload()).getName()));\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow fileMover() {\r\n    return IntegrationFlows.from(sourceDirectory())\r\n      .filter(onlyJpgs())\r\n      .channel(\"alphabetically\")\r\n      .handle(targetDirectory())\r\n      .get();\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow fileReader() {\r\n    return IntegrationFlows.from(sourceDirectory())\r\n      .filter(onlyJpgs())\r\n      .channel(\"holdingTank\")\r\n      .get();\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow fileWriter() {\r\n    return IntegrationFlows.from(\"holdingTank\")\r\n      .bridge(e -> e.poller(Pollers.fixedRate(1, TimeUnit.SECONDS, 20)))\r\n      .handle(targetDirectory())\r\n      .get();\r\n}\r\n```","```\r\n@Bean\r\npublic IntegrationFlow anotherFileWriter() {\r\n    return IntegrationFlows.from(\"holdingTank\")\r\n      .bridge(e -> e.poller(Pollers.fixedRate(2, TimeUnit.SECONDS, 10)))\r\n      .handle(anotherTargetDirectory())\r\n      .get();\r\n}\r\n```"]