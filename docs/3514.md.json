["```\r\npublic class Job implements Runnable {\r\n    private String jobName;\r\n    private JobPriority jobPriority;\r\n\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Job:\" + jobName +\r\n          \" Priority:\" + jobPriority);\r\n        Thread.sleep(1000); // to simulate actual execution time\r\n    }\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic enum JobPriority {\r\n    HIGH,\r\n    MEDIUM,\r\n    LOW\r\n}\r\n```","```\r\nComparator.comparing(Job::getJobPriority);\r\n```","```\r\npublic class PriorityJobScheduler {\r\n\r\n    private ExecutorService priorityJobPoolExecutor;\r\n    private ExecutorService priorityJobScheduler \r\n      = Executors.newSingleThreadExecutor();\r\n    private PriorityBlockingQueue<Job> priorityQueue;\r\n\r\n    public PriorityJobScheduler(Integer poolSize, Integer queueSize) {\r\n        priorityJobPoolExecutor = Executors.newFixedThreadPool(poolSize);\r\n        priorityQueue = new PriorityBlockingQueue<Job>(\r\n          queueSize, \r\n          Comparator.comparing(Job::getJobPriority));\r\n        priorityJobScheduler.execute(() -> {\r\n            while (true) {\r\n                try {\r\n                    priorityJobPoolExecutor.execute(priorityQueue.take());\r\n                } catch (InterruptedException e) {\r\n                    // exception needs special handling\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void scheduleJob(Job job) {\r\n        priorityQueue.add(job);\r\n    }\r\n}\r\n```","```\r\nprivate static int POOL_SIZE = 1;\r\nprivate static int QUEUE_SIZE = 10;\r\n\r\n@Test\r\npublic void whenMultiplePriorityJobsQueued_thenHighestPriorityJobIsPicked() {\r\n    Job job1 = new Job(\"Job1\", JobPriority.LOW);\r\n    Job job2 = new Job(\"Job2\", JobPriority.MEDIUM);\r\n    Job job3 = new Job(\"Job3\", JobPriority.HIGH);\r\n    Job job4 = new Job(\"Job4\", JobPriority.MEDIUM);\r\n    Job job5 = new Job(\"Job5\", JobPriority.LOW);\r\n    Job job6 = new Job(\"Job6\", JobPriority.HIGH);\r\n\r\n    PriorityJobScheduler pjs = new PriorityJobScheduler(\r\n      POOL_SIZE, QUEUE_SIZE);\r\n\r\n    pjs.scheduleJob(job1);\r\n    pjs.scheduleJob(job2);\r\n    pjs.scheduleJob(job3);\r\n    pjs.scheduleJob(job4);\r\n    pjs.scheduleJob(job5);\r\n    pjs.scheduleJob(job6);\r\n\r\n    // clean up\r\n}\r\n```","```\r\nJob:Job3 Priority:HIGH\r\nJob:Job6 Priority:HIGH\r\nJob:Job4 Priority:MEDIUM\r\nJob:Job2 Priority:MEDIUM\r\nJob:Job1 Priority:LOW\r\nJob:Job5 Priority:LOW\r\n```"]