["```\r\npublic class Functor<T> {\r\n    private final T value;\r\n    public Functor(T value) {\r\n        this.value = value;\r\n    }\r\n    public <R> Functor<R> map(Function<T, R> mapper) {\r\n        return new Functor<>(mapper.apply(value));\r\n    }\r\n    // getter\r\n}\r\n```","```\r\npublic class Functor<T> {\r\n    // Definitions\r\n    boolean eq(T other) {\r\n        return value.equals(other);\r\n    }\r\n    // Getter\r\n}\r\n```","```\r\n@Test\r\npublic void whenProvideAValue_ShouldMapTheValue() {\r\n    Functor<Integer> functor = new Functor<>(5);\r\n    Function<Integer, Integer> addThree = (num) -> num + 3;\r\n    Functor<Integer> mappedFunctor = functor.map(addThree);\r\n    assertEquals(8, mappedFunctor.getValue());\r\n}\r\n```","```\r\n@Test\r\npublic void whenApplyAnIdentityToAFunctor_thenResultIsEqualsToInitialValue() {\r\n    String value = \"baeldung\";\r\n    //Identity\r\n    Functor<String> identity = new Functor<>(value).map(Function.identity());\r\n    assertTrue(identity.eq(value));\r\n}\r\n```","```\r\n@Test\r\npublic void whenApplyAFunctionToOtherFunction_thenResultIsEqualsBetweenBoth() {\r\n    int value = 100;\r\n    Function<Integer, String> f = Object::toString;\r\n    Function<String, Long> g = Long::valueOf;\r\n    Functor<Long> left = new Functor<>(value).map(f).map(g);\r\n    Functor<Long> right = new Functor<>(value).map(f.andThen(g));\r\n    assertTrue(left.eq(100L));\r\n    assertTrue(right.eq(100L));\r\n}\r\n```","```\r\npublic enum EnumFunctor {\r\n    PLUS {\r\n        public int apply(int a, int b) {\r\n            return a + b;\r\n        }\r\n    }, MINUS {\r\n        public int apply(int a, int b) {\r\n            return a - b;\r\n        }\r\n    }, MULTIPLY {\r\n        public int apply(int a, int b) {\r\n            return a * b;\r\n        }\r\n    }, DIVIDE {\r\n        public int apply(int a, int b) {\r\n            return a / b;\r\n        }\r\n    };\r\n    public abstract int apply(int a, int b);\r\n}\r\n```","```\r\n@Test\r\npublic void whenApplyOperationsToEnumFunctors_thenGetTheProperResult() {\r\n    assertEquals(15, EnumFunctor.PLUS.apply(10, 5));\r\n    assertEquals(5, EnumFunctor.MINUS.apply(10, 5));\r\n    assertEquals(50, EnumFunctor.MULTIPLY.apply(10, 5));\r\n    assertEquals(2, EnumFunctor.DIVIDE.apply(10, 5));\r\n}\r\n```"]