["```\r\n@SpringBootApplication\r\npublic class DenyApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DenyApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class DenyMethodSecurityConfig extends GlobalMethodSecurityConfiguration {\r\n    @Bean\r\n    public UserDetailsService userDetailsService() {\r\n        return new InMemoryUserDetailsManager(\r\n            User.withUsername(\"user\").password(\"{noop}password\").roles(\"USER\").build(),\r\n            User.withUsername(\"guest\").password(\"{noop}password\").roles().build()\r\n        );\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class DenyOnMissingController {\r\n    @GetMapping(path = \"hello\")\r\n    @PreAuthorize(\"hasRole('USER')\")\r\n    public String hello() {\r\n        return \"Hello world!\";\r\n    }\r\n\r\n    @GetMapping(path = \"bye\")\r\n    // whoops!\r\n    public String bye() {\r\n        return \"Bye bye world!\";\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringBootTest(classes = DenyApplication.class)\r\npublic class DenyOnMissingControllerIntegrationTest {\r\n    @Rule\r\n    public ExpectedException expectedException = ExpectedException.none();\r\n\r\n    @Autowired\r\n    private WebApplicationContext context;\r\n    private MockMvc mockMvc;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        mockMvc = MockMvcBuilders.webAppContextSetup(context).build();\r\n    }\r\n\r\n    @Test\r\n    @WithMockUser(username = \"user\")\r\n    public void givenANormalUser_whenCallingHello_thenAccessDenied() throws Exception {\r\n        mockMvc.perform(get(\"/hello\"))\r\n          .andExpect(status().isOk())\r\n          .andExpect(content().string(\"Hello world!\"));\r\n    }\r\n\r\n    @Test\r\n    @WithMockUser(username = \"user\")\r\n    // This will fail without the changes from the next section\r\n    public void givenANormalUser_whenCallingBye_thenAccessDenied() throws Exception {\r\n        expectedException.expectCause(isA(AccessDeniedException.class));\r\n\r\n        mockMvc.perform(get(\"/bye\"));\r\n    }\r\n}\r\n```","```\r\n@Configuration \r\n@EnableWebSecurity \r\n@EnableGlobalMethodSecurity(prePostEnabled = true) \r\npublic class DenyMethodSecurityConfig extends GlobalMethodSecurityConfiguration {\r\n    @Override\r\n    protected MethodSecurityMetadataSource customMethodSecurityMetadataSource() {\r\n        return new CustomPermissionAllowedMethodSecurityMetadataSource();\r\n    }\r\n    // setting up in memory users not repeated\r\n    ...\r\n}\r\n```","```\r\npublic class CustomPermissionAllowedMethodSecurityMetadataSource \r\n  extends AbstractFallbackMethodSecurityMetadataSource {\r\n    @Override\r\n    protected Collection findAttributes(Class<?> clazz) { return null; }\r\n\r\n    @Override\r\n    protected Collection findAttributes(Method method, Class<?> targetClass) {\r\n        Annotation[] annotations = AnnotationUtils.getAnnotations(method);\r\n        List attributes = new ArrayList<>();\r\n\r\n        // if the class is annotated as @Controller we should by default deny access to all methods\r\n        if (AnnotationUtils.findAnnotation(targetClass, Controller.class) != null) {\r\n            attributes.add(DENY_ALL_ATTRIBUTE);\r\n        }\r\n\r\n        if (annotations != null) {\r\n            for (Annotation a : annotations) {\r\n                // but not if the method has at least a PreAuthorize or PostAuthorize annotation\r\n                if (a instanceof PreAuthorize || a instanceof PostAuthorize) {\r\n                    return null;\r\n                }\r\n            }\r\n        }\r\n        return attributes;\r\n    }\r\n\r\n    @Override\r\n    public Collection getAllConfigAttributes() { return null; }\r\n}\r\n```"]