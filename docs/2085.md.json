["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.apache.tomcat</groupId>\r\n        <artifactId>tomcat-catalina</artifactId>\r\n        <version>${tomcat.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.apache.httpcomponents</groupId>\r\n        <artifactId>httpclient</artifactId>\r\n        <version>${apache.httpclient}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>junit</groupId>\r\n        <artifactId>junit</artifactId>\r\n        <version>${junit.version}</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\nTomcat tomcat = new Tomcat(); \r\n```","```\r\ntomcat.setPort(8080);\r\ntomcat.setHostname(\"localhost\");\r\nString appBase = \".\";\r\ntomcat.getHost().setAppBase(appBase); \r\n```","```\r\nFile docBase = new File(System.getProperty(\"java.io.tmpdir\"));\r\nContext context = tomcat.addContext(\"\", docBase.getAbsolutePath()); \r\n```","```\r\npublic class MyServlet extends HttpServlet {\r\n\r\n    @Override\r\n    protected void doGet(\r\n      HttpServletRequest req, \r\n      HttpServletResponse resp) throws IOException {\r\n\r\n        resp.setStatus(HttpServletResponse.SC_OK);\r\n        resp.getWriter().write(\"test\");\r\n        resp.getWriter().flush();\r\n        resp.getWriter().close();\r\n    }\r\n} \r\n```","```\r\nClass servletClass = MyServlet.class;\r\nTomcat.addServlet(\r\n  context, servletClass.getSimpleName(), servletClass.getName());\r\ncontext.addServletMappingDecoded(\r\n  \"/my-servlet/*\", servletClass.getSimpleName()); \r\n```","```\r\npublic class MyFilter implements Filter {\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, \r\n      ServletResponse response, \r\n      FilterChain chain) \r\n      throws IOException, ServletException {\r\n\r\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\r\n        httpResponse.addHeader(\"myHeader\", \"myHeaderValue\");\r\n        chain.doFilter(request, httpResponse);\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n        // ...\r\n    }\r\n} \r\n```","```\r\nClass filterClass = MyFilter.class;\r\nFilterDef myFilterDef = new FilterDef();\r\nmyFilterDef.setFilterClass(filterClass.getName());\r\nmyFilterDef.setFilterName(filterClass.getSimpleName());\r\ncontext.addFilterDef(myFilterDef);\r\n\r\nFilterMap myFilterMap = new FilterMap();\r\nmyFilterMap.setFilterName(filterClass.getSimpleName());\r\nmyFilterMap.addURLPattern(\"/my-servlet/*\");\r\ncontext.addFilterMap(myFilterMap); \r\n```","```\r\ntomcat.start();\r\ntomcat.getServer().await(); \r\n```"]