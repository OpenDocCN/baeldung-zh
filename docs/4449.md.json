["```\r\npublic interface DiscountPolicy {\r\n    double discount(Order order);\r\n}\r\n```","```\r\npublic class FlatDiscountPolicy implements DiscountPolicy {\r\n    @Override\r\n    public double discount(Order order) {\r\n        return 0.01;\r\n    }\r\n}\r\n```","```\r\npublic class AmountBasedDiscountPolicy implements DiscountPolicy {\r\n    @Override\r\n    public double discount(Order order) {\r\n        if (order.totalCost()\r\n            .isGreaterThan(Money.of(CurrencyUnit.USD, 500.00))) {\r\n            return 0.10;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@DisplayName(\r\n    \"given two discount policies, \" +\r\n    \"when use these policies, \" +\r\n    \"then single dispatch chooses the implementation based on runtime type\"\r\n    )\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    DiscountPolicy flatPolicy = new FlatDiscountPolicy();\r\n    DiscountPolicy amountPolicy = new AmountBasedDiscountPolicy();\r\n    Order orderWorth501Dollars = orderWorthNDollars(501);\r\n\r\n    // when\r\n    double flatDiscount = flatPolicy.discount(orderWorth501Dollars);\r\n    double amountDiscount = amountPolicy.discount(orderWorth501Dollars);\r\n\r\n    // then\r\n    assertThat(flatDiscount).isEqualTo(0.01);\r\n    assertThat(amountDiscount).isEqualTo(0.1);\r\n}\r\n```","```\r\npublic interface SpecialDiscountPolicy extends DiscountPolicy {\r\n    double discount(SpecialOrder order);\r\n}\r\n```","```\r\n@DisplayName(\r\n    \"given discount policy accepting special orders, \" +\r\n    \"when apply the policy on special order declared as regular order, \" +\r\n    \"then regular discount method is used\"\r\n    )\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    SpecialDiscountPolicy specialPolicy = new SpecialDiscountPolicy() {\r\n        @Override\r\n        public double discount(Order order) {\r\n            return 0.01;\r\n        }\r\n\r\n        @Override\r\n        public double discount(SpecialOrder order) {\r\n            return 0.10;\r\n        }\r\n    };\r\n    Order specialOrder = new SpecialOrder(anyOrderLines());\r\n\r\n    // when\r\n    double discount = specialPolicy.discount(specialOrder);\r\n\r\n    // then\r\n    assertThat(discount).isEqualTo(0.01);\r\n}\r\n```","```\r\npublic interface Visitable<V> {\r\n    void accept(V visitor);\r\n}\r\n```","```\r\npublic interface OrderVisitor {\r\n    void visit(Order order);\r\n    void visit(SpecialOrder order);\r\n}\r\n```","```\r\npublic class Order implements Visitable<OrderVisitor> {\r\n    @Override\r\n    public void accept(OrderVisitor visitor) {\r\n        visitor.visit(this);        \r\n    }\r\n}\r\n\r\npublic class SpecialOrder extends Order {\r\n    @Override\r\n    public void accept(OrderVisitor visitor) {\r\n        visitor.visit(this);\r\n    }\r\n}\r\n```","```\r\npublic class HtmlOrderViewCreator implements OrderVisitor {\r\n\r\n    private String html;\r\n\r\n    public String getHtml() {\r\n        return html;\r\n    }\r\n\r\n    @Override\r\n    public void visit(Order order) {\r\n        html = String.format(\"<p>Regular order total cost: %s</p>\", order.totalCost());\r\n    }\r\n\r\n    @Override\r\n    public void visit(SpecialOrder order) {\r\n        html = String.format(\"<h1>Special Order</h1><p>total cost: %s</p>\", order.totalCost());\r\n    }\r\n\r\n}\r\n```","```\r\n@DisplayName(\r\n        \"given collection of regular and special orders, \" +\r\n        \"when create HTML view using visitor for each order, \" +\r\n        \"then the dedicated view is created for each order\"   \r\n    )\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    List<OrderLine> anyOrderLines = OrderFixtureUtils.anyOrderLines();\r\n    List<Order> orders = Arrays.asList(new Order(anyOrderLines), new SpecialOrder(anyOrderLines));\r\n    HtmlOrderViewCreator htmlOrderViewCreator = new HtmlOrderViewCreator();\r\n\r\n    // when\r\n    orders.get(0)\r\n        .accept(htmlOrderViewCreator);\r\n    String regularOrderHtml = htmlOrderViewCreator.getHtml();\r\n    orders.get(1)\r\n        .accept(htmlOrderViewCreator);\r\n    String specialOrderHtml = htmlOrderViewCreator.getHtml();\r\n\r\n    // then\r\n    assertThat(regularOrderHtml).containsPattern(\"<p>Regular order total cost: .*</p>\");\r\n    assertThat(specialOrderHtml).containsPattern(\"<h1>Special Order</h1><p>total cost: .*</p>\");\r\n}\r\n```","```\r\npublic class Order {\r\n    public Money totalCost() {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\npublic interface DiscountPolicy {\r\n    double discount(Order order);\r\n}\r\n```","```\r\npublic class Order /* ... */ {\r\n    // ...\r\n    public Money totalCost(SpecialDiscountPolicy discountPolicy) {\r\n        return totalCost().multipliedBy(1 - discountPolicy.discount(this), RoundingMode.HALF_UP);\r\n    }\r\n    // ...\r\n}\r\n```","```\r\npublic class Order /* ... */ {\r\n    // ...\r\n    public Money totalCost(SpecialDiscountPolicy discountPolicy) {\r\n        return totalCost().multipliedBy(1 - applyDiscountPolicy(discountPolicy), RoundingMode.HALF_UP);\r\n    }\r\n\r\n    protected double applyDiscountPolicy(SpecialDiscountPolicy discountPolicy) {\r\n        return discountPolicy.discount(this);\r\n    }\r\n   // ...\r\n}\r\n```","```\r\n@DisplayName(\r\n    \"given regular order with items worth $100 total, \" +\r\n    \"when apply 10% discount policy, \" +\r\n    \"then cost after discount is $90\"\r\n    )\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    Order order = new Order(OrderFixtureUtils.orderLineItemsWorthNDollars(100));\r\n    SpecialDiscountPolicy discountPolicy = new SpecialDiscountPolicy() {\r\n\r\n        @Override\r\n        public double discount(Order order) {\r\n            return 0.10;\r\n        }\r\n\r\n        @Override\r\n        public double discount(SpecialOrder order) {\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    // when\r\n    Money totalCostAfterDiscount = order.totalCost(discountPolicy);\r\n\r\n    // then\r\n    assertThat(totalCostAfterDiscount).isEqualTo(Money.of(CurrencyUnit.USD, 90));\r\n}\r\n```","```\r\npublic class SpecialOrder extends Order {\r\n    // ...\r\n    @Override\r\n    protected double applyDiscountPolicy(SpecialDiscountPolicy discountPolicy) {\r\n        return discountPolicy.discount(this);\r\n    }\r\n   // ...\r\n}\r\n```","```\r\n@DisplayName(\r\n    \"given special order eligible for extra discount with items worth $100 total, \" +\r\n    \"when apply 20% discount policy for extra discount orders, \" +\r\n    \"then cost after discount is $80\"\r\n    )\r\n@Test\r\nvoid test() throws Exception {\r\n    // given\r\n    boolean eligibleForExtraDiscount = true;\r\n    Order order = new SpecialOrder(OrderFixtureUtils.orderLineItemsWorthNDollars(100), \r\n      eligibleForExtraDiscount);\r\n    SpecialDiscountPolicy discountPolicy = new SpecialDiscountPolicy() {\r\n\r\n        @Override\r\n        public double discount(Order order) {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public double discount(SpecialOrder order) {\r\n            if (order.isEligibleForExtraDiscount())\r\n                return 0.20;\r\n            return 0.10;\r\n        }\r\n    };\r\n\r\n    // when\r\n    Money totalCostAfterDiscount = order.totalCost(discountPolicy);\r\n\r\n    // then\r\n    assertThat(totalCostAfterDiscount).isEqualTo(Money.of(CurrencyUnit.USD, 80.00));\r\n}\r\n```"]