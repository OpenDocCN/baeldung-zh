["```\r\n@Test(expected = Exception.class)\r\npublic void shouldRaiseAnException() throws Exception {\r\n    // ...\r\n}\r\n```","```\r\npublic void shouldRaiseAnException() throws Exception {\r\n    Assertions.assertThrows(Exception.class, () -> {\r\n        //...\r\n    });\r\n}\r\n```","```\r\n@Test(timeout = 1)\r\npublic void shouldFailBecauseTimeout() throws InterruptedException {\r\n    Thread.sleep(10);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldFailBecauseTimeout() throws InterruptedException {\r\n    Assertions.assertTimeout(Duration.ofMillis(1), () -> Thread.sleep(10));\r\n}\r\n```","```\r\n@Test\r\npublic void shouldFailBecauseTheNumbersAreNotEqual_lazyEvaluation() {\r\n    Assertions.assertTrue(\r\n      2 == 3, \r\n      () -> \"Numbers \" + 2 + \" and \" + 3 + \" are not equal!\");\r\n}\r\n```","```\r\n@Test\r\npublic void shouldAssertAllTheGroup() {\r\n    List<Integer> list = Arrays.asList(1, 2, 4);\r\n    Assertions.assertAll(\"List is not incremental\",\r\n        () -> Assertions.assertEquals(list.get(0).intValue(), 1),\r\n        () -> Assertions.assertEquals(list.get(1).intValue(), 2),\r\n        () -> Assertions.assertEquals(list.get(2).intValue(), 3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenEnvironmentIsWeb_thenUrlsShouldStartWithHttp() {\r\n    assumingThat(\"WEB\".equals(System.getenv(\"ENV\")),\r\n      () -> {\r\n          assertTrue(\"http\".startsWith(address));\r\n      });\r\n}\r\n```","```\r\n@Tag(\"annotations\")\r\n@Tag(\"junit5\")\r\npublic class AnnotationTestExampleTest {\r\n    /*...*/\r\n}\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <artifactId>maven-surefire-plugin</artifactId>\r\n            <configuration>\r\n                <properties>\r\n                    <includeTags>junit5</includeTags>\r\n                </properties>\r\n            </configuration>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  {\"/app-config.xml\", \"/test-data-access-config.xml\"})\r\npublic class SpringExtensionTest {\r\n    /*...*/\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(\r\n  { \"/app-config.xml\", \"/test-data-access-config.xml\" })\r\npublic class SpringExtensionTest {\r\n    /*...*/\r\n} \r\n```","```\r\npublic class TraceUnitTestRule implements TestRule {\r\n\r\n    @Override\r\n    public Statement apply(Statement base, Description description) {\r\n        return new Statement() {\r\n            @Override\r\n            public void evaluate() throws Throwable {\r\n                // Before and after an evaluation tracing here \r\n                ...\r\n            }\r\n        };\r\n    }\r\n}\r\n```","```\r\n@Rule\r\npublic TraceUnitTestRule traceRuleTests = new TraceUnitTestRule(); \r\n```","```\r\npublic class TraceUnitExtension implements AfterEachCallback, BeforeEachCallback {\r\n\r\n    @Override\r\n    public void beforeEach(TestExtensionContext context) throws Exception {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public void afterEach(TestExtensionContext context) throws Exception {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(TraceUnitExtension.class)\r\npublic class RuleExampleTest {\r\n\r\n    @Test\r\n    public void whenTracingTests() {\r\n        /*...*/\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.junit.vintage</groupId>\r\n    <artifactId>junit-vintage-engine</artifactId>\r\n    <version>${junit5.vintage.version}</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```"]