["```\r\npublic class Customer {    \r\n     List<@NotBlank(message=\"Address must not be blank\") String> addresses;\r\n\r\n    // standard getters, setters \r\n}\r\n```","```\r\n@Test\r\npublic void whenEmptyAddress_thenValidationFails() {\r\n    Customer customer = new Customer();\r\n    customer.setName(\"John\");\r\n\r\n    customer.setAddresses(Collections.singletonList(\" \"));\r\n    Set<ConstraintViolation<Customer>> violations = \r\n      validator.validate(customer);\r\n\r\n    assertEquals(1, violations.size());\r\n    assertEquals(\"Address must not be blank\", \r\n      violations.iterator().next().getMessage());\r\n}\r\n```","```\r\npublic class CustomerMap {\r\n\r\n    private Map<@Email String, @NotNull Customer> customers;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenInvalidEmail_thenValidationFails() {\r\n    CustomerMap map = new CustomerMap();\r\n    map.setCustomers(Collections.singletonMap(\"john\", new Customer()));\r\n    Set<ConstraintViolation<CustomerMap>> violations\r\n      = validator.validate(map);\r\n\r\n    assertEquals(1, violations.size());\r\n    assertEquals(\r\n      \"Must be a valid email\", \r\n      violations.iterator().next().getMessage());\r\n}\r\n```","```\r\nprivate Integer age;\r\n\r\npublic Optional<@Min(18) Integer> getAge() {\r\n    return Optional.ofNullable(age);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAgeTooLow_thenValidationFails() {\r\n    Customer customer = new Customer();\r\n    customer.setName(\"John\");\r\n    customer.setAge(15);\r\n    Set<ConstraintViolation<Customer>> violations\r\n      = validator.validate(customer);\r\n\r\n    assertEquals(1, violations.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAgeNull_thenValidationSucceeds() {\r\n    Customer customer = new Customer();\r\n    customer.setName(\"John\");\r\n    Set<ConstraintViolation<Customer>> violations\r\n      = validator.validate(customer);\r\n\r\n    assertEquals(0, violations.size());\r\n}\r\n```","```\r\n@Min(1)\r\nprivate OptionalInt numberOfOrders;\r\n```","```\r\npublic class Profile {\r\n    private String companyName;\r\n\r\n    // standard getters, setters \r\n}\r\n```","```\r\n@NotBlank\r\nprivate Profile profile;\r\n```","```\r\n@UnwrapByDefault\r\npublic class ProfileValueExtractor \r\n  implements ValueExtractor<@ExtractedValue(type = String.class) Profile> {\r\n\r\n    @Override\r\n    public void extractValues(Profile originalValue, \r\n      ValueExtractor.ValueReceiver receiver) {\r\n        receiver.value(null, originalValue.getCompanyName());\r\n    }\r\n}\r\n```","```\r\norg.baeldung.javaxval.container.validation.valueextractors.ProfileValueExtractor\r\n```","```\r\n@Test\r\npublic void whenProfileCompanyNameBlank_thenValidationFails() {\r\n    Customer customer = new Customer();\r\n    customer.setName(\"John\");\r\n    Profile profile = new Profile();\r\n    profile.setCompanyName(\" \");\r\n    customer.setProfile(profile);\r\n    Set<ConstraintViolation<Customer>> violations\r\n     = validator.validate(customer);\r\n\r\n    assertEquals(1, violations.size());\r\n}\r\n```"]