["```\r\n@Test\r\npublic void whenSendPostRequestUsingHttpClient_thenCorrect() \r\n  throws ClientProtocolException, IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    List<NameValuePair> params = new ArrayList<NameValuePair>();\r\n    params.add(new BasicNameValuePair(\"username\", \"John\"));\r\n    params.add(new BasicNameValuePair(\"password\", \"pass\"));\r\n    httpPost.setEntity(new UrlEncodedFormEntity(params));\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendPostRequestWithAuthorizationUsingHttpClient_thenCorrect()\r\n  throws ClientProtocolException, IOException, AuthenticationException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    httpPost.setEntity(new StringEntity(\"test post\"));\r\n    UsernamePasswordCredentials creds\r\n      = new UsernamePasswordCredentials(\"John\", \"pass\");\r\n    httpPost.addHeader(new BasicScheme().authenticate(creds, httpPost, null));\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenPostJsonUsingHttpClient_thenCorrect() \r\n  throws ClientProtocolException, IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    String json = \"{\"id\":1,\"name\":\"John\"}\";\r\n    StringEntity entity = new StringEntity(json);\r\n    httpPost.setEntity(entity);\r\n    httpPost.setHeader(\"Accept\", \"application/json\");\r\n    httpPost.setHeader(\"Content-type\", \"application/json\");\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenPostFormUsingHttpClientFluentAPI_thenCorrect() \r\n  throws ClientProtocolException, IOException {\r\n    HttpResponse response = Request.Post(\"http://www.example.com\").bodyForm(\r\n      Form.form().add(\"username\", \"John\").add(\"password\", \"pass\").build())\r\n      .execute().returnResponse();\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendMultipartRequestUsingHttpClient_thenCorrect() \r\n  throws ClientProtocolException, IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    MultipartEntityBuilder builder = MultipartEntityBuilder.create();\r\n    builder.addTextBody(\"username\", \"John\");\r\n    builder.addTextBody(\"password\", \"pass\");\r\n    builder.addBinaryBody(\r\n      \"file\", new File(\"test.txt\"), ContentType.APPLICATION_OCTET_STREAM, \"file.ext\");\r\n\r\n    HttpEntity multipart = builder.build();\r\n    httpPost.setEntity(multipart);\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUploadFileUsingHttpClient_thenCorrect() \r\n  throws ClientProtocolException, IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    MultipartEntityBuilder builder = MultipartEntityBuilder.create();\r\n    builder.addBinaryBody(\r\n      \"file\", new File(\"test.txt\"), ContentType.APPLICATION_OCTET_STREAM, \"file.ext\");\r\n    HttpEntity multipart = builder.build();\r\n    httpPost.setEntity(multipart);\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetUploadFileProgressUsingHttpClient_thenCorrect()\r\n  throws ClientProtocolException, IOException {\r\n    CloseableHttpClient client = HttpClients.createDefault();\r\n    HttpPost httpPost = new HttpPost(\"http://www.example.com\");\r\n\r\n    MultipartEntityBuilder builder = MultipartEntityBuilder.create();\r\n    builder.addBinaryBody(\r\n      \"file\", new File(\"test.txt\"), ContentType.APPLICATION_OCTET_STREAM, \"file.ext\");\r\n    HttpEntity multipart = builder.build();\r\n\r\n    ProgressEntityWrapper.ProgressListener pListener = \r\n      percentage -> assertFalse(Float.compare(percentage, 100) > 0);\r\n    httpPost.setEntity(new ProgressEntityWrapper(multipart, pListener));\r\n\r\n    CloseableHttpResponse response = client.execute(httpPost);\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\npublic static interface ProgressListener {\r\n    void progress(float percentage);\r\n}\r\n```","```\r\npublic class ProgressEntityWrapper extends HttpEntityWrapper {\r\n    private ProgressListener listener;\r\n\r\n    public ProgressEntityWrapper(HttpEntity entity, ProgressListener listener) {\r\n        super(entity);\r\n        this.listener = listener;\r\n    }\r\n\r\n    @Override\r\n    public void writeTo(OutputStream outstream) throws IOException {\r\n        super.writeTo(new CountingOutputStream(outstream, listener, getContentLength()));\r\n    }\r\n} \r\n```","```\r\npublic static class CountingOutputStream extends FilterOutputStream {\r\n    private ProgressListener listener;\r\n    private long transferred;\r\n    private long totalBytes;\r\n\r\n    public CountingOutputStream(\r\n      OutputStream out, ProgressListener listener, long totalBytes) {\r\n        super(out);\r\n        this.listener = listener;\r\n        transferred = 0;\r\n        this.totalBytes = totalBytes;\r\n    }\r\n\r\n    @Override\r\n    public void write(byte[] b, int off, int len) throws IOException {\r\n        out.write(b, off, len);\r\n        transferred += len;\r\n        listener.progress(getCurrentProgress());\r\n    }\r\n\r\n    @Override\r\n    public void write(int b) throws IOException {\r\n        out.write(b);\r\n        transferred++;\r\n        listener.progress(getCurrentProgress());\r\n    }\r\n\r\n    private float getCurrentProgress() {\r\n        return ((float) transferred / totalBytes) * 100;\r\n    }\r\n}\r\n```"]