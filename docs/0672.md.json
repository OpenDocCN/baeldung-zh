["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jersey</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-client</artifactId>\r\n</dependency> \r\n```","```\r\n@Path(\"/\")\r\npublic class JerseyResource {\r\n    // endpoint definitions\r\n}\r\n```","```\r\n@GET\r\n@Path(\"login\")\r\n@Produces(MediaType.TEXT_HTML)\r\npublic String login() {\r\n    return \"Log in with <a href=\\\"/oauth2/authorization/github\\\">GitHub</a>\";\r\n}\r\n```","```\r\n@GET\r\n@Produces(MediaType.TEXT_PLAIN)\r\npublic String home(@Context SecurityContext securityContext) {\r\n    OAuth2AuthenticationToken authenticationToken = (OAuth2AuthenticationToken) securityContext.getUserPrincipal();\r\n    OAuth2AuthenticatedPrincipal authenticatedPrincipal = authenticationToken.getPrincipal();\r\n    String userName = authenticatedPrincipal.getAttribute(\"login\");\r\n    return \"Hello \" + userName;\r\n}\r\n```","```\r\n@Component\r\npublic class RestConfig extends ResourceConfig {\r\n    public RestConfig() {\r\n        register(JerseyResource.class);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n          .antMatchers(\"/login\")\r\n          .permitAll()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .oauth2Login()\r\n          .loginPage(\"/login\");\r\n    }\r\n}\r\n```","```\r\nserver.port=8083\r\nspring.security.oauth2.client.registration.github.client-id=<your-client-id>\r\nspring.security.oauth2.client.registration.github.client-secret=<your-client-secret>\r\n```","```\r\n@SpringBootApplication\r\n@PropertySource(\"classpath:jersey-application.properties\")\r\npublic class JerseyApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(JerseyApplication.class, args);\r\n    }\r\n}\r\n```","```\r\nhttps://github.com/login/oauth/authorize?response_type=code&client;_id=c30a16c45a9640771af5&scope;=read:user&state;=dpTme3pB87wA7AZ--XfVRWSkuHD3WIc9Pvn17yeqw38%3D&redirect;_uri=http://localhost:8083/login/oauth2/code/github\r\n```","```\r\nhttp://localhost:8083/login/oauth2/code/github?code=561d99681feeb5d2edd7&state;=dpTme3pB87wA7AZ--XfVRWSkuHD3WIc9Pvn17yeqw38%3D\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = RANDOM_PORT)\r\n@TestPropertySource(properties = \"spring.security.oauth2.client.registration.github.client-id:test-id\")\r\npublic class JerseyResourceUnitTest {\r\n    @Autowired\r\n    private TestRestTemplate restTemplate;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    private String basePath;\r\n\r\n    @Before\r\n    public void setup() {\r\n        basePath = \"http://localhost:\" + port + \"/\";\r\n    }\r\n\r\n    // test methods\r\n}\r\n```","```\r\n@Test\r\npublic void whenUserIsUnauthenticated_thenTheyAreRedirectedToLoginPage() {\r\n    ResponseEntity<Object> response = restTemplate.getForEntity(basePath, Object.class);\r\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FOUND);\r\n    assertThat(response.getBody()).isNull();\r\n\r\n    URI redirectLocation = response.getHeaders().getLocation();\r\n    assertThat(redirectLocation).isNotNull();\r\n    assertThat(redirectLocation.toString()).isEqualTo(basePath + \"login\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUserAttemptsToLogin_thenAuthorizationPathIsReturned() {\r\n    ResponseEntity response = restTemplate.getForEntity(basePath + \"login\", String.class);\r\n    assertThat(response.getHeaders().getContentType()).isEqualTo(TEXT_HTML);\r\n    assertThat(response.getBody()).isEqualTo(\"Log in with <a href=\"\\\"/oauth2/authorization/github\\\"\">GitHub</a>\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUserAccessesAuthorizationEndpoint_thenTheyAresRedirectedToProvider() {\r\n    ResponseEntity response = restTemplate.getForEntity(basePath + \"oauth2/authorization/github\", String.class);\r\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.FOUND);\r\n    assertThat(response.getBody()).isNull();\r\n\r\n    URI redirectLocation = response.getHeaders().getLocation();\r\n    assertThat(redirectLocation).isNotNull();\r\n    assertThat(redirectLocation.getHost()).isEqualTo(\"github.com\");\r\n    assertThat(redirectLocation.getPath()).isEqualTo(\"/login/oauth/authorize\");\r\n\r\n    String redirectionQuery = redirectLocation.getQuery();\r\n    assertThat(redirectionQuery.contains(\"response_type=code\"));\r\n    assertThat(redirectionQuery.contains(\"client_id=test-id\"));\r\n    assertThat(redirectionQuery.contains(\"scope=read:user\"));\r\n}\r\n```"]