["```\r\n@Test\r\npublic void whenAssumeThatAndOSIsLinux_thenRunTest() {\r\n    assumeThat(getOsName(), is(\"Linux\"));\r\n\r\n    assertEquals(\"run\", \"RUN\".toLowerCase());\r\n}\r\n```","```\r\nprivate boolean isExpectedOS(String osName) {\r\n    return \"Linux\".equals(osName);\r\n}\r\n\r\n@Test \r\npublic void whenAssumeTrueAndOSIsLinux_thenRunTest() {\r\n    assumeTrue(isExpectedOS(getOsName()));\r\n\r\n    assertEquals(\"run\", \"RUN\".toLowerCase());\r\n} \r\n```","```\r\n@Test\r\npublic void whenAssumeFalseAndOSIsLinux_thenIgnore() {\r\n    assumeFalse(isExpectedOS(getOsName()));\r\n\r\n    assertEquals(\"run\", \"RUN\".toLowerCase());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssumeNotNullAndNotNullOSVersion_thenRun() {\r\n    assumeNotNull(getOsName());\r\n\r\n    assertEquals(\"run\", \"RUN\".toLowerCase());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssumeNoExceptionAndExceptionThrown_thenIgnore() {\r\n    assertEquals(\"everything ok\", \"EVERYTHING OK\".toLowerCase());\r\n    String t=null;\r\n    try {\r\n        t.charAt(0);\r\n    } catch(NullPointerException npe){\r\n        assumeNoException(npe);\r\n    }\r\n    assertEquals(\"run\", \"RUN\".toLowerCase());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAssumeFalseAndOSIsLinux_thenIgnore() {\r\n    assertEquals(\"run\", \"RUN\");\r\n    assumeFalse(isExpectedOS(getOsName()));\r\n} \r\n```","```\r\norg.junit.ComparisonFailure: \r\nExpected :run\r\nActual   :RUN\r\n```"]