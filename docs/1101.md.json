["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-sleuth</artifactId>\r\n</dependency>\r\n```","```\r\nspring.application.name=Baeldung Sleuth Tutorial\r\n```","```\r\n@RestController\r\npublic class SleuthController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String helloSleuth() {\r\n        logger.info(\"Hello Sleuth\");\r\n        return \"success\";\r\n    }\r\n}\r\n```","```\r\n2017-01-10 22:36:38.254  INFO \r\n  [Baeldung Sleuth Tutorial,4e30f7340b3fb631,4e30f7340b3fb631,false] 12516 \r\n  --- [nio-8080-exec-1] c.b.spring.session.SleuthController : Hello Sleuth\r\n```","```\r\n@Service\r\npublic class SleuthService {\r\n\r\n    public void doSomeWorkSameSpan() {\r\n        Thread.sleep(1000L);\r\n        logger.info(\"Doing some work\");\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate SleuthService sleuthService;\r\n\r\n    @GetMapping(\"/same-span\")\r\n    public String helloSleuthSameSpan() throws InterruptedException {\r\n        logger.info(\"Same Span\");\r\n        sleuthService.doSomeWorkSameSpan();\r\n        return \"success\";\r\n}\r\n```","```\r\n2017-01-10 22:51:47.664  INFO \r\n  [Baeldung Sleuth Tutorial,b77a5ea79036d5b9,b77a5ea79036d5b9,false] 12516 \r\n  --- [nio-8080-exec-3] c.b.spring.session.SleuthController      : Same Span\r\n2017-01-10 22:51:48.664  INFO \r\n  [Baeldung Sleuth Tutorial,b77a5ea79036d5b9,b77a5ea79036d5b9,false] 12516 \r\n  --- [nio-8080-exec-3] c.baeldung.spring.session.SleuthService  : Doing some work\r\n```","```\r\n@GetMapping(\"/new-span\")\r\npublic String helloSleuthNewSpan() {\r\n    logger.info(\"New Span\");\r\n    sleuthService.doSomeWorkNewSpan();\r\n    return \"success\";\r\n}\r\n```","```\r\n@Autowired\r\nprivate Tracer tracer;\r\n// ...\r\npublic void doSomeWorkNewSpan() throws InterruptedException {\r\n    logger.info(\"I'm in the original span\");\r\n\r\n    Span newSpan = tracer.nextSpan().name(\"newSpan\").start();\r\n    try (SpanInScope ws = tracer.withSpanInScope(newSpan.start())) {\r\n        Thread.sleep(1000L);\r\n        logger.info(\"I'm in the new span doing some cool work that needs its own span\");\r\n    } finally {\r\n        newSpan.finish();\r\n    }\r\n\r\n    logger.info(\"I'm in the original span\");\r\n}\r\n```","```\r\n2017-01-11 21:07:54.924  \r\n  INFO [Baeldung Sleuth Tutorial,9cdebbffe8bbbade,9cdebbffe8bbbade,false] 12516 \r\n  --- [nio-8080-exec-6] c.b.spring.session.SleuthController      : New Span\r\n2017-01-11 21:07:54.924  \r\n  INFO [Baeldung Sleuth Tutorial,9cdebbffe8bbbade,9cdebbffe8bbbade,false] 12516 \r\n  --- [nio-8080-exec-6] c.baeldung.spring.session.SleuthService  : \r\n  I'm in the original span\r\n2017-01-11 21:07:55.924  \r\n  INFO [Baeldung Sleuth Tutorial,9cdebbffe8bbbade,1e706f252a0ee9c2,false] 12516 \r\n  --- [nio-8080-exec-6] c.baeldung.spring.session.SleuthService  : \r\n  I'm in the new span doing some cool work that needs its own span\r\n2017-01-11 21:07:55.924  \r\n  INFO [Baeldung Sleuth Tutorial,9cdebbffe8bbbade,9cdebbffe8bbbade,false] 12516 \r\n  --- [nio-8080-exec-6] c.baeldung.spring.session.SleuthService  : \r\n  I'm in the original span\r\n```","```\r\n@Configuration\r\npublic class ThreadConfig {\r\n\r\n    @Autowired\r\n    private BeanFactory beanFactory;\r\n\r\n    @Bean\r\n    public Executor executor() {\r\n        ThreadPoolTaskExecutor threadPoolTaskExecutor\r\n         = new ThreadPoolTaskExecutor();\r\n        threadPoolTaskExecutor.setCorePoolSize(1);\r\n        threadPoolTaskExecutor.setMaxPoolSize(1);\r\n        threadPoolTaskExecutor.initialize();\r\n\r\n        return new LazyTraceExecutor(beanFactory, threadPoolTaskExecutor);\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate Executor executor;\r\n\r\n    @GetMapping(\"/new-thread\")\r\n    public String helloSleuthNewThread() {\r\n        logger.info(\"New Thread\");\r\n        Runnable runnable = () -> {\r\n            try {\r\n                Thread.sleep(1000L);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            logger.info(\"I'm inside the new thread - with a new span\");\r\n        };\r\n        executor.execute(runnable);\r\n\r\n        logger.info(\"I'm done - with the original span\");\r\n        return \"success\";\r\n}\r\n```","```\r\n2017-01-11 21:18:15.949  \r\n  INFO [Baeldung Sleuth Tutorial,96076a78343c364d,96076a78343c364d,false] 12516 \r\n  --- [nio-8080-exec-9] c.b.spring.session.SleuthController      : New Thread\r\n2017-01-11 21:18:15.950  \r\n  INFO [Baeldung Sleuth Tutorial,96076a78343c364d,96076a78343c364d,false] 12516 \r\n  --- [nio-8080-exec-9] c.b.spring.session.SleuthController      : \r\n  I'm done - with the original span\r\n2017-01-11 21:18:16.953  \r\n  INFO [Baeldung Sleuth Tutorial,96076a78343c364d,e3b6a68013ddfeea,false] 12516 \r\n  --- [lTaskExecutor-1] c.b.spring.session.SleuthController      : \r\n  I'm inside the new thread - with a new span\r\n```","```\r\n@Configuration\r\n@EnableAsync\r\npublic class ThreadConfig extends AsyncConfigurerSupport {\r\n\r\n    //...\r\n    @Override\r\n    public Executor getAsyncExecutor() {\r\n        ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\r\n        threadPoolTaskExecutor.setCorePoolSize(1);\r\n        threadPoolTaskExecutor.setMaxPoolSize(1);\r\n        threadPoolTaskExecutor.initialize();\r\n\r\n        return new LazyTraceExecutor(beanFactory, threadPoolTaskExecutor);\r\n    }\r\n}\r\n```","```\r\n@Async\r\npublic void asyncMethod() {\r\n    logger.info(\"Start Async Method\");\r\n    Thread.sleep(1000L);\r\n    logger.info(\"End Async Method\");\r\n}\r\n```","```\r\n@GetMapping(\"/async\")\r\npublic String helloSleuthAsync() {\r\n    logger.info(\"Before Async Method Call\");\r\n    sleuthService.asyncMethod();\r\n    logger.info(\"After Async Method Call\");\r\n\r\n    return \"success\";\r\n}\r\n```","```\r\n2017-01-11 21:30:40.621  \r\n  INFO [Baeldung Sleuth Tutorial,c187f81915377fff,c187f81915377fff,false] 10072 \r\n  --- [nio-8080-exec-2] c.b.spring.session.SleuthController      : \r\n  Before Async Method Call\r\n2017-01-11 21:30:40.622  \r\n  INFO [Baeldung Sleuth Tutorial,c187f81915377fff,c187f81915377fff,false] 10072 \r\n  --- [nio-8080-exec-2] c.b.spring.session.SleuthController      : \r\n  After Async Method Call\r\n2017-01-11 21:30:40.622  \r\n  INFO [Baeldung Sleuth Tutorial,c187f81915377fff,8a9f3f097dca6a9e,false] 10072 \r\n  --- [lTaskExecutor-1] c.baeldung.spring.session.SleuthService  : \r\n  Start Async Method\r\n2017-01-11 21:30:41.622  \r\n  INFO [Baeldung Sleuth Tutorial,c187f81915377fff,8a9f3f097dca6a9e,false] 10072 \r\n  --- [lTaskExecutor-1] c.baeldung.spring.session.SleuthService  : \r\n  End Async Method\r\n```","```\r\n@Configuration\r\n@EnableAsync\r\n@EnableScheduling\r\npublic class ThreadConfig extends AsyncConfigurerSupport\r\n  implements SchedulingConfigurer {\r\n\r\n    //...\r\n\r\n    @Override\r\n    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\r\n        scheduledTaskRegistrar.setScheduler(schedulingExecutor());\r\n    }\r\n\r\n    @Bean(destroyMethod = \"shutdown\")\r\n    public Executor schedulingExecutor() {\r\n        return Executors.newScheduledThreadPool(1);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class SchedulingService {\r\n\r\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\r\n\r\n    @Autowired\r\n    private SleuthService sleuthService;\r\n\r\n    @Scheduled(fixedDelay = 30000)\r\n    public void scheduledWork() throws InterruptedException {\r\n        logger.info(\"Start some work from the scheduled task\");\r\n        sleuthService.asyncMethod();\r\n        logger.info(\"End work from scheduled task\");\r\n    }\r\n}\r\n```","```\r\n2017-01-11 21:30:58.866  \r\n  INFO [Baeldung Sleuth Tutorial,3605f5deaea28df2,3605f5deaea28df2,false] 10072 \r\n  --- [pool-1-thread-1] c.b.spring.session.SchedulingService     : \r\n  Start some work from the scheduled task\r\n2017-01-11 21:30:58.866  \r\n  INFO [Baeldung Sleuth Tutorial,3605f5deaea28df2,3605f5deaea28df2,false] 10072 \r\n  --- [pool-1-thread-1] c.b.spring.session.SchedulingService     : \r\n  End work from scheduled task\r\n```"]