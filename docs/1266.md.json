["```\r\nV put(K key, V value);\r\n```","```\r\npublic class MyKey {\r\n    private int id;\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        System.out.println(\"Calling hashCode()\");\r\n        return id;\r\n    }\r\n\r\n    // constructor, setters and getters \r\n}\r\n```","```\r\n@Test\r\npublic void whenHashCodeIsCalledOnPut_thenCorrect() {\r\n    MyKey key = new MyKey(1);\r\n    Map<MyKey, String> map = new HashMap<>();\r\n    map.put(key, \"val\");\r\n}\r\n```","```\r\nCalling hashCode()\r\n```","```\r\nstatic final int hash(Object key) {\r\n    int h;\r\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\r\n}\r\n```","```\r\npublic V put(K key, V value) {\r\n    return putVal(hash(key), key, value, false, true);\r\n}\r\n```","```\r\npublic interface Set<E> extends Collection<E>\r\n```","```\r\n@Test\r\npublic void givenNullKeyAndVal_whenAccepts_thenCorrect(){\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(null, null);\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistingKey_whenPutReturnsPrevValue_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"key1\", \"val1\");\r\n\r\n    String rtnVal = map.put(\"key1\", \"val2\");\r\n\r\n    assertEquals(\"val1\", rtnVal);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNewKey_whenPutReturnsNull_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n\r\n    String rtnVal = map.put(\"key1\", \"val1\");\r\n\r\n    assertNull(rtnVal);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNullVal_whenPutReturnsNull_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n\r\n    String rtnVal = map.put(\"key1\", null);\r\n\r\n    assertNull(rtnVal);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetWorks_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"key\", \"val\");\r\n\r\n    String val = map.get(\"key\");\r\n\r\n    assertEquals(\"val\", val);\r\n}\r\n```","```\r\n@Test\r\npublic void whenHashCodeIsCalledOnGet_thenCorrect() {\r\n    MyKey key = new MyKey(1);\r\n    Map<MyKey, String> map = new HashMap<>();\r\n    map.put(key, \"val\");\r\n    map.get(key);\r\n}\r\n```","```\r\nCalling hashCode()\r\nCalling hashCode()\r\n```","```\r\n@Test\r\npublic void givenUnmappedKey_whenGetReturnsNull_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n\r\n    String rtnVal = map.get(\"key1\");\r\n\r\n    assertNull(rtnVal);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNullVal_whenRetrieves_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"key\", null);\r\n\r\n    String val=map.get(\"key\");\r\n\r\n    assertNull(val);\r\n}\r\n```","```\r\n@Test\r\npublic void whenContainsDistinguishesNullValues_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n\r\n    String val1 = map.get(\"key\");\r\n    boolean valPresent = map.containsKey(\"key\");\r\n\r\n    assertNull(val1);\r\n    assertFalse(valPresent);\r\n\r\n    map.put(\"key\", null);\r\n    String val = map.get(\"key\");\r\n    valPresent = map.containsKey(\"key\");\r\n\r\n    assertNull(val);\r\n    assertTrue(valPresent);\r\n}\r\n```","```\r\n@Test\r\npublic void givenHashMap_whenRetrievesKeyset_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    Set<String> keys = map.keySet();\r\n\r\n    assertEquals(2, keys.size());\r\n    assertTrue(keys.contains(\"name\"));\r\n    assertTrue(keys.contains(\"type\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenKeySet_whenChangeReflectsInMap_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    assertEquals(2, map.size());\r\n\r\n    Set<String> keys = map.keySet();\r\n    keys.remove(\"name\");\r\n\r\n    assertEquals(1, map.size());\r\n}\r\n```","```\r\n@Test\r\npublic void givenHashMap_whenRetrievesValues_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    Collection<String> values = map.values();\r\n\r\n    assertEquals(2, values.size());\r\n    assertTrue(values.contains(\"baeldung\"));\r\n    assertTrue(values.contains(\"blog\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenHashMap_whenRetrievesEntries_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    Set<Entry<String, String>> entries = map.entrySet();\r\n\r\n    assertEquals(2, entries.size());\r\n    for (Entry<String, String> e : entries) {\r\n        String key = e.getKey();\r\n        String val = e.getValue();\r\n        assertTrue(key.equals(\"name\") || key.equals(\"type\"));\r\n        assertTrue(val.equals(\"baeldung\") || val.equals(\"blog\"));\r\n    }\r\n}\r\n```","```\r\n@Test(expected = ConcurrentModificationException.class)\r\npublic void givenIterator_whenFailsFastOnModification_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    Set<String> keys = map.keySet();\r\n    Iterator<String> it = keys.iterator();\r\n    map.remove(\"type\");\r\n    while (it.hasNext()) {\r\n        String key = it.next();\r\n    }\r\n}\r\n```","```\r\npublic void givenIterator_whenRemoveWorks_thenCorrect() {\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"name\", \"baeldung\");\r\n    map.put(\"type\", \"blog\");\r\n\r\n    Set<String> keys = map.keySet();\r\n    Iterator<String> it = keys.iterator();\r\n\r\n    while (it.hasNext()) {\r\n        it.next();\r\n        it.remove();\r\n    }\r\n\r\n    assertEquals(0, map.size());\r\n}\r\n```","```\r\nMap<String,String> hashMapWithCapacity=new HashMap<>(32);\r\nMap<String,String> hashMapWithCapacityAndLF=new HashMap<>(32, 0.5f);\r\n```","```\r\npublic class MyKey {\r\n    private String name;\r\n    private int id;\r\n\r\n    public MyKey(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n\r\n    // standard getters and setters\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        System.out.println(\"Calling hashCode()\");\r\n        return id;\r\n    } \r\n\r\n    // toString override for pretty logging\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        System.out.println(\"Calling equals() for key: \" + obj);\r\n        // generated implementation\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenCallsEqualsOnCollision_thenCorrect() {\r\n    HashMap<MyKey, String> map = new HashMap<>();\r\n    MyKey k1 = new MyKey(1, \"firstKey\");\r\n    MyKey k2 = new MyKey(2, \"secondKey\");\r\n    MyKey k3 = new MyKey(2, \"thirdKey\");\r\n\r\n    System.out.println(\"storing value for k1\");\r\n    map.put(k1, \"firstValue\");\r\n    System.out.println(\"storing value for k2\");\r\n    map.put(k2, \"secondValue\");\r\n    System.out.println(\"storing value for k3\");\r\n    map.put(k3, \"thirdValue\");\r\n\r\n    System.out.println(\"retrieving value for k1\");\r\n    String v1 = map.get(k1);\r\n    System.out.println(\"retrieving value for k2\");\r\n    String v2 = map.get(k2);\r\n    System.out.println(\"retrieving value for k3\");\r\n    String v3 = map.get(k3);\r\n\r\n    assertEquals(\"firstValue\", v1);\r\n    assertEquals(\"secondValue\", v2);\r\n    assertEquals(\"thirdValue\", v3);\r\n}\r\n```","```\r\nstoring value for k1\r\nCalling hashCode()\r\nstoring value for k2\r\nCalling hashCode()\r\nstoring value for k3\r\nCalling hashCode()\r\nCalling equals() for key: MyKey [name=secondKey, id=2]\r\nretrieving value for k1\r\nCalling hashCode()\r\nretrieving value for k2\r\nCalling hashCode()\r\nretrieving value for k3\r\nCalling hashCode()\r\nCalling equals() for key: MyKey [name=secondKey, id=2]\r\n```"]