["```\r\n<dependencies>\r\n     <dependency>\r\n        <groupId>org.springframework.data</groupId>\r\n        <artifactId>spring-data-r2dbc</artifactId>\r\n        <version>1.0.0.RELEASE</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>io.r2dbc</groupId>\r\n        <artifactId>r2dbc-h2</artifactId>\r\n        <version>0.8.1.RELEASE</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.h2database</groupId>\r\n        <artifactId>h2</artifactId>\r\n        <version>1.4.199</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@Configuration\r\n@EnableR2dbcRepositories\r\nclass R2DBCConfiguration extends AbstractR2dbcConfiguration {\r\n    @Bean\r\n    public H2ConnectionFactory connectionFactory() {\r\n        return new H2ConnectionFactory(\r\n            H2ConnectionConfiguration.builder()\r\n              .url(\"mem:testdb;DB_CLOSE_DELAY=-1;\")\r\n              .username(\"sa\")\r\n              .build()\r\n        );\r\n    }\r\n}\r\n```","```\r\ninterface PlayerRepository extends ReactiveCrudRepository<Player, Integer> {}\r\n```","```\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\nclass Player {\r\n    @Id\r\n    Integer id;\r\n    String name;\r\n    Integer age;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeleteAll_then0IsExpected() {\r\n    playerRepository.deleteAll()\r\n      .as(StepVerifier::create)\r\n      .expectNextCount(0)\r\n      .verifyComplete();\r\n}\r\n\r\n@Test\r\npublic void whenInsert6_then6AreExpected() {\r\n    insertPlayers();\r\n    playerRepository.findAll()\r\n      .as(StepVerifier::create)\r\n      .expectNextCount(6)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Query(\"select id, name, age from player where name = $1\")\r\nFlux<Player> findAllByName(String name);\r\n\r\n@Query(\"select * from player where age = $1\")\r\nFlux<Player> findByAge(int age);\r\n```","```\r\n@Test\r\npublic void whenSearchForCR7_then1IsExpected() {\r\n    insertPlayers();\r\n    playerRepository.findAllByName(\"CR7\")\r\n      .as(StepVerifier::create)\r\n      .expectNextCount(1)\r\n      .verifyComplete();\r\n}\r\n\r\n@Test\r\npublic void whenSearchFor32YearsOld_then2AreExpected() {\r\n    insertPlayers();\r\n    playerRepository.findByAge(32)\r\n      .as(StepVerifier::create)\r\n      .expectNextCount(2)\r\n      .verifyComplete();\r\n}\r\n\r\nprivate void insertPlayers() {\r\n    List<Player> players = Arrays.asList(\r\n        new Player(1, \"Kaka\", 37),\r\n        new Player(2, \"Messi\", 32),\r\n        new Player(3, \"MbappÃ©\", 20),\r\n        new Player(4, \"CR7\", 34),\r\n        new Player(5, \"Lewandowski\", 30),\r\n        new Player(6, \"Cavani\", 32)\r\n    );\r\n    playerRepository.saveAll(players).subscribe();\r\n} \r\n```","```\r\nBatch batch = connection.createBatch();\r\n```","```\r\n@Test\r\npublic void whenBatchHas2Operations_then2AreExpected() {\r\n    Mono.from(factory.create())\r\n      .flatMapMany(connection -> Flux.from(connection\r\n        .createBatch()\r\n        .add(\"select * from player\")\r\n        .add(\"select * from player\")\r\n        .execute()))\r\n      .as(StepVerifier::create)\r\n      .expectNextCount(2)\r\n      .verifyComplete();\r\n}\r\n```"]