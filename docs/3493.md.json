["```\r\n<dependency>\r\n    <groupId>com.github.docker-java</groupId>\r\n    <artifactId>docker-java</artifactId>\r\n    <version>3.0.14</version>\r\n</dependency>\r\n```","```\r\nDockerClient dockerClient = DockerClientBuilder.getInstance().build();\r\n```","```\r\nDefaultDockerClientConfig.Builder config \r\n  = DefaultDockerClientConfig.createDefaultConfigBuilder();\r\nDockerClient dockerClient = DockerClientBuilder\r\n  .getInstance(config)\r\n  .build();\r\n```","```\r\nDockerClient dockerClient\r\n  = DockerClientBuilder.getInstance(\"tcp://docker.baeldung.com:2375\").build();\r\n```","```\r\nDefaultDockerClientConfig config\r\n  = DefaultDockerClientConfig.createDefaultConfigBuilder()\r\n    .withRegistryEmail(\"[[email protected]](/web/20220727020703/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n    .withRegistryPassword(\"baeldung\")\r\n    .withRegistryUsername(\"baeldung\")\r\n    .withDockerCertPath(\"/home/baeldung/.docker/certs\")\r\n    .withDockerConfig(\"/home/baeldung/.docker/\")\r\n    .withDockerTlsVerify(\"1\")\r\n    .withDockerHost(\"tcp://docker.baeldung.com:2376\").build();\r\n\r\nDockerClient dockerClient = DockerClientBuilder.getInstance(config).build();\r\n```","```\r\nProperties properties = new Properties();\r\nproperties.setProperty(\"registry.email\", \"[[email protected]](/web/20220727020703/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\nproperties.setProperty(\"registry.password\", \"baeldung\");\r\nproperties.setProperty(\"registry.username\", \"baaldung\");\r\nproperties.setProperty(\"DOCKER_CERT_PATH\", \"/home/baeldung/.docker/certs\");\r\nproperties.setProperty(\"DOCKER_CONFIG\", \"/home/baeldung/.docker/\");\r\nproperties.setProperty(\"DOCKER_TLS_VERIFY\", \"1\");\r\nproperties.setProperty(\"DOCKER_HOST\", \"tcp://docker.baeldung.com:2376\");\r\n\r\nDefaultDockerClientConfig config\r\n  = DefaultDockerClientConfig.createDefaultConfigBuilder()\r\n    .withProperties(properties).build();\r\n\r\nDockerClient dockerClient = DockerClientBuilder.getInstance(config).build();\r\n```","```\r\nexport DOCKER_CERT_PATH=/home/baeldung/.docker/certs\r\nexport DOCKER_CONFIG=/home/baeldung/.docker/\r\nexport DOCKER_TLS_VERIFY=1\r\nexport DOCKER_HOST=tcp://docker.baeldung.com:2376\r\n```","```\r\nList<Container> containers = dockerClient.listContainersCmd().exec();\r\n```","```\r\nList<Container> containers = dockerClient.listContainersCmd()\r\n  .withShowSize(true)\r\n  .withShowAll(true)\r\n  .withStatusFilter(\"exited\").exec()\r\n```","```\r\n$ docker ps -a -s -f status=exited\r\n# or \r\n$ docker container ls -a -s -f status=exited\r\n```","```\r\n$ docker create --name mongo \\\r\n  --hostname=baeldung \\\r\n  -e MONGO_LATEST_VERSION=3.6 \\\r\n  -p 9999:27017 \\\r\n  -v /Users/baeldung/mongo/data/db:/data/db \\\r\n  mongo:3.6 --bind_ip_all\r\n```","```\r\nCreateContainerResponse container\r\n  = dockerClient.createContainerCmd(\"mongo:3.6\")\r\n    .withCmd(\"--bind_ip_all\")\r\n    .withName(\"mongo\")\r\n    .withHostName(\"baeldung\")\r\n    .withEnv(\"MONGO_LATEST_VERSION=3.6\")\r\n    .withPortBindings(PortBinding.parse(\"9999:27017\"))\r\n    .withBinds(Bind.parse(\"/Users/baeldung/mongo/data/db:/data/db\")).exec();\r\n```","```\r\ndockerClient.startContainerCmd(container.getId()).exec();\r\n\r\ndockerClient.stopContainerCmd(container.getId()).exec();\r\n\r\ndockerClient.killContainerCmd(container.getId()).exec();\r\n```","```\r\nInspectContainerResponse container \r\n  = dockerClient.inspectContainerCmd(container.getId()).exec();\r\n```","```\r\nString snapshotId = dockerClient.commitCmd(\"3464bb547f88\")\r\n  .withAuthor(\"Baeldung <[[email protected]](/web/20220727020703/https://www.baeldung.com/cdn-cgi/l/email-protection)>\")\r\n  .withEnv(\"SNAPSHOT_YEAR=2018\")\r\n  .withMessage(\"add git support\")\r\n  .withCmd(\"git\", \"version\")\r\n  .withRepository(\"alpine\")\r\n  .withTag(\"3.6.git\").exec();\r\n```","```\r\n$ docker image ls alpine --format \"table {{.Repository}} {{.Tag}}\"\r\nREPOSITORY TAG\r\nalpine     3.6.git\r\n```","```\r\nList<Image> images = dockerClient.listImagesCmd().exec();\r\n```","```\r\n$ docker image ls --format \"table {{.Repository}} {{.Tag}}\"\r\nREPOSITORY TAG\r\nalpine     3.6\r\nmongo      3.6\r\n```","```\r\nList<Image> images = dockerClient.listImagesCmd()\r\n  .withShowAll(true).exec();\r\n```","```\r\nList<Image> images = dockerClient.listImagesCmd()\r\n  .withDanglingFilter(true).exec();\r\n```","```\r\nFROM alpine:3.6\r\n\r\nRUN apk --update add git openssh && \\\r\n  rm -rf /var/lib/apt/lists/* && \\\r\n  rm /var/cache/apk/*\r\n\r\nENTRYPOINT [\"git\"]\r\nCMD [\"--help\"]\r\n```","```\r\nString imageId = dockerClient.buildImageCmd()\r\n  .withDockerfile(new File(\"path/to/Dockerfile\"))\r\n  .withPull(true)\r\n  .withNoCache(true)\r\n  .withTag(\"alpine:git\")\r\n  .exec(new BuildImageResultCallback())\r\n  .awaitImageId();\r\n```","```\r\nInspectImageResponse image \r\n  = dockerClient.inspectImageCmd(\"161714540c41\").exec();\r\n```","```\r\nString imageId = \"161714540c41\";\r\nString repository = \"baeldung/alpine\";\r\nString tag = \"git\";\r\n\r\ndockerClient.tagImageCmd(imageId, repository, tag).exec();\r\n```","```\r\n$ docker image ls --format \"table {{.Repository}} {{.Tag}}\"\r\nREPOSITORY      TAG\r\nbaeldung/alpine git\r\n```","```\r\ndockerClient.pushImageCmd(\"baeldung/alpine\")\r\n  .withTag(\"git\")\r\n  .exec(new PushImageResultCallback())\r\n  .awaitCompletion(90, TimeUnit.SECONDS);\r\n```","```\r\ndockerClient.pullImageCmd(\"baeldung/alpine\")\r\n  .withTag(\"git\")\r\n  .exec(new PullImageResultCallback())\r\n  .awaitCompletion(30, TimeUnit.SECONDS);\r\n```","```\r\n$ docker images baeldung/alpine --format \"table {{.Repository}} {{.Tag}}\"\r\nREPOSITORY      TAG\r\nbaeldung/alpine git\r\n```","```\r\ndockerClient.removeImageCmd(\"beaccc8687ae\").exec();\r\n```","```\r\nList<SearchItem> items = dockerClient.searchImagesCmd(\"Java\").exec();\r\n```","```\r\nListVolumesResponse volumesResponse = dockerClient.listVolumesCmd().exec();\r\nList<InspectVolumeResponse> volumes = volumesResponse.getVolumes();\r\n```","```\r\nInspectVolumeResponse volume \r\n  = dockerClient.inspectVolumeCmd(\"0220b87330af5\").exec();\r\n```","```\r\nCreateVolumeResponse unnamedVolume = dockerClient.createVolumeCmd().exec();\r\n```","```\r\nCreateVolumeResponse namedVolume \r\n  = dockerClient.createVolumeCmd().withName(\"myNamedVolume\").exec();\r\n```","```\r\ndockerClient.removeVolumeCmd(\"myNamedVolume\").exec();\r\n```","```\r\nList<Network> networks = dockerClient.listNetworksCmd().exec();\r\n```","```\r\nCreateNetworkResponse networkResponse \r\n  = dockerClient.createNetworkCmd()\r\n    .withName(\"baeldung\")\r\n    .withDriver(\"bridge\").exec();\r\n```","```\r\nCreateNetworkResponse networkResponse = dockerClient.createNetworkCmd()\r\n  .withName(\"baeldung\")\r\n  .withIpam(new Ipam()\r\n    .withConfig(new Config()\r\n    .withSubnet(\"172.36.0.0/16\")\r\n    .withIpRange(\"172.36.5.0/24\")))\r\n  .withDriver(\"bridge\").exec();\r\n```","```\r\n$ docker network create \\\r\n  --subnet=172.36.0.0/16 \\\r\n  --ip-range=172.36.5.0/24 \\\r\n  baeldung\r\n```","```\r\nNetwork network \r\n  = dockerClient.inspectNetworkCmd().withNetworkId(\"baeldung\").exec();\r\n```","```\r\ndockerClient.removeNetworkCmd(\"baeldung\").exec();\r\n```"]