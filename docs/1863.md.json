["```\r\npublic class Foo {\r\n    public int intValue;\r\n    public String stringValue;\r\n\r\n    // + standard equals and hashCode implementations\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingToSimpleObject_thenCorrect() {\r\n    String json = \"{\"intValue\":1,\"stringValue\":\"one\"}\";\r\n\r\n    Foo targetObject = new Gson().fromJson(json, Foo.class);\r\n\r\n    assertEquals(targetObject.intValue, 1);\r\n    assertEquals(targetObject.stringValue, \"one\");\r\n}\r\n```","```\r\npublic class GenericFoo<T> {\r\n    public T theValue;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingToGenericObject_thenCorrect() {\r\n    Type typeToken = new TypeToken<GenericFoo<Integer>>() { }.getType();\r\n    String json = \"{\"theValue\":1}\";\r\n\r\n    GenericFoo<Integer> targetObject = new Gson().fromJson(json, typeToken);\r\n\r\n    assertEquals(targetObject.theValue, new Integer(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonHasExtraValues_whenDeserializing_thenCorrect() {\r\n    String json = \r\n      \"{\"intValue\":1,\"stringValue\":\"one\",\"extraString\":\"two\",\"extraFloat\":2.2}\";\r\n    Foo targetObject = new Gson().fromJson(json, Foo.class);\r\n\r\n    assertEquals(targetObject.intValue, 1);\r\n    assertEquals(targetObject.stringValue, \"one\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonHasNonMatchingFields_whenDeserializingWithCustomDeserializer_thenCorrect() {\r\n    String json = \"{\"valueInt\":7,\"valueString\":\"seven\"}\";\r\n\r\n    GsonBuilder gsonBldr = new GsonBuilder();\r\n    gsonBldr.registerTypeAdapter(Foo.class, new FooDeserializerFromJsonWithDifferentFields());\r\n    Foo targetObject = gsonBldr.create().fromJson(json, Foo.class);\r\n\r\n    assertEquals(targetObject.intValue, 7);\r\n    assertEquals(targetObject.stringValue, \"seven\");\r\n}\r\n```","```\r\npublic class FooDeserializerFromJsonWithDifferentFields implements JsonDeserializer<Foo> {\r\n\r\n    @Override\r\n    public Foo deserialize\r\n      (JsonElement jElement, Type typeOfT, JsonDeserializationContext context) \r\n      throws JsonParseException {\r\n        JsonObject jObject = jElement.getAsJsonObject();\r\n        int intValue = jObject.get(\"valueInt\").getAsInt();\r\n        String stringValue = jObject.get(\"valueString\").getAsString();\r\n        return new Foo(intValue, stringValue);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonArrayOfFoos_whenDeserializingToArray_thenCorrect() {\r\n    String json = \"[{\"intValue\":1,\"stringValue\":\"one\"},\" +\r\n      \"{\"intValue\":2,\"stringValue\":\"two\"}]\";\r\n    Foo[] targetArray = new GsonBuilder().create().fromJson(json, Foo[].class);\r\n\r\n    assertThat(Lists.newArrayList(targetArray), hasItem(new Foo(1, \"one\")));\r\n    assertThat(Lists.newArrayList(targetArray), hasItem(new Foo(2, \"two\")));\r\n    assertThat(Lists.newArrayList(targetArray), not(hasItem(new Foo(1, \"two\"))));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonArrayOfFoos_whenDeserializingCollection_thenCorrect() {\r\n    String json = \r\n      \"[{\"intValue\":1,\"stringValue\":\"one\"},{\"intValue\":2,\"stringValue\":\"two\"}]\";\r\n    Type targetClassType = new TypeToken<ArrayList<Foo>>() { }.getType();\r\n\r\n    Collection<Foo> targetCollection = new Gson().fromJson(json, targetClassType);\r\n    assertThat(targetCollection, instanceOf(ArrayList.class));\r\n}\r\n```","```\r\npublic class FooWithInner {\r\n    public int intValue;\r\n    public String stringValue;\r\n    public InnerFoo innerFoo;\r\n\r\n    public class InnerFoo {\r\n        public String name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingToNestedObjects_thenCorrect() {\r\n    String json = \"{\\\"intValue\\\":1,\\\"stringValue\\\":\\\"one\\\",\\\"innerFoo\\\":{\\\"name\\\":\\\"inner\\\"}}\";\r\n\r\n    FooWithInner targetObject = new Gson().fromJson(json, FooWithInner.class);\r\n\r\n    assertEquals(targetObject.intValue, 1);\r\n    assertEquals(targetObject.stringValue, \"one\");\r\n    assertEquals(targetObject.innerFoo.name, \"inner\");\r\n}\r\n```","```\r\npublic class FooInstanceCreator implements InstanceCreator<Foo> {\r\n\r\n    @Override\r\n    public Foo createInstance(Type type) {\r\n        return new Foo(\"sample\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingInstanceCreator_thenCorrect() {\r\n    String json = \"{\\\"intValue\\\":1}\";\r\n\r\n    GsonBuilder gsonBldr = new GsonBuilder();\r\n    gsonBldr.registerTypeAdapter(Foo.class, new FooInstanceCreator());\r\n    Foo targetObject = gsonBldr.create().fromJson(json, Foo.class);\r\n\r\n    assertEquals(targetObject.intValue, 1);\r\n    assertEquals(targetObject.stringValue, \"sample\");\r\n}\r\n```","```\r\npublic Foo(String stringValue) {\r\n    this.stringValue = stringValue;\r\n}\r\n```"]