["```\r\n@Entity\r\npublic class Customer {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long id;\r\n    private String name;\r\n    private String email;\r\n\r\n    public Customer(String name, String email) {\r\n        this.name = name;\r\n        this.email = email;\r\n    }\r\n\r\n    // getters/setters\r\n\r\n}\r\n```","```\r\npublic interface CustomerRepository extends JpaRepository<Customer, Long> { \r\n\r\n   // method1\r\n   // method2\r\n}\r\n```","```\r\nList<Customer> findByNameAndEmail(String name, String email);\r\n```","```\r\ncustomer0_.email is null\r\n```","```\r\n@Before\r\npublic void before() {\r\n    entityManager.persist(new Customer(\"A\", \"[[email protected]](/web/20220628114545/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n    entityManager.persist(new Customer(\"D\", null));\r\n    entityManager.persist(new Customer(\"D\", \"[[email protected]](/web/20220628114545/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n}\r\n```","```\r\nList<Customer> customers = repository.findByNameAndEmail(\"D\", null);\r\n\r\nassertEquals(1, customers.size());\r\n\r\nCustomer actual = customers.get(0);\r\n\r\nassertEquals(null, actual.getEmail());\r\nassertEquals(\"D\", actual.getName());\r\n```","```\r\n List<Customer> findByName(String name);\r\n```","```\r\n@Query(\"SELECT c FROM Customer c WHERE (:name is null or c.name = :name) and (:email is null\"\r\n  + \" or c.email = :email)\")\r\nList<Customer> findCustomerByNameAndEmail(@Param(\"name\") String name, @Param(\"email\") String email);\r\n```","```\r\n:email is null or s.email = :email\r\n```","```\r\nList<Customer> customers = repository.findCustomerByNameAndEmail(\"D\", null);\r\n\r\nassertEquals(2, customers.size());\r\n```","```\r\nwhere (? is null or customer0_.name=?) and (? is null or customer0_.email=?)\r\n```"]