["```\r\nnet start mosquitto\r\n```","```\r\n# Site to Site properties\r\nnifi.remote.input.host=\r\nnifi.remote.input.secure=false\r\nnifi.remote.input.socket.port=1026\r\nnifi.remote.input.http.enabled=true\r\nnifi.remote.input.http.transaction.ttl=30 sec\r\n```","```\r\n<NIFI_HOME>/bin/run-nifi.bat\r\n```","```\r\nCOPY <NIFI_HOME>/lib/nifi-mqtt-nar-x.x.x.nar <MINIFI_HOME>/lib/nifi-mqtt-nar-x.x.x.nar\r\n```","```\r\n<MINIFI_HOME>/bin/run-minifi.bat\r\n```","```\r\n<INFLUXDB_HOME>/influxd.exe\r\n```","```\r\n<MINIFI_TOOLKIT_HOME>/bin/config.bat transform config.xml config.yml\r\n```","```\r\n Input Ports:\r\n  - id: 19442f9d-aead-3569-b94c-1ad397e8291c\r\n    name: From MiNiFi\r\n    comment: ''\r\n    max concurrent tasks: 1\r\n    use compression: false\r\n    Properties: # Deviates from spec and will later be removed when this is autonegotiated      \r\n      Port: 1026      \r\n      Host Name: localhost\r\n```","```\r\nclass Sensor implements Callable<Boolean> {\r\n    String city;\r\n    String station;\r\n    String pollutant;\r\n    String topic;\r\n    Sensor(String city, String station, String pollutant, String topic) {\r\n        this.city = city;\r\n        this.station = station;\r\n        this.pollutant = pollutant;\r\n        this.topic = topic;\r\n    }\r\n\r\n    @Override\r\n    public Boolean call() throws Exception {\r\n        MqttClient publisher = new MqttClient(\r\n          \"tcp://localhost:1883\", UUID.randomUUID().toString());\r\n        MqttConnectOptions options = new MqttConnectOptions();\r\n        options.setAutomaticReconnect(true);\r\n        options.setCleanSession(true);\r\n        options.setConnectionTimeout(10);\r\n        publisher.connect(options);\r\n        IntStream.range(0, 10).forEach(i -> {\r\n            String payload = String.format(\"%1$s,city=%2$s,station=%3$s value=%4$04.2f\",\r\n              pollutant,\r\n              city,\r\n              station,\r\n              ThreadLocalRandom.current().nextDouble(0, 100));\r\n            MqttMessage message = new MqttMessage(payload.getBytes());\r\n            message.setQos(0);\r\n            message.setRetained(true);\r\n            try {\r\n                publisher.publish(topic, message);\r\n                Thread.sleep(1000);\r\n            } catch (MqttException | InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nExecutorService executorService = Executors.newCachedThreadPool();\r\nList<Callable<Boolean>> sensors = Arrays.asList(\r\n  new Simulation.Sensor(\"london\", \"central\", \"ozone\", \"air-quality/ozone\"),\r\n  new Simulation.Sensor(\"london\", \"central\", \"co\", \"air-quality/co\"),\r\n  new Simulation.Sensor(\"london\", \"central\", \"so2\", \"air-quality/so2\"),\r\n  new Simulation.Sensor(\"london\", \"central\", \"no2\", \"air-quality/no2\"),\r\n  new Simulation.Sensor(\"london\", \"central\", \"aerosols\", \"air-quality/aerosols\"));\r\nList<Future<Boolean>> futures = executorService.invokeAll(sensors);\r\n```"]