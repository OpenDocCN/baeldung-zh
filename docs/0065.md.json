["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>4.6.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <artifactId>maven-surefire-plugin</artifactId>\r\n    <version>2.22.2</version>\r\n    <dependencies>\r\n        <dependency>\r\n             <groupId>org.junit.platform</groupId>\r\n             <artifactId>junit-platform-surefire-provider</artifactId>\r\n             <version>1.3.2</version>\r\n         </dependency>\r\n     </dependencies>\r\n</plugin> \r\n```","```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-junit-jupiter</artifactId>\r\n    <version>4.6.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\nclass UserServiceUnitTest {\r\n\r\n    UserService userService;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Mock UserRepository userRepository;\r\n```","```\r\n@BeforeEach\r\nvoid init(@Mock SettingRepository settingRepository) {\r\n    userService = new DefaultUserService(userRepository, settingRepository, mailClient);\r\n\r\n    Mockito.lenient().when(settingRepository.getUserMinAge()).thenReturn(10);\r\n\r\n    when(settingRepository.getUserNameMinLength()).thenReturn(4);\r\n\r\n    Mockito.lenient()\r\n        .when(userRepository.isUsernameAlreadyExists(any(String.class)))\r\n            .thenReturn(false);\r\n}\r\n```","```\r\n@Test\r\nvoid givenValidUser_whenSaveUser_thenSucceed(@Mock MailClient mailClient) {\r\n    // Given\r\n    user = new User(\"Jerry\", 12);\r\n    when(userRepository.insert(any(User.class))).then(new Answer<User>() {\r\n        int sequence = 1;\r\n\r\n        @Override\r\n        public User answer(InvocationOnMock invocation) throws Throwable {\r\n            User user = (User) invocation.getArgument(0);\r\n            user.setId(sequence++);\r\n            return user;\r\n        }\r\n    });\r\n\r\n    userService = new DefaultUserService(userRepository, settingRepository, mailClient);\r\n\r\n    // When\r\n    User insertedUser = userService.register(user);\r\n\r\n    // Then\r\n    verify(userRepository).insert(user);\r\n    assertNotNull(user.getId());\r\n    verify(mailClient).sendUserRegistrationMail(insertedUser);\r\n}\r\n```"]