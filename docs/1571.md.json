["```\r\npublic class Person {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public Person(String firstName, String secondName) {\r\n        super();\r\n        this.firstName = firstName;\r\n        this.lastName = secondName;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Person [firstName=\" + firstName + \", secondName=\" + lastName + \"]\";\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class PersonConfig {\r\n    @Bean\r\n    public Person personOne() {\r\n        return new Person(\"Harold\", \"Finch\");\r\n    }\r\n\r\n    @Bean\r\n    public Person personTwo() {\r\n        return new Person(\"John\", \"Reese\");\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class PersonOne extends Person {\r\n\r\n    public PersonOne() {\r\n        super(\"Harold\", \"Finch\");\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class PersonTwo extends Person {\r\n\r\n    public PersonTwo() {\r\n        super(\"John\", \"Reese\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(\"com.baeldung.multibeaninstantiation.solution2\")\r\npublic class PersonConfig {\r\n\r\n}\r\n```","```\r\npublic class Human implements InitializingBean {\r\n\r\n    private Person personOne;\r\n\r\n    private Person personTwo;\r\n\r\n    @Override\r\n    public void afterPropertiesSet() throws Exception {\r\n        Assert.notNull(personOne, \"Harold is alive!\");\r\n        Assert.notNull(personTwo, \"John is alive!\");\r\n    }\r\n\r\n    /* Setter injection */\r\n    @Autowired\r\n    public void setPersonOne(Person personOne) {\r\n        this.personOne = personOne;\r\n        this.personOne.setFirstName(\"Harold\");\r\n        this.personOne.setSecondName(\"Finch\");\r\n    }\r\n\r\n    @Autowired\r\n    public void setPersonTwo(Person personTwo) {\r\n        this.personTwo = personTwo;\r\n        this.personTwo.setFirstName(\"John\");\r\n        this.personTwo.setSecondName(\"Reese\");\r\n    }\r\n}\r\n```","```\r\n@Qualifier(value = \"personOne, personTwo\")\r\npublic class Person implements FactoryBean<Object> {\r\n    private String firstName;\r\n    private String secondName;\r\n\r\n    public Person() {\r\n        // initialization code (optional)\r\n    }\r\n\r\n    @Override\r\n    public Class<Person> getObjectType() {\r\n        return Person.class;\r\n    }\r\n\r\n    @Override\r\n    public Object getObject() throws Exception {\r\n        return new Person();\r\n    }\r\n\r\n    public boolean isSingleton() {\r\n        return true;\r\n    }\r\n\r\n    // code for getters & setters\r\n}\r\n```","```\r\npublic class PersonFactoryPostProcessor implements BeanFactoryPostProcessor {\r\n\r\n    @Override\r\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\r\n        Map<String, Object> map = beanFactory.getBeansWithAnnotation(Qualifier.class);\r\n        for (Map.Entry<String, Object> entry : map.entrySet()) {\r\n            createInstances(beanFactory, entry.getKey(), entry.getValue());\r\n        }\r\n    }\r\n\r\n    private void createInstances(ConfigurableListableBeanFactory beanFactory, String beanName, Object bean) {\r\n        Qualifier qualifier = bean.getClass().getAnnotation(Qualifier.class);\r\n        for (String name : extractNames(qualifier)) {\r\n            Object newBean = beanFactory.getBean(beanName);\r\n            beanFactory.registerSingleton(name.trim(), newBean);\r\n        }\r\n    }\r\n\r\n    private String[] extractNames(Qualifier qualifier) {\r\n        return qualifier.value().split(\",\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class PersonConfig {\r\n    @Bean\r\n    public PersonFactoryPostProcessor PersonFactoryPostProcessor() {\r\n        return new PersonFactoryPostProcessor();\r\n    }\r\n\r\n    @Bean\r\n    public Person person() {\r\n        return new Person();\r\n    }\r\n\r\n    @Bean\r\n    public Human human() {\r\n        return new Human();\r\n    }\r\n}\r\n```"]