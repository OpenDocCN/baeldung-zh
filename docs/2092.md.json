["```\r\ncockroach start --insecure --host=localhost;\r\n```","```\r\ncockroach start --insecure --store=node2 \\\r\n  --host=localhost --port=26258 --http-port=8081 \\\r\n  --join=localhost:26257;\r\n\r\ncockroach start --insecure --store=node3 \\\r\n  --host=localhost --port=26259 --http-port=8082 \\\r\n  --join=localhost:26257;\r\n```","```\r\ncockroach sql --insecure;\r\n```","```\r\nCREATE DATABASE testdb;\r\nCREATE USER user17 with password 'qwerty';\r\nGRANT ALL ON DATABASE testdb TO user17;\r\n```","```\r\nSHOW DATABASES;\r\n```","```\r\ncockroach sql --insecure --port=26258;\r\n```","```\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <version>42.1.4</version>\r\n</dependency>\r\n```","```\r\ncompile 'org.postgresql:postgresql:42.1.4'\r\n```","```\r\nConnection con = DriverManager.getConnection(\r\n  \"jdbc:postgresql://localhost:26257/testdb\", \"user17\", \"qwerty\"\r\n);\r\n```","```\r\nString TABLE_NAME = \"articles\";\r\nStringBuilder sb = new StringBuilder(\"CREATE TABLE IF NOT EXISTS \")\r\n  .append(TABLE_NAME)\r\n  .append(\"(id uuid PRIMARY KEY, \")\r\n  .append(\"title string,\")\r\n  .append(\"author string)\");\r\n\r\nString query = sb.toString();\r\nStatement stmt = connection.createStatement();\r\nstmt.execute(query);\r\n```","```\r\nPreparedStatement preparedStatement = con.prepareStatement(\"SHOW TABLES\");\r\nResultSet resultSet = preparedStatement.executeQuery();\r\nList tables = new ArrayList<>();\r\nwhile (resultSet.next()) {\r\n    tables.add(resultSet.getString(\"Table\"));\r\n}\r\n\r\nassertTrue(tables.stream().anyMatch(t -> t.equals(TABLE_NAME)));\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"ALTER TABLE \").append(TABLE_NAME)\r\n  .append(\" ADD \")\r\n  .append(columnName)\r\n  .append(\" \")\r\n  .append(columnType);\r\n\r\nString query = sb.toString();\r\nStatement stmt = connection.createStatement();\r\nstmt.execute(query);\r\n```","```\r\nString query = \"SHOW COLUMNS FROM \" + TABLE_NAME;\r\nPreparedStatement preparedStatement = con.prepareStatement(query);\r\nResultSet resultSet = preparedStatement.executeQuery();\r\nList<String> columns = new ArrayList<>();\r\nwhile (resultSet.next()) {\r\n    columns.add(resultSet.getString(\"Field\"));\r\n}\r\n\r\nassertTrue(columns.stream().anyMatch(c -> c.equals(columnName)));\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"DROP TABLE IF EXISTS \")\r\n  .append(TABLE_NAME);\r\n\r\nString query = sb.toString();\r\nStatement stmt = connection.createStatement();\r\nstmt.execute(query);\r\n```","```\r\npublic class Article {\r\n\r\n    private UUID id;\r\n    private String title;\r\n    private String author;\r\n\r\n    // standard constructor/getters/setters\r\n}\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"INSERT INTO \").append(TABLE_NAME)\r\n  .append(\"(id, title, author) \")\r\n  .append(\"VALUES (?,?,?)\");\r\n\r\nString query = sb.toString();\r\nPreparedStatement preparedStatement = connection.prepareStatement(query);\r\npreparedStatement.setString(1, article.getId().toString());\r\npreparedStatement.setString(2, article.getTitle());\r\npreparedStatement.setString(3, article.getAuthor());\r\npreparedStatement.execute();\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"SELECT * FROM \")\r\n  .append(TABLE_NAME);\r\n\r\nString query = sb.toString();\r\nPreparedStatement preparedStatement = connection.prepareStatement(query);\r\nResultSet rs = preparedStatement.executeQuery();\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"SELECT * FROM \").append(TABLE_NAME)\r\n  .append(\" WHERE title = ?\");\r\n\r\nString query = sb.toString();\r\nPreparedStatement preparedStatement = connection.prepareStatement(query);\r\npreparedStatement.setString(1, title);\r\nResultSet rs = preparedStatement.executeQuery();\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"DELETE FROM \").append(TABLE_NAME)\r\n  .append(\" WHERE title = ?\");\r\n\r\nString query = sb.toString();\r\nPreparedStatement preparedStatement = connection.prepareStatement(query);\r\npreparedStatement.setString(1, title);\r\npreparedStatement.execute();\r\n```","```\r\nStringBuilder sb = new StringBuilder(\"TRUNCATE TABLE \")\r\n  .append(TABLE_NAME);\r\n\r\nString query = sb.toString();\r\nStatement stmt = connection.createStatement();\r\nstmt.execute(query);\r\n```","```\r\ntry {\r\n    con.setAutoCommit(false);\r\n\r\n    UUID articleId = UUID.randomUUID();\r\n\r\n    Article article = new Article(\r\n      articleId, \"Guide to CockroachDB in Java\", \"baeldung\"\r\n    );\r\n    articleRepository.insertArticle(article);\r\n\r\n    article = new Article(\r\n      articleId, \"A Guide to MongoDB with Java\", \"baeldung\"\r\n    );\r\n    articleRepository.insertArticle(article); // Exception\r\n\r\n    con.commit();\r\n} catch (Exception e) {\r\n    con.rollback();\r\n} finally {\r\n    con.setAutoCommit(true);\r\n}\r\n```"]