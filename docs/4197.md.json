["```\r\npublic class ConsoleLogger implements System.Logger {\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"ConsoleLogger\";\r\n    }\r\n\r\n    @Override\r\n    public boolean isLoggable(Level level) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void log(Level level, ResourceBundle bundle, String msg, Throwable thrown) {\r\n        System.out.printf(\"ConsoleLogger [%s]: %s - %s%n\", level, msg, thrown);\r\n    }\r\n\r\n    @Override\r\n    public void log(Level level, ResourceBundle bundle, String format, Object... params) {\r\n        System.out.printf(\"ConsoleLogger [%s]: %s%n\", level, \r\n          MessageFormat.format(format, params));\r\n    }\r\n}\r\n```","```\r\npublic class CustomLoggerFinder extends System.LoggerFinder {\r\n\r\n    @Override\r\n    public System.Logger getLogger(String name, Module module) {\r\n        return new ConsoleLogger();\r\n    }\r\n}\r\n```","```\r\nmodule com.baeldung.logging {\r\n    provides java.lang.System.LoggerFinder\r\n      with com.baeldung.logging.CustomLoggerFinder;\r\n    exports com.baeldung.logging;\r\n}\r\n```","```\r\npublic class MainApp {\r\n\r\n    private static System.Logger LOGGER = System.getLogger(\"MainApp\");\r\n\r\n    public static void main(String[] args) {\r\n        LOGGER.log(Level.ERROR, \"error test\");\r\n        LOGGER.log(Level.INFO, \"info test\");\r\n    }\r\n}\r\n```","```\r\nmodule com.baeldung.logging.app {\r\n}\r\n```","```\r\n├── src\r\n│   ├── modules\r\n│   │   ├── com.baeldung.logging\r\n│   │   │   ├── com\r\n│   │   │   │   └── baeldung\r\n│   │   │   │       └── logging\r\n│   │   │   │           ├── ConsoleLogger.java\r\n│   │   │   │           └── CustomLoggerFinder.java\r\n│   │   │   └── module-info.java\r\n│   │   ├── com.baeldung.logging.app\r\n│   │   │   ├── com\r\n│   │   │   │   └── baeldung\r\n│   │   │   │       └── logging\r\n│   │   │   │           └── app\r\n│   │   │   │               └── MainApp.java\r\n│   │   │   └── module-info.java\r\n└──\r\n```","```\r\njavac --module-path mods -d mods/com.baeldung.logging \\\r\n  src/modules/com.baeldung.logging/module-info.java \\\r\n  src/modules/com.baeldung.logging/com/baeldung/logging/*.java\r\n\r\njavac --module-path mods -d mods/com.baeldung.logging.app \\\r\n  src/modules/com.baeldung.logging.app/module-info.java \\\r\n  src/modules/com.baeldung.logging.app/com/baeldung/logging/app/*.java\r\n```","```\r\njava --module-path mods \\\r\n  -m com.baeldung.logging.app/com.baeldung.logging.app.MainApp\r\n```","```\r\nConsoleLogger [ERROR]: error test\r\nConsoleLogger [INFO]: info test\r\n```","```\r\npublic class Slf4jLogger implements System.Logger {\r\n\r\n    private final String name;\r\n    private final Logger logger;\r\n\r\n    public Slf4jLogger(String name) {\r\n        this.name = name;\r\n        logger = LoggerFactory.getLogger(name);\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@Override\r\npublic boolean isLoggable(Level level) {\r\n    switch (level) {\r\n        case OFF:\r\n            return false;\r\n        case TRACE:\r\n            return logger.isTraceEnabled();\r\n        case DEBUG:\r\n            return logger.isDebugEnabled();\r\n        case INFO:\r\n            return logger.isInfoEnabled();\r\n        case WARNING:\r\n            return logger.isWarnEnabled();\r\n        case ERROR:\r\n            return logger.isErrorEnabled();\r\n        case ALL:\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void log(Level level, ResourceBundle bundle, String msg, Throwable thrown) {\r\n    if (!isLoggable(level)) {\r\n        return;\r\n    }\r\n\r\n    switch (level) {\r\n        case TRACE:\r\n            logger.trace(msg, thrown);\r\n            break;\r\n        case DEBUG:\r\n            logger.debug(msg, thrown);\r\n            break;\r\n        case INFO:\r\n            logger.info(msg, thrown);\r\n            break;\r\n        case WARNING:\r\n            logger.warn(msg, thrown);\r\n            break;\r\n        case ERROR:\r\n            logger.error(msg, thrown);\r\n            break;\r\n        case ALL:\r\n        default:\r\n            logger.info(msg, thrown);\r\n    }\r\n}\r\n\r\n@Override\r\npublic void log(Level level, ResourceBundle bundle, String format, Object... params) {\r\n    if (!isLoggable(level)) {\r\n        return;\r\n    }\r\n    String message = MessageFormat.format(format, params);\r\n\r\n    switch (level) {\r\n        case TRACE:\r\n            logger.trace(message);\r\n            break;\r\n        // ...\r\n        // same as the previous switch\r\n    }\r\n}\r\n```","```\r\npublic class Slf4jLoggerFinder extends System.LoggerFinder {\r\n    @Override\r\n    public System.Logger getLogger(String name, Module module) {\r\n        return new Slf4jLogger(name);\r\n    }\r\n}\r\n```","```\r\nmodule com.baeldung.logging.slf4j {\r\n    requires org.slf4j;\r\n    provides java.lang.System.LoggerFinder\r\n      with com.baeldung.logging.slf4j.Slf4jLoggerFinder;\r\n    exports com.baeldung.logging.slf4j;\r\n}\r\n```","```\r\n├── src\r\n│   ├── modules\r\n│   │   ├── com.baeldung.logging.slf4j\r\n│   │   │   ├── com\r\n│   │   │   │   └── baeldung\r\n│   │   │   │       └── logging\r\n│   │   │   │           └── slf4j\r\n│   │   │   │               ├── Slf4jLoggerFinder.java\r\n│   │   │   │               └── Slf4jLogger.java\r\n│   │   │   └── module-info.java\r\n└──\r\n```","```\r\n<configuration>\r\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <pattern>\r\n                %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} -- %msg%n\r\n            </pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <root>\r\n        <appender-ref ref=\"STDOUT\"/>\r\n    </root>\r\n\r\n</configuration>\r\n```","```\r\njava --module-path mods \\\r\n  -Dlogback.configurationFile=mods/logback.xml \\\r\n  -m com.baeldung.logging.app/com.baeldung.logging.app.MainApp\r\n```","```\r\n2018-08-25 14:02:40 [main] ERROR MainApp -- error test\r\n2018-08-25 14:02:40 [main] INFO  MainApp -- info test\r\n```"]