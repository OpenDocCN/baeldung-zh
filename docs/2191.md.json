["```\r\n<dependency>\r\n    <groupId>org.kie</groupId>\r\n    <artifactId>kie-ci</artifactId>\r\n    <version>7.1.0.Beta2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.drools</groupId>\r\n    <artifactId>drools-decisiontables</artifactId>\r\n    <version>7.1.0.Beta2</version>\r\n</dependency>\r\n```","```\r\npublic class Customer {\r\n    private CustomerType type;\r\n\r\n    private int years;\r\n\r\n    private int discount;\r\n\r\n    // Standard getters and setters\r\n\r\n    public enum CustomerType {\r\n        INDIVIDUAL,\r\n        BUSINESS;\r\n    }\r\n}\r\n```","```\r\nKieServices kieServices = KieServices.Factory.get();\r\n```","```\r\nResource dt \r\n  = ResourceFactory\r\n    .newClassPathResource(\"com/baeldung/drools/rules/Discount.xls\",\r\n      getClass());\r\n\r\nKieFileSystem kieFileSystem = kieServices.newKieFileSystem().write(dt); \r\n```","```\r\nKieBuilder kieBuilder = kieServices.newKieBuilder(kieFileSystem);\r\nkieBuilder.buildAll();\r\n```","```\r\nKieRepository kieRepository = kieServices.getRepository();\r\n```","```\r\nReleaseId krDefaultReleaseId = kieRepository.getDefaultReleaseId();\r\nKieContainer kieContainer \r\n  = kieServices.newKieContainer(krDefaultReleaseId);\r\n```","```\r\nKieSession kieSession = kieContainer.newKieSession();\r\n```","```\r\nCustomer customer = new Customer(CustomerType.BUSINESS, 2);\r\nkieSession.insert(customer);\r\n\r\nkieSession.fireAllRules();\r\n```","```\r\npublic class DiscountExcelIntegrationTest {\r\n\r\n    private KieSession kSession;\r\n\r\n    @Before\r\n    public void setup() {\r\n        Resource dt \r\n          = ResourceFactory\r\n            .newClassPathResource(\"com/baeldung/drools/rules/Discount.xls\",\r\n              getClass());\r\n        kSession = new DroolsBeanFactory().getKieSession(dt);\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      giveIndvidualLongStanding_whenFireRule_thenCorrectDiscount() \r\n        throws Exception {\r\n        Customer customer = new Customer(CustomerType.INDIVIDUAL, 5);\r\n        kSession.insert(customer);\r\n\r\n        kSession.fireAllRules();\r\n\r\n        assertEquals(customer.getDiscount(), 15);\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      giveIndvidualRecent_whenFireRule_thenCorrectDiscount() \r\n      throws Exception {\r\n        Customer customer = new Customer(CustomerType.INDIVIDUAL, 1);\r\n        kSession.insert(customer);\r\n\r\n        kSession.fireAllRules();\r\n\r\n        assertEquals(customer.getDiscount(), 5);\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      giveBusinessAny_whenFireRule_thenCorrectDiscount() \r\n        throws Exception {\r\n        Customer customer = new Customer(CustomerType.BUSINESS, 0);\r\n        kSession.insert(customer);\r\n\r\n        kSession.fireAllRules();\r\n\r\n        assertEquals(customer.getDiscount(), 20);\r\n    }\r\n}\r\n```","```\r\nResource dt \r\n  = ResourceFactory\r\n    .newClassPathResource(\"com/baeldung/drools/rules/Discount.xls\",\r\n      getClass());\r\n\r\nDecisionTableProviderImpl decisionTableProvider \r\n  = new DecisionTableProviderImpl();\r\n\r\nString drl = decisionTableProvider.loadFromResource(dt, null);\r\n```"]