["```\r\nPredicate isContainedInB = Arrays.asList(b)::contains; \r\n```","```\r\npublic static Integer[] intersectionSimple(Integer[] a, Integer[] b){\r\n    return Stream.of(a)\r\n      .filter(Arrays.asList(b)::contains)\r\n      .toArray(Integer[]::new);\r\n}\r\n```","```\r\npublic static Integer[] intersectionSet(Integer[] a, Integer[] b){\r\n    return Stream.of(a)\r\n      .filter(Arrays.asList(b)::contain)\r\n      .distinct()\r\n      .toArray(Integer[]::new);\r\n}\r\n```","```\r\npublic static Integer[] intersectionSet(Integer[] a, Integer[] b){\r\n    return Stream.of(a)\r\n      .filter(new LinkedList<>(Arrays.asList(b))::remove)\r\n      .toArray(Integer[]::new);\r\n} \r\n```"]