["```\r\npublic class User {\r\n    private Color favoriteColor;\r\n\r\n    // standard getters/constructors\r\n} \r\n```","```\r\n{\r\n  \"favoriteColor\": {\r\n    \"red\": 0.9411764740943909,\r\n    \"green\": 0.9725490212440491,\r\n    \"blue\": 1.0,\r\n    \"opacity\": 1.0,\r\n    \"opaque\": true,\r\n    \"hue\": 208.00000000000003,\r\n    \"saturation\": 0.05882352590560913,\r\n    \"brightness\": 1.0\r\n  }\r\n} \r\n```","```\r\n@JsonComponent\r\npublic class UserJsonSerializer extends JsonSerializer<User> {\r\n\r\n    @Override\r\n    public void serialize(User user, JsonGenerator jsonGenerator, \r\n      SerializerProvider serializerProvider) throws IOException, \r\n      JsonProcessingException {\r\n\r\n        jsonGenerator.writeStartObject();\r\n        jsonGenerator.writeStringField(\r\n          \"favoriteColor\", \r\n          getColorAsWebColor(user.getFavoriteColor()));\r\n        jsonGenerator.writeEndObject();\r\n    }\r\n\r\n    private static String getColorAsWebColor(Color color) {\r\n        int r = (int) Math.round(color.getRed() * 255.0);\r\n        int g = (int) Math.round(color.getGreen() * 255.0);\r\n        int b = (int) Math.round(color.getBlue() * 255.0);\r\n        return String.format(\"#%02x%02x%02x\", r, g, b);\r\n    }\r\n} \r\n```","```\r\n{\"favoriteColor\":\"#f0f8ff\"} \r\n```","```\r\n@JsonTest\r\n@RunWith(SpringRunner.class)\r\npublic class UserJsonSerializerTest {\r\n\r\n    @Autowired\r\n    private ObjectMapper objectMapper;\r\n\r\n    @Test\r\n    public void testSerialization() throws JsonProcessingException {\r\n        User user = new User(Color.ALICEBLUE);\r\n        String json = objectMapper.writeValueAsString(user);\r\n\r\n        assertEquals(\"{\\\"favoriteColor\\\":\\\"#f0f8ff\\\"}\", json);\r\n    }\r\n} \r\n```","```\r\n@JsonComponent\r\npublic class UserJsonDeserializer extends JsonDeserializer<User> {\r\n\r\n    @Override\r\n    public User deserialize(JsonParser jsonParser, \r\n      DeserializationContext deserializationContext) throws IOException, \r\n      JsonProcessingException {\r\n\r\n        TreeNode treeNode = jsonParser.getCodec().readTree(jsonParser);\r\n        TextNode favoriteColor\r\n          = (TextNode) treeNode.get(\"favoriteColor\");\r\n        return new User(Color.web(favoriteColor.asText()));\r\n    }\r\n} \r\n```","```\r\n@JsonTest\r\n@RunWith(SpringRunner.class)\r\npublic class UserJsonDeserializerTest {\r\n\r\n    @Autowired\r\n    private ObjectMapper objectMapper;\r\n\r\n    @Test\r\n    public void testDeserialize() throws IOException {\r\n        String json = \"{\\\"favoriteColor\\\":\\\"#f0f8ff\\\"}\"\r\n        User user = objectMapper.readValue(json, User.class);\r\n\r\n        assertEquals(Color.ALICEBLUE, user.getFavoriteColor());\r\n    }\r\n} \r\n```","```\r\n@JsonComponent\r\npublic class UserCombinedSerializer {\r\n\r\n    public static class UserJsonSerializer \r\n      extends JsonSerializer<User> {\r\n\r\n        @Override\r\n        public void serialize(User user, JsonGenerator jsonGenerator, \r\n          SerializerProvider serializerProvider) throws IOException, \r\n          JsonProcessingException {\r\n\r\n            jsonGenerator.writeStartObject();\r\n            jsonGenerator.writeStringField(\r\n              \"favoriteColor\", getColorAsWebColor(user.getFavoriteColor()));\r\n            jsonGenerator.writeEndObject();\r\n        }\r\n\r\n        private static String getColorAsWebColor(Color color) {\r\n            int r = (int) Math.round(color.getRed() * 255.0);\r\n            int g = (int) Math.round(color.getGreen() * 255.0);\r\n            int b = (int) Math.round(color.getBlue() * 255.0);\r\n            return String.format(\"#%02x%02x%02x\", r, g, b);\r\n        }\r\n    }\r\n\r\n    public static class UserJsonDeserializer \r\n      extends JsonDeserializer<User> {\r\n\r\n        @Override\r\n        public User deserialize(JsonParser jsonParser, \r\n          DeserializationContext deserializationContext)\r\n          throws IOException, JsonProcessingException {\r\n\r\n            TreeNode treeNode = jsonParser.getCodec().readTree(jsonParser);\r\n            TextNode favoriteColor = (TextNode) treeNode.get(\r\n              \"favoriteColor\");\r\n            return new User(Color.web(favoriteColor.asText()));\r\n        }\r\n    }\r\n} \r\n```"]