["```\r\n()\r\n[()]\r\n{[()]}\r\n([{{[(())]}}])\r\n```","```\r\nabc[](){}\r\n{{[]()}}}}\r\n{[(])}\r\n```","```\r\npublic boolean isBalanced(String str)\r\n```","```\r\nif (null == str || ((str.length() % 2) != 0)) {\r\n    return false;\r\n} else {\r\n    char[] ch = str.toCharArray();\r\n    for (char c : ch) {\r\n        if (!(c == '{' || c == '[' || c == '(' || c == '}' || c == ']' || c == ')')) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```","```\r\nwhile (str.contains(\"()\") || str.contains(\"[]\") || str.contains(\"{}\")) {\r\n    str = str.replaceAll(\"\\\\(\\\\)\", \"\")\r\n      .replaceAll(\"\\\\[\\\\]\", \"\")\r\n      .replaceAll(\"\\\\{\\\\}\", \"\");\r\n}\r\nreturn (str.length() == 0);\r\n```","```\r\nDeque<Character> deque = new LinkedList<>();\r\n```","```\r\nif (ch == '{' || ch == '[' || ch == '(') { \r\n    deque.addFirst(ch); \r\n}\r\n```","```\r\nif (!deque.isEmpty() \r\n    && ((deque.peekFirst() == '{' && ch == '}') \r\n    || (deque.peekFirst() == '[' && ch == ']') \r\n    || (deque.peekFirst() == '(' && ch == ')'))) { \r\n    deque.removeFirst(); \r\n} else { \r\n    return false; \r\n}\r\n```","```\r\nDeque<Character> deque = new LinkedList<>();\r\nfor (char ch: str.toCharArray()) {\r\n    if (ch == '{' || ch == '[' || ch == '(') {\r\n        deque.addFirst(ch);\r\n    } else {\r\n        if (!deque.isEmpty()\r\n            && ((deque.peekFirst() == '{' && ch == '}')\r\n            || (deque.peekFirst() == '[' && ch == ']')\r\n            || (deque.peekFirst() == '(' && ch == ')'))) {\r\n            deque.removeFirst();\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nreturn deque.isEmpty();\r\n```"]