["```\r\npublic void createReservation(@NotNull @Future LocalDate begin,\r\n  @Min(1) int duration, @NotNull Customer customer) {\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class Customer {\r\n\r\n    public Customer(@Size(min = 5, max = 200) @NotNull String firstName, \r\n      @Size(min = 5, max = 200) @NotNull String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    // properties, getters, and setters\r\n}\r\n```","```\r\n@ConsistentDateParameters\r\npublic void createReservation(LocalDate begin, \r\n  LocalDate end, Customer customer) {\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Constraint(validatedBy = ConsistentDateParameterValidator.class)\r\n@Target({ METHOD, CONSTRUCTOR })\r\n@Retention(RUNTIME)\r\n@Documented\r\npublic @interface ConsistentDateParameters {\r\n\r\n    String message() default\r\n      \"End date must be after begin date and both must be in the future\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\n@SupportedValidationTarget(ValidationTarget.PARAMETERS)\r\npublic class ConsistentDateParameterValidator \r\n  implements ConstraintValidator<ConsistentDateParameters, Object[]> {\r\n\r\n    @Override\r\n    public boolean isValid(\r\n      Object[] value, \r\n      ConstraintValidatorContext context) {\r\n\r\n        if (value[0] == null || value[1] == null) {\r\n            return true;\r\n        }\r\n\r\n        if (!(value[0] instanceof LocalDate) \r\n          || !(value[1] instanceof LocalDate)) {\r\n            throw new IllegalArgumentException(\r\n              \"Illegal method signature, expected two parameters of type LocalDate.\");\r\n        }\r\n\r\n        return ((LocalDate) value[0]).isAfter(LocalDate.now()) \r\n          && ((LocalDate) value[0]).isBefore((LocalDate) value[1]);\r\n    }\r\n}\r\n```","```\r\npublic class ReservationManagement {\r\n\r\n    @NotNull\r\n    @Size(min = 1)\r\n    public List<@NotNull Customer> getAllCustomers() {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\npublic class ReservationManagement {\r\n\r\n    @ValidReservation\r\n    public Reservation getReservationsById(int id) {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Constraint(validatedBy = ValidReservationValidator.class)\r\n@Target({ METHOD, CONSTRUCTOR })\r\n@Retention(RUNTIME)\r\n@Documented\r\npublic @interface ValidReservation {\r\n    String message() default \"End date must be after begin date \"\r\n      + \"and both must be in the future, room number must be bigger than 0\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class ValidReservationValidator\r\n  implements ConstraintValidator<ValidReservation, Reservation> {\r\n\r\n    @Override\r\n    public boolean isValid(\r\n      Reservation reservation, ConstraintValidatorContext context) {\r\n\r\n        if (reservation == null) {\r\n            return true;\r\n        }\r\n\r\n        if (!(reservation instanceof Reservation)) {\r\n            throw new IllegalArgumentException(\"Illegal method signature, \"\r\n            + \"expected parameter of type Reservation.\");\r\n        }\r\n\r\n        if (reservation.getBegin() == null\r\n          || reservation.getEnd() == null\r\n          || reservation.getCustomer() == null) {\r\n            return false;\r\n        }\r\n\r\n        return (reservation.getBegin().isAfter(LocalDate.now())\r\n          && reservation.getBegin().isBefore(reservation.getEnd())\r\n          && reservation.getRoom() > 0);\r\n    }\r\n}\r\n```","```\r\npublic class Reservation {\r\n\r\n    @ValidReservation\r\n    public Reservation(\r\n      LocalDate begin, \r\n      LocalDate end, \r\n      Customer customer, \r\n      int room) {\r\n        this.begin = begin;\r\n        this.end = end;\r\n        this.customer = customer;\r\n        this.room = room;\r\n    }\r\n\r\n    // properties, getters, and setters\r\n}\r\n```","```\r\npublic class Customer {\r\n\r\n    @Size(min = 5, max = 200)\r\n    private String firstName;\r\n\r\n    @Size(min = 5, max = 200)\r\n    private String lastName;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\npublic class Reservation {\r\n\r\n    @Valid\r\n    private Customer customer;\r\n\r\n    @Positive\r\n    private int room;\r\n\r\n    // further properties, constructor, getters and setters\r\n}\r\n```","```\r\npublic void createNewCustomer(@Valid Reservation reservation) {\r\n    // ...\r\n}\r\n```","```\r\n@Valid\r\npublic Reservation getReservationById(int id) {\r\n    return null;\r\n}\r\n```","```\r\n@Validated\r\npublic class ReservationManagement {\r\n\r\n    public void createReservation(@NotNull @Future LocalDate begin, \r\n      @Min(1) int duration, @NotNull Customer customer){\r\n\r\n        // ...\r\n    }\r\n\r\n    @NotNull\r\n    @Size(min = 1)\r\n    public List<@NotNull Customer> getAllCustomers(){\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan({ \"org.baeldung.javaxval.methodvalidation.model\" })\r\npublic class MethodValidationConfig {\r\n\r\n    @Bean\r\n    public MethodValidationPostProcessor methodValidationPostProcessor() {\r\n        return new MethodValidationPostProcessor();\r\n    }\r\n}\r\n```","```\r\nValidatorFactory factory = Validation.buildDefaultValidatorFactory();\r\nExecutableValidator executableValidator = factory.getValidator().forExecutables();\r\n```","```\r\nReservationManagement object = new ReservationManagement();\r\nMethod method = ReservationManagement.class\r\n  .getMethod(\"createReservation\", LocalDate.class, int.class, Customer.class);\r\nObject[] parameterValues = { LocalDate.now(), 0, null };\r\nSet<ConstraintViolation<ReservationManagement>> violations \r\n  = executableValidator.validateParameters(object, method, parameterValues);\r\n```"]