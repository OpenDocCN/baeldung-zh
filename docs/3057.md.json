["```\r\nprivate static void infoOfCurrentProcess() {\r\n    ProcessHandle processHandle = ProcessHandle.current();\r\n    ProcessHandle.Info processInfo = processHandle.info();\r\n\r\n    log.info(\"PID: \" + processHandle.pid());\r\n    log.info(\"Arguments: \" + processInfo.arguments());\r\n    log.info(\"Command: \" + processInfo.command());\r\n    log.info(\"Instant: \" + processInfo.startInstant());\r\n    log.info(\"Total CPU duration: \" + processInfo.totalCpuDuration());\r\n    log.info(\"User: \" + processInfo.user());\r\n}\r\n```","```\r\n16:31:24.784 [main] INFO  c.b.j.process.ProcessAPIEnhancements - PID: 22640\r\n16:31:24.790 [main] INFO  c.b.j.process.ProcessAPIEnhancements - Arguments: Optional[[Ljava.lang.String;@2a17b7b6]\r\n16:31:24.791 [main] INFO  c.b.j.process.ProcessAPIEnhancements - Command: Optional[/Library/Java/JavaVirtualMachines/jdk-13.0.1.jdk/Contents/Home/bin/java]\r\n16:31:24.795 [main] INFO  c.b.j.process.ProcessAPIEnhancements - Instant: Optional[2021-08-31T14:31:23.870Z]\r\n16:31:24.795 [main] INFO  c.b.j.process.ProcessAPIEnhancements - Total CPU duration: Optional[PT0.818115S]\r\n16:31:24.796 [main] INFO  c.b.j.process.ProcessAPIEnhancements - User: Optional[username]\r\n```","```\r\nString javaCmd = ProcessUtils.getJavaCmd().getAbsolutePath();\r\nProcessBuilder processBuilder = new ProcessBuilder(javaCmd, \"-version\");\r\nProcess process = processBuilder.inheritIO().start();\r\nProcessHandle processHandle = process.toHandle();\r\n```","```\r\nprivate static void infoOfLiveProcesses() {\r\n    Stream<ProcessHandle> liveProcesses = ProcessHandle.allProcesses();\r\n    liveProcesses.filter(ProcessHandle::isAlive)\r\n        .forEach(ph -> {\r\n            log.info(\"PID: \" + ph.pid());\r\n            log.info(\"Instance: \" + ph.info().startInstant());\r\n            log.info(\"User: \" + ph.info().user());\r\n        });\r\n}\r\n```","```\r\nprivate static void infoOfChildProcess() throws IOException {\r\n    int childProcessCount = 5;\r\n    for (int i = 0; i < childProcessCount; i++) {\r\n        String javaCmd = ProcessUtils.getJavaCmd()\r\n          .getAbsolutePath();\r\n        ProcessBuilder processBuilder\r\n          = new ProcessBuilder(javaCmd, \"-version\");\r\n        processBuilder.inheritIO().start();\r\n    }\r\n\r\n    Stream<ProcessHandle> children = ProcessHandle.current()\r\n      .children();\r\n    children.filter(ProcessHandle::isAlive)\r\n      .forEach(ph -> log.info(\"PID: {}, Cmd: {}\", ph.pid(), ph.info()\r\n        .command()));\r\n    Stream<ProcessHandle> descendants = ProcessHandle.current()\r\n      .descendants();\r\n    descendants.filter(ProcessHandle::isAlive)\r\n      .forEach(ph -> log.info(\"PID: {}, Cmd: {}\", ph.pid(), ph.info()\r\n        .command()));\r\n}\r\n```","```\r\nprivate static void infoOfExitCallback() throws IOException, InterruptedException, ExecutionException {\r\n    String javaCmd = ProcessUtils.getJavaCmd()\r\n      .getAbsolutePath();\r\n    ProcessBuilder processBuilder\r\n      = new ProcessBuilder(javaCmd, \"-version\");\r\n    Process process = processBuilder.inheritIO()\r\n      .start();\r\n    ProcessHandle processHandle = process.toHandle();\r\n\r\n    log.info(\"PID: {} has started\", processHandle.pid());\r\n    CompletableFuture onProcessExit = processHandle.onExit();\r\n    onProcessExit.get();\r\n    log.info(\"Alive: \" + processHandle.isAlive());\r\n    onProcessExit.thenAccept(ph -> {\r\n        log.info(\"PID: {} has stopped\", ph.pid());\r\n    });\r\n}\r\n```"]