["```\r\n@Service\r\npublic class EmployeeService {\r\n\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    public Employee getEmployee(String id) {\r\n\tResponseEntity resp = \r\n          restTemplate.getForEntity(\"http://localhost:8080/employee/\" + id, Employee.class);\r\n\r\n\treturn resp.getStatusCode() == HttpStatus.OK ? resp.getBody() : null;\r\n    }\r\n} \r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class EmployeeServiceTest {\r\n\r\n    @Mock\r\n    private RestTemplate restTemplate;\r\n\r\n    @InjectMocks\r\n    private EmployeeService empService = new EmployeeService();\r\n\r\n    @Test\r\n    public void givenMockingIsDoneByMockito_whenGetIsCalled_shouldReturnMockedObject() {\r\n        Employee emp = new Employee(“E001”, \"Eric Simmons\");\r\n        Mockito\r\n          .when(restTemplate.getForEntity(\r\n            “http://localhost:8080/employee/E001”, Employee.class))\r\n          .thenReturn(new ResponseEntity(emp, HttpStatus.OK));\r\n\r\n        Employee employee = empService.getEmployee(id);\r\n        Assertions.assertEquals(emp, employee);\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest(classes = SpringTestConfig.class)\r\npublic class EmployeeServiceMockRestServiceServerUnitTest {\r\n\r\n    @Autowired\r\n    private EmployeeService empService;\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    private MockRestServiceServer mockServer;\r\n    private ObjectMapper mapper = new ObjectMapper();\r\n\r\n    @BeforeEach\r\n    public void init() {\r\n        mockServer = MockRestServiceServer.createServer(restTemplate);\r\n    }\r\n\r\n    @Test                                                                                          \r\n    public void givenMockingIsDoneByMockRestServiceServer_whenGetIsCalled_thenReturnsMockedObject()() {   \r\n        Employee emp = new Employee(\"E001\", \"Eric Simmons\");\r\n        mockServer.expect(ExpectedCount.once(), \r\n          requestTo(new URI(\"http://localhost:8080/employee/E001\")))\r\n          .andExpect(method(HttpMethod.GET))\r\n          .andRespond(withStatus(HttpStatus.OK)\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .body(mapper.writeValueAsString(emp))\r\n        );                                   \r\n\r\n        Employee employee = empService.getEmployee(id);\r\n        mockServer.verify();\r\n        Assertions.assertEquals(emp, employee);                                                        \r\n    }\r\n} \r\n```","```\r\nimport static org.springframework.test.web.client.match.MockRestRequestMatchers.*;      \r\nimport static org.springframework.test.web.client.response.MockRestResponseCreators.*;\r\n```","```\r\n@Bean\r\npublic RestTemplate restTemplate() {\r\n    return new RestTemplate();\r\n}\r\n```"]