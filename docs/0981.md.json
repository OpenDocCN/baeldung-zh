["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-batch</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.5.1</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBootBatchProcessingApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootBatchProcessingApplication.class, args);\r\n    }\r\n}\r\n```","```\r\nfile.input=coffee-list.csv\r\n```","```\r\nBlue Mountain,Jamaica,Fruity\r\nLavazza,Colombia,Strong\r\nFolgers,America,Smokey\r\n```","```\r\nDROP TABLE coffee IF EXISTS;\r\n\r\nCREATE TABLE coffee  (\r\n    coffee_id BIGINT IDENTITY NOT NULL PRIMARY KEY,\r\n    brand VARCHAR(20),\r\n    origin VARCHAR(20),\r\n    characteristics VARCHAR(30)\r\n);\r\n```","```\r\npublic class Coffee {\r\n\r\n    private String brand;\r\n    private String origin;\r\n    private String characteristics;\r\n\r\n    public Coffee(String brand, String origin, String characteristics) {\r\n        this.brand = brand;\r\n        this.origin = origin;\r\n        this.characteristics = characteristics;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Configuration\r\n@EnableBatchProcessing\r\npublic class BatchConfiguration {\r\n\r\n    @Autowired\r\n    public JobBuilderFactory jobBuilderFactory;\r\n\r\n    @Autowired\r\n    public StepBuilderFactory stepBuilderFactory;\r\n\r\n    @Value(\"${file.input}\")\r\n    private String fileInput;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Bean\r\npublic FlatFileItemReader reader() {\r\n    return new FlatFileItemReaderBuilder().name(\"coffeeItemReader\")\r\n      .resource(new ClassPathResource(fileInput))\r\n      .delimited()\r\n      .names(new String[] { \"brand\", \"origin\", \"characteristics\" })\r\n      .fieldSetMapper(new BeanWrapperFieldSetMapper() {{\r\n          setTargetType(Coffee.class);\r\n      }})\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic JdbcBatchItemWriter writer(DataSource dataSource) {\r\n    return new JdbcBatchItemWriterBuilder()\r\n      .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())\r\n      .sql(\"INSERT INTO coffee (brand, origin, characteristics) VALUES (:brand, :origin, :characteristics)\")\r\n      .dataSource(dataSource)\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic Job importUserJob(JobCompletionNotificationListener listener, Step step1) {\r\n    return jobBuilderFactory.get(\"importUserJob\")\r\n      .incrementer(new RunIdIncrementer())\r\n      .listener(listener)\r\n      .flow(step1)\r\n      .end()\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic Step step1(JdbcBatchItemWriter writer) {\r\n    return stepBuilderFactory.get(\"step1\")\r\n      .<Coffee, Coffee> chunk(10)\r\n      .reader(reader())\r\n      .processor(processor())\r\n      .writer(writer)\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic CoffeeItemProcessor processor() {\r\n    return new CoffeeItemProcessor();\r\n}\r\n```","```\r\npublic class CoffeeItemProcessor implements ItemProcessor<Coffee, Coffee> {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(CoffeeItemProcessor.class);\r\n\r\n    @Override\r\n    public Coffee process(final Coffee coffee) throws Exception {\r\n        String brand = coffee.getBrand().toUpperCase();\r\n        String origin = coffee.getOrigin().toUpperCase();\r\n        String chracteristics = coffee.getCharacteristics().toUpperCase();\r\n\r\n        Coffee transformedCoffee = new Coffee(brand, origin, chracteristics);\r\n        LOGGER.info(\"Converting ( {} ) into ( {} )\", coffee, transformedCoffee);\r\n\r\n        return transformedCoffee;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void afterJob(JobExecution jobExecution) {\r\n    if (jobExecution.getStatus() == BatchStatus.COMPLETED) {\r\n        LOGGER.info(\"!!! JOB FINISHED! Time to verify the results\");\r\n\r\n        String query = \"SELECT brand, origin, characteristics FROM coffee\";\r\n        jdbcTemplate.query(query, (rs, row) -> new Coffee(rs.getString(1), rs.getString(2), rs.getString(3)))\r\n          .forEach(coffee -> LOGGER.info(\"Found < {} > in the database.\", coffee));\r\n    }\r\n}\r\n```","```\r\n...\r\n17:41:16.336 [main] INFO  c.b.b.JobCompletionNotificationListener -\r\n  !!! JOB FINISHED! Time to verify the results\r\n17:41:16.336 [main] INFO  c.b.b.JobCompletionNotificationListener -\r\n  Found < Coffee [brand=BLUE MOUNTAIN, origin=JAMAICA, characteristics=FRUITY] > in the database.\r\n17:41:16.337 [main] INFO  c.b.b.JobCompletionNotificationListener -\r\n  Found < Coffee [brand=LAVAZZA, origin=COLOMBIA, characteristics=STRONG] > in the database.\r\n17:41:16.337 [main] INFO  c.b.b.JobCompletionNotificationListener -\r\n  Found < Coffee [brand=FOLGERS, origin=AMERICA, characteristics=SMOKEY] > in the database.\r\n... \r\n```"]