["```\r\nCREATE TABLE EMPLOYEE\r\n(id BIGINT,\r\n name VARCHAR(10));\r\n```","```\r\nCREATE TABLE SCHEDULE_DAYS\r\n(id IDENTITY,\r\n employeeId BIGINT,\r\n dayOfWeek  VARCHAR(10));\r\n```","```\r\n@Entity\r\npublic class Employee {\r\n    @Id\r\n    private Long id;\r\n    private String name;\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"SCHEDULE_DAYS\")\r\npublic class ScheduledDay {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n    private Long employeeId;\r\n    private String dayOfWeek;\r\n}\r\n```","```\r\n@SqlResultSetMapping(\r\n  name=\"FridayEmployeeResult\",\r\n  columns={@ColumnResult(name=\"employeeId\")})\r\n```","```\r\n@NamedNativeQuery(\r\n  name = \"FridayEmployees\",\r\n  query = \"SELECT employeeId FROM schedule_days WHERE dayOfWeek = 'FRIDAY'\",\r\n  resultSetMapping = \"FridayEmployeeResult\") \r\n```","```\r\n@BeforeAll\r\npublic static void setup() {\r\n    emFactory = Persistence.createEntityManagerFactory(\"java-jpa-scheduled-day\");\r\n    em = emFactory.createEntityManager();\r\n}\r\n```","```\r\n@Test\r\npublic void whenNamedQuery_thenColumnResult() {\r\n    List<Long> employeeIds = em.createNamedQuery(\"FridayEmployees\").getResultList();\r\n    assertEquals(2, employeeIds.size());\r\n}\r\n```","```\r\npublic ScheduledDay (\r\n  Long id, Long employeeId, \r\n  Integer hourIn, Integer hourOut, \r\n  String dayofWeek) {\r\n    this.id = id;\r\n    this.employeeId = employeeId;\r\n    this.dayOfWeek = dayofWeek;\r\n}\r\n```","```\r\n@SqlResultSetMapping(\r\n    name=\"ScheduleResult\",\r\n    classes={\r\n      @ConstructorResult(\r\n        targetClass=com.baeldung.sqlresultsetmapping.ScheduledDay.class,\r\n        columns={\r\n          @ColumnResult(name=\"id\", type=Long.class),\r\n          @ColumnResult(name=\"employeeId\", type=Long.class),\r\n          @ColumnResult(name=\"dayOfWeek\")})})\r\n```","```\r\n@NamedNativeQuery(name = \"Schedules\",\r\n  query = \"SELECT * FROM schedule_days WHERE employeeId = 8\",\r\n  resultSetMapping = \"ScheduleResult\")\r\n```","```\r\n@Test\r\npublic void whenNamedQuery_thenConstructorResult() {\r\n  List<ScheduledDay> scheduleDays\r\n    = Collections.checkedList(\r\n      em.createNamedQuery(\"Schedules\", ScheduledDay.class).getResultList(), ScheduledDay.class);\r\n    assertEquals(3, scheduleDays.size());\r\n    assertTrue(scheduleDays.stream().allMatch(c -> c.getEmployeeId().longValue() == 3));\r\n}\r\n```","```\r\n@SqlResultSetMapping(\r\n  name=\"EmployeeResult\",\r\n  entities={\r\n    @EntityResult(\r\n      entityClass = com.baeldung.sqlresultsetmapping.Employee.class,\r\n        fields={\r\n          @FieldResult(name=\"id\",column=\"employeeNumber\"),\r\n          @FieldResult(name=\"name\", column=\"name\")})})\r\n```","```\r\n@NamedNativeQuery(\r\n  name=\"Employees\",\r\n  query=\"SELECT id as employeeNumber, name FROM EMPLOYEE\",\r\n  resultSetMapping = \"EmployeeResult\")\r\n```","```\r\n@SqlResultSetMapping(\r\n  name = \"EmployeeScheduleResults\",\r\n  entities = {\r\n    @EntityResult(entityClass = com.baeldung.sqlresultsetmapping.Employee.class),\r\n    @EntityResult(entityClass = com.baeldung.sqlresultsetmapping.ScheduledDay.class)\r\n```","```\r\n@Test\r\npublic void whenNamedQuery_thenSingleEntityResult() {\r\n    List<Employee> employees = Collections.checkedList(\r\n      em.createNamedQuery(\"Employees\").getResultList(), Employee.class);\r\n    assertEquals(3, employees.size());\r\n    assertTrue(employees.stream().allMatch(c -> c.getClass() == Employee.class));\r\n}\r\n```","```\r\n@Test\r\npublic void whenNamedQuery_thenMultipleEntityResult() {\r\n    Query query = em.createNativeQuery(\r\n      \"SELECT e.id, e.name, d.id, d.employeeId, d.dayOfWeek \"\r\n        + \" FROM employee e, schedule_days d \"\r\n        + \" WHERE e.id = d.employeeId\", \"EmployeeScheduleResults\");\r\n\r\n    List<Object[]> results = query.getResultList();\r\n    assertEquals(4, results.size());\r\n    assertTrue(results.get(0).length == 2);\r\n\r\n    Employee emp = (Employee) results.get(1)[0];\r\n    ScheduledDay day = (ScheduledDay) results.get(1)[1];\r\n\r\n    assertTrue(day.getEmployeeId() == emp.getId());\r\n}\r\n```"]