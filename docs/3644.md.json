["```\r\npublic interface Animal {\r\n    String getName();\r\n}\r\n```","```\r\npublic class Mammal implements Animal {\r\n    @Override\r\n    public String getName() {\r\n        return \"Mammal\";\r\n    }\r\n}\r\n```","```\r\npublic class Amphibian implements Animal {\r\n    @Override\r\n    public String getName() {\r\n        return \"Amphibian\";\r\n    }\r\n}\r\n```","```\r\npublic class Frog extends Amphibian {\r\n    @Override\r\n    public String getName() {\r\n        return super.getName() + \": Frog\";\r\n    }\r\n}\r\n```","```\r\nFrog frog = new Frog();\r\nMammal mammal = (Mammal) frog;\r\n```","```\r\nAnimal animal = new Frog();\r\nMammal mammal = (Mammal) animal;\r\n```","```\r\nException in thread \"main\" java.lang.ClassCastException: class Frog cannot be cast to class Mammal (Frog and Mammal are in unnamed module of loader 'app') \r\nat Main.main(Main.java:9)\r\n```","```\r\nAnimal animal = new Frog();\r\nSerializable serial = (Serializable) animal;\r\n```","```\r\nException in thread \"main\" java.lang.ClassCastException: class Frog cannot be cast to class java.io.Serializable (Frog is in unnamed module of loader 'app'; java.io.Serializable is in module java.base of loader 'bootstrap') \r\nat Main.main(Main.java:11)\r\n```","```\r\nObject primitives = new int[1];\r\nInteger[] integers = (Integer[]) primitives;\r\n```","```\r\nObject primitives = new int[1];\r\nlong[] longs = (long[]) primitives;\r\n```","```\r\nMammal mammal;\r\nif (animal instanceof Mammal) {\r\n    mammal = (Mammal) animal;\r\n} else {\r\n    // handle exceptional case\r\n}\r\n```","```\r\npublic static class Box<T> {\r\n    private T content;\r\n\r\n    public T getContent() {\r\n        return content;\r\n    }\r\n\r\n    public void setContent(T content) {\r\n        this.content = content;\r\n    }\r\n}\r\n```","```\r\nBox<Long> originalBox = new Box<>();\r\nBox raw = originalBox;\r\nraw.setContent(2.5);\r\nBox<Long> bound = (Box<Long>) raw;\r\nLong content = bound.getContent();\r\n```","```\r\npublic static <T> T convertInstanceOfObject(Object o) {\r\n    try {\r\n        return (T) o;\r\n    } catch (ClassCastException e) {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nString shouldBeNull = convertInstanceOfObject(123);\r\n```"]