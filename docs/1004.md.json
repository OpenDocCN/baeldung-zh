["```\r\n$ docker run -d -p 27017:27017 --name example-mongo mongo:latest\r\n```","```\r\n$ docker exec -it example-mongo mongosh\r\n```","```\r\n> use sorting\r\n```","```\r\n> db.users.insertMany([\r\n  {name: \"ben\", surname: \"ThisField\" },\r\n  {name: \"aen\", surname: \"Does\" },\r\n  {name: \"Aen\", surname: \"Not\" },\r\n  {name: \"Ben\", surname: \"Matter\" },\r\n])\r\n```","```\r\n> db.getCollection('users').find({}).sort({name:1})\r\n```","```\r\n[\r\n  {\r\n    _id: ..., name: 'Aen', surname: 'Not'\r\n  },\r\n  {\r\n    _id: ..., name: 'Ben', surname: 'Matter'\r\n  },\r\n  {\r\n    _id: ..., name: 'aen', surname: 'Does'\r\n  },\r\n  {\r\n    _id: ..., name: 'ben', surname: 'ThisField'\r\n  }\r\n]\r\n```","```\r\n> db.getCollection('users').find({}).collation({locale: \"en\"}).sort({name:1})\r\n```","```\r\n[\r\n  {\r\n    _id: ..., name: 'aen', surname: 'Does'\r\n  },\r\n  {\r\n    _id: ..., name: 'Aen', surname: 'Not'\r\n  },\r\n  {\r\n    _id: ..., name: 'ben', surname: 'ThisField'\r\n  },\r\n  {\r\n    _id: ..., name: 'Ben', surname: 'Matter'\r\n  }\r\n]\r\n```","```\r\n> db.getCollection('users').aggregate([{\r\n        \"$project\": {\r\n            \"name\": 1,\r\n            \"surname\": 1,\r\n            \"lowerName\": {\r\n                \"$toLower\": \"$name\"\r\n            }\r\n        }\r\n    },\r\n    {\r\n        \"$sort\": {\r\n            \"lowerName\": 1\r\n        }\r\n    }\r\n])\r\n```","```\r\n[\r\n  {\r\n    _id: ..., name: 'aen', surname: 'Does', lowerName: 'aen'\r\n  },\r\n  {\r\n    _id: ..., name: 'Aen', surname: 'Not', lowerName: 'aen'\r\n  },\r\n  {\r\n    _id: ..., name: 'ben', surname: 'ThisField', lowerName: 'ben'\r\n  },\r\n  {\r\n    _id: ..., name: 'Ben', surname: 'Matter', lowerName: 'ben'\r\n  }\r\n]\r\n```","```\r\n<dependency>\r\n    <groupId>org.mongodb</groupId>\r\n    <artifactId>mongo-java-driver</artifactId>\r\n    <version>3.12.10</version>\r\n</dependency>\r\n```","```\r\nMongoClient mongoClient = new MongoClient();\r\nMongoDatabase db = mongoClient.getDatabase(\"sorting\");\r\nMongoCollection<Document> collection = db.getCollection(\"users\");\r\n```","```\r\nFindIterable<Document> nameDoc = collection.find().sort(ascending(\"name\"))\r\n  .collation(Collation.builder().locale(\"en\").build());\r\n```","```\r\nMongoCursor cursor = nameDoc.cursor();\r\nList expectedNamesOrdering = Arrays.asList(\"aen\", \"Aen\", \"ben\", \"Ben\", \"cen\", \"Cen\");\r\nList actualNamesOrdering = new ArrayList<>();\r\nwhile (cursor.hasNext()) {\r\n    Document document = cursor.next();\r\n    actualNamesOrdering.add(document.get(\"name\").toString());\r\n}\r\nassertEquals(expectedNamesOrdering, actualNamesOrdering);\r\n```","```\r\nBson projectBson = project(\r\n  Projections.fields(\r\n    Projections.include(\"name\",\"surname\"),\r\n    Projections.computed(\"lowerName\", Projections.computed(\"$toLower\", \"$name\")))); \r\n```","```\r\nAggregateIterable<Document> nameDoc = collection.aggregate(\r\n  Arrays.asList(projectBson,\r\n  sort(Sorts.ascending(\"lowerName\")))); \r\n```"]