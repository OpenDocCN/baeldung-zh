["```\r\n<dependency>\r\n    <groupId>org.optaplanner</groupId>\r\n    <artifactId>optaplanner-core</artifactId>\r\n    <version>8.24.0.Final</version>\r\n</dependency> \r\n```","```\r\n@PlanningSolution\r\npublic class CourseSchedule {\r\n\r\n    @ValueRangeProvider(id = \"availableRooms\")\r\n    @ProblemFactCollectionProperty\r\n    private List<Integer> roomList;\r\n    @ValueRangeProvider(id = \"availablePeriods\")\r\n    @ProblemFactCollectionProperty\r\n    private List<Integer> periodList;\r\n    @ProblemFactCollectionProperty\r\n    private List<Lecture> lectureList;\r\n    @PlanningScore\r\n    private HardSoftScore score;\r\n```","```\r\n@PlanningEntity\r\npublic class Lecture {\r\n\r\n    @PlaningId\r\n    private Long id;\r\n    public Integer roomNumber;\r\n    public Integer period;\r\n    public String teacher;\r\n\r\n    @PlanningVariable(\r\n      valueRangeProviderRefs = {\"availablePeriods\"})\r\n    public Integer getPeriod() {\r\n        return period;\r\n    }\r\n\r\n    @PlanningVariable(\r\n      valueRangeProviderRefs = {\"availableRooms\"})\r\n    public Integer getRoomNumber() {\r\n        return roomNumber;\r\n    }\r\n}\r\n```","```\r\n@PlanningEntityCollectionProperty\r\npublic List<Lecture> getLectureList() {\r\n    return lectureList;\r\n}\r\n```","```\r\n@ValueRangeProvider(id = \"availableRooms\")\r\n@ProblemFactCollectionProperty\r\npublic List<Integer> getRoomList() {\r\n    return roomList;\r\n}\r\n\r\n@ValueRangeProvider(id = \"availablePeriods\")\r\n@ProblemFactCollectionProperty\r\npublic List<Integer> getPeriodList() {\r\n    return periodList;\r\n} \r\n```","```\r\n@PlanningScore\r\npublic HardSoftScore getScore() {\r\n    return score;\r\n}\r\n```","```\r\npublic class ScoreCalculator \r\n  implements EasyScoreCalculator<CourseSchedule, HardSoftScore> {\r\n\r\n    @Override\r\n    public HardSoftScore calculateScore(CourseSchedule courseSchedule) {\r\n        int hardScore = 0;\r\n        int softScore = 0;\r\n\r\n        Set<String> occupiedRooms = new HashSet<>();\r\n        for(Lecture lecture : courseSchedule.getLectureList()) {\r\n            String roomInUse = lecture.getPeriod()\r\n              .toString() + \":\" + lecture.getRoomNumber().toString();\r\n            if(occupiedRooms.contains(roomInUse)){\r\n                hardScore += -1;\r\n            } else {\r\n                occupiedRooms.add(roomInUse);\r\n            }\r\n        }\r\n\r\n        return HardSoftScore.Of(hardScore, softScore);\r\n    }\r\n}\r\n```","```\r\nSolverFactory<CourseSchedule> solverFactory = SolverFactory.create(new SolverConfig() \r\n                                                      .withSolutionClass(CourseSchedule.class)\r\n                                                      .withEntityClasses(Lecture.class)\r\n                                                      .withEasyScoreCalculatorClass(ScoreCalculator.class)\r\n                                                      .withTerminationSpentLimit(Duration.ofSeconds(1))); \r\nsolver = solverFactory.buildSolver();\r\n```","```\r\nunsolvedCourseSchedule = new CourseSchedule();\r\n```","```\r\nCourseSchedule solvedCourseSchedule = solver.solve(unsolvedCourseSchedule);\r\n\r\nassertNotNull(solvedCourseSchedule.getScore());\r\nassertEquals(-4, solvedCourseSchedule.getScore().getHardScore());\r\n```","```\r\npublic void printCourseSchedule() {\r\n    lectureList.stream()\r\n      .map(c -> \"Lecture in Room \"\r\n        + c.getRoomNumber().toString() \r\n        + \" during Period \" + c.getPeriod().toString())\r\n      .forEach(k -> logger.info(k));\r\n}\r\n```","```\r\nLecture in Room 1 during Period 1\r\nLecture in Room 2 during Period 1\r\nLecture in Room 1 during Period 2\r\nLecture in Room 2 during Period 2\r\nLecture in Room 1 during Period 3\r\nLecture in Room 2 during Period 3\r\nLecture in Room 1 during Period 1\r\nLecture in Room 1 during Period 1\r\nLecture in Room 1 during Period 1\r\nLecture in Room 1 during Period 1\r\n```"]