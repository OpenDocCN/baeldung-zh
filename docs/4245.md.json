["```\r\nimport java.nio.file.*;\r\n```","```\r\nprivate static String HOME = System.getProperty(\"user.home\");\r\n```","```\r\n@Test\r\npublic void givenExistentPath_whenConfirmsFileExists_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n\r\n    assertTrue(Files.exists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonexistentPath_whenConfirmsFileNotExists_thenCorrect() {\r\n    Path p = Paths.get(HOME + \"/inexistent_file.txt\");\r\n\r\n    assertTrue(Files.notExists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDirPath_whenConfirmsNotRegularFile_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n\r\n    assertFalse(Files.isRegularFile(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistentDirPath_whenConfirmsReadable_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n\r\n    assertTrue(Files.isReadable(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistentDirPath_whenConfirmsWritable_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n\r\n    assertTrue(Files.isWritable(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistentDirPath_whenConfirmsExecutable_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n    assertTrue(Files.isExecutable(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenSameFilePaths_whenConfirmsIsSame_thenCorrect() {\r\n    Path p1 = Paths.get(HOME);\r\n    Path p2 = Paths.get(HOME);\r\n\r\n    assertTrue(Files.isSameFile(p1, p2));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenCreatesNewFile_thenCorrect() {\r\n    String fileName = \"myfile_\" + UUID.randomUUID().toString() + \".txt\";\r\n    Path p = Paths.get(HOME + \"/\" + fileName);\r\n    assertFalse(Files.exists(p));\r\n\r\n    Files.createFile(p);\r\n\r\n    assertTrue(Files.exists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDirPath_whenCreatesNewDir_thenCorrect() {\r\n    String dirName = \"myDir_\" + UUID.randomUUID().toString();\r\n    Path p = Paths.get(HOME + \"/\" + dirName);\r\n    assertFalse(Files.exists(p));\r\n\r\n    Files.createDirectory(p);\r\n\r\n    assertTrue(Files.exists(p));\r\n    assertFalse(Files.isRegularFile(p));\r\n    assertTrue(Files.isDirectory(p));\r\n}\r\n```","```\r\n@Test(expected = NoSuchFileException.class)\r\npublic void givenDirPath_whenFailsToCreateRecursively_thenCorrect() {\r\n    String dirName = \"myDir_\" + UUID.randomUUID().toString() + \"/subdir\";\r\n    Path p = Paths.get(HOME + \"/\" + dirName);\r\n    assertFalse(Files.exists(p));\r\n\r\n    Files.createDirectory(p);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDirPath_whenCreatesRecursively_thenCorrect() {\r\n    Path dir = Paths.get(\r\n      HOME + \"/myDir_\" + UUID.randomUUID().toString());\r\n    Path subdir = dir.resolve(\"subdir\");\r\n    assertFalse(Files.exists(dir));\r\n    assertFalse(Files.exists(subdir));\r\n\r\n    Files.createDirectories(subdir);\r\n\r\n    assertTrue(Files.exists(dir));\r\n    assertTrue(Files.exists(subdir));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenCreatesTempFile_thenCorrect() {\r\n    String prefix = \"log_\";\r\n    String suffix = \".txt\";\r\n    Path p = Paths.get(HOME + \"/\");\r\n\r\n    Files.createTempFile(p, prefix, suffix);\r\n\r\n    assertTrue(Files.exists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenCreatesTempFileWithDefaults_thenCorrect() {\r\n    Path p = Paths.get(HOME + \"/\");\r\n\r\n    Files.createTempFile(p, null, null);\r\n\r\n    assertTrue(Files.exists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNoFilePath_whenCreatesTempFileInTempDir_thenCorrect() {\r\n    Path p = Files.createTempFile(null, null);\r\n\r\n    assertTrue(Files.exists(p));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenDeletes_thenCorrect() {\r\n    Path p = Paths.get(HOME + \"/fileToDelete.txt\");\r\n    assertFalse(Files.exists(p));\r\n    Files.createFile(p);\r\n    assertTrue(Files.exists(p));\r\n\r\n    Files.delete(p);\r\n\r\n    assertFalse(Files.exists(p));\r\n}\r\n```","```\r\n@Test(expected = NoSuchFileException.class)\r\npublic void givenInexistentFile_whenDeleteFails_thenCorrect() {\r\n    Path p = Paths.get(HOME + \"/inexistentFile.txt\");\r\n    assertFalse(Files.exists(p));\r\n\r\n    Files.delete(p);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInexistentFile_whenDeleteIfExistsWorks_thenCorrect() {\r\n    Path p = Paths.get(HOME + \"/inexistentFile.txt\");\r\n    assertFalse(Files.exists(p));\r\n\r\n    Files.deleteIfExists(p);\r\n}\r\n```","```\r\n@Test(expected = DirectoryNotEmptyException.class)\r\npublic void givenPath_whenFailsToDeleteNonEmptyDir_thenCorrect() {\r\n    Path dir = Paths.get(\r\n      HOME + \"/emptyDir\" + UUID.randomUUID().toString());\r\n    Files.createDirectory(dir);\r\n    assertTrue(Files.exists(dir));\r\n\r\n    Path file = dir.resolve(\"file.txt\");\r\n    Files.createFile(file);\r\n\r\n    Files.delete(dir);\r\n\r\n    assertTrue(Files.exists(dir));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenCopiesToNewLocation_thenCorrect() {\r\n    Path dir1 = Paths.get(\r\n      HOME + \"/firstdir_\" + UUID.randomUUID().toString());\r\n    Path dir2 = Paths.get(\r\n      HOME + \"/otherdir_\" + UUID.randomUUID().toString());\r\n\r\n    Files.createDirectory(dir1);\r\n    Files.createDirectory(dir2);\r\n\r\n    Path file1 = dir1.resolve(\"filetocopy.txt\");\r\n    Path file2 = dir2.resolve(\"filetocopy.txt\");\r\n\r\n    Files.createFile(file1);\r\n\r\n    assertTrue(Files.exists(file1));\r\n    assertFalse(Files.exists(file2));\r\n\r\n    Files.copy(file1, file2);\r\n\r\n    assertTrue(Files.exists(file2));\r\n}\r\n```","```\r\n@Test(expected = FileAlreadyExistsException.class)\r\npublic void givenPath_whenCopyFailsDueToExistingFile_thenCorrect() {\r\n    Path dir1 = Paths.get(\r\n      HOME + \"/firstdir_\" + UUID.randomUUID().toString());\r\n    Path dir2 = Paths.get(\r\n      HOME + \"/otherdir_\" + UUID.randomUUID().toString());\r\n\r\n    Files.createDirectory(dir1);\r\n    Files.createDirectory(dir2);\r\n\r\n    Path file1 = dir1.resolve(\"filetocopy.txt\");\r\n    Path file2 = dir2.resolve(\"filetocopy.txt\");\r\n\r\n    Files.createFile(file1);\r\n    Files.createFile(file2);\r\n\r\n    assertTrue(Files.exists(file1));\r\n    assertTrue(Files.exists(file2));\r\n\r\n    Files.copy(file1, file2);\r\n\r\n    Files.copy(file1, file2, StandardCopyOption.REPLACE_EXISTING);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenMovesToNewLocation_thenCorrect() {\r\n    Path dir1 = Paths.get(\r\n      HOME + \"/firstdir_\" + UUID.randomUUID().toString());\r\n    Path dir2 = Paths.get(\r\n      HOME + \"/otherdir_\" + UUID.randomUUID().toString());\r\n\r\n    Files.createDirectory(dir1);\r\n    Files.createDirectory(dir2);\r\n\r\n    Path file1 = dir1.resolve(\"filetocopy.txt\");\r\n    Path file2 = dir2.resolve(\"filetocopy.txt\");\r\n    Files.createFile(file1);\r\n\r\n    assertTrue(Files.exists(file1));\r\n    assertFalse(Files.exists(file2));\r\n\r\n    Files.move(file1, file2);\r\n\r\n    assertTrue(Files.exists(file2));\r\n    assertFalse(Files.exists(file1));\r\n}\r\n```","```\r\n@Test(expected = FileAlreadyExistsException.class)\r\npublic void givenFilePath_whenMoveFailsDueToExistingFile_thenCorrect() {\r\n    Path dir1 = Paths.get(\r\n      HOME + \"/firstdir_\" + UUID.randomUUID().toString());\r\n    Path dir2 = Paths.get(\r\n      HOME + \"/otherdir_\" + UUID.randomUUID().toString());\r\n\r\n    Files.createDirectory(dir1);\r\n    Files.createDirectory(dir2);\r\n\r\n    Path file1 = dir1.resolve(\"filetocopy.txt\");\r\n    Path file2 = dir2.resolve(\"filetocopy.txt\");\r\n\r\n    Files.createFile(file1);\r\n    Files.createFile(file2);\r\n\r\n    assertTrue(Files.exists(file1));\r\n    assertTrue(Files.exists(file2));\r\n\r\n    Files.move(file1, file2);\r\n\r\n    Files.move(file1, file2, StandardCopyOption.REPLACE_EXISTING);\r\n\r\n    assertTrue(Files.exists(file2));\r\n    assertFalse(Files.exists(file1));\r\n}\r\n```"]