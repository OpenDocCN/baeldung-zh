["```\r\n<dependency>\r\n    <groupId>ch.qos.logback</groupId>\r\n    <artifactId>logback-classic</artifactId>. \r\n    <version>1.2.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-core</artifactId>\r\n    <version>3.15.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class BusinessWorker {\r\n    private static Logger LOGGER = LoggerFactory.getLogger(BusinessWorker.class);\r\n\r\n    public void generateLogs(String msg) {\r\n        LOGGER.trace(msg);\r\n        LOGGER.debug(msg);\r\n        LOGGER.info(msg);\r\n        LOGGER.warn(msg);\r\n        LOGGER.error(msg);\r\n    }\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <layout class=\"ch.qos.logback.classic.PatternLayout\">\r\n            <Pattern>\r\n                %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\r\n            </Pattern>\r\n        </layout>\r\n    </appender>\r\n\r\n    <root level=\"error\">\r\n        <appender-ref ref=\"CONSOLE\"/>\r\n    </root>\r\n</configuration>\r\n```","```\r\npublic class MemoryAppender extends ListAppender<ILoggingEvent> {\r\n    public void reset() {\r\n        this.list.clear();\r\n    }\r\n\r\n    public boolean contains(String string, Level level) {\r\n        return this.list.stream()\r\n          .anyMatch(event -> event.toString().contains(string)\r\n            && event.getLevel().equals(level));\r\n    }\r\n\r\n    public int countEventsForLogger(String loggerName) {\r\n        return (int) this.list.stream()\r\n          .filter(event -> event.getLoggerName().contains(loggerName))\r\n          .count();\r\n    }\r\n\r\n    public List<ILoggingEvent> search(String string) {\r\n        return this.list.stream()\r\n          .filter(event -> event.toString().contains(string))\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n    public List<ILoggingEvent> search(String string, Level level) {\r\n        return this.list.stream()\r\n          .filter(event -> event.toString().contains(string)\r\n            && event.getLevel().equals(level))\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n    public int getSize() {\r\n        return this.list.size();\r\n    }\r\n\r\n    public List<ILoggingEvent> getLoggedEvents() {\r\n        return Collections.unmodifiableList(this.list);\r\n    }\r\n}\r\n```","```\r\n@Before\r\npublic void setup() {\r\n    Logger logger = (Logger) LoggerFactory.getLogger(LOGGER_NAME);\r\n    memoryAppender = new MemoryAppender();\r\n    memoryAppender.setContext((LoggerContext) LoggerFactory.getILoggerFactory());\r\n    logger.setLevel(Level.DEBUG);\r\n    logger.addAppender(memoryAppender);\r\n    memoryAppender.start();\r\n}\r\n```","```\r\n@Test\r\npublic void test() {\r\n    BusinessWorker worker = new BusinessWorker();\r\n    worker.generateLogs(MSG);\r\n\r\n    assertThat(memoryAppender.countEventsForLogger(LOGGER_NAME)).isEqualTo(4);\r\n    assertThat(memoryAppender.search(MSG, Level.INFO).size()).isEqualTo(1);\r\n    assertThat(memoryAppender.contains(MSG, Level.TRACE)).isFalse();\r\n}\r\n```"]