["```\r\n@RunWith(CustomRunner.class)\r\nclass JUnit4Test {\r\n    // ...\r\n}\r\n```","```\r\n@ExtendWith(CustomExtensionOne.class)\r\n@ExtendWith(CustomExtensionTwo.class)\r\nclass JUnit5Test {\r\n    // ...\r\n}\r\n```","```\r\n@Component\r\npublic class DataProvider {\r\n\r\n    private final List<String> memory = List.of(\"baeldung\", \"java\", \"dummy\");\r\n\r\n    public Stream<String> getValues() {\r\n        return memory.stream();\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class StringConverter {\r\n\r\n    private final DataProvider dataProvider;\r\n\r\n    @Autowired\r\n    public StringConverter(DataProvider dataProvider) {\r\n        this.dataProvider = dataProvider;\r\n    }\r\n\r\n    public List<String> convert() {\r\n        return dataProvider.getValues().map(String::toUpperCase).toList();\r\n    }\r\n}\r\n```","```\r\npublic class StringConverterTest {\r\n    @Mock\r\n    private DataProvider dataProvider;\r\n\r\n    @InjectMocks\r\n    private StringConverter stringConverter;\r\n\r\n    @Test\r\n    public void givenStrings_whenConvert_thenReturnUpperCase() {\r\n        Mockito.when(dataProvider.getValues()).thenReturn(Stream.of(\"first\", \"second\"));\r\n\r\n        val result = stringConverter.convert();\r\n\r\n        Assertions.assertThat(result).contains(\"FIRST\", \"SECOND\");\r\n    }\r\n}\r\n```","```\r\njava.lang.NullPointerException: Cannot invoke \"DataProvider.getValues()\" because \"this.dataProvider\" is null\r\n```","```\r\n@Before\r\npublic void init() {\r\n    MockitoAnnotations.openMocks(this);\r\n}\r\n```","```\r\n@Before\r\npublic void init() {\r\n    dataProvider = Mockito.mock(DataProvider.class);\r\n    stringConverter = new StringConverter(dataProvider);\r\n}\r\n```","```\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class StringConverterTest {\r\n    // ...\r\n}\r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class StringConverterTest {\r\n    // ...\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\npublic class StringConverterTest {\r\n    // ...\r\n}\r\n```","```\r\n@ContextConfiguration(classes = StringConverter.class)\r\n@RunWith(SpringRunner.class)\r\npublic class StringConverterTest {\r\n    @MockBean\r\n    private DataProvider dataProvider;\r\n\r\n    @Autowired\r\n    private StringConverter stringConverter;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\npublic class StringConverterTest {\r\n    // ...\r\n}\r\n```"]