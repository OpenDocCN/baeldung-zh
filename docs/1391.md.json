["```\r\nKeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\r\n```","```\r\n-Dkeystore.type=pkcs12\r\n```","```\r\nKeyStore ks = KeyStore.getInstance(\"pkcs12\"); \r\n```","```\r\nchar[] pwdArray = \"password\".toCharArray();\r\nks.load(null, pwdArray); \r\n```","```\r\ntry (FileOutputStream fos = new FileOutputStream(\"newKeyStoreFileName.jks\")) {\r\n    ks.store(fos, pwdArray);\r\n} \r\n```","```\r\nKeyStore ks = KeyStore.getInstance(\"JKS\");\r\nks.load(new FileInputStream(\"newKeyStoreFileName.jks\"), pwdArray);\r\n```","```\r\njava.security.KeyStoreException: KEYSTORE_TYPE not found\r\n```","```\r\njava.security.UnrecoverableKeyException: Password verification failed\r\n```","```\r\nKeyStore.SecretKeyEntry secret\r\n = new KeyStore.SecretKeyEntry(secretKey);\r\nKeyStore.ProtectionParameter password\r\n = new KeyStore.PasswordProtection(pwdArray);\r\nks.setEntry(\"db-encryption-secret\", secret, password);\r\n```","```\r\njava.security.KeyStoreException: non-null password required to create SecretKeyEntry\r\n```","```\r\nX509Certificate[] certificateChain = new X509Certificate[2];\r\nchain[0] = clientCert;\r\nchain[1] = caCert;\r\nks.setKeyEntry(\"sso-signing-key\", privateKey, pwdArray, certificateChain);\r\n```","```\r\njava.security.KeyStoreException: password can't be null\r\n```","```\r\njava.security.UnrecoverableKeyException: Given final block not properly padded\r\n```","```\r\nks.setCertificateEntry(\"google.com\", trustedCertificate);\r\n```","```\r\nKey ssoSigningKey = ks.getKey(\"sso-signing-key\", pwdArray);\r\nCertificate google = ks.getCertificate(\"google.com\");\r\n```","```\r\npublic void whenEntryIsMissingOrOfIncorrectType_thenReturnsNull() {\r\n    // ... initialize keystore\r\n    // ... add an entry called \"widget-api-secret\"\r\n\r\n   Assert.assertNull(ks.getKey(\"some-other-api-secret\"));\r\n   Assert.assertNotNull(ks.getKey(\"widget-api-secret\"));\r\n   Assert.assertNull(ks.getCertificate(\"widget-api-secret\")); \r\n}\r\n```","```\r\njava.security.UnrecoverableKeyException: Given final block not properly padded\r\n```","```\r\npublic void whenAddingAlias_thenCanQueryWithoutSaving() {\r\n    // ... initialize keystore\r\n    // ... add an entry called \"widget-api-secret\"\r\n```","```\r\n assertTrue(ks.containsAlias(\"widget-api-secret\"));\r\n    assertFalse(ks.containsAlias(\"some-other-api-secret\"));\r\n}\r\n```","```\r\npublic void whenAddingAlias_thenCanQueryByType() {\r\n    // ... initialize keystore\r\n    // ... add a secret entry called \"widget-api-secret\"\r\n```","```\r\n assertTrue(ks.containsAlias(\"widget-api-secret\"));\r\n    assertFalse(ks.entryInstanceOf(\r\n      \"widget-api-secret\",\r\n      KeyType.PrivateKeyEntry.class));\r\n}\r\n```","```\r\npublic void whenDeletingAnAlias_thenIdempotent() {\r\n    // ... initialize a keystore\r\n    // ... add an entry called \"widget-api-secret\"\r\n```","```\r\n assertEquals(ks.size(), 1);\r\n```","```\r\n ks.deleteEntry(\"widget-api-secret\");\r\n    ks.deleteEntry(\"some-other-api-secret\");\r\n```","```\r\n assertFalse(ks.size(), 0);\r\n}\r\n```","```\r\nFiles.delete(Paths.get(keystorePath));\r\n```","```\r\nEnumeration<String> aliases = keyStore.aliases();\r\nwhile (aliases.hasMoreElements()) {\r\n    String alias = aliases.nextElement();\r\n    keyStore.deleteEntry(alias);\r\n}\r\n```"]