["```\r\n<dependencies> \r\n    <dependency> \r\n        <groupId>org.hibernate</groupId>\r\n        <artifactId>hibernate-validator</artifactId>\r\n        <version>6.0.13.Final</version>\r\n    </dependency> \r\n    <dependency> \r\n        <groupId>org.glassfish</groupId>\r\n        <artifactId>javax.el</artifactId>\r\n        <version>3.0.0</version>\r\n     </dependency>\r\n</dependencies> \r\n```","```\r\npublic class UserNotNull {\r\n\r\n    @NotNull(message = \"Name may not be null\")\r\n    private String name;\r\n\r\n    // standard constructors / getters / toString   \r\n}\r\n```","```\r\n@BeforeClass\r\npublic static void setupValidatorInstance() {\r\n    validator = Validation.buildDefaultValidatorFactory().getValidator();\r\n}\r\n\r\n@Test\r\npublic void whenNotNullName_thenNoConstraintViolations() {\r\n    UserNotNull user = new UserNotNull(\"John\");\r\n    Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(0);\r\n}\r\n\r\n@Test\r\npublic void whenNullName_thenOneConstraintViolation() {\r\n    UserNotNull user = new UserNotNull(null);\r\n    Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n}\r\n\r\n@Test\r\npublic void whenEmptyName_thenNoConstraintViolations() {\r\n    UserNotNull user = new UserNotNull(\"\");\r\n    Set<ConstraintViolation<UserNotNull>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(0);\r\n} \r\n```","```\r\npublic boolean isValid(Object object) {\r\n    return object != null;  \r\n}\r\n```","```\r\npublic class UserNotEmpty {\r\n\r\n    @NotEmpty(message = \"Name may not be empty\")\r\n    private String name;\r\n\r\n    // standard constructors / getters / toString\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotEmptyName_thenNoConstraintViolations() {\r\n    UserNotEmpty user = new UserNotEmpty(\"John\");\r\n    Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(0);\r\n}\r\n\r\n@Test\r\npublic void whenEmptyName_thenOneConstraintViolation() {\r\n    UserNotEmpty user = new UserNotEmpty(\"\");\r\n    Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n}\r\n\r\n@Test\r\npublic void whenNullName_thenOneConstraintViolation() {\r\n    UserNotEmpty user = new UserNotEmpty(null);\r\n    Set<ConstraintViolation<UserNotEmpty>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n}\r\n```","```\r\n@NotEmpty(message = \"Name may not be empty\")\r\n@Size(min = 2, max = 32, message = \"Name must be between 2 and 32 characters long\") \r\nprivate String name; \r\n```","```\r\npublic class UserNotBlank {\r\n\r\n    @NotBlank(message = \"Name may not be blank\")\r\n    private String name;\r\n\r\n    // standard constructors / getters / toString\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotBlankName_thenNoConstraintViolations() {\r\n    UserNotBlank user = new UserNotBlank(\"John\");\r\n    Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(0);\r\n}\r\n\r\n@Test\r\npublic void whenBlankName_thenOneConstraintViolation() {\r\n    UserNotBlank user = new UserNotBlank(\" \");\r\n    Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n}\r\n\r\n@Test\r\npublic void whenEmptyName_thenOneConstraintViolation() {\r\n    UserNotBlank user = new UserNotBlank(\"\");\r\n    Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n}\r\n\r\n@Test\r\npublic void whenNullName_thenOneConstraintViolation() {\r\n    UserNotBlank user = new UserNotBlank(null);\r\n    Set<ConstraintViolation<UserNotBlank>> violations = validator.validate(user);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n} \r\n```","```\r\npublic boolean isValid(\r\n  CharSequence charSequence, \r\n  ConstraintValidatorContext constraintValidatorContext)\r\n    if (charSequence == null ) {\r\n        return true; \r\n    } \r\n    return charSequence.toString().trim().length() > 0;\r\n} \r\n```"]