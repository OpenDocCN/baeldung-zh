["```\r\nPriorityQueue<Integer> integerQueue = new PriorityQueue<>();\r\nPriorityQueue<Integer> integerQueueWithComparator = new PriorityQueue<>((Integer c1, Integer c2) -> Integer.compare(c1, c2));\r\n\r\nintegerQueueWithComparator.add(3);\r\nintegerQueue.add(3);\r\n\r\nintegerQueueWithComparator.add(2);\r\nintegerQueue.add(2);\r\n\r\nintegerQueueWithComparator.add(1);\r\nintegerQueue.add(1);\r\n\r\nassertThat(integerQueue.poll())\r\n     .isEqualTo(1)\r\n     .isEqualTo(integerQueueWithComparator.poll());\r\n\r\nassertThat(integerQueue.poll())\r\n     .isEqualTo(2)\r\n     .isEqualTo(integerQueueWithComparator.poll());\r\n\r\nassertThat(integerQueue.poll())\r\n     .isEqualTo(3)\r\n     .isEqualTo(integerQueueWithComparator.poll());\r\n```","```\r\nPriorityQueue<Integer> reversedQueue = new PriorityQueue<>(Collections.reverseOrder());\r\n\r\nreversedQueue.add(1);\r\nreversedQueue.add(2);\r\nreversedQueue.add(3);\r\n\r\nassertThat(reversedQueue.poll()).isEqualTo(3);\r\nassertThat(reversedQueue.poll()).isEqualTo(2);\r\nassertThat(reversedQueue.poll()).isEqualTo(1);\r\n```","```\r\npublic class ColoredNumber {\r\n\r\n   private int value;\r\n   private String color;\r\n\r\n   public ColoredNumber(int value, String color) {\r\n       this.value = value;\r\n       this.color = color;\r\n   }\r\n // getters and setters...\r\n}\r\n```","```\r\nPriorityQueue<ColoredNumber> queue = new PriorityQueue<>();\r\nqueue.add(new ColoredNumber(3,\"red\"));\r\nqueue.add(new ColoredNumber(2, \"blue\"));\r\n```","```\r\npublic final class ColoredNumberComparable implements Comparable<ColoredNumber> {\r\n// ...\r\n@Override\r\npublic int compareTo(ColoredNumberComparable o) {\r\n   if ((this.color.equals(\"red\") && o.color.equals(\"red\")) ||\r\n           (!this.color.equals(\"red\") && !o.color.equals(\"red\"))) {\r\n       return Integer.compare(this.value, o.value);\r\n   }\r\n   else if (this.color.equals(\"red\")) {\r\n       return -1;\r\n   }\r\n   else {\r\n       return 1;\r\n   }\r\n}\r\n```","```\r\nPriorityQueue<ColoredNumberComparable> queue = new PriorityQueue<>();\r\nqueue.add(new ColoredNumberComparable(10, \"red\"));\r\nqueue.add(new ColoredNumberComparable(20, \"red\"));\r\nqueue.add(new ColoredNumberComparable(1, \"blue\"));\r\nqueue.add(new ColoredNumberComparable(2, \"blue\"));\r\n\r\nColoredNumberComparable first = queue.poll();\r\nassertThat(first.getColor()).isEqualTo(\"red\");\r\nassertThat(first.getValue()).isEqualTo(10);\r\n\r\nqueue.poll();\r\n\r\nColoredNumberComparable third = queue.poll();\r\nassertThat(third.getColor()).isEqualTo(\"blue\");\r\nassertThat(third.getValue()).isEqualTo(1);\r\n```"]