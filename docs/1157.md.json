["```\r\nList<Integer> numbers = getNumbers();\r\nfor (Integer number : numbers) {\r\n    System.out.println(number);\r\n}\r\n```","```\r\nList<Integer> numbers = getNumbers();\r\nnumbers.forEach(System.out::println);\r\n```","```\r\npublic class ShoppingCart<E> implements Iterable<E> {\r\n\r\n    private E[] elementData;\r\n    private int size;\r\n\r\n    public void add(E element) {\r\n        ensureCapacity(size + 1);\r\n        elementData[size++] = element;\r\n    }\r\n\r\n    @Override\r\n    public Iterator<E> iterator() {\r\n        return new ShoppingCartIterator();\r\n    }\r\n}\r\n```","```\r\npublic class ShoppingCartIterator implements Iterator<E> {\r\n    int cursor;\r\n    int lastReturned = -1;\r\n\r\n    public boolean hasNext() {\r\n        return cursor != size;\r\n    }\r\n\r\n    public E next() {\r\n        return getNextElement();\r\n    }\r\n\r\n    private E getNextElement() {\r\n        int current = cursor;\r\n        exist(current);\r\n\r\n        E[] elements = ShoppingCart.this.elementData;\r\n        validate(elements, current);\r\n\r\n        cursor = current + 1;\r\n        lastReturned = current;\r\n        return elements[lastReturned];\r\n    }\r\n}\r\n```","```\r\nShoppingCart<Product> shoppingCart  = new ShoppingCart<>();\r\n\r\nshoppingCart.add(new Product(\"Tuna\", 42));\r\nshoppingCart.add(new Product(\"Eggplant\", 65));\r\nshoppingCart.add(new Product(\"Salad\", 45));\r\nshoppingCart.add(new Product(\"Banana\", 29));\r\n\r\nfor (Product product : shoppingCart) {\r\n   System.out.println(product.getName());\r\n}\r\n```","```\r\nList<Integer> numbers = new ArrayList<>();\r\nnumbers.add(10);\r\nnumbers.add(20);\r\nnumbers.add(30);\r\nnumbers.add(40);\r\n\r\nIterator<Integer> iterator = numbers.iterator();\r\n```","```\r\nwhile (iterator.hasNext()) {\r\n   System.out.println(iterator.next());\r\n}\r\n```","```\r\nclass Numbers {\r\n\r\n    private static final List<Integer> NUMBER_LIST =\r\n      Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n}\r\n```","```\r\nprivate static class PrimeIterator implements Iterator<Integer> {\r\n\r\n    private int cursor;\r\n\r\n    @Override\r\n    public Integer next() {\r\n        exist(cursor);\r\n        return NUMBER_LIST.get(cursor++);\r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        if (cursor > NUMBER_LIST.size()) {\r\n            return false;\r\n        }\r\n\r\n        for (int i = cursor; i < NUMBER_LIST.size(); i++) {\r\n            if (isPrime(NUMBER_LIST.get(i))) {\r\n                cursor = i;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n```","```\r\npublic static Iterator<Integer> iterator() {\r\n    return new PrimeIterator();\r\n}\r\n```","```\r\nIterator<Integer> iterator = Numbers.iterator();\r\n\r\nwhile (iterator.hasNext()) {\r\n   System.out.println(iterator.next());\r\n}\r\n```"]