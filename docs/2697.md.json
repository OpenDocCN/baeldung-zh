["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>29.0-jre</version>\r\n</dependency>\r\n```","```\r\nRangeMap<Integer, String> experienceRangeDesignationMap\r\n  = TreeRangeMap.create();\r\n```","```\r\nRangeMap<Integer, String> experienceRangeDesignationMap\r\n  = new ImmutableRangeMap.<Integer, String>builder()\r\n  .put(Range.closed(0, 2), \"Associate\")\r\n  .build(); \r\n```","```\r\n@Test\r\npublic void givenRangeMap_whenQueryWithinRange_returnsSucessfully() {\r\n    RangeMap<Integer, String> experienceRangeDesignationMap \r\n     = TreeRangeMap.create();\r\n\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(0, 2), \"Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(3, 5), \"Senior Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(6, 8),  \"Vice President\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(9, 15), \"Executive Director\");\r\n\r\n    assertEquals(\"Vice President\", \r\n      experienceRangeDesignationMap.get(6));\r\n    assertEquals(\"Executive Director\", \r\n      experienceRangeDesignationMap.get(15));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeMap_whenRemoveRangeIsCalled_removesSucessfully() {\r\n    RangeMap<Integer, String> experienceRangeDesignationMap \r\n      = TreeRangeMap.create();\r\n\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(0, 2), \"Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(3, 5), \"Senior Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(6, 8), \"Vice President\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(9, 15), \"Executive Director\");\r\n\r\n    experienceRangeDesignationMap.remove(Range.closed(9, 15));\r\n    experienceRangeDesignationMap.remove(Range.closed(1, 4));\r\n\r\n    assertNull(experienceRangeDesignationMap.get(9));\r\n    assertEquals(\"Associate\", \r\n      experienceRangeDesignationMap.get(0));\r\n    assertEquals(\"Senior Associate\", \r\n      experienceRangeDesignationMap.get(5));\r\n    assertNull(experienceRangeDesignationMap.get(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeMap_whenSpanIsCalled_returnsSucessfully() {\r\n    RangeMap<Integer, String> experienceRangeDesignationMap = TreeRangeMap.create();\r\n    experienceRangeDesignationMap.put(Range.closed(0, 2), \"Associate\");\r\n    experienceRangeDesignationMap.put(Range.closed(3, 5), \"Senior Associate\");\r\n    experienceRangeDesignationMap.put(Range.closed(6, 8), \"Vice President\");\r\n    experienceRangeDesignationMap.put(Range.closed(9, 15), \"Executive Director\");\r\n    experienceRangeDesignationMap.put(Range.closed(16, 30), \"Managing Director\");\r\n    Range<Integer> experienceSpan = experienceRangeDesignationMap.span();\r\n\r\n    assertEquals(0, experienceSpan.lowerEndpoint().intValue());\r\n    assertEquals(30, experienceSpan.upperEndpoint().intValue());\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeMap_whenSubRangeMapIsCalled_returnsSubRangeSuccessfully() {\r\n    RangeMap<Integer, String> experienceRangeDesignationMap = TreeRangeMap.create();\r\n\r\n    experienceRangeDesignationMap\r\n      .put(Range.closed(0, 2), \"Associate\");\r\n    experienceRangeDesignationMap\r\n      .put(Range.closed(3, 5), \"Senior Associate\");\r\n    experienceRangeDesignationMap\r\n      .put(Range.closed(6, 8), \"Vice President\");\r\n    experienceRangeDesignationMap\r\n      .put(Range.closed(8, 15), \"Executive Director\");\r\n    experienceRangeDesignationMap\r\n      .put(Range.closed(16, 30), \"Managing Director\");\r\n    RangeMap<Integer, String> experiencedSubRangeDesignationMap\r\n      = experienceRangeDesignationMap.subRangeMap(Range.closed(4, 14));\r\n\r\n    assertNull(experiencedSubRangeDesignationMap.get(3));\r\n    assertTrue(experiencedSubRangeDesignationMap.asMapOfRanges().values()\r\n      .containsAll(Arrays.asList(\"Executive Director\", \"Vice President\", \"Executive Director\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeMap_whenGetEntryIsCalled_returnsEntrySucessfully() {\r\n    RangeMap<Integer, String> experienceRangeDesignationMap \r\n      = TreeRangeMap.create();\r\n\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(0, 2), \"Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(3, 5), \"Senior Associate\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(6, 8), \"Vice President\");\r\n    experienceRangeDesignationMap.put(\r\n      Range.closed(9, 15), \"Executive Director\");\r\n    Map.Entry<Range<Integer>, String> experienceEntry \r\n      = experienceRangeDesignationMap.getEntry(10);\r\n\r\n    assertEquals(Range.closed(9, 15), experienceEntry.getKey());\r\n    assertEquals(\"Executive Director\", experienceEntry.getValue());\r\n}\r\n```"]