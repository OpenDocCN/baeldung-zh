["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>        \r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.jboss.resteasy</groupId>\r\n    <artifactId>resteasy-jackson2-provider</artifactId>\r\n    <version>3.15.1.Final</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.keycloak</groupId>\r\n    <artifactId>keycloak-dependencies-server-all</artifactId>\r\n    <version>18.0.0</version>\r\n    <type>pom</type>\r\n</dependency> \r\n```","```\r\n<properties>\r\n    <infinispan.version>13.0.8.Final</infinispan.version>\r\n</properties>\r\n```","```\r\n@Configuration\r\npublic class EmbeddedKeycloakConfig {\r\n\r\n    @Bean\r\n    ServletRegistrationBean keycloakJaxRsApplication(\r\n      KeycloakServerProperties keycloakServerProperties, DataSource dataSource) throws Exception {\r\n\r\n        mockJndiEnvironment(dataSource);\r\n        EmbeddedKeycloakApplication.keycloakServerProperties = keycloakServerProperties;\r\n        ServletRegistrationBean servlet = new ServletRegistrationBean<>(\r\n          new HttpServlet30Dispatcher());\r\n        servlet.addInitParameter(\"javax.ws.rs.Application\", \r\n          EmbeddedKeycloakApplication.class.getName());\r\n        servlet.addInitParameter(ResteasyContextParameters.RESTEASY_SERVLET_MAPPING_PREFIX,\r\n          keycloakServerProperties.getContextPath());\r\n        servlet.addInitParameter(ResteasyContextParameters.RESTEASY_USE_CONTAINER_FORM_PARAMS, \r\n          \"true\");\r\n        servlet.addUrlMappings(keycloakServerProperties.getContextPath() + \"/*\");\r\n        servlet.setLoadOnStartup(1);\r\n        servlet.setAsyncSupported(true);\r\n        return servlet;\r\n    }\r\n\r\n    @Bean\r\n    FilterRegistrationBean keycloakSessionManagement(\r\n      KeycloakServerProperties keycloakServerProperties) {\r\n        FilterRegistrationBean filter = new FilterRegistrationBean<>();\r\n\tfilter.setName(\"Keycloak Session Management\");\r\n\tfilter.setFilter(new EmbeddedKeycloakRequestFilter());\r\n\tfilter.addUrlPatterns(keycloakServerProperties.getContextPath() + \"/*\");\r\n\r\n\treturn filter;\r\n    }\r\n\r\n    private void mockJndiEnvironment(DataSource dataSource) throws NamingException {\t\t \r\n        NamingManager.setInitialContextFactoryBuilder(\r\n          (env) -> (environment) -> new InitialContext() {\r\n            @Override\r\n            public Object lookup(Name name) {\r\n                return lookup(name.toString());\r\n            }\r\n\r\n            @Override\r\n            public Object lookup(String name) {\r\n                if (\"spring/datasource\".equals(name)) {\r\n                    return dataSource;\r\n                } else if (name.startsWith(\"java:jboss/ee/concurrency/executor/\")) {\r\n                    return fixedThreadPool();\r\n                }\r\n                return null;\r\n            }\r\n\r\n            @Override\r\n            public NameParser getNameParser(String name) {\r\n                return CompositeName::new;\r\n            }\r\n\r\n            @Override\r\n            public void close() {\r\n            }\r\n        });\r\n    }\r\n\r\n    @Bean(\"fixedThreadPool\")\r\n    public ExecutorService fixedThreadPool() {\r\n        return Executors.newFixedThreadPool(5);\r\n    }\r\n\r\n    @Bean\r\n    @ConditionalOnMissingBean(name = \"springBootPlatform\")\r\n    protected SimplePlatformProvider springBootPlatform() {\r\n        return (SimplePlatformProvider) Platform.getPlatform();\r\n    }\r\n} \r\n```","```\r\n@ConfigurationProperties(prefix = \"keycloak.server\")\r\npublic class KeycloakServerProperties {\r\n    String contextPath = \"/auth\";\r\n    String realmImportFile = \"baeldung-realm.json\";\r\n    AdminUser adminUser = new AdminUser();\r\n\r\n    // getters and setters\r\n\r\n    public static class AdminUser {\r\n        String username = \"admin\";\r\n        String password = \"admin\";\r\n\r\n        // getters and setters        \r\n    }\r\n} \r\n```","```\r\npublic class EmbeddedKeycloakApplication extends KeycloakApplication {\r\n    private static final Logger LOG = LoggerFactory.getLogger(EmbeddedKeycloakApplication.class);\r\n    static KeycloakServerProperties keycloakServerProperties;\r\n\r\n    protected void loadConfig() {\r\n        JsonConfigProviderFactory factory = new RegularJsonConfigProviderFactory();\r\n        Config.init(factory.create()\r\n          .orElseThrow(() -> new NoSuchElementException(\"No value present\")));\r\n    }\r\n\r\n    @Override\r\n    protected ExportImportManager bootstrap() {\r\n        final ExportImportManager exportImportManager = super.bootstrap();\r\n        createMasterRealmAdminUser();\r\n        createBaeldungRealm();\r\n        return exportImportManager;\r\n    }\r\n\r\n    private void createMasterRealmAdminUser() {\r\n        KeycloakSession session = getSessionFactory().create();\r\n        ApplianceBootstrap applianceBootstrap = new ApplianceBootstrap(session);\r\n        AdminUser admin = keycloakServerProperties.getAdminUser();\r\n        try {\r\n            session.getTransactionManager().begin();\r\n            applianceBootstrap.createMasterRealmUser(admin.getUsername(), admin.getPassword());\r\n            session.getTransactionManager().commit();\r\n        } catch (Exception ex) {\r\n            LOG.warn(\"Couldn't create keycloak master admin user: {}\", ex.getMessage());\r\n            session.getTransactionManager().rollback();\r\n        }\r\n        session.close();\r\n    }\r\n\r\n    private void createBaeldungRealm() {\r\n        KeycloakSession session = getSessionFactory().create();\r\n        try {\r\n            session.getTransactionManager().begin();\r\n            RealmManager manager = new RealmManager(session);\r\n            Resource lessonRealmImportFile = new ClassPathResource(\r\n              keycloakServerProperties.getRealmImportFile());\r\n            manager.importRealm(JsonSerialization.readValue(lessonRealmImportFile.getInputStream(),\r\n              RealmRepresentation.class));\r\n            session.getTransactionManager().commit();\r\n        } catch (Exception ex) {\r\n            LOG.warn(\"Failed to import Realm json file: {}\", ex.getMessage());\r\n            session.getTransactionManager().rollback();\r\n        }\r\n        session.close();\r\n    }\r\n} \r\n```","```\r\npublic class RegularJsonConfigProviderFactory extends JsonConfigProviderFactory { }\r\n```","```\r\nserver:\r\n  port: 8083\r\n\r\nspring:\r\n  datasource:\r\n    username: sa\r\n    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE\r\n\r\nkeycloak:\r\n  server:\r\n    contextPath: /auth\r\n    adminUser:\r\n      username: bael-admin\r\n      password: ********\r\n    realmImportFile: baeldung-realm.json\r\n```","```\r\n@SpringBootApplication(exclude = LiquibaseAutoConfiguration.class)\r\n@EnableConfigurationProperties(KeycloakServerProperties.class)\r\npublic class AuthorizationServerApp {\r\n    private static final Logger LOG = LoggerFactory.getLogger(AuthorizationServerApp.class);\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        SpringApplication.run(AuthorizationServerApp.class, args);\r\n    }\r\n\r\n    @Bean\r\n    ApplicationListener<ApplicationReadyEvent> onApplicationReadyEventListener(\r\n      ServerProperties serverProperties, KeycloakServerProperties keycloakServerProperties) {\r\n        return (evt) -> {\r\n            Integer port = serverProperties.getPort();\r\n            String keycloakContextPath = keycloakServerProperties.getContextPath();\r\n            LOG.info(\"Embedded Keycloak started: http://localhost:{}{} to use keycloak\", \r\n              port, keycloakContextPath);\r\n        };\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-maven-plugin</artifactId>\r\n    <configuration>\r\n        <mainClass>com.baeldung.auth.AuthorizationServerApp</mainClass>\r\n        <requiresUnpack>\r\n            <dependency>\r\n                <groupId>org.keycloak</groupId>\r\n                <artifactId>keycloak-connections-jpa</artifactId>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.keycloak</groupId>\r\n                <artifactId>keycloak-model-jpa</artifactId>\r\n            </dependency>\r\n        </requiresUnpack>\r\n    </configuration>\r\n</plugin>\r\n```"]