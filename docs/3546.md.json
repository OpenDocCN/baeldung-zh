["```\r\n<dependency>\r\n    <groupId>dev.morphia.morphia</groupId>\r\n    <artifactId>core</artifactId>\r\n    <version>1.5.3</version>\r\n</dependency>\r\n```","```\r\nMorphia morphia = new Morphia();\r\nmorphia.mapPackage(\"com.baeldung.morphia\");\r\nDatastore datastore = morphia.createDatastore(new MongoClient(), \"library\");\r\ndatastore.ensureIndexes();\r\n```","```\r\n@Entity(\"Books\")\r\npublic class Book {\r\n    @Id\r\n    private String isbn;\r\n    private String title;\r\n    private String author;\r\n    @Property(\"price\")\r\n    private double cost;\r\n    // constructors, getters, setters and hashCode, equals, toString implementations\r\n}\r\n```","```\r\n@Embedded\r\nprivate Publisher publisher;\r\n```","```\r\n@Reference\r\nprivate List<Book> companionBooks;\r\n```","```\r\nPublisher publisher = new Publisher(new ObjectId(), \"Awsome Publisher\");\r\n\r\nBook book = new Book(\"9781565927186\", \"Learning Java\", \"Tom Kirkman\", 3.95, publisher);\r\nBook companionBook = new Book(\"9789332575103\", \"Java Performance Companion\", \r\n  \"Tom Kirkman\", 1.95, publisher);\r\n\r\nbook.addCompanionBooks(companionBook);\r\n\r\ndatastore.save(companionBook);\r\ndatastore.save(book);\r\n```","```\r\nList<Book> books = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\")\r\n  .find()\r\n  .toList();\r\n\r\nassertEquals(1, books.size());\r\n\r\nassertEquals(book, books.get(0));\r\n```","```\r\nQuery<Book> query = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\");\r\n\r\nUpdateOperations<Book> updates = datastore.createUpdateOperations(Book.class)\r\n  .inc(\"price\", 1);\r\n\r\ndatastore.update(query, updates);\r\n\r\nList<Book> books = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\")\r\n  .find()\r\n  .toList();\r\n\r\nassertEquals(4.95, books.get(0).getCost());\r\n```","```\r\nQuery<Book> query = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\");\r\n\r\ndatastore.delete(query);\r\n\r\nList<Book> books = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\")\r\n  .find()\r\n  .toList();\r\n\r\nassertEquals(0, books.size());\r\n```","```\r\nIterator<Author> iterator = datastore.createAggregation(Book.class)\r\n  .group(\"author\", grouping(\"books\", push(\"title\")))\r\n  .out(Author.class);\r\n```","```\r\n@Entity\r\npublic class Author {\r\n    @Id\r\n    private String name;\r\n    private List<String> books;\r\n    // other necessary getters and setters\r\n}\r\n```","```\r\nList<Book> books = datastore.createQuery(Book.class)\r\n  .field(\"title\")\r\n  .contains(\"Learning Java\")\r\n  .project(\"title\", true)\r\n  .find()\r\n  .toList();\r\n\r\nassertEquals(\"Learning Java\", books.get(0).getTitle());\r\nassertNull(books.get(0).getAuthor());\r\n```","```\r\n@Indexes({\r\n  @Index(\r\n    fields = @Field(\"title\"),\r\n    options = @IndexOptions(name = \"book_title\")\r\n  )\r\n})\r\npublic class Book {\r\n    // ...\r\n    @Property\r\n    private String title;\r\n    // ...\r\n}\r\n```","```\r\n@Validation(\"{ price : { $gt : 0 } }\")\r\npublic class Book {\r\n    // ...\r\n    @Property(\"price\")\r\n    private double cost;\r\n    // ...\r\n}\r\n```"]