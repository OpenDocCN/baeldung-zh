["```\r\n<properties>\r\n    <resteasy.version>4.7.2.Final</resteasy.version>\r\n</properties>\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.jboss.resteasy</groupId>\r\n        <artifactId>resteasy-client</artifactId>\r\n        <version>${resteasy.version}</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>javax.servlet</groupId>\r\n        <artifactId>javax.servlet-api</artifactId>\r\n        <version>4.0.1</version>\r\n    </dependency>\r\n    ...\r\n</dependencies>\r\n```","```\r\n@Path(\"/movies\")\r\npublic interface ServicesInterface {\r\n\r\n    @GET\r\n    @Path(\"/getinfo\")\r\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    Movie movieByImdbId(@QueryParam(\"imdbId\") String imdbId);\r\n\r\n    @POST\r\n    @Path(\"/addmovie\")\r\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    Response addMovie(Movie movie);\r\n\r\n    @PUT\r\n    @Path(\"/updatemovie\")\r\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    Response updateMovie(Movie movie);\r\n\r\n    @DELETE\r\n    @Path(\"/deletemovie\")\r\n    Response deleteMovie(@QueryParam(\"imdbId\") String imdbId);\r\n} \r\n```","```\r\n@XmlAccessorType(XmlAccessType.FIELD)\r\n@XmlType(name = \"movie\", propOrder = { \"imdbId\", \"title\" })\r\npublic class Movie {\r\n\r\n    protected String imdbId;\r\n    protected String title;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nString transformerImdbId = \"tt0418279\";\r\nMovie transformerMovie = new Movie(\"tt0418279\", \"Transformer 2\");\r\nUriBuilder FULL_PATH = UriBuilder.fromPath(\"http://127.0.0.1:8082/resteasy/rest\");\r\n\r\nResteasyClient client = (ResteasyClient)ClientBuilder.newClient();\r\nResteasyWebTarget target = client.target(FULL_PATH);\r\nServicesInterface proxy = target.proxy(ServicesInterface.class);\r\n\r\n// POST\r\nResponse moviesResponse = proxy.addMovie(transformerMovie);\r\nSystem.out.println(\"HTTP code: \" + moviesResponse.getStatus());\r\nmoviesResponse.close();\r\n\r\n// GET\r\nMovie movies = proxy.movieByImdbId(transformerImdbId);\r\n\r\n// PUT\r\ntransformerMovie.setTitle(\"Transformer 4\");\r\nmoviesResponse = proxy.updateMovie(transformerMovie);\r\nmoviesResponse.close();\r\n\r\n// DELETE\r\nmoviesResponse = proxy.deleteMovie(batmanMovie.getImdbId());\r\nmoviesResponse.close(); \r\n```","```\r\nResponse batmanResponse = proxy.addMovie(batmanMovie);\r\nResponse transformerResponse = proxy.addMovie(transformerMovie); \r\n```","```\r\njava.lang.IllegalStateException:\r\nInvalid use of BasicClientConnManager: connection still allocated.\r\nMake sure to release the connection before allocating another one. \r\n```","```\r\nPoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();\r\ncm.setMaxTotal(200); // Increase max total connection to 200\r\ncm.setDefaultMaxPerRoute(20); // Increase default max connection per route to 20\r\nApacheHttpClient43Engine engine = new ApacheHttpClient43Engine(httpClient);\r\n\r\nResteasyClient client = ((ResteasyClientBuilder) ClientBuilder.newBuilder()).httpEngine(engine).build();\r\nResteasyWebTarget target = client.target(FULL_PATH);\r\nServicesInterface proxy = target.proxy(ServicesInterface.class);\r\n```"]