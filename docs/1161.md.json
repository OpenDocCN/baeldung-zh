["```\r\n<dependency>\r\n    <groupId>org.evrete</groupId>\r\n    <artifactId>evrete-core</artifactId>\r\n    <version>2.1.04</version>\r\n</dependency> \r\n```","```\r\npublic class Customer {\r\n    private double total = 0.0;\r\n    private final String name;\r\n\r\n    public Customer(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public void addToTotal(double amount) {\r\n        this.total += amount;\r\n    }\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Invoice {\r\n    private final Customer customer;\r\n    private final double amount;\r\n\r\n    public Invoice(Customer customer, double amount) {\r\n        this.customer = customer;\r\n        this.amount = amount;\r\n    }\r\n    // getters and setters\r\n} \r\n```","```\r\nKnowledgeService service = new KnowledgeService();\r\nKnowledge knowledge = service\r\n  .newKnowledge()\r\n  .newRule(\"Clear total sales\")\r\n  .forEach(\"$c\", Customer.class)\r\n  .execute(ctx -> {\r\n      Customer c = ctx.get(\"$c\");\r\n      c.setTotal(0.0);\r\n  })\r\n  .newRule(\"Compute totals\")\r\n  .forEach(\r\n      \"$c\", Customer.class,\r\n      \"$i\", Invoice.class\r\n  )\r\n  .where(\"$i.customer == $c\")\r\n  .execute(ctx -> {\r\n      Customer c = ctx.get(\"$c\");\r\n      Invoice i = ctx.get(\"$i\");\r\n      c.addToTotal(i.getAmount());\r\n  }); \r\n```","```\r\nrule \"Clear total sales\"\r\n  when\r\n    $c: Customer\r\n  then\r\n    $c.setTotal(0.0);\r\nend\r\n\r\nrule \"Compute totals\"\r\n  when\r\n    $c: Customer\r\n    $i: Invoice(customer == $c)\r\n  then\r\n    $c.addToTotal($i.getAmount());\r\nend\r\n```","```\r\nList<Customer> customers = Arrays.asList(\r\n  new Customer(\"Customer A\"),\r\n  new Customer(\"Customer B\"),\r\n  new Customer(\"Customer C\")\r\n);\r\n\r\nRandom random = new Random();\r\nCollection<Object> sessionData = new LinkedList<>(customers);\r\nfor (int i = 0; i < 100_000; i++) {\r\n    Customer randomCustomer = customers.get(random.nextInt(customers.size()));\r\n    Invoice invoice = new Invoice(randomCustomer, 100 * random.nextDouble());\r\n    sessionData.add(invoice);\r\n} \r\n```","```\r\nknowledge\r\n  .newStatelessSession()\r\n  .insert(sessionData)\r\n  .fire();\r\n\r\nfor(Customer c : customers) {\r\n    System.out.printf(\"%s:\\t$%,.2f%n\", c.getName(), c.getTotal());\r\n}\r\n```","```\r\nCustomer A:\t$1,664,730.73\r\nCustomer B:\t$1,666,508.11\r\nCustomer C:\t$1,672,685.10 \r\n```","```\r\n<dependency>\r\n    <groupId>org.evrete</groupId>\r\n    <artifactId>evrete-dsl-java</artifactId>\r\n    <version>2.1.04</version>\r\n</dependency>\r\n```","```\r\npublic class SalesRuleset {\r\n\r\n    @Rule\r\n    public void rule1(Customer $c) {\r\n        $c.setTotal(0.0);\r\n    }\r\n\r\n    @Rule\r\n    @Where(\"$i.customer == $c\")\r\n    public void rule2(Customer $c, Invoice $i) {\r\n        $c.addToTotal($i.getAmount());\r\n    }\r\n}\r\n```","```\r\nKnowledgeService service = new KnowledgeService();\r\nURL rulesetUrl = new URL(\"ruleset.java\"); // or file.toURI().toURL(), etc\r\nKnowledge knowledge = service.newKnowledge(\r\n  \"JAVA-SOURCE\",\r\n  rulesetUrl\r\n); \r\n```"]