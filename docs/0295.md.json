["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.1</version>\r\n    <relativePath/>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-webflux</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-security</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.security</groupId>\r\n        <artifactId>spring-security-test</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@ComponentScan(basePackages = {\"com.baeldung.security\"})\r\n@EnableWebFlux\r\npublic class SpringSecurity5Application {\r\n\r\n    public static void main(String[] args) {\r\n        try (AnnotationConfigApplicationContext context \r\n         = new AnnotationConfigApplicationContext(\r\n            SpringSecurity5Application.class)) {\r\n\r\n            context.getBean(NettyContext.class).onClose().block();\r\n        }\r\n    }\r\n```","```\r\n@Bean\r\npublic NettyContext nettyContext(ApplicationContext context) {\r\n    HttpHandler handler = WebHttpHandlerBuilder\r\n      .applicationContext(context).build();\r\n    ReactorHttpHandlerAdapter adapter \r\n      = new ReactorHttpHandlerAdapter(handler);\r\n    HttpServer httpServer = HttpServer.create(\"localhost\", 8080);\r\n    return httpServer.newHandler(adapter).block();\r\n}\r\n```","```\r\n@EnableWebFluxSecurity\r\npublic class SecurityConfig {\r\n    // ...\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain securityWebFilterChain(\r\n  ServerHttpSecurity http) {\r\n    return http.authorizeExchange()\r\n      .anyExchange().authenticated()\r\n      .and().build();\r\n}\r\n```","```\r\n@Bean\r\npublic MapReactiveUserDetailsService userDetailsService() {\r\n    UserDetails user = User\r\n      .withUsername(\"user\")\r\n      .password(passwordEncoder().encode(\"password\"))\r\n      .roles(\"USER\")\r\n      .build();\r\n    return new MapReactiveUserDetailsService(user);\r\n}\r\n```","```\r\npublic interface ReactiveUserDetailsService {\r\n\r\n    Mono<UserDetails> findByUsername(String username);\r\n}\r\n```","```\r\npublic SecurityWebFilterChain securityWebFilterChain(\r\n  ServerHttpSecurity http) {\r\n    return http.authorizeExchange()\r\n      .anyExchange().authenticated()\r\n      .and().formLogin()\r\n      .and().build();\r\n}\r\n```","```\r\n@RestController\r\npublic class GreetingController {\r\n\r\n    @GetMapping(\"/\")\r\n    public Mono<String> greet(Mono<Principal> principal) {\r\n        return principal\r\n          .map(Principal::getName)\r\n          .map(name -> String.format(\"Hello, %s\", name));\r\n    }\r\n\r\n}\r\n```","```\r\n@GetMapping(\"/admin\")\r\npublic Mono<String> greetAdmin(Mono<Principal> principal) {\r\n    return principal\r\n      .map(Principal::getName)\r\n      .map(name -> String.format(\"Admin access: %s\", name));\r\n}\r\n```","```\r\nUserDetails admin = User.withDefaultPasswordEncoder()\r\n  .username(\"admin\")\r\n  .password(\"password\")\r\n  .roles(\"ADMIN\")\r\n  .build();\r\n```","```\r\nreturn http.authorizeExchange()\r\n  .pathMatchers(\"/admin\").hasAuthority(\"ROLE_ADMIN\")\r\n  .anyExchange().authenticated()\r\n  .and().formLogin()\r\n  .and().build();\r\n```","```\r\n@EnableWebFluxSecurity\r\n@EnableReactiveMethodSecurity\r\npublic class SecurityConfig {\r\n    // ...\r\n}\r\n```","```\r\n@Service\r\npublic class GreetingService {\r\n\r\n    public Mono<String> greet() {\r\n        return Mono.just(\"Hello from service!\");\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class GreetingController {\r\n\r\n    private GreetingService greetingService\r\n\r\n    // constructor...\r\n\r\n    @GetMapping(\"/greetingService\")\r\n    public Mono<String> greetingService() {\r\n        return greetingService.greet();\r\n    }\r\n\r\n}\r\n```","```\r\n@Service\r\npublic class GreetingService {\r\n\r\n    @PreAuthorize(\"hasRole('ADMIN')\")\r\n    public Mono<String> greet() {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@ContextConfiguration(classes = SpringSecurity5Application.class)\r\npublic class SecurityTest {\r\n\r\n    @Autowired\r\n    ApplicationContext context;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Before\r\npublic void setup() {\r\n    this.webTestClient = WebTestClient\r\n      .bindToApplicationContext(this.context)\r\n      .configureClient()\r\n      .build();\r\n}\r\n```","```\r\n@Test\r\nvoid whenNoCredentials_thenRedirectToLogin() {\r\n    webTestClient.get()\r\n      .uri(\"/\")\r\n      .exchange()\r\n      .expectStatus().is3xxRedirection();\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser\r\nvoid whenHasCredentials_thenSeesGreeting() {\r\n    webTestClient.get()\r\n      .uri(\"/\")\r\n      .exchange()\r\n      .expectStatus().isOk()\r\n      .expectBody(String.class).isEqualTo(\"Hello, user\");\r\n}\r\n```"]