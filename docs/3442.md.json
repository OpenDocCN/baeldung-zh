["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.4.0</version>\r\n</parent>\r\n\r\n<dependency>\r\n    <groupId>org.togglz</groupId>\r\n    <artifactId>togglz-spring-boot-starter</artifactId>\r\n    <version>2.4.1</version>\r\n<dependency>\r\n    <groupId>org.togglz</groupId>\r\n    <artifactId>togglz-spring-security</artifactId>\r\n    <version>2.4.1</version>\r\n</dependency>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-test</artifactId> \r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.194</version>\r\n</dependency>\r\n```","```\r\npublic enum MyFeatures implements Feature {\r\n\r\n    @Label(\"Employee Management Feature\")\r\n    EMPLOYEE_MANAGEMENT_FEATURE;\r\n\r\n    public boolean isActive() {\r\n        return FeatureContext.getFeatureManager().isActive(this);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ToggleConfiguration {\r\n\r\n    @Bean\r\n    public FeatureProvider featureProvider() {\r\n        return new EnumBasedFeatureProvider(MyFeatures.class);\r\n    }\r\n}\r\n```","```\r\n@Aspect\r\n@Component\r\npublic class FeaturesAspect {\r\n\r\n    private static final Logger LOG = Logger.getLogger(FeaturesAspect.class);\r\n\r\n    @Around(\r\n      \"@within(featureAssociation) || @annotation(featureAssociation)\"\r\n    )\r\n    public Object checkAspect(ProceedingJoinPoint joinPoint, \r\n      FeatureAssociation featureAssociation) throws Throwable {\r\n\r\n        if (featureAssociation.value().isActive()) {\r\n            return joinPoint.proceed();\r\n        } else {\r\n            LOG.info(\r\n              \"Feature \" + featureAssociation.value().name() + \" is not enabled!\");\r\n            return null;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ ElementType.METHOD, ElementType.TYPE })\r\npublic @interface FeatureAssociation {\r\n    MyFeatures value();\r\n}\r\n```","```\r\npublic enum MyFeatures implements Feature {\r\n\r\n    @Label(\"Employee Management Feature\") \r\n    @EnabledByDefault \r\n    @DefaultActivationStrategy(id = SystemPropertyActivationStrategy.ID, \r\n      parameters = { \r\n      @ActivationParameter(\r\n        name = SystemPropertyActivationStrategy.PARAM_PROPERTY_NAME,\r\n        value = \"employee.feature\"),\r\n      @ActivationParameter(\r\n        name = SystemPropertyActivationStrategy.PARAM_PROPERTY_VALUE,\r\n        value = \"true\") }) \r\n    EMPLOYEE_MANAGEMENT_FEATURE;\r\n    //...\r\n}\r\n```","```\r\n@Entity\r\npublic class Employee {\r\n\r\n    @Id\r\n    private long id;\r\n    private double salary;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic interface EmployeeRepository\r\n  extends CrudRepository<Employee, Long>{ }\r\n```","```\r\n@Service\r\npublic class SalaryService {\r\n\r\n    @Autowired\r\n    EmployeeRepository employeeRepository;\r\n\r\n    @FeatureAssociation(value = MyFeatures.EMPLOYEE_MANAGEMENT_FEATURE)\r\n    public void increaseSalary(long id) {\r\n        Employee employee = employeeRepository.findById(id).orElse(null);\r\n        employee.setSalary(employee.getSalary() + \r\n          employee.getSalary() * 0.1);\r\n        employeeRepository.save(employee);\r\n    }\r\n} \r\n```","```\r\n@Controller\r\npublic class SalaryController {\r\n\r\n    @Autowired\r\n    SalaryService salaryService;\r\n\r\n    @PostMapping(\"/increaseSalary\")\r\n    @ResponseBody\r\n    public void increaseSalary(@RequestParam long id) {\r\n        salaryService.increaseSalary(id);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFeaturePropertyFalse_whenIncreaseSalary_thenNoIncrease() \r\n  throws Exception {\r\n    Employee emp = new Employee(1, 2000);\r\n    employeeRepository.save(emp);\r\n\r\n    System.setProperty(\"employee.feature\", \"false\");\r\n\r\n    mockMvc.perform(post(\"/increaseSalary\")\r\n      .param(\"id\", emp.getId() + \"\"))\r\n      .andExpect(status().is(200));\r\n\r\n    emp = employeeRepository.findOne(1L);\r\n    assertEquals(\"salary incorrect\", 2000, emp.getSalary(), 0.5);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFeaturePropertyTrue_whenIncreaseSalary_thenIncrease() \r\n  throws Exception {\r\n    Employee emp = new Employee(1, 2000);\r\n    employeeRepository.save(emp);\r\n    System.setProperty(\"employee.feature\", \"true\");\r\n\r\n    mockMvc.perform(post(\"/increaseSalary\")\r\n      .param(\"id\", emp.getId() + \"\"))\r\n      .andExpect(status().is(200));\r\n\r\n    emp = employeeRepository.findById(1L).orElse(null);\r\n    assertEquals(\"salary incorrect\", 2200, emp.getSalary(), 0.5);\r\n}\r\n```"]