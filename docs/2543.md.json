["```\r\n<dependency>\r\n    <groupId>org.eclipse.jetty</groupId>\r\n    <artifactId>jetty-reactive-httpclient</artifactId>\r\n    <version>1.0.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.eclipse.jetty</groupId>\r\n    <artifactId>jetty-server</artifactId>\r\n    <version>9.4.19.v20190610</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.reactivestreams</groupId>\r\n    <artifactId>reactive-streams</artifactId>\r\n    <version>1.0.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n    <version>3.2.12.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.reactivex.rxjava2</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>2.2.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webflux</artifactId>\r\n    <version>5.1.9.RELEASE</version>\r\n</dependency>\r\n```","```\r\npublic class RequestHandler extends AbstractHandler {\r\n    @Override\r\n    public void handle(String target, Request jettyRequest, HttpServletRequest request,\r\n      HttpServletResponse response) throws IOException, ServletException {\r\n        jettyRequest.setHandled(true);\r\n        response.setContentType(request.getContentType());\r\n        IO.copy(request.getInputStream(), response.getOutputStream());\r\n    }\r\n}\r\n\r\n...\r\n\r\nServer server = new Server(8080);\r\nserver.setHandler(new RequestHandler());\r\nserver.start();\r\n```","```\r\nHttpClient httpClient = new HttpClient();\r\nhttpClient.start();\r\n```","```\r\nRequest request = httpClient.newRequest(\"http://localhost:8080/\"); \r\nReactiveRequest reactiveRequest = ReactiveRequest.newBuilder(request).build();\r\nPublisher<ReactiveResponse> publisher = reactiveRequest.response();\r\n```","```\r\npublic class BlockingSubscriber implements Subscriber<ReactiveResponse> {\r\n    BlockingQueue<ReactiveResponse> sink = new LinkedBlockingQueue<>(1);\r\n\r\n    @Override\r\n    public void onSubscribe(Subscription subscription) { \r\n        subscription.request(1); \r\n    }\r\n\r\n    @Override \r\n    public void onNext(ReactiveResponse response) { \r\n        sink.offer(response);\r\n    } \r\n\r\n    @Override \r\n    public void onError(Throwable failure) { } \r\n\r\n    @Override \r\n    public void onComplete() { }\r\n\r\n    public ReactiveResponse block() throws InterruptedException {\r\n        return sink.poll(5, TimeUnit.SECONDS);\r\n    }   \r\n} \r\n```","```\r\nBlockingSubscriber subscriber = new BlockingSubscriber();\r\npublisher.subscribe(subscriber);\r\nReactiveResponse response = subscriber.block();\r\nAssert.assertNotNull(response);\r\nAssert.assertEquals(response.getStatus(), HttpStatus.OK_200);\r\n```","```\r\nReactiveResponse response = Mono.from(publisher).block();\r\n```","```\r\nAssert.assertNotNull(response);\r\nAssert.assertEquals(response.getStatus(), HttpStatus.OK_200);\r\n```","```\r\nClientHttpConnector clientConnector = new JettyClientHttpConnector(httpClient);\r\n```","```\r\nWebClient client = WebClient.builder().clientConnector(clientConnector).build();\r\n```","```\r\nString responseContent = client.post()\r\n  .uri(\"http://localhost:8080/\").contentType(MediaType.TEXT_PLAIN)\r\n  .body(BodyInserters.fromPublisher(Mono.just(\"Hello World!\"), String.class))\r\n  .retrieve()\r\n  .bodyToMono(String.class)\r\n  .block();\r\nAssert.assertNotNull(responseContent);\r\nAssert.assertEquals(\"Hello World!\", responseContent);\r\n```","```\r\nReactiveRequest reactiveRequest = ReactiveRequest.newBuilder(request)\r\n  .content(ReactiveRequest.Content\r\n    .fromString(\"Hello World!\", \"text/plain\", StandardCharsets.UTF_8))\r\n  .build();\r\nPublisher<String> publisher = reactiveRequest\r\n  .response(ReactiveResponse.Content.asString()); \r\n```","```\r\nString responseContent = Single.fromPublisher(publisher)\r\n  .blockingGet();\r\n\r\nAssert.assertEquals(\"Hello World!\", responseContent);\r\n```","```\r\nReactiveRequest request = ReactiveRequest.newBuilder(httpClient, \"http://localhost:8080/\")\r\n  .content(ReactiveRequest.Content.fromString(\"Hello World!\", \"text/plain\", UTF_8))\r\n  .build(); \r\n```","```\r\nPublisher<ReactiveRequest.Event> requestEvents = request.requestEvents(); \r\n```","```\r\nList<Type> requestEventTypes = new ArrayList<>();\r\n\r\nFlowable.fromPublisher(requestEvents)\r\n  .map(ReactiveRequest.Event::getType).subscribe(requestEventTypes::add);\r\nSingle<ReactiveResponse> response = Single.fromPublisher(request.response()); \r\n```","```\r\nint actualStatus = response.blockingGet().getStatus();\r\n\r\nAssert.assertEquals(6, requestEventTypes.size());\r\nAssert.assertEquals(HttpStatus.OK_200, actualStatus);\r\n```"]