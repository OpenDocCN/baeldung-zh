["```\r\n<properties>\r\n    <querydsl.version>2.5.0</querydsl.version>\r\n</properties>\r\n\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-apt</artifactId>\r\n    <version>${querydsl.version}</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-jpa</artifactId>\r\n    <version>${querydsl.version}</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.slf4j</groupId>\r\n    <artifactId>slf4j-log4j12</artifactId>\r\n    <version>1.6.1</version>\r\n</dependency>\r\n```","```\r\n<project>\r\n    <build>\r\n    <plugins>\r\n    ...\r\n    <plugin>\r\n        <groupId>com.mysema.maven</groupId>\r\n        <artifactId>apt-maven-plugin</artifactId>\r\n        <version>1.1.3</version>\r\n        <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>process</goal>\r\n            </goals>\r\n            <configuration>\r\n                <outputDirectory>target/generated-sources</outputDirectory>\r\n                <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>\r\n            </configuration>\r\n        </execution>\r\n        </executions>\r\n    </plugin>\r\n    ...\r\n    </plugins>\r\n    </build>\r\n</project>\r\n```","```\r\n@Entity\r\npublic class Person {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @Column\r\n    private String firstname;\r\n\r\n    @Column\r\n    private String surname;\r\n\r\n    Person() {\r\n    }\r\n\r\n    public Person(String firstname, String surname) {\r\n        this.firstname = firstname;\r\n        this.surname = surname;\r\n    }\r\n\r\n    // standard getters and setters\r\n\r\n}\r\n```","```\r\nQPerson person = QPerson.person;\r\n```","```\r\nQPerson person = new QPerson(\"Erich\", \"Gamma\");\r\n```","```\r\nJPAQuery query = new JPAQuery(entityManager);\r\n```","```\r\nQPerson person = QPerson.person;\r\nList<Person> persons = query.from(person).where(person.firstName.eq(\"Kent\")).list(person);\r\n```","```\r\nquery.from(person).where(person.firstName.eq(\"Kent\"), person.surname.eq(\"Beck\"));\r\n```","```\r\nquery.from(person).where(person.firstName.eq(\"Kent\").and(person.surname.eq(\"Beck\")));\r\n```","```\r\nselect person from Person as person where person.firstName = \"Kent\" and person.surname = \"Beck\"\r\n```","```\r\nquery.from(person).where(person.firstName.eq(\"Kent\").or(person.surname.eq(\"Beck\")));\r\n```","```\r\nQPerson person = QPerson.person;\r\nList<Person> persons = query.from(person)\r\n    .where(person.firstname.eq(firstname))\r\n    .orderBy(person.surname.desc())\r\n    .list(person);\r\n```","```\r\nQPerson person = QPerson.person;    \r\nint maxAge = query.from(person).list(person.age.max()).get(0);\r\n```","```\r\nQPerson person = QPerson.person;   \r\nMap<String, Integer> results = \r\n  query.from(person).transform(\r\n      GroupBy.groupBy(person.firstname).as(GroupBy.max(person.age)));\r\n```","```\r\npublic List<Person> findPersonsByFirstnameQuerydsl(String firstname) {\r\n    JPAQuery query = new JPAQuery(em);\r\n    QPerson person = QPerson.person;\r\n    return query.from(person).where(person.firstname.eq(firstname)).list(person);\r\n}\r\n```","```\r\n@Autowired\r\nprivate PersonDao personDao;\r\n\r\n@Test\r\npublic void givenExistingPersons_whenFindingPersonByFirstName_thenFound() {\r\n    personDao.save(new Person(\"Erich\", \"Gamma\"));\r\n    Person person = new Person(\"Kent\", \"Beck\");\r\n    personDao.save(person);\r\n    personDao.save(new Person(\"Ralph\", \"Johnson\"));\r\n\r\n    Person personFromDb =  personDao.findPersonsByFirstnameQuerydsl(\"Kent\").get(0);\r\n    Assert.assertEquals(person.getId(), personFromDb.getId());\r\n}\r\n\r\n@Test\r\npublic void givenExistingPersons_whenFindingMaxAgeByName_thenFound() {\r\n    personDao.save(new Person(\"Kent\", \"Gamma\", 20));\r\n    personDao.save(new Person(\"Ralph\", \"Johnson\", 35));\r\n    personDao.save(new Person(\"Kent\", \"Zivago\", 30));\r\n\r\n    Map<String, Integer> maxAge = personDao.findMaxAgeByName();\r\n    Assert.assertTrue(maxAge.size() == 2);\r\n    Assert.assertSame(35, maxAge.get(\"Ralph\"));\r\n    Assert.assertSame(30, maxAge.get(\"Kent\"));\r\n}\r\n```"]