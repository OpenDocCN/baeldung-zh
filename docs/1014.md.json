["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-web</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-core</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class CustomAuthenticationProvider implements AuthenticationProvider {\r\n    @Override\r\n    public Authentication authenticate(Authentication auth) \r\n      throws AuthenticationException {\r\n        String username = auth.getName();\r\n        String password = auth.getCredentials()\r\n            .toString();\r\n\r\n        if (\"externaluser\".equals(username) && \"pass\".equals(password)) {\r\n            return new UsernamePasswordAuthenticationToken\r\n              (username, password, Collections.emptyList());\r\n        } else {\r\n            throw new \r\n              BadCredentialsException(\"External system authentication failed\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean supports(Class<?> auth) {\r\n        return auth.equals(UsernamePasswordAuthenticationToken.class);\r\n    }\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class MultipleAuthProvidersSecurityConfig \r\n  extends WebSecurityConfigurerAdapter {\r\n    @Autowired\r\n    CustomAuthenticationProvider customAuthProvider;\r\n\r\n    @Override\r\n    public void configure(AuthenticationManagerBuilder auth) \r\n      throws Exception {\r\n\r\n        auth.authenticationProvider(customAuthProvider);\r\n        auth.inMemoryAuthentication()\r\n            .withUser(\"memuser\")\r\n            .password(encoder().encode(\"pass\"))\r\n            .roles(\"USER\");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n            .and()\r\n            .authorizeRequests()\r\n            .antMatchers(\"/api/**\")\r\n            .authenticated();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n}\r\n```","```\r\n<security:authentication-manager>\r\n    <security:authentication-provider>\r\n        <security:user-service>\r\n            <security:user name=\"memuser\" password=\"pass\" \r\n              authorities=\"ROLE_USER\" />\r\n        </security:user-service>\r\n    </security:authentication-provider>\r\n    <security:authentication-provider\r\n      ref=\"customAuthenticationProvider\" />\r\n</security:authentication-manager>\r\n\r\n<security:http>\r\n    <security:http-basic />\r\n    <security:intercept-url pattern=\"/api/**\" \r\n      access=\"isAuthenticated()\" />\r\n</security:http>\r\n```","```\r\n@RestController\r\npublic class MultipleAuthController {\r\n    @GetMapping(\"/api/ping\")\r\n    public String getPing() {\r\n        return \"OK\";\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate TestRestTemplate restTemplate;\r\n\r\n@Test\r\npublic void givenMemUsers_whenGetPingWithValidUser_thenOk() {\r\n    ResponseEntity<String> result \r\n      = makeRestCallToGetPing(\"memuser\", \"pass\");\r\n\r\n    assertThat(result.getStatusCodeValue()).isEqualTo(200);\r\n    assertThat(result.getBody()).isEqualTo(\"OK\");\r\n}\r\n\r\n@Test\r\npublic void givenExternalUsers_whenGetPingWithValidUser_thenOK() {\r\n    ResponseEntity<String> result \r\n      = makeRestCallToGetPing(\"externaluser\", \"pass\");\r\n\r\n    assertThat(result.getStatusCodeValue()).isEqualTo(200);\r\n    assertThat(result.getBody()).isEqualTo(\"OK\");\r\n}\r\n\r\n@Test\r\npublic void givenAuthProviders_whenGetPingWithNoCred_then401() {\r\n    ResponseEntity<String> result = makeRestCallToGetPing();\r\n\r\n    assertThat(result.getStatusCodeValue()).isEqualTo(401);\r\n}\r\n\r\n@Test\r\npublic void givenAuthProviders_whenGetPingWithBadCred_then401() {\r\n    ResponseEntity<String> result \r\n      = makeRestCallToGetPing(\"user\", \"bad_password\");\r\n\r\n    assertThat(result.getStatusCodeValue()).isEqualTo(401);\r\n}\r\n\r\nprivate ResponseEntity<String> \r\n  makeRestCallToGetPing(String username, String password) {\r\n    return restTemplate.withBasicAuth(username, password)\r\n      .getForEntity(\"/api/ping\", String.class, Collections.emptyMap());\r\n}\r\n\r\nprivate ResponseEntity<String> makeRestCallToGetPing() {\r\n    return restTemplate\r\n      .getForEntity(\"/api/ping\", String.class, Collections.emptyMap());\r\n}\r\n```"]