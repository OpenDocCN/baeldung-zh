["```\r\nSET GLOBAL TRANSACTION READ WRITE;\r\nSET autocommit = 0;\r\n/* transaction */\r\ncommit; \r\n```","```\r\nSET SESSION TRANSACTION READ ONLY;\r\nSET autocommit = 1;\r\n/* transaction */ \r\n```","```\r\nEntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(\"jpa-unit\");\r\nEntityManager entityManager = entityManagerFactory.createEntityManager();\r\nentityManager.unwrap(Session.class).setDefaultReadOnly(true);\r\nentityManager.getTransaction().begin();\r\nentityManager.find(Book.class, id);\r\nentityManager.getTransaction().commit(); \r\n```","```\r\n@Transactional(readOnly = true)\r\npublic Book getBookById(long id) {\r\n    return entityManagerFactory.createEntityManager().find(Book.class, id);\r\n}\r\n```","```\r\n@Bean\r\npublic DataSource readOnlyDataSource() {\r\n    HikariConfig config = new HikariConfig();\r\n    config.setJdbcUrl(\"jdbc:mysql://localhost/baeldung?useUnicode=true&characterEncoding;=UTF-8\");\r\n    config.setUsername(\"baeldung\");\r\n    config.setPassword(\"baeldung\");\r\n    config.setReadOnly(true);\r\n    config.setAutoCommit(true);\r\n    return new HikariDataSource(config);\r\n}\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(enableDefaultTransactions = false)\r\n@EnableTransactionManagement\r\npublic class Config {\r\n    //Definition of data sources and other persistence related beans\r\n}\r\n```","```\r\npublic class RoutingDS extends AbstractRoutingDataSource {\r\n\r\n    public RoutingDS(DataSource writer, DataSource reader) {\r\n        Map<Object, Object> dataSources = new HashMap<>();\r\n        dataSources.put(\"writer\", writer);\r\n        dataSources.put(\"reader\", reader);\r\n\r\n        setTargetDataSources(dataSources);\r\n    }\r\n\r\n    @Override\r\n    protected Object determineCurrentLookupKey() {\r\n        return ReadOnlyContext.isReadOnly() ? \"reader\" : \"writer\";\r\n    }\r\n} \r\n```","```\r\npublic class ReadOnlyContext {\r\n\r\n    private static final ThreadLocal<AtomicInteger> READ_ONLY_LEVEL = ThreadLocal.withInitial(() -> new AtomicInteger(0));\r\n\r\n    //default constructor\r\n\r\n    public static boolean isReadOnly() {\r\n        return READ_ONLY_LEVEL.get()\r\n            .get() > 0;\r\n    }\r\n\r\n    public static void enter() {\r\n        READ_ONLY_LEVEL.get()\r\n            .incrementAndGet();\r\n    }\r\n\r\n    public static void exit() {\r\n        READ_ONLY_LEVEL.get()\r\n            .decrementAndGet();\r\n    }\r\n}\r\n```","```\r\n//annotations mentioned previously\r\npublic Config {\r\n    //other beans...\r\n\r\n    @Bean\r\n    public DataSource routingDataSource() {\r\n        return new RoutingDS(\r\n          dataSource(false, false),\r\n          dataSource(true, true)\r\n        );\r\n    }\r\n\r\n    private DataSource dataSource(boolean readOnly, boolean isAutoCommit) {\r\n        HikariConfig config = new HikariConfig();\r\n        config.setJdbcUrl(\"jdbc:mysql://localhost/baeldung?useUnicode=true&characterEncoding;=UTF-8\");\r\n        config.setUsername(\"baeldung\");\r\n        config.setPassword(\"baeldung\");\r\n        config.setReadOnly(readOnly);\r\n        config.setAutoCommit(isAutoCommit);\r\n        return new HikariDataSource(config);\r\n    }\r\n\r\n    // other beans...\r\n}\r\n```","```\r\n@Inherited\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ReaderDS {\r\n}\r\n```","```\r\n@Aspect\r\n@Component\r\npublic class ReadOnlyInterception {\r\n    @Around(\"@annotation(com.baeldung.readonlytransactions.mysql.spring.ReaderDS)\")\r\n    public Object aroundMethod(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        try {\r\n            ReadOnlyContext.enter();\r\n            return joinPoint.proceed();\r\n        } finally {\r\n            ReadOnlyContext.exit();\r\n        }\r\n    }\r\n} \r\n```","```\r\npublic interface BookRepository extends JpaRepository<BookEntity, Long> {\r\n\r\n    @ReaderDS\r\n    @Query(\"Select t from BookEntity t where t.id = ?1\")\r\n    BookEntity get(Long id);\r\n}\r\n```"]