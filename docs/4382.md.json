["```\r\n<dependency>\r\n    <groupId>org.spockframework</groupId>\r\n    <artifactId>spock-core</artifactId>\r\n    <version>1.3-RC1-groovy-2.5</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy-all</artifactId>\r\n    <version>2.4.7</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class Item {\r\n    private final String id;\r\n    private final String name;\r\n\r\n    // standard constructor, getters, equals\r\n}\r\n```","```\r\nnew Item('1', 'name') == new Item('1', 'name')\r\n```","```\r\npublic interface ItemProvider {\r\n    List<Item> getItems(List<String> itemIds);\r\n}\r\n```","```\r\npublic class ItemService {\r\n    private final ItemProvider itemProvider;\r\n\r\n    public ItemService(ItemProvider itemProvider) {\r\n        this.itemProvider = itemProvider;\r\n    }\r\n\r\n    List<Item> getAllItemsSortedByName(List<String> itemIds) {\r\n        List<Item> items = itemProvider.getItems(itemIds);\r\n        return items.stream()\r\n          .sorted(Comparator.comparing(Item::getName))\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n}\r\n```","```\r\nItemProvider itemProvider\r\nItemService itemService\r\n\r\ndef setup() {\r\n    itemProvider = Stub(ItemProvider)\r\n    itemService = new ItemService(itemProvider)\r\n}\r\n```","```\r\nitemProvider.getItems(['offer-id', 'offer-id-2']) >> \r\n  [new Item('offer-id-2', 'Zname'), new Item('offer-id', 'Aname')]\r\n```","```\r\ndef 'should return items sorted by name'() {\r\n    given:\r\n    def ids = ['offer-id', 'offer-id-2']\r\n    itemProvider.getItems(ids) >> [new Item('offer-id-2', 'Zname'), new Item('offer-id', 'Aname')]\r\n\r\n    when:\r\n    List<Item> items = itemService.getAllItemsSortedByName(ids)\r\n\r\n    then:\r\n    items.collect { it.name } == ['Aname', 'Zname']\r\n}\r\n```","```\r\npublic interface EventPublisher {\r\n    void publish(String addedOfferId);\r\n}\r\n```","```\r\nvoid saveItems(List<String> itemIds) {\r\n    List<String> notEmptyOfferIds = itemIds.stream()\r\n      .filter(itemId -> !itemId.isEmpty())\r\n      .collect(Collectors.toList());\r\n\r\n    // save in database\r\n\r\n    notEmptyOfferIds.forEach(eventPublisher::publish);\r\n}\r\n```","```\r\nclass ItemServiceTest extends Specification {\r\n\r\n    ItemProvider itemProvider\r\n    ItemService itemService\r\n    EventPublisher eventPublisher\r\n\r\n    def setup() {\r\n        itemProvider = Stub(ItemProvider)\r\n        eventPublisher = Mock(EventPublisher)\r\n        itemService = new ItemService(itemProvider, eventPublisher)\r\n}\r\n```","```\r\ndef 'should publish events about new non-empty saved offers'() {\r\n    given:\r\n    def offerIds = ['', 'a', 'b']\r\n\r\n    when:\r\n    itemService.saveItems(offerIds)\r\n\r\n    then:\r\n    1 * eventPublisher.publish('a')\r\n    1 * eventPublisher.publish('b')\r\n}\r\n```","```\r\n1 * eventPublisher.publish('a')\r\n```","```\r\n2 * eventPublisher.publish({ it != null && !it.isEmpty() })\r\n```","```\r\ngiven:\r\nitemProvider = Mock(ItemProvider)\r\nitemProvider.getItems(['item-id']) >> [new Item('item-id', 'name')]\r\nitemService = new ItemService(itemProvider, eventPublisher)\r\n\r\nwhen:\r\ndef items = itemService.getAllItemsSortedByName(['item-id'])\r\n\r\nthen:\r\nitems == [new Item('item-id', 'name')] \r\n```","```\r\n1 * itemProvider.getItems(['item-id']) >> [new Item('item-id', 'name')]\r\n```","```\r\n@Override\r\npublic void publish(String addedOfferId) {\r\n    System.out.println(\"I've published: \" + addedOfferId);\r\n}\r\n```","```\r\neventPublisher = Spy(LoggingEventPublisher)\r\n```","```\r\ngiven:\r\neventPublisher = Spy(LoggingEventPublisher)\r\nitemService = new ItemService(itemProvider, eventPublisher)\r\n\r\nwhen:\r\nitemService.saveItems(['item-id'])\r\n\r\nthen:\r\n1 * eventPublisher.publish('item-id')\r\n```","```\r\nI've published: item-id\r\n```"]