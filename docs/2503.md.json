["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n```","```\r\nspring.data.mongodb.host=localhost\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=springboot-mongo\r\n```","```\r\nspring.servlet.multipart.max-file-size=256MB\r\nspring.servlet.multipart.max-request-size=256MB\r\nspring.servlet.multipart.enabled=true\r\n```","```\r\n@Document(collection = \"photos\")\r\npublic class Photo {\r\n    @Id\r\n    private String id;\r\n\r\n    private String title;\r\n\r\n    private Binary image;\r\n}\r\n```","```\r\npublic interface PhotoRepository extends MongoRepository<Photo, String> { }\r\n```","```\r\n@Service\r\npublic class PhotoService {\r\n\r\n    @Autowired\r\n    private PhotoRepository photoRepo;\r\n\r\n    public String addPhoto(String title, MultipartFile file) throws IOException { \r\n        Photo photo = new Photo(title); \r\n        photo.setImage(\r\n          new Binary(BsonBinarySubType.BINARY, file.getBytes())); \r\n        photo = photoRepo.insert(photo); return photo.getId(); \r\n    }\r\n\r\n    public Photo getPhoto(String id) { \r\n        return photoRepo.findById(id).get(); \r\n    }\r\n}\r\n```","```\r\npublic class Video {\r\n    private String title;\r\n    private InputStream stream;\r\n}\r\n```","```\r\n@Service\r\npublic class VideoService {\r\n\r\n    @Autowired\r\n    private GridFsTemplate gridFsTemplate;\r\n\r\n    @Autowired\r\n    private GridFsOperations operations;\r\n\r\n    public String addVideo(String title, MultipartFile file) throws IOException { \r\n        DBObject metaData = new BasicDBObject(); \r\n        metaData.put(\"type\", \"video\"); \r\n        metaData.put(\"title\", title); \r\n        ObjectId id = gridFsTemplate.store(\r\n          file.getInputStream(), file.getName(), file.getContentType(), metaData); \r\n        return id.toString(); \r\n    }\r\n\r\n    public Video getVideo(String id) throws IllegalStateException, IOException { \r\n        GridFSFile file = gridFsTemplate.findOne(new Query(Criteria.where(\"_id\").is(id))); \r\n        Video video = new Video(); \r\n        video.setTitle(file.getMetadata().get(\"title\").toString()); \r\n        video.setStream(operations.getResource(file).getInputStream());\r\n        return video; \r\n    }\r\n}\r\n```","```\r\n@PostMapping(\"/photos/add\")\r\npublic String addPhoto(@RequestParam(\"title\") String title, \r\n  @RequestParam(\"image\") MultipartFile image, Model model) \r\n  throws IOException {\r\n    String id = photoService.addPhoto(title, image);\r\n    return \"redirect:/photos/\" + id;\r\n}\r\n```","```\r\n@GetMapping(\"/photos/{id}\")\r\npublic String getPhoto(@PathVariable String id, Model model) {\r\n    Photo photo = photoService.getPhoto(id);\r\n    model.addAttribute(\"title\", photo.getTitle());\r\n    model.addAttribute(\"image\", \r\n      Base64.getEncoder().encodeToString(photo.getImage().getData()));\r\n    return \"photos\";\r\n}\r\n```","```\r\n@PostMapping(\"/videos/add\")\r\npublic String addVideo(@RequestParam(\"title\") String title, \r\n  @RequestParam(\"file\") MultipartFile file, Model model) throws IOException {\r\n    String id = videoService.addVideo(title, file);\r\n    return \"redirect:/videos/\" + id;\r\n}\r\n```","```\r\n@GetMapping(\"/videos/{id}\")\r\npublic String getVideo(@PathVariable String id, Model model) throws Exception {\r\n    Video video = videoService.getVideo(id);\r\n    model.addAttribute(\"title\", video.getTitle());\r\n    model.addAttribute(\"url\", \"/videos/stream/\" + id);\r\n    return \"videos\";\r\n}\r\n```","```\r\n@GetMapping(\"/videos/stream/{id}\")\r\npublic void streamVideo(@PathVariable String id, HttpServletResponse response) throws Exception {\r\n    Video video = videoService.getVideo(id);\r\n    FileCopyUtils.copy(video.getStream(), response.getOutputStream());        \r\n}\r\n```","```\r\n<html>\r\n<body>\r\n<h1>Upload new Photo</h1>\r\n<form method=\"POST\" action=\"/photos/add\" enctype=\"multipart/form-data\">\r\n    Title:<input type=\"text\" name=\"title\" />\r\n    Image:<input type=\"file\" name=\"image\" accept=\"image/*\" />\r\n    <input type=\"submit\" value=\"Upload\" />\r\n</form>\r\n</body>\r\n</html>\r\n```","```\r\n<html>\r\n<body>\r\n    <h1>View Photo</h1>\r\n    Title: <span th:text=\"${title}\">name</span>\r\n    <img alt=\"sample\" th:src=\"*{'data:image/png;base64,'+image}\" />\r\n</body>\r\n</html>\r\n```","```\r\n<html>\r\n<body>\r\n<h1>Upload new Video</h1>\r\n<form method=\"POST\" action=\"/videos/add\" enctype=\"multipart/form-data\">\r\n    Title:<input type=\"text\" name=\"title\" />\r\n    Video:<input type=\"file\" name=\"file\" accept=\"video/*\" />\r\n    <input type=\"submit\" value=\"Upload\" />\r\n</form>\r\n</body>\r\n</html>\r\n```","```\r\n<html>\r\n<body>\r\n    <h1>View Video</h1>\r\n    Title: <span th:text=\"${title}\">title</span>\r\n    <video width=\"400\" controls>\r\n        <source th:src=\"${url}\" />\r\n    </video>\r\n</body>\r\n</html>\r\n```"]