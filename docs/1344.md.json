["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <scope>test</scope>\r\n    <version>3.2.3.RELEASE</version>\r\n</dependency>\r\n```","```\r\nFlux<String> source = Flux.just(\"John\", \"Monica\", \"Mark\", \"Cloe\", \"Frank\", \"Casper\", \"Olivia\", \"Emily\", \"Cate\")\r\n  .filter(name -> name.length() == 4)\r\n  .map(String::toUpperCase);\r\n```","```\r\nStepVerifier\r\n  .create(source)\r\n  .expectNext(\"JOHN\")\r\n  .expectNextMatches(name -> name.startsWith(\"MA\"))\r\n  .expectNext(\"CLOE\", \"CATE\")\r\n  .expectComplete()\r\n  .verify();\r\n```","```\r\nFlux<String> error = source.concatWith(\r\n  Mono.error(new IllegalArgumentException(\"Our message\"))\r\n);\r\n```","```\r\nStepVerifier\r\n  .create(error)\r\n  .expectNextCount(4)\r\n  .expectErrorMatches(throwable -> throwable instanceof IllegalArgumentException &&\r\n    throwable.getMessage().equals(\"Our message\")\r\n  ).verify();\r\n```","```\r\nStepVerifier\r\n  .withVirtualTime(() -> Flux.interval(Duration.ofSeconds(1)).take(2))\r\n  .expectSubscription()\r\n  .expectNoEvent(Duration.ofSeconds(1))\r\n  .expectNext(0L)\r\n  .thenAwait(Duration.ofSeconds(1))\r\n  .expectNext(1L)\r\n  .verifyComplete();\r\n```","```\r\nFlux<Integer> source = Flux.<Integer>create(emitter -> {\r\n    emitter.next(1);\r\n    emitter.next(2);\r\n    emitter.next(3);\r\n    emitter.complete();\r\n    try {\r\n        Thread.sleep(1000);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n    emitter.next(4);\r\n}).filter(number -> number % 2 == 0);\r\n```","```\r\n@Test\r\npublic void droppedElements() {\r\n    StepVerifier.create(source)\r\n      .expectNext(2)\r\n      .expectComplete()\r\n      .verifyThenAssertThat()\r\n      .hasDropped(4)\r\n      .tookLessThan(Duration.ofMillis(1050));\r\n}\r\n```","```\r\nTestPublisher\r\n  .<String>create()\r\n  .next(\"First\", \"Second\", \"Third\")\r\n  .error(new RuntimeException(\"Message\"));\r\n```","```\r\nclass UppercaseConverter {\r\n    private final Flux<String> source;\r\n\r\n    UppercaseConverter(Flux<String> source) {\r\n        this.source = source;\r\n    }\r\n\r\n    Flux<String> getUpperCase() {\r\n        return source\r\n          .map(String::toUpperCase);\r\n    }   \r\n}\r\n```","```\r\nfinal TestPublisher<String> testPublisher = TestPublisher.create();\r\n\r\nUppercaseConverter uppercaseConverter = new UppercaseConverter(testPublisher.flux());\r\n\r\nStepVerifier.create(uppercaseConverter.getUpperCase())\r\n  .then(() -> testPublisher.emit(\"aA\", \"bb\", \"ccc\"))\r\n  .expectNext(\"AA\", \"BB\", \"CCC\")\r\n  .verifyComplete();\r\n```","```\r\nTestPublisher\r\n  .createNoncompliant(TestPublisher.Violation.ALLOW_NULL)\r\n  .emit(\"1\", \"2\", null, \"3\"); \r\n```"]