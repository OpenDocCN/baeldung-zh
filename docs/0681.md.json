["```\r\n<dependency>\r\n    <groupId>com.discord4j</groupId>\r\n    <artifactId>discord4j-core</artifactId>\r\n    <version>3.1.1</version>\r\n</dependency>\r\n```","```\r\ntoken: 'our-token-here'\r\n```","```\r\n@Configuration\r\npublic class BotConfiguration {\r\n\r\n    @Value(\"${token}\")\r\n    private String token;\r\n\r\n    @Bean\r\n    public GatewayDiscordClient gatewayDiscordClient() {\r\n        return DiscordClientBuilder.create(token)\r\n          .build()\r\n          .login()\r\n          .block();\r\n    }\r\n}\r\n```","```\r\nimport discord4j.core.event.domain.Event;\r\n\r\npublic interface EventListener<T extends Event> {\r\n\r\n    Logger LOG = LoggerFactory.getLogger(EventListener.class);\r\n\r\n    Class<T> getEventType();\r\n    Mono<Void> execute(T event);\r\n\r\n    default Mono<Void> handleError(Throwable error) {\r\n        LOG.error(\"Unable to process \" + getEventType().getSimpleName(), error);\r\n        return Mono.empty();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic <T extends Event> GatewayDiscordClient gatewayDiscordClient(List<EventListener<T>> eventListeners) {\r\n    GatewayDiscordClient client = DiscordClientBuilder.create(token)\r\n      .build()\r\n      .login()\r\n      .block();\r\n\r\n    for(EventListener<T> listener : eventListeners) {\r\n        client.on(listener.getEventType())\r\n          .flatMap(listener::execute)\r\n          .onErrorResume(listener::handleError)\r\n          .subscribe();\r\n    }\r\n\r\n    return client;\r\n}\r\n```","```\r\nimport discord4j.core.object.entity.Message;\r\n\r\npublic abstract class MessageListener {\r\n\r\n    public Mono<Void> processCommand(Message eventMessage) {\r\n        return Mono.just(eventMessage)\r\n          .filter(message -> message.getAuthor().map(user -> !user.isBot()).orElse(false))\r\n          .filter(message -> message.getContent().equalsIgnoreCase(\"!todo\"))\r\n          .flatMap(Message::getChannel)\r\n          .flatMap(channel -> channel.createMessage(\"Things to do today:\\n - write a bot\\n - eat lunch\\n - play a game\"))\r\n          .then();\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MessageCreateListener extends MessageListener implements EventListener<MessageCreateEvent> {\r\n\r\n    @Override\r\n    public Class<MessageCreateEvent> getEventType() {\r\n        return MessageCreateEvent.class;\r\n    }\r\n\r\n    @Override\r\n    public Mono<Void> execute(MessageCreateEvent event) {\r\n        return processCommand(event.getMessage());\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MessageUpdateListener extends MessageListener implements EventListener<MessageUpdateEvent> {\r\n\r\n    @Override\r\n    public Class<MessageUpdateEvent> getEventType() {\r\n        return MessageUpdateEvent.class;\r\n    }\r\n\r\n    @Override\r\n    public Mono<Void> execute(MessageUpdateEvent event) {\r\n        return Mono.just(event)\r\n          .filter(MessageUpdateEvent::isContentChanged)\r\n          .flatMap(MessageUpdateEvent::getMessage)\r\n          .flatMap(super::processCommand);\r\n    }\r\n}\r\n```"]