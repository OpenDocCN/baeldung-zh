["```\r\n<dependency>\r\n    <groupId>io.debezium</groupId>\r\n    <artifactId>debezium-api</artifactId>\r\n    <version>1.4.2.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.debezium</groupId>\r\n    <artifactId>debezium-embedded</artifactId>\r\n    <version>1.4.2.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.debezium</groupId>\r\n    <artifactId>debezium-connector-mysql</artifactId>\r\n    <version>1.4.2.Final</version>\r\n</dependency>\r\n```","```\r\nversion: \"3.9\"\r\nservices:\r\n  # Install Source MySQL DB and setup the Customer database\r\n  mysql-1:\r\n    container_name: source-database\r\n    image: mysql\r\n    ports:\r\n      - 3305:3306\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: root\r\n      MYSQL_USER: user\r\n      MYSQL_PASSWORD: password\r\n      MYSQL_DATABASE: customerdb\r\n\r\n  # Install Target MySQL DB and setup the Customer database\r\n  mysql-2:\r\n    container_name: target-database\r\n    image: mysql\r\n    ports:\r\n      - 3306:3306\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: root\r\n      MYSQL_USER: user\r\n      MYSQL_PASSWORD: password\r\n      MYSQL_DATABASE: customerdb\r\n```","```\r\nCREATE TABLE customer\r\n(\r\n    id integer NOT NULL,\r\n    fullname character varying(255),\r\n    email character varying(255),\r\n    CONSTRAINT customer_pkey PRIMARY KEY (id)\r\n);\r\n```","```\r\n@Bean\r\npublic io.debezium.config.Configuration customerConnector() {\r\n    return io.debezium.config.Configuration.create()\r\n        .with(\"name\", \"customer-mysql-connector\")\r\n        .with(\"connector.class\", \"io.debezium.connector.mysql.MySqlConnector\")\r\n        .with(\"offset.storage\", \"org.apache.kafka.connect.storage.FileOffsetBackingStore\")\r\n        .with(\"offset.storage.file.filename\", \"/tmp/offsets.dat\")\r\n        .with(\"offset.flush.interval.ms\", \"60000\")\r\n        .with(\"database.hostname\", customerDbHost)\r\n        .with(\"database.port\", customerDbPort)\r\n        .with(\"database.user\", customerDbUsername)\r\n        .with(\"database.password\", customerDbPassword)\r\n        .with(\"database.dbname\", customerDbName)\r\n        .with(\"database.include.list\", customerDbName)\r\n        .with(\"include.schema.changes\", \"false\")\r\n        .with(\"database.server.id\", \"10181\")\r\n        .with(\"database.server.name\", \"customer-mysql-db-server\")\r\n        .with(\"database.history\", \"io.debezium.relational.history.FileDatabaseHistory\")\r\n        .with(\"database.history.file.filename\", \"/tmp/dbhistory.dat\")\r\n        .build();\r\n}\r\n```","```\r\nprivate DebeziumEngine<RecordChangeEvent<SourceRecord>> debeziumEngine;\r\n\r\npublic DebeziumListener(Configuration customerConnectorConfiguration, CustomerService customerService) {\r\n\r\n    this.debeziumEngine = DebeziumEngine.create(ChangeEventFormat.of(Connect.class))\r\n      .using(customerConnectorConfiguration.asProperties())\r\n      .notifying(this::handleEvent)\r\n      .build();\r\n\r\n    this.customerService = customerService;\r\n}\r\n```","```\r\nprivate void handleChangeEvent(RecordChangeEvent<SourceRecord> sourceRecordRecordChangeEvent) {\r\n    SourceRecord sourceRecord = sourceRecordRecordChangeEvent.record();\r\n    Struct sourceRecordChangeValue= (Struct) sourceRecord.value();\r\n\r\n    if (sourceRecordChangeValue != null) {\r\n        Operation operation = Operation.forCode((String) sourceRecordChangeValue.get(OPERATION));\r\n\r\n        if(operation != Operation.READ) {\r\n            String record = operation == Operation.DELETE ? BEFORE : AFTER;\r\n            Struct struct = (Struct) sourceRecordChangeValue.get(record);\r\n            Map<String, Object> payload = struct.schema().fields().stream()\r\n              .map(Field::name)\r\n              .filter(fieldName -> struct.get(fieldName) != null)\r\n              .map(fieldName -> Pair.of(fieldName, struct.get(fieldName)))\r\n              .collect(toMap(Pair::getKey, Pair::getValue));\r\n\r\n            this.customerService.replicateData(payload, operation);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate final Executor executor = Executors.newSingleThreadExecutor();\r\n\r\n@PostConstruct\r\nprivate void start() {\r\n    this.executor.execute(debeziumEngine);\r\n}\r\n\r\n@PreDestroy\r\nprivate void stop() throws IOException {\r\n    if (this.debeziumEngine != null) {\r\n        this.debeziumEngine.close();\r\n    }\r\n}\r\n```","```\r\nINSERT INTO customerdb.customer (id, fullname, email) VALUES (1, 'John Doe', '[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)')\r\n```","```\r\n23:57:57.897 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Key = 'Struct{id=1}' value = 'Struct{after=Struct{id=1,fullname=John Doe,[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)},source=Struct{version=1.4.2.Final,connector=mysql,name=customer-mysql-db-server,ts_ms=1617746277000,db=customerdb,table=customer,server_id=1,file=binlog.000007,pos=703,row=0,thread=19},op=c,ts_ms=1617746277422}'\r\nHibernate: insert into customer (email, fullname, id) values (?, ?, ?)\r\n23:57:58.095 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Updated Data: {fullname=John Doe, id=1, [[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)} with Operation: CREATE\r\n```","```\r\nid  fullname   email\r\n1  John Doe   [[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nUPDATE customerdb.customer t SET t.email = '[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)' WHERE t.id = 1\r\n```","```\r\n00:08:57.893 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Key = 'Struct{id=1}' value = 'Struct{before=Struct{id=1,fullname=John Doe,[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)},after=Struct{id=1,fullname=John Doe,[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)},source=Struct{version=1.4.2.Final,connector=mysql,name=customer-mysql-db-server,ts_ms=1617746937000,db=customerdb,table=customer,server_id=1,file=binlog.000007,pos=1040,row=0,thread=19},op=u,ts_ms=1617746937703}'\r\nHibernate: update customer set email=?, fullname=? where id=?\r\n00:08:57.938 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Updated Data: {fullname=John Doe, id=1, [[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)} with Operation: UPDATE\r\n```","```\r\nid  fullname   email\r\n1  John Doe   [[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nDELETE FROM customerdb.customer WHERE id = 1\r\n```","```\r\n00:12:16.892 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Key = 'Struct{id=1}' value = 'Struct{before=Struct{id=1,fullname=John Doe,[[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)},source=Struct{version=1.4.2.Final,connector=mysql,name=customer-mysql-db-server,ts_ms=1617747136000,db=customerdb,table=customer,server_id=1,file=binlog.000007,pos=1406,row=0,thread=19},op=d,ts_ms=1617747136640}'\r\nHibernate: delete from customer where id=?\r\n00:12:16.951 [pool-1-thread-1] INFO  c.b.l.d.listener.DebeziumListener - Updated Data: {fullname=John Doe, id=1, [[email protected]](/web/20221225105857/https://www.baeldung.com/cdn-cgi/l/email-protection)} with Operation: DELETE\r\n```","```\r\nselect * from customerdb.customer where id= 1\r\n0 rows retrieved\r\n```"]