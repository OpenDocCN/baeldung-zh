["```\r\npublic Path createTextFile() throws IOException {\t\t\r\n    byte[] content = IntStream.range(0, 10000)\r\n      .mapToObj(i -> i + System.lineSeparator())\r\n      .reduce(\"\", String::concat)\r\n      .getBytes(StandardCharsets.UTF_8);\r\n    Path filePath = Paths.get(\"\", \"target_link.txt\");\r\n    Files.write(filePath, content, CREATE, TRUNCATE_EXISTING);\r\n    return filePath;\t\t\r\n} \r\n```","```\r\npublic void createSymbolicLink() throws IOException {\r\n    Path target = createTextFile();\r\n    Path link = Paths.get(\".\",\"symbolic_link.txt\");\r\n    if (Files.exists(link)) {\r\n        Files.delete(link);\r\n    }\r\n    Files.createSymbolicLink(link, target);\r\n} \r\n```","```\r\npublic void createHardLink() throws IOException {\r\n    Path target = createTextFile();\r\n    Path link = Paths.get(\".\", \"hard_link.txt\");\r\n    if (Files.exists(link))Â {\r\n        Files.delete(link);\r\n    }\r\n    Files.createLink(link, target);\r\n} \r\n```","```\r\n 48K\ttarget_link.txt\r\n 48K\thard_link.txt\r\n4.0K\tsymbolic_link.txt \r\n```","```\r\npublic void printLinkFiles(Path path) throws IOException {\r\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(path)) {\r\n        for (Path file : stream) {\r\n            if (Files.isDirectory(file)) {\r\n                printLinkFiles(file);\r\n            } else if (Files.isSymbolicLink(file)) {\r\n                System.out.format(\"File link '%s' with target '%s' %n\", \r\n                  file, Files.readSymbolicLink(file));\r\n            }\r\n        }\r\n    }\r\n} \r\n```","```\r\nprintLinkFiles(Paths.get(\".\")); \r\n```","```\r\nFile link 'symbolic_link.txt' with target 'target_link.txt' \r\n```"]