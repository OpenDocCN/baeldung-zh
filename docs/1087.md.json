["```\r\nObject obj = new Object();\r\n```","```\r\n0: new           #2      // class java/lang/Object\r\n3: dup\r\n4: invokespecial #1      // Method java/lang/Object.\"<init>\":()V\r\n7: astore_1\r\n```","```\r\npublic class Person {\r\n\r\n    private String firstName = \"Foo\"; // <init>\r\n    private String lastName = \"Bar\"; // <init>\r\n\r\n    // <init>\r\n    {\r\n        System.out.println(\"Initializing...\");\r\n    }\r\n\r\n    // <init>\r\n    public Person(String firstName, String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    // <init>\r\n    public Person() {\r\n    }\r\n}\r\n```","```\r\npublic Person(java.lang.String, java.lang.String);\r\n  Code:\r\n     0: aload_0\r\n     1: invokespecial #1       // Method java/lang/Object.\"<init>\":()V\r\n     4: aload_0\r\n     5: ldc           #7       // String Foo\r\n     7: putfield      #9       // Field firstName:Ljava/lang/String;\r\n    10: aload_0\r\n    11: ldc           #15      // String Bar\r\n    13: putfield      #17      // Field lastName:Ljava/lang/String;\r\n    16: getstatic     #20      // Field java/lang/System.out:Ljava/io/PrintStream;\r\n    19: ldc           #26      // String Initializing...\r\n    21: invokevirtual #28      // Method java/io/PrintStream.println:(Ljava/lang/String;)V\r\n    24: aload_0\r\n    25: aload_1\r\n    26: putfield      #9       // Field firstName:Ljava/lang/String;\r\n    29: aload_0\r\n    30: aload_2\r\n    31: putfield      #17      // Field lastName:Ljava/lang/String;\r\n    34: return\r\n```","```\r\nPerson person = new Person(\"Brian\", \"Goetz\");\r\n```","```\r\n0: new           #7        // class Person\r\n3: dup\r\n4: ldc           #9        // String Brian\r\n6: ldc           #11       // String Goetz\r\n8: invokespecial #13       // Method Person.\"<init>\":(Ljava/lang/String;Ljava/lang/String;)V\r\n11: astore_1\r\n```","```\r\npublic class Person {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(Person.class); // <clinit>\r\n\r\n    // <clinit>\r\n    static {\r\n        System.out.println(\"Static Initializing...\");\r\n    }\r\n\r\n    // omitted\r\n}\r\n```"]