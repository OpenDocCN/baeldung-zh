["```\r\nstatic final Map<boolean[], Boolean> TEST_CASES_AND_EXPECTED = ImmutableMap.of(\r\n    new boolean[]{true, true, true}, true,\r\n    new boolean[]{true, true, false}, true,\r\n    new boolean[]{true, false, false}, false,\r\n    new boolean[]{false, false, false}, false\r\n); \r\n```","```\r\npublic static boolean twoOrMoreAreTrueByLoop(boolean a, boolean b, boolean c) {\r\n    int count = 0;\r\n    for (boolean i : new Boolean[] { a, b, c }) {\r\n        count += i ? 1 : 0;\r\n        if (count >= 2) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n} \r\n```","```\r\nTEST_CASES_AND_EXPECTED.forEach((array, expected) -> \r\n  assertThat(ThreeBooleans.twoOrMoreAreTrueByLoop(array[0], array[1], array[2])).isEqualTo(expected));\r\n```","```\r\npublic static boolean xOrMoreAreTrueByLoop(boolean[] booleans, int x) {\r\n    int count = 0;\r\n    for (boolean i : booleans) { \r\n        count += i ? 1 : 0;\r\n        if (count >= x) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n} \r\n```","```\r\npublic static boolean twoOrMoreAreTrueBySum(boolean a, boolean b, boolean c) {\r\n    return (a ? 1 : 0) + (b ? 1 : 0) + (c ? 1 : 0) >= 2;\r\n} \r\n```","```\r\nTEST_CASES_AND_EXPECTED.forEach((array, expected) -> \r\n  assertThat(ThreeBooleans.twoOrMoreAreTrueBySum(array[0], array[1], array[2])).isEqualTo(expected)); \r\n```","```\r\npublic static boolean xOrMoreAreTrueBySum(Boolean[] booleans, int x) {\r\n    return Arrays.stream(booleans)\r\n      .mapToInt(b -> Boolean.TRUE.equals(b) ? 1 : 0)\r\n      .sum() >= x;\r\n} \r\n```","```\r\npublic static boolean twoOrMoreAreTrueByOpeators(boolean a, boolean b, boolean c) {\r\n    return (a && b) || (a && c) || (b && c);\r\n}\r\n```","```\r\nTEST_CASES_AND_EXPECTED.forEach((array, expected) -> \r\n  assertThat(ThreeBooleans.twoOrMoreAreTrueByOpeators(array[0], array[1], array[2])).isEqualTo(expected)); \r\n```","```\r\n | C | !C\r\n------|---|----\r\n A  B | 1 | 1 \r\n A !B | 1 | 0\r\n!A !B | 0 | 0\r\n!A  B | 1 | 0\r\n```","```\r\npublic static boolean twoorMoreAreTrueByKarnaughMap(boolean a, boolean b, boolean c) {\r\n    return (c && (a || b)) || (a && b);\r\n} \r\n```","```\r\nTEST_CASES_AND_EXPECTED.forEach((array, expected) -> \r\n  assertThat(ThreeBooleans.twoorMoreAreTrueByKarnaughMap(array[0], array[1], array[2])).isEqualTo(expected)); \r\n```","```\r\npublic static boolean twoOrMoreAreTrueByXor(boolean a, boolean b, boolean c) {\r\n    return a ^ b ? c : a;\r\n} \r\n```","```\r\nTEST_CASES_AND_EXPECTED.forEach((array, expected) -> \r\n  assertThat(ThreeBooleans.twoOrMoreAreTrueByXor(array[0], array[1], array[2])).isEqualTo(expected)); \r\n```"]