["```\r\n@Entity\r\nclass Book {\r\n\r\n    @Id\r\n    Long id;\r\n    String title;\r\n    String author;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\n@Repository\r\nclass BookDao {\r\n\r\n    EntityManager em;\r\n\r\n    // constructor\r\n\r\n    List<Book> findBooksByAuthorNameAndTitle(String authorName, String title) {\r\n        CriteriaBuilder cb = em.getCriteriaBuilder();\r\n        CriteriaQuery<Book> cq = cb.createQuery(Book.class);\r\n\r\n        Root<Book> book = cq.from(Book.class);\r\n        Predicate authorNamePredicate = cb.equal(book.get(\"author\"), authorName);\r\n        Predicate titlePredicate = cb.like(book.get(\"title\"), \"%\" + title + \"%\");\r\n        cq.where(authorNamePredicate, titlePredicate);\r\n\r\n        TypedQuery<Book> query = em.createQuery(cq);\r\n        return query.getResultList();\r\n    }\r\n\r\n}\r\n```","```\r\ninterface BookRepositoryCustom {\r\n    List<Book> findBooksByAuthorNameAndTitle(String authorName, String title);\r\n}\r\n```","```\r\ninterface BookRepository extends JpaRepository<Book, Long>, BookRepositoryCustom {}\r\n```","```\r\n@Repository\r\nclass BookRepositoryImpl implements BookRepositoryCustom {\r\n\r\n    EntityManager em;\r\n\r\n    // constructor\r\n\r\n    @Override\r\n    List<Book> findBooksByAuthorNameAndTitle(String authorName, String title) {\r\n        // implementation\r\n    }\r\n\r\n}\r\n```","```\r\n@Override\r\nList<Book> findBooksByAuthorNameAndTitle(String authorName, String title) {\r\n    CriteriaBuilder cb = em.getCriteriaBuilder();\r\n    CriteriaQuery<Book> cq = cb.createQuery(Book.class);\r\n\r\n    Root<Book> book = cq.from(Book.class);\r\n    List<Predicate> predicates = new ArrayList<>();\r\n\r\n    if (authorName != null) {\r\n        predicates.add(cb.equal(book.get(\"author\"), authorName));\r\n    }\r\n    if (title != null) {\r\n        predicates.add(cb.like(book.get(\"title\"), \"%\" + title + \"%\"));\r\n    }\r\n    cq.where(predicates.toArray(new Predicate[0]));\r\n\r\n    return em.createQuery(cq).getResultList();\r\n}\r\n```","```\r\ninterface Specification<T> {\r\n    Predicate toPredicate(Root<T> root, CriteriaQuery query, CriteriaBuilder cb);\r\n}\r\n```","```\r\nstatic Specification<Book> hasAuthor(String author) {\r\n    return (book, cq, cb) -> cb.equal(book.get(\"author\"), author);\r\n}\r\n\r\nstatic Specification<Book> titleContains(String title) {\r\n    return (book, cq, cb) -> cb.like(book.get(\"title\"), \"%\" + title + \"%\");\r\n} \r\n```","```\r\ninterface BookRepository extends JpaRepository<Book, Long>, JpaSpecificationExecutor<Book> {}\r\n```","```\r\nbookRepository.findAll(hasAuthor(author));\r\n```","```\r\nbookRepository.findAll(where(hasAuthor(author)).and(titleContains(title)));\r\n```"]