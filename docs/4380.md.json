["```\r\nFoo foo = new Foo(\"foo\");\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nfoo = entityManager.find(Foo.class, foo.getId());\r\nassertThat(foo, notNullValue());\r\nentityManager.remove(foo);\r\nflushAndClear();\r\n\r\nassertThat(entityManager.find(Foo.class, foo.getId()), nullValue()); \r\n```","```\r\nvoid flushAndClear() {\r\n    entityManager.flush();\r\n    entityManager.clear();\r\n}\r\n```","```\r\n@Entity\r\npublic class Foo {\r\n    @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\r\n    private Bar bar;\r\n\r\n    // other mappings, getters and setters\r\n}\r\n```","```\r\nBar bar = new Bar(\"bar\");\r\nFoo foo = new Foo(\"foo\");\r\nfoo.setBar(bar);\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nfoo = entityManager.find(Foo.class, foo.getId());\r\nbar = entityManager.find(Bar.class, bar.getId());\r\nentityManager.remove(bar);\r\nflushAndClear();\r\n\r\nbar = entityManager.find(Bar.class, bar.getId());\r\nassertThat(bar, notNullValue());\r\n\r\nfoo = entityManager.find(Foo.class, foo.getId());\r\nfoo.setBar(null);\r\nentityManager.remove(bar);\r\nflushAndClear();\r\n\r\nassertThat(entityManager.find(Bar.class, bar.getId()), nullValue());\r\n```","```\r\nBar bar = new Bar(\"bar\");\r\nFoo foo = new Foo(\"foo\");\r\nfoo.setBar(bar);\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nfoo = entityManager.find(Foo.class, foo.getId());\r\nentityManager.remove(foo);\r\nflushAndClear();\r\n\r\nassertThat(entityManager.find(Foo.class, foo.getId()), nullValue());\r\nassertThat(entityManager.find(Bar.class, bar.getId()), nullValue());\r\n```","```\r\n@Entity\r\npublic class Bar {\r\n    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)\r\n    private List<Baz> bazList = new ArrayList<>();\r\n\r\n    // other mappings, getters and setters\r\n}\r\n```","```\r\nBar bar = new Bar(\"bar\");\r\nBaz baz = new Baz(\"baz\");\r\nbar.getBazList().add(baz);\r\nentityManager.persist(bar);\r\nflushAndClear();\r\n\r\nbar = entityManager.find(Bar.class, bar.getId());\r\nbaz = bar.getBazList().get(0);\r\nbar.getBazList().remove(baz);\r\nflushAndClear();\r\n\r\nassertThat(entityManager.find(Baz.class, baz.getId()), nullValue());\r\n```","```\r\nFoo foo = new Foo(\"foo\");\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nentityManager.createQuery(\"delete from Foo where id = :id\")\r\n  .setParameter(\"id\", foo.getId())\r\n  .executeUpdate();\r\n\r\nassertThat(entityManager.find(Foo.class, foo.getId()), nullValue());\r\n```","```\r\nFoo foo = new Foo(\"foo\");\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nentityManager.createNativeQuery(\"delete from FOO where ID = :id\")\r\n  .setParameter(\"id\", foo.getId())\r\n  .executeUpdate();\r\n\r\nassertThat(entityManager.find(Foo.class, foo.getId()), nullValue());\r\n```","```\r\n@Entity\r\n@Where(clause = \"DELETED = 0\")\r\npublic class Foo {\r\n    // other mappings\r\n\r\n    @Column(name = \"DELETED\")\r\n    private Integer deleted = 0;\r\n\r\n    // getters and setters\r\n\r\n    public void setDeleted() {\r\n        this.deleted = 1;\r\n    }\r\n}\r\n```","```\r\nFoo foo = new Foo(\"foo\");\r\nentityManager.persist(foo);\r\nflushAndClear();\r\n\r\nfoo = entityManager.find(Foo.class, foo.getId());\r\nfoo.setDeleted();\r\nflushAndClear();\r\n\r\nassertThat(entityManager.find(Foo.class, foo.getId()), nullValue());\r\n```"]