["```\r\nclass Node {\r\n    int value;\r\n    Node left;\r\n    Node right;\r\n\r\n    Node(int value) {\r\n        this.value = value;\r\n        right = null;\r\n        left = null;\r\n    }\r\n}\r\n```","```\r\npublic class BinaryTree {\r\n\r\n    Node root;\r\n\r\n    // ...\r\n}\r\n```","```\r\nprivate Node addRecursive(Node current, int value) {\r\n    if (current == null) {\r\n        return new Node(value);\r\n    }\r\n\r\n    if (value < current.value) {\r\n        current.left = addRecursive(current.left, value);\r\n    } else if (value > current.value) {\r\n        current.right = addRecursive(current.right, value);\r\n    } else {\r\n        // value already exists\r\n        return current;\r\n    }\r\n\r\n    return current;\r\n}\r\n```","```\r\npublic void add(int value) {\r\n    root = addRecursive(root, value);\r\n}\r\n```","```\r\nprivate BinaryTree createBinaryTree() {\r\n    BinaryTree bt = new BinaryTree();\r\n\r\n    bt.add(6);\r\n    bt.add(4);\r\n    bt.add(8);\r\n    bt.add(3);\r\n    bt.add(5);\r\n    bt.add(7);\r\n    bt.add(9);\r\n\r\n    return bt;\r\n}\r\n```","```\r\nprivate boolean containsNodeRecursive(Node current, int value) {\r\n    if (current == null) {\r\n        return false;\r\n    } \r\n    if (value == current.value) {\r\n        return true;\r\n    } \r\n    return value < current.value\r\n      ? containsNodeRecursive(current.left, value)\r\n      : containsNodeRecursive(current.right, value);\r\n}\r\n```","```\r\npublic boolean containsNode(int value) {\r\n    return containsNodeRecursive(root, value);\r\n}\r\n```","```\r\n@Test\r\npublic void givenABinaryTree_WhenAddingElements_ThenTreeContainsThoseElements() {\r\n    BinaryTree bt = createBinaryTree();\r\n\r\n    assertTrue(bt.containsNode(6));\r\n    assertTrue(bt.containsNode(4));\r\n\r\n    assertFalse(bt.containsNode(1));\r\n}\r\n```","```\r\nprivate Node deleteRecursive(Node current, int value) {\r\n    if (current == null) {\r\n        return null;\r\n    }\r\n\r\n    if (value == current.value) {\r\n        // Node to delete found\r\n        // ... code to delete the node will go here\r\n    } \r\n    if (value < current.value) {\r\n        current.left = deleteRecursive(current.left, value);\r\n        return current;\r\n    }\r\n    current.right = deleteRecursive(current.right, value);\r\n    return current;\r\n}\r\n```","```\r\nif (current.left == null && current.right == null) {\r\n    return null;\r\n}\r\n```","```\r\nif (current.right == null) {\r\n    return current.left;\r\n}\r\n\r\nif (current.left == null) {\r\n    return current.right;\r\n}\r\n```","```\r\nprivate int findSmallestValue(Node root) {\r\n    return root.left == null ? root.value : findSmallestValue(root.left);\r\n}\r\n```","```\r\nint smallestValue = findSmallestValue(current.right);\r\ncurrent.value = smallestValue;\r\ncurrent.right = deleteRecursive(current.right, smallestValue);\r\nreturn current;\r\n```","```\r\npublic void delete(int value) {\r\n    root = deleteRecursive(root, value);\r\n}\r\n```","```\r\n@Test\r\npublic void givenABinaryTree_WhenDeletingElements_ThenTreeDoesNotContainThoseElements() {\r\n    BinaryTree bt = createBinaryTree();\r\n\r\n    assertTrue(bt.containsNode(9));\r\n    bt.delete(9);\r\n    assertFalse(bt.containsNode(9));\r\n}\r\n```","```\r\npublic void traverseInOrder(Node node) {\r\n    if (node != null) {\r\n        traverseInOrder(node.left);\r\n        System.out.print(\" \" + node.value);\r\n        traverseInOrder(node.right);\r\n    }\r\n}\r\n```","```\r\n3 4 5 6 7 8 9\r\n```","```\r\npublic void traversePreOrder(Node node) {\r\n    if (node != null) {\r\n        System.out.print(\" \" + node.value);\r\n        traversePreOrder(node.left);\r\n        traversePreOrder(node.right);\r\n    }\r\n}\r\n```","```\r\n6 4 3 5 8 7 9\r\n```","```\r\npublic void traversePostOrder(Node node) {\r\n    if (node != null) {\r\n        traversePostOrder(node.left);\r\n        traversePostOrder(node.right);\r\n        System.out.print(\" \" + node.value);\r\n    }\r\n}\r\n```","```\r\n3 5 4 7 9 8 6\r\n```","```\r\npublic void traverseLevelOrder() {\r\n    if (root == null) {\r\n        return;\r\n    }\r\n\r\n    Queue<Node> nodes = new LinkedList<>();\r\n    nodes.add(root);\r\n\r\n    while (!nodes.isEmpty()) {\r\n\r\n        Node node = nodes.remove();\r\n\r\n        System.out.print(\" \" + node.value);\r\n\r\n        if (node.left != null) {\r\n            nodes.add(node.left);\r\n        }\r\n\r\n        if (node.right != null) {\r\n            nodes.add(node.right);\r\n        }\r\n    }\r\n}\r\n```","```\r\n6 4 8 3 5 7 9\r\n```"]