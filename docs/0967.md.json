["```\r\nimport static java.util.stream.Collectors.*;\r\n```","```\r\nimport static java.util.stream.Collectors.toList;\r\nimport static java.util.stream.Collectors.toMap;\r\nimport static java.util.stream.Collectors.toSet;\r\n```","```\r\nList<String> givenList = Arrays.asList(\"a\", \"bb\", \"ccc\", \"dd\");\r\n```","```\r\nList<String> result = givenList.stream()\r\n  .collect(toList());\r\n```","```\r\nList<String> result = givenList.stream()\r\n  .collect(toUnmodifiableList());\r\n```","```\r\nassertThatThrownBy(() -> result.add(\"foo\"))\r\n  .isInstanceOf(UnsupportedOperationException.class);\r\n```","```\r\nSet<String> result = givenList.stream()\r\n  .collect(toSet());\r\n```","```\r\nList<String> listWithDuplicates = Arrays.asList(\"a\", \"bb\", \"c\", \"d\", \"bb\");\r\nSet<String> result = listWithDuplicates.stream().collect(toSet());\r\nassertThat(result).hasSize(4);\r\n```","```\r\nSet<String> result = givenList.stream()\r\n  .collect(toUnmodifiableSet());\r\n```","```\r\nassertThatThrownBy(() -> result.add(\"foo\"))\r\n  .isInstanceOf(UnsupportedOperationException.class);\r\n```","```\r\nList<String> result = givenList.stream()\r\n  .collect(toCollection(LinkedList::new))\r\n```","```\r\nMap<String, Integer> result = givenList.stream()\r\n  .collect(toMap(Function.identity(), String::length))\r\n```","```\r\nList<String> listWithDuplicates = Arrays.asList(\"a\", \"bb\", \"c\", \"d\", \"bb\");\r\nassertThatThrownBy(() -> {\r\n    listWithDuplicates.stream().collect(toMap(Function.identity(), String::length));\r\n}).isInstanceOf(IllegalStateException.class);\r\n```","```\r\nMap<String, Integer> result = givenList.stream()\r\n  .collect(toMap(Function.identity(), String::length, (item, identicalItem) -> item));\r\n```","```\r\nMap<String, Integer> result = givenList.stream()\r\n  .collect(toMap(Function.identity(), String::length))\r\n```","```\r\nassertThatThrownBy(() -> result.put(\"foo\", 3))\r\n  .isInstanceOf(UnsupportedOperationException.class);\r\n```","```\r\nList<String> result = givenList.stream()\r\n  .collect(collectingAndThen(toList(), ImmutableList::copyOf))\r\n```","```\r\nString result = givenList.stream() .collect(joining()); \r\n```","```\r\n\"abbcccdd\"\r\n```","```\r\nString result = givenList.stream()\r\n  .collect(joining(\" \"));\r\n```","```\r\n\"a bb ccc dd\"\r\n```","```\r\nString result = givenList.stream()\r\n  .collect(joining(\" \", \"PRE-\", \"-POST\"));\r\n```","```\r\n\"PRE-a bb ccc dd-POST\"\r\n```","```\r\nLong result = givenList.stream()\r\n  .collect(counting());\r\n```","```\r\nDoubleSummaryStatistics result = givenList.stream()\r\n  .collect(summarizingDouble(String::length));\r\n```","```\r\nassertThat(result.getAverage()).isEqualTo(2);\r\nassertThat(result.getCount()).isEqualTo(4);\r\nassertThat(result.getMax()).isEqualTo(3);\r\nassertThat(result.getMin()).isEqualTo(1);\r\nassertThat(result.getSum()).isEqualTo(8);\r\n```","```\r\nDouble result = givenList.stream()\r\n  .collect(averagingDouble(String::length));\r\n```","```\r\nDouble result = givenList.stream()\r\n  .collect(summingDouble(String::length));\r\n```","```\r\nOptional<String> result = givenList.stream()\r\n  .collect(maxBy(Comparator.naturalOrder()));\r\n```","```\r\nMap<Integer, Set<String>> result = givenList.stream()\r\n  .collect(groupingBy(String::length, toSet()));\r\n```","```\r\nassertThat(result)\r\n  .containsEntry(1, newHashSet(\"a\"))\r\n  .containsEntry(2, newHashSet(\"bb\", \"dd\"))\r\n  .containsEntry(3, newHashSet(\"ccc\")); \r\n```","```\r\nMap<Boolean, List<String>> result = givenList.stream()\r\n  .collect(partitioningBy(s -> s.length() > 2))\r\n```","```\r\n{false=[\"a\", \"bb\", \"dd\"], true=[\"ccc\"]} \r\n```","```\r\nList<Integer> numbers = Arrays.asList(42, 4, 2, 24);\r\nOptional<Integer> min = numbers.stream().collect(minBy(Integer::compareTo));\r\nOptional<Integer> max = numbers.stream().collect(maxBy(Integer::compareTo));\r\n// do something useful with min and max\r\n```","```\r\nnumbers.stream().collect(teeing(\r\n  minBy(Integer::compareTo), // The first collector\r\n  maxBy(Integer::compareTo), // The second collector\r\n  (min, max) -> // Receives the result from those collectors and combines them\r\n));\r\n```","```\r\npublic interface Collector<T, A, R> {...}\r\n```","```\r\nprivate class ImmutableSetCollector<T>\r\n  implements Collector<T, ImmutableSet.Builder<T>, ImmutableSet<T>> {...}\r\n```","```\r\n@Override\r\npublic Supplier<ImmutableSet.Builder<T>> supplier() {\r\n    return ImmutableSet::builder;\r\n} \r\n```","```\r\n@Override\r\npublic BiConsumer<ImmutableSet.Builder<T>, T> accumulator() {\r\n    return ImmutableSet.Builder::add;\r\n}\r\n```","```\r\n@Override\r\npublic BinaryOperator<ImmutableSet.Builder<T>> combiner() {\r\n    return (left, right) -> left.addAll(right.build());\r\n}\r\n```","```\r\n@Override\r\npublic Function<ImmutableSet.Builder<T>, ImmutableSet<T>> finisher() {\r\n    return ImmutableSet.Builder::build;\r\n}\r\n```","```\r\n@Override public Set<Characteristics> characteristics() {\r\n    return Sets.immutableEnumSet(Characteristics.UNORDERED);\r\n}\r\n```","```\r\npublic class ImmutableSetCollector<T>\r\n  implements Collector<T, ImmutableSet.Builder<T>, ImmutableSet<T>> {\r\n\r\n@Override\r\npublic Supplier<ImmutableSet.Builder<T>> supplier() {\r\n    return ImmutableSet::builder;\r\n}\r\n\r\n@Override\r\npublic BiConsumer<ImmutableSet.Builder<T>, T> accumulator() {\r\n    return ImmutableSet.Builder::add;\r\n}\r\n\r\n@Override\r\npublic BinaryOperator<ImmutableSet.Builder<T>> combiner() {\r\n    return (left, right) -> left.addAll(right.build());\r\n}\r\n\r\n@Override\r\npublic Function<ImmutableSet.Builder<T>, ImmutableSet<T>> finisher() {\r\n    return ImmutableSet.Builder::build;\r\n}\r\n\r\n@Override\r\npublic Set<Characteristics> characteristics() {\r\n    return Sets.immutableEnumSet(Characteristics.UNORDERED);\r\n}\r\n\r\npublic static <T> ImmutableSetCollector<T> toImmutableSet() {\r\n    return new ImmutableSetCollector<>();\r\n}\r\n```","```\r\nList<String> givenList = Arrays.asList(\"a\", \"bb\", \"ccc\", \"dddd\");\r\n\r\nImmutableSet<String> result = givenList.stream()\r\n  .collect(toImmutableSet());\r\n```"]