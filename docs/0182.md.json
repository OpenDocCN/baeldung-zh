["```\r\n@RestController\r\n@RequestMapping(\"/large-file\")\r\npublic class LargeFileController {\r\n\r\n    @GetMapping\r\n    ResponseEntity<Resource> get() {\r\n        return ResponseEntity.ok()\r\n          .body(new FileSystemResource(Paths.get(\"/tmp/large.dat\")));\r\n    }\r\n}\r\n```","```\r\nfallocate -l 128M /tmp/large.dat\r\n```","```\r\npublic class LimitedFileDownloadWebClient {\r\n\r\n    public static long fetch(WebClient client, String destination) {\r\n        Mono<byte[]> mono = client.get()\r\n          .retrieve()\r\n          .bodyToMono(byte[].class);\r\n\r\n        byte[] bytes = mono.block();\r\n\r\n        Path path = Paths.get(destination);\r\n        Files.write(path, bytes);\r\n        return bytes.length;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic static void main(String... args) {\r\n    String baseUrl = args[0];\r\n    String destination = args[1];\r\n\r\n    WebClient client = WebClient.builder()\r\n      .baseUrl(baseUrl)\r\n      .exchangeStrategies(useMaxMemory())\r\n      .build();\r\n\r\n    long bytes = fetch(client, destination);\r\n    System.out.printf(\"downloaded %d bytes\", bytes);\r\n}\r\n```","```\r\nprivate static ExchangeStrategies useMaxMemory() {\r\n    long totalMemory = Runtime.getRuntime().maxMemory();\r\n\r\n    return ExchangeStrategies.builder()\r\n      .codecs(configurer -> configurer.defaultCodecs()\r\n        .maxInMemorySize((int) totalMemory)\r\n      )\r\n      .build();\r\n}\r\n```","```\r\nlimitedClient='com.baeldung.streamlargefile.client.LimitedFileDownloadWebClient' \r\nendpoint='http://localhost:8081/large-file' \r\njava -Xmx256m -cp /tmp/app.jar $limitedClient $endpoint /tmp/download.dat \r\n```","```\r\ndownloaded 134217728 bytes\r\n```","```\r\n$ java -Xmx64m -cp /tmp/app.jar $limitedClient $endpoint /tmp/download.dat\r\nreactor.netty.ReactorNetty$InternalNettyException: java.lang.OutOfMemoryError: Direct buffer memory \r\n```","```\r\npublic class LargeFileDownloadWebClient {\r\n\r\n    public static long fetch(WebClient client, String destination) {\r\n        Flux<DataBuffer> flux = client.get()\r\n          .retrieve()\r\n          .bodyToFlux(DataBuffer.class);\r\n\r\n        Path path = Paths.get(destination);\r\n        DataBufferUtils.write(flux, path)\r\n          .block();\r\n\r\n        return Files.size(path);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic static void main(String... args) {\r\n    String baseUrl = args[0];\r\n    String destination = args[1];\r\n\r\n    WebClient client = WebClient.create(baseUrl);\r\n\r\n    long bytes = fetch(client, destination);\r\n    System.out.printf(\"downloaded %d bytes\", bytes);\r\n}\r\n```","```\r\nclient='com.baeldung.streamlargefile.client.LargeFileDownloadWebClient'\r\njava -Xmx32m -cp /tmp/app.jar $client $endpoint /tmp/download.dat\r\n```","```\r\ndownloaded 134217728 bytes\r\n```"]