["```\r\n<dependency>\r\n    <groupId>org.spockframework</groupId>\r\n    <artifactId>spock-core</artifactId>\r\n    <version>1.0-groovy-2.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy-all</artifactId>\r\n    <version>2.4.7</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.gmavenplus</groupId>\r\n    <artifactId>gmavenplus-plugin</artifactId>\r\n    <version>1.5</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>compile</goal>\r\n                <goal>testCompile</goal>\r\n            </goals>\r\n        </execution>\r\n     </executions>\r\n</plugin>\r\n```","```\r\nclass FirstSpecification extends Specification {\r\n\r\n}\r\n```","```\r\ndef \"one plus one should equal two\"() {\r\n  expect:\r\n  1 + 1 == 2\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoAndTwo_whenAdding_thenResultIsFour() {\r\n   // Given\r\n   int first = 2;\r\n   int second = 4;\r\n\r\n   // When\r\n   int result = 2 + 2;\r\n\r\n   // Then\r\n   assertTrue(result == 4)\r\n}\r\n```","```\r\ndef \"two plus two should equal four\"() {\r\n    given:\r\n        int left = 2\r\n        int right = 2\r\n\r\n    when:\r\n        int result = left + right\r\n\r\n    then:\r\n        result == 4\r\n}\r\n```","```\r\ndef \"Should be able to remove from list\"() {\r\n    given:\r\n        def list = [1, 2, 3, 4]\r\n\r\n    when:\r\n        list.remove(0)\r\n\r\n    then:\r\n        list == [2, 3, 4]\r\n}\r\n```","```\r\nCondition not satisfied:\r\n\r\nlist == [1, 3, 4]\r\n|    |\r\n|    false\r\n[2, 3, 4]\r\n <Click to see difference>\r\n\r\nat FirstSpecification.Should be able to remove from list(FirstSpecification.groovy:30)\r\n```","```\r\ndef \"Should get an index out of bounds when removing a non-existent item\"() {\r\n    given:\r\n        def list = [1, 2, 3, 4]\r\n\r\n    when:\r\n        list.remove(20)\r\n\r\n    then:\r\n        thrown(IndexOutOfBoundsException)\r\n        list.size() == 4\r\n}\r\n```","```\r\n@RunWith(Parameterized.class)\r\npublic class FibonacciTest {\r\n    @Parameters\r\n    public static Collection<Object[]> data() {\r\n        return Arrays.asList(new Object[][] {     \r\n          { 1, 1 }, { 2, 4 }, { 3, 9 }  \r\n        });\r\n    }\r\n\r\n    private int input;\r\n\r\n    private int expected;\r\n\r\n    public FibonacciTest (int input, int expected) {\r\n        this.input = input;\r\n        this.expected = expected;\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        assertEquals(fExpected, Math.pow(3, 2));\r\n    }\r\n}\r\n```","```\r\ndef \"numbers to the power of two\"(int a, int b, int c) {\r\n  expect:\r\n      Math.pow(a, b) == c\r\n\r\n  where:\r\n      a | b | c\r\n      1 | 2 | 1\r\n      2 | 2 | 4\r\n      3 | 2 | 9\r\n  }\r\n```","```\r\nCondition not satisfied:\r\n\r\nMath.pow(a, b) == c\r\n     |   |  |  |  |\r\n     4.0 2  2  |  1\r\n               false\r\n\r\nExpected :1\r\n\r\nActual   :4.0\r\n```","```\r\nPaymentGateway paymentGateway = Mock()\r\n```","```\r\ndef paymentGateway = Mock(PaymentGateway)\r\n```","```\r\nwhen:\r\n    def result = paymentGateway.makePayment(12.99)\r\n\r\nthen:\r\n    result == false\r\n```","```\r\ngiven:\r\n    paymentGateway.makePayment(20) >> true\r\n\r\nwhen:\r\n    def result = paymentGateway.makePayment(20)\r\n\r\nthen:\r\n    result == true\r\n```","```\r\npaymentGateway.makePayment(_) >> true\r\n```","```\r\npaymentGateway.makePayment(_) >>> [true, true, false, true]\r\n```","```\r\ndef \"Should verify notify was called\"() {\r\n    given:\r\n        def notifier = Mock(Notifier)\r\n\r\n    when:\r\n        notifier.notify('foo')\r\n\r\n    then:\r\n        1 * notifier.notify('foo')\r\n} \r\n```","```\r\n2 * notifier.notify('foo')\r\n```","```\r\nToo few invocations for:\r\n\r\n2 * notifier.notify('foo')   (1 invocation)\r\n```","```\r\n2 * notifier.notify(_)\r\n```","```\r\n2 * notifier.notify(!'foo')\r\n```"]