["```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\nFile file = FileUtils.getFile(getClass().getClassLoader()\r\n  .getResource(\"fileTest.txt\")\r\n  .getPath());\r\nFile tempDir = FileUtils.getTempDirectory();\r\nFileUtils.copyFileToDirectory(file, tempDir);\r\nFile newTempFile = FileUtils.getFile(tempDir, file.getName());\r\nString data = FileUtils.readFileToString(newTempFile,\r\n  Charset.defaultCharset());\r\n```","```\r\nString fullPath = FilenameUtils.getFullPath(path);\r\nString extension = FilenameUtils.getExtension(path);\r\nString baseName = FilenameUtils.getBaseName(path);\r\n```","```\r\nlong freeSpace = FileSystemUtils.freeSpaceKb(\"/\");\r\n```","```\r\nString str = \"Hello World.\";\r\nByteArrayInputStream inputStream = new ByteArrayInputStream(str.getBytes());\r\nByteArrayOutputStream outputStream1 = new ByteArrayOutputStream();\r\nByteArrayOutputStream outputStream2 = new ByteArrayOutputStream();\r\n\r\nFilterOutputStream teeOutputStream\r\n  = new TeeOutputStream(outputStream1, outputStream2);\r\nnew TeeInputStream(inputStream, teeOutputStream, true)\r\n  .read(new byte[str.length()]);\r\n\r\nassertEquals(str, String.valueOf(outputStream1));\r\nassertEquals(str, String.valueOf(outputStream2));\r\n```","```\r\n@Test\r\npublic void whenGetFilewith_ANDFileFilter_thenFind_sample_txt()\r\n  throws IOException {\r\n\r\n    String path = getClass().getClassLoader()\r\n      .getResource(\"fileTest.txt\")\r\n      .getPath();\r\n    File dir = FileUtils.getFile(FilenameUtils.getFullPath(path));\r\n\r\n    assertEquals(\"sample.txt\",\r\n      dir.list(new AndFileFilter(\r\n        new WildcardFileFilter(\"*ple*\", IOCase.INSENSITIVE),\r\n        new SuffixFileFilter(\"txt\")))[0]);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSortDirWithPathFileComparator_thenFirstFile_aaatxt() \r\n  throws IOException {\r\n\r\n    PathFileComparator pathFileComparator = new PathFileComparator(\r\n      IOCase.INSENSITIVE);\r\n    String path = FilenameUtils.getFullPath(getClass()\r\n      .getClassLoader()\r\n      .getResource(\"fileTest.txt\")\r\n      .getPath());\r\n    File dir = new File(path);\r\n    File[] files = dir.listFiles();\r\n\r\n    pathFileComparator.sort(files);\r\n\r\n    assertEquals(\"aaa.txt\", files[0].getName());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSizeFileComparator_thenLargerFile_large()\r\n  throws IOException {\r\n\r\n    SizeFileComparator sizeFileComparator = new SizeFileComparator();\r\n    File largerFile = FileUtils.getFile(getClass().getClassLoader()\r\n      .getResource(\"fileTest.txt\")\r\n      .getPath());\r\n    File smallerFile = FileUtils.getFile(getClass().getClassLoader()\r\n      .getResource(\"sample.txt\")\r\n      .getPath());\r\n\r\n    int i = sizeFileComparator.compare(largerFile, smallerFile);\r\n\r\n    Assert.assertTrue(i > 0);\r\n}\r\n```","```\r\nFileAlterationObserver observer = new FileAlterationObserver(folder);\r\nFileAlterationMonitor monitor = new FileAlterationMonitor(5000);\r\n\r\nFileAlterationListener fal = new FileAlterationListenerAdaptor() {\r\n\r\n    @Override\r\n    public void onFileCreate(File file) {\r\n        // on create action\r\n    }\r\n\r\n    @Override\r\n    public void onFileDelete(File file) {\r\n        // on delete action\r\n    }\r\n};\r\n\r\nobserver.addListener(fal);\r\nmonitor.addObserver(observer);\r\nmonitor.start();\r\n```"]