["```\r\n<dependency>\r\n    <groupId>redis.clients</groupId>\r\n    <artifactId>jedis</artifactId>\r\n    <version>2.8.1</version>\r\n</dependency> \r\n```","```\r\nJedis jedis = new Jedis();\r\n```","```\r\njedis.set(\"events/city/rome\", \"32,15,223,828\");\r\nString cachedResponse = jedis.get(\"events/city/rome\");\r\n```","```\r\njedis.lpush(\"queue#tasks\", \"firstTask\");\r\njedis.lpush(\"queue#tasks\", \"secondTask\");\r\n\r\nString task = jedis.rpop(\"queue#tasks\");\r\n```","```\r\njedis.sadd(\"nicknames\", \"nickname#1\");\r\njedis.sadd(\"nicknames\", \"nickname#2\");\r\njedis.sadd(\"nicknames\", \"nickname#1\");\r\n\r\nSet<String> nicknames = jedis.smembers(\"nicknames\");\r\nboolean exists = jedis.sismember(\"nicknames\", \"nickname#1\");\r\n```","```\r\njedis.hset(\"user#1\", \"name\", \"Peter\");\r\njedis.hset(\"user#1\", \"job\", \"politician\");\r\n\r\nString name = jedis.hget(\"user#1\", \"name\");\r\n\r\nMap<String, String> fields = jedis.hgetAll(\"user#1\");\r\nString job = fields.get(\"job\");\r\n```","```\r\nMap<String, Double> scores = new HashMap<>();\r\n\r\nscores.put(\"PlayerOne\", 3000.0);\r\nscores.put(\"PlayerTwo\", 1500.0);\r\nscores.put(\"PlayerThree\", 8200.0);\r\n\r\nscores.entrySet().forEach(playerScore -> {\r\n    jedis.zadd(key, playerScore.getValue(), playerScore.getKey());\r\n});\r\n\r\nString player = jedis.zrevrange(\"ranking\", 0, 1).iterator().next();\r\nlong rank = jedis.zrevrank(\"ranking\", \"PlayerOne\");\r\n```","```\r\nString friendsPrefix = \"friends#\";\r\nString userOneId = \"4352523\";\r\nString userTwoId = \"5552321\";\r\n\r\nTransaction t = jedis.multi();\r\nt.sadd(friendsPrefix + userOneId, userTwoId);\r\nt.sadd(friendsPrefix + userTwoId, userOneId);\r\nt.exec();\r\n```","```\r\njedis.watch(\"friends#deleted#\" + userOneId);\r\n```","```\r\nString userOneId = \"4352523\";\r\nString userTwoId = \"4849888\";\r\n\r\nPipeline p = jedis.pipelined();\r\np.sadd(\"searched#\" + userOneId, \"paris\");\r\np.zadd(\"ranking\", 126, userOneId);\r\np.zadd(\"ranking\", 325, userTwoId);\r\nResponse<Boolean> pipeExists = p.sismember(\"searched#\" + userOneId, \"paris\");\r\nResponse<Set<String>> pipeRanking = p.zrange(\"ranking\", 0, -1);\r\np.sync();\r\n\r\nString exists = pipeExists.get();\r\nSet<String> ranking = pipeRanking.get();\r\n```","```\r\nJedis jSubscriber = new Jedis();\r\njSubscriber.subscribe(new JedisPubSub() {\r\n    @Override\r\n    public void onMessage(String channel, String message) {\r\n        // handle message\r\n    }\r\n}, \"channel\");\r\n```","```\r\nJedis jPublisher = new Jedis();\r\njPublisher.publish(\"channel\", \"test message\");\r\n```","```\r\nfinal JedisPoolConfig poolConfig = buildPoolConfig();\r\nJedisPool jedisPool = new JedisPool(poolConfig, \"localhost\");\r\n\r\nprivate JedisPoolConfig buildPoolConfig() {\r\n    final JedisPoolConfig poolConfig = new JedisPoolConfig();\r\n    poolConfig.setMaxTotal(128);\r\n    poolConfig.setMaxIdle(128);\r\n    poolConfig.setMinIdle(16);\r\n    poolConfig.setTestOnBorrow(true);\r\n    poolConfig.setTestOnReturn(true);\r\n    poolConfig.setTestWhileIdle(true);\r\n    poolConfig.setMinEvictableIdleTimeMillis(Duration.ofSeconds(60).toMillis());\r\n    poolConfig.setTimeBetweenEvictionRunsMillis(Duration.ofSeconds(30).toMillis());\r\n    poolConfig.setNumTestsPerEvictionRun(3);\r\n    poolConfig.setBlockWhenExhausted(true);\r\n    return poolConfig;\r\n}\r\n```","```\r\ntry (Jedis jedis = jedisPool.getResource()) {\r\n    // do operations with jedis resource\r\n}\r\n```","```\r\ntry (JedisCluster jedisCluster = new JedisCluster(new HostAndPort(\"localhost\", 6379))) {\r\n    // use the jedisCluster resource as if it was a normal Jedis resource\r\n} catch (IOException e) {}\r\n```"]