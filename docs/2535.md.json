["```\r\npublic class Message {\r\n    private int id;\r\n    private double data;\r\n\r\n    // constructors and getter/setters\r\n}\r\n```","```\r\npublic class DataQueue {\r\n    private final Queue<Message> queue = new LinkedList<>();\r\n    private final int maxSize;\r\n    private final Object FULL_QUEUE = new Object();\r\n    private final Object EMPTY_QUEUE = new Object();\r\n\r\n    DataQueue(int maxSize) {\r\n        this.maxSize = maxSize;\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\npublic void waitOnFull() throws InterruptedException {\r\n    synchronized (FULL_QUEUE) {\r\n        FULL_QUEUE.wait();\r\n    }\r\n} \r\n```","```\r\npublic void notifyAllForFull() {\r\n    synchronized (FULL_QUEUE) {\r\n        FULL_QUEUE.notifyAll();\r\n    }\r\n}\r\n```","```\r\npublic void waitOnEmpty() throws InterruptedException {\r\n    synchronized (EMPTY_QUEUE) {\r\n        EMPTY_QUEUE.wait();\r\n    }\r\n}\r\n```","```\r\npublic void notifyAllForEmpty() {\r\n    synchronized (EMPTY_QUEUE) {\r\n        EMPTY_QUEUE.notify();\r\n    }\r\n}\r\n```","```\r\npublic void add(Message message) {\r\n    synchronized (queue) {\r\n        queue.add(message);\r\n    }\r\n}\r\n```","```\r\npublic Message remove() {\r\n    synchronized (queue) {\r\n        return queue.poll();\r\n    }\r\n}\r\n```","```\r\npublic class Producer implements Runnable {\r\n    private final DataQueue dataQueue;\r\n    private volatile boolean runFlag;\r\n\r\n    public Producer(DataQueue dataQueue) {\r\n        this.dataQueue = dataQueue;\r\n        runFlag = true;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        produce();\r\n    }\r\n\r\n    // Other methods\r\n} \r\n```","```\r\npublic void produce() {\r\n    while (runFlag) {\r\n        Message message = generateMessage();\r\n        while (dataQueue.isFull()) {\r\n            try {\r\n                dataQueue.waitOnFull();\r\n            } catch (InterruptedException e) {\r\n                break;\r\n            }\r\n        }\r\n        if (!runFlag) {\r\n            break;\r\n        }\r\n        dataQueue.add(message);\r\n        dataQueue.notifyAllForEmpty();\r\n    }\r\n}\r\n```","```\r\npublic void stop() {\r\n    runFlag = false;\r\n    dataQueue.notifyAllForFull();\r\n}\r\n```","```\r\npublic class Consumer implements Runnable {\r\n    private final DataQueue dataQueue;\r\n    private volatile boolean runFlag;\r\n\r\n    public Consumer(DataQueue dataQueue) {\r\n        this.dataQueue = dataQueue;\r\n        runFlag = true;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        consume();\r\n    }\r\n\r\n    // Other methods\r\n} \r\n```","```\r\npublic void consume() {\r\n    while (runFlag) {\r\n        Message message;\r\n        if (dataQueue.isEmpty()) {\r\n            try {\r\n                dataQueue.waitOnEmpty();\r\n            } catch (InterruptedException e) {\r\n                break;\r\n            }\r\n        }\r\n        if (!runFlag) {\r\n            break;\r\n        }\r\n        message = dataQueue.remove();\r\n        dataQueue.notifyAllForFull();\r\n        useMessage(message);\r\n    }\r\n}\r\n```","```\r\npublic void stop() {\r\n    runFlag = false;\r\n    dataQueue.notifyAllForEmpty();\r\n}\r\n```","```\r\nDataQueue dataQueue = new DataQueue(MAX_QUEUE_CAPACITY); \r\n```","```\r\nProducer producer = new Producer(dataQueue);\r\nThread producerThread = new Thread(producer);\r\n```","```\r\nConsumer consumer = new Consumer(dataQueue);\r\nThread consumerThread = new Thread(consumer);\r\n```","```\r\nproducerThread.start();\r\nconsumerThread.start();\r\n```","```\r\nproducer.stop();\r\nconsumer.stop(); \r\n```","```\r\nProducer producer = new Producer(dataQueue);\r\nfor(int i = 0; i < producerCount; i++) {\r\n    Thread producerThread = new Thread(producer);\r\n    producerThread.start();\r\n}\r\n```","```\r\nConsumer consumer = new Consumer(dataQueue);\r\nfor(int i = 0; i < consumerCount; i++) {\r\n    Thread consumerThread = new Thread(consumer);\r\n    consumerThread.start();\r\n}\r\n```","```\r\nproducer.stop();\r\nconsumer.stop();\r\n```","```\r\nBlockingQueue<Double> blockingQueue = new LinkedBlockingDeque<>(5);\r\n```","```\r\nprivate void produce() {\r\n    while (true) {\r\n        double value = generateValue();\r\n        try {\r\n            blockingQueue.put(value);\r\n        } catch (InterruptedException e) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate void consume() {\r\n    while (true) {\r\n        Double value;\r\n        try {\r\n            value = blockingQueue.take();\r\n        } catch (InterruptedException e) {\r\n            break;\r\n        }\r\n        // Consume value\r\n    }\r\n}\r\n```","```\r\nfor (int i = 0; i < 2; i++) {\r\n    Thread producerThread = new Thread(this::produce);\r\n    producerThread.start();\r\n}\r\n\r\nfor (int i = 0; i < 3; i++) {\r\n    Thread consumerThread = new Thread(this::consume);\r\n    consumerThread.start();\r\n}\r\n```"]