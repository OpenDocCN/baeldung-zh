["```\r\npublic class Enclosing {\r\n\r\n    private static int x = 1;\r\n\r\n    public static class StaticNested {\r\n\r\n        private void run() {\r\n            // method implementation\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        Enclosing.StaticNested nested = new Enclosing.StaticNested();\r\n        nested.run();\r\n    }\r\n}\r\n```","```\r\npublic class Outer {\r\n\r\n    public class Inner {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nOuter outer = new Outer();\r\nOuter.Inner inner = outer.new Inner();\r\n```","```\r\npublic class NewEnclosing {\r\n\r\n    void run() {\r\n        class Local {\r\n\r\n            void run() {\r\n                // method implementation\r\n            }\r\n        }\r\n        Local local = new Local();\r\n        local.run();\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        NewEnclosing newEnclosing = new NewEnclosing();\r\n        newEnclosing.run();\r\n    }\r\n}\r\n```","```\r\nabstract class SimpleAbstractClass {\r\n    abstract void run();\r\n}\r\n```","```\r\npublic class AnonymousInnerUnitTest {\r\n\r\n    @Test\r\n    public void whenRunAnonymousClass_thenCorrect() {\r\n        SimpleAbstractClass simpleAbstractClass = new SimpleAbstractClass() {\r\n            void run() {\r\n                // method implementation\r\n            }\r\n        };\r\n        simpleAbstractClass.run();\r\n    }\r\n}\r\n```","```\r\npublic class NewOuter {\r\n\r\n    int a = 1;\r\n    static int b = 2;\r\n\r\n    public class InnerClass {\r\n        int a = 3;\r\n        static final int b = 4;\r\n\r\n        public void run() {\r\n            System.out.println(\"a = \" + a);\r\n            System.out.println(\"b = \" + b);\r\n            System.out.println(\"NewOuterTest.this.a = \" + NewOuter.this.a);\r\n            System.out.println(\"NewOuterTest.b = \" + NewOuter.b);\r\n            System.out.println(\"NewOuterTest.this.b = \" + NewOuter.this.b);\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void test() {\r\n        NewOuter outer = new NewOuter();\r\n        NewOuter.InnerClass inner = outer.new InnerClass();\r\n        inner.run();\r\n\r\n    }\r\n}\r\n```"]