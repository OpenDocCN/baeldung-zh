["```\r\n@Test\r\npublic void whenAddingElements_thenJoinedElements() {\r\n    StringJoiner joiner = new StringJoiner(\",\", PREFIX, SUFFIX);\r\n    joiner.add(\"Red\")\r\n      .add(\"Green\")\r\n      .add(\"Blue\");\r\n\r\n    assertEquals(joiner.toString(), \"[Red,Green,Blue]\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddingListElements_thenJoinedListElements() {\r\n    List<String> rgbList = new ArrayList<>();\r\n    rgbList.add(\"Red\");\r\n    rgbList.add(\"Green\");\r\n    rgbList.add(\"Blue\");\r\n\r\n    StringJoiner rgbJoiner = new StringJoiner(\r\n      \",\", PREFIX, SUFFIX);\r\n\r\n    for (String color : rgbList) {\r\n        rgbJoiner.add(color);\r\n    }\r\n\r\n    assertEquals(rgbJoiner.toString(), \"[Red,Green,Blue]\");\r\n}\r\n```","```\r\nprivate String PREFIX = \"[\";\r\nprivate String SUFFIX = \"]\";\r\n\r\n@Test\r\npublic void whenEmptyJoinerWithoutPrefixSuffix_thenEmptyString() {\r\n    StringJoiner joiner = new StringJoiner(\",\");\r\n\r\n    assertEquals(0, joiner.toString().length());\r\n}\r\n\r\n@Test\r\npublic void whenEmptyJoinerJoinerWithPrefixSuffix_thenPrefixSuffix() {\r\n    StringJoiner joiner = new StringJoiner(\r\n      \",\", PREFIX, SUFFIX);\r\n\r\n    assertEquals(joiner.toString(), PREFIX + SUFFIX);\r\n}\r\n```","```\r\n@Test\r\npublic void whenEmptyJoinerWithEmptyValue_thenDefaultValue() {\r\n    StringJoiner joiner = new StringJoiner(\",\");\r\n    joiner.setEmptyValue(\"default\");\r\n\r\n    assertEquals(joiner.toString(), \"default\");\r\n}\r\n\r\n@Test\r\npublic void whenEmptyJoinerWithPrefixSuffixAndEmptyValue_thenDefaultValue() {\r\n    StringJoiner joiner = new StringJoiner(\",\", PREFIX, SUFFIX);\r\n    joiner.setEmptyValue(\"default\");\r\n\r\n    assertEquals(joiner.toString(), \"default\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenMergingJoiners_thenReturnMerged() {\r\n    StringJoiner rgbJoiner = new StringJoiner(\r\n      \",\", PREFIX, SUFFIX);\r\n    StringJoiner cmybJoiner = new StringJoiner(\r\n      \"-\", PREFIX, SUFFIX);\r\n\r\n    rgbJoiner.add(\"Red\")\r\n      .add(\"Green\")\r\n      .add(\"Blue\");\r\n    cmybJoiner.add(\"Cyan\")\r\n      .add(\"Magenta\")\r\n      .add(\"Yellow\")\r\n      .add(\"Black\");\r\n\r\n    rgbJoiner.merge(cmybJoiner);\r\n\r\n    assertEquals(\r\n      rgbJoiner.toString(), \r\n      \"[Red,Green,Blue,Cyan-Magenta-Yellow-Black]\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsedWithinCollectors_thenJoined() {\r\n    List<String> rgbList = Arrays.asList(\"Red\", \"Green\", \"Blue\");\r\n    String commaSeparatedRGB = rgbList.stream()\r\n      .map(color -> color.toString())\r\n      .collect(Collectors.joining(\",\"));\r\n\r\n    assertEquals(commaSeparatedRGB, \"Red,Green,Blue\");\r\n}\r\n```"]