["```\r\ncreate table if not exists users(\r\n    username varchar(64) not null primary key,\r\n    password varchar(64) not null,\r\n    email varchar(128),\r\n    firstName varchar(128) not null,\r\n    lastName varchar(128) not null,\r\n    birthDate DATE not null\r\n); \r\n```","```\r\n<dependency>\r\n    <groupId>org.keycloak</groupId>\r\n    <artifactId>keycloak-core</artifactId>\r\n    <version>12.0.2</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.keycloak</groupId>\r\n    <artifactId>keycloak-server-spi</artifactId>\r\n    <version>12.0.2</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>com.baeldung</groupId>\r\n    <artifactId>oauth-authorization-server</artifactId>\r\n    <version>0.1.0-SNAPSHOT</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\npublic class CustomUserStorageProviderFactory\r\n  implements UserStorageProviderFactory<CustomUserStorageProvider> {\r\n    @Override\r\n    public String getId() {\r\n        return \"custom-user-provider\";\r\n    }\r\n\r\n    @Override\r\n    public CustomUserStorageProvider create(KeycloakSession ksession, ComponentModel model) {\r\n        return new CustomUserStorageProvider(ksession,model);\r\n    }\r\n}\r\n```","```\r\n# SPI class implementation\r\ncom.baeldung.auth.provider.user.CustomUserStorageProviderFactory\r\n```","```\r\npublic class CustomUserStorageProvider implements UserStorageProvider, \r\n  UserLookupProvider,\r\n  CredentialInputValidator, \r\n  UserQueryProvider {\r\n\r\n    // ... private members omitted\r\n\r\n    public CustomUserStorageProvider(KeycloakSession ksession, ComponentModel model) {\r\n      this.ksession = ksession;\r\n      this.model = model;\r\n    }\r\n\r\n    // ... implementation methods for each supported capability\r\n}\r\n```","```\r\n@Override\r\npublic UserModel getUserByUsername(String username, RealmModel realm) {\r\n    try ( Connection c = DbUtil.getConnection(this.model)) {\r\n        PreparedStatement st = c.prepareStatement(\r\n          \"select \" +\r\n          \"  username, firstName, lastName, email, birthDate \" + \r\n          \"from users \" + \r\n          \"where username = ?\");\r\n        st.setString(1, username);\r\n        st.execute();\r\n        ResultSet rs = st.getResultSet();\r\n        if ( rs.next()) {\r\n            return mapUser(realm,rs);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    catch(SQLException ex) {\r\n        throw new RuntimeException(\"Database error:\" + ex.getMessage(),ex);\r\n    }\r\n} \r\n```","```\r\nprivate UserModel mapUser(RealmModel realm, ResultSet rs) throws SQLException {\r\n    CustomUser user = new CustomUser.Builder(ksession, realm, model, rs.getString(\"username\"))\r\n      .email(rs.getString(\"email\"))\r\n      .firstName(rs.getString(\"firstName\"))\r\n      .lastName(rs.getString(\"lastName\"))\r\n      .birthDate(rs.getDate(\"birthDate\"))\r\n      .build();\r\n    return user;\r\n} \r\n```","```\r\npublic class DbUtil {\r\n\r\n    public static Connection getConnection(ComponentModel config) throws SQLException{\r\n        String driverClass = config.get(CONFIG_KEY_JDBC_DRIVER);\r\n        try {\r\n            Class.forName(driverClass);\r\n        }\r\n        catch(ClassNotFoundException nfe) {\r\n           // ... error handling omitted\r\n        }\r\n\r\n        return DriverManager.getConnection(\r\n          config.get(CONFIG_KEY_JDBC_URL),\r\n          config.get(CONFIG_KEY_DB_USERNAME),\r\n          config.get(CONFIG_KEY_DB_PASSWORD));\r\n    }\r\n}\r\n```","```\r\npublic class CustomUserStorageProviderFactory\r\n  implements UserStorageProviderFactory<CustomUserStorageProvider> {\r\n    protected final List<ProviderConfigProperty> configMetadata;\r\n\r\n    public CustomUserStorageProviderFactory() {\r\n        configMetadata = ProviderConfigurationBuilder.create()\r\n          .property()\r\n            .name(CONFIG_KEY_JDBC_DRIVER)\r\n            .label(\"JDBC Driver Class\")\r\n            .type(ProviderConfigProperty.STRING_TYPE)\r\n            .defaultValue(\"org.h2.Driver\")\r\n            .helpText(\"Fully qualified class name of the JDBC driver\")\r\n            .add()\r\n          // ... repeat this for every property (omitted)\r\n          .build();\r\n    }\r\n    // ... other methods omitted\r\n\r\n    @Override\r\n    public List<ProviderConfigProperty> getConfigProperties() {\r\n        return configMetadata;\r\n    }\r\n\r\n    @Override\r\n    public void validateConfiguration(KeycloakSession session, RealmModel realm, ComponentModel config)\r\n      throws ComponentValidationException {\r\n       try (Connection c = DbUtil.getConnection(config)) {\r\n           c.createStatement().execute(config.get(CONFIG_KEY_VALIDATION_QUERY));\r\n       }\r\n       catch(Exception ex) {\r\n           throw new ComponentValidationException(\"Unable to validate database connection\",ex);\r\n       }\r\n    }\r\n} \r\n```","```\r\n@Override\r\npublic boolean supportsCredentialType(String credentialType) {\r\n    return PasswordCredentialModel.TYPE.endsWith(credentialType);\r\n}\r\n\r\n@Override\r\npublic boolean isConfiguredFor(RealmModel realm, UserModel user, String credentialType) {\r\n    return supportsCredentialType(credentialType);\r\n} \r\n```","```\r\n@Override\r\npublic boolean isValid(RealmModel realm, UserModel user, CredentialInput credentialInput) {\r\n    if(!this.supportsCredentialType(credentialInput.getType())) {\r\n        return false;\r\n    }\r\n    StorageId sid = new StorageId(user.getId());\r\n    String username = sid.getExternalId();\r\n\r\n    try (Connection c = DbUtil.getConnection(this.model)) {\r\n        PreparedStatement st = c.prepareStatement(\"select password from users where username = ?\");\r\n        st.setString(1, username);\r\n        st.execute();\r\n        ResultSet rs = st.getResultSet();\r\n        if ( rs.next()) {\r\n            String pwd = rs.getString(1);\r\n            return pwd.equals(credentialInput.getChallengeResponse());\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    catch(SQLException ex) {\r\n        throw new RuntimeException(\"Database error:\" + ex.getMessage(),ex);\r\n    }\r\n} \r\n```","```\r\n@Override\r\npublic List<UserModel> searchForUser(String search, RealmModel realm, int firstResult, int maxResults) {\r\n    try (Connection c = DbUtil.getConnection(this.model)) {\r\n        PreparedStatement st = c.prepareStatement(\r\n          \"select \" + \r\n          \"  username, firstName, lastName, email, birthDate \" +\r\n          \"from users \" + \r\n          \"where username like ? + \r\n          \"order by username limit ? offset ?\");\r\n        st.setString(1, search);\r\n        st.setInt(2, maxResults);\r\n        st.setInt(3, firstResult);\r\n        st.execute();\r\n        ResultSet rs = st.getResultSet();\r\n        List<UserModel> users = new ArrayList<>();\r\n        while(rs.next()) {\r\n            users.add(mapUser(realm,rs));\r\n        }\r\n        return users;\r\n    }\r\n    catch(SQLException ex) {\r\n        throw new RuntimeException(\"Database error:\" + ex.getMessage(),ex);\r\n    }\r\n} \r\n```"]