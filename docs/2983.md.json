["```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-cassandra</artifactId>\r\n    <version>2.1.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n@Table\r\npublic class Employee {\r\n    @PrimaryKey\r\n    private int id;\r\n    private String name;\r\n    private String address;\r\n    private String email;\r\n    private int age;\r\n}\r\n```","```\r\npublic interface EmployeeRepository extends ReactiveCassandraRepository<Employee, Integer> {\r\n    @AllowFiltering\r\n    Flux<Employee> findByAgeGreaterThan(int age);\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"employee\")\r\npublic class EmployeeController {\r\n\r\n    @Autowired\r\n    EmployeeService employeeService;\r\n\r\n    @PostConstruct\r\n    public void saveEmployees() {\r\n        List<Employee> employees = new ArrayList<>();\r\n        employees.add(new Employee(123, \"John Doe\", \"Delaware\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 31));\r\n        employees.add(new Employee(324, \"Adam Smith\", \"North Carolina\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 43));\r\n        employees.add(new Employee(355, \"Kevin Dunner\", \"Virginia\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 24));\r\n        employees.add(new Employee(643, \"Mike Lauren\", \"New York\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 41));\r\n        employeeService.initializeEmployees(employees);\r\n    }\r\n\r\n    @GetMapping(\"/list\")\r\n    public Flux<Employee> getAllEmployees() {\r\n        Flux<Employee> employees = employeeService.getAllEmployees();\r\n        return employees;\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Mono<Employee> getEmployeeById(@PathVariable int id) {\r\n        return employeeService.getEmployeeById(id);\r\n    }\r\n\r\n    @GetMapping(\"/filterByAge/{age}\")\r\n    public Flux<Employee> getEmployeesFilterByAge(@PathVariable int age) {\r\n        return employeeService.getEmployeesFilterByAge(age);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class EmployeeService {\r\n\r\n    @Autowired\r\n    EmployeeRepository employeeRepository;\r\n\r\n    public void initializeEmployees(List<Employee> employees) {\r\n        Flux<Employee> savedEmployees = employeeRepository.saveAll(employees);\r\n        savedEmployees.subscribe();\r\n    }\r\n\r\n    public Flux<Employee> getAllEmployees() {\r\n        Flux<Employee> employees =  employeeRepository.findAll();\r\n        return employees;\r\n    }\r\n\r\n    public Flux<Employee> getEmployeesFilterByAge(int age) {\r\n        return employeeRepository.findByAgeGreaterThan(age);\r\n    }\r\n\r\n    public Mono<Employee> getEmployeeById(int id) {\r\n        return employeeRepository.findById(id);\r\n    }\r\n}\r\n```","```\r\nspring.data.cassandra.keyspace-name=practice\r\nspring.data.cassandra.port=9042\r\nspring.data.cassandra.local-datacenter=datacenter1\r\n```","```\r\ncurl localhost:8080/employee/list\r\n```","```\r\n[\r\n    {\r\n        \"id\": 324,\r\n        \"name\": \"Adam Smith\",\r\n        \"address\": \"North Carolina\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n        \"age\": 43\r\n    },\r\n    {\r\n        \"id\": 123,\r\n        \"name\": \"John Doe\",\r\n        \"address\": \"Delaware\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n        \"age\": 31\r\n    },\r\n    {\r\n        \"id\": 355,\r\n        \"name\": \"Kevin Dunner\",\r\n        \"address\": \"Virginia\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n        \"age\": 24\r\n    },\r\n    {\r\n        \"id\": 643,\r\n        \"name\": \"Mike Lauren\",\r\n        \"address\": \"New York\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n       \"age\": 41\r\n    }\r\n]\r\n```","```\r\ncurl localhost:8080/employee/643\r\n```","```\r\n{\r\n    \"id\": 643,\r\n    \"name\": \"Mike Lauren\",\r\n    \"address\": \"New York\",\r\n    \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\": 41\r\n}\r\n```","```\r\ncurl localhost:8080/employee/filterByAge/35\r\n```","```\r\n[\r\n    {\r\n        \"id\": 324,\r\n        \"name\": \"Adam Smith\",\r\n        \"address\": \"North Carolina\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n        \"age\": 43\r\n    },\r\n    {\r\n        \"id\": 643,\r\n        \"name\": \"Mike Lauren\",\r\n        \"address\": \"New York\",\r\n        \"email\": \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n        \"age\": 41\r\n    }\r\n]\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class ReactiveEmployeeRepositoryIntegrationTest {\r\n\r\n    @Autowired\r\n    EmployeeRepository repository;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        Flux<Employee> deleteAndInsert = repository.deleteAll()\r\n          .thenMany(repository.saveAll(Flux.just(\r\n            new Employee(111, \"John Doe\", \"Delaware\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 31),\r\n            new Employee(222, \"Adam Smith\", \"North Carolina\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 43),\r\n            new Employee(333, \"Kevin Dunner\", \"Virginia\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 24),\r\n            new Employee(444, \"Mike Lauren\", \"New York\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 41))));\r\n\r\n        StepVerifier\r\n          .create(deleteAndInsert)\r\n          .expectNextCount(4)\r\n          .verifyComplete();\r\n    }\r\n\r\n    @Test\r\n    public void givenRecordsAreInserted_whenDbIsQueried_thenShouldIncludeNewRecords() {\r\n        Mono<Long> saveAndCount = repository.count()\r\n          .doOnNext(System.out::println)\r\n          .thenMany(repository\r\n            .saveAll(Flux.just(\r\n            new Employee(325, \"Kim Jones\", \"Florida\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 42),\r\n            new Employee(654, \"Tom Moody\", \"New Hampshire\", \"[[email protected]](/web/20220525142226/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 44))))\r\n          .last()\r\n          .flatMap(v -> repository.count())\r\n          .doOnNext(System.out::println);\r\n\r\n        StepVerifier\r\n          .create(saveAndCount)\r\n          .expectNext(6L)\r\n          .verifyComplete();\r\n    }\r\n\r\n    @Test\r\n    public void givenAgeForFilter_whenDbIsQueried_thenShouldReturnFilteredRecords() {\r\n        StepVerifier\r\n          .create(repository.findByAgeGreaterThan(35))\r\n          .expectNextCount(2)\r\n          .verifyComplete();\r\n    }\r\n}\r\n```"]