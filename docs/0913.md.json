["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n    <version>2.3.3.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-client</artifactId>\r\n    <version>5.3.4.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-jose</artifactId>\r\n    <version>5.3.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\nhttp://localhost:8081/login/oauth2/code/google\r\n```","```\r\nhttp://localhost:8081/login/oauth2/code/facebook\r\n```","```\r\nspring.security.oauth2.client.registration.google.client-id=<your client id>\r\nspring.security.oauth2.client.registration.google.client-secret=<your client secret>\r\n\r\nspring.security.oauth2.client.registration.facebook.client-id=<your client id> \r\nspring.security.oauth2.client.registration.facebook.client-secret=<your client secret>\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n         .anyRequest().authenticated()\r\n         .and()\r\n         .oauth2Login();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@PropertySource(\"classpath:application.properties\")\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n    private static List<String> clients = Arrays.asList(\"google\", \"facebook\");\r\n\r\n    @Bean\r\n    public ClientRegistrationRepository clientRegistrationRepository() {\r\n        List<ClientRegistration> registrations = clients.stream()\r\n          .map(c -> getRegistration(c))\r\n          .filter(registration -> registration != null)\r\n          .collect(Collectors.toList());\r\n\r\n        return new InMemoryClientRegistrationRepository(registrations);\r\n    }\r\n}\r\n```","```\r\nprivate static String CLIENT_PROPERTY_KEY \r\n  = \"spring.security.oauth2.client.registration.\";\r\n\r\n@Autowired\r\nprivate Environment env;\r\n\r\nprivate ClientRegistration getRegistration(String client) {\r\n    String clientId = env.getProperty(\r\n      CLIENT_PROPERTY_KEY + client + \".client-id\");\r\n\r\n    if (clientId == null) {\r\n        return null;\r\n    }\r\n\r\n    String clientSecret = env.getProperty(\r\n      CLIENT_PROPERTY_KEY + client + \".client-secret\");\r\n\r\n    if (client.equals(\"google\")) {\r\n        return CommonOAuth2Provider.GOOGLE.getBuilder(client)\r\n          .clientId(clientId).clientSecret(clientSecret).build();\r\n    }\r\n    if (client.equals(\"facebook\")) {\r\n        return CommonOAuth2Provider.FACEBOOK.getBuilder(client)\r\n          .clientId(clientId).clientSecret(clientSecret).build();\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.authorizeRequests().anyRequest().authenticated()\r\n      .and()\r\n      .oauth2Login()\r\n      .clientRegistrationRepository(clientRegistrationRepository())\r\n      .authorizedClientService(authorizedClientService());\r\n}\r\n\r\n@Bean\r\npublic OAuth2AuthorizedClientService authorizedClientService() {\r\n\r\n    return new InMemoryOAuth2AuthorizedClientService(\r\n      clientRegistrationRepository());\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.authorizeRequests()\r\n      .antMatchers(\"/oauth_login\")\r\n      .permitAll()\r\n      .anyRequest()\r\n      .authenticated()\r\n      .and()\r\n      .oauth2Login()\r\n      .loginPage(\"/oauth_login\");\r\n}\r\n```","```\r\n@Controller\r\npublic class LoginController {\r\n\r\n    private static String authorizationRequestBaseUri\r\n      = \"oauth2/authorization\";\r\n    Map<String, String> oauth2AuthenticationUrls\r\n      = new HashMap<>();\r\n\r\n    @Autowired\r\n    private ClientRegistrationRepository clientRegistrationRepository;\r\n\r\n    @GetMapping(\"/oauth_login\")\r\n    public String getLoginPage(Model model) {\r\n        // ...\r\n\r\n        return \"oauth_login\";\r\n    }\r\n}\r\n```","```\r\npublic String getLoginPage(Model model) {\r\n    Iterable<ClientRegistration> clientRegistrations = null;\r\n    ResolvableType type = ResolvableType.forInstance(clientRegistrationRepository)\r\n      .as(Iterable.class);\r\n    if (type != ResolvableType.NONE && \r\n      ClientRegistration.class.isAssignableFrom(type.resolveGenerics()[0])) {\r\n        clientRegistrations = (Iterable<ClientRegistration>) clientRegistrationRepository;\r\n    }\r\n\r\n    clientRegistrations.forEach(registration -> \r\n      oauth2AuthenticationUrls.put(registration.getClientName(), \r\n      authorizationRequestBaseUri + \"/\" + registration.getRegistrationId()));\r\n    model.addAttribute(\"urls\", oauth2AuthenticationUrls);\r\n\r\n    return \"oauth_login\";\r\n}\r\n```","```\r\n<h3>Login with:</h3>\r\n<p th:each=\"url : ${urls}\">\r\n    <a th:text=\"${url.key}\" th:href=\"${url.value}\">Client</a>\r\n</p>\r\n```","```\r\n.oauth2Login()\r\n  .defaultSuccessUrl(\"/loginSuccess\")\r\n  .failureUrl(\"/loginFailure\");\r\n```","```\r\n.oauth2Login() \r\n  .authorizationEndpoint()\r\n  .baseUri(\"/oauth2/authorize-client\")\r\n  .authorizationRequestRepository(authorizationRequestRepository());\r\n```","```\r\n@Bean\r\npublic AuthorizationRequestRepository<OAuth2AuthorizationRequest> \r\n  authorizationRequestRepository() {\r\n\r\n    return new HttpSessionOAuth2AuthorizationRequestRepository();\r\n}\r\n```","```\r\n.oauth2Login()\r\n  .tokenEndpoint()\r\n  .accessTokenResponseClient(accessTokenResponseClient());\r\n```","```\r\n@Bean\r\npublic OAuth2AccessTokenResponseClient<OAuth2AuthorizationCodeGrantRequest> \r\n  accessTokenResponseClient() {\r\n\r\n    return new NimbusAuthorizationCodeTokenResponseClient();\r\n}\r\n```","```\r\n.oauth2Login()\r\n  .redirectionEndpoint()\r\n  .baseUri(\"/oauth2/redirect\")\r\n```","```\r\n@Autowired\r\nprivate OAuth2AuthorizedClientService authorizedClientService;\r\n\r\n@GetMapping(\"/loginSuccess\")\r\npublic String getLoginInfo(Model model, OAuth2AuthenticationToken authentication) {\r\n    OAuth2AuthorizedClient client = authorizedClientService\r\n      .loadAuthorizedClient(\r\n        authentication.getAuthorizedClientRegistrationId(), \r\n          authentication.getName());\r\n    //...\r\n    return \"loginSuccess\";\r\n}\r\n```","```\r\nString userInfoEndpointUri = client.getClientRegistration()\r\n  .getProviderDetails().getUserInfoEndpoint().getUri();\r\n\r\nif (!StringUtils.isEmpty(userInfoEndpointUri)) {\r\n    RestTemplate restTemplate = new RestTemplate();\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + client.getAccessToken()\r\n      .getTokenValue());\r\n    HttpEntity entity = new HttpEntity(\"\", headers);\r\n    ResponseEntity <map>response = restTemplate\r\n      .exchange(userInfoEndpointUri, HttpMethod.GET, entity, Map.class);\r\n    Map userAttributes = response.getBody();\r\n    model.addAttribute(\"name\", userAttributes.get(\"name\"));\r\n}\r\n```"]