["```\r\npublic class AddProductCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n\r\npublic class IncrementProductCountCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n\r\npublic class DecrementProductCountCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n```","```\r\npublic class ProductAddedEvent {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n\r\npublic class ProductCountIncrementedEvent {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n\r\npublic class ProductCountDecrementedEvent {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n\r\npublic class ProductRemovedEvent {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\n```","```\r\n@Aggregate\r\npublic class OrderAggregate {\r\n\r\n    @AggregateIdentifier\r\n    private String orderId;\r\n    private boolean orderConfirmed;\r\n\r\n    @AggregateMember\r\n    private Map<String, OrderLine> orderLines;\r\n\r\n    @CommandHandler\r\n    public void handle(AddProductCommand command) {\r\n        if (orderConfirmed) {\r\n            throw new OrderAlreadyConfirmedException(orderId);\r\n        }\r\n\r\n        String productId = command.getProductId();\r\n        if (orderLines.containsKey(productId)) {\r\n            throw new DuplicateOrderLineException(productId);\r\n        }\r\n\r\n        AggregateLifecycle.apply(new ProductAddedEvent(orderId, productId));\r\n    }\r\n\r\n    // previous command- and event sourcing handlers left out for conciseness\r\n\r\n    @EventSourcingHandler\r\n    public void on(OrderPlacedEvent event) {\r\n        this.orderId = event.getOrderId();\r\n        this.orderConfirmed = false;\r\n        this.orderLines = new HashMap<>();\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(ProductAddedEvent event) {\r\n        String productId = event.getProductId();\r\n        this.orderLines.put(productId, new OrderLine(productId));\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(ProductRemovedEvent event) {\r\n        this.orderLines.remove(event.getProductId());\r\n    }\r\n}\r\n```","```\r\npublic class OrderLine {\r\n\r\n    @EntityId\r\n    private final String productId;\r\n    private Integer count;\r\n    private boolean orderConfirmed;\r\n\r\n    public OrderLine(String productId) {\r\n        this.productId = productId;\r\n        this.count = 1;\r\n    }\r\n\r\n    @CommandHandler\r\n    public void handle(IncrementProductCountCommand command) {\r\n        if (orderConfirmed) {\r\n            throw new OrderAlreadyConfirmedException(orderId);\r\n        }\r\n\r\n        apply(new ProductCountIncrementedEvent(command.getOrderId(), productId));\r\n    }\r\n\r\n    @CommandHandler\r\n    public void handle(DecrementProductCountCommand command) {\r\n        if (orderConfirmed) {\r\n            throw new OrderAlreadyConfirmedException(orderId);\r\n        }\r\n\r\n        if (count <= 1) {\r\n            apply(new ProductRemovedEvent(command.getOrderId(), productId));\r\n        } else {\r\n            apply(new ProductCountDecrementedEvent(command.getOrderId(), productId));\r\n        }\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(ProductCountIncrementedEvent event) {\r\n        this.count++;\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(ProductCountDecrementedEvent event) {\r\n        this.count--;\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(OrderConfirmedEvent event) {\r\n        this.orderConfirmed = true;\r\n    }\r\n}\r\n```","```\r\npublic class IncrementProductCountCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n} ...\r\npublic class OrderLine {\r\n\r\n    @EntityId(routingKey = \"productId\")\r\n    private final String orderLineId;\r\n    private Integer count;\r\n    private boolean orderConfirmed;\r\n\r\n    // constructor, command and event sourcing handlers\r\n}\r\n```"]