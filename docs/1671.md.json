["```\r\npublic class JarFilePathResolver {\r\n    String byGetProtectionDomain(Class clazz) throws URISyntaxException {\r\n        URL url = clazz.getProtectionDomain().getCodeSource().getLocation();\r\n        return Paths.get(url.toURI()).toString();\r\n    }\r\n} \r\n```","```\r\nString jarPath = jarFilePathResolver.byGetProtectionDomain(Ascii.class);\r\nassertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\r\nassertThat(new File(jarPath)).exists(); \r\n```","```\r\nString byGetResource(Class clazz) {\r\n    URL classResource = clazz.getResource(clazz.getSimpleName() + \".class\");\r\n    if (classResource == null) {\r\n        throw new RuntimeException(\"class resource is null\");\r\n    }\r\n    String url = classResource.toString();\r\n    if (url.startsWith(\"jar:file:\")) {\r\n        // extract 'file:......jarName.jar' part from the url string\r\n        String path = url.replaceAll(\"^jar:(file:.*[.]jar)!/.*\", \"$1\");\r\n        try {\r\n            return Paths.get(new URL(path).toURI()).toString();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(\"Invalid Jar File URL String\");\r\n        }\r\n    }\r\n    throw new RuntimeException(\"Invalid Jar File URL String\");\r\n} \r\n```","```\r\njar:file:/FULL/PATH/TO/jarName.jar!/PACKAGE/HIERARCHY/TO/CLASS/className.class\r\n```","```\r\njar:file:/home/kent/.m2/repository/com/google/guava/guava/31.0.1-jre/guava-31.0.1-jre.jar!/com/google/common/base/Ascii.class\r\n```","```\r\nString jarPath = jarFilePathResolver.byGetResource(Ascii.class);\r\nassertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\r\nassertThat(new File(jarPath)).exists(); \r\n```","```\r\nString getJarFilePath(Class clazz) {\r\n    try {\r\n        return byGetProtectionDomain(clazz);\r\n    } catch (Exception e) {\r\n        // cannot get jar file path using byGetProtectionDomain\r\n        // Exception handling omitted\r\n    }\r\n    return byGetResource(clazz);\r\n} \r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\nclass JarFilePathResolverUnitTest {\r\n    @Spy\r\n    JarFilePathResolver jarFilePathResolver;\r\n    ...\r\n}\r\n```","```\r\nString jarPath = jarFilePathResolver.getJarFilePath(Ascii.class);\r\nassertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\r\nassertThat(new File(jarPath)).exists();\r\nverify(jarFilePathResolver, times(1)).byGetProtectionDomain(Ascii.class);\r\nverify(jarFilePathResolver, never()).byGetResource(Ascii.class); \r\n```","```\r\nwhen(jarFilePathResolver.byGetProtectionDomain(Ascii.class)).thenThrow(new SecurityException(\"not allowed\"));\r\nString jarPath = jarFilePathResolver.getJarFilePath(Ascii.class);\r\nassertThat(jarPath).endsWith(\".jar\").contains(\"guava\");\r\nassertThat(new File(jarPath)).exists();\r\nverify(jarFilePathResolver, times(1)).byGetProtectionDomain(Ascii.class);\r\nverify(jarFilePathResolver, times(1)).byGetResource(Ascii.class); \r\n```"]