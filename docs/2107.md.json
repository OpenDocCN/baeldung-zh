["```\r\n@Test \r\npublic void whenCasePrefixIsRemoved_thenReturnTrue(){\r\n    def trimPrefix = {\r\n        it.startsWith('Groovy-') ? it.minus('Groovy-') : it \r\n    }\r\n    def actual = trimPrefix(\"Groovy-Tutorials at Baeldung\")\r\n    def expected = \"Tutorials at Baeldung\"\r\n    assertEquals(expected, actual)\r\n} \r\n```","```\r\ntrimPrefix.substring('Groovy-'.length()) \r\n```","```\r\n@Test\r\npublic void whenPrefixIsRemovedWithIgnoreCase_thenReturnTrue() {\r\n\r\n    String prefix = \"groovy-\"\r\n    String trimPrefix = \"Groovy-Tutorials at Baeldung\"\r\n    def actual\r\n    if(trimPrefix.startsWithIgnoreCase(prefix)) {\r\n        actual = trimPrefix.substring(prefix.length())\r\n    }\r\n\r\n    def expected = \"Tutorials at Baeldung\"\r\n\r\n    assertEquals(expected, actual)\r\n} \r\n```","```\r\nString trimPrefix = \"Groovy-Tutorials at Baeldung\"\r\nif (trimPrefix.startsWithAny(\"Java\", \"Groovy\", \"Linux\")) {\r\n    // logic to remove prefix\r\n} \r\n```","```\r\n@Test\r\npublic void whenPrefixIsRemovedUsingRegex_thenReturnTrue() {\r\n\r\n    def regex = ~\"^groovy-\"\r\n    String trimPrefix = \"groovy-Tutorials at Baeldung\"\r\n    String actual = trimPrefix - regex\r\n\r\n    def expected = \"Tutorials at Baeldung\"\r\n    assertEquals(\"Tutorials at Baeldung\", actual)\r\n} \r\n```","```\r\ndef regex = ~\"^([Gg])roovy-\" \r\n```","```\r\n@Test\r\npublic void whenPrefixIsRemovedUsingReplaceFirst_thenReturnTrue() {\r\n\r\n    def regex = ~\"^groovy\"\r\n    String trimPrefix = \"groovyTutorials at Baeldung's groovy page\"\r\n    String actual = trimPrefix.replaceFirst(regex, \"\")\r\n\r\n    def expected = \"Tutorials at Baeldung's groovy page\"\r\n    assertEquals(expected, actual)\r\n} \r\n```","```\r\n@Test\r\npublic void whenPrefixIsRemovedUsingReplaceAll_thenReturnTrue() {\r\n\r\n    String trimPrefix = \"groovyTutorials at Baeldung groovy\"\r\n    String actual = trimPrefix.replaceAll(/^groovy/, \"\")\r\n\r\n    def expected = \"Tutorials at Baeldung groovy\"\r\n    assertEquals(expected, actual)\r\n} \r\n```"]