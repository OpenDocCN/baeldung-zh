["```\r\npublic class ActiveUserStore {\r\n\r\n    public List<String> users;\r\n\r\n    public ActiveUserStore() {\r\n        users = new ArrayList<String>();\r\n    }\r\n\r\n    // standard getter and setter\r\n}\r\n```","```\r\n@Bean\r\npublic ActiveUserStore activeUserStore(){\r\n    return new ActiveUserStore();\r\n}\r\n```","```\r\n@Component\r\npublic class LoggedUser implements HttpSessionBindingListener, Serializable {\r\n\r\n    private static final long serialVersionUID = 1L;\r\n    private String username; \r\n    private ActiveUserStore activeUserStore;\r\n\r\n    public LoggedUser(String username, ActiveUserStore activeUserStore) {\r\n        this.username = username;\r\n        this.activeUserStore = activeUserStore;\r\n    }\r\n\r\n    public LoggedUser() {}\r\n\r\n    @Override\r\n    public void valueBound(HttpSessionBindingEvent event) {\r\n        List<String> users = activeUserStore.getUsers();\r\n        LoggedUser user = (LoggedUser) event.getValue();\r\n        if (!users.contains(user.getUsername())) {\r\n            users.add(user.getUsername());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void valueUnbound(HttpSessionBindingEvent event) {\r\n        List<String> users = activeUserStore.getUsers();\r\n        LoggedUser user = (LoggedUser) event.getValue();\r\n        if (users.contains(user.getUsername())) {\r\n            users.remove(user.getUsername());\r\n        }\r\n    }\r\n\r\n    // standard getter and setter\r\n}\r\n```","```\r\n@Component(\"myAuthenticationSuccessHandler\")\r\npublic class MySimpleUrlAuthenticationSuccessHandler implements AuthenticationSuccessHandler {\r\n\r\n    @Autowired\r\n    ActiveUserStore activeUserStore;\r\n\r\n    @Override\r\n    public void onAuthenticationSuccess(HttpServletRequest request, \r\n      HttpServletResponse response, Authentication authentication) \r\n      throws IOException {\r\n        HttpSession session = request.getSession(false);\r\n        if (session != null) {\r\n            LoggedUser user = new LoggedUser(authentication.getName(), activeUserStore);\r\n            session.setAttribute(\"user\", user);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Component(\"myLogoutSuccessHandler\")\r\npublic class MyLogoutSuccessHandler implements LogoutSuccessHandler{\r\n    @Override\r\n    public void onLogoutSuccess(HttpServletRequest request, \r\n      HttpServletResponse response, Authentication authentication)\r\n      throws IOException, ServletException {\r\n        HttpSession session = request.getSession();\r\n        if (session != null){\r\n            session.removeAttribute(\"user\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    ActiveUserStore activeUserStore;\r\n\r\n    @GetMapping(\"/loggedUsers\")\r\n    public String getLoggedUsers(Locale locale, Model model) {\r\n        model.addAttribute(\"users\", activeUserStore.getUsers());\r\n        return \"users\";\r\n    }\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h2>Currently logged in users</h2>\r\n    <div th:each=\"user : ${users}\">\r\n        <p th:text=\"${user}\">user</p>\r\n    </div>\r\n</body>\r\n</html> \r\n```","```\r\n@Autowired\r\nprivate SessionRegistry sessionRegistry;\r\n\r\n@Override\r\npublic List<String> getUsersFromSessionRegistry() {\r\n    return sessionRegistry.getAllPrincipals().stream()\r\n      .filter(u -> !sessionRegistry.getAllSessions(u, false).isEmpty())\r\n      .map(Object::toString)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\nhttp\r\n  .sessionManagement()\r\n  .maximumSessions(1).sessionRegistry(sessionRegistry())\r\n\r\n...\r\n\r\n@Bean\r\npublic SessionRegistry sessionRegistry() {\r\n    return new SessionRegistryImpl();\r\n}\r\n```"]