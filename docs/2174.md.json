["```\r\ndocker run -d --name es762 -p 9200:9200 -e \"discovery.type=single-node\" elasticsearch:7.6.2\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-elasticsearch</artifactId>\r\n    <version>4.0.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\npublic interface ArticleRepository extends ElasticsearchRepository<Article, String> {\r\n\r\n    Page<Article> findByAuthorsName(String name, Pageable pageable);\r\n\r\n    @Query(\"{\\\"bool\\\": {\\\"must\\\": [{\\\"match\\\": {\\\"authors.name\\\": \\\"?0\\\"}}]}}\")\r\n    Page<Article> findByAuthorsNameUsingCustomQuery(String name, Pageable pageable);\r\n}\r\n```","```\r\n@Configuration\r\n@EnableElasticsearchRepositories(basePackages = \"com.baeldung.spring.data.es.repository\")\r\n@ComponentScan(basePackages = { \"com.baeldung.spring.data.es.service\" })\r\npublic class Config {\r\n\r\n    @Bean\r\n    public RestHighLevelClient client() {\r\n        ClientConfiguration clientConfiguration \r\n            = ClientConfiguration.builder()\r\n                .connectedTo(\"localhost:9200\")\r\n                .build();\r\n\r\n        return RestClients.create(clientConfiguration).rest();\r\n    }\r\n\r\n    @Bean\r\n    public ElasticsearchOperations elasticsearchTemplate() {\r\n        return new ElasticsearchRestTemplate(client());\r\n    }\r\n}\r\n```","```\r\n@Document(indexName = \"blog\", type = \"article\")\r\npublic class Article {\r\n\r\n    @Id\r\n    private String id;\r\n\r\n    private String title;\r\n\r\n    @Field(type = FieldType.Nested, includeInParent = true)\r\n    private List<Author> authors;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nelasticsearchTemplate.indexOps(Article.class).create();\r\n```","```\r\nArticle article = new Article(\"Spring Data Elasticsearch\");\r\narticle.setAuthors(asList(new Author(\"John Smith\"), new Author(\"John Doe\")));\r\narticleRepository.save(article);\r\n```","```\r\nString nameToFind = \"John Smith\";\r\nPage<Article> articleByAuthorName\r\n  = articleRepository.findByAuthorsName(nameToFind, PageRequest.of(0, 10));\r\n```","```\r\nQuery searchQuery = new NativeSearchQueryBuilder()\r\n   .withFilter(regexpQuery(\"title\", \".*data.*\"))\r\n   .build();\r\nSearchHits<Article> articles = \r\n   elasticsearchTemplate.search(searchQuery, Article.class, IndexCoordinates.of(\"blog\");\r\n```","```\r\nString articleTitle = \"Spring Data Elasticsearch\";\r\nQuery searchQuery = new NativeSearchQueryBuilder()\r\n  .withQuery(matchQuery(\"title\", articleTitle).minimumShouldMatch(\"75%\"))\r\n  .build();\r\n\r\nSearchHits<Article> articles = \r\n   elasticsearchTemplate.search(searchQuery, Article.class, IndexCoordinates.of(\"blog\");\r\nArticle article = articles.getSearchHit(0).getContent();\r\n```","```\r\narticle.setTitle(\"Getting started with Search Engines\");\r\narticleRepository.save(article);\r\n```","```\r\narticleRepository.delete(article);\r\n```","```\r\narticleRepository.deleteById(\"article_id\");\r\n```","```\r\narticleRepository.deleteByTitle(\"title\");\r\n```"]