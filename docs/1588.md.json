["```\r\nScenario: Correct non-zero number of books found by author\r\n  Given I have the a book in the store called The Devil in the White City by Erik Larson\r\n  When I search for books by author Erik Larson\r\n  Then I find 1 book\r\n```","```\r\nScenario: Correct non-zero number of books found by author\r\n  Given I have the following books in the store\r\n    | The Devil in the White City          | Erik Larson |\r\n    | The Lion, the Witch and the Wardrobe | C.S. Lewis  |\r\n    | In the Garden of Beasts              | Erik Larson |\r\n  When I search for books by author Erik Larson\r\n  Then I find 2 books\r\n```","```\r\nScenario: Correct non-zero number of books found by author\r\n  Given I have the following books in the store\r\n    | title                                | author      |\r\n    | The Devil in the White City          | Erik Larson |\r\n    | The Lion, the Witch and the Wardrobe | C.S. Lewis  |\r\n    | In the Garden of Beasts              | Erik Larson |\r\n  When I search for books by author Erik Larson\r\n  Then I find 2 books\r\n```","```\r\n@Given(\"some phrase\")\r\npublic void somePhrase(DataTable table) {\r\n    // ...\r\n}\r\n```","```\r\npublic class Book {\r\n\r\n    private String title;\r\n    private String author;\r\n\r\n    // standard constructors, getters & setters ...\r\n}\r\n```","```\r\npublic class BookStore {\r\n\r\n    private List<Book> books = new ArrayList<>();\r\n\r\n    public void addBook(Book book) {\r\n        books.add(book);\r\n    }\r\n\r\n    public void addAllBooks(Collection<Book> books) {\r\n        this.books.addAll(books);\r\n    }\r\n\r\n    public List<Book> booksByAuthor(String author) {\r\n        return books.stream()\r\n          .filter(book -> Objects.equals(author, book.getAuthor()))\r\n          .collect(Collectors.toList());\r\n    }\r\n}\r\n```","```\r\npublic class BookStoreRunSteps {\r\n\r\n    private BookStore store;\r\n    private List<Book> foundBooks;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        store = new BookStore();\r\n        foundBooks = new ArrayList<>();\r\n    }\r\n\r\n    // When & Then definitions ...\r\n}\r\n```","```\r\nScenario: Correct non-zero number of books found by author by list\r\n  Given I have the following books in the store by list\r\n    | The Devil in the White City          | Erik Larson |\r\n    | The Lion, the Witch and the Wardrobe | C.S. Lewis  |\r\n    | In the Garden of Beasts              | Erik Larson |\r\n  When I search for books by author Erik Larson\r\n  Then I find 2 books\r\n```","```\r\n[\r\n    [\"The Devil in the White City\", \"Erik Larson\"],\r\n    [\"The Lion, the Witch and the Wardrobe\", \"C.S. Lewis\"],\r\n    [\"In the Garden of Beasts\", \"Erik Larson\"]\r\n]\r\n```","```\r\n@Given(\"^I have the following books in the store by list$\")\r\npublic void haveBooksInTheStoreByList(DataTable table) {\r\n\r\n    List<List<String>> rows = table.asLists(String.class);\r\n\r\n    for (List<String> columns : rows) {\r\n        store.addBook(new Book(columns.get(0), columns.get(1)));\r\n    }\r\n}\r\n```","```\r\nScenario: Correct non-zero number of books found by author by map\r\n  Given I have the following books in the store by map\r\n    | title                                | author      |\r\n    | The Devil in the White City          | Erik Larson |\r\n    | The Lion, the Witch and the Wardrobe | C.S. Lewis  |\r\n    | In the Garden of Beasts              | Erik Larson |\r\n  When I search for books by author Erik Larson\r\n  Then I find 2 books\r\n```","```\r\n[\r\n    {\"title\": \"The Devil in the White City\", \"author\": \"Erik Larson\"},\r\n    {\"title\": \"The Lion, the Witch and the Wardrobe\", \"author\": \"C.S. Lewis\"},\r\n    {\"title\": \"In the Garden of Beasts\", \"author\": \"Erik Larson\"}\r\n]\r\n```","```\r\n@Given(\"^I have the following books in the store by map$\")\r\npublic void haveBooksInTheStoreByMap(DataTable table) {\r\n\r\n    List<Map<String, String>> rows = table.asMaps(String.class, String.class);\r\n\r\n    for (Map<String, String> columns : rows) {\r\n        store.addBook(new Book(columns.get(\"title\"), columns.get(\"author\")));\r\n    }\r\n}\r\n```","```\r\nScenario: Correct non-zero number of books found by author with transformer\r\n  Given I have the following books in the store with transformer\r\n    | title                                | author      |\r\n    | The Devil in the White City          | Erik Larson |\r\n    | The Lion, the Witch and the Wardrobe | C.S. Lewis  |\r\n    | In the Garden of Beasts              | Erik Larson |\r\n  When I search for books by author Erik Larson\r\n  Then I find 2 books\r\n```","```\r\n@Given(\"^I have the following books in the store with transformer$\")\r\npublic void haveBooksInTheStoreByTransformer(BookCatalog catalog) {\r\n    store.addAllBooks(catalog.getBooks());\r\n}\r\n```","```\r\npublic class BookCatalog {\r\n\r\n    private List<Book> books = new ArrayList<>();\r\n\r\n    public void addBook(Book book) {\r\n        books.add(book);\r\n    }\r\n\r\n    // standard getter ...\r\n}\r\n```","```\r\npublic class BookStoreRegistryConfigurer implements TypeRegistryConfigurer {\r\n\r\n    @Override\r\n    public Locale locale() {\r\n        return Locale.ENGLISH;\r\n    }\r\n\r\n    @Override\r\n    public void configureTypeRegistry(TypeRegistry typeRegistry) {\r\n        typeRegistry.defineDataTableType(\r\n          new DataTableType(BookCatalog.class, new BookTableTransformer())\r\n        );\r\n    }\r\n\r\n   //...\r\n```","```\r\n private static class BookTableTransformer implements TableTransformer<BookCatalog> {\r\n\r\n        @Override\r\n        public BookCatalog transform(DataTable table) throws Throwable {\r\n\r\n            BookCatalog catalog = new BookCatalog();\r\n\r\n            table.cells()\r\n              .stream()\r\n              .skip(1)        // Skip header row\r\n              .map(fields -> new Book(fields.get(0), fields.get(1)))\r\n              .forEach(catalog::addBook);\r\n\r\n            return catalog;\r\n        }\r\n    }\r\n}\r\n```"]