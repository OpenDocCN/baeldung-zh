["```\r\n@Entity\r\npublic class ShipmentInfo {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    // constructors\r\n}\r\n```","```\r\n@Entity\r\npublic class LineItem {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @ManyToOne\r\n    private OrderRequest orderRequest;\r\n\r\n    // constructors, equals, hashCode\r\n}\r\n```","```\r\n@Entity\r\npublic class OrderRequest {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @OneToOne(cascade = { CascadeType.REMOVE, CascadeType.PERSIST })\r\n    private ShipmentInfo shipmentInfo;\r\n\r\n    @OneToMany(orphanRemoval = true, cascade = CascadeType.PERSIST, mappedBy = \"orderRequest\")\r\n    private List<LineItem> lineItems;\r\n\r\n    // constructors\r\n\r\n    public void removeLineItem(LineItem lineItem) {\r\n        lineItems.remove(lineItem);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenOrderRequestIsDeleted_thenDeleteShipmentInfo() {\r\n    createOrderRequestWithShipmentInfo();\r\n\r\n    OrderRequest orderRequest = entityManager.find(OrderRequest.class, 1L);\r\n\r\n    entityManager.getTransaction().begin();\r\n    entityManager.remove(orderRequest);\r\n    entityManager.getTransaction().commit();\r\n\r\n    Assert.assertEquals(0, findAllOrderRequest().size());\r\n    Assert.assertEquals(0, findAllShipmentInfo().size());\r\n}\r\n\r\nprivate void createOrderRequestWithShipmentInfo() {\r\n    ShipmentInfo shipmentInfo = new ShipmentInfo(\"name\");\r\n    OrderRequest orderRequest = new OrderRequest(shipmentInfo);\r\n\r\n    entityManager.getTransaction().begin();\r\n    entityManager.persist(orderRequest);\r\n    entityManager.getTransaction().commit();\r\n\r\n    Assert.assertEquals(1, findAllOrderRequest().size());\r\n    Assert.assertEquals(1, findAllShipmentInfo().size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenLineItemIsRemovedFromOrderRequest_thenDeleteOrphanedLineItem() {\r\n    createOrderRequestWithLineItems();\r\n\r\n    OrderRequest orderRequest = entityManager.find(OrderRequest.class, 1L);\r\n    LineItem lineItem = entityManager.find(LineItem.class, 2L);\r\n    orderRequest.removeLineItem(lineItem);\r\n\r\n    entityManager.getTransaction().begin();\r\n    entityManager.merge(orderRequest);\r\n    entityManager.getTransaction().commit();\r\n\r\n    Assert.assertEquals(1, findAllOrderRequest().size());\r\n    Assert.assertEquals(2, findAllLineItem().size());\r\n}\r\n\r\nprivate void createOrderRequestWithLineItems() {\r\n    List<LineItem> lineItems = new ArrayList<>();\r\n    lineItems.add(new LineItem(\"line item 1\"));\r\n    lineItems.add(new LineItem(\"line item 2\"));\r\n    lineItems.add(new LineItem(\"line item 3\"));\r\n\r\n    OrderRequest orderRequest = new OrderRequest(lineItems);\r\n\r\n    entityManager.getTransaction().begin();\r\n    entityManager.persist(orderRequest);\r\n    entityManager.getTransaction().commit();\r\n\r\n    Assert.assertEquals(1, findAllOrderRequest().size());\r\n    Assert.assertEquals(3, findAllLineItem().size());\r\n}\r\n```","```\r\n@Test(expected = PersistenceException.class)\r\npublic void whenLineItemsIsReassigned_thenThrowAnException() {\r\n    createOrderRequestWithLineItems();\r\n\r\n    OrderRequest orderRequest = entityManager.find(OrderRequest.class, 1L);\r\n    orderRequest.setLineItems(new ArrayList<>());\r\n\r\n    entityManager.getTransaction().begin();\r\n    entityManager.merge(orderRequest);\r\n    entityManager.getTransaction().commit();\r\n}\r\n```"]