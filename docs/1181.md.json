["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n    <version>1.4.199</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\nclass Passenger {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    @Column(nullable = false)\r\n    private Long id;\r\n\r\n    @Basic(optional = false)\r\n    @Column(nullable = false)\r\n    private String firstName;\r\n\r\n    @Basic(optional = false)\r\n    @Column(nullable = false)\r\n    private String lastName;\r\n\r\n    // constructor, static factory, getters, setters\r\n}\r\n```","```\r\n@DataJpaTest\r\n@RunWith(SpringRunner.class)\r\npublic class PassengerRepositoryIntegrationTest {\r\n\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n    @Autowired\r\n    private PassengerRepository repository;\r\n\r\n    @Before\r\n    public void before() {\r\n        entityManager.persist(Passenger.from(\"Jill\", \"Smith\"));\r\n        entityManager.persist(Passenger.from(\"Eve\", \"Jackson\"));\r\n        entityManager.persist(Passenger.from(\"Fred\", \"Bloggs\"));\r\n        entityManager.persist(Passenger.from(\"Ricki\", \"Bobbie\"));\r\n        entityManager.persist(Passenger.from(\"Siya\", \"Kolisi\"));\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@Repository\r\npublic interface PassengerRepository extends JpaRepository<Passenger, Long> {\r\n    List<Passenger> findByFirstNameIgnoreCase(String firstName);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPassengers_whenMatchingIgnoreCase_thenExpectedReturned() {\r\n    Passenger jill = Passenger.from(\"Jill\", \"Smith\");\r\n    Passenger eve = Passenger.from(\"Eve\", \"Jackson\");\r\n    Passenger fred = Passenger.from(\"Fred\", \"Bloggs\");\r\n    Passenger siya = Passenger.from(\"Siya\", \"Kolisi\");\r\n    Passenger ricki = Passenger.from(\"Ricki\", \"Bobbie\");\r\n\r\n    List<Passenger> passengers = repository.findByFirstNameIgnoreCase(\"FrED\");\r\n\r\n    assertThat(passengers, contains(fred));\r\n    assertThat(passengers, not(contains(eve)));\r\n    assertThat(passengers, not(contains(siya)));\r\n    assertThat(passengers, not(contains(jill)));\r\n    assertThat(passengers, not(contains(ricki)));\r\n}\r\n```"]