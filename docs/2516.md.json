["```\r\npublic @interface SimpleAnnotation {\r\n    String value();\r\n\r\n    int[] types();\r\n}\r\n```","```\r\n@SimpleAnnotation(value = \"an element\", types = 1)\r\npublic class Element {\r\n    @SimpleAnnotation(value = \"an attribute\", types = { 1, 2 })\r\n    public Element nextElement;\r\n}\r\n```","```\r\npublic @interface SimpleAnnotation {\r\n    String value() default \"This is an element\";\r\n\r\n    int[] types() default { 1, 2, 3 };\r\n}\r\n```","```\r\n@SimpleAnnotation\r\npublic class Element {\r\n    // ...\r\n}\r\n```","```\r\n@SimpleAnnotation(value = \"an attribute\")\r\npublic Element nextElement;\r\n```","```\r\nenum Complexity {\r\n    LOW, HIGH\r\n}\r\n\r\npublic @interface ComplexAnnotation {\r\n    Class<? extends Object> value();\r\n\r\n    int[] types();\r\n\r\n    Complexity complexity();\r\n}\r\n```","```\r\npublic @interface FailingAnnotation {\r\n    Object complexity();\r\n}\r\n```","```\r\n@SimpleAnnotation\r\npublic class Apply {\r\n    @SimpleAnnotation\r\n    private String aField;\r\n\r\n    @SimpleAnnotation\r\n    public Apply() {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@SimpleAnnotation\r\npublic void aMethod(@SimpleAnnotation String param) {\r\n    // ...\r\n}\r\n```","```\r\n@SimpleAnnotation\r\nint i = 10;\r\n\r\nfor (@SimpleAnnotation int j = 0; j < i; j++) {\r\n    // ...\r\n}\r\n\r\ntry (@SimpleAnnotation FileWriter writer = getWriter()) {\r\n    // ...\r\n} catch (Exception ex) {\r\n    // ...\r\n}\r\n```","```\r\n@SimpleAnnotation\r\npublic @interface ComplexAnnotation {\r\n    // ...\r\n}\r\n```","```\r\n@PackageAnnotation\r\npackage com.baeldung.interview.annotations;\r\n```","```\r\n@Target(ElementType.TYPE_USE)\r\npublic @interface SimpleAnnotation {\r\n    // ...\r\n}\r\n```","```\r\nnew @SimpleAnnotation Apply();\r\n```","```\r\naString = (@SimpleAnnotation String) something;\r\n```","```\r\npublic class SimpleList<T>\r\n  implements @SimpleAnnotation List<@SimpleAnnotation T> {\r\n    // ...\r\n}\r\n```","```\r\nvoid aMethod() throws @SimpleAnnotation Exception {\r\n    // ...\r\n}\r\n```","```\r\n@Target(ElementType.FIELD)\r\npublic @interface SimpleAnnotation {\r\n    // ...\r\n}\r\n```","```\r\n@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PACKAGE })\r\n```","```\r\n@Target({})\r\npublic @interface NoTargetAnnotation {\r\n    // ...\r\n}\r\n```","```\r\n@Target(ElementType.ANNOTATION_TYPE)\r\npublic @interface SimpleAnnotation {\r\n    // ...\r\n}\r\n```","```\r\n@Repeatable(Schedules.class)\r\npublic @interface Schedule {\r\n    String time() default \"morning\";\r\n}\r\n```","```\r\npublic @interface Schedules {\r\n    Schedule[] value();\r\n}\r\n```","```\r\n@Schedule\r\n@Schedule(time = \"afternoon\")\r\n@Schedule(time = \"night\")\r\nvoid scheduledMethod() {\r\n    // ...\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface Description {\r\n    String value();\r\n}\r\n```","```\r\nDescription description\r\n  = AnnotatedClass.class.getAnnotation(Description.class);\r\nSystem.out.println(description.value());\r\n```","```\r\n@Target({ ElementType.FIELD, ElementType.TYPE, ElementType.FIELD })\r\npublic @interface TestAnnotation {\r\n    int[] value() default {};\r\n}\r\n```","```\r\n@Target({ ElementType.FIELD, ElementType.TYPE})\r\n```","```\r\npublic @interface AnAnnotation extends OtherAnnotation {\r\n    // Compilation error\r\n}\r\n```"]