["```\r\n@Test\r\npublic void whenFindFourDigitWorks_thenCorrect() {\r\n    Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\r\n    Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\r\n\r\n    assertTrue(m.find());\r\n    assertEquals(8, m.start());\r\n    assertEquals(\"2019\", m.group());\r\n    assertEquals(12, m.end());\r\n\r\n    assertTrue(m.find());\r\n    assertEquals(25, m.start());\r\n    assertEquals(\"2020\", m.group());\r\n    assertEquals(29, m.end());\r\n\r\n    assertFalse(m.find());\r\n}\r\n```","```\r\n@Test\r\npublic void givenStartIndex_whenFindFourDigitWorks_thenCorrect() {\r\n    Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\r\n    Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\r\n\r\n    assertTrue(m.find(20));\r\n    assertEquals(25, m.start());\r\n    assertEquals(\"2020\", m.group());\r\n    assertEquals(29, m.end());  \r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchFourDigitWorks_thenFail() {\r\n    Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\r\n    Matcher m = stringPattern.matcher(\"goodbye 2019 and welcome 2020\");\r\n\r\n    assertFalse(m.matches());\r\n} \r\n```","```\r\n@Test\r\npublic void whenMatchFourDigitWorks_thenCorrect() {\r\n    Pattern stringPattern = Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d\");\r\n    Matcher m = stringPattern.matcher(\"2019\");\r\n\r\n    assertTrue(m.matches());\r\n    assertEquals(0, m.start());\r\n    assertEquals(\"2019\", m.group());\r\n    assertEquals(4, m.end());\r\n    assertTrue(m.matches());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingMatcher_thenReturnTrue() {\r\n    Pattern pattern = Pattern.compile(REGEX);\r\n    Matcher matcher = pattern.matcher(STRING_INPUT);\r\n\r\n    assertTrue(matcher.find());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingMatches_thenReturnFalse() {\r\n    assertFalse(Pattern.matches(REGEX, STRING_INPUT));\r\n}\r\n```"]