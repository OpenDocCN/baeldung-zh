["```\r\npublic class HeaderRoutePredicateFactory extends \r\n  AbstractRoutePredicateFactory<HeaderRoutePredicateFactory.Config> {\r\n\r\n    // ... setup code omitted\r\n    @Override\r\n    public Predicate<ServerWebExchange> apply(Config config) {\r\n        return new GatewayPredicate() {\r\n            @Override\r\n            public boolean test(ServerWebExchange exchange) {\r\n                // ... predicate logic omitted\r\n            }\r\n        };\r\n    }\r\n\r\n    @Validated\r\n    public static class Config {\r\n        public Config(boolean isGolden, String customerIdCookie ) {\r\n          // ... constructor details omitted\r\n        }\r\n        // ...getters/setters omitted\r\n    }\r\n}\r\n```","```\r\npublic class GoldenCustomerRoutePredicateFactory extends \r\n  AbstractRoutePredicateFactory<GoldenCustomerRoutePredicateFactory.Config> {\r\n\r\n    private final GoldenCustomerService goldenCustomerService;\r\n\r\n    // ... constructor omitted\r\n\r\n    @Override\r\n    public Predicate<ServerWebExchange> apply(Config config) {        \r\n        return (ServerWebExchange t) -> {\r\n            List<HttpCookie> cookies = t.getRequest()\r\n              .getCookies()\r\n              .get(config.getCustomerIdCookie());\r\n\r\n            boolean isGolden; \r\n            if ( cookies == null || cookies.isEmpty()) {\r\n                isGolden = false;\r\n            } else {                \r\n                String customerId = cookies.get(0).getValue();                \r\n                isGolden = goldenCustomerService.isGoldenCustomer(customerId);\r\n            }              \r\n            return config.isGolden() ? isGolden : !isGolden;           \r\n        };        \r\n    }\r\n\r\n    @Validated\r\n    public static class Config {        \r\n        boolean isGolden = true;        \r\n        @NotEmpty\r\n        String customerIdCookie = \"customerId\";\r\n        // ...constructors and mutators omitted   \r\n    }    \r\n}\r\n```","```\r\n@Configuration\r\npublic class CustomPredicatesConfig {\r\n    @Bean\r\n    public GoldenCustomerRoutePredicateFactory goldenCustomer(\r\n      GoldenCustomerService goldenCustomerService) {\r\n        return new GoldenCustomerRoutePredicateFactory(goldenCustomerService);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic RouteLocator routes(RouteLocatorBuilder builder, GoldenCustomerRoutePredicateFactory gf ) {\r\n    return builder.routes()\r\n      .route(\"golden_route\", r -> r.path(\"/api/**\")\r\n        .uri(\"https://fastserver\")\r\n        .predicate(gf.apply(new Config(true, \"customerId\"))))\r\n      .route(\"common_route\", r -> r.path(\"/api/**\")\r\n        .uri(\"https://slowserver\")\r\n        .predicate(gf.apply(new Config(false, \"customerId\"))))                \r\n      .build();\r\n}\r\n```","```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: golden_route\r\n        uri: https://fastserver\r\n        predicates:\r\n        - Path=/api/**\r\n        - GoldenCustomer=true\r\n      - id: common_route\r\n        uri: https://slowserver\r\n        predicates:\r\n        - Path=/api/**\r\n        - name: GoldenCustomer\r\n          args:\r\n            golden: false\r\n            customerIdCookie: customerId \r\n```","```\r\n$ curl http://localhost:8080/api/headers\r\n{\r\n  \"headers\": {\r\n    \"Accept\": \"*/*\",\r\n    \"Forwarded\": \"proto=http;host=\\\"localhost:8080\\\";for=\\\"127.0.0.1:51547\\\"\",\r\n    \"Goldencustomer\": \"false\",\r\n    \"Host\": \"httpbin.org\",\r\n    \"User-Agent\": \"curl/7.55.1\",\r\n    \"X-Forwarded-Host\": \"localhost:8080\",\r\n    \"X-Forwarded-Prefix\": \"/api\"\r\n  }\r\n}\r\n```","```\r\n$ curl -b customerId=baeldung http://localhost:8080/api/headers\r\n{\r\n  \"headers\": {\r\n    \"Accept\": \"*/*\",\r\n    \"Cookie\": \"customerId=baeldung\",\r\n    \"Forwarded\": \"proto=http;host=\\\"localhost:8080\\\";for=\\\"127.0.0.1:51651\\\"\",\r\n    \"Goldencustomer\": \"true\",\r\n    \"Host\": \"httpbin.org\",\r\n    \"User-Agent\": \"curl/7.55.1\",\r\n    \"X-Forwarded-Host\": \"localhost:8080\",\r\n    \"X-Forwarded-Prefix\": \"/api\"\r\n  }\r\n}\r\n```"]