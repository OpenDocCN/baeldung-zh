["```\r\nSet<String> availableZoneIds = ZoneId.getAvailableZoneIds();\r\n```","```\r\npublic List<String> getTimeZoneList(OffsetBase base) {\r\n\r\n    LocalDateTime now = LocalDateTime.now();\r\n    return ZoneId.getAvailableZoneIds().stream()\r\n      .map(ZoneId::of)\r\n      .sorted(new ZoneComparator())\r\n      .map(id -> String.format(\r\n        \"(%s%s) %s\", \r\n        base, getOffset(now, id), id.getId()))\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic enum OffsetBase {\r\n    GMT, UTC\r\n}\r\n```","```\r\nprivate String getOffset(LocalDateTime dateTime, ZoneId id) {\r\n    return dateTime\r\n      .atZone(id)\r\n      .getOffset()\r\n      .getId()\r\n      .replace(\"Z\", \"+00:00\");\r\n}\r\n```","```\r\nprivate class ZoneComparator implements Comparator<ZoneId> {\r\n\r\n    @Override\r\n    public int compare(ZoneId zoneId1, ZoneId zoneId2) {\r\n        LocalDateTime now = LocalDateTime.now();\r\n        ZoneOffset offset1 = now.atZone(zoneId1).getOffset();\r\n        ZoneOffset offset2 = now.atZone(zoneId2).getOffset();\r\n\r\n        return offset1.compareTo(offset2);\r\n    }\r\n}\r\n```","```\r\npublic class TimezoneDisplayApp {\r\n\r\n    public static void main(String... args) {\r\n        TimezoneDisplay display = new TimezoneDisplay();\r\n\r\n        System.out.println(\"Time zones in UTC:\");\r\n        List<String> utc = display.getTimeZoneList(\r\n          TimezoneDisplay.OffsetBase.UTC);\r\n        utc.forEach(System.out::println);\r\n\r\n        System.out.println(\"Time zones in GMT:\");\r\n        List<String> gmt = display.getTimeZoneList(\r\n          TimezoneDisplay.OffsetBase.GMT);\r\n        gmt.forEach(System.out::println);\r\n    }\r\n}\r\n```","```\r\nTime zones in UTC:\r\n(UTC+14:00) Pacific/Apia\r\n(UTC+14:00) Pacific/Kiritimati\r\n(UTC+14:00) Pacific/Tongatapu\r\n(UTC+14:00) Etc/GMT-14\r\n```","```\r\npublic List<String> getTimeZoneList(OffsetBase base) {\r\n    String[] availableZoneIds = TimeZone.getAvailableIDs();\r\n    List<String> result = new ArrayList<>(availableZoneIds.length);\r\n\r\n    for (String zoneId : availableZoneIds) {\r\n        TimeZone curTimeZone = TimeZone.getTimeZone(zoneId);\r\n        String offset = calculateOffset(curTimeZone.getRawOffset());\r\n        result.add(String.format(\"(%s%s) %s\", base, offset, zoneId));\r\n    }\r\n    Collections.sort(result);\r\n    return result;\r\n}\r\n```","```\r\nprivate String calculateOffset(int rawOffset) {\r\n    if (rawOffset == 0) {\r\n        return \"+00:00\";\r\n    }\r\n    long hours = TimeUnit.MILLISECONDS.toHours(rawOffset);\r\n    long minutes = TimeUnit.MILLISECONDS.toMinutes(rawOffset);\r\n    minutes = Math.abs(minutes - TimeUnit.HOURS.toMinutes(hours));\r\n\r\n    return String.format(\"%+03d:%02d\", hours, Math.abs(minutes));\r\n}\r\n```"]