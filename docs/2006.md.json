["```\r\npublic class SimpleClass {\r\n    public static void main(String[] args) {\r\n        new SimpleClass().someAdditionMethod(1, 2);\r\n    }\r\n\r\n    public int someAdditionMethod(int a, int b) {\r\n        return a + b;\r\n    }\r\n}\r\n```","```\r\npublic class SimpleClass() {\r\n    public static void main(String[] args) {\r\n        new SimpleClass().add(1, 2);\r\n    }\r\n\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n}\r\n```","```\r\n/**\r\n  * Adds a and b\r\n  * @param a the first number\r\n  * @param b the second number\r\n  */\r\npublic int add(int a, int b) {...}\r\n```","```\r\n/**\r\n  * Adds firstNumber and b\r\n  * @param firstNumber the first number\r\n  * @param b the second number\r\n  */\r\npublic int add(int firstNumber, int b) {...}\r\n```","```\r\npublic static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n    return LocalDate.now().isAfter(startingDate) && LocalDate.now().isBefore(endingDate);\r\n}\r\n```","```\r\npublic static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n    LocalDate now = LocalDate.now();\r\n    return now.isAfter(startingDate) && now.isBefore(endingDate);\r\n}\r\n```","```\r\npublic static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n    LocalDate now = LocalDate.now();\r\n    return isDateBetween(now, startingDate, endingDate);\r\n}\r\n\r\nprivate static boolean isDateBetween(LocalDate date, LocalDate startingDate, LocalDate endingDate) {\r\n    return date.isBefore(endingDate) && date.isAfter(startingDate);\r\n}\r\n```","```\r\nisNowBetween(LocalDate.MIN, LocalDate.MAX);\r\nisDateBetween(LocalDate.of(2019, 1, 1), LocalDate.MIN, LocalDate.MAX);\r\n```","```\r\npublic class DateUtils {\r\n    public static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n        LocalDate now = LocalDate.now();\r\n        return isDateBetween(now, startingDate, endingDate);\r\n    }\r\n\r\n    public static boolean isDateBetween(LocalDate date, LocalDate startingDate, LocalDate endingDate) {\r\n        return date.isBefore(endingDate) && date.isAfter(startingDate);\r\n    }\r\n}\r\n```","```\r\nDateUtils.isNowBetween(LocalDate.MIN, LocalDate.MAX);\r\nDateUtils.isDateBetween(LocalDate.of(2019, 1, 1), LocalDate.MIN, LocalDate.MAX);\r\n```","```\r\npublic static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n    return isDateBetween(LocalDate.now(), startingDate, endingDate);\r\n}\r\n```","```\r\npublic class DateUtils {\r\n    public static boolean isNowBetween(LocalDate startingDate, LocalDate endingDate) {\r\n        LocalDate date = LocalDate.now();\r\n        return date.isBefore(endingDate) && date.isAfter(startingDate);\r\n    }\r\n\r\n    public static boolean isDateBetween(LocalDate date, LocalDate startingDate, LocalDate endingDate) {\r\n        return date.isBefore(endingDate) && date.isAfter(startingDate);\r\n    }\r\n}\r\n```","```\r\npublic static boolean isDateOutside(LocalDate date, LocalDate startingDate, LocalDate endingDate) {\r\n    return !DateUtils.isDateBetween(date, startingDate, endingDate);\r\n}\r\n```","```\r\npublic static boolean isDateOutside(LocalDate date, LocalDate startingDate, LocalDate endingDate) {\r\n    return !isDateBetween(date, startingDate, endingDate);\r\n}\r\n```","```\r\npublic static boolean isDateBetween(LocalDate date, LocalDate startingDate,\r\n   LocalDate endingDate, boolean inclusive) {\r\n    return date.isBefore(endingDate) && date.isAfter(startingDate);\r\n}\r\n```","```\r\npublic class Derived extends Base {\r\n\r\n    public static void main(String[] args) {\r\n        Derived subject = new Derived();\r\n        System.out.println(\"Doubling 21\\. Result: \" + subject.doubleValue(21));\r\n    }\r\n\r\n    private int doubleValue(int number) {\r\n        return number + number;\r\n    }\r\n}\r\n```","```\r\npublic class Base {\r\n    protected int doubleValue(int number) {\r\n        return number + number;\r\n    }\r\n}\r\n```","```\r\npublic class Base {\r\n    protected int doubleValue(int number) {\r\n        return number + number;\r\n    }\r\n}\r\n```","```\r\npublic class Derived extends Base {\r\n    private int theField = 5;\r\n\r\n    public static void main(String[] args) {\r\n        Derived subject = new Derived();\r\n        System.out.println( \"Doubling 21\\. Result: \" + subject.doubleValue(21));\r\n    }\r\n\r\n    protected int doubleValue(int number) {\r\n        return number + number;\r\n    }\r\n}\r\n```"]