["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n{\r\n  \"status\": \"UP\",\r\n  \"details\": {\r\n    \"total\": 499963170816,\r\n    \"free\": 134414831616,\r\n    \"threshold\": 10485760,\r\n    \"exists\": true\r\n  }\r\n}\r\n```","```\r\n@Component\r\npublic class RandomHealthIndicator implements HealthIndicator {\r\n\r\n    @Override\r\n    public Health health() {\r\n        double chance = ThreadLocalRandom.current().nextDouble();\r\n        Health.Builder status = Health.up();\r\n        if (chance > 0.9) {\r\n            status = Health.down();\r\n        }\r\n        return status.build();\r\n    }\r\n} \r\n```","```\r\n{\"status\": \"UP\"}\r\n```","```\r\n@Component(\"rand\")\r\npublic class RandomHealthIndicator implements HealthIndicator {\r\n    // omitted\r\n}\r\n```","```\r\nmanagement.health.random.enabled=false\r\n```","```\r\n@Component\r\n@ConditionalOnEnabledHealthIndicator(\"random\")\r\npublic class RandomHealthIndicator implements HealthIndicator { \r\n    // omitted\r\n}\r\n```","```\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\n@TestPropertySource(properties = \"management.health.random.enabled=false\")\r\nclass DisabledRandomHealthIndicatorIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    void givenADisabledIndicator_whenSendingRequest_thenReturns404() throws Exception {\r\n        mockMvc.perform(get(\"/actuator/health/random\"))\r\n          .andExpect(status().isNotFound());\r\n    }\r\n}\r\n```","```\r\npublic Health health() {\r\n    double chance = ThreadLocalRandom.current().nextDouble();\r\n    Health.Builder status = Health.up();\r\n    if (chance > 0.9) {\r\n        status = Health.down();\r\n    }\r\n\r\n    return status\r\n      .withDetail(\"chance\", chance)\r\n      .withDetail(\"strategy\", \"thread-local\")\r\n      .build();\r\n}\r\n```","```\r\nMap<String, Object> details = new HashMap<>();\r\ndetails.put(\"chance\", chance);\r\ndetails.put(\"strategy\", \"thread-local\");\r\n\r\nreturn status.withDetails(details).build();\r\n```","```\r\n{\r\n  \"status\": \"DOWN\",\r\n  \"details\": {\r\n    \"chance\": 0.9883560157173152,\r\n    \"strategy\": \"thread-local\"\r\n  }\r\n}\r\n```","```\r\nmockMvc.perform(get(\"/actuator/health/random\"))\r\n  .andExpect(jsonPath(\"$.status\").exists())\r\n  .andExpect(jsonPath(\"$.details.strategy\").value(\"thread-local\"))\r\n  .andExpect(jsonPath(\"$.details.chance\").exists());\r\n```","```\r\nif (chance > 0.9) {\r\n    status.withException(new RuntimeException(\"Bad luck\"));\r\n}\r\n```","```\r\nif (chance > 0.9) {\r\n    status = Health.down(new RuntimeException(\"Bad Luck\"));\r\n}\r\n```","```\r\n{\r\n  \"status\": \"DOWN\",\r\n  \"details\": {\r\n    \"error\": \"java.lang.RuntimeException: Bad Luck\",\r\n    \"chance\": 0.9603739107139401,\r\n    \"strategy\": \"thread-local\"\r\n  }\r\n}\r\n```","```\r\nHealth.Builder warning = Health.status(\"WARNING\");\r\n```","```\r\nmanagement.endpoint.health.status.http-mapping.down=500\r\nmanagement.endpoint.health.status.http-mapping.out_of_service=503\r\nmanagement.endpoint.health.status.http-mapping.warning=500\r\n```","```\r\nmockMvc.perform(get(\"/actuator/health/warning\"))\r\n  .andExpect(jsonPath(\"$.status\").value(\"WARNING\"))\r\n  .andExpect(status().isInternalServerError());\r\n```","```\r\n@Component\r\npublic class CustomStatusCodeMapper implements HttpCodeStatusMapper {\r\n\r\n    @Override\r\n    public int getStatusCode(Status status) {\r\n        if (status == Status.DOWN) {\r\n            return 500;\r\n        }\r\n\r\n        if (status == Status.OUT_OF_SERVICE) {\r\n            return 503;\r\n        }\r\n\r\n        if (status == Status.UNKNOWN) {\r\n            return 500;\r\n        }\r\n\r\n        return 200;\r\n    }\r\n} \r\n```","```\r\nif (status.getCode().equals(\"WARNING\")) {\r\n    return 500;\r\n}\r\n```"]