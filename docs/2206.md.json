["```\r\n$ java -version\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n```","```\r\n<properties>\r\n    <dl4j.version>0.9.1</dl4j.version>\r\n</properties>\r\n\r\n<dependencies>\r\n\r\n    <dependency>\r\n        <groupId>org.nd4j</groupId>\r\n        <artifactId>nd4j-native-platform</artifactId>\r\n        <version>${dl4j.version}</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.deeplearning4j</groupId>\r\n        <artifactId>deeplearning4j-core</artifactId>\r\n        <version>${dl4j.version}</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n5.1,3.5,1.4,0.2,0\r\n4.9,3.0,1.4,0.2,0\r\n4.7,3.2,1.3,0.2,0\r\n…\r\n7.0,3.2,4.7,1.4,1\r\n6.4,3.2,4.5,1.5,1\r\n6.9,3.1,4.9,1.5,1\r\n…\r\n```","```\r\ntry (RecordReader recordReader = new CSVRecordReader(0, ',')) {\r\n    recordReader.initialize(new FileSplit(\r\n      new ClassPathResource(\"iris.txt\").getFile()));\r\n\r\n    // …\r\n}\r\n```","```\r\nDataSetIterator iterator = new RecordReaderDataSetIterator(\r\n  recordReader, 150, FEATURES_COUNT, CLASSES_COUNT);\r\nDataSet allData = iterator.next();\r\nallData.shuffle(42);\r\n```","```\r\nDataNormalization normalizer = new NormalizerStandardize();\r\nnormalizer.fit(allData);\r\nnormalizer.transform(allData);\r\n```","```\r\nSplitTestAndTrain testAndTrain = allData.splitTestAndTrain(0.65);\r\nDataSet trainingData = testAndTrain.getTrain();\r\nDataSet testData = testAndTrain.getTest();\r\n```","```\r\nMultiLayerConfiguration configuration \r\n  = new NeuralNetConfiguration.Builder()\r\n    .iterations(1000)\r\n    .activation(Activation.TANH)\r\n    .weightInit(WeightInit.XAVIER)\r\n    .learningRate(0.1)\r\n    .regularization(true).l2(0.0001)\r\n    .list()\r\n    .layer(0, new DenseLayer.Builder().nIn(FEATURES_COUNT).nOut(3).build())\r\n    .layer(1, new DenseLayer.Builder().nIn(3).nOut(3).build())\r\n    .layer(2, new OutputLayer.Builder(\r\n      LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD)\r\n        .activation(Activation.SOFTMAX)\r\n        .nIn(3).nOut(CLASSES_COUNT).build())\r\n    .backprop(true).pretrain(false)\r\n    .build();\r\n```","```\r\nMultiLayerNetwork model = new MultiLayerNetwork(configuration);\r\nmodel.init();\r\nmodel.fit(trainingData);\r\n```","```\r\nINDArray output = model.output(testData.getFeatureMatrix());\r\nEvaluation eval = new Evaluation(3);\r\neval.eval(testData.getLabels(), output);\r\n```","```\r\nExamples labeled as 0 classified by model as 0: 19 times\r\nExamples labeled as 1 classified by model as 1: 16 times\r\nExamples labeled as 1 classified by model as 2: 3 times\r\nExamples labeled as 2 classified by model as 2: 15 times\r\n\r\n==========================Scores========================================\r\n# of classes: 3\r\nAccuracy: 0.9434\r\nPrecision: 0.9444\r\nRecall: 0.9474\r\nF1 Score: 0.9411\r\nPrecision, recall & F1: macro-averaged (equally weighted avg. of 3 classes)\r\n========================================================================\r\n```"]