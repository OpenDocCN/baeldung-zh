["```\r\nciphertext_size (bytes) = cleartext_size + (16 - (cleartext_size % 16))\r\n```","```\r\npublic static SecretKey generateKey(int n) throws NoSuchAlgorithmException {\r\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");\r\n    keyGenerator.init(n);\r\n    SecretKey key = keyGenerator.generateKey();\r\n    return key;\r\n}\r\n```","```\r\npublic static SecretKey getKeyFromPassword(String password, String salt)\r\n    throws NoSuchAlgorithmException, InvalidKeySpecException {\r\n\r\n    SecretKeyFactory factory = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\r\n    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt.getBytes(), 65536, 256);\r\n    SecretKey secret = new SecretKeySpec(factory.generateSecret(spec)\r\n        .getEncoded(), \"AES\");\r\n    return secret;\r\n}\r\n```","```\r\npublic static IvParameterSpec generateIv() {\r\n    byte[] iv = new byte[16];\r\n    new SecureRandom().nextBytes(iv);\r\n    return new IvParameterSpec(iv);\r\n}\r\n```","```\r\npublic static String encrypt(String algorithm, String input, SecretKey key,\r\n    IvParameterSpec iv) throws NoSuchPaddingException, NoSuchAlgorithmException,\r\n    InvalidAlgorithmParameterException, InvalidKeyException,\r\n    BadPaddingException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(algorithm);\r\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\r\n    byte[] cipherText = cipher.doFinal(input.getBytes());\r\n    return Base64.getEncoder()\r\n        .encodeToString(cipherText);\r\n}\r\n```","```\r\npublic static String decrypt(String algorithm, String cipherText, SecretKey key,\r\n    IvParameterSpec iv) throws NoSuchPaddingException, NoSuchAlgorithmException,\r\n    InvalidAlgorithmParameterException, InvalidKeyException,\r\n    BadPaddingException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(algorithm);\r\n    cipher.init(Cipher.DECRYPT_MODE, key, iv);\r\n    byte[] plainText = cipher.doFinal(Base64.getDecoder()\r\n        .decode(cipherText));\r\n    return new String(plainText);\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenEncrypt_thenSuccess()\r\n    throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException,\r\n    BadPaddingException, InvalidAlgorithmParameterException, NoSuchPaddingException { \r\n\r\n    String input = \"baeldung\";\r\n    SecretKey key = AESUtil.generateKey(128);\r\n    IvParameterSpec ivParameterSpec = AESUtil.generateIv();\r\n    String algorithm = \"AES/CBC/PKCS5Padding\";\r\n    String cipherText = AESUtil.encrypt(algorithm, input, key, ivParameterSpec);\r\n    String plainText = AESUtil.decrypt(algorithm, cipherText, key, ivParameterSpec);\r\n    Assertions.assertEquals(input, plainText);\r\n}\r\n```","```\r\npublic static void encryptFile(String algorithm, SecretKey key, IvParameterSpec iv,\r\n    File inputFile, File outputFile) throws IOException, NoSuchPaddingException,\r\n    NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException,\r\n    BadPaddingException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(algorithm);\r\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\r\n    FileInputStream inputStream = new FileInputStream(inputFile);\r\n    FileOutputStream outputStream = new FileOutputStream(outputFile);\r\n    byte[] buffer = new byte[64];\r\n    int bytesRead;\r\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\r\n        byte[] output = cipher.update(buffer, 0, bytesRead);\r\n        if (output != null) {\r\n            outputStream.write(output);\r\n        }\r\n    }\r\n    byte[] outputBytes = cipher.doFinal();\r\n    if (outputBytes != null) {\r\n        outputStream.write(outputBytes);\r\n    }\r\n    inputStream.close();\r\n    outputStream.close();\r\n}\r\n```","```\r\n@Test\r\nvoid givenFile_whenEncrypt_thenSuccess() \r\n    throws NoSuchAlgorithmException, IOException, IllegalBlockSizeException, \r\n    InvalidKeyException, BadPaddingException, InvalidAlgorithmParameterException, \r\n    NoSuchPaddingException {\r\n\r\n    SecretKey key = AESUtil.generateKey(128);\r\n    String algorithm = \"AES/CBC/PKCS5Padding\";\r\n    IvParameterSpec ivParameterSpec = AESUtil.generateIv();\r\n    Resource resource = new ClassPathResource(\"inputFile/baeldung.txt\");\r\n    File inputFile = resource.getFile();\r\n    File encryptedFile = new File(\"classpath:baeldung.encrypted\");\r\n    File decryptedFile = new File(\"document.decrypted\");\r\n    AESUtil.encryptFile(algorithm, key, ivParameterSpec, inputFile, encryptedFile);\r\n    AESUtil.decryptFile(\r\n      algorithm, key, ivParameterSpec, encryptedFile, decryptedFile);\r\n    assertThat(inputFile).hasSameTextualContentAs(decryptedFile);\r\n}\r\n```","```\r\n@Test\r\nvoid givenPassword_whenEncrypt_thenSuccess() \r\n    throws InvalidKeySpecException, NoSuchAlgorithmException, \r\n    IllegalBlockSizeException, InvalidKeyException, BadPaddingException, \r\n    InvalidAlgorithmParameterException, NoSuchPaddingException {\r\n\r\n    String plainText = \"www.baeldung.com\";\r\n    String password = \"baeldung\";\r\n    String salt = \"12345678\";\r\n    IvParameterSpec ivParameterSpec = AESUtil.generateIv();\r\n    SecretKey key = AESUtil.getKeyFromPassword(password,salt);\r\n    String cipherText = AESUtil.encryptPasswordBased(plainText, key, ivParameterSpec);\r\n    String decryptedCipherText = AESUtil.decryptPasswordBased(\r\n      cipherText, key, ivParameterSpec);\r\n    Assertions.assertEquals(plainText, decryptedCipherText);\r\n}\r\n```","```\r\npublic class Student implements Serializable {\r\n    private String name;\r\n    private int age;\r\n\r\n    // standard setters and getters\r\n} \r\n```","```\r\npublic static SealedObject encryptObject(String algorithm, Serializable object,\r\n    SecretKey key, IvParameterSpec iv) throws NoSuchPaddingException,\r\n    NoSuchAlgorithmException, InvalidAlgorithmParameterException, \r\n    InvalidKeyException, IOException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(algorithm);\r\n    cipher.init(Cipher.ENCRYPT_MODE, key, iv);\r\n    SealedObject sealedObject = new SealedObject(object, cipher);\r\n    return sealedObject;\r\n}\r\n```","```\r\npublic static Serializable decryptObject(String algorithm, SealedObject sealedObject,\r\n    SecretKey key, IvParameterSpec iv) throws NoSuchPaddingException,\r\n    NoSuchAlgorithmException, InvalidAlgorithmParameterException, InvalidKeyException,\r\n    ClassNotFoundException, BadPaddingException, IllegalBlockSizeException,\r\n    IOException {\r\n\r\n    Cipher cipher = Cipher.getInstance(algorithm);\r\n    cipher.init(Cipher.DECRYPT_MODE, key, iv);\r\n    Serializable unsealObject = (Serializable) sealedObject.getObject(cipher);\r\n    return unsealObject;\r\n}\r\n```","```\r\n@Test\r\nvoid givenObject_whenEncrypt_thenSuccess() \r\n    throws NoSuchAlgorithmException, IllegalBlockSizeException, InvalidKeyException,\r\n    InvalidAlgorithmParameterException, NoSuchPaddingException, IOException, \r\n    BadPaddingException, ClassNotFoundException {\r\n\r\n    Student student = new Student(\"Baeldung\", 20);\r\n    SecretKey key = AESUtil.generateKey(128);\r\n    IvParameterSpec ivParameterSpec = AESUtil.generateIv();\r\n    String algorithm = \"AES/CBC/PKCS5Padding\";\r\n    SealedObject sealedObject = AESUtil.encryptObject(\r\n      algorithm, student, key, ivParameterSpec);\r\n    Student object = (Student) AESUtil.decryptObject(\r\n      algorithm, sealedObject, key, ivParameterSpec);\r\n    assertThat(student).isEqualToComparingFieldByField(object);\r\n}\r\n```"]