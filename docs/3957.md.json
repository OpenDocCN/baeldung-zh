["```\r\n<dependency>\r\n    <groupId>com.machinezoo.noexception</groupId>\r\n    <artifactId>noexception</artifactId>\r\n    <version>1.1.0</version>\r\n</dependency>\r\n```","```\r\nprivate static Logger logger = LoggerFactory.getLogger(NoExceptionUnitTest.class);\r\n\r\n@Test\r\npublic void whenStdExceptionHandling_thenCatchAndLog() {\r\n    try {\r\n        logger.info(\"Result is \" + Integer.parseInt(\"foobar\"));\r\n    } catch (Throwable exception) {\r\n        logger.error(\"Caught exception:\", exception);\r\n    }\r\n}\r\n```","```\r\n09:29:28.140 [main] ERROR c.b.n.NoExceptionUnitTest \r\n  - Caught exception\r\nj.l.NumberFormatException: For input string: \"foobar\"\r\nat j.l.NumberFormatException.forInputString(NumberFormatException.java:65)\r\nat j.l.Integer.parseInt(Integer.java:580)\r\n...\r\n```","```\r\n@Test\r\npublic void whenDefaultNoException_thenCatchAndLog() {\r\n    Exceptions \r\n      .log()\r\n      .run(() -> System.out.println(\"Result is \" + Integer.parseInt(\"foobar\")));\r\n}\r\n```","```\r\n09:36:04.461 [main] ERROR c.m.n.Exceptions \r\n  - Caught exception\r\nj.l.NumberFormatException: For input string: \"foobar\"\r\nat j.l.NumberFormatException.forInputString(NumberFormatException.java:65)\r\nat j.l.Integer.parseInt(Integer.java:580)\r\n...\r\n```","```\r\n@Test\r\npublic void whenDefaultNoException_thenCatchAndLogWithClassName() {\r\n    Exceptions\r\n      .log(logger)\r\n      .run(() -> System.out.println(\"Result is \" + Integer.parseInt(\"foobar\")));\r\n}\r\n```","```\r\n09:55:23.724 [main] ERROR c.b.n.NoExceptionUnitTest \r\n  - Caught exception\r\nj.l.NumberFormatException: For input string: \"foobar\"\r\nat j.l.NumberFormatException.forInputString(NumberFormatException.java:65)\r\nat j.l.Integer.parseInt(Integer.java:580)\r\n...\r\n```","```\r\n@Test\r\npublic void whenDefaultNoException_thenCatchAndLogWithMessage() {\r\n    Exceptions\r\n      .log(logger, \"Something went wrong:\")\r\n      .run(() -> System.out.println(\"Result is \" + Integer.parseInt(\"foobar\")));\r\n}\r\n```","```\r\n09:55:23.724 [main] ERROR c.b.n.NoExceptionUnitTest \r\n  - Something went wrong:\r\nj.l.NumberFormatException: For input string: \"foobar\"\r\nat j.l.NumberFormatException.forInputString(NumberFormatException.java:65)\r\nat j.l.Integer.parseInt(Integer.java:580)\r\n...\r\n```","```\r\n@Test\r\npublic void\r\n  givenDefaultValue_whenDefaultNoException_thenCatchAndLogPrintDefault() {\r\n    System.out.println(\"Result is \" + Exceptions\r\n      .log(logger, \"Something went wrong:\")\r\n      .get(() -> Integer.parseInt(\"foobar\"))\r\n      .orElse(-1));\r\n}\r\n```","```\r\n12:02:26.388 [main] ERROR c.b.n.NoExceptionUnitTest\r\n  - Caught exception java.lang.NumberFormatException: For input string: \"foobar\"\r\nat j.l.NumberFormatException.forInputString(NumberFormatException.java:65)\r\nat j.l.Integer.parseInt(Integer.java:580)\r\n...\r\n```","```\r\nResult is -1\r\n```","```\r\npublic class CustomExceptionHandler extends ExceptionHandler {\r\n\r\nLogger logger = LoggerFactory.getLogger(CustomExceptionHandler.class);\r\n\r\n    @Override\r\n    public boolean handle(Throwable throwable) {\r\n        if (throwable.getClass().isAssignableFrom(RuntimeException.class)\r\n          || throwable.getClass().isAssignableFrom(Error.class)) {\r\n            return false;\r\n        } else {\r\n            logger.error(\"Caught Exception\", throwable);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenCustomHandler_whenError_thenRethrowError() {\r\n    CustomExceptionHandler customExceptionHandler = new CustomExceptionHandler();\r\n    customExceptionHandler.run(() -> \"foo\".charAt(5));\r\n}\r\n```","```\r\n18:35:26.374 [main] ERROR c.b.n.CustomExceptionHandler \r\n  - Caught Exception \r\nj.l.StringIndexOutOfBoundsException: String index out of range: 5\r\nat j.l.String.charAt(String.java:658)\r\nat c.b.n.CustomExceptionHandling.throwSomething(CustomExceptionHandling.java:20)\r\nat c.b.n.CustomExceptionHandling.lambda$main$0(CustomExceptionHandling.java:10)\r\nat c.m.n.ExceptionHandler.run(ExceptionHandler.java:1474)\r\nat c.b.n.CustomExceptionHandling.main(CustomExceptionHandling.java:10) \r\n```","```\r\n@Test(expected = Error.class)\r\npublic void givenCustomHandler_whenException_thenCatchAndLog() {\r\n    CustomExceptionHandler customExceptionHandler = new CustomExceptionHandler();\r\n    customExceptionHandler.run(() -> throwError());\r\n}\r\n\r\nprivate static void throwError() {\r\n    throw new Error(\"This is very bad.\");\r\n}\r\n```","```\r\nException in thread \"main\" java.lang.Error: This is very bad.\r\nat c.b.n.CustomExceptionHandling.throwSomething(CustomExceptionHandling.java:15)\r\nat c.b.n.CustomExceptionHandling.lambda$main$0(CustomExceptionHandling.java:8)\r\nat c.m.n.ExceptionHandler.run(ExceptionHandler.java:1474)\r\nt c.b.n.CustomExceptionHandling.main(CustomExceptionHandling.java:8)\r\n```"]