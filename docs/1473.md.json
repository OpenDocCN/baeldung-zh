["```\r\nEmployee e = ...; // get an employee instance\r\nString template = \"Firstname: %s, Lastname: %s, Id: %s, Company: %s, Role: %s, Department: %s, Address: %s ...\";\r\nString.format(template, e.firstName, e.lastName, e.Id, e.company, e.department, e.role ... ) \r\n```","```\r\nString template = \"Firstname: ${firstname}, Lastname: ${lastname}, Id: ${id} ...\";\r\nourFormatMethod.format(template, parameterMap);\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-text</artifactId>\r\n    <version>1.9</version>\r\n</dependency>\r\n```","```\r\nString TEMPLATE = \"Text: [${text}] Number: [${number}] Text again: [${text}]\";\r\n```","```\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"text\", \"It's awesome!\");\r\nparams.put(\"number\", 42);\r\nString result = StrSubstitutor.replace(TEMPLATE, params, \"${\", \"}\");\r\nassertThat(result).isEqualTo(\"Text: [It's awesome!] Number: [42] Text again: [It's awesome!]\"); \r\n```","```\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"text\", \"'${number}' is a placeholder.\");\r\nparams.put(\"number\", 42);\r\nString result = StrSubstitutor.replace(TEMPLATE, params, \"${\", \"}\");\r\n\r\nassertThat(result).isEqualTo(\"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\"); \r\n```","```\r\norg.opentest4j.AssertionFailedError: \r\nexpected: \"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\"\r\n but was: \"Text: ['42' is a placeholder.] Number: [42] Text again: ['42' is a placeholder.]\"\r\n```","```\r\nString TEMPLATE = \"Text: [%{text}] Number: [%{number}] Text again: [%{text}]\";\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"text\", \"'${number}' is a placeholder.\");\r\nparams.put(\"number\", 42);\r\nString result = StrSubstitutor.replace(TEMPLATE, params, \"%{\", \"}\");\r\n\r\nassertThat(result).isEqualTo(\"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\"); \r\n```","```\r\nString TEMPLATE = \"Text: [${text}] Number: [${number}] Text again: [${text}]\";\r\nMap<String, Object> params ...\r\n```","```\r\nString NEW_TEMPLATE = \"Text: [%s] Number: [%s] Text again: [%s]\";\r\nList<Object> valueList = List.of(\"'${number}' is a placeholder.\", 42, \"'${number}' is a placeholder.\");\r\n```","```\r\npublic static String format(String template, Map<String, Object> parameters) {\r\n    StringBuilder newTemplate = new StringBuilder(template);\r\n    List<Object> valueList = new ArrayList<>();\r\n\r\n    Matcher matcher = Pattern.compile(\"[$][{](\\\\w+)}\").matcher(template);\r\n\r\n    while (matcher.find()) {\r\n        String key = matcher.group(1);\r\n\r\n        String paramName = \"${\" + key + \"}\";\r\n        int index = newTemplate.indexOf(paramName);\r\n        if (index != -1) {\r\n            newTemplate.replace(index, index + paramName.length(), \"%s\");\r\n            valueList.add(parameters.get(key));\r\n        }\r\n    }\r\n\r\n    return String.format(newTemplate.toString(), valueList.toArray());\r\n} \r\n```","```\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"text\", \"It's awesome!\");\r\nparams.put(\"number\", 42);\r\nString result = NamedFormatter.format(TEMPLATE, params);\r\nassertThat(result).isEqualTo(\"Text: [It's awesome!] Number: [42] Text again: [It's awesome!]\"); \r\n```","```\r\nparams.put(\"text\", \"'${number}' is a placeholder.\");\r\nresult = NamedFormatter.format(TEMPLATE, params);\r\nassertThat(result).isEqualTo(\"Text: ['${number}' is a placeholder.] Number: [42] Text again: ['${number}' is a placeholder.]\"); \r\n```"]