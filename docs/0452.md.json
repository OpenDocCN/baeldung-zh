["```\r\ndocker run -p 5672:5672 -p 15672:15672 --name rabbit rabbitmq:3-management\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-amqp</artifactId>\r\n        <version>2.2.4.RELEASE</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@Bean\r\npublic Queue blockingQueue() {\r\n    return QueueBuilder.nonDurable(\"blocking-queue\").build();\r\n}\r\n```","```\r\n@Bean\r\npublic RetryOperationsInterceptor retryInterceptor() {\r\n    return RetryInterceptorBuilder.stateless()\r\n      .backOffOptions(1000, 3.0, 10000)\r\n      .maxAttempts(5)\r\n      .recoverer(observableRecoverer())\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic SimpleRabbitListenerContainerFactory retryContainerFactory(\r\n  ConnectionFactory connectionFactory, RetryOperationsInterceptor retryInterceptor) {\r\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\r\n    factory.setConnectionFactory(connectionFactory);\r\n\r\n    Advice[] adviceChain = { retryInterceptor };\r\n    factory.setAdviceChain(adviceChain);\r\n\r\n    return factory;\r\n}\r\n```","```\r\n@RabbitListener(queues = \"blocking-queue\", containerFactory = \"retryContainerFactory\")\r\npublic void consumeBlocking(String payload) throws Exception {\r\n    logger.info(\"Processing message from blocking-queue: {}\", payload);\r\n\r\n    throw new Exception(\"exception occured!\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendToBlockingQueue_thenAllMessagesProcessed() throws Exception {\r\n    int nb = 2;\r\n\r\n    CountDownLatch latch = new CountDownLatch(nb);\r\n    observableRecoverer.setObserver(() -> latch.countDown());\r\n\r\n    for (int i = 1; i <= nb; i++) {\r\n        rabbitTemplate.convertAndSend(\"blocking-queue\", \"blocking message \" + i);\r\n    }\r\n\r\n    latch.await();\r\n}\r\n```","```\r\n2020-02-18 21:17:55.638  INFO : Processing message from blocking-queue: blocking message 1\r\n2020-02-18 21:17:56.641  INFO : Processing message from blocking-queue: blocking message 1\r\n2020-02-18 21:17:59.644  INFO : Processing message from blocking-queue: blocking message 1\r\n2020-02-18 21:18:08.654  INFO : Processing message from blocking-queue: blocking message 1\r\n2020-02-18 21:18:18.657  INFO : Processing message from blocking-queue: blocking message 1\r\n2020-02-18 21:18:18.875  ERROR : java.lang.Exception: exception occured!\r\n2020-02-18 21:18:18.858  INFO : Processing message from blocking-queue: blocking message 2\r\n2020-02-18 21:18:19.860  INFO : Processing message from blocking-queue: blocking message 2\r\n2020-02-18 21:18:22.863  INFO : Processing message from blocking-queue: blocking message 2\r\n2020-02-18 21:18:31.867  INFO : Processing message from blocking-queue: blocking message 2\r\n2020-02-18 21:18:41.871  INFO : Processing message from blocking-queue: blocking message 2\r\n2020-02-18 21:18:41.875 ERROR : java.lang.Exception: exception occured!\r\n```","```\r\n@RabbitListener(queues = \"blocking-queue\", containerFactory = \"retryContainerFactory\", concurrency = \"2\")\r\n```","```\r\n@Bean\r\npublic Queue retryWaitEndedQueue() {\r\n    return QueueBuilder.nonDurable(\"retry-wait-ended-queue\").build();\r\n}\r\n```","```\r\n@RabbitListener(queues = \"retry-wait-ended-queue\", containerFactory = \"defaultContainerFactory\")\r\npublic void consumeRetryWaitEndedMessage(String payload, Message message, Channel channel) throws Exception{\r\n    MessageProperties props = message.getMessageProperties();\r\n\r\n    rabbitTemplate().convertAndSend(props.getHeader(\"x-original-exchange\"), \r\n      props.getHeader(\"x-original-routing-key\"), message);\r\n}\r\n```","```\r\npublic class RetryQueues {\r\n    private Queue[] queues;\r\n    private long initialInterval;\r\n    private double factor;\r\n    private long maxWait;\r\n\r\n    // constructor, getters and setters\r\n```","```\r\n@Bean\r\npublic Queue retryQueue1() {\r\n    return QueueBuilder.nonDurable(\"retry-queue-1\")\r\n      .deadLetterExchange(\"\")\r\n      .deadLetterRoutingKey(\"retry-wait-ended-queue\")\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic Queue retryQueue2() {\r\n    return QueueBuilder.nonDurable(\"retry-queue-2\")\r\n      .deadLetterExchange(\"\")\r\n      .deadLetterRoutingKey(\"retry-wait-ended-queue\")\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic Queue retryQueue3() {\r\n    return QueueBuilder.nonDurable(\"retry-queue-3\")\r\n      .deadLetterExchange(\"\")\r\n      .deadLetterRoutingKey(\"retry-wait-ended-queue\")\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic RetryQueues retryQueues() {\r\n    return new RetryQueues(1000, 3.0, 10000, retryQueue1(), retryQueue2(), retryQueue3());\r\n}\r\n```","```\r\npublic class RetryQueuesInterceptor implements MethodInterceptor {\r\n\r\n    // fields and constructor\r\n\r\n    @Override\r\n    public Object invoke(MethodInvocation invocation) throws Throwable {\r\n        return tryConsume(invocation, this::ack, (messageAndChannel, e) -> {\r\n            try {\r\n                int retryCount = tryGetRetryCountOrFail(messageAndChannel, e);\r\n                sendToNextRetryQueue(messageAndChannel, retryCount);\r\n            } catch (Throwable t) {\r\n                // ...\r\n                throw new RuntimeException(t);\r\n            }\r\n        });\r\n    }\r\n```","```\r\nprivate void sendToNextRetryQueue(MessageAndChannel mac, int retryCount) throws Exception {\r\n    String retryQueueName = retryQueues.getQueueName(retryCount);\r\n\r\n    rabbitTemplate.convertAndSend(retryQueueName, mac.message, m -> {\r\n        MessageProperties props = m.getMessageProperties();\r\n        props.setExpiration(String.valueOf(retryQueues.getTimeToWait(retryCount)));\r\n        props.setHeader(\"x-retried-count\", String.valueOf(retryCount + 1));\r\n        props.setHeader(\"x-original-exchange\", props.getReceivedExchange());\r\n        props.setHeader(\"x-original-routing-key\", props.getReceivedRoutingKey());\r\n\r\n        return m;\r\n    });\r\n\r\n    mac.channel.basicReject(mac.message.getMessageProperties()\r\n      .getDeliveryTag(), false);\r\n}\r\n```","```\r\n@Bean\r\npublic SimpleRabbitListenerContainerFactory retryQueuesContainerFactory(\r\n  ConnectionFactory connectionFactory, RetryQueuesInterceptor retryInterceptor) {\r\n    SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\r\n    factory.setConnectionFactory(connectionFactory);\r\n\r\n    Advice[] adviceChain = { retryInterceptor };\r\n    factory.setAdviceChain(adviceChain);\r\n\r\n    return factory;\r\n}\r\n```","```\r\n@Bean\r\npublic Queue nonBlockingQueue() {\r\n    return QueueBuilder.nonDurable(\"non-blocking-queue\")\r\n      .build();\r\n}\r\n\r\n@RabbitListener(queues = \"non-blocking-queue\", containerFactory = \"retryQueuesContainerFactory\", \r\n  ackMode = \"MANUAL\")\r\npublic void consumeNonBlocking(String payload) throws Exception {\r\n    logger.info(\"Processing message from non-blocking-queue: {}\", payload);\r\n\r\n    throw new Exception(\"Error occured!\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendToNonBlockingQueue_thenAllMessageProcessed() throws Exception {\r\n    int nb = 2;\r\n\r\n    CountDownLatch latch = new CountDownLatch(nb);\r\n    retryQueues.setObserver(() -> latch.countDown());\r\n\r\n    for (int i = 1; i <= nb; i++) {\r\n        rabbitTemplate.convertAndSend(\"non-blocking-queue\", \"non-blocking message \" + i);\r\n    }\r\n\r\n    latch.await();\r\n}\r\n```","```\r\n2020-02-19 10:31:40.640  INFO : Processing message from non-blocking-queue: non blocking message 1\r\n2020-02-19 10:31:40.656  INFO : Processing message from non-blocking-queue: non blocking message 2\r\n2020-02-19 10:31:41.620  INFO : Processing message from non-blocking-queue: non blocking message 1\r\n2020-02-19 10:31:41.623  INFO : Processing message from non-blocking-queue: non blocking message 2\r\n2020-02-19 10:31:44.415  INFO : Processing message from non-blocking-queue: non blocking message 1\r\n2020-02-19 10:31:44.420  INFO : Processing message from non-blocking-queue: non blocking message 2\r\n2020-02-19 10:31:52.751  INFO : Processing message from non-blocking-queue: non blocking message 1\r\n2020-02-19 10:31:52.774 ERROR : java.lang.Exception: Error occured!\r\n2020-02-19 10:31:52.829  INFO : Processing message from non-blocking-queue: non blocking message 2\r\n2020-02-19 10:31:52.841 ERROR : java.lang.Exception: Error occured!\r\n```"]