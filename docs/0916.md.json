["```\r\ngoogle.recaptcha.key.site=6LfaHiITAAAA...\r\ngoogle.recaptcha.key.secret=6LfaHiITAAAA...\r\n```","```\r\n@Component\r\n@ConfigurationProperties(prefix = \"google.recaptcha.key\")\r\npublic class CaptchaSettings {\r\n\r\n    private String site;\r\n    private String secret;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\r\n...\r\n\r\n<script src='https://www.google.com/recaptcha/api.js'></script>\r\n</head>\r\n<body>\r\n\r\n    ...\r\n\r\n    <form action=\"/\" method=\"POST\" enctype=\"utf8\">\r\n        ...\r\n\r\n        <div class=\"g-recaptcha col-sm-5\"\r\n          th:attr=\"data-sitekey=${@captchaSettings.getSite()}\"></div>\r\n        <span id=\"captchaError\" class=\"alert alert-danger col-sm-4\"\r\n          style=\"display:none\"></span>\r\n```","```\r\n{\r\n    \"success\": true|false,\r\n    \"challenge_ts\": timestamp,\r\n    \"hostname\": string,\r\n    \"error-codes\": [ ... ]\r\n}\r\n```","```\r\npublic class RegistrationController {\r\n\r\n    @Autowired\r\n    private ICaptchaService captchaService;\r\n\r\n    ...\r\n\r\n    @RequestMapping(value = \"/user/registration\", method = RequestMethod.POST)\r\n    @ResponseBody\r\n    public GenericResponse registerUserAccount(@Valid UserDto accountDto, HttpServletRequest request) {\r\n        String response = request.getParameter(\"g-recaptcha-response\");\r\n        captchaService.processResponse(response);\r\n\r\n        // Rest of implementation\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class CaptchaService implements ICaptchaService {\r\n\r\n    @Autowired\r\n    private CaptchaSettings captchaSettings;\r\n\r\n    @Autowired\r\n    private RestOperations restTemplate;\r\n\r\n    private static Pattern RESPONSE_PATTERN = Pattern.compile(\"[A-Za-z0-9_-]+\");\r\n\r\n    @Override\r\n    public void processResponse(String response) {\r\n        if(!responseSanityCheck(response)) {\r\n            throw new InvalidReCaptchaException(\"Response contains invalid characters\");\r\n        }\r\n\r\n        URI verifyUri = URI.create(String.format(\r\n          \"https://www.google.com/recaptcha/api/siteverify?secret=%s&response;=%s&remoteip;=%s\",\r\n          getReCaptchaSecret(), response, getClientIP()));\r\n\r\n        GoogleResponse googleResponse = restTemplate.getForObject(verifyUri, GoogleResponse.class);\r\n\r\n        if(!googleResponse.isSuccess()) {\r\n            throw new ReCaptchaInvalidException(\"reCaptcha was not successfully validated\");\r\n        }\r\n    }\r\n\r\n    private boolean responseSanityCheck(String response) {\r\n        return StringUtils.hasLength(response) && RESPONSE_PATTERN.matcher(response).matches();\r\n    }\r\n}\r\n```","```\r\n@JsonInclude(JsonInclude.Include.NON_NULL)\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\n@JsonPropertyOrder({\r\n    \"success\",\r\n    \"challenge_ts\",\r\n    \"hostname\",\r\n    \"error-codes\"\r\n})\r\npublic class GoogleResponse {\r\n\r\n    @JsonProperty(\"success\")\r\n    private boolean success;\r\n\r\n    @JsonProperty(\"challenge_ts\")\r\n    private String challengeTs;\r\n\r\n    @JsonProperty(\"hostname\")\r\n    private String hostname;\r\n\r\n    @JsonProperty(\"error-codes\")\r\n    private ErrorCode[] errorCodes;\r\n\r\n    @JsonIgnore\r\n    public boolean hasClientError() {\r\n        ErrorCode[] errors = getErrorCodes();\r\n        if(errors == null) {\r\n            return false;\r\n        }\r\n        for(ErrorCode error : errors) {\r\n            switch(error) {\r\n                case InvalidResponse:\r\n                case MissingResponse:\r\n                    return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static enum ErrorCode {\r\n        MissingSecret,     InvalidSecret,\r\n        MissingResponse,   InvalidResponse;\r\n\r\n        private static Map<String, ErrorCode> errorsMap = new HashMap<String, ErrorCode>(4);\r\n\r\n        static {\r\n            errorsMap.put(\"missing-input-secret\",   MissingSecret);\r\n            errorsMap.put(\"invalid-input-secret\",   InvalidSecret);\r\n            errorsMap.put(\"missing-input-response\", MissingResponse);\r\n            errorsMap.put(\"invalid-input-response\", InvalidResponse);\r\n        }\r\n\r\n        @JsonCreator\r\n        public static ErrorCode forValue(String value) {\r\n            return errorsMap.get(value.toLowerCase());\r\n        }\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nregister(event){\r\n    event.preventDefault();\r\n\r\n    var formData= $('form').serialize();\r\n    $.post(serverContext + \"user/registration\", formData, function(data){\r\n        if(data.message == \"success\") {\r\n            // success handler\r\n        }\r\n    })\r\n    .fail(function(data) {\r\n        grecaptcha.reset();\r\n        ...\r\n\r\n        if(data.responseJSON.error == \"InvalidReCaptcha\"){ \r\n            $(\"#captchaError\").show().html(data.responseJSON.message);\r\n        }\r\n        ...\r\n    }\r\n}\r\n```","```\r\npublic class ReCaptchaAttemptService {\r\n    private int MAX_ATTEMPT = 4;\r\n    private LoadingCache<String, Integer> attemptsCache;\r\n\r\n    public ReCaptchaAttemptService() {\r\n        super();\r\n        attemptsCache = CacheBuilder.newBuilder()\r\n          .expireAfterWrite(4, TimeUnit.HOURS).build(new CacheLoader<String, Integer>() {\r\n            @Override\r\n            public Integer load(String key) {\r\n                return 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    public void reCaptchaSucceeded(String key) {\r\n        attemptsCache.invalidate(key);\r\n    }\r\n\r\n    public void reCaptchaFailed(String key) {\r\n        int attempts = attemptsCache.getUnchecked(key);\r\n        attempts++;\r\n        attemptsCache.put(key, attempts);\r\n    }\r\n\r\n    public boolean isBlocked(String key) {\r\n        return attemptsCache.getUnchecked(key) >= MAX_ATTEMPT;\r\n    }\r\n}\r\n```","```\r\npublic class CaptchaService implements ICaptchaService {\r\n\r\n    @Autowired\r\n    private ReCaptchaAttemptService reCaptchaAttemptService;\r\n\r\n    ...\r\n\r\n    @Override\r\n    public void processResponse(String response) {\r\n\r\n        ...\r\n\r\n        if(reCaptchaAttemptService.isBlocked(getClientIP())) {\r\n            throw new InvalidReCaptchaException(\"Client exceeded maximum number of failed attempts\");\r\n        }\r\n\r\n        ...\r\n\r\n        GoogleResponse googleResponse = ...\r\n\r\n        if(!googleResponse.isSuccess()) {\r\n            if(googleResponse.hasClientError()) {\r\n                reCaptchaAttemptService.reCaptchaFailed(getClientIP());\r\n            }\r\n            throw new ReCaptchaInvalidException(\"reCaptcha was not successfully validated\");\r\n        }\r\n        reCaptchaAttemptService.reCaptchaSucceeded(getClientIP());\r\n    }\r\n}\r\n```","```\r\ngoogle.recaptcha.key.site=6LefKOAUAAAAAE...\r\ngoogle.recaptcha.key.secret=6LefKOAUAAAA...\r\ngoogle.recaptcha.key.threshold=0.5\r\n```","```\r\n@Component\r\n@ConfigurationProperties(prefix = \"google.recaptcha.key\")\r\npublic class CaptchaSettings {\r\n    // ... other properties\r\n    private float threshold;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n\r\n...\r\n\r\n<script th:src='|https://www.google.com/recaptcha/api.js?render=${@captchaService.getReCaptchaSite()}'></script>\r\n</head>\r\n<body>\r\n\r\n    ...\r\n\r\n    <form action=\"/\" method=\"POST\" enctype=\"utf8\">\r\n        ...\r\n\r\n        <input type=\"hidden\" id=\"response\" name=\"response\" value=\"\" />\r\n        ...\r\n    </form>\r\n\r\n   ...\r\n\r\n<script th:inline=\"javascript\">\r\n   ...\r\n   var siteKey = /*[[${@captchaService.getReCaptchaSite()}]]*/;\r\n   grecaptcha.execute(siteKey, {action: /*[[${T(com.baeldung.captcha.CaptchaService).REGISTER_ACTION}]]*/}).then(function(response) {\r\n\t$('#response').val(response);    \r\n    var formData= $('form').serialize();\r\n```","```\r\n{\r\n    ...\r\n    \"score\": number,\r\n    \"action\": string\r\n}\r\n```","```\r\npublic class RegistrationController {\r\n\r\n    @Autowired\r\n    private ICaptchaService captchaService;\r\n\r\n    ...\r\n\r\n    @RequestMapping(value = \"/user/registration\", method = RequestMethod.POST)\r\n    @ResponseBody\r\n    public GenericResponse registerUserAccount(@Valid UserDto accountDto, HttpServletRequest request) {\r\n        String response = request.getParameter(\"response\");\r\n        captchaService.processResponse(response, CaptchaService.REGISTER_ACTION);\r\n\r\n        // rest of implementation\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class CaptchaService implements ICaptchaService {\r\n\r\n    public static final String REGISTER_ACTION = \"register\";\r\n    ...\r\n\r\n    @Override\r\n    public void processResponse(String response, String action) {\r\n        ...\r\n\r\n        GoogleResponse googleResponse = restTemplate.getForObject(verifyUri, GoogleResponse.class);        \r\n        if(!googleResponse.isSuccess() || !googleResponse.getAction().equals(action) \r\n            || googleResponse.getScore() < captchaSettings.getThreshold()) {\r\n            ...\r\n            throw new ReCaptchaInvalidException(\"reCaptcha was not successfully validated\");\r\n        }\r\n        reCaptchaAttemptService.reCaptchaSucceeded(getClientIP());\r\n    }\r\n}\r\n```","```\r\n@JsonPropertyOrder({\r\n    \"success\",\r\n    \"score\", \r\n    \"action\",\r\n    \"challenge_ts\",\r\n    \"hostname\",\r\n    \"error-codes\"\r\n})\r\npublic class GoogleResponse {\r\n    // ... other properties\r\n    @JsonProperty(\"score\")\r\n    private float score;\r\n    @JsonProperty(\"action\")\r\n    private String action;\r\n\r\n    // standard getters and setters\r\n}\r\n```"]