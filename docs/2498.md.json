["```\r\n@Entity\r\npublic class User {\r\n\r\n    // other fields are omitted for brevity\r\n\r\n    @OneToMany(mappedBy = \"userId\")\r\n    @Fetch(FetchMode.SUBSELECT)\r\n    private List<Document> docs = new ArrayList<>();\r\n}\r\n```","```\r\n@Service\r\npublic class ServiceLayer {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Transactional(readOnly = true)\r\n    public long countAllDocsTransactional() {\r\n        return countAllDocs();\r\n    }\r\n\r\n    public long countAllDocsNonTransactional() {\r\n        return countAllDocs();\r\n    }\r\n\r\n    private long countAllDocs() {\r\n        return userRepository.findAll()\r\n            .stream()\r\n            .map(User::getDocs)\r\n            .mapToLong(Collection::size)\r\n            .sum();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenCallTransactionalMethodWithPropertyOff_thenTestPass() {\r\n    SQLStatementCountValidator.reset();\r\n\r\n    long docsCount = serviceLayer.countAllDocsTransactional();\r\n\r\n    assertEquals(EXPECTED_DOCS_COLLECTION_SIZE, docsCount);\r\n    SQLStatementCountValidator.assertSelectCount(2);\r\n}\r\n```","```\r\n@Test(expected = LazyInitializationException.class)\r\npublic void whenCallNonTransactionalMethodWithPropertyOff_thenThrowException() {\r\n    serviceLayer.countAllDocsNonTransactional();\r\n}\r\n```","```\r\nspring.jpa.properties.hibernate.enable_lazy_load_no_trans=true\r\n```","```\r\n@Test\r\npublic void whenCallNonTransactionalMethodWithPropertyOn_thenGetNplusOne() {\r\n    SQLStatementCountValidator.reset();\r\n\r\n    long docsCount = serviceLayer.countAllDocsNonTransactional();\r\n\r\n    assertEquals(EXPECTED_DOCS_COLLECTION_SIZE, docsCount);\r\n    SQLStatementCountValidator.assertSelectCount(EXPECTED_USERS_COUNT + 1);\r\n}\r\n```"]