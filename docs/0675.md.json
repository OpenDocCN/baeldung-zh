["```\r\npublic class ListNode {\r\n\r\n    private int data;\r\n    private ListNode next;\r\n\r\n    ListNode(int data) {\r\n        this.data = data;\r\n        this.next = null;\r\n    }\r\n\r\n   // standard getters and setters\r\n}\r\n```","```\r\nListNode constructLinkedList() {\r\n    ListNode head = null;\r\n    ListNode tail = null;\r\n    for (int i = 1; i <= 5; i++) {\r\n        ListNode node = new ListNode(i);\r\n        if (head == null) {\r\n            head = node;\r\n        } else {\r\n            tail.setNext(node);\r\n        }\r\n        tail = node;\r\n    }\r\n    return head;\r\n}\r\n```","```\r\nListNode reverseList(ListNode head) {\r\n    ListNode previous = null;\r\n    ListNode current = head;\r\n    while (current != null) {\r\n        ListNode nextElement = current.getNext();\r\n        current.setNext(previous);\r\n        previous = current;\r\n        current = nextElement;\r\n    }\r\n    return previous;\r\n}\r\n```","```\r\n@Test\r\npublic void givenLinkedList_whenIterativeReverse_thenOutputCorrectResult() {\r\n    ListNode head = constructLinkedList();\r\n    ListNode node = head;\r\n    for (int i = 1; i <= 5; i++) {\r\n        assertNotNull(node);\r\n        assertEquals(i, node.getData());\r\n        node = node.getNext();\r\n    }\r\n\r\n    LinkedListReversal reversal = new LinkedListReversal();\r\n    node = reversal.reverseList(head);\r\n\r\n    for (int i = 5; i >= 1; i--) {\r\n        assertNotNull(node);\r\n        assertEquals(i, node.getData());\r\n        node = node.getNext();\r\n    }\r\n}\r\n```","```\r\nListNode reverseListRecursive(ListNode head) {\r\n    if (head == null) {\r\n        return null;\r\n    }\r\n    if (head.getNext() == null) {\r\n        return head;\r\n    }\r\n    ListNode node = reverseListRecursive(head.getNext());\r\n    head.getNext().setNext(head);\r\n    head.setNext(null);\r\n    return node;\r\n}\r\n```","```\r\n@Test\r\npublic void givenLinkedList_whenRecursiveReverse_thenOutputCorrectResult() {\r\n    ListNode head = constructLinkedList();\r\n    ListNode node = head;\r\n    for (int i = 1; i <= 5; i++) {\r\n        assertNotNull(node);\r\n        assertEquals(i, node.getData());\r\n        node = node.getNext();\r\n    }\r\n\r\n    LinkedListReversal reversal = new LinkedListReversal();\r\n    node = reversal.reverseListRecursive(head);\r\n\r\n    for (int i = 5; i >= 1; i--) {\r\n        assertNotNull(node);\r\n        assertEquals(i, node.getData());\r\n        node = node.getNext();\r\n    }\r\n}\r\n```"]