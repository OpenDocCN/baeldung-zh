["```\r\npublic HashSet() {\r\n    map = new HashMap<>();\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddingElement_shouldAddElement() {\r\n    Set<String> hashset = new HashSet<>();\r\n\r\n    assertTrue(hashset.add(\"String Added\"));\r\n}\r\n```","```\r\npublic boolean add(E e) {\r\n    return map.put(e, PRESENT) == null;\r\n}\r\n```","```\r\nprivate transient HashMap<E, Object> map;\r\n```","```\r\n@Test\r\npublic void whenCheckingForElement_shouldSearchForElement() {\r\n    Set<String> hashsetContains = new HashSet<>();\r\n    hashsetContains.add(\"String Added\");\r\n\r\n    assertTrue(hashsetContains.contains(\"String Added\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemovingElement_shouldRemoveElement() {\r\n    Set<String> removeFromHashSet = new HashSet<>();\r\n    removeFromHashSet.add(\"String Added\");\r\n\r\n    assertTrue(removeFromHashSet.remove(\"String Added\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenClearingHashSet_shouldClearHashSet() {\r\n    Set<String> clearHashSet = new HashSet<>();\r\n    clearHashSet.add(\"String Added\");\r\n    clearHashSet.clear();\r\n\r\n    assertTrue(clearHashSet.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingTheSizeOfHashSet_shouldReturnThesize() {\r\n    Set<String> hashSetSize = new HashSet<>();\r\n    hashSetSize.add(\"String Added\");\r\n\r\n    assertEquals(1, hashSetSize.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingForEmptyHashSet_shouldCheckForEmpty() {\r\n    Set<String> emptyHashSet = new HashSet<>();\r\n\r\n    assertTrue(emptyHashSet.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenIteratingHashSet_shouldIterateHashSet() {\r\n    Set<String> hashset = new HashSet<>();\r\n    hashset.add(\"First\");\r\n    hashset.add(\"Second\");\r\n    hashset.add(\"Third\");\r\n    Iterator<String> itr = hashset.iterator();\r\n    while(itr.hasNext()){\r\n        System.out.println(itr.next());\r\n    }\r\n}\r\n```","```\r\n@Test(expected = ConcurrentModificationException.class)\r\npublic void whenModifyingHashSetWhileIterating_shouldThrowException() {\r\n\r\n    Set<String> hashset = new HashSet<>();\r\n    hashset.add(\"First\");\r\n    hashset.add(\"Second\");\r\n    hashset.add(\"Third\");\r\n    Iterator<String> itr = hashset.iterator();\r\n    while (itr.hasNext()) {\r\n        itr.next();\r\n        hashset.remove(\"Second\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenRemovingElementUsingIterator_shouldRemoveElement() {\r\n\r\n    Set<String> hashset = new HashSet<>();\r\n    hashset.add(\"First\");\r\n    hashset.add(\"Second\");\r\n    hashset.add(\"Third\");\r\n    Iterator<String> itr = hashset.iterator();\r\n    while (itr.hasNext()) {\r\n        String element = itr.next();\r\n        if (element.equals(\"Second\"))\r\n            itr.remove();\r\n    }\r\n\r\n    assertEquals(2, hashset.size());\r\n}\r\n```","```\r\nSet<String> hashset = new HashSet<>();\r\nSet<String> hashset = new HashSet<>(20);\r\nSet<String> hashset = new HashSet<>(20, 0.5f); \r\n```"]