["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>4.3.7.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-validator</artifactId>\r\n    <version>5.4.0.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\npublic class User {\r\n\r\n    @NotNull\r\n    @Email\r\n    private String email;\r\n\r\n    @NotNull\r\n    @Size(min = 4, max = 15)\r\n    private String password;\r\n\r\n    @NotBlank\r\n    private String name;\r\n\r\n    @Min(18)\r\n    @Digits(integer = 2, fraction = 0)\r\n    private int age;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@PostMapping(value = \"/user\")\r\n@ResponseBody\r\npublic ResponseEntity<Object> saveUser(@Valid User user, \r\n  BindingResult result, Model model) {\r\n    if (result.hasErrors()) {\r\n        List<String> errors = result.getAllErrors().stream()\r\n          .map(DefaultMessageSourceResolvable::getDefaultMessage)\r\n          .collect(Collectors.toList());\r\n        return new ResponseEntity<>(errors, HttpStatus.OK);\r\n    } else {\r\n        if (users.stream().anyMatch(it -> user.getEmail().equals(it.getEmail()))) {\r\n            return new ResponseEntity<>(\r\n              Collections.singletonList(\"Email already exists!\"), \r\n              HttpStatus.CONFLICT);\r\n        } else {\r\n            users.add(user);\r\n            return new ResponseEntity<>(HttpStatus.CREATED);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate List<User> users = Arrays.asList(\r\n  new User(\"[[email protected]](/web/20221126234945/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"pass\", \"Ana\", 20),\r\n  new User(\"[[email protected]](/web/20221126234945/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"pass\", \"Bob\", 30),\r\n  new User(\"[[email protected]](/web/20221126234945/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"pass\", \"John\", 40),\r\n  new User(\"[[email protected]](/web/20221126234945/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"pass\", \"Mary\", 30));\r\n```","```\r\n@GetMapping(value = \"/users\")\r\n@ResponseBody\r\npublic List<User> getUsers() {\r\n    return users;\r\n}\r\n```","```\r\n@GetMapping(\"/userPage\")\r\npublic String getUserProfilePage() {\r\n    return \"user\";\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(basePackages = \"com.baeldung.springmvcforms\")\r\nclass ApplicationConfiguration implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void configureDefaultServletHandling(\r\n      DefaultServletHandlerConfigurer configurer) {\r\n        configurer.enable();\r\n    }\r\n\r\n    @Bean\r\n    public InternalResourceViewResolver htmlViewResolver() {\r\n        InternalResourceViewResolver bean = new InternalResourceViewResolver();\r\n        bean.setPrefix(\"/WEB-INF/html/\");\r\n        bean.setSuffix(\".html\");\r\n        return bean;\r\n    }\r\n}\r\n```","```\r\npublic class WebInitializer implements WebApplicationInitializer {\r\n\r\n    public void onStartup(ServletContext container) throws ServletException {\r\n\r\n        AnnotationConfigWebApplicationContext ctx\r\n          = new AnnotationConfigWebApplicationContext();\r\n        ctx.register(ApplicationConfiguration.class);\r\n        ctx.setServletContext(container);\r\n        container.addListener(new ContextLoaderListener(ctx));\r\n\r\n        ServletRegistration.Dynamic servlet \r\n          = container.addServlet(\"dispatcher\", new DispatcherServlet(ctx));\r\n        servlet.setLoadOnStartup(1);\r\n        servlet.addMapping(\"/\");\r\n    }\r\n}\r\n```","```\r\ncurl -i -X POST -H \"Accept:application/json\" \r\n  \"localhost:8080/spring-mvc-forms/user?email=aaa&password;=12&age;=12\"\r\n```","```\r\n[\r\n    \"not a well-formed email address\",\r\n    \"size must be between 4 and 15\",\r\n    \"may not be empty\",\r\n    \"must be greater than or equal to 18\"\r\n]\r\n```","```\r\nvar app = angular.module('app', ['ngMessages']);\r\n```","```\r\napp.service('UserService',['$http', function ($http) {\r\n\r\n    this.saveUser = function saveUser(user){\r\n        return $http({\r\n          method: 'POST',\r\n          url: 'user',\r\n          params: {email:user.email, password:user.password, \r\n            name:user.name, age:user.age},\r\n          headers: 'Accept:application/json'\r\n        });\r\n    }\r\n\r\n    this.getUsers = function getUsers(){\r\n        return $http({\r\n          method: 'GET',\r\n          url: 'users',\r\n          headers:'Accept:application/json'\r\n        }).then( function(response){\r\n        \treturn response.data;\r\n        } );\r\n    }\r\n\r\n}]);\r\n```","```\r\napp.controller('UserCtrl', ['$scope','UserService', function ($scope,UserService) {\r\n\r\n\t$scope.submitted = false;\r\n\r\n\t$scope.getUsers = function() {\r\n\t\t   UserService.getUsers().then(function(data) {\r\n\t\t       $scope.users = data;\r\n\t       });\r\n\t   }\r\n\r\n    $scope.saveUser = function() {\r\n    \t$scope.submitted = true;\r\n    \t  if ($scope.userForm.$valid) {\r\n            UserService.saveUser($scope.user)\r\n              .then (function success(response) {\r\n                  $scope.message = 'User added!';\r\n                  $scope.errorMessage = '';\r\n                  $scope.getUsers();\r\n                  $scope.user = null;\r\n                  $scope.submitted = false;\r\n              },\r\n              function error(response) {\r\n                  if (response.status == 409) {\r\n                    $scope.errorMessage = response.data.message;\r\n            \t  }\r\n            \t  else {\r\n                    $scope.errorMessage = 'Error adding user!';\r\n            \t  }\r\n                  $scope.message = '';\r\n            });\r\n    \t  }\r\n    }\r\n\r\n   $scope.getUsers();\r\n}]);\r\n```","```\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js\">\r\n</script>\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.0/angular-messages.js\">\r\n</script>\r\n<script src=\"js/app.js\"></script>\r\n```","```\r\n<body ng-app=\"app\" ng-controller=\"UserCtrl\">\r\n```","```\r\n<form name=\"userForm\" method=\"POST\" novalidate \r\n  ng-class=\"{'form-error':submitted}\" ng-submit=\"saveUser()\" >\r\n...\r\n</form>\r\n```","```\r\n<label class=\"form-label\">Email:</label>\r\n<input type=\"email\" name=\"email\" required ng-model=\"user.email\" class=\"form-input\"/>\r\n\r\n<label class=\"form-label\">Password:</label>\r\n<input type=\"password\" name=\"password\" required ng-model=\"user.password\" \r\n  ng-minlength=\"4\" ng-maxlength=\"15\" class=\"form-input\"/>\r\n\r\n<label class=\"form-label\">Name:</label>\r\n<input type=\"text\" name=\"name\" ng-model=\"user.name\" ng-trim=\"true\" \r\n  required class=\"form-input\" />\r\n\r\n<label class=\"form-label\">Age:</label>\r\n<input type=\"number\" name=\"age\" ng-model=\"user.age\" ng-min=\"18\"\r\n  class=\"form-input\" required/>\r\n```","```\r\n<div ng-messages=\"userForm.email.$error\" \r\n  ng-show=\"submitted && userForm.email.$invalid\" class=\"error-messages\">\r\n    <p ng-message=\"email\">Invalid email!</p>\r\n    <p ng-message=\"required\">Email is required!</p>\r\n</div>\r\n```","```\r\n<div class=\"check\" ng-show=\"userForm.email.$valid\">✓</div>\r\n```","```\r\n.form-error input.ng-invalid {\r\n    border-color:red;\r\n}\r\n```","```\r\n.error-messages {\r\n    color:red;\r\n}\r\n```"]