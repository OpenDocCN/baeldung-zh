["```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n\r\n    public Employee(Employee employee) {\r\n    }\r\n}\r\n```","```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n\r\n    public Employee(Employee employee) {\r\n        this.id = employee.id;\r\n        this.name = employee.name;\r\n    }\r\n}\r\n```","```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n    private Date startDate;\r\n\r\n    public Employee(Employee employee) {\r\n        this.id = employee.id;\r\n        this.name = employee.name;\r\n        this.startDate = new Date(employee.startDate.getTime());\r\n    }\r\n}\r\n```","```\r\npublic class Manager extends Employee {\r\n    private List<Employee> directReports;\r\n    // ... other constructors\r\n\r\n    public Manager(Manager manager) {\r\n        super(manager.id, manager.name, manager.startDate);\r\n        this.directReports = directReports.stream()\r\n          .collect(Collectors.toList());\r\n    }\r\n} \r\n```","```\r\nEmployee source = new Manager(1, \"Baeldung Manager\", startDate, directReports);\r\n```","```\r\nEmployee clone = new Manager((Manager) source);\r\n```","```\r\npublic class Employee {\r\n   public Employee copy() {\r\n        return new Employee(this);\r\n    }\r\n}\r\n\r\npublic class Manager extends Employee {\r\n    @Override\r\n    public Employee copy() {\r\n        return new Manager(this);\r\n    }\r\n}\r\n```","```\r\nEmployee clone = source.copy();\r\n```"]