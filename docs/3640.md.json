["```\r\n<dependency>\r\n    <groupId>com.github.stefanbirkner</groupId>\r\n    <artifactId>system-rules</artifactId>\r\n    <version>1.19.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.stefanbirkner</groupId>\r\n    <artifactId>system-lambda</artifactId>\r\n    <version>1.1.0</version>\r\n</dependency>\r\n```","```\r\nSystem.getProperties()\r\n  .forEach((key, value) -> System.out.println(key + \": \" + value));\r\n```","```\r\njava.version: 1.8.0_221\r\nfile.separator: /\r\nuser.home: /Users/baeldung\r\nos.name: Mac OS X\r\n...\r\n```","```\r\nSystem.setProperty(\"log_dir\", \"/tmp/baeldung/logs\");\r\n```","```\r\npublic class ProvidesSystemPropertyWithRuleUnitTest {\r\n\r\n    @Rule\r\n    public final ProvideSystemProperty providesSystemPropertyRule = new ProvideSystemProperty(\"log_dir\", \"test/resources\");\r\n\r\n    @Test\r\n    public void givenProvideSystemProperty_whenGetLogDir_thenLogDirIsProvidedSuccessfully() {\r\n        assertEquals(\"log_dir should be provided\", \"test/resources\", System.getProperty(\"log_dir\"));\r\n    }\r\n    // unit test definition continues\r\n} \r\n```","```\r\n@AfterClass\r\npublic static void tearDownAfterClass() throws Exception {\r\n    System.out.println(System.getProperty(\"log_dir\"));\r\n} \r\n```","```\r\n/tmp/baeldung/logs\r\n```","```\r\n@Rule\r\npublic final ProvideSystemProperty providesSystemPropertyRule = \r\n    new ProvideSystemProperty(\"log_dir\", \"test/resources\").and(\"another_property\", \"another_value\")\r\n```","```\r\n@Rule\r\npublic final ProvideSystemProperty providesSystemPropertyFromFileRule = \r\n  ProvideSystemProperty.fromResource(\"/test.properties\");\r\n\r\n@Test\r\npublic void givenProvideSystemPropertyFromFile_whenGetName_thenNameIsProvidedSuccessfully() {\r\n    assertEquals(\"name should be provided\", \"baeldung\", System.getProperty(\"name\"));\r\n    assertEquals(\"version should be provided\", \"1.0\", System.getProperty(\"version\"));\r\n}\r\n```","```\r\nname=baeldung\r\nversion=1.0\r\n```","```\r\n@BeforeAll\r\nstatic void setUpBeforeClass() throws Exception {\r\n    System.setProperty(\"log_dir\", \"/tmp/baeldung/logs\");\r\n}\r\n\r\n@Test\r\nvoid givenSetSystemProperty_whenGetLogDir_thenLogDirIsProvidedSuccessfully() throws Exception {\r\n    restoreSystemProperties(() -> {\r\n        System.setProperty(\"log_dir\", \"test/resources\");\r\n        assertEquals(\"log_dir should be provided\", \"test/resources\", System.getProperty(\"log_dir\"));\r\n    });\r\n\r\n    assertEquals(\"log_dir should be provided\", \"/tmp/baeldung/logs\", System.getProperty(\"log_dir\"));\r\n}\r\n```","```\r\n@Rule\r\npublic final ClearSystemProperties userNameIsClearedRule = new ClearSystemProperties(\"user.name\");\r\n\r\n@Test\r\npublic void givenClearUsernameProperty_whenGetUserName_thenNull() {\r\n    assertNull(System.getProperty(\"user.name\"));\r\n}\r\n```","```\r\nprivate String getFullname() {\r\n    try (Scanner scanner = new Scanner(System.in)) {\r\n        String firstName = scanner.next();\r\n        String surname = scanner.next();\r\n        return String.join(\" \", firstName, surname);\r\n    }\r\n}\r\n```","```\r\n@Rule\r\npublic final TextFromStandardInputStream systemInMock = emptyStandardInputStream();\r\n\r\n@Test\r\npublic void givenTwoNames_whenSystemInMock_thenNamesJoinedTogether() {\r\n    systemInMock.provideLines(\"Jonathan\", \"Cook\");\r\n    assertEquals(\"Names should be concatenated\", \"Jonathan Cook\", getFullname());\r\n}\r\n```","```\r\n@Test\r\nvoid givenTwoNames_whenSystemInMock_thenNamesJoinedTogether() throws Exception {\r\n    withTextFromSystemIn(\"Jonathan\", \"Cook\").execute(() -> {\r\n        assertEquals(\"Names should be concatenated\", \"Jonathan Cook\", getFullname());\r\n    });\r\n}\r\n```","```\r\n@Rule\r\npublic final SystemErrRule systemErrRule = new SystemErrRule().enableLog();\r\n\r\n@Test\r\npublic void givenSystemErrRule_whenInvokePrintln_thenLogSuccess() {\r\n    printError(\"An Error occurred Baeldung Readers!!\");\r\n\r\n    Assert.assertEquals(\"An Error occurred Baeldung Readers!!\", \r\n      systemErrRule.getLog().trim());\r\n}\r\n\r\nprivate void printError(String output) {\r\n    System.err.println(output);\r\n}\r\n```","```\r\n@Test\r\nvoid givenTapSystemErr_whenInvokePrintln_thenOutputIsReturnedSuccessfully() throws Exception {\r\n\r\n    String text = tapSystemErr(() -> {\r\n        printError(\"An error occurred Baeldung Readers!!\");\r\n    });\r\n\r\n    Assert.assertEquals(\"An error occurred Baeldung Readers!!\", text.trim());\r\n}\r\n```","```\r\n@Rule\r\npublic final ExpectedSystemExit exitRule = ExpectedSystemExit.none();\r\n\r\n@Test\r\npublic void givenSystemExitRule_whenAppCallsSystemExit_thenExitRuleWorkssAsExpected() {\r\n    exitRule.expectSystemExitWithStatus(1);\r\n    exit();\r\n}\r\n\r\nprivate void exit() {\r\n    System.exit(1);\r\n}\r\n```","```\r\n@Test\r\nvoid givenCatchSystemExit_whenAppCallsSystemExit_thenStatusIsReturnedSuccessfully() throws Exception {\r\n    int statusCode = catchSystemExit(() -> {\r\n        exit();\r\n    });\r\n    assertEquals(\"status code should be 1:\", 1, statusCode);\r\n}\r\n```"]