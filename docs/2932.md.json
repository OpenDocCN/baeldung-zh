["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.dataformat</groupId>\r\n    <artifactId>jackson-dataformat-csv</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\n[ {\r\n  \"item\" : \"No. 9 Sprockets\",\r\n  \"quantity\" : 12,\r\n  \"unitPrice\" : 1.23\r\n}, {\r\n  \"item\" : \"Widget (10mm)\",\r\n  \"quantity\" : 4,\r\n  \"unitPrice\" : 3.45\r\n} ]\r\n```","```\r\nitem,quantity,unitPrice\r\n\"No. 9 Sprockets\",12,1.23\r\n\"Widget (10mm)\",4,3.45\r\n```","```\r\nJsonNode jsonTree = new ObjectMapper().readTree(new File(\"src/main/resources/orderLines.json\"));\r\n```","```\r\nBuilder csvSchemaBuilder = CsvSchema.builder();\r\nJsonNode firstObject = jsonTree.elements().next();\r\nfirstObject.fieldNames().forEachRemaining(fieldName -> {csvSchemaBuilder.addColumn(fieldName);} );\r\nCsvSchema csvSchema = csvSchemaBuilder.build().withHeader();\r\n```","```\r\nCsvMapper csvMapper = new CsvMapper();\r\ncsvMapper.writerFor(JsonNode.class)\r\n  .with(csvSchema)\r\n  .writeValue(new File(\"src/main/resources/orderLines.csv\"), jsonTree);\r\n```","```\r\npublic class OrderLine {\r\n    private String item;\r\n    private int quantity;\r\n    private BigDecimal unitPrice;\r\n\r\n    // Constructors, Getters, Setters and toString\r\n}\r\n```","```\r\nCsvSchema orderLineSchema = CsvSchema.emptySchema().withHeader();\r\nCsvMapper csvMapper = new CsvMapper();\r\nMappingIterator<OrderLine> orderLines = csvMapper.readerFor(OrderLine.class)\r\n  .with(orderLineSchema)\r\n  .readValues(new File(\"src/main/resources/orderLines.csv\"));\r\n```","```\r\nnew ObjectMapper()\r\n  .configure(SerializationFeature.INDENT_OUTPUT, true)\r\n  .writeValue(new File(\"src/main/resources/orderLinesFromCsv.json\"), orderLines.readAll());\r\n```","```\r\ncount,name\r\n12,\"No. 9 Sprockets\"\r\n4,\"Widget (10mm)\"\r\n```","```\r\n@JsonPropertyOrder({\r\n    \"count\",\r\n    \"name\"\r\n})\r\npublic abstract class OrderLineForCsv {\r\n\r\n    @JsonProperty(\"name\")\r\n    private String item; \r\n\r\n    @JsonProperty(\"count\")\r\n    private int quantity; \r\n\r\n    @JsonIgnore\r\n    private BigDecimal unitPrice;\r\n\r\n}\r\n```","```\r\nCsvMapper csvMapper = new CsvMapper();\r\nCsvSchema csvSchema = csvMapper\r\n  .schemaFor(OrderLineForCsv.class)\r\n  .withHeader(); \r\n```","```\r\ncsvMapper.addMixIn(OrderLine.class, OrderLineForCsv.class); \r\n```","```\r\nOrderLine[] orderLines = new ObjectMapper()\r\n    .readValue(new File(\"src/main/resources/orderLines.json\"), OrderLine[].class);\r\n\r\ncsvMapper.writerFor(OrderLine[].class)\r\n    .with(csvSchema)\r\n    .writeValue(new File(\"src/main/resources/orderLinesReformated.csv\"), orderLines); \r\n```"]