["```\r\npublic class Order {\r\n    private UUID id;\r\n    private OrderStatus status;\r\n    private List<OrderItem> orderItems;\r\n    private BigDecimal price;\r\n\r\n    public Order(UUID id, Product product) {\r\n        this.id = id;\r\n        this.orderItems = new ArrayList<>(Arrays.astList(new OrderItem(product)));\r\n        this.status = OrderStatus.CREATED;\r\n        this.price = product.getPrice();\r\n    }\r\n\r\n    public void complete() {\r\n        validateState();\r\n        this.status = OrderStatus.COMPLETED;\r\n    }\r\n\r\n    public void addOrder(Product product) {\r\n        validateState();\r\n        validateProduct(product);\r\n        orderItems.add(new OrderItem(product));\r\n        price = price.add(product.getPrice());\r\n    }\r\n\r\n    public void removeOrder(UUID id) {\r\n        validateState();\r\n        final OrderItem orderItem = getOrderItem(id);\r\n        orderItems.remove(orderItem);\r\n\r\n        price = price.subtract(orderItem.getPrice());\r\n    }\r\n\r\n    // getters\r\n}\r\n```","```\r\npublic class OrderItem {\r\n    private UUID productId;\r\n    private BigDecimal price;\r\n\r\n    public OrderItem(Product product) {\r\n        this.productId = product.getId();\r\n        this.price = product.getPrice();\r\n    }\r\n\r\n    // getters\r\n}\r\n```","```\r\npublic interface OrderRepository {\r\n    Optional<Order> findById(UUID id);\r\n\r\n    void save(Order order);\r\n}\r\n```","```\r\npublic class DomainOrderService implements OrderService {\r\n\r\n    private final OrderRepository orderRepository;\r\n\r\n    public DomainOrderService(OrderRepository orderRepository) {\r\n        this.orderRepository = orderRepository;\r\n    }\r\n\r\n    @Override\r\n    public UUID createOrder(Product product) {\r\n        Order order = new Order(UUID.randomUUID(), product);\r\n        orderRepository.save(order);\r\n\r\n        return order.getId();\r\n    }\r\n\r\n    @Override\r\n    public void addProduct(UUID id, Product product) {\r\n        Order order = getOrder(id);\r\n        order.addOrder(product);\r\n\r\n        orderRepository.save(order);\r\n    }\r\n\r\n    @Override\r\n    public void completeOrder(UUID id) {\r\n        Order order = getOrder(id);\r\n        order.complete();\r\n\r\n        orderRepository.save(order);\r\n    }\r\n\r\n    @Override\r\n    public void deleteProduct(UUID id, UUID productId) {\r\n        Order order = getOrder(id);\r\n        order.removeOrder(productId);\r\n\r\n        orderRepository.save(order);\r\n    }\r\n\r\n    private Order getOrder(UUID id) {\r\n        return orderRepository\r\n          .findById(id)\r\n          .orElseThrow(RuntimeException::new);\r\n    }\r\n}\r\n```","```\r\nclass DomainOrderServiceUnitTest {\r\n\r\n    private OrderRepository orderRepository;\r\n    private DomainOrderService tested;\r\n    @BeforeEach\r\n    void setUp() {\r\n        orderRepository = mock(OrderRepository.class);\r\n        tested = new DomainOrderService(orderRepository);\r\n    }\r\n\r\n    @Test\r\n    void shouldCreateOrder_thenSaveIt() {\r\n        final Product product = new Product(UUID.randomUUID(), BigDecimal.TEN, \"productName\");\r\n\r\n        final UUID id = tested.createOrder(product);\r\n\r\n        verify(orderRepository).save(any(Order.class));\r\n        assertNotNull(id);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/orders\")\r\npublic class OrderController {\r\n\r\n    private OrderService orderService;\r\n\r\n    @Autowired\r\n    public OrderController(OrderService orderService) {\r\n        this.orderService = orderService;\r\n    }\r\n\r\n    @PostMapping\r\n    CreateOrderResponse createOrder(@RequestBody CreateOrderRequest request) {\r\n        UUID id = orderService.createOrder(request.getProduct());\r\n\r\n        return new CreateOrderResponse(id);\r\n    }\r\n\r\n    @PostMapping(value = \"/{id}/products\")\r\n    void addProduct(@PathVariable UUID id, @RequestBody AddProductRequest request) {\r\n        orderService.addProduct(id, request.getProduct());\r\n    }\r\n\r\n    @DeleteMapping(value = \"/{id}/products\")\r\n    void deleteProduct(@PathVariable UUID id, @RequestParam UUID productId) {\r\n        orderService.deleteProduct(id, productId);\r\n    }\r\n\r\n    @PostMapping(\"/{id}/complete\")\r\n    void completeOrder(@PathVariable UUID id) {\r\n        orderService.completeOrder(id);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class BeanConfiguration {\r\n\r\n    @Bean\r\n    OrderService orderService(OrderRepository orderRepository) {\r\n        return new DomainOrderService(orderRepository);\r\n    }\r\n}\r\n```","```\r\n@EnableMongoRepositories(basePackageClasses = SpringDataMongoOrderRepository.class)\r\npublic class MongoDBConfiguration {\r\n}\r\n```","```\r\n@Component\r\npublic class MongoDbOrderRepository implements OrderRepository {\r\n\r\n    private SpringDataMongoOrderRepository orderRepository;\r\n\r\n    @Autowired\r\n    public MongoDbOrderRepository(SpringDataMongoOrderRepository orderRepository) {\r\n        this.orderRepository = orderRepository;\r\n    }\r\n\r\n    @Override\r\n    public Optional<Order> findById(UUID id) {\r\n        return orderRepository.findById(id);\r\n    }\r\n\r\n    @Override\r\n    public void save(Order order) {\r\n        orderRepository.save(order);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CassandraDbOrderRepository implements OrderRepository {\r\n\r\n    private final SpringDataCassandraOrderRepository orderRepository;\r\n\r\n    @Autowired\r\n    public CassandraDbOrderRepository(SpringDataCassandraOrderRepository orderRepository) {\r\n        this.orderRepository = orderRepository;\r\n    }\r\n\r\n    @Override\r\n    public Optional<Order> findById(UUID id) {\r\n        Optional<OrderEntity> orderEntity = orderRepository.findById(id);\r\n        if (orderEntity.isPresent()) {\r\n            return Optional.of(orderEntity.get()\r\n                .toOrder());\r\n        } else {\r\n            return Optional.empty();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void save(Order order) {\r\n        orderRepository.save(new OrderEntity(order));\r\n    }\r\n\r\n}\r\n```","```\r\n@Component\r\npublic class CliOrderController {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(CliOrderController.class);\r\n\r\n    private final OrderService orderService;\r\n\r\n    @Autowired\r\n    public CliOrderController(OrderService orderService) {\r\n        this.orderService = orderService;\r\n    }\r\n\r\n    public void createCompleteOrder() {\r\n        LOG.info(\"<<Create complete order>>\");\r\n        UUID orderId = createOrder();\r\n        orderService.completeOrder(orderId);\r\n    }\r\n\r\n    public void createIncompleteOrder() {\r\n        LOG.info(\"<<Create incomplete order>>\");\r\n        UUID orderId = createOrder();\r\n    }\r\n\r\n    private UUID createOrder() {\r\n        LOG.info(\"Placing a new order with two products\");\r\n        Product mobilePhone = new Product(UUID.randomUUID(), BigDecimal.valueOf(200), \"mobile\");\r\n        Product razor = new Product(UUID.randomUUID(), BigDecimal.valueOf(50), \"razor\");\r\n        LOG.info(\"Creating order with mobile phone\");\r\n        UUID orderId = orderService.createOrder(mobilePhone);\r\n        LOG.info(\"Adding a razor to the order\");\r\n        orderService.addProduct(orderId, razor);\r\n        return orderId;\r\n    }\r\n}\r\n```"]