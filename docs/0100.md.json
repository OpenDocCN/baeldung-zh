["```\r\npublic interface Comparable<T> {\r\n    public int compareTo(T o);\r\n}\r\n```","```\r\npublic static <T> void print(T item){\r\n    System.out.println(item);\r\n}\r\n```","```\r\npublic static <E> void swap(List<E> list, int src, int des);\r\npublic static void swap(List<?> list, int src, int des);\r\n```","```\r\npublic static <E> List<? extends E> mergeWildcard(List<? extends E> listOne, List<? extends E> listTwo) {\r\n    return Stream.concat(listOne.stream(), listTwo.stream())\r\n            .collect(Collectors.toList());\r\n}\r\n```","```\r\nList<Number> numbers1 = new ArrayList<>();\r\nnumbers1.add(5);\r\nnumbers1.add(10L);\r\n\r\nList<Number> numbers2 = new ArrayList<>();\r\nnumbers2.add(15f);\r\nnumbers2.add(20.0);\r\n```","```\r\nList<Number> numbersMerged = CollectionUtils.mergeWildcard(numbers1, numbers2);\r\n```","```\r\npublic static <E> List<E> mergeTypeParameter(List<? extends E> listOne, List<? extends E> listTwo) {\r\n    return Stream.concat(listOne.stream(), listTwo.stream())\r\n            .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic static long sum(List<Number> numbers) {\r\n    return numbers.stream().mapToLong(Number::longValue).sum();\r\n}\r\n```","```\r\nList<Number> numbers = new ArrayList<>();\r\nnumbers.add(5);\r\nnumbers.add(10L);\r\nnumbers.add(15f);\r\nnumbers.add(20.0);\r\nCollectionUtils.sum(numbers);\r\n```","```\r\npublic static long sumWildcard(List<? extends Number> numbers) {\r\n    return numbers.stream().mapToLong(Number::longValue).sum();\r\n}\r\n```","```\r\nList<Integer> integers = new ArrayList<>();\r\nintegers.add(5);\r\nintegers.add(10);\r\nCollectionUtils.sumWildcard(integers);\r\n```","```\r\npublic static <T extends Number> long sumTypeParameter(List<T> numbers) {\r\n    return numbers.stream().mapToLong(Number::longValue).sum();\r\n} \r\n```","```\r\npublic static void addNumber(List<? super Integer> list, Integer number) {\r\n    list.add(number);\r\n}\r\n```","```\r\npublic static void swap(List<?> list, int srcIndex, int destIndex) {\r\n    list.set(srcIndex, list.set(destIndex, list.get(srcIndex)));\r\n}\r\n```","```\r\nprivate static <E> void swapHelper(List<E> list, int src, int des) {\r\n    list.set(src, list.set(des, list.get(src)));\r\n}\r\n```","```\r\nabstract class Animal {\r\n\r\n    protected final String type;\r\n    protected final String name;\r\n\r\n    protected Animal(String type, String name) {\r\n        this.type = type;\r\n        this.name = name;\r\n    }\r\n\r\n    abstract String makeSound();\r\n} \r\n```","```\r\nclass Dog extends Animal {\r\n\r\n    public Dog(String type, String name) {\r\n        super(type, name);\r\n    }\r\n\r\n    @Override\r\n    public String makeSound() {\r\n        return \"Wuf\";\r\n    }\r\n\r\n}\r\n```","```\r\nclass Cat extends Animal implements Comparable<Cat> {\r\n    public Cat(String type, String name) {\r\n        super(type, name);\r\n    }\r\n\r\n    @Override\r\n    public String makeSound() {\r\n        return \"Meow\";\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(@NotNull Cat cat) {\r\n        return this.getName().length() - cat.getName().length();\r\n    }\r\n}\r\n```","```\r\npublic static <T extends Animal & Comparable<T>> void order(List<T> list) {\r\n    list.sort(Comparable::compareTo);\r\n}\r\n```"]