["```\r\n<dependency>\r\n    <groupId>com.jcabi</groupId>\r\n    <artifactId>jcabi-aspects</artifactId>\r\n    <version>0.22.6</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjrt</artifactId>\r\n    <version>1.9.2</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>com.jcabi</groupId>\r\n    <artifactId>jcabi-maven-plugin</artifactId>\r\n    <version>0.14.1</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>ajc</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjtools</artifactId>\r\n            <version>1.9.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.9.2</version>\r\n        </dependency>\r\n    </dependencies>\r\n</plugin>\r\n```","```\r\nmvn clean package\r\n```","```\r\n[INFO] --- jcabi-maven-plugin:0.14.1:ajc (default) @ jcabi ---\r\n[INFO] jcabi-aspects 0.18/55a5c13 started new daemon thread jcabi-loggable for watching of \r\n  @Loggable annotated methods\r\n[INFO] Unwoven classes will be copied to /jcabi/target/unwoven\r\n[INFO] Created temp dir /jcabi/target/jcabi-ajc\r\n[INFO] jcabi-aspects 0.18/55a5c13 started new daemon thread jcabi-cacheable for automated\r\n  cleaning of expired @Cacheable values\r\n[INFO] ajc result: 11 file(s) processed, 0 pointcut(s) woven, 0 error(s), 0 warning(s)\r\n```","```\r\n@Async\r\npublic static void displayFactorial(int number) {\r\n    long result = factorial(number);\r\n    System.out.println(result);\r\n} \r\n```","```\r\n[main] INFO com.jcabi.aspects.aj.NamedThreads - \r\njcabi-aspects 0.22.6/3f0a1f7 started new daemon thread jcabi-async for Asynchronous method execution\r\n```","```\r\n@Async\r\npublic static Future<Long> getFactorial(int number) {\r\n    Future<Long> factorialFuture = CompletableFuture.supplyAsync(() -> factorial(number));\r\n    return factorialFuture;\r\n}\r\n```","```\r\n@Cacheable(lifetime = 2, unit = TimeUnit.SECONDS)\r\npublic static String cacheExchangeRates() {\r\n    String result = null;\r\n    try {\r\n        URL exchangeRateUrl = new URL(\"https://api.exchangeratesapi.io/latest\");\r\n        URLConnection con = exchangeRateUrl.openConnection();\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\r\n        result = in.readLine();\r\n    } catch (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    return result;\r\n}\r\n```","```\r\n@Cacheable(forever = true)\r\n```","```\r\n[main] INFO com.jcabi.aspects.aj.NamedThreads - \r\njcabi-aspects 0.22.6/3f0a1f7 started new daemon thread jcabi-cacheable-clean for automated \r\n  cleaning of expired @Cacheable values\r\n[main] INFO com.jcabi.aspects.aj.NamedThreads - \r\njcabi-aspects 0.22.6/3f0a1f7 started new daemon thread jcabi-cacheable-update for async \r\n  update of expired @Cacheable values\r\n```","```\r\n[main] INFO com.baeldung.jcabi.JcabiAspectJ - #cacheExchangeRates(): \r\n'{\"rates\":{\"CAD\":1.458,\"HKD\":8.5039,\"ISK\":137.9,\"P..364..:4.5425},\"base\":\"EUR\",\"date\":\"2020-02-10\"}'\r\n  cached in 560ms, valid for 2s\r\n```","```\r\n[main] INFO com.baeldung.jcabi.JcabiAspectJ - #cacheExchangeRates(): \r\n'{\"rates\":{\"CAD\":1.458,\"HKD\":8.5039,\"ISK\":137.9,\"P..364..:4.5425},\"base\":\"EUR\",\"date\":\"2020-02-10\"}'\r\n  from cache (hit #1, 563ms old)\r\n```","```\r\n@Loggable\r\n@Async\r\npublic static void displayFactorial(int number) {\r\n    ...\r\n}\r\n\r\n@Loggable\r\n@Cacheable(lifetime = 2, unit = TimeUnit.SECONDS)\r\npublic static String cacheExchangeRates() {\r\n    ...\r\n}\r\n```","```\r\n[main] INFO com.baeldung.jcabi.JcabiAspectJ - #displayFactorial(): in 1.16ms\r\n[main] INFO com.baeldung.jcabi.JcabiAspectJ - #cacheExchangeRates(): \r\n'{\"rates\":{\"CAD\":1.458,\"HKD\":8.5039,\"ISK\":137.9,\"P..364..:4.5425},\"base\":\"EUR\",\"date\":\"2020-02-10\"}'\r\n  in 556.92ms\r\n```","```\r\n@LogExceptions\r\npublic static void divideByZero() {\r\n    int x = 1/0;\r\n}\r\n```","```\r\n[main] WARN com.baeldung.jcabi.JcabiAspectJ - java.lang.ArithmeticException: / by zero\r\n    at com.baeldung.jcabi.JcabiAspectJ.divideByZero_aroundBody12(JcabiAspectJ.java:77)\r\n\r\njava.lang.ArithmeticException: / by zero\r\n    at com.baeldung.jcabi.JcabiAspectJ.divideByZero_aroundBody12(JcabiAspectJ.java:77)\r\n    ...\r\n```","```\r\n@Quietly\r\npublic static void divideByZero() {\r\n    int x = 1/0;\r\n}\r\n```","```\r\n[main] WARN com.baeldung.jcabi.JcabiAspectJ - java.lang.ArithmeticException: / by zero\r\n    at com.baeldung.jcabi.JcabiAspectJ.divideByZero_aroundBody12(JcabiAspectJ.java:77)\r\n```","```\r\n@RetryOnFailure(attempts = 2)\r\n@Quietly\r\npublic static void divideByZero() {\r\n    int x = 1/0;\r\n}\r\n```","```\r\n[main] WARN com.baeldung.jcabi.JcabiAspectJ - \r\n#divideByZero(): attempt #1 of 2 failed in 147µs with java.lang.ArithmeticException: / by zero\r\n[main] WARN com.baeldung.jcabi.JcabiAspectJ - \r\n#divideByZero(): attempt #2 of 2 failed in 110µs with java.lang.ArithmeticException: / by zero\r\n```","```\r\n@RetryOnFailure(attempts = 3, delay = 5, unit = TimeUnit.SECONDS, \r\n  types = {java.lang.NumberFormatException.class})\r\n```","```\r\n@UnitedThrow(IllegalStateException.class)\r\npublic static void processFile() throws IOException, InterruptedException {\r\n    BufferedReader reader = new BufferedReader(new FileReader(\"baeldung.txt\"));\r\n    reader.readLine();\r\n    // additional file processing\r\n}\r\n```","```\r\njava.lang.IllegalStateException: java.io.FileNotFoundException: baeldung.txt (No such file or directory)\r\n    at com.baeldung.jcabi.JcabiAspectJ.processFile(JcabiAspectJ.java:92)\r\n    at com.baeldung.jcabi.JcabiAspectJ.main(JcabiAspectJ.java:39)\r\nCaused by: java.io.FileNotFoundException: baeldung.txt (No such file or directory)\r\n    at java.io.FileInputStream.open0(Native Method)\r\n    ...\r\n```"]