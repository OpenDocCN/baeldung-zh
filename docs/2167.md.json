["```\r\npublic class Cart {\r\n\r\n    //...     \r\n\r\n    @OneToMany(mappedBy=\"cart\")\r\n    private Set<Item> items;\r\n\r\n    //...\r\n}\r\n```","```\r\npublic static SessionFactory getSessionFactory() {\r\n\r\n    ServiceRegistry serviceRegistry = new StandardServiceRegistryBuilder()\r\n      .applySettings(dbSettings())\r\n      .build();\r\n\r\n    Metadata metadata = new MetadataSources(serviceRegistry)\r\n      .addAnnotatedClass(Cart.class)\r\n      // other domain classes\r\n      .buildMetadata();\r\n\r\n    return metadata.buildSessionFactory();\r\n}\r\n\r\nprivate static Map<String, String> dbSettings() {\r\n    // return Hibernate settings\r\n}\r\n```","```\r\n@Entity\r\n@Table(name=\"CART\")\r\npublic class Cart {\r\n\r\n    //...\r\n\r\n    @OneToMany(mappedBy=\"cart\")\r\n    private Set<Item> items;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name=\"ITEMS\")\r\npublic class Item {\r\n\r\n    //...\r\n    @ManyToOne\r\n    @JoinColumn(name=\"cart_id\", nullable=false)\r\n    private Cart cart;\r\n\r\n    public Item() {}\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\nsessionFactory = HibernateAnnotationUtil.getSessionFactory();\r\nsession = sessionFactory.getCurrentSession();\r\nSystem.out.println(\"Session created\");\r\n\r\ntx = session.beginTransaction();\r\n\r\nsession.save(cart);\r\nsession.save(item1);\r\nsession.save(item2);\r\n\r\ntx.commit();\r\nSystem.out.println(\"Cart ID=\" + cart.getId());\r\nSystem.out.println(\"item1 ID=\" + item1.getId()\r\n  + \", Foreign Key Cart ID=\" + item.getCart().getId());\r\nSystem.out.println(\"item2 ID=\" + item2.getId()\r\n+ \", Foreign Key Cart ID=\" + item.getCart().getId());\r\n```","```\r\nSession created\r\nHibernate: insert into CART values ()\r\nHibernate: insert into ITEMS (cart_id)\r\n  values (?)\r\nHibernate: insert into ITEMS (cart_id)\r\n  values (?)\r\nCart ID=7\r\nitem1 ID=11, Foreign Key Cart ID=7\r\nitem2 ID=12, Foreign Key Cart ID=7\r\nClosing SessionFactory\r\n```","```\r\nCart cart1 = new Cart();\r\nCart cart2 = new Cart();\r\n\r\nItem item1 = new Item(cart1);\r\nItem item2 = new Item(cart2); \r\nSet<Item> itemsSet = new HashSet<Item>();\r\nitemsSet.add(item1);\r\nitemsSet.add(item2); \r\ncart1.setItems(itemsSet); // wrong!\r\n```","```\r\nitem1 ID=1, Foreign Key Cart ID=1\r\nitem2 ID=2, Foreign Key Cart ID=2\r\n```","```\r\npublic class ItemOIO {\r\n\r\n    //  ...\r\n    @ManyToOne\r\n    @JoinColumn(name = \"cart_id\", insertable = false, updatable = false)\r\n    private CartOIO cart;\r\n    //..\r\n}\r\n\r\npublic class CartOIO {\r\n\r\n    //..  \r\n    @OneToMany\r\n    @JoinColumn(name = \"cart_id\") // we need to duplicate the physical information\r\n    private Set<ItemOIO> items;\r\n    //..\r\n} \r\n```","```\r\nitem1 ID=1, Foreign Key Cart ID=1\r\nitem2 ID=2, Foreign Key Cart ID=1\r\n```"]