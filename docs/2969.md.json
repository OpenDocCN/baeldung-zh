["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nint[] oldArray = { 2, 3, 4, 5 };\r\nint[] newArray = ArrayUtils.add(oldArray, 0, 1);\r\nint[] expectedArray = { 1, 2, 3, 4, 5 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 2, 3, 4, 5 };\r\nint[] newArray = ArrayUtils.add(oldArray, 1);\r\nint[] expectedArray = { 2, 3, 4, 5, 1 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 0, 1, 2 };\r\nint[] newArray = ArrayUtils.addAll(oldArray, 3, 4, 5);\r\nint[] expectedArray = { 0, 1, 2, 3, 4, 5 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 3, 4, 5 };\r\nint[] newArray = ArrayUtils.remove(oldArray, 1);\r\nint[] expectedArray = { 1, 3, 4, 5 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 3, 4, 5 };\r\nint[] newArray = ArrayUtils.removeAll(oldArray, 1, 3);\r\nint[] expectedArray = { 1, 3, 5 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 3, 3, 4 };\r\nint[] newArray = ArrayUtils.removeElement(oldArray, 3);\r\nint[] expectedArray = { 1, 2, 3, 4 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 3, 3, 4 };\r\nint[] newArray = ArrayUtils.removeElements(oldArray, 2, 3, 5);\r\nint[] expectedArray = { 1, 3, 4 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 2, 2, 3 };\r\nint[] newArray = ArrayUtils.removeAllOccurences(oldArray, 2);\r\nint[] expectedArray = { 1, 3 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] array = { 1, 3, 5, 7, 9 };\r\nboolean evenContained = ArrayUtils.contains(array, 2);\r\nboolean oddContained = ArrayUtils.contains(array, 7);\r\n\r\nassertEquals(false, evenContained);\r\nassertEquals(true, oddContained);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.reverse(originalArray, 1, 4);\r\nint[] expectedArray = { 1, 4, 3, 2, 5 };\r\n\r\nassertArrayEquals(expectedArray, originalArray);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.reverse(originalArray);\r\nint[] expectedArray = { 5, 4, 3, 2, 1 };\r\n\r\nassertArrayEquals(expectedArray, originalArray);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.shift(originalArray, 1, 4, 1);\r\nint[] expectedArray = { 1, 4, 2, 3, 5 };\r\n\r\nassertArrayEquals(expectedArray, originalArray);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.shift(originalArray, 1);\r\nint[] expectedArray = { 5, 1, 2, 3, 4 };\r\n\r\nassertArrayEquals(expectedArray, originalArray);\r\n```","```\r\nint[] oldArray = { 1, 2, 3, 4, 5 };\r\nint[] newArray = ArrayUtils.subarray(oldArray, 2, 7);\r\nint[] expectedArray = { 3, 4, 5 };\r\n\r\nassertArrayEquals(expectedArray, newArray);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.swap(originalArray, 0, 3, 2);\r\nint[] expectedArray = { 4, 5, 3, 1, 2 };\r\n\r\nassertArrayEquals(expectedArray, originalArray);\r\n```","```\r\nint[] originalArray = { 1, 2, 3, 4, 5 };\r\nArrayUtils.swap(originalArray, 0, 3);\r\nint[] expectedArray = { 4, 2, 3, 1, 5 };\r\nassertArrayEquals(expectedArray, originalArray);\r\n```"]