["```\r\nws.url(url)\r\n  .thenAccept(r -> \r\n    log.debug(\"Thread#\" + Thread.currentThread().getId() \r\n      + \" Request complete: Response code = \" + r.getStatus() \r\n      + \" | Response: \" + r.getBody() \r\n      + \" | Current Time:\" + System.currentTimeMillis()))\r\n```","```\r\nsbt new playframework/play-java-seed.g8\r\n```","```\r\nlibraryDependencies += javaWs\r\n```","```\r\n$ sbt run\r\n...\r\n--- (Running the application, auto-reloading is enabled) ---\r\n\r\n[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000\r\n```","```\r\npublic class HomeControllerTest extends WithServer { \r\n```","```\r\n@Override\r\nprotected Application provideApplication() {\r\n    return new GuiceApplicationBuilder().build();\r\n} \r\n```","```\r\n@Override\r\n@Before\r\npublic void setup() {\r\n    OptionalInt optHttpsPort = testServer.getRunningHttpsPort();\r\n    if (optHttpsPort.isPresent()) {\r\n        port = optHttpsPort.getAsInt();\r\n        url = \"https://localhost:\" + port;\r\n    } else {\r\n        port = testServer.getRunningHttpPort()\r\n          .getAsInt();\r\n        url = \"http://localhost:\" + port;\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nWSClient ws;\r\n```","```\r\nWSClient ws = play.test.WSTestClient.newClient(port);\r\n```","```\r\nws.url(url)\r\n```","```\r\nws.url(url)\r\n  .addHeader(\"key\", \"value\")\r\n  .addQueryParameter(\"num\", \"\" + num);\r\n```","```\r\nws.url(url)\r\n  ...\r\n  .get();\r\n```","```\r\nws.url(url)\r\n  ...\r\n  .setContentType(\"application/x-www-form-urlencoded\")\r\n  .post(\"key1=value1&key2;=value2\");\r\n```","```\r\nSource<ByteString, ?> file = FileIO.fromPath(Paths.get(\"hello.txt\"));\r\nFilePart<Source<ByteString, ?>> file = \r\n  new FilePart<>(\"fileParam\", \"myfile.txt\", \"text/plain\", file);\r\nDataPart data = new DataPart(\"key\", \"value\");\r\n\r\nws.url(url)\r\n...\r\n  .post(Source.from(Arrays.asList(file, data)));\r\n```","```\r\nWSResponse response = ws.url(url)\r\n  .get()\r\n  .toCompletableFuture()\r\n  .get();\r\n```","```\r\nws.url(url)\r\n  .addHeader(\"key\", \"value\")\r\n  .addQueryParameter(\"num\", \"\" + 1)\r\n  .get()\r\n  .thenAccept(r -> \r\n    log.debug(\"Thread#\" + Thread.currentThread().getId() \r\n      + \" Request complete: Response code = \" + r.getStatus() \r\n      + \" | Response: \" + r.getBody() \r\n      + \" | Current Time:\" + System.currentTimeMillis()));\r\n```","```\r\n[debug] c.HomeControllerTest - Thread#30 Request complete: Response code = 200 | Response: {\r\n  \"Result\" : \"ok\",\r\n  \"Params\" : {\r\n    \"num\" : [ \"1\" ]\r\n  },\r\n  \"Headers\" : {\r\n    \"accept\" : [ \"*/*\" ],\r\n    \"host\" : [ \"localhost:19001\" ],\r\n    \"key\" : [ \"value\" ],\r\n    \"user-agent\" : [ \"AHC/2.1\" ]\r\n  }\r\n} | Current Time:1579303109613\r\n```","```\r\nws.url(url)\r\n  .stream()\r\n  .thenAccept(\r\n    response -> {\r\n        try {\r\n            OutputStream outputStream = Files.newOutputStream(path);\r\n            Sink<ByteString, CompletionStage<Done>> outputWriter =\r\n              Sink.foreach(bytes -> outputStream.write(bytes.toArray()));\r\n            response.getBodyAsSource().runWith(outputWriter, materializer);\r\n        } catch (IOException e) {\r\n            log.error(\"An error happened while opening the output stream\", e);\r\n        }\r\n    });\r\n```","```\r\nws.url(url)\r\n  .setRequestTimeout(Duration.of(1, SECONDS));\r\n```","```\r\nws.url(url)\r\n  .get()\r\n  .thenApply(\r\n    result -> { \r\n        try { \r\n            Thread.sleep(10000L); \r\n            return Results.ok(); \r\n        } catch (InterruptedException e) { \r\n            return Results.status(SERVICE_UNAVAILABLE); \r\n        } \r\n    });\r\n```","```\r\nCompletionStage<Result> f = futures.timeout(\r\n  ws.url(url)\r\n    .get()\r\n    .thenApply(result -> {\r\n        try {\r\n            Thread.sleep(10000L);\r\n            return Results.ok();\r\n        } catch (InterruptedException e) {\r\n            return Results.status(SERVICE_UNAVAILABLE);\r\n        }\r\n    }), 1L, TimeUnit.SECONDS); \r\n```","```\r\nCompletionStage<Object> res = f.handleAsync((result, e) -> {\r\n    if (e != null) {\r\n        log.error(\"Exception thrown\", e);\r\n        return e.getCause();\r\n    } else {\r\n        return result;\r\n    }\r\n}); \r\n```","```\r\nClass<?> clazz = res.toCompletableFuture().get().getClass();\r\nassertEquals(TimeoutException.class, clazz);\r\n```","```\r\n[error] c.HomeControllerTest - Exception thrown\r\njava.util.concurrent.TimeoutException: Timeout after 1 second\r\n...\r\n```","```\r\nws.url(url)\r\n  ...\r\n  .setRequestFilter(new AhcCurlRequestLogger())\r\n  ...\r\n  .get();\r\n```","```\r\n[info] p.l.w.a.AhcCurlRequestLogger - curl \\\r\n  --verbose \\\r\n  --request GET \\\r\n  --header 'key: value' \\\r\n  'http://localhost:19001'\r\n```","```\r\nlibraryDependencies += ehcache\r\n```","```\r\nplay.ws.cache.heuristics.enabled=true\r\n```","```\r\nplay.ws.followRedirects=false\r\nplay.ws.useragent=MyPlayApplication\r\nplay.ws.compressionEnabled=true\r\n# time to wait for the connection to be established\r\nplay.ws.timeout.connection=30\r\n# time to wait for data after the connection is open\r\nplay.ws.timeout.idle=30\r\n# max time available to complete the request\r\nplay.ws.timeout.request=300\r\n```"]