["```\r\n@Entity\r\npublic class Article {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    Integer id;\r\n\r\n    @Temporal(TemporalType.DATE)\r\n    Date publicationDate;\r\n\r\n    @Temporal(TemporalType.TIME)\r\n    Date publicationTime;\r\n\r\n    @Temporal(TemporalType.TIMESTAMP)\r\n    Date creationDateTime;\r\n}\r\n```","```\r\npublic interface ArticleRepository \r\n  extends JpaRepository<Article, Integer> {\r\n\r\n    List<Article> findAllByPublicationDate(Date publicationDate);\r\n\r\n    List<Article> findAllByPublicationTimeBetween(\r\n      Date publicationTimeStart,\r\n      Date publicationTimeEnd);\r\n\r\n    @Query(\"select a from Article a where a.creationDateTime <= :creationDateTime\")\r\n    List<Article> findAllWithCreationDateTimeBefore(\r\n      @Param(\"creationDateTime\") Date creationDateTime);\r\n\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@DataJpaTest\r\npublic class ArticleRepositoryIntegrationTest {\r\n\r\n    @Autowired\r\n    private ArticleRepository repository;\r\n\r\n    @Test\r\n    public void whenFindByPublicationDate_thenArticles1And2Returned() {\r\n        List<Article> result = repository.findAllByPublicationDate(\r\n          new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"2018-01-01\"));\r\n\r\n        assertEquals(2, result.size());\r\n        assertTrue(result.stream()\r\n          .map(Article::getId)\r\n          .allMatch(id -> Arrays.asList(1, 2).contains(id)));\r\n    }\r\n\r\n    @Test\r\n    public void whenFindByPublicationTimeBetween_thenArticles2And3Returned() {\r\n        List<Article> result = repository.findAllByPublicationTimeBetween(\r\n          new SimpleDateFormat(\"HH:mm\").parse(\"15:15\"),\r\n          new SimpleDateFormat(\"HH:mm\").parse(\"16:30\"));\r\n\r\n        assertEquals(2, result.size());\r\n        assertTrue(result.stream()\r\n          .map(Article::getId)\r\n          .allMatch(id -> Arrays.asList(2, 3).contains(id)));\r\n    }\r\n\r\n    @Test\r\n    public void givenArticlesWhenFindWithCreationDateThenArticles2And3Returned() {\r\n        List<Article> result = repository.findAllWithCreationDateTimeBefore(\r\n          new SimpleDateFormat(\"yyyy-MM-dd HH:mm\").parse(\"2017-12-15 10:00\"));\r\n\r\n        assertEquals(2, result.size());\r\n        assertTrue(result.stream()\r\n          .map(Article::getId)\r\n          .allMatch(id -> Arrays.asList(2, 3).contains(id));\r\n    }\r\n}\r\n```"]