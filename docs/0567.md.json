["```\r\nboolean isWindows = System.getProperty(\"os.name\")\r\n  .toLowerCase().startsWith(\"windows\");\r\n```","```\r\nprivate static class StreamGobbler implements Runnable {\r\n    private InputStream inputStream;\r\n    private Consumer<String> consumer;\r\n\r\n    public StreamGobbler(InputStream inputStream, Consumer<String> consumer) {\r\n        this.inputStream = inputStream;\r\n        this.consumer = consumer;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        new BufferedReader(new InputStreamReader(inputStream)).lines()\r\n          .forEach(consumer);\r\n    }\r\n}\r\n```","```\r\nString homeDirectory = System.getProperty(\"user.home\");\r\nProcess process;\r\nif (isWindows) {\r\n    process = Runtime.getRuntime()\r\n      .exec(String.format(\"cmd.exe /c dir %s\", homeDirectory));\r\n} else {\r\n    process = Runtime.getRuntime()\r\n      .exec(String.format(\"sh -c ls %s\", homeDirectory));\r\n}\r\nStreamGobbler streamGobbler = \r\n  new StreamGobbler(process.getInputStream(), System.out::println);\r\nFuture<?> future = Executors.newSingleThreadExecutor().submit(streamGobbler);\r\n\r\nint exitCode = process.waitFor();\r\nassert exitCode == 0;\r\n\r\nfuture.get(); // waits for streamGobbler to finish\r\n```","```\r\nProcessBuilder builder = new ProcessBuilder();\r\nif (isWindows) {\r\n    builder.command(\"cmd.exe\", \"/c\", \"dir\");\r\n} else {\r\n    builder.command(\"sh\", \"-c\", \"ls\");\r\n}\r\nbuilder.directory(new File(System.getProperty(\"user.home\")));\r\nProcess process = builder.start();\r\nStreamGobbler streamGobbler = \r\n  new StreamGobbler(process.getInputStream(), System.out::println);\r\nFuture<?> future = Executors.newSingleThreadExecutor().submit(streamGobbler);\r\nint exitCode = process.waitFor();\r\nassert exitCode == 0;\r\nfuture.get(10, TimeUnit.SECONDS)\r\n```"]