["```\r\n<build>\r\n...\r\n    <plugins>\r\n    ...\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-compiler-plugin</artifactId>\r\n            ...\r\n            <configuration>\r\n                ...\r\n                <compilerArguments>\r\n                    <Xlint:unchecked/>\r\n                </compilerArguments>\r\n            </configuration>\r\n        </plugin>\r\n    </plugins>\r\n</build> \r\n```","```\r\npublic class UncheckedConversion {\r\n    public static List getRawList() {\r\n        List result = new ArrayList();\r\n        result.add(\"I am the 1st String.\");\r\n        result.add(\"I am the 2nd String.\");\r\n        result.add(\"I am the 3rd String.\");\r\n        return result;\r\n    }\r\n...\r\n} \r\n```","```\r\n@Test\r\npublic void givenRawList_whenAssignToTypedList_shouldHaveCompilerWarning() {\r\n    List<String> fromRawList = UncheckedConversion.getRawList();\r\n    Assert.assertEquals(3, fromRawList.size());\r\n    Assert.assertEquals(\"I am the 1st String.\", fromRawList.get(0));\r\n} \r\n```","```\r\n$ mvn clean test\r\n...\r\n[WARNING] .../UncheckedConversionDemoUnitTest.java:[12,66] unchecked conversion\r\n  required: java.util.List<java.lang.String>\r\n  found:    java.util.List\r\n...\r\n[INFO] -------------------------------------------------------\r\n[INFO] T E S T S\r\n[INFO] -------------------------------------------------------\r\n...\r\n[INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n...\r\n```","```\r\nList<MyEntity> results = entityManager.createNativeQuery(\"... SQL ...\", MyEntity.class).getResultList();\r\n```","```\r\npublic static List getRawListWithMixedTypes() {\r\n    List result = new ArrayList();\r\n    result.add(\"I am the 1st String.\");\r\n    result.add(\"I am the 2nd String.\");\r\n    result.add(\"I am the 3rd String.\");\r\n    result.add(new Date());\r\n    return result;\r\n} \r\n```","```\r\n@Test(expected = ClassCastException.class)\r\npublic void givenRawList_whenListHasMixedType_shouldThrowClassCastException() {\r\n    List<String> fromRawList = UncheckedConversion.getRawListWithMixedTypes();\r\n    Assert.assertEquals(4, fromRawList.size());\r\n    Assert.assertFalse(fromRawList.get(3).endsWith(\"String.\"));\r\n} \r\n```","```\r\nQuery query = entityManager.createQuery(\"SELECT e.field1, e.field2, e.field3 FROM SomeEntity e\");\r\n@SuppressWarnings(\"unchecked\")\r\nList<Object[]> list = query.list();\r\n```","```\r\npublic static <T> List<T> castList(Class<? extends T> clazz, Collection<?> rawCollection) {\r\n    List<T> result = new ArrayList<>(rawCollection.size());\r\n    for (Object o : rawCollection) {\r\n        try {\r\n            result.add(clazz.cast(o));\r\n        } catch (ClassCastException e) {\r\n            // log the exception or other error handling\r\n        }\r\n    }\r\n    return result;\r\n} \r\n```","```\r\n@Test\r\npublic void givenRawList_whenAssignToTypedListAfterCallingCastList_shouldOnlyHaveElementsWithExpectedType() {\r\n    List rawList = UncheckedConversion.getRawListWithMixedTypes();\r\n    List<String> strList = UncheckedConversion.castList(String.class, rawList);\r\n    Assert.assertEquals(4, rawList.size());\r\n    Assert.assertEquals(\"One element with the wrong type has been filtered out.\", 3, strList.size());\r\n    Assert.assertTrue(strList.stream().allMatch(el -> el.endsWith(\"String.\")));\r\n} \r\n```","```\r\npublic static <T> List<T> castList2(Class<? extends T> clazz, Collection<?> rawCollection) \r\n  throws ClassCastException {\r\n    List<T> result = new ArrayList<>(rawCollection.size());\r\n    for (Object o : rawCollection) {\r\n        result.add(clazz.cast(o));\r\n    }\r\n    return result;\r\n} \r\n```","```\r\n@Test(expected = ClassCastException.class)\r\npublic void givenRawListWithWrongType_whenAssignToTypedListAfterCallingCastList2_shouldThrowException() {\r\n    List rawList = UncheckedConversion.getRawListWithMixedTypes();\r\n    UncheckedConversion.castList2(String.class, rawList);\r\n} \r\n```"]