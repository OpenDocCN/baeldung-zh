["```\r\npublic class Person {\r\n    private final String name;\r\n    private final int age;\r\n\r\n    public Person(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getAge() {\r\n        return age;\r\n    }\r\n}\r\n```","```\r\npublic record Person(String name, int age) {\r\n}\r\n```","```\r\npublic record Person(String name, int age) {\r\n    public Person {\r\n        if(age < 0) {\r\n            throw new IllegalArgumentException(\"Age cannot be negative\");\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic abstract sealed class Person\r\n    permits Employee, Manager {\r\n\r\n    //...\r\n}\r\n```","```\r\npublic final class Employee extends Person {\r\n}\r\n\r\npublic non-sealed class Manager extends Person {\r\n}\r\n```","```\r\nif (person instanceof Employee) {\r\n    return ((Employee) person).getEmployeeId();\r\n} \r\nelse if (person instanceof Manager) {\r\n    return ((Manager) person).getSupervisorId();\r\n}\r\n```","```\r\nif (person instanceof Employee) {\r\n    Employee employee = (Employee) person;\r\n    Date hireDate = employee.getHireDate();\r\n    //...\r\n}\r\n```","```\r\nif (person instanceof Employee employee) {\r\n    Date hireDate = employee.getHireDate();\r\n    //...\r\n}\r\n```","```\r\nif (person instanceof Employee employee && employee.getYearsOfService() > 5) {\r\n    //...\r\n}\r\n```"]