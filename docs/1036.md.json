["```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n          .antMatchers(\"/login\").permitAll()\r\n          .antMatchers(\"/foos/**\").hasIpAddress(\"11.11.11.11\")\r\n          .anyRequest().authenticated()\r\n          .and()\r\n          .formLogin().permitAll()\r\n          .and()\r\n          .csrf().disable();\r\n    }\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\n//...\r\n.antMatchers(\"/foos/**\")\r\n.access(\"isAuthenticated() and hasIpAddress('11.11.11.11')\")\r\n//...\r\n```","```\r\n<security:http>\r\n    <security:form-login/>\r\n    <security:intercept-url pattern=\"/login\" access=\"permitAll()\" />\r\n    <security:intercept-url pattern=\"/foos/**\" access=\"hasIpAddress('11.11.11.11')\" />\r\n    <security:intercept-url pattern=\"/**\" access=\"isAuthenticated()\" />\r\n</security:http>\r\n\r\n// ...\r\n```","```\r\n@Test\r\npublic void givenUser_whenGetHomePage_thenOK() {\r\n    Response response = RestAssured.given().auth().form(\"john\", \"123\")\r\n      .get(\"http://localhost:8082/\");\r\n\r\n    assertEquals(200, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"Welcome\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserWithWrongIP_whenGetFooById_thenForbidden() {\r\n    Response response = RestAssured.given().auth().form(\"john\", \"123\")\r\n      .get(\"http://localhost:8082/foos/1\");\r\n\r\n    assertEquals(403, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"Forbidden\"));\r\n}\r\n```","```\r\n@Component\r\npublic class CustomIpAuthenticationProvider implements AuthenticationProvider {\r\n\r\n   Set<String> whitelist = new HashSet<String>();\r\n\r\n    public CustomIpAuthenticationProvider() {\r\n        whitelist.add(\"11.11.11.11\");\r\n        whitelist.add(\"12.12.12.12\");\r\n    }\r\n\r\n    @Override\r\n    public Authentication authenticate(Authentication auth) throws AuthenticationException {\r\n        WebAuthenticationDetails details = (WebAuthenticationDetails) auth.getDetails();\r\n        String userIp = details.getRemoteAddress();\r\n        if(! whitelist.contains(userIp)){\r\n            throw new BadCredentialsException(\"Invalid IP Address\");\r\n        }\r\n        //...\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private CustomIpAuthenticationProvider authenticationProvider;\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n       auth.authenticationProvider(authenticationProvider);\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n          .antMatchers(\"/login\").permitAll()\r\n          .anyRequest().authenticated()\r\n          .and().formLogin().permitAll()\r\n          .and().csrf().disable();\r\n    }\r\n\r\n}\r\n```"]