["```\r\npublic ThreadPoolExecutor(\r\n  int corePoolSize,\r\n  int maximumPoolSize,\r\n  long keepAliveTime,\r\n  TimeUnit unit,\r\n  BlockingQueue<Runnable> workQueue,\r\n  RejectedExecutionHandler handler\r\n)\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, \r\n  new SynchronousQueue<>(), \r\n  new ThreadPoolExecutor.AbortPolicy());\r\n\r\nexecutor.execute(() -> waitFor(250));\r\n\r\nassertThatThrownBy(() -> executor.execute(() -> System.out.println(\"Will be rejected\")))\r\n  .isInstanceOf(RejectedExecutionException.class);\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, \r\n  new SynchronousQueue<>(), \r\n  new ThreadPoolExecutor.CallerRunsPolicy());\r\n\r\nexecutor.execute(() -> waitFor(250));\r\n\r\nlong startTime = System.currentTimeMillis();\r\nexecutor.execute(() -> waitFor(500));\r\nlong blockedDuration = System.currentTimeMillis() - startTime;\r\n\r\nassertThat(blockedDuration).isGreaterThanOrEqualTo(500);\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS,\r\n  new SynchronousQueue<>(), \r\n  new ThreadPoolExecutor.DiscardPolicy());\r\n\r\nexecutor.execute(() -> waitFor(100));\r\n\r\nBlockingQueue<String> queue = new LinkedBlockingDeque<>();\r\nexecutor.execute(() -> queue.offer(\"Discarded Result\"));\r\n\r\nassertThat(queue.poll(200, MILLISECONDS)).isNull();\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, \r\n  new ArrayBlockingQueue<>(2), \r\n  new ThreadPoolExecutor.DiscardOldestPolicy());\r\n\r\nexecutor.execute(() -> waitFor(100));\r\n\r\nBlockingQueue<String> queue = new LinkedBlockingDeque<>();\r\nexecutor.execute(() -> queue.offer(\"First\"));\r\nexecutor.execute(() -> queue.offer(\"Second\"));\r\nexecutor.execute(() -> queue.offer(\"Third\"));\r\nwaitFor(150);\r\n\r\nList<String> results = new ArrayList<>();\r\nqueue.drainTo(results);\r\n\r\nassertThat(results).containsExactlyInAnyOrder(\"Second\", \"Third\");\r\n```","```\r\nclass GrowPolicy implements RejectedExecutionHandler {\r\n\r\n    private final Lock lock = new ReentrantLock();\r\n\r\n    @Override\r\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\r\n        lock.lock();\r\n        try {\r\n            executor.setMaximumPoolSize(executor.getMaximumPoolSize() + 1);\r\n        } finally {\r\n            lock.unlock();\r\n        }\r\n\r\n        executor.submit(r);\r\n    }\r\n}\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, \r\n  new ArrayBlockingQueue<>(2), \r\n  new GrowPolicy());\r\n\r\nexecutor.execute(() -> waitFor(100));\r\n\r\nBlockingQueue<String> queue = new LinkedBlockingDeque<>();\r\nexecutor.execute(() -> queue.offer(\"First\"));\r\nexecutor.execute(() -> queue.offer(\"Second\"));\r\nexecutor.execute(() -> queue.offer(\"Third\"));\r\nwaitFor(150);\r\n\r\nList<String> results = new ArrayList<>();\r\nqueue.drainTo(results);\r\n\r\nassertThat(results).contains(\"First\", \"Second\", \"Third\");\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\r\nexecutor.shutdownNow();\r\n\r\nassertThatThrownBy(() -> executor.execute(() -> {}))\r\n  .isInstanceOf(RejectedExecutionException.class);\r\n```","```\r\nThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, MILLISECONDS, new LinkedBlockingQueue<>());\r\nexecutor.execute(() -> waitFor(100));\r\nexecutor.shutdown();\r\n\r\nassertThatThrownBy(() -> executor.execute(() -> {}))\r\n  .isInstanceOf(RejectedExecutionException.class);\r\n```"]