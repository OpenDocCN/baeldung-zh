["```\r\n@Entity(\"Books\")\r\npublic class Book {\r\n    @Id\r\n    private String isbn;\r\n\r\n    @Embedded\r\n    private Publisher publisher;\r\n\r\n    @Property(\"price\")\r\n    private double cost;\r\n\r\n    @Property\r\n    private LocalDateTime publishDate;\r\n\r\n    // Getters and setters ...\r\n}\r\n```","```\r\npublic class BsonToJsonIntegrationTest {\r\n\r\n    private static final String DB_NAME = \"library\";\r\n    private static Datastore datastore;\r\n\r\n    @BeforeClass\r\n    public static void setUp() {\r\n        Morphia morphia = new Morphia();\r\n        morphia.mapPackage(\"com.baeldung.morphia\");\r\n        datastore = morphia.createDatastore(new MongoClient(), DB_NAME);\r\n        datastore.ensureIndexes();\r\n\r\n        datastore.save(new Book()\r\n          .setIsbn(\"isbn\")\r\n          .setCost(3.95)\r\n          .setPublisher(new Publisher(new ObjectId(\"fffffffffffffffffffffffa\"),\"publisher\"))\r\n          .setPublishDate(LocalDateTime.parse(\"2020-01-01T18:13:32Z\", DateTimeFormatter.ISO_DATE_TIME)));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenBsonDocument_whenUsingStandardJsonTransformation_thenJsonDateIsObjectEpochTime() {\r\n     String json = null;\r\n     try (MongoClient mongoClient = new MongoClient()) {\r\n         MongoDatabase mongoDatabase = mongoClient.getDatabase(DB_NAME);\r\n         Document bson = mongoDatabase.getCollection(\"Books\").find().first();\r\n         assertEquals(expectedJson, bson.toJson());\r\n     }\r\n}\r\n```","```\r\n{\r\n    \"_id\": \"isbn\",\r\n    \"className\": \"com.baeldung.morphia.domain.Book\",\r\n    \"publisher\": {\r\n        \"_id\": {\r\n            \"$oid\": \"fffffffffffffffffffffffa\"\r\n        },\r\n        \"name\": \"publisher\"\r\n    },\r\n    \"price\": 3.95,\r\n    \"publishDate\": {\r\n        \"$date\": 1577898812000\r\n    }\r\n}\r\n```","```\r\nbson.toJson(JsonWriterSettings\r\n  .builder()\r\n  .outputMode(JsonMode.RELAXED)\r\n  .build());\r\n```","```\r\n{\r\n    ...\r\n    \"publishDate\": {\r\n        \"$date\": \"2020-01-01T17:13:32Z\"\r\n    }\r\n    ...\r\n}\r\n```","```\r\npublic class JsonDateTimeConverter implements Converter<Long> {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(JsonDateTimeConverter.class);\r\n    static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ISO_INSTANT\r\n        .withZone(ZoneId.of(\"UTC\"));\r\n\r\n    @Override\r\n    public void convert(Long value, StrictJsonWriter writer) {\r\n        try {\r\n            Instant instant = new Date(value).toInstant();\r\n            String s = DATE_TIME_FORMATTER.format(instant);\r\n            writer.writeString(s);\r\n        } catch (Exception e) {\r\n            LOGGER.error(String.format(\"Fail to convert offset %d to JSON date\", value), e);\r\n        }\r\n    }\r\n}\r\n```","```\r\nbson.toJson(JsonWriterSettings\r\n  .builder()\r\n  .dateTimeConverter(new JsonDateTimeConverter())\r\n  .build());\r\n```","```\r\n{\r\n    ...\r\n    \"publishDate\": \"2020-01-01T17:13:32Z\"\r\n    ...\r\n}\r\n```"]