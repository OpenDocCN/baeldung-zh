["```\r\npublic class Package {\r\n\r\n    private PackageState state = new OrderedState();\r\n\r\n    // getter, setter\r\n\r\n    public void previousState() {\r\n        state.prev(this);\r\n    }\r\n\r\n    public void nextState() {\r\n        state.next(this);\r\n    }\r\n\r\n    public void printStatus() {\r\n        state.printStatus();\r\n    }\r\n}\r\n```","```\r\npublic interface PackageState {\r\n\r\n    void next(Package pkg);\r\n    void prev(Package pkg);\r\n    void printStatus();\r\n}\r\n```","```\r\npublic class OrderedState implements PackageState {\r\n\r\n    @Override\r\n    public void next(Package pkg) {\r\n        pkg.setState(new DeliveredState());\r\n    }\r\n\r\n    @Override\r\n    public void prev(Package pkg) {\r\n        System.out.println(\"The package is in its root state.\");\r\n    }\r\n\r\n    @Override\r\n    public void printStatus() {\r\n        System.out.println(\"Package ordered, not delivered to the office yet.\");\r\n    }\r\n}\r\n```","```\r\npublic class DeliveredState implements PackageState {\r\n\r\n    @Override\r\n    public void next(Package pkg) {\r\n        pkg.setState(new ReceivedState());\r\n    }\r\n\r\n    @Override\r\n    public void prev(Package pkg) {\r\n        pkg.setState(new OrderedState());\r\n    }\r\n\r\n    @Override\r\n    public void printStatus() {\r\n        System.out.println(\"Package delivered to post office, not received yet.\");\r\n    }\r\n}\r\n```","```\r\npublic class ReceivedState implements PackageState {\r\n\r\n    @Override\r\n    public void next(Package pkg) {\r\n        System.out.println(\"This package is already received by a client.\");\r\n    }\r\n\r\n    @Override\r\n    public void prev(Package pkg) {\r\n        pkg.setState(new DeliveredState());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNewPackage_whenPackageReceived_thenStateReceived() {\r\n    Package pkg = new Package();\r\n\r\n    assertThat(pkg.getState(), instanceOf(OrderedState.class));\r\n    pkg.nextState();\r\n\r\n    assertThat(pkg.getState(), instanceOf(DeliveredState.class));\r\n    pkg.nextState();\r\n\r\n    assertThat(pkg.getState(), instanceOf(ReceivedState.class));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDeliveredPackage_whenPrevState_thenStateOrdered() {\r\n    Package pkg = new Package();\r\n    pkg.setState(new DeliveredState());\r\n    pkg.previousState();\r\n\r\n    assertThat(pkg.getState(), instanceOf(OrderedState.class));\r\n}\r\n```","```\r\npublic class StateDemo {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Package pkg = new Package();\r\n        pkg.printStatus();\r\n\r\n        pkg.nextState();\r\n        pkg.printStatus();\r\n\r\n        pkg.nextState();\r\n        pkg.printStatus();\r\n\r\n        pkg.nextState();\r\n        pkg.printStatus();\r\n    }\r\n}\r\n```","```\r\nPackage ordered, not delivered to the office yet.\r\nPackage delivered to post office, not received yet.\r\nPackage was received by client.\r\nThis package is already received by a client.\r\nPackage was received by client.\r\n```"]