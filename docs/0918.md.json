["```\r\nJdbcRowSet jdbcRS = new JdbcRowSetImpl(conn);\r\njdbcRS.setType(ResultSet.TYPE_SCROLL_INSENSITIVE);\r\nString sql = \"SELECT * FROM customers\";\r\njdbcRS.setCommand(sql);\r\njdbcRS.execute();\r\njdbcRS.addRowSetListener(new ExampleListener());\r\nwhile (jdbcRS.next()) {\r\n    // each call to next, generates a cursorMoved event\r\n    System.out.println(\"id = \" + jdbcRS.getString(1));\r\n    System.out.println(\"name = \" + jdbcRS.getString(2));\r\n}\r\n```","```\r\nCachedRowSet crs = new CachedRowSetImpl();\r\ncrs.setUsername(username);\r\ncrs.setPassword(password);\r\ncrs.setUrl(url);\r\ncrs.setCommand(sql);\r\ncrs.execute();\r\ncrs.addRowSetListener(new ExampleListener());\r\nwhile (crs.next()) {\r\n    if (crs.getInt(\"id\") == 1) {\r\n        System.out.println(\"CRS found customer1 and will remove the record.\");\r\n        crs.deleteRow();\r\n        break;\r\n    }\r\n}\r\n```","```\r\nWebRowSet wrs = new WebRowSetImpl();\r\nwrs.setUsername(username);\r\nwrs.setPassword(password);\r\nwrs.setUrl(url);\r\nwrs.setCommand(sql);\r\nwrs.execute();\r\nFileOutputStream ostream = new FileOutputStream(\"customers.xml\");\r\nwrs.writeXml(ostream);\r\n```","```\r\nCachedRowSetImpl customers = new CachedRowSetImpl();\r\n// configuration of settings for CachedRowSet\r\nCachedRowSetImpl associates = new CachedRowSetImpl();\r\n// configuration of settings for this CachedRowSet            \r\nJoinRowSet jrs = new JoinRowSetImpl();\r\njrs.addRowSet(customers,ID);\r\njrs.addRowSet(associates,ID);\r\n```","```\r\npublic class FilterExample implements Predicate {\r\n\r\n    private Pattern pattern;\r\n\r\n    public FilterExample(String regexQuery) {\r\n        if (regexQuery != null && !regexQuery.isEmpty()) {\r\n            pattern = Pattern.compile(regexQuery);\r\n        }\r\n    }\r\n\r\n    public boolean evaluate(RowSet rs) {\r\n        try {\r\n            if (!rs.isAfterLast()) {\r\n                String name = rs.getString(\"name\");\r\n                System.out.println(String.format(\r\n                  \"Searching for pattern '%s' in %s\", pattern.toString(),\r\n                  name));\r\n                Matcher matcher = pattern.matcher(name);\r\n                return matcher.matches();\r\n            } else\r\n                return false;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // methods for handling errors\r\n}\r\n```","```\r\nRowSetFactory rsf = RowSetProvider.newFactory();\r\nFilteredRowSet frs = rsf.createFilteredRowSet();\r\nfrs.setCommand(\"select * from customers\");\r\nfrs.execute(conn);\r\nfrs.setFilter(new FilterExample(\"^[A-C].*\"));\r\n\r\nResultSetMetaData rsmd = frs.getMetaData();\r\nint columncount = rsmd.getColumnCount();\r\nwhile (frs.next()) {\r\n    for (int i = 1; i <= columncount; i++) {\r\n        System.out.println(\r\n          rsmd.getColumnLabel(i)\r\n          + \" = \"\r\n          + frs.getObject(i) + \" \");\r\n        }\r\n    }\r\n```"]