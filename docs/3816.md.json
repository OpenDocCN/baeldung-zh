["```\r\nList<Integer> numbers = Lists.newArrayList(1, 2, 3, 6, 10, 34, 57, 89);\r\nPredicate<Integer> acceptEven = new Predicate<Integer>() {\r\n    @Override\r\n    public boolean apply(Integer number) {\r\n        return (number % 2) == 0;\r\n    }\r\n};\r\nList<Integer> evenNumbers = Lists.newArrayList(Collections2.filter(numbers, acceptEven));\r\nInteger found = Collections.binarySearch(evenNumbers, 57);\r\nassertThat(found, lessThan(0));\r\n```","```\r\nList<String> withNulls = Lists.newArrayList(\"a\", \"bc\", null, \"def\");\r\nIterable<String> withoutNuls = Iterables.filter(withNulls, Predicates.notNull());\r\nassertTrue(Iterables.all(withoutNuls, Predicates.notNull()));\r\n```","```\r\nList<Integer> evenNumbers = Lists.newArrayList(2, 6, 8, 10, 34, 90);\r\nPredicate<Integer> acceptEven = new Predicate<Integer>() {\r\n    @Override\r\n    public boolean apply(Integer number) {\r\n        return (number % 2) == 0;\r\n    }\r\n};\r\nassertTrue(Iterables.all(evenNumbers, acceptEven));\r\n```","```\r\nList<Integer> evenNumbers = Lists.newArrayList(2, 6, 8, 10, 34, 90);\r\nPredicate<Integer> acceptOdd = new Predicate<Integer>() {\r\n    @Override\r\n    public boolean apply(Integer number) {\r\n        return (number % 2) != 0;\r\n    }\r\n};\r\nassertTrue(Iterables.all(evenNumbers, Predicates.not(acceptOdd)));\r\n```","```\r\nList<Integer> numbers = Lists.newArrayList(1, 2, 3);\r\nList<String> asStrings = Lists.transform(numbers, Functions.toStringFunction());\r\nassertThat(asStrings, contains(\"1\", \"2\", \"3\"));\r\n```","```\r\nList<Integer> numbers = Arrays.asList(2, 1, 11, 100, 8, 14);\r\nOrdering<Object> ordering = Ordering.natural().onResultOf(Functions.toStringFunction());\r\nList<Integer> inAlphabeticalOrder = ordering.sortedCopy(numbers);\r\nList<Integer> correctAlphabeticalOrder = Lists.newArrayList(1, 100, 11, 14, 2, 8);\r\nassertThat(correctAlphabeticalOrder, equalTo(inAlphabeticalOrder));\r\n```","```\r\nList<Integer> numbers = Arrays.asList(2, 1, 11, 100, 8, 14);\r\nPredicate<Integer> acceptEvenNumber = new Predicate<Integer>() {\r\n    @Override\r\n    public boolean apply(Integer number) {\r\n        return (number % 2) == 0;\r\n    }\r\n};\r\nFunction<Integer, Integer> powerOfTwo = new Function<Integer, Integer>() {\r\n    @Override\r\n    public Integer apply(Integer input) {\r\n        return (int) Math.pow(input, 2);\r\n    }\r\n};\r\n\r\nFluentIterable<Integer> powerOfTwoOnlyForEvenNumbers = \r\nFluentIterable.from(numbers).filter(acceptEvenNumber).transform(powerOfTwo);\r\nassertThat(powerOfTwoOnlyForEvenNumbers, contains(4, 10000, 64, 196));\r\n```","```\r\nList<Integer> numbers = Arrays.asList(2, 3);\r\nFunction<Integer, Integer> powerOfTwo = new Function<Integer, Integer>() {\r\n    @Override\r\n    public Integer apply(Integer input) {\r\n        return (int) Math.pow(input, 2);\r\n    }\r\n};\r\nList<Integer> result = Lists.transform(numbers, \r\n    Functions.compose(powerOfTwo, powerOfTwo));\r\nassertThat(result, contains(16, 81));\r\n```","```\r\nFunction<Integer, Integer> powerOfTwo = new Function<Integer, Integer>() {\r\n    @Override\r\n    public Integer apply(Integer input) {\r\n        return (int) Math.pow(input, 2);\r\n    }\r\n};\r\nSet<Integer> lowNumbers = Sets.newHashSet(2, 3, 4);\r\n\r\nMap<Integer, Integer> numberToPowerOfTwoMuttable = Maps.asMap(lowNumbers, powerOfTwo);\r\nMap<Integer, Integer> numberToPowerOfTwoImuttable = Maps.toMap(lowNumbers, powerOfTwo);\r\nassertThat(numberToPowerOfTwoMuttable.get(2), equalTo(4));\r\nassertThat(numberToPowerOfTwoImuttable.get(2), equalTo(4));\r\n```","```\r\nList<Integer> numbers = Lists.newArrayList(1, 2, 3, 6);\r\nPredicate<Integer> acceptEvenNumber = new Predicate<Integer>() {\r\n    @Override\r\n    public boolean apply(Integer number) {\r\n        return (number % 2) == 0;\r\n    }\r\n};\r\nFunction<Integer, Boolean> isEventNumberFunction = Functions.forPredicate(acceptEvenNumber);\r\nList<Boolean> areNumbersEven = Lists.transform(numbers, isEventNumberFunction);\r\n\r\nassertThat(areNumbersEven, contains(false, true, false, true));\r\n```"]