["```\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class MockitoAnnotationTest {\r\n    ...\r\n}\r\n```","```\r\n@Before\r\npublic void init() {\r\n    MockitoAnnotations.initMocks(this);\r\n}\r\n```","```\r\npublic class MockitoInitWithMockitoJUnitRuleUnitTest {\r\n\r\n    @Rule\r\n    public MockitoRule initRule = MockitoJUnit.rule();\r\n\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotUseMockAnnotation_thenCorrect() {\r\n    List mockList = Mockito.mock(ArrayList.class);\r\n\r\n    mockList.add(\"one\");\r\n    Mockito.verify(mockList).add(\"one\");\r\n    assertEquals(0, mockList.size());\r\n\r\n    Mockito.when(mockList.size()).thenReturn(100);\r\n    assertEquals(100, mockList.size());\r\n}\r\n```","```\r\n@Mock\r\nList<String> mockedList;\r\n\r\n@Test\r\npublic void whenUseMockAnnotation_thenMockIsInjected() {\r\n    mockedList.add(\"one\");\r\n    Mockito.verify(mockedList).add(\"one\");\r\n    assertEquals(0, mockedList.size());\r\n\r\n    Mockito.when(mockedList.size()).thenReturn(100);\r\n    assertEquals(100, mockedList.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotUseSpyAnnotation_thenCorrect() {\r\n    List<String> spyList = Mockito.spy(new ArrayList<String>());\r\n\r\n    spyList.add(\"one\");\r\n    spyList.add(\"two\");\r\n\r\n    Mockito.verify(spyList).add(\"one\");\r\n    Mockito.verify(spyList).add(\"two\");\r\n\r\n    assertEquals(2, spyList.size());\r\n\r\n    Mockito.doReturn(100).when(spyList).size();\r\n    assertEquals(100, spyList.size());\r\n}\r\n```","```\r\n@Spy\r\nList<String> spiedList = new ArrayList<String>();\r\n\r\n@Test\r\npublic void whenUseSpyAnnotation_thenSpyIsInjectedCorrectly() {\r\n    spiedList.add(\"one\");\r\n    spiedList.add(\"two\");\r\n\r\n    Mockito.verify(spiedList).add(\"one\");\r\n    Mockito.verify(spiedList).add(\"two\");\r\n\r\n    assertEquals(2, spiedList.size());\r\n\r\n    Mockito.doReturn(100).when(spiedList).size();\r\n    assertEquals(100, spiedList.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotUseCaptorAnnotation_thenCorrect() {\r\n    List mockList = Mockito.mock(List.class);\r\n    ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);\r\n\r\n    mockList.add(\"one\");\r\n    Mockito.verify(mockList).add(arg.capture());\r\n\r\n    assertEquals(\"one\", arg.getValue());\r\n}\r\n```","```\r\n@Mock\r\nList mockedList;\r\n\r\n@Captor \r\nArgumentCaptor argCaptor;\r\n\r\n@Test\r\npublic void whenUseCaptorAnnotation_thenTheSam() {\r\n    mockedList.add(\"one\");\r\n    Mockito.verify(mockedList).add(argCaptor.capture());\r\n\r\n    assertEquals(\"one\", argCaptor.getValue());\r\n}\r\n```","```\r\n@Mock\r\nMap<String, String> wordMap;\r\n\r\n@InjectMocks\r\nMyDictionary dic = new MyDictionary();\r\n\r\n@Test\r\npublic void whenUseInjectMocksAnnotation_thenCorrect() {\r\n    Mockito.when(wordMap.get(\"aWord\")).thenReturn(\"aMeaning\");\r\n\r\n    assertEquals(\"aMeaning\", dic.getMeaning(\"aWord\"));\r\n}\r\n```","```\r\npublic class MyDictionary {\r\n    Map<String, String> wordMap;\r\n\r\n    public MyDictionary() {\r\n        wordMap = new HashMap<String, String>();\r\n    }\r\n    public void add(final String word, final String meaning) {\r\n        wordMap.put(word, meaning);\r\n    }\r\n    public String getMeaning(final String word) {\r\n        return wordMap.get(word);\r\n    }\r\n} \r\n```","```\r\n@Mock\r\nMap<String, String> wordMap;\r\n\r\n@Spy\r\nMyDictionary spyDic = new MyDictionary();\r\n```","```\r\n@Test \r\npublic void whenUseInjectMocksAnnotation_thenCorrect() { \r\n    Mockito.when(wordMap.get(\"aWord\")).thenReturn(\"aMeaning\"); \r\n\r\n    assertEquals(\"aMeaning\", spyDic.getMeaning(\"aWord\")); \r\n}\r\n```","```\r\nMyDictionary(Map<String, String> wordMap) {\r\n    this.wordMap = wordMap;\r\n}\r\n```","```\r\n@Mock\r\nMap<String, String> wordMap; \r\n\r\nMyDictionary spyDic;\r\n\r\n@Before\r\npublic void init() {\r\n    MockitoAnnotations.initMocks(this);\r\n    spyDic = Mockito.spy(new MyDictionary(wordMap));\r\n} \r\n```","```\r\npublic class MockitoAnnotationsUninitializedUnitTest {\r\n\r\n    @Mock\r\n    List<String> mockedList;\r\n\r\n    @Test(expected = NullPointerException.class)\r\n    public void whenMockitoAnnotationsUninitialized_thenNPEThrown() {\r\n        Mockito.when(mockedList.size()).thenReturn(1);\r\n    }\r\n}\r\n```"]