["```\r\npublic String[] usingMethodReference(Stream<String> stringStream) {\r\n    return stringStream.toArray(String[]::new);\r\n}\r\n```","```\r\nStream<String> stringStream = Stream.of(\"baeldung\", \"convert\", \"to\", \"string\", \"array\");\r\nassertArrayEquals(new String[] { \"baeldung\", \"convert\", \"to\", \"string\", \"array\" },\r\n    usingMethodReference(stringStream));\r\n```","```\r\npublic static String[] usingLambda(Stream<String> stringStream) {\r\n    return stringStream.toArray(size -> new String[size]);\r\n}\r\n```","```\r\nclass MyArrayFunction implements IntFunction<String[]> {\r\n    @Override\r\n    public String[] apply(int size) {\r\n        return new String[size];\r\n    }\r\n};\r\n```","```\r\npublic String[] usingCustomClass(Stream<String> stringStream) {\r\n    return stringStream.toArray(new MyArrayFunction());\r\n}\r\n```","```\r\npublic int[] intStreamToPrimitiveIntArray(Stream<Integer> integerStream) {\r\n    return integerStream.mapToInt(i -> i).toArray();\r\n}\r\n```","```\r\nStream<Integer> integerStream = IntStream.rangeClosed(1, 7).boxed();\r\nassertArrayEquals(new int[]{1, 2, 3, 4, 5, 6, 7}, intStreamToPrimitiveIntArray(integerStream));\r\n```","```\r\npublic Stream<String> stringArrayToStreamUsingArraysStream(String[] stringArray) {\r\n    return Arrays.stream(stringArray);\r\n}\r\n\r\npublic Stream<String> stringArrayToStreamUsingStreamOf(String[] stringArray) {\r\n    return Stream.of(stringArray);\r\n}\r\n```","```\r\npublic IntStream primitiveIntArrayToStreamUsingArraysStream(int[] intArray) {\r\n    return Arrays.stream(intArray);\r\n}\r\n\r\npublic Stream<int[]> primitiveIntArrayToStreamUsingStreamOf(int[] intArray) {\r\n    return Stream.of(intArray);\r\n}\r\n```","```\r\npublic <T> Stream<T> stream(T[] array) {\r\n    return stream(array, 0, array.length);\r\n}\r\n\r\npublic <T> Stream<T> of(T... values) {\r\n    return Arrays.stream(values);\r\n}\r\n```","```\r\npublic IntStream stream(int[] array) {\r\n    return stream(array, 0, array.length);\r\n}\r\n\r\npublic <T> Stream<T> of(T t) {\r\n    return StreamSupport.stream(new Streams.StreamBuilderImpl<>(t), false);\r\n}\r\n```"]