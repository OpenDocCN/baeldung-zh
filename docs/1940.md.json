["```\r\nRxJavaPlugins.setErrorHandler(throwable -> {\r\n    hookCalled = true;\r\n});\r\n\r\nObservable.error(new IllegalStateException()).subscribe();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnCompletableAssembly(completable -> {\r\n    hookCalled = true;\r\n    return completable;\r\n});\r\n\r\nCompletable.fromSingle(Single.just(1));\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnCompletableSubscribe((completable, observer) -> {\r\n    hookCalled = true;\r\n    return observer;\r\n});\r\n\r\nCompletable.fromSingle(Single.just(1)).test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnObservableAssembly(observable -> {\r\n    hookCalled = true;\r\n    return observable;\r\n});\r\n\r\nObservable.range(1, 10);\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnObservableSubscribe((observable, observer) -> {\r\n    hookCalled = true;\r\n    return observer;\r\n});\r\n\r\nObservable.range(1, 10).test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnConnectableObservableAssembly(connectableObservable -> {\r\n    hookCalled = true;\r\n    return connectableObservable;\r\n});\r\n\r\nConnectableObservable.range(1, 10).publish().connect();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnFlowableAssembly(flowable -> {\r\n    hookCalled = true;\r\n    return flowable;\r\n});\r\n\r\nFlowable.range(1, 10);\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnFlowableSubscribe((flowable, observer) -> {\r\n    hookCalled = true;\r\n    return observer;\r\n});\r\n\r\nFlowable.range(1, 10).test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnConnectableFlowableAssembly(connectableFlowable -> {\r\n    hookCalled = true;\r\n    return connectableFlowable;\r\n});\r\n\r\nConnectableFlowable.range(1, 10).publish().connect();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnParallelAssembly(parallelFlowable -> {\r\n    hookCalled = true;\r\n    return parallelFlowable;\r\n});\r\n\r\nFlowable.range(1, 10).parallel();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnMaybeAssembly(maybe -> {\r\n    hookCalled = true;\r\n    return maybe;\r\n});\r\n\r\nMaybe.just(1);\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnMaybeSubscribe((maybe, observer) -> {\r\n    hookCalled = true;\r\n    return observer;\r\n});\r\n\r\nMaybe.just(1).test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnSingleAssembly(single -> {\r\n    hookCalled = true;\r\n    return single;\r\n});\r\n\r\nSingle.just(1);\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setOnSingleSubscribe((single, observer) -> {\r\n    hookCalled = true;\r\n    return observer;\r\n});\r\n\r\nSingle.just(1).test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setScheduleHandler((runnable) -> {\r\n    hookCalled = true;\r\n    return runnable;\r\n});\r\n\r\nObservable.range(1, 10)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.single())\r\n  .test();\r\n\r\nhookCalled = false;\r\n\r\nObservable.range(1, 10)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.computation())\r\n  .test();\r\n\r\nassertTrue(hookCalled);\r\n```","```\r\nRxJavaPlugins.setInitComputationSchedulerHandler((scheduler) -> {\r\n    initHookCalled = true;\r\n    return scheduler.call();\r\n});\r\n\r\nRxJavaPlugins.setComputationSchedulerHandler((scheduler) -> {\r\n    hookCalled = true;\r\n    return scheduler;\r\n});\r\n\r\nObservable.range(1, 10)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.computation())\r\n  .test();\r\n\r\nassertTrue(hookCalled && initHookCalled);\r\n```","```\r\nRxJavaPlugins.setInitIoSchedulerHandler((scheduler) -> {\r\n    initHookCalled = true;\r\n    return scheduler.call();\r\n});\r\n\r\nRxJavaPlugins.setIoSchedulerHandler((scheduler) -> {\r\n    hookCalled = true;\r\n    return scheduler;\r\n});\r\n\r\nObservable.range(1, 10)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.io())\r\n  .test();\r\n\r\nassertTrue(hookCalled && initHookCalled);\r\n```","```\r\nRxJavaPlugins.setInitSingleSchedulerHandler((scheduler) -> {\r\n    initHookCalled = true;\r\n    return scheduler.call();\r\n});\r\n\r\nRxJavaPlugins.setSingleSchedulerHandler((scheduler) -> {\r\n    hookCalled = true;\r\n    return scheduler;\r\n});\r\n\r\nObservable.range(1, 10)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.single())\r\n  .test();\r\n\r\nassertTrue(hookCalled && initHookCalled);\r\n```","```\r\nRxJavaPlugins.setInitNewThreadSchedulerHandler((scheduler) -> {\r\n    initHookCalled = true;\r\n    return scheduler.call();\r\n});\r\n\r\nRxJavaPlugins.setNewThreadSchedulerHandler((scheduler) -> {\r\n    hookCalled = true;\r\n    return scheduler;\r\n});\r\n\r\nObservable.range(1, 15)\r\n  .map(v -> v * 2)\r\n  .subscribeOn(Schedulers.newThread())\r\n  .test();\r\n\r\nassertTrue(hookCalled && initHookCalled);\r\n```"]