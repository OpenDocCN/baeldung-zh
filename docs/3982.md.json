["```\r\nstatic class Entry<K,V> extends HashMap.Node<K,V> {\r\n    Entry<K,V> before, after;\r\n    Entry(int hash, K key, V value, Node<K,V> next) {\r\n        super(hash, key, value, next);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenLinkedHashMap_whenGetsOrderedKeyset_thenCorrect() {\r\n    LinkedHashMap<Integer, String> map = new LinkedHashMap<>();\r\n    map.put(1, null);\r\n    map.put(2, null);\r\n    map.put(3, null);\r\n    map.put(4, null);\r\n    map.put(5, null);\r\n\r\n    Set<Integer> keys = map.keySet();\r\n    Integer[] arr = keys.toArray(new Integer[0]);\r\n\r\n    for (int i = 0; i < arr.length; i++) {\r\n        assertEquals(new Integer(i + 1), arr[i]);\r\n    }\r\n}\r\n```","```\r\nLinkedHashMap<Integer, String> map = new LinkedHashMap<>(16, .75f, true);\r\n```","```\r\n@Test\r\npublic void givenLinkedHashMap_whenAccessOrderWorks_thenCorrect() {\r\n    LinkedHashMap<Integer, String> map \r\n      = new LinkedHashMap<>(16, .75f, true);\r\n    map.put(1, null);\r\n    map.put(2, null);\r\n    map.put(3, null);\r\n    map.put(4, null);\r\n    map.put(5, null);\r\n\r\n    Set<Integer> keys = map.keySet();\r\n    assertEquals(\"[1, 2, 3, 4, 5]\", keys.toString());\r\n\r\n    map.get(4);\r\n    assertEquals(\"[1, 2, 3, 5, 4]\", keys.toString());\r\n\r\n    map.get(1);\r\n    assertEquals(\"[2, 3, 5, 4, 1]\", keys.toString());\r\n\r\n    map.get(3);\r\n    assertEquals(\"[2, 5, 4, 1, 3]\", keys.toString());\r\n}\r\n```","```\r\npublic class MyLinkedHashMap<K, V> extends LinkedHashMap<K, V> {\r\n\r\n    private static final int MAX_ENTRIES = 5;\r\n\r\n    public MyLinkedHashMap(\r\n      int initialCapacity, float loadFactor, boolean accessOrder) {\r\n        super(initialCapacity, loadFactor, accessOrder);\r\n    }\r\n\r\n    @Override\r\n    protected boolean removeEldestEntry(Map.Entry eldest) {\r\n        return size() > MAX_ENTRIES;\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenLinkedHashMap_whenRemovesEldestEntry_thenCorrect() {\r\n    LinkedHashMap<Integer, String> map\r\n      = new MyLinkedHashMap<>(16, .75f, true);\r\n    map.put(1, null);\r\n    map.put(2, null);\r\n    map.put(3, null);\r\n    map.put(4, null);\r\n    map.put(5, null);\r\n    Set<Integer> keys = map.keySet();\r\n    assertEquals(\"[1, 2, 3, 4, 5]\", keys.toString());\r\n\r\n    map.put(6, null);\r\n    assertEquals(\"[2, 3, 4, 5, 6]\", keys.toString());\r\n\r\n    map.put(7, null);\r\n    assertEquals(\"[3, 4, 5, 6, 7]\", keys.toString());\r\n\r\n    map.put(8, null);\r\n    assertEquals(\"[4, 5, 6, 7, 8]\", keys.toString());\r\n}\r\n```","```\r\nMap m = Collections.synchronizedMap(new LinkedHashMap());\r\n```"]