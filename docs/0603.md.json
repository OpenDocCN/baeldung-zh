["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n    <version>2.7.5</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter</artifactId>\r\n    <version>3.1.5</version>\r\n</dependency>\r\n```","```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>2021.0.5</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n<dependency>\r\n    <groupId>commons-configuration</groupId>\r\n    <artifactId>commons-configuration</artifactId>\r\n    <version>1.10</version>\r\n</dependency>\r\n```","```\r\nmanagement.server.port=8081\r\nmanagement.endpoints.web.exposure.include=refresh\r\n```","```\r\ndynamic.endpoint.config.location=file:extra.properties\r\n```","```\r\nspring.properties.refreshDelay=1\r\n```","```\r\nendpoint.foo=false\r\nendpoint.regex=.*\r\n```","```\r\n@GetMapping(\"/foo\")\r\npublic String fooHandler() {\r\n    return \"foo\";\r\n}\r\n```","```\r\n@GetMapping(\"/bar1\")\r\npublic String bar1Handler() {\r\n    return \"bar1\";\r\n}\r\n\r\n@GetMapping(\"/bar2\")\r\npublic String bar2Handler() {\r\n    return \"bar2\";\r\n}\r\n```","```\r\npublic class DynamicEndpointFilter extends OncePerRequestFilter {\r\n    private Environment environment;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Override\r\nprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, \r\n  FilterChain filterChain) throws ServletException, IOException {\r\n    String path = request.getRequestURI();\r\n    String regex = this.environment.getProperty(\"endpoint.regex\");\r\n    Pattern pattern = Pattern.compile(regex);\r\n    Matcher matcher = pattern.matcher(path);\r\n    boolean matches = matcher.matches();\r\n\r\n    if (!matches) {\r\n        response.sendError(HttpStatus.SERVICE_UNAVAILABLE.value(), \"Service is unavailable\");\r\n    } else {\r\n        filterChain.doFilter(request,response);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\n@ConditionalOnProperty(name = \"dynamic.endpoint.config.location\", matchIfMissing = false)\r\npublic PropertiesConfiguration propertiesConfiguration(\r\n  @Value(\"${dynamic.endpoint.config.location}\") String path,\r\n  @Value(\"${spring.properties.refreshDelay}\") long refreshDelay) throws Exception {\r\n    String filePath = path.substring(\"file:\".length());\r\n    PropertiesConfiguration configuration = new PropertiesConfiguration(\r\n      new File(filePath).getCanonicalPath());\r\n    FileChangedReloadingStrategy fileChangedReloadingStrategy = new FileChangedReloadingStrategy();\r\n    fileChangedReloadingStrategy.setRefreshDelay(refreshDelay);\r\n    configuration.setReloadingStrategy(fileChangedReloadingStrategy);\r\n    return configuration;\r\n}\r\n```","```\r\n@Component\r\npublic class EnvironmentConfigBean {\r\n\r\n    private final Environment environment;\r\n\r\n    public EnvironmentConfigBean(@Autowired Environment environment) {\r\n        this.environment = environment;\r\n    }\r\n\r\n    public String getEndpointRegex() {\r\n        return environment.getProperty(\"endpoint.regex\");\r\n    }\r\n\r\n    public boolean isFooEndpointEnabled() {\r\n        return Boolean.parseBoolean(environment.getProperty(\"endpoint.foo\"));\r\n    }\r\n\r\n    public Environment getEnvironment() {\r\n        return environment;\r\n    }\r\n} \r\n```","```\r\n@Bean\r\n@ConditionalOnBean(EnvironmentConfigBean.class)\r\npublic FilterRegistrationBean<DynamicEndpointFilter> dynamicEndpointFilterFilterRegistrationBean(\r\n  EnvironmentConfigBean environmentConfigBean) {\r\n    FilterRegistrationBean<DynamicEndpointFilter> registrationBean = new FilterRegistrationBean<>();\r\n    registrationBean.setFilter(new DynamicEndpointFilter(environmentConfigBean.getEnvironment()));\r\n    registrationBean.addUrlPatterns(\"*\");\r\n    return registrationBean;\r\n}\r\n```","```\r\n$ curl -iXGET http://localhost:9090/bar1\r\nHTTP/1.1 200 \r\nContent-Type: text/plain;charset=ISO-8859-1\r\nContent-Length: 4\r\nDate: Sat, 12 Nov 2022 12:46:32 GMT\r\n\r\nbar1\r\n```","```\r\nendpoint.regex=.*/foo\r\n```","```\r\n$ curl -iXGET http://localhost:9090/bar1\r\nHTTP/1.1 503 \r\nContent-Type: application/json\r\nTransfer-Encoding: chunked\r\nDate: Sat, 12 Nov 2022 12:56:12 GMT\r\nConnection: close\r\n\r\n{\"timestamp\":1668257772354,\"status\":503,\"error\":\"Service Unavailable\",\"message\":\"Service is unavailable\",\"path\":\"/springbootapp/bar1\"}\r\n```","```\r\n$ curl -iXGET http://localhost:9090/foo\r\nHTTP/1.1 200 \r\nContent-Type: text/plain;charset=ISO-8859-1\r\nContent-Length: 3\r\nDate: Sat, 12 Nov 2022 12:57:39 GMT\r\n\r\nfoo\r\n```","```\r\n@Component\r\n@RefreshScope\r\npublic class EndpointRefreshConfigBean {\r\n\r\n    private boolean foo;\r\n    private String regex;\r\n\r\n    public EndpointRefreshConfigBean(@Value(\"${endpoint.foo}\") boolean foo, \r\n      @Value(\"${endpoint.regex}\") String regex) {\r\n        this.foo = foo;\r\n        this.regex = regex;\r\n    }\r\n    // getters and setters\r\n}\r\n```","```\r\n@GetMapping(\"/foo\")\r\npublic ResponseEntity<String> fooHandler() {\r\n    if (endpointRefreshConfigBean.isFoo()) {\r\n        return ResponseEntity.status(200).body(\"foo\");\r\n    } else {\r\n        return ResponseEntity.status(503).body(\"endpoint is unavailable\");\r\n    }\r\n}\r\n```","```\r\n$ curl -isXGET http://localhost:9090/foo\r\nHTTP/1.1 200\r\nContent-Type: text/plain;charset=ISO-8859-1\r\nContent-Length: 3\r\nDate: Sat, 12 Nov 2022 15:28:52 GMT\r\n\r\nfoo\r\n```","```\r\nendpoint.foo=false\r\n```","```\r\n$ curl -Is --request POST 'http://localhost:8081/actuator/refresh'\r\nHTTP/1.1 200\r\nContent-Type: application/vnd.spring-boot.actuator.v3+json\r\nTransfer-Encoding: chunked\r\nDate: Sat, 12 Nov 2022 15:34:24 GMT \r\n```","```\r\n$ curl -isXGET http://localhost:9090/springbootapp/foo\r\nHTTP/1.1 503\r\nContent-Type: text/plain;charset=ISO-8859-1\r\nContent-Length: 23\r\nDate: Sat, 12 Nov 2022 15:35:26 GMT\r\nConnection: close\r\n\r\nendpoint is unavailable\r\n```"]