["```\r\n<dependency> \r\n    <groupId>org.jmockit</groupId> \r\n    <artifactId>jmockit</artifactId> \r\n    <version>1.41</version>\r\n</dependency>\r\n```","```\r\nAPI.expect(mockInstance.method()).andThenReturn(value).times(2);\r\n```","```\r\nnew Expectation() {\r\n    mockInstance.method(); \r\n    result = value; \r\n    times = 2;\r\n}\r\n```","```\r\n@Test\r\npublic void testWireframe() {\r\n   // preparation code not specific to JMockit, if any\r\n\r\n   new Expectations() {{ \r\n       // define expected behaviour for mocks\r\n   }};\r\n\r\n   // execute code-under-test\r\n\r\n   new Verifications() {{ \r\n       // verify mocks\r\n   }};\r\n\r\n   // assertions\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class TestPassingArguments {\r\n\r\n   @Injectable\r\n   private Foo mockForEveryTest;\r\n\r\n   @Tested\r\n   private Bar bar;\r\n\r\n   @Test\r\n   public void testExample(@Mocked Xyz mockForJustThisTest) {\r\n       new Expectations() {{\r\n           mockForEveryTest.someMethod(\"foo\");\r\n           mockForJustThisTest.someOtherMethod();\r\n       }};\r\n\r\n       bar.codeUnderTest();\r\n   }\r\n}\r\n```","```\r\npublic class Model {\r\n    public String getInfo(){\r\n        return \"info\";\r\n    }\r\n}\r\n\r\npublic class Collaborator {\r\n    public boolean collaborate(String string){\r\n        return false;\r\n    }\r\n    public void receive(boolean bool){\r\n        // NOOP\r\n    }\r\n}\r\n\r\npublic class Performer {\r\n    private Collaborator collaborator;\r\n\r\n    public void perform(Model model) {\r\n        boolean value = collaborator.collaborate(model.getInfo());\r\n        collaborator.receive(value);\r\n    }\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class PerformerTest {\r\n\r\n    @Injectable\r\n    private Collaborator collaborator;\r\n\r\n    @Tested\r\n    private Performer performer;\r\n\r\n    @Test\r\n    public void testThePerformMethod(@Mocked Model model) {\r\n        new Expectations() {{\r\n    \t    model.getInfo();result = \"bar\";\r\n    \t    collaborator.collaborate(\"bar\"); result = true;\r\n        }};\r\n        performer.perform(model);\r\n        new Verifications() {{\r\n    \t    collaborator.receive(true);\r\n        }};\r\n    }\r\n}\r\n```"]