["```\r\ncd Jess71p2/examples/pricing_engine\r\nant test\r\n```","```\r\nBuildfile: Jess71p2\\examples\\pricing_engine\\build.xml\r\n...\r\ntest:\r\n[java] Items for order 123:\r\n[java] 1 CD Writer: 199.99\r\n...\r\n[java] Items for order 666:\r\n[java] 1 Incredibles DVD: 29.99\r\n[java] Offers for order 666:\r\n[java] BUILD SUCCESSFUL\r\nTotal time: 1 second\r\n```","```\r\nunzip jreng-1_0a-fr-spec-api.zip\r\n```","```\r\nError: The reference implementation Jess could not be found.\r\n```","```\r\ncp Jess71p2/lib/jess.jar jsr94-1.0/lib/\r\njava -jar jsr94-1.0/lib/jsr94-example.jar\r\n```","```\r\nAdministration API Acquired RuleAdministrator: [[email protected]](/web/20220628131443/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n...\r\nRuntime API Acquired RuleRuntime: [[email protected]](/web/20220628131443/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\nCustomer credit limit result: 3000\r\n...\r\nInvoice 2 amount: 1750 status: paid\r\nReleased Stateful Rule Session.\r\n```","```\r\nmvn install:install-file -Dfile=jess.jar -DgroupId=gov.sandia -DartifactId=jess -Dversion=7.1p2 -Dpackaging=jar -DgeneratePom=true\r\n```","```\r\n<dependency>\r\n    <groupId>gov.sandia</groupId>\r\n    <artifactId>jess</artifactId>\r\n    <version>7.1p2</version>\r\n</dependency>\r\n```","```\r\n(printout t \"Hello from Jess!\" crlf)\r\n```","```\r\npublic class HelloJess {\r\n    public static void main(String[] args) throws JessException {\r\n    Rete engine = new Rete();\r\n    engine.reset();\r\n    engine.batch(\"hellojess.clp\");\r\n    engine.run();\r\n}\r\n```","```\r\nHello from Jess!\r\n```","```\r\npublic class Question {\r\n    private String question;\r\n    private int balance;\r\n    <i><span style=\"font-weight: 400\">// getters and setters</span></i>\r\n\r\n    public Question(String question, int balance) {\r\n        this.question = question;\r\n        this.balance = balance;\r\n    }\r\n}\r\n\r\npublic class Answer {\r\n    private String answer;\r\n    private int newBalance;\r\n    <i><span style=\"font-weight: 400\">// getters and setters</span></i>\r\n\r\n    public Answer(String answer, int newBalance) {\r\n        this.answer = answer;\r\n        this.newBalance = newBalance;\r\n    }\r\n}\r\n```","```\r\n(import com.baeldung.rules.jsr94.jess.model.*)\r\n(deftemplate Question     (declare (from-class Question)))\r\n(deftemplate Answer       (declare (from-class Answer)))\r\n```","```\r\n(defrule avoid-overdraft \"Give $50 to anyone overdrawn\"\r\n    ?q <- (Question { balance < 0 })\r\n    =>\r\n    (add (new Answer \"Overdrawn bonus\" (+ ?q.balance 50))))\r\n```","```\r\nQuestion question = new Question(\"Can I have a bonus?\", -5);\r\nengine.add(data);\r\n```","```\r\nengine.run();\r\n```","```\r\nIterator results = engine.getObjects(new jess.Filter.ByClass(Answer.class));\r\nwhile (results.hasNext()) {\r\n    Answer answer = (Answer) results.next();\r\n    // process our Answer\r\n}\r\n```","```\r\nWorkingMemoryMarker marker;\r\n// load reference data\r\nmarker = engine.mark();\r\n// load specific data and run rules\r\nengine.resetToMark(marker);\r\n```","```\r\n<dependency>\r\n    <groupId>jsr94</groupId>\r\n    <artifactId>jsr94</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n```","```\r\nString RULE_SERVICE_PROVIDER=\"jess.jsr94\";\r\nClass.forName(RULE_SERVICE_PROVIDER + \".RuleServiceProviderImpl\");\r\nRuleServiceProvider ruleServiceProvider = RuleServiceProviderManager.getRuleServiceProvider(RULE_SERVICE_PROVIDER);\r\n```","```\r\nRuleAdministrator ruleAdministrator = serviceProvider.getRuleAdministrator();\r\n\r\nInputStream ruleInput = JessRunner.class.getResourceAsStream(rulesFile);\r\nHashMap vendorProperties = new HashMap();\r\n\r\nRuleExecutionSet ruleExecutionSet = ruleAdministrator\r\n  .getLocalRuleExecutionSetProvider(vendorProperties)\r\n  .createRuleExecutionSet(ruleInput, vendorProperties);\r\n\r\nString rulesURI = \"rules://com/baeldung/rules/bonus\";\r\nruleAdministrator.registerRuleExecutionSet(rulesURI, ruleExecutionSet, vendorProperties);\r\n```","```\r\nRuleRuntime ruleRuntime = ruleServiceProvider.getRuleRuntime();\r\nStatelessRuleSession statelessRuleSession\r\n  = (StatelessRuleSession) ruleRuntime.createRuleSession(rulesURI, new HashMap(), RuleRuntime.STATELESS_SESSION_TYPE);\r\ncalculateResults(statelessRuleSession);\r\nstatelessRuleSession.release();\r\n```","```\r\nList data = new ArrayList();\r\ndata.add(new Question(\"Can I have a bonus?\", -5));\r\nList results = statelessRuleSession.executeRules(data);\r\n```","```\r\nIterator itr = results.iterator();\r\nwhile (itr.hasNext()) {\r\n    Object obj = itr.next();\r\n    if (obj instanceof Answer) {\r\n        int answerBalance = ((Answer) obj).getCalculatedBalance());\r\n    }\r\n}\r\n```"]