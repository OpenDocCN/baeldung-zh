["```\r\n@GetMapping(path = \"/stream-flux\", produces = MediaType.TEXT_EVENT_STREAM_VALUE)\r\npublic Flux<String> streamFlux() {\r\n    return Flux.interval(Duration.ofSeconds(1))\r\n      .map(sequence -> \"Flux - \" + LocalTime.now().toString());\r\n}\r\n```","```\r\n@GetMapping(\"/stream-sse\")\r\npublic Flux<ServerSentEvent<String>> streamEvents() {\r\n    return Flux.interval(Duration.ofSeconds(1))\r\n      .map(sequence -> ServerSentEvent.<String> builder()\r\n        .id(String.valueOf(sequence))\r\n          .event(\"periodic-event\")\r\n          .data(\"SSE - \" + LocalTime.now().toString())\r\n          .build());\r\n}\r\n```","```\r\npublic void consumeServerSentEvent() {\r\n    WebClient client = WebClient.create(\"http://localhost:8080/sse-server\");\r\n    ParameterizedTypeReference<ServerSentEvent<String>> type\r\n     = new ParameterizedTypeReference<ServerSentEvent<String>>() {};\r\n\r\n    Flux<ServerSentEvent<String>> eventStream = client.get()\r\n      .uri(\"/stream-sse\")\r\n      .retrieve()\r\n      .bodyToFlux(type);\r\n\r\n    eventStream.subscribe(\r\n      content -> logger.info(\"Time: {} - event: name[{}], id [{}], content[{}] \",\r\n        LocalTime.now(), content.event(), content.id(), content.data()),\r\n      error -> logger.error(\"Error receiving SSE: {}\", error),\r\n      () -> logger.info(\"Completed!!!\"));\r\n}\r\n```","```\r\n@GetMapping(\"/stream-sse-mvc\")\r\npublic SseEmitter streamSseMvc() {\r\n    SseEmitter emitter = new SseEmitter();\r\n    ExecutorService sseMvcExecutor = Executors.newSingleThreadExecutor();\r\n    sseMvcExecutor.execute(() -> {\r\n        try {\r\n            for (int i = 0; true; i++) {\r\n                SseEventBuilder event = SseEmitter.event()\r\n                  .data(\"SSE MVC - \" + LocalTime.now().toString())\r\n                  .id(String.valueOf(i))\r\n                  .name(\"sse event - mvc\");\r\n                emitter.send(event);\r\n                Thread.sleep(1000);\r\n            }\r\n        } catch (Exception ex) {\r\n            emitter.completeWithError(ex);\r\n        }\r\n    });\r\n    return emitter;\r\n}\r\n```"]