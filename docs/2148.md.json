["```\r\n@RestController\r\npublic class EvenOddController {\r\n\r\n    @GetMapping(\"/validate/prime-number\")\r\n    public String isNumberPrime(@RequestParam(\"number\") Integer number) {\r\n        return Integer.parseInt(number) % 2 == 0 ? \"Even\" : \"Odd\";\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-contract-verifier</artifactId>\r\n    <version>2.1.1.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-contract-maven-plugin</artifactId>\r\n    <version>2.1.1.RELEASE</version>\r\n    <extensions>true</extensions>\r\n    <configuration>\r\n        <baseClassForTests>\r\n            com.baeldung.spring.cloud.springcloudcontractproducer.BaseTestClass\r\n        </baseClassForTests>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)\r\n@DirtiesContext\r\n@AutoConfigureMessageVerifier\r\npublic class BaseTestClass {\r\n\r\n    @Autowired\r\n    private EvenOddController evenOddController;\r\n\r\n    @Before\r\n    public void setup() {\r\n        StandaloneMockMvcBuilder standaloneMockMvcBuilder \r\n          = MockMvcBuilders.standaloneSetup(evenOddController);\r\n        RestAssuredMockMvc.standaloneSetup(standaloneMockMvcBuilder);\r\n    }\r\n}\r\n```","```\r\nimport org.springframework.cloud.contract.spec.Contract\r\nContract.make {\r\n    description \"should return even when number input is even\"\r\n    request{\r\n        method GET()\r\n        url(\"/validate/prime-number\") {\r\n            queryParameters {\r\n                parameter(\"number\", \"2\")\r\n            }\r\n        }\r\n    }\r\n    response {\r\n        body(\"Even\")\r\n        status 200\r\n    }\r\n} \r\n```","```\r\npublic class ContractVerifierTest extends BaseTestClass {\r\n\r\n@Test\r\npublic void validate_shouldReturnEvenWhenRequestParamIsEven() throws Exception {\r\n    // given:\r\n    MockMvcRequestSpecification request = given();\r\n\r\n    // when:\r\n    ResponseOptions response = given().spec(request)\r\n      .queryParam(\"number\",\"2\")\r\n      .get(\"/validate/prime-number\");\r\n\r\n    // then:\r\n    assertThat(response.statusCode()).isEqualTo(200);\r\n\r\n    // and:\r\n    String responseBody = response.getBody().asString();\r\n    assertThat(responseBody).isEqualTo(\"Even\");\r\n} \r\n```","```\r\n@RestController\r\npublic class BasicMathController {\r\n\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    @GetMapping(\"/calculate\")\r\n    public String checkOddAndEven(@RequestParam(\"number\") Integer number) {\r\n        HttpHeaders httpHeaders = new HttpHeaders();\r\n        httpHeaders.add(\"Content-Type\", \"application/json\");\r\n\r\n        ResponseEntity<String> responseEntity = restTemplate.exchange(\r\n          \"http://localhost:8090/validate/prime-number?number=\" + number,\r\n          HttpMethod.GET,\r\n          new HttpEntity<>(httpHeaders),\r\n          String.class);\r\n\r\n        return responseEntity.getBody();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-contract-wiremock</artifactId>\r\n    <version>2.1.1.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-contract-stub-runner</artifactId>\r\n    <version>2.1.1.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)\r\n@AutoConfigureMockMvc\r\n@AutoConfigureJsonTesters\r\n@AutoConfigureStubRunner(\r\n  stubsMode = StubRunnerProperties.StubsMode.LOCAL,\r\n  ids = \"com.baeldung.spring.cloud:spring-cloud-contract-producer:+:stubs:8090\")\r\npublic class BasicMathControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void given_WhenPassEvenNumberInQueryParam_ThenReturnEven()\r\n      throws Exception {\r\n\r\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/calculate?number=2\")\r\n          .contentType(MediaType.APPLICATION_JSON))\r\n          .andExpect(status().isOk())\r\n          .andExpect(content().string(\"Even\"));\r\n    }\r\n}\r\n```"]