["```\r\nExecutorService executor = Executors.newFixedThreadPool(2);\r\nAtomicInteger sharedState = new AtomicInteger();\r\nCountDownLatch countDownLatch = new CountDownLatch(1);\r\n```","```\r\nRunnable producer = () -> {\r\n    Integer producedElement = ThreadLocalRandom\r\n      .current()\r\n      .nextInt();\r\n    sharedState.set(producedElement);\r\n    countDownLatch.countDown();\r\n};\r\n```","```\r\nRunnable consumer = () -> {\r\n    try {\r\n        countDownLatch.await();\r\n        Integer consumedElement = sharedState.get();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n};\r\n```","```\r\nexecutor.execute(producer);\r\nexecutor.execute(consumer);\r\n\r\nexecutor.awaitTermination(500, TimeUnit.MILLISECONDS);\r\nexecutor.shutdown();\r\nassertEquals(countDownLatch.getCount(), 0);\r\n```","```\r\nSaving an element: -1507375353 to the exchange point\r\nconsumed an element: -1507375353 from the exchange point\r\n```","```\r\nExecutorService executor = Executors.newFixedThreadPool(2);\r\nSynchronousQueue<Integer> queue = new SynchronousQueue<>();\r\n```","```\r\nRunnable producer = () -> {\r\n    Integer producedElement = ThreadLocalRandom\r\n      .current()\r\n      .nextInt();\r\n    try {\r\n        queue.put(producedElement);\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n};\r\n```","```\r\nRunnable consumer = () -> {\r\n    try {\r\n        Integer consumedElement = queue.take();\r\n    } catch (InterruptedException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n};\r\n```","```\r\nexecutor.execute(producer);\r\nexecutor.execute(consumer);\r\n\r\nexecutor.awaitTermination(500, TimeUnit.MILLISECONDS);\r\nexecutor.shutdown();\r\nassertEquals(queue.size(), 0);\r\n```","```\r\nSaving an element: 339626897 to the exchange point\r\nconsumed an element: 339626897 from the exchange point\r\n```"]