["```\r\n{\r\n    \"timestamp\": \"2022-07-08T08:07:51.120+00:00\",\r\n    \"status\": 500,\r\n    \"error\": \"Internal Server Error\",\r\n    \"path\": \"/myapp1/product/Test123\"\r\n}\r\n```","```\r\npublic class Product {\r\n    private String id;\r\n    private String productName;\r\n    private double price;\r\n}\r\n```","```\r\n@RestController(\"product_controller\")\r\n@RequestMapping(value =\"myapp1\")\r\npublic class ProductController {\r\n\r\n    private ProductClient productClient;\r\n\r\n    @Autowired\r\n    public ProductController(ProductClient productClient) {\r\n        this.productClient = productClient;\r\n    }\r\n\r\n    @GetMapping(\"/product/{id}\")\r\n    public Product getProduct(@PathVariable String id) {\r\n        return productClient.getProduct(id);\r\n    }\r\n}\r\n```","```\r\npublic class FeignConfig {\r\n\r\n    @Bean\r\n    Logger.Level feignLoggerLevel() {\r\n        return Logger.Level.FULL;\r\n    }\r\n}\r\n```","```\r\n@FeignClient(name = \"product-client\", url=\"http://localhost:8081/product/\", configuration = FeignConfig.class)\r\npublic interface ProductClient {\r\n    @RequestMapping(value = \"{id}\", method = RequestMethod.GET\")\r\n    Product getProduct(@PathVariable(value = \"id\") String id);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.tomakehurst</groupId>\r\n    <artifactId>wiremock-jre8</artifactId>\r\n    <version>2.33.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nWireMockServer wireMockServer = new WireMockServer(8081);\r\nconfigureFor(\"localhost\", 8081);\r\nwireMockServer.start();\r\n```","```\r\nString productId = \"test\";\r\nstubFor(get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.SERVICE_UNAVAILABLE.value())));\r\n\r\nassertThrows(FeignException.class, () -> productClient.getProduct(productId));\r\n```","```\r\nString productId = \"test\";\r\nstubFor(get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.NOT_FOUND.value())));\r\n\r\nassertThrows(FeignException.class, () -> productClient.getProduct(productId));\r\n```","```\r\nString productId = \"test\";\r\nstubFor(WireMock.get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.SERVICE_UNAVAILABLE.value())));\r\n\r\nmockMvc.perform(get(\"/myapp1/product/\" + productId))\r\n  .andExpect(status().is(HttpStatus.INTERNAL_SERVER_ERROR.value()));\r\n```","```\r\npublic class CustomErrorDecoder implements ErrorDecoder {\r\n\r\n    @Override\r\n    public Exception decode(String methodKey, Response response) {\r\n        switch (response.status()){\r\n            case 400:\r\n                return new BadRequestException();\r\n            case 404:\r\n                return new ProductNotFoundException(\"Product not found\");\r\n            case 503:\r\n                return new ProductServiceNotAvailableException(\"Product Api is unavailable\");\r\n            default:\r\n                return new Exception(\"Exception while getting product details\");\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic ErrorDecoder errorDecoder() {\r\n   return new CustomErrorDecoder();\r\n}\r\n```","```\r\n@FeignClient(name = \"product-client-2\", url = \"http://localhost:8081/product/\", \r\n   configuration = { FeignConfig.class, CustomErrorDecoder.class })\r\n```","```\r\nString productId = \"test\";\r\nstubFor(get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.SERVICE_UNAVAILABLE.value())));\r\n\r\nassertThrows(ProductServiceNotAvailableException.class, \r\n  () -> productClient.getProduct(productId));\r\n```","```\r\nString productId = \"test\";\r\nstubFor(get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.NOT_FOUND.value())));\r\n\r\nassertThrows(ProductNotFoundException.class, \r\n  () -> productClient.getProduct(productId));\r\n```","```\r\npublic class ErrorResponse {\r\n\r\n    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")\r\n    private Date timestamp;\r\n\r\n    @JsonProperty(value = \"code\")\r\n    private int code;\r\n\r\n    @JsonProperty(value = \"status\")\r\n    private String status;\r\n\r\n    @JsonProperty(value = \"message\")\r\n    private String message;\r\n\r\n    @JsonProperty(value = \"details\")\r\n    private String details;\r\n}\r\n```","```\r\n@RestControllerAdvice\r\npublic class ProductExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler({ProductServiceNotAvailableException.class})\r\n    public ResponseEntity<ErrorResponse> handleProductServiceNotAvailableException(ProductServiceNotAvailableException exception, WebRequest request) {\r\n        return new ResponseEntity<>(new ErrorResponse(\r\n          HttpStatus.INTERNAL_SERVER_ERROR,\r\n          exception.getMessage(),\r\n          request.getDescription(false)),\r\n          HttpStatus.INTERNAL_SERVER_ERROR);\r\n    }\r\n\r\n    @ExceptionHandler({ProductNotFoundException.class})\r\n    public ResponseEntity<ErrorResponse> handleProductNotFoundException(ProductNotFoundException exception, WebRequest request) {\r\n        return new ResponseEntity<>(new ErrorResponse(\r\n          HttpStatus.NOT_FOUND,\r\n          exception.getMessage(),\r\n          request.getDescription(false)),\r\n          HttpStatus.NOT_FOUND);\r\n    }\r\n} \r\n```","```\r\nString productId = \"test\";\r\nstubFor(WireMock.get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.SERVICE_UNAVAILABLE.value())));\r\n\r\nMvcResult result = mockMvc.perform(get(\"/myapp2/product/\" + productId))\r\n  .andExpect(status().isInternalServerError()).andReturn();\r\n\r\nErrorResponse errorResponse = objectMapper.readValue(result.getResponse().getContentAsString(), ErrorResponse.class);\r\nassertEquals(500, errorResponse.getCode());\r\nassertEquals(\"Product Api is unavailable\", errorResponse.getMessage()); \r\n```","```\r\nString productId = \"test\";\r\nstubFor(WireMock.get(urlEqualTo(\"/product/\" + productId))\r\n  .willReturn(aResponse()\r\n  .withStatus(HttpStatus.NOT_FOUND.value())));\r\n\r\nMvcResult result = mockMvc.perform(get(\"/myapp2/product/\" + productId))\r\n  .andExpect(status().isNotFound()).andReturn();\r\n\r\nErrorResponse errorResponse = objectMapper.readValue(result.getResponse().getContentAsString(), ErrorResponse.class);\r\nassertEquals(404, errorResponse.getCode());\r\nassertEquals(\"Product not found\", errorResponse.getMessage()); \r\n```"]