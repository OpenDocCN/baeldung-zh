["```\r\nObservationRegistry observationRegistry = ObservationRegistry.create();\r\nObservation observation = Observation.createNotStarted(\"sample\", observationRegistry);\r\n```","```\r\nobservation.start();\r\ntry (Observation.Scope scope = observation.openScope()) {\r\n    // ... the observed action\r\n} catch (Exception e) {\r\n    observation.error(e);\r\n    // further exception handling\r\n} finally {\r\n    observation.stop();\r\n}\r\n```","```\r\nobservation.observe(() -> {\r\n    // ... the observed action\r\n});\r\n```","```\r\npublic class SimpleLoggingHandler implements ObservationHandler<Observation.Context> {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(SimpleLoggingHandler.class);\r\n\r\n    @Override\r\n    public boolean supportsContext(Observation.Context context) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void onStart(Observation.Context context) {\r\n        log.info(\"Starting\");\r\n    }\r\n\r\n    @Override\r\n    public void onScopeOpened(Observation.Context context) {\r\n        log.info(\"Scope opened\");\r\n    }\r\n\r\n    @Override\r\n    public void onScopeClosed(Observation.Context context) {\r\n        log.info(\"Scope closed\");\r\n    }\r\n\r\n    @Override\r\n    public void onStop(Observation.Context context) {\r\n        log.info(\"Stopping\");\r\n    }\r\n\r\n    @Override\r\n    public void onError(Observation.Context context) {\r\n        log.info(\"Error\");\r\n    }\r\n}\r\n```","```\r\nobservationRegistry\r\n  .observationConfig()\r\n  .observationHandler(new SimpleLoggingHandler());\r\n```","```\r\nobservationRegistry\r\n  .observationConfig()\r\n  .observationHandler(new ObservationTextPublisher(System.out::println));\r\n```","```\r\nMeterRegistry meterRegistry = new SimpleMeterRegistry();\r\nobservationRegistry\r\n  .observationConfig()\r\n  .observationHandler(new DefaultMeterObservationHandler(meterRegistry));\r\n\r\n// ... observe using Observation with name \"sample\"\r\n\r\n// fetch maximum duration of the named observation\r\nOptional<Double> maximumDuration = meterRegistry.getMeters().stream()\r\n  .filter(m -> \"sample\".equals(m.getId().getName()))\r\n  .flatMap(m -> StreamSupport.stream(m.measure().spliterator(), false))\r\n  .filter(ms -> ms.getStatistic() == Statistic.MAX)\r\n  .findFirst()\r\n  .map(Measurement::getValue); \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n@Service\r\npublic class GreetingService {\r\n\r\n    private ObservationRegistry observationRegistry;\r\n\r\n    // constructor\r\n\r\n    public String sayHello() {\r\n        return Observation\r\n          .createNotStarted(\"greetingService\", observationRegistry)\r\n          .observe(this::sayHelloNoObs);\r\n    }\r\n\r\n    private String sayHelloNoObs() {\r\n        return \"Hello World!\";\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ObservationTextPublisherConfiguration {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(ObservationTextPublisherConfiguration.class);\r\n\r\n    @Bean\r\n    public ObservationHandler<Observation.Context> observationTextPublisher() {\r\n        return new ObservationTextPublisher(log::info);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ObservationFilterConfiguration {\r\n\r\n    // if an ObservationRegistry is configured\r\n    @ConditionalOnBean(ObservationRegistry.class)\r\n    // if we do not use Actuator\r\n    @ConditionalOnMissingBean(ServerHttpObservationFilter.class)\r\n    @Bean\r\n    public ServerHttpObservationFilter observationFilter(ObservationRegistry registry) {\r\n        return new ServerHttpObservationFilter(registry);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-aop</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class ObservedAspectConfiguration {\r\n\r\n    @Bean\r\n    public ObservedAspect observedAspect(ObservationRegistry observationRegistry) {\r\n        return new ObservedAspect(observationRegistry);\r\n    }\r\n}\r\n```","```\r\n@Observed(name = \"greetingService\")\r\n@Service\r\npublic class GreetingService {\r\n\r\n    public String sayHello() {\r\n        return \"Hello World!\";\r\n    }\r\n} \r\n```","```\r\n{\r\n    \"name\": \"greetingService\",\r\n    \"baseUnit\": \"seconds\",\r\n    \"measurements\": [\r\n        {\r\n            \"statistic\": \"COUNT\",\r\n            \"value\": 15\r\n        },\r\n        {\r\n            \"statistic\": \"TOTAL_TIME\",\r\n            \"value\": 0.0237577\r\n        },\r\n        {\r\n            \"statistic\": \"MAX\",\r\n            \"value\": 0.0035475\r\n        }\r\n    ],\r\n    ...\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-observation-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ComponentScan(basePackageClasses = GreetingService.class)\r\n@EnableAutoConfiguration\r\n@Import(ObservedAspectConfiguration.class)\r\n@AutoConfigureObservability\r\nclass GreetingServiceObservationTest {\r\n\r\n    @Autowired\r\n    GreetingService service;\r\n    @Autowired\r\n    TestObservationRegistry registry;\r\n\r\n    @TestConfiguration\r\n    static class ObservationTestConfiguration {\r\n\r\n        @Bean\r\n        TestObservationRegistry observationRegistry() {\r\n            return TestObservationRegistry.create();\r\n        }\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Documented\r\n@Inherited\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.TYPE)\r\n@Import({\r\n  ObservedAspectConfiguration.class,\r\n  EnableTestObservation.ObservationTestConfiguration.class\r\n})\r\n@AutoConfigureObservability\r\npublic @interface EnableTestObservation {\r\n\r\n    @TestConfiguration\r\n    class ObservationTestConfiguration {\r\n\r\n        @Bean\r\n        TestObservationRegistry observationRegistry() {\r\n            return TestObservationRegistry.create();\r\n        }\r\n    }\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ComponentScan(basePackageClasses = GreetingService.class)\r\n@EnableAutoConfiguration\r\n@EnableTestObservation\r\nclass GreetingServiceObservationTest {\r\n\r\n    @Autowired\r\n    GreetingService service;\r\n    @Autowired\r\n    TestObservationRegistry registry;\r\n\r\n    // ...\r\n}\r\n```","```\r\nimport static io.micrometer.observation.tck.TestObservationRegistryAssert.assertThat;\r\n\r\n// ...\r\n\r\n@Test\r\nvoid testObservation() {\r\n    // invoke service\r\n    service.sayHello();\r\n    assertThat(registry)\r\n      .hasObservationWithNameEqualTo(\"greetingService\")\r\n      .that()\r\n      .hasBeenStarted()\r\n      .hasBeenStopped();\r\n}\r\n```","```\r\npublic class SimpleLoggingHandlerTest\r\n  extends AnyContextObservationHandlerCompatibilityKit {\r\n\r\n    SimpleLoggingHandler handler = new SimpleLoggingHandler();\r\n\r\n    @Override\r\n    public ObservationHandler<Observation.Context> handler() {\r\n        return handler;\r\n    }\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-tracing</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-tracing-bridge-brave</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-tracing-bridge-otel</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-tracing-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@EnableAutoConfiguration\r\n@AutoConfigureObservability\r\npublic class GreetingServiceTracingTest {\r\n\r\n    @TestConfiguration\r\n    static class ObservationTestConfiguration {\r\n        @Bean\r\n        TestObservationRegistry observationRegistry() {\r\n            return TestObservationRegistry.create();\r\n        }\r\n        @Bean\r\n        SimpleTracer simpleTracer() {\r\n            return new SimpleTracer();\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void shouldTrace() {\r\n        // test\r\n    }\r\n}\r\n```","```\r\n@Documented\r\n@Inherited\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.TYPE)\r\n@AutoConfigureObservability\r\n@Import({\r\n  ObservedAspectConfiguration.class,\r\n  EnableTestObservation.ObservationTestConfiguration.class\r\n})\r\npublic @interface EnableTestObservation {\r\n\r\n    @TestConfiguration\r\n    class ObservationTestConfiguration {\r\n\r\n        @Bean\r\n        TestObservationRegistry observationRegistry() {\r\n            return TestObservationRegistry.create();\r\n        }\r\n\r\n        @Bean\r\n        SimpleTracer simpleTracer() {\r\n            return new SimpleTracer();\r\n        }\r\n    }\r\n}\r\n```","```\r\nimport static io.micrometer.tracing.test.simple.TracerAssert.assertThat;\r\n\r\n// ...\r\n\r\n@Autowired\r\nGreetingService service;\r\n@Autowired\r\nSimpleTracer tracer;\r\n\r\n// ...\r\n\r\n@Test\r\nvoid testTracingForGreeting() {\r\n    service.sayHello();\r\n    assertThat(tracer)\r\n      .onlySpan()\r\n      .hasNameEqualTo(\"greeting-service#say-hello\")\r\n      .isEnded();\r\n}\r\n```"]