["```\r\ninterface ChainOfResponsibility {\r\n    void perform();\r\n}\r\n```","```\r\nclass LoggingChain {\r\n    private ChainOfResponsibility delegate;\r\n\r\n    public void perform() {\r\n        System.out.println(\"Starting chain\");\r\n        delegate.perform();\r\n        System.out.println(\"Ending chain\");\r\n    }\r\n}\r\n```","```\r\npublic class AuthenticatingFilter implements Filter {\r\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) \r\n      throws IOException, ServletException {\r\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n        if (!\"MyAuthToken\".equals(httpRequest.getHeader(\"X-Auth-Token\")) {\r\n             return;\r\n        }\r\n        chain.doFilter(request, response);\r\n    }\r\n}\r\n```","```\r\ninterface DoorCommand {\r\n    perform(Door door);\r\n}\r\n```","```\r\nclass OpenDoorCommand implements DoorCommand {\r\n    public void perform(Door door) {\r\n        door.setState(\"open\");\r\n    }\r\n}\r\n```","```\r\nAction saveAction = new SaveAction();\r\nbutton = new JButton(saveAction)\r\n```","```\r\nvoid printAll<T>(Iterator<T> iter) {\r\n    while (iter.hasNext()) {\r\n        System.out.println(iter.next());\r\n    }\r\n}\r\n```","```\r\nclass Undoable {\r\n    private String value;\r\n    private String previous;\r\n\r\n    public void setValue(String newValue) {\r\n        this.previous = this.value;\r\n        this.value = newValue;\r\n    }\r\n\r\n    public void restoreState() {\r\n        if (this.previous != null) {\r\n            this.value = this.previous;\r\n            this.previous = null;\r\n        }\r\n    }\r\n}\r\n```","```\r\nclass Observable {\r\n    private String state;\r\n    private Set<Consumer<String>> listeners = new HashSet<>;\r\n\r\n    public void addListener(Consumer<String> listener) {\r\n        this.listeners.add(listener);\r\n    }\r\n\r\n    public void setState(String newState) {\r\n        this.state = state;\r\n        for (Consumer<String> listener : listeners) {\r\n            listener.accept(newState);\r\n        }\r\n    }\r\n}\r\n```","```\r\nPropertyChangeSupport observable = new PropertyChangeSupport();\r\n\r\n// Add some observers to be notified when the value changes\r\nobservable.addPropertyChangeListener(evt -> System.out.println(\"Value changed: \" + evt));\r\n\r\n// Indicate that the value has changed and notify observers of the new value\r\nobservable.firePropertyChange(\"field\", \"old value\", \"new value\");\r\n```","```\r\ninterface NotificationStrategy {\r\n    void notify(User user, Message message);\r\n}\r\n```","```\r\nclass EmailNotificationStrategy implements NotificationStrategy {\r\n    ....\r\n}\r\n```","```\r\nclass SMSNotificationStrategy implements NotificationStrategy {\r\n    ....\r\n}\r\n```","```\r\n// Sort by name\r\nCollections.sort(users, new UsersNameComparator());\r\n\r\n// Sort by ID\r\nCollections.sort(users, new UsersIdComparator());\r\n```","```\r\nclass Component {\r\n    public void render() {\r\n        doRender();\r\n        addEventListeners();\r\n        syncData();\r\n    }\r\n\r\n    protected abstract void doRender();\r\n\r\n    protected void addEventListeners() {}\r\n\r\n    protected void syncData() {}\r\n}\r\n```","```\r\ninterface UserVisitor<T> {\r\n    T visitStandardUser(StandardUser user);\r\n    T visitAdminUser(AdminUser user);\r\n    T visitSuperuser(Superuser user);\r\n}\r\n```","```\r\nclass StandardUser {\r\n    public <T> T accept(UserVisitor<T> visitor) {\r\n        return visitor.visitStandardUser(this);\r\n    }\r\n}\r\n```","```\r\nclass AuthenticatingVisitor {\r\n    public Boolean visitStandardUser(StandardUser user) {\r\n        return false;\r\n    }\r\n    public Boolean visitAdminUser(AdminUser user) {\r\n        return user.hasPermission(\"write\");\r\n    }\r\n    public Boolean visitSuperuser(Superuser user) {\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nFiles.walkFileTree(startingDir, new SimpleFileVisitor() {\r\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attr) {\r\n        System.out.println(\"Found file: \" + file);\r\n    }\r\n\r\n    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\r\n        System.out.println(\"Found directory: \" + dir);\r\n    }\r\n});\r\n```"]