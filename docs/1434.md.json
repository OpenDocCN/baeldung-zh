["```\r\n<dependency>\r\n    <groupId>io.bootique.jersey</groupId>\r\n    <artifactId>bootique-jersey</artifactId>\r\n    <scope>compile</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.bootique</groupId>\r\n    <artifactId>bootique-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>io.bootique.bom</groupId>\r\n            <artifactId>bootique-bom</artifactId>\r\n            <version>0.23</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.apache.maven.plugins</groupId>\r\n            <artifactId>maven-shade-plugin</artifactId>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        Bootique.app(args)\r\n          .autoLoadModules()\r\n          .exec();\r\n    }\r\n}\r\n```","```\r\nNAME\r\n      com.baeldung.bootique.App\r\n\r\nOPTIONS\r\n      -c yaml_location, --config=yaml_location\r\n           Specifies YAML config location, which can be a file path \r\n           or a URL.\r\n\r\n      -h, --help\r\n           Prints this message.\r\n\r\n      -H, --help-config\r\n           Prints information about application modules and their \r\n           configuration options.\r\n\r\n      -s, --server\r\n           Starts Jetty server.\r\n```","```\r\npublic interface HelloService {\r\n    boolean save();\r\n}\r\n```","```\r\npublic class HelloServiceImpl implements HelloService {\r\n\r\n    @Override\r\n    public boolean save() {\r\n        return true;\r\n    }\r\n}\r\n```","```\r\npublic class ModuleBinder implements Module {\r\n\r\n    @Override\r\n    public void configure(Binder binder) {\r\n        binder\r\n          .bind(HelloService.class)\r\n          .to(HelloServiceImpl.class);\r\n    }\r\n}\r\n```","```\r\nBootique\r\n  .app(args)\r\n    .module(module)\r\n    .module(ModuleBinder.class)\r\n  .autoLoadModules()\r\n  .exec();\r\n```","```\r\npublic class ModuleProvider implements BQModuleProvider {\r\n\r\n    @Override\r\n    public Module module() {\r\n        return new ModuleBinder();\r\n    }\r\n}\r\n```","```\r\ncom.baeldung.bootique.module.ModuleProvider\r\n```","```\r\n@Inject\r\nHelloService helloService;\r\n```","```\r\n@Path(\"/\")\r\npublic class IndexController {\r\n\r\n    @GET\r\n    public String index() {\r\n        return \"Hello, baeldung!\";\r\n    }\r\n\r\n    @POST\r\n    public String save() {\r\n        return \"Data Saved!\";\r\n    }\r\n}\r\n```","```\r\nModule module = binder -> JerseyModule\r\n  .extend(binder)\r\n  .addResource(IndexController.class);\r\n```","```\r\njetty:\r\n    context: /hello\r\n    connector:\r\n        port: 10001\r\n```","```\r\n--config=/home/baeldung/bootique/config.yml\r\n```","```\r\n<dependency>\r\n    <groupId>io.bootique.logback</groupId>\r\n    <artifactId>bootique-logback</artifactId>\r\n</dependency>\r\n```","```\r\nBootique.app(args)\r\n  .module(module)\r\n  .module(ModuleBinder.class)\r\n    .bootLogger( new BootLogger() {\r\n      @Override\r\n      public void trace( Supplier<String> args ) {\r\n          // ...\r\n      }\r\n      @Override\r\n      public void stdout( String args ) {\r\n          // ...\r\n      }\r\n      @Override\r\n      public void stderr( String args, Throwable thw ) {\r\n          // ...\r\n      }\r\n      @Override\r\n      public void stderr( String args ) {\r\n          // ...\r\n      }\r\n}).autoLoadModules().exec();\r\n```","```\r\nlog:\r\n    level: warn\r\n    appenders:\r\n    - type: file\r\n      logFormat: '%c{20}: %m%n'\r\n      file: /path/to/logging/dir/logger.log\r\n```","```\r\n@Rule\r\npublic BQTestFactory bqTestFactory = new BQTestFactory();\r\n```","```\r\n@Rule\r\npublic BQDaemonTestFactory bqDaemonTestFactory = new BQDaemonTestFactory();\r\n```","```\r\n@Test\r\npublic void givenService_expectBoolen() {\r\n    BQRuntime runtime = bqTestFactory\r\n      .app(\"--server\").autoLoadModules()\r\n      .createRuntime();\r\n    HelloService service = runtime.getInstance( HelloService.class );\r\n\r\n    assertEquals( true, service.save() );\r\n}\r\n```"]