["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.2.12.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-spatial</artifactId>\r\n    <version>5.2.12.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>6.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>ch.vorburger.mariaDB4j</groupId>\r\n    <artifactId>mariaDB4j</artifactId>\r\n    <version>2.2.3</version>\r\n</dependency> \r\n```","```\r\nhibernate.dialect=org.hibernate.spatial.dialect.mysql.MySQL56SpatialDialect\r\n// ...\r\n```","```\r\npublic Geometry wktToGeometry(String wellKnownText) \r\n  throws ParseException {\r\n\r\n    return new WKTReader().read(wellKnownText);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldConvertWktToGeometry() {\r\n    Geometry geometry = wktToGeometry(\"POINT (2 5)\");\r\n\r\n    assertEquals(\"Point\", geometry.getGeometryType());\r\n    assertTrue(geometry instanceof Point);\r\n}\r\n```","```\r\n@Entity\r\npublic class PointEntity {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private Point point;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic void insertPoint(String point) {\r\n    PointEntity entity = new PointEntity();\r\n    entity.setPoint((Point) wktToGeometry(point));\r\n    session.persist(entity);\r\n}\r\n```","```\r\n@Test\r\npublic void shouldInsertAndSelectPoints() {\r\n    PointEntity entity = new PointEntity();\r\n    entity.setPoint((Point) wktToGeometry(\"POINT (1 1)\"));\r\n\r\n    session.persist(entity);\r\n    PointEntity fromDb = session\r\n      .find(PointEntity.class, entity.getId());\r\n\r\n    assertEquals(\"POINT (1 1)\", fromDb.getPoint().toString());\r\n    assertTrue(geometry instanceof Point);\r\n}\r\n```","```\r\ndesc PointEntity;\r\nField    Type          Null    Key\r\nid       bigint(20)    NO      PRI\r\npoint    geometry      YES\r\n```","```\r\nselect id, astext(point) from PointEntity;\r\n\r\nid      astext(point)\r\n1       POINT(2 4)\r\n```","```\r\npublic Geometry createCircle(double x, double y, double radius) {\r\n    GeometricShapeFactory shapeFactory = new GeometricShapeFactory();\r\n    shapeFactory.setNumPoints(32);\r\n    shapeFactory.setCentre(new Coordinate(x, y));\r\n    shapeFactory.setSize(radius * 2);\r\n    return shapeFactory.createCircle();\r\n}\r\n```","```\r\n@Test\r\npublic void shouldSelectAllPointsWithinRadius() throws ParseException {\r\n    insertPoint(\"POINT (1 1)\");\r\n    insertPoint(\"POINT (1 2)\");\r\n    insertPoint(\"POINT (3 4)\");\r\n    insertPoint(\"POINT (5 6)\");\r\n\r\n    Query query = session.createQuery(\"select p from PointEntity p where \r\n      within(p.point, :circle) = true\", PointEntity.class);\r\n    query.setParameter(\"circle\", createCircle(0.0, 0.0, 5));\r\n\r\n    assertThat(query.getResultList().stream()\r\n      .map(p -> ((PointEntity) p).getPoint().toString()))\r\n      .containsOnly(\"POINT (1 1)\", \"POINT (1 2)\");\r\n    }\r\n```","```\r\n@Entity\r\npublic class PolygonEntity {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private Polygon polygon;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void shouldSelectAdjacentPolygons() throws ParseException {\r\n    insertPolygon(\"POLYGON ((0 0, 0 5, 5 5, 5 0, 0 0))\");\r\n    insertPolygon(\"POLYGON ((3 0, 3 5, 8 5, 8 0, 3 0))\");\r\n    insertPolygon(\"POLYGON ((2 2, 3 1, 2 5, 4 3, 3 3, 2 2))\");\r\n\r\n    Query query = session.createQuery(\"select p from PolygonEntity p \r\n      where touches(p.polygon, :polygon) = true\", PolygonEntity.class);\r\n    query.setParameter(\"polygon\", wktToGeometry(\"POLYGON ((5 5, 5 10, 10 10, 10 5, 5 5))\"));\r\n    assertThat(query.getResultList().stream()\r\n      .map(p -> ((PolygonEntity) p).getPolygon().toString())).containsOnly(\r\n      \"POLYGON ((0 0, 0 5, 5 5, 5 0, 0 0))\", \"POLYGON ((3 0, 3 5, 8 5, 8 0, 3 0))\");\r\n}\r\n```"]