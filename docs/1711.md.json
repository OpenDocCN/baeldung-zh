["```\r\n#%RAML 1.0\r\ntitle: Baeldung Foo REST Services API using Data Types\r\nversion: v1\r\nprotocols: [ HTTPS ] \r\nbaseUri: http://myapi.mysite.com/api/{version}\r\nmediaType: application/json \r\n```","```\r\nsecuritySchemes:\r\n  basicAuth:\r\n    description: Each request must contain the headers necessary for\r\n                 basic authentication\r\n    type: Basic Authentication\r\n    describedBy:\r\n      headers:\r\n        Authorization:\r\n          description: Used to send the Base64-encoded \"username:password\"\r\n                       credentials\r\n          type: string\r\n      responses:\r\n        401:\r\n          description: |\r\n            Unauthorized. Either the provided username and password\r\n            combination is invalid, or the user is not allowed to access\r\n            the content provided by the requested URL.\r\n```","```\r\ntypes:\r\n  Foo:\r\n    type: object\r\n    properties:\r\n      id:\r\n        required: true\r\n        type: integer\r\n      name:\r\n        required: true\r\n        type: string\r\n      ownerName:\r\n        required: false\r\n        type: string\r\n```","```\r\ntypes:\r\n  Foo:\r\n    properties:\r\n      id: integer\r\n      name: string\r\n      ownerName?: string\r\n  Error:\r\n    properties:\r\n      code: integer\r\n      message: string\r\n```","```\r\n/foos:\r\n```","```\r\n/foos:\r\n  /{id}:\r\n  /name/{name}: \r\n```","```\r\n/foos:\r\n  get:\r\n  post:\r\n  /{id}:\r\n    get:\r\n    put:\r\n    delete:\r\n  /name/{name}:\r\n    get:\r\n```","```\r\n/foos:\r\n  get:\r\n    description: List all Foos matching query criteria, if provided;\r\n                 otherwise list all Foos\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n```","```\r\n/foos:\r\n  ...\r\n  /{id}:\r\n    get:\r\n      description: Get a Foo by id\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo\r\n              example: { \"id\" : 1, \"name\" : \"First Foo\" } \r\n```","```\r\n/foos:\r\n  get:\r\n    description: List all Foos matching query criteria, if provided;\r\n                 otherwise list all Foos\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: Foo[]\r\n            example: |\r\n              [\r\n                { \"id\" : 1, \"name\" : \"First Foo\" },\r\n                { \"id\" : 2, \"name\" : \"Second Foo\" }\r\n              ] \r\n```","```\r\n/foos:\r\n  ...\r\n  post:\r\n    description: Create a new Foo\r\n    body:\r\n      application/json:\r\n        type: Foo\r\n        example: { \"id\" : 5, \"name\" : \"Another foo\" }\r\n    responses:\r\n      201:\r\n        body:\r\n          application/json:\r\n            type: Foo\r\n            example: { \"id\" : 5, \"name\" : \"Another foo\" } \r\n```","```\r\n 404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: { \"message\" : \"Not found\", \"code\" : 1001 } \r\n```","```\r\ntypes:\r\n  foo: |\r\n    { \"$schema\": \"http://json-schema.org/schema\",\r\n       \"type\": \"object\",\r\n       \"description\": \"Foo details\",\r\n       \"properties\": {\r\n         \"id\": { \"type\": integer },\r\n         \"name\": { \"type\": \"string\" },\r\n         \"ownerName\": { \"type\": \"string\" }\r\n       },\r\n       \"required\": [ \"id\", \"name\" ]\r\n    }\r\n```","```\r\n/foos:\r\n  ...\r\n  /{id}:\r\n    get:\r\n      description: Get a Foo by its id\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: foo\r\n              ...\r\n```","```\r\ntypes:\r\n  Foo: !include types/Foo.raml\r\n  Error: !include types/Error.raml\r\n```","```\r\ntypes:\r\n  foo: !include schemas/foo.json\r\n  error: !include schemas/error.json\r\n```","```\r\n#%RAML 1.0\r\ntitle: Baeldung Foo REST Services API\r\nversion: v1\r\nprotocols: [ HTTPS ]\r\nbaseUri: http://rest-api.baeldung.com/api/{version}\r\nmediaType: application/json\r\nsecuredBy: basicAuth\r\nsecuritySchemes:\r\n  basicAuth:\r\n    description: Each request must contain the headers necessary for\r\n                 basic authentication\r\n    type: Basic Authentication\r\n    describedBy:\r\n      headers:\r\n        Authorization:\r\n          description: Used to send the Base64 encoded \"username:password\"\r\n                       credentials\r\n          type: string\r\n      responses:\r\n        401:\r\n          description: |\r\n            Unauthorized. Either the provided username and password\r\n            combination is invalid, or the user is not allowed to access\r\n            the content provided by the requested URL.\r\ntypes:\r\n  Foo:   !include types/Foo.raml\r\n  Error: !include types/Error.raml\r\n/foos:\r\n  get:\r\n    description: List all Foos matching query criteria, if provided;\r\n                 otherwise list all Foos\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: Foo[]\r\n            example: !include examples/Foos.json\r\n  post:\r\n    description: Create a new Foo\r\n    body:\r\n      application/json:\r\n        type: Foo\r\n        example: !include examples/Foo.json\r\n    responses:\r\n      201:\r\n        body:\r\n          application/json:\r\n            type: Foo\r\n            example: !include examples/Foo.json\r\n  /{id}:\r\n    get:\r\n      description: Get a Foo by id\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo\r\n              example: !include examples/Foo.json\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    put:\r\n      description: Update a Foo by id\r\n      body:\r\n        application/json:\r\n          type: Foo\r\n          example: !include examples/Foo.json\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo\r\n              example: !include examples/Foo.json\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    delete:\r\n      description: Delete a Foo by id\r\n      responses:\r\n        204:\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n  /name/{name}:\r\n    get:\r\n      description: List all Foos with a certain name\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo[]\r\n              example: !include examples/Foos.json \r\n```"]