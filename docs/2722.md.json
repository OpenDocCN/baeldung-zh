["```\r\npublic void undeclared() {\r\n    throw new IOException();\r\n}\r\n```","```\r\njava: unreported exception java.io.IOException; must be caught or declared to be thrown\r\n```","```\r\npublic void save(Object data) {\r\n    // omitted\r\n}\r\n```","```\r\npublic class ExceptionalInvocationHandler implements InvocationHandler {\r\n\r\n    @Override\r\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n        if (\"size\".equals(method.getName())) {\r\n            throw new SomeCheckedException(\"Always fails\");\r\n        }\r\n\r\n        throw new RuntimeException();\r\n    }\r\n}\r\n\r\npublic class SomeCheckedException extends Exception {\r\n\r\n    public SomeCheckedException(String message) {\r\n        super(message);\r\n    }\r\n}\r\n```","```\r\nClassLoader classLoader = getClass().getClassLoader();\r\nInvocationHandler invocationHandler = new ExceptionalInvocationHandler();\r\nList<String> proxy = (List<String>) Proxy.newProxyInstance(classLoader, \r\n  new Class[] { List.class }, invocationHandler);\r\n\r\nassertThatThrownBy(proxy::size)\r\n  .isInstanceOf(UndeclaredThrowableException.class)\r\n  .hasCauseInstanceOf(SomeCheckedException.class);\r\n```","```\r\nassertThatThrownBy(proxy::isEmpty).isInstanceOf(RuntimeException.class);\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ThrowUndeclared {}\r\n```","```\r\n@Aspect\r\n@Component\r\npublic class UndeclaredAspect {\r\n\r\n    @Around(\"@annotation(undeclared)\")\r\n    public Object advise(ProceedingJoinPoint pjp, ThrowUndeclared undeclared) throws Throwable {\r\n        throw new SomeCheckedException(\"AOP Checked Exception\");\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class UndeclaredService {\r\n\r\n    @ThrowUndeclared\r\n    public void doSomething() {}\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = UndeclaredApplication.class)\r\npublic class UndeclaredThrowableExceptionIntegrationTest {\r\n\r\n    @Autowired private UndeclaredService service;\r\n\r\n    @Test\r\n    public void givenAnAspect_whenCallingAdvisedMethod_thenShouldWrapTheException() {\r\n        assertThatThrownBy(service::doSomething)\r\n          .isInstanceOf(UndeclaredThrowableException.class)\r\n          .hasCauseInstanceOf(SomeCheckedException.class);\r\n    }\r\n}\r\n```"]