["```\r\nvoid consume() {\r\n    try {\r\n        consumer.subscribe(Arrays.asList(\"foo\", \"bar\"));\r\n        while (true) {\r\n            ConsumerRecords<String, String> records = consumer.poll(Duration.ofSeconds(1));\r\n            records.forEach(record -> processRecord(record));\r\n        }\r\n    } catch (WakeupException ex) {\r\n        // ignore for shutdown\r\n    } catch (RuntimeException ex) {\r\n        // exception handling\r\n    } finally {\r\n        consumer.close();\r\n    }\r\n}\r\n```","```\r\nclass CountryPopulation {\r\n\r\n    private String country;\r\n    private Integer population;\r\n\r\n    // standard constructor, getters and setters\r\n}\r\n```","```\r\npublic class CountryPopulationConsumer {\r\n\r\n    private Consumer<String, Integer> consumer;\r\n    private java.util.function.Consumer<Throwable> exceptionConsumer;\r\n    private java.util.function.Consumer<CountryPopulation> countryPopulationConsumer;\r\n\r\n    // standard constructor\r\n\r\n    void startBySubscribing(String topic) {\r\n        consume(() -> consumer.subscribe(Collections.singleton(topic)));\r\n    }\r\n\r\n    void startByAssigning(String topic, int partition) {\r\n        consume(() -> consumer.assign(Collections.singleton(new TopicPartition(topic, partition))));\r\n    }\r\n\r\n    private void consume(Runnable beforePollingTask) {\r\n        try {\r\n            beforePollingTask.run();\r\n            while (true) {\r\n                ConsumerRecords<String, Integer> records = consumer.poll(Duration.ofMillis(1000));\r\n                StreamSupport.stream(records.spliterator(), false)\r\n                    .map(record -> new CountryPopulation(record.key(), record.value()))\r\n                    .forEach(countryPopulationConsumer);\r\n                consumer.commitSync();\r\n            }\r\n        } catch (WakeupException e) {\r\n            System.out.println(\"Shutting down...\");\r\n        } catch (RuntimeException ex) {\r\n            exceptionConsumer.accept(ex);\r\n        } finally {\r\n            consumer.close();\r\n        }\r\n    }\r\n\r\n    public void stop() {\r\n        consumer.wakeup();\r\n    }\r\n}\r\n```","```\r\n@BeforeEach\r\nvoid setUp() {\r\n    consumer = new MockConsumer<>(OffsetResetStrategy.EARLIEST);\r\n    updates = new ArrayList<>();\r\n    countryPopulationConsumer = new CountryPopulationConsumer(consumer, \r\n      ex -> this.pollException = ex, updates::add);\r\n}\r\n```","```\r\n@Test\r\nvoid whenStartingByAssigningTopicPartition_thenExpectUpdatesAreConsumedCorrectly() {\r\n    // GIVEN\r\n    consumer.schedulePollTask(() -> consumer.addRecord(record(TOPIC, PARTITION, \"Romania\", 19_410_000)));\r\n    consumer.schedulePollTask(() -> countryPopulationConsumer.stop());\r\n\r\n    HashMap<TopicPartition, Long> startOffsets = new HashMap<>();\r\n    TopicPartition tp = new TopicPartition(TOPIC, PARTITION);\r\n    startOffsets.put(tp, 0L);\r\n    consumer.updateBeginningOffsets(startOffsets);\r\n\r\n    // WHEN\r\n    countryPopulationConsumer.startByAssigning(TOPIC, PARTITION);\r\n\r\n    // THEN\r\n    assertThat(updates).hasSize(1);\r\n    assertThat(consumer.closed()).isTrue();\r\n}\r\n```","```\r\n@Test\r\nvoid whenStartingBySubscribingToTopic_thenExpectUpdatesAreConsumedCorrectly() {\r\n    // GIVEN\r\n    consumer.schedulePollTask(() -> {\r\n        consumer.rebalance(Collections.singletonList(new TopicPartition(TOPIC, 0)));\r\n        consumer.addRecord(record(\"Romania\", 1000, TOPIC, 0));\r\n    });\r\n    consumer.schedulePollTask(() -> countryPopulationConsumer.stop());\r\n\r\n    HashMap<TopicPartition, Long> startOffsets = new HashMap<>();\r\n    TopicPartition tp = new TopicPartition(TOPIC, 0);\r\n    startOffsets.put(tp, 0L);\r\n    consumer.updateBeginningOffsets(startOffsets);\r\n\r\n    // WHEN\r\n    countryPopulationConsumer.startBySubscribing(TOPIC);\r\n\r\n    // THEN\r\n    assertThat(updates).hasSize(1);\r\n    assertThat(consumer.closed()).isTrue();\r\n}\r\n```","```\r\n@Test\r\nvoid whenStartingBySubscribingToTopicAndExceptionOccurs_thenExpectExceptionIsHandledCorrectly() {\r\n    // GIVEN\r\n    consumer.schedulePollTask(() -> consumer.setPollException(new KafkaException(\"poll exception\")));\r\n    consumer.schedulePollTask(() -> countryPopulationConsumer.stop());\r\n\r\n    HashMap<TopicPartition, Long> startOffsets = new HashMap<>();\r\n    TopicPartition tp = new TopicPartition(TOPIC, 0);\r\n    startOffsets.put(tp, 0L);\r\n    consumer.updateBeginningOffsets(startOffsets);\r\n\r\n    // WHEN\r\n    countryPopulationConsumer.startBySubscribing(TOPIC);\r\n\r\n    // THEN\r\n    assertThat(pollException).isInstanceOf(KafkaException.class).hasMessage(\"poll exception\");\r\n    assertThat(consumer.closed()).isTrue();\r\n}\r\n```"]