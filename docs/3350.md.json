["```\r\n@Entity\r\npublic class Person {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private int id;\r\n    private String name;\r\n    @OneToMany(mappedBy = \"person\", cascade = CascadeType.ALL)\r\n    private List<Address> addresses;\r\n}\r\n```","```\r\n@Entity\r\npublic class Address {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private int id;\r\n    private String street;\r\n    private int houseNumber;\r\n    private String city;\r\n    private int zipCode;\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    private Person person;\r\n}\r\n```","```\r\n@Test\r\npublic void whenParentSavedThenChildSaved() {\r\n    Person person = new Person();\r\n    Address address = new Address();\r\n    address.setPerson(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n    session.clear();\r\n}\r\n```","```\r\nHibernate: insert into Person (name, id) values (?, ?)\r\nHibernate: insert into Address (\r\n    city, houseNumber, person_id, street, zipCode, id) values (?, ?, ?, ?, ?, ?)\r\n```","```\r\n@Test\r\npublic void whenParentSavedThenMerged() {\r\n    int addressId;\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n    addressId = address.getId();\r\n    session.clear();\r\n\r\n    Address savedAddressEntity = session.find(Address.class, addressId);\r\n    Person savedPersonEntity = savedAddressEntity.getPerson();\r\n    savedPersonEntity.setName(\"devender kumar\");\r\n    savedAddressEntity.setHouseNumber(24);\r\n    session.merge(savedPersonEntity);\r\n    session.flush();\r\n}\r\n```","```\r\nHibernate: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.houseNumber as houseNum3_0_0_, address0_.person_id as person_i6_0_0_, address0_.street as street4_0_0_, address0_.zipCode as zipCode5_0_0_ from Address address0_ where address0_.id=?\r\nHibernate: select person0_.id as id1_1_0_, person0_.name as name2_1_0_ from Person person0_ where person0_.id=?\r\nHibernate: update Address set city=?, houseNumber=?, person_id=?, street=?, zipCode=? where id=?\r\nHibernate: update Person set name=? where id=?\r\n```","```\r\n@Test\r\npublic void whenParentRemovedThenChildRemoved() {\r\n    int personId;\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n    personId = person.getId();\r\n    session.clear();\r\n\r\n    Person savedPersonEntity = session.find(Person.class, personId);\r\n    session.remove(savedPersonEntity);\r\n    session.flush();\r\n}\r\n```","```\r\nHibernate: delete from Address where id=?\r\nHibernate: delete from Person where id=?\r\n```","```\r\n@Test\r\npublic void whenParentDetachedThenChildDetached() {\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n\r\n    assertThat(session.contains(person)).isTrue();\r\n    assertThat(session.contains(address)).isTrue();\r\n\r\n    session.detach(person);\r\n    assertThat(session.contains(person)).isFalse();\r\n    assertThat(session.contains(address)).isFalse();\r\n}\r\n```","```\r\n@Test\r\npublic void whenDetachedAndLockedThenBothReattached() {\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n\r\n    assertThat(session.contains(person)).isTrue();\r\n    assertThat(session.contains(address)).isTrue();\r\n\r\n    session.detach(person);\r\n    assertThat(session.contains(person)).isFalse();\r\n    assertThat(session.contains(address)).isFalse();\r\n    session.unwrap(Session.class)\r\n      .buildLockRequest(new LockOptions(LockMode.NONE))\r\n      .lock(person);\r\n\r\n    assertThat(session.contains(person)).isTrue();\r\n    assertThat(session.contains(address)).isTrue();\r\n}\r\n```","```\r\n@Test\r\npublic void whenParentRefreshedThenChildRefreshed() {\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.persist(person);\r\n    session.flush();\r\n    person.setName(\"Devender Kumar\");\r\n    address.setHouseNumber(24);\r\n    session.refresh(person);\r\n\r\n    assertThat(person.getName()).isEqualTo(\"devender\");\r\n    assertThat(address.getHouseNumber()).isEqualTo(23);\r\n}\r\n```","```\r\n@Test\r\npublic void whenParentReplicatedThenChildReplicated() {\r\n    Person person = buildPerson(\"devender\");\r\n    person.setId(2);\r\n    Address address = buildAddress(person);\r\n    address.setId(2);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.unwrap(Session.class).replicate(person, ReplicationMode.OVERWRITE);\r\n    session.flush();\r\n\r\n    assertThat(person.getId()).isEqualTo(2);\r\n    assertThat(address.getId()).isEqualTo(2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenParentSavedThenChildSaved() {\r\n    Person person = buildPerson(\"devender\");\r\n    Address address = buildAddress(person);\r\n    person.setAddresses(Arrays.asList(address));\r\n    session.saveOrUpdate(person);\r\n    session.flush();\r\n}\r\n```","```\r\nHibernate: insert into Person (name, id) values (?, ?)\r\nHibernate: insert into Address (\r\n    city, houseNumber, person_id, street, zipCode, id) values (?, ?, ?, ?, ?, ?)\r\n```"]