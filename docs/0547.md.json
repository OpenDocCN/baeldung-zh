["```\r\n<dependency>\r\n    <groupId>io.undertow</groupId>\r\n    <artifactId>undertow-servlet</artifactId>\r\n    <version>1.4.18.Final</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-shade-plugin</artifactId>\r\n    <executions>\r\n        <execution>\r\n            <phase>package</phase>\r\n            <goals>\r\n                <goal>shade</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\npublic class SimpleServer {\r\n    public static void main(String[] args) {\r\n        Undertow server = Undertow.builder().addHttpListener(8080, \r\n          \"localhost\").setHandler(exchange -> {\r\n            exchange.getResponseHeaders()\r\n            .put(Headers.CONTENT_TYPE, \"text/plain\");\r\n          exchange.getResponseSender().send(\"Hello Baeldung\");\r\n        }).build();\r\n        server.start();\r\n    }\r\n}\r\n```","```\r\nUndertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\r\n  .setHandler(new HttpHandler() {\r\n      @Override\r\n      public void handleRequest(HttpServerExchange exchange) \r\n        throws Exception {\r\n          exchange.getResponseHeaders().put(\r\n            Headers.CONTENT_TYPE, \"text/plain\");\r\n          exchange.getResponseSender().send(\"Hello Baeldung\");\r\n      }\r\n  }).build();\r\n```","```\r\nexchange.getResponseSender()\r\n  .send(\"Hello Baeldung\");\r\n```","```\r\npublic class CustomIdentityManager implements IdentityManager {\r\n    private Map<String, char[]> users;\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public Account verify(Account account) {\r\n        return account;\r\n    }\r\n\r\n    @Override\r\n    public Account verify(Credential credential) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Account verify(String id, Credential credential) {\r\n        Account account = getAccount(id);\r\n        if (account != null && verifyCredential(account, credential)) {\r\n            return account;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nprivate static HttpHandler addSecurity(\r\n  HttpHandler toWrap, \r\n  IdentityManager identityManager) {\r\n\r\n    HttpHandler handler = toWrap;\r\n    handler = new AuthenticationCallHandler(handler);\r\n    handler = new AuthenticationConstraintHandler(handler);\r\n    List<AuthenticationMechanism> mechanisms = Collections.singletonList(\r\n      new BasicAuthenticationMechanism(\"Baeldung_Realm\"));\r\n    handler = new AuthenticationMechanismsHandler(handler, mechanisms);\r\n    handler = new SecurityInitialHandler(\r\n      AuthenticationMode.PRO_ACTIVE, identityManager, handler);\r\n    return handler;\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    Map<String, char[]> users = new HashMap<>(2);\r\n    users.put(\"root\", \"password\".toCharArray());\r\n    users.put(\"admin\", \"password\".toCharArray());\r\n\r\n    IdentityManager idm = new CustomIdentityManager(users);\r\n\r\n    Undertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\r\n      .setHandler(addSecurity(e -> setExchange(e), idm)).build();\r\n\r\n    server.start();\r\n}\r\n\r\nprivate static void setExchange(HttpServerExchange exchange) {\r\n    SecurityContext context = exchange.getSecurityContext();\r\n    exchange.getResponseSender().send(\"Hello \" + \r\n      context.getAuthenticatedAccount().getPrincipal().getName(),\r\n      IoCallback.END_EXCHANGE);\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    Undertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\r\n      .setHandler(path().addPrefixPath(\"/baeldungApp\", websocket(\r\n        (exchange, channel) -> {\r\n          channel.getReceiveSetter().set(getListener());\r\n          channel.resumeReceives();\r\n      })).addPrefixPath(\"/\", resource(new ClassPathResourceManager(\r\n        SocketServer.class.getClassLoader(),\r\n        SocketServer.class.getPackage())).addWelcomeFiles(\"index.html\")))\r\n        .build();\r\n\r\n    server.start();\r\n}\r\n\r\nprivate static AbstractReceiveListener getListener() {\r\n    return new AbstractReceiveListener() {\r\n        @Override\r\n        protected void onFullTextMessage(WebSocketChannel channel, \r\n          BufferedTextMessage message) {\r\n            String messageData = message.getData();\r\n            for (WebSocketChannel session : channel.getPeerConnections()) {\r\n                WebSockets.sendText(messageData, session, null);\r\n            }\r\n        }\r\n    };\r\n}\r\n```","```\r\npublic static void main( String[] args ) {\r\n    Undertow server = Undertow.builder().addHttpListener(8080, \"localhost\")\r\n        .setHandler(resource(new PathResourceManager(\r\n          Paths.get(System.getProperty(\"user.home\")), 100 ))\r\n        .setDirectoryListingEnabled( true ))\r\n        .build();\r\n    server.start();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-undertow</artifactId>\r\n    <version>1.5.6.RELEASE</version>\r\n</dependency>\r\n```"]