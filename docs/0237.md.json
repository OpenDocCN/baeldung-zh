["```\r\nhttp://localhost:8080/swagger-ui.html\r\n```","```\r\n<dependency>\r\n     <groupId>org.springdoc</groupId>\r\n     <artifactId>springdoc-openapi-ui</artifactId>\r\n     <version>1.6.13</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springdoc</groupId>\r\n    <artifactId>springdoc-openapi-security</artifactId>\r\n    <version>1.6.13</version>\r\n</dependency>\r\n```","```\r\n@RestController\r\n@RequestMapping(value = \"foos\", produces = MediaType.APPLICATION_JSON_VALUE)\r\n@OpenAPIDefinition(info = @Info(title = \"Foos API\", version = \"v1\"))\r\npublic class FooController {\r\n\r\n    @GetMapping(value = \"/{id}\")\r\n    public FooDTO findById(@PathVariable(\"id\") final Long id) {\r\n        return new FooDTO(randomAlphabetic(STRING_LENGTH));\r\n    }\r\n\r\n    @GetMapping\r\n    public List<FooDTO> findAll() {\r\n        return Lists.newArrayList(new FooDTO(randomAlphabetic(STRING_LENGTH)),\r\n          new FooDTO(randomAlphabetic(STRING_LENGTH)), new FooDTO(randomAlphabetic(STRING_LENGTH)));\r\n    }\r\n\r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public FooDTO create(@RequestBody final FooDTO fooDTO) {\r\n        return fooDTO;\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\npublic void configureGlobal(AuthenticationManagerBuilder auth, PasswordEncoder passwordEncoder) throws Exception {\r\n    auth.inMemoryAuthentication()\r\n      .withUser(\"user\")\r\n      .password(passwordEncoder.encode(\"password\"))\r\n      .roles(\"USER\");\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n      .csrf().disable()\r\n      .authorizeRequests()\r\n      .antMatchers(\"/v3/api-docs/**\",\r\n        \"/swagger-ui/**\",\r\n        \"/swagger-ui.html\").permitAll()\r\n      .anyRequest().authenticated()\r\n      .and()\r\n      .formLogin()\r\n      .defaultSuccessUrl(\"/foos\");\r\n    return http.build();\r\n}\r\n```","```\r\nspringdoc.show-login-endpoint=true\r\n```","```\r\n@RestController\r\npublic class LogoutController {\r\n\r\n    @PostMapping(\"logout\")\r\n    public void logout() {}\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n      .csrf().disable()\r\n      .authorizeRequests()\r\n      .antMatchers(\"/v3/api-docs/**\",\r\n        \"/swagger-ui/**\",\r\n        \"/swagger-ui.html\").permitAll()\r\n      .anyRequest().authenticated()\r\n      .and()\r\n      .httpBasic();\r\n    return http.build();\r\n}\r\n```","```\r\n@Configuration\r\n@SecurityScheme(\r\n  type = SecuritySchemeType.HTTP,\r\n  name = \"basicAuth\",\r\n  scheme = \"basic\")\r\npublic class SpringdocConfig {}\r\n```","```\r\n@RestController\r\n@OpenAPIDefinition(info = @Info(title = \"Foos API\", version = \"v1\"))\r\n@SecurityRequirement(name = \"basicAuth\")\r\n@RequestMapping(value = \"foos\", produces = MediaType.APPLICATION_JSON_VALUE)\r\npublic class FooController {\r\n    ...\r\n}\r\n```"]