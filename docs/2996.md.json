["```\r\npublic class User {\r\n    private int id;\r\n    private String name;\r\n\r\n    //getters and setters\r\n} \r\n```","```\r\npublic class User implements Serializable {\r\n    //fields and methods\r\n}\r\n```","```\r\nprivate static final long serialVersionUID = 1L;\r\n```","```\r\nUser user = new User();\r\nuser.setId(1);\r\nuser.setName(\"Mark\");\r\n```","```\r\nString filePath = \"src/test/resources/protocols/user.txt\"; \r\n```","```\r\nFileOutputStream fileOutputStream = new FileOutputStream(filePath);\r\nObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);\r\nobjectOutputStream.writeObject(user);\r\n```","```\r\nFileInputStream fileInputStream = new FileInputStream(filePath);\r\nObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);\r\nUser deserializedUser = (User) objectInputStream.readObject();\r\n```","```\r\nassertEquals(1, deserializedUser.getId());\r\nassertEquals(\"Mark\", deserializedUser.getName());\r\n```","```\r\npublic void writeExternal(ObjectOutput out) throws IOException;\r\n\r\npublic void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.code.gson</groupId>\r\n    <artifactId>gson</artifactId>\r\n    <version>2.8.7</version>\r\n</dependency>\r\n```","```\r\nUser user = new User();\r\nuser.setId(1);\r\nuser.setName(\"Mark\"); \r\n```","```\r\nString filePath = \"src/test/resources/protocols/gson_user.json\";\r\n```","```\r\nWriter writer = new FileWriter(filePath);\r\nGson gson = new GsonBuilder().setPrettyPrinting().create();\r\ngson.toJson(user, writer); \r\n```","```\r\nGson gson = new GsonBuilder().setPrettyPrinting().create();\r\nUser deserializedUser = gson.fromJson(new FileReader(filePath), User.class);\r\n```","```\r\nassertEquals(1, deserializedUser.getId());\r\nassertEquals(\"Mark\", deserializedUser.getName()); \r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-core</artifactId>\r\n    <version>2.12.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-annotations</artifactId>\r\n    <version>2.12.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n     <version>2.12.4</version>\r\n</dependency> \r\n```","```\r\nUser user = new User();\r\nuser.setId(1);\r\nuser.setName(\"Mark Jonson\"); \r\n```","```\r\nString filePath = \"src/test/resources/protocols/jackson_user.json\";\r\n```","```\r\nFile file = new File(filePath);\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.writeValue(file, user); \r\n```","```\r\nUser deserializedUser = mapper.readValue(new File(filePath), User.class);\r\n```","```\r\nassertEquals(1, deserializedUser.getId());\r\nassertEquals(\"Mark Jonson\", deserializedUser.getName()); \r\n```","```\r\n<dependency>\r\n    <groupId>com.esotericsoftware.yamlbeans</groupId>\r\n    <artifactId>yamlbeans</artifactId>\r\n    <version>1.15</version>\r\n</dependency>\r\n```","```\r\nprivate Map<String, User> populateUserMap() {\r\n    User user1 = new User();\r\n    user1.setId(1);\r\n    user1.setName(\"Mark Jonson\");\r\n    //.. more user objects\r\n\r\n    Map<String, User> users = new LinkedHashMap<>();\r\n    users.put(\"User1\", user1);\r\n    // add more user objects to map\r\n\r\n    return users;\r\n}\r\n```","```\r\nString filePath = \"src/test/resources/protocols/yamlbeans_users.yaml\";\r\n```","```\r\nYamlWriter writer = new YamlWriter(new FileWriter(filePath));\r\nwriter.write(populateUserMap());\r\nwriter.close(); \r\n```","```\r\nYamlReader reader = new YamlReader(new FileReader(filePath));\r\nObject object = reader.read();\r\nassertTrue(object instanceof Map); \r\n```","```\r\nMap<String, User> deserializedUsers = (Map<String, User>) object;\r\nassertEquals(4, deserializedUsers.size());\r\nassertEquals(\"Mark Jonson\", (deserializedUsers.get(\"User1\").getName()));\r\nassertEquals(1, (deserializedUsers.get(\"User1\").getId()));\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.thrift</groupId>\r\n    <artifactId>libthrift</artifactId>\r\n    <version>0.14.2</version>\r\n</dependency>\r\n```","```\r\nUser user = new User();\r\nuser.setId(2);\r\nuser.setName(\"Greg\");\r\n```","```\r\nTMemoryBuffer trans = new TMemoryBuffer(4096);\r\nTProtocol proto = new TBinaryProtocol(trans);\r\n```","```\r\nproto.writeI32(user.getId());\r\nproto.writeString(user.getName());\r\n```","```\r\nint userId = proto.readI32();\r\nString userName = proto.readString();\r\n```","```\r\nassertEquals(2, userId);\r\nassertEquals(\"Greg\", userName);\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.protobuf</groupId>\r\n    <artifactId>protobuf-java</artifactId>\r\n    <version>3.17.3</version>\r\n</dependency>\r\n```","```\r\nsyntax = \"proto3\";\r\npackage protobuf;\r\noption java_package = \"com.baeldung.serialization.protocols\";\r\noption java_outer_classname = \"UserProtos\";\r\nmessage User {\r\n    int32 id = 1;\r\n    string name = 2;\r\n}\r\n```","```\r\nprotoc -I=. --java_out=. user.proto\r\n```","```\r\nUserProtos.User user = UserProtos.User.newBuilder().setId(1234).setName(\"John Doe\").build();\r\n```","```\r\nString filePath = \"src/test/resources/protocols/usersproto\";\r\n```","```\r\nFileOutputStream fos = new FileOutputStream(filePath);\r\nuser.writeTo(fos);\r\n```","```\r\nUserProtos.User deserializedUser = UserProtos.User.newBuilder().mergeFrom(new FileInputStream(filePath)).build(); \r\n```","```\r\nassertEquals(1234, deserializedUser.getId());\r\nassertEquals(\"John Doe\", deserializedUser.getName());\r\n```"]