["```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    private Long id;\r\n    private String name;\r\n\r\n    private String[] roles;\r\n\r\n    //getters and setters \r\n} \r\n```","```\r\npublic class CustomStringArrayType implements UserType {\r\n    @Override\r\n    public int[] sqlTypes() {\r\n        return new int[]{Types.ARRAY};\r\n    }\r\n\r\n    @Override\r\n    public Class returnedClass() {\r\n        return String[].class;\r\n    }\r\n\r\n    @Override\r\n    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)\r\n      throws HibernateException, SQLException {\r\n        Array array = rs.getArray(names[0]);\r\n        return array != null ? array.getArray() : null;\r\n    }\r\n\r\n    @Override\r\n    public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)\r\n      throws HibernateException, SQLException {\r\n        if (value != null && st != null) {\r\n            Array array = session.connection().createArrayOf(\"text\", (String[])value);\r\n            st.setArray(index, array);\r\n        } else {\r\n            st.setNull(index, sqlTypes()[0]);\r\n        }\r\n    }\r\n    //implement equals, hashCode, and other methods \r\n} \r\n```","```\r\n@Entity\r\npublic class User {\r\n    //...\r\n\r\n    @Column(columnDefinition = \"text[]\")\r\n    @Type(type = \"com.baeldung.hibernate.arraymapping.CustomStringArrayType\")\r\n    private String[] roles;\r\n\r\n   //getters and setters \r\n} \r\n```","```\r\n@Test\r\npublic void givenArrayMapping_whenArraysAreInserted_thenPersistInDB() \r\n  throws HibernateException, IOException {\r\n    transaction = session.beginTransaction();\r\n\r\n    User user = new User();\r\n    user.setId(2L);\r\n    user.setName(\"smith\");\r\n\r\n    String[] roles = {\"admin\", \"employee\"};\r\n    user.setRoles(roles);\r\n\r\n    session.persist(user);\r\n    session.flush();\r\n    session.clear();\r\n\r\n    transaction.commit();\r\n\r\n    User userDBObj = session.find(User.class, 2L);\r\n\r\n    assertEquals(\"smith\", userDBObj.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenArrayMapping_whenQueried_thenReturnArraysFromDB() \r\n  throws HibernateException, IOException {\r\n    User user = session.find(User.class, 2L);\r\n\r\n    assertEquals(\"smith\", user.getName());\r\n    assertEquals(\"admin\", user.getRoles()[0]);\r\n    assertEquals(\"employee\", user.getRoles()[1]);\r\n}\r\n```","```\r\npublic class CustomIntegerArrayType implements UserType {\r\n    @Override\r\n    public int[] sqlTypes() {\r\n        return new int[]{Types.ARRAY};\r\n    }\r\n\r\n    @Override\r\n    public Class returnedClass() {\r\n        return Integer[].class;\r\n    }\r\n\r\n    @Override\r\n    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)\r\n      throws HibernateException, SQLException {\r\n        Array array = rs.getArray(names[0]);\r\n        return array != null ? array.getArray() : null;\r\n    }\r\n\r\n    @Override\r\n    public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session)\r\n      throws HibernateException, SQLException {\r\n        if (value != null && st != null) {\r\n            Array array = session.connection().createArrayOf(\"int\", (Integer[])value);\r\n            st.setArray(index, array);\r\n        } else {\r\n            st.setNull(index, sqlTypes()[0]);\r\n        }\r\n    }\r\n\r\n    //implement equals, hashCode, and other methods \r\n} \r\n```","```\r\n@Entity\r\npublic class User {\r\n    //...\r\n\r\n    @Column(columnDefinition = \"int[]\")\r\n    @Type(type = \"com.baeldung.hibernate.arraymapping.CustomIntegerArrayType\")\r\n    private Integer[] locations;\r\n\r\n    //getters and setters\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>com.vladmihalcea</groupId>\r\n    <artifactId>hibernate-types-52</artifactId>\r\n    <version>2.10.4</version>\r\n</dependency>\r\n```","```\r\n@TypeDefs({\r\n    @TypeDef(\r\n        name = \"string-array\",\r\n        typeClass = StringArrayType.class\r\n    )\r\n})\r\n@Entity\r\npublic class User {\r\n    //...\r\n    @Type(type = \"string-array\")\r\n    @Column(\r\n        name = \"phone_numbers\",\r\n        columnDefinition = \"text[]\"\r\n    )\r\n    private String[] phoneNumbers;\r\n\r\n    //getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenArrayMapping_whenArraysAreInserted_thenPersistInDB() \r\n  throws HibernateException, IOException {\r\n    transaction = session.beginTransaction();\r\n\r\n    User user = new User();\r\n    user.setId(2L);\r\n    user.setName(\"smith\");\r\n\r\n    String[] roles = {\"admin\", \"employee\"};\r\n    user.setRoles(roles);\r\n\r\n    String[] phoneNumbers = {\"7000000000\", \"8000000000\"};\r\n    user.setPhoneNumbers(phoneNumbers);\r\n\r\n    session.persist(user);\r\n    session.flush();\r\n    session.clear();\r\n\r\n    transaction.commit();\r\n}\r\n```","```\r\n@Test\r\npublic void givenArrayMapping_whenQueried_thenReturnArraysFromDB() \r\n  throws HibernateException, IOException {\r\n    User user = session.find(User.class, 2L);\r\n\r\n    assertEquals(\"smith\", user.getName());\r\n    assertEquals(\"admin\", user.getRoles()[0]);\r\n    assertEquals(\"employee\", user.getRoles()[1]);\r\n    assertEquals(\"7000000000\", user.getPhoneNumbers()[0]);\r\n    assertEquals(\"8000000000\", user.getPhoneNumbers()[1]);\r\n}\r\n```"]