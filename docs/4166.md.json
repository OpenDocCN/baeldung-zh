["```\r\n% redis-cli -h 127.0.0.1 -p 6379\r\n127.0.0.1:6379> RPUSH balls \"cricket_160\"\r\n(integer) 1\r\n127.0.0.1:6379> RPUSH balls \"football_450\"\r\n(integer) 2\r\n127.0.0.1:6379> RPUSH balls \"volleyball_270\"\r\n(integer) 3\r\n```","```\r\n127.0.0.1:6379> llen balls\r\n(integer) 3\r\n```","```\r\n127.0.0.1:6379> lrange balls 0 2\r\n1) \"cricket_160\"\r\n2) \"football_450\"\r\n3) \"volleyball_270\"\r\n```","```\r\n127.0.0.1:6379> sadd balls \"cricket_160\" \"football_450\" \"volleyball_270\" \"cricket_160\"\r\n(integer) 3\r\n```","```\r\n127.0.0.1:6379> smembers balls\r\n1) \"volleyball_270\"\r\n2) \"cricket_160\"\r\n3) \"football_450\"\r\n```","```\r\n127.0.0.1:6379> hmset balls cricket 160 football 450 volleyball 270\r\nOK\r\n```","```\r\n127.0.0.1:6379> hgetall balls\r\n1) \"cricket\"\r\n2) \"160\"\r\n3) \"football\"\r\n4) \"450\"\r\n5) \"volleyball\"\r\n6) \"270\"\r\n```","```\r\n127.0.0.1:6379> zadd balls 160 cricket 450 football 270 volleyball\r\n(integer) 3\r\n```","```\r\n127.0.0.1:6379> zcard balls\r\n(integer) 3\r\n127.0.0.1:6379> zrange balls 0 2\r\n1) \"cricket\"\r\n2) \"volleyball\"\r\n3) \"football\"\r\n```","```\r\n127.0.0.1:6379> mset balls:cricket 160 balls:football 450 balls:volleyball 270\r\nOK\r\n```","```\r\n127.0.0.1:6379> keys balls*\r\n1) \"balls:cricket\"\r\n2) \"balls:volleyball\"\r\n3) \"balls:football\"\r\n```","```\r\n<dependency>\r\n    <groupId>redis.clients</groupId>\r\n    <artifactId>jedis</artifactId>\r\n    <version>3.2.0</version>\r\n</dependency>\r\n```","```\r\nprivate static JedisPool jedisPool;\r\n\r\nprivate RedisClient(String ip, int port) {\r\n    try {\r\n        if (jedisPool == null) {\r\n            jedisPool = new JedisPool(new URI(\"http://\" + ip + \":\" + port));\r\n        }\r\n    } catch (URISyntaxException e) {\r\n        log.error(\"Malformed server address\", e);\r\n    }\r\n}\r\n```","```\r\nprivate static volatile RedisClient instance = null;\r\n\r\npublic static RedisClient getInstance(String ip, final int port) {\r\n    if (instance == null) {\r\n        synchronized (RedisClient.class) {\r\n            if (instance == null) {\r\n                instance = new RedisClient(ip, port);\r\n            }\r\n        }\r\n    }\r\n    return instance;\r\n}\r\n```","```\r\npublic List lrange(final String key, final long start, final long stop) {\r\n    try (Jedis jedis = jedisPool.getResource()) {\r\n        return jedis.lrange(key, start, stop);\r\n    } catch (Exception ex) {\r\n        log.error(\"Exception caught in lrange\", ex);\r\n    }\r\n    return new LinkedList();\r\n}\r\n```","```\r\n127.0.0.1:6379> mset balls:cricket 160 balls:football 450 balls:volleyball 270\r\nOK\r\n127.0.0.1:6379> SCAN 0 MATCH ball* COUNT 1\r\n1) \"2\"\r\n2) 1) \"balls:cricket\"\r\n127.0.0.1:6379> SCAN 2 MATCH ball* COUNT 1\r\n1) \"3\"\r\n2) 1) \"balls:volleyball\"\r\n127.0.0.1:6379> SCAN 3 MATCH ball* COUNT 1\r\n1) \"0\"\r\n2) 1) \"balls:football\"\r\n```","```\r\npublic ScanResult<String> scan(final String cursor, final ScanParams params);\r\npublic ScanResult<String> sscan(final String key, final String cursor, final ScanParams params);\r\npublic ScanResult<Map.Entry<String, String>> hscan(final String key, final String cursor,\r\n  final ScanParams params);\r\npublic ScanResult<Tuple> zscan(final String key, final String cursor, final ScanParams params);\r\n```","```\r\npublic ScanParams match(final String pattern);\r\npublic ScanParams count(final Integer count);\r\n```","```\r\npublic interface ScanStrategy<T> {\r\n    ScanResult<T> scan(Jedis jedis, String cursor, ScanParams scanParams);\r\n}\r\n```","```\r\npublic class Scan implements ScanStrategy<String> {\r\n    public ScanResult<String> scan(Jedis jedis, String cursor, ScanParams scanParams) {\r\n        return jedis.scan(cursor, scanParams);\r\n    }\r\n}\r\n```","```\r\npublic class Hscan implements ScanStrategy<Map.Entry<String, String>> {\r\n\r\n    private String key;\r\n\r\n    @Override\r\n    public ScanResult<Entry<String, String>> scan(Jedis jedis, String cursor, ScanParams scanParams) {\r\n        return jedis.hscan(key, cursor, scanParams);\r\n    }\r\n}\r\n```","```\r\npublic class Sscan implements ScanStrategy<String> {\r\n\r\n    private String key;\r\n\r\n    public ScanResult<String> scan(Jedis jedis, String cursor, ScanParams scanParams) {\r\n        return jedis.sscan(key, cursor, scanParams);\r\n    }\r\n}\r\n\r\npublic class Zscan implements ScanStrategy<Tuple> {\r\n\r\n    private String key;\r\n\r\n    @Override\r\n    public ScanResult<Tuple> scan(Jedis jedis, String cursor, ScanParams scanParams) {\r\n        return jedis.zscan(key, cursor, scanParams);\r\n    }\r\n}\r\n```","```\r\nprivate final JedisPool jedisPool;\r\nprivate ScanParams scanParams;\r\nprivate String cursor;\r\nprivate ScanStrategy<T> strategy;\r\n```","```\r\npublic class RedisIterator<T> implements Iterator<List<T>> {\r\n}\r\n```","```\r\n@Override\r\npublic boolean hasNext() {\r\n    return !\"0\".equals(cursor);\r\n}\r\n```","```\r\n@Override\r\npublic List next() {\r\n    if (cursor == null) {\r\n        cursor = \"0\";\r\n    }\r\n    try (Jedis jedis = jedisPool.getResource()) {\r\n        ScanResult scanResult = strategy.scan(jedis, cursor, scanParams);\r\n        cursor = scanResult.getCursor();\r\n        return scanResult.getResult();\r\n    } catch (Exception ex) {\r\n        log.error(\"Exception caught in next()\", ex);\r\n    }\r\n    return new LinkedList();\r\n}\r\n```","```\r\npublic RedisIterator iterator(int initialScanCount, String pattern, ScanStrategy strategy) {\r\n    return new RedisIterator(jedisPool, initialScanCount, pattern, strategy);\r\n}\r\n```","```\r\n@Test\r\npublic void testHscanStrategy() {\r\n    HashMap<String, String> hash = new HashMap<String, String>();\r\n    hash.put(\"cricket\", \"160\");\r\n    hash.put(\"football\", \"450\");\r\n    hash.put(\"volleyball\", \"270\");\r\n    redisClient.hmset(\"balls\", hash);\r\n\r\n    Hscan scanStrategy = new Hscan(\"balls\");\r\n    int iterationCount = 2;\r\n    RedisIterator iterator = redisClient.iterator(iterationCount, \"*\", scanStrategy);\r\n    List<Map.Entry<String, String>> results = new LinkedList<Map.Entry<String, String>>();\r\n    while (iterator.hasNext()) {\r\n        results.addAll(iterator.next());\r\n    }\r\n    Assert.assertEquals(hash.size(), results.size());\r\n}\r\n```"]