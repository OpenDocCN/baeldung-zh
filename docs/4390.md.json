["```\r\n<dependency>\r\n  <groupId>org.apache.commons</groupId>\r\n  <artifactId>commons-math3</artifactId>\r\n  <version>3.6.1</version>\r\n</dependency> \r\n```","```\r\ndouble[] values = new double[] {65, 51 , 16, 11 , 6519, 191 ,0 , 98, 19854, 1, 32};\r\nDescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();\r\nfor (double v : values) {\r\n    descriptiveStatistics.addValue(v);\r\n}\r\n\r\ndouble mean = descriptiveStatistics.getMean();\r\ndouble median = descriptiveStatistics.getPercentile(50);\r\ndouble standardDeviation = descriptiveStatistics.getStandardDeviation(); \r\n```","```\r\nNormalDistribution normalDistribution = new NormalDistribution(10, 3);\r\ndouble randomValue = normalDistribution.sample(); \r\n```","```\r\nUnivariateFunction function = v -> Math.pow(v, 2) - 2;\r\nUnivariateSolver solver = new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-8, 5);\r\ndouble c = solver.solve(100, function, -10.0, 10.0, 0); \r\n```","```\r\nUnivariateFunction function = v -> v;\r\nUnivariateIntegrator integrator = new SimpsonIntegrator(1.0e-12, 1.0e-8, 1, 32);\r\ndouble i = integrator.integrate(100, function, 0, 10); \r\n```","```\r\nRealMatrix a = new Array2DRowRealMatrix(\r\n  new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },\r\n  false);\r\nRealVector b = new ArrayRealVector(n\r\n  ew double[] { 1, -2, 1 }, \r\n  false);\r\n\r\nDecompositionSolver solver = new LUDecomposition(a).getSolver();\r\n\r\nRealVector solution = solver.solve(b); \r\n```","```\r\nLine l1 = new Line(new Vector2D(0, 0), new Vector2D(1, 1), 0);\r\nLine l2 = new Line(new Vector2D(0, 1), new Vector2D(1, 1.5), 0);\r\n\r\nVector2D intersection = l1.intersection(l2); \r\n```","```\r\nlong factorial = CombinatorialUtils.factorial(10); \r\n```","```\r\nFraction lhs = new Fraction(1, 3);\r\nFraction rhs = new Fraction(2, 5);\r\nFraction sum = lhs.add(rhs);\r\n\r\nString str = new FractionFormat().format(sum); \r\n```","```\r\nComplex first = new Complex(1.0, 3.0);\r\nComplex second = new Complex(2.0, 5.0);\r\n\r\nComplex power = first.pow(second); \r\n```"]