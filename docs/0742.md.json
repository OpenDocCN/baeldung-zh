["```\r\npublic class ClassExample {\r\n    class NestedClass {\r\n    }\r\n}\r\n```","```\r\npublic interface InterfaceExample {\r\n} \r\n```","```\r\npublic class AccessingAllClassesInPackage {\r\n\r\n    public Set<Class> findAllClassesUsingClassLoader(String packageName) {\r\n        InputStream stream = ClassLoader.getSystemClassLoader()\r\n          .getResourceAsStream(packageName.replaceAll(\"[.]\", \"/\"));\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));\r\n        return reader.lines()\r\n          .filter(line -> line.endsWith(\".class\"))\r\n          .map(line -> getClass(line, packageName))\r\n          .collect(Collectors.toSet());\r\n    }\r\n\r\n    private Class getClass(String className, String packageName) {\r\n        try {\r\n            return Class.forName(packageName + \".\"\r\n              + className.substring(0, className.lastIndexOf('.')));\r\n        } catch (ClassNotFoundException e) {\r\n            // handle the exception\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void when_findAllClassesUsingClassLoader_thenSuccess() {\r\n    AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\r\n\r\n    Set<Class> classes = instance.findAllClassesUsingClassLoader(\r\n      \"com.baeldung.reflection.access.packages.search\");\r\n\r\n    Assertions.assertEquals(3, classes.size());\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.reflections</groupId>\r\n    <artifactId>reflections</artifactId> \r\n    <version>0.9.12</version>\r\n</dependency>\r\n```","```\r\npublic Set<Class> findAllClassesUsingReflectionsLibrary(String packageName) {\r\n    Reflections reflections = new Reflections(packageName, new SubTypesScanner(false));\r\n    return reflections.getSubTypesOf(Object.class)\r\n      .stream()\r\n      .collect(Collectors.toSet());\r\n}\r\n```","```\r\n@Test\r\npublic void when_findAllClassesUsingReflectionsLibrary_thenSuccess() {\r\n    AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\r\n\r\n    Set<Class> classes = instance.findAllClassesUsingReflectionsLibrary(\r\n      \"com.baeldung.reflection.access.packages.search\");\r\n\r\n    Assertions.assertEquals(3, classes.size());\r\n}\r\n```","```\r\n<dependency>\r\n      <groupId>com.google.guava</groupId>\r\n      <artifactId>guava</artifactId>\r\n      <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic Set<Class> findAllClassesUsingGoogleGuice(String packageName) throws IOException {\r\n    return ClassPath.from(ClassLoader.getSystemClassLoader())\r\n      .getAllClasses()\r\n      .stream()\r\n      .filter(clazz -> clazz.getPackageName()\r\n        .equalsIgnoreCase(packageName))\r\n      .map(clazz -> clazz.load())\r\n      .collect(Collectors.toSet());\r\n}\r\n```","```\r\n@Test\r\npublic void when_findAllClassesUsingGoogleGuice_thenSuccess() throws IOException {\r\n    AccessingAllClassesInPackage instance = new AccessingAllClassesInPackage();\r\n\r\n    Set<Class> classes = instance.findAllClassesUsingGoogleGuice(\r\n      \"com.baeldung.reflection.access.packages.search\");\r\n\r\n    Assertions.assertEquals(3, classes.size());\r\n}\r\n```","```\r\nmodule my.module {\r\n    exports com.baeldung.reflection.access.packages.search;\r\n}\r\n```","```\r\nmodule my.module {\r\n    opens com.baeldung.reflection.access.packages.search;\r\n}\r\n```","```\r\nopen module my.module{\r\n}\r\n```"]