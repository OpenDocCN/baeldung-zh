["```\r\nDataSetIterator train = new RecordReaderDataSetIterator(...);\r\nDataSetIterator test = new RecordReaderDataSetIterator(...);\r\n```","```\r\n{0.1, 0.0, 0.3, 0.2, 0.1, 0.1, 0.0, 0.1, 0.1, 0.0}\r\n```","```\r\nMultiLayerNetwork model = new MultiLayerNetwork(config);\r\n```","```\r\nConvolutionLayer layer1 = new ConvolutionLayer\r\n    .Builder(5, 5).nIn(channels)\r\n    .stride(1, 1)\r\n    .nOut(20)\r\n    .activation(Activation.IDENTITY)\r\n    .build();\r\nSubsamplingLayer layer2 = new SubsamplingLayer\r\n    .Builder(SubsamplingLayer.PoolingType.MAX)\r\n    .kernelSize(2, 2)\r\n    .stride(2, 2)\r\n    .build();\r\n```","```\r\nMultiLayerConfiguration config = new NeuralNetConfiguration.Builder()\r\n    // preparation steps\r\n    .list()\r\n    .layer(0, layer1)\r\n    .layer(1, layer2)\r\n    // other layers and final steps\r\n    .build();\r\n```","```\r\nmodel.fit(train); \r\n```","```\r\nEvaluation eval = model.evaluate(test);\r\nlogger.info(eval.stats());\r\n```","```\r\nfor (int i = 0; i < epochs; i++) {\r\n    model.fit(train);\r\n    train.reset();\r\n    test.reset();\r\n} \r\n```","```\r\nINDArray image = new NativeImageLoader(height, width, channels).asMatrix(file);\r\nnew ImagePreProcessingScaler(0, 1).transform(image);\r\n```","```\r\nINDArray output = model.output(image);\r\n```"]