["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.1</version>\r\n</dependency>\r\n```","```\r\npublic class MapUtilsTest {\r\n    private String[][] color2DArray = new String[][] {\r\n        {\"RED\", \"#FF0000\"},\r\n        {\"GREEN\", \"#00FF00\"},\r\n        {\"BLUE\", \"#0000FF\"}\r\n    };\r\n    private String[] color1DArray = new String[] {\r\n        \"RED\", \"#FF0000\",\r\n        \"GREEN\", \"#00FF00\",\r\n        \"BLUE\", \"#0000FF\"\r\n    };\r\n    private Map<String, String> colorMap;\r\n\r\n    //...\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateMapFrom2DArray_theMapIsCreated() {\r\n    this.colorMap = MapUtils.putAll(\r\n      new HashMap<>(), this.color2DArray);\r\n\r\n    assertThat(\r\n      this.colorMap, \r\n      is(aMapWithSize(this.color2DArray.length)));\r\n\r\n    assertThat(this.colorMap, hasEntry(\"RED\", \"#FF0000\"));\r\n    assertThat(this.colorMap, hasEntry(\"GREEN\", \"#00FF00\"));\r\n    assertThat(this.colorMap, hasEntry(\"BLUE\", \"#0000FF\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateMapFrom1DArray_theMapIsCreated() {\r\n    this.colorMap = MapUtils.putAll(\r\n      new HashMap<>(), this.color1DArray);\r\n\r\n    assertThat(\r\n      this.colorMap, \r\n      is(aMapWithSize(this.color1DArray.length / 2)));\r\n\r\n    assertThat(this.colorMap, hasEntry(\"RED\", \"#FF0000\"));\r\n    assertThat(this.colorMap, hasEntry(\"GREEN\", \"#00FF00\"));\r\n    assertThat(this.colorMap, hasEntry(\"BLUE\", \"#0000FF\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenVerbosePrintMap_thenMustPrintFormattedMap() {\r\n    MapUtils.verbosePrint(System.out, \"Optional Label\", this.colorMap);\r\n}\r\n```","```\r\nOptional Label = \r\n{\r\n    RED = #FF0000\r\n    BLUE = #0000FF\r\n    GREEN = #00FF00\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetKeyNotPresent_thenMustReturnDefaultValue() {\r\n    String defaultColorStr = \"COLOR_NOT_FOUND\";\r\n    String color = MapUtils\r\n      .getString(this.colorMap, \"BLACK\", defaultColorStr);\r\n\r\n    assertEquals(color, defaultColorStr);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetOnNullMap_thenMustReturnDefaultValue() {\r\n    String defaultColorStr = \"COLOR_NOT_FOUND\";\r\n    String color = MapUtils.getString(null, \"RED\", defaultColorStr);\r\n\r\n    assertEquals(color, defaultColorStr);\r\n}\r\n```","```\r\n@Test\r\npublic void whenInvertMap_thenMustReturnInvertedMap() {\r\n    Map<String, String> invColorMap = MapUtils.invertMap(this.colorMap);\r\n\r\n    int size = invColorMap.size();\r\n    Assertions.assertThat(invColorMap)\r\n      .hasSameSizeAs(colorMap)\r\n      .containsKeys(this.colorMap.values().toArray(new String[] {}))\r\n      .containsValues(this.colorMap.keySet().toArray(new String[] {}));\r\n}\r\n```","```\r\n{\r\n    #00FF00 = GREEN\r\n    #FF0000 = RED\r\n    #0000FF = BLUE\r\n}\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void whenCreateFixedSizedMapAndAdd_thenMustThrowException() {\r\n    Map<String, String> rgbMap = MapUtils\r\n      .fixedSizeMap(MapUtils.putAll(new HashMap<>(), this.color1DArray));\r\n\r\n    rgbMap.put(\"ORANGE\", \"#FFA500\");\r\n}\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void whenAddDuplicate_thenThrowException() {\r\n    Map<String, String> uniqValuesMap \r\n      = MapUtils.predicatedMap(this.colorMap, null, \r\n        PredicateUtils.uniquePredicate());\r\n\r\n    uniqValuesMap.put(\"NEW_RED\", \"#FF0000\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateLazyMap_theMapIsCreated() {\r\n    Map<Integer, String> intStrMap = MapUtils.lazyMap(\r\n      new HashMap<>(),\r\n      TransformerUtils.stringValueTransformer());\r\n\r\n    assertThat(intStrMap, is(anEmptyMap()));\r\n\r\n    intStrMap.get(1);\r\n    intStrMap.get(2);\r\n    intStrMap.get(3);\r\n\r\n    assertThat(intStrMap, is(aMapWithSize(3)));\r\n}\r\n```"]