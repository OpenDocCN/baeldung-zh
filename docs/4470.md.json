["```\r\npublic interface Discounter {\r\n    BigDecimal applyDiscount(BigDecimal amount);\r\n} \r\n```","```\r\npublic static class EasterDiscounter implements Discounter {\r\n    @Override\r\n    public BigDecimal applyDiscount(final BigDecimal amount) {\r\n        return amount.multiply(BigDecimal.valueOf(0.5));\r\n    }\r\n}\r\n\r\npublic static class ChristmasDiscounter implements Discounter {\r\n   @Override\r\n   public BigDecimal applyDiscount(final BigDecimal amount) {\r\n       return amount.multiply(BigDecimal.valueOf(0.9));\r\n   }\r\n} \r\n```","```\r\nDiscounter easterDiscounter = new EasterDiscounter();\r\n\r\nBigDecimal discountedValue = easterDiscounter\r\n  .applyDiscount(BigDecimal.valueOf(100));\r\n\r\nassertThat(discountedValue)\r\n  .isEqualByComparingTo(BigDecimal.valueOf(50));\r\n```","```\r\nDiscounter easterDiscounter = new Discounter() {\r\n    @Override\r\n    public BigDecimal applyDiscount(final BigDecimal amount) {\r\n        return amount.multiply(BigDecimal.valueOf(0.5));\r\n    }\r\n}; \r\n```","```\r\nDiscounter easterDiscounter = amount -> amount.multiply(BigDecimal.valueOf(0.5)); \r\n```","```\r\nList<Discounter> discounters = newArrayList(\r\n  amount -> amount.multiply(BigDecimal.valueOf(0.9)),\r\n  amount -> amount.multiply(BigDecimal.valueOf(0.8)),\r\n  amount -> amount.multiply(BigDecimal.valueOf(0.5))\r\n);\r\n```","```\r\npublic interface Discounter {\r\n    BigDecimal applyDiscount(BigDecimal amount);\r\n\r\n    static Discounter christmasDiscounter() {\r\n        return amount -> amount.multiply(BigDecimal.valueOf(0.9));\r\n    }\r\n\r\n    static Discounter newYearDiscounter() {\r\n        return amount -> amount.multiply(BigDecimal.valueOf(0.8));\r\n    }\r\n\r\n    static Discounter easterDiscounter() {\r\n        return amount -> amount.multiply(BigDecimal.valueOf(0.5));\r\n    }\r\n} \r\n```","```\r\npublic interface Discounter extends UnaryOperator<BigDecimal> {\r\n    default Discounter combine(Discounter after) {\r\n        return value -> after.apply(this.apply(value));\r\n    }\r\n}\r\n```","```\r\nDiscounter combinedDiscounter = discounters\r\n  .stream()\r\n  .reduce(v -> v, Discounter::combine);\r\n\r\ncombinedDiscounter.apply(...);\r\n```"]