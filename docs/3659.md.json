["```\r\npublic class Article {\r\n    private List<Author> listOfAuthors;\r\n    private int id;\r\n    private String name;\r\n\r\n    // standard constructors/getters/setters\r\n}\r\n```","```\r\npublic String call() {\r\n    int current = 0;\r\n    while (spliterator.tryAdvance(a -> a.setName(article.getName()\r\n      .concat(\"- published by Baeldung\")))) {\r\n        current++;\r\n    }\r\n\r\n    return Thread.currentThread().getName() + \":\" + current;\r\n}\r\n```","```\r\npublic static List<Article> generateElements() {\r\n    return Stream.generate(() -> new Article(\"Java\"))\r\n      .limit(35000)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSpliterator_whenAppliedToAListOfArticle_thenSplittedInHalf() {\r\n    Spliterator<Article> split1 = Executor.generateElements().spliterator(); \r\n    Spliterator<Article> split2 = split1.trySplit(); \r\n\r\n    assertThat(new Task(split1).call()) \r\n      .containsSequence(Executor.generateElements().size() / 2 + \"\"); \r\n    assertThat(new Task(split2).call()) \r\n      .containsSequence(Executor.generateElements().size() / 2 + \"\"); \r\n}\r\n```","```\r\nLOG.info(\"Size: \" + split1.estimateSize());\r\n```","```\r\nSize: 17500\r\n```","```\r\nLOG.info(\"Characteristics: \" + split1.characteristics());\r\n```","```\r\nCharacteristics: 16464\r\n```","```\r\npublic class Author {\r\n    private String name;\r\n    private int relatedArticleId;\r\n\r\n    // standard getters, setters & constructors\r\n}\r\n```","```\r\npublic class RelatedAuthorCounter {\r\n    private int counter;\r\n    private boolean isRelated;\r\n\r\n    // standard constructors/getters\r\n\r\n    public RelatedAuthorCounter accumulate(Author author) {\r\n        if (author.getRelatedArticleId() == 0) {\r\n            return isRelated ? this : new RelatedAuthorCounter( counter, true);\r\n        } else {\r\n            return isRelated ? new RelatedAuthorCounter(counter + 1, false) : this;\r\n        }\r\n    }\r\n\r\n    public RelatedAuthorCounter combine(RelatedAuthorCounter RelatedAuthorCounter) {\r\n        return new RelatedAuthorCounter(\r\n          counter + RelatedAuthorCounter.counter, \r\n          RelatedAuthorCounter.isRelated);\r\n    }\r\n}\r\n```","```\r\nStream<Author> stream = article.getListOfAuthors().stream();\r\n```","```\r\nprivate int countAutors(Stream<Author> stream) {\r\n    RelatedAuthorCounter wordCounter = stream.reduce(\r\n      new RelatedAuthorCounter(0, true), \r\n      RelatedAuthorCounter::accumulate, \r\n      RelatedAuthorCounter::combine);\r\n    return wordCounter.getCounter();\r\n}\r\n```","```\r\n@Test\r\nvoid \r\n  givenAStreamOfAuthors_whenProcessedInParallel_countProducesWrongOutput() {\r\n    assertThat(Executor.countAutors(stream.parallel())).isGreaterThan(9);\r\n}\r\n```","```\r\npublic class RelatedAuthorSpliterator implements Spliterator<Author> {\r\n    private final List<Author> list;\r\n    AtomicInteger current = new AtomicInteger();\r\n    // standard constructor/getters\r\n\r\n    @Override\r\n    public boolean tryAdvance(Consumer<? super Author> action) {\r\n        action.accept(list.get(current.getAndIncrement()));\r\n        return current.get() < list.size();\r\n    }\r\n\r\n    @Override\r\n    public Spliterator<Author> trySplit() {\r\n        int currentSize = list.size() - current.get();\r\n        if (currentSize < 10) {\r\n            return null;\r\n        }\r\n        for (int splitPos = currentSize / 2 + current.intValue();\r\n          splitPos < list.size(); splitPos++) {\r\n            if (list.get(splitPos).getRelatedArticleId() == 0) {\r\n                Spliterator<Author> spliterator\r\n                  = new RelatedAuthorSpliterator(\r\n                  list.subList(current.get(), splitPos));\r\n                current.set(splitPos);\r\n                return spliterator;\r\n            }\r\n        }\r\n        return null;\r\n   }\r\n\r\n   @Override\r\n   public long estimateSize() {\r\n       return list.size() - current.get();\r\n   }\r\n\r\n   @Override\r\n   public int characteristics() {\r\n       return CONCURRENT;\r\n   }\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenAStreamOfAuthors_whenProcessedInParallel_countProducesRightOutput() {\r\n    Stream<Author> stream2 = StreamSupport.stream(spliterator, true);\r\n\r\n    assertThat(Executor.countAutors(stream2.parallel())).isEqualTo(9);\r\n}\r\n```"]