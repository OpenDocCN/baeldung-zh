["```\r\n<dependency>\r\n    <groupId>net.serenity-bdd</groupId>\r\n    <artifactId>serenity-junit</artifactId>\r\n    <version>1.4.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.serenity-bdd</groupId>\r\n    <artifactId>serenity-screenplay</artifactId>\r\n    <version>1.4.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.serenity-bdd</groupId>\r\n    <artifactId>serenity-screenplay-webdriver</artifactId>\r\n    <version>1.4.0</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <artifactId>maven-failsafe-plugin</artifactId>\r\n    <version>2.20</version>\r\n    <configuration>\r\n        <systemProperties>\r\n            <webdriver.chrome.driver>chromedriver</webdriver.chrome.driver>\r\n        </systemProperties>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\npublic class GoogleSearchLiveTest {\r\n\r\n    @Managed(driver = \"chrome\") \r\n    private WebDriver browser;\r\n\r\n    @Test\r\n    public void whenGoogleBaeldungThenShouldSeeEugen() {\r\n        browser.get(\"https://www.google.com/ncr\");\r\n\r\n        browser\r\n          .findElement(By.name(\"q\"))\r\n          .sendKeys(\"baeldung\", Keys.ENTER);\r\n\r\n        new WebDriverWait(browser, 5)https://www.baeldung.com/serenity-screenplay\r\n          .until(visibilityOfElementLocated(By.cssSelector(\"._ksh\")));\r\n\r\n        assertThat(browser\r\n          .findElement(By.cssSelector(\"._ksh\"))\r\n          .getText(), containsString(\"Eugen (Baeldung)\"));\r\n    }\r\n}\r\n```","```\r\n@DefaultUrl(\"https://www.google.com/ncr\")\r\npublic class GoogleSearchPageObject extends PageObject {\r\n\r\n    @FindBy(name = \"q\") \r\n    private WebElement search;\r\n\r\n    @FindBy(css = \"._ksh\") \r\n    private WebElement result;\r\n\r\n    public void searchFor(String keyword) {\r\n        search.sendKeys(keyword, Keys.ENTER);\r\n    }\r\n\r\n    public void resultMatches(String expected) {\r\n        assertThat(result.getText(), containsString(expected));\r\n    }\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\npublic class GoogleSearchPageObjectLiveTest {\r\n\r\n    @Managed(driver = \"chrome\") \r\n    private WebDriver browser;\r\n\r\n    GoogleSearchPageObject googleSearch;\r\n\r\n    @Test\r\n    public void whenGoogleBaeldungThenShouldSeeEugen() {\r\n        googleSearch.open();\r\n\r\n        googleSearch.searchFor(\"baeldung\");\r\n\r\n        googleSearch.resultMatches(\"Eugen (Baeldung)\");\r\n    }\r\n}\r\n```","```\r\npublic void resultMatches(String expected) {\r\n    waitFor(result).waitUntilVisible();\r\n    assertThat(result.getText(), containsString(expected));\r\n}\r\n```","```\r\npublic void resultMatches(String expected) {\r\n    withTimeoutOf(5, SECONDS)\r\n      .waitFor(result)\r\n      .waitUntilVisible();\r\n    assertThat(result.getText(), containsString(expected));\r\n}\r\n```","```\r\n    public class StartWith implements Task {\r\n\r\n        public static StartWith googleSearchPage() {\r\n            return instrumented(StartWith.class);\r\n        }\r\n\r\n        GoogleSearchPage googleSearchPage;\r\n\r\n        @Step(\"{0} starts a google search\")\r\n        public <T extends Actor> void performAs(T t) {\r\n            t.attemptsTo(Open\r\n              .browserOn()\r\n              .the(googleSearchPage));\r\n        }\r\n    }\r\n    ```","```\r\n    public class SearchForKeyword implements Task {\r\n\r\n        @Step(\"{0} searches for '#keyword'\")\r\n        public <T extends Actor> void performAs(T actor) {\r\n            actor.attemptsTo(Enter\r\n              .theValue(keyword)\r\n              .into(GoogleSearchPage.SEARCH_INPUT_BOX)\r\n              .thenHit(Keys.RETURN));\r\n        }\r\n\r\n        private String keyword;\r\n\r\n        public SearchForKeyword(String keyword) {\r\n            this.keyword = keyword;\r\n        }\r\n\r\n        public static Task of(String keyword) {\r\n            return Instrumented\r\n              .instanceOf(SearchForKeyword.class)\r\n              .withProperties(keyword);\r\n        }\r\n    }\r\n    ```","```\r\n    public class GoogleSearchResults implements Question<List<String>> {\r\n\r\n        public static Question<List<String>> displayed() {\r\n            return new GoogleSearchResults();\r\n        }\r\n\r\n        public List<String> answeredBy(Actor actor) {\r\n            return Text\r\n              .of(GoogleSearchPage.SEARCH_RESULT_TITLES)\r\n              .viewedBy(actor)\r\n              .asList();\r\n        }\r\n    }\r\n    ```","```\r\n@DefaultUrl(\"https://www.google.com/ncr\")\r\npublic class GoogleSearchPage extends PageObject {\r\n\r\n    public static final Target SEARCH_RESULT_TITLES = Target\r\n      .the(\"search results\")\r\n      .locatedBy(\"._ksh\");\r\n\r\n    public static final Target SEARCH_INPUT_BOX = Target\r\n      .the(\"search input box\")\r\n      .locatedBy(\"#lst-ib\");\r\n}\r\n```","```\r\n@RunWith(SerenityRunner.class)\r\npublic class GoogleSearchScreenplayLiveTest {\r\n\r\n    @Managed(driver = \"chrome\") \r\n    WebDriver browser;\r\n\r\n    Actor kitty = Actor.named(\"kitty\");\r\n\r\n    @Before\r\n    public void setup() {\r\n        kitty.can(BrowseTheWeb.with(browser));\r\n    }\r\n\r\n    @Test\r\n    public void whenGoogleBaeldungThenShouldSeeEugen() {\r\n        givenThat(kitty).wasAbleTo(StartWith.googleSearchPage());\r\n\r\n        when(kitty).attemptsTo(SearchForKeyword.of(\"baeldung\"));\r\n\r\n        then(kitty).should(seeThat(GoogleSearchResults.displayed(), \r\n          hasItem(containsString(\"Eugen (Baeldung)\"))));\r\n    }\r\n}\r\n```"]