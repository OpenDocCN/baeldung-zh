["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-netflix-archaius</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-netflix</artifactId>\r\n            <version>2.0.1.RELEASE</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n@Autowired\r\nDataSource dataSource;\r\n\r\n@Bean\r\npublic AbstractConfiguration addApplicationPropertiesSource() {\r\n    PolledConfigurationSource source =\r\n      new JDBCConfigurationSource(dataSource,\r\n        \"select distinct key, value from properties\",\r\n        \"key\",\r\n        \"value\");\r\n    return new DynamicConfiguration(source, new FixedDelayPollingScheduler());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.0.5.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.197</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class Properties {\r\n    @Id\r\n    private String key;\r\n    private String value;\r\n}\r\n```","```\r\ninsert into properties\r\nvalues('baeldung.archaius.properties.one', 'one FROM:jdbc_source');\r\n```","```\r\n@RestController\r\npublic class ConfigPropertiesController {\r\n\r\n    private DynamicStringProperty propertyOneWithDynamic = DynamicPropertyFactory\r\n      .getInstance()\r\n      .getStringProperty(\"baeldung.archaius.properties.one\", \"not found!\");\r\n\r\n    @GetMapping(\"/properties-from-dynamic\")\r\n    public Map<String, String> getPropertiesFromDynamic() {\r\n        Map<String, String> properties = new HashMap<>();\r\n        properties.put(propertyOneWithDynamic.getName(), propertyOneWithDynamic.get());\r\n        return properties;\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.amazonaws</groupId>\r\n    <artifactId>aws-java-sdk-dynamodb</artifactId>\r\n    <version>1.11.414</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.derjust</groupId>\r\n    <artifactId>spring-data-dynamodb</artifactId>\r\n    <version>5.0.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.netflix.archaius</groupId>\r\n    <artifactId>archaius-aws</artifactId>\r\n    <version>0.7.6</version>\r\n</dependency>\r\n```","```\r\n@Autowired\r\nAmazonDynamoDB amazonDynamoDb;\r\n\r\n@Bean\r\npublic AbstractConfiguration addApplicationPropertiesSource() {\r\n    PolledConfigurationSource source = new DynamoDbConfigurationSource(amazonDynamoDb);\r\n    return new DynamicConfiguration(\r\n      source, new FixedDelayPollingScheduler());\r\n}\r\n```","```\r\n@DynamoDBTable(tableName = \"archaiusProperties\")\r\npublic class ArchaiusProperties {\r\n\r\n    @DynamoDBHashKey\r\n    @DynamoDBAttribute\r\n    private String key;\r\n\r\n    @DynamoDBAttribute\r\n    private String value;\r\n\r\n    // ...getters and setters...\r\n}\r\n```","```\r\npublic interface ArchaiusPropertiesRepository extends CrudRepository<ArchaiusProperties, String> {}\r\n```","```\r\n@Autowired\r\nprivate ArchaiusPropertiesRepository repository;\r\n\r\n@Autowired\r\nAmazonDynamoDB amazonDynamoDb;\r\n\r\nprivate void initDatabase() {\r\n    DynamoDBMapper mapper = new DynamoDBMapper(amazonDynamoDb);\r\n    CreateTableRequest tableRequest = mapper\r\n      .generateCreateTableRequest(ArchaiusProperties.class);\r\n    tableRequest.setProvisionedThroughput(new ProvisionedThroughput(1L, 1L));\r\n    TableUtils.createTableIfNotExists(amazonDynamoDb, tableRequest);\r\n\r\n    ArchaiusProperties property = new ArchaiusProperties(\"baeldung.archaius.properties.one\", \"one FROM:dynamoDB\");\r\n    repository.save(property);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-zookeeper-config</artifactId>\r\n    <version>2.0.0.RELEASE</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.apache.zookeeper</groupId>\r\n            <artifactId>zookeeper</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.zookeeper</groupId>\r\n    <artifactId>zookeeper</artifactId>\r\n    <version>3.4.13</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class ZookeeperConfigsInitializer {\r\n\r\n    @Autowired\r\n    CuratorFramework client;\r\n\r\n    @EventListener\r\n    public void appReady(ApplicationReadyEvent event) throws Exception {\r\n        createBaseNodes();\r\n        if (client.checkExists().forPath(\"/config/application/baeldung.archaius.properties.one\") == null) {\r\n            client.create()\r\n              .forPath(\"/config/application/baeldung.archaius.properties.one\",\r\n              \"one FROM:zookeeper\".getBytes());\r\n        } else {\r\n            client.setData()\r\n              .forPath(\"/config/application/baeldung.archaius.properties.one\",\r\n              \"one FROM:zookeeper\".getBytes());\r\n        }\r\n    }\r\n\r\n    private void createBaseNodes() throws Exception {\r\n        if (client.checkExists().forPath(\"/config\") == null) {\r\n            client.create().forPath(\"/config\");\r\n        }\r\n        if (client.checkExists().forPath(\"/config/application\") == null) {\r\n            client.create().forPath(\"/config/application\");\r\n        }\r\n    }\r\n}\r\n```"]