["```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"com.baeldung.web\" })\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void configureMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\r\n        //...\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.esotericsoftware</groupId>\r\n    <artifactId>kryo</artifactId>\r\n    <version>4.0.0</version>\r\n</dependency>\r\n```","```\r\npublic class KryoHttpMessageConverter extends AbstractHttpMessageConverter<Object> {\r\n\r\n    public static final MediaType KRYO = new MediaType(\"application\", \"x-kryo\");\r\n\r\n    private static final ThreadLocal<Kryo> kryoThreadLocal = new ThreadLocal<Kryo>() {\r\n        @Override\r\n        protected Kryo initialValue() {\r\n            Kryo kryo = new Kryo();\r\n            kryo.register(Foo.class, 1);\r\n            return kryo;\r\n        }\r\n    };\r\n\r\n    public KryoHttpMessageConverter() {\r\n        super(KRYO);\r\n    }\r\n\r\n    @Override\r\n    protected boolean supports(Class<?> clazz) {\r\n        return Object.class.isAssignableFrom(clazz);\r\n    }\r\n\r\n    @Override\r\n    protected Object readInternal(\r\n      Class<? extends Object> clazz, HttpInputMessage inputMessage) throws IOException {\r\n        Input input = new Input(inputMessage.getBody());\r\n        return kryoThreadLocal.get().readClassAndObject(input);\r\n    }\r\n\r\n    @Override\r\n    protected void writeInternal(\r\n      Object object, HttpOutputMessage outputMessage) throws IOException {\r\n        Output output = new Output(outputMessage.getBody());\r\n        kryoThreadLocal.get().writeClassAndObject(output, object);\r\n        output.flush();\r\n    }\r\n\r\n    @Override\r\n    protected MediaType getDefaultContentType(Object object) {\r\n        return KRYO;\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/foos/{id}\")\r\n@ResponseBody\r\npublic Foo findById(@PathVariable long id) {\r\n    return fooRepository.findById(id);\r\n}\r\n```","```\r\nRestTemplate restTemplate = new RestTemplate();\r\nrestTemplate.setMessageConverters(Arrays.asList(new KryoHttpMessageConverter()));\r\n\r\nHttpHeaders headers = new HttpHeaders();\r\nheaders.setAccept(Arrays.asList(KryoHttpMessageConverter.KRYO));\r\nHttpEntity<String> entity = new HttpEntity<String>(headers);\r\n\r\nResponseEntity<Foo> response = restTemplate.exchange(\"http://localhost:8080/spring-rest/foos/{id}\",\r\n  HttpMethod.GET, entity, Foo.class, \"1\");\r\nFoo resource = response.getBody();\r\n\r\nassertThat(resource, notNullValue());\r\n```","```\r\n@Override\r\npublic void configureMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\r\n    messageConverters.add(new MappingJackson2HttpMessageConverter());\r\n    messageConverters.add(new KryoHttpMessageConverter());\r\n    super.configureMessageConverters(messageConverters);\r\n} \r\n```","```\r\npackage baeldung;\r\noption java_package = \"com.baeldung.web.dto\";\r\noption java_outer_classname = \"FooProtos\";\r\nmessage Foo {\r\n    required int64 id = 1;\r\n    required string name = 2;\r\n}\r\n```","```\r\n@Override\r\npublic void configureMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\r\n    messageConverters.add(new MappingJackson2HttpMessageConverter());\r\n    messageConverters.add(new KryoHttpMessageConverter());\r\n    messageConverters.add(new ProtobufHttpMessageConverter());\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/fooprotos/{id}\")\r\n@ResponseBody\r\npublic FooProtos.Foo findProtoById(@PathVariable long id) { … } \r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/foos/{id}\")\r\n@ResponseBody\r\npublic Foo findById(@PathVariable long id) { … } \r\n```","```\r\n@RequestMapping(\r\n  method = RequestMethod.GET, \r\n  value = \"/foos/{id}\", \r\n  produces = { \"application/x-protobuf\" })\r\n@ResponseBody\r\npublic FooProtos.Foo findProtoById(@PathVariable long id) { … } \r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"com.baeldung.web\" })\r\npublic class WebConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void extendMessageConverters(List<HttpMessageConverter<?>> messageConverters) {\r\n        messageConverters.add(new ProtobufHttpMessageConverter());\r\n        messageConverters.add(new KryoHttpMessageConverter());\r\n    }\r\n}\r\n```"]