["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.3</version>\r\n</dependency>\r\n```","```\r\n{\r\n    \"id\": \"957c43f2-fa2e-42f9-bf75-6e3d5bb6960a\",\r\n    \"name\": \"The Best Product\",\r\n    \"brand\": {\r\n        \"id\": \"9bcd817d-0141-42e6-8f04-e5aaab0980b6\",\r\n        \"name\": \"ACME Products\",\r\n        \"owner\": {\r\n            \"id\": \"b21a80b1-0c09-4be3-9ebd-ea3653511c13\",\r\n            \"name\": \"Ultimate Corp, Inc.\"\r\n        }\r\n    }  \r\n} \r\n```","```\r\npublic class Product {\r\n\r\n    private String id;\r\n    private String name;\r\n    private String brandName;\r\n    private String ownerName;\r\n\r\n    // standard getters and setters\r\n} \r\n```","```\r\npublic class Product {\r\n    // ...\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    @JsonProperty(\"brand\")\r\n    private void unpackNested(Map<String,Object> brand) {\r\n        this.brandName = (String)brand.get(\"name\");\r\n        Map<String,String> owner = (Map<String,String>)brand.get(\"owner\");\r\n        this.ownerName = owner.get(\"name\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenUsingAnnotations_thenOk() throws IOException {\r\n    Product product = new ObjectMapper()\r\n      .readerFor(Product.class)\r\n      .readValue(SOURCE_JSON);\r\n\r\n    assertEquals(product.getName(), \"The Best Product\");\r\n    assertEquals(product.getBrandName(), \"ACME Products\");\r\n    assertEquals(product.getOwnerName(), \"Ultimate Corp, Inc.\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingJsonNode_thenOk() throws IOException {\r\n    JsonNode productNode = new ObjectMapper().readTree(SOURCE_JSON);\r\n\r\n    Product product = new Product();\r\n    product.setId(productNode.get(\"id\").textValue());\r\n    product.setName(productNode.get(\"name\").textValue());\r\n    product.setBrandName(productNode.get(\"brand\")\r\n      .get(\"name\").textValue());\r\n    product.setOwnerName(productNode.get(\"brand\")\r\n      .get(\"owner\").get(\"name\").textValue());\r\n\r\n    assertEquals(product.getName(), \"The Best Product\");\r\n    assertEquals(product.getBrandName(), \"ACME Products\");\r\n    assertEquals(product.getOwnerName(), \"Ultimate Corp, Inc.\");\r\n}\r\n```","```\r\npublic class ProductDeserializer extends StdDeserializer<Product> {\r\n\r\n    public ProductDeserializer() {\r\n        this(null);\r\n    }\r\n\r\n    public ProductDeserializer(Class<?> vc) {\r\n        super(vc);\r\n    }\r\n\r\n    @Override\r\n    public Product deserialize(JsonParser jp, DeserializationContext ctxt) \r\n      throws IOException, JsonProcessingException {\r\n\r\n        JsonNode productNode = jp.getCodec().readTree(jp);\r\n        Product product = new Product();\r\n        product.setId(productNode.get(\"id\").textValue());\r\n        product.setName(productNode.get(\"name\").textValue());\r\n        product.setBrandName(productNode.get(\"brand\")\r\n          .get(\"name\").textValue());\r\n        product.setOwnerName(productNode.get(\"brand\").get(\"owner\")\r\n          .get(\"name\").textValue());\t\t\r\n        return product;\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenUsingDeserializerManuallyRegistered_thenOk()\r\n throws IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    SimpleModule module = new SimpleModule();\r\n    module.addDeserializer(Product.class, new ProductDeserializer());\r\n    mapper.registerModule(module);\r\n\r\n    Product product = mapper.readValue(SOURCE_JSON, Product.class);\r\n\r\n    assertEquals(product.getName(), \"The Best Product\");\r\n    assertEquals(product.getBrandName(), \"ACME Products\");\r\n    assertEquals(product.getOwnerName(), \"Ultimate Corp, Inc.\");\r\n} \r\n```","```\r\n@JsonDeserialize(using = ProductDeserializer.class)\r\npublic class Product {\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingDeserializerAutoRegistered_thenOk()\r\n  throws IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    Product product = mapper.readValue(SOURCE_JSON, Product.class);\r\n\r\n    assertEquals(product.getName(), \"The Best Product\");\r\n    assertEquals(product.getBrandName(), \"ACME Products\");\r\n    assertEquals(product.getOwnerName(), \"Ultimate Corp, Inc.\");\r\n}\r\n```"]