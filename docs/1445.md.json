["```\r\npublic List<AccountDTO>\r\n  unsafeFindAccountsByCustomerId(String customerId)\r\n  throws SQLException {\r\n    // UNSAFE !!! DON'T DO THIS !!!\r\n    String sql = \"select \"\r\n      + \"customer_id,acc_number,branch_id,balance \"\r\n      + \"from Accounts where customer_id = '\"\r\n      + customerId \r\n      + \"'\";\r\n    Connection c = dataSource.getConnection();\r\n    ResultSet rs = c.createStatement().executeQuery(sql);\r\n    // ...\r\n}\r\n```","```\r\ncurl -X GET \\\r\n  'http://localhost:8080/accounts?customerId=abc%27%20or%20%271%27=%271' \\\r\n```","```\r\nabc' or '1' = '1\r\n```","```\r\nselect customer_id, acc_number,branch_id, balance\r\n  from Accounts where customerId = 'abc' or '1' = '1'\r\n```","```\r\npublic List<AccountDTO> unsafeJpaFindAccountsByCustomerId(String customerId) {    \r\n    String jql = \"from Account where customerId = '\" + customerId + \"'\";        \r\n    TypedQuery<Account> q = em.createQuery(jql, Account.class);        \r\n    return q.getResultList()\r\n      .stream()\r\n      .map(this::toAccountDTO)\r\n      .collect(Collectors.toList());        \r\n} \r\n```","```\r\npublic List<AccountDTO> safeFindAccountsByCustomerId(String customerId)\r\n  throws Exception {\r\n\r\n    String sql = \"select \"\r\n      + \"customer_id, acc_number, branch_id, balance from Accounts\"\r\n      + \"where customer_id = ?\";\r\n\r\n    Connection c = dataSource.getConnection();\r\n    PreparedStatement p = c.prepareStatement(sql);\r\n    p.setString(1, customerId);\r\n    ResultSet rs = p.executeQuery(sql)); \r\n    // omitted - process rows and return an account list\r\n}\r\n```","```\r\nString jql = \"from Account where customerId = :customerId\";\r\nTypedQuery<Account> q = em.createQuery(jql, Account.class)\r\n  .setParameter(\"customerId\", customerId);\r\n// Execute query and return mapped results (omitted)\r\n```","```\r\n// Note: Output formatted to fit screen\r\n[DEBUG][SQL] select\r\n  account0_.id as id1_0_,\r\n  account0_.acc_number as acc_numb2_0_,\r\n  account0_.balance as balance3_0_,\r\n  account0_.branch_id as branch_i4_0_,\r\n  account0_.customer_id as customer5_0_ \r\nfrom accounts account0_ \r\nwhere account0_.customer_id=?\r\n```","```\r\n// This WILL NOT WORK !!!\r\nPreparedStatement p = c.prepareStatement(\"select count(*) from ?\");\r\np.setString(1, tableName);\r\n```","```\r\n// This WILL NOT WORK EITHER !!!\r\nString jql = \"select count(*) from :tableName\";\r\nTypedQuery q = em.createQuery(jql,Long.class)\r\n  .setParameter(\"tableName\", tableName);\r\nreturn q.getSingleResult(); \r\n```","```\r\nCriteriaBuilder cb = em.getCriteriaBuilder();\r\nCriteriaQuery<Account> cq = cb.createQuery(Account.class);\r\nRoot<Account> root = cq.from(Account.class);\r\ncq.select(root).where(cb.equal(root.get(Account_.customerId), customerId));\r\n\r\nTypedQuery<Account> q = em.createQuery(cq);\r\n// Execute query and return mapped results (omitted)\r\n```","```\r\nprivate static final Set<String> VALID_COLUMNS_FOR_ORDER_BY\r\n  = Collections.unmodifiableSet(Stream\r\n      .of(\"acc_number\",\"branch_id\",\"balance\")\r\n      .collect(Collectors.toCollection(HashSet::new)));\r\n\r\npublic List<AccountDTO> safeFindAccountsByCustomerId(\r\n  String customerId,\r\n  String orderBy) throws Exception { \r\n    String sql = \"select \"\r\n      + \"customer_id,acc_number,branch_id,balance from Accounts\"\r\n      + \"where customer_id = ? \";\r\n    if (VALID_COLUMNS_FOR_ORDER_BY.contains(orderBy)) {\r\n        sql = sql + \" order by \" + orderBy;\r\n    } else {\r\n        throw new IllegalArgumentException(\"Nice try!\");\r\n    }\r\n    Connection c = dataSource.getConnection();\r\n    PreparedStatement p = c.prepareStatement(sql);\r\n    p.setString(1,customerId);\r\n    // ... result set processing omitted\r\n}\r\n```","```\r\n// Map of valid JPA columns for sorting\r\nfinal Map<String,SingularAttribute<Account,?>> VALID_JPA_COLUMNS_FOR_ORDER_BY = Stream.of(\r\n  new AbstractMap.SimpleEntry<>(Account_.ACC_NUMBER, Account_.accNumber),\r\n  new AbstractMap.SimpleEntry<>(Account_.BRANCH_ID, Account_.branchId),\r\n  new AbstractMap.SimpleEntry<>(Account_.BALANCE, Account_.balance))\r\n  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\r\n\r\nSingularAttribute<Account,?> orderByAttribute = VALID_JPA_COLUMNS_FOR_ORDER_BY.get(orderBy);\r\nif (orderByAttribute == null) {\r\n    throw new IllegalArgumentException(\"Nice try!\");\r\n}\r\n\r\nCriteriaBuilder cb = em.getCriteriaBuilder();\r\nCriteriaQuery<Account> cq = cb.createQuery(Account.class);\r\nRoot<Account> root = cq.from(Account.class);\r\ncq.select(root)\r\n  .where(cb.equal(root.get(Account_.customerId), customerId))\r\n  .orderBy(cb.asc(root.get(orderByAttribute)));\r\n\r\nTypedQuery<Account> q = em.createQuery(cq);\r\n// Execute query and return mapped results (omitted)\r\n```"]