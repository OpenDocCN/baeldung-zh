["```\r\n@GetMapping(params = { \"page\", \"size\" })\r\npublic List<Foo> findPaginated(@RequestParam(\"page\") int page, \r\n  @RequestParam(\"size\") int size, UriComponentsBuilder uriBuilder,\r\n  HttpServletResponse response) {\r\n    Page<Foo> resultPage = service.findPaginated(page, size);\r\n    if (page > resultPage.getTotalPages()) {\r\n        throw new MyResourceNotFoundException();\r\n    }\r\n    eventPublisher.publishEvent(new PaginatedResultsRetrievedEvent<Foo>(\r\n      Foo.class, uriBuilder, response, page, resultPage.getTotalPages(), size));\r\n\r\n    return resultPage.getContent();\r\n}\r\n```","```\r\nvoid addLinkHeaderOnPagedResourceRetrieval(\r\n UriComponentsBuilder uriBuilder, HttpServletResponse response,\r\n Class clazz, int page, int totalPages, int size ){\r\n\r\n   String resourceName = clazz.getSimpleName().toString().toLowerCase();\r\n   uriBuilder.path( \"/admin/\" + resourceName );\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\nStringJoiner linkHeader = new StringJoiner(\", \");\r\nif (hasNextPage(page, totalPages)){\r\n    String uriForNextPage = constructNextPageUri(uriBuilder, page, size);\r\n    linkHeader.add(createLinkHeader(uriForNextPage, \"next\"));\r\n}\r\n```","```\r\nString constructNextPageUri(UriComponentsBuilder uriBuilder, int page, int size) {\r\n    return uriBuilder.replaceQueryParam(PAGE, page + 1)\r\n      .replaceQueryParam(\"size\", size)\r\n      .build()\r\n      .encode()\r\n      .toUriString();\r\n}\r\n```","```\r\nresponse.addHeader(\"Link\", linkHeader.toString());\r\n```","```\r\n@Test\r\npublic void whenResourcesAreRetrievedPaged_then200IsReceived(){\r\n    Response response = RestAssured.get(paths.getFooURL() + \"?page=0&size;=2\");\r\n\r\n    assertThat(response.getStatusCode(), is(200));\r\n}\r\n@Test\r\npublic void whenPageOfResourcesAreRetrievedOutOfBounds_then404IsReceived(){\r\n    String url = getFooURL() + \"?page=\" + randomNumeric(5) + \"&size;=2\";\r\n    Response response = RestAssured.get.get(url);\r\n\r\n    assertThat(response.getStatusCode(), is(404));\r\n}\r\n@Test\r\npublic void givenResourcesExist_whenFirstPageIsRetrieved_thenPageContainsResources(){\r\n   createResource();\r\n   Response response = RestAssured.get(paths.getFooURL() + \"?page=0&size;=2\");\r\n\r\n   assertFalse(response.body().as(List.class).isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenFirstPageOfResourcesAreRetrieved_thenSecondPageIsNext(){\r\n   Response response = RestAssured.get(getFooURL()+\"?page=0&size;=2\");\r\n\r\n   String uriToNextPage = extractURIByRel(response.getHeader(\"Link\"), \"next\");\r\n   assertEquals(getFooURL()+\"?page=1&size;=2\", uriToNextPage);\r\n}\r\n@Test\r\npublic void whenFirstPageOfResourcesAreRetrieved_thenNoPreviousPage(){\r\n   Response response = RestAssured.get(getFooURL()+\"?page=0&size;=2\");\r\n\r\n   String uriToPrevPage = extractURIByRel(response.getHeader(\"Link\"), \"prev\");\r\n   assertNull(uriToPrevPage );\r\n}\r\n@Test\r\npublic void whenSecondPageOfResourcesAreRetrieved_thenFirstPageIsPrevious(){\r\n   Response response = RestAssured.get(getFooURL()+\"?page=1&size;=2\");\r\n\r\n   String uriToPrevPage = extractURIByRel(response.getHeader(\"Link\"), \"prev\");\r\n   assertEquals(getFooURL()+\"?page=0&size;=2\", uriToPrevPage);\r\n}\r\n@Test\r\npublic void whenLastPageOfResourcesIsRetrieved_thenNoNextPageIsDiscoverable(){\r\n   Response first = RestAssured.get(getFooURL()+\"?page=0&size;=2\");\r\n   String uriToLastPage = extractURIByRel(first.getHeader(\"Link\"), \"last\");\r\n\r\n   Response response = RestAssured.get(uriToLastPage);\r\n\r\n   String uriToNextPage = extractURIByRel(response.getHeader(\"Link\"), \"next\");\r\n   assertNull(uriToNextPage);\r\n}\r\n```","```\r\npublic interface SubjectRepository extends PagingAndSortingRepository<Subject, Long>{}\r\n```","```\r\n\"_links\" : {\r\n  \"self\" : {\r\n    \"href\" : \"http://localhost:8080/subjects{?page,size,sort}\",\r\n    \"templated\" : true\r\n  }\r\n}\r\n```","```\r\n@RestResource(path = \"nameContains\")\r\npublic Page<Subject> findByNameContaining(@Param(\"name\") String name, Pageable p);\r\n```","```\r\n\"findByNameContaining\" : {\r\n  \"href\" : \"http://localhost:8080/subjects/search/nameContains{?name,page,size,sort}\",\r\n  \"templated\" : true\r\n}\r\n```","```\r\nList<Foo> list = getListOfFooFromSoapService();\r\n```","```\r\nint start = (int) pageable.getOffset();\r\n```","```\r\nint end = (int) ((start + pageable.getPageSize()) > fooList.size() ? fooList.size()\r\n  : (start + pageable.getPageSize()));\r\n```","```\r\nPage<Foo> page \r\n  = new PageImpl<Foo>(fooList.subList(start, end), pageable, fooList.size());\r\n```"]