["```\r\n@Component\r\npublic class RestTemplateResponseErrorHandler \r\n  implements ResponseErrorHandler {\r\n\r\n    @Override\r\n    public boolean hasError(ClientHttpResponse httpResponse) \r\n      throws IOException {\r\n\r\n        return (\r\n          httpResponse.getStatusCode().series() == CLIENT_ERROR \r\n          || httpResponse.getStatusCode().series() == SERVER_ERROR);\r\n    }\r\n\r\n    @Override\r\n    public void handleError(ClientHttpResponse httpResponse) \r\n      throws IOException {\r\n\r\n        if (httpResponse.getStatusCode()\r\n          .series() == HttpStatus.Series.SERVER_ERROR) {\r\n            // handle SERVER_ERROR\r\n        } else if (httpResponse.getStatusCode()\r\n          .series() == HttpStatus.Series.CLIENT_ERROR) {\r\n            // handle CLIENT_ERROR\r\n            if (httpResponse.getStatusCode() == HttpStatus.NOT_FOUND) {\r\n                throw new NotFoundException();\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class BarConsumerService {\r\n\r\n    private RestTemplate restTemplate;\r\n\r\n    @Autowired\r\n    public BarConsumerService(RestTemplateBuilder restTemplateBuilder) {\r\n        RestTemplate restTemplate = restTemplateBuilder\r\n          .errorHandler(new RestTemplateResponseErrorHandler())\r\n          .build();\r\n    }\r\n\r\n    public Bar fetchBarById(String barId) {\r\n        return restTemplate.getForObject(\"/bars/4242\", Bar.class);\r\n    }\r\n\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(classes = { NotFoundException.class, Bar.class })\r\n@RestClientTest\r\npublic class RestTemplateResponseErrorHandlerIntegrationTest {\r\n\r\n    @Autowired \r\n    private MockRestServiceServer server;\r\n\r\n    @Autowired \r\n    private RestTemplateBuilder builder;\r\n\r\n    @Test\r\n    public void  givenRemoteApiCall_when404Error_thenThrowNotFound() {\r\n        Assertions.assertNotNull(this.builder);\r\n        Assertions.assertNotNull(this.server);\r\n\r\n        RestTemplate restTemplate = this.builder\r\n          .errorHandler(new RestTemplateResponseErrorHandler())\r\n          .build();\r\n\r\n        this.server\r\n          .expect(ExpectedCount.once(), requestTo(\"/bars/4242\"))\r\n          .andExpect(method(HttpMethod.GET))\r\n          .andRespond(withStatus(HttpStatus.NOT_FOUND));\r\n\r\n        Assertions.assertThrows(NotFoundException.class, () -> {\r\n            Bar response = restTemplate.getForObject(\"/bars/4242\", Bar.class);\r\n        });\r\n    }\r\n}\r\n```"]