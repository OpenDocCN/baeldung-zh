["```\r\npublic abstract class AbstractExample {\r\n\r\n    public abstract LocalDate getLocalDate();\r\n\r\n    public abstract LocalTime getLocalTime();\r\n}\r\n\r\npublic interface InterfaceExample {\r\n}\r\n```","```\r\n@Test\r\nvoid givenAbstractClass_whenCheckModifierIsAbstract_thenTrue() throws Exception {\r\n    Class<AbstractExample> clazz = AbstractExample.class;\r\n\r\n    Assertions.assertTrue(Modifier.isAbstract(clazz.getModifiers()));\r\n}\r\n```","```\r\n@Test\r\nvoid givenInterface_whenCheckModifierIsAbstract_thenTrue() {\r\n    Class<InterfaceExample> clazz = InterfaceExample.class;\r\n\r\n    Assertions.assertTrue(Modifier.isAbstract(clazz.getModifiers()));\r\n} \r\n```","```\r\n@Test\r\nvoid givenAbstractClass_whenCheckIsAbstractClass_thenTrue() {\r\n    Class<AbstractExample> clazz = AbstractExample.class;\r\n    int mod = clazz.getModifiers();\r\n\r\n    Assertions.assertTrue(Modifier.isAbstract(mod) && !Modifier.isInterface(mod));\r\n}\r\n```","```\r\n@Test\r\nvoid givenConcreteClass_whenCheckIsAbstractClass_thenFalse() {\r\n    Class<Date> clazz = Date.class;\r\n    int mod = clazz.getModifiers();\r\n\r\n    Assertions.assertFalse(Modifier.isAbstract(mod) && !Modifier.isInterface(mod));\r\n} \r\n```"]