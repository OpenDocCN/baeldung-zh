["```\r\npublic class TicketId {\r\n    private String venue;\r\n    private String date;\r\n\r\n    // getters and setters\r\n\r\n    // override hashCode() and equals()\r\n}\r\n```","```\r\n@Document\r\npublic class Ticket {\r\n    @Id\r\n    private TicketId id;\r\n\r\n    private String event;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic interface TicketRepository extends MongoRepository<Ticket, TicketId> {\r\n} \r\n```","```\r\n@Test\r\npublic void givenCompositeId_whenDupeInsert_thenExceptionIsThrown() {\r\n    TicketId ticketId = new TicketId();\r\n    ticketId.setDate(\"2020-01-01\");\r\n    ticketId.setVenue(\"V\");\r\n\r\n    Ticket ticket = new Ticket(ticketId, \"Event C\");\r\n    service.insert(ticket);\r\n\r\n    assertThrows(DuplicateKeyException.class, () -> {        \r\n        service.insert(ticket);\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void givenCompositeId_whenSearchingByIdObject_thenFound() {\r\n    TicketId ticketId = new TicketId();\r\n    ticketId.setDate(\"2020-01-01\");\r\n    ticketId.setVenue(\"Venue B\");\r\n\r\n    service.insert(new Ticket(ticketId, \"Event B\"));\r\n\r\n    Optional<Ticket> optionalTicket = ticketRepository.findById(ticketId);\r\n\r\n    assertThat(optionalTicket.isPresent());\r\n    Ticket savedTicket = optionalTicket.get();\r\n\r\n    assertEquals(savedTicket.getId(), ticketId);\r\n}\r\n```","```\r\n{\r\n  \"id\": {\r\n    \"venue\":\"Venue A\",\r\n    \"date\": \"2023-05-27\"\r\n  },\r\n  \"event\": \"Event 1\"\r\n}\r\n```","```\r\n{\r\n  \"id\": {\r\n    \"date\": \"2023-05-27\",\r\n    \"venue\":\"Venue A\"\r\n  },\r\n  \"event\": \"Event 1\"\r\n}\r\n```"]