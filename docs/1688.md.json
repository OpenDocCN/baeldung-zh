["```\r\npublic class Employee {\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n} \r\n```","```\r\nHashMap<String, Employee> map = new HashMap<>();\r\nEmployee emp1 = new Employee(\"John\");\r\nEmployee emp2 = new Employee(\"Norman\");\r\nmap.put(\"emp1\", emp1);\r\nmap.put(\"emp2\", emp2); \r\n```","```\r\nHashMap<String, Employee> shallowCopy = // shallow copy implementation\r\nassertThat(shallowCopy).isNotSameAs(map);\r\n```","```\r\nemp1.setFirstName(\"Johny\");\r\nassertThat(shallowCopy.get(\"emp1\")).isEqualTo(map.get(\"emp1\"));\r\n```","```\r\nHashMap<String, Employee> deepCopy = // deep copy implementation\r\n\r\nemp1.setFirstName(\"Johny\");\r\n\r\nassertThat(deepCopy.get(\"emp1\")).isNotEqualTo(map.get(\"emp1\")); \r\n```","```\r\nHashMap<String, Employee> shallowCopy = new HashMap<String, Employee>(originalMap); \r\n```","```\r\nHashMap<String, Employee> shallowCopy = originalMap.clone(); \r\n```","```\r\nHashMap<String, Employee> shallowCopy = new HashMap<String, Employee>();\r\nSet<Entry<String, Employee>> entries = originalMap.entrySet();\r\nfor (Map.Entry<String, Employee> mapEntry : entries) {\r\n    shallowCopy.put(mapEntry.getKey(), mapEntry.getValue());\r\n} \r\n```","```\r\nHashMap<String, Employee> shallowCopy = new HashMap<>();\r\nshallowCopy.putAll(originalMap); \r\n```","```\r\nSet<Entry<String, Employee>> entries = originalMap.entrySet();\r\nHashMap<String, Employee> shallowCopy = (HashMap<String, Employee>) entries.stream()\r\n  .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)); \r\n```","```\r\nMap<String, Employee> map = ImmutableMap.<String, Employee>builder()\r\n  .put(\"emp1\",emp1)\r\n  .put(\"emp2\",emp2)\r\n  .build();\r\nMap<String, Employee> shallowCopy = ImmutableMap.copyOf(map);\r\n\r\nassertThat(shallowCopy).isSameAs(map);\r\n```","```\r\npublic class Employee implements Serializable {\r\n    // implementation details\r\n}\r\n\r\nHashMap<String, Employee> deepCopy = SerializationUtils.clone(originalMap);\r\n```"]