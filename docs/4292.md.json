["```\r\n<dependency>\r\n    <groupId>org.yaml</groupId>\r\n    <artifactId>snakeyaml</artifactId>\r\n    <version>1.21</version>            \r\n</dependency>\r\n```","```\r\nYaml yaml = new Yaml();\r\n```","```\r\nfirstName: \"John\"\r\nlastName: \"Doe\"\r\nage: 20\r\n```","```\r\nYaml yaml = new Yaml();\r\nInputStream inputStream = this.getClass()\r\n  .getClassLoader()\r\n  .getResourceAsStream(\"customer.yaml\");\r\nMap<String, Object> obj = yaml.load(inputStream);\r\nSystem.out.println(obj);\r\n```","```\r\n{firstName=John, lastName=Doe, age=20}\r\n```","```\r\npublic class Customer {\r\n\r\n    private String firstName;\r\n    private String lastName;\r\n    private int age;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n!!com.baeldung.snakeyaml.Customer\r\nfirstName: \"John\"\r\nlastName: \"Doe\"\r\nage: 20\r\n```","```\r\nYaml yaml = new Yaml();\r\nInputStream inputStream = this.getClass()\r\n .getClassLoader()\r\n .getResourceAsStream(\"yaml/customer_with_type.yaml\");\r\nCustomer customer = yaml.load(inputStream); \r\n```","```\r\nYaml yaml = new Yaml(new Constructor(Customer.class));\r\n```","```\r\n1.0 -> Float\r\n42 -> Integer\r\n2009-03-30 -> Date\r\n```","```\r\n@Test\r\npublic void whenLoadYAML_thenLoadCorrectImplicitTypes() {\r\n   Yaml yaml = new Yaml();\r\n   Map<Object, Object> document = yaml.load(\"3.0: 2018-07-22\");\r\n\r\n   assertNotNull(document);\r\n   assertEquals(1, document.size());\r\n   assertTrue(document.containsKey(3.0d));   \r\n}\r\n```","```\r\nfirstName: \"John\"\r\nlastName: \"Doe\"\r\nage: 31\r\ncontactDetails:\r\n   - type: \"mobile\"\r\n     number: 123456789\r\n   - type: \"landline\"\r\n     number: 456786868\r\nhomeAddress:\r\n   line: \"Xyz, DEF Street\"\r\n   city: \"City Y\"\r\n   state: \"State Y\"\r\n   zip: 345657 \r\n```","```\r\npublic class Customer {\r\n    private String firstName;\r\n    private String lastName;\r\n    private int age;\r\n    private List<Contact> contactDetails;\r\n    private Address homeAddress;    \r\n    // getters and setters\r\n} \r\n```","```\r\npublic class Contact {\r\n    private String type;\r\n    private int number;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Address {\r\n    private String line;\r\n    private String city;\r\n    private String state;\r\n    private Integer zip;\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  whenLoadYAMLDocumentWithTopLevelClass_thenLoadCorrectJavaObjectWithNestedObjects() {\r\n\r\n    Yaml yaml = new Yaml(new Constructor(Customer.class));\r\n    InputStream inputStream = this.getClass()\r\n      .getClassLoader()\r\n      .getResourceAsStream(\"yaml/customer_with_contact_details_and_address.yaml\");\r\n    Customer customer = yaml.load(inputStream);\r\n\r\n    assertNotNull(customer);\r\n    assertEquals(\"John\", customer.getFirstName());\r\n    assertEquals(\"Doe\", customer.getLastName());\r\n    assertEquals(31, customer.getAge());\r\n    assertNotNull(customer.getContactDetails());\r\n    assertEquals(2, customer.getContactDetails().size());\r\n\r\n    assertEquals(\"mobile\", customer.getContactDetails()\r\n      .get(0)\r\n      .getType());\r\n    assertEquals(123456789, customer.getContactDetails()\r\n      .get(0)\r\n      .getNumber());\r\n    assertEquals(\"landline\", customer.getContactDetails()\r\n      .get(1)\r\n      .getType());\r\n    assertEquals(456786868, customer.getContactDetails()\r\n      .get(1)\r\n      .getNumber());\r\n    assertNotNull(customer.getHomeAddress());\r\n    assertEquals(\"Xyz, DEF Street\", customer.getHomeAddress()\r\n      .getLine());\r\n}\r\n```","```\r\nfirstName: \"John\"\r\nlastName: \"Doe\"\r\nage: 31\r\ncontactDetails:\r\n   - { type: \"mobile\", number: 123456789}\r\n   - { type: \"landline\", number: 123456789}\r\n```","```\r\nConstructor constructor = new Constructor(Customer.class);\r\nTypeDescription customTypeDescription = new TypeDescription(Customer.class);\r\ncustomTypeDescription.addPropertyParameters(\"contactDetails\", Contact.class);\r\nconstructor.addTypeDescription(customTypeDescription);\r\nYaml yaml = new Yaml(constructor);\r\n```","```\r\n---\r\nfirstName: \"John\"\r\nlastName: \"Doe\"\r\nage: 20\r\n---\r\nfirstName: \"Jack\"\r\nlastName: \"Jones\"\r\nage: 25\r\n```","```\r\n@Test\r\npublic void whenLoadMultipleYAMLDocuments_thenLoadCorrectJavaObjects() {\r\n    Yaml yaml = new Yaml(new Constructor(Customer.class));\r\n    InputStream inputStream = this.getClass()\r\n      .getClassLoader()\r\n      .getResourceAsStream(\"yaml/customers.yaml\");\r\n\r\n    int count = 0;\r\n    for (Object object : yaml.loadAll(inputStream)) {\r\n        count++;\r\n        assertTrue(object instanceof Customer);\r\n    }\r\n    assertEquals(2,count);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDumpMap_thenGenerateCorrectYAML() {\r\n    Map<String, Object> data = new LinkedHashMap<String, Object>();\r\n    data.put(\"name\", \"Silenthand Olleander\");\r\n    data.put(\"race\", \"Human\");\r\n    data.put(\"traits\", new String[] { \"ONE_HAND\", \"ONE_EYE\" });\r\n    Yaml yaml = new Yaml();\r\n    StringWriter writer = new StringWriter();\r\n    yaml.dump(data, writer);\r\n    String expectedYaml = \"name: Silenthand Olleander\\nrace: Human\\ntraits: [ONE_HAND, ONE_EYE]\\n\";\r\n\r\n    assertEquals(expectedYaml, writer.toString());\r\n}\r\n```","```\r\nname: Silenthand Olleander\r\nrace: Human\r\ntraits: [ONE_HAND, ONE_EYE]\r\n```","```\r\n@Test\r\npublic void whenDumpACustomType_thenGenerateCorrectYAML() {\r\n    Customer customer = new Customer();\r\n    customer.setAge(45);\r\n    customer.setFirstName(\"Greg\");\r\n    customer.setLastName(\"McDowell\");\r\n    Yaml yaml = new Yaml();\r\n    StringWriter writer = new StringWriter();\r\n    yaml.dump(customer, writer);        \r\n    String expectedYaml = \"!!com.baeldung.snakeyaml.Customer {age: 45, contactDetails: null, firstName: Greg,\\n  homeAddress: null, lastName: McDowell}\\n\";\r\n\r\n    assertEquals(expectedYaml, writer.toString());\r\n}\r\n```","```\r\nyaml.dumpAs(customer, Tag.MAP, null);\r\n```"]