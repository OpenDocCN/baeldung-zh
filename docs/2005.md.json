["```\r\n@GetMapping(\"/books/purchase/{id}\")\r\npublic ResponseEntity<BookDTO> purchase(@PathVariable Long id) {\r\n    Optional<BookDTO> bookDTO = bookService.purchase(id);\r\n    return ResponseUtil.wrapOrNotFound(bookDTO);\r\n}\r\n```","```\r\nOptional<BookDTO> purchase(Long id);\r\n```","```\r\n@Override\r\npublic Optional<BookDTO> purchase(Long id) {\r\n    Optional<BookDTO> bookDTO = findOne(id);\r\n    if (bookDTO.isPresent()) {\r\n        int quantity = bookDTO.get().getQuantity();\r\n        if (quantity > 0) {\r\n            bookDTO.get().setQuantity(quantity - 1);\r\n            Book book = bookMapper.toEntity(bookDTO.get());\r\n            book = bookRepository.save(book);\r\n            return bookDTO;\r\n        }\r\n        else {\r\n            throw new BadRequestAlertException(\"Book is not in stock\", \"book\", \"notinstock\");\r\n        }\r\n    }\r\n    return Optional.empty();\r\n}\r\n```","```\r\n.antMatchers(\"/api/books/purchase/**\").authenticated()\r\n```","```\r\npurchase(id: number): Observable<EntityResponseType> {\r\n    return this.http\r\n        .get<IBook>(`${this.resourceUrl}/purchase/${id}`, { observe: 'response' })\r\n        .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\r\n}\r\n```","```\r\npurchase(id: number) {\r\n    this.bookService.purchase(id).subscribe(\r\n        (res: HttpResponse<IBook>) => {\r\n            this.book = res.body;\r\n        },\r\n        (res: HttpErrorResponse) => console.log(res.message)\r\n    );\r\n}\r\n```","```\r\n<button type=\"button\"\r\n             class=\"btn btn-primary\"\r\n             (click)=\"purchase(book.id)\">\r\n    <span>Purchase</span>\r\n</button>\r\n```"]