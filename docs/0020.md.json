["```\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http\r\n      .formLogin()\r\n      .defaultSuccessUrl(\"/home/index.html\", true)\r\n      .and()\r\n    .authorizeRequests()\r\n      .antMatchers(\"/book-service/**\", \"/rating-service/**\", \"/login*\", \"/\")\r\n      .permitAll()\r\n      .antMatchers(\"/eureka/**\").hasRole(\"ADMIN\")\r\n      .anyRequest().authenticated()\r\n      .and()\r\n    .logout()\r\n      .and()\r\n    .csrf().disable();\r\n}\r\n```","```\r\n@RestController\r\npublic class AuthenticationController {\r\n\r\n    @GetMapping(\"/me\")\r\n    public Principal getMyUser(Principal principal) {\r\n        return principal;\r\n    }\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Book Rater Landing</title>\r\n</head>\r\n<body>\r\n    <h1>Book Rater</h1>\r\n    <p>So many great things about the books</p>\r\n    <a href=\"/login\">Login</a>\r\n</body>\r\n</html>\r\n```","```\r\nnpm install -g @angular/cli\r\n```","```\r\nng new ui\r\n```","```\r\nng serve\r\n```","```\r\nnpm install [[emailÂ protected]](/web/20220626203939/https://www.baeldung.com/cdn-cgi/l/email-protection) --save\r\n```","```\r\n\"styles\": [\r\n    \"styles.css\",\r\n    \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n],\r\n```","```\r\n\"outDir\": \"../../resources/static/home\",\r\n```","```\r\n<plugin>\r\n    <artifactId>maven-antrun-plugin</artifactId>\r\n    <executions>\r\n        <execution>\r\n            <phase>generate-resources</phase>\r\n            <configuration>\r\n                <tasks>\r\n                    <exec executable=\"cmd\" osfamily=\"windows\"\r\n                      dir=\"${project.basedir}/src/main/angular/ui\">\r\n                        <arg value=\"/c\"/>\r\n                        <arg value=\"ng\"/>\r\n                        <arg value=\"build\"/>\r\n                    </exec>\r\n                    <exec executable=\"/bin/sh\" osfamily=\"mac\"\r\n                      dir=\"${project.basedir}/src/main/angular/ui\">\r\n                        <arg value=\"-c\"/>\r\n                        <arg value=\"ng build\"/>\r\n                    </exec>\r\n                </tasks>\r\n            </configuration>\r\n            <goals>\r\n                <goal>run</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<nav class=\"navbar navbar-toggleable-md navbar-inverse fixed-top bg-inverse\">\r\n    <button class=\"navbar-toggler navbar-toggler-right\" type=\"button\" \r\n      data-toggle=\"collapse\" data-target=\"#navbarCollapse\" \r\n      aria-controls=\"navbarCollapse\" aria-expanded=\"false\" \r\n      aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <a class=\"navbar-brand\" href=\"#\">Book Rater \r\n        <span *ngIf=\"principal.isAdmin()\">Admin</span></a>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n    <ul class=\"navbar-nav mr-auto\">\r\n    </ul>\r\n    <button *ngIf=\"principal.authenticated\" type=\"button\" \r\n      class=\"btn btn-link\" (click)=\"onLogout()\">Logout</button>\r\n    </div>\r\n</nav>\r\n\r\n<div class=\"jumbotron\">\r\n    <div class=\"container\">\r\n        <h1>Book Rater App</h1>\r\n        <p *ngIf=\"!principal.authenticated\" class=\"lead\">\r\n        Anyone can view the books.\r\n        </p>\r\n        <p *ngIf=\"principal.authenticated && !principal.isAdmin()\" class=\"lead\">\r\n        Users can view and create ratings</p>\r\n        <p *ngIf=\"principal.isAdmin()\"  class=\"lead\">Admins can do anything!</p>\r\n    </div>\r\n</div>\r\n```","```\r\nimport {Component} from \"@angular/core\";\r\nimport {Principal} from \"./principal\";\r\nimport {Response} from \"@angular/http\";\r\nimport {Book} from \"./book\";\r\nimport {HttpService} from \"./http.service\";\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n    selectedBook: Book = null;\r\n    principal: Principal = new Principal(false, []);\r\n    loginFailed: boolean = false;\r\n\r\n    constructor(private httpService: HttpService){}\r\n\r\n    ngOnInit(): void {\r\n        this.httpService.me()\r\n          .subscribe((response: Response) => {\r\n              let principalJson = response.json();\r\n              this.principal = new Principal(principalJson.authenticated,\r\n              principalJson.authorities);\r\n          }, (error) => {\r\n              console.log(error);\r\n        });\r\n    }\r\n\r\n    onLogout() {\r\n        this.httpService.logout()\r\n          .subscribe((response: Response) => {\r\n              if (response.status === 200) {\r\n                  this.loginFailed = false;\r\n                  this.principal = new Principal(false, []);\r\n                  window.location.replace(response.url);\r\n              }\r\n           }, (error) => {\r\n               console.log(error);\r\n       });\r\n    }\r\n}\r\n```","```\r\nimport {Injectable} from \"@angular/core\";\r\nimport {Observable} from \"rxjs\";\r\nimport {Response, Http, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Book} from \"./book\";\r\nimport {Rating} from \"./rating\";\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n    constructor(private http: Http) { }\r\n\r\n    me(): Observable<Response> {\r\n        return this.http.get(\"/me\", this.makeOptions())\r\n    }\r\n\r\n    logout(): Observable<Response> {\r\n        return this.http.post(\"/logout\", '', this.makeOptions())\r\n    }\r\n\r\n    private makeOptions(): RequestOptions {\r\n        let headers = new Headers({'Content-Type': 'application/json'});\r\n        return new RequestOptions({headers: headers});\r\n    }\r\n}\r\n```","```\r\nproviders: [HttpService],\r\n```","```\r\nexport class Principal {\r\n    public authenticated: boolean;\r\n    public authorities: Authority[] = [];\r\n    public credentials: any;\r\n\r\n    constructor(authenticated: boolean, authorities: any[], credentials: any) {\r\n        this.authenticated = authenticated;\r\n        authorities.map(\r\n          auth => this.authorities.push(new Authority(auth.authority)))\r\n        this.credentials = credentials;\r\n  }\r\n\r\n    isAdmin() {\r\n        return this.authorities.some(\r\n          (auth: Authority) => auth.authority.indexOf('ADMIN') > -1)\r\n    }\r\n}\r\n\r\nexport class Authority {\r\n    public authority: String;\r\n\r\n    constructor(authority: String) {\r\n        this.authority = authority;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class ErrorPageConfig implements ErrorPageRegistrar {\r\n\r\n    @Override\r\n    public void registerErrorPages(ErrorPageRegistry registry) {\r\n        registry.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND,\r\n          \"/home/index.html\"));\r\n    }\r\n\r\n}\r\n```"]