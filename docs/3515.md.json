["```\r\nclass TaskEvenOdd implements Runnable {\r\n    private int max;\r\n    private Printer print;\r\n    private boolean isEvenNumber;\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public void run() {\r\n        int number = isEvenNumber ? 2 : 1;\r\n        while (number <= max) {\r\n            if (isEvenNumber) {\r\n                print.printEven(number);\r\n            } else {\r\n                print.printOdd(number);\r\n            }\r\n            number += 2;\r\n        }\r\n    }\r\n} \r\n```","```\r\nclass Printer {\r\n    private volatile boolean isOdd;\r\n\r\n    synchronized void printEven(int number) {\r\n        while (!isOdd) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }\r\n        System.out.println(Thread.currentThread().getName() + \":\" + number);\r\n        isOdd = false;\r\n        notify();\r\n    }\r\n\r\n    synchronized void printOdd(int number) {\r\n        while (isOdd) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt();\r\n            }\r\n        }\r\n        System.out.println(Thread.currentThread().getName() + \":\" + number);\r\n        isOdd = true;\r\n        notify();\r\n    }\r\n}\r\n```","```\r\npublic static void main(String... args) {\r\n    Printer print = new Printer();\r\n    Thread t1 = new Thread(new TaskEvenOdd(print, 10, false),\"Odd\");\r\n    Thread t2 = new Thread(new TaskEvenOdd(print, 10, true),\"Even\");\r\n    t1.start();\r\n    t2.start();\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    SharedPrinter sp = new SharedPrinter();\r\n    Thread odd = new Thread(new Odd(sp, 10),\"Odd\");\r\n    Thread even = new Thread(new Even(sp, 10),\"Even\");\r\n    odd.start();\r\n    even.start();\r\n}\r\n```","```\r\nclass SharedPrinter {\r\n\r\n    private Semaphore semEven = new Semaphore(0);\r\n    private Semaphore semOdd = new Semaphore(1);\r\n\r\n    void printEvenNum(int num) {\r\n        try {\r\n            semEven.acquire();\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        System.out.println(Thread.currentThread().getName() + num);\r\n        semOdd.release();\r\n    }\r\n\r\n    void printOddNum(int num) {\r\n        try {\r\n            semOdd.acquire();\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n        System.out.println(Thread.currentThread().getName() + num);\r\n        semEven.release();\r\n\r\n    }\r\n}\r\n\r\nclass Even implements Runnable {\r\n    private SharedPrinter sp;\r\n    private int max;\r\n\r\n    // standard constructor\r\n\r\n    @Override\r\n    public void run() {\r\n        for (int i = 2; i <= max; i = i + 2) {\r\n            sp.printEvenNum(i);\r\n        }\r\n    }\r\n}\r\n\r\nclass Odd implements Runnable {\r\n    private SharedPrinter sp;\r\n    private int max;\r\n\r\n    // standard constructors \r\n    @Override\r\n    public void run() {\r\n        for (int i = 1; i <= max; i = i + 2) {\r\n            sp.printOddNum(i);\r\n        }\r\n    }\r\n}\r\n```"]