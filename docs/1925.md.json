["```\r\npublic class SingletonRegistry {\r\n    private SingletonRegistry() {}\r\n\r\n    private static class SingletonRegistryHolder {\r\n        private static SingletonRegistry registry = new SingletonRegistry();\r\n    }\r\n\r\n    public static SingletonRegistry getInstance() {\r\n        return SingletonRegistryHolder.registry;\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\n@Singleton\r\npublic class SingletonRegistry {}\r\n```","```\r\n@Target(ElementType.TYPE)\r\npublic @interface Singleton {}\r\n```","```\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.14.8</version>\r\n</dependency>\r\n```","```\r\n<profiles>\r\n    <profile>\r\n        <id>default-tools.jar</id>\r\n            <activation>\r\n                <property>\r\n                    <name>java.vendor</name>\r\n                    <value>Oracle Corporation</value>\r\n                </property>\r\n            </activation>\r\n            <dependencies>\r\n                <dependency>\r\n                    <groupId>com.sun</groupId>\r\n                    <artifactId>tools</artifactId>\r\n                    <version>${java.version}</version>\r\n                    <scope>system</scope>\r\n                    <systemPath>${java.home}/../lib/tools.jar</systemPath>\r\n                </dependency>\r\n            </dependencies>\r\n    </profile>\r\n</profiles>\r\n```","```\r\npublic class SingletonJavacHandler extends JavacAnnotationHandler<Singleton> {\r\n    public void handle(\r\n      AnnotationValues<Singleton> annotation,\r\n      JCTree.JCAnnotation ast,\r\n      JavacNode annotationNode) {}\r\n}\r\n```","```\r\npublic void handle(\r\n  AnnotationValues<Singleton> annotation,\r\n  JCTree.JCAnnotation ast,\r\n  JavacNode annotationNode) {\r\n    Context context = annotationNode.getContext();\r\n    Javac8BasedLombokOptions options = Javac8BasedLombokOptions\r\n      .replaceWithDelombokOptions(context);\r\n    options.deleteLombokAnnotations();\r\n    JavacHandlerUtil\r\n      .deleteAnnotationIfNeccessary(annotationNode, Singleton.class);\r\n    JavacHandlerUtil\r\n      .deleteImportFromCompilationUnit(annotationNode, \"lombok.AccessLevel\");\r\n    JavacNode singletonClass = annotationNode.up();\r\n    JavacTreeMaker singletonClassTreeMaker = singletonClass.getTreeMaker();\r\n    addPrivateConstructor(singletonClass, singletonClassTreeMaker);\r\n\r\n    JavacNode holderInnerClass = addInnerClass(singletonClass, singletonClassTreeMaker);\r\n    addInstanceVar(singletonClass, singletonClassTreeMaker, holderInnerClass);\r\n    addFactoryMethod(singletonClass, singletonClassTreeMaker, holderInnerClass);\r\n}\r\n```","```\r\nprivate void addPrivateConstructor(\r\n  JavacNode singletonClass,\r\n  JavacTreeMaker singletonTM) {\r\n    JCTree.JCModifiers modifiers = singletonTM.Modifiers(Flags.PRIVATE);\r\n    JCTree.JCBlock block = singletonTM.Block(0L, nil());\r\n    JCTree.JCMethodDecl constructor = singletonTM\r\n      .MethodDef(\r\n        modifiers,\r\n        singletonClass.toName(\"<init>\"),\r\n        null, nil(), nil(), nil(), block, null);\r\n\r\n    JavacHandlerUtil.injectMethod(singletonClass, constructor);\r\n}\r\n```","```\r\nprivate JavacNode addInnerClass(\r\n  JavacNode singletonClass,\r\n  JavacTreeMaker singletonTM) {\r\n    JCTree.JCModifiers modifiers = singletonTM\r\n      .Modifiers(Flags.PRIVATE | Flags.STATIC);\r\n    String innerClassName = singletonClass.getName() + \"Holder\";\r\n    JCTree.JCClassDecl innerClassDecl = singletonTM\r\n      .ClassDef(modifiers, singletonClass.toName(innerClassName),\r\n      nil(), null, nil(), nil());\r\n    return JavacHandlerUtil.injectType(singletonClass, innerClassDecl);\r\n}\r\n```","```\r\nprivate void addInstanceVar(\r\n  JavacNode singletonClass,\r\n  JavacTreeMaker singletonClassTM,\r\n  JavacNode holderClass) {\r\n    JCTree.JCModifiers fieldMod = singletonClassTM\r\n      .Modifiers(Flags.PRIVATE | Flags.STATIC | Flags.FINAL);\r\n\r\n    JCTree.JCClassDecl singletonClassDecl\r\n      = (JCTree.JCClassDecl) singletonClass.get();\r\n    JCTree.JCIdent singletonClassType\r\n      = singletonClassTM.Ident(singletonClassDecl.name);\r\n\r\n    JCTree.JCNewClass newKeyword = singletonClassTM\r\n      .NewClass(null, nil(), singletonClassType, nil(), null);\r\n\r\n    JCTree.JCVariableDecl instanceVar = singletonClassTM\r\n      .VarDef(\r\n        fieldMod,\r\n        singletonClass.toName(\"INSTANCE\"),\r\n        singletonClassType,\r\n        newKeyword);\r\n    JavacHandlerUtil.injectField(holderClass, instanceVar);\r\n}\r\n```","```\r\nprivate void addFactoryMethod(\r\n  JavacNode singletonClass,\r\n  JavacTreeMaker singletonClassTreeMaker,\r\n  JavacNode holderInnerClass) {\r\n    JCTree.JCModifiers modifiers = singletonClassTreeMaker\r\n      .Modifiers(Flags.PUBLIC | Flags.STATIC);\r\n\r\n    JCTree.JCClassDecl singletonClassDecl\r\n      = (JCTree.JCClassDecl) singletonClass.get();\r\n    JCTree.JCIdent singletonClassType\r\n      = singletonClassTreeMaker.Ident(singletonClassDecl.name);\r\n\r\n    JCTree.JCBlock block\r\n      = addReturnBlock(singletonClassTreeMaker, holderInnerClass);\r\n\r\n    JCTree.JCMethodDecl factoryMethod = singletonClassTreeMaker\r\n      .MethodDef(\r\n        modifiers,\r\n        singletonClass.toName(\"getInstance\"),\r\n        singletonClassType, nil(), nil(), nil(), block, null);\r\n    JavacHandlerUtil.injectMethod(singletonClass, factoryMethod);\r\n}\r\n```","```\r\nprivate JCTree.JCBlock addReturnBlock(\r\n  JavacTreeMaker singletonClassTreeMaker,\r\n  JavacNode holderInnerClass) {\r\n\r\n    JCTree.JCClassDecl holderInnerClassDecl\r\n      = (JCTree.JCClassDecl) holderInnerClass.get();\r\n    JavacTreeMaker holderInnerClassTreeMaker\r\n      = holderInnerClass.getTreeMaker();\r\n    JCTree.JCIdent holderInnerClassType\r\n      = holderInnerClassTreeMaker.Ident(holderInnerClassDecl.name);\r\n\r\n    JCTree.JCFieldAccess instanceVarAccess = holderInnerClassTreeMaker\r\n      .Select(holderInnerClassType, holderInnerClass.toName(\"INSTANCE\"));\r\n    JCTree.JCReturn returnValue = singletonClassTreeMaker\r\n      .Return(instanceVarAccess);\r\n\r\n    ListBuffer<JCTree.JCStatement> statements = new ListBuffer<>();\r\n    statements.append(returnValue);\r\n\r\n    return singletonClassTreeMaker.Block(0L, statements.toList());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.kohsuke.metainf-services</groupId>\r\n    <artifactId>metainf-services</artifactId>\r\n    <version>1.8</version>\r\n</dependency>\r\n```","```\r\n@MetaInfServices(JavacAnnotationHandler.class)\r\npublic class SingletonJavacHandler extends JavacAnnotationHandler<Singleton> {}\r\n```","```\r\n<dependency>\r\n    <groupId>org.eclipse.jdt</groupId>\r\n    <artifactId>core</artifactId>\r\n    <version>3.3.0-v_771</version>\r\n</dependency>\r\n```","```\r\n@MetaInfServices(EclipseAnnotationHandler.class)\r\npublic class SingletonEclipseHandler\r\n  extends EclipseAnnotationHandler<Singleton> {\r\n    public void handle(\r\n      AnnotationValues<Singleton> annotation,\r\n      Annotation ast,\r\n      EclipseNode annotationNode) {}\r\n}\r\n```","```\r\npublic void handle(\r\n  AnnotationValues<Singleton> annotation,\r\n  Annotation ast,\r\n  EclipseNode annotationNode) {\r\n    EclipseHandlerUtil\r\n      .unboxAndRemoveAnnotationParameter(\r\n        ast,\r\n        \"onType\",\r\n        \"@Singleton(onType=\", annotationNode);\r\n    EclipseNode singletonClass = annotationNode.up();\r\n    TypeDeclaration singletonClassType\r\n      = (TypeDeclaration) singletonClass.get();\r\n\r\n    ConstructorDeclaration constructor\r\n      = addConstructor(singletonClass, singletonClassType);\r\n\r\n    TypeReference singletonTypeRef \r\n      = EclipseHandlerUtil.cloneSelfType(singletonClass, singletonClassType);\r\n\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(singletonClass.getName());\r\n    sb.append(\"Holder\");\r\n    String innerClassName = sb.toString();\r\n    TypeDeclaration innerClass\r\n      = new TypeDeclaration(singletonClassType.compilationResult);\r\n    innerClass.modifiers = AccPrivate | AccStatic;\r\n    innerClass.name = innerClassName.toCharArray();\r\n\r\n    FieldDeclaration instanceVar = addInstanceVar(\r\n      constructor,\r\n      singletonTypeRef,\r\n      innerClass);\r\n\r\n    FieldDeclaration[] declarations = new FieldDeclaration[]{instanceVar};\r\n    innerClass.fields = declarations;\r\n\r\n    EclipseHandlerUtil.injectType(singletonClass, innerClass);\r\n\r\n    addFactoryMethod(\r\n      singletonClass,\r\n      singletonClassType,\r\n      singletonTypeRef,\r\n      innerClass,\r\n      instanceVar);\r\n}\r\n```","```\r\nprivate ConstructorDeclaration addConstructor(\r\n  EclipseNode singletonClass,\r\n  TypeDeclaration astNode) {\r\n    ConstructorDeclaration constructor\r\n      = new ConstructorDeclaration(astNode.compilationResult);\r\n    constructor.modifiers = AccPrivate;\r\n    constructor.selector = astNode.name;\r\n\r\n    EclipseHandlerUtil.injectMethod(singletonClass, constructor);\r\n    return constructor;\r\n}\r\n```","```\r\nprivate FieldDeclaration addInstanceVar(\r\n  ConstructorDeclaration constructor,\r\n  TypeReference typeReference,\r\n  TypeDeclaration innerClass) {\r\n    FieldDeclaration field = new FieldDeclaration();\r\n    field.modifiers = AccPrivate | AccStatic | AccFinal;\r\n    field.name = \"INSTANCE\".toCharArray();\r\n    field.type = typeReference;\r\n\r\n    AllocationExpression exp = new AllocationExpression();\r\n    exp.type = typeReference;\r\n    exp.binding = constructor.binding;\r\n\r\n    field.initialization = exp;\r\n    return field;\r\n} \r\n```","```\r\nprivate void addFactoryMethod(\r\n  EclipseNode singletonClass,\r\n  TypeDeclaration astNode,\r\n  TypeReference typeReference,\r\n  TypeDeclaration innerClass,\r\n  FieldDeclaration field) {\r\n\r\n    MethodDeclaration factoryMethod\r\n      = new MethodDeclaration(astNode.compilationResult);\r\n    factoryMethod.modifiers \r\n      = AccStatic | ClassFileConstants.AccPublic;\r\n    factoryMethod.returnType = typeReference;\r\n    factoryMethod.sourceStart = astNode.sourceStart;\r\n    factoryMethod.sourceEnd = astNode.sourceEnd;\r\n    factoryMethod.selector = \"getInstance\".toCharArray();\r\n    factoryMethod.bits = ECLIPSE_DO_NOT_TOUCH_FLAG;\r\n\r\n    long pS = factoryMethod.sourceStart;\r\n    long pE = factoryMethod.sourceEnd;\r\n    long p = (long) pS << 32 | pE;\r\n\r\n    FieldReference ref = new FieldReference(field.name, p);\r\n    ref.receiver = new SingleNameReference(innerClass.name, p);\r\n\r\n    ReturnStatement statement\r\n      = new ReturnStatement(ref, astNode.sourceStart, astNode.sourceEnd);\r\n\r\n    factoryMethod.statements = new Statement[]{statement};\r\n\r\n    EclipseHandlerUtil.injectMethod(singletonClass, factoryMethod);\r\n}\r\n```","```\r\n-Xbootclasspath/a:singleton-1.0-SNAPSHOT.jar\r\n```"]