["```\r\nASTRA_DB_CLIENT_ID=clientIdHere\r\nASTRA_DB_CLIENT_SECRET=clientSecretHere\r\n```","```\r\nGOOGLE_CLIENT_ID=someRandomClientId\r\n```","```\r\n@Repository\r\npublic class CqlClient {\r\n  @Value(\"${ASTRA_DB_CLIENT_ID}\")\r\n  private String clientId;\r\n\r\n  @Value(\"${ASTRA_DB_CLIENT_SECRET}\")\r\n  private String clientSecret;\r\n\r\n  public List<Row> query(String cql, Object... binds) {\r\n    try (CqlSession session = connect()) {\r\n      var statement = session.prepare(cql);\r\n      var bound = statement.bind(binds);\r\n      var rs = session.execute(bound);\r\n\r\n      return rs.all();\r\n    }\r\n  }\r\n\r\n  private CqlSession connect() {\r\n    return CqlSession.builder()\r\n      .withCloudSecureConnectBundle(CqlClient.class.getResourceAsStream(\"/secure-connect-baeldung-avengers.zip\"))\r\n      .withAuthCredentials(clientId, clientSecret)\r\n      .build();\r\n  }\r\n} \r\n```","```\r\npublic record Location(String avenger, \r\n  Instant timestamp, \r\n  BigDecimal latitude, \r\n  BigDecimal longitude, \r\n  BigDecimal status) {} \r\n```","```\r\n@Service\r\npublic class MapService {\r\n  @Autowired\r\n  private CqlClient cqlClient;\r\n\r\n  // To be implemented.\r\n} \r\n```","```\r\npublic List<String> listAvengers() {\r\n  var rows = cqlClient.query(\"select distinct avenger from avengers.events\");\r\n\r\n  return rows.stream()\r\n    .map(row -> row.getString(\"avenger\"))\r\n    .sorted()\r\n    .collect(Collectors.toList());\r\n} \r\n```","```\r\npublic Map<String, List<Location>> getPaths(List<String> avengers, Instant start, Instant end) {\r\n  var rows = cqlClient.query(\"select avenger, timestamp, latitude, longitude, status from avengers.events where avenger in ? and timestamp >= ? and timestamp <= ?\", \r\n    avengers, start, end);\r\n\r\n  var result = rows.stream()\r\n    .map(row -> new Location(\r\n      row.getString(\"avenger\"), \r\n      row.getInstant(\"timestamp\"), \r\n      row.getBigDecimal(\"latitude\"), \r\n      row.getBigDecimal(\"longitude\"),\r\n      row.getBigDecimal(\"status\")))\r\n    .collect(Collectors.groupingBy(Location::avenger));\r\n\r\n  for (var locations : result.values()) {\r\n    Collections.sort(locations, Comparator.comparing(Location::timestamp));\r\n  }\r\n\r\n  return result;\r\n} \r\n```","```\r\n@Controller\r\npublic class MapController {\r\n  @Autowired\r\n  private MapService mapService;\r\n\r\n  @Value(\"${GOOGLE_CLIENT_ID}\")\r\n  private String googleClientId;\r\n\r\n  @ModelAttribute(\"googleClientId\")\r\n  String getGoogleClientId() {\r\n    return googleClientId;\r\n  }\r\n\r\n  @GetMapping(\"/map\")\r\n  public ModelAndView showMap(@RequestParam(name = \"avenger\", required = false) List<String> avenger,\r\n  @RequestParam(required = false) String start, @RequestParam(required = false) String end) throws Exception {\r\n    var result = new ModelAndView(\"map\");\r\n    result.addObject(\"inputStart\", start);\r\n    result.addObject(\"inputEnd\", end);\r\n    result.addObject(\"inputAvengers\", avenger);\r\n\r\n    result.addObject(\"avengers\", mapService.listAvengers());\r\n\r\n    if (avenger != null && !avenger.isEmpty() && start != null && end != null) {\r\n      var paths = mapService.getPaths(avenger, \r\n        LocalDateTime.parse(start).toInstant(ZoneOffset.UTC), \r\n        LocalDateTime.parse(end).toInstant(ZoneOffset.UTC));\r\n\r\n      result.addObject(\"paths\", paths);\r\n    }\r\n\r\n    return result;\r\n  }\r\n} \r\n```","```\r\n<!doctype html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\r\n  <link href=\"https://cdn.jsdelivr.net/npm/[[email protected]](/web/20221127034840/https://www.baeldung.com/cdn-cgi/l/email-protection)/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n    integrity=\"sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6\" crossorigin=\"anonymous\" />\r\n\r\n  <title>Avengers Status Map</title>\r\n</head>\r\n\r\n<body>\r\n  <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n    <div class=\"container-fluid\">\r\n      <a class=\"navbar-brand\" href=\"#\">Avengers Status Map</a>\r\n    </div>\r\n  </nav>\r\n\r\n  <div class=\"container-fluid mt-4\">\r\n    <div class=\"row\">\r\n      <div class=\"col-3\">\r\n        <form action=\"/map\" method=\"get\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"avenger\" class=\"form-label\">Avengers</label>\r\n            <select class=\"form-select\" multiple name=\"avenger\" id=\"avenger\" required>\r\n              <option th:each=\"avenger: ${avengers}\" th:text=\"${avenger}\" th:value=\"${avenger}\"\r\n                th:selected=\"${inputAvengers != null && inputAvengers.contains(avenger)}\"></option>\r\n            </select>\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"start\" class=\"form-label\">Start Time</label>\r\n            <input type=\"datetime-local\" class=\"form-control\" name=\"start\" id=\"start\" th:value=\"${inputStart}\"\r\n              required />\r\n          </div>\r\n          <div class=\"mb-3\">\r\n            <label for=\"end\" class=\"form-label\">End Time</label>\r\n            <input type=\"datetime-local\" class=\"form-control\" name=\"end\" id=\"end\" th:value=\"${inputEnd}\" required />\r\n          </div>\r\n          <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n        </form>\r\n      </div>\r\n      <div class=\"col-9\">\r\n        <div id=\"map\" style=\"width: 100%; height: 40em;\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <script src=\"https://cdn.jsdelivr.net/npm/[[email protected]](/web/20221127034840/https://www.baeldung.com/cdn-cgi/l/email-protection)/dist/js/bootstrap.bundle.min.js\"\r\n    integrity=\"sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf\" crossorigin=\"anonymous\">\r\n    </script>\r\n  <script type=\"text/javascript\" th:inline=\"javascript\">\r\n    /*<![CDATA[*/\r\n    let paths = /*[[${paths}]]*/ {};\r\n\r\n    let map;\r\n    let openInfoWindow;\r\n\r\n    function initMap() {\r\n      let averageLatitude = 0;\r\n      let averageLongitude = 0;\r\n\r\n      if (paths) {\r\n        let numPaths = 0;\r\n\r\n        for (const path of Object.values(paths)) {\r\n          let last = path[path.length - 1];\r\n          averageLatitude += last.latitude;\r\n          averageLongitude += last.longitude;\r\n          numPaths++;\r\n        }\r\n\r\n        averageLatitude /= numPaths;\r\n        averageLongitude /= numPaths;\r\n      } else {\r\n        // We had no data, so lets just tidy things up:\r\n        paths = {};\r\n        averageLatitude = 40.730610;\r\n        averageLongitude = -73.935242;\r\n      }\r\n\r\n      map = new google.maps.Map(document.getElementById(\"map\"), {\r\n        center: { lat: averageLatitude, lng: averageLongitude },\r\n        zoom: 16,\r\n      });\r\n\r\n      for (const avenger of Object.keys(paths)) {\r\n        const path = paths[avenger];\r\n        const color = getColor(avenger);\r\n\r\n        new google.maps.Polyline({\r\n          path: path.map(point => ({ lat: point.latitude, lng: point.longitude })),\r\n          geodesic: true,\r\n          strokeColor: color,\r\n          strokeOpacity: 1.0,\r\n          strokeWeight: 2,\r\n          map: map,\r\n        });\r\n\r\n        path.forEach((point, index) => {\r\n          const infowindow = new google.maps.InfoWindow({\r\n            content: \"<dl><dt>Avenger</dt><dd>\" + avenger + \"</dd><dt>Timestamp</dt><dd>\" + point.timestamp + \"</dd><dt>Status</dt><dd>\" + Math.round(point.status * 10000) / 100 + \"%</dd></dl>\"\r\n          });\r\n\r\n          const marker = new google.maps.Marker({\r\n            position: { lat: point.latitude, lng: point.longitude },\r\n            icon: {\r\n              path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW,\r\n              strokeColor: color,\r\n              scale: index == path.length - 1 ? 5 : 3\r\n            },\r\n            map: map,\r\n          });\r\n\r\n          marker.addListener(\"click\", () => {\r\n            if (openInfoWindow) {\r\n              openInfoWindow.close();\r\n              openInfoWindow = undefined;\r\n            }\r\n\r\n            openInfoWindow = infowindow;\r\n            infowindow.open({\r\n              anchor: marker,\r\n              map: map,\r\n              shouldFocus: false,\r\n            });\r\n          });\r\n\r\n        });\r\n      }\r\n    }\r\n\r\n    function getColor(avenger) {\r\n      return {\r\n        wanda: '#ff2400',\r\n        hulk: '#008000',\r\n        hawkeye: '#9370db',\r\n        falcon: '#000000'\r\n      }[avenger];\r\n    }\r\n\r\n    /*]]>*/\r\n  </script>\r\n\r\n  <script\r\n    th:src=\"${'https://maps.googleapis.com/maps/api/js?key=' + googleClientId + '&callback;=initMap&libraries;=&v;=weekly'}\"\r\n    async></script>\r\n</body>\r\n\r\n</html>\r\n```"]