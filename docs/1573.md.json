["```\r\npublic abstract class Vehicle {\r\n    private String make;\r\n    private String model;\r\n\r\n    protected Vehicle(String make, String model) {\r\n        this.make = make;\r\n        this.model = model;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n```","```\r\npublic class Car extends Vehicle {\r\n    private int seatingCapacity;\r\n    private double topSpeed;\r\n\r\n    public Car(String make, String model, int seatingCapacity, double topSpeed) {\r\n        super(make, model);\r\n        this.seatingCapacity = seatingCapacity;\r\n        this.topSpeed = topSpeed;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n```","```\r\npublic class Truck extends Vehicle {\r\n    private double payloadCapacity;\r\n\r\n    public Truck(String make, String model, double payloadCapacity) {\r\n        super(make, model);\r\n        this.payloadCapacity = payloadCapacity;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n```","```\r\npublic class Fleet {\r\n    private List<Vehicle> vehicles;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nObjectMapper.activateDefaultTyping(PolymorphicTypeValidator ptv, \r\n  ObjectMapper.DefaultTyping applicability, JsonTypeInfo.As includeAs)\r\n```","```\r\nPolymorphicTypeValidator ptv = BasicPolymorphicTypeValidator.builder()\r\n  .allowIfSubType(\"com.baeldung.jackson.inheritance\")\r\n  .allowIfSubType(\"java.util.ArrayList\")\r\n  .build();\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL);\r\n```","```\r\nCar car = new Car(\"Mercedes-Benz\", \"S500\", 5, 250.0);\r\nTruck truck = new Truck(\"Isuzu\", \"NQR\", 7500.0);\r\n\r\nList<Vehicle> vehicles = new ArrayList<>();\r\nvehicles.add(car);\r\nvehicles.add(truck);\r\n\r\nFleet serializedFleet = new Fleet();\r\nserializedFleet.setVehicles(vehicles);\r\n```","```\r\nString jsonDataString = mapper.writeValueAsString(serializedFleet);\r\n```","```\r\n{\r\n    \"vehicles\": \r\n    [\r\n        \"java.util.ArrayList\",\r\n        [\r\n            [\r\n                \"com.baeldung.jackson.inheritance.Car\",\r\n                {\r\n                    \"make\": \"Mercedes-Benz\",\r\n                    \"model\": \"S500\",\r\n                    \"seatingCapacity\": 5,\r\n                    \"topSpeed\": 250.0\r\n                }\r\n            ],\r\n\r\n            [\r\n                \"com.baeldung.jackson.inheritance.Truck\",\r\n                {\r\n                    \"make\": \"Isuzu\",\r\n                    \"model\": \"NQR\",\r\n                    \"payloadCapacity\": 7500.0\r\n                }\r\n            ]\r\n        ]\r\n    ]\r\n}\r\n```","```\r\nFleet deserializedFleet = mapper.readValue(jsonDataString, Fleet.class);\r\n```","```\r\nassertThat(deserializedFleet.getVehicles().get(0), instanceOf(Car.class));\r\nassertThat(deserializedFleet.getVehicles().get(1), instanceOf(Truck.class));\r\n```","```\r\n@JsonTypeInfo(\r\n  use = JsonTypeInfo.Id.NAME, \r\n  include = JsonTypeInfo.As.PROPERTY, \r\n  property = \"type\")\r\n@JsonSubTypes({ \r\n  @Type(value = Car.class, name = \"car\"), \r\n  @Type(value = Truck.class, name = \"truck\") \r\n})\r\npublic abstract class Vehicle {\r\n    // fields, constructors, getters and setters\r\n}\r\n```","```\r\nString jsonDataString = mapper.writeValueAsString(serializedFleet);\r\n```","```\r\n{\r\n    \"vehicles\": \r\n    [\r\n        {\r\n            \"type\": \"car\",\r\n            \"make\": \"Mercedes-Benz\",\r\n            \"model\": \"S500\",\r\n            \"seatingCapacity\": 5,\r\n            \"topSpeed\": 250.0\r\n        },\r\n\r\n        {\r\n            \"type\": \"truck\",\r\n            \"make\": \"Isuzu\",\r\n            \"model\": \"NQR\",\r\n            \"payloadCapacity\": 7500.0\r\n        }\r\n    ]\r\n}\r\n```","```\r\nFleet deserializedFleet = mapper.readValue(jsonDataString, Fleet.class);\r\n```","```\r\nassertThat(deserializedFleet.getVehicles().get(0), instanceOf(Car.class));\r\nassertThat(deserializedFleet.getVehicles().get(1), instanceOf(Truck.class));\r\n```","```\r\npublic abstract class Vehicle {\r\n    private String make;\r\n    private String model;\r\n\r\n    protected Vehicle(String make, String model) {\r\n        this.make = make;\r\n        this.model = model;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n\r\n@JsonIgnoreProperties({ \"model\", \"seatingCapacity\" })\r\npublic abstract class Car extends Vehicle {\r\n    private int seatingCapacity;\r\n\r\n    @JsonIgnore\r\n    private double topSpeed;\r\n\r\n    protected Car(String make, String model, int seatingCapacity, double topSpeed) {\r\n        super(make, model);\r\n        this.seatingCapacity = seatingCapacity;\r\n        this.topSpeed = topSpeed;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n\r\npublic class Sedan extends Car {\r\n    public Sedan(String make, String model, int seatingCapacity, double topSpeed) {\r\n        super(make, model, seatingCapacity, topSpeed);\r\n    }\r\n\r\n    // no-arg constructor\r\n}\r\n\r\npublic class Crossover extends Car {\r\n    private double towingCapacity;\r\n\r\n    public Crossover(String make, String model, int seatingCapacity, \r\n      double topSpeed, double towingCapacity) {\r\n        super(make, model, seatingCapacity, topSpeed);\r\n        this.towingCapacity = towingCapacity;\r\n    }\r\n\r\n    // no-arg constructor, getters and setters\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\n\r\nSedan sedan = new Sedan(\"Mercedes-Benz\", \"S500\", 5, 250.0);\r\nCrossover crossover = new Crossover(\"BMW\", \"X6\", 5, 250.0, 6000.0);\r\n\r\nList<Vehicle> vehicles = new ArrayList<>();\r\nvehicles.add(sedan);\r\nvehicles.add(crossover);\r\n\r\nString jsonDataString = mapper.writeValueAsString(vehicles);\r\n```","```\r\n[\r\n    {\r\n        \"make\": \"Mercedes-Benz\"\r\n    },\r\n    {\r\n        \"make\": \"BMW\",\r\n        \"towingCapacity\": 6000.0\r\n    }\r\n]\r\n```","```\r\nassertThat(jsonDataString, containsString(\"make\"));\r\nassertThat(jsonDataString, not(containsString(\"model\")));\r\nassertThat(jsonDataString, not(containsString(\"seatingCapacity\")));\r\nassertThat(jsonDataString, not(containsString(\"topSpeed\")));\r\nassertThat(jsonDataString, containsString(\"towingCapacity\"));\r\n```","```\r\npublic abstract class Car extends Vehicle {\r\n    private int seatingCapacity;\r\n    private double topSpeed;\r\n\r\n    // fields, constructors, getters and setters\r\n}\r\n```","```\r\nprivate abstract class CarMixIn {\r\n    @JsonIgnore\r\n    public String make;\r\n    @JsonIgnore\r\n    public String topSpeed;\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.addMixIn(Car.class, CarMixIn.class);\r\n```","```\r\nSedan sedan = new Sedan(\"Mercedes-Benz\", \"S500\", 5, 250.0);\r\nCrossover crossover = new Crossover(\"BMW\", \"X6\", 5, 250.0, 6000.0);\r\n\r\nList<Vehicle> vehicles = new ArrayList<>();\r\nvehicles.add(sedan);\r\nvehicles.add(crossover);\r\n\r\nString jsonDataString = mapper.writeValueAsString(vehicles);\r\n```","```\r\n[\r\n    {\r\n        \"model\": \"S500\",\r\n        \"seatingCapacity\": 5\r\n    },\r\n    {\r\n        \"model\": \"X6\",\r\n        \"seatingCapacity\": 5,\r\n        \"towingCapacity\": 6000.0\r\n    }\r\n]\r\n```","```\r\nassertThat(jsonDataString, not(containsString(\"make\")));\r\nassertThat(jsonDataString, containsString(\"model\"));\r\nassertThat(jsonDataString, containsString(\"seatingCapacity\"));\r\nassertThat(jsonDataString, not(containsString(\"topSpeed\")));\r\nassertThat(jsonDataString, containsString(\"towingCapacity\"));\r\n```","```\r\nclass IgnoranceIntrospector extends JacksonAnnotationIntrospector {\r\n    public boolean hasIgnoreMarker(AnnotatedMember m) {\r\n        return m.getDeclaringClass() == Vehicle.class && m.getName() == \"model\" \r\n          || m.getDeclaringClass() == Car.class \r\n          || m.getName() == \"towingCapacity\" \r\n          || super.hasIgnoreMarker(m);\r\n    }\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.setAnnotationIntrospector(new IgnoranceIntrospector());\r\n```","```\r\n[\r\n    {\r\n        \"make\": \"Mercedes-Benz\"\r\n    },\r\n    {\r\n        \"make\": \"BMW\"\r\n    }\r\n]\r\n```","```\r\nassertThat(jsonDataString, containsString(\"make\"));\r\nassertThat(jsonDataString, not(containsString(\"model\")));\r\nassertThat(jsonDataString, not(containsString(\"seatingCapacity\")));\r\nassertThat(jsonDataString, not(containsString(\"topSpeed\")));\r\nassertThat(jsonDataString, not(containsString(\"towingCapacity\")));\r\n```","```\r\npublic class Car extends Vehicle {\r\n    @JsonIgnore\r\n    private int seatingCapacity;\r\n\r\n    @JsonIgnore\r\n    private double topSpeed;\r\n\r\n    // constructors, getters and setters\r\n}\r\n\r\npublic class Truck extends Vehicle {\r\n    @JsonIgnore\r\n    private double payloadCapacity;\r\n\r\n    // constructors, getters and setters\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\n\r\nCar car = new Car(\"Mercedes-Benz\", \"S500\", 5, 250.0);\r\nTruck truck = mapper.convertValue(car, Truck.class);\r\n\r\nassertEquals(\"Mercedes-Benz\", truck.getMake());\r\nassertEquals(\"S500\", truck.getModel());\r\n```","```\r\npublic class Car extends Vehicle {\r\n\r\n    @JsonCreator\r\n    public Car(\r\n      @JsonProperty(\"make\") String make, \r\n      @JsonProperty(\"model\") String model, \r\n      @JsonProperty(\"seating\") int seatingCapacity, \r\n      @JsonProperty(\"topSpeed\") double topSpeed) {\r\n        super(make, model);\r\n        this.seatingCapacity = seatingCapacity;\r\n            this.topSpeed = topSpeed;\r\n    }\r\n\r\n    // fields, getters and setters\r\n}\r\n\r\npublic class Truck extends Vehicle {\r\n\r\n    @JsonCreator\r\n    public Truck(\r\n      @JsonProperty(\"make\") String make, \r\n      @JsonProperty(\"model\") String model, \r\n      @JsonProperty(\"payload\") double payloadCapacity) {\r\n        super(make, model);\r\n        this.payloadCapacity = payloadCapacity;\r\n    }\r\n\r\n    // fields, getters and setters\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.enableDefaultTyping();\r\n\r\nCar car = new Car(\"Mercedes-Benz\", \"S500\", 5, 250.0);\r\nTruck truck = new Truck(\"Isuzu\", \"NQR\", 7500.0);\r\n\r\nList<Vehicle> vehicles = new ArrayList<>();\r\nvehicles.add(car);\r\nvehicles.add(truck);\r\n\r\nFleet serializedFleet = new Fleet();\r\nserializedFleet.setVehicles(vehicles);\r\n\r\nString jsonDataString = mapper.writeValueAsString(serializedFleet);\r\nmapper.readValue(jsonDataString, Fleet.class);\r\n```"]