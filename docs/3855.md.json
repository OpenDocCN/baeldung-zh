["```\r\npublic class Person {\r\n\r\n    private String name = \"John\";\r\n    private byte age = 30;\r\n    private short uidNumber = 5555;\r\n    private int pinCode = 452002;\r\n    private long contactNumber = 123456789L;\r\n    private float height = 6.1242f;\r\n    private double weight = 75.2564;\r\n    private char gender = 'M';\r\n    private boolean active = true;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nPerson person = new Person(); \r\nField nameField = person.getClass().getDeclaredField(\"name\"); \r\nnameField.setAccessible(true);\r\n```","```\r\n@Test\r\npublic void whenGetIntegerFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field ageField = person.getClass().getDeclaredField(\"age\");\r\n    ageField.setAccessible(true);\r\n\r\n    byte age = ageField.getByte(person);\r\n    Assertions.assertEquals(30, age);\r\n\r\n    Field uidNumberField = person.getClass().getDeclaredField(\"uidNumber\");\r\n    uidNumberField.setAccessible(true);\r\n\r\n    short uidNumber = uidNumberField.getShort(person);\r\n    Assertions.assertEquals(5555, uidNumber);\r\n\r\n    Field pinCodeField = person.getClass().getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    int pinCode = pinCodeField.getInt(person);\r\n    Assertions.assertEquals(452002, pinCode);\r\n\r\n    Field contactNumberField = person.getClass().getDeclaredField(\"contactNumber\");\r\n    contactNumberField.setAccessible(true);\r\n\r\n    long contactNumber = contactNumberField.getLong(person);\r\n    Assertions.assertEquals(123456789L, contactNumber);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoAutoboxing_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field pinCodeField = person.getClass().getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    Integer pinCode = pinCodeField.getInt(person);\r\n    Assertions.assertEquals(452002, pinCode);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoWidening_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field pinCodeField = person.getClass().getDeclaredField(\"pinCode\");\r\n    pinCodeField.setAccessible(true);\r\n\r\n    Long pinCode = pinCodeField.getLong(person);\r\n    Assertions.assertEquals(452002L, pinCode);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetFloatingTypeFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field heightField = person.getClass().getDeclaredField(\"height\");\r\n    heightField.setAccessible(true);\r\n\r\n    float height = heightField.getFloat(person);\r\n    Assertions.assertEquals(6.1242f, height);\r\n\r\n    Field weightField = person.getClass().getDeclaredField(\"weight\");\r\n    weightField.setAccessible(true);\r\n\r\n    double weight = weightField.getDouble(person);\r\n    Assertions.assertEquals(75.2564, weight);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetCharacterFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field genderField = person.getClass().getDeclaredField(\"gender\");\r\n    genderField.setAccessible(true);\r\n\r\n    char gender = genderField.getChar(person);\r\n    Assertions.assertEquals('M', gender);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetBooleanFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field activeField = person.getClass().getDeclaredField(\"active\");\r\n    activeField.setAccessible(true);\r\n\r\n    boolean active = activeField.getBoolean(person);\r\n    Assertions.assertTrue(active);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetObjectFields_thenSuccess() \r\n  throws Exception {\r\n    Person person = new Person();\r\n\r\n    Field nameField = person.getClass().getDeclaredField(\"name\");\r\n    nameField.setAccessible(true);\r\n\r\n    String name = (String) nameField.get(person);\r\n    Assertions.assertEquals(\"John\", name);\r\n}\r\n```","```\r\n@Test\r\npublic void givenInt_whenSetStringField_thenIllegalArgumentException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n    Field nameField = person.getClass().getDeclaredField(\"name\");\r\n    nameField.setAccessible(true);\r\n\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> nameField.getInt(person));\r\n}\r\n```","```\r\n@Test\r\npublic void givenInt_whenGetLongField_thenIllegalArgumentException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n    Field contactNumberField = person.getClass().getDeclaredField(\"contactNumber\");\r\n    contactNumberField.setAccessible(true);\r\n\r\n    Assertions.assertThrows(IllegalArgumentException.class, () -> contactNumberField.getInt(person));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFieldNotSetAccessible_thenIllegalAccessException() \r\n  throws Exception {\r\n    Person person = new Person();\r\n    Field nameField = person.getClass().getDeclaredField(\"name\");\r\n\r\n    Assertions.assertThrows(IllegalAccessException.class, () -> nameField.get(person));\r\n}\r\n```","```\r\nAssertions.assertThrows(NoSuchFieldException.class,\r\n  () -> person.getClass().getDeclaredField(\"firstName\"));\r\n```","```\r\nAssertions.assertThrows(NullPointerException.class,\r\n  () -> person.getClass().getDeclaredField(null));\r\n```"]