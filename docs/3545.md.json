["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n        <versionId>2.2.2.RELEASE</versionId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n        <versionId>2.2.2.RELEASE</versionId>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@Document(collection = \"database_sequences\")\r\npublic class DatabaseSequence {\r\n\r\n    @Id\r\n    private String id;\r\n\r\n    private long seq;\r\n\r\n    //getters and setters omitted\r\n}\r\n```","```\r\n@Document(collection = \"users\")\r\npublic class User {\r\n\r\n    @Transient\r\n    public static final String SEQUENCE_NAME = \"users_sequence\";\r\n\r\n    @Id\r\n    private long id;\r\n\r\n    private String email;\r\n\r\n    //getters and setters omitted\r\n}\r\n```","```\r\npublic long generateSequence(String seqName) {\r\n    DatabaseSequence counter = mongoOperations.findAndModify(query(where(\"_id\").is(seqName)),\r\n      new Update().inc(\"seq\",1), options().returnNew(true).upsert(true),\r\n      DatabaseSequence.class);\r\n    return !Objects.isNull(counter) ? counter.getSeq() : 1;\r\n}\r\n```","```\r\nUser user = new User();\r\nuser.setId(sequenceGenerator.generateSequence(User.SEQUENCE_NAME));\r\nuser.setEmail(\"[[emailÂ protected]](/web/20220526050715/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\nuserRepository.save(user);\r\n```","```\r\nList<User> storedUsers = userRepository.findAll();\r\nstoredUsers.forEach(System.out::println);\r\n```","```\r\n@Override\r\npublic void onBeforeConvert(BeforeConvertEvent<User> event) {\r\n    if (event.getSource().getId() < 1) {\r\n        event.getSource().setId(sequenceGenerator.generateSequence(User.SEQUENCE_NAME));\r\n    }\r\n}\r\n```"]