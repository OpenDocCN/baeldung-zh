["```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>okhttp</artifactId>\r\n    <version>4.9.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>mockwebserver</artifactId>\r\n    <version>4.9.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class BinaryFileDownloader implements AutoCloseable {\r\n\r\n    private final OkHttpClient client;\r\n    private final BinaryFileWriter writer;\r\n\r\n    public BinaryFileDownloader(OkHttpClient client, BinaryFileWriter writer) {\r\n        this.client = client;\r\n        this.writer = writer;\r\n    }\r\n}\r\n```","```\r\npublic long download(String url) throws IOException {\r\n    Request request = new Request.Builder().url(url).build();\r\n    Response response = client.newCall(request).execute();\r\n    ResponseBody responseBody = response.body();\r\n    if (responseBody == null) {\r\n        throw new IllegalStateException(\"Response doesn't contain a file\");\r\n    }\r\n    double length = Double.parseDouble(Objects.requireNonNull(response.header(CONTENT_LENGTH, \"1\")));\r\n    return writer.write(responseBody.byteStream(), length);\r\n}\r\n```","```\r\npublic class BinaryFileWriter implements AutoCloseable {\r\n\r\n    private final OutputStream outputStream;\r\n\r\n    public BinaryFileWriter(OutputStream outputStream) {\r\n        this.outputStream = outputStream;\r\n    }\r\n}\r\n```","```\r\npublic long write(InputStream inputStream) throws IOException {\r\n    try (BufferedInputStream input = new BufferedInputStream(inputStream)) {\r\n        byte[] dataBuffer = new byte[CHUNK_SIZE];\r\n        int readBytes;\r\n        long totalBytes = 0;\r\n        while ((readBytes = input.read(dataBuffer)) != -1) {\r\n            totalBytes += readBytes;\r\n            outputStream.write(dataBuffer, 0, readBytes);\r\n        }\r\n        return totalBytes;\r\n    }\r\n}\r\n```","```\r\npublic interface ProgressCallback {\r\n    void onProgress(double progress);\r\n}\r\n```","```\r\npublic class BinaryFileWriter implements AutoCloseable {\r\n    private final ProgressCallback progressCallback;\r\n    public long write(InputStream inputStream, double length) {\r\n        //...\r\n        progressCallback.onProgress(totalBytes / length * 100.0);\r\n    }\r\n}\r\n```","```\r\npublic class BinaryFileDownloader {\r\n    public long download(String url) {\r\n        double length = getResponseLength(response);\r\n        return write(responseBody, length);\r\n    }\r\n    private double getResponseLength(Response response) {\r\n        return Double.parseDouble(Objects.requireNonNull(response.header(CONTENT_LENGTH, \"1\")));\r\n    }\r\n}\r\n```"]