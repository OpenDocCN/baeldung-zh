["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jdbc</artifactId>\r\n    <version>2.1.8.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jdbi</groupId>\r\n    <artifactId>jdbi3-spring4</artifactId>\r\n    <version>3.9.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jdbi</groupId>\r\n    <artifactId>jdbi3-sqlobject</artifactId>\r\n    <version>3.9.1</version> \r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.199</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class JdbiConfiguration {\r\n    @Bean\r\n    public Jdbi jdbi(DataSource ds, List<JdbiPlugin> jdbiPlugins, List<RowMapper<?>> rowMappers) {        \r\n        TransactionAwareDataSourceProxy proxy = new TransactionAwareDataSourceProxy(ds);        \r\n        Jdbi jdbi = Jdbi.create(proxy);\r\n        jdbiPlugins.forEach(plugin -> jdbi.installPlugin(plugin));\r\n        rowMappers.forEach(mapper -> jdbi.registerRowMapper(mapper));       \r\n        return jdbi;\r\n    }\r\n}\r\n```","```\r\npublic class CarMaker {\r\n    private Long id;\r\n    private String name;\r\n    private List<CarModel> models;\r\n    // getters and setters ...\r\n}\r\n\r\npublic class CarModel {\r\n    private Long id;\r\n    private String name;\r\n    private Integer year;\r\n    private String sku;\r\n    private Long makerId;\r\n    // getters and setters ...\r\n} \r\n```","```\r\n@UseClasspathSqlLocator\r\npublic interface CarMakerDao {\r\n    @SqlUpdate\r\n    @GetGeneratedKeys\r\n    Long insert(@BindBean CarMaker carMaker);\r\n\r\n    @SqlBatch(\"insert\")\r\n    @GetGeneratedKeys\r\n    List<Long> bulkInsert(@BindBean List<CarMaker> carMakers);\r\n\r\n    @SqlQuery\r\n    CarMaker findById(Long id);\r\n}\r\n\r\n@UseClasspathSqlLocator\r\npublic interface CarModelDao {    \r\n    @SqlUpdate\r\n    @GetGeneratedKeys\r\n    Long insert(@BindBean CarModel carModel);\r\n\r\n    @SqlBatch(\"insert\")\r\n    @GetGeneratedKeys\r\n    List<Long> bulkInsert(@BindBean List<CarModel> models);\r\n\r\n    @SqlQuery\r\n    CarModel findByMakerIdAndSku(@Bind(\"makerId\") Long makerId, @Bind(\"sku\") String sku );\r\n}\r\n```","```\r\n@Bean\r\npublic CarMakerDao carMakerDao(Jdbi jdbi) {        \r\n    return jdbi.onDemand(CarMakerDao.class);       \r\n}\r\n\r\n@Bean\r\npublic CarModelDao carModelDao(Jdbi jdbi) {\r\n    return jdbi.onDemand(CarModelDao.class);\r\n} \r\n```","```\r\n@Service\r\npublic class CarMakerService {\r\n\r\n    private CarMakerDao carMakerDao;\r\n    private CarModelDao carModelDao;\r\n\r\n    public CarMakerService(CarMakerDao carMakerDao,CarModelDao carModelDao) {        \r\n        this.carMakerDao = carMakerDao;\r\n        this.carModelDao = carModelDao;\r\n    }    \r\n\r\n    @Transactional\r\n    public int bulkInsert(CarMaker carMaker) {\r\n        Long carMakerId;\r\n        if (carMaker.getId() == null ) {\r\n            carMakerId = carMakerDao.insert(carMaker);\r\n            carMaker.setId(carMakerId);\r\n        }\r\n        carMaker.getModels().forEach(m -> {\r\n            m.setMakerId(carMaker.getId());\r\n            carModelDao.insert(m);\r\n        });                \r\n        return carMaker.getModels().size();\r\n    }\r\n} \r\n```"]