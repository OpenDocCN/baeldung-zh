["```\r\n<dependency>\r\n    <groupId>com.github.seancfoley</groupId>\r\n    <artifactId>ipaddress</artifactId>\r\n    <version>5.3.3</version>\r\n</dependency>\r\n```","```\r\npublic static boolean checkIPIsInGivenRange (String inputIP, String rangeStartIP, String rangeEndIP) \r\n  throws AddressStringException {\r\n    IPAddress startIPAddress = new IPAddressString(rangeStartIP).getAddress();\r\n    IPAddress endIPAddress = new IPAddressString(rangeEndIP).getAddress();\r\n    IPAddressSeqRange ipRange = startIPAddress.toSequentialRange(endIPAddress);\r\n    IPAddress inputIPAddress = new IPAddressString(inputIP).toAddress();\r\n\r\n    return ipRange.contains(inputIPAddress);\r\n}\r\n```","```\r\n@Test\r\nvoid givenIPv4Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPIsInGivenRange(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv6Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPIsInGivenRange(\r\n      \"2001:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPIsInGivenRange(\r\n      \"2002:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.jgonian</groupId>\r\n    <artifactId>commons-ip-math</artifactId>\r\n    <version>1.32</version>\r\n</dependency> \r\n```","```\r\npublic static boolean checkIPv4IsInRange (String inputIP, String rangeStartIP, String rangeEndIP) {\r\n    Ipv4 startIPAddress = Ipv4.of(rangeStartIP);\r\n    Ipv4 endIPAddress = Ipv4.of(rangeEndIP);\r\n    Ipv4Range ipRange = Ipv4Range.from(startIPAddress).to(endIPAddress);\r\n    Ipv4 inputIPAddress = Ipv4.of(inputIP);\r\n    return ipRange.contains(inputIPAddress);\r\n}\r\n```","```\r\n@Test\r\nvoid givenIPv4Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPv4IsInRange(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPv4IsInRange(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n```","```\r\npublic static boolean checkIPv6IsInRange (String inputIP, String rangeStartIP, String rangeEndIP) {\r\n    Ipv6 startIPAddress = Ipv6.of(rangeStartIP);\r\n    Ipv6 endIPAddress = Ipv6.of(rangeEndIP);\r\n    Ipv6Range ipRange = Ipv6Range.from(startIPAddress).to(endIPAddress);\r\n    Ipv6 inputIPAddress = Ipv6.of(inputIP);\r\n    return ipRange.contains(inputIPAddress);\r\n}\r\n```","```\r\n@Test\r\nvoid givenIPv6Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPv6IsInRange(\r\n      \"2001:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPv6IsInRange(\r\n      \"2002:db8:85a3::8a03:a:b\", \"2001:db8:85a3::8a00:ff:ffff\", \"2001:db8:85a3::8a2e:370:7334\"));\r\n}\r\n```","```\r\nlong ipToLongInt (InetAddress ipAddress) {\r\n    long resultIP = 0;\r\n    byte[] ipAddressOctets = ipAddress.getAddress();\r\n\r\n    for (byte octet : ipAddressOctets) {\r\n        resultIP <<= 8;\r\n        resultIP |= octet & 0xFF;\r\n    }\r\n    return resultIP;\r\n}\r\n```","```\r\npublic static boolean checkIPv4IsInRangeByConvertingToInt (String inputIP, String rangeStartIP, String rangeEndIP) \r\n  throws UnknownHostException {\r\n    long startIPAddress = ipToLongInt(InetAddress.getByName(rangeStartIP));\r\n    long endIPAddress = ipToLongInt(InetAddress.getByName(rangeEndIP));\r\n    long inputIPAddress = ipToLongInt(InetAddress.getByName(inputIP));\r\n\r\n    return (inputIPAddress >= startIPAddress && inputIPAddress <= endIPAddress);\r\n}\r\n```","```\r\n@Test\r\nvoid givenIPv4Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPv4IsInRangeByConvertingToInt(\"192.220.3.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n\r\n@Test\r\nvoid givenIPv4Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPv4IsInRangeByConvertingToInt(\"192.200.0.0\", \"192.210.0.0\", \"192.255.0.0\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.googlecode.java-ipv6</groupId>\r\n    <artifactId>java-ipv6</artifactId>\r\n    <version>0.17</version>\r\n</dependency> \r\n```","```\r\npublic static boolean checkIPv6IsInRangeByIPv6library (String inputIP, String rangeStartIP, String rangeEndIP) {\r\n    IPv6Address startIPAddress = IPv6Address.fromString(rangeStartIP);\r\n    IPv6Address endIPAddress = IPv6Address.fromString(rangeEndIP);\r\n    IPv6AddressRange ipRange = IPv6AddressRange.fromFirstAndLast(startIPAddress, endIPAddress);\r\n    IPv6Address inputIPAddress = IPv6Address.fromString(inputIP);\r\n    return ipRange.contains(inputIPAddress);\r\n}\r\n```","```\r\n@Test\r\nvoid givenIPv6Addresses_whenIsInRange_thenReturnsTrue() throws Exception {\r\n    assertTrue(IPWithGivenRangeCheck.checkIPv6IsInRangeByIPv6library(\r\n      \"fe80::226:2dff:fefa:dcba\",\r\n      \"fe80::226:2dff:fefa:cd1f\",\r\n      \"fe80::226:2dff:fefa:ffff\"\r\n    ));\r\n}\r\n\r\n@Test\r\nvoid givenIPv6Addresses_whenIsNotInRange_thenReturnsFalse() throws Exception {\r\n    assertFalse(IPWithGivenRangeCheck.checkIPv6IsInRangeByIPv6library(\r\n      \"2002:db8:85a3::8a03:a:b\",\r\n      \"2001:db8:85a3::8a00:ff:ffff\",\r\n      \"2001:db8:85a3::8a2e:370:7334\"\r\n    ));\r\n}\r\n```"]