["```\r\nSupplier<String> memoizedSupplier = Suppliers.memoize(\r\n  CostlySupplier::generateBigNumber);\r\n```","```\r\nSupplier<String> memoizedSupplier = Suppliers.memoizeWithExpiration(\r\n  CostlySupplier::generateBigNumber, 5, TimeUnit.SECONDS);\r\n```","```\r\npublic class CostlySupplier {\r\n    private static BigInteger generateBigNumber() {\r\n        try {\r\n            TimeUnit.SECONDS.sleep(2);\r\n        } catch (InterruptedException e) {}\r\n        return new BigInteger(\"12345\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenMemoizedSupplier_whenGet_thenSubsequentGetsAreFast() {\r\n    Supplier<BigInteger> memoizedSupplier; \r\n    memoizedSupplier = Suppliers.memoize(CostlySupplier::generateBigNumber);\r\n\r\n    BigInteger expectedValue = new BigInteger(\"12345\");\r\n    assertSupplierGetExecutionResultAndDuration(\r\n      memoizedSupplier, expectedValue, 2000D);\r\n    assertSupplierGetExecutionResultAndDuration(\r\n      memoizedSupplier, expectedValue, 0D);\r\n    assertSupplierGetExecutionResultAndDuration(\r\n      memoizedSupplier, expectedValue, 0D);\r\n}\r\n\r\nprivate <T> void assertSupplierGetExecutionResultAndDuration(\r\n  Supplier<T> supplier, T expectedValue, double expectedDurationInMs) {\r\n    Instant start = Instant.now();\r\n    T value = supplier.get();\r\n    Long durationInMs = Duration.between(start, Instant.now()).toMillis();\r\n    double marginOfErrorInMs = 100D;\r\n\r\n    assertThat(value, is(equalTo(expectedValue)));\r\n    assertThat(\r\n      durationInMs.doubleValue(), \r\n      is(closeTo(expectedDurationInMs, marginOfErrorInMs)));\r\n}\r\n```","```\r\nLoadingCache<Integer, BigInteger> memo = CacheBuilder.newBuilder()\r\n  .build(CacheLoader.from(FibonacciSequence::getFibonacciNumber));\r\n```","```\r\nLoadingCache<Integer, BigInteger> memo = CacheBuilder.newBuilder()\r\n  .expireAfterAccess(2, TimeUnit.SECONDS)\r\n  .build(CacheLoader.from(Fibonacci::getFibonacciNumber));\r\n```","```\r\npublic static BigInteger getFibonacciNumber(int n) {\r\n    if (n == 0) {\r\n        return BigInteger.ZERO;\r\n    } else if (n == 1) {\r\n        return BigInteger.ONE;\r\n    } else {\r\n        return getFibonacciNumber(n - 1).add(getFibonacciNumber(n - 2));\r\n    }\r\n}\r\n```","```\r\npublic class FibonacciSequence {\r\n    private static LoadingCache<Integer, BigInteger> memo = CacheBuilder.newBuilder()\r\n      .maximumSize(100)\r\n      .build(CacheLoader.from(FibonacciSequence::getFibonacciNumber));\r\n\r\n    public static BigInteger getFibonacciNumber(int n) {\r\n        if (n == 0) {\r\n            return BigInteger.ZERO;\r\n        } else if (n == 1) {\r\n            return BigInteger.ONE;\r\n        } else {\r\n            return memo.getUnchecked(n - 1).add(memo.getUnchecked(n - 2));\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic static BigInteger getFactorial(int n) {\r\n    if (n == 0) {\r\n        return BigInteger.ONE;\r\n    } else {\r\n        return BigInteger.valueOf(n).multiply(getFactorial(n - 1));\r\n    }\r\n}\r\n```","```\r\npublic class Factorial {\r\n    private static LoadingCache<Integer, BigInteger> memo = CacheBuilder.newBuilder()\r\n      .build(CacheLoader.from(Factorial::getFactorial));\r\n\r\n    public static BigInteger getFactorial(int n) {\r\n        if (n == 0) {\r\n            return BigInteger.ONE;\r\n        } else {\r\n            return BigInteger.valueOf(n).multiply(memo.getUnchecked(n - 1));\r\n        }\r\n    }\r\n}\r\n```"]