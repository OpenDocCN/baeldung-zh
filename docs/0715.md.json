["```\r\n<dependency>\r\n    <groupId>commons-dbutils</groupId>\r\n    <artifactId>commons-dbutils</artifactId>\r\n    <version>1.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.196</version>\r\n</dependency>\r\n```","```\r\nCREATE TABLE employee(\r\n    id int NOT NULL PRIMARY KEY auto_increment,\r\n    firstname varchar(255),\r\n    lastname varchar(255),\r\n    salary double,\r\n    hireddate date,\r\n);\r\n\r\nCREATE TABLE email(\r\n    id int NOT NULL PRIMARY KEY auto_increment,\r\n    employeeid int,\r\n    address varchar(255)\r\n);\r\n\r\nINSERT INTO employee (firstname,lastname,salary,hireddate)\r\n  VALUES ('John', 'Doe', 10000.10, to_date('01-01-2001','dd-mm-yyyy'));\r\n// ...\r\nINSERT INTO email (employeeid,address)\r\n  VALUES (1, '[[emailÂ protected]](/web/20220628154500/https://www.baeldung.com/cdn-cgi/l/email-protection)');\r\n// ...\r\n```","```\r\npublic class DbUtilsUnitTest {\r\n    private Connection connection;\r\n\r\n    @Before\r\n    public void setupDB() throws Exception {\r\n        Class.forName(\"org.h2.Driver\");\r\n        String db\r\n          = \"jdbc:h2:mem:;INIT=runscript from 'classpath:/employees.sql'\";\r\n        connection = DriverManager.getConnection(db);\r\n    }\r\n\r\n    @After\r\n    public void closeBD() {\r\n        DbUtils.closeQuietly(connection);\r\n    }\r\n    // ...\r\n}\r\n```","```\r\npublic class Employee {\r\n    private Integer id;\r\n    private String firstName;\r\n    private String lastName;\r\n    private Double salary;\r\n    private Date hiredDate;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n\r\npublic class Email {\r\n    private Integer id;\r\n    private Integer employeeId;\r\n    private String address;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenResultHandler_whenExecutingQuery_thenExpectedList()\r\n  throws SQLException {\r\n    MapListHandler beanListHandler = new MapListHandler();\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    List<Map<String, Object>> list\r\n      = runner.query(connection, \"SELECT * FROM employee\", beanListHandler);\r\n\r\n    assertEquals(list.size(), 5);\r\n    assertEquals(list.get(0).get(\"firstname\"), \"John\");\r\n    assertEquals(list.get(4).get(\"firstname\"), \"Christian\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenResultHandler_whenExecutingQuery_thenEmployeeList()\r\n  throws SQLException {\r\n    BeanListHandler<Employee> beanListHandler\r\n      = new BeanListHandler<>(Employee.class);\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    List<Employee> employeeList\r\n      = runner.query(connection, \"SELECT * FROM employee\", beanListHandler);\r\n\r\n    assertEquals(employeeList.size(), 5);\r\n    assertEquals(employeeList.get(0).getFirstName(), \"John\");\r\n    assertEquals(employeeList.get(4).getFirstName(), \"Christian\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenResultHandler_whenExecutingQuery_thenExpectedScalar()\r\n  throws SQLException {\r\n    ScalarHandler<Long> scalarHandler = new ScalarHandler<>();\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    String query = \"SELECT COUNT(*) FROM employee\";\r\n    long count\r\n      = runner.query(connection, query, scalarHandler);\r\n\r\n    assertEquals(count, 5);\r\n}\r\n```","```\r\npublic class Employee {\r\n    private List<Email> emails;\r\n    // ...\r\n}\r\n```","```\r\npublic class EmployeeHandler extends BeanListHandler<Employee> {\r\n\r\n    private Connection connection;\r\n\r\n    public EmployeeHandler(Connection con) {\r\n        super(Employee.class);\r\n        this.connection = con;\r\n    }\r\n\r\n    @Override\r\n    public List<Employee> handle(ResultSet rs) throws SQLException {\r\n        List<Employee> employees = super.handle(rs);\r\n\r\n        QueryRunner runner = new QueryRunner();\r\n        BeanListHandler<Email> handler = new BeanListHandler<>(Email.class);\r\n        String query = \"SELECT * FROM email WHERE employeeid = ?\";\r\n\r\n        for (Employee employee : employees) {\r\n            List<Email> emails\r\n              = runner.query(connection, query, handler, employee.getId());\r\n            employee.setEmails(emails);\r\n        }\r\n        return employees;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenResultHandler_whenExecutingQuery_thenEmailsSetted()\r\n    throws SQLException {\r\n    EmployeeHandler employeeHandler = new EmployeeHandler(connection);\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    List<Employee> employees\r\n      = runner.query(connection, \"SELECT * FROM employee\", employeeHandler);\r\n\r\n    assertEquals(employees.get(0).getEmails().size(), 2);\r\n    assertEquals(employees.get(2).getEmails().size(), 3);\r\n}\r\n```","```\r\nCREATE TABLE employee_legacy (\r\n    id int NOT NULL PRIMARY KEY auto_increment,\r\n    first_name varchar(255),\r\n    last_name varchar(255),\r\n    salary double,\r\n    hired_date date,\r\n);\r\n\r\nINSERT INTO employee_legacy (first_name,last_name,salary,hired_date)\r\n  VALUES ('John', 'Doe', 10000.10, to_date('01-01-2001','dd-mm-yyyy'));\r\n// ...\r\n```","```\r\npublic class EmployeeHandler extends BeanListHandler<Employee> {\r\n    // ...\r\n    public EmployeeHandler(Connection con) {\r\n        super(Employee.class,\r\n          new BasicRowProcessor(new BeanProcessor(getColumnsToFieldsMap())));\r\n        // ...\r\n    }\r\n    public static Map<String, String> getColumnsToFieldsMap() {\r\n        Map<String, String> columnsToFieldsMap = new HashMap<>();\r\n        columnsToFieldsMap.put(\"FIRST_NAME\", \"firstName\");\r\n        columnsToFieldsMap.put(\"LAST_NAME\", \"lastName\");\r\n        columnsToFieldsMap.put(\"HIRED_DATE\", \"hiredDate\");\r\n        return columnsToFieldsMap;\r\n    }\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenResultHandler_whenExecutingQuery_thenAllPropertiesSetted()\r\n    throws SQLException {\r\n    EmployeeHandler employeeHandler = new EmployeeHandler(connection);\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    String query = \"SELECT * FROM employee_legacy\";\r\n    List<Employee> employees\r\n      = runner.query(connection, query, employeeHandler);\r\n\r\n    assertEquals((int) employees.get(0).getId(), 1);\r\n    assertEquals(employees.get(0).getFirstName(), \"John\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenInserting_thenInserted() throws SQLException {\r\n    QueryRunner runner = new QueryRunner();\r\n    String insertSQL\r\n      = \"INSERT INTO employee (firstname,lastname,salary, hireddate) \"\r\n        + \"VALUES (?, ?, ?, ?)\";\r\n\r\n    int numRowsInserted\r\n      = runner.update(\r\n        connection, insertSQL, \"Leia\", \"Kane\", 60000.60, new Date());\r\n\r\n    assertEquals(numRowsInserted, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenHandler_whenInserting_thenExpectedId() throws SQLException {\r\n    ScalarHandler<Integer> scalarHandler = new ScalarHandler<>();\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    String insertSQL\r\n      = \"INSERT INTO employee (firstname,lastname,salary, hireddate) \"\r\n        + \"VALUES (?, ?, ?, ?)\";\r\n\r\n    int newId\r\n      = runner.insert(\r\n        connection, insertSQL, scalarHandler,\r\n        \"Jenny\", \"Medici\", 60000.60, new Date());\r\n\r\n    assertEquals(newId, 6);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSalary_whenUpdating_thenUpdated()\r\n throws SQLException {\r\n    double salary = 35000;\r\n\r\n    QueryRunner runner = new QueryRunner();\r\n    String updateSQL\r\n      = \"UPDATE employee SET salary = salary * 1.1 WHERE salary <= ?\";\r\n    int numRowsUpdated = runner.update(connection, updateSQL, salary);\r\n\r\n    assertEquals(numRowsUpdated, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletingRecord_thenDeleted() throws SQLException {\r\n    QueryRunner runner = new QueryRunner();\r\n    String deleteSQL = \"DELETE FROM employee WHERE id = ?\";\r\n    int numRowsDeleted = runner.update(connection, deleteSQL, 3);\r\n\r\n    assertEquals(numRowsDeleted, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void\r\n  givenAsyncRunner_whenExecutingQuery_thenExpectedList() throws Exception {\r\n    AsyncQueryRunner runner\r\n      = new AsyncQueryRunner(Executors.newCachedThreadPool());\r\n\r\n    EmployeeHandler employeeHandler = new EmployeeHandler(connection);\r\n    String query = \"SELECT * FROM employee\";\r\n    Future<List<Employee>> future\r\n      = runner.query(connection, query, employeeHandler);\r\n    List<Employee> employeeList = future.get(10, TimeUnit.SECONDS);\r\n\r\n    assertEquals(employeeList.size(), 5);\r\n}\r\n```"]