["```\r\nimport java.nio.file.*;\r\n```","```\r\nString HOME = System.getProperty(\"user.home\");\r\nPath home = Paths.get(HOME);\r\nBasicFileAttributeView basicView = \r\n  Files.getFileAttributeView(home, BasicFileAttributeView.class);\r\n```","```\r\nBasicFileAttributes basicAttribs = basicView.readAttributes();\r\n```","```\r\n@Test\r\npublic void givenPath_whenGetsFileSize_thenCorrect() {\r\n    long size = basicAttribs.size();\r\n    assertTrue(size > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenChecksIfDirectory_thenCorrect() {\r\n    boolean isDir = basicAttribs.isDirectory();\r\n    assertTrue(isDir);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenChecksIfFile_thenCorrect() {\r\n    boolean isFile = basicAttribs.isRegularFile();\r\n    assertFalse(isFile);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenChecksIfSymLink_thenCorrect() {\r\n    boolean isSymLink = basicAttribs.isSymbolicLink();\r\n    assertFalse(isSymLink);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenChecksIfOther_thenCorrect() {\r\n    boolean isOther = basicAttribs.isOther();\r\n    assertFalse(isOther);\r\n}\r\n```","```\r\nFileTime created = basicAttribs.creationTime();\r\n```","```\r\nFileTime modified = basicAttribs.lastModifiedTime();\r\n```","```\r\nFileTime accessed = basicAttribs.lastAccessTime();\r\n```","```\r\n@Test\r\npublic void givenFileTimes_whenComparesThem_ThenCorrect() {\r\n    FileTime created = basicAttribs.creationTime();\r\n    FileTime modified = basicAttribs.lastModifiedTime();\r\n    FileTime accessed = basicAttribs.lastAccessTime();\r\n\r\n    assertTrue(0 >= created.compareTo(accessed));\r\n    assertTrue(0 <= modified.compareTo(created));\r\n    assertTrue(0 == created.compareTo(created));\r\n}\r\n```","```\r\naccessed.to(TimeUnit.SECONDS);\r\naccessed.to(TimeUnit.HOURS);\r\naccessed.toMillis();\r\n```","```\r\naccessed.toString();\r\n```","```\r\n2016-11-24T07:52:53.376Z\r\n```","```\r\nFileTime newAccessTime = FileTime.fromMillis(\r\n  basicAttribs.lastAccessTime().toMillis() + 60000);\r\nbasicView.setTimes(null, newAccessTime , null);\r\n```","```\r\nPath file = Paths.get(\"file\");\r\nFileStore store = Files.getFileStore(file);\r\n```","```\r\nlong total = store.getTotalSpace();\r\n```","```\r\nlong used = store.getTotalSpace() - store.getUnallocatedSpace();\r\n```","```\r\nIterable<FileStore> fileStores = FileSystems.getDefault().getFileStores();\r\n```","```\r\nfor (FileStore fileStore : fileStores) {\r\n    long totalSpace = fileStore.getTotalSpace();\r\n    long unAllocated = fileStore.getUnallocatedSpace();\r\n    long usable = fileStore.getUsableSpace();\r\n}\r\n```","```\r\nPath path = Paths.get(HOME);\r\nFileOwnerAttributeView ownerView = Files.getFileAttributeView(\r\n  attribPath, FileOwnerAttributeView.class);\r\n```","```\r\nUserPrincipal owner = ownerView.getOwner();\r\n```","```\r\nString ownerName = owner.toString();\r\n```","```\r\nPath path = Paths.get(\"somefile\");\r\nUserDefinedFileAttributeView userDefView = Files.getFileAttributeView(\r\n  attribPath, UserDefinedFileAttributeView.class);\r\n```","```\r\nList<String> attribList = userDefView.list();\r\n```","```\r\nString name = \"attrName\";\r\nString value = \"attrValue\";\r\nuserDefView.write(name, Charset.defaultCharset().encode(value));\r\n```","```\r\nByteBuffer attrValue = ByteBuffer.allocate(userView.size(attrName));\r\nuserDefView.read(attribName, attribValue);\r\nattrValue.flip();\r\nString attrValue = Charset.defaultCharset().decode(attrValue).toString();\r\n```","```\r\nuserDefView.delete(attrName);\r\n```"]