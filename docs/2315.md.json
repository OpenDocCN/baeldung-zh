["```\r\n@JsonIgnoreProperties(value = { \"intValue\" })\r\npublic class MyDto {\r\n\r\n    private String stringValue;\r\n    private int intValue;\r\n    private boolean booleanValue;\r\n\r\n    public MyDto() {\r\n        super();\r\n    }\r\n\r\n    // standard setters and getters are not shown\r\n}\r\n```","```\r\n@Test\r\npublic void givenFieldIsIgnoredByName_whenDtoIsSerialized_thenCorrect()\r\n  throws JsonParseException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    MyDto dtoObject = new MyDto();\r\n\r\n    String dtoAsString = mapper.writeValueAsString(dtoObject);\r\n\r\n    assertThat(dtoAsString, not(containsString(\"intValue\")));\r\n}\r\n```","```\r\npublic class MyDto {\r\n\r\n    private String stringValue;\r\n    @JsonIgnore\r\n    private int intValue;\r\n    private boolean booleanValue;\r\n\r\n    public MyDto() {\r\n        super();\r\n    }\r\n\r\n    // standard setters and getters are not shown\r\n}\r\n```","```\r\n@Test\r\npublic void givenFieldIsIgnoredDirectly_whenDtoIsSerialized_thenCorrect() \r\n  throws JsonParseException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    MyDto dtoObject = new MyDto();\r\n\r\n    String dtoAsString = mapper.writeValueAsString(dtoObject);\r\n\r\n    assertThat(dtoAsString, not(containsString(\"intValue\")));\r\n}\r\n```","```\r\n@JsonIgnoreType\r\npublic class SomeType { ... }\r\n```","```\r\n@JsonIgnoreType\r\npublic class MyMixInForIgnoreType {}\r\n```","```\r\nmapper.addMixInAnnotations(String[].class, MyMixInForIgnoreType.class);\r\n```","```\r\n@Test\r\npublic final void givenFieldTypeIsIgnored_whenDtoIsSerialized_thenCorrect()\r\n  throws JsonParseException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.addMixIn(String[].class, MyMixInForIgnoreType.class);\r\n    MyDtoWithSpecialField dtoObject = new MyDtoWithSpecialField();\r\n    dtoObject.setBooleanValue(true);\r\n\r\n    String dtoAsString = mapper.writeValueAsString(dtoObject);\r\n\r\n    assertThat(dtoAsString, containsString(\"intValue\"));\r\n    assertThat(dtoAsString, containsString(\"booleanValue\"));\r\n    assertThat(dtoAsString, not(containsString(\"stringValue\")));\r\n}\r\n```","```\r\npublic class MyDtoWithSpecialField {\r\n    private String[] stringValue;\r\n    private int intValue;\r\n    private boolean booleanValue;\r\n}\r\n```","```\r\n@JsonFilter(\"myFilter\")\r\npublic class MyDtoWithFilter { ... }\r\n```","```\r\nSimpleBeanPropertyFilter theFilter = SimpleBeanPropertyFilter\r\n  .serializeAllExcept(\"intValue\");\r\nFilterProvider filters = new SimpleFilterProvider()\r\n  .addFilter(\"myFilter\", theFilter);\r\n```","```\r\n@Test\r\npublic final void givenTypeHasFilterThatIgnoresFieldByName_whenDtoIsSerialized_thenCorrect() \r\n  throws JsonParseException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    SimpleBeanPropertyFilter theFilter = SimpleBeanPropertyFilter\r\n      .serializeAllExcept(\"intValue\");\r\n    FilterProvider filters = new SimpleFilterProvider()\r\n      .addFilter(\"myFilter\", theFilter);\r\n\r\n    MyDtoWithFilter dtoObject = new MyDtoWithFilter();\r\n    String dtoAsString = mapper.writer(filters).writeValueAsString(dtoObject);\r\n\r\n    assertThat(dtoAsString, not(containsString(\"intValue\")));\r\n    assertThat(dtoAsString, containsString(\"booleanValue\"));\r\n    assertThat(dtoAsString, containsString(\"stringValue\"));\r\n    System.out.println(dtoAsString);\r\n}\r\n```"]