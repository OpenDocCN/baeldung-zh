["```\r\npublic interface PostRepository extends JpaRepository<Post, Long> {\r\n    ...\r\n    Long countByUser(User user);\r\n}\r\n```","```\r\n@Override\r\npublic List<SimplePostDto> getPostsList(int page, int size, String sortDir, String sort) {\r\n    PageRequest pageReq = new PageRequest(page, size, Sort.Direction.fromString(sortDir), sort);\r\n    Page<Post> posts = postRepository.findByUser(userService.getCurrentUser(), pageReq);\r\n    return constructDataAccordingToUserTimezone(posts.getContent());\r\n}\r\n```","```\r\nprivate List<SimplePostDto> constructDataAccordingToUserTimezone(List<Post> posts) {\r\n    String timeZone = userService.getCurrentUser().getPreference().getTimezone();\r\n    return posts.stream().map(post -> new SimplePostDto(\r\n      post, convertToUserTomeZone(post.getSubmissionDate(), timeZone)))\r\n      .collect(Collectors.toList());\r\n}\r\nprivate String convertToUserTomeZone(Date date, String timeZone) { \r\n    dateFormat.setTimeZone(TimeZone.getTimeZone(timeZone)); \r\n    return dateFormat.format(date); \r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET)\r\n@ResponseBody\r\npublic List<SimplePost> getScheduledPosts(\r\n  @RequestParam(value = \"page\", required = false, defaultValue = \"0\") int page, \r\n  @RequestParam(value = \"size\", required = false, defaultValue = \"10\") int size,\r\n  @RequestParam(value = \"sortDir\", required = false, defaultValue = \"asc\") String sortDir, \r\n  @RequestParam(value = \"sort\", required = false, defaultValue = \"title\") String sort, \r\n  HttpServletResponse response) {\r\n    response.addHeader(\"PAGING_INFO\", \r\n      scheduledPostService.generatePagingInfo(page, size).toString());\r\n    return scheduledPostService.getPostsList(page, size, sortDir, sort);\r\n}\r\n```","```\r\npublic PagingInfo generatePagingInfo(int page, int size) {\r\n    long total = postRepository.countByUser(userService.getCurrentUser());\r\n    return new PagingInfo(page, size, total);\r\n}\r\n```","```\r\npublic class PagingInfo {\r\n    private long totalNoRecords;\r\n    private int totalNoPages;\r\n    private String uriToNextPage;\r\n    private String uriToPrevPage;\r\n\r\n    public PagingInfo(int page, int size, long totalNoRecords) {\r\n        this.totalNoRecords = totalNoRecords;\r\n        this.totalNoPages = Math.round(totalNoRecords / size);\r\n        if (page > 0) {\r\n            this.uriToPrevPage = \"page=\" + (page - 1) + \"&size;=\" + size;\r\n        }\r\n        if (page < this.totalNoPages) {\r\n            this.uriToNextPage = \"page=\" + (page + 1) + \"&size;=\" + size;\r\n        }\r\n    }\r\n}\r\n```","```\r\n<table>\r\n<thead><tr>\r\n<th>Post title</th><th>Submission Date</th><th>Status</th>\r\n<th>Resubmit Attempts left</th><th>Actions</th>\r\n</tr></thead>   \r\n</table>\r\n\r\n<script>\r\n$(document).ready(function() {\r\n    $('table').dataTable( {\r\n        \"processing\": true,\r\n        \"searching\":false,\r\n        \"columnDefs\": [\r\n            { \"name\": \"title\", \"targets\": 0 },\r\n            { \"name\": \"submissionDate\", \"targets\": 1 },\r\n            { \"name\": \"submissionResponse\", \"targets\": 2 },\r\n            { \"name\": \"noOfAttempts\", \"targets\": 3 } ],\r\n        \"columns\": [\r\n            { \"data\": \"title\" },\r\n            { \"data\": \"submissionDate\" },\r\n            { \"data\": \"submissionResponse\" },\r\n            { \"data\": \"noOfAttempts\" }],\r\n        \"serverSide\": true,\r\n        \"ajax\": function(data, callback, settings) {\r\n            $.get('api/scheduledPosts', {\r\n              size: data.length,\r\n              page: (data.start/data.length),\r\n              sortDir: data.order[0].dir,\r\n              sort: data.columns[data.order[0].column].name\r\n              }, function(res,textStatus, request) {\r\n                var pagingInfo = request.getResponseHeader('PAGING_INFO');\r\n                var total = pagingInfo.split(\",\")[0].split(\"=\")[1];\r\n                callback({recordsTotal: total, recordsFiltered: total,data: res});\r\n              });\r\n          }\r\n    } );\r\n} );\r\n</script>\r\n```","```\r\n@Test\r\npublic void givenMoreThanOnePage_whenGettingUserScheduledPosts_thenNextPageExist() \r\n  throws ParseException, IOException {\r\n    createPost();\r\n    createPost();\r\n    createPost();\r\n\r\n    Response response = givenAuth().\r\n      params(\"page\", 0, \"size\", 2).get(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n    assertEquals(200, response.statusCode());\r\n    assertTrue(response.as(List.class).size() > 0);\r\n\r\n    String pagingInfo = response.getHeader(\"PAGING_INFO\");\r\n    long totalNoRecords = Long.parseLong(pagingInfo.split(\",\")[0].split(\"=\")[1]);\r\n    String uriToNextPage = pagingInfo.split(\",\")[2].replace(\"uriToNextPage=\", \"\").trim();\r\n\r\n    assertTrue(totalNoRecords > 2);\r\n    assertEquals(uriToNextPage, \"page=1&size;=2\");\r\n}\r\n\r\n@Test\r\npublic void givenMoreThanOnePage_whenGettingUserScheduledPostsForSecondPage_thenCorrect() \r\n  throws ParseException, IOException {\r\n    createPost();\r\n    createPost();\r\n    createPost();\r\n\r\n    Response response = givenAuth().\r\n      params(\"page\", 1, \"size\", 2).get(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n    assertEquals(200, response.statusCode());\r\n    assertTrue(response.as(List.class).size() > 0);\r\n\r\n    String pagingInfo = response.getHeader(\"PAGING_INFO\");\r\n    long totalNoRecords = Long.parseLong(pagingInfo.split(\",\")[0].split(\"=\")[1]);\r\n    String uriToPrevPage = pagingInfo.split(\",\")[3].replace(\"uriToPrevPage=\", \"\").trim();\r\n\r\n    assertTrue(totalNoRecords > 2);\r\n    assertEquals(uriToPrevPage, \"page=0&size;=2\");\r\n} \r\n```","```\r\n@Bean\r\npublic JavaMailSenderImpl javaMailSenderImpl() {\r\n    JavaMailSenderImpl mailSenderImpl = new JavaMailSenderImpl();\r\n    mailSenderImpl.setHost(env.getProperty(\"smtp.host\"));\r\n    mailSenderImpl.setPort(env.getProperty(\"smtp.port\", Integer.class));\r\n    mailSenderImpl.setProtocol(env.getProperty(\"smtp.protocol\"));\r\n    mailSenderImpl.setUsername(env.getProperty(\"smtp.username\"));\r\n    mailSenderImpl.setPassword(env.getProperty(\"smtp.password\"));\r\n    Properties javaMailProps = new Properties();\r\n    javaMailProps.put(\"mail.smtp.auth\", true);\r\n    javaMailProps.put(\"mail.smtp.starttls.enable\", true);\r\n    mailSenderImpl.setJavaMailProperties(javaMailProps);\r\n    return mailSenderImpl;\r\n}\r\n```","```\r\nsmtp.host=email-smtp.us-east-1.amazonaws.com\r\nsmtp.port=465\r\nsmtp.protocol=smtps\r\nsmtp.username=example\r\nsmtp.password=\r\n[[emailÂ protected]](/web/20220815042615/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nprivate void updatePostFromResponse(JsonNode node, Post post) {\r\n    JsonNode errorNode = node.get(\"json\").get(\"errors\").get(0);\r\n    if (errorNode == null) {\r\n        ...\r\n        String email = post.getUser().getPreference().getEmail();\r\n        eventPublisher.publishEvent(new OnPostSubmittedEvent(post, email));\r\n    } \r\n    ...\r\n}\r\n```","```\r\npublic class OnPostSubmittedEvent extends ApplicationEvent {\r\n    private Post post;\r\n    private String email;\r\n\r\n    public OnPostSubmittedEvent(Post post, String email) {\r\n        super(post);\r\n        this.post = post;\r\n        this.email = email;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class SubmissionListner implements ApplicationListener<OnPostSubmittedEvent> {\r\n    @Autowired\r\n    private JavaMailSender mailSender;\r\n\r\n    @Autowired\r\n    private Environment env;\r\n\r\n    @Override\r\n    public void onApplicationEvent(OnPostSubmittedEvent event) {\r\n        SimpleMailMessage email = constructEmailMessage(event);\r\n        mailSender.send(email);\r\n    }\r\n\r\n    private SimpleMailMessage constructEmailMessage(OnPostSubmittedEvent event) {\r\n        String recipientAddress = event.getEmail();\r\n        String subject = \"Your scheduled post submitted\";\r\n        SimpleMailMessage email = new SimpleMailMessage();\r\n        email.setTo(recipientAddress);\r\n        email.setSubject(subject);\r\n        email.setText(constructMailContent(event.getPost()));\r\n        email.setFrom(env.getProperty(\"support.email\"));\r\n        return email;\r\n    }\r\n\r\n    private String constructMailContent(Post post) {\r\n        return \"Your post \" + post.getTitle() + \" is submitted.\\n\" +\r\n          \"http://www.reddit.com/r/\" + post.getSubreddit() + \r\n          \"/comments/\" + post.getRedditID();\r\n    }\r\n}\r\n```","```\r\npublic PostScores getPostScores(Post post) {\r\n    ...\r\n\r\n    float ratio = node.get(\"upvote_ratio\").floatValue();\r\n    postScore.setTotalVotes(Math.round(postScore.getScore() / ((2 * ratio) - 1)));\r\n\r\n    ...\r\n}\r\n```","```\r\nprivate boolean didPostGoalFail(Post post) {\r\n    PostScores postScores = getPostScores(post);\r\n    int totalVotes = postScores.getTotalVotes();\r\n    ...\r\n    return (((score < post.getMinScoreRequired()) || \r\n            (totalVotes < post.getMinTotalVotes())) && \r\n            !((noOfComments > 0) && post.isKeepIfHasComments()));\r\n}\r\n```","```\r\nprivate boolean checkIfValidResubmitOptions(Post post) {\r\n    if (checkIfAllNonZero(\r\n          post.getNoOfAttempts(), \r\n          post.getTimeInterval(), \r\n          post.getMinScoreRequired())) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\nprivate boolean checkIfAllNonZero(int... args) {\r\n    for (int tmp : args) {\r\n       if (tmp == 0) {\r\n           return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```","```\r\npublic Post schedulePost(boolean isSuperUser, Post post, boolean resubmitOptionsActivated) \r\n  throws ParseException {\r\n    if (resubmitOptionsActivated && !checkIfValidResubmitOptions(post)) {\r\n        throw new InvalidResubmitOptionsException(\"Invalid Resubmit Options\");\r\n    }\r\n    ...        \r\n}\r\n```","```\r\n@ExceptionHandler({ InvalidResubmitOptionsException.class })\r\npublic ResponseEntity<Object> handleInvalidResubmitOptions\r\n  (RuntimeException ex, WebRequest request) {\r\n\r\n    logger.error(\"400 Status Code\", ex);\r\n    String bodyOfResponse = ex.getLocalizedMessage();\r\n    return new ResponseEntity<Object>(\r\n      bodyOfResponse, new HttpHeaders(), HttpStatus.BAD_REQUEST);\r\n}\r\n```","```\r\npublic class ResubmitOptionsLiveTest extends AbstractLiveTest {\r\n    private static final String date = \"2016-01-01 00:00\";\r\n\r\n    @Test\r\n    public void \r\n      givenResubmitOptionsDeactivated_whenSchedulingANewPost_thenCreated() \r\n      throws ParseException, IOException {\r\n        Post post = createPost();\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .queryParams(\"resubmitOptionsActivated\", false)\r\n          .post(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n        assertEquals(201, response.statusCode());\r\n        Post result = objectMapper.reader().forType(Post.class).readValue(response.asString());\r\n        assertEquals(result.getUrl(), post.getUrl());\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      givenResubmitOptionsActivated_whenSchedulingANewPostWithZeroAttempts_thenInvalid() \r\n      throws ParseException, IOException {\r\n        Post post = createPost();\r\n        post.setNoOfAttempts(0);\r\n        post.setMinScoreRequired(5);\r\n        post.setTimeInterval(60);\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .queryParams(\"resubmitOptionsActivated\", true)\r\n          .post(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n        assertEquals(400, response.statusCode());\r\n        assertTrue(response.asString().contains(\"Invalid Resubmit Options\"));\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      givenResubmitOptionsActivated_whenSchedulingANewPostWithZeroMinScore_thenInvalid() \r\n      throws ParseException, IOException {\r\n        Post post = createPost();\r\n        post.setMinScoreRequired(0);\r\n        post.setNoOfAttempts(3);\r\n        post.setTimeInterval(60);\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .queryParams\"resubmitOptionsActivated\", true)\r\n          .post(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n        assertEquals(400, response.statusCode());\r\n        assertTrue(response.asString().contains(\"Invalid Resubmit Options\"));\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      givenResubmitOptionsActivated_whenSchedulingANewPostWithZeroTimeInterval_thenInvalid() \r\n      throws ParseException, IOException {\r\n        Post post = createPost();\r\n        post.setTimeInterval(0);\r\n        post.setMinScoreRequired(5);\r\n        post.setNoOfAttempts(3);\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .queryParams(\"resubmitOptionsActivated\", true)\r\n          .post(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n        assertEquals(400, response.statusCode());\r\n        assertTrue(response.asString().contains(\"Invalid Resubmit Options\"));\r\n    }\r\n\r\n    @Test\r\n    public void \r\n      givenResubmitOptionsActivated_whenSchedulingNewPostWithValidResubmitOptions_thenCreated() \r\n      throws ParseException, IOException {\r\n        Post post = createPost();\r\n        post.setMinScoreRequired(5);\r\n        post.setNoOfAttempts(3);\r\n        post.setTimeInterval(60);\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .queryParams(\"resubmitOptionsActivated\", true)\r\n          .post(urlPrefix + \"/api/scheduledPosts\");\r\n\r\n        assertEquals(201, response.statusCode());\r\n        Post result = objectMapper.reader().forType(Post.class).readValue(response.asString());\r\n        assertEquals(result.getUrl(), post.getUrl());\r\n    }\r\n\r\n    private Post createPost() throws ParseException {\r\n        Post post = new Post();\r\n        post.setTitle(randomAlphabetic(6));\r\n        post.setUrl(\"test.com\");\r\n        post.setSubreddit(randomAlphabetic(6));\r\n        post.setSubmissionDate(dateFormat.parse(date));\r\n        return post;\r\n    }\r\n}\r\n```"]