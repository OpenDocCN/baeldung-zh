["```\r\n<dependency>\r\n    <groupId>org.javalite</groupId>\r\n    <artifactId>javalite-common</artifactId>\r\n    <version>1.4.13</version>\r\n</dependency>\r\n```","```\r\nassertEquals(1 + 1, 2);\r\n```","```\r\nassertThat(1 + 1).isEqualTo(2);\r\n```","```\r\n$(1 + 1).shouldEqual(2);\r\n```","```\r\nString message = \"Welcome to JSpec demo\";\r\nthe(message).shouldNotBe(\"empty\");\r\nthe(message).shouldContain(\"JSpec\");\r\n```","```\r\n$(1 + 2).shouldEqual(3);\r\na(1 + 2).shouldEqual(3);\r\nthe(1 + 2).shouldEqual(3);\r\nit(1 + 2).shouldEqual(3);\r\n```","```\r\nit(1 + 2).shouldEqual(\"3\");\r\n```","```\r\n$(1 + 2).shouldEqual(3);\r\n```","```\r\n$(1 + 2).shouldEqual(4);\r\n```","```\r\nTest object:java.lang.Integer == <3>\r\nand expected java.lang.Integer == <4>\r\nare not equal, but they should be.\r\n```","```\r\nCage cage = new Cage();\r\ncage.put(tomCat, boltDog);\r\nthe(cage).shouldHave(\"animals\");\r\n```","```\r\nboolean hasAnimals() {...}\r\n```","```\r\nthe(cage).shouldNotHave(\"animals\");\r\n```","```\r\nMethod: hasAnimals should return false, but returned true \r\n```","```\r\nthe(cage).shouldNotBe(\"empty\");\r\n```","```\r\nthe(cage).shouldBe(\"empty\");\r\n```","```\r\nMethod: isEmpty should return true, but returned false\r\n```","```\r\ncage.put(boltDog);\r\nAnimal releasedAnimal = cage.release(boltDog);\r\nthe(releasedAnimal).shouldBeA(Dog.class);\r\n```","```\r\nthe(releasedAnimal).shouldBeA(Cat.class);\r\n```","```\r\nclass com.baeldung.jspec.Dog is not class com.baeldung.jspec.Cat\r\n```","```\r\ncage.put(boltDog);\r\nAnimal releasedAnimal = cage.release(dogY);\r\nthe(releasedAnimal).shouldBeNull();\r\n```","```\r\nthe(releasedAnimal).shouldNotBeNull();\r\n```","```\r\nObject is null, while it is not expected\r\n```","```\r\nDog firstDog = new Dog(\"Rex\");\r\nDog secondDog = new Dog(\"Rex\");\r\n$(firstDog).shouldEqual(secondDog);\r\n$(firstDog).shouldNotBeTheSameAs(secondDog);\r\n```","```\r\n$(firstDog).shouldBeTheSameAs(secondDog);\r\n```","```\r\nreferences are not the same, but they should be\r\n```","```\r\ncage.put(tomCat, felixCat);\r\nthe(cage.getAnimals()).shouldContain(tomCat);\r\nthe(cage.getAnimals()).shouldNotContain(boltDog);\r\n```","```\r\nthe(animals).shouldContain(boltDog);\r\n```","```\r\ntested value does not contain expected value: Dog [name=Bolt]\r\n```","```\r\n$(\"Welcome to JSpec demo\").shouldContain(\"JSpec\");\r\n```","```\r\ncage.put(tomCat, felixCat);\r\nthe(cage).shouldContain(tomCat);\r\nthe(cage).shouldNotContain(boltDog);\r\n```","```\r\nCat [name=Tom]\r\n```","```\r\nCage [animals=[Cat [name=Tom], Cat[name=Felix]]]\r\n```","```\r\nexpect(new DifferenceExpectation<Integer>(4) {\r\n    @Override\r\n    public Integer exec() {\r\n        return 2 + 3;\r\n    }\r\n});\r\n```","```\r\ncage.put(tomCat, boltDog);\r\nexpect(new DifferenceExpectation<Integer>(cage.size()) {\r\n    @Override\r\n    public Integer exec() {\r\n        cage.release(tomCat);\r\n        return cage.size();\r\n    }\r\n});\r\n```","```\r\ncage.release(felixCat);\r\n```","```\r\nObjects: '2' and '2' are equal, but they should not be \r\n```","```\r\nexpect(new ExceptionExpectation<ArithmeticException>(ArithmeticException.class) {\r\n    @Override\r\n    public void exec() throws ArithmeticException {\r\n        System.out.println(1 / 0);\r\n    }\r\n});\r\n```","```\r\nSystem.out.println(1 / 1);\r\n```","```\r\nExpected exception: class java.lang.ArithmeticException, but instead got nothing\r\n```","```\r\nInteger.parseInt(\"x\");\r\n```","```\r\nclass java.lang.ArithmeticException,\r\nbut instead got: java.lang.NumberFormatException: For input string: \"x\"\r\n```"]