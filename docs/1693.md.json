["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.4.4</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-jasper</artifactId>\r\n    <version>9.0.44</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>jstl</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.tomcat.embed</groupId>\r\n    <artifactId>tomcat-embed-jasper</artifactId>\r\n    <version>9.0.44</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-tomcat</artifactId>\r\n    <version>2.4.4</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\nspring.mvc.view.prefix: /WEB-INF/jsp/\r\nspring.mvc.view.suffix: .jsp\r\n```","```\r\n@SpringBootApplication(scanBasePackages = \"com.baeldung.boot.jsp\")\r\npublic class SpringBootJspApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootJspApplication.class);\r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication(scanBasePackages = \"com.baeldung.boot.jsp\")\r\npublic class SpringBootJspApplication extends SpringBootServletInitializer {\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\r\n        return builder.sources(SpringBootJspApplication.class);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootJspApplication.class);\r\n    }\r\n}\r\n```","```\r\npublic class Book {\r\n    private String isbn;\r\n    private String name;\r\n    private String author;\r\n\r\n    //getters, setters, constructors and toString\r\n}\r\n\r\npublic interface BookService {\r\n    Collection<Book> getBooks();\r\n    Book addBook(Book book);\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/book\")\r\npublic class BookController {\r\n\r\n    private final BookService bookService;\r\n\r\n    public BookController(BookService bookService) {\r\n        this.bookService = bookService;\r\n    }\r\n\r\n    @GetMapping(\"/viewBooks\")\r\n    public String viewBooks(Model model) {\r\n        model.addAttribute(\"books\", bookService.getBooks());\r\n        return \"view-books\";\r\n    }\r\n}\r\n```","```\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<%@taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\"%>\r\n<html>\r\n    <head>\r\n        <title>View Books</title>\r\n        <link href=\"<c:url value=\"/css/common.css\"/>\" rel=\"stylesheet\" type=\"text/css\">\r\n    </head>\r\n    <body>\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>ISBN</th>\r\n                    <th>Name</th>\r\n                    <th>Author</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <c:forEach items=\"${books}\" var=\"book\">\r\n                    <tr>\r\n                        <td>${book.isbn}</td>\r\n                        <td>${book.name}</td>\r\n                        <td>${book.author}</td>\r\n                    </tr>\r\n                </c:forEach>\r\n            </tbody>\r\n        </table>\r\n    </body>\r\n</html>\r\n```","```\r\npublic class BookController {\r\n\r\n    //already existing code\r\n\r\n    @GetMapping(\"/addBook\")\r\n    public String addBookView(Model model) {\r\n        model.addAttribute(\"book\", new Book());\r\n        return \"add-book\";\r\n    }\r\n\r\n    @PostMapping(\"/addBook\")\r\n    public RedirectView addBook(@ModelAttribute(\"book\") Book book, RedirectAttributes redirectAttributes) {\r\n        final RedirectView redirectView = new RedirectView(\"/book/addBook\", true);\r\n        Book savedBook = bookService.addBook(book);\r\n        redirectAttributes.addFlashAttribute(\"savedBook\", savedBook);\r\n        redirectAttributes.addFlashAttribute(\"addBookSuccess\", true);\r\n        return redirectView;\r\n    } \r\n}\r\n```","```\r\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\r\n<%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %>\r\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\r\n<html>\r\n    <head>\r\n        <title>Add Book</title>\r\n    </head>\r\n    <body>\r\n        <c:if test=\"${addBookSuccess}\">\r\n            <div>Successfully added Book with ISBN: ${savedBook.isbn}</div>\r\n        </c:if>\r\n\r\n        <c:url var=\"add_book_url\" value=\"/book/addBook\"/>\r\n        <form:form action=\"${add_book_url}\" method=\"post\" modelAttribute=\"book\">\r\n            <form:label path=\"isbn\">ISBN: </form:label> <form:input type=\"text\" path=\"isbn\"/>\r\n            <form:label path=\"name\">Book Name: </form:label> <form:input type=\"text\" path=\"name\"/>\r\n            <form:label path=\"author\">Author Name: </form:label> <form:input path=\"author\"/>\r\n            <input type=\"submit\" value=\"submit\"/>\r\n        </form:form>\r\n    </body>\r\n</html>\r\n```","```\r\npublic class DuplicateBookException extends RuntimeException {\r\n    private final Book book;\r\n\r\n    public DuplicateBookException(Book book) {\r\n        this.book = book;\r\n    }\r\n\r\n    // getter methods\r\n}\r\n```","```\r\n@Service\r\npublic class BookServiceImpl implements BookService {\r\n\r\n    private final BookRepository bookRepository;\r\n\r\n    // constructors, other override methods\r\n\r\n    @Override\r\n    public Book addBook(Book book) {\r\n        final Optional<BookData> existingBook = bookRepository.findById(book.getIsbn());\r\n        if (existingBook.isPresent()) {\r\n            throw new DuplicateBookException(book);\r\n        }\r\n\r\n        final BookData savedBook = bookRepository.add(convertBook(book));\r\n        return convertBookData(savedBook);\r\n    }\r\n\r\n    // conversion logic\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class LibraryControllerAdvice {\r\n\r\n    @ExceptionHandler(value = DuplicateBookException.class)\r\n    public ModelAndView duplicateBookException(DuplicateBookException e) {\r\n        final ModelAndView modelAndView = new ModelAndView();\r\n        modelAndView.addObject(\"ref\", e.getBook().getIsbn());\r\n        modelAndView.addObject(\"object\", e.getBook());\r\n        modelAndView.addObject(\"message\", \"Cannot add an already existing book\");\r\n        modelAndView.setViewName(\"error-book\");\r\n        return modelAndView;\r\n    }\r\n}\r\n```","```\r\n<packaging>war</packaging>\r\n```"]