["```\r\nCREATE TABLE AUTHOR\r\n(\r\n  ID int NOT NULL PRIMARY KEY,\r\n  FIRST_NAME varchar(255),\r\n  LAST_NAME varchar(255)\r\n);\r\n\r\nCREATE TABLE ARTICLE\r\n(\r\n  ID int NOT NULL PRIMARY KEY,\r\n  TITLE varchar(255) NOT NULL,\r\n  AUTHOR_ID int,\r\n  FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHOR(ID)\r\n); \r\n```","```\r\nINSERT INTO AUTHOR VALUES \r\n(1, 'Siena', 'Kerr'),\r\n(2, 'Daniele', 'Ferguson'),\r\n(3, 'Luciano', 'Wise'),\r\n(4, 'Jonas', 'Lugo');\r\n\r\nINSERT INTO ARTICLE VALUES\r\n(1, 'First steps in Java', 1),\r\n(2, 'SpringBoot tutorial', 1),\r\n(3, 'Java 12 insights', null),\r\n(4, 'SQL JOINS', 2),\r\n(5, 'Introduction to Spring Security', 3);\r\n```","```\r\nclass ArticleWithAuthor {\r\n\r\n    private String title;\r\n    private String authorFirstName;\r\n    private String authorLastName;\r\n\r\n    // standard constructor, setters and getters\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <version>42.2.5</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nClass.forName(\"org.postgresql.Driver\");\r\nConnection connection = DriverManager.\r\n  getConnection(\"jdbc:postgresql://localhost:5432/myDb\", \"user\", \"pass\");\r\n```","```\r\nclass ArticleWithAuthorDAO {\r\n\r\n    private final Connection connection;\r\n\r\n    // constructor\r\n\r\n    private List<ArticleWithAuthor> executeQuery(String query) {\r\n        try (Statement statement = connection.createStatement()) {\r\n            ResultSet resultSet = statement.executeQuery(query);\r\n            return mapToList(resultSet);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n            return new ArrayList<>();\r\n    }\r\n\r\n    private List<ArticleWithAuthor> mapToList(ResultSet resultSet) throws SQLException {\r\n        List<ArticleWithAuthor> list = new ArrayList<>();\r\n        while (resultSet.next()) {\r\n            ArticleWithAuthor articleWithAuthor = new ArticleWithAuthor(\r\n              resultSet.getString(\"TITLE\"),\r\n              resultSet.getString(\"FIRST_NAME\"),\r\n              resultSet.getString(\"LAST_NAME\")\r\n            );\r\n            list.add(articleWithAuthor);\r\n        }\r\n        return list;\r\n    }\r\n}\r\n```","```\r\nSELECT ARTICLE.TITLE, AUTHOR.LAST_NAME, AUTHOR.FIRST_NAME\r\n  FROM ARTICLE INNER JOIN AUTHOR \r\n  ON AUTHOR.ID=ARTICLE.AUTHOR_ID\r\n```","```\r\nList<ArticleWithAuthor> articleInnerJoinAuthor() {\r\n    String query = \"SELECT ARTICLE.TITLE, AUTHOR.LAST_NAME, AUTHOR.FIRST_NAME \"\r\n      + \"FROM ARTICLE INNER JOIN AUTHOR ON AUTHOR.ID=ARTICLE.AUTHOR_ID\";\r\n    return executeQuery(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenQueryWithInnerJoin_thenShouldReturnProperRows() {\r\n    List<ArticleWithAuthor> articleWithAuthorList = articleWithAuthorDAO.articleInnerJoinAuthor();\r\n\r\n    assertThat(articleWithAuthorList).hasSize(4);\r\n    assertThat(articleWithAuthorList)\r\n      .noneMatch(row -> row.getAuthorFirstName() == null || row.getTitle() == null);\r\n}\r\n```","```\r\nList<ArticleWithAuthor> articleLeftJoinAuthor() {\r\n    String query = \"SELECT ARTICLE.TITLE, AUTHOR.LAST_NAME, AUTHOR.FIRST_NAME \"\r\n      + \"FROM ARTICLE LEFT JOIN AUTHOR ON AUTHOR.ID=ARTICLE.AUTHOR_ID\";\r\n    return executeQuery(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenQueryWithLeftJoin_thenShouldReturnProperRows() {\r\n    List<ArticleWithAuthor> articleWithAuthorList = articleWithAuthorDAO.articleLeftJoinAuthor();\r\n\r\n    assertThat(articleWithAuthorList).hasSize(5);\r\n    assertThat(articleWithAuthorList).anyMatch(row -> row.getAuthorFirstName() == null);\r\n}\r\n```","```\r\nList<ArticleWithAuthor> articleRightJoinAuthor() {\r\n    String query = \"SELECT ARTICLE.TITLE, AUTHOR.LAST_NAME, AUTHOR.FIRST_NAME \"\r\n      + \"FROM ARTICLE RIGHT JOIN AUTHOR ON AUTHOR.ID=ARTICLE.AUTHOR_ID\";\r\n    return executeQuery(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenQueryWithRightJoin_thenShouldReturnProperRows() {\r\n    List<ArticleWithAuthor> articleWithAuthorList = articleWithAuthorDAO.articleRightJoinAuthor();\r\n\r\n    assertThat(articleWithAuthorList).hasSize(5);\r\n    assertThat(articleWithAuthorList).anyMatch(row -> row.getTitle() == null);\r\n}\r\n```","```\r\nList<ArticleWithAuthor> articleOuterJoinAuthor() {\r\n    String query = \"SELECT ARTICLE.TITLE, AUTHOR.LAST_NAME, AUTHOR.FIRST_NAME \"\r\n      + \"FROM ARTICLE FULL JOIN AUTHOR ON AUTHOR.ID=ARTICLE.AUTHOR_ID\";\r\n    return executeQuery(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenQueryWithFullJoin_thenShouldReturnProperRows() {\r\n    List<ArticleWithAuthor> articleWithAuthorList = articleWithAuthorDAO.articleOuterJoinAuthor();\r\n\r\n    assertThat(articleWithAuthorList).hasSize(6);\r\n    assertThat(articleWithAuthorList).anyMatch(row -> row.getTitle() == null);\r\n    assertThat(articleWithAuthorList).anyMatch(row -> row.getAuthorFirstName() == null);\r\n}\r\n```"]