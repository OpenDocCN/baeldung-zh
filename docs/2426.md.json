["```\r\nmongoimport.exe --db <db_name> --collection <collection_name> --file <path_to_file> --jsonArray\r\n```","```\r\n@BeforeClass\r\npublic static void setUpDB() throws IOException {\r\n    mongoClient = MongoClients.create();\r\n    database = mongoClient.getDatabase(DATABASE);\r\n    collection = database.getCollection(COLLECTION);\r\n} \r\n```","```\r\nimport static com.mongodb.client.model.Aggregates.*;\r\n```","```\r\n@Test\r\npublic void givenCountryCollection_whenEnglishSpeakingCountriesCounted_thenNinetyOne() {\r\n    Document englishSpeakingCountries = collection.aggregate(Arrays.asList(\r\n      match(Filters.eq(\"languages.name\", \"English\")),\r\n      count())).first();\r\n\r\n    assertEquals(91, englishSpeakingCountries.get(\"count\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCountryCollection_whenCountedRegionWise_thenMaxInAfrica() {\r\n    Document maxCountriedRegion = collection.aggregate(Arrays.asList(\r\n      group(\"$region\", Accumulators.sum(\"tally\", 1)),\r\n      sort(Sorts.descending(\"tally\")))).first();\r\n\r\n    assertTrue(maxCountriedRegion.containsValue(\"Africa\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCountryCollection_whenAreaSortedDescending_thenSuccess() {\r\n    collection.aggregate(Arrays.asList(\r\n      sort(Sorts.descending(\"area\")), \r\n      limit(7),\r\n      out(\"largest_seven\"))).toCollection();\r\n\r\n    MongoCollection<Document> largestSeven = database.getCollection(\"largest_seven\");\r\n\r\n    assertEquals(7, largestSeven.countDocuments());\r\n\r\n    Document usa = largestSeven.find(Filters.eq(\"alpha3Code\", \"USA\")).first();\r\n\r\n    assertNotNull(usa);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCountryCollection_whenNeighborsCalculated_thenMaxIsFifteenInChina() {\r\n    Bson borderingCountriesCollection = project(Projections.fields(Projections.excludeId(), \r\n      Projections.include(\"name\"), Projections.computed(\"borderingCountries\", \r\n        Projections.computed(\"$size\", \"$borders\"))));\r\n\r\n    int maxValue = collection.aggregate(Arrays.asList(borderingCountriesCollection, \r\n      group(null, Accumulators.max(\"max\", \"$borderingCountries\"))))\r\n      .first().getInteger(\"max\");\r\n\r\n    assertEquals(15, maxValue);\r\n\r\n    Document maxNeighboredCountry = collection.aggregate(Arrays.asList(borderingCountriesCollection,\r\n      match(Filters.eq(\"borderingCountries\", maxValue)))).first();\r\n\r\n    assertTrue(maxNeighboredCountry.containsValue(\"China\"));\r\n}\r\n```"]