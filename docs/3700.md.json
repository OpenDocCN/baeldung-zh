["```\r\npublic class TrieNode {\r\n    private HashMap<Character, TrieNode> children;\r\n    private String content;\r\n    private boolean isWord;\r\n\r\n   // ...\r\n}\r\n```","```\r\npublic class Trie {\r\n    private TrieNode root;\r\n    //...\r\n}\r\n```","```\r\npublic void insert(String word) {\r\n    TrieNode current = root;\r\n\r\n    for (char l: word.toCharArray()) {\r\n        current = current.getChildren().computeIfAbsent(l, c -> new TrieNode());\r\n    }\r\n    current.setEndOfWord(true);\r\n}\r\n```","```\r\nprivate Trie createExampleTrie() {\r\n    Trie trie = new Trie();\r\n\r\n    trie.insert(\"Programming\");\r\n    trie.insert(\"is\");\r\n    trie.insert(\"a\");\r\n    trie.insert(\"way\");\r\n    trie.insert(\"of\");\r\n    trie.insert(\"life\");\r\n\r\n    return trie;\r\n}\r\n```","```\r\n@Test\r\npublic void givenATrie_WhenAddingElements_ThenTrieNotEmpty() {\r\n    Trie trie = createTrie();\r\n\r\n    assertFalse(trie.isEmpty());\r\n}\r\n```","```\r\npublic boolean find(String word) {\r\n    TrieNode current = root;\r\n    for (int i = 0; i < word.length(); i++) {\r\n        char ch = word.charAt(i);\r\n        TrieNode node = current.getChildren().get(ch);\r\n        if (node == null) {\r\n            return false;\r\n        }\r\n        current = node;\r\n    }\r\n    return current.isEndOfWord();\r\n}\r\n```","```\r\n@Test\r\npublic void givenATrie_WhenAddingElements_ThenTrieContainsThoseElements() {\r\n    Trie trie = createExampleTrie();\r\n\r\n    assertFalse(trie.containsNode(\"3\"));\r\n    assertFalse(trie.containsNode(\"vida\"));\r\n    assertTrue(trie.containsNode(\"life\"));\r\n}\r\n```","```\r\npublic void delete(String word) {\r\n    delete(root, word, 0);\r\n}\r\n\r\nprivate boolean delete(TrieNode current, String word, int index) {\r\n    if (index == word.length()) {\r\n        if (!current.isEndOfWord()) {\r\n            return false;\r\n        }\r\n        current.setEndOfWord(false);\r\n        return current.getChildren().isEmpty();\r\n    }\r\n    char ch = word.charAt(index);\r\n    TrieNode node = current.getChildren().get(ch);\r\n    if (node == null) {\r\n        return false;\r\n    }\r\n    boolean shouldDeleteCurrentNode = delete(node, word, index + 1) && !node.isEndOfWord();\r\n\r\n    if (shouldDeleteCurrentNode) {\r\n        current.getChildren().remove(ch);\r\n        return current.getChildren().isEmpty();\r\n    }\r\n    return false;\r\n}\r\n```","```\r\n@Test\r\nvoid whenDeletingElements_ThenTreeDoesNotContainThoseElements() {\r\n    Trie trie = createTrie();\r\n\r\n    assertTrue(trie.containsNode(\"Programming\"));\r\n\r\n    trie.delete(\"Programming\");\r\n    assertFalse(trie.containsNode(\"Programming\"));\r\n}\r\n```"]