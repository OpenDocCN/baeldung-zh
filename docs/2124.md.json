["```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>2020.0.0</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.cloud</groupId>\r\n        <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\r\n        <version>2.2.2.RELEASE</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\npublic class ResponseLogFilter extends ZuulFilter {\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return POST_TYPE;\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return 0;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Object run() throws ZuulException {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic Object run() throws ZuulException {\r\n\r\n    RequestContext context = RequestContext.getCurrentContext();\r\n    try (final InputStream responseDataStream = context.getResponseDataStream()) {\r\n\r\n        if(responseDataStream == null) {\r\n            logger.info(\"BODY: {}\", \"\");\r\n            return null;\r\n        }\r\n\r\n        String responseData = CharStreams.toString(new InputStreamReader(responseDataStream, \"UTF-8\"));\r\n        logger.info(\"BODY: {}\", responseData);\r\n\r\n        context.setResponseBody(responseData);\r\n    }\r\n    catch (Exception e) {\r\n        throw new ZuulException(e, INTERNAL_SERVER_ERROR.value(), e.getMessage());\r\n    }\r\n\r\n    return null;\r\n}\r\n```"]