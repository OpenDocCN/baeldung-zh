["```\r\npublic class Finalizable {\r\n    private BufferedReader reader;\r\n\r\n    public Finalizable() {\r\n        InputStream input = this.getClass()\r\n          .getClassLoader()\r\n          .getResourceAsStream(\"file.txt\");\r\n        this.reader = new BufferedReader(new InputStreamReader(input));\r\n    }\r\n\r\n    public String readFirstLine() throws IOException {\r\n        String firstLine = reader.readLine();\r\n        return firstLine;\r\n    }\r\n\r\n    // other class members\r\n}\r\n```","```\r\n@Override\r\npublic void finalize() {\r\n    try {\r\n        reader.close();\r\n        System.out.println(\"Closed BufferedReader in the finalizer\");\r\n    } catch (IOException e) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenGC_thenFinalizerExecuted() throws IOException {\r\n    String firstLine = new Finalizable().readFirstLine();\r\n    assertEquals(\"baeldung.com\", firstLine);\r\n    System.gc();\r\n}\r\n```","```\r\npublic class CrashedFinalizable {\r\n    public static void main(String[] args) throws ReflectiveOperationException {\r\n        for (int i = 0; ; i++) {\r\n            new CrashedFinalizable();\r\n            // other code\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void finalize() {\r\n        System.out.print(\"\");\r\n    }\r\n}\r\n```","```\r\nif ((i % 1_000_000) == 0) {\r\n    Class<?> finalizerClass = Class.forName(\"java.lang.ref.Finalizer\");\r\n    Field queueStaticField = finalizerClass.getDeclaredField(\"queue\");\r\n    queueStaticField.setAccessible(true);\r\n    ReferenceQueue<Object> referenceQueue = (ReferenceQueue) queueStaticField.get(null);\r\n\r\n    Field queueLengthField = ReferenceQueue.class.getDeclaredField(\"queueLength\");\r\n    queueLengthField.setAccessible(true);\r\n    long queueLength = (long) queueLengthField.get(referenceQueue);\r\n    System.out.format(\"There are %d references in the queue%n\", queueLength);\r\n}\r\n```","```\r\n...\r\nThere are 21914844 references in the queue\r\nThere are 22858923 references in the queue\r\nThere are 24202629 references in the queue\r\nThere are 24621725 references in the queue\r\nThere are 25410983 references in the queue\r\nThere are 26231621 references in the queue\r\nThere are 26975913 references in the queue\r\nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\r\n    at java.lang.ref.Finalizer.register(Finalizer.java:91)\r\n    at java.lang.Object.<init>(Object.java:37)\r\n    at com.baeldung.finalize.CrashedFinalizable.<init>(CrashedFinalizable.java:6)\r\n    at com.baeldung.finalize.CrashedFinalizable.main(CrashedFinalizable.java:9)\r\n\r\nProcess finished with exit code 1\r\n```","```\r\npublic class CloseableResource implements AutoCloseable {\r\n    private BufferedReader reader;\r\n\r\n    public CloseableResource() {\r\n        InputStream input = this.getClass()\r\n          .getClassLoader()\r\n          .getResourceAsStream(\"file.txt\");\r\n        reader = new BufferedReader(new InputStreamReader(input));\r\n    }\r\n\r\n    public String readFirstLine() throws IOException {\r\n        String firstLine = reader.readLine();\r\n        return firstLine;\r\n    }\r\n\r\n    @Override\r\n    public void close() {\r\n        try {\r\n            reader.close();\r\n            System.out.println(\"Closed BufferedReader in the close method\");\r\n        } catch (IOException e) {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenTryWResourcesExits_thenResourceClosed() throws IOException {\r\n    try (CloseableResource resource = new CloseableResource()) {\r\n        String firstLine = resource.readFirstLine();\r\n        assertEquals(\"baeldung.com\", firstLine);\r\n    }\r\n}\r\n```"]