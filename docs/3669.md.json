["```\r\nvar expireDate = new Date().getTime() + (1000 * token.expires_in);\r\nCookie.set(\"access_token\", token.access_token, expireDate);\r\n```","```\r\nretrieveToken(code) {\r\n  let params = new URLSearchParams();\r\n  params.append('grant_type','authorization_code');\r\n  params.append('client_id', this.clientId);\r\n  params.append('client_secret', 'newClientSecret');\r\n  params.append('redirect_uri', this.redirectUri);\r\n  params.append('code',code);\r\n\r\n  let headers =\r\n    new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\r\n\r\n  this._http.post('http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token',\r\n    params.toString(), { headers: headers })\r\n    .subscribe(\r\n      data => this.saveToken(data),\r\n      err => alert('Invalid Credentials'));\r\n}\r\n```","```\r\nzuul:\r\n  routes:\r\n    auth/code:\r\n      path: /auth/code/**\r\n      sensitiveHeaders:\r\n      url: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth\r\n    auth/token:\r\n      path: /auth/token/**\r\n      sensitiveHeaders:\r\n      url: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token\r\n    auth/refresh:\r\n      path: /auth/refresh/**\r\n      sensitiveHeaders:\r\n      url: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token\r\n    auth/redirect:\r\n      path: /auth/redirect/**\r\n      sensitiveHeaders:\r\n      url: http://localhost:8089/\r\n    auth/resources:\r\n      path: /auth/resources/**\r\n      sensitiveHeaders:\r\n      url: http://localhost:8083/auth/resources/\r\n```","```\r\n@Component\r\npublic class CustomPreZuulFilter extends ZuulFilter {\r\n    @Override\r\n    public Object run() {\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        HttpServletRequest req = ctx.getRequest();\r\n        String requestURI = req.getRequestURI();\r\n        if (requestURI.contains(\"auth/code\")) {\r\n            Map<String, List> params = ctx.getRequestQueryParams();\r\n            if (params == null) {\r\n\t        params = Maps.newHashMap();\r\n\t    }\r\n            params.put(\"response_type\", Lists.newArrayList(new String[] { \"code\" }));\r\n            params.put(\"scope\", Lists.newArrayList(new String[] { \"read\" }));\r\n            params.put(\"client_id\", Lists.newArrayList(new String[] { CLIENT_ID }));\r\n            params.put(\"redirect_uri\", Lists.newArrayList(new String[] { REDIRECT_URL }));\r\n            ctx.setRequestQueryParams(params);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        boolean shouldfilter = false;\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        String URI = ctx.getRequest().getRequestURI();\r\n\r\n        if (URI.contains(\"auth/code\") || URI.contains(\"auth/token\") || \r\n          URI.contains(\"auth/refresh\")) {\t\t\r\n            shouldfilter = true;\r\n\t}\r\n        return shouldfilter;\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return 6;\r\n    }\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return \"pre\";\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomPostZuulFilter extends ZuulFilter {\r\n    private ObjectMapper mapper = new ObjectMapper();\r\n\r\n    @Override\r\n    public Object run() {\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        try {\r\n            Map<String, List> params = ctx.getRequestQueryParams();\r\n\r\n            if (requestURI.contains(\"auth/redirect\")) {\r\n                Cookie cookie = new Cookie(\"code\", params.get(\"code\").get(0));\r\n                cookie.setHttpOnly(true);\r\n                cookie.setPath(ctx.getRequest().getContextPath() + \"/auth/token\");\r\n                ctx.getResponse().addCookie(cookie);\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error occured in zuul post filter\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        boolean shouldfilter = false;\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        String URI = ctx.getRequest().getRequestURI();\r\n\r\n        if (URI.contains(\"auth/redirect\") || URI.contains(\"auth/token\") || URI.contains(\"auth/refresh\")) {\r\n            shouldfilter = true;\r\n        }\r\n        return shouldfilter;\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return 10;\r\n    }\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return \"post\";\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SameSiteConfig implements WebMvcConfigurer {\r\n    @Bean\r\n    public TomcatContextCustomizer sameSiteCookiesConfig() {\r\n        return context -> {\r\n            final Rfc6265CookieProcessor cookieProcessor = new Rfc6265CookieProcessor();\r\n            cookieProcessor.setSameSiteCookies(SameSiteCookies.STRICT.getValue());\r\n            context.setCookieProcessor(cookieProcessor);\r\n        };\r\n    }\r\n}\r\n```","```\r\npublic Object run() {\r\n    RequestContext ctx = RequestContext.getCurrentContext();\r\n    ...\r\n    else if (requestURI.contains(\"auth/token\"))) {\r\n        try {\r\n            String code = extractCookie(req, \"code\");\r\n            String formParams = String.format(\r\n              \"grant_type=%s&client;_id=%s&client;_secret=%s&redirect;_uri=%s&code;=%s\",\r\n              \"authorization_code\", CLIENT_ID, CLIENT_SECRET, REDIRECT_URL, code);\r\n\r\n            byte[] bytes = formParams.getBytes(\"UTF-8\");\r\n            ctx.setRequest(new CustomHttpServletRequest(req, bytes));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    } \r\n    ...\r\n}\r\n\r\nprivate String extractCookie(HttpServletRequest req, String name) {\r\n    Cookie[] cookies = req.getCookies();\r\n    if (cookies != null) {\r\n        for (int i = 0; i < cookies.length; i++) {\r\n            if (cookies[i].getName().equalsIgnoreCase(name)) {\r\n                return cookies[i].getValue();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic class CustomHttpServletRequest extends HttpServletRequestWrapper {\r\n\r\n    private byte[] bytes;\r\n\r\n    public CustomHttpServletRequest(HttpServletRequest request, byte[] bytes) {\r\n        super(request);\r\n        this.bytes = bytes;\r\n    }\r\n\r\n    @Override\r\n    public ServletInputStream getInputStream() throws IOException {\r\n        return new ServletInputStreamWrapper(bytes);\r\n    }\r\n\r\n    @Override\r\n    public int getContentLength() {\r\n        return bytes.length;\r\n    }\r\n\r\n    @Override\r\n    public long getContentLengthLong() {\r\n        return bytes.length;\r\n    }\r\n\r\n    @Override\r\n    public String getMethod() {\r\n        return \"POST\";\r\n    }\r\n}\r\n```","```\r\npublic Object run() {\r\n...\r\n    else if (requestURI.contains(\"auth/token\") || requestURI.contains(\"auth/refresh\")) {\r\n        InputStream is = ctx.getResponseDataStream();\r\n        String responseBody = IOUtils.toString(is, \"UTF-8\");\r\n        if (responseBody.contains(\"refresh_token\")) {\r\n            Map<String, Object> responseMap = mapper.readValue(responseBody, \r\n              new TypeReference<Map<String, Object>>() {});\r\n            String refreshToken = responseMap.get(\"refresh_token\").toString();\r\n            responseMap.remove(\"refresh_token\");\r\n            responseBody = mapper.writeValueAsString(responseMap);\r\n\r\n            Cookie cookie = new Cookie(\"refreshToken\", refreshToken);\r\n            cookie.setHttpOnly(true);\r\n            cookie.setPath(ctx.getRequest().getContextPath() + \"/auth/refresh\");\r\n            cookie.setMaxAge(2592000); // 30 days\r\n            ctx.getResponse().addCookie(cookie);\r\n        }\r\n        ctx.setResponseBody(responseBody);\r\n    }\r\n    ...\r\n}\r\n```","```\r\npublic Object run() {\r\n    RequestContext ctx = RequestContext.getCurrentContext();\r\n    ...\r\n    else if (requestURI.contains(\"auth/refresh\"))) {\r\n        try {\r\n            String token = extractCookie(req, \"token\");                       \r\n            String formParams = String.format(\r\n              \"grant_type=%s&client;_id=%s&client;_secret=%s&refresh;_token=%s\", \r\n              \"refresh_token\", CLIENT_ID, CLIENT_SECRET, token);\r\n\r\n            byte[] bytes = formParams.getBytes(\"UTF-8\");\r\n            ctx.setRequest(new CustomHttpServletRequest(req, bytes));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    } \r\n    ...\r\n}\r\n```","```\r\nrefreshAccessToken() {\r\n  let headers = new HttpHeaders({\r\n    'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\r\n  this._http.post('auth/refresh', {}, {headers: headers })\r\n    .subscribe(\r\n      data => this.saveToken(data),\r\n      err => alert('Invalid Credentials')\r\n    );\r\n}\r\n```","```\r\nmvn clean install\r\n```"]