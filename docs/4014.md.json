["```\r\npublic interface ExpectationsCollaborator {\r\n    String methodForAny1(String s, int i, Boolean b);\r\n    void methodForAny2(Long l, List<String> lst);\r\n}\r\n\r\n@Test\r\npublic void test(@Mocked ExpectationsCollaborator mock) throws Exception {\r\n    new Expectations() {{\r\n        mock.methodForAny1(anyString, anyInt, anyBoolean); \r\n        result = \"any\";\r\n    }};\r\n\r\n    Assert.assertEquals(\"any\", mock.methodForAny1(\"barfooxyz\", 0, Boolean.FALSE));\r\n    mock.methodForAny2(2L, new ArrayList<>());\r\n\r\n    new FullVerifications() {{\r\n        mock.methodForAny2(anyLong, (List<String>) any);\r\n    }};\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator {\r\n    String methodForWith1(String s, int i);\r\n    void methodForWith2(Boolean b, List<String> l);\r\n}\r\n\r\n@Test\r\npublic void testForWith(@Mocked ExpectationsCollaborator mock) throws Exception {\r\n    new Expectations() {{\r\n        mock.methodForWith1(withSubstring(\"foo\"), withNotEqual(1));\r\n        result = \"with\";\r\n    }};\r\n\r\n    assertEquals(\"with\", mock.methodForWith1(\"barfooxyz\", 2));\r\n    mock.methodForWith2(Boolean.TRUE, new ArrayList<>());\r\n\r\n    new Verifications() {{\r\n        mock.methodForWith2(withNotNull(), withInstanceOf(List.class));\r\n    }};\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator {\r\n    String methodForNulls1(String s, List<String> l);\r\n    void methodForNulls2(String s, List<String> l);\r\n}\r\n\r\n@Test\r\npublic void testWithNulls(@Mocked ExpectationsCollaborator mock){\r\n    new Expectations() {{\r\n        mock.methodForNulls1(anyString, null); \r\n        result = \"null\";\r\n    }};\r\n\r\n    assertEquals(\"null\", mock.methodForNulls1(\"blablabla\", new ArrayList<String>()));\r\n    mock.methodForNulls2(\"blablabla\", null);\r\n\r\n    new Verifications() {{\r\n        mock.methodForNulls2(anyString, (List<String>) withNull());\r\n    }};\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator {\r\n    void methodForTimes1();\r\n    void methodForTimes2();\r\n    void methodForTimes3();\r\n}\r\n\r\n@Test\r\npublic void testWithTimes(@Mocked ExpectationsCollaborator mock) {\r\n    new Expectations() {{\r\n        mock.methodForTimes1(); times = 2;\r\n        mock.methodForTimes2();\r\n    }};\r\n\r\n    mock.methodForTimes1();\r\n    mock.methodForTimes1();\r\n    mock.methodForTimes2();\r\n    mock.methodForTimes3();\r\n    mock.methodForTimes3();\r\n    mock.methodForTimes3();\r\n\r\n    new Verifications() {{\r\n        mock.methodForTimes3(); minTimes = 1; maxTimes = 3;\r\n    }};\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator {\r\n    void methodForArgThat(Object o);\r\n}\r\n\r\npublic class Model {\r\n    public String getInfo(){\r\n        return \"info\";\r\n    }\r\n}\r\n\r\n@Test\r\npublic void testCustomArgumentMatching(@Mocked ExpectationsCollaborator mock) {\r\n    new Expectations() {{\r\n        mock.methodForArgThat(withArgThat(new BaseMatcher<Object>() {\r\n            @Override\r\n            public boolean matches(Object item) {\r\n                return item instanceof Model && \"info\".equals(((Model) item).getInfo());\r\n            }\r\n\r\n            @Override\r\n            public void describeTo(Description description) { }\r\n        }));\r\n    }};\r\n    mock.methodForArgThat(new Model());\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator{\r\n    String methodReturnsString();\r\n    int methodReturnsInt();\r\n}\r\n\r\n@Test\r\npublic void testResultAndReturns(@Mocked ExpectationsCollaborator mock) {\r\n    new Expectations() {{\r\n        mock.methodReturnsString();\r\n        result = \"foo\";\r\n        result = new Exception();\r\n        result = \"bar\";\r\n        returns(\"foo\", \"bar\");\r\n        mock.methodReturnsInt();\r\n        result = new int[]{1, 2, 3};\r\n        result = 1;\r\n    }};\r\n\r\n    assertEquals(\"Should return foo\", \"foo\", mock.methodReturnsString());\r\n    try {\r\n        mock.methodReturnsString();\r\n        fail(\"Shouldn't reach here\");\r\n    } catch (Exception e) {\r\n        // NOOP\r\n    }\r\n    assertEquals(\"Should return bar\", \"bar\", mock.methodReturnsString());\r\n    assertEquals(\"Should return 1\", 1, mock.methodReturnsInt());\r\n    assertEquals(\"Should return 2\", 2, mock.methodReturnsInt());\r\n    assertEquals(\"Should return 3\", 3, mock.methodReturnsInt());\r\n    assertEquals(\"Should return foo\", \"foo\", mock.methodReturnsString());\r\n    assertEquals(\"Should return bar\", \"bar\", mock.methodReturnsString());\r\n    assertEquals(\"Should return 1\", 1, mock.methodReturnsInt());\r\n}\r\n```","```\r\npublic interface ExpectationsCollaborator {\r\n    int methodForDelegate(int i);\r\n}\r\n\r\n@Test\r\npublic void testDelegate(@Mocked ExpectationsCollaborator mock) {\r\n    new Expectations() {{\r\n        mock.methodForDelegate(anyInt);\r\n\r\n        result = new Delegate() {\r\n            int delegate(int i) throws Exception {\r\n                if (i < 3) {\r\n                    return 5;\r\n                } else {\r\n                    throw new Exception();\r\n                }\r\n            }\r\n        };\r\n    }};\r\n\r\n    assertEquals(\"Should return 5\", 5, mock.methodForDelegate(1));\r\n    try {\r\n        mock.methodForDelegate(3);\r\n        fail(\"Shouldn't reach here\");\r\n    } catch (Exception e) {\r\n    }\r\n} \r\n```"]