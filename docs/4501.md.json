["```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.ext</groupId>\r\n    <artifactId>jersey-bean-validation</artifactId>\r\n    <version>2.27</version>\r\n</dependency>\r\n```","```\r\npublic ViewApplicationConfig() {\r\n    packages(\"com.baeldung.jersey.server\");\r\n    property(ServerProperties.BV_SEND_ERROR_IN_RESPONSE, true);\r\n} \r\n```","```\r\n@POST\r\n@Path(\"/create\")\r\n@Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\npublic void createFruit(\r\n    @NotNull(message = \"Fruit name must not be null\") @FormParam(\"name\") String name, \r\n    @NotNull(message = \"Fruit colour must not be null\") @FormParam(\"colour\") String colour) {\r\n\r\n    Fruit fruit = new Fruit(name, colour);\r\n    SimpleStorageService.storeFruit(fruit);\r\n} \r\n```","```\r\n@Test\r\npublic void givenCreateFruit_whenFormContainsNullParam_thenResponseCodeIsBadRequest() {\r\n    Form form = new Form();\r\n    form.param(\"name\", \"apple\");\r\n    form.param(\"colour\", null);\r\n    Response response = target(\"fruit/create\").request(MediaType.APPLICATION_FORM_URLENCODED)\r\n        .post(Entity.form(form));\r\n\r\n    assertEquals(\"Http Response should be 400 \", 400, response.getStatus());\r\n    assertThat(response.readEntity(String.class), containsString(\"Fruit colour must not be null\"));\r\n} \r\n```","```\r\n@PUT\r\n@Path(\"/update\")\r\n@Consumes(\"application/x-www-form-urlencoded\")\r\npublic void updateFruit(@SerialNumber @FormParam(\"serial\") String serial) {\r\n    //...\r\n} \r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Constraint(validatedBy = { SerialNumber.Validator.class })\r\n    public @interface SerialNumber {\r\n\r\n    String message()\r\n\r\n    default \"Fruit serial number is not valid\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n} \r\n```","```\r\npublic class Validator implements ConstraintValidator<SerialNumber, String> {\r\n    @Override\r\n    public void initialize(SerialNumber serial) {\r\n    }\r\n\r\n    @Override\r\n    public boolean isValid(String serial, \r\n        ConstraintValidatorContext constraintValidatorContext) {\r\n\r\n        String serialNumRegex = \"^\\\\d{3}-\\\\d{3}-\\\\d{4}$\";\r\n        return Pattern.matches(serialNumRegex, serial);\r\n    }\r\n} \r\n```","```\r\n@XmlRootElement\r\npublic class Fruit {\r\n\r\n    @Min(value = 10, message = \"Fruit weight must be 10 or greater\")\r\n    private Integer weight;\r\n    //...\r\n} \r\n```","```\r\n@POST\r\n@Path(\"/create\")\r\n@Consumes(\"application/json\")\r\npublic void createFruit(@Valid Fruit fruit) {\r\n    SimpleStorageService.storeFruit(fruit);\r\n} \r\n```","```\r\n@GET\r\n@Valid\r\n@Produces(\"application/json\")\r\n@Path(\"/search/{name}\")\r\npublic Fruit findFruitByName(@PathParam(\"name\") String name) {\r\n    return SimpleStorageService.findByName(name);\r\n}\r\n```","```\r\npublic class FruitExceptionMapper implements ExceptionMapper<ConstraintViolationException> {\r\n\r\n    @Override\r\n    public Response toResponse(ConstraintViolationException exception) {\r\n        return Response.status(Response.Status.BAD_REQUEST)\r\n            .entity(prepareMessage(exception))\r\n            .type(\"text/plain\")\r\n            .build();\r\n    }\r\n\r\n    private String prepareMessage(ConstraintViolationException exception) {\r\n        StringBuilder message = new StringBuilder();\r\n        for (ConstraintViolation<?> cv : exception.getConstraintViolations()) {\r\n            message.append(cv.getPropertyPath() + \" \" + cv.getMessage() + \"\\n\");\r\n        }\r\n        return message.toString();\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected Application configure() {\r\n    ViewApplicationConfig config = new ViewApplicationConfig();\r\n    config.register(FruitExceptionMapper.class);\r\n    return config;\r\n}\r\n```","```\r\n@GET\r\n@Produces(MediaType.TEXT_HTML)\r\n@Path(\"/exception\")\r\n@Valid\r\npublic Fruit exception() {\r\n    Fruit fruit = new Fruit();\r\n    fruit.setName(\"a\");\r\n    fruit.setColour(\"b\");\r\n    return fruit;\r\n} \r\n```"]