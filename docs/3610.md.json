["```\r\n@RequestMapping(value = \"/get/{id}\", method = RequestMethod.GET)\r\n```","```\r\n@GetMapping(\"/get/{id}\")\r\n```","```\r\n@Target({ java.lang.annotation.ElementType.METHOD })\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@RequestMapping(method = { RequestMethod.GET })\r\npublic @interface GetMapping {\r\n    // abstract codes\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>5.2.2.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@GetMapping(\"/get\")\r\npublic @ResponseBody ResponseEntity<String> get() {\r\n    return new ResponseEntity<String>(\"GET Response\", HttpStatus.OK);\r\n} \r\n```","```\r\n@GetMapping(\"/get/{id}\")\r\npublic @ResponseBody ResponseEntity<String>\r\n  getById(@PathVariable String id) {\r\n    return new ResponseEntity<String>(\"GET Response : \" \r\n      + id, HttpStatus.OK);\r\n}\r\n```","```\r\n@PostMapping(\"/post\")\r\npublic @ResponseBody ResponseEntity<String> post() {\r\n    return new ResponseEntity<String>(\"POST Response\", HttpStatus.OK);\r\n}\r\n```","```\r\n@PutMapping(\"/put\")\r\npublic @ResponseBody ResponseEntity<String> put() {\r\n    return new ResponseEntity<String>(\"PUT Response\", HttpStatus.OK);\r\n}\r\n```","```\r\n@DeleteMapping(\"/delete\")\r\npublic @ResponseBody ResponseEntity<String> delete() {\r\n    return new ResponseEntity<String>(\"DELETE Response\", HttpStatus.OK);\r\n}\r\n```","```\r\n@PatchMapping(\"/patch\")\r\npublic @ResponseBody ResponseEntity<String> patch() {\r\n    return new ResponseEntity<String>(\"PATCH Response\", HttpStatus.OK);\r\n}\r\n```","```\r\n@Test \r\npublic void giventUrl_whenGetRequest_thenFindGetResponse() \r\n  throws Exception {\r\n\r\n    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders\r\n      .get(\"/get\");\r\n\r\n    ResultMatcher contentMatcher = MockMvcResultMatchers.content()\r\n      .string(\"GET Response\");\r\n\r\n    this.mockMvc.perform(builder).andExpect(contentMatcher)\r\n      .andExpect(MockMvcResultMatchers.status().isOk());\r\n\r\n}\r\n```","```\r\n@Test \r\npublic void givenUrl_whenPostRequest_thenFindPostResponse() \r\n  throws Exception {\r\n\r\n    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders\r\n      .post(\"/post\");\r\n\r\n    ResultMatcher contentMatcher = MockMvcResultMatchers.content()\r\n      .string(\"POST Response\");\r\n\r\n    this.mockMvc.perform(builder).andExpect(contentMatcher)\r\n      .andExpect(MockMvcResultMatchers.status().isOk());\r\n\r\n}\r\n```"]