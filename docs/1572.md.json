["```\r\n<dependency>\r\n    <groupId>com.google.code.gson</groupId>\r\n    <artifactId>gson</artifactId>\r\n    <version>${gson.version}</version>\r\n</dependency>\r\n```","```\r\npublic class ActorGson {\r\n    private String imdbId;\r\n    private Date dateOfBirth;\r\n    private List<String> filmography;\r\n\r\n    // getters and setters, default constructor and field constructor omitted\r\n}\r\n\r\npublic class Movie {\r\n    private String imdbId;\r\n    private String director;\r\n    private List<ActorGson> actors;\r\n\r\n    // getters and setters, default constructor and field constructor omitted\r\n}\r\n```","```\r\nSimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\nActorGson rudyYoungblood = new ActorGson(\r\n  \"nm2199632\",\r\n  sdf.parse(\"21-09-1982\"), \r\n  Arrays.asList(\"Apocalypto\",\r\n  \"Beatdown\", \"Wind Walkers\")\r\n);\r\nMovie movie = new Movie(\r\n  \"tt0472043\", \r\n  \"Mel Gibson\",\r\n  Arrays.asList(rudyYoungblood));\r\n\r\nString serializedMovie = new Gson().toJson(movie);\r\n```","```\r\n{\r\n    \"imdbId\": \"tt0472043\",\r\n    \"director\": \"Mel Gibson\",\r\n    \"actors\": [{\r\n        \"imdbId\": \"nm2199632\",\r\n        \"dateOfBirth\": \"Sep 21, 1982 12:00:00 AM\",\r\n        \"filmography\": [\"Apocalypto\", \"Beatdown\", \"Wind Walkers\"]\r\n    }]\r\n}\r\n```","```\r\npublic class ActorGsonSerializer implements JsonSerializer<ActorGson> {\r\n    private SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n    @Override\r\n    public JsonElement serialize(ActorGson actor, Type type,\r\n        JsonSerializationContext jsonSerializationContext) {\r\n\r\n        JsonObject actorJsonObj = new JsonObject();\r\n\r\n        actorJsonObj.addProperty(\"<strong>IMDB Code</strong>\", actor.getImdbId());\r\n\r\n        actorJsonObj.addProperty(\"<strong>Date Of Birth</strong>\", \r\n          actor.getDateOfBirth() != null ? \r\n          sdf.format(actor.getDateOfBirth()) : null);\r\n\r\n        actorJsonObj.addProperty(\"<strong>N° Film:</strong> \",  \r\n          actor.getFilmography()  != null ?  \r\n          actor.getFilmography().size() : null);\r\n\r\n        actorJsonObj.addProperty(\"filmography\", actor.getFilmography() != null ? \r\n          convertFilmography(actor.getFilmography()) : null);\r\n\r\n        return actorJsonObj;\r\n    }\r\n\r\n    private String convertFilmography(List<String> filmography) {\r\n        return filmography.stream()\r\n          .collect(Collectors.joining(\"-\"));\r\n    }\r\n}\r\n```","```\r\npublic class MovieWithNullValue {\r\n\r\n    @Expose\r\n    private String imdbId;\r\n    private String director;\r\n\r\n    @Expose\r\n    private List<ActorGson> actors;\r\n}\r\n```","```\r\nGson gson = new GsonBuilder()\r\n  .setPrettyPrinting()\r\n  .excludeFieldsWithoutExposeAnnotation()\r\n  .serializeNulls()\r\n  .disableHtmlEscaping()\r\n  .registerTypeAdapter(ActorGson.class, new ActorGsonSerializer())\r\n  .create();\r\n\r\nSimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\nActorGson rudyYoungblood = new ActorGson(\"nm2199632\",\r\n  sdf.parse(\"21-09-1982\"), Arrays.asList(\"Apocalypto\",\"Beatdown\", \"Wind Walkers\"));\r\n\r\nMovieWithNullValue movieWithNullValue = new MovieWithNullValue(null,\r\n  \"Mel Gibson\", Arrays.asList(rudyYoungblood));\r\n\r\nString serializedMovie = gson.toJson(movieWithNullValue);\r\n```","```\r\n{\r\n  \"imdbId\": null,\r\n  \"actors\": [\r\n    {\r\n      \"<strong>IMDB Code</strong>\": \"nm2199632\",\r\n      \"<strong>Date Of Birth</strong>\": \"21-09-1982\",\r\n      \"<strong>N° Film:</strong> \": 3,\r\n      \"filmography\": \"Apocalypto-Beatdown-Wind Walkers\"\r\n    }\r\n  ]\r\n}\r\n```","```\r\npublic class Movie {\r\n    @Override\r\n    public String toString() {\r\n      return \"Movie [imdbId=\" + imdbId + \", director=\" + director + \",actors=\" + actors + \"]\";\r\n    }\r\n    ...\r\n}\r\n\r\npublic class ActorGson {\r\n    @Override\r\n    public String toString() {\r\n        return \"ActorGson [imdbId=\" + imdbId + \", dateOfBirth=\" + dateOfBirth +\r\n          \",filmography=\" + filmography + \"]\";\r\n    }\r\n    ...\r\n}\r\n```","```\r\nString jsonInput = \"{\\\"imdbId\\\":\\\"tt0472043\\\",\\\"actors\\\":\" +\r\n  \"[{\\\"imdbId\\\":\\\"nm2199632\\\",\\\"dateOfBirth\\\":\\\"1982-09-21T12:00:00+01:00\\\",\" +\r\n  \"\\\"filmography\\\":[\\\"Apocalypto\\\",\\\"Beatdown\\\",\\\"Wind Walkers\\\"]}]}\";\r\n\r\nMovie outputMovie = new Gson().fromJson(jsonInput, Movie.class);\r\noutputMovie.toString();\r\n```","```\r\nMovie [imdbId=tt0472043, director=null, actors=[ActorGson \r\n  [imdbId=nm2199632, dateOfBirth=Tue Sep 21 04:00:00 PDT 1982, \r\n  filmography=[Apocalypto, Beatdown, Wind Walkers]]]]\r\n```","```\r\npublic class ActorGsonDeserializer implements JsonDeserializer<ActorGson> {\r\n\r\n    private SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\r\n\r\n    @Override\r\n    public ActorGson deserialize(JsonElement json, Type type,\r\n      JsonDeserializationContext jsonDeserializationContext) throws JsonParseException {\r\n\r\n        JsonObject jsonObject = json.getAsJsonObject();\r\n\r\n        JsonElement jsonImdbId = jsonObject.get(\"imdbId\");\r\n        JsonElement jsonDateOfBirth = jsonObject.get(\"dateOfBirth\");\r\n        JsonArray jsonFilmography = jsonObject.getAsJsonArray(\"filmography\");\r\n\r\n        ArrayList<String> filmList = new ArrayList<String>();\r\n        if (jsonFilmography != null) {\r\n            for (int i = 0; i < jsonFilmography.size(); i++) {\r\n                filmList.add(jsonFilmography.get(i).getAsString());\r\n            }\r\n        }\r\n\r\n    ActorGson actorGson = new ActorGson(jsonImdbId.getAsString(),\r\n      sdf.parse(jsonDateOfBirth.getAsString()), filmList);\r\n        return actorGson;\r\n    }\r\n}\r\n```","```\r\nString jsonInput = \"{\\\"imdbId\\\":\\\"tt0472043\\\",\\\"actors\\\":\"\r\n  + \"[{\\\"imdbId\\\":\\\"nm2199632\\\",\\\"dateOfBirth\\\":\\\"1982-09-21T12:00:00+01:00\\\",\r\n  + \\\"filmography\\\":[\\\"Apocalypto\\\",\\\"Beatdown\\\",\\\"Wind Walkers\\\"]}]}\";\r\n\r\nGson gson = new GsonBuilder()\r\n  .registerTypeAdapter(ActorGson.class,new ActorGsonDeserializer())\r\n  .create();\r\n\r\nMovie outputMovie = gson.fromJson(jsonInput, Movie.class);\r\noutputMovie.toString();\r\n```","```\r\nMovie [imdbId=tt0472043, director=null, actors=[ActorGson\r\n  [imdbId=nm2199632, dateOfBirth=Tue Sep 21 12:00:00 PDT 1982, \r\n  filmography=[Apocalypto, Beatdown, Wind Walkers]]]]\r\n```","```\r\n<dependency> \r\n    <groupId>com.fasterxml.jackson.core</groupId> \r\n    <artifactId>jackson-databind</artifactId>   \r\n    <version>${jackson.version}</version> \r\n</dependency>\r\n```","```\r\npublic class ActorJackson {\r\n    private String imdbId;\r\n    private Date dateOfBirth;\r\n    private List<String> filmography;\r\n\r\n    // required getters and setters, default constructor \r\n    // and field constructor details omitted\r\n}\r\n\r\npublic class Movie {\r\n    private String imdbId;\r\n    private String director;\r\n    private List<ActorJackson> actors;\r\n\r\n    // required getters and setters, default constructor \r\n    // and field constructor details omitted\r\n}\r\nSimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\"); \r\nActorJackson rudyYoungblood = new ActorJackson(\"nm2199632\",sdf.parse(\"21-09-1982\"),\r\n  Arrays.asList(\"Apocalypto\",\"Beatdown\",\"Wind Walkers\") ); \r\nMovie movie = new Movie(\"tt0472043\",\"Mel Gibson\", Arrays.asList(rudyYoungblood)); \r\nObjectMapper mapper = new ObjectMapper(); \r\nString jsonResult = mapper.writeValueAsString(movie);\r\n```","```\r\n{\"imdbId\":\"tt0472043\",\"director\":\"Mel Gibson\",\"actors\":\r\n[{\"imdbId\":\"nm2199632\",\"dateOfBirth\":401439600000,\r\n\"filmography\":[\"Apocalypto\",\"Beatdown\",\"Wind Walkers\"]}]}\r\n```","```\r\npublic class ActorJacksonSerializer extends StdSerializer<ActorJackson> {\r\n\r\n    private SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n    public ActorJacksonSerializer(Class t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(ActorJackson actor, JsonGenerator jsonGenerator,\r\n      SerializerProvider serializerProvider) throws IOException {\r\n\r\n        jsonGenerator.writeStartObject();\r\n        jsonGenerator.writeStringField(\"imdbId\", actor.getImdbId());\r\n        jsonGenerator.writeObjectField(\"dateOfBirth\",\r\n          actor.getDateOfBirth() != null ?\r\n          sdf.format(actor.getDateOfBirth()) : null);\r\n\r\n        jsonGenerator.writeNumberField(\"N° Film: \", \r\n          actor.getFilmography() != null ? actor.getFilmography().size() : null);\r\n    jsonGenerator.writeStringField(\"filmography\", actor.getFilmography()\r\n          .stream().collect(Collectors.joining(\"-\")));\r\n\r\n        jsonGenerator.writeEndObject();\r\n    }\r\n}\r\n```","```\r\npublic class MovieWithNullValue {\r\n\r\n    private String imdbId;\r\n\r\n    @JsonIgnore\r\n    private String director;\r\n\r\n    private List<ActorJackson> actors;\r\n\r\n    // required getters and setters, default constructor\r\n    // and field constructor details omitted\r\n}\r\n```","```\r\nSimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\nActorJackson rudyYoungblood = new ActorJackson(\r\n  \"nm2199632\", \r\n  sdf.parse(\"21-09-1982\"), \r\n  Arrays.asList(\"Apocalypto\", \"Beatdown\",\"Wind Walkers\"));\r\nMovieWithNullValue movieWithNullValue = \r\n  new MovieWithNullValue(null,\"Mel Gibson\", Arrays.asList(rudyYoungblood));\r\n\r\nSimpleModule module = new SimpleModule();\r\nmodule.addSerializer(new ActorJacksonSerializer(ActorJackson.class));\r\nObjectMapper mapper = new ObjectMapper();\r\nString jsonResult = mapper.registerModule(module)\r\n  .writer(new DefaultPrettyPrinter())\r\n  .writeValueAsString(movieWithNullValue);\r\n```","```\r\n{\r\n  \"actors\" : [ {\r\n    \"imdbId\" : \"nm2199632\",\r\n    \"dateOfBirth\" : \"21-09-1982\",\r\n    \"N° Film: \" : 3,\r\n    \"filmography\" : \"Apocalypto-Beatdown-Wind Walkers\"\r\n  } ],\r\n  \"imdbID\" : null\r\n}\r\n```","```\r\npublic class Movie {\r\n    @Override\r\n    public String toString() {\r\n        return \"Movie [imdbId=\" + imdbId + \", director=\" + director\r\n          + \", actors=\" + actors + \"]\";\r\n    }\r\n    ...\r\n}\r\n\r\npublic class ActorJackson {\r\n    @Override\r\n    public String toString() {\r\n        return \"ActorJackson [imdbId=\" + imdbId + \", dateOfBirth=\" + dateOfBirth\r\n          + \", filmography=\" + filmography + \"]\";\r\n    }\r\n    ...\r\n}\r\n```","```\r\nString jsonInput = \"{\\\"imdbId\\\":\\\"tt0472043\\\",\\\"actors\\\":\r\n  [{\\\"imdbId\\\":\\\"nm2199632\\\",\\\"dateOfBirth\\\":\\\"1982-09-21T12:00:00+01:00\\\",\r\n  \\\"filmography\\\":[\\\"Apocalypto\\\",\\\"Beatdown\\\",\\\"Wind Walkers\\\"]}]}\";\r\nObjectMapper mapper = new ObjectMapper();\r\nMovie movie = mapper.readValue(jsonInput, Movie.class);\r\n```","```\r\nMovie [imdbId=tt0472043, director=null, actors=[ActorJackson \r\n  [imdbId=nm2199632, dateOfBirth=Tue Sep 21 04:00:00 PDT 1982, \r\n  filmography=[Apocalypto, Beatdown, Wind Walkers]]]]\r\n```","```\r\nString jsonInput = \"{\\\"imdbId\\\":\\\"tt0472043\\\",\\\"director\\\":\\\"Mel Gibson\\\",\r\n  \\\"actors\\\":[{\\\"imdbId\\\":\\\"nm2199632\\\",\\\"dateOfBirth\\\":\\\"1982-09-21T12:00:00+01:00\\\",\r\n  \\\"filmography\\\":[\\\"Apocalypto\\\",\\\"Beatdown\\\",\\\"Wind Walkers\\\"]}]}\";\r\n\r\nObjectMapper mapper = new ObjectMapper();\r\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\r\nmapper.setDateFormat(df);\r\n\r\nMovie movie = mapper.readValue(jsonInput, Movie.class);\r\nmovie.toString();\r\n```","```\r\nMovie [imdbId=tt0472043, director=Mel Gibson, actors=[ActorJackson \r\n  [imdbId=nm2199632, dateOfBirth=Tue Sep 21 12:00:00 PDT 1982, \r\n  filmography=[Apocalypto, Beatdown, Wind Walkers]]]]\r\n```"]