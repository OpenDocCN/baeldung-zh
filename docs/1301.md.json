["```\r\npublic class Source {\r\n    private String name;\r\n    private int age;\r\n\r\n    public Source() {}\r\n\r\n    public Source(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Dest {\r\n    private String name;\r\n    private int age;\r\n\r\n    public Dest() {}\r\n\r\n    public Dest(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nDozerBeanMapper mapper;\r\n\r\n@Before\r\npublic void before() throws Exception {\r\n    mapper = new DozerBeanMapper();\r\n}\r\n```","```\r\n@Test\r\npublic void givenSourceObjectAndDestClass_whenMapsSameNameFieldsCorrectly_\r\n  thenCorrect() {\r\n    Source source = new Source(\"Baeldung\", 10);\r\n    Dest dest = mapper.map(source, Dest.class);\r\n\r\n    assertEquals(dest.getName(), \"Baeldung\");\r\n    assertEquals(dest.getAge(), 10);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSourceObjectAndDestObject_whenMapsSameNameFieldsCorrectly_\r\n  thenCorrect() {\r\n    Source source = new Source(\"Baeldung\", 10);\r\n    Dest dest = new Dest();\r\n    mapper.map(source, dest);\r\n\r\n    assertEquals(dest.getName(), \"Baeldung\");\r\n    assertEquals(dest.getAge(), 10);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>net.sf.dozer</groupId>\r\n    <artifactId>dozer</artifactId>\r\n    <version>5.5.1</version>\r\n</dependency>\r\n```","```\r\npublic class Source2 {\r\n    private String id;\r\n    private double points;\r\n\r\n    public Source2() {}\r\n\r\n    public Source2(String id, double points) {\r\n        this.id = id;\r\n        this.points = points;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Dest2 {\r\n    private int id;\r\n    private int points;\r\n\r\n    public Dest2() {}\r\n\r\n    public Dest2(int id, int points) {\r\n        super();\r\n        this.id = id;\r\n        this.points = points;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenSourceAndDestWithDifferentFieldTypes_\r\n  whenMapsAndAutoConverts_thenCorrect() {\r\n    Source2 source = new Source2(\"320\", 15.2);\r\n    Dest2 dest = mapper.map(source, Dest2.class);\r\n\r\n    assertEquals(dest.getId(), 320);\r\n    assertEquals(dest.getPoints(), 15);\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private String nickname;\r\n    private int age;\r\n\r\n    public Person() {}\r\n\r\n    public Person(String name, String nickname, int age) {\r\n        super();\r\n        this.name = name;\r\n        this.nickname = nickname;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Personne {\r\n    private String nom;\r\n    private String surnom;\r\n    private int age;\r\n\r\n    public Personne() {}\r\n\r\n    public Personne(String nom, String surnom, int age) {\r\n        super();\r\n        this.nom = nom;\r\n        this.surnom = surnom;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<mappings  \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://dozer.sourceforge.net\r\n      http://dozer.sourceforge.net/schema/beanmapping.xsd\">\r\n    <mapping>\r\n        <class-a>com.baeldung.dozer.Personne</class-a>\r\n        <class-b>com.baeldung.dozer.Person</class-b>\r\n        <field>\r\n            <a>nom</a>\r\n            <b>name</b>\r\n        </field>\r\n        <field>\r\n            <a>surnom</a>\r\n            <b>nickname</b>\r\n        </field>\r\n    </mapping>\r\n</mappings>\r\n```","```\r\npublic void configureMapper(String... mappingFileUrls) {\r\n    mapper.setMappingFiles(Arrays.asList(mappingFileUrls));\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDestWithDifferentFieldNamesWithCustomMapper_\r\n  whenMaps_thenCorrect() {\r\n    configureMapper(\"dozer_mapping.xml\");\r\n    Personne frenchAppPerson = new Personne(\"Sylvester Stallone\", \"Rambo\", 70);\r\n    Person englishAppPerson = mapper.map(frenchAppPerson, Person.class);\r\n\r\n    assertEquals(englishAppPerson.getName(), frenchAppPerson.getNom());\r\n    assertEquals(englishAppPerson.getNickname(), frenchAppPerson.getSurnom());\r\n    assertEquals(englishAppPerson.getAge(), frenchAppPerson.getAge());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDestWithDifferentFieldNamesWithCustomMapper_\r\n  whenMapsBidirectionally_thenCorrect() {\r\n    configureMapper(\"dozer_mapping.xml\");\r\n    Person englishAppPerson = new Person(\"Dwayne Johnson\", \"The Rock\", 44);\r\n    Personne frenchAppPerson = mapper.map(englishAppPerson, Personne.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(),englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), englishAppPerson.getAge());\r\n}\r\n```","```\r\nconfigureMapper(\"file:/home/dozer_mapping.xml\");\r\n```","```\r\nconfigureMapper(\"file:/Users/me/dozer_mapping.xml\");\r\n```","```\r\n@Test\r\npublic void givenMappingFileOutsideClasspath_whenMaps_thenCorrect() {\r\n    configureMapper(\"file:E:\\\\dozer_mapping.xml\");\r\n    Person englishAppPerson = new Person(\"Marshall Bruce Mathers III\",\"Eminem\", 43);\r\n    Personne frenchAppPerson = mapper.map(englishAppPerson, Personne.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(),englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), englishAppPerson.getAge());\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<mappings  \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://dozer.sourceforge.net \r\n      http://dozer.sourceforge.net/schema/beanmapping.xsd\">\r\n    <mapping wildcard=\"false\">\r\n        <class-a>com.baeldung.dozer.Personne</class-a>\r\n        <class-b>com.baeldung.dozer.Person</class-b>\r\n        <field>\r\n            <a>nom</a>\r\n            <b>name</b>\r\n        </field>\r\n        <field>\r\n            <a>surnom</a>\r\n            <b>nickname</b>\r\n        </field>\r\n    </mapping>\r\n</mappings>\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenMapsOnlySpecifiedFields_thenCorrect() {\r\n    configureMapper(\"dozer_mapping2.xml\");\r\n    Person englishAppPerson = new Person(\"Shawn Corey Carter\",\"Jay Z\", 46);\r\n    Personne frenchAppPerson = mapper.map(englishAppPerson, Personne.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(),englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), 0);\r\n}\r\n```","```\r\n@Mapping(\"name\")\r\npublic String getNom() {\r\n    return nom;\r\n}\r\n\r\n@Mapping(\"nickname\")\r\npublic String getSurnom() {\r\n    return surnom;\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnnotatedSrcFields_whenMapsToRightDestField_thenCorrect() {\r\n    Person2 englishAppPerson = new Person2(\"Jean-Claude Van Damme\", \"JCVD\", 55);\r\n    Personne2 frenchAppPerson = mapper.map(englishAppPerson, Personne2.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(), englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), englishAppPerson.getAge());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnnotatedSrcFields_whenMapsToRightDestFieldBidirectionally_\r\n  thenCorrect() {\r\n    Personne2 frenchAppPerson = new Personne2(\"Jason Statham\", \"transporter\", 49);\r\n    Person2 englishAppPerson = mapper.map(frenchAppPerson, Person2.class);\r\n\r\n    assertEquals(englishAppPerson.getName(), frenchAppPerson.getNom());\r\n    assertEquals(englishAppPerson.getNickname(), frenchAppPerson.getSurnom());\r\n    assertEquals(englishAppPerson.getAge(), frenchAppPerson.getAge());\r\n}\r\n```","```\r\nBeanMappingBuilder builder = new BeanMappingBuilder() {\r\n    @Override\r\n    protected void configure() {\r\n        mapping(Person.class, Personne.class)\r\n          .fields(\"name\", \"nom\")\r\n            .fields(\"nickname\", \"surnom\");\r\n    }\r\n};\r\n```","```\r\n@Test\r\npublic void givenApiMapper_whenMaps_thenCorrect() {\r\n    mapper.addMapping(builder);\r\n\r\n    Personne frenchAppPerson = new Personne(\"Sylvester Stallone\", \"Rambo\", 70);\r\n    Person englishAppPerson = mapper.map(frenchAppPerson, Person.class);\r\n\r\n    assertEquals(englishAppPerson.getName(), frenchAppPerson.getNom());\r\n    assertEquals(englishAppPerson.getNickname(), frenchAppPerson.getSurnom());\r\n    assertEquals(englishAppPerson.getAge(), frenchAppPerson.getAge());\r\n}\r\n```","```\r\n@Test\r\npublic void givenApiMapper_whenMapsBidirectionally_thenCorrect() {\r\n    mapper.addMapping(builder);\r\n\r\n    Person englishAppPerson = new Person(\"Sylvester Stallone\", \"Rambo\", 70);\r\n    Personne frenchAppPerson = mapper.map(englishAppPerson, Personne.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(), englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), englishAppPerson.getAge());\r\n}\r\n```","```\r\nBeanMappingBuilder builderMinusAge = new BeanMappingBuilder() {\r\n    @Override\r\n    protected void configure() {\r\n        mapping(Person.class, Personne.class)\r\n          .fields(\"name\", \"nom\")\r\n            .fields(\"nickname\", \"surnom\")\r\n              .exclude(\"age\");\r\n    }\r\n};\r\n```","```\r\n@Test\r\npublic void givenApiMapper_whenMapsOnlySpecifiedFields_thenCorrect() {\r\n    mapper.addMapping(builderMinusAge); \r\n    Person englishAppPerson = new Person(\"Sylvester Stallone\", \"Rambo\", 70);\r\n    Personne frenchAppPerson = mapper.map(englishAppPerson, Personne.class);\r\n\r\n    assertEquals(frenchAppPerson.getNom(), englishAppPerson.getName());\r\n    assertEquals(frenchAppPerson.getSurnom(), englishAppPerson.getNickname());\r\n    assertEquals(frenchAppPerson.getAge(), 0);\r\n}\r\n```","```\r\n1182882159000\r\n```","```\r\n2007-06-26T21:22:39Z\r\n```","```\r\n\"1182882159000\"\r\n```","```\r\npublic class Personne3 {\r\n    private String name;\r\n    private long dtob;\r\n\r\n    public Personne3(String name, long dtob) {\r\n        super();\r\n        this.name = name;\r\n        this.dtob = dtob;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Person3 {\r\n    private String name;\r\n    private String dtob;\r\n\r\n    public Person3(String name, String dtob) {\r\n        super();\r\n        this.name = name;\r\n        this.dtob = dtob;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class MyCustomConvertor implements CustomConverter {\r\n    @Override\r\n    public Object convert(Object dest, Object source, Class<?> arg2, Class<?> arg3) {\r\n        if (source == null) \r\n            return null;\r\n\r\n        if (source instanceof Personne3) {\r\n            Personne3 person = (Personne3) source;\r\n            Date date = new Date(person.getDtob());\r\n            DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\r\n            String isoDate = format.format(date);\r\n            return new Person3(person.getName(), isoDate);\r\n\r\n        } else if (source instanceof Person3) {\r\n            Person3 person = (Person3) source;\r\n            DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\r\n            Date date = format.parse(person.getDtob());\r\n            long timestamp = date.getTime();\r\n            return new Personne3(person.getName(), timestamp);\r\n        }\r\n    }\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<mappings  \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://dozer.sourceforge.net\r\n      http://dozer.sourceforge.net/schema/beanmapping.xsd\">\r\n    <configuration>\r\n        <custom-converters>\r\n            <converter type=\"com.baeldung.dozer.MyCustomConvertor\">\r\n                <class-a>com.baeldung.dozer.Personne3</class-a>\r\n                <class-b>com.baeldung.dozer.Person3</class-b>\r\n            </converter>\r\n        </custom-converters>\r\n    </configuration>\r\n</mappings>\r\n```","```\r\n@Test\r\npublic void givenSrcAndDestWithDifferentFieldTypes_whenAbleToCustomConvert_\r\n  thenCorrect() {\r\n\r\n    configureMapper(\"dozer_custom_convertor.xml\");\r\n    String dateTime = \"2007-06-26T21:22:39Z\";\r\n    long timestamp = new Long(\"1182882159000\");\r\n    Person3 person = new Person3(\"Rich\", dateTime);\r\n    Personne3 person0 = mapper.map(person, Personne3.class);\r\n\r\n    assertEquals(timestamp, person0.getDtob());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDestWithDifferentFieldTypes_\r\n  whenAbleToCustomConvertBidirectionally_thenCorrect() {\r\n    configureMapper(\"dozer_custom_convertor.xml\");\r\n    String dateTime = \"2007-06-26T21:22:39Z\";\r\n    long timestamp = new Long(\"1182882159000\");\r\n    Personne3 person = new Personne3(\"Rich\", timestamp);\r\n    Person3 person0 = mapper.map(person, Person3.class);\r\n\r\n    assertEquals(dateTime, person0.getDtob());\r\n}\r\n```"]