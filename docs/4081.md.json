["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n    <version>3.2.6.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <version>3.2.6.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class SequenceGenerator {\r\n    // methods that will follow\r\n}\r\n```","```\r\npublic Flux<Integer> generateFibonacciWithTuples() {\r\n    return Flux.generate(\r\n            () -> Tuples.of(0, 1),\r\n            (state, sink) -> {\r\n                sink.next(state.getT1());\r\n                return Tuples.of(state.getT2(), state.getT1() + state.getT2());\r\n            }\r\n    );\r\n}\r\n```","```\r\n@Test\r\npublic void whenGeneratingNumbersWithTuplesState_thenFibonacciSequenceIsProduced() {\r\n    SequenceGenerator sequenceGenerator = new SequenceGenerator();\r\n    Flux<Integer> fibonacciFlux = sequenceGenerator.generateFibonacciWithTuples().take(5);\r\n\r\n    StepVerifier.create(fibonacciFlux)\r\n      .expectNext(0, 1, 1, 2, 3)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\npublic class FibonacciState {\r\n    private int former;\r\n    private int latter;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\npublic Flux<Integer> generateFibonacciWithCustomClass(int limit) {\r\n    return Flux.generate(\r\n      () -> new FibonacciState(0, 1),\r\n      (state, sink) -> {\r\n        sink.next(state.getFormer());\r\n        if (state.getLatter() > limit) {\r\n            sink.complete();\r\n        }\r\n        int temp = state.getFormer();\r\n        state.setFormer(state.getLatter());\r\n        state.setLatter(temp + state.getLatter());\r\n        return state;\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void whenGeneratingNumbersWithCustomClass_thenFibonacciSequenceIsProduced() {\r\n    SequenceGenerator sequenceGenerator = new SequenceGenerator();\r\n\r\n    StepVerifier.create(sequenceGenerator.generateFibonacciWithCustomClass(10))\r\n      .expectNext(0, 1, 1, 2, 3, 5, 8)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\npublic class SequenceCreator {\r\n    public Consumer<List<Integer>> consumer;\r\n\r\n    public Flux<Integer> createNumberSequence() {\r\n        return Flux.create(sink -> SequenceCreator.this.consumer = items -> items.forEach(sink::next));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingNumbers_thenSequenceIsProducedAsynchronously() throws InterruptedException {\r\n    SequenceGenerator sequenceGenerator = new SequenceGenerator();\r\n    List<Integer> sequence1 = sequenceGenerator.generateFibonacciWithTuples().take(3).collectList().block();\r\n    List<Integer> sequence2 = sequenceGenerator.generateFibonacciWithTuples().take(4).collectList().block();\r\n\r\n    // other statements described below\r\n}\r\n```","```\r\nSequenceCreator sequenceCreator = new SequenceCreator();\r\nThread producingThread1 = new Thread(\r\n  () -> sequenceCreator.consumer.accept(sequence1)\r\n);\r\nThread producingThread2 = new Thread(\r\n  () -> sequenceCreator.consumer.accept(sequence2)\r\n);\r\n```","```\r\nList<Integer> consolidated = new ArrayList<>();\r\nsequenceCreator.createNumberSequence().subscribe(consolidated::add);\r\n```","```\r\nproducingThread1.start();\r\nproducingThread2.start();\r\nproducingThread1.join();\r\nproducingThread2.join();\r\n```","```\r\nassertThat(consolidated).containsExactlyInAnyOrder(0, 1, 1, 0, 1, 1, 2);\r\n```","```\r\npublic class SequenceHandler {\r\n    public Flux<Integer> handleIntegerSequence(Flux<Integer> sequence) {\r\n        return sequence.handle((number, sink) -> {\r\n            if (number % 2 == 0) {\r\n                sink.next(number / 2);\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandlingNumbers_thenSequenceIsMappedAndFiltered() {\r\n    SequenceHandler sequenceHandler = new SequenceHandler();\r\n    SequenceGenerator sequenceGenerator = new SequenceGenerator();\r\n    Flux<Integer> sequence = sequenceGenerator.generateFibonacciWithTuples().take(10);\r\n\r\n    StepVerifier.create(sequenceHandler.handleIntegerSequence(sequence))\r\n      .expectNext(0, 1, 4, 17)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```"]