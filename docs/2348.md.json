["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n    private final String name;\r\n\r\n    // standard constructor / getters / toString\r\n\r\n}\r\n```","```\r\n@Repository\r\npublic interface UserRepository extends PagingAndSortingRepository<User, Long> {}\r\n```","```\r\n@RestController\r\npublic class UserController {\r\n\r\n    @GetMapping(\"/users/{id}\")\r\n    public User findUserById(@PathVariable(\"id\") User user) {\r\n        return user;\r\n    }\r\n} \r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n    @Bean\r\n    CommandLineRunner initialize(UserRepository userRepository) {\r\n        return args -> {\r\n            Stream.of(\"John\", \"Robert\", \"Nataly\", \"Helen\", \"Mary\").forEach(name -> {\r\n                User user = new User(name);\r\n                userRepository.save(user);\r\n            });\r\n            userRepository.findAll().forEach(System.out::println);\r\n        };\r\n    }\r\n}\r\n```","```\r\nUser{id=1, name=John}\r\nUser{id=2, name=Robert}\r\nUser{id=3, name=Nataly}\r\nUser{id=4, name=Helen}\r\nUser{id=5, name=Mary}\r\n```","```\r\n{\r\n  \"id\":1,\r\n  \"name\":\"John\"\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetRequestToUsersEndPointWithIdPathVariable_thenCorrectResponse() throws Exception {\r\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/users/{id}\", \"1\")\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$.id\").value(\"1\"));\r\n    }\r\n} \r\n```","```\r\n@GetMapping(\"/users\")\r\npublic Page<User> findAllUsers(Pageable pageable) {\r\n    return userRepository.findAll(pageable);\r\n} \r\n```","```\r\n{\r\n  \"content\":[\r\n    {\r\n      \"id\":1,\r\n      \"name\":\"John\"\r\n    },\r\n    {\r\n      \"id\":2,\r\n      \"name\":\"Robert\"\r\n    },\r\n    {\r\n      \"id\":3,\r\n      \"name\":\"Nataly\"\r\n    },\r\n    {\r\n      \"id\":4,\r\n      \"name\":\"Helen\"\r\n    },\r\n    {\r\n      \"id\":5,\r\n      \"name\":\"Mary\"\r\n    }],\r\n  \"pageable\":{\r\n    \"sort\":{\r\n      \"sorted\":false,\r\n      \"unsorted\":true,\r\n      \"empty\":true\r\n    },\r\n    \"pageSize\":5,\r\n    \"pageNumber\":0,\r\n    \"offset\":0,\r\n    \"unpaged\":false,\r\n    \"paged\":true\r\n  },\r\n  \"last\":true,\r\n  \"totalElements\":5,\r\n  \"totalPages\":1,\r\n  \"numberOfElements\":5,\r\n  \"first\":true,\r\n  \"size\":5,\r\n  \"number\":0,\r\n  \"sort\":{\r\n    \"sorted\":false,\r\n    \"unsorted\":true,\r\n    \"empty\":true\r\n  },\r\n  \"empty\":false\r\n} \r\n```","```\r\n@Test\r\npublic void whenGetRequestToUsersEndPoint_thenCorrectResponse() throws Exception {\r\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/users\")\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$['pageable']['paged']\").value(\"true\"));\r\n}\r\n```","```\r\n@GetMapping(\"/users\")\r\npublic Page<User> findAllUsers(@PageableDefault(value = 2, page = 0) Pageable pageable) {\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n@GetMapping(\"/users\")\r\npublic Page<User> findAllUsers() {\r\n    Pageable pageable = PageRequest.of(0, 5);\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n@GetMapping(\"/users\")\r\npublic Page<User> findAllUsers(@RequestParam(\"page\") int page, \r\n  @RequestParam(\"size\") int size, Pageable pageable) {\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n{\r\n  \"content\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"John\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Robert\"\r\n    }\r\n  ],\r\n\r\n  // continues with pageable metadata\r\n\r\n}\r\n```","```\r\n@GetMapping(\"/sortedusers\")\r\npublic Page<User> findAllUsersSortedByName(@RequestParam(\"sort\") String sort, Pageable pageable) {\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n{\r\n  \"content\": [\r\n    {\r\n      \"id\": 4,\r\n      \"name\": \"Helen\"\r\n    },\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"John\"\r\n    },\r\n    {\r\n      \"id\": 5,\r\n      \"name\": \"Mary\"\r\n    },\r\n    {\r\n      \"id\": 3,\r\n      \"name\": \"Nataly\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Robert\"\r\n    }\r\n  ],\r\n\r\n  // continues with pageable metadata\r\n\r\n}\r\n```","```\r\n@GetMapping(\"/sortedusers\")\r\npublic Page<User> findAllUsersSortedByName() {\r\n    Pageable pageable = PageRequest.of(0, 5, Sort.by(\"name\"));\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n@GetMapping(\"/sortedusers\")\r\npublic Page<User> findAllUsersSortedByName(@SortDefault(sort = \"name\", \r\n  direction = Sort.Direction.ASC) Pageable pageable) {\r\n    return userRepository.findAll(pageable);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetRequestToSorteredUsersEndPoint_thenCorrectResponse() throws Exception {\r\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/sortedusers\")\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$['sort']['sorted']\").value(\"true\"));\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-apt</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-jpa</artifactId>\r\n</dependency>\r\n```","```\r\n@Repository\r\npublic interface UserRepository extends PagingAndSortingRepository<User, Long>,\r\n  QuerydslPredicateExecutor<User> {\r\n}\r\n```","```\r\n@GetMapping(\"/filteredusers\")\r\npublic Iterable<User> getUsersByQuerydslPredicate(@QuerydslPredicate(root = User.class) \r\n  Predicate predicate) {\r\n    return userRepository.findAll(predicate);\r\n}\r\n```","```\r\n[\r\n  {\r\n    \"id\": 1,\r\n    \"name\": \"John\"\r\n  }\r\n] \r\n```","```\r\n@Test\r\npublic void whenGetRequestToFilteredUsersEndPoint_thenCorrectResponse() throws Exception {\r\n    mockMvc.perform(MockMvcRequestBuilders.get(\"/filteredusers\")\r\n      .param(\"name\", \"John\")\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$[0].name\").value(\"John\"));\r\n}\r\n```","```\r\n[\r\n  {\r\n    \"id\": 2,\r\n    \"name\": \"Robert\"\r\n  }\r\n]\r\n```"]