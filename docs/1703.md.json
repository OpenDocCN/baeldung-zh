["```\r\nlivenessProbe:\r\n  httpGet:\r\n    path: /actuator/health/liveness\r\n    port: 8080\r\n    initialDelaySeconds: 3\r\n    periodSeconds: 3\r\n```","```\r\nmanagement.health.probes.enabled=true\r\n```","```\r\nmanagement.endpoint.health.probes.enabled=true\r\nmanagement.health.livenessState.enabled=true\r\nmanagement.health.readinessState.enabled=true\r\n```","```\r\n@Autowired private ApplicationAvailability applicationAvailability;\r\n```","```\r\nassertThat(applicationAvailability.getLivenessState())\r\n  .isEqualTo(LivenessState.CORRECT);\r\nassertThat(applicationAvailability.getReadinessState())\r\n  .isEqualTo(ReadinessState.ACCEPTING_TRAFFIC);\r\nassertThat(applicationAvailability.getState(ReadinessState.class))\r\n  .isEqualTo(ReadinessState.ACCEPTING_TRAFFIC);\r\n```","```\r\nassertThat(applicationAvailability.getLivenessState())\r\n  .isEqualTo(LivenessState.CORRECT);\r\nmockMvc.perform(get(\"/actuator/health/liveness\"))\r\n  .andExpect(status().isOk())\r\n  .andExpect(jsonPath(\"$.status\").value(\"UP\"));\r\n\r\nAvailabilityChangeEvent.publish(context, LivenessState.BROKEN);\r\n\r\nassertThat(applicationAvailability.getLivenessState())\r\n  .isEqualTo(LivenessState.BROKEN);\r\nmockMvc.perform(get(\"/actuator/health/liveness\"))\r\n  .andExpect(status().isServiceUnavailable())\r\n  .andExpect(jsonPath(\"$.status\").value(\"DOWN\"));\r\n```","```\r\n{\r\n    \"status\": \"OK\"\r\n}\r\n```","```\r\n{\r\n    \"status\": \"DOWN\"\r\n}\r\n```","```\r\nassertThat(applicationAvailability.getReadinessState())\r\n  .isEqualTo(ReadinessState.ACCEPTING_TRAFFIC);\r\nmockMvc.perform(get(\"/actuator/health/readiness\"))\r\n  .andExpect(status().isOk())\r\n  .andExpect(jsonPath(\"$.status\").value(\"UP\"));\r\n\r\nAvailabilityChangeEvent.publish(context, ReadinessState.REFUSING_TRAFFIC);\r\n\r\nassertThat(applicationAvailability.getReadinessState())\r\n  .isEqualTo(ReadinessState.REFUSING_TRAFFIC);\r\nmockMvc.perform(get(\"/actuator/health/readiness\"))\r\n  .andExpect(status().isServiceUnavailable())\r\n  .andExpect(jsonPath(\"$.status\").value(\"OUT_OF_SERVICE\"));\r\n```","```\r\n@Component\r\npublic class LivenessEventListener {\r\n\r\n    @EventListener\r\n    public void onEvent(AvailabilityChangeEvent<LivenessState> event) {\r\n        switch (event.getState()) {\r\n        case BROKEN:\r\n            // notify others\r\n            break;\r\n        case CORRECT:\r\n            // we're back\r\n        }\r\n    }\r\n}\r\n```"]