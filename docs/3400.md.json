["```\r\npublic class Student {\r\n\r\n    private int id;\r\n    private String firstName;\r\n    private String lastName;\r\n    private String grade;\r\n\r\n    public Student() {\r\n    }\r\n\r\n    public Student(int id, String firstName, String lastName, String grade) {\r\n\tthis.id = id;\r\n\tthis.firstName = firstName;\r\n\tthis.lastName = lastName;\r\n\tthis.grade = grade;\r\n    }\r\n\r\n    // Setters\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(value = \"/api\")\r\npublic class StudentRestController {\r\n\r\n    @GetMapping(\"/student/{id}\")\r\n    public ResponseEntity<Student> get(@PathVariable(\"id\") int id) {\r\n        // Custom logic\r\n        return ResponseEntity.ok(new Student(id, \"John\", \"Wiliams\", \"AA\"));\r\n     }\r\n}\r\n```","```\r\ncurl http://localhost:8080/api/student/1\r\n```","```\r\n{\"timestamp\":\"2021-02-14T14:54:19.426+00:00\",\"status\":500,\"error\":\"Internal Server Error\",\"message\":\"\",\"path\":\"/api/student/1\"}\r\n```","```\r\n[org.springframework.http.converter.HttpMessageNotWritableException: No converter found for return value of type: class com.baeldung.boot.noconverterfound.model.Student]\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebMvcTest(StudentRestController.class)\r\npublic class NoConverterFoundIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void whenGettersNotDefined_thenThrowException() throws Exception {\r\n\r\n        String url = \"/api/student/1\";\r\n\r\n\tthis.mockMvc.perform(get(url))\r\n\t  .andExpect(status().isInternalServerError())\r\n\t  .andExpect(result -> assertThat(result.getResolvedException())\r\n            .isInstanceOf(HttpMessageNotWritableException.class))\r\n\t  .andExpect(result -> assertThat(result.getResolvedException().getMessage())\r\n\t    .contains(\"No converter found for return value of type\"));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettersAreDefined_thenReturnObject() throws Exception {\r\n\r\n    String url = \"/api/student/2\";\r\n\r\n    this.mockMvc.perform(get(url))\r\n      .andExpect(status().isOk())\r\n      .andExpect(jsonPath(\"$.firstName\").value(\"John\"));\r\n}\r\n```"]