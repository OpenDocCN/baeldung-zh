["```\r\n@Component\r\n@Scope(\"prototype\")\r\npublic class SchoolNotification {\r\n    // ... prototype-scoped state\r\n}\r\n```","```\r\n@Component\r\npublic class StudentServices {\r\n\r\n    // ... member variables, etc.\r\n\r\n    @Lookup\r\n    public SchoolNotification getNotification() {\r\n        return null;\r\n    }\r\n\r\n    // ... getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenLookupMethodCalled_thenNewInstanceReturned() {\r\n    // ... initialize context\r\n    StudentServices first = this.context.getBean(StudentServices.class);\r\n    StudentServices second = this.context.getBean(StudentServices.class);\r\n\r\n    assertEquals(first, second); \r\n    assertNotEquals(first.getNotification(), second.getNotification()); \r\n}\r\n```","```\r\n@Component\r\n@Scope(\"prototype\")\r\npublic class SchoolNotification {\r\n    @Autowired Grader grader;\r\n\r\n    private String name;\r\n    private Collection<Integer> marks;\r\n\r\n    public SchoolNotification(String name) {\r\n        // ... set fields\r\n    }\r\n\r\n    // ... getters and setters\r\n\r\n    public String addMark(Integer mark) {\r\n        this.marks.add(mark);\r\n        return this.grader.grade(this.marks);\r\n    }\r\n}\r\n```","```\r\npublic abstract class StudentServices {\r\n\r\n    private Map<String, SchoolNotification> notes = new HashMap<>();\r\n\r\n    @Lookup\r\n    protected abstract SchoolNotification getNotification(String name);\r\n\r\n    public String appendMark(String name, Integer mark) {\r\n        SchoolNotification notification\r\n          = notes.computeIfAbsent(name, exists -> getNotification(name)));\r\n        return notification.addMark(mark);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenAbstractGetterMethodInjects_thenNewInstanceReturned() {\r\n    // ... initialize context\r\n\r\n    StudentServices services = context.getBean(StudentServices.class);    \r\n    assertEquals(\"PASS\", services.appendMark(\"Alex\", 89));\r\n    assertEquals(\"FAIL\", services.appendMark(\"Bethany\", 78));\r\n    assertEquals(\"PASS\", services.appendMark(\"Claire\", 96));\r\n}\r\n```"]