["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nRangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n```","```\r\nList<Range<Integer>> numberList = Arrays.asList(Range.closed(0, 2));\r\nRangeSet<Integer> numberRangeSet = TreeRangeSet.create(numberList);\r\n```","```\r\nRangeSet<Integer> numberRangeSet \r\n  = new ImmutableRangeSet.<Integer>builder().add(Range.closed(0, 2)).build(); \r\n```","```\r\n@Test\r\npublic void givenRangeSet_whenQueryWithinRange_returnsSucessfully() {\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 5));\r\n    numberRangeSet.add(Range.closed(6, 8));\r\n\r\n    assertTrue(numberRangeSet.contains(1));\r\n    assertFalse(numberRangeSet.contains(9));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeSet_whenRemoveRangeIsCalled_removesSucessfully() {\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 5));\r\n    numberRangeSet.add(Range.closed(6, 8));\r\n    numberRangeSet.add(Range.closed(9, 15));\r\n    numberRangeSet.remove(Range.closed(3, 5));\r\n    numberRangeSet.remove(Range.closed(7, 10));\r\n\r\n    assertTrue(numberRangeSet.contains(1));\r\n    assertFalse(numberRangeSet.contains(9));\r\n    assertTrue(numberRangeSet.contains(12));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeSet_whenSpanIsCalled_returnsSucessfully() {\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 5));\r\n    numberRangeSet.add(Range.closed(6, 8));\r\n    Range<Integer> experienceSpan = numberRangeSet.span();\r\n\r\n    assertEquals(0, experienceSpan.lowerEndpoint().intValue());\r\n    assertEquals(8, experienceSpan.upperEndpoint().intValue());\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenRangeSet_whenSubRangeSetIsCalled_returnsSubRangeSucessfully() {\r\n\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 5));\r\n    numberRangeSet.add(Range.closed(6, 8));\r\n    RangeSet<Integer> numberSubRangeSet \r\n      = numberRangeSet.subRangeSet(Range.closed(4, 14));\r\n\r\n    assertFalse(numberSubRangeSet.contains(3));\r\n    assertFalse(numberSubRangeSet.contains(14));\r\n    assertTrue(numberSubRangeSet.contains(7));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeSet_whenComplementIsCalled_returnsSucessfully() {\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 5));\r\n    numberRangeSet.add(Range.closed(6, 8));\r\n    RangeSet<Integer> numberRangeComplementSet\r\n      = numberRangeSet.complement();\r\n\r\n    assertTrue(numberRangeComplementSet.contains(-1000));\r\n    assertFalse(numberRangeComplementSet.contains(2));\r\n    assertFalse(numberRangeComplementSet.contains(3));\r\n    assertTrue(numberRangeComplementSet.contains(1000));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRangeSet_whenIntersectsWithinRange_returnsSucessfully() {\r\n    RangeSet<Integer> numberRangeSet = TreeRangeSet.create();\r\n\r\n    numberRangeSet.add(Range.closed(0, 2));\r\n    numberRangeSet.add(Range.closed(3, 10));\r\n    numberRangeSet.add(Range.closed(15, 18));\r\n\r\n    assertTrue(numberRangeSet.intersects(Range.closed(4, 17)));\r\n    assertFalse(numberRangeSet.intersects(Range.closed(19, 200)));\r\n}\r\n```"]