["```\r\npublic class TreeNode {\r\n\r\n    private int value;\r\n    private TreeNode rightChild;\r\n    private TreeNode leftChild;\r\n\r\n    // Getters and setters\r\n\r\n}\r\n```","```\r\n TreeNode leaf1 = new TreeNode(1);\r\n    TreeNode leaf2 = new TreeNode(3);\r\n    TreeNode leaf3 = new TreeNode(6);\r\n    TreeNode leaf4 = new TreeNode(9);\r\n\r\n    TreeNode nodeRight = new TreeNode(7, leaf3, leaf4);\r\n    TreeNode nodeLeft = new TreeNode(2, leaf1, leaf2);\r\n\r\n    TreeNode root = new TreeNode(4, nodeLeft, nodeRight); \r\n```","```\r\npublic void reverseRecursive(TreeNode treeNode) {\r\n    if(treeNode == null) {\r\n        return;\r\n    }\r\n\r\n    TreeNode temp = treeNode.getLeftChild();\r\n    treeNode.setLeftChild(treeNode.getRightChild());\r\n    treeNode.setRightChild(temp);\r\n\r\n    reverseRecursive(treeNode.getLeftChild());\r\n    reverseRecursive(treeNode.getRightChild());\r\n}\r\n```","```\r\npublic void reverseIterative(TreeNode treeNode) {\r\n    List<TreeNode> queue = new LinkedList<>();\r\n\r\n    if(treeNode != null) {\r\n        queue.add(treeNode);\r\n    }\r\n\r\n    while(!queue.isEmpty()) {\r\n        TreeNode node = queue.poll();\r\n        if(node.getLeftChild() != null){\r\n            queue.add(node.getLeftChild());\r\n        }\r\n        if(node.getRightChild() != null){\r\n            queue.add(node.getRightChild());\r\n        }\r\n\r\n        TreeNode temp = node.getLeftChild();\r\n        node.setLeftChild(node.getRightChild());\r\n        node.setRightChild(temp);\r\n    }\r\n}\r\n```"]