["```\r\n<dependency>\r\n    <groupId>org.mongodb</groupId>\r\n    <artifactId>mongo-java-driver</artifactId>\r\n    <version>3.6.3</version>\r\n</dependency>\r\n```","```\r\n{\r\n    \"_id\" : \"Java 8 and MongoDB\",\r\n    \"author\" : \"Donato Rimenti\",\r\n    \"tags\" : [\"Java\", \"MongoDB\", \"Java 8\", \"Stream API\"]\r\n}\r\n```","```\r\npublic class Post {\r\n    private String title;\r\n    private String author;\r\n    private List<String> tags;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic boolean addTags(String title, List<String> tags) {\r\n    UpdateResult result = collection.updateOne(\r\n      new BasicDBObject(DBCollection.ID_FIELD_NAME, title), \r\n      Updates.addEachToSet(TAGS_FIELD, tags));\r\n    return result.getModifiedCount() == 1;\r\n}\r\n\r\npublic boolean removeTags(String title, List<String> tags) {\r\n    UpdateResult result = collection.updateOne(\r\n      new BasicDBObject(DBCollection.ID_FIELD_NAME, title), \r\n      Updates.pullAll(TAGS_FIELD, tags));\r\n    return result.getModifiedCount() == 1;\r\n}\r\n```","```\r\ndb.posts.updateOne(\r\n    { _id : \"JUnit 5 with Java\" }, \r\n    { $addToSet : \r\n        { \"tags\" : \r\n            { $each : [\"Java\", \"JUnit5\"] }\r\n        }\r\n});\r\n\r\ndb.posts.updateOne(\r\n    {_id : \"JUnit 5 with Java\" },\r\n    { $pull : \r\n        { \"tags\" : { $in : [\"Spring\", \"REST\"] }\r\n    }\r\n});\r\n```","```\r\npublic List<Post> postsWithAtLeastOneTag(String... tags) {\r\n    FindIterable<Document> results = collection\r\n      .find(Filters.in(TAGS_FIELD, tags));\r\n    return StreamSupport.stream(results.spliterator(), false)\r\n      .map(TagRepository::documentToPost)\r\n      .collect(Collectors.toList());\r\n}\r\n\r\npublic List<Post> postsWithAllTags(String... tags) {\r\n    FindIterable<Document> results = collection\r\n      .find(Filters.all(TAGS_FIELD, tags));\r\n    return StreamSupport.stream(results.spliterator(), false)\r\n      .map(TagRepository::documentToPost)\r\n      .collect(Collectors.toList());\r\n}\r\n\r\npublic List<Post> postsWithoutTags(String... tags) {\r\n    FindIterable<Document> results = collection\r\n      .find(Filters.nin(TAGS_FIELD, tags));\r\n    return StreamSupport.stream(results.spliterator(), false)\r\n      .map(TagRepository::documentToPost)\r\n      .collect(Collectors.toList());\r\n}\r\n\r\nprivate static Post documentToPost(Document document) {\r\n    Post post = new Post();\r\n    post.setTitle(document.getString(DBCollection.ID_FIELD_NAME));\r\n    post.setAuthor(document.getString(\"author\"));\r\n    post.setTags((List<String>) document.get(TAGS_FIELD));\r\n    return post;\r\n}\r\n```","```\r\ndb.posts.find({\r\n    \"tags\" : { $in : [\"MongoDB\", \"Stream API\" ] } \r\n});\r\n\r\ndb.posts.find({\r\n    \"tags\" : { $all : [\"Java 8\", \"JUnit 5\" ] } \r\n});\r\n\r\ndb.posts.find({\r\n    \"tags\" : { $nin : [\"Groovy\", \"Scala\" ] } \r\n});\r\n```"]