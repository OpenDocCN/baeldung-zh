["```\r\npublic static  <E> boolean containsElement(E [] elements, E element){\r\n    for (E e : elements){\r\n        if(e.equals(element)){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\npublic static  boolean containsElement(Object [] elements, Object element){\r\n    for (Object e : elements){\r\n        if(e.equals(element)){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\npublic class Stack<E> {\r\n    private E[] stackContent;\r\n\r\n    public Stack(int capacity) {\r\n        this.stackContent = (E[]) new Object[capacity];\r\n    }\r\n\r\n    public void push(E data) {\r\n        // ..\r\n    }\r\n\r\n    public E pop() {\r\n        // ..\r\n    }\r\n}\r\n```","```\r\npublic class Stack {\r\n    private Object[] stackContent;\r\n\r\n    public Stack(int capacity) {\r\n        this.stackContent = (Object[]) new Object[capacity];\r\n    }\r\n\r\n    public void push(Object data) {\r\n        // ..\r\n    }\r\n\r\n    public Object pop() {\r\n        // ..\r\n    }\r\n}\r\n```","```\r\npublic class BoundStack<E extends Comparable<E>> {\r\n    private E[] stackContent;\r\n\r\n    public BoundStack(int capacity) {\r\n        this.stackContent = (E[]) new Object[capacity];\r\n    }\r\n\r\n    public void push(E data) {\r\n        // ..\r\n    }\r\n\r\n    public E pop() {\r\n        // ..\r\n    }\r\n}\r\n```","```\r\npublic class BoundStack {\r\n    private Comparable [] stackContent;\r\n\r\n    public BoundStack(int capacity) {\r\n        this.stackContent = (Comparable[]) new Object[capacity];\r\n    }\r\n\r\n    public void push(Comparable data) {\r\n        // ..\r\n    }\r\n\r\n    public Comparable pop() {\r\n        // ..\r\n    }\r\n}\r\n```","```\r\npublic static <E> void printArray(E[] array) {\r\n    for (E element : array) {\r\n        System.out.printf(\"%s \", element);\r\n    }\r\n}\r\n```","```\r\npublic static void printArray(Object[] array) {\r\n    for (Object element : array) {\r\n        System.out.printf(\"%s \", element);\r\n    }\r\n}\r\n```","```\r\npublic static <E extends Comparable<E>> void printArray(E[] array) {\r\n    for (E element : array) {\r\n        System.out.printf(\"%s \", element);\r\n    }\r\n}\r\n```","```\r\npublic static void printArray(Comparable[] array) {\r\n    for (Comparable element : array) {\r\n        System.out.printf(\"%s \", element);\r\n    }\r\n}\r\n```","```\r\npublic class IntegerStack extends Stack<Integer> {\r\n\r\n    public IntegerStack(int capacity) {\r\n        super(capacity);\r\n    }\r\n\r\n    public void push(Integer value) {\r\n        super.push(value);\r\n    }\r\n}\r\n```","```\r\nIntegerStack integerStack = new IntegerStack(5);\r\nStack stack = integerStack;\r\nstack.push(\"Hello\");\r\nInteger data = integerStack.pop();\r\n```","```\r\nIntegerStack integerStack = new IntegerStack(5);\r\nStack stack = (IntegerStack) integerStack;\r\nstack.push(\"Hello\");\r\nInteger data = (String) integerStack.pop();\r\n```","```\r\npublic class IntegerStack extends Stack {\r\n    // Bridge method generated by the compiler\r\n\r\n    public void push(Object value) {\r\n        push((Integer)value);\r\n    }\r\n\r\n    public void push(Integer value) {\r\n        super.push(value);\r\n    }\r\n}\r\n```"]