["```\r\npublic interface BasicInfo {\r\n}\r\n```","```\r\npublic interface AdvanceInfo {\r\n}\r\n```","```\r\npublic class RegistrationForm {\r\n    @NotBlank(groups = BasicInfo.class)\r\n    private String firstName;\r\n    @NotBlank(groups = BasicInfo.class)\r\n    private String lastName;\r\n    @Email(groups = BasicInfo.class)\r\n    private String email;\r\n    @NotBlank(groups = BasicInfo.class)\r\n    private String phone;\r\n\r\n    @NotBlank(groups = {BasicInfo.class, AdvanceInfo.class})\r\n    private String captcha;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String street;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String houseNumber;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String zipCode;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String city;\r\n\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String contry;\r\n}\r\n```","```\r\npublic class RegistrationFormUnitTest {\r\n    private static Validator validator;\r\n\r\n    @BeforeClass\r\n    public static void setupValidatorInstance() {\r\n        validator = Validation.buildDefaultValidatorFactory().getValidator();\r\n    }\r\n\r\n    @Test\r\n    public void whenBasicInfoIsNotComplete_thenShouldGiveConstraintViolationsOnlyForBasicInfo() {\r\n        RegistrationForm form = buildRegistrationFormWithBasicInfo();\r\n        form.setFirstName(\"\");\r\n\r\n        Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, BasicInfo.class);\r\n\r\n        assertThat(violations.size()).isEqualTo(1);\r\n        violations.forEach(action -> {\r\n            assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\r\n            assertThat(action.getPropertyPath().toString()).isEqualTo(\"firstName\");\r\n        });\r\n    }\r\n\r\n    private RegistrationForm buildRegistrationFormWithBasicInfo() {\r\n        RegistrationForm form = new RegistrationForm();\r\n        form.setFirstName(\"devender\");\r\n        form.setLastName(\"kumar\");\r\n        form.setEmail(\"[[emailÂ protected]](/web/20220628130910/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        form.setPhone(\"12345\");\r\n        form.setCaptcha(\"Y2HAhU5T\");\r\n        return form;\r\n    }\r\n\r\n    //... additional tests\r\n}\r\n```","```\r\n@Test\r\npublic void whenAdvanceInfoIsNotComplete_thenShouldGiveConstraintViolationsOnlyForAdvanceInfo() {\r\n    RegistrationForm form = buildRegistrationFormWithAdvanceInfo();\r\n    form.setZipCode(\"\");\r\n\r\n    Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, AdvanceInfo.class);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n    violations.forEach(action -> {\r\n        assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\r\n        assertThat(action.getPropertyPath().toString()).isEqualTo(\"zipCode\");\r\n    });\r\n}\r\n\r\nprivate RegistrationForm buildRegistrationFormWithAdvanceInfo() {\r\n    RegistrationForm form = new RegistrationForm();\r\n    return populateAdvanceInfo(form);\r\n}\r\n\r\nprivate RegistrationForm populateAdvanceInfo(RegistrationForm form) {\r\n    form.setCity(\"Berlin\");\r\n    form.setContry(\"DE\");\r\n    form.setStreet(\"alexa str.\");\r\n    form.setZipCode(\"19923\");\r\n    form.setHouseNumber(\"2a\");\r\n    form.setCaptcha(\"Y2HAhU5T\");\r\n    return form;\r\n}\r\n```","```\r\n@Test\r\npublic void whenCaptchaIsBlank_thenShouldGiveConstraintViolationsForBasicInfo() {\r\n    RegistrationForm form = buildRegistrationFormWithBasicInfo();\r\n    form.setCaptcha(\"\");\r\n\r\n    Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, BasicInfo.class);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n    violations.forEach(action -> {\r\n        assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\r\n        assertThat(action.getPropertyPath().toString()).isEqualTo(\"captcha\");\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void whenCaptchaIsBlank_thenShouldGiveConstraintViolationsForAdvanceInfo() {\r\n    RegistrationForm form = buildRegistrationFormWithAdvanceInfo();\r\n    form.setCaptcha(\"\");\r\n\r\n    Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, AdvanceInfo.class);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n    violations.forEach(action -> {\r\n        assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\r\n        assertThat(action.getPropertyPath().toString()).isEqualTo(\"captcha\");\r\n    });\r\n}\r\n```","```\r\n@GroupSequence({BasicInfo.class, AdvanceInfo.class})\r\npublic class RegistrationForm {\r\n    @NotBlank(groups = BasicInfo.class)\r\n    private String firstName;\r\n    @NotBlank(groups = AdvanceInfo.class)\r\n    private String street;\r\n}\r\n```","```\r\n@GroupSequence({BasicInfo.class, AdvanceInfo.class})\r\npublic interface CompleteInfo {\r\n}\r\n```","```\r\n@Test\r\npublic void whenBasicInfoIsNotComplete_thenShouldGiveConstraintViolationsForBasicInfoOnly() {\r\n    RegistrationForm form = buildRegistrationFormWithBasicInfo();\r\n    form.setFirstName(\"\");\r\n\r\n    Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, CompleteInfo.class);\r\n\r\n    assertThat(violations.size()).isEqualTo(1);\r\n    violations.forEach(action -> {\r\n        assertThat(action.getMessage()).isEqualTo(\"must not be blank\");\r\n        assertThat(action.getPropertyPath().toString()).isEqualTo(\"firstName\");\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void whenBasicAndAdvanceInfoIsComplete_thenShouldNotGiveConstraintViolationsWithCompleteInfoValidationGroup() {\r\n    RegistrationForm form = buildRegistrationFormWithBasicAndAdvanceInfo();\r\n\r\n    Set<ConstraintViolation<RegistrationForm>> violations = validator.validate(form, CompleteInfo.class);\r\n\r\n    assertThat(violations.size()).isEqualTo(0);\r\n}\r\n```"]