["```\r\n@Test\r\npublic void whenCreatesEmptyOptional_thenCorrect() {\r\n    Optional<String> empty = Optional.empty();\r\n    assertFalse(empty.isPresent());\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonNull_whenCreatesNonNullable_thenCorrect() {\r\n    String name = \"baeldung\";\r\n    Optional<String> opt = Optional.of(name);\r\n    assertTrue(opt.isPresent());\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void givenNull_whenThrowsErrorOnCreate_thenCorrect() {\r\n    String name = null;\r\n    Optional.of(name);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonNull_whenCreatesNullable_thenCorrect() {\r\n    String name = \"baeldung\";\r\n    Optional<String> opt = Optional.ofNullable(name);\r\n    assertTrue(opt.isPresent());\r\n}\r\n```","```\r\n@Test\r\npublic void givenNull_whenCreatesNullable_thenCorrect() {\r\n    String name = null;\r\n    Optional<String> opt = Optional.ofNullable(name);\r\n    assertFalse(opt.isPresent());\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenIsPresentWorks_thenCorrect() {\r\n    Optional<String> opt = Optional.of(\"Baeldung\");\r\n    assertTrue(opt.isPresent());\r\n\r\n    opt = Optional.ofNullable(null);\r\n    assertFalse(opt.isPresent());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnEmptyOptional_thenIsEmptyBehavesAsExpected() {\r\n    Optional<String> opt = Optional.of(\"Baeldung\");\r\n    assertFalse(opt.isEmpty());\r\n\r\n    opt = Optional.ofNullable(null);\r\n    assertTrue(opt.isEmpty());\r\n}\r\n```","```\r\nif(name != null) {\r\n    System.out.println(name.length());\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenIfPresentWorks_thenCorrect() {\r\n    Optional<String> opt = Optional.of(\"baeldung\");\r\n    opt.ifPresent(name -> System.out.println(name.length()));\r\n}\r\n```","```\r\n@Test\r\npublic void whenOrElseWorks_thenCorrect() {\r\n    String nullName = null;\r\n    String name = Optional.ofNullable(nullName).orElse(\"john\");\r\n    assertEquals(\"john\", name);\r\n}\r\n```","```\r\n@Test\r\npublic void whenOrElseGetWorks_thenCorrect() {\r\n    String nullName = null;\r\n    String name = Optional.ofNullable(nullName).orElseGet(() -> \"john\");\r\n    assertEquals(\"john\", name);\r\n}\r\n```","```\r\npublic String getMyDefault() {\r\n    System.out.println(\"Getting Default Value\");\r\n    return \"Default Value\";\r\n}\r\n```","```\r\n@Test\r\npublic void whenOrElseGetAndOrElseOverlap_thenCorrect() {\r\n    String text = null;\r\n\r\n    String defaultText = Optional.ofNullable(text).orElseGet(this::getMyDefault);\r\n    assertEquals(\"Default Value\", defaultText);\r\n\r\n    defaultText = Optional.ofNullable(text).orElse(getMyDefault());\r\n    assertEquals(\"Default Value\", defaultText);\r\n}\r\n```","```\r\nGetting default value...\r\nGetting default value...\r\n```","```\r\n@Test\r\npublic void whenOrElseGetAndOrElseDiffer_thenCorrect() {\r\n    String text = \"Text present\";\r\n\r\n    System.out.println(\"Using orElseGet:\");\r\n    String defaultText \r\n      = Optional.ofNullable(text).orElseGet(this::getMyDefault);\r\n    assertEquals(\"Text present\", defaultText);\r\n\r\n    System.out.println(\"Using orElse:\");\r\n    defaultText = Optional.ofNullable(text).orElse(getMyDefault());\r\n    assertEquals(\"Text present\", defaultText);\r\n}\r\n```","```\r\nUsing orElseGet:\r\nUsing orElse:\r\nGetting default value...\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void whenOrElseThrowWorks_thenCorrect() {\r\n    String nullName = null;\r\n    String name = Optional.ofNullable(nullName).orElseThrow(\r\n      IllegalArgumentException::new);\r\n}\r\n```","```\r\n@Test(expected = NoSuchElementException.class)\r\npublic void whenNoArgOrElseThrowWorks_thenCorrect() {\r\n    String nullName = null;\r\n    String name = Optional.ofNullable(nullName).orElseThrow();\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenGetsValue_thenCorrect() {\r\n    Optional<String> opt = Optional.of(\"baeldung\");\r\n    String name = opt.get();\r\n    assertEquals(\"baeldung\", name);\r\n}\r\n```","```\r\n@Test(expected = NoSuchElementException.class)\r\npublic void givenOptionalWithNull_whenGetThrowsException_thenCorrect() {\r\n    Optional<String> opt = Optional.ofNullable(null);\r\n    String name = opt.get();\r\n}\r\n```","```\r\n@Test\r\npublic void whenOptionalFilterWorks_thenCorrect() {\r\n    Integer year = 2016;\r\n    Optional<Integer> yearOptional = Optional.of(year);\r\n    boolean is2016 = yearOptional.filter(y -> y == 2016).isPresent();\r\n    assertTrue(is2016);\r\n    boolean is2017 = yearOptional.filter(y -> y == 2017).isPresent();\r\n    assertFalse(is2017);\r\n}\r\n```","```\r\npublic class Modem {\r\n    private Double price;\r\n\r\n    public Modem(Double price) {\r\n        this.price = price;\r\n    }\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic boolean priceIsInRange1(Modem modem) {\r\n    boolean isInRange = false;\r\n\r\n    if (modem != null && modem.getPrice() != null \r\n      && (modem.getPrice() >= 10 \r\n        && modem.getPrice() <= 15)) {\r\n\r\n        isInRange = true;\r\n    }\r\n    return isInRange;\r\n}\r\n```","```\r\n@Test\r\npublic void whenFiltersWithoutOptional_thenCorrect() {\r\n    assertTrue(priceIsInRange1(new Modem(10.0)));\r\n    assertFalse(priceIsInRange1(new Modem(9.9)));\r\n    assertFalse(priceIsInRange1(new Modem(null)));\r\n    assertFalse(priceIsInRange1(new Modem(15.5)));\r\n    assertFalse(priceIsInRange1(null));\r\n}\r\n```","```\r\npublic boolean priceIsInRange2(Modem modem2) {\r\n     return Optional.ofNullable(modem2)\r\n       .map(Modem::getPrice)\r\n       .filter(p -> p >= 10)\r\n       .filter(p -> p <= 15)\r\n       .isPresent();\r\n }\r\n```","```\r\n@Test\r\npublic void whenFiltersWithOptional_thenCorrect() {\r\n    assertTrue(priceIsInRange2(new Modem(10.0)));\r\n    assertFalse(priceIsInRange2(new Modem(9.9)));\r\n    assertFalse(priceIsInRange2(new Modem(null)));\r\n    assertFalse(priceIsInRange2(new Modem(15.5)));\r\n    assertFalse(priceIsInRange2(null));\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenMapWorks_thenCorrect() {\r\n    List<String> companyNames = Arrays.asList(\r\n      \"paypal\", \"oracle\", \"\", \"microsoft\", \"\", \"apple\");\r\n    Optional<List<String>> listOptional = Optional.of(companyNames);\r\n\r\n    int size = listOptional\r\n      .map(List::size)\r\n      .orElse(0);\r\n    assertEquals(6, size);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenMapWorks_thenCorrect2() {\r\n    String name = \"baeldung\";\r\n    Optional<String> nameOptional = Optional.of(name);\r\n\r\n    int len = nameOptional\r\n     .map(String::length)\r\n     .orElse(0);\r\n    assertEquals(8, len);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenMapWorksWithFilter_thenCorrect() {\r\n    String password = \" password \";\r\n    Optional<String> passOpt = Optional.of(password);\r\n    boolean correctPassword = passOpt.filter(\r\n      pass -> pass.equals(\"password\")).isPresent();\r\n    assertFalse(correctPassword);\r\n\r\n    correctPassword = passOpt\r\n      .map(String::trim)\r\n      .filter(pass -> pass.equals(\"password\"))\r\n      .isPresent();\r\n    assertTrue(correctPassword);\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private int age;\r\n    private String password;\r\n\r\n    public Optional<String> getName() {\r\n        return Optional.ofNullable(name);\r\n    }\r\n\r\n    public Optional<Integer> getAge() {\r\n        return Optional.ofNullable(age);\r\n    }\r\n\r\n    public Optional<String> getPassword() {\r\n        return Optional.ofNullable(password);\r\n    }\r\n\r\n    // normal constructors and setters\r\n}\r\n```","```\r\nPerson person = new Person(\"john\", 26);\r\nOptional<Person> personOptional = Optional.of(person);\r\n```","```\r\n@Test\r\npublic void givenOptional_whenFlatMapWorks_thenCorrect2() {\r\n    Person person = new Person(\"john\", 26);\r\n    Optional<Person> personOptional = Optional.of(person);\r\n\r\n    Optional<Optional<String>> nameOptionalWrapper  \r\n      = personOptional.map(Person::getName);\r\n    Optional<String> nameOptional  \r\n      = nameOptionalWrapper.orElseThrow(IllegalArgumentException::new);\r\n    String name1 = nameOptional.orElse(\"\");\r\n    assertEquals(\"john\", name1);\r\n\r\n    String name = personOptional\r\n      .flatMap(Person::getName)\r\n      .orElse(\"\");\r\n    assertEquals(\"john\", name);\r\n}\r\n```","```\r\nprivate Optional<String> getEmpty() {\r\n    return Optional.empty();\r\n}\r\n\r\nprivate Optional<String> getHello() {\r\n    return Optional.of(\"hello\");\r\n}\r\n\r\nprivate Optional<String> getBye() {\r\n    return Optional.of(\"bye\");\r\n}\r\n\r\nprivate Optional<String> createOptional(String input) {\r\n    if (input == null || \"\".equals(input) || \"empty\".equals(input)) {\r\n        return Optional.empty();\r\n    }\r\n    return Optional.of(input);\r\n}\r\n```","```\r\n@Test\r\npublic void givenThreeOptionals_whenChaining_thenFirstNonEmptyIsReturned() {\r\n    Optional<String> found = Stream.of(getEmpty(), getHello(), getBye())\r\n      .filter(Optional::isPresent)\r\n      .map(Optional::get)\r\n      .findFirst();\r\n\r\n    assertEquals(getHello(), found);\r\n}\r\n```","```\r\n@Test\r\npublic void givenThreeOptionals_whenChaining_thenFirstNonEmptyIsReturnedAndRestNotEvaluated() {\r\n    Optional<String> found =\r\n      Stream.<Supplier<Optional<String>>>of(this::getEmpty, this::getHello, this::getBye)\r\n        .map(Supplier::get)\r\n        .filter(Optional::isPresent)\r\n        .map(Optional::get)\r\n        .findFirst();\r\n\r\n    assertEquals(getHello(), found);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoOptionalsReturnedByOneArgMethod_whenChaining_thenFirstNonEmptyIsReturned() {\r\n    Optional<String> found = Stream.<Supplier<Optional<String>>>of(\r\n      () -> createOptional(\"empty\"),\r\n      () -> createOptional(\"hello\")\r\n    )\r\n      .map(Supplier::get)\r\n      .filter(Optional::isPresent)\r\n      .map(Optional::get)\r\n      .findFirst();\r\n\r\n    assertEquals(createOptional(\"hello\"), found);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoEmptyOptionals_whenChaining_thenDefaultIsReturned() {\r\n    String found = Stream.<Supplier<Optional<String>>>of(\r\n      () -> createOptional(\"empty\"),\r\n      () -> createOptional(\"empty\")\r\n    )\r\n      .map(Supplier::get)\r\n      .filter(Optional::isPresent)\r\n      .map(Optional::get)\r\n      .findFirst()\r\n      .orElseGet(() -> \"default\");\r\n\r\n    assertEquals(\"default\", found);\r\n}\r\n```","```\r\npublic static List<Person> search(List<Person> people, String name, Optional<Integer> age) {\r\n    // Null checks for people and name\r\n    return people.stream()\r\n            .filter(p -> p.getName().equals(name))\r\n            .filter(p -> p.getAge().get() >= age.orElse(0))\r\n            .collect(Collectors.toList());\r\n}\r\n```","```\r\nsomeObject.search(people, \"Peter\", null);\r\n```","```\r\npublic static List<Person> search(List<Person> people, String name, Integer age) {\r\n    // Null checks for people and name\r\n    final Integer ageFilter = age != null ? age : 0;\r\n\r\n    return people.stream()\r\n            .filter(p -> p.getName().equals(name))\r\n            .filter(p -> p.getAge().get() >= ageFilter)\r\n            .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic static List<Person> search(List<Person> people, String name) {\r\n    return doSearch(people, name, 0);\r\n}\r\n\r\npublic static List<Person> search(List<Person> people, String name, int age) {\r\n    return doSearch(people, name, age);\r\n}\r\n\r\nprivate static List<Person> doSearch(List<Person> people, String name, int age) {\r\n    // Null checks for people and name\r\n    return people.stream()\r\n            .filter(p -> p.getName().equals(name))\r\n            .filter(p -> p.getAge().get().intValue() >= age)\r\n            .collect(Collectors.toList());\r\n}\r\n```"]