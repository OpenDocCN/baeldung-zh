["```\r\n@Retention( RetentionPolicy.RUNTIME )\r\npublic @interface MyCustomAnnotation {\r\n\r\n}\r\n```","```\r\n@Component\r\n@MyCustomAnnotation\r\npublic class MyComponent {\r\n\r\n}\r\n```","```\r\npublic class MyService {\r\n\r\n}\r\n\r\n@Configuration\r\npublic class MyConfigurationBean {\r\n\r\n    @Bean\r\n    @MyCustomAnnotation\r\n    MyService myService() {\r\n        return new MyService();\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid whenApplicationContextStarted_ThenShouldDetectAllAnnotatedBeans() {\r\n    try (AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext( MyComponent.class, MyConfigurationBean.class )) {\r\n        Map<String,Object> beans = applicationContext.getBeansWithAnnotation(MyCustomAnnotation.class);\r\n        assertEquals(2, beans.size());\r\n        assertTrue(beans.keySet().containsAll(List.of(\"myComponent\", \"myService\")));\r\n    }\r\n}\r\n```","```\r\n@Retention( RetentionPolicy.RUNTIME )\r\n@Qualifier\r\npublic @interface MyCustomAnnotation {\r\n\r\n}\r\n```","```\r\n@Autowired\r\n@MyCustomAnnotation\r\nprivate List<Object> annotatedBeans;\r\n\r\n@Test\r\nvoid whenAutowiring_ThenShouldDetectAllAnnotatedBeans() {\r\n    assertEquals(2, annotatedBeans.size());\r\n    List<String> classNames = annotatedBeans.stream()\r\n        .map(Object::getClass)\r\n        .map(Class::getName)\r\n        .map(s -> s.substring(s.lastIndexOf(\".\") + 1))\r\n        .collect(Collectors.toList());\r\n    assertTrue(classNames.containsAll(List.of(\"MyComponent\", \"MyService\")));\r\n}\r\n```","```\r\npublic class BeanUtils {\r\n\r\n    public static List<String> getBeansWithAnnotation(GenericApplicationContext applicationContext, Class<?> annotationClass) {\r\n        List<String> result = new ArrayList<String>();\r\n        ConfigurableListableBeanFactory factory = applicationContext.getBeanFactory();\r\n        for(String name : factory.getBeanDefinitionNames()) {\r\n            BeanDefinition bd = factory.getBeanDefinition(name);\r\n            if(bd.getSource() instanceof AnnotatedTypeMetadata) {\r\n                AnnotatedTypeMetadata metadata = (AnnotatedTypeMetadata) bd.getSource();\r\n                if (metadata.getAnnotationAttributes(annotationClass.getName()) != null) {\r\n                    result.add(name);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic static List<String> getBeansWithAnnotation(GenericApplicationContext applicationContext, Class<?> annotationClass) {\r\n    ConfigurableListableBeanFactory factory = applicationContext.getBeanFactory();\r\n    return Arrays.stream(factory.getBeanDefinitionNames())\r\n        .filter(name -> isAnnotated(factory, name, annotationClass))\r\n        .collect(Collectors.toList());\r\n}\r\n\r\nprivate static boolean isAnnotated(ConfigurableListableBeanFactory factory, String beanName, Class<?> annotationClass) {\r\n    BeanDefinition beanDefinition = factory.getBeanDefinition(beanName);\r\n    if(beanDefinition.getSource() instanceof AnnotatedTypeMetadata) {\r\n        AnnotatedTypeMetadata metadata = (AnnotatedTypeMetadata) beanDefinition.getSource();\r\n        return metadata.getAnnotationAttributes(annotationClass.getName()) != null;\r\n    }\r\n    return false;\r\n}\r\n```","```\r\n@Component\r\npublic class AnnotatedBeansComponent {\r\n\r\n    @Autowired\r\n    GenericApplicationContext applicationContext;\r\n\r\n    public List<String> getBeansWithAnnotation(Class<?> annotationClass) {\r\n        return BeanUtils.getBeansWithAnnotation(applicationContext, annotationClass);\r\n    }\r\n}\r\n```"]