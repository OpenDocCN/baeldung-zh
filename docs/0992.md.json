["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration: \r\n          google: \r\n            client-id: <client-id>\r\n            client-secret: <secret>\r\n```","```\r\n@GetMapping(\"/oidc-principal\")\r\npublic OidcUser getOidcUserPrincipal(\r\n  @AuthenticationPrincipal OidcUser principal) {\r\n    return principal;\r\n}\r\n```","```\r\nAuthentication authentication = SecurityContextHolder.getContext().getAuthentication();\r\nif (authentication.getPrincipal() instanceof OidcUser) {\r\n    OidcUser principal = ((OidcUser) authentication.getPrincipal());\r\n\r\n    // ...\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class MappedAuthorities extends WebSecurityConfigurerAdapter {\r\n    protected void configure(HttpSecurity http) {\r\n        http\r\n          .authorizeRequests(authorizeRequests -> authorizeRequests\r\n            .mvcMatchers(\"/my-endpoint\")\r\n              .hasAuthority(\"SCOPE_openid\")\r\n            .anyRequest().authenticated()\r\n          );\r\n    }\r\n}\r\n```","```\r\nlogging:\r\n  level:\r\n    org.springframework.web.client.RestTemplate: DEBUG\r\n```","```\r\n@Configuration\r\npublic class OAuth2LoginSecurityConfig\r\n  extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        Set<String> googleScopes = new HashSet<>();\r\n        googleScopes.add(\r\n          \"https://www.googleapis.com/auth/userinfo.email\");\r\n        googleScopes.add(\r\n          \"https://www.googleapis.com/auth/userinfo.profile\");\r\n\r\n        OidcUserService googleUserService = new OidcUserService();\r\n        googleUserService.setAccessibleScopes(googleScopes);\r\n\r\n        http\r\n          .authorizeRequests(authorizeRequests -> authorizeRequests\r\n            .anyRequest().authenticated())\r\n          .oauth2Login(oauthLogin -> oauthLogin\r\n            .userInfoEndpoint()\r\n              .oidcUserService(googleUserService));\r\n    }\r\n}\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration: \r\n          custom-google: \r\n            client-id: <client-id>\r\n            client-secret: <secret>\r\n        provider:\r\n          custom-google:\r\n            issuer-uri: https://accounts.google.com\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration: \r\n          okta: \r\n            client-id: <client-id>\r\n            client-secret: <secret>\r\n        provider:\r\n          okta:\r\n            issuer-uri: https://dev-123.okta.com\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http\r\n      .authorizeRequests(authorizeRequests -> authorizeRequests\r\n        .mvcMatchers(\"/home\").permitAll()\r\n        .anyRequest().authenticated())\r\n      .oauth2Login(oauthLogin -> oauthLogin.permitAll())\r\n      .logout(logout -> logout\r\n        .logoutSuccessHandler(oidcLogoutSuccessHandler()));\r\n}\r\n```","```\r\n@Autowired\r\nprivate ClientRegistrationRepository clientRegistrationRepository;\r\n\r\nprivate LogoutSuccessHandler oidcLogoutSuccessHandler() {\r\n    OidcClientInitiatedLogoutSuccessHandler oidcLogoutSuccessHandler =\r\n      new OidcClientInitiatedLogoutSuccessHandler(\r\n        this.clientRegistrationRepository);\r\n\r\n    oidcLogoutSuccessHandler.setPostLogoutRedirectUri(\r\n      URI.create(\"http://localhost:8081/home\"));\r\n\r\n    return oidcLogoutSuccessHandler;\r\n}\r\n```"]