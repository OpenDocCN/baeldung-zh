["```\r\n<dependency>\r\n    <groupId>org.antlr</groupId>\r\n    <artifactId>antlr4-runtime</artifactId>\r\n    <version>4.7.1</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.antlr</groupId>\r\n    <artifactId>antlr4-maven-plugin</artifactId>\r\n    <version>4.7.1</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>antlr4</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\npublic class SampleClass {\r\n\r\n    public void DoSomethingElse() {\r\n        //...\r\n    }\r\n}\r\n```","```\r\nmvnÂ package\r\n```","```\r\nmethodDeclarator\r\n\t:\tIdentifier '(' formalParameterList? ')' dims?\r\n\t;\r\n```","```\r\npublic class UppercaseMethodListener extends Java8BaseListener {\r\n\r\n    private List<String> errors = new ArrayList<>();\r\n\r\n    // ... getter for errors\r\n\r\n    @Override\r\n    public void enterMethodDeclarator(Java8Parser.MethodDeclaratorContext ctx) {\r\n        TerminalNode node = ctx.Identifier();\r\n        String methodName = node.getText();\r\n\r\n        if (Character.isUpperCase(methodName.charAt(0))) {\r\n            String error = String.format(\"Method %s is uppercased!\", methodName);\r\n            errors.add(error);\r\n        }\r\n    }\r\n}\r\n```","```\r\nString javaClassContent = \"public class SampleClass { void DoSomething(){} }\";\r\nJava8Lexer java8Lexer = new Java8Lexer(CharStreams.fromString(javaClassContent));\r\n```","```\r\nCommonTokenStream tokens = new CommonTokenStream(lexer);\r\nJava8Parser parser = new Java8Parser(tokens);\r\nParseTree tree = parser.compilationUnit();\r\n```","```\r\nParseTreeWalker walker = new ParseTreeWalker();\r\nUppercaseMethodListener listener= new UppercaseMethodListener();\r\n```","```\r\nwalker.walk(listener, tree);\r\n\r\nassertThat(listener.getErrors().size(), is(1));\r\nassertThat(listener.getErrors().get(0),\r\n  is(\"Method DoSomething is uppercased!\"));\r\n```","```\r\n2018-May-05 14:20:18 INFO some error occurred\r\n2018-May-05 14:20:19 INFO yet another error\r\n2018-May-05 14:20:20 INFO some method started\r\n2018-May-05 14:20:21 DEBUG another method started\r\n2018-May-05 14:20:21 DEBUG entering awesome method\r\n2018-May-05 14:20:24 ERROR Bad thing happened\r\n```","```\r\nfragment DIGIT : [0-9];\r\nfragment TWODIGIT : DIGIT DIGIT;\r\nfragment LETTER : [A-Za-z];\r\n```","```\r\nDATE : TWODIGIT TWODIGIT '-' LETTER LETTER LETTER '-' TWODIGIT;\r\nTIME : TWODIGIT ':' TWODIGIT ':' TWODIGIT;\r\nTEXT   : LETTER+ ;\r\nCRLF : '\\r'? '\\n' | '\\r';\r\n```","```\r\nlog : entry+;\r\nentry : timestamp ' ' level ' ' message CRLF;\r\n```","```\r\ntimestamp : DATE ' ' TIME;\r\n```","```\r\nlevel : 'ERROR' | 'INFO' | 'DEBUG';\r\n```","```\r\nmessage : (TEXT | ' ')+;\r\n```","```\r\npublic class LogEntry {\r\n\r\n    private LogLevel level;\r\n    private String message;\r\n    private LocalDateTime timestamp;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class LogListener extends LogBaseListener {\r\n\r\n    private List<LogEntry> entries = new ArrayList<>();\r\n    private LogEntry current;\r\n```","```\r\n @Override\r\n    public void enterEntry(LogParser.EntryContext ctx) {\r\n        this.current = new LogEntry();\r\n    }\r\n```","```\r\n @Override\r\n    public void enterTimestamp(LogParser.TimestampContext ctx) {\r\n        this.current.setTimestamp(\r\n          LocalDateTime.parse(ctx.getText(), DEFAULT_DATETIME_FORMATTER));\r\n    }\r\n\r\n    @Override\r\n    public void enterMessage(LogParser.MessageContext ctx) {\r\n        this.current.setMessage(ctx.getText());\r\n    }\r\n\r\n    @Override\r\n    public void enterLevel(LogParser.LevelContext ctx) {\r\n        this.current.setLevel(LogLevel.valueOf(ctx.getText()));\r\n    }\r\n```","```\r\n @Override\r\n    public void exitLogEntry(LogParser.EntryContext ctx) {\r\n        this.entries.add(this.current);\r\n    }\r\n```","```\r\n@Test\r\npublic void whenLogContainsOneErrorLogEntry_thenOneErrorIsReturned()\r\n  throws Exception {\r\n\r\n    String logLine =\"2018-May-05 14:20:24 ERROR Bad thing happened\";\r\n\r\n    // instantiate the lexer, the parser, and the walker\r\n    LogListener listener = new LogListener();\r\n    walker.walk(listener, logParser.log());\r\n    LogEntry entry = listener.getEntries().get(0);\r\n\r\n    assertThat(entry.getLevel(), is(LogLevel.ERROR));\r\n    assertThat(entry.getMessage(), is(\"Bad thing happened\"));\r\n    assertThat(entry.getTimestamp(), is(LocalDateTime.of(2018,5,5,14,20,24)));\r\n}\r\n```"]