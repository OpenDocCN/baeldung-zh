["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.dataformat</groupId>\r\n    <artifactId>jackson-dataformat-csv</artifactId>       \r\n    <version>2.5.3</version>\r\n</dependency>\r\n```","```\r\nid,username,password,accessToken\r\n1,john,123,token\r\n2,tom,456,test\r\n```","```\r\npublic <T> List<T> loadObjectList(Class<T> type, String fileName) {\r\n    try {\r\n        CsvSchema bootstrapSchema = CsvSchema.emptySchema().withHeader();\r\n        CsvMapper mapper = new CsvMapper();\r\n        File file = new ClassPathResource(fileName).getFile();\r\n        MappingIterator<T> readValues = \r\n          mapper.reader(type).with(bootstrapSchema).readValues(file);\r\n        return readValues.readAll();\r\n    } catch (Exception e) {\r\n        logger.error(\"Error occurred while loading object list from file \" + fileName, e);\r\n        return Collections.emptyList();\r\n    }\r\n}\r\n```","```\r\npublic List<String[]> loadManyToManyRelationship(String fileName) {\r\n    try {\r\n        CsvMapper mapper = new CsvMapper();\r\n        CsvSchema bootstrapSchema = CsvSchema.emptySchema().withSkipFirstDataRow(true);\r\n        mapper.enable(CsvParser.Feature.WRAP_AS_ARRAY);\r\n        File file = new ClassPathResource(fileName).getFile();\r\n        MappingIterator<String[]> readValues = \r\n          mapper.reader(String[].class).with(bootstrapSchema).readValues(file);\r\n        return readValues.readAll();\r\n    } catch (Exception e) {\r\n        logger.error(\r\n          \"Error occurred while loading many to many relationship from file = \" + fileName, e);\r\n        return Collections.emptyList();\r\n    }\r\n}\r\n```","```\r\nrole,privilege\r\nROLE_ADMIN,ADMIN_READ_PRIVILEGE\r\nROLE_ADMIN,ADMIN_WRITE_PRIVILEGE\r\nROLE_SUPER_USER,POST_UNLIMITED_PRIVILEGE\r\nROLE_USER,POST_LIMITED_PRIVILEGE\r\n```","```\r\n@Component\r\npublic class Setup {\r\n    ...\r\n\r\n    @PostConstruct\r\n    private void setupData() {\r\n        setupRolesAndPrivileges();\r\n        setupUsers();\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic List<Privilege> getPrivileges() {\r\n    return csvDataLoader.loadObjectList(Privilege.class, PRIVILEGES_FILE);\r\n}\r\n\r\npublic List<Role> getRoles() {\r\n    List<Privilege> allPrivileges = getPrivileges();\r\n    List<Role> roles = csvDataLoader.loadObjectList(Role.class, ROLES_FILE);\r\n    List<String[]> rolesPrivileges = csvDataLoader.\r\n      loadManyToManyRelationship(SetupData.ROLES_PRIVILEGES_FILE);\r\n\r\n    for (String[] rolePrivilege : rolesPrivileges) {\r\n        Role role = findRoleByName(roles, rolePrivilege[0]);\r\n        Set<Privilege> privileges = role.getPrivileges();\r\n        if (privileges == null) {\r\n            privileges = new HashSet<Privilege>();\r\n        }\r\n        privileges.add(findPrivilegeByName(allPrivileges, rolePrivilege[1]));\r\n        role.setPrivileges(privileges);\r\n    }\r\n    return roles;\r\n}\r\n\r\nprivate Role findRoleByName(List<Role> roles, String roleName) {\r\n    return roles.stream().\r\n      filter(item -> item.getName().equals(roleName)).findFirst().get();\r\n}\r\n\r\nprivate Privilege findPrivilegeByName(List<Privilege> allPrivileges, String privilegeName) {\r\n    return allPrivileges.stream().\r\n      filter(item -> item.getName().equals(privilegeName)).findFirst().get();\r\n}\r\n```","```\r\nprivate void setupRolesAndPrivileges() {\r\n    List<Privilege> privileges = setupData.getPrivileges();\r\n    for (Privilege privilege : privileges) {\r\n        setupService.setupPrivilege(privilege);\r\n    }\r\n\r\n    List<Role> roles = setupData.getRoles();\r\n    for (Role role : roles) {\r\n        setupService.setupRole(role);\r\n    }\r\n}\r\n```","```\r\npublic void setupPrivilege(Privilege privilege) {\r\n    if (privilegeRepository.findByName(privilege.getName()) == null) {\r\n        privilegeRepository.save(privilege);\r\n    }\r\n}\r\n\r\npublic void setupRole(Role role) {\r\n    if (roleRepository.findByName(role.getName()) == null) { \r\n        Set<Privilege> privileges = role.getPrivileges(); \r\n        Set<Privilege> persistedPrivileges = new HashSet<Privilege>();\r\n        for (Privilege privilege : privileges) { \r\n            persistedPrivileges.add(privilegeRepository.findByName(privilege.getName())); \r\n        } \r\n        role.setPrivileges(persistedPrivileges); \r\n        roleRepository.save(role); }\r\n}\r\n```","```\r\npublic List<User> getUsers() {\r\n    List<Role> allRoles = getRoles();\r\n    List<User> users = csvDataLoader.loadObjectList(User.class, SetupData.USERS_FILE);\r\n    List<String[]> usersRoles = csvDataLoader.\r\n      loadManyToManyRelationship(SetupData.USERS_ROLES_FILE);\r\n\r\n    for (String[] userRole : usersRoles) {\r\n        User user = findByUserByUsername(users, userRole[0]);\r\n        Set<Role> roles = user.getRoles();\r\n        if (roles == null) {\r\n            roles = new HashSet<Role>();\r\n        }\r\n        roles.add(findRoleByName(allRoles, userRole[1]));\r\n        user.setRoles(roles);\r\n    }\r\n    return users;\r\n}\r\n\r\nprivate User findByUserByUsername(List<User> users, String username) {\r\n    return users.stream().\r\n      filter(item -> item.getUsername().equals(username)).findFirst().get();\r\n}\r\n```","```\r\nprivate void setupUsers() {\r\n    List<User> users = setupData.getUsers();\r\n    for (User user : users) {\r\n        setupService.setupUser(user);\r\n    }\r\n}\r\n```","```\r\n@Transactional\r\npublic void setupUser(User user) {\r\n    try {\r\n        setupUserInternal(user);\r\n    } catch (Exception e) {\r\n        logger.error(\"Error occurred while saving user \" + user.toString(), e);\r\n    }\r\n}\r\n\r\nprivate void setupUserInternal(User user) {\r\n    if (userRepository.findByUsername(user.getUsername()) == null) {\r\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\r\n        user.setPreference(createSimplePreference(user));\r\n        Set<Role> roles = user.getRoles(); \r\n        Set<Role> persistedRoles = new HashSet<Role>(); \r\n        for (Role role : roles) { \r\n            persistedRoles.add(roleRepository.findByName(role.getName())); \r\n        } \r\n        user.setRoles(persistedRoles);\r\n        userRepository.save(user);\r\n    }\r\n}\r\n```","```\r\nprivate Preference createSimplePreference(User user) {\r\n    Preference pref = new Preference();\r\n    pref.setId(user.getId());\r\n    pref.setTimezone(TimeZone.getDefault().getID());\r\n    pref.setEmail(user.getUsername() + \"@test.com\");\r\n    return preferenceRepository.save(pref);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLoadingUsersFromCsvFile_thenLoaded() {\r\n    List<User> users = csvDataLoader.\r\n      loadObjectList(User.class, CsvDataLoader.USERS_FILE);\r\n    assertFalse(users.isEmpty());\r\n}\r\n\r\n@Test\r\npublic void whenLoadingRolesFromCsvFile_thenLoaded() {\r\n    List<Role> roles = csvDataLoader.\r\n      loadObjectList(Role.class, CsvDataLoader.ROLES_FILE);\r\n    assertFalse(roles.isEmpty());\r\n}\r\n\r\n@Test\r\npublic void whenLoadingPrivilegesFromCsvFile_thenLoaded() {\r\n    List<Privilege> privileges = csvDataLoader.\r\n      loadObjectList(Privilege.class, CsvDataLoader.PRIVILEGES_FILE);\r\n    assertFalse(privileges.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenLoadingUsersRolesRelationFromCsvFile_thenLoaded() {\r\n    List<String[]> usersRoles = csvDataLoader.\r\n      loadManyToManyRelationship(CsvDataLoader.USERS_ROLES_FILE);\r\n    assertFalse(usersRoles.isEmpty());\r\n}\r\n\r\n@Test\r\npublic void whenLoadingRolesPrivilegesRelationFromCsvFile_thenLoaded() {\r\n    List<String[]> rolesPrivileges = csvDataLoader.\r\n      loadManyToManyRelationship(CsvDataLoader.ROLES_PRIVILEGES_FILE);\r\n    assertFalse(rolesPrivileges.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingUsersFromCsvFile_thenCorrect() {\r\n    List<User> users = setupData.getUsers();\r\n\r\n    assertFalse(users.isEmpty());\r\n    for (User user : users) {\r\n        assertFalse(user.getRoles().isEmpty());\r\n    }\r\n}\r\n\r\n@Test\r\npublic void whenGettingRolesFromCsvFile_thenCorrect() {\r\n    List<Role> roles = setupData.getRoles();\r\n\r\n    assertFalse(roles.isEmpty());\r\n    for (Role role : roles) {\r\n        assertFalse(role.getPrivileges().isEmpty());\r\n    }\r\n}\r\n\r\n@Test\r\npublic void whenGettingPrivilegesFromCsvFile_thenCorrect() {\r\n    List<Privilege> privileges = setupData.getPrivileges();\r\n    assertFalse(privileges.isEmpty());\r\n}\r\n```"]