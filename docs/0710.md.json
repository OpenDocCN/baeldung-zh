["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-authorization-server</artifactId>\r\n    <version>0.2.0</version>\r\n</dependency>\r\n```","```\r\nserver:\r\n  port: 9000\r\n```","```\r\n@Configuration\r\n@Import(OAuth2AuthorizationServerConfiguration.class)\r\npublic class AuthorizationServerConfig {\r\n    @Bean\r\n    public RegisteredClientRepository registeredClientRepository() {\r\n        RegisteredClient registeredClient = RegisteredClient.withId(UUID.randomUUID().toString())\r\n          .clientId(\"articles-client\")\r\n          .clientSecret(\"{noop}secret\")\r\n          .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\r\n          .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\r\n          .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\r\n          .redirectUri(\"http://127.0.0.1:8080/login/oauth2/code/articles-client-oidc\")\r\n          .redirectUri(\"http://127.0.0.1:8080/authorized\")\r\n          .scope(OidcScopes.OPENID)\r\n          .scope(\"articles.read\")\r\n          .build();\r\n        return new InMemoryRegisteredClientRepository(registeredClient);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\n@Order(Ordered.HIGHEST_PRECEDENCE)\r\npublic SecurityFilterChain authServerSecurityFilterChain(HttpSecurity http) throws Exception {\r\n    OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\r\n    return http.formLogin(Customizer.withDefaults()).build();\r\n}\r\n```","```\r\n@Bean\r\npublic JWKSource<SecurityContext> jwkSource() {\r\n    RSAKey rsaKey = generateRsa();\r\n    JWKSet jwkSet = new JWKSet(rsaKey);\r\n    return (jwkSelector, securityContext) -> jwkSelector.select(jwkSet);\r\n}\r\n\r\nprivate static RSAKey generateRsa() {\r\n    KeyPair keyPair = generateRsaKey();\r\n    RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\r\n    RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\r\n    return new RSAKey.Builder(publicKey)\r\n      .privateKey(privateKey)\r\n      .keyID(UUID.randomUUID().toString())\r\n      .build();\r\n}\r\n\r\nprivate static KeyPair generateRsaKey() {\r\n    KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n    keyPairGenerator.initialize(2048);\r\n    return keyPairGenerator.generateKeyPair();\r\n}\r\n```","```\r\n@Bean\r\npublic ProviderSettings providerSettings() {\r\n    return ProviderSettings.builder()\r\n      .issuer(\"http://auth-server:9000\")\r\n      .build();\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class DefaultSecurityConfig {\r\n\r\n    @Bean\r\n    SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests(authorizeRequests ->\r\n          authorizeRequests.anyRequest().authenticated()\r\n        )\r\n          .formLogin(withDefaults());\r\n        return http.build();\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Bean\r\nUserDetailsService users() {\r\n    UserDetails user = User.withDefaultPasswordEncoder()\r\n      .username(\"admin\")\r\n      .password(\"password\")\r\n      .build();\r\n    return new InMemoryUserDetailsManager(user);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n```","```\r\nserver:\r\n  port: 8090\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        jwt:\r\n          issuer-uri: http://auth-server:9000\r\n```","```\r\n@EnableWebSecurity\r\npublic class ResourceServerConfig {\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http.mvcMatcher(\"/articles/**\")\r\n          .authorizeRequests()\r\n          .mvcMatchers(\"/articles/**\")\r\n          .access(\"hasAuthority('SCOPE_articles.read')\")\r\n          .and()\r\n          .oauth2ResourceServer()\r\n          .jwt();\r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class ArticlesController {\r\n\r\n    @GetMapping(\"/articles\")\r\n    public String[] getArticles() {\r\n        return new String[] { \"Article 1\", \"Article 2\", \"Article 3\" };\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webflux</artifactId>\r\n    <version>5.3.9</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor.netty</groupId>\r\n    <artifactId>reactor-netty</artifactId>\r\n    <version>1.0.9</version>\r\n</dependency> \r\n```","```\r\nserver:\r\n  port: 8080\r\n\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          articles-client-oidc:\r\n            provider: spring\r\n            client-id: articles-client\r\n            client-secret: secret\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: \"http://127.0.0.1:8080/login/oauth2/code/{registrationId}\"\r\n            scope: openid\r\n            client-name: articles-client-oidc\r\n          articles-client-authorization-code:\r\n            provider: spring\r\n            client-id: articles-client\r\n            client-secret: secret\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: \"http://127.0.0.1:8080/authorized\"\r\n            scope: articles.read\r\n            client-name: articles-client-authorization-code\r\n        provider:\r\n          spring:\r\n            issuer-uri: http://auth-server:9000\r\n```","```\r\n@Bean\r\nWebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\r\n    ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\r\n      new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\r\n    return WebClient.builder()\r\n      .apply(oauth2Client.oauth2Configuration())\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\nOAuth2AuthorizedClientManager authorizedClientManager(\r\n        ClientRegistrationRepository clientRegistrationRepository,\r\n        OAuth2AuthorizedClientRepository authorizedClientRepository) {\r\n\r\n    OAuth2AuthorizedClientProvider authorizedClientProvider =\r\n      OAuth2AuthorizedClientProviderBuilder.builder()\r\n        .authorizationCode()\r\n        .refreshToken()\r\n        .build();\r\n    DefaultOAuth2AuthorizedClientManager authorizedClientManager = new DefaultOAuth2AuthorizedClientManager(\r\n      clientRegistrationRepository, authorizedClientRepository);\r\n    authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\r\n\r\n    return authorizedClientManager;\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests(authorizeRequests ->\r\n            authorizeRequests.anyRequest().authenticated()\r\n          )\r\n          .oauth2Login(oauth2Login ->\r\n            oauth2Login.loginPage(\"/oauth2/authorization/articles-client-oidc\"))\r\n          .oauth2Client(withDefaults());\r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class ArticlesController {\r\n\r\n    private WebClient webClient;\r\n\r\n    @GetMapping(value = \"/articles\")\r\n    public String[] getArticles(\r\n      @RegisteredOAuth2AuthorizedClient(\"articles-client-authorization-code\") OAuth2AuthorizedClient authorizedClient\r\n    ) {\r\n        return this.webClient\r\n          .get()\r\n          .uri(\"http://127.0.0.1:8090/articles\")\r\n          .attributes(oauth2AuthorizedClient(authorizedClient))\r\n          .retrieve()\r\n          .bodyToMono(String[].class)\r\n          .block();\r\n    }\r\n}\r\n```"]