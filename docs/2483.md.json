["```\r\n<dependency>\r\n    <groupId>com.couchbase.client</groupId>\r\n    <artifactId>java-client</artifactId>\r\n    <version>2.5.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\nCluster cluster = CouchbaseCluster.create(\"localhost\");\r\nBucket bucket = cluster.openBucket(\"test\");\r\n```","```\r\nbucket.close();\r\ncluster.disconnect();\r\n```","```\r\nJsonObject personObj = JsonObject.create()\r\n  .put(\"name\", \"John\")\r\n  .put(\"email\", \"[[emailÂ protected]](/web/20220629001358/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n  .put(\"interests\", JsonArray.from(\"Java\", \"Nigerian Jollof\"));\r\n\r\nString id = UUID.randomUUID().toString();\r\nJsonDocument doc = JsonDocument.create(id, personObj);\r\nbucket.insert(doc);\r\n```","```\r\nSystem.out.println(bucket.get(id));\r\n```","```\r\nSELECT * FROM test\r\n```","```\r\nbucket.bucketManager().createN1qlPrimaryIndex(true, false);\r\n\r\nN1qlQueryResult result\r\n  = bucket.query(N1qlQuery.simple(\"SELECT * FROM test\"));\r\n```","```\r\nresult.forEach(System.out::println);\r\n```","```\r\nSystem.out.println(\"result count: \" + result.info().resultCount());\r\nSystem.out.println(\"error count: \" + result.info().errorCount());\r\n```","```\r\nString query = \"SELECT name FROM `travel-sample` \" +\r\n  \"WHERE type = 'airport' LIMIT 100\";\r\nN1qlQueryResult result1 = bucket.query(N1qlQuery.simple(query));\r\n```","```\r\nN1qlQueryRow row = result1.allRows().get(0);\r\nJsonObject rowJson = row.value();\r\nSystem.out.println(\"Name in First Row \" + rowJson.get(\"name\"));\r\n```","```\r\nJsonObject pVal = JsonObject.create().put(\"type\", \"airport\");\r\nString query = \"SELECT * FROM `travel-sample` \" +\r\n  \"WHERE type = $type LIMIT 100\";\r\nN1qlQueryResult r2 = bucket.query(N1qlQuery.parameterized(query, pVal));\r\n```","```\r\n[  \r\n  {  \r\n    \"travel-sample\":{  \r\n      \"airportname\":\"Calais Dunkerque\",\r\n      \"city\":\"Calais\",\r\n      \"country\":\"France\",\r\n      \"faa\":\"CQF\",\r\n      \"geo\":{  \r\n        \"alt\":12,\r\n        \"lat\":50.962097,\r\n        \"lon\":1.954764\r\n      },\r\n      \"icao\":\"LFAC\",\r\n      \"id\":1254,\r\n      \"type\":\"airport\",\r\n      \"tz\":\"Europe/Paris\"\r\n    }\r\n  },\r\n```","```\r\npublic static List<JsonNode> extractJsonResult(N1qlQueryResult result) {\r\n  return result.allRows().stream()\r\n    .map(row -> {\r\n        try {\r\n            return objectMapper.readTree(row.value().toString());\r\n        } catch (IOException e) {\r\n            logger.log(Level.WARNING, e.getLocalizedMessage());\r\n            return null;\r\n        }\r\n    })\r\n    .filter(Objects::nonNull)\r\n    .collect(Collectors.toList());\r\n}\r\n```","```\r\nList<JsonNode> list = extractJsonResult(r2);\r\nSystem.out.println(\r\n  list.get(0).get(\"travel-sample\").get(\"airportname\").asText());\r\n```","```\r\nStatement statement = select(\"*\")\r\n  .from(i(\"travel-sample\"))\r\n  .where(x(\"type\").eq(s(\"airport\")))\r\n  .limit(100);\r\nN1qlQueryResult r3 = bucket.query(N1qlQuery.simple(statement));\r\n```","```\r\nString query2 = \"SELECT t.city, \" +\r\n  \"t.airportname || \\\" (\\\" || t.faa || \\\")\\\" AS portname_faa \" +\r\n  \"FROM `travel-sample` t \" +\r\n  \"WHERE t.type=\\\"airport\\\"\" +\r\n  \"AND t.country LIKE '%States'\" +\r\n  \"AND t.geo.lat >= 70 \" +\r\n  \"LIMIT 2\";\r\nN1qlQueryResult r4 = bucket.query(N1qlQuery.simple(query2));\r\nList<JsonNode> list3 = extractJsonResult(r4);\r\nSystem.out.println(\"First Doc : \" + list3.get(0));\r\n```","```\r\nStatement st2 = select(\r\n  x(\"t.city, t.airportname\")\r\n  .concat(s(\" (\")).concat(x(\"t.faa\")).concat(s(\")\")).as(\"portname_faa\"))\r\n  .from(i(\"travel-sample\").as(\"t\"))\r\n  .where( x(\"t.type\").eq(s(\"airport\"))\r\n  .and(x(\"t.country\").like(s(\"%States\")))\r\n  .and(x(\"t.geo.lat\").gte(70)))\r\n  .limit(2);\r\nN1qlQueryResult r5 = bucket.query(N1qlQuery.simple(st2));\r\n//...\r\n```","```\r\nINSERT INTO `travel-sample` ( KEY, VALUE )\r\nVALUES(\"unique_key\", { \"id\": \"01\", \"type\": \"airline\"})\r\nRETURNING META().id as docid, *;\r\n```","```\r\nINSERT INTO `travel-sample` (KEY, VALUE)\r\nVALUES('cust1293', {\"id\":\"1293\",\"name\":\"Sample Airline\", \"type\":\"airline\"})\r\nRETURNING META().id as docid, *\r\n```","```\r\nString query = \"INSERT INTO `travel-sample` (KEY, VALUE) \" +\r\n  \" VALUES(\" +\r\n  \"\\\"cust1293\\\", \" +\r\n  \"{\\\"id\\\":\\\"1293\\\",\\\"name\\\":\\\"Sample Airline\\\", \\\"type\\\":\\\"airline\\\"})\" +\r\n  \" RETURNING META().id as docid, *\";\r\nN1qlQueryResult r1 = bucket.query(N1qlQuery.simple(query));\r\nr1.forEach(System.out::println);\r\n```","```\r\n{  \r\n  \"docid\":\"cust1293\",\r\n  \"travel-sample\":{  \r\n    \"id\":\"1293\",\r\n    \"name\":\"Sample Airline\",\r\n    \"type\":\"airline\"\r\n  }\r\n}\r\n```","```\r\nJsonObject ob = JsonObject.create()\r\n  .put(\"id\", \"1293\")\r\n  .put(\"name\", \"Sample Airline\")\r\n  .put(\"type\", \"airline\");\r\nbucket.insert(JsonDocument.create(\"cust1295\", ob));\r\n```","```\r\nINSERT INTO `travel-sample` ( KEY, VALUE )\r\nVALUES(\"unique_key\", { \"id\": \"01\", \"type\": \"airline\"}),\r\nVALUES(\"unique_key\", { \"id\": \"01\", \"type\": \"airline\"}),\r\nVALUES(\"unique_n\", { \"id\": \"01\", \"type\": \"airline\"})\r\nRETURNING META().id as docid, *;\r\n```","```\r\nList<JsonDocument> documents = IntStream.rangeClosed(0,10)\r\n  .mapToObj( i -> {\r\n      JsonObject content = JsonObject.create()\r\n        .put(\"id\", i)\r\n        .put(\"type\", \"airline\")\r\n        .put(\"name\", \"Sample Airline \"  + i);\r\n      return JsonDocument.create(\"cust_\" + i, content);\r\n  }).collect(Collectors.toList());\r\n\r\nList<JsonDocument> r5 = Observable\r\n  .from(documents)\r\n  .flatMap(doc -> bucket.async().insert(doc))\r\n  .toList()\r\n  .last()\r\n  .toBlocking()\r\n  .single();\r\n\r\nr5.forEach(System.out::println);\r\n```","```\r\nString query2 = \"UPDATE `travel-sample` USE KEYS \\\"cust_1\\\" \" +\r\n  \"SET name=\\\"Sample Airline Updated\\\" RETURNING name\";\r\nN1qlQueryResult result = bucket.query(N1qlQuery.simple(query2));\r\nresult.forEach(System.out::println);\r\n```","```\r\nJsonObject o2 = JsonObject.create()\r\n  .put(\"name\", \"Sample Airline Updated\");\r\nbucket.upsert(JsonDocument.create(\"cust_1\", o2));\r\n```","```\r\nString query3 = \"UPDATE `travel-sample` USE KEYS \\\"cust_2\\\" \" +\r\n  \"UNSET name RETURNING *\";\r\nN1qlQueryResult result1 = bucket.query(N1qlQuery.simple(query3));\r\nresult1.forEach(System.out::println);\r\n```","```\r\n{  \r\n  \"travel-sample\":{  \r\n    \"id\":2,\r\n    \"type\":\"airline\"\r\n  }\r\n}\r\n```","```\r\nString query4 = \"DELETE FROM `travel-sample` USE KEYS \\\"cust_50\\\"\";\r\nN1qlQueryResult result4 = bucket.query(N1qlQuery.simple(query4));\r\n```","```\r\nString query5 = \"DELETE FROM `travel-sample` WHERE id = 0 RETURNING *\";\r\nN1qlQueryResult result5 = bucket.query(N1qlQuery.simple(query5));\r\n```","```\r\nbucket.remove(\"cust_2\");\r\n```","```\r\nSELECT COUNT(*) as landmark_count FROM `travel-sample` WHERE type = 'landmark'\r\n```","```\r\nINSERT INTO `travel-sample` (KEY, VALUE) \r\nVALUES(LOWER(UUID()), \r\n  {\"id\":LOWER(UUID()), \"name\":\"Sample Airport Rand\", \"created_at\": NOW_MILLIS()})\r\nRETURNING META().id as docid, *\r\n```","```\r\nSELECT DISTINCT country FROM `travel-sample` WHERE type = \"airport\" AND faa WITHIN \r\n  (SELECT destinationairport \r\n  FROM `travel-sample` t WHERE t.type = \"route\" and t.airlineid = \"airline_10\")\r\n```","```\r\nSELECT name, price, address, country FROM `travel-sample` h \r\nWHERE h.type = \"hotel\" AND h.country WITHIN\r\n  (SELECT DISTINCT country FROM `travel-sample` \r\n  WHERE type = \"airport\" AND faa WITHIN \r\n  (SELECT destinationairport FROM `travel-sample` t \r\n  WHERE t.type = \"route\" and t.airlineid = \"airline_10\" )\r\n  ) LIMIT 100\r\n```"]