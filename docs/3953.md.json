["```\r\n<dependency>\r\n    <groupId>io.atlassian.fugue</groupId>\r\n    <artifactId>fugue</artifactId>\r\n    <version>4.5.1</version>\r\n</dependency>\r\n```","```\r\nOption<Object> none = Option.none();\r\nassertFalse(none.isDefined());\r\n\r\nOption<String> some = Option.some(\"value\");\r\nassertTrue(some.isDefined());\r\nassertEquals(\"value\", some.get());\r\n\r\nOption<Integer> maybe = Option.option(someInputValue);\r\n```","```\r\nOption<String> some = Option.some(\"value\") \r\n  .map(String::toUpperCase);\r\nassertEquals(\"VALUE\", some.get());\r\n```","```\r\nOption.some(null);\r\n```","```\r\nOption<Object> some = Option.some(\"value\")\r\n  .map(x -> null);\r\nassertNull(some.get());\r\n```","```\r\nOption<String> some = Option.some(\"value\");\r\nIterable<String> strings = Iterables\r\n  .concat(some, Arrays.asList(\"a\", \"b\", \"c\"));\r\n```","```\r\nassertEquals(0, Option.none().toStream().count());\r\nassertEquals(1, Option.some(\"value\").toStream().count());\r\n```","```\r\nOptional<Object> optional = Option.none()\r\n  .toOptional();\r\nassertTrue(Option.fromOptional(optional)\r\n  .isEmpty());\r\n```","```\r\nFunction<Integer, Integer> f = (Integer x) -> x > 0 ? x + 1 : null;\r\nFunction<Option<Integer>, Option<Integer>> lifted = Options.lift(f);\r\n\r\nassertEquals(2, (long) lifted.apply(Option.some(1)).get());\r\nassertTrue(lifted.apply(Option.none()).isEmpty());\r\n```","```\r\nassertEquals(null, lifted.apply(Option.some(0)).get());\r\n```","```\r\nEither<Integer, String> right = Either.right(\"value\");\r\n```","```\r\nEither<Integer, String> left = Either.left(-1);\r\n```","```\r\nif (either.isRight()) {\r\n    ...\r\n}\r\n```","```\r\neither\r\n  .map(String::toUpperCase)\r\n  .getOrNull();\r\n```","```\r\neither.left()\r\n  .map(x -> decodeSQLErrorCode(x));\r\n```","```\r\nassertTrue(Try.failure(new Exception(\"Fail!\")).isFailure());\r\nassertTrue(Try.successful(\"OK\").isSuccess());\r\n```","```\r\nassertTrue(Checked.of(() -> \"ok\").isSuccess());\r\nassertTrue(Checked.of(() -> { throw new Exception(\"ko\"); }).isFailure());\r\n```","```\r\nChecked.Function<String, Object, Exception> throwException = (String x) -> {\r\n    throw new Exception(x);\r\n};\r\n\r\nassertTrue(Checked.lift(throwException).apply(\"ko\").isFailure());\r\n```","```\r\nassertEquals(42, failedTry.getOrElse(() -> 42));\r\n```","```\r\nsomeTry.getOrElse(() -> {\r\n    throw new NoSuchElementException(\"Nothing to get\");\r\n});\r\n```","```\r\nTry<Integer> aTry = Try.successful(42).map(x -> x + 1);\r\n```","```\r\nTry.successful(42).flatMap(x -> Try.successful(x + 1));\r\n```","```\r\nTry<Object> recover = Try\r\n  .failure(new Exception(\"boo!\"))\r\n  .recover((Exception e) -> e.getMessage() + \" recovered.\");\r\n\r\nassertTrue(recover.isSuccess());\r\nassertEquals(\"boo! recovered.\", recover.getOrElse(() -> null));\r\n```","```\r\nTry<Object> failure = Try.failure(new Exception(\"boo!\")).recover(x -> {\r\n    throw new RuntimeException(x);\r\n});\r\n\r\nassertTrue(failure.isFailure());\r\n```","```\r\nTry<Object> recover = Try\r\n  .failure(new Exception(\"boo!\"))\r\n  .recoverWith((Exception e) -> Try.successful(\"recovered again!\"));\r\n\r\nassertTrue(recover.isSuccess());\r\nassertEquals(\"recovered again!\", recover.getOrElse(() -> null));\r\n```","```\r\nPair<Integer, String> pair = Pair.pair(1, \"a\");\r\n\r\nassertEquals(1, (int) pair.left());\r\nassertEquals(\"a\", pair.right());\r\n```","```\r\nUnit doSomething() {\r\n    System.out.println(\"Hello! Side effect\");\r\n    return Unit();\r\n}\r\n```"]