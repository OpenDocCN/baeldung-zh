["```\r\n<dependency>\r\n    <groupId>com.datastax.cassandra</groupId>\r\n    <artifactId>cassandra-driver-core</artifactId>\r\n    <version>2.1.9</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class CassandraConfig extends AbstractCassandraConfiguration {\r\n\r\n    @Override\r\n    protected String getKeyspaceName() {\r\n        return \"testKeySpace\";\r\n    }\r\n\r\n    @Bean\r\n    public CassandraClusterFactoryBean cluster() {\r\n        CassandraClusterFactoryBean cluster = \r\n          new CassandraClusterFactoryBean();\r\n        cluster.setContactPoints(\"127.0.0.1\");\r\n        cluster.setPort(9142);\r\n        return cluster;\r\n    }\r\n\r\n    @Bean\r\n    public CassandraMappingContext cassandraMapping() \r\n      throws ClassNotFoundException {\r\n        return new BasicCassandraMappingContext();\r\n    }\r\n}\r\n```","```\r\nspring.data.cassandra.keyspace-name=testKeySpace\r\nspring.data.cassandra.port=9142\r\nspring.data.cassandra.contact-points=127.0.0.1\r\n```","```\r\n@Repository\r\npublic interface BookRepository extends CassandraRepository<Book> {\r\n    //\r\n}\r\n```","```\r\n@Configuration\r\n@EnableCassandraRepositories(\r\n  basePackages = \"com.baeldung.spring.data.cassandra.repository\")\r\npublic class CassandraConfig extends AbstractCassandraConfiguration {\r\n    //\r\n}\r\n```","```\r\n@Table\r\npublic class Book {\r\n    @PrimaryKeyColumn(\r\n      name = \"isbn\", \r\n      ordinal = 2, \r\n      type = PrimaryKeyType.CLUSTERED, \r\n      ordering = Ordering.DESCENDING)\r\n    private UUID id;\r\n    @PrimaryKeyColumn(\r\n      name = \"title\", ordinal = 0, type = PrimaryKeyType.PARTITIONED)\r\n    private String title;\r\n    @PrimaryKeyColumn(\r\n      name = \"publisher\", ordinal = 1, type = PrimaryKeyType.PARTITIONED)\r\n    private String publisher;\r\n    @Column\r\n    private Set<String> tags = new HashSet<>();\r\n    // standard getters and setters\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.cassandraunit</groupId>\r\n    <artifactId>cassandra-unit-spring</artifactId>\r\n    <version>2.1.9.2</version>\r\n    <scope>test</scope>\r\n    <exclusions>\r\n        <exclusion>\r\n        <groupId>org.cassandraunit</groupId>\r\n        <artifactId>cassandra-unit</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.cassandraunit</groupId>\r\n    <artifactId>cassandra-unit-shaded</artifactId>\r\n    <version>2.1.9.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hectorclient</groupId>\r\n    <artifactId>hector-core</artifactId>\r\n    <version>2.0-0</version>\r\n</dependency>\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = CassandraConfig.class)\r\npublic class BookRepositoryIntegrationTest {\r\n    //\r\n}\r\n```","```\r\n@BeforeClass\r\npublic static void startCassandraEmbedded() { \r\n    EmbeddedCassandraServerHelper.startEmbeddedCassandra(); \r\n    Cluster cluster = Cluster.builder()\r\n      .addContactPoints(\"127.0.0.1\").withPort(9142).build();\r\n    Session session = cluster.connect(); \r\n}\r\n```","```\r\n@AfterClass\r\npublic static void stopCassandraEmbedded() {\r\n    EmbeddedCassandraServerHelper.cleanEmbeddedCassandra();\r\n}\r\n```","```\r\n@Before\r\npublic void createTable() {\r\n    adminTemplate.createTable(\r\n      true, CqlIdentifier.cqlId(DATA_TABLE_NAME), \r\n      Book.class, new HashMap<String, Object>());\r\n}\r\n```","```\r\n@After\r\npublic void dropTable() {\r\n    adminTemplate.dropTable(CqlIdentifier.cqlId(DATA_TABLE_NAME));\r\n}\r\n```","```\r\nBook javaBook = new Book(\r\n  UUIDs.timeBased(), \"Head First Java\", \"O'Reilly Media\", \r\n  ImmutableSet.of(\"Computer\", \"Software\"));\r\nbookRepository.save(ImmutableSet.of(javaBook));\r\n```","```\r\nIterable<Book> books = bookRepository.findByTitleAndPublisher(\r\n  \"Head First Java\", \"O'Reilly Media\");\r\nassertEquals(javaBook.getId(), books.iterator().next().getId());\r\n```","```\r\nBook javaBook = new Book(\r\n  UUIDs.timeBased(), \"Head First Java\", \"O'Reilly Media\", \r\n  ImmutableSet.of(\"Computer\", \"Software\"));\r\nbookRepository.save(ImmutableSet.of(javaBook));\r\n```","```\r\nIterable<Book> books = bookRepository.findByTitleAndPublisher(\r\n  \"Head First Java\", \"O'Reilly Media\");\r\n```","```\r\njavaBook.setTitle(\"Head First Java Second Edition\");\r\nbookRepository.save(ImmutableSet.of(javaBook));\r\n```","```\r\nIterable<Book> books = bookRepository.findByTitleAndPublisher(\r\n  \"Head First Java Second Edition\", \"O'Reilly Media\");\r\nassertEquals(\r\n  javaBook.getTitle(), updateBooks.iterator().next().getTitle());\r\n```","```\r\nBook javaBook = new Book(\r\n  UUIDs.timeBased(), \"Head First Java\", \"O'Reilly Media\",\r\n  ImmutableSet.of(\"Computer\", \"Software\"));\r\nbookRepository.save(ImmutableSet.of(javaBook));\r\n```","```\r\nbookRepository.delete(javaBook); \r\n```","```\r\nIterable<Book> books = bookRepository.findByTitleAndPublisher(\r\n  \"Head First Java\", \"O'Reilly Media\");\r\nassertNotEquals(javaBook.getId(), books.iterator().next().getId());\r\n```","```\r\nBook javaBook = new Book(\r\n  UUIDs.timeBased(), \"Head First Java\", \"O'Reilly Media\", \r\n  ImmutableSet.of(\"Computer\", \"Software\"));\r\nBook dPatternBook = new Book(\r\n  UUIDs.timeBased(), \"Head Design Patterns\",\"O'Reilly Media\",\r\n  ImmutableSet.of(\"Computer\", \"Software\"));\r\nbookRepository.save(ImmutableSet.of(javaBook));\r\nbookRepository.save(ImmutableSet.of(dPatternBook));\r\n```","```\r\nIterable<Book> books = bookRepository.findAll();\r\n```","```\r\nint bookCount = 0;\r\nfor (Book book : books) bookCount++;\r\nassertEquals(bookCount, 2);\r\n```"]