["```\r\npublic class Data {\r\n    private String packet;\r\n\r\n    // True if receiver should wait\r\n    // False if sender should wait\r\n    private boolean transfer = true;\r\n\r\n    public synchronized String receive() {\r\n        while (transfer) {\r\n            try {\r\n                wait();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt(); \r\n                System.out.println(\"Thread Interrupted\");\r\n            }\r\n        }\r\n        transfer = true;\r\n\r\n        String returnPacket = packet;\r\n        notifyAll();\r\n        return returnPacket;\r\n    }\r\n\r\n    public synchronized void send(String packet) {\r\n        while (!transfer) {\r\n            try { \r\n                wait();\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt(); \r\n                System.out.println(\"Thread Interrupted\");\r\n            }\r\n        }\r\n        transfer = false;\r\n\r\n        this.packet = packet;\r\n        notifyAll();\r\n    }\r\n}\r\n```","```\r\npublic class Sender implements Runnable {\r\n    private Data data;\r\n\r\n    // standard constructors\r\n\r\n    public void run() {\r\n        String packets[] = {\r\n          \"First packet\",\r\n          \"Second packet\",\r\n          \"Third packet\",\r\n          \"Fourth packet\",\r\n          \"End\"\r\n        };\r\n\r\n        for (String packet : packets) {\r\n            data.send(packet);\r\n\r\n            // Thread.sleep() to mimic heavy server-side processing\r\n            try {\r\n                Thread.sleep(ThreadLocalRandom.current().nextInt(1000, 5000));\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt(); \r\n                Log.error(\"Thread interrupted\", e); \r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class Receiver implements Runnable {\r\n    private Data load;\r\n\r\n    // standard constructors\r\n\r\n    public void run() {\r\n        for(String receivedMessage = load.receive();\r\n          !\"End\".equals(receivedMessage);\r\n          receivedMessage = load.receive()) {\r\n\r\n            System.out.println(receivedMessage);\r\n\r\n            // ...\r\n            try {\r\n                Thread.sleep(ThreadLocalRandom.current().nextInt(1000, 5000));\r\n            } catch (InterruptedException e) {\r\n                Thread.currentThread().interrupt(); \r\n                Log.error(\"Thread interrupted\", e); \r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    Data data = new Data();\r\n    Thread sender = new Thread(new Sender(data));\r\n    Thread receiver = new Thread(new Receiver(data));\r\n\r\n    sender.start();\r\n    receiver.start();\r\n}\r\n```","```\r\nFirst packet\r\nSecond packet\r\nThird packet\r\nFourth packet \r\n```"]