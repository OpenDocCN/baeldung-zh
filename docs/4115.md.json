["```\r\n@Test\r\npublic void whenJoiningTwoArrays_thenJoined() {\r\n    String[] animals1 = new String[] { \"Dog\", \"Cat\" };\r\n    String[] animals2 = new String[] { \"Bird\", \"Cow\" };\r\n\r\n    String[] result = Stream.concat(\r\n      Arrays.stream(animals1), Arrays.stream(animals2)).toArray(String[]::new);\r\n\r\n    assertArrayEquals(result, new String[] { \"Dog\", \"Cat\", \"Bird\", \"Cow\" });\r\n}\r\n```","```\r\n@Test\r\npublic void whenJoiningTwoCollections_thenJoined() {\r\n    Collection<String> collection1 = Arrays.asList(\"Dog\", \"Cat\");\r\n    Collection<String> collection2 = Arrays.asList(\"Bird\", \"Cow\", \"Moose\");\r\n\r\n    Collection<String> result = Stream.concat(\r\n      collection1.stream(), collection2.stream())\r\n      .collect(Collectors.toList());\r\n\r\n    assertTrue(result.equals(Arrays.asList(\"Dog\", \"Cat\", \"Bird\", \"Cow\", \"Moose\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenJoiningTwoCollectionsWithFilter_thenJoined() {\r\n    Collection<String> collection1 = Arrays.asList(\"Dog\", \"Cat\");\r\n    Collection<String> collection2 = Arrays.asList(\"Bird\", \"Cow\", \"Moose\");\r\n\r\n    Collection<String> result = Stream.concat(\r\n      collection1.stream(), collection2.stream())\r\n      .filter(e -> e.length() == 3)\r\n      .collect(Collectors.toList());\r\n\r\n    assertTrue(result.equals(Arrays.asList(\"Dog\", \"Cat\", \"Cow\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertArrayToString_thenConverted() {\r\n    String[] animals = new String[] { \"Dog\", \"Cat\", \"Bird\", \"Cow\" };\r\n    String result = Arrays.stream(animals).collect(Collectors.joining(\", \"));\r\n\r\n    assertEquals(result, \"Dog, Cat, Bird, Cow\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertCollectionToString_thenConverted() {\r\n    Collection<String> animals = Arrays.asList(\"Dog\", \"Cat\", \"Bird\", \"Cow\");\r\n    String result = animals.stream().collect(Collectors.joining(\", \"));\r\n\r\n    assertEquals(result, \"Dog, Cat, Bird, Cow\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertMapToString_thenConverted() {\r\n    Map<Integer, String> animals = new HashMap<>();\r\n    animals.put(1, \"Dog\");\r\n    animals.put(2, \"Cat\");\r\n    animals.put(3, \"Cow\");\r\n\r\n    String result = animals.entrySet().stream()\r\n      .map(entry -> entry.getKey() + \" = \" + entry.getValue())\r\n      .collect(Collectors.joining(\", \"));\r\n\r\n    assertEquals(result, \"1 = Dog, 2 = Cat, 3 = Cow\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertNestedCollectionToString_thenConverted() {\r\n    Collection<List<String>> nested = new ArrayList<>();\r\n    nested.add(Arrays.asList(\"Dog\", \"Cat\"));\r\n    nested.add(Arrays.asList(\"Cow\", \"Pig\"));\r\n\r\n    String result = nested.stream().map(\r\n      nextList -> nextList.stream()\r\n        .collect(Collectors.joining(\"-\")))\r\n      .collect(Collectors.joining(\"; \"));\r\n\r\n    assertEquals(result, \"Dog-Cat; Cow-Pig\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertCollectionToStringAndSkipNull_thenConverted() {\r\n    Collection<String> animals = Arrays.asList(\"Dog\", \"Cat\", null, \"Moose\");\r\n    String result = animals.stream()\r\n      .filter(Objects::nonNull)\r\n      .collect(Collectors.joining(\", \"));\r\n\r\n    assertEquals(result, \"Dog, Cat, Moose\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenSplitCollectionHalf_thenConverted() {\r\n    Collection<String> animals = Arrays.asList(\r\n        \"Dog\", \"Cat\", \"Cow\", \"Bird\", \"Moose\", \"Pig\");\r\n    Collection<String> result1 = new ArrayList<>();\r\n    Collection<String> result2 = new ArrayList<>();\r\n    AtomicInteger count = new AtomicInteger();\r\n    int midpoint = Math.round(animals.size() / 2);\r\n\r\n    animals.forEach(next -> {\r\n        int index = count.getAndIncrement();\r\n        if (index < midpoint) {\r\n            result1.add(next);\r\n        } else {\r\n            result2.add(next);\r\n        }\r\n    });\r\n\r\n    assertTrue(result1.equals(Arrays.asList(\"Dog\", \"Cat\", \"Cow\")));\r\n    assertTrue(result2.equals(Arrays.asList(\"Bird\", \"Moose\", \"Pig\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSplitArrayByWordLength_thenConverted() {\r\n    String[] animals = new String[] { \"Dog\", \"Cat\", \"Bird\", \"Cow\", \"Pig\", \"Moose\"};\r\n    Map<Integer, List<String>> result = Arrays.stream(animals)\r\n      .collect(Collectors.groupingBy(String::length));\r\n\r\n    assertTrue(result.get(3).equals(Arrays.asList(\"Dog\", \"Cat\", \"Cow\", \"Pig\")));\r\n    assertTrue(result.get(4).equals(Arrays.asList(\"Bird\")));\r\n    assertTrue(result.get(5).equals(Arrays.asList(\"Moose\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertStringToArray_thenConverted() {\r\n    String animals = \"Dog, Cat, Bird, Cow\";\r\n    String[] result = animals.split(\", \");\r\n\r\n    assertArrayEquals(result, new String[] { \"Dog\", \"Cat\", \"Bird\", \"Cow\" });\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertStringToCollection_thenConverted() {\r\n    String animals = \"Dog, Cat, Bird, Cow\";\r\n    Collection<String> result = Arrays.asList(animals.split(\", \"));\r\n\r\n    assertTrue(result.equals(Arrays.asList(\"Dog\", \"Cat\", \"Bird\", \"Cow\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertStringToMap_thenConverted() {\r\n    String animals = \"1 = Dog, 2 = Cat, 3 = Bird\";\r\n\r\n    Map<Integer, String> result = Arrays.stream(\r\n      animals.split(\", \")).map(next -> next.split(\" = \"))\r\n      .collect(Collectors.toMap(entry -> Integer.parseInt(entry[0]), entry -> entry[1]));\r\n\r\n    assertEquals(result.get(1), \"Dog\");\r\n    assertEquals(result.get(2), \"Cat\");\r\n    assertEquals(result.get(3), \"Bird\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertCollectionToStringMultipleSeparators_thenConverted() {\r\n    String animals = \"Dog. , Cat, Bird. Cow\";\r\n\r\n    Collection<String> result = Arrays.stream(animals.split(\"[,|.]\"))\r\n      .map(String::trim)\r\n      .filter(next -> !next.isEmpty())\r\n      .collect(Collectors.toList());\r\n\r\n    assertTrue(result.equals(Arrays.asList(\"Dog\", \"Cat\", \"Bird\", \"Cow\")));\r\n}\r\n```"]