["```\r\nMap<String, String> aNewMap = Maps.newHashMap();\r\n```","```\r\n@Test\r\npublic void whenCreatingImmutableMap_thenCorrect() {\r\n    Map<String, Integer> salary = ImmutableMap.<String, Integer> builder()\r\n      .put(\"John\", 1000)\r\n      .put(\"Jane\", 1500)\r\n      .put(\"Adam\", 2000)\r\n      .put(\"Tom\", 2000)\r\n      .build();\r\n\r\n    assertEquals(1000, salary.get(\"John\").intValue());\r\n    assertEquals(2000, salary.get(\"Tom\").intValue());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingSortedMap_thenKeysAreSorted() {\r\n    ImmutableSortedMap<String, Integer> salary = new ImmutableSortedMap\r\n      .Builder<String, Integer>(Ordering.natural())\r\n      .put(\"John\", 1000)\r\n      .put(\"Jane\", 1500)\r\n      .put(\"Adam\", 2000)\r\n      .put(\"Tom\", 2000)\r\n      .build();\r\n\r\n    assertEquals(\"Adam\", salary.firstKey());\r\n    assertEquals(2000, salary.lastEntry().getValue().intValue());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateBiMap_thenCreated() {\r\n    BiMap<String, Integer> words = HashBiMap.create();\r\n    words.put(\"First\", 1);\r\n    words.put(\"Second\", 2);\r\n    words.put(\"Third\", 3);\r\n\r\n    assertEquals(2, words.get(\"Second\").intValue());\r\n    assertEquals(\"Third\", words.inverse().get(3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateMultimap_thenCreated() {\r\n    Multimap<String, String> multimap = ArrayListMultimap.create();\r\n    multimap.put(\"fruit\", \"apple\");\r\n    multimap.put(\"fruit\", \"banana\");\r\n    multimap.put(\"pet\", \"cat\");\r\n    multimap.put(\"pet\", \"dog\");\r\n\r\n    assertThat(multimap.get(\"fruit\"), containsInAnyOrder(\"apple\", \"banana\"));\r\n    assertThat(multimap.get(\"pet\"), containsInAnyOrder(\"cat\", \"dog\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingTable_thenCorrect() {\r\n    Table<String,String,Integer> distance = HashBasedTable.create();\r\n    distance.put(\"London\", \"Paris\", 340);\r\n    distance.put(\"New York\", \"Los Angeles\", 3940);\r\n    distance.put(\"London\", \"New York\", 5576);\r\n\r\n    assertEquals(3940, distance.get(\"New York\", \"Los Angeles\").intValue());\r\n    assertThat(distance.columnKeySet(), \r\n      containsInAnyOrder(\"Paris\", \"New York\", \"Los Angeles\"));\r\n    assertThat(distance.rowKeySet(), containsInAnyOrder(\"London\", \"New York\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenTransposingTable_thenCorrect() {\r\n    Table<String,String,Integer> distance = HashBasedTable.create();\r\n    distance.put(\"London\", \"Paris\", 340);\r\n    distance.put(\"New York\", \"Los Angeles\", 3940);\r\n    distance.put(\"London\", \"New York\", 5576);\r\n\r\n    Table<String, String, Integer> transposed = Tables.transpose(distance);\r\n\r\n    assertThat(transposed.rowKeySet(), \r\n      containsInAnyOrder(\"Paris\", \"New York\", \"Los Angeles\"));\r\n    assertThat(transposed.columnKeySet(), containsInAnyOrder(\"London\", \"New York\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingClassToInstanceMap_thenCorrect() {\r\n    ClassToInstanceMap<Number> numbers = MutableClassToInstanceMap.create();\r\n    numbers.putInstance(Integer.class, 1);\r\n    numbers.putInstance(Double.class, 1.5);\r\n\r\n    assertEquals(1, numbers.get(Integer.class));\r\n    assertEquals(1.5, numbers.get(Double.class));\r\n}\r\n```","```\r\n@Test\r\npublic void whenGroupingListsUsingMultimap_thenGrouped() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Adam\", \"Tom\");\r\n    Function<String,Integer> func = new Function<String,Integer>(){\r\n        public Integer apply(String input) {\r\n            return input.length();\r\n        }\r\n    };\r\n    Multimap<Integer, String> groups = Multimaps.index(names, func);\r\n\r\n    assertThat(groups.get(3), containsInAnyOrder(\"Tom\"));\r\n    assertThat(groups.get(4), containsInAnyOrder(\"John\", \"Adam\"));\r\n}\r\n```"]