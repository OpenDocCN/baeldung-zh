["```\r\n<dependency>\r\n    <groupId>com.github.vladimir-bukhtoyarov</groupId>\r\n    <artifactId>bucket4j-core</artifactId>\r\n    <version>4.10.0</version>\r\n</dependency>\r\n```","```\r\nRefill refill = Refill.intervally(10, Duration.ofMinutes(1));\r\nBandwidth limit = Bandwidth.classic(10, refill);\r\nBucket bucket = Bucket4j.builder()\r\n    .addLimit(limit)\r\n    .build();\r\n\r\nfor (int i = 1; i <= 10; i++) {\r\n    assertTrue(bucket.tryConsume(1));\r\n}\r\nassertFalse(bucket.tryConsume(1)); \r\n```","```\r\nBandwidth limit = Bandwidth.classic(1, Refill.intervally(1, Duration.ofSeconds(2)));\r\nBucket bucket = Bucket4j.builder()\r\n    .addLimit(limit)\r\n    .build();\r\nassertTrue(bucket.tryConsume(1));     // first request\r\nExecutors.newScheduledThreadPool(1)   // schedule another request for 2 seconds later\r\n    .schedule(() -> assertTrue(bucket.tryConsume(1)), 2, TimeUnit.SECONDS); \r\n```","```\r\nBucket bucket = Bucket4j.builder()\r\n    .addLimit(Bandwidth.classic(10, Refill.intervally(10, Duration.ofMinutes(1))))\r\n    .addLimit(Bandwidth.classic(5, Refill.intervally(5, Duration.ofSeconds(20))))\r\n    .build();\r\n\r\nfor (int i = 1; i <= 5; i++) {\r\n    assertTrue(bucket.tryConsume(1));\r\n}\r\nassertFalse(bucket.tryConsume(1)); \r\n```","```\r\n@RestController\r\nclass AreaCalculationController {\r\n\r\n    @PostMapping(value = \"/api/v1/area/rectangle\")\r\n    public ResponseEntity<AreaV1> rectangle(@RequestBody RectangleDimensionsV1 dimensions) {\r\n        return ResponseEntity.ok(new AreaV1(\"rectangle\", dimensions.getLength() * dimensions.getWidth()));\r\n    }\r\n} \r\n```","```\r\n$ curl -X POST http://localhost:9001/api/v1/area/rectangle \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -d '{ \"length\": 10, \"width\": 12 }'\r\n\r\n{ \"shape\":\"rectangle\",\"area\":120.0 } \r\n```","```\r\n@RestController\r\nclass AreaCalculationController {\r\n\r\n    private final Bucket bucket;\r\n\r\n    public AreaCalculationController() {\r\n        Bandwidth limit = Bandwidth.classic(20, Refill.greedy(20, Duration.ofMinutes(1)));\r\n        this.bucket = Bucket4j.builder()\r\n            .addLimit(limit)\r\n            .build();\r\n    }\r\n    //..\r\n} \r\n```","```\r\npublic ResponseEntity<AreaV1> rectangle(@RequestBody RectangleDimensionsV1 dimensions) {\r\n    if (bucket.tryConsume(1)) {\r\n        return ResponseEntity.ok(new AreaV1(\"rectangle\", dimensions.getLength() * dimensions.getWidth()));\r\n    }\r\n\r\n    return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).build();\r\n} \r\n```","```\r\n# 21st request within 1 minute\r\n$ curl -v -X POST http://localhost:9001/api/v1/area/rectangle \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -d '{ \"length\": 10, \"width\": 12 }'\r\n\r\n< HTTP/1.1 429 \r\n```","```\r\nenum PricingPlan {\r\n    FREE {\r\n        Bandwidth getLimit() {\r\n            return Bandwidth.classic(20, Refill.intervally(20, Duration.ofHours(1)));\r\n        }\r\n    },\r\n    BASIC {\r\n        Bandwidth getLimit() {\r\n            return Bandwidth.classic(40, Refill.intervally(40, Duration.ofHours(1)));\r\n        }\r\n    },\r\n    PROFESSIONAL {\r\n        Bandwidth getLimit() {\r\n            return Bandwidth.classic(100, Refill.intervally(100, Duration.ofHours(1)));\r\n        }\r\n    };\r\n    //..\r\n} \r\n```","```\r\nenum PricingPlan {\r\n\r\n    static PricingPlan resolvePlanFromApiKey(String apiKey) {\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n            return FREE;\r\n        } else if (apiKey.startsWith(\"PX001-\")) {\r\n            return PROFESSIONAL;\r\n        } else if (apiKey.startsWith(\"BX001-\")) {\r\n            return BASIC;\r\n        }\r\n        return FREE;\r\n    }\r\n    //..\r\n} \r\n```","```\r\nclass PricingPlanService {\r\n\r\n    private final Map<String, Bucket> cache = new ConcurrentHashMap<>();\r\n\r\n    public Bucket resolveBucket(String apiKey) {\r\n        return cache.computeIfAbsent(apiKey, this::newBucket);\r\n    }\r\n\r\n    private Bucket newBucket(String apiKey) {\r\n        PricingPlan pricingPlan = PricingPlan.resolvePlanFromApiKey(apiKey);\r\n        return Bucket4j.builder()\r\n            .addLimit(pricingPlan.getLimit())\r\n            .build();\r\n    }\r\n} \r\n```","```\r\n@RestController\r\nclass AreaCalculationController {\r\n\r\n    private PricingPlanService pricingPlanService;\r\n\r\n    public ResponseEntity<AreaV1> rectangle(@RequestHeader(value = \"X-api-key\") String apiKey,\r\n        @RequestBody RectangleDimensionsV1 dimensions) {\r\n\r\n        Bucket bucket = pricingPlanService.resolveBucket(apiKey);\r\n        ConsumptionProbe probe = bucket.tryConsumeAndReturnRemaining(1);\r\n        if (probe.isConsumed()) {\r\n            return ResponseEntity.ok()\r\n                .header(\"X-Rate-Limit-Remaining\", Long.toString(probe.getRemainingTokens()))\r\n                .body(new AreaV1(\"rectangle\", dimensions.getLength() * dimensions.getWidth()));\r\n        }\r\n\r\n        long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\r\n        return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS)\r\n            .header(\"X-Rate-Limit-Retry-After-Seconds\", String.valueOf(waitForRefill))\r\n            .build();\r\n    }\r\n} \r\n```","```\r\n## successful request\r\n$ curl -v -X POST http://localhost:9001/api/v1/area/rectangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"length\": 10, \"width\": 12 }'\r\n\r\n< HTTP/1.1 200\r\n< X-Rate-Limit-Remaining: 11\r\n{\"shape\":\"rectangle\",\"area\":120.0}\r\n\r\n## rejected request\r\n$ curl -v -X POST http://localhost:9001/api/v1/area/rectangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"length\": 10, \"width\": 12 }'\r\n\r\n< HTTP/1.1 429\r\n< X-Rate-Limit-Retry-After-Seconds: 583 \r\n```","```\r\n@PostMapping(value = \"/triangle\")\r\npublic ResponseEntity<AreaV1> triangle(@RequestBody TriangleDimensionsV1 dimensions) {\r\n    return ResponseEntity.ok(new AreaV1(\"triangle\", 0.5d * dimensions.getHeight() * dimensions.getBase()));\r\n} \r\n```","```\r\npublic class RateLimitInterceptor implements HandlerInterceptor {\r\n\r\n    private PricingPlanService pricingPlanService;\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) \r\n      throws Exception {\r\n        String apiKey = request.getHeader(\"X-api-key\");\r\n        if (apiKey == null || apiKey.isEmpty()) {\r\n            response.sendError(HttpStatus.BAD_REQUEST.value(), \"Missing Header: X-api-key\");\r\n            return false;\r\n        }\r\n\r\n        Bucket tokenBucket = pricingPlanService.resolveBucket(apiKey);\r\n        ConsumptionProbe probe = tokenBucket.tryConsumeAndReturnRemaining(1);\r\n        if (probe.isConsumed()) {\r\n            response.addHeader(\"X-Rate-Limit-Remaining\", String.valueOf(probe.getRemainingTokens()));\r\n            return true;\r\n        } else {\r\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\r\n            response.addHeader(\"X-Rate-Limit-Retry-After-Seconds\", String.valueOf(waitForRefill));\r\n            response.sendError(HttpStatus.TOO_MANY_REQUESTS.value(),\r\n              \"You have exhausted your API Request Quota\"); \r\n            return false;\r\n        }\r\n    }\r\n} \r\n```","```\r\npublic class AppConfig implements WebMvcConfigurer {\r\n\r\n    private RateLimitInterceptor interceptor;\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(interceptor)\r\n            .addPathPatterns(\"/api/v1/area/**\");\r\n    }\r\n} \r\n```","```\r\n## successful request\r\n$ curl -v -X POST http://localhost:9001/api/v1/area/triangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"height\": 15, \"base\": 8 }'\r\n\r\n< HTTP/1.1 200\r\n< X-Rate-Limit-Remaining: 9\r\n{\"shape\":\"triangle\",\"area\":60.0}\r\n\r\n## rejected request\r\n$ curl -v -X POST http://localhost:9001/api/v1/area/triangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"height\": 15, \"base\": 8 }'\r\n\r\n< HTTP/1.1 429\r\n< X-Rate-Limit-Retry-After-Seconds: 299\r\n{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" } \r\n```","```\r\n<dependency>\r\n    <groupId>com.giffing.bucket4j.spring.boot.starter</groupId>\r\n    <artifactId>bucket4j-spring-boot-starter</artifactId>\r\n    <version>0.2.0</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-cache</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>javax.cache</groupId>\r\n    <artifactId>cache-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.ben-manes.caffeine</groupId>\r\n    <artifactId>caffeine</artifactId>\r\n    <version>2.8.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.ben-manes.caffeine</groupId>\r\n    <artifactId>jcache</artifactId>\r\n    <version>2.8.2</version>\r\n</dependency> \r\n```","```\r\nspring:\r\n  cache:\r\n    cache-names:\r\n    - rate-limit-buckets\r\n    caffeine:\r\n      spec: maximumSize=100000,expireAfterAccess=3600s \r\n```","```\r\nbucket4j:\r\n  enabled: true\r\n  filters:\r\n  - cache-name: rate-limit-buckets\r\n    url: /api/v1/area.*\r\n    strategy: first\r\n    http-response-body: \"{ \\\"status\\\": 429, \\\"error\\\": \\\"Too Many Requests\\\", \\\"message\\\": \\\"You have exhausted your API Request Quota\\\" }\"\r\n    rate-limits:\r\n    - expression: \"getHeader('X-api-key')\"\r\n      execute-condition: \"getHeader('X-api-key').startsWith('PX001-')\"\r\n      bandwidths:\r\n      - capacity: 100\r\n        time: 1\r\n        unit: hours\r\n    - expression: \"getHeader('X-api-key')\"\r\n      execute-condition: \"getHeader('X-api-key').startsWith('BX001-')\"\r\n      bandwidths:\r\n      - capacity: 40\r\n        time: 1\r\n        unit: hours\r\n    - expression: \"getHeader('X-api-key')\"\r\n      bandwidths:\r\n      - capacity: 20\r\n        time: 1\r\n        unit: hours \r\n```","```\r\n## successful request\r\n$ curl -v -X POST http://localhost:9000/api/v1/area/triangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"height\": 20, \"base\": 7 }'\r\n\r\n< HTTP/1.1 200\r\n< X-Rate-Limit-Remaining: 7\r\n{\"shape\":\"triangle\",\"area\":70.0}\r\n\r\n## rejected request\r\n$ curl -v -X POST http://localhost:9000/api/v1/area/triangle \\\r\n    -H \"Content-Type: application/json\" -H \"X-api-key:FX001-99999\" \\\r\n    -d '{ \"height\": 7, \"base\": 20 }'\r\n\r\n< HTTP/1.1 429\r\n< X-Rate-Limit-Retry-After-Seconds: 212\r\n{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" } \r\n```"]