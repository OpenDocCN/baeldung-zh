["```\r\nFlowable<Integer> integerFlowable = Flowable.just(1, 2, 3, 4);\r\n```","```\r\nObservable<Integer> integerObservable = Observable.just(1, 2, 3);\r\nFlowable<Integer> integerFlowable = integerObservable\r\n  .toFlowable(BackpressureStrategy.BUFFER);\r\n```","```\r\nFlowableOnSubscribe<Integer> flowableOnSubscribe\r\n = flowable -> flowable.onNext(1);\r\nFlowable<Integer> integerFlowable = Flowable\r\n  .create(flowableOnSubscribe, BackpressureStrategy.BUFFER);\r\n```","```\r\npublic void thenAllValuesAreBufferedAndReceived() {\r\n    List testList = IntStream.range(0, 100000)\r\n      .boxed()\r\n      .collect(Collectors.toList());\r\n\r\n    Observable observable = Observable.fromIterable(testList);\r\n    TestSubscriber<Integer> testSubscriber = observable\r\n      .toFlowable(BackpressureStrategy.BUFFER)\r\n      .observeOn(Schedulers.computation()).test();\r\n\r\n    testSubscriber.awaitTerminalEvent();\r\n\r\n    List<Integer> receivedInts = testSubscriber.getEvents()\r\n      .get(0)\r\n      .stream()\r\n      .mapToInt(object -> (int) object)\r\n      .boxed()\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(testList, receivedInts);\r\n}\r\n```","```\r\npublic void whenDropStrategyUsed_thenOnBackpressureDropped() {\r\n\r\n    Observable observable = Observable.fromIterable(testList);\r\n    TestSubscriber<Integer> testSubscriber = observable\r\n      .toFlowable(BackpressureStrategy.DROP)\r\n      .observeOn(Schedulers.computation())\r\n      .test();\r\n    testSubscriber.awaitTerminalEvent();\r\n    List<Integer> receivedInts = testSubscriber.getEvents()\r\n      .get(0)\r\n      .stream()\r\n      .mapToInt(object -> (int) object)\r\n      .boxed()\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(receivedInts.size() < testList.size());\r\n    assertThat(!receivedInts.contains(100000));\r\n }\r\n```","```\r\npublic void whenLatestStrategyUsed_thenTheLastElementReceived() {\r\n\r\n    Observable observable = Observable.fromIterable(testList);\r\n    TestSubscriber<Integer> testSubscriber = observable\r\n      .toFlowable(BackpressureStrategy.LATEST)\r\n      .observeOn(Schedulers.computation())\r\n      .test();\r\n\r\n    testSubscriber.awaitTerminalEvent();\r\n    List<Integer> receivedInts = testSubscriber.getEvents()\r\n      .get(0)\r\n      .stream()\r\n      .mapToInt(object -> (int) object)\r\n      .boxed()\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(receivedInts.size() < testList.size());\r\n    assertThat(receivedInts.contains(100000));\r\n }\r\n```","```\r\npublic void whenErrorStrategyUsed_thenExceptionIsThrown() {\r\n    Observable observable = Observable.range(1, 100000);\r\n    TestSubscriber subscriber = observable\r\n      .toFlowable(BackpressureStrategy.ERROR)\r\n      .observeOn(Schedulers.computation())\r\n      .test();\r\n\r\n    subscriber.awaitTerminalEvent();\r\n    subscriber.assertError(MissingBackpressureException.class);\r\n}\r\n```","```\r\npublic void whenMissingStrategyUsed_thenException() {\r\n    Observable observable = Observable.range(1, 100000);\r\n    TestSubscriber subscriber = observable\r\n      .toFlowable(BackpressureStrategy.MISSING)\r\n      .observeOn(Schedulers.computation())\r\n      .test();\r\n    subscriber.awaitTerminalEvent();\r\n    subscriber.assertError(MissingBackpressureException.class);\r\n}\r\n```"]