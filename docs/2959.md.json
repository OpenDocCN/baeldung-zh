["```\r\n@Test\r\npublic void\r\n  whenInvalidPOSTIsSentToValidURIOfResource_thenAllowHeaderListsTheAllowedActions(){\r\n    // Given\r\n    String uriOfExistingResource = restTemplate.createResource();\r\n\r\n    // When\r\n    Response res = givenAuth().post(uriOfExistingResource);\r\n\r\n    // Then\r\n    String allowHeader = res.getHeader(HttpHeaders.ALLOW);\r\n    assertThat( allowHeader, AnyOf.anyOf(\r\n      containsString(\"GET\"), containsString(\"PUT\"), containsString(\"DELETE\") ) );\r\n}\r\n```","```\r\n@Test\r\npublic void whenResourceIsCreated_thenUriOfTheNewlyCreatedResourceIsDiscoverable() {\r\n    // When\r\n    Foo newResource = new Foo(randomAlphabetic(6));\r\n    Response createResp = givenAuth().contentType(\"application/json\")\r\n      .body(unpersistedResource).post(getFooURL());\r\n    String uriOfNewResource= createResp.getHeader(HttpHeaders.LOCATION);\r\n\r\n    // Then\r\n    Response response = givenAuth().header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)\r\n      .get(uriOfNewResource);\r\n\r\n    Foo resourceFromServer = response.body().as(Foo.class);\r\n    assertThat(newResource, equalTo(resourceFromServer));\r\n}\r\n```","```\r\n@Test\r\npublic void whenResourceIsRetrieved_thenUriToGetAllResourcesIsDiscoverable() {\r\n    // Given\r\n    String uriOfExistingResource = createAsUri();\r\n\r\n    // When\r\n    Response getResponse = givenAuth().get(uriOfExistingResource);\r\n\r\n    // Then\r\n    String uriToAllResources = HTTPLinkHeaderUtil\r\n      .extractURIByRel(getResponse.getHeader(\"Link\"), \"collection\");\r\n\r\n    Response getAllResponse = givenAuth().get(uriToAllResources);\r\n    assertThat(getAllResponse.getStatusCode(), is(200));\r\n}\r\n```"]