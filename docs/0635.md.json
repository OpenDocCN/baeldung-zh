["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.junit.jupiter</groupId>\r\n        <artifactId>junit-jupiter-api</artifactId>\r\n        <version>5.9.1</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.mockito</groupId>\r\n        <artifactId>mockito-core</artifactId>\r\n        <version>4.8.1</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\npublic class Task {\r\n    private String name;\r\n\r\n    // getters, setters and constructor\r\n} \r\n```","```\r\npublic class TaskDAO {\r\n    public void save(Task task) throws Exception {\r\n        // save the task\r\n    }\r\n} \r\n```","```\r\npublic class TaskService {\r\n\r\n    private final TaskDAO taskDAO = new TaskDAO();\r\n\r\n    public void saveTask(Task task) {\r\n        try {\r\n            taskDAO.save(task);\r\n        } catch (Exception e) {\r\n            System.exit(1);\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Test\r\nvoid givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled() throws Exception {\r\n    Task task = new Task(\"test\");\r\n    TaskDAO taskDAO = mock(TaskDAO.class);\r\n    TaskService service = new TaskService(taskDAO);\r\n    doThrow(new NullPointerException()).when(taskDAO).save(task);\r\n    service.saveTask(task);\r\n} \r\n```","```\r\nclass NoExitSecurityManager extends SecurityManager {\r\n    @Override\r\n    public void checkPermission(Permission perm) {\r\n    }\r\n\r\n    @Override\r\n    public void checkExit(int status) {\r\n        super.checkExit(status);\r\n        throw new RuntimeException(String.valueOf(status));\r\n    }\r\n} \r\n```","```\r\n@BeforeEach\r\nvoid setUp() {\r\n    System.setSecurityManager(new NoExitSecurityManager());\r\n} \r\n```","```\r\n@Test\r\nvoid givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled() throws Exception {\r\n    Task task = new Task(\"test\");\r\n    TaskDAO taskDAO = mock(TaskDAO.class);\r\n    TaskService service = new TaskService(taskDAO);\r\n    try {\r\n        doThrow(new NullPointerException()).when(taskDAO).save(task);\r\n        service.saveTask(task);\r\n    } catch (RuntimeException e) {\r\n         Assertions.assertEquals(\"1\", e.getMessage());\r\n    }\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>com.github.stefanbirkner</groupId>\r\n    <artifactId>system-lambda</artifactId>\r\n    <version>1.2.1</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@Test\r\nvoid givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled() throws Exception {\r\n    int statusCode = catchSystemExit(() -> {\r\n        Task task = new Task(\"test\");\r\n        TaskDAO taskDAO = mock(TaskDAO.class);\r\n        TaskService service = new TaskService(taskDAO);\r\n        doThrow(new NullPointerException()).when(taskDAO).save(task);\r\n        service.saveTask(task);\r\n    });\r\n    Assertions.assertEquals(1, statusCode);\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.jmockit</groupId>\r\n    <artifactId>jmockit</artifactId>\r\n    <version>1.49</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n<plugins>\r\n    <plugin>\r\n        <artifactId>maven-surefire-plugin</artifactId>\r\n        <version>2.22.2</version> \r\n        <configuration>\r\n           <argLine>\r\n               -javaagent:\"${settings.localRepository}\"/org/jmockit/jmockit/1.49/jmockit-1.49.jar\r\n           </argLine>\r\n        </configuration>\r\n    </plugin>\r\n</plugins> \r\n```","```\r\n@Test\r\npublic void givenDAOThrowsException_whenSaveTaskIsCalled_thenSystemExitIsCalled() throws Exception {\r\n    new MockUp<System>() {\r\n        @Mock\r\n        public void exit(int value) {\r\n            throw new RuntimeException(String.valueOf(value));\r\n        }\r\n    };\r\n\r\n    Task task = new Task(\"test\");\r\n    TaskDAO taskDAO = mock(TaskDAO.class);\r\n    TaskService service = new TaskService(taskDAO);\r\n    try {\r\n        doThrow(new NullPointerException()).when(taskDAO).save(task);\r\n        service.saveTask(task);\r\n    } catch (RuntimeException e) {\r\n        Assertions.assertEquals(\"1\", e.getMessage());\r\n    }\r\n} \r\n```"]