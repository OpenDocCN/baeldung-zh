["```\r\npublic enum BasicStringOperation {\r\n    TRIM(\"Removing leading and trailing spaces.\"),\r\n    TO_UPPER(\"Changing all characters into upper case.\"),\r\n    REVERSE(\"Reversing the given string.\");\r\n\r\n    private String description;\r\n\r\n    // constructor and getter\r\n}\r\n```","```\r\npublic enum ExtendedStringOperation extends BasicStringOperation {\r\n    MD5_ENCODE(\"Encoding the given string using the MD5 algorithm.\"),\r\n    BASE64_ENCODE(\"Encoding the given string using the BASE64 algorithm.\");\r\n\r\n    private String description;\r\n\r\n    // constructor and getter\r\n}\r\n```","```\r\nCannot inherit from enum BasicStringOperation\r\n```","```\r\n$ javap BasicStringOperation  \r\npublic final class com.baeldung.enums.extendenum.BasicStringOperation \r\n    extends java.lang.Enum<com.baeldung.enums.extendenum.BasicStringOperation> {\r\n  public static final com.baeldung.enums.extendenum.BasicStringOperation TRIM;\r\n  public static final com.baeldung.enums.extendenum.BasicStringOperation TO_UPPER;\r\n  public static final com.baeldung.enums.extendenum.BasicStringOperation REVERSE;\r\n ...\r\n} \r\n```","```\r\npublic interface StringOperation {\r\n    String getDescription();\r\n} \r\n```","```\r\npublic enum BasicStringOperation implements StringOperation {\r\n    TRIM(\"Removing leading and trailing spaces.\"),\r\n    TO_UPPER(\"Changing all characters into upper case.\"),\r\n    REVERSE(\"Reversing the given string.\");\r\n\r\n    private String description;\r\n    // constructor and getter override\r\n}\r\n\r\npublic enum ExtendedStringOperation implements StringOperation {\r\n    MD5_ENCODE(\"Encoding the given string using the MD5 algorithm.\"),\r\n    BASE64_ENCODE(\"Encoding the given string using the BASE64 algorithm.\");\r\n\r\n    private String description;\r\n\r\n    // constructor and getter override\r\n} \r\n```","```\r\npublic class Application {\r\n    public String getOperationDescription(BasicStringOperation stringOperation) {\r\n        return stringOperation.getDescription();\r\n    }\r\n} \r\n```","```\r\npublic String getOperationDescription(StringOperation stringOperation) {\r\n    return stringOperation.getDescription();\r\n}\r\n```","```\r\npublic class Application {\r\n    public String applyOperation(StringOperation operation, String input) {\r\n        return operation.apply(input);\r\n    }\r\n    //...\r\n} \r\n```","```\r\npublic interface StringOperation {\r\n    String getDescription();\r\n    String apply(String input);\r\n} \r\n```","```\r\npublic enum BasicStringOperation implements StringOperation {\r\n    TRIM(\"Removing leading and trailing spaces.\") {\r\n        @Override\r\n        public String apply(String input) { \r\n            return input.trim(); \r\n        }\r\n    },\r\n    TO_UPPER(\"Changing all characters into upper case.\") {\r\n        @Override\r\n        public String apply(String input) {\r\n            return input.toUpperCase();\r\n        }\r\n    },\r\n    REVERSE(\"Reversing the given string.\") {\r\n        @Override\r\n        public String apply(String input) {\r\n            return new StringBuilder(input).reverse().toString();\r\n        }\r\n    };\r\n\r\n    //...\r\n}\r\n\r\npublic enum ExtendedStringOperation implements StringOperation {\r\n    MD5_ENCODE(\"Encoding the given string using the MD5 algorithm.\") {\r\n        @Override\r\n        public String apply(String input) {\r\n            return DigestUtils.md5Hex(input);\r\n        }\r\n    },\r\n    BASE64_ENCODE(\"Encoding the given string using the BASE64 algorithm.\") {\r\n        @Override\r\n        public String apply(String input) {\r\n            return new String(new Base64().encode(input.getBytes()));\r\n        }\r\n    };\r\n\r\n    //...\r\n} \r\n```","```\r\n@Test\r\npublic void givenAStringAndOperation_whenApplyOperation_thenGetExpectedResult() {\r\n    String input = \" hello\";\r\n    String expectedToUpper = \" HELLO\";\r\n    String expectedReverse = \"olleh \";\r\n    String expectedTrim = \"hello\";\r\n    String expectedBase64 = \"IGhlbGxv\";\r\n    String expectedMd5 = \"292a5af68d31c10e31ad449bd8f51263\";\r\n    assertEquals(expectedTrim, app.applyOperation(BasicStringOperation.TRIM, input));\r\n    assertEquals(expectedToUpper, app.applyOperation(BasicStringOperation.TO_UPPER, input));\r\n    assertEquals(expectedReverse, app.applyOperation(BasicStringOperation.REVERSE, input));\r\n    assertEquals(expectedBase64, app.applyOperation(ExtendedStringOperation.BASE64_ENCODE, input));\r\n    assertEquals(expectedMd5, app.applyOperation(ExtendedStringOperation.MD5_ENCODE, input));\r\n} \r\n```","```\r\npublic enum ImmutableOperation {\r\n    REMOVE_WHITESPACES, TO_LOWER, INVERT_CASE\r\n} \r\n```","```\r\npublic String applyImmutableOperation(ImmutableOperation operation, String input) {...}\r\n```","```\r\npublic interface Operator {\r\n    String apply(String input);\r\n} \r\n```","```\r\npublic class Application {\r\n    private static final Map<ImmutableOperation, Operator> OPERATION_MAP;\r\n\r\n    static {\r\n        OPERATION_MAP = new EnumMap<>(ImmutableOperation.class);\r\n        OPERATION_MAP.put(ImmutableOperation.TO_LOWER, String::toLowerCase);\r\n        OPERATION_MAP.put(ImmutableOperation.INVERT_CASE, StringUtils::swapCase);\r\n        OPERATION_MAP.put(ImmutableOperation.REMOVE_WHITESPACES, input -> input.replaceAll(\"\\\\s\", \"\"));\r\n    }\r\n\r\n    public String applyImmutableOperation(ImmutableOperation operation, String input) {\r\n        return operationMap.get(operation).apply(input);\r\n    }\r\n```","```\r\n@Test\r\npublic void givenAStringAndImmutableOperation_whenApplyOperation_thenGetExpectedResult() {\r\n    String input = \" He ll O \";\r\n    String expectedToLower = \" he ll o \";\r\n    String expectedRmWhitespace = \"HellO\";\r\n    String expectedInvertCase = \" hE LL o \";\r\n    assertEquals(expectedToLower, app.applyImmutableOperation(ImmutableOperation.TO_LOWER, input));\r\n    assertEquals(expectedRmWhitespace, app.applyImmutableOperation(ImmutableOperation.REMOVE_WHITESPACES, input));\r\n    assertEquals(expectedInvertCase, app.applyImmutableOperation(ImmutableOperation.INVERT_CASE, input));\r\n} \r\n```","```\r\nstatic {\r\n    OPERATION_MAP = new EnumMap<>(ImmutableOperation.class);\r\n    OPERATION_MAP.put(ImmutableOperation.TO_LOWER, String::toLowerCase);\r\n    OPERATION_MAP.put(ImmutableOperation.INVERT_CASE, StringUtils::swapCase);\r\n    // ImmutableOperation.REMOVE_WHITESPACES is not mapped\r\n\r\n    if (Arrays.stream(ImmutableOperation.values()).anyMatch(it -> !OPERATION_MAP.containsKey(it))) {\r\n        throw new IllegalStateException(\"Unmapped enum constant found!\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenUnmappedImmutableOperationValue_whenAppStarts_thenGetException() {\r\n    Throwable throwable = assertThrows(ExceptionInInitializerError.class, () -> {\r\n        ApplicationWithEx appEx = new ApplicationWithEx();\r\n    });\r\n    assertTrue(throwable.getCause() instanceof IllegalStateException);\r\n} \r\n```"]