["```\r\npublic class SourceClass {\r\n    private int intValue;\r\n    private String stringValue;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenArrayOfObjects_whenSerializing_thenCorrect() {\r\n    SourceClass[] sourceArray = {new SourceClass(1, \"one\"), new SourceClass(2, \"two\")};\r\n    String jsonString = new Gson().toJson(sourceArray);\r\n\r\n    String expectedResult = \r\n      \"[{\"intValue\":1,\"stringValue\":\"one\"},{\"intValue\":2,\"stringValue\":\"two\"}]\";\r\n    assertEquals(expectedResult, jsonString);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCollection_whenSerializing_thenCorrect() {\r\n    Collection<SourceClass> sourceCollection = \r\n      Lists.newArrayList(new SourceClass(1, \"one\"), new SourceClass(2, \"two\"));\r\n    String jsonCollection = new Gson().toJson(sourceCollection);\r\n\r\n    String expectedResult = \r\n      \"[{\"intValue\":1,\"stringValue\":\"one\"},{\"intValue\":2,\"stringValue\":\"two\"}]\";\r\n    assertEquals(expectedResult, jsonCollection);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCustomSerializer_whenChangingNameOfFieldOnSerializing_thenCorrect() {\r\n    SourceClass sourceObject = new SourceClass(7, \"seven\");\r\n    GsonBuilder gsonBuildr = new GsonBuilder();\r\n    gsonBuildr.registerTypeAdapter(SourceClass.class, new DifferentNameSerializer());\r\n    String jsonString = gsonBuildr.create().toJson(sourceObject);\r\n\r\n    String expectedResult = \"{\"otherIntValue\":7,\"otherStringValue\":\"seven\"}\";\r\n    assertEquals(expectedResult, jsonString);\r\n}\r\n```","```\r\npublic class DifferentNameSerializer implements JsonSerializer<SourceClass> {\r\n    @Override\r\n    public JsonElement serialize\r\n      (SourceClass src, Type typeOfSrc, JsonSerializationContext context) {\r\n        String otherIntValueName = \"otherIntValue\";\r\n        String otherStringValueName = \"otherStringValue\";\r\n\r\n        JsonObject jObject = new JsonObject();\r\n        jObject.addProperty(otherIntValueName, src.getIntValue());\r\n        jObject.addProperty(otherStringValueName, src.getStringValue());\r\n\r\n        return jObject;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenIgnoringAField_whenSerializingWithCustomSerializer_thenFieldIgnored() {\r\n    SourceClass sourceObject = new SourceClass(7, \"seven\");\r\n    GsonBuilder gsonBuildr = new GsonBuilder();\r\n    gsonBuildr.registerTypeAdapter(SourceClass.class, new IgnoringFieldsSerializer());\r\n    String jsonString = gsonBuildr.create().toJson(sourceObject);\r\n\r\n    String expectedResult = \"{\"intValue\":7}\";\r\n    assertEquals(expectedResult, jsonString);\r\n}\r\n```","```\r\npublic class IgnoringFieldsSerializer implements JsonSerializer<SourceClass> {\r\n    @Override\r\n    public JsonElement serialize\r\n      (SourceClass src, Type typeOfSrc, JsonSerializationContext context) {\r\n        String intValue = \"intValue\";\r\n        JsonObject jObject = new JsonObject();\r\n        jObject.addProperty(intValue, src.getIntValue());\r\n\r\n        return jObject;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingCustomDeserializer_whenFieldNotMatchesCriteria_thenIgnored() {\r\n    SourceClass sourceObject = new SourceClass(-1, \"minus 1\");\r\n    GsonBuilder gsonBuildr = new GsonBuilder();\r\n    gsonBuildr.registerTypeAdapter(SourceClass.class, \r\n      new IgnoringFieldsNotMatchingCriteriaSerializer());\r\n    Gson gson = gsonBuildr.create();\r\n    Type sourceObjectType = new TypeToken<SourceClass>() {}.getType();\r\n    String jsonString = gson.toJson(sourceObject, sourceObjectType);\r\n\r\n    String expectedResult = \"{\"stringValue\":\"minus 1\"}\";\r\n    assertEquals(expectedResult, jsonString);\r\n}\r\n```","```\r\npublic class IgnoringFieldsNotMatchingCriteriaSerializer \r\n  implements JsonSerializer<SourceClass> {\r\n    @Override\r\n    public JsonElement serialize\r\n      (SourceClass src, Type typeOfSrc, JsonSerializationContext context) {\r\n        JsonObject jObject = new JsonObject();\r\n\r\n        // Criteria: intValue >= 0\r\n        if (src.getIntValue() >= 0) {\r\n            String intValue = \"intValue\";\r\n            jObject.addProperty(intValue, src.getIntValue());\r\n        }\r\n\r\n        String stringValue = \"stringValue\";\r\n        jObject.addProperty(stringValue, src.getStringValue());\r\n\r\n        return jObject;\r\n    }\r\n}\r\n```"]