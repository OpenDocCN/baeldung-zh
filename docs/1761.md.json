["```\r\npublic class Employee implements Comparable<Employee> {\r\n\r\n    private String name;\r\n    private Date joiningDate;\r\n\r\n    public Employee(String name, Date joiningDate) {\r\n        // ...\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Employee implements Comparable<Employee> {\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        return ((Employee) obj).getName().equals(getName());\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Employee employee) {\r\n        return getJoiningDate().compareTo(employee.getJoiningDate());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenSortedListinNaturalOrder() {\r\n    Collections.sort(employees);\r\n    assertEquals(employees, employeesSortedByDateAsc);\r\n}\r\n```","```\r\n[(Pearl,Tue Apr 27 23:30:47 IST 2021),\r\n(Earl,Sun Feb 27 23:30:47 IST 2022),\r\n(Steve,Sun Apr 17 23:30:47 IST 2022),\r\n(John,Wed Apr 27 23:30:47 IST 2022)]\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenSortedListinDescOrder() {\r\n    Collections.sort(employees, Collections.reverseOrder());\r\n    assertEquals(employees, employeesSortedByDateDesc);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenCheckSortedList() {\r\n\r\n    Collections.sort(employees, new Comparator<Employee>() {\r\n        public int compare(Employee o1, Employee o2) {\r\n            return o1.getJoiningDate().compareTo(o2.getJoiningDate());\r\n        }\r\n    });\r\n\r\n    assertEquals(employees, employeesSortedByDateAsc);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenCheckSortedListAscLambda() {\r\n\r\n    Collections.sort(employees, Comparator.comparing(Employee::getJoiningDate));\r\n\r\n    assertEquals(employees, employeesSortedByDateAsc);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenCheckSortedListDescV1() {\r\n\r\n    Collections.sort(employees, new Comparator<Employee>() {\r\n        public int compare(Employee emp1, Employee emp2) {\r\n            return emp2.getJoiningDate().compareTo(emp1.getJoiningDate());\r\n        }\r\n    });\r\n\r\n    assertEquals(employees, employeesSortedByDateDesc);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpList_SortEmpList_thenCheckSortedListDescLambda() {\r\n\r\n    Collections.sort(employees, (emp1, emp2) -> emp2.getJoiningDate().compareTo(emp1.getJoiningDate()));\r\n    assertEquals(employees, employeesSortedByDateDesc);\r\n}\r\n```"]