["```\r\nMethodHandles.Lookup lookup = MethodHandles.lookup();\r\n```","```\r\npublic class HiddenClass {\r\n    public String convertToUpperCase(String s) {\r\n        return s.toUpperCase();\r\n    }\r\n}\r\n```","```\r\nClass<?> clazz = HiddenClass.class;\r\nString className = clazz.getName();\r\nString classAsPath = className.replace('.', '/') + \".class\";\r\nInputStream stream = clazz.getClassLoader()\r\n    .getResourceAsStream(classAsPath);\r\nbyte[] bytes = IOUtils.toByteArray();\r\n```","```\r\nClass<?> hiddenClass = lookup.defineHiddenClass(IOUtils.toByteArray(stream),\r\n  true, ClassOption.NESTMATE).lookupClass();\r\n```","```\r\nObject hiddenClassObject = hiddenClass.getConstructor().newInstance();\r\n```","```\r\nMethod method = hiddenClassObject.getClass()\r\n    .getDeclaredMethod(\"convertToUpperCase\", String.class); Assertions.assertEquals(\"HELLO\", method.invoke(hiddenClassObject, \"Hello\"));\r\n```","```\r\nAssertions.assertEquals(true, hiddenClass.isHidden());\r\n```","```\r\nAssertions.assertEquals(null, hiddenClass.getCanonicalName());\r\n```","```\r\nAssertions.assertEquals(this.getClass()\r\n    .getClassLoader(), hiddenClass.getClassLoader());\r\n```","```\r\nAssertions.assertThrows(ClassNotFoundException.class, () -> Class.forName(hiddenClass.getName())); Assertions.assertThrows(ClassNotFoundException.class, () -> lookup.findClass(hiddenClass.getName()));\r\n```"]