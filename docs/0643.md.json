["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n    <version>2.2.6.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic class Foo {\r\n    private long id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n} \r\n```","```\r\n@RestController\r\n@RequestMapping(value = \"/foos\")\r\npublic class FooController {\r\n\r\n    @GetMapping(value = \"/{id}\")\r\n    public Foo findOne(@PathVariable Long id) {\r\n        return new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\r\n    }\r\n\r\n    @GetMapping\r\n    public List findAll() {\r\n        List fooList = new ArrayList();\r\n        fooList.add(new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4)));\r\n        fooList.add(new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4)));\r\n        fooList.add(new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4)));\r\n        return fooList;\r\n    }\r\n\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @PostMapping\r\n    public void create(@RequestBody Foo newFoo) {\r\n        logger.info(\"Foo created\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class JWTSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests(authz -> authz\r\n            .antMatchers(HttpMethod.GET, \"/foos/**\").hasAuthority(\"SCOPE_read\")\r\n            .antMatchers(HttpMethod.POST, \"/foos\").hasAuthority(\"SCOPE_write\")\r\n            .anyRequest().authenticated())\r\n          .oauth2ResourceServer(oauth2 -> oauth2.jwt());\r\n\t}\r\n} \r\n```","```\r\nserver: \r\n  port: 8081\r\n  servlet: \r\n    context-path: /resource-server-jwt\r\n\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        jwt:\r\n          issuer-uri: http://localhost:8083/auth/realms/baeldung\r\n```","```\r\njwk-set-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/certs\r\n```","```\r\n@Test\r\npublic void givenUserWithReadScope_whenGetFooResource_thenSuccess() {\r\n    String accessToken = obtainAccessToken(\"read\");\r\n\r\n    Response response = RestAssured.given()\r\n      .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken)\r\n      .get(\"http://localhost:8081/resource-server-jwt/foos\");\r\n    assertThat(response.as(List.class)).hasSizeGreaterThan(0);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.nimbusds</groupId>\r\n    <artifactId>oauth2-oidc-sdk</artifactId>\r\n    <version>8.19</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\npublic class Bar {\r\n    private long id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n} \r\n```","```\r\nserver: \r\n  port: 8082\r\n  servlet: \r\n    context-path: /resource-server-opaque\r\n\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        opaque:\r\n          introspection-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token/introspect\r\n          introspection-client-id: barClient\r\n          introspection-client-secret: barClientSecret\r\n```","```\r\n@Configuration\r\npublic class OpaqueSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Value(\"${spring.security.oauth2.resourceserver.opaque.introspection-uri}\")\r\n    String introspectionUri;\r\n\r\n    @Value(\"${spring.security.oauth2.resourceserver.opaque.introspection-client-id}\")\r\n    String clientId;\r\n\r\n    @Value(\"${spring.security.oauth2.resourceserver.opaque.introspection-client-secret}\")\r\n    String clientSecret;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests(authz -> authz\r\n            .antMatchers(HttpMethod.GET, \"/bars/**\").hasAuthority(\"SCOPE_read\")\r\n            .antMatchers(HttpMethod.POST, \"/bars\").hasAuthority(\"SCOPE_write\")\r\n            .anyRequest().authenticated())\r\n          .oauth2ResourceServer(oauth2 -> oauth2\r\n            .opaqueToken(token -> token.introspectionUri(this.introspectionUri)\r\n              .introspectionClientCredentials(this.clientId, this.clientSecret)));\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenUserWithWriteScope_whenPostNewBarResource_thenCreated() {\r\n    String accessToken = obtainAccessToken(\"read write\");\r\n    Bar newBar = new Bar(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\r\n\r\n    Response response = RestAssured.given()\r\n      .contentType(ContentType.JSON)\r\n      .header(HttpHeaders.AUTHORIZATION, \"Bearer \" + accessToken)\r\n      .body(newBar)\r\n      .log()\r\n      .all()\r\n      .post(\"http://localhost:8082/resource-server-opaque/bars\");\r\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED.value());\r\n}\r\n```"]