["```\r\nSet<String> treeSet = new TreeSet<>();\r\n```","```\r\nSet<String> treeSet = new TreeSet<>(Comparator.comparing(String::length));\r\n```","```\r\nSet<String> syncTreeSet = Collections.synchronizedSet(treeSet);\r\n```","```\r\n@Test\r\npublic void whenAddingElement_shouldAddElement() {\r\n    Set<String> treeSet = new TreeSet<>();\r\n\r\n    assertTrue(treeSet.add(\"String Added\"));\r\n }\r\n```","```\r\npublic boolean add(E e) {\r\n    return m.put(e, PRESENT) == null;\r\n}\r\n```","```\r\nprivate transient NavigableMap<E, Object> m;\r\n```","```\r\npublic TreeSet() {\r\n    this(new TreeMap<E,Object>());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingForElement_shouldSearchForElement() {\r\n    Set<String> treeSetContains = new TreeSet<>();\r\n    treeSetContains.add(\"String Added\");\r\n\r\n    assertTrue(treeSetContains.contains(\"String Added\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemovingElement_shouldRemoveElement() {\r\n    Set<String> removeFromTreeSet = new TreeSet<>();\r\n    removeFromTreeSet.add(\"String Added\");\r\n\r\n    assertTrue(removeFromTreeSet.remove(\"String Added\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenClearingTreeSet_shouldClearTreeSet() {\r\n    Set<String> clearTreeSet = new TreeSet<>();\r\n    clearTreeSet.add(\"String Added\");\r\n    clearTreeSet.clear();\r\n\r\n    assertTrue(clearTreeSet.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingTheSizeOfTreeSet_shouldReturnThesize() {\r\n    Set<String> treeSetSize = new TreeSet<>();\r\n    treeSetSize.add(\"String Added\");\r\n\r\n    assertEquals(1, treeSetSize.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingForEmptyTreeSet_shouldCheckForEmpty() {\r\n    Set<String> emptyTreeSet = new TreeSet<>();\r\n\r\n    assertTrue(emptyTreeSet.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenIteratingTreeSet_shouldIterateTreeSetInAscendingOrder() {\r\n    Set<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(\"Second\");\r\n    treeSet.add(\"Third\");\r\n    Iterator<String> itr = treeSet.iterator();\r\n    while (itr.hasNext()) {\r\n        System.out.println(itr.next());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenIteratingTreeSet_shouldIterateTreeSetInDescendingOrder() {\r\n    TreeSet<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(\"Second\");\r\n    treeSet.add(\"Third\");\r\n    Iterator<String> itr = treeSet.descendingIterator();\r\n    while (itr.hasNext()) {\r\n        System.out.println(itr.next());\r\n    }\r\n}\r\n```","```\r\n@Test(expected = ConcurrentModificationException.class)\r\npublic void whenModifyingTreeSetWhileIterating_shouldThrowException() {\r\n    Set<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(\"Second\");\r\n    treeSet.add(\"Third\");\r\n    Iterator<String> itr = treeSet.iterator();\r\n    while (itr.hasNext()) {\r\n        itr.next();\r\n        treeSet.remove(\"Second\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenRemovingElementUsingIterator_shouldRemoveElement() {\r\n\r\n    Set<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(\"Second\");\r\n    treeSet.add(\"Third\");\r\n    Iterator<String> itr = treeSet.iterator();\r\n    while (itr.hasNext()) {\r\n        String element = itr.next();\r\n        if (element.equals(\"Second\"))\r\n           itr.remove();\r\n    }\r\n\r\n    assertEquals(2, treeSet.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingFirstElement_shouldReturnFirstElement() {\r\n    TreeSet<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n\r\n    assertEquals(\"First\", treeSet.first());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingLastElement_shouldReturnLastElement() {\r\n    TreeSet<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(\"Last\");\r\n\r\n    assertEquals(\"Last\", treeSet.last());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingSubSet_shouldReturnSubSetElements() {\r\n    SortedSet<Integer> treeSet = new TreeSet<>();\r\n    treeSet.add(1);\r\n    treeSet.add(2);\r\n    treeSet.add(3);\r\n    treeSet.add(4);\r\n    treeSet.add(5);\r\n    treeSet.add(6);\r\n\r\n    Set<Integer> expectedSet = new TreeSet<>();\r\n    expectedSet.add(2);\r\n    expectedSet.add(3);\r\n    expectedSet.add(4);\r\n    expectedSet.add(5);\r\n\r\n    Set<Integer> subSet = treeSet.subSet(2, 6);\r\n\r\n    assertEquals(expectedSet, subSet);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingHeadSet_shouldReturnHeadSetElements() {\r\n    SortedSet<Integer> treeSet = new TreeSet<>();\r\n    treeSet.add(1);\r\n    treeSet.add(2);\r\n    treeSet.add(3);\r\n    treeSet.add(4);\r\n    treeSet.add(5);\r\n    treeSet.add(6);\r\n\r\n    Set<Integer> subSet = treeSet.headSet(6);\r\n\r\n    assertEquals(subSet, treeSet.subSet(1, 6));\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingTailSet_shouldReturnTailSetElements() {\r\n    NavigableSet<Integer> treeSet = new TreeSet<>();\r\n    treeSet.add(1);\r\n    treeSet.add(2);\r\n    treeSet.add(3);\r\n    treeSet.add(4);\r\n    treeSet.add(5);\r\n    treeSet.add(6);\r\n\r\n    Set<Integer> subSet = treeSet.tailSet(3);\r\n\r\n    assertEquals(subSet, treeSet.subSet(3, true, 6, true));\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void whenAddingNullToNonEmptyTreeSet_shouldThrowException() {\r\n    Set<String> treeSet = new TreeSet<>();\r\n    treeSet.add(\"First\");\r\n    treeSet.add(null);\r\n}\r\n```","```\r\nclass Element {\r\n    private Integer id;\r\n\r\n    // Other methods...\r\n}\r\n\r\nComparator<Element> comparator = (ele1, ele2) -> {\r\n    return ele1.getId().compareTo(ele2.getId());\r\n};\r\n\r\n@Test\r\npublic void whenUsingComparator_shouldSortAndInsertElements() {\r\n    Set<Element> treeSet = new TreeSet<>(comparator);\r\n    Element ele1 = new Element();\r\n    ele1.setId(100);\r\n    Element ele2 = new Element();\r\n    ele2.setId(200);\r\n\r\n    treeSet.add(ele1);\r\n    treeSet.add(ele2);\r\n\r\n    System.out.println(treeSet);\r\n}\r\n```"]