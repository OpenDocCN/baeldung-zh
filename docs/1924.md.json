["```\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.20</version>\r\n</dependency>\r\n```","```\r\n@Getter\r\n@Builder\r\npublic class Widget {\r\n    private final String name;\r\n    private final int id;\r\n} \r\n```","```\r\nWidget testWidget = Widget.builder()\r\n  .name(\"foo\")\r\n  .id(1)\r\n  .build();\r\n\r\nassertThat(testWidget.getName())\r\n  .isEqualTo(\"foo\");\r\nassertThat(testWidget.getId())\r\n  .isEqualTo(1);\r\n```","```\r\n@Builder(toBuilder = true)\r\npublic class Widget {\r\n//...\r\n}\r\n```","```\r\nWidget testWidget = Widget.builder()\r\n  .name(\"foo\")\r\n  .id(1)\r\n  .build();\r\n\r\nWidget.WidgetBuilder widgetBuilder = testWidget.toBuilder();\r\n\r\nWidget newWidget = widgetBuilder.id(2).build();\r\nassertThat(newWidget.getName())\r\n  .isEqualTo(\"foo\");\r\nassertThat(newWidget.getId())\r\n  .isEqualTo(2);\r\n```","```\r\n@Builder(builderMethodName = \"internalBuilder\")\r\npublic class RequiredFieldAnnotation {\r\n    @NonNull\r\n    private String name;\r\n    private String description;\r\n\r\n    public static RequiredFieldAnnotationBuilder builder(String name) {\r\n        return internalBuilder().name(name);\r\n    }\r\n}\r\n```","```\r\nRequiredField.builder(\"NameField\").description(\"Field Description\").build();\r\n```","```\r\n@Value\r\nfinal class ImmutableClient {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\nclass ClientBuilder {\r\n\r\n    @Builder(builderMethodName = \"builder\")\r\n    public static ImmutableClient newClient(int id, String name) {\r\n        return new ImmutableClient(id, name);\r\n    }\r\n}\r\n```","```\r\nImmutableClient testImmutableClient = ClientBuilder.builder()\r\n  .name(\"foo\")\r\n  .id(1)\r\n  .build();\r\nassertThat(testImmutableClient.getName())\r\n  .isEqualTo(\"foo\");\r\nassertThat(testImmutableClient.getId())\r\n  .isEqualTo(1);\r\n```"]