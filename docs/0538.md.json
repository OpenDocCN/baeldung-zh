["```\r\nExecutorService executor = Executors.newFixedThreadPool(10);\r\n```","```\r\nExecutorService executorService = \r\n  new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS,   \r\n  new LinkedBlockingQueue<Runnable>());\r\n```","```\r\nRunnable runnableTask = () -> {\r\n    try {\r\n        TimeUnit.MILLISECONDS.sleep(300);\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    }\r\n};\r\n\r\nCallable<String> callableTask = () -> {\r\n    TimeUnit.MILLISECONDS.sleep(300);\r\n    return \"Task's execution\";\r\n};\r\n\r\nList<Callable<String>> callableTasks = new ArrayList<>();\r\ncallableTasks.add(callableTask);\r\ncallableTasks.add(callableTask);\r\ncallableTasks.add(callableTask);\r\n```","```\r\nexecutorService.execute(runnableTask);\r\n```","```\r\nFuture<String> future = \r\n  executorService.submit(callableTask);\r\n```","```\r\nString result = executorService.invokeAny(callableTasks);\r\n```","```\r\nList<Future<String>> futures = executorService.invokeAll(callableTasks);\r\n```","```\r\nexecutorService.shutdown();\r\n```","```\r\nList<Runnable> notExecutedTasks = executorService.shutDownNow();\r\n```","```\r\nexecutorService.shutdown();\r\ntry {\r\n    if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\r\n        executorService.shutdownNow();\r\n    } \r\n} catch (InterruptedException e) {\r\n    executorService.shutdownNow();\r\n}\r\n```","```\r\nFuture<String> future = executorService.submit(callableTask);\r\nString result = null;\r\ntry {\r\n    result = future.get();\r\n} catch (InterruptedException | ExecutionException e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\nString result = future.get(200, TimeUnit.MILLISECONDS);\r\n```","```\r\nboolean canceled = future.cancel(true);\r\nboolean isCancelled = future.isCancelled();\r\n```","```\r\nScheduledExecutorService executorService = Executors\r\n  .newSingleThreadScheduledExecutor();\r\n```","```\r\nFuture<String> resultFuture = \r\n  executorService.schedule(callableTask, 1, TimeUnit.SECONDS);\r\n```","```\r\nFuture<String> resultFuture = service\r\n  .scheduleAtFixedRate(runnableTask, 100, 450, TimeUnit.MILLISECONDS);\r\n```","```\r\nservice.scheduleWithFixedDelay(task, 100, 150, TimeUnit.MILLISECONDS);\r\n```"]