["```\r\npublic class Edge {\r\n\r\n    private int weight;\r\n    private boolean isIncluded = false;\r\n\r\n}\r\n```","```\r\npublic class Vertex {\r\n\r\n    private String label = null;\r\n    private Map<Vertex, Edge> edges = new HashMap<>();\r\n    private boolean isVisited = false;\r\n\r\n}\r\n```","```\r\npublic class Prim {\r\n\r\n    private List<Vertex> graph;\r\n\r\n}\r\n```","```\r\npublic void run() {\r\n    if (graph.size() > 0) {\r\n        graph.get(0).setVisited(true);\r\n    }\r\n    while (isDisconnected()) {\r\n        Edge nextMinimum = new Edge(Integer.MAX_VALUE);\r\n        Vertex nextVertex = graph.get(0);\r\n        for (Vertex vertex : graph) {\r\n            if (vertex.isVisited()) {\r\n                Pair<Vertex, Edge> candidate = vertex.nextMinimum();\r\n                if (candidate.getValue().getWeight() < nextMinimum.getWeight()) {\r\n                    nextMinimum = candidate.getValue();\r\n                    nextVertex = candidate.getKey();\r\n                }\r\n            }\r\n        }\r\n        nextMinimum.setIncluded(true);\r\n        nextVertex.setVisited(true);\r\n    }\r\n}\r\n```","```\r\nprivate boolean isDisconnected() {\r\n    for (Vertex vertex : graph) {\r\n        if (!vertex.isVisited()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\npublic Pair<Vertex, Edge> nextMinimum() {\r\n    Edge nextMinimum = new Edge(Integer.MAX_VALUE);\r\n    Vertex nextVertex = this;\r\n    Iterator<Map.Entry<Vertex,Edge>> it = edges.entrySet()\r\n        .iterator();\r\n    while (it.hasNext()) {\r\n        Map.Entry<Vertex,Edge> pair = it.next();\r\n        if (!pair.getKey().isVisited()) {\r\n            if (!pair.getValue().isIncluded()) {\r\n                if (pair.getValue().getWeight() < nextMinimum.getWeight()) {\r\n                    nextMinimum = pair.getValue();\r\n                    nextVertex = pair.getKey();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return new Pair<>(nextVertex, nextMinimum);\r\n}\r\n```","```\r\npublic static List<Vertex> createGraph() {\r\n    List<Vertex> graph = new ArrayList<>();\r\n    Vertex a = new Vertex(\"A\");\r\n    ...\r\n    Vertex e = new Vertex(\"E\");\r\n    Edge ab = new Edge(2);\r\n    a.addEdge(b, ab);\r\n    b.addEdge(a, ab);\r\n    ...\r\n    Edge ce = new Edge(1);\r\n    c.addEdge(e, ce);\r\n    e.addEdge(c, ce);\r\n    graph.add(a);\r\n    ...\r\n    graph.add(e);\r\n    return graph;\r\n}\r\n```","```\r\nPrim prim = new Prim(createGraph());\r\nSystem.out.println(prim.originalGraphToString());\r\n```","```\r\nA --- 2 --- B\r\nA --- 3 --- C\r\nB --- 5 --- E\r\nB --- 2 --- C\r\nC --- 1 --- E\r\nC --- 1 --- D\r\n```","```\r\nprim.run();\r\nprim.resetPrintHistory();\r\nSystem.out.println(prim.minimumSpanningTreeToString());\r\n```","```\r\nA --- 2 --- B\r\nB --- 2 --- C\r\nC --- 1 --- E\r\nC --- 1 --- D\r\n```"]