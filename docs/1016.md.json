["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-web</artifactId> \r\n    <version>2.6.1</version> \r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>    \r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-test</artifactId>\r\n    <version>5.4.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class MultipleEntryPointsSecurityConfig {\r\n\r\n    @Bean\r\n    public UserDetailsService userDetailsService() throws Exception {\r\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\r\n        manager.createUser(User\r\n          .withUsername(\"user\")\r\n          .password(encoder().encode(\"userPass\"))\r\n          .roles(\"USER\").build());\r\n        manager.createUser(User\r\n          .withUsername(\"admin\")\r\n          .password(encoder().encode(\"adminPass\"))\r\n          .roles(\"ADMIN\").build());\r\n        return manager;\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder encoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@Order(1)\r\npublic static class App1ConfigurationAdapter extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.antMatcher(\"/admin/**\")\r\n            .authorizeRequests().anyRequest().hasRole(\"ADMIN\")\r\n            .and().httpBasic().authenticationEntryPoint(authenticationEntryPoint());\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationEntryPoint authenticationEntryPoint(){\r\n        BasicAuthenticationEntryPoint entryPoint = \r\n          new BasicAuthenticationEntryPoint();\r\n        entryPoint.setRealmName(\"admin realm\");\r\n        return entryPoint;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@Order(2)\r\npublic static class App2ConfigurationAdapter extends WebSecurityConfigurerAdapter {\r\n\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.antMatcher(\"/user/**\")\r\n            .authorizeRequests().anyRequest().hasRole(\"USER\")\r\n            .and()\r\n            // formLogin configuration\r\n            .and()\r\n            .exceptionHandling()\r\n            .defaultAuthenticationEntryPointFor(\r\n              loginUrlauthenticationEntryPointWithWarning(),\r\n              new AntPathRequestMatcher(\"/user/private/**\"))\r\n            .defaultAuthenticationEntryPointFor(\r\n              loginUrlauthenticationEntryPoint(), \r\n              new AntPathRequestMatcher(\"/user/general/**\"));\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic AuthenticationEntryPoint loginUrlauthenticationEntryPoint(){\r\n    return new LoginUrlAuthenticationEntryPoint(\"/userLogin\");\r\n}\r\n\r\n@Bean\r\npublic AuthenticationEntryPoint loginUrlauthenticationEntryPointWithWarning(){\r\n    return new LoginUrlAuthenticationEntryPoint(\"/userLoginWithWarning\");\r\n}\r\n```","```\r\n@Configuration\r\n@Order(3)\r\npublic static class App3ConfigurationAdapter extends WebSecurityConfigurerAdapter {\r\n\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.antMatcher(\"/guest/**\").authorizeRequests().anyRequest().permitAll();\r\n    }\r\n}\r\n```","```\r\n<security:http pattern=\"/admin/**\" use-expressions=\"true\" auto-config=\"true\">\r\n    <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_ADMIN')\"/>\r\n    <security:http-basic entry-point-ref=\"authenticationEntryPoint\" />\r\n</security:http>\r\n\r\n<bean id=\"authenticationEntryPoint\"\r\n  class=\"org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint\">\r\n     <property name=\"realmName\" value=\"admin realm\" />\r\n</bean>\r\n```","```\r\n<security:http pattern=\"/user/general/**\" use-expressions=\"true\" auto-config=\"true\"\r\n  entry-point-ref=\"loginUrlAuthenticationEntryPoint\">\r\n    <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\" />\r\n    //form-login configuration      \r\n</security:http>\r\n\r\n<bean id=\"loginUrlAuthenticationEntryPoint\"\r\n  class=\"org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint\">\r\n  <constructor-arg name=\"loginFormUrl\" value=\"/userLogin\" />\r\n</bean>\r\n```","```\r\n<security:http pattern=\"/user/private/**\" use-expressions=\"true\" auto-config=\"true\"\r\n  entry-point-ref=\"loginUrlAuthenticationEntryPointWithWarning\">\r\n    <security:intercept-url pattern=\"/**\" access=\"hasRole('ROLE_USER')\"/>\r\n    //form-login configuration\r\n</security:http>\r\n\r\n<bean id=\"loginUrlAuthenticationEntryPointWithWarning\"\r\n  class=\"org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint\">\r\n    <constructor-arg name=\"loginFormUrl\" value=\"/userLoginWithWarning\" />\r\n</bean>\r\n```","```\r\n<security:http pattern=\"/**\" use-expressions=\"true\" auto-config=\"true\">\r\n    <security:intercept-url pattern=\"/guest/**\" access=\"permitAll()\"/>  \r\n</security:http>\r\n```","```\r\n@Controller\r\npublic class PagesController {\r\n\r\n    @GetMapping(\"/admin/myAdminPage\")\r\n    public String getAdminPage() {\r\n        return \"multipleHttpElems/myAdminPage\";\r\n    }\r\n\r\n    @GetMapping(\"/user/general/myUserPage\")\r\n    public String getUserPage() {\r\n        return \"multipleHttpElems/myUserPage\";\r\n    }\r\n\r\n    @GetMapping(\"/user/private/myPrivateUserPage\")\r\n    public String getPrivateUserPage() {\r\n        return \"multipleHttpElems/myPrivateUserPage\"; \r\n    }\r\n\r\n    @GetMapping(\"/guest/myGuestPage\")\r\n    public String getGuestPage() {\r\n        return \"multipleHttpElems/myGuestPage\";\r\n    }\r\n\r\n    @GetMapping(\"/multipleHttpLinks\")\r\n    public String getMultipleHttpLinksPage() {\r\n        return \"multipleHttpElems/multipleHttpLinks\";\r\n    }\r\n}\r\n```","```\r\n<a th:href=\"@{/admin/myAdminPage}\">Admin page</a>\r\n<a th:href=\"@{/user/general/myUserPage}\">User page</a>\r\n<a th:href=\"@{/user/private/myPrivateUserPage}\">Private user page</a>\r\n<a th:href=\"@{/guest/myGuestPage}\">Guest page</a>\r\n```","```\r\nWelcome admin!\r\n\r\n<a th:href=\"@{/multipleHttpLinks}\" >Back to links</a>\r\n```","```\r\n@SpringBootApplication\r\npublic class MultipleEntryPointsApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MultipleEntryPointsApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebAppConfiguration\r\n@SpringBootTest(classes = MultipleEntryPointsApplication.class)\r\npublic class MultipleEntryPointsTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    @Autowired\r\n    private FilterChainProxy springSecurityFilterChain;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @Before\r\n    public void setup() {\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac)\r\n          .addFilter(springSecurityFilterChain).build();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenTestAdminCredentials_thenOk() throws Exception {\r\n    mockMvc.perform(get(\"/admin/myAdminPage\")).andExpect(status().isUnauthorized());\r\n\r\n    mockMvc.perform(get(\"/admin/myAdminPage\")\r\n      .with(httpBasic(\"admin\", \"adminPass\"))).andExpect(status().isOk());\r\n\r\n    mockMvc.perform(get(\"/user/myUserPage\")\r\n      .with(user(\"admin\").password(\"adminPass\").roles(\"ADMIN\")))\r\n      .andExpect(status().isForbidden());\r\n}\r\n```","```\r\n@Test\r\npublic void whenTestUserCredentials_thenOk() throws Exception {\r\n    mockMvc.perform(get(\"/user/general/myUserPage\")).andExpect(status().isFound());\r\n\r\n    mockMvc.perform(get(\"/user/general/myUserPage\")\r\n      .with(user(\"user\").password(\"userPass\").roles(\"USER\")))\r\n      .andExpect(status().isOk());\r\n\r\n    mockMvc.perform(get(\"/admin/myAdminPage\")\r\n      .with(user(\"user\").password(\"userPass\").roles(\"USER\")))\r\n      .andExpect(status().isForbidden());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnyUser_whenGetGuestPage_thenOk() throws Exception {\r\n    mockMvc.perform(get(\"/guest/myGuestPage\")).andExpect(status().isOk());\r\n\r\n    mockMvc.perform(get(\"/guest/myGuestPage\")\r\n      .with(user(\"user\").password(\"userPass\").roles(\"USER\")))\r\n      .andExpect(status().isOk());\r\n\r\n    mockMvc.perform(get(\"/guest/myGuestPage\")\r\n      .with(httpBasic(\"admin\", \"adminPass\")))\r\n      .andExpect(status().isOk());\r\n}\r\n```"]