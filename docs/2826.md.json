["```\r\npublic class Employee {\r\n    String name;\r\n    int age;\r\n    double salary;\r\n    long mobile;\r\n\r\n    // constructors, getters & setters\r\n}\r\n```","```\r\nemployees = new Employee[] { ... };\r\n```","```\r\n[Employee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Before\r\npublic void initData() {\r\n    sortedEmployeesByName = new Employee[] {...};\r\n    sortedEmployeesByNameDesc = new Employee[] {...};\r\n    sortedEmployeesByAge = new Employee[] {...};\r\n\r\n    // ...\r\n}\r\n```","```\r\nstatic <T,U extends Comparable<? super U>> Comparator<T> comparing(\r\n   Function<? super T,? extends U> keyExtractor)\r\n```","```\r\n@Test\r\npublic void whenComparing_thenSortedByName() {\r\n    Comparator<Employee> employeeNameComparator\r\n      = Comparator.comparing(Employee::getName);\r\n\r\n    Arrays.sort(employees, employeeNameComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByName));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)] \r\n```","```\r\nstatic <T,U> Comparator<T> comparing(\r\n  Function<? super T,? extends U> keyExtractor,\r\n    Comparator<? super U> keyComparator)\r\n```","```\r\n@Test\r\npublic void whenComparingWithComparator_thenSortedByNameDesc() {\r\n    Comparator<Employee> employeeNameComparator\r\n      = Comparator.comparing(\r\n        Employee::getName, (s1, s2) -> {\r\n            return s2.compareTo(s1);\r\n        });\r\n\r\n    Arrays.sort(employees, employeeNameComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByNameDesc));\r\n}\r\n```","```\r\n[Employee(name=Keith, age=35, salary=4000.0, mobile=3924401), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001)]\r\n```","```\r\n@Test\r\npublic void whenReversed_thenSortedByNameDesc() {\r\n    Comparator<Employee> employeeNameComparator\r\n      = Comparator.comparing(Employee::getName);\r\n    Comparator<Employee> employeeNameComparatorReversed \r\n      = employeeNameComparator.reversed();\r\n    Arrays.sort(employees, employeeNameComparatorReversed);\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByNameDesc));\r\n}\r\n```","```\r\n[Employee(name=Keith, age=35, salary=4000.0, mobile=3924401), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001)]\r\n```","```\r\n@Test\r\npublic void whenComparingInt_thenSortedByAge() {\r\n    Comparator<Employee> employeeAgeComparator \r\n      = Comparator.comparingInt(Employee::getAge);\r\n\r\n    Arrays.sort(employees, employeeAgeComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByAge));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenComparingLong_thenSortedByMobile() {\r\n    Comparator<Employee> employeeMobileComparator \r\n      = Comparator.comparingLong(Employee::getMobile);\r\n\r\n    Arrays.sort(employees, employeeMobileComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByMobile));\r\n}\r\n```","```\r\n[Employee(name=Keith, age=35, salary=4000.0, mobile=3924401), \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001)]\r\n```","```\r\n@Test\r\npublic void whenComparingDouble_thenSortedBySalary() {\r\n    Comparator<Employee> employeeSalaryComparator\r\n      = Comparator.comparingDouble(Employee::getSalary);\r\n\r\n    Arrays.sort(employees, employeeSalaryComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesBySalary));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\npublic class Employee implements Comparable<Employee>{\r\n    // ...\r\n\r\n    @Override\r\n    public int compareTo(Employee argEmployee) {\r\n        return name.compareTo(argEmployee.getName());\r\n    }\r\n}\r\n```","```\r\nstatic <T extends Comparable<? super T>> Comparator<T> naturalOrder()\r\n```","```\r\n@Test\r\npublic void whenNaturalOrder_thenSortedByName() {\r\n    Comparator<Employee> employeeNameComparator \r\n      = Comparator.<Employee> naturalOrder();\r\n\r\n    Arrays.sort(employees, employeeNameComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByName));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenReverseOrder_thenSortedByNameDesc() {\r\n    Comparator<Employee> employeeNameComparator \r\n      = Comparator.<Employee> reverseOrder();\r\n\r\n    Arrays.sort(employees, employeeNameComparator);\r\n\r\n    assertTrue(Arrays.equals(employees, sortedEmployeesByNameDesc));\r\n}\r\n```","```\r\n[Employee(name=Keith, age=35, salary=4000.0, mobile=3924401), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001)]\r\n```","```\r\n[Employee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nnull, \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nnull, \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenNullsFirst_thenSortedByNameWithNullsFirst() {\r\n    Comparator<Employee> employeeNameComparator\r\n      = Comparator.comparing(Employee::getName);\r\n    Comparator<Employee> employeeNameComparator_nullFirst\r\n      = Comparator.nullsFirst(employeeNameComparator);\r\n\r\n    Arrays.sort(employeesArrayWithNulls, \r\n      employeeNameComparator_nullFirst);\r\n\r\n    assertTrue(Arrays.equals(\r\n      employeesArrayWithNulls,\r\n      sortedEmployeesArray_WithNullsFirst));\r\n}\r\n```","```\r\n[null, \r\nnull, \r\nEmployee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenNullsLast_thenSortedByNameWithNullsLast() {\r\n    Comparator<Employee> employeeNameComparator\r\n      = Comparator.comparing(Employee::getName);\r\n    Comparator<Employee> employeeNameComparator_nullLast\r\n      = Comparator.nullsLast(employeeNameComparator);\r\n\r\n    Arrays.sort(employeesArrayWithNulls, employeeNameComparator_nullLast);\r\n\r\n    assertTrue(Arrays.equals(\r\n      employeesArrayWithNulls, sortedEmployeesArray_WithNullsLast));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=John, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401), \r\nnull, \r\nnull]\r\n```","```\r\nsomeMoreEmployees = new Employee[] { ... };\r\n```","```\r\n[Employee(name=Jake, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Jake, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=Ace, age=22, salary=3000.0, mobile=6423001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenThenComparing_thenSortedByAgeName(){\r\n    Comparator<Employee> employee_Age_Name_Comparator\r\n      = Comparator.comparing(Employee::getAge)\r\n        .thenComparing(Employee::getName);\r\n\r\n    Arrays.sort(someMoreEmployees, employee_Age_Name_Comparator);\r\n\r\n    assertTrue(Arrays.equals(someMoreEmployees, sortedEmployeesByAgeName));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=3000.0, mobile=6423001), \r\nEmployee(name=Jake, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=Jake, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```","```\r\n@Test\r\npublic void whenThenComparing_thenSortedByNameAge() {\r\n    Comparator<Employee> employee_Name_Age_Comparator\r\n      = Comparator.comparing(Employee::getName)\r\n        .thenComparingInt(Employee::getAge);\r\n\r\n    Arrays.sort(someMoreEmployees, employee_Name_Age_Comparator);\r\n\r\n    assertTrue(Arrays.equals(someMoreEmployees, \r\n      sortedEmployeesByNameAge));\r\n}\r\n```","```\r\n[Employee(name=Ace, age=22, salary=3000.0, mobile=6423001), \r\nEmployee(name=Jake, age=22, salary=2000.0, mobile=5924001), \r\nEmployee(name=Jake, age=25, salary=3000.0, mobile=9922001), \r\nEmployee(name=Keith, age=35, salary=4000.0, mobile=3924401)]\r\n```"]