["```\r\n<dependency>\r\n  <groupId>junit</groupId>\r\n  <artifactId>junit</artifactId>\r\n  <version>4.12</version>  \r\n</dependency>\r\n```","```\r\npublic class TestRunner extends Runner {\r\n\r\n    private Class testClass;\r\n    public TestRunner(Class testClass) {\r\n        super();\r\n        this.testClass = testClass;\r\n    }\r\n\r\n    @Override\r\n    public Description getDescription() {\r\n        return Description\r\n          .createTestDescription(testClass, \"My runner description\");\r\n    }\r\n\r\n    @Override\r\n    public void run(RunNotifier notifier) {\r\n        System.out.println(\"running the tests from MyRunner: \" + testClass);\r\n        try {\r\n            Object testObject = testClass.newInstance();\r\n            for (Method method : testClass.getMethods()) {\r\n                if (method.isAnnotationPresent(Test.class)) {\r\n                    notifier.fireTestStarted(Description\r\n                      .createTestDescription(testClass, method.getName()));\r\n                    method.invoke(testObject);\r\n                    notifier.fireTestFinished(Description\r\n                      .createTestDescription(testClass, method.getName()));\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class Calculator {\r\n    public int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n}\r\n\r\n@RunWith(TestRunner.class)\r\npublic class CalculatorTest {\r\n    Calculator calculator = new Calculator();\r\n\r\n    @Test\r\n    public void testAddition() {\r\n        Syste.out.println(\"in testAddition\");\r\n        assertEquals(\"addition\", 8, calculator.add(5, 3));\r\n    }\r\n}\r\n```","```\r\n-------------------------------------------------------\r\n T E S T S\r\n-------------------------------------------------------\r\nRunning com.baeldung.junit.CalculatorTest\r\nrunning the tests from MyRunner: class com.baeldung.junit.CalculatorTest\r\nin testAddition\r\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec\r\n\r\nResults :\r\n\r\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0\r\n```","```\r\npublic class BlockingTestRunner extends BlockJUnit4ClassRunner {\r\n    public BlockingTestRunner(Class<?> klass) throws InitializationError {\r\n        super(klass);\r\n    }\r\n\r\n    @Override\r\n    protected Statement methodInvoker(FrameworkMethod method, Object test) {\r\n        System.out.println(\"invoking: \" + method.getName());\r\n        return super.methodInvoker(method, test);\r\n    }\r\n}\r\n```","```\r\n@RunWith(JUnit4.class)\r\npublic class CalculatorTest {\r\n    Calculator calculator = new Calculator();\r\n\r\n    @Test\r\n    public void testAddition() {\r\n        assertEquals(\"addition\", 8, calculator.add(5, 3));\r\n    }\r\n}\r\n```"]