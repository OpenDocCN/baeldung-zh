["```\r\npublic class Calculator {\r\n    private int result = 0;\r\n\r\n    public int add(int number) {\r\n        return result += number;\r\n    }\r\n\r\n    public int sub(int number) {\r\n        return result -= number;\r\n    }\r\n\r\n    public void clear() {\r\n        result = 0;\r\n    }\r\n\r\n    public void print() {\r\n        System.out.println(result);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenCalculator_whenGettingVoidMethodsByReflection_thenOnlyClearAndPrint() {\r\n    Method[] calculatorMethods = Calculator.class.getDeclaredMethods();\r\n    List<Method> calculatorVoidMethods = Arrays.stream(calculatorMethods)\r\n      .filter(method -> method.getReturnType().equals(Void.TYPE))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(calculatorVoidMethods)\r\n      .allMatch(method -> Arrays.asList(\"clear\", \"print\").contains(method.getName()));\r\n}\r\n```","```\r\npublic class Defer {\r\n    public static <V> V defer(Callable<V> callable) throws Exception {\r\n        return callable.call();\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenVoidCallable_whenDiffer_thenReturnNull() throws Exception {\r\n    Callable<Void> callable = new Callable<Void>() {\r\n        @Override\r\n        public Void call() {\r\n            System.out.println(\"Hello!\");\r\n            return null;\r\n        }\r\n    };\r\n\r\n    assertThat(Defer.defer(callable)).isNull();\r\n}\r\n```","```\r\npublic static <T, R> R defer(Function<T, R> function, T arg) {\r\n    return function.apply(arg);\r\n}\r\n```","```\r\n@Test\r\nvoid givenVoidFunction_whenDiffer_thenReturnNull() {\r\n    Function<String, Void> function = s -> {\r\n        System.out.println(\"Hello \" + s + \"!\");\r\n        return null;\r\n    };\r\n\r\n    assertThat(Defer.defer(function, \"World\")).isNull();\r\n}\r\n```","```\r\npublic static void defer(Runnable runnable) {\r\n    runnable.run();\r\n}\r\n```","```\r\nRunnable runnable = new Runnable() {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Hello!\");\r\n    }\r\n};\r\n\r\nDefer.defer(runnable);\r\n```","```\r\npublic class MyOwnDefer {\r\n    public static void defer(Runnable runnable) throws Exception {\r\n        Defer.defer(new Callable<Void>() {\r\n            @Override\r\n            public Void call() {\r\n                runnable.run();\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\npublic static <T> void defer(Consumer<T> consumer, T arg) {\r\n    consumer.accept(arg);\r\n}\r\n```","```\r\npublic interface Action {\r\n    void execute();\r\n}\r\n```","```\r\npublic static void defer(Action action) {\r\n    action.execute();\r\n}\r\n```","```\r\nAction action = () -> System.out.println(\"Hello!\");\r\n\r\nDefer.defer(action);\r\n```"]