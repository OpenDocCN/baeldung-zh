["```\r\n<dependency>\r\n    <groupId>io.reactivex</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>1.3.0</version>\r\n</dependency>\r\n```","```\r\npublic class ToCleanString implements Operator<String, String> {\r\n\r\n    public static ToCleanString toCleanString() {\r\n        return new ToCleanString();\r\n    }\r\n\r\n    private ToCleanString() {\r\n        super();\r\n    }\r\n\r\n    @Override\r\n    public Subscriber<? super String> call(final Subscriber<? super String> subscriber) {\r\n        return new Subscriber<String>(subscriber) {\r\n            @Override\r\n            public void onCompleted() {\r\n                if (!subscriber.isUnsubscribed()) {\r\n                    subscriber.onCompleted();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable t) {\r\n                if (!subscriber.isUnsubscribed()) {\r\n                    subscriber.onError(t);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNext(String item) {\r\n                if (!subscriber.isUnsubscribed()) {\r\n                    final String result = item.replaceAll(\"[^A-Za-z0-9]\", \"\");\r\n                    subscriber.onNext(result);\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n```","```\r\nobservable.lift(toCleanString())....\r\n```","```\r\n@Test\r\npublic void whenUseCleanStringOperator_thenSuccess() {\r\n    List<String> list = Arrays.asList(\"john_1\", \"tom-3\");\r\n    List<String> results = new ArrayList<>();\r\n    Observable<String> observable = Observable\r\n      .from(list)\r\n      .lift(toCleanString());\r\n    observable.subscribe(results::add);\r\n\r\n    assertThat(results, notNullValue());\r\n    assertThat(results, hasSize(2));\r\n    assertThat(results, hasItems(\"john1\", \"tom3\"));\r\n}\r\n```","```\r\npublic class ToLength implements Transformer<String, Integer> {\r\n\r\n    public static ToLength toLength() {\r\n        return new ToLength();\r\n    }\r\n\r\n    private ToLength() {\r\n        super();\r\n    }\r\n\r\n    @Override\r\n    public Observable<Integer> call(Observable<String> source) {\r\n        return source.map(String::length);\r\n    }\r\n}\r\n```","```\r\nobservable.compose(toLength())...\r\n```","```\r\n@Test\r\npublic void whenUseToLengthOperator_thenSuccess() {\r\n    List<String> list = Arrays.asList(\"john\", \"tom\");\r\n    List<Integer> results = new ArrayList<>();\r\n    Observable<Integer> observable = Observable\r\n      .from(list)\r\n      .compose(toLength());\r\n    observable.subscribe(results::add);\r\n\r\n    assertThat(results, notNullValue());\r\n    assertThat(results, hasSize(2));\r\n    assertThat(results, hasItems(4, 3));\r\n}\r\n```","```\r\nOperator<String, String> cleanStringFn = subscriber -> {\r\n    return new Subscriber<String>(subscriber) {\r\n        @Override\r\n        public void onCompleted() {\r\n            if (!subscriber.isUnsubscribed()) {\r\n                subscriber.onCompleted();\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable t) {\r\n            if (!subscriber.isUnsubscribed()) {\r\n                subscriber.onError(t);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onNext(String str) {\r\n            if (!subscriber.isUnsubscribed()) {\r\n                String result = str.replaceAll(\"[^A-Za-z0-9]\", \"\");\r\n                subscriber.onNext(result);\r\n            }\r\n        }\r\n    };\r\n};\r\n```","```\r\nList<String> results = new ArrayList<>();\r\nObservable.from(Arrays.asList(\"[[emailÂ protected]](/web/20220625222813/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \"or-an?ge\"))\r\n  .lift(cleanStringFn)\r\n  .subscribe(results::add);\r\n\r\nassertThat(results, notNullValue());\r\nassertThat(results, hasSize(2));\r\nassertThat(results, hasItems(\"apple\", \"orange\"));\r\n```","```\r\n@Test\r\npublic void whenUseFunctionTransformer_thenSuccess() {\r\n    Transformer<String, Integer> toLengthFn = s -> s.map(String::length);\r\n\r\n    List<Integer> results = new ArrayList<>();\r\n    Observable.from(Arrays.asList(\"apple\", \"orange\"))\r\n      .compose(toLengthFn)\r\n      .subscribe(results::add);\r\n\r\n    assertThat(results, notNullValue());\r\n    assertThat(results, hasSize(2));\r\n    assertThat(results, hasItems(5, 6));\r\n}\r\n```"]