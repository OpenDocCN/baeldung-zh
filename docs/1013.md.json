["```\r\npublic interface LogoutHandler {\r\n    void logout(HttpServletRequest request, HttpServletResponse response,Authentication authentication);\r\n} \r\n```","```\r\nspring.datasource.url=jdbc:postgresql://localhost:5432/test\r\nspring.datasource.username=test\r\nspring.datasource.password=test\r\nspring.jpa.hibernate.ddl-auto=create \r\n```","```\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Integer id;\r\n\r\n    @Column(unique = true)\r\n    private String login;\r\n\r\n    private String password;\r\n\r\n    private String role;\r\n\r\n    private String language;\r\n\r\n    // standard setters and getters\r\n} \r\n```","```\r\n@Service\r\npublic class UserCache {\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n\r\n    private final ConcurrentMap<String, User> store = new ConcurrentHashMap<>(256);\r\n} \r\n```","```\r\npublic User getByUserName(String userName) {\r\n    return store.computeIfAbsent(userName, k -> \r\n      entityManager.createQuery(\"from User where login=:login\", User.class)\r\n        .setParameter(\"login\", k)\r\n        .getSingleResult());\r\n} \r\n```","```\r\npublic void evictUser(String userName) {\r\n    store.remove(userName);\r\n} \r\n```","```\r\n@Controller\r\n@RequestMapping(path = \"/user\")\r\npublic class UserController {\r\n\r\n    private final UserCache userCache;\r\n\r\n    public UserController(UserCache userCache) {\r\n        this.userCache = userCache;\r\n    }\r\n\r\n    @GetMapping(path = \"/language\")\r\n    @ResponseBody\r\n    public String getLanguage() {\r\n        String userName = UserUtils.getAuthenticatedUserName();\r\n        User user = userCache.getByUserName(userName);\r\n        return user.getLanguage();\r\n    }\r\n} \r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class MvcConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private CustomLogoutHandler logoutHandler;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.httpBasic()\r\n            .and()\r\n                .authorizeRequests()\r\n                    .antMatchers(HttpMethod.GET, \"/user/**\")\r\n                    .hasRole(\"USER\")\r\n            .and()\r\n                .logout()\r\n                    .logoutUrl(\"/user/logout\")\r\n                    .addLogoutHandler(logoutHandler)\r\n                    .logoutSuccessHandler(new HttpStatusReturningLogoutSuccessHandler(HttpStatus.OK))\r\n                    .permitAll()\r\n            .and()\r\n                .csrf()\r\n                    .disable()\r\n                .formLogin()\r\n                    .disable();\r\n    }\r\n\r\n    // further configuration\r\n} \r\n```","```\r\n@Service\r\npublic class CustomLogoutHandler implements LogoutHandler {\r\n\r\n    private final UserCache userCache;\r\n\r\n    public CustomLogoutHandler(UserCache userCache) {\r\n        this.userCache = userCache;\r\n    }\r\n\r\n    @Override\r\n    public void logout(HttpServletRequest request, HttpServletResponse response, \r\n      Authentication authentication) {\r\n        String userName = UserUtils.getAuthenticatedUserName();\r\n        userCache.evictUser(userName);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenLogin_thenUseUserCache() {\r\n    assertThat(userCache.size()).isEqualTo(0);\r\n\r\n    ResponseEntity<String> response = restTemplate.withBasicAuth(\"user\", \"pass\")\r\n        .getForEntity(getLanguageUrl(), String.class);\r\n\r\n    assertThat(response.getBody()).contains(\"english\");\r\n\r\n    assertThat(userCache.size()).isEqualTo(1);\r\n\r\n    HttpHeaders requestHeaders = new HttpHeaders();\r\n    requestHeaders.add(\"Cookie\", response.getHeaders()\r\n        .getFirst(HttpHeaders.SET_COOKIE));\r\n\r\n    response = restTemplate.exchange(getLanguageUrl(), HttpMethod.GET, \r\n      new HttpEntity<String>(requestHeaders), String.class);\r\n    assertThat(response.getBody()).contains(\"english\");\r\n\r\n    response = restTemplate.exchange(getLogoutUrl(), HttpMethod.GET, \r\n      new HttpEntity<String>(requestHeaders), String.class);\r\n    assertThat(response.getStatusCode()\r\n        .value()).isEqualTo(200);\r\n} \r\n```","```\r\n@Test\r\npublic void whenLogout_thenCacheIsEmpty() {\r\n    assertThat(userCache.size()).isEqualTo(0);\r\n\r\n    ResponseEntity<String> response = restTemplate.withBasicAuth(\"user\", \"pass\")\r\n        .getForEntity(getLanguageUrl(), String.class);\r\n\r\n    assertThat(response.getBody()).contains(\"english\");\r\n\r\n    assertThat(userCache.size()).isEqualTo(1);\r\n\r\n    HttpHeaders requestHeaders = new HttpHeaders();\r\n    requestHeaders.add(\"Cookie\", response.getHeaders()\r\n        .getFirst(HttpHeaders.SET_COOKIE));\r\n\r\n    response = restTemplate.exchange(getLogoutUrl(), HttpMethod.GET, \r\n      new HttpEntity<String>(requestHeaders), String.class);\r\n    assertThat(response.getStatusCode()\r\n        .value()).isEqualTo(200);\r\n\r\n    assertThat(userCache.size()).isEqualTo(0);\r\n\r\n    response = restTemplate.exchange(getLanguageUrl(), HttpMethod.GET, \r\n      new HttpEntity<String>(requestHeaders), String.class);\r\n    assertThat(response.getStatusCode()\r\n        .value()).isEqualTo(401);\r\n} \r\n```"]