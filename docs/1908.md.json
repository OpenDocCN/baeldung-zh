["```\r\n<dependency>\r\n    <groupId>org.apache.olingo</groupId>\r\n    <artifactId>olingo-odata2-core</artifactId>\r\n    <version>2.0.11</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>javax.ws.rs</groupId>\r\n            <artifactId>javax.ws.rs-api</artifactId>\r\n         </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.olingo</groupId>\r\n    <artifactId>olingo-odata2-jpa-processor-core</artifactId>\r\n    <version>2.0.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.olingo</groupId>\r\n    <artifactId>olingo-odata2-jpa-processor-ref</artifactId>\r\n    <version>2.0.11</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.eclipse.persistence</groupId>\r\n            <artifactId>eclipselink</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```","```\r\n@Entity\r\n@Table(name=\"car_maker\")\r\npublic class CarMaker {    \r\n    @Id @GeneratedValue(strategy=GenerationType.IDENTITY)    \r\n    private Long id;\r\n    @NotNull\r\n    private String name;\r\n    @OneToMany(mappedBy=\"maker\",orphanRemoval = true,cascade=CascadeType.ALL)\r\n    private List<CarModel> models;\r\n    // ... getters, setters and hashcode omitted \r\n}\r\n\r\n@Entity\r\n@Table(name=\"car_model\")\r\npublic class CarModel {\r\n    @Id @GeneratedValue(strategy=GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @NotNull\r\n    private String name;\r\n\r\n    @NotNull\r\n    private Integer year;\r\n\r\n    @NotNull\r\n    private String sku;\r\n\r\n    @ManyToOne(optional=false,fetch=FetchType.LAZY) @JoinColumn(name=\"maker_fk\")\r\n    private CarMaker maker;\r\n\r\n    // ... getters, setters and hashcode omitted\r\n}\r\n```","```\r\n@Component\r\npublic class CarsODataJPAServiceFactory extends ODataJPAServiceFactory {\r\n    // other methods omitted...\r\n\r\n    @Override\r\n    public ODataJPAContext initializeODataJPAContext() throws ODataJPARuntimeException {\r\n        ODataJPAContext ctx = getODataJPAContext();\r\n        ODataContext octx = ctx.getODataContext();\r\n        HttpServletRequest request = (HttpServletRequest) octx.getParameter(\r\n          ODataContext.HTTP_SERVLET_REQUEST_OBJECT);\r\n        EntityManager em = (EntityManager) request\r\n          .getAttribute(EntityManagerFilter.EM_REQUEST_ATTRIBUTE);\r\n\r\n        ctx.setEntityManager(em);\r\n        ctx.setPersistenceUnitName(\"default\");\r\n        ctx.setContainerManaged(true);                \r\n        return ctx;\r\n    }\r\n} \r\n```","```\r\n@Component\r\n@ApplicationPath(\"/odata\")\r\npublic class JerseyConfig extends ResourceConfig {\r\n    public JerseyConfig(CarsODataJPAServiceFactory serviceFactory, EntityManagerFactory emf) {        \r\n        ODataApplication app = new ODataApplication();        \r\n        app\r\n          .getClasses()\r\n          .forEach( c -> {\r\n              if ( !ODataRootLocator.class.isAssignableFrom(c)) {\r\n                  register(c);\r\n              }\r\n          });\r\n\r\n        register(new CarsRootLocator(serviceFactory)); \r\n        register(new EntityManagerFilter(emf));\r\n    }\r\n\r\n    // ... other methods omitted\r\n}\r\n```","```\r\n@Path(\"/\")\r\npublic class CarsRootLocator extends ODataRootLocator {\r\n    private CarsODataJPAServiceFactory serviceFactory;\r\n    public CarsRootLocator(CarsODataJPAServiceFactory serviceFactory) {\r\n        this.serviceFactory = serviceFactory;\r\n    }\r\n\r\n    @Override\r\n    public ODataServiceFactory getServiceFactory() {\r\n       return this.serviceFactory;\r\n    } \r\n} \r\n```","```\r\n@Provider\r\npublic static class EntityManagerFilter implements ContainerRequestFilter, \r\n  ContainerResponseFilter {\r\n\r\n    public static final String EM_REQUEST_ATTRIBUTE = \r\n      EntityManagerFilter.class.getName() + \"_ENTITY_MANAGER\";\r\n    private final EntityManagerFactory emf;\r\n\r\n    @Context\r\n    private HttpServletRequest httpRequest;\r\n\r\n    public EntityManagerFilter(EntityManagerFactory emf) {\r\n        this.emf = emf;\r\n    }\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext ctx) throws IOException {\r\n        EntityManager em = this.emf.createEntityManager();\r\n        httpRequest.setAttribute(EM_REQUEST_ATTRIBUTE, em);\r\n        if (!\"GET\".equalsIgnoreCase(ctx.getMethod())) {\r\n            em.getTransaction().begin();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext requestContext, \r\n      ContainerResponseContext responseContext) throws IOException {\r\n        EntityManager em = (EntityManager) httpRequest.getAttribute(EM_REQUEST_ATTRIBUTE);\r\n        if (!\"GET\".equalsIgnoreCase(requestContext.getMethod())) {\r\n            EntityTransaction t = em.getTransaction();\r\n            if (t.isActive() && !t.getRollbackOnly()) {\r\n                t.commit();\r\n            }\r\n        }\r\n\r\n        em.close();\r\n    }\r\n} \r\n```","```\r\ncurl http://localhost:8080/odata/$metadata\r\n```","```\r\ncurl http://localhost:8080/odata/CarMakers\r\ncurl http://localhost:8080/odata/CarModels\r\ncurl http://localhost:8080/odata/CarMakers(1)\r\ncurl http://localhost:8080/odata/CarModels(1)\r\ncurl http://localhost:8080/odata/CarModels(1)/CarMakerDetails \r\n```","```\r\ncurl http://localhost:8080/odata/CarMakers?$filter=startswith(Name,'B') \r\n```"]