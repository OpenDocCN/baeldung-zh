["```\r\nstatic class InvalidFormatException extends DateParseException {\r\n\r\n    InvalidFormatException(String input, Throwable thr) {\r\n        super(\"Invalid date format: \" + input, thr);\r\n    }\r\n}\r\n\r\nstatic class DateOutOfRangeException extends DateParseException {\r\n\r\n    DateOutOfRangeException(String date) {\r\n        super(\"Date out of range: \" + date);\r\n    }\r\n\r\n}\r\n```","```\r\nstatic class DateParseException extends RuntimeException {\r\n\r\n    DateParseException(String input) {\r\n        super(input);\r\n    }\r\n\r\n    DateParseException(String input, Throwable thr) {\r\n        super(input, thr);\r\n    }\r\n}\r\n```","```\r\nstatic class AgeCalculator {\r\n\r\n    private static LocalDate parseDate(String birthDateAsString) {\r\n        LocalDate birthDate;\r\n        try {\r\n            birthDate = LocalDate.parse(birthDateAsString);\r\n        } catch (DateTimeParseException ex) {\r\n            throw new InvalidFormatException(birthDateAsString, ex);\r\n        }\r\n\r\n        if (birthDate.isAfter(LocalDate.now())) {\r\n            throw new DateOutOfRangeException(birthDateAsString);\r\n        }\r\n\r\n        return birthDate;\r\n    }\r\n}\r\n```","```\r\npublic static int calculateAge(String birthDate) {\r\n    if (birthDate == null || birthDate.isEmpty()) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n\r\n    try {\r\n        return Period\r\n          .between(parseDate(birthDate), LocalDate.now())\r\n          .getYears();\r\n    } catch (DateParseException ex) {\r\n        throw new CalculationException(ex);\r\n    }\r\n}\r\n```","```\r\nstatic class CalculationException extends RuntimeException {\r\n\r\n    CalculationException(DateParseException ex) {\r\n        super(ex);\r\n    }\r\n}\r\n```","```\r\nAgeCalculator.calculateAge(\"2019-10-01\");\r\n```","```\r\npublic static Throwable findCauseUsingPlainJava(Throwable throwable) {\r\n    Objects.requireNonNull(throwable);\r\n    Throwable rootCause = throwable;\r\n    while (rootCause.getCause() != null && rootCause.getCause() != rootCause) {\r\n        rootCause = rootCause.getCause();\r\n    }\r\n    return rootCause;\r\n}\r\n```","```\r\ntry {\r\n    AgeCalculator.calculateAge(\"010102\");\r\n} catch (CalculationException ex) {\r\n    assertTrue(findCauseUsingPlainJava(ex) instanceof DateTimeParseException);\r\n}\r\n```","```\r\ntry {\r\n    AgeCalculator.calculateAge(\"2020-04-04\");\r\n} catch (CalculationException ex) {\r\n    assertTrue(findCauseUsingPlainJava(ex) instanceof DateOutOfRangeException);\r\n}\r\n```","```\r\ntry {\r\n    AgeCalculator.calculateAge(null);\r\n} catch (Exception ex) {\r\n    assertTrue(findCauseUsingPlainJava(ex) instanceof IllegalArgumentException);\r\n}\r\n```","```\r\ntry {\r\n    AgeCalculator.calculateAge(\"010102\");\r\n} catch (CalculationException ex) {\r\n    assertTrue(ExceptionUtils.getRootCause(ex) instanceof DateTimeParseException);\r\n}\r\n```","```\r\ntry {\r\n    AgeCalculator.calculateAge(\"010102\");\r\n} catch (CalculationException ex) {\r\n    assertTrue(Throwables.getRootCause(ex) instanceof DateTimeParseException);\r\n}\r\n```"]