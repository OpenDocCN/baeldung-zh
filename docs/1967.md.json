["```\r\npublic interface BookRepository extends JpaRepository<Book, String> {\r\n\r\n    default int wasteTime() {\r\n        Stopwatch watch = Stopwatch.createStarted();\r\n\r\n        // delay for 2 seconds\r\n        while (watch.elapsed(SECONDS) < 2) {\r\n          int i = Integer.MIN_VALUE;\r\n          while (i < Integer.MAX_VALUE) {\r\n              i++;\r\n          }\r\n        }\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/author/transactional\")\r\n@Transactional(timeout = 1)\r\npublic String getWithTransactionTimeout(@RequestParam String title) {\r\n    bookRepository.wasteTime();\r\n    return bookRepository.findById(title)\r\n      .map(Book::getAuthor)\r\n      .orElse(\"No book found for this title.\");\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.github.resilience4j</groupId>\r\n    <artifactId>resilience4j-timelimiter</artifactId>\r\n    <version>1.6.1</version>\r\n</dependency>\r\n```","```\r\nprivate TimeLimiter ourTimeLimiter = TimeLimiter.of(TimeLimiterConfig.custom()\r\n  .timeoutDuration(Duration.ofMillis(500)).build());\r\n```","```\r\n@GetMapping(\"/author/resilience4j\")\r\npublic Callable<String> getWithResilience4jTimeLimiter(@RequestParam String title) {\r\n    return TimeLimiter.decorateFutureSupplier(ourTimeLimiter, () ->\r\n      CompletableFuture.supplyAsync(() -> {\r\n        bookRepository.wasteTime();\r\n        return bookRepository.findById(title)\r\n          .map(Book::getAuthor)\r\n          .orElse(\"No book found for this title.\");\r\n    }));\r\n}\r\n```","```\r\nspring.mvc.async.request-timeout=750\r\n```","```\r\n@GetMapping(\"/author/mvc-request-timeout\")\r\npublic Callable<String> getWithMvcRequestTimeout(@RequestParam String title) {\r\n    return () -> {\r\n        bookRepository.wasteTime();\r\n        return bookRepository.findById(title)\r\n          .map(Book::getAuthor)\r\n          .orElse(\"No book found for this title.\");\r\n    };\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n    <version>2.4.2</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic WebClient webClient() {\r\n    return WebClient.builder()\r\n      .baseUrl(\"http://localhost:8080\")\r\n      .clientConnector(new ReactorClientHttpConnector(\r\n        HttpClient.create().responseTimeout(Duration.ofMillis(250))\r\n      ))\r\n      .build();\r\n}\r\n```","```\r\n@GetMapping(\"/author/webclient\")\r\npublic String getWithWebClient(@RequestParam String title) {\r\n    return webClient.get()\r\n      .uri(uriBuilder -> uriBuilder\r\n        .path(\"/author/transactional\")\r\n        .queryParam(\"title\", title)\r\n        .build())\r\n      .retrieve()\r\n      .bodyToMono(String.class)\r\n      .block();\r\n}\r\n```"]