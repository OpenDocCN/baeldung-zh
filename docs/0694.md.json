["```\r\npublic class Book {\r\n    private Integer bookId;\r\n    private String title;\r\n    private String author;\r\n    //getters, setters, constructors, equals and hashcode omitted\r\n}\r\n```","```\r\n[ {\r\n    \"bookId\" : 1,\r\n    \"title\" : \"A Song of Ice and Fire\",\r\n    \"author\" : \"George R. R. Martin\"\r\n}, {\r\n    \"bookId\" : 2,\r\n    \"title\" : \"The Hitchhiker's Guide to the Galaxy\",\r\n    \"author\" : \"Douglas Adams\"\r\n}, {\r\n    \"bookId\" : 3,\r\n    \"title\" : \"Hackers And Painters\",\r\n    \"author\" : \"Paul Graham\"\r\n} ] \r\n```","```\r\n@Test\r\nvoid givenJsonString_whenDeserializingToList_thenThrowingClassCastException() \r\n  throws JsonProcessingException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    List<Book> bookList = objectMapper.readValue(jsonString, ArrayList.class);\r\n    assertThat(bookList).size().isEqualTo(3);\r\n    assertThatExceptionOfType(ClassCastException.class)\r\n      .isThrownBy(() -> bookList.get(0).getBookId())\r\n      .withMessageMatching(\".*java.util.LinkedHashMap cannot be cast to .*com.baeldung.jackson.tocollection.Book.*\");\r\n}\r\n```","```\r\n@Test\r\nvoid givenJsonString_whenDeserializingWithTypeReference_thenGetExpectedList() \r\n  throws JsonProcessingException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    List<Book> bookList = objectMapper.readValue(jsonString, new TypeReference<List<Book>>() {});\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```","```\r\nobjectMapper.getTypeFactory().constructCollectionType(ArrayList.class, Book.class);\r\n```","```\r\n@Test\r\nvoid givenJsonString_whenDeserializingWithJavaType_thenGetExpectedList() \r\n  throws JsonProcessingException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    CollectionType listType = \r\n      objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, Book.class);\r\n    List<Book> bookList = objectMapper.readValue(jsonString, listType);\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```","```\r\n@Test\r\nvoid givenJsonString_whenDeserializingWithConvertValueAndTypeReference_thenGetExpectedList() \r\n  throws JsonProcessingException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    JsonNode jsonNode = objectMapper.readTree(jsonString);\r\n    List<Book> bookList = objectMapper.convertValue(jsonNode, new TypeReference<List<Book>>() {});\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```","```\r\n@Test\r\nvoid givenJsonString_whenDeserializingWithConvertValueAndJavaType_thenGetExpectedList() \r\n  throws JsonProcessingException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    JsonNode jsonNode = objectMapper.readTree(jsonString);\r\n    List<Book> bookList = objectMapper.convertValue(jsonNode, \r\n      objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, Book.class));\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```","```\r\npublic static <T> List<T> jsonArrayToList(String json, Class<T> elementClass) throws IOException {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    CollectionType listType = \r\n      objectMapper.getTypeFactory().constructCollectionType(ArrayList.class, elementClass);\r\n    return objectMapper.readValue(json, listType);\r\n} \r\n```","```\r\n@Test\r\nvoid givenJsonString_whenCalljsonArrayToList_thenGetExpectedList() throws IOException {\r\n    String jsonString = readFile(\"/to-java-collection/books.json\");\r\n    List<Book> bookList = JsonToCollectionUtil.jsonArrayToList(jsonString, Book.class);\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```","```\r\npublic static <T> List<T> jsonArrayToList(String json, Class<T> elementClass) throws IOException {\r\n    return new ObjectMapper().readValue(json, new TypeReference<List<T>>() {});\r\n} \r\n```","```\r\njava.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class com.baeldung...Book ...\r\n```","```\r\n<ArrayList>\r\n    <item>\r\n        <bookId>1</bookId>\r\n        <title>A Song of Ice and Fire</title>\r\n        <author>George R. R. Martin</author>\r\n    </item>\r\n    <item>\r\n        <bookId>2</bookId>\r\n        <title>The Hitchhiker's Guide to the Galaxy</title>\r\n        <author>Douglas Adams</author>\r\n    </item>\r\n    <item>\r\n        <bookId>3</bookId>\r\n        <title>Hackers And Painters</title>\r\n        <author>Paul Graham</author>\r\n    </item>\r\n</ArrayList> \r\n```","```\r\n@Test\r\nvoid givenXml_whenDeserializingToList_thenThrowingClassCastException() \r\n  throws JsonProcessingException {\r\n    String xml = readFile(\"/to-java-collection/books.xml\");\r\n    List<Book> bookList = xmlMapper.readValue(xml, ArrayList.class);\r\n    assertThat(bookList).size().isEqualTo(3);\r\n    assertThatExceptionOfType(ClassCastException.class)\r\n      .isThrownBy(() -> bookList.get(0).getBookId())\r\n      .withMessageMatching(\".*java.util.LinkedHashMap cannot be cast to .*com.baeldung.jackson.tocollection.Book.*\");\r\n} \r\n```","```\r\n@Test\r\nvoid givenXml_whenDeserializingWithTypeReference_thenGetExpectedList() \r\n  throws JsonProcessingException {\r\n    String xml = readFile(\"/to-java-collection/books.xml\");\r\n    List<Book> bookList = xmlMapper.readValue(xml, new TypeReference<List<Book>>() {});\r\n    assertThat(bookList.get(0)).isInstanceOf(Book.class);\r\n    assertThat(bookList).isEqualTo(expectedBookList);\r\n} \r\n```"]