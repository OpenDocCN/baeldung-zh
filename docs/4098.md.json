["```\r\n@Bean\r\npublic OAuth2ProtectedResourceDetails reddit() {\r\n    AuthorizationCodeResourceDetails details = \r\n      new AuthorizationCodeResourceDetails();\r\n    details.setScope(Arrays.asList(\"identity\", \"read\", \"submit\", \"edit\"));\r\n    ...\r\n}\r\n```","```\r\n@Entity\r\npublic class Post {\r\n    ...\r\n    private String redditID;\r\n    private int noOfAttempts;\r\n    private int timeInterval;\r\n    private int minScoreRequired;\r\n}\r\n```","```\r\npublic interface PostRepository extends JpaRepository<Post, Long> {\r\n\r\n    List<Post> findBySubmissionDateBeforeAndIsSent(Date date, boolean sent);\r\n\r\n    List<Post> findByUser(User user);\r\n\r\n    List<Post> findByRedditIDNotNullAndNoOfAttemptsGreaterThan(int attempts);\r\n}\r\n```","```\r\n@Scheduled(fixedRate = 3 * 60 * 1000)\r\npublic void checkAndReSubmitPosts() {\r\n    List<Post> submitted = \r\n      postReopsitory.findByRedditIDNotNullAndNoOfAttemptsGreaterThan(0);\r\n    for (Post post : submitted) {\r\n        checkAndReSubmit(post);\r\n    }\r\n}\r\n```","```\r\nprivate void checkAndReSubmit(Post post) {\r\n    try {\r\n        checkAndReSubmitInternal(post);\r\n    } catch (final Exception e) {\r\n        logger.error(\"Error occurred while check post \" + post.toString(), e);\r\n    }\r\n}\r\nprivate void checkAndReSubmitInternal(Post post) {\r\n    if (didIntervalPassed(post.getSubmissionDate(), post.getTimeInterval())) {\r\n        int score = getPostScore(post.getRedditID());\r\n        if (score < post.getMinScoreRequired()) {\r\n            deletePost(post.getRedditID());\r\n            resetPost(post);\r\n        } else {\r\n            post.setNoOfAttempts(0);\r\n            postReopsitory.save(post);\r\n        }\r\n    }\r\n}\r\nprivate boolean didIntervalPassed(Date submissonDate, int postInterval) {\r\n    long currentTime = new Date().getTime();\r\n    long interval = currentTime - submissonDate.getTime();\r\n    long intervalInMinutes = TimeUnit.MINUTES.convert(interval, TimeUnit.MILLISECONDS);\r\n    return intervalInMinutes > postInterval;\r\n}\r\nprivate void resetPost(Post post) {\r\n    long time = new Date().getTime();\r\n    time += TimeUnit.MILLISECONDS.convert(post.getTimeInterval(), TimeUnit.MINUTES);\r\n    post.setRedditID(null);\r\n    post.setSubmissionDate(new Date(time));\r\n    post.setSent(false);\r\n    post.setSubmissionResponse(\"Not sent yet\");\r\n    postReopsitory.save(post);\r\n}\r\n```","```\r\nprivate void submitPostInternal(Post post) {\r\n    ...\r\n    JsonNode node = redditRestTemplate.postForObject(\r\n      \"https://oauth.reddit.com/api/submit\", param, JsonNode.class);\r\n    JsonNode errorNode = node.get(\"json\").get(\"errors\").get(0);\r\n    if (errorNode == null) {\r\n        post.setRedditID(node.get(\"json\").get(\"data\").get(\"id\").asText());\r\n        post.setNoOfAttempts(post.getNoOfAttempts() - 1);\r\n        ...\r\n}\r\n```","```\r\nprivate int getPostScore(String redditId) {\r\n    JsonNode node = redditRestTemplate.getForObject(\r\n      \"https://oauth.reddit.com/api/info?id=t3_\" + redditId, JsonNode.class);\r\n    int score = node.get(\"data\").get(\"children\").get(0).get(\"data\").get(\"score\").asInt();\r\n    return score;\r\n}\r\n```","```\r\nprivate void deletePost(String redditId) {\r\n    MultiValueMap<String, String> param = new LinkedMultiValueMap<String, String>();\r\n    param.add(\"id\", \"t3_\" + redditId);\r\n    redditRestTemplate.postForObject(\r\n      \"https://oauth.reddit.com/api/del.json\", param, JsonNode.class);\r\n}\r\n```","```\r\n@RequestMapping(value = \"/schedule\", method = RequestMethod.POST)\r\npublic String schedule(Model model, \r\n  @RequestParam Map<String, String> formParams) throws ParseException {\r\n    Post post = new Post();\r\n    post.setTitle(formParams.get(\"title\"));\r\n    post.setSubreddit(formParams.get(\"sr\"));\r\n    post.setUrl(formParams.get(\"url\"));\r\n    post.setNoOfAttempts(Integer.parseInt(formParams.get(\"attempt\")));\r\n    post.setTimeInterval(Integer.parseInt(formParams.get(\"interval\")));\r\n    post.setMinScoreRequired(Integer.parseInt(formParams.get(\"score\")));\r\n    ....\r\n}\r\n```","```\r\n<label class=\"col-sm-3\">Resubmit Settings</label>\r\n\r\n<label>Number of Attempts</label> \r\n<select name=\"attempt\">\r\n    <option value=\"0\" selected>None</option>\r\n    <option value=\"2\">2</option>\r\n    <option value=\"3\">3</option>\r\n    <option value=\"4\">4</option>\r\n    <option value=\"5\">5</option>\r\n</select>\r\n\r\n<label>Time interval</label>\r\n<select name=\"interval\">\r\n    <option value=\"0\" selected >None</option>\r\n    <option value=\"45\">45 minutes</option>\r\n    <option value=\"60\">1 hour</option>\r\n    <option value=\"120\">2 hours</option>\r\n</select>\r\n\r\n<label>Min score</label>\r\n<input type=\"number\"value=\"0\" name=\"score\" required/>\r\n```"]