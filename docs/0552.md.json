["```\r\n<dependency>\r\n    <groupId>com.google.inject</groupId>\r\n    <artifactId>guice</artifactId>\r\n    <version>4.1.0</version>\r\n</dependency> \r\n```","```\r\npublic class Communication {\r\n\r\n    @Inject \r\n    private Logger logger;\r\n\r\n    @Inject\r\n    private Communicator communicator;\r\n\r\n    public Communication(Boolean keepRecords) {\r\n        if (keepRecords) {\r\n            System.out.println(\"Message logging enabled\");\r\n        }\r\n    }\r\n\r\n    public boolean sendMessage(String message) {\r\n        return communicator.sendMessage(message);\r\n    }\r\n\r\n}\r\n```","```\r\npublic static void main(String[] args){\r\n    Injector injector = Guice.createInjector(new BasicModule());\r\n    Communication comms = injector.getInstance(Communication.class);\r\n} \r\n```","```\r\npublic class BasicModule extends AbstractModule {\r\n\r\n    @Override\r\n    protected void configure() {\r\n        bind(Communicator.class).to(DefaultCommunicatorImpl.class);\r\n    }\r\n}\r\n```","```\r\n@Inject @Named(\"DefaultCommunicator\")\r\nCommunicator communicator; \r\n```","```\r\n@Override\r\nprotected void configure() {\r\n    bind(Communicator.class)\r\n      .annotatedWith(Names.named(\"DefaultCommunicator\"))\r\n      .to(DefaultCommunicatorImpl.class);\r\n} \r\n```","```\r\npublic class BasicModule extends AbstractModule {\r\n\r\n    @Override\r\n    protected void configure() {\r\n        bind(Boolean.class).toInstance(true);\r\n        bind(Communication.class).toConstructor(\r\n          Communication.class.getConstructor(Boolean.TYPE));\r\n} \r\n```","```\r\npublic class BasicModule extends AbstractModule {\r\n\r\n    @Override\r\n    protected void configure() {\r\n        bind(Communication.class)\r\n          .toInstance(new Communication(true));\r\n    }    \r\n}\r\n```","```\r\n@Inject @Named(\"SMSComms\")\r\nCommunicationMode smsComms;\r\n```","```\r\n@Inject\r\npublic void setEmailCommunicator(@Named(\"EmailComms\") CommunicationMode emailComms) {\r\n    this.emailComms = emailComms;\r\n} \r\n```","```\r\n@Inject\r\npublic Communication(@Named(\"IMComms\") CommunicationMode imComms) {\r\n    this.imComms= imComms;\r\n} \r\n```","```\r\nbind(Communicator.class).annotatedWith(Names.named(\"AnotherCommunicator\"))\r\n  .to(Communicator.class).in(Scopes.SINGLETON); \r\n```","```\r\nbind(Communicator.class).annotatedWith(Names.named(\"AnotherCommunicator\"))\r\n  .to(Communicator.class)\r\n  .asEagerSingleton(); \r\n```","```\r\npublic class MessageLogger implements MethodInterceptor {\r\n\r\n    @Inject\r\n    Logger logger;\r\n\r\n    @Override\r\n    public Object invoke(MethodInvocation invocation) throws Throwable {\r\n        Object[] objectArray = invocation.getArguments();\r\n        for (Object object : objectArray) {\r\n            logger.info(\"Sending message: \" + object.toString());\r\n        }\r\n        return invocation.proceed();\r\n    }\r\n} \r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.METHOD)\r\npublic @interface MessageSentLoggable {\r\n} \r\n```","```\r\npublic class AOPModule extends AbstractModule {\r\n\r\n    @Override\r\n    protected void configure() {\r\n        bindInterceptor(\r\n            Matchers.any(),\r\n            Matchers.annotatedWith(MessageSentLoggable.class),\r\n            new MessageLogger()\r\n        );\r\n    }\r\n} \r\n```","```\r\n@Override\r\n@MessageSentLoggable\r\npublic boolean sendMessage(String message) {\r\n    logger.info(\"SMS message sent\");\r\n    return true;\r\n}\r\n\r\npublic static void main(String[] args) {\r\n    Injector injector = Guice.createInjector(new BasicModule(), new AOPModule());\r\n    Communication comms = injector.getInstance(Communication.class);\r\n}\r\n```"]