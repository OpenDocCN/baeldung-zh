["```\r\n<dependency>\r\n    <groupId>org.immutables</groupId>\r\n    <artifactId>value</artifactId>\r\n    <version>2.2.10</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\n@Value.Immutable\r\npublic abstract class Person {\r\n\r\n    abstract String getName();\r\n    abstract Integer getAge();\r\n\r\n}\r\n```","```\r\n@Generated({\"Immutables.generator\", \"Person\"})\r\npublic final class ImmutablePerson extends Person {\r\n\r\n    private final String name;\r\n    private final Integer age;\r\n\r\n    private ImmutablePerson(String name, Integer age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    @Override\r\n    String getName() {\r\n        return name;\r\n    }\r\n\r\n    @Override\r\n    Integer getAge() {\r\n        return age;\r\n    }\r\n\r\n    // toString, hashcode, equals, copyOf and Builder omitted\r\n\r\n}\r\n```","```\r\nImmutablePerson john = ImmutablePerson.builder()\r\n  .age(42)\r\n  .name(\"John\")\r\n  .build();\r\n```","```\r\nImmutablePerson john43 = john.withAge(43); \r\n```","```\r\nassertThat(john).isNotSameAs(john43);\r\n```","```\r\nassertThat(john.getAge()).isEqualTo(42);\r\n```","```\r\n@Value.Immutable\r\npublic abstract class Person {\r\n\r\n    @Value.Parameter\r\n    abstract String getName();\r\n\r\n    @Value.Parameter\r\n    abstract Integer getAge();\r\n}\r\n```","```\r\nImmutablePerson.of(\"John\", 42);\r\n```","```\r\n@Value.Immutable\r\npublic abstract class Person {\r\n\r\n    abstract String getName();\r\n\r\n    @Value.Default\r\n    Integer getAge() {\r\n        return 42;\r\n    }\r\n}\r\n```","```\r\nImmutablePerson john = ImmutablePerson.builder()\r\n  .name(\"John\")\r\n  .build();\r\n\r\nassertThat(john.getAge()).isEqualTo(42);\r\n```","```\r\n@Value.Immutable\r\npublic abstract class Person {\r\n\r\n    abstract String getName();\r\n    abstract Integer getAge();\r\n\r\n    @Value.Auxiliary\r\n    abstract String getAuxiliaryField();\r\n\r\n}\r\n```","```\r\nImmutablePerson john1 = ImmutablePerson.builder()\r\n  .name(\"John\")\r\n  .age(42)\r\n  .auxiliaryField(\"Value1\")\r\n  .build();\r\n\r\nImmutablePerson john2 = ImmutablePerson.builder()\r\n  .name(\"John\")\r\n  .age(42)\r\n  .auxiliaryField(\"Value2\")\r\n  .build(); \r\n```","```\r\nassertThat(john1.equals(john2)).isTrue();\r\n```","```\r\nassertThat(john1.toString()).isEqualTo(john2.toString()); \r\n```","```\r\nassertThat(john1.hashCode()).isEqualTo(john2.hashCode());\r\n```","```\r\n@Value.Immutable(prehash = true)\r\npublic abstract class Person {\r\n\r\n    abstract String getName();\r\n    abstract Integer getAge();\r\n\r\n}\r\n```","```\r\n@Generated({\"Immutables.generator\", \"Person\"})\r\npublic final class ImmutablePerson extends Person {\r\n\r\n    private final String name;\r\n    private final Integer age;\r\n    private final int hashCode;\r\n\r\n    private ImmutablePerson(String name, Integer age) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.hashCode = computeHashCode();\r\n    }\r\n\r\n    // generated methods\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return hashCode;\r\n    }\r\n} \r\n```"]