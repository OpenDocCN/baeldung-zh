["```\r\npublic enum TimeGranularity {\r\n    SECONDS {\r\n        public long toMillis() {\r\n            return TimeUnit.SECONDS.toMillis(1);\r\n        }\r\n    }, MINUTES {\r\n        public long toMillis() {\r\n            return TimeUnit.MINUTES.toMillis(1);\r\n        }\r\n    }, HOURS {\r\n        public long toMillis() {\r\n            return TimeUnit.HOURS.toMillis(1);\r\n        }\r\n    }, DAYS {\r\n        public long toMillis() {\r\n            return TimeUnit.DAYS.toMillis(1);\r\n        }\r\n    }, WEEKS {\r\n        public long toMillis() {\r\n            return TimeUnit.DAYS.toMillis(7);\r\n        }\r\n    }, MONTHS {\r\n        public long toMillis() {\r\n            return TimeUnit.DAYS.toMillis(30);\r\n        }\r\n    }, YEARS {\r\n        public long toMillis() {\r\n            return TimeUnit.DAYS.toMillis(365);\r\n        }\r\n    }, DECADES {\r\n        public long toMillis() {\r\n            return TimeUnit.DAYS.toMillis(365 * 10);\r\n        }\r\n    };\r\n\r\n    public abstract long toMillis();\r\n}\r\n```","```\r\nstatic String calculateTimeAgoByTimeGranularity(Date pastTime, TimeGranularity granularity) {\r\n    long timeDifferenceInMillis = getCurrentTime() - pastTime.getTime();\r\n    return timeDifferenceInMillis / granularity.toMillis() + \" \" + \r\n      granularity.name().toLowerCase() + \" ago\";\r\n}\r\n```","```\r\nAssert.assertEquals(\"5 hours ago\", \r\n  TimeAgoCalculator.calculateTimeAgoByTimeGranularity(\r\n    new Date(getCurrentTime() - (5 * 60 * 60 * 1000)), TimeGranularity.HOURS));\r\n```","```\r\nstatic String calculateHumanFriendlyTimeAgo(Date pastTime) {\r\n    long timeDifferenceInMillis = getCurrentTime() - pastTime.getTime();\r\n    if (timeDifferenceInMillis / TimeGranularity.DECADES.toMillis() > 0) {\r\n        return \"several decades ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.YEARS.toMillis() > 0) {\r\n        return \"several years ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.MONTHS.toMillis() > 0) {\r\n        return \"several months ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.WEEKS.toMillis() > 0) {\r\n        return \"several weeks ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.DAYS.toMillis() > 0) {\r\n        return \"several days ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.HOURS.toMillis() > 0) {\r\n        return \"several hours ago\";\r\n    } else if (timeDifferenceInMillis / TimeGranularity.MINUTES.toMillis() > 0) {\r\n        return \"several minutes ago\";\r\n    } else {\r\n        return \"moments ago\";\r\n    }\r\n}\r\n```","```\r\nAssert.assertEquals(\"several hours ago\", \r\n  TimeAgoCalculator.calculateHumanFriendlyTimeAgo(new Date(getCurrentTime() - (5 * 60 * 60 * 1000))));\r\n```","```\r\nstatic String calculateExactTimeAgoWithJodaTime(Date pastTime) {\r\n    Period period = new Period(new DateTime(pastTime.getTime()), new DateTime(getCurrentTime()));\r\n    PeriodFormatter formatter = new PeriodFormatterBuilder().appendYears()\r\n      .appendSuffix(\" year \", \" years \")\r\n      .appendSeparator(\"and \")\r\n      .appendMonths()\r\n      .appendSuffix(\" month \", \" months \")\r\n      .appendSeparator(\"and \")\r\n      .appendWeeks()\r\n      .appendSuffix(\" week \", \" weeks \")\r\n      .appendSeparator(\"and \")\r\n      .appendDays()\r\n      .appendSuffix(\" day \", \" days \")\r\n      .appendSeparator(\"and \")\r\n      .appendHours()\r\n      .appendSuffix(\" hour \", \" hours \")\r\n      .appendSeparator(\"and \")\r\n      .appendMinutes()\r\n      .appendSuffix(\" minute \", \" minutes \")\r\n      .appendSeparator(\"and \")\r\n      .appendSeconds()\r\n      .appendSuffix(\" second\", \" seconds\")\r\n      .toFormatter();\r\n    return formatter.print(period);\r\n}\r\n```","```\r\nAssert.assertEquals(\"5 hours and 1 minute and 1 second\", \r\n  TimeAgoCalculator.calculateExactTimeAgoWithJodaTime(new Date(getCurrentTime() - (5 * 60 * 60 * 1000 + 1 * 60 * 1000 + 1 * 1000)))); \r\n```","```\r\nstatic String calculateHumanFriendlyTimeAgoWithJodaTime(Date pastTime) {\r\n    Period period = new Period(new DateTime(pastTime.getTime()), new DateTime(getCurrentTime()));\r\n    if (period.getYears() != 0) {\r\n        return \"several years ago\";\r\n    } else if (period.getMonths() != 0) {\r\n        return \"several months ago\";\r\n    } else if (period.getWeeks() != 0) {\r\n        return \"several weeks ago\";\r\n    } else if (period.getDays() != 0) {\r\n        return \"several days ago\";\r\n    } else if (period.getHours() != 0) {\r\n        return \"several hours ago\";\r\n    } else if (period.getMinutes() != 0) {\r\n        return \"several minutes ago\";\r\n    } else {\r\n        return \"moments ago\";\r\n    }\r\n}\r\n```","```\r\nAssert.assertEquals(\"several hours ago\", \r\n  TimeAgoCalculator.calculateHumanFriendlyTimeAgoWithJodaTime(new Date(getCurrentTime() - (5 * 60 * 60 * 1000)))); \r\n```","```\r\nString calculateZonedTimeAgoWithJodaTime(Date pastTime, TimeZone zone) {\r\n    DateTimeZone dateTimeZone = DateTimeZone.forID(zone.getID());\r\n    Period period = new Period(new DateTime(pastTime.getTime(), dateTimeZone), new DateTime(getCurrentTimeByTimeZone(zone)));\r\n    return PeriodFormat.getDefault().print(period);\r\n}\r\n```","```\r\nstatic String calculateTimeAgoWithPeriodAndDuration(LocalDateTime pastTime, ZoneId zone) {\r\n    Period period = Period.between(pastTime.toLocalDate(), getCurrentTimeByTimeZone(zone).toLocalDate());\r\n    Duration duration = Duration.between(pastTime, getCurrentTimeByTimeZone(zone));\r\n    if (period.getYears() != 0) {\r\n        return \"several years ago\";\r\n    } else if (period.getMonths() != 0) {\r\n        return \"several months ago\";\r\n    } else if (period.getDays() != 0) {\r\n        return \"several days ago\";\r\n    } else if (duration.toHours() != 0) {\r\n        return \"several hours ago\";\r\n    } else if (duration.toMinutes() != 0) {\r\n        return \"several minutes ago\";\r\n    } else if (duration.getSeconds() != 0) {\r\n        return \"several seconds ago\";\r\n    } else {\r\n        return \"moments ago\";\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.ocpsoft.prettytime</groupId>\r\n    <artifactId>prettytime</artifactId>\r\n    <version>3.2.7.Final</version>\r\n</dependency>\r\n```","```\r\nString calculateTimeAgoWithPrettyTime(Date pastTime) {\r\n    PrettyTime prettyTime = new PrettyTime();\r\n    return prettyTime.format(pastTime);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>net.time4j</groupId>\r\n    <artifactId>time4j-base</artifactId>\r\n    <version>5.9</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.time4j</groupId>\r\n    <artifactId>time4j-sqlxml</artifactId>\r\n    <version>5.8</version>\r\n</dependency>\r\n```","```\r\nString calculateTimeAgoWithTime4J(Date pastTime, ZoneId zone, Locale locale) {\r\n    return PrettyTime.of(locale).printRelative(pastTime.toInstant(), zone);\r\n}\r\n```"]