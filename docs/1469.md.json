["```\r\n<dependency>\r\n    <groupId>commons-configuration</groupId>\r\n    <artifactId>commons-configuration</artifactId>\r\n    <version>1.10</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\n@ConditionalOnProperty(name = \"spring.config.location\", matchIfMissing = false)\r\npublic PropertiesConfiguration propertiesConfiguration(\r\n  @Value(\"${spring.config.location}\") String path) throws Exception {\r\n    String filePath = new File(path.substring(\"file:\".length())).getCanonicalPath();\r\n    PropertiesConfiguration configuration = new PropertiesConfiguration(\r\n      new File(filePath));\r\n    configuration.setReloadingStrategy(new FileChangedReloadingStrategy());\r\n    return configuration;\r\n}\r\n```","```\r\npublic class ReloadablePropertySource extends PropertySource {\r\n\r\n    PropertiesConfiguration propertiesConfiguration;\r\n\r\n    public ReloadablePropertySource(String name, PropertiesConfiguration propertiesConfiguration) {\r\n        super(name);\r\n        this.propertiesConfiguration = propertiesConfiguration;\r\n    }\r\n\r\n    public ReloadablePropertySource(String name, String path) {\r\n        super(StringUtils.hasText(name) ? path : name);\r\n        try {\r\n            this.propertiesConfiguration = new PropertiesConfiguration(path);\r\n            this.propertiesConfiguration.setReloadingStrategy(new FileChangedReloadingStrategy());\r\n        } catch (Exception e) {\r\n            throw new PropertiesException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object getProperty(String s) {\r\n        return propertiesConfiguration.getProperty(s);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ReloadablePropertySourceConfig {\r\n\r\n    private ConfigurableEnvironment env;\r\n\r\n    public ReloadablePropertySourceConfig(@Autowired ConfigurableEnvironment env) {\r\n        this.env = env;\r\n    }\r\n\r\n    @Bean\r\n    @ConditionalOnProperty(name = \"spring.config.location\", matchIfMissing = false)\r\n    public ReloadablePropertySource reloadablePropertySource(PropertiesConfiguration properties) {\r\n        ReloadablePropertySource ret = new ReloadablePropertySource(\"dynamic\", properties);\r\n        MutablePropertySources sources = env.getPropertySources();\r\n        sources.addFirst(ret);\r\n        return ret;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class EnvironmentConfigBean {\r\n\r\n    private Environment environment;\r\n\r\n    public EnvironmentConfigBean(@Autowired Environment environment) {\r\n        this.environment = environment;\r\n    }\r\n\r\n    public String getColor() {\r\n        return environment.getProperty(\"application.theme.color\");\r\n    }\r\n}\r\n```","```\r\npublic class ReloadablePropertySourceFactory extends DefaultPropertySourceFactory {\r\n    @Override\r\n    public PropertySource<?> createPropertySource(String s, EncodedResource encodedResource)\r\n      throws IOException {\r\n        Resource internal = encodedResource.getResource();\r\n        if (internal instanceof FileSystemResource)\r\n            return new ReloadablePropertySource(s, ((FileSystemResource) internal)\r\n              .getPath());\r\n        if (internal instanceof FileUrlResource)\r\n            return new ReloadablePropertySource(s, ((FileUrlResource) internal)\r\n              .getURL()\r\n              .getPath());\r\n        return super.createPropertySource(s, encodedResource);\r\n    }\r\n}\r\n```","```\r\n@PropertySource(value = \"file:path-to-config\", factory = ReloadablePropertySourceFactory.class)\r\n```","```\r\npublic class ReloadableProperties extends Properties {\r\n    private PropertiesConfiguration propertiesConfiguration;\r\n\r\n    public ReloadableProperties(PropertiesConfiguration propertiesConfiguration) throws IOException {\r\n        super.load(new FileReader(propertiesConfiguration.getFile()));\r\n        this.propertiesConfiguration = propertiesConfiguration;\r\n    }\r\n\r\n    @Override\r\n    public String getProperty(String key) {\r\n        String val = propertiesConfiguration.getString(key);\r\n        super.setProperty(key, val);\r\n        return val;\r\n    }\r\n\r\n    // other overrides\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency> \r\n```","```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>${spring-cloud.version}</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n<properties>\r\n    <spring-cloud.version>Greenwich.SR1</spring-cloud.version>\r\n</properties> \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter</artifactId>\r\n</dependency>\r\n```","```\r\nmanagement.endpoints.web.exposure.include=refresh\r\n```","```\r\n@Component\r\n@ConfigurationProperties(prefix = \"application.theme\")\r\n@RefreshScope\r\npublic class ConfigurationPropertiesRefreshConfigBean {\r\n    private String color;\r\n\r\n    public void setColor(String color) {\r\n        this.color = color;\r\n    }\r\n\r\n    //getter and other stuffs\r\n}\r\n```","```\r\n@Component\r\n@RefreshScope\r\npublic class ValueRefreshConfigBean {\r\n    private String color;\r\n\r\n    public ValueRefreshConfigBean(@Value(\"${application.theme.color}\") String color) {\r\n        this.color = color;\r\n    } \r\n    //put getter here \r\n}\r\n```"]