["```\r\n<dependency>\r\n    <groupId>org.mongodb</groupId>\r\n    <artifactId>mongodb-driver-sync</artifactId>\r\n    <version>4.6.0</version>\r\n</dependency>\r\n```","```\r\npublic class Event {\r\n    private String title;\r\n    private String location;\r\n    private LocalDateTime dateTime;\r\n\r\n    public Event() {}\r\n    public Event(String title, String location, LocalDateTime dateTime) {\r\n        this.title = title;\r\n        this.location = location;\r\n        this.dateTime = dateTime;\r\n    }\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\nCodecProvider codecProvider = PojoCodecProvider.builder().automatic(true).build();\r\nCodecRegistry codecRegistry = fromRegistries(getDefaultCodecRegistry(), fromProviders(codecProvider));\r\n```","```\r\nMongoClient mongoClient = MongoClients.create(uri);\r\nMongoDatabase db = mongoClient.getDatabase(\"calendar\").withCodecRegistry(codecRegistry);\r\nMongoCollection<Event> collection = db.getCollection(\"my_events\", Event.class);\r\n```","```\r\nEvent pianoLessonsEvent = new Event(\"Piano lessons\", \"Foo Blvd\",\r\n  LocalDateTime.of(2022, 6, 4, 11, 0, 0));\r\nEvent soccerGameEvent = new Event(\"Soccer game\", \"Bar Avenue\",\r\n  LocalDateTime.of(2022, 6, 10, 17, 0, 0));\r\n```","```\r\nInsertOneResult pianoLessonsInsertResult = collection.insertOne(pianoLessonsEvent);\r\nInsertOneResult soccerGameInsertResult = collection.insertOne(soccerGameEvent);\r\n```","```\r\nassertNotNull(pianoLessonsInsertResult.getInsertedId());\r\nassertNotNull(soccerGameInsertResult.getInsertedId());\r\n```","```\r\nLocalDateTime dateTime = LocalDateTime.of(2022, 6, 10, 17, 0, 0);\r\nEvent event = collection.find(eq(\"dateTime\", dateTime)).first();\r\n```","```\r\nassertEquals(\"Soccer game\", event.title);\r\nassertEquals(\"Bar Avenue\", event.location);\r\nassertEquals(dateTime, event.dateTime);\r\n```","```\r\nLocalDateTime from = LocalDateTime.of(2022, 06, 04, 12, 0, 0);\r\nLocalDateTime to = LocalDateTime.of(2022, 06, 10, 17, 0, 0);\r\nBasicDBObject object = new BasicDBObject();\r\nobject.put(\"dateTime\", BasicDBObjectBuilder.start(\"$gte\", from).add(\"$lte\", to).get());\r\nList list = new ArrayList(collection.find(object).into(new ArrayList()));\r\n```","```\r\nassertEquals(1, events.size());\r\nassertEquals(\"Soccer game\", events.get(0).title);\r\nassertEquals(\"Bar Avenue\", events.get(0).location);\r\nassertEquals(dateTime, events.get(0).dateTime);\r\n```","```\r\nDocument document = new Document().append(\"title\", \"Piano lessons\");\r\nBson update = Updates.currentDate(\"dateTime\");\r\nUpdateOptions options = new UpdateOptions().upsert(false);\r\nUpdateResult result = collection.updateOne(document, update, options);\r\n```","```\r\nassertEquals(1, result.getModifiedCount());\r\n```","```\r\nLocalDate updateManyFrom = LocalDate.of(2022, 1, 1);\r\nLocalDate updateManyTo = LocalDate.of(2023, 1, 1);\r\nBson query = and(gte(\"dateTime\", from), lt(\"dateTime\", to));\r\nBson updates = Updates.currentDate(\"dateTime\");\r\nUpdateResult result = collection.updateMany(query, updates);\r\n```","```\r\nassertEquals(2, result.getModifiedCount());\r\n```","```\r\nLocalDate deleteFrom = LocalDate.of(2022, 1, 1);\r\nLocalDate deleteTo = LocalDate.of(2023, 1, 1);\r\nBson query = and(gte(\"dateTime\", deleteFrom), lt(\"dateTime\", deleteTo));\r\nDeleteResult result = collection.deleteMany(query); \r\n```","```\r\nassertEquals(2, result.getDeletedCount());\r\n```","```\r\npublic String timeZoneOffset;\r\n```","```\r\npublic Event(String title, String location, LocalDateTime dateTime, String timeZoneOffset) {\r\n    this.title = title;\r\n    this.location = location;\r\n    this.dateTime = dateTime;\r\n    this.timeZoneOffset = timeZoneOffset;\r\n}\r\n```","```\r\nLocalDateTime utcDateTime = LocalDateTime.of(2022, 6, 20, 11, 0, 0);\r\nEvent pianoLessonsTZ = new Event(\"Piano lessons\", \"Baz Bvld\", utcDateTime, ZoneOffset.ofHours(2).toString());\r\nInsertOneResult pianoLessonsTZInsertResult = collection.insertOne(pianoLessonsTZ);\r\nassertNotNull(pianoLessonsTZInsertResult.getInsertedId());\r\n```","```\r\nOffsetDateTime dateTimeWithOffset = OffsetDateTime.of(pianoLessonsTZ.dateTime, ZoneOffset.of(pianoLessonsTZ.timeZoneOffset));\r\n```"]