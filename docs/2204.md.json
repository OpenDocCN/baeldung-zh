["```\r\n<dependency>\r\n    <groupId>org.apache.cayenne</groupId>\r\n    <artifactId>cayenne-server</artifactId>\r\n    <version>4.0.M5</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>5.1.44</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.cayenne.plugins</groupId>\r\n    <artifactId>maven-cayenne-modeler-plugin</artifactId>\r\n    <version>4.0.M5</version>\r\n</plugin>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<domain project-version=\"9\">\r\n    <node name=\"datanode\"\r\n          factory\r\n      =\"org.apache.cayenne.configuration.server.XMLPoolingDataSourceFactory\"\r\n          schema-update-strategy\r\n      =\"org.apache.cayenne.access.dbsync.CreateIfNoSchemaStrategy\">\r\n        <data-source>\r\n            <driver value=\"com.mysql.jdbc.Driver\"/>\r\n            <url value\r\n              =\"jdbc:mysql://localhost:3306/intro_cayenne;create=true\"/>\r\n            <connectionPool min=\"1\" max=\"1\"/>\r\n            <login userName=\"root\" password=\"root\"/>\r\n        </data-source>\r\n    </node>\r\n</domain>\r\n```","```\r\n@Test\r\npublic void whenInsert_thenWeGetOneRecordInTheDatabase() {\r\n    Author author = context.newObject(Author.class);\r\n    author.setName(\"Paul\");\r\n\r\n    context.commitChanges();\r\n\r\n    long records = ObjectSelect.dataRowQuery(Author.class)\r\n      .selectCount(context);\r\n\r\n    assertEquals(1, records);\r\n}\r\n```","```\r\n@Test\r\npublic void whenInsert_andQueryByFirstName_thenWeGetTheAuthor() {\r\n    Author author = context.newObject(Author.class);\r\n    author.setName(\"Paul\");\r\n\r\n    context.commitChanges();\r\n\r\n    Author expectedAuthor = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.eq(\"Paul\"))\r\n      .selectOne(context);\r\n\r\n    assertEquals(\"Paul\", expectedAuthor.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void whenInsert_andQueryAll_thenWeGetTwoAuthors() {\r\n    Author firstAuthor = context.newObject(Author.class);\r\n    firstAuthor.setName(\"Paul\");\r\n\r\n    Author secondAuthor = context.newObject(Author.class);\r\n    secondAuthor.setName(\"Ludovic\");\r\n\r\n    context.commitChanges();\r\n\r\n    List<Author> authors = ObjectSelect\r\n      .query(Author.class)\r\n      .select(context);\r\n\r\n    assertEquals(2, authors.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUpdating_thenWeGetAnUpatedeAuthor() {\r\n    Author author = context.newObject(Author.class);\r\n    author.setName(\"Paul\");\r\n    context.commitChanges();\r\n\r\n    Author expectedAuthor = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.eq(\"Paul\"))\r\n      .selectOne(context);\r\n    expectedAuthor.setName(\"Garcia\");\r\n    context.commitChanges();\r\n\r\n    assertEquals(author.getName(), expectedAuthor.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAttachingToArticle_thenTheRelationIsMade() {\r\n    Author author = context.newObject(Author.class);\r\n    author.setName(\"Paul\");\r\n\r\n    Article article = context.newObject(Article.class);\r\n    article.setTitle(\"My post title\");\r\n    article.setContent(\"The content\");\r\n    article.setAuthor(author);\r\n\r\n    context.commitChanges();\r\n\r\n    Author expectedAuthor = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.eq(\"Smith\"))\r\n      .selectOne(context);\r\n\r\n    Article expectedArticle = (expectedAuthor.getArticles()).get(0);\r\n\r\n    assertEquals(article.getTitle(), expectedArticle.getTitle());\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeleting_thenWeLostHisDetails() {\r\n    Author author = context.newObject(Author.class);\r\n    author.setName(\"Paul\");\r\n    context.commitChanges();\r\n\r\n    Author savedAuthor = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.eq(\"Paul\"))\r\n      .selectOne(context);\r\n    if(savedAuthor != null) {\r\n        context.deleteObjects(author);\r\n        context.commitChanges();\r\n    }\r\n\r\n    Author expectedAuthor = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.eq(\"Paul\"))\r\n      .selectOne(context);\r\n\r\n    assertNull(expectedAuthor);\r\n}\r\n```","```\r\n@After\r\npublic void deleteAllRecords() {\r\n    SQLTemplate deleteArticles = new SQLTemplate(\r\n      Article.class, \"delete from article\");\r\n    SQLTemplate deleteAuthors = new SQLTemplate(\r\n      Author.class, \"delete from author\");\r\n\r\n    context.performGenericQuery(deleteArticles);\r\n    context.performGenericQuery(deleteAuthors);\r\n}\r\n```"]