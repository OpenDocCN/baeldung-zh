["```\r\nstatic int findMax(int[] A) {\r\n    int max = A[0];\r\n    for (int i = 1; i < A.length; i++) {\r\n        if (A[i] > max) {\r\n            max = A[i];\r\n        }\r\n    }\r\n    return max;\r\n}\r\n```","```\r\nint[] A = {1, 3, 4, 2};\r\nint m = findMax(A);\r\n```","```\r\nstatic boolean[][] setupAbacus(int[] A, int m) {\r\n    boolean[][] abacus = new boolean[A.length][m];\r\n    for (int i = 0; i < abacus.length; i++) {\r\n        int number = A[i];\r\n        for (int j = 0; j < abacus[0].length && j < number; j++) {\r\n            abacus[A.length - 1 - i][j] = true;\r\n        }\r\n    }\r\n    return abacus;\r\n}\r\n```","```\r\nboolean[][] abacus = setupAbacus(A, m);\r\n```","```\r\nstatic void dropBeads(boolean[][] abacus, int[] A, int m) {\r\n    for (int i = 1; i < A.length; i++) {\r\n        for (int j = m - 1; j >= 0; j--) {\r\n            if (abacus[i][j] == true) {\r\n                int x = i;\r\n                while (x > 0 && abacus[x - 1][j] == false) {\r\n                    boolean temp = abacus[x - 1][j];\r\n                    abacus[x - 1][j] = abacus[x][j];\r\n                    abacus[x][j] = temp;\r\n                    x--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\nstatic void toSortedList(boolean[][] abacus, int[] A) {\r\n    int index = 0;\r\n    for (int i = abacus.length - 1; i >=0; i--) {\r\n        int beads = 0;\r\n        for (int j = 0; j < abacus[0].length && abacus[i][j] == true; j++) {\r\n            beads++;\r\n        }\r\n        A[index++] = beads;\r\n    }\r\n}\r\n```","```\r\nstatic void gravitySort(int[] A) {\r\n    int m = findMax(A);\r\n    boolean[][] abacus = setupAbacus(A, m);\r\n    dropBeads(abacus, A, m);\r\n    transformToList(abacus, A);\r\n}\r\n```","```\r\n@Test\r\npublic void givenIntegerArray_whenSortedWithGravitySort_thenGetSortedArray() {\r\n    int[] actual = {9, 9, 100, 3, 57, 12, 3, 78, 0, 2, 2, 40, 21, 9};\r\n    int[] expected = {0, 2, 2, 3, 3, 9, 9, 9, 12, 21, 40, 57, 78, 100};\r\n    GravitySort.sort(actual);\r\n    Assert.assertArrayEquals(expected, actual);\r\n}\r\n```"]