["```\r\n@Test\r\npublic void whenFilterWithIterables_thenFiltered() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Iterable<String> result \r\n      = Iterables.filter(names, Predicates.containsPattern(\"a\"));\r\n\r\n    assertThat(result, containsInAnyOrder(\"Jane\", \"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterWithCollections2_thenFiltered() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<String> result \r\n      = Collections2.filter(names, Predicates.containsPattern(\"a\"));\r\n\r\n    assertEquals(2, result.size());\r\n    assertThat(result, containsInAnyOrder(\"Jane\", \"Adam\"));\r\n\r\n    result.add(\"anna\");\r\n    assertEquals(5, names.size());\r\n}\r\n```","```\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void givenFilteredCollection_whenAddingInvalidElement_thenException() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<String> result \r\n      = Collections2.filter(names, Predicates.containsPattern(\"a\"));\r\n\r\n    result.add(\"elvis\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterCollectionWithCustomPredicate_thenFiltered() {\r\n    Predicate<String> predicate = new Predicate<String>() {\r\n        @Override\r\n        public boolean apply(String input) {\r\n            return input.startsWith(\"A\") || input.startsWith(\"J\");\r\n        }\r\n    };\r\n\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<String> result = Collections2.filter(names, predicate);\r\n\r\n    assertEquals(3, result.size());\r\n    assertThat(result, containsInAnyOrder(\"John\", \"Jane\", \"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterUsingMultiplePredicates_thenFiltered() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<String> result = Collections2.filter(names, \r\n      Predicates.or(Predicates.containsPattern(\"J\"), \r\n      Predicates.not(Predicates.containsPattern(\"a\"))));\r\n\r\n    assertEquals(3, result.size());\r\n    assertThat(result, containsInAnyOrder(\"John\", \"Jane\", \"Tom\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveNullFromCollection_thenRemoved() {\r\n    List<String> names = \r\n      Lists.newArrayList(\"John\", null, \"Jane\", null, \"Adam\", \"Tom\");\r\n    Collection<String> result = \r\n      Collections2.filter(names, Predicates.notNull());\r\n\r\n    assertEquals(4, result.size());\r\n    assertThat(result, containsInAnyOrder(\"John\", \"Jane\", \"Adam\", \"Tom\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckingIfAllElementsMatchACondition_thenCorrect() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n\r\n    boolean result = Iterables.all(names, Predicates.containsPattern(\"n|m\"));\r\n    assertTrue(result);\r\n\r\n    result = Iterables.all(names, Predicates.containsPattern(\"a\"));\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenTransformWithIterables_thenTransformed() {\r\n    Function<String, Integer> function = new Function<String, Integer>() {\r\n        @Override\r\n        public Integer apply(String input) {\r\n            return input.length();\r\n        }\r\n    };\r\n\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Iterable<Integer> result = Iterables.transform(names, function);\r\n\r\n    assertThat(result, contains(4, 4, 4, 3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenTransformWithCollections2_thenTransformed() {\r\n    Function<String,Integer> func = new Function<String,Integer>(){\r\n        @Override\r\n        public Integer apply(String input) {\r\n            return input.length();\r\n        }\r\n    };\r\n\r\n    List<String> names = \r\n      Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<Integer> result = Collections2.transform(names, func);\r\n\r\n    assertEquals(4, result.size());\r\n    assertThat(result, contains(4, 4, 4, 3));\r\n\r\n    result.remove(3);\r\n    assertEquals(3, names.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingAFunctionFromAPredicate_thenCorrect() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<Boolean> result =\r\n      Collections2.transform(names,\r\n      Functions.forPredicate(Predicates.containsPattern(\"m\")));\r\n\r\n    assertEquals(4, result.size());\r\n    assertThat(result, contains(false, false, true, true));\r\n}\r\n```","```\r\n@Test\r\npublic void whenTransformingUsingComposedFunction_thenTransformed() {\r\n    Function<String,Integer> f1 = new Function<String,Integer>(){\r\n        @Override\r\n        public Integer apply(String input) {\r\n            return input.length();\r\n        }\r\n    };\r\n\r\n    Function<Integer,Boolean> f2 = new Function<Integer,Boolean>(){\r\n        @Override\r\n        public Boolean apply(Integer input) {\r\n            return input % 2 == 0;\r\n        }\r\n    };\r\n\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<Boolean> result = \r\n      Collections2.transform(names, Functions.compose(f2, f1));\r\n\r\n    assertEquals(4, result.size());\r\n    assertThat(result, contains(true, true, true, false));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilteringAndTransformingCollection_thenCorrect() {\r\n    Predicate<String> predicate = new Predicate<String>() {\r\n        @Override\r\n        public boolean apply(String input) {\r\n            return input.startsWith(\"A\") || input.startsWith(\"T\");\r\n        }\r\n    };\r\n\r\n    Function<String, Integer> func = new Function<String,Integer>(){\r\n        @Override\r\n        public Integer apply(String input) {\r\n            return input.length();\r\n        }\r\n    };\r\n\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    Collection<Integer> result = FluentIterable.from(names)\r\n                                               .filter(predicate)\r\n                                               .transform(func)\r\n                                               .toList();\r\n\r\n    assertEquals(2, result.size());\r\n    assertThat(result, containsInAnyOrder(4, 3));\r\n}\r\n```"]