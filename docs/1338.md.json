["```\r\npublic class EmployeeService {\r\n\r\n    public EmployeeService(String baseUrl) {\r\n        this.webClient = WebClient.create(baseUrl);\r\n    }\r\n    public Mono<Employee> getEmployeeById(Integer employeeId) {\r\n        return webClient\r\n                .get()\r\n                .uri(\"http://localhost:8080/employee/{id}\", employeeId)\r\n                .retrieve()\r\n                .bodyToMono(Employee.class);\r\n    }\r\n} \r\n```","```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class EmployeeServiceTest {\r\n\r\n    @Test\r\n    void givenEmployeeId_whenGetEmployeeById_thenReturnEmployee() {\r\n\r\n        Integer employeeId = 100;\r\n        Employee mockEmployee = new Employee(100, \"Adam\", \"Sandler\", \r\n          32, Role.LEAD_ENGINEER);\r\n        when(webClientMock.get())\r\n          .thenReturn(requestHeadersUriSpecMock);\r\n        when(requestHeadersUriMock.uri(\"/employee/{id}\", employeeId))\r\n          .thenReturn(requestHeadersSpecMock);\r\n        when(requestHeadersMock.retrieve())\r\n          .thenReturn(responseSpecMock);\r\n        when(responseMock.bodyToMono(Employee.class))\r\n          .thenReturn(Mono.just(mockEmployee));\r\n\r\n        Mono<Employee> employeeMono = employeeService.getEmployeeById(employeeId);\r\n\r\n        StepVerifier.create(employeeMono)\r\n          .expectNextMatches(employee -> employee.getRole()\r\n            .equals(Role.LEAD_ENGINEER))\r\n          .verifyComplete();\r\n    }\r\n\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>okhttp</artifactId>\r\n    <version>4.0.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>mockwebserver</artifactId>\r\n    <version>4.0.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class EmployeeServiceMockWebServerTest {\r\n\r\n    public static MockWebServer mockBackEnd;\r\n\r\n    @BeforeAll\r\n    static void setUp() throws IOException {\r\n        mockBackEnd = new MockWebServer();\r\n        mockBackEnd.start();\r\n    }\r\n\r\n    @AfterAll\r\n    static void tearDown() throws IOException {\r\n        mockBackEnd.shutdown();\r\n    }\r\n}\r\n```","```\r\n@BeforeEach\r\nvoid initialize() {\r\n    String baseUrl = String.format(\"http://localhost:%s\", \r\n      mockBackEnd.getPort());\r\n    employeeService = new EmployeeService(baseUrl);\r\n} \r\n```","```\r\n@Test\r\nvoid getEmployeeById() throws Exception {\r\n    Employee mockEmployee = new Employee(100, \"Adam\", \"Sandler\", \r\n      32, Role.LEAD_ENGINEER);\r\n    mockBackEnd.enqueue(new MockResponse()\r\n      .setBody(objectMapper.writeValueAsString(mockEmployee))\r\n      .addHeader(\"Content-Type\", \"application/json\"));\r\n\r\n    Mono<Employee> employeeMono = employeeService.getEmployeeById(100);\r\n\r\n    StepVerifier.create(employeeMono)\r\n      .expectNextMatches(employee -> employee.getRole()\r\n        .equals(Role.LEAD_ENGINEER))\r\n      .verifyComplete();\r\n} \r\n```","```\r\nRecordedRequest recordedRequest = mockBackEnd.takeRequest();\r\n\r\nassertEquals(\"GET\", recordedRequest.getMethod());\r\nassertEquals(\"/employee/100\", recordedRequest.getPath()); \r\n```"]