["```\r\n<dependency>\r\n    <groupId>org.eclipse.jetty</groupId>\r\n    <artifactId>jetty-server</artifactId>\r\n    <version>9.4.3.v20170317</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.eclipse.jetty</groupId>\r\n    <artifactId>jetty-servlet</artifactId>\r\n    <version>9.4.3.v20170317</version>\r\n</dependency>\r\n```","```\r\npublic class JettyServer {\r\n    private Server server;\r\n\r\n    public void start() throws Exception {\r\n        server = new Server();\r\n        ServerConnector connector = new ServerConnector(server);\r\n        connector.setPort(8090);\r\n        server.setConnectors(new Connector[] {connector});\r\n}\r\n```","```\r\npublic class BlockingServlet extends HttpServlet {\r\n\r\n    protected void doGet(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response)\r\n      throws ServletException, IOException {\r\n\r\n        response.setContentType(\"application/json\");\r\n        response.setStatus(HttpServletResponse.SC_OK);\r\n        response.getWriter().println(\"{ \\\"status\\\": \\\"ok\\\"}\");\r\n    }\r\n}\r\n```","```\r\nservletHandler.addServletWithMapping(BlockingServlet.class, \"/status\");\r\nserver.start();\r\n```","```\r\n@Before\r\npublic void setup() throws Exception {\r\n    jettyServer = new JettyServer();\r\n    jettyServer.start();\r\n}\r\n```","```\r\nString url = \"http://localhost:8090/status\";\r\nHttpClient client = HttpClientBuilder.create().build();\r\nHttpGet request = new HttpGet(url);\r\n\r\nHttpResponse response = client.execute(request);\r\n\r\nassertThat(response.getStatusLine().getStatusCode()).isEqualTo(200);\r\n```","```\r\npublic class AsyncServlet extends HttpServlet {\r\n    private static String HEAVY_RESOURCE \r\n      = \"This is some heavy resource that will be served in an async way\";\r\n\r\n    protected void doGet(\r\n      HttpServletRequest request, HttpServletResponse response)\r\n      throws ServletException, IOException {\r\n\r\n        ByteBuffer content = ByteBuffer.wrap(\r\n          HEAVY_RESOURCE.getBytes(StandardCharsets.UTF_8));\r\n\r\n        AsyncContext async = request.startAsync();\r\n        ServletOutputStream out = response.getOutputStream();\r\n        out.setWriteListener(new WriteListener() {\r\n            @Override\r\n            public void onWritePossible() throws IOException {\r\n                while (out.isReady()) {\r\n                    if (!content.hasRemaining()) {\r\n                        response.setStatus(200);\r\n                        async.complete();\r\n                        return;\r\n                    }\r\n                    out.write(content.get());\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable t) {\r\n                getServletContext().log(\"Async Error\", t);\r\n                async.complete();\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\nservletHandler.addServletWithMapping(\r\n  AsyncServlet.class, \"/heavy/async\");\r\n```","```\r\nString url = \"http://localhost:8090/heavy/async\";\r\nHttpClient client = HttpClientBuilder.create().build();\r\nHttpGet request = new HttpGet(url);\r\nHttpResponse response = client.execute(request);\r\n\r\nassertThat(response.getStatusLine().getStatusCode())\r\n  .isEqualTo(200);\r\nString responseContent = IOUtils.toString(r\r\n  esponse.getEntity().getContent(), StandardCharsets.UTF_8);\r\nassertThat(responseContent).isEqualTo(\r\n  \"This is some heavy resource that will be served in an async way\");\r\n```","```\r\nint maxThreads = 100;\r\nint minThreads = 10;\r\nint idleTimeout = 120;\r\n\r\nQueuedThreadPool threadPool = new QueuedThreadPool(maxThreads, minThreads, idleTimeout);\r\n\r\nserver = new Server(threadPool);\r\n```"]