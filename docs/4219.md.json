["```\r\npublic class Employee {\r\n\r\n    private Integer employeeNumber;\r\n    private String name;\r\n    private Integer departmentId;\r\n    //Standard constructor, getters and setters.\r\n}\r\n```","```\r\nprivate List<Employee> buildEmployeeList() {\r\n    return Arrays.asList(\r\n      new Employee(1, \"Mike\", 1),\r\n      new Employee(2, \"John\", 1),\r\n      new Employee(3, \"Mary\", 1),\r\n      new Employee(4, \"Joe\", 2),\r\n      new Employee(5, \"Nicole\", 2),\r\n      new Employee(6, \"Alice\", 2),\r\n      new Employee(7, \"Bob\", 3),\r\n      new Employee(8, \"Scarlett\", 3));\r\n}\r\n\r\nprivate List<String> employeeNameFilter() {\r\n    return Arrays.asList(\"Alice\", \"Mike\", \"Bob\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeList_andNameFilterList_thenObtainFilteredEmployeeList_usingForEachLoop() {\r\n    List<Employee> filteredList = new ArrayList<>();\r\n    List<Employee> originalList = buildEmployeeList();\r\n    List<String> nameFilter = employeeNameFilter();\r\n\r\n    for (Employee employee : originalList) {\r\n        for (String name : nameFilter) {\r\n            if (employee.getName().equals(name)) {\r\n                filteredList.add(employee);\r\n                // break;\r\n            }\r\n        }\r\n    }\r\n\r\n    assertThat(filteredList.size(), is(nameFilter.size()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeList_andNameFilterList_thenObtainFilteredEmployeeList_usingLambda() {\r\n    List<Employee> filteredList;\r\n    List<Employee> originalList = buildEmployeeList();\r\n    List<String> nameFilter = employeeNameFilter();\r\n\r\n    filteredList = originalList.stream()\r\n      .filter(employee -> nameFilter.contains(employee.getName()))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(filteredList.size(), is(nameFilter.size()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeList_andNameFilterList_thenObtainFilteredEmployeeList_usingLambdaAndHashSet() {\r\n    List<Employee> filteredList;\r\n    List<Employee> originalList = buildEmployeeList();\r\n    Set<String> nameFilterSet = employeeNameFilter().stream().collect(Collectors.toSet());\r\n\r\n    filteredList = originalList.stream()\r\n      .filter(employee -> nameFilterSet.contains(employee.getName()))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(filteredList.size(), is(nameFilterSet.size()));\r\n}\r\n```"]