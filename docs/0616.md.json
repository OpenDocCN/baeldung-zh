["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.12.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.196</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\n@Table(name=\"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    private String id;\r\n\r\n    @Column(name = \"name\", columnDefinition=\"VARCHAR(128)\")\r\n    private String name;\r\n\r\n    @Lob\r\n    @Column(name = \"photo\", columnDefinition=\"BLOB\")\r\n    private byte[] photo;\r\n\r\n    // ...\r\n}\r\n```","```\r\nsession = HibernateSessionUtil\r\n  .getSessionFactory(\"hibernate.properties\")\r\n  .openSession();\r\n```","```\r\nUser user = new User();\r\n\r\nInputStream inputStream = this.getClass()\r\n  .getClassLoader()\r\n  .getResourceAsStream(\"profile.png\");\r\n\r\nif(inputStream == null) {\r\n    fail(\"Unable to get resources\");\r\n}\r\nuser.setId(\"1\");\r\nuser.setName(\"User\");\r\nuser.setPhoto(IOUtils.toByteArray(inputStream)); \r\n```","```\r\nsession.persist(user); \r\n```","```\r\nUser result = session.find(User.class, \"1\"); \r\n```","```\r\nassertNotNull(\r\n  \"Query result is null\", \r\n  result);\r\n\r\nassertEquals(\r\n  \"User's name is invalid\", \r\n  user.getName(), result.getName() );\r\n\r\nassertTrue(\r\n  \"User's photo is corrupted\", \r\n  Arrays.equals(user.getPhoto(), result.getPhoto()) ); \r\n```"]