["```\r\nserver.port=8083\r\n```","```\r\nserver:\r\n    port: 8083\r\n```","```\r\n@Component\r\npublic class CustomizationBean implements\r\n  WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\r\n\r\n    @Override\r\n    public void customize(ConfigurableServletWebServerFactory container) {\r\n        container.setPort(8083);\r\n    }\r\n}\r\n```","```\r\nserver.servlet.contextPath=/springbootapp\r\n```","```\r\nserver:\r\n    servlet:\r\n        contextPath:/springbootapp\r\n```","```\r\n@Component\r\npublic class CustomizationBean\r\n  implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\r\n\r\n    @Override\r\n    public void customize(ConfigurableServletWebServerFactorycontainer) {\r\n        container.setContextPath(\"/springbootapp\");\r\n    }\r\n}\r\n```","```\r\npublic class MyCustomErrorController implements ErrorController {\r\n\r\n    private static final String PATH = \"/error\";\r\n\r\n    @GetMapping(value=PATH)\r\n    public String error() {\r\n        return \"Error haven\";\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomizationBean\r\n  implements WebServerFactoryCustomizer<ConfigurableServletWebServerFactory> {\r\n\r\n    @Override\r\n    public void customize(ConfigurableServletWebServerFactorycontainer) {        \r\n        container.addErrorPages(new ErrorPage(HttpStatus.BAD_REQUEST, \"/400\"));\r\n        container.addErrorPages(new ErrorPage(\"/errorHaven\"));\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/errorHaven\")\r\nString errorHeaven() {\r\n    return \"You have reached the haven of errors!!!\";\r\n}\r\n```","```\r\nYou have reached the haven of errors!!!\r\n```","```\r\n@Autowired\r\npublic void shutDown(ExecutorServiceExitCodeGenerator exitCodeGenerator) {\r\n    SpringApplication.exit(applicationContext, exitCodeGenerator);\r\n}\r\n```","```\r\nlogging.level.org.springframework.web: DEBUG\r\nlogging.level.org.hibernate: ERROR\r\n```","```\r\n@Bean\r\npublic HelloWorldServlet helloWorld() {\r\n    return new HelloWorldServlet();\r\n}\r\n```","```\r\n@Bean\r\npublic SpringHelloServletRegistrationBean servletRegistrationBean() {\r\n\r\n    SpringHelloServletRegistrationBean bean = new SpringHelloServletRegistrationBean(\r\n      new SpringHelloWorldServlet(), \"/springHelloWorld/*\");\r\n    bean.setLoadOnStartup(1);\r\n    bean.addInitParameter(\"message\", \"SpringHelloWorldServlet special message\");\r\n    return bean;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jetty</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic JettyEmbeddedServletContainerFactory  jettyEmbeddedServletContainerFactory() {\r\n    JettyEmbeddedServletContainerFactory jettyContainer = \r\n      new JettyEmbeddedServletContainerFactory();\r\n\r\n    jettyContainer.setPort(9000);\r\n    jettyContainer.setContextPath(\"/springbootapp\");\r\n    return jettyContainer;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-undertow</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic UndertowEmbeddedServletContainerFactory embeddedServletContainerFactory() {\r\n    UndertowEmbeddedServletContainerFactory factory = \r\n      new UndertowEmbeddedServletContainerFactory();\r\n\r\n    factory.addBuilderCustomizers(new UndertowBuilderCustomizer() {\r\n        @Override\r\n        public void customize(io.undertow.Undertow.Builder builder) {\r\n            builder.addHttpListener(8080, \"0.0.0.0\");\r\n        }\r\n    });\r\n\r\n    return factory;\r\n}\r\n```"]