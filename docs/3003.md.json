["```\r\npublic static File findUsingIOApi(String sdir) {\r\n    File dir = new File(sdir);\r\n    if (dir.isDirectory()) {\r\n        Optional<File> opFile = Arrays.stream(dir.listFiles(File::isFile))\r\n          .max((f1, f2) -> Long.compare(f1.lastModified(), f2.lastModified()));\r\n\r\n        if (opFile.isPresent()){\r\n            return opFile.get();\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n```","```\r\npublic static Path findUsingNIOApi(String sdir) throws IOException {\r\n    Path dir = Paths.get(sdir);\r\n    if (Files.isDirectory(dir)) {\r\n        Optional<Path> opPath = Files.list(dir)\r\n          .filter(p -> !Files.isDirectory(p))\r\n          .sorted((p1, p2)-> Long.valueOf(p2.toFile().lastModified())\r\n            .compareTo(p1.toFile().lastModified()))\r\n          .findFirst();\r\n\r\n        if (opPath.isPresent()){\r\n            return opPath.get();\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\npublic static File findUsingCommonsIO(String sdir) {\r\n    File dir = new File(sdir);\r\n    if (dir.isDirectory()) {\r\n        File[] dirFiles = dir.listFiles((FileFilter)FileFilterUtils.fileFileFilter());\r\n        if (dirFiles != null && dirFiles.length > 0) {\r\n            Arrays.sort(dirFiles, LastModifiedFileComparator.LASTMODIFIED_REVERSE);\r\n            return dirFiles[0];\r\n        }\r\n     }\r\n\r\n    return null;\r\n}\r\n```"]