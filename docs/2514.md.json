["```\r\nHello, world!\r\n```","```\r\nprivate String readFromInputStream(InputStream inputStream)\r\n  throws IOException {\r\n    StringBuilder resultStringBuilder = new StringBuilder();\r\n    try (BufferedReader br\r\n      = new BufferedReader(new InputStreamReader(inputStream))) {\r\n        String line;\r\n        while ((line = br.readLine()) != null) {\r\n            resultStringBuilder.append(line).append(\"\\n\");\r\n        }\r\n    }\r\n  return resultStringBuilder.toString();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileNameAsAbsolutePath_whenUsingClasspath_thenFileData() {\r\n    String expectedData = \"Hello, world!\";\r\n\r\n    Class clazz = FileOperationsTest.class;\r\n    InputStream inputStream = clazz.getResourceAsStream(\"/fileTest.txt\");\r\n    String data = readFromInputStream(inputStream);\r\n\r\n    Assert.assertThat(data, containsString(expectedData));\r\n}\r\n```","```\r\nClassLoader classLoader = getClass().getClassLoader();\r\nInputStream inputStream = classLoader.getResourceAsStream(\"fileTest.txt\");\r\nString data = readFromInputStream(inputStream);\r\n```","```\r\nInputStream inputStream = null;\r\ntry {\r\n    File file = new File(classLoader.getResource(\"fileTest.txt\").getFile());\r\n    inputStream = new FileInputStream(file);\r\n\r\n    //...\r\n}     \r\nfinally {\r\n    if (inputStream != null) {\r\n        try {\r\n            inputStream.close();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileName_whenUsingFileUtils_thenFileData() {\r\n    String expectedData = \"Hello, world!\";\r\n\r\n    ClassLoader classLoader = getClass().getClassLoader();\r\n    File file = new File(classLoader.getResource(\"fileTest.txt\").getFile());\r\n    String data = FileUtils.readFileToString(file, \"UTF-8\");\r\n\r\n    assertEquals(expectedData, data.trim());\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileName_whenUsingIOUtils_thenFileData() {\r\n    String expectedData = \"Hello, world!\";\r\n\r\n    FileInputStream fis = new FileInputStream(\"src/test/resources/fileTest.txt\");\r\n    String data = IOUtils.toString(fis, \"UTF-8\");\r\n\r\n    assertEquals(expectedData, data.trim());\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadWithBufferedReader_thenCorrect()\r\n  throws IOException {\r\n     String expected_value = \"Hello, world!\";\r\n     String file =\"src/test/resources/fileTest.txt\";\r\n\r\n     BufferedReader reader = new BufferedReader(new FileReader(file));\r\n     String currentLine = reader.readLine();\r\n     reader.close();\r\n\r\n    assertEquals(expected_value, currentLine);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadSmallFileJava7_thenCorrect()\r\n  throws IOException {\r\n    String expected_value = \"Hello, world!\";\r\n\r\n    Path path = Paths.get(\"src/test/resources/fileTest.txt\");\r\n\r\n    String read = Files.readAllLines(path).get(0);\r\n    assertEquals(expected_value, read);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadLargeFileJava7_thenCorrect()\r\n  throws IOException {\r\n    String expected_value = \"Hello, world!\";\r\n\r\n    Path path = Paths.get(\"src/test/resources/fileTest.txt\");\r\n\r\n    BufferedReader reader = Files.newBufferedReader(path);\r\n    String line = reader.readLine();\r\n    assertEquals(expected_value, line);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenUsingFilesLines_thenFileData() {\r\n    String expectedData = \"Hello, world!\";\r\n\r\n    Path path = Paths.get(getClass().getClassLoader()\r\n      .getResource(\"fileTest.txt\").toURI());\r\n\r\n    Stream<String> lines = Files.lines(path);\r\n    String data = lines.collect(Collectors.joining(\"\\n\"));\r\n    lines.close();\r\n\r\n    Assert.assertEquals(expectedData, data.trim());\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadWithScanner_thenCorrect()\r\n  throws IOException {\r\n    String file = \"src/test/resources/fileTest.txt\";\r\n    Scanner scanner = new Scanner(new File(file));\r\n    scanner.useDelimiter(\" \");\r\n\r\n    assertTrue(scanner.hasNext());\r\n    assertEquals(\"Hello,\", scanner.next());\r\n    assertEquals(\"world!\", scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\nHello 1\r\n```","```\r\n@Test\r\npublic void whenReadWithStreamTokenizer_thenCorrectTokens()\r\n  throws IOException {\r\n    String file = \"src/test/resources/fileTestTokenizer.txt\";\r\n   FileReader reader = new FileReader(file);\r\n    StreamTokenizer tokenizer = new StreamTokenizer(reader);\r\n\r\n    // token 1\r\n    tokenizer.nextToken();\r\n    assertEquals(StreamTokenizer.TT_WORD, tokenizer.ttype);\r\n    assertEquals(\"Hello\", tokenizer.sval);\r\n\r\n    // token 2    \r\n    tokenizer.nextToken();\r\n    assertEquals(StreamTokenizer.TT_NUMBER, tokenizer.ttype);\r\n    assertEquals(1, tokenizer.nval, 0.0000001);\r\n\r\n    // token 3\r\n    tokenizer.nextToken();\r\n    assertEquals(StreamTokenizer.TT_EOF, tokenizer.ttype);\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadWithDataInputStream_thenCorrect() throws IOException {\r\n    String expectedValue = \"Hello, world!\";\r\n    String file =\"src/test/resources/fileTest.txt\";\r\n    String result = null;\r\n\r\n    DataInputStream reader = new DataInputStream(new FileInputStream(file));\r\n    int nBytesToRead = reader.available();\r\n    if(nBytesToRead > 0) {\r\n        byte[] bytes = new byte[nBytesToRead];\r\n        reader.read(bytes);\r\n        result = new String(bytes);\r\n    }\r\n\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadWithFileChannel_thenCorrect()\r\n  throws IOException {\r\n    String expected_value = \"Hello, world!\";\r\n    String file = \"src/test/resources/fileTest.txt\";\r\n    RandomAccessFile reader = new RandomAccessFile(file, \"r\");\r\n    FileChannel channel = reader.getChannel();\r\n\r\n    int bufferSize = 1024;\r\n    if (bufferSize > channel.size()) {\r\n        bufferSize = (int) channel.size();\r\n    }\r\n    ByteBuffer buff = ByteBuffer.allocate(bufferSize);\r\n    channel.read(buff);\r\n    buff.flip();\r\n\r\n    assertEquals(expected_value, new String(buff.array()));\r\n    channel.close();\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUTFEncodedFile_thenCorrect()\r\n  throws IOException {\r\n    String expected_value = \"青空\";\r\n    String file = \"src/test/resources/fileTestUtf8.txt\";\r\n    BufferedReader reader = new BufferedReader\r\n      (new InputStreamReader(new FileInputStream(file), \"UTF-8\"));\r\n    String currentLine = reader.readLine();\r\n    reader.close();\r\n\r\n    assertEquals(expected_value, currentLine);\r\n}\r\n```","```\r\n@Test\r\npublic void givenURLName_whenUsingURL_thenFileData() {\r\n    String expectedData = \"Baeldung\";\r\n\r\n    URL urlObject = new URL(\"/\");\r\n    URLConnection urlConnection = urlObject.openConnection();\r\n    InputStream inputStream = urlConnection.getInputStream();\r\n    String data = readFromInputStream(inputStream);\r\n\r\n    Assert.assertThat(data, containsString(expectedData));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFileName_whenUsingJarFile_thenFileData() {\r\n    String expectedData = \"BSD License\";\r\n\r\n    Class clazz = Matchers.class;\r\n    InputStream inputStream = clazz.getResourceAsStream(\"/LICENSE.txt\");\r\n    String data = readFromInputStream(inputStream);\r\n\r\n    Assert.assertThat(data, containsString(expectedData));\r\n}\r\n```"]