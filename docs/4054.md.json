["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.numericalmethod</groupId>\r\n        <artifactId>suanshu</artifactId>\r\n        <version>4.0.0</version>\r\n    </dependency>\r\n</dependencies>\r\n<repositories>\r\n    <repository>\r\n        <id>nm-repo</id>\r\n        <name>Numerical Method's Maven Repository</name>\r\n        <url>http://repo.numericalmethod.com/maven/</url>\r\n        <layout>default</layout>\r\n    </repository>\r\n</repositories>\r\n```","```\r\npublic void addingVectors() throws Exception {\r\n    Vector v1 = new DenseVector(new double[] {1, 2, 3, 4, 5});\r\n    Vector v2 = new DenseVector(new double[] {5, 4, 3, 2, 1});\r\n    Vector v3 = v1.add(v2);\r\n    log.info(\"Adding vectors: {}\", v3);\r\n}\r\n```","```\r\n[6.000000, 6.000000, 6.000000, 6.000000, 6.000000]\r\n```","```\r\npublic void scaleVector() throws Exception {\r\n    Vector v1 = new DenseVector(new double[]{1, 2, 3, 4, 5});\r\n    Vector v2 = v1.scaled(2.0);\r\n    log.info(\"Scaling a vector: {}\", v2);\r\n}\r\n```","```\r\n[2.000000, 4.000000, 6.000000, 8.000000, 10.000000]\r\n```","```\r\npublic void innerProductVectors() throws Exception {\r\n    Vector v1 = new DenseVector(new double[]{1, 2, 3, 4, 5});\r\n    Vector v2 = new DenseVector(new double[]{5, 4, 3, 2, 1});\r\n    double inner = v1.innerProduct(v2);\r\n    log.info(\"Vector inner product: {}\", inner);\r\n}\r\n```","```\r\npublic void addingIncorrectVectors() throws Exception {\r\n    Vector v1 = new DenseVector(new double[] {1, 2, 3});\r\n    Vector v2 = new DenseVector(new double[] {5, 4});\r\n    Vector v3 = v1.add(v2);\r\n}\r\n```","```\r\nException in thread \"main\" com.numericalmethod.suanshu.vector.doubles.IsVector$SizeMismatch: vectors do not have the same size: 3 and 2\r\n    at com.numericalmethod.suanshu.vector.doubles.IsVector.throwIfNotEqualSize(IsVector.java:101)\r\n    at com.numericalmethod.suanshu.vector.doubles.dense.DenseVector.add(DenseVector.java:174)\r\n    at com.baeldung.suanshu.SuanShuMath.addingIncorrectVectors(SuanShuMath.java:21)\r\n    at com.baeldung.suanshu.SuanShuMath.main(SuanShuMath.java:8)\r\n```","```\r\npublic void addingMatrices() throws Exception {\r\n    Matrix m1 = new DenseMatrix(new double[][]{\r\n        {1, 2, 3},\r\n        {4, 5, 6}\r\n    });\r\n\r\n    Matrix m2 = new DenseMatrix(new double[][]{\r\n        {3, 2, 1},\r\n        {6, 5, 4}\r\n    });\r\n\r\n    Matrix m3 = m1.add(m2);\r\n    log.info(\"Adding matrices: {}\", m3);\r\n}\r\n```","```\r\npublic void multiplyMatrices() throws Exception {\r\n    Matrix m1 = new DenseMatrix(new double[][]{\r\n        {1, 2, 3},\r\n        {4, 5, 6}\r\n    });\r\n\r\n    Matrix m2 = new DenseMatrix(new double[][]{\r\n        {1, 4},\r\n        {2, 5},\r\n        {3, 6}\r\n    });\r\n\r\n    Matrix m3 = m1.multiply(m2);\r\n    log.info(\"Multiplying matrices: {}\", m3);\r\n}\r\n```","```\r\npublic void multiplyIncorrectMatrices() throws Exception {\r\n    Matrix m1 = new DenseMatrix(new double[][]{\r\n        {1, 2, 3},\r\n        {4, 5, 6}\r\n    });\r\n\r\n    Matrix m2 = new DenseMatrix(new double[][]{\r\n        {3, 2, 1},\r\n        {6, 5, 4}\r\n    });\r\n\r\n    Matrix m3 = m1.multiply(m2);\r\n}\r\n```","```\r\nException in thread \"main\" com.numericalmethod.suanshu.matrix.MatrixMismatchException:\r\n    matrix with 3 columns and matrix with 2 rows cannot multiply due to mis-matched dimension\r\n    at com.numericalmethod.suanshu.datastructure.DimensionCheck.throwIfIncompatible4Multiplication(DimensionCheck.java:164)\r\n    at com.numericalmethod.suanshu.matrix.doubles.matrixtype.dense.DenseMatrix.multiply(DenseMatrix.java:374)\r\n    at com.baeldung.suanshu.SuanShuMath.multiplyIncorrectMatrices(SuanShuMath.java:98)\r\n    at com.baeldung.suanshu.SuanShuMath.main(SuanShuMath.java:22)\r\n```","```\r\npublic void inverseMatrix() {\r\n    Matrix m1 = new DenseMatrix(new double[][]{\r\n        {1, 2},\r\n        {3, 4}\r\n    });\r\n\r\n    Inverse m2 = new Inverse(m1);\r\n    log.info(\"Inverting a matrix: {}\", m2);\r\n}\r\n```","```\r\nlog.info(\"Verifying a matrix inverse: {}\", m1.multiply(m2));\r\n```","```\r\npublic Polynomial createPolynomial() {\r\n    return new Polynomial(new double[]{3, -5, 1});\r\n}\r\n```","```\r\npublic void evaluatePolynomial(Polynomial p) {\r\n    log.info(\"Evaluating a polynomial using a real number: {}\", p.evaluate(5));\r\n    log.info(\"Evaluating a polynomial using a complex number: {}\", p.evaluate(new Complex(1, 2)));\r\n}\r\n```","```\r\n51.0\r\n-13.000000+2.000000i\r\n```","```\r\npublic void solvePolynomial() {\r\n    Polynomial p = new Polynomial(new double[]{2, 2, -4});\r\n    PolyRootSolver solver = new PolyRoot();\r\n    List<? extends Number> roots = solver.solve(p);\r\n    log.info(\"Finding polynomial roots: {}\", roots);\r\n}\r\n```","```\r\n[-2.0, 1.0]\r\n```"]