["```\r\npublic class Worker implements Runnable {\r\n    private List<String> outputScraper;\r\n    private CountDownLatch countDownLatch;\r\n\r\n    public Worker(List<String> outputScraper, CountDownLatch countDownLatch) {\r\n        this.outputScraper = outputScraper;\r\n        this.countDownLatch = countDownLatch;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        doSomeWork();\r\n        outputScraper.add(\"Counted down\");\r\n        countDownLatch.countDown();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenParallelProcessing_thenMainThreadWillBlockUntilCompletion()\r\n  throws InterruptedException {\r\n\r\n    List<String> outputScraper = Collections.synchronizedList(new ArrayList<>());\r\n    CountDownLatch countDownLatch = new CountDownLatch(5);\r\n    List<Thread> workers = Stream\r\n      .generate(() -> new Thread(new Worker(outputScraper, countDownLatch)))\r\n      .limit(5)\r\n      .collect(toList());\r\n\r\n      workers.forEach(Thread::start);\r\n      countDownLatch.await(); \r\n      outputScraper.add(\"Latch released\");\r\n\r\n      assertThat(outputScraper)\r\n        .containsExactly(\r\n          \"Counted down\",\r\n          \"Counted down\",\r\n          \"Counted down\",\r\n          \"Counted down\",\r\n          \"Counted down\",\r\n          \"Latch released\"\r\n        );\r\n    }\r\n```","```\r\npublic class WaitingWorker implements Runnable {\r\n\r\n    private List<String> outputScraper;\r\n    private CountDownLatch readyThreadCounter;\r\n    private CountDownLatch callingThreadBlocker;\r\n    private CountDownLatch completedThreadCounter;\r\n\r\n    public WaitingWorker(\r\n      List<String> outputScraper,\r\n      CountDownLatch readyThreadCounter,\r\n      CountDownLatch callingThreadBlocker,\r\n      CountDownLatch completedThreadCounter) {\r\n\r\n        this.outputScraper = outputScraper;\r\n        this.readyThreadCounter = readyThreadCounter;\r\n        this.callingThreadBlocker = callingThreadBlocker;\r\n        this.completedThreadCounter = completedThreadCounter;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        readyThreadCounter.countDown();\r\n        try {\r\n            callingThreadBlocker.await();\r\n            doSomeWork();\r\n            outputScraper.add(\"Counted down\");\r\n        } catch (InterruptedException e) {\r\n            e.printStackTrace();\r\n        } finally {\r\n            completedThreadCounter.countDown();\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoingLotsOfThreadsInParallel_thenStartThemAtTheSameTime()\r\n throws InterruptedException {\r\n\r\n    List<String> outputScraper = Collections.synchronizedList(new ArrayList<>());\r\n    CountDownLatch readyThreadCounter = new CountDownLatch(5);\r\n    CountDownLatch callingThreadBlocker = new CountDownLatch(1);\r\n    CountDownLatch completedThreadCounter = new CountDownLatch(5);\r\n    List<Thread> workers = Stream\r\n      .generate(() -> new Thread(new WaitingWorker(\r\n        outputScraper, readyThreadCounter, callingThreadBlocker, completedThreadCounter)))\r\n      .limit(5)\r\n      .collect(toList());\r\n\r\n    workers.forEach(Thread::start);\r\n    readyThreadCounter.await(); \r\n    outputScraper.add(\"Workers ready\");\r\n    callingThreadBlocker.countDown(); \r\n    completedThreadCounter.await(); \r\n    outputScraper.add(\"Workers complete\");\r\n\r\n    assertThat(outputScraper)\r\n      .containsExactly(\r\n        \"Workers ready\",\r\n        \"Counted down\",\r\n        \"Counted down\",\r\n        \"Counted down\",\r\n        \"Counted down\",\r\n        \"Counted down\",\r\n        \"Workers complete\"\r\n      );\r\n}\r\n```","```\r\n@Override\r\npublic void run() {\r\n    if (true) {\r\n        throw new RuntimeException(\"Oh dear, I'm a BrokenWorker\");\r\n    }\r\n    countDownLatch.countDown();\r\n    outputScraper.add(\"Counted down\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenFailingToParallelProcess_thenMainThreadShouldGetNotGetStuck()\r\n  throws InterruptedException {\r\n\r\n    List<String> outputScraper = Collections.synchronizedList(new ArrayList<>());\r\n    CountDownLatch countDownLatch = new CountDownLatch(5);\r\n    List<Thread> workers = Stream\r\n      .generate(() -> new Thread(new BrokenWorker(outputScraper, countDownLatch)))\r\n      .limit(5)\r\n      .collect(toList());\r\n\r\n    workers.forEach(Thread::start);\r\n    countDownLatch.await();\r\n}\r\n```","```\r\nboolean completed = countDownLatch.await(3L, TimeUnit.SECONDS);\r\nassertThat(completed).isFalse();\r\n```"]