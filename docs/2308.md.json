["```\r\n<dependency>\r\n    <groupId>org.powermock</groupId>\r\n    <artifactId>powermock-module-junit4</artifactId>\r\n    <version>1.6.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.powermock</groupId>\r\n    <artifactId>powermock-api-mockito</artifactId>\r\n    <version>1.6.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@RunWith(PowerMockRunner.class)\r\n@PrepareForTest(fullyQualifiedNames = \"com.baeldung.powermockito.introduction.*\")\r\n```","```\r\npublic class CollaboratorWithFinalMethods {\r\n    public final String helloMethod() {\r\n        return \"Hello World!\";\r\n    }\r\n}\r\n```","```\r\nCollaboratorWithFinalMethods mock = mock(CollaboratorWithFinalMethods.class);\r\n```","```\r\nwhenNew(CollaboratorWithFinalMethods.class).withNoArguments().thenReturn(mock);\r\n```","```\r\nCollaboratorWithFinalMethods collaborator = new CollaboratorWithFinalMethods();\r\nverifyNew(CollaboratorWithFinalMethods.class).withNoArguments();\r\n```","```\r\nwhen(collaborator.helloMethod()).thenReturn(\"Hello Baeldung!\");\r\n```","```\r\nString welcome = collaborator.helloMethod();\r\n```","```\r\nMockito.verify(collaborator).helloMethod();\r\nassertEquals(\"Hello Baeldung!\", welcome);\r\n```","```\r\npublic class CollaboratorWithStaticMethods {\r\n    public static String firstMethod(String name) {\r\n        return \"Hello \" + name + \" !\";\r\n    }\r\n\r\n    public static String secondMethod() {\r\n        return \"Hello no one!\";\r\n    }\r\n\r\n    public static String thirdMethod() {\r\n        return \"Hello no one again!\";\r\n    }\r\n}\r\n```","```\r\nmockStatic(CollaboratorWithStaticMethods.class);\r\n```","```\r\nwhen(CollaboratorWithStaticMethods.firstMethod(Mockito.anyString()))\r\n  .thenReturn(\"Hello Baeldung!\");\r\nwhen(CollaboratorWithStaticMethods.secondMethod()).thenReturn(\"Nothing special\");\r\n```","```\r\ndoThrow(new RuntimeException()).when(CollaboratorWithStaticMethods.class);\r\nCollaboratorWithStaticMethods.thirdMethod();\r\n```","```\r\nString firstWelcome = CollaboratorWithStaticMethods.firstMethod(\"Whoever\");\r\nString secondWelcome = CollaboratorWithStaticMethods.firstMethod(\"Whatever\");\r\n```","```\r\nassertEquals(\"Hello Baeldung!\", firstWelcome);\r\nassertEquals(\"Hello Baeldung!\", secondWelcome);\r\n```","```\r\nverifyStatic(Mockito.times(2));\r\nCollaboratorWithStaticMethods.firstMethod(Mockito.anyString());\r\n\r\nverifyStatic(Mockito.never());\r\nCollaboratorWithStaticMethods.secondMethod();\r\n```","```\r\n@Test(expected = RuntimeException.class)\r\npublic void givenStaticMethods_whenUsingPowerMockito_thenCorrect() {\r\n    // other methods   \r\n\r\n    CollaboratorWithStaticMethods.thirdMethod();\r\n}\r\n```","```\r\npublic class CollaboratorForPartialMocking {\r\n    public static String staticMethod() {\r\n        return \"Hello Baeldung!\";\r\n    }\r\n\r\n    public final String finalMethod() {\r\n        return \"Hello Baeldung!\";\r\n    }\r\n\r\n    private String privateMethod() {\r\n        return \"Hello Baeldung!\";\r\n    }\r\n\r\n    public String privateMethodCaller() {\r\n        return privateMethod() + \" Welcome to the Java world.\";\r\n    }\r\n}\r\n```","```\r\nspy(CollaboratorForPartialMocking.class);\r\nwhen(CollaboratorForPartialMocking.staticMethod()).thenReturn(\"I am a static mock method.\");\r\n```","```\r\nreturnValue = CollaboratorForPartialMocking.staticMethod();\r\n```","```\r\nverifyStatic();\r\nCollaboratorForPartialMocking.staticMethod();\r\n```","```\r\nassertEquals(\"I am a static mock method.\", returnValue);\r\n```","```\r\nCollaboratorForPartialMocking collaborator = new CollaboratorForPartialMocking();\r\nCollaboratorForPartialMocking mock = spy(collaborator);\r\n```","```\r\nwhen(mock.finalMethod()).thenReturn(\"I am a final mock method.\");\r\nreturnValue = mock.finalMethod();\r\n```","```\r\nMockito.verify(mock).finalMethod();\r\n```","```\r\nassertEquals(\"I am a final mock method.\", returnValue);\r\n```","```\r\nwhen(mock, \"privateMethod\").thenReturn(\"I am a private mock method.\");\r\nreturnValue = mock.privateMethodCaller();\r\n```","```\r\nverifyPrivate(mock).invoke(\"privateMethod\");\r\n```","```\r\nassertEquals(\"I am a private mock method. Welcome to the Java world.\", returnValue);\r\n```"]