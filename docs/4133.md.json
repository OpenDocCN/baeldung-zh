["```\r\n<dependency>\r\n    <groupId>com.github.jknack</groupId>\r\n    <artifactId>handlebars</artifactId>\r\n    <version>4.1.2</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenThereIsNoTemplateFile_ThenCompilesInline() throws IOException {\r\n    Handlebars handlebars = new Handlebars();\r\n    Template template = handlebars.compileInline(\"Hi {{this}}!\");\r\n\r\n    String templateString = template.apply(\"Baeldung\");\r\n\r\n    assertThat(templateString).isEqualTo(\"Hi Baeldung!\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenParameterMapIsSupplied_thenDisplays() throws IOException {\r\n    Handlebars handlebars = new Handlebars();\r\n    Template template = handlebars.compileInline(\"Hi {{name}}!\");\r\n    Map<String, String> parameterMap = new HashMap<>();\r\n    parameterMap.put(\"name\", \"Baeldung\");\r\n\r\n    String templateString = template.apply(parameterMap);\r\n\r\n    assertThat(templateString).isEqualTo(\"Hi Baeldung!\");\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private boolean busy;\r\n    private Address address = new Address();\r\n    private List<Person> friends = new ArrayList<>();\r\n\r\n    public static class Address {\r\n        private String street;       \r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenParameterObjectIsSupplied_ThenDisplays() throws IOException {\r\n    Handlebars handlebars = new Handlebars();\r\n    Template template = handlebars.compileInline(\"Hi {{name}}!\");\r\n    Person person = new Person();\r\n    person.setName(\"Baeldung\");\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString).isEqualTo(\"Hi Baeldung!\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenNoLoaderIsGiven_ThenSearchesClasspath() throws IOException {\r\n    Handlebars handlebars = new Handlebars();\r\n    Template template = handlebars.compile(\"greeting\");\r\n    Person person = getPerson(\"Baeldung\");\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString).isEqualTo(\"Hi Baeldung!\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenClasspathTemplateLoaderIsGiven_ThenSearchesClasspathWithPrefixSuffix() throws IOException {\r\n    TemplateLoader loader = new ClassPathTemplateLoader(\"/handlebars\", \".html\");\r\n    Handlebars handlebars = new Handlebars(loader);\r\n    Template template = handlebars.compile(\"greeting\");\r\n    // ... same as before\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleLoadersAreGiven_ThenSearchesSequentially() throws IOException {\r\n    TemplateLoader firstLoader = new ClassPathTemplateLoader(\"/handlebars\", \".html\");\r\n    TemplateLoader secondLoader = new ClassPathTemplateLoader(\"/templates\", \".html\");\r\n    Handlebars handlebars = new Handlebars().with(firstLoader, secondLoader);\r\n    // ... same as before\r\n}\r\n```","```\r\n{{#with address}}\r\n<h4>I live in {{street}}</h4>\r\n{{/with}}\r\n```","```\r\n@Test\r\npublic void whenUsedWith_ThenContextChanges() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    Template template = handlebars.compile(\"with\");\r\n    Person person = getPerson(\"Baeldung\");\r\n    person.getAddress().setStreet(\"World\");\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString).contains(\"<h4>I live in World</h4>\");\r\n}\r\n```","```\r\n{{#each friends}}\r\n<span>{{name}} is my friend.</span>\r\n{{/each}}\r\n```","```\r\n@Test\r\npublic void whenUsedEach_ThenIterates() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    Template template = handlebars.compile(\"each\");\r\n    Person person = getPerson(\"Baeldung\");\r\n    Person friend1 = getPerson(\"Java\");\r\n    Person friend2 = getPerson(\"Spring\");\r\n    person.getFriends().add(friend1);\r\n    person.getFriends().add(friend2);\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString)\r\n      .contains(\"<span>Java is my friend.</span>\", \"<span>Spring is my friend.</span>\");\r\n}\r\n```","```\r\n{{#if busy}}\r\n<h4>{{name}} is busy.</h4>\r\n{{else}}\r\n<h4>{{name}} is not busy.</h4>\r\n{{/if}}\r\n```","```\r\n@Test\r\npublic void whenUsedIf_ThenPutsCondition() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    Template template = handlebars.compile(\"if\");\r\n    Person person = getPerson(\"Baeldung\");\r\n    person.setBusy(true);\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString).contains(\"<h4>Baeldung is busy.</h4>\");\r\n}\r\n```","```\r\nnew Helper<Person>() {\r\n    @Override\r\n    public Object apply(Person context, Options options) throws IOException {\r\n        String busyString = context.isBusy() ? \"busy\" : \"available\";\r\n        return context.getName() + \" - \" + busyString;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenHelperIsCreated_ThenCanRegister() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    handlebars.registerHelper(\"isBusy\", new Helper<Person>() {\r\n        @Override\r\n        public Object apply(Person context, Options options) throws IOException {\r\n            String busyString = context.isBusy() ? \"busy\" : \"available\";\r\n            return context.getName() + \" - \" + busyString;\r\n        }\r\n    });\r\n\r\n    // implementation details\r\n}\r\n```","```\r\n{{#isBusy this}}{{/isBusy}}\r\n```","```\r\npublic class HelperSource {\r\n\r\n    public String isBusy(Person context) {\r\n        String busyString = context.isBusy() ? \"busy\" : \"available\";\r\n        return context.getName() + \" - \" + busyString;\r\n    }\r\n\r\n    // Other helper methods\r\n}\r\n```","```\r\n@Test\r\npublic void whenHelperSourceIsCreated_ThenCanRegister() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    handlebars.registerHelpers(new HelperSource());\r\n\r\n    // Implementation details\r\n}\r\n```","```\r\n<h4>Hi {{name}}!</h4>\r\n```","```\r\n{{>header}}\r\n<p>This is the page {{name}}</p>\r\n```","```\r\n@Test\r\npublic void whenOtherTemplateIsReferenced_ThenCanReuse() throws IOException {\r\n    Handlebars handlebars = new Handlebars(templateLoader);\r\n    Template template = handlebars.compile(\"page\");\r\n    Person person = new Person();\r\n    person.setName(\"Baeldung\");\r\n\r\n    String templateString = template.apply(person);\r\n\r\n    assertThat(templateString)\r\n      .contains(\"<h4>Hi Baeldung!</h4>\", \"<p>This is the page Baeldung</p>\");\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n{{#block \"intro\"}}\r\n  This is the intro\r\n{{/block}}\r\n{{#block \"message\"}}\r\n{{/block}}\r\n</body>\r\n</html>\r\n```","```\r\n{{#partial \"message\" }}\r\n  Hi there!\r\n{{/partial}}\r\n{{> messagebase}}\r\n```"]