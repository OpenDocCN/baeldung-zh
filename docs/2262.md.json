["```\r\npublic class Account {\r\n\r\n    @NotNull\r\n    @Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n    @Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n    private String username;\r\n\r\n    @NotNull\r\n    @Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n    @Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n    private String nickname;\r\n\r\n    @NotNull\r\n    @Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n    @Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n    private String password;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@NotNull\r\n@Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n@Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\r\n@Retention(RUNTIME)\r\n@Documented\r\n@Constraint(validatedBy = {})\r\npublic @interface ValidAlphanumeric {\r\n\r\n    String message() default \"field should have a valid length and contain numeric character(s).\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\npublic class Account {\r\n\r\n    @ValidAlphanumeric\r\n    private String username;\r\n\r\n    @ValidAlphanumeric\r\n    private String password;\r\n\r\n    @ValidAlphanumeric\r\n    private String nickname;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsernameIsInvalid_validationShouldReturnTwoViolations() {\r\n    Account account = new Account();\r\n    account.setPassword(\"valid_password123\");\r\n    account.setNickname(\"valid_nickname123\");\r\n    account.setUsername(\"john\");\r\n\r\n    Set<ConstraintViolation<Account>> violations = validator.validate(account);\r\n\r\n    assertThat(violations).hasSize(2);\r\n}\r\n```","```\r\n@NotNull\r\n@Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n@Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\r\n@Retention(RUNTIME)\r\n@Documented\r\n@Constraint(validatedBy = {})\r\n@ReportAsSingleViolation\r\npublic @interface ValidAlphanumericWithSingleViolation {\r\n\r\n    String message() default \"field should have a valid length and contain numeric character(s).\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\n@Test\r\npublic void whenPasswordIsInvalid_validationShouldReturnSingleViolation() {\r\n    Account account = new Account();\r\n    account.setUsername(\"valid_username123\");\r\n    account.setNickname(\"valid_nickname123\");\r\n    account.setPassword(\"john\");\r\n\r\n    Set<ConstraintViolation<Account>> violations = validator.validate(account);\r\n\r\n    assertThat(violations).hasSize(1);\r\n} \r\n```","```\r\n@Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n@Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\r\n@Retention(RUNTIME)\r\n@Documented\r\n@Constraint(validatedBy = {})\r\n@ConstraintComposition(CompositionType.OR)\r\npublic @interface ValidLengthOrNumericCharacter {\r\n\r\n    String message() default \"field should have a valid length or contain numeric character(s).\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\n@Test\r\npublic void whenNicknameIsTooShortButContainsNumericCharacter_validationShouldPass() {\r\n    Account account = new Account();\r\n    account.setUsername(\"valid_username123\");\r\n    account.setPassword(\"valid_password123\");\r\n    account.setNickname(\"doe1\");\r\n\r\n    Set<ConstraintViolation<Account>> violations = validator.validate(account);\r\n\r\n    assertThat(violations).isEmpty();\r\n}\r\n```","```\r\n@NotNull\r\n@Pattern(regexp = \".*\\\\d.*\", message = \"must contain at least one numeric character\")\r\n@Length(min = 6, max = 32, message = \"must have between 6 and 32 characters\")\r\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER })\r\n@Retention(RUNTIME)\r\n@Documented\r\n@Constraint(validatedBy = {})\r\n@SupportedValidationTarget(ValidationTarget.ANNOTATED_ELEMENT)\r\npublic @interface AlphanumericReturnValue {\r\n\r\n    String message() default \"method return value should have a valid length and contain numeric character(s).\";\r\n\r\n    Class<?>[] groups() default {};\r\n\r\n    Class<? extends Payload>[] payload() default {};\r\n}\r\n```","```\r\n@Component\r\n@Validated\r\npublic class AccountService {\r\n\r\n    @AlphanumericReturnValue\r\n    public String getAnInvalidAlphanumericValue() {\r\n        return \"john\"; \r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenMethodReturnValuesIsInvalid_validationShouldFail() {\r\n    assertThatThrownBy(() -> accountService.getAnInvalidAlphanumericValue())\t\t\t\t \r\n      .isInstanceOf(ConstraintViolationException.class)\r\n      .hasMessageContaining(\"must contain at least one numeric character\")\r\n      .hasMessageContaining(\"must have between 6 and 32 characters\");\r\n}\r\n```"]