["```\r\n@JsonTypeInfo(use = Id.NAME)\r\n@JsonSubTypes({ @Type(ImperialSpy.class), @Type(King.class), @Type(Knight.class) })\r\npublic interface Character {\r\n}\r\n```","```\r\npublic class NamedCharacter implements Character {\r\n    private String name;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic class ImperialSpy implements Character {\r\n}\r\n```","```\r\npublic class King extends NamedCharacter {\r\n    private String land;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic class Knight extends NamedCharacter {\r\n    private String weapon;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\n{\r\n    \"name\": \"Old King Allant\",\r\n    \"land\": \"Boletaria\",\r\n}\r\n```","```\r\n@Test\r\nvoid givenAKingWithoutType_whenMapping_thenExpectAnError() {\r\n    String kingJson = formatJson(\"{'name': 'Old King Allant', 'land':'Boletaria'}\");\r\n    assertThrows(InvalidTypeIdException.class, () -> objectMapper.readValue(kingJson, Character.class));\r\n}\r\n```","```\r\npublic static String formatJson(String input) {\r\n    return input.replaceAll(\"'\", \"\\\"\");\r\n}\r\n```","```\r\n{\r\n    \"@type\": \"King\"\r\n    \"name\": \"Old King Allant\",\r\n    \"land\": \"Boletaria\",\r\n}\r\n```","```\r\n@Test\r\nvoid givenAKing_whenMapping_thenExpectAKingType() throws Exception {\r\n    String kingJson = formatJson(\"{'name': 'Old King Allant', 'land':'Boletaria', '@type':'King'}\");\r\n\r\n    Character character = objectMapper.readValue(kingJson, Character.class);\r\n    assertTrue(character instanceof King);\r\n    assertSame(character.getClass(), King.class);\r\n    King king = (King) character;\r\n    assertEquals(\"Boletaria\", king.getLand());\r\n}\r\n```","```\r\n@JsonTypeInfo(use = Id.DEDUCTION)\r\n@JsonSubTypes({ @Type(ImperialSpy.class), @Type(King.class), @Type(Knight.class) })\r\npublic interface Character {\r\n}\r\n```","```\r\n{\r\n    \"name\": \"Ostrava, of Boletaria\",\r\n    \"weapon\": \"Rune Sword\",\r\n}\r\n```","```\r\n@Test\r\nvoid givenAKnight_whenMapping_thenExpectAKnightType() throws Exception {\r\n    String knightJson = formatJson(\"{'name':'Ostrava, of Boletaria', 'weapon':'Rune Sword'}\");\r\n\r\n    Character character = objectMapper.readValue(knightJson, Character.class);\r\n\r\n    assertTrue(character instanceof Knight);\r\n    assertSame(character.getClass(), Knight.class);\r\n    Knight king = (Knight) character;\r\n    assertEquals(\"Ostrava, of Boletaria\", king.getName());\r\n    assertEquals(\"Rune Sword\", king.getWeapon());\r\n}\r\n```","```\r\n@Test\r\nvoid givenAnEmptyObject_whenMapping_thenExpectAnImperialSpy() throws Exception {\r\n    String imperialSpyJson = \"{}\";\r\n\r\n    Character character = objectMapper.readValue(imperialSpyJson, Character.class);\r\n\r\n    assertTrue(character instanceof ImperialSpy);\r\n}\r\n```","```\r\n@Test\r\nvoid givenANullObject_whenMapping_thenExpectANullObject() throws Exception {\r\n    Character character = objectMapper.readValue(\"null\", Character.class);\r\n\r\n    assertNull(character);\r\n}\r\n```","```\r\nObjectMapper objectMapper = JsonMapper.builder().configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true).build();\r\n```","```\r\n{\r\n    \"NaMe\": \"Ostrava, of Boletaria\",\r\n    \"WeaPON\": \"Rune Sword\",\r\n}\r\n```","```\r\n@Test\r\nvoid givenACaseInsensitiveKnight_whenMapping_thenExpectKnight() throws Exception {\r\n    String knightJson = formatJson(\"{'NaMe':'Ostrava, of Boletaria', 'WeaPON':'Rune Sword'}\");\r\n\r\n    Character character = objectMapper.readValue(knightJson, Character.class);\r\n\r\n    assertTrue(character instanceof Knight);\r\n    assertSame(character.getClass(), Knight.class);\r\n    Knight knight = (Knight) character;\r\n    assertEquals(\"Ostrava, of Boletaria\", knight.getName());\r\n    assertEquals(\"Rune Sword\", knight.getWeapon());\r\n}\r\n```","```\r\n{\r\n    \"character\": {\r\n        \"name\": \"Ostrava, of Boletaria\",\r\n        \"weapon\": \"Rune Sword\"\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenAKnightControlledCharacter_whenMapping_thenExpectAControlledCharacterWithKnight() throws Exception {\r\n    String controlledCharacterJson = formatJson(\"{'character': {'name': 'Ostrava, of Boletaria', 'weapon': 'Rune Sword'}}\");\r\n\r\n    ControlledCharacter controlledCharacter = objectMapper.readValue(controlledCharacterJson, ControlledCharacter.class);\r\n    Character character = controlledCharacter.getCharacter();\r\n\r\n    assertTrue(character instanceof Knight);\r\n    assertSame(character.getClass(), Knight.class);\r\n    Knight knight = (Knight) character;\r\n    assertEquals(\"Ostrava, of Boletaria\", knight.getName());\r\n    assertEquals(\"Rune Sword\", knight.getWeapon());\r\n}\r\n```"]