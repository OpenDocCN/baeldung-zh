["```\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-frontend-jaxws</artifactId>\r\n    <version>3.1.6</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-transports-http-jetty</artifactId>\r\n    <version>3.1.6</version>\r\n</dependency>\r\n```","```\r\n@WebService(endpointInterface = \"com.baeldung.cxf.introduction.Baeldung\")\r\npublic class BaeldungImpl implements Baeldung {\r\n    private Map<Integer, Student> students \r\n      = new LinkedHashMap<Integer, Student>();\r\n\r\n    public String hello(String name) {\r\n        return \"Hello \" + name;\r\n    }\r\n\r\n    public String helloStudent(Student student) {\r\n        students.put(students.size() + 1, student);\r\n        return \"Hello \" + student.getName();\r\n    }\r\n\r\n    public Map<Integer, Student> getStudents() {\r\n        return students;\r\n    }\r\n}\r\n```","```\r\n@WebService\r\npublic interface Baeldung {\r\n    public String hello(String name);\r\n\r\n    public String helloStudent(Student student);\r\n\r\n    @XmlJavaTypeAdapter(StudentMapAdapter.class)\r\n    public Map<Integer, Student> getStudents();\r\n}\r\n```","```\r\n@XmlJavaTypeAdapter(StudentAdapter.class)\r\npublic interface Student {\r\n    public String getName();\r\n}\r\n```","```\r\npublic class StudentAdapter extends XmlAdapter<StudentImpl, Student> {\r\n    public StudentImpl marshal(Student student) throws Exception {\r\n        if (student instanceof StudentImpl) {\r\n            return (StudentImpl) student;\r\n        }\r\n        return new StudentImpl(student.getName());\r\n    }\r\n\r\n    public Student unmarshal(StudentImpl student) throws Exception {\r\n        return student;\r\n    }\r\n}\r\n```","```\r\n@XmlType(name = \"Student\")\r\npublic class StudentImpl implements Student {\r\n    private String name;\r\n\r\n    // constructors, getter and setter\r\n}\r\n```","```\r\npublic class StudentMapAdapter \r\n  extends XmlAdapter<StudentMap, Map<Integer, Student>> {\r\n    public StudentMap marshal(Map<Integer, Student> boundMap) throws Exception {\r\n        StudentMap valueMap = new StudentMap();\r\n        for (Map.Entry<Integer, Student> boundEntry : boundMap.entrySet()) {\r\n            StudentMap.StudentEntry valueEntry  = new StudentMap.StudentEntry();\r\n            valueEntry.setStudent(boundEntry.getValue());\r\n            valueEntry.setId(boundEntry.getKey());\r\n            valueMap.getEntries().add(valueEntry);\r\n        }\r\n        return valueMap;\r\n    }\r\n\r\n    public Map<Integer, Student> unmarshal(StudentMap valueMap) throws Exception {\r\n        Map<Integer, Student> boundMap = new LinkedHashMap<Integer, Student>();\r\n        for (StudentMap.StudentEntry studentEntry : valueMap.getEntries()) {\r\n            boundMap.put(studentEntry.getId(), studentEntry.getStudent());\r\n        }\r\n        return boundMap;\r\n    }\r\n}\r\n```","```\r\n@XmlType(name = \"StudentMap\")\r\npublic class StudentMap {\r\n    private List<StudentEntry> entries = new ArrayList<StudentEntry>();\r\n\r\n    @XmlElement(nillable = false, name = \"entry\")\r\n    public List<StudentEntry> getEntries() {\r\n        return entries;\r\n    }\r\n\r\n    @XmlType(name = \"StudentEntry\")\r\n    public static class StudentEntry {\r\n        private Integer id;\r\n        private Student student;\r\n\r\n        // getters and setters\r\n    }\r\n}\r\n```","```\r\npublic class Server {\r\n    public static void main(String args[]) throws InterruptedException {\r\n        BaeldungImpl implementor = new BaeldungImpl();\r\n        String address = \"http://localhost:8080/baeldung\";\r\n        Endpoint.publish(address, implementor);\r\n        Thread.sleep(60 * 1000);        \r\n        System.exit(0);\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>exec-maven-plugin</artifactId>\r\n    <configuration>\r\n        <mainClass>com.baeldung.cxf.introduction.Server</mainClass>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\npublic class StudentTest {\r\n    private static QName SERVICE_NAME \r\n      = new QName(\"http://introduction.cxf.baeldung.com/\", \"Baeldung\");\r\n    private static QName PORT_NAME \r\n      = new QName(\"http://introduction.cxf.baeldung.com/\", \"BaeldungPort\");\r\n\r\n    private Service service;\r\n    private Baeldung baeldungProxy;\r\n    private BaeldungImpl baeldungImpl;\r\n\r\n    // other declarations\r\n}\r\n```","```\r\n{\r\n    service = Service.create(SERVICE_NAME);\r\n    String endpointAddress = \"http://localhost:8080/baeldung\";\r\n    service.addPort(PORT_NAME, SOAPBinding.SOAP11HTTP_BINDING, endpointAddress);\r\n}\r\n```","```\r\n@Before\r\npublic void reinstantiateBaeldungInstances() {\r\n    baeldungImpl = new BaeldungImpl();\r\n    baeldungProxy = service.getPort(PORT_NAME, Baeldung.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingHelloMethod_thenCorrect() {\r\n    String endpointResponse = baeldungProxy.hello(\"Baeldung\");\r\n    String localResponse = baeldungImpl.hello(\"Baeldung\");\r\n    assertEquals(localResponse, endpointResponse);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingHelloStudentMethod_thenCorrect() {\r\n    Student student = new StudentImpl(\"John Doe\");\r\n    String endpointResponse = baeldungProxy.helloStudent(student);\r\n    String localResponse = baeldungImpl.helloStudent(student);\r\n    assertEquals(localResponse, endpointResponse);\r\n}\r\n```","```\r\n@Test\r\npublic void usingGetStudentsMethod_thenCorrect() {\r\n    Student student1 = new StudentImpl(\"Adam\");\r\n    baeldungProxy.helloStudent(student1);\r\n\r\n    Student student2 = new StudentImpl(\"Eve\");\r\n    baeldungProxy.helloStudent(student2);\r\n\r\n    Map<Integer, Student> students = baeldungProxy.getStudents();       \r\n    assertEquals(\"Adam\", students.get(1).getName());\r\n    assertEquals(\"Eve\", students.get(2).getName());\r\n}\r\n```"]