["```\r\n<dependency>\r\n    <groupId>info.picocli</groupId>\r\n    <artifactId>picocli</artifactId>\r\n    <version>3.9.6</version>\r\n</dependency>\r\n```","```\r\n@Command(\r\n  name = \"hello\",\r\n  description = \"Says hello\"\r\n)\r\npublic class HelloWorldCommand {\r\n}\r\n```","```\r\npublic class HelloWorldCommand implements Runnable {\r\n    public static void main(String[] args) {\r\n        CommandLine.run(new HelloWorldCommand(), args);\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Hello World!\");\r\n    }\r\n}\r\n```","```\r\njava -cp \"pathToPicocliJar;pathToCommandJar\" com.baeldung.picoli.helloworld.HelloWorldCommand\r\n```","```\r\n@Command\r\npublic class GitCommand implements Runnable {\r\n    public static void main(String[] args) {\r\n        CommandLine.run(new GitCommand(), args);\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"The popular git command\");\r\n    }\r\n}\r\n```","```\r\n@Command(\r\n  subcommands = {\r\n      GitAddCommand.class,\r\n      GitCommitCommand.class\r\n  }\r\n)\r\n```","```\r\n@Command(\r\n  name = \"add\"\r\n)\r\npublic class GitAddCommand implements Runnable {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Adding some files to the staging area\");\r\n    }\r\n}\r\n```","```\r\n@Command(\r\n  name = \"commit\"\r\n)\r\npublic class GitCommitCommand implements Runnable {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"Committing files in the staging area, how wonderful?\");\r\n    }\r\n}\r\n```","```\r\n@Command(name = \"add\")\r\npublic void addCommand() {\r\n    System.out.println(\"Adding some files to the staging area\");\r\n}\r\n\r\n@Command(name = \"commit\")\r\npublic void commitCommand() {\r\n    System.out.println(\"Committing files in the staging area, how wonderful?\");\r\n}\r\n```","```\r\nCommandLine commandLine = new CommandLine(new GitCommand());\r\ncommandLine.addSubcommand(\"add\", new GitAddCommand());\r\ncommandLine.addSubcommand(\"commit\", new GitCommitCommand());\r\n```","```\r\ncommandLine.parseWithHandler(new RunLast(), args);\r\n```","```\r\n@Option(names = {\"-A\", \"--all\"})\r\nprivate boolean allFiles;\r\n\r\n@Override\r\npublic void run() {\r\n    if (allFiles) {\r\n        System.out.println(\"Adding all files to the staging area\");\r\n    } else {\r\n        System.out.println(\"Adding some files to the staging area\");\r\n    }\r\n}\r\n```","```\r\n@Option(names = {\"-m\", \"--message\"})\r\nprivate String message;\r\n\r\n@Override\r\npublic void run() {\r\n    System.out.println(\"Committing files in the staging area, how wonderful?\");\r\n    if (message != null) {\r\n        System.out.println(\"The commit message is \" + message);\r\n    }\r\n}\r\n```","```\r\n@Option(names = {\"-m\", \"--message\"})\r\nprivate String[] messages;\r\n\r\n@Override\r\npublic void run() {\r\n    System.out.println(\"Committing files in the staging area, how wonderful?\");\r\n    if (messages != null) {\r\n        System.out.println(\"The commit message is\");\r\n        for (String message : messages) {\r\n            System.out.println(message);\r\n        }\r\n    }\r\n}\r\n```","```\r\ncommit -m \"My commit is great\" -m \"My commit is beautiful\"\r\n```","```\r\n@Option(names = {\"-m\", \"--message\"}, split = \",\")\r\nprivate String[] messages;\r\n```","```\r\n@Option(names = {\"-m\", \"--message\"}, required = true)\r\nprivate String[] messages;\r\n```","```\r\nMissing required option '--message=<messages>'\r\nUsage: git commit -m=<messages> [-m=<messages>]...\r\n  -m, --message=<messages>\r\n```","```\r\nadd file1 file2\r\n```","```\r\n@Parameters\r\nprivate List<Path> files;\r\n\r\n@Override\r\npublic void run() {\r\n    if (allFiles) {\r\n        System.out.println(\"Adding all files to the staging area\");\r\n    }\r\n\r\n    if (files != null) {\r\n        files.forEach(path -> System.out.println(\"Adding \" + path + \" to the staging area\"));\r\n    }\r\n}\r\n```","```\r\nAdding file1 to the staging area\r\nAdding file2 to the staging area\r\n```","```\r\n@Parameters(index=\"2..*\")\r\n```","```\r\npublic enum ConfigElement {\r\n    USERNAME(\"user.name\"),\r\n    EMAIL(\"user.email\");\r\n\r\n    private final String value;\r\n\r\n    ConfigElement(String value) {\r\n        this.value = value;\r\n    }\r\n\r\n    public String value() {\r\n        return value;\r\n    }\r\n\r\n    public static ConfigElement from(String value) {\r\n        return Arrays.stream(values())\r\n          .filter(element -> element.value.equals(value))\r\n          .findFirst()\r\n          .orElseThrow(() -> new IllegalArgumentException(\"The argument \" \r\n          + value + \" doesn't match any ConfigElement\"));\r\n    }\r\n}\r\n```","```\r\n@Parameters(index = \"0\")\r\nprivate ConfigElement element;\r\n\r\n@Parameters(index = \"1\")\r\nprivate String value;\r\n\r\n@Override\r\npublic void run() {\r\n    System.out.println(\"Setting \" + element.value() + \" to \" + value);\r\n}\r\n```","```\r\nCommandLine commandLine = new CommandLine(new GitCommand());\r\ncommandLine.registerConverter(ConfigElement.class, ConfigElement::from);\r\n\r\ncommandLine.parseWithHandler(new RunLast(), args);\r\n```","```\r\nInvalid value for positional parameter at index 0 (<element>): \r\ncannot convert 'user.phone' to ConfigElement \r\n(java.lang.IllegalArgumentException: The argument user.phone doesn't match any ConfigElement)\r\nUsage: git config <element> <value>\r\n      <element>\r\n      <value>\r\n```","```\r\n@SpringBootApplication\r\npublic class Application implements CommandLineRunner {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n    @Override\r\n    public void run(String... args) {\r\n    }\r\n}\r\n```","```\r\nprivate GitCommand gitCommand;\r\nprivate GitAddCommand addCommand;\r\nprivate GitCommitCommand commitCommand;\r\nprivate GitConfigCommand configCommand;\r\n\r\npublic Application(GitCommand gitCommand, GitAddCommand addCommand, \r\n  GitCommitCommand commitCommand, GitConfigCommand configCommand) {\r\n    this.gitCommand = gitCommand;\r\n    this.addCommand = addCommand;\r\n    this.commitCommand = commitCommand;\r\n    this.configCommand = configCommand;\r\n}\r\n```","```\r\n@Override\r\npublic void run(String... args) {\r\n    CommandLine commandLine = new CommandLine(gitCommand);\r\n    commandLine.addSubcommand(\"add\", addCommand);\r\n    commandLine.addSubcommand(\"commit\", commitCommand);\r\n    commandLine.addSubcommand(\"config\", configCommand);\r\n\r\n    commandLine.parseWithHandler(new CommandLine.RunLast(), args);\r\n}\r\n```"]