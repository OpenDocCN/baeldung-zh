["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.6.1</version>\r\n    <relativePath/>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-security</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n     </dependency>\r\n     <dependency>\r\n        <groupId>org.thymeleaf.extras</groupId>\r\n        <artifactId>thymeleaf-extras-springsecurity5</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\npublic class SimpleAuthenticationFilter\r\n  extends UsernamePasswordAuthenticationFilter {\r\n\r\n    @Override\r\n    public Authentication attemptAuthentication(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response) \r\n        throws AuthenticationException {\r\n\r\n        // ...\r\n\r\n        UsernamePasswordAuthenticationToken authRequest\r\n          = getAuthRequest(request);\r\n        setDetails(request, authRequest);\r\n\r\n        return this.getAuthenticationManager()\r\n          .authenticate(authRequest);\r\n    }\r\n\r\n    private UsernamePasswordAuthenticationToken getAuthRequest(\r\n      HttpServletRequest request) {\r\n\r\n        String username = obtainUsername(request);\r\n        String password = obtainPassword(request);\r\n        String domain = obtainDomain(request);\r\n\r\n        // ...\r\n\r\n        String usernameDomain = String.format(\"%s%s%s\", username.trim(), \r\n          String.valueOf(Character.LINE_SEPARATOR), domain);\r\n        return new UsernamePasswordAuthenticationToken(\r\n          usernameDomain, password);\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\npublic class SimpleUserDetailsService implements UserDetailsService {\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        String[] usernameAndDomain = StringUtils.split(\r\n          username, String.valueOf(Character.LINE_SEPARATOR));\r\n        if (usernameAndDomain == null || usernameAndDomain.length != 2) {\r\n            throw new UsernameNotFoundException(\"Username and domain must be provided\");\r\n        }\r\n        User user = userRepository.findUser(usernameAndDomain[0], usernameAndDomain[1]);\r\n        if (user == null) {\r\n            throw new UsernameNotFoundException(\r\n              String.format(\"Username not found for domain, username=%s, domain=%s\", \r\n                usernameAndDomain[0], usernameAndDomain[1]));\r\n        }\r\n        return user;\r\n    }\r\n} \r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n\r\n    http\r\n      .addFilterBefore(authenticationFilter(), \r\n        UsernamePasswordAuthenticationFilter.class)\r\n      .authorizeRequests()\r\n        .antMatchers(\"/css/**\", \"/index\").permitAll()\r\n        .antMatchers(\"/user/**\").authenticated()\r\n      .and()\r\n      .formLogin().loginPage(\"/login\")\r\n      .and()\r\n      .logout()\r\n      .logoutUrl(\"/logout\");\r\n}\r\n```","```\r\npublic AuthenticationProvider authProvider() {\r\n    DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\r\n    provider.setUserDetailsService(userDetailsService);\r\n    provider.setPasswordEncoder(passwordEncoder());\r\n    return provider;\r\n} \r\n```","```\r\npublic SimpleAuthenticationFilter authenticationFilter() throws Exception {\r\n    SimpleAuthenticationFilter filter = new SimpleAuthenticationFilter();\r\n    filter.setAuthenticationManager(authenticationManagerBean());\r\n    filter.setAuthenticationFailureHandler(failureHandler());\r\n    return filter;\r\n}\r\n```","```\r\n<form class=\"form-signin\" th:action=\"@{/login}\" method=\"post\">\r\n <h2 class=\"form-signin-heading\">Please sign in</h2>\r\n <p>Example: user / domain / password</p>\r\n <p th:if=\"${param.error}\" class=\"error\">Invalid user, password, or domain</p>\r\n <p>\r\n   <label for=\"username\" class=\"sr-only\">Username</label>\r\n   <input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\" \r\n     placeholder=\"Username\" required autofocus/>\r\n </p>\r\n <p>\r\n   <label for=\"domain\" class=\"sr-only\">Domain</label>\r\n   <input type=\"text\" id=\"domain\" name=\"domain\" class=\"form-control\" \r\n     placeholder=\"Domain\" required autofocus/>\r\n </p>\r\n <p>\r\n   <label for=\"password\" class=\"sr-only\">Password</label>\r\n   <input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\" \r\n     placeholder=\"Password\" required autofocus/>\r\n </p>\r\n <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button><br/>\r\n <p><a href=\"/index\" th:href=\"@{/index}\">Back to home page</a></p>\r\n</form>\r\n```","```\r\npublic class CustomAuthenticationFilter \r\n  extends UsernamePasswordAuthenticationFilter {\r\n\r\n    public static final String SPRING_SECURITY_FORM_DOMAIN_KEY = \"domain\";\r\n\r\n    @Override\r\n    public Authentication attemptAuthentication(\r\n        HttpServletRequest request,\r\n        HttpServletResponse response) \r\n          throws AuthenticationException {\r\n\r\n        // ...\r\n\r\n        CustomAuthenticationToken authRequest = getAuthRequest(request);\r\n        setDetails(request, authRequest);\r\n        return this.getAuthenticationManager().authenticate(authRequest);\r\n    }\r\n\r\n    private CustomAuthenticationToken getAuthRequest(HttpServletRequest request) {\r\n        String username = obtainUsername(request);\r\n        String password = obtainPassword(request);\r\n        String domain = obtainDomain(request);\r\n\r\n        // ...\r\n\r\n        return new CustomAuthenticationToken(username, password, domain);\r\n    }\r\n```","```\r\n public UserDetails loadUserByUsernameAndDomain(String username, String domain) \r\n     throws UsernameNotFoundException {\r\n     if (StringUtils.isAnyBlank(username, domain)) {\r\n         throw new UsernameNotFoundException(\"Username and domain must be provided\");\r\n     }\r\n     User user = userRepository.findUser(username, domain);\r\n     if (user == null) {\r\n         throw new UsernameNotFoundException(\r\n           String.format(\"Username not found for domain, username=%s, domain=%s\", \r\n             username, domain));\r\n     }\r\n     return user;\r\n }\r\n```","```\r\n@Override\r\nprotected UserDetails retrieveUser(String username, \r\n  UsernamePasswordAuthenticationToken authentication) \r\n    throws AuthenticationException {\r\n\r\n    CustomAuthenticationToken auth = (CustomAuthenticationToken) authentication;\r\n    UserDetails loadedUser;\r\n\r\n    try {\r\n        loadedUser = this.userDetailsService\r\n          .loadUserByUsernameAndDomain(auth.getPrincipal()\r\n            .toString(), auth.getDomain());\r\n    } catch (UsernameNotFoundException notFound) {\r\n\r\n        if (authentication.getCredentials() != null) {\r\n            String presentedPassword = authentication.getCredentials()\r\n              .toString();\r\n            passwordEncoder.matches(presentedPassword, userNotFoundEncodedPassword);\r\n        }\r\n        throw notFound;\r\n    } catch (Exception repositoryProblem) {\r\n\r\n        throw new InternalAuthenticationServiceException(\r\n          repositoryProblem.getMessage(), repositoryProblem);\r\n    }\r\n\r\n    // ...\r\n\r\n    return loadedUser;\r\n}\r\n```"]