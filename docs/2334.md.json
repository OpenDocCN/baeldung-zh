["```\r\nCREATE TABLE person \r\n( \r\n    ID         INT, \r\n    FIRST_NAME VARCHAR(100), \r\n    LAST_NAME  VARCHAR(100)  \r\n);\r\n```","```\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>8.0.19</version>\r\n</dependency>\r\n```","```\r\n    jdbc:mysql://[host][,failoverhost...]\r\n        [:port]/[database]\r\n        [?propertyName1][=propertyValue1]\r\n        [&propertyName2;][=propertyValue2]...\r\n    ```","```\r\nString sqlSelectAllPersons = \"SELECT * FROM person\";\r\nString connectionUrl = \"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\";\r\n\r\ntry (Connection conn = DriverManager.getConnection(connectionUrl, \"username\", \"password\"); \r\n        PreparedStatement ps = conn.prepareStatement(sqlSelectAllPersons); \r\n        ResultSet rs = ps.executeQuery()) {\r\n\r\n        while (rs.next()) {\r\n            long id = rs.getLong(\"ID\");\r\n            String name = rs.getString(\"FIRST_NAME\");\r\n            String lastName = rs.getString(\"LAST_NAME\");\r\n\r\n            // do something with the extracted data...\r\n        }\r\n} catch (SQLException e) {\r\n    // handle the exception\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.10.Final</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\n@Table(name = \"Person\")\r\npublic class Person {\r\n    @Id\r\n    Long id;\r\n    @Column(name = \"FIRST_NAME\")\r\n    String firstName;\r\n\r\n    @Column(name = \"LAST_NAME\")\r\n    String lastName;\r\n\r\n    // getters & setters\r\n} \r\n```","```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<!DOCTYPE hibernate-configuration PUBLIC\r\n        \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\"\r\n        \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\">\r\n\r\n<hibernate-configuration>\r\n    <session-factory>\r\n        <!-- Database connection settings -->\r\n        <property name=\"connection.driver_class\">com.mysql.cj.jdbc.Driver</property>\r\n        <property name=\"connection.url\">jdbc:mysql://localhost:3306/test?serverTimezone=UTC</property>\r\n        <property name=\"connection.username\">username</property>\r\n        <property name=\"connection.password\">password</property>\r\n\r\n        <!-- SQL dialect -->\r\n        <property name=\"dialect\">org.hibernate.dialect.MySQL5Dialect</property>\r\n\r\n        <!-- Validate the database schema on startup -->\r\n        <property name=\"hbm2ddl.auto\">validate</property>\r\n\r\n        <!-- Names the annotated entity class -->\r\n        <mapping class=\"Person\"/>\r\n    </session-factory>\r\n</hibernate-configuration>\r\n```","```\r\nSessionFactory sessionFactory;\r\n// configures settings from hibernate.cfg.xml \r\nStandardServiceRegistry registry = new StandardServiceRegistryBuilder().configure().build(); \r\ntry {\r\n    sessionFactory = new MetadataSources(registry).buildMetadata().buildSessionFactory(); \r\n} catch (Exception e) {\r\n    // handle the exception\r\n}\r\n```","```\r\nSession session = sessionFactory.openSession();\r\nsession.beginTransaction();\r\n\r\nList<Person> result = session.createQuery(\"from Person\", Person.class).list();\r\n\r\nresult.forEach(person -> {\r\n    //do something with Person instance...   \r\n});\r\n\r\nsession.getTransaction().commit();\r\nsession.close();\r\n```","```\r\n<dependency>\r\n    <groupId>org.mybatis</groupId>\r\n    <artifactId>mybatis</artifactId>\r\n    <version>3.5.3</version>\r\n</dependency>\r\n```","```\r\npublic interface PersonMapper {\r\n    String selectAll = \"SELECT * FROM Person\"; \r\n\r\n    @Select(selectAll)\r\n    @Results(value = {\r\n       @Result(property = \"id\", column = \"ID\"),\r\n       @Result(property = \"firstName\", column = \"FIRST_NAME\"),\r\n       @Result(property = \"lastName\", column = \"LAST_NAME\")\r\n    })\r\n    List<Person> selectAll();\r\n}\r\n```","```\r\nConfiguration initMybatis() throws SQLException {\r\n    DataSource dataSource = getDataSource();\r\n    TransactionFactory trxFactory = new JdbcTransactionFactory();\r\n\r\n    Environment env = new Environment(\"dev\", trxFactory, dataSource);\r\n    Configuration config = new Configuration(env);\r\n    TypeAliasRegistry aliases = config.getTypeAliasRegistry();\r\n    aliases.registerAlias(\"person\", Person.class);\r\n\r\n    config.addMapper(PersonMapper.class);\r\n    return config;\r\n}\r\n\r\nDataSource getDataSource() throws SQLException {\r\n    MysqlDataSource dataSource = new MysqlDataSource();\r\n    dataSource.setDatabaseName(\"test\");\r\n    dataSource.setServerName(\"localhost\");\r\n    dataSource.setPort(3306);\r\n    dataSource.setUser(\"username\");\r\n    dataSource.setPassword(\"password\");\r\n    dataSource.setServerTimezone(\"UTC\");\r\n\r\n    return dataSource;\r\n}\r\n```","```\r\nConfiguration configuration = initMybatis();\r\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\r\ntry (SqlSession session = sqlSessionFactory.openSession()) {\r\n    PersonMapper mapper = session.getMapper(PersonMapper.class);\r\n    List<Person> persons = mapper.selectAll();\r\n\r\n    // do something with persons list ...\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.cayenne</groupId>\r\n    <artifactId>cayenne-server</artifactId>\r\n    <version>4.0.2</version>\r\n</dependency>\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<domain project-version=\"9\"> \r\n    <map name=\"datamap\"/> \r\n\t<node name=\"datanode\" \r\n\t    factory=\"org.apache.cayenne.configuration.server.XMLPoolingDataSourceFactory\" \r\n\t\tschema-update-strategy=\"org.apache.cayenne.access.dbsync.CreateIfNoSchemaStrategy\"> \r\n\t    <map-ref name=\"datamap\"/> \r\n\t\t<data-source>\r\n\t\t    <driver value=\"com.mysql.cj.jdbc.Driver\"/> \r\n\t\t\t<url value=\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"/> \r\n\t\t\t<connectionPool min=\"1\" max=\"1\"/> \r\n\t\t\t<login userName=\"username\" password=\"password\"/> \r\n\t\t</data-source> \r\n\t</node> \r\n</domain>\r\n```","```\r\nServerRuntime cayenneRuntime = ServerRuntime.builder()\r\n    .addConfig(\"cayenne-project.xml\")\r\n    .build();\r\n\r\nObjectContext context = cayenneRuntime.newContext();\r\nList<Person> persons = ObjectSelect.query(Person.class).select(context);\r\n\r\n// do something with persons list...\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-jpa</artifactId>\r\n    <version>2.2.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(\"packages.to.scan\")\r\npublic class JpaConfiguration {\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\r\n        dataSource.setUrl(\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\");\r\n        dataSource.setUsername( \"username\" );\r\n        dataSource.setPassword( \"password\" );\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean\r\n    public JpaTransactionManager transactionManager(EntityManagerFactory emf) {\r\n      return new JpaTransactionManager(emf);\r\n    }\r\n\r\n    @Bean\r\n    public JpaVendorAdapter jpaVendorAdapter() {\r\n      HibernateJpaVendorAdapter jpaVendorAdapter = new HibernateJpaVendorAdapter();\r\n      jpaVendorAdapter.setDatabase(Database.MYSQL);\r\n      jpaVendorAdapter.setGenerateDdl(true);\r\n      return jpaVendorAdapter;\r\n    }\r\n\r\n    @Bean\r\n    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {\r\n      LocalContainerEntityManagerFactoryBean lemfb = new LocalContainerEntityManagerFactoryBean();\r\n      lemfb.setDataSource(dataSource());\r\n      lemfb.setJpaVendorAdapter(jpaVendorAdapter());\r\n      lemfb.setPackagesToScan(\"packages.containing.entity.classes\");\r\n      return lemfb;\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic interface PersonRepository extends CrudRepository<Person, Long> {\r\n\r\n}\r\n```","```\r\npersonRepository.findAll().forEach(person -> {\r\n    // do something with the extracted person\r\n});\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-jdbc</artifactId>\r\n    <version>1.1.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableJdbcRepositories(\"packages.to.scan\")\r\npublic class JdbcConfiguration extends AbstractJdbcConfiguration {\r\n    // NamedParameterJdbcOperations is used internally to submit SQL statements to the database\r\n    @Bean\r\n    NamedParameterJdbcOperations operations() {\r\n        return new NamedParameterJdbcTemplate(dataSource());\r\n    }\r\n\r\n    @Bean\r\n    PlatformTransactionManager transactionManager() {\r\n        return new DataSourceTransactionManager(dataSource());\r\n    }\r\n\r\n    @Bean\r\n    public DataSource dataSource() {\r\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\r\n        dataSource.setUrl(\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\");\r\n        dataSource.setUsername(\"username\");\r\n        dataSource.setPassword(\"password\");\r\n        return dataSource;\r\n    }\r\n}\r\n```","```\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.data.relational.core.mapping.Column;\r\nimport org.springframework.data.relational.core.mapping.Table;\r\n\r\n@Table(value = \"Person\")\r\npublic class Person {\r\n    @Id\r\n    Long id;\r\n\r\n    @Column(value = \"FIRST_NAME\")\r\n    String firstName;\r\n\r\n    @Column(value = \"LAST_NAME\")\r\n    String lastName;\r\n\r\n    // getters and setters\r\n}\r\n```"]