["```\r\n$ git clone https://github.com/Baeldung/spring-security-oauth\r\n$ cd oauth-rest/oauth-authorization/server\r\n$ mvn install\r\n```","```\r\n$ mvn spring-boot:run\r\n... many, many log messages omitted\r\n2022-01-16 10:23:20.318\r\n  INFO 8108 --- [           main] c.baeldung.auth.AuthorizationServerApp   : Started AuthorizationServerApp in 23.815 seconds (JVM running for 24.488)\r\n2022-01-16 10:23:20.334\r\n  INFO 8108 --- [           main] c.baeldung.auth.AuthorizationServerApp   : Embedded Keycloak started: http://localhost:8083/auth to use keycloak\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n    <version>2.6.2</version>\r\n</dependency> \r\n```","```\r\n@SpringBootApplication\r\n@EnableWebFluxSecurity\r\npublic class QuotesApplication {    \r\n    public static void main(String[] args) {\r\n        SpringApplication.run(QuotesApplication.class);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class QuoteApi {\r\n    private static final GrantedAuthority GOLD_CUSTOMER = new SimpleGrantedAuthority(\"gold\");\r\n\r\n    @GetMapping(\"/quotes/{symbol}\")\r\n    public Mono<Quote> getQuote(@PathVariable(\"symbol\") String symbol,\r\n      BearerTokenAuthentication auth ) {\r\n\r\n        Quote q = new Quote();\r\n        q.setSymbol(symbol);        \r\n        if ( auth.getAuthorities().contains(GOLD_CUSTOMER)) {\r\n            q.setPrice(10.0);\r\n        }\r\n        else {\r\n            q.setPrice(12.0);\r\n        }\r\n        return Mono.just(q);\r\n    }\r\n} \r\n```","```\r\nspring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token/introspect\r\nspring.security.oauth2.resourceserver.opaquetoken.client-id=quotes-client\r\nspring.security.oauth2.resourceserver.opaquetoken.client-secret=<CLIENT SECRET> \r\n```","```\r\n$ mvn spring-boot:run -Pquotes-application\r\n```","```\r\n$ curl -v http://localhost:8085/quotes/BAEL\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-gateway</artifactId>\r\n    <version>3.1.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n    <version>2.6.2</version>\r\n</dependency> \r\n```","```\r\n@SpringBootApplication\r\n@EnableWebFluxSecurity\r\npublic class ResourceServerGatewayApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ResourceServerGatewayApplication.class,args);\r\n    }\r\n} \r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        opaquetoken:\r\n          introspection-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token/introspect\r\n          client-id: quotes-client\r\n          client-secret: <code class=\"language-css\"><CLIENT SECRET> \r\n```","```\r\n... other properties omitted\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: quotes\r\n        uri: http://localhost:8085\r\n        predicates:\r\n        - Path=/quotes/** \r\n```","```\r\n$ mvn spring-boot:run -Pgateway-as-resource-server\r\n```","```\r\n$ curl -L -X POST \\\r\n  'http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token' \\\r\n  -H 'Content-Type: application/x-www-form-urlencoded' \\\r\n  --data-urlencode 'client_id=quotes-client' \\\r\n  --data-urlencode 'client_secret=0e082231-a70d-48e8-b8a5-fbfb743041b6' \\\r\n  --data-urlencode 'grant_type=password' \\\r\n  --data-urlencode 'scope=email roles profile' \\\r\n  --data-urlencode 'username=john.snow' \\\r\n  --data-urlencode 'password=1234' \r\n```","```\r\n{\r\n\t\"access_token\": \"...omitted\",\r\n\t\"expires_in\": 300,\r\n\t\"refresh_expires_in\": 1800,\r\n\t\"refresh_token\": \"...omitted\",\r\n\t\"token_type\": \"bearer\",\r\n\t\"not-before-policy\": 0,\r\n\t\"session_state\": \"7fd04839-fab1-46a7-a179-a2705dab8c6b\",\r\n\t\"scope\": \"profile email\"\r\n} \r\n```","```\r\n$ curl --location --request GET 'http://localhost:8086/quotes/BAEL' \\\r\n--header 'Accept: application/json' \\\r\n--header 'Authorization: Bearer xxxx...'\r\n```","```\r\n{\r\n  \"symbol\":\"BAEL\",\r\n  \"price\":12.0\r\n}\r\n```","```\r\n{\r\n  \"symbol\":\"BAEL\",\r\n  \"price\":10.0\r\n}\r\n```","```\r\n$ curl  http://localhost:8086/quotes/BAEL\r\n```","```\r\n... other propeties omitted\r\n  security:\r\n    oauth2:\r\n      client:\r\n        provider:\r\n          keycloak:\r\n            issuer-uri: http://localhost:8083/auth/realms/baeldung\r\n        registration:\r\n          quotes-client:\r\n            provider: keycloak\r\n            client-id: quotes-client\r\n            client-secret: <CLIENT SECRET>\r\n            scope:\r\n            - email\r\n            - profile\r\n            - roles \r\n```","```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: quotes\r\n        uri: http://localhost:8085\r\n        predicates:\r\n        - Path=/quotes/**\r\n        filters:\r\n        - TokenRelay= \r\n```","```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      default-filters:\r\n      - TokenRelay=\r\n      routes:\r\n... other routes definition omitted\r\n```","```\r\n$ mvn spring-boot:run -Pgateway-as-oauth-client\r\n```"]