["```\r\nResource download() {\r\n  Â  return new ClassPathResource(locationForLargeFile);\r\n}\r\n```","```\r\nFile file = restTemplate.execute(FILE_URL, HttpMethod.GET, null, clientHttpResponse -> {\r\n    File ret = File.createTempFile(\"download\", \"tmp\");\r\n    StreamUtils.copy(clientHttpResponse.getBody(), new FileOutputStream(ret));\r\n    return ret;\r\n});\r\n\r\nAssert.assertNotNull(file);\r\nAssertions\r\n  .assertThat(file.length())\r\n  .isEqualTo(contentLength);\r\n```","```\r\nHttpHeaders headers = restTemplate.headForHeaders(FILE_URL);\r\n\r\nAssertions\r\n  .assertThat(headers.get(\"Accept-Ranges\"))\r\n  .contains(\"bytes\");\r\nAssertions\r\n  .assertThat(headers.getContentLength())\r\n  .isGreaterThan(0);\r\n```","```\r\nrestTemplate.execute(\r\n  FILE_URL,\r\n  HttpMethod.GET,\r\n  clientHttpRequest -> clientHttpRequest.getHeaders().set(\r\n    \"Range\",\r\n    String.format(\"bytes=%d-%d\", file.length(), contentLength)),\r\n    clientHttpResponse -> {\r\n        StreamUtils.copy(clientHttpResponse.getBody(), new FileOutputStream(file, true));\r\n    return file;\r\n});\r\n\r\nAssertions\r\n  .assertThat(file.length())\r\n  .isLessThanOrEqualTo(contentLength);\r\n```","```\r\nString.format(\"bytes=%d-\", file.length())\r\n```"]