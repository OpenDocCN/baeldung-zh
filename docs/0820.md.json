["```\r\nRandom random = new Random();\r\nint number = random.nextInt(10);\r\nassertThat(number).isPositive().isLessThan(10);\r\n```","```\r\nRandomGeneratorFactory.all()\r\n  .sorted(Comparator.comparing(RandomGeneratorFactory::name))\r\n  .forEach(factory -> System.out.println(String.format(\"%s\\t%s\\t%s\\t%s\",\r\n    factory.group(),\r\n    factory.name(),\r\n    factory.isJumpable(),\r\n    factory.isSplittable())));\r\n```","```\r\nRandomGeneratorFactory.all()\r\n  .filter(RandomGeneratorFactory::isJumpable)\r\n  .findAny()\r\n  .map(RandomGeneratorFactory::create)\r\n  .orElseThrow(() -> new RuntimeException(\"Error creating a generator\"));\r\n```","```\r\nRandomGenerator generator = RandomGenerator.getDefault();\r\n```","```\r\nRandomGenerator generator = RandomGenerator.of(\"L128X256MixRandom\");\r\n```","```\r\nList<Integer> numbers = Collections.synchronizedList(new ArrayList<>());\r\nExecutorService executorService = Executors.newCachedThreadPool();\r\n\r\nRandomGenerator.SplittableGenerator sourceGenerator = RandomGeneratorFactory\r\n    .<RandomGenerator.SplittableGenerator>of(\"L128X256MixRandom\")\r\n    .create();\r\n\r\nsourceGenerator.splits(20).forEach((splitGenerator) -> {\r\n    executorService.submit(() -> {\r\n        numbers.add(splitGenerator.nextInt(10));\r\n    });\r\n})\r\n```","```\r\nprivate static void generateRandomNumbers(RandomGenerator generator) {\r\n    generator.nextLong();\r\n    generator.nextInt();\r\n    generator.nextFloat();\r\n    generator.nextDouble();\r\n}\r\n```"]