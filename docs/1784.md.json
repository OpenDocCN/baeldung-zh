["```\r\n<dependency>\r\n    <groupId>io.quarkus</groupId>\r\n    <artifactId>quarkus-resteasy-jackson</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.quarkus</groupId>\r\n    <artifactId>quarkus-hibernate-orm-panache</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.quarkus</groupId>\r\n    <artifactId>quarkus-jdbc-h2</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.quarkus</groupId>\r\n    <artifactId>quarkus-junit5-mockito</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.quarkus</groupId>\r\n    <artifactId>quarkus-test-h2</artifactId>\r\n</dependency>\r\n```","```\r\npublic class Book extends PanacheEntity {\r\n    private String title;\r\n    private String author;\r\n}\r\n```","```\r\npublic class BookRepository implements PanacheRepository {\r\n\r\n    public Stream<Book> findBy(String query) {\r\n        return find(\"author like :query or title like :query\", with(\"query\", \"%\"+query+\"%\")).stream();\r\n    }\r\n}\r\n```","```\r\npublic class LibraryService {\r\n\r\n    public Set<Book> find(String query) {\r\n        if (query == null) {\r\n            return bookRepository.findAll().stream().collect(toSet());\r\n        }\r\n        return bookRepository.findBy(query).collect(toSet());\r\n    }\r\n}\r\n```","```\r\n@Path(\"/library\")\r\npublic class LibraryResource {\r\n\r\n    @GET\r\n    @Path(\"/book\")\r\n    public Set findBooks(@QueryParam(\"query\") String query) {\r\n        return libraryService.find(query);\r\n    }\r\n}\r\n```","```\r\n@Priority(1)\r\n@Alternative\r\n@ApplicationScoped\r\npublic class TestBookRepository extends BookRepository {\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        persist(new Book(\"Dune\", \"Frank Herbert\"),\r\n          new Book(\"Foundation\", \"Isaac Asimov\"));\r\n    }\r\n\r\n}\r\n```","```\r\n@QuarkusTest\r\nclass LibraryResourceIntegrationTest {\r\n\r\n    @Test\r\n    void whenGetBooksByTitle_thenBookShouldBeFound() {\r\n\r\n        given().contentType(ContentType.JSON).param(\"query\", \"Dune\")\r\n          .when().get(\"/library/book\")\r\n          .then().statusCode(200)\r\n          .body(\"size()\", is(1))\r\n          .body(\"title\", hasItem(\"Dune\"))\r\n          .body(\"author\", hasItem(\"Frank Herbert\"));\r\n    }\r\n}\r\n```","```\r\n@TestHTTPResource(\"/library/book\")\r\nURL libraryEndpoint;\r\n```","```\r\ngiven().param(\"query\", \"Dune\")\r\n  .when().get(libraryEndpoint)\r\n  .then().statusCode(200);\r\n```","```\r\n@Test\r\nvoid whenGetBooks_thenBooksShouldBeFound() throws IOException {\r\n    assertTrue(IOUtils.toString(libraryEndpoint.openStream(), defaultCharset()).contains(\"Asimov\"));\r\n}\r\n```","```\r\n@TestHTTPEndpoint(LibraryResource.class)\r\n@TestHTTPResource(\"book\")\r\nURL libraryEndpoint;\r\n```","```\r\n@QuarkusTest\r\n@TestHTTPEndpoint(LibraryResource.class)\r\nclass LibraryHttpEndpointIntegrationTest {\r\n\r\n    @Test\r\n    void whenGetBooks_thenShouldReturnSuccessfully() {\r\n        given().contentType(ContentType.JSON)\r\n          .when().get(\"book\")\r\n          .then().statusCode(200);\r\n    }\r\n}\r\n```","```\r\n@QuarkusTest\r\nclass LibraryServiceIntegrationTest {\r\n\r\n    @Inject\r\n    LibraryService libraryService;\r\n\r\n    @Test\r\n    void whenFindByAuthor_thenBookShouldBeFound() {\r\n        assertFalse(libraryService.find(\"Frank Herbert\").isEmpty());\r\n    }\r\n}\r\n```","```\r\nclass BookRepositoryIntegrationTest {\r\n\r\n    @Inject\r\n    BookRepository bookRepository;\r\n\r\n    @Test\r\n    void givenBookInRepository_whenFindByAuthor_thenShouldReturnBookFromRepository() {\r\n        assertTrue(bookRepository.findBy(\"Herbert\").findAny().isPresent());\r\n    }\r\n}\r\n```","```\r\n@QuarkusTest\r\n@Stereotype\r\n@Transactional\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface QuarkusTransactionalTest {\r\n}\r\n```","```\r\n@QuarkusTransactionalTest\r\nclass BookRepositoryIntegrationTest\r\n```","```\r\n@QuarkusTest\r\nclass LibraryServiceQuarkusMockUnitTest {\r\n\r\n    @Inject\r\n    LibraryService libraryService;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        BookRepository mock = Mockito.mock(TestBookRepository.class);\r\n        Mockito.when(mock.findBy(\"Asimov\"))\r\n          .thenReturn(Arrays.stream(new Book[] {\r\n            new Book(\"Foundation\", \"Isaac Asimov\"),\r\n            new Book(\"I Robot\", \"Isaac Asimov\")}));\r\n        QuarkusMock.installMockForType(mock, BookRepository.class);\r\n    }\r\n\r\n    @Test\r\n    void whenFindByAuthor_thenBooksShouldBeFound() {\r\n        assertEquals(2, libraryService.find(\"Asimov\").size());\r\n    }\r\n}\r\n```","```\r\n@QuarkusTest\r\nclass LibraryServiceInjectMockUnitTest {\r\n\r\n    @Inject\r\n    LibraryService libraryService;\r\n\r\n    @InjectMock\r\n    BookRepository bookRepository;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        when(bookRepository.findBy(\"Frank Herbert\"))\r\n          .thenReturn(Arrays.stream(new Book[] {\r\n            new Book(\"Dune\", \"Frank Herbert\"),\r\n            new Book(\"Children of Dune\", \"Frank Herbert\")}));\r\n    }\r\n\r\n    @Test\r\n    void whenFindByAuthor_thenBooksShouldBeFound() {\r\n        assertEquals(2, libraryService.find(\"Frank Herbert\").size());\r\n    }\r\n}\r\n```","```\r\n@QuarkusTest\r\nclass LibraryResourceInjectSpyIntegrationTest {\r\n\r\n    @InjectSpy\r\n    LibraryService libraryService;\r\n\r\n    @Test\r\n    void whenGetBooksByAuthor_thenBookShouldBeFound() {\r\n        given().contentType(ContentType.JSON).param(\"query\", \"Asimov\")\r\n          .when().get(\"/library/book\")\r\n          .then().statusCode(200);\r\n\r\n        verify(libraryService).find(\"Asimov\");\r\n    }\r\n\r\n}\r\n```","```\r\npublic class CustomTestProfile implements QuarkusTestProfile {\r\n\r\n    @Override\r\n    public Map<String, String> getConfigOverrides() {\r\n        return Collections.singletonMap(\"quarkus.resteasy.path\", \"/custom\");\r\n    }\r\n\r\n    @Override\r\n    public Set<Class<?>> getEnabledAlternatives() {\r\n        return Collections.singleton(TestBookRepository.class);\r\n    }\r\n\r\n    @Override\r\n    public String getConfigProfile() {\r\n        return \"custom-profile\";\r\n    }\r\n}\r\n```","```\r\n%custom-profile.quarkus.datasource.jdbc.url = jdbc:h2:file:./testdb\r\n```","```\r\n@QuarkusTest\r\n@TestProfile(CustomBookRepositoryProfile.class)\r\nclass CustomLibraryResourceManualTest {\r\n\r\n    public static final String BOOKSTORE_ENDPOINT = \"/custom/library/book\";\r\n\r\n    @Test\r\n    void whenGetBooksGivenNoQuery_thenAllBooksShouldBeReturned() {\r\n        given().contentType(ContentType.JSON)\r\n          .when().get(BOOKSTORE_ENDPOINT)\r\n          .then().statusCode(200)\r\n          .body(\"size()\", is(2))\r\n          .body(\"title\", hasItems(\"Foundation\", \"Dune\"));\r\n    }\r\n}\r\n```","```\r\n@NativeImageTest\r\n@QuarkusTestResource(H2DatabaseTestResource.class)\r\nclass NativeLibraryResourceIT extends LibraryHttpEndpointIntegrationTest {\r\n}\r\n```","```\r\nmvn verify -Pnative\r\n```","```\r\n@QuarkusTestResource(OurCustomResourceImpl.class)\r\n```"]