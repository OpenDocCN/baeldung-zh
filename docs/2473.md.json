["```\r\n@TestFactory\r\nCollection<DynamicTest> dynamicTestsWithCollection() {\r\n    return Arrays.asList(\r\n      DynamicTest.dynamicTest(\"Add test\",\r\n        () -> assertEquals(2, Math.addExact(1, 1))),\r\n      DynamicTest.dynamicTest(\"Multiply Test\",\r\n        () -> assertEquals(4, Math.multiplyExact(2, 2))));\r\n}\r\n```","```\r\nAdd test(dynamicTestsWithCollection())\r\nMultiply Test(dynamicTestsWithCollection())\r\n```","```\r\n@TestFactory\r\nIterable<DynamicTest> dynamicTestsWithIterable() {\r\n    return Arrays.asList(\r\n      DynamicTest.dynamicTest(\"Add test\",\r\n        () -> assertEquals(2, Math.addExact(1, 1))),\r\n      DynamicTest.dynamicTest(\"Multiply Test\",\r\n        () -> assertEquals(4, Math.multiplyExact(2, 2))));\r\n}\r\n\r\n@TestFactory\r\nIterator<DynamicTest> dynamicTestsWithIterator() {\r\n    return Arrays.asList(\r\n      DynamicTest.dynamicTest(\"Add test\",\r\n        () -> assertEquals(2, Math.addExact(1, 1))),\r\n      DynamicTest.dynamicTest(\"Multiply Test\",\r\n        () -> assertEquals(4, Math.multiplyExact(2, 2))))\r\n        .iterator();\r\n}\r\n\r\n@TestFactory\r\nStream<DynamicTest> dynamicTestsFromIntStream() {\r\n    return IntStream.iterate(0, n -> n + 2).limit(10)\r\n      .mapToObj(n -> DynamicTest.dynamicTest(\"test\" + n,\r\n        () -> assertTrue(n % 2 == 0)));\r\n}\r\n```","```\r\n@TestFactory\r\nStream<DynamicTest> dynamicTestsFromStream() {\r\n\r\n    // sample input and output\r\n    List<String> inputList = Arrays.asList(\r\n      \"www.somedomain.com\", \"www.anotherdomain.com\", \"www.yetanotherdomain.com\");\r\n    List<String> outputList = Arrays.asList(\r\n      \"154.174.10.56\", \"211.152.104.132\", \"178.144.120.156\");\r\n\r\n    // input generator that generates inputs using inputList\r\n    /*...code here...*/\r\n\r\n    // a display name generator that creates a \r\n    // different name based on the input\r\n    /*...code here...*/\r\n\r\n    // the test executor, which actually has the \r\n    // logic to execute the test case\r\n    /*...code here...*/\r\n\r\n    // combine everything and return a Stream of DynamicTest\r\n    /*...code here...*/\r\n}\r\n```","```\r\nIterator<String> inputGenerator = inputList.iterator();\r\n```","```\r\nFunction<String, String> displayNameGenerator \r\n  = (input) -> \"Resolving: \" + input;\r\n```","```\r\nDomainNameResolver resolver = new DomainNameResolver();\r\nThrowingConsumer<String> testExecutor = (input) -> {\r\n    int id = inputList.indexOf(input);\r\n\r\n    assertEquals(outputList.get(id), resolver.resolveDomain(input));\r\n};\r\n```","```\r\nreturn DynamicTest.stream(\r\n  inputGenerator, displayNameGenerator, testExecutor);\r\n```","```\r\nResolving: www.somedomain.com(dynamicTestsFromStream())\r\nResolving: www.anotherdomain.com(dynamicTestsFromStream())\r\nResolving: www.yetanotherdomain.com(dynamicTestsFromStream())\r\n```","```\r\n@TestFactory\r\nStream<DynamicTest> dynamicTestsFromStreamInJava8() {\r\n\r\n    DomainNameResolver resolver = new DomainNameResolver();\r\n\r\n    List<String> domainNames = Arrays.asList(\r\n      \"www.somedomain.com\", \"www.anotherdomain.com\", \"www.yetanotherdomain.com\");\r\n    List<String> outputList = Arrays.asList(\r\n      \"154.174.10.56\", \"211.152.104.132\", \"178.144.120.156\");\r\n\r\n    return inputList.stream()\r\n      .map(dom -> DynamicTest.dynamicTest(\"Resolving: \" + dom, \r\n        () -> {int id = inputList.indexOf(dom);\r\n\r\n      assertEquals(outputList.get(id), resolver.resolveDomain(dom));\r\n    }));       \r\n}\r\n```","```\r\n@TestFactory\r\nStream<DynamicTest> dynamicTestsForEmployeeWorkflows() {\r\n    List<Employee> inputList = Arrays.asList(\r\n      new Employee(1, \"Fred\"), new Employee(2), new Employee(3, \"John\"));\r\n\r\n    EmployeeDao dao = new EmployeeDao();\r\n    Stream<DynamicTest> saveEmployeeStream = inputList.stream()\r\n      .map(emp -> DynamicTest.dynamicTest(\r\n        \"saveEmployee: \" + emp.toString(), \r\n          () -> {\r\n              Employee returned = dao.save(emp.getId());\r\n              assertEquals(returned.getId(), emp.getId());\r\n          }\r\n    ));\r\n\r\n    Stream<DynamicTest> saveEmployeeWithFirstNameStream \r\n      = inputList.stream()\r\n      .filter(emp -> !emp.getFirstName().isEmpty())\r\n      .map(emp -> DynamicTest.dynamicTest(\r\n        \"saveEmployeeWithName\" + emp.toString(), \r\n        () -> {\r\n            Employee returned = dao.save(emp.getId(), emp.getFirstName());\r\n            assertEquals(returned.getId(), emp.getId());\r\n            assertEquals(returned.getFirstName(), emp.getFirstName());\r\n        }));\r\n\r\n    return Stream.concat(saveEmployeeStream, \r\n      saveEmployeeWithFirstNameStream);\r\n}\r\n```","```\r\nsaveEmployee: Employee \r\n  [id=1, firstName=Fred](dynamicTestsForEmployeeWorkflows())\r\nsaveEmployee: Employee \r\n  [id=2, firstName=](dynamicTestsForEmployeeWorkflows())\r\nsaveEmployee: Employee \r\n  [id=3, firstName=John](dynamicTestsForEmployeeWorkflows())\r\nsaveEmployeeWithNameEmployee \r\n  [id=1, firstName=Fred](dynamicTestsForEmployeeWorkflows())\r\nsaveEmployeeWithNameEmployee \r\n  [id=3, firstName=John](dynamicTestsForEmployeeWorkflows())\r\n```"]