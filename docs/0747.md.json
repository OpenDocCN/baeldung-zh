["```\r\ndocker run -d -p 5775:5775/udp -p 16686:16686 jaegertracing/all-in-one:latest\r\n```","```\r\n<dependency>\r\n    <groupId>io.opentracing.contrib</groupId>\r\n    <artifactId>opentracing-spring-jaeger-web-starter</artifactId>\r\n    <version>3.3.1</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic Tracer getTracer() {\r\n    Configuration.SamplerConfiguration samplerConfig = Configuration\r\n      .SamplerConfiguration.fromEnv()\r\n      .withType(\"const\").withParam(1);\r\n    Configuration.ReporterConfiguration reporterConfig = Configuration\r\n      .ReporterConfiguration.fromEnv()\r\n      .withLogSpans(true);\r\n    Configuration config = new Configuration(\"math-service\")\r\n      .withSampler(samplerConfig)\r\n      .withReporter(reporterConfig);\r\n    return config.getTracer();\r\n}\r\n```","```\r\nSpan span = tracer.buildSpan(\"my-span\").start();\r\n// Some code for which which the span needs to be reported\r\nspan.finish();\r\n```","```\r\nscrape_configs:\r\n  - job_name: 'spring_opencensus'\r\n    scrape_interval: 10s\r\n    static_configs:\r\n      - targets: ['localhost:8887', 'localhost:8888', 'localhost:8889']\r\n```","```\r\ndocker run -d -p 9090:9090 -v \\\r\n  ./prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus\r\n```","```\r\nMeasureDouble M_LATENCY_MS = MeasureDouble\r\n  .create(\"math-service/latency\", \"The latency in milliseconds\", \"ms\");\r\n```","```\r\nStatsRecorder STATS_RECORDER = Stats.getStatsRecorder();\r\nSTATS_RECORDER.newMeasureMap()\r\n  .put(M_LATENCY_MS, 17.0)\r\n  .record();\r\n```","```\r\nAggregation latencyDistribution = Distribution.create(BucketBoundaries.create(\r\n  Arrays.asList(0.0, 25.0, 100.0, 200.0, 400.0, 800.0, 10000.0)));\r\nView view = View.create(\r\n  Name.create(\"math-service/latency\"),\r\n  \"The distribution of the latencies\",\r\n  M_LATENCY_MS,\r\n  latencyDistribution,\r\n  Collections.singletonList(KEY_METHOD)),\r\n};\r\nViewManager manager = Stats.getViewManager();\r\nmanager.registerView(view);\r\n```","```\r\nPrometheusStatsCollector.createAndRegister();\r\nHTTPServer server = new HTTPServer(\"localhost\", 8887, true);\r\n```","```\r\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana\r\n```","```\r\ndocker run -p 9200:9200 -p 9300:9300 \\\r\n  -e \"discovery.type=single-node\" \\\r\n  docker.elastic.co/elasticsearch/elasticsearch:7.13.0\r\n```","```\r\ndocker run -p 5601:5601 \\\r\n  -e \"ELASTICSEARCH_HOSTS=http://localhost:9200\" \\\r\n  docker.elastic.co/kibana/kibana:7.13.0\r\n```","```\r\nFROM docker.elastic.co/logstash/logstash:7.13.0\r\nRUN rm -f /usr/share/logstash/pipeline/logstash.conf\r\nADD pipeline/ /usr/share/logstash/pipeline/\r\nADD config/ /usr/share/logstash/config/\r\n```","```\r\ninput {\r\n  tcp {\r\n  port => 4560\r\n  codec => json_lines\r\n  }\r\n  beats {\r\n    host => \"127.0.0.1\"\r\n    port => \"5044\"\r\n  }\r\n}\r\noutput{\r\n  elasticsearch {\r\n  hosts => [\"localhost:9200\"]\r\n  index => \"app-%{+YYYY.MM.dd}\"\r\n  document_type => \"%{[@metadata][type]}\"\r\n  }\r\n  stdout { codec => rubydebug }\r\n}\r\n```","```\r\nFROM docker.elastic.co/beats/filebeat:7.13.0\r\nCOPY filebeat.yml /usr/share/filebeat/filebeat.yml\r\nUSER root\r\nRUN chown root:filebeat /usr/share/filebeat/filebeat.yml\r\nUSER filebeat\r\n```","```\r\nfilebeat.inputs:\r\n- type: log\r\nenabled: true\r\npaths:\r\n  - /tmp/math-service.log\r\noutput.logstash:\r\nhosts: [\"localhost:5044\"]\r\n```"]