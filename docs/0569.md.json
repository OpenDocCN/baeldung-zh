["```\r\n@Entity\r\npublic class Author {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    @OneToMany(cascade = CascadeType.ALL)\r\n    private List<Book> books;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class AuthorSpecifications {\r\n\r\n    public static Specification<Author> hasFirstNameLike(String name) {\r\n        return (root, query, criteriaBuilder) ->\r\n          criteriaBuilder.like(root.<String>get(\"firstName\"), \"%\" + name + \"%\");\r\n    }\r\n\r\n    public static Specification<Author> hasLastName(String name) {\r\n        return (root, query, cb) ->\r\n          cb.equal(root.<String>get(\"lastName\"), name);\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic interface AuthorsRepository extends JpaRepository<Author, Long>, JpaSpecificationExecutor<Author> {\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindByLastNameAndFirstNameLike_thenOneAuthorIsReturned() {\r\n\r\n    Specification<Author> specification = hasLastName(\"Martin\")\r\n      .and(hasFirstNameLike(\"Robert\"));\r\n\r\n    List<Author> authors = repository.findAll(specification);\r\n\r\n    assertThat(authors).hasSize(1);\r\n}\r\n```","```\r\n@Entity\r\npublic class Book {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String title;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic static Specification<Author> hasBookWithTitle(String bookTitle) {\r\n    return (root, query, criteriaBuilder) -> {\r\n        Join<Book, Author> authorsBook = root.join(\"books\");\r\n        return criteriaBuilder.equal(authorsBook.get(\"title\"), bookTitle);\r\n    };\r\n}\r\n```","```\r\n@Test\r\npublic void whenSearchingByBookTitleAndAuthorName_thenOneAuthorIsReturned() {\r\n\r\n    Specification<Author> specification = hasLastName(\"Martin\")\r\n      .and(hasBookWithTitle(\"Clean Code\"));\r\n\r\n    List<Author> authors = repository.findAll(specification);\r\n\r\n    assertThat(authors).hasSize(1);\r\n}\r\n```","```\r\nselect \r\n  author0_.id as id1_1_, \r\n  author0_.first_name as first_na2_1_, \r\n  author0_.last_name as last_nam3_1_ \r\nfrom \r\n  author author0_ \r\n  inner join author_books books1_ on author0_.id = books1_.author_id \r\n  inner join book book2_ on books1_.books_id = book2_.id \r\nwhere \r\n  author0_.last_name = ? \r\n  and book2_.title = ?\r\n```"]