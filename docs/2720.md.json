["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\npublic class GenericEntityController {\r\n    private List<GenericEntity> entityList = new ArrayList<>();\r\n\r\n    @RequestMapping(\"/entity/all\")\r\n    public List<GenericEntity> findAll() {\r\n        return entityList;\r\n    }\r\n\r\n    @RequestMapping(value = \"/entity\", method = RequestMethod.POST)\r\n    public GenericEntity addEntity(GenericEntity entity) {\r\n        entityList.add(entity);\r\n        return entity;\r\n    }\r\n\r\n    @RequestMapping(\"/entity/findby/{id}\")\r\n    public GenericEntity findById(@PathVariable Long id) {\r\n        return entityList.stream().\r\n                 filter(entity -> entity.getId().equals(id)).\r\n                   findFirst().get();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Application.class)\r\n@WebAppConfiguration\r\npublic class SpringBootApplicationIntegrationTest {\r\n    @Autowired\r\n    private WebApplicationContext webApplicationContext;\r\n    private MockMvc mockMvc;\r\n\r\n    @Before\r\n    public void setupMockMvc() {\r\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\r\n    }\r\n\r\n    @Test\r\n    public void givenRequestHasBeenMade_whenMeetsAllOfGivenConditions_thenCorrect()\r\n      throws Exception { \r\n        MediaType contentType = new MediaType(MediaType.APPLICATION_JSON.getType(),\r\n        MediaType.APPLICATION_JSON.getSubtype(), Charset.forName(\"utf8\"));\r\n        mockMvc.perform(MockMvcRequestBuilders.get(\"/entity/all\")).\r\n        andExpect(MockMvcResultMatchers.status().isOk()).\r\n        andExpect(MockMvcResultMatchers.content().contentType(contentType)).\r\n        andExpect(jsonPath(\"$\", hasSize(4))); \r\n    } \r\n}\r\n```","```\r\npublic class GenericEntityController {\r\n    private List<GenericEntity> entityList = new ArrayList<>();\r\n\r\n    {\r\n        entityList.add(new GenericEntity(1l, \"entity_1\"));\r\n        entityList.add(new GenericEntity(2l, \"entity_2\"));\r\n        entityList.add(new GenericEntity(3l, \"entity_3\"));\r\n        entityList.add(new GenericEntity(4l, \"entity_4\"));\r\n    }\r\n    //...\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\npublic interface GenericEntityRepository extends JpaRepository<GenericEntity, Long> {}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Application.class)\r\npublic class SpringBootJPATest {\r\n\r\n    @Autowired\r\n    private GenericEntityRepository genericEntityRepository;\r\n\r\n    @Test\r\n    public void givenGenericEntityRepository_whenSaveAndRetreiveEntity_thenOK() {\r\n        GenericEntity genericEntity = \r\n          genericEntityRepository.save(new GenericEntity(\"test\"));\r\n        GenericEntity foundedEntity = \r\n          genericEntityRepository.findOne(genericEntity.getId());\r\n\r\n        assertNotNull(foundedEntity);\r\n        assertEquals(genericEntity.getValue(), foundedEntity.getValue());\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-mail</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.subethamail</groupId>\r\n    <artifactId>subethasmtp</artifactId>\r\n    <version>3.1.7</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringApplicationConfiguration(classes = Application.class)\r\npublic class SpringBootMailTest {\r\n    @Autowired\r\n    private JavaMailSender javaMailSender;\r\n\r\n    private Wiser wiser;\r\n\r\n    private String userTo = \"[[email protected]](/web/20220125082427/https://www.baeldung.com/cdn-cgi/l/email-protection)\";\r\n    private String userFrom = \"[[email protected]](/web/20220125082427/https://www.baeldung.com/cdn-cgi/l/email-protection)\";\r\n    private String subject = \"Test subject\";\r\n    private String textMail = \"Text subject mail\";\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        final int TEST_PORT = 25;\r\n        wiser = new Wiser(TEST_PORT);\r\n        wiser.start();\r\n    }\r\n\r\n    @After\r\n    public void tearDown() throws Exception {\r\n        wiser.stop();\r\n    }\r\n\r\n    @Test\r\n    public void givenMail_whenSendAndReceived_thenCorrect() throws Exception {\r\n        SimpleMailMessage message = composeEmailMessage();\r\n        javaMailSender.send(message);\r\n        List<WiserMessage> messages = wiser.getMessages();\r\n\r\n        assertThat(messages, hasSize(1));\r\n        WiserMessage wiserMessage = messages.get(0);\r\n        assertEquals(userFrom, wiserMessage.getEnvelopeSender());\r\n        assertEquals(userTo, wiserMessage.getEnvelopeReceiver());\r\n        assertEquals(subject, getSubject(wiserMessage));\r\n        assertEquals(textMail, getMessage(wiserMessage));\r\n    }\r\n\r\n    private String getMessage(WiserMessage wiserMessage)\r\n      throws MessagingException, IOException {\r\n        return wiserMessage.getMimeMessage().getContent().toString().trim();\r\n    }\r\n\r\n    private String getSubject(WiserMessage wiserMessage) throws MessagingException {\r\n        return wiserMessage.getMimeMessage().getSubject();\r\n    }\r\n\r\n    private SimpleMailMessage composeEmailMessage() {\r\n        SimpleMailMessage mailMessage = new SimpleMailMessage();\r\n        mailMessage.setTo(userTo);\r\n        mailMessage.setReplyTo(userFrom);\r\n        mailMessage.setFrom(userFrom);\r\n        mailMessage.setSubject(subject);\r\n        mailMessage.setText(textMail);\r\n        return mailMessage;\r\n    }\r\n}\r\n```","```\r\nspring.mail.host=localhost\r\nspring.mail.port=25\r\nspring.mail.properties.mail.smtp.auth=false\r\n```"]