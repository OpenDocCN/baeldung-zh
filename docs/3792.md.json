["```\r\npublic class CifarDatasetService implements IDataSetService {\r\n\r\n    private CifarDataSetIterator trainIterator;\r\n    private CifarDataSetIterator testIterator;\r\n\r\n    public CifarDatasetService() {\r\n         trainIterator = new CifarDataSetIterator(trainBatch, trainImagesNum, true);\r\n         testIterator = new CifarDataSetIterator(testBatch, testImagesNum, false);\r\n    }\r\n\r\n    // other methods and fields declaration\r\n\r\n}\r\n```","```\r\nMultiLayerConfiguration configuration = new NeuralNetConfiguration.Builder()\r\n  .seed(1611)\r\n  .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\r\n  .learningRate(properties.getLearningRate())\r\n  .regularization(true)\r\n  .updater(properties.getOptimizer())\r\n  .list()\r\n  .layer(0, conv5x5())\r\n  .layer(1, pooling2x2Stride2())\r\n  .layer(2, conv3x3Stride1Padding2())\r\n  .layer(3, pooling2x2Stride1())\r\n  .layer(4, conv3x3Stride1Padding1())\r\n  .layer(5, pooling2x2Stride1())\r\n  .layer(6, dense())\r\n  .pretrain(false)\r\n  .backprop(true)\r\n  .setInputType(dataSetService.inputType())\r\n  .build();\r\n\r\nnetwork = new MultiLayerNetwork(configuration);\r\n```","```\r\npublic void train() {\r\n    network.init();    \r\n    IntStream.range(1, epochsNum + 1).forEach(epoch -> {\r\n        network.fit(dataSetService.trainIterator());\r\n    });\r\n}\r\n```","```\r\npublic Evaluation evaluate() {\r\n   return network.evaluate(dataSetService.testIterator());\r\n}\r\n```","```\r\n==========================Scores=====================\r\n# of classes: 11\r\nAccuracy: 0,8406\r\nPrecision: 0,7303\r\nRecall: 0,6820\r\nF1 Score: 0,6466\r\n=====================================================\r\n```"]