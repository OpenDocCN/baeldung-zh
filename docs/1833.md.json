["```\r\npublic static boolean isPerfectSquareByUsingSqrt(long n) {\r\n    if (n <= 0) {\r\n        return false;\r\n    }\r\n    double squareRoot = Math.sqrt(n);\r\n    long tst = (long)(squareRoot + 0.5);\r\n    return tst*tst == n;\r\n}\r\n```","```\r\npublic boolean isPerfectSquareByUsingBinarySearch(long low, long high, long number) {\r\n    long check = (low + high) / 2L;\r\n    if (high < low) {\r\n        return false;\r\n    }\r\n    if (number == check * check) {\r\n        return true;\r\n    }\r\n    else if (number < check * check) {\r\n        high = check - 1L;\r\n        return isPerfectSquareByUsingBinarySearch(low, high, number);\r\n    }\r\n    else {\r\n        low = check + 1L;\r\n        return isPerfectSquareByUsingBinarySearch(low, high, number);\r\n    }\r\n}\r\n```","```\r\npublic class BinarySearchRange {\r\n    private long low;\r\n    private long high;\r\n\r\n    // standard constructor and getters\r\n}\r\n```","```\r\nprivate void initiateOptimizedBinarySearchLookupTable() {\r\n    lookupTable.add(new BinarySearchRange());\r\n    lookupTable.add(new BinarySearchRange(1L, 4L));\r\n    lookupTable.add(new BinarySearchRange(3L, 10L));\r\n    for (int i = 3; i < 20; i++) {\r\n        lookupTable.add(\r\n          new BinarySearchRange(\r\n            lookupTable.get(i - 2).low * 10,\r\n            lookupTable.get(i - 2).high * 10));\r\n    }\r\n}\r\n```","```\r\npublic boolean isPerfectSquareByUsingOptimizedBinarySearch(long number) {\r\n    int numberOfDigits = Long.toString(number).length();\r\n    return isPerfectSquareByUsingBinarySearch(\r\n      lookupTable.get(numberOfDigits).low,\r\n      lookupTable.get(numberOfDigits).high, number);\r\n}\r\n```","```\r\npublic static boolean isPerfectSquareByUsingNewtonMethod(long n) {\r\n    long x1 = n;\r\n    long x2 = 1L;\r\n    while (x1 > x2) {\r\n        x1 = (x1 + x2) / 2L;\r\n        x2 = n / x1;\r\n    }\r\n    return x1 == x2 && n % x1 == 0L;\r\n}\r\n```","```\r\npublic static boolean isPerfectSquareWithOptimization(long n) {\r\n    if (n < 0) {\r\n        return false;\r\n    }\r\n    switch((int)(n & 0xF)) {\r\n        case 0: case 1: case 4: case 9:\r\n            long tst = (long)Math.sqrt(n);\r\n            return tst*tst == n;\r\n        default:\r\n            return false;\r\n    }\r\n}\r\n```"]