["```\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-data-cassandra</artifactId>\r\n  <version>2.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n  <version>2.2.2.RELEASE</version>\r\n</dependency>\r\n```","```\r\n$ docker run --name mongo-db -d -p 27017:27017 mongo:latest\r\n$ docker run --name cassandra-db -d -p 9042:9042 cassandra:latest \r\n```","```\r\n$ docker exec -it cassandra-db /bin/bash\r\n[[emailÂ protected]](/web/20221206033711/https://www.baeldung.com/cdn-cgi/l/email-protection):/# cqlsh\r\nConnected to Test Cluster at 127.0.0.1:9042.\r\n[cqlsh 5.0.1 | Cassandra 3.11.4 | CQL spec 3.4.4 | Native protocol v4]\r\nUse HELP for help.\r\ncqlsh> CREATE KEYSPACE IF NOT exists baeldung \r\nWITH replication = {'class':'SimpleStrategy', 'replication_factor':1};\r\ncqlsh> USE baeldung;\r\ncqlsh> CREATE TABLE bookaudit(\r\n   bookid VARCHAR,\r\n   rentalrecno VARCHAR,\r\n   loandate VARCHAR,\r\n   loaner VARCHAR,\r\n   primary key(bookid, rentalrecno)\r\n); \r\n```","```\r\nspring.data.cassandra.username=cassandra\r\nspring.data.cassandra.password=cassandra\r\nspring.data.cassandra.keyspaceName=baeldung\r\nspring.data.cassandra.contactPoints=localhost\r\nspring.data.cassandra.port=9042\r\nspring.data.mongodb.host=localhost\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=baeldung\r\n```","```\r\npublic interface BookAuditRepository extends CassandraRepository<BookAudit, String> {\r\n\r\n}\r\n```","```\r\npublic class BookAudit {\r\n  private String bookId;\r\n  private String rentalRecNo;\r\n  private String loaner;\r\n  private String loanDate;\r\n\r\n  // standard getters and setters\r\n} \r\n```","```\r\npublic interface BookDocumentRepository extends MongoRepository<BookDocument, String> {\r\n\r\n}\r\n```","```\r\npublic class BookDocument {\r\n  private String bookId;\r\n  private String bookName;\r\n  private String bookAuthor;\r\n  private String content;\r\n\r\n  // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenBookAudit_whenPersistWithBookAuditRepository_thenSuccess() {\r\n\r\n  // given\r\n  BookAudit bookAudit = \r\n    new BookAudit(\"lorem\", \"ipsum\", \"Baeldung\", \"19:30/20.08.2017\");\r\n\r\n  // when\r\n  bookAuditRepository.save(bookAudit);\r\n\r\n  // then\r\n  List<BookAudit> result = bookAuditRepository.findAll();\r\n  assertThat(result.isEmpty(), is(false));\r\n  assertThat(result.contains(bookAudit), is(true));\r\n}\r\n```","```\r\npublic interface BookAuditCrudRepository extends CrudRepository<BookAudit, String> {\r\n\r\n}\r\n```","```\r\npublic interface BookDocumentCrudRepository extends CrudRepository<BookDocument, String> {\r\n\r\n} \r\n```","```\r\n@Table\r\npublic class BookAudit {\r\n\r\n  @PrimaryKeyColumn(type = PrimaryKeyType.PARTITIONED)\r\n  private String bookId;\r\n  @PrimaryKeyColumn\r\n  private String rentalRecNo;\r\n  private String loaner;\r\n  private String loanDate;\r\n\r\n  // standard getters and setters\r\n} \r\n```","```\r\n@Document\r\npublic class BookDocument {\r\n\r\n  private String bookId;\r\n  private String bookName;\r\n  private String bookAuthor;\r\n  private String content;\r\n\r\n  // standard getters and setters\r\n} \r\n```","```\r\n@Test\r\npublic void givenBookAudit_whenPersistWithBookDocumentCrudRepository_thenSuccess() {\r\n\r\n  // given\r\n  BookDocument bookDocument = \r\n    new BookDocument(\"lorem\", \"Foundation\", \"Isaac Asimov\", \"Once upon a time ...\");\r\n\r\n  // when\r\n  bookDocumentCrudRepository.save(bookDocument);\r\n\r\n  // then\r\n  Iterable<BookDocument> resultIterable = bookDocumentCrudRepository.findAll();\r\n  List<BookDocument> result = StreamSupport.stream(resultIterable.spliterator(), false)\r\n                                           .collect(Collectors.toList());\r\n  assertThat(result.isEmpty(), is(false));\r\n  assertThat(result.contains(bookDocument), is(true));\r\n}\r\n```","```\r\n@EnableCassandraRepositories(basePackages=\"com.baeldung.multipledatamodules.cassandra\")\r\n@EnableMongoRepositories(basePackages=\"com.baeldung.multipledatamodules.mongo\")\r\npublic class SpringDataMultipleModules {\r\n\r\n  public static void main(String[] args) {\r\n    SpringApplication.run(SpringDataMultipleModules.class, args);\r\n  }\r\n} \r\n```"]