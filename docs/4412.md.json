["```\r\n<dependency>\r\n    <groupId>com.pivovarit</groupId>\r\n    <artifactId>parallel-collectors</artifactId>\r\n    <version>1.1.0</version>\r\n</dependency>\r\n```","```\r\ncompile 'com.pivovarit:parallel-collectors:1.1.0'\r\n```","```\r\nList<Integer> ids = Arrays.asList(1, 2, 3); \r\nList<String> results = ids.parallelStream() \r\n  .map(i -> fetchById(i)) // each operation takes one second\r\n  .collect(Collectors.toList()); \r\n\r\nSystem.out.println(results); // [user-1, user-2, user-3]\r\n```","```\r\nExecutorService executor = Executors.newFixedThreadPool(10);\r\n\r\nList<Integer> ids = Arrays.asList(1, 2, 3);\r\n\r\nCompletableFuture<List<String>> results = ids.stream()\r\n  .collect(ParallelCollectors.parallelToList(i -> fetchById(i), executor, 4));\r\n\r\nSystem.out.println(results.join()); // [user-1, user-2, user-3]\r\n```","```\r\nList<Integer> ids = Arrays.asList(1, 2, 3);\r\n\r\nList<String> results = ids.stream()\r\n  .collect(parallelToList(i -> fetchById(i), executor, 4))\r\n  .join();\r\n```","```\r\nList<Integer> ids = Arrays.asList(1, 2, 3);\r\n\r\nMap<Integer, String> results = ids.stream()\r\n  .collect(parallelToMap(i -> i, i -> fetchById(i), executor, 4))\r\n  .join(); // {1=user-1, 2=user-2, 3=user-3}\r\n```","```\r\nMap<Integer, String> results = ids.stream()\r\n  .collect(parallelToMap(i -> i, i -> fetchById(i), TreeMap::new, executor, 4))\r\n  .join(); \r\n```","```\r\nList<Integer> ids = Arrays.asList(1, 2, 3);\r\n\r\nMap<Integer, String> results = ids.stream()\r\n  .collect(parallelToMap(i -> i, i -> fetchById(i), TreeMap::new, (s1, s2) -> s1, executor, 4))\r\n  .join();\r\n```","```\r\nList<String> results = ids.stream()\r\n  .collect(parallelToCollection(i -> fetchById(i), LinkedList::new, executor, 4))\r\n  .join();\r\n```","```\r\nMap<Integer, List<String>> results = ids.stream()\r\n  .collect(parallelToStream(i -> fetchById(i), executor, 4))\r\n  .thenApply(stream -> stream.collect(Collectors.groupingBy(i -> i.length())))\r\n  .join();\r\n```","```\r\nids.stream()\r\n  .collect(parallel(i -> fetchByIdWithRandomDelay(i), executor, 4))\r\n  .forEach(System.out::println);\r\n\r\n// user-1\r\n// user-3\r\n// user-2 \r\n```","```\r\nids.stream()\r\n  .collect(parallelOrdered(i -> fetchByIdWithRandomDelay(i), executor, 4))\r\n  .forEach(System.out::println);\r\n\r\n// user-1\r\n// user-2 \r\n// user-3 \r\n```"]