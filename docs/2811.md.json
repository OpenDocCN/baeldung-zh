["```\r\npublic enum Direction {\r\n    EAST, WEST, SOUTH, NORTH;\r\n}\r\n```","```\r\npublic static Direction findByName(String name) {\r\n    Direction result = null;\r\n    for (Direction direction : values()) {\r\n        if (direction.name().equalsIgnoreCase(name)) {\r\n            result = direction;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n```","```\r\n@Test\r\npublic void givenWeekdays_whenValidDirectionNameProvided_directionIsFound() {\r\n    Direction result = Direction.findByName(\"EAST\");\r\n    assertThat(result).isEqualTo(Direction.EAST);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWeekdays_whenValidDirectionNameLowerCaseProvided_directionIsFound() {\r\n    Direction result = Direction.findByName(\"east\");\r\n    assertThat(result).isEqualTo(Direction.EAST);\r\n} \r\n```","```\r\n@Test public void givenWeekdays_whenValidDirectionNameLowerCaseProvided_directionIsFound() { \r\n    Direction result = Direction.findByName(\"East\"); \r\n    assertThat(result).isEqualTo(Direction.EAST); \r\n}\r\n```","```\r\npublic Weekday {\r\n    MONDAY(\"Monday\"),\r\n    TUESDAY(\"Tuesday\"),\r\n    // ...\r\n    SUNDAY(\"Sunday\"),\r\n    ;\r\n    private final String value;\r\n\r\n    Weekday(String value) {\r\n        this.value = value;\r\n    }\r\n}\r\n```","```\r\npublic static Weekday findByValue(String value) {\r\n    Weekday result = null;\r\n    for (Weekday day : values()) {\r\n        if (day.getValue().equalsIgnoreCase(value)) {\r\n            result = day;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n```","```\r\n@Test\r\npublic void givenWeekdays_whenValidWeekdayValueProvided_weekdayIsFound() {\r\n    Weekday result = Weekday.findByValue(\"Monday\");\r\n    assertThat(result).isEqualTo(Weekday.MONDAY);\r\n} \r\n```","```\r\n@Test\r\npublic void givenWeekdays_whenInvalidWeekdayValueProvided_nullIsReturned() {\r\n    Weekday result = Weekday.findByValue(\"mon\");\r\n    assertThat(result).isNull();\r\n} \r\n```","```\r\npublic enum Month {\r\n    JANUARY(\"January\", 1),\r\n    FEBRUARY(\"February\", 2),\r\n    // ...\r\n    DECEMBER(\"December\", 12),\r\n    ;\r\n\r\n    private final String value;\r\n    private final int code;\r\n\r\n    Month(String value, int code) {\r\n        this.value = value;\r\n        this.code = code;\r\n    }\r\n}\r\n```","```\r\npublic static Optional<Month> findByCode(int code) {\r\n    return Arrays.stream(values()).filter(month -> month.getCode() == code).findFirst();\r\n} \r\n```","```\r\n@Test\r\npublic void givenMonths_whenValidMonthCodeProvided_optionalMonthIsReturned() {\r\n    Optional<Month> result = Month.findByCode(1);\r\n    assertThat(result).isEqualTo(Optional.of(Month.JANUARY));\r\n} \r\n```","```\r\n@Test\r\npublic void givenMonths_whenInvalidMonthCodeProvided_optionalEmptyIsReturned() {\r\n    Optional<Month> result = Month.findByCode(0);\r\n    assertThat(result).isEmpty();\r\n} \r\n```","```\r\npublic static Month findByValue(String value) {\r\n    return Arrays.stream(values()).filter(month -> month.getValue().equalsIgnoreCase(value)).findFirst().orElseThrow(IllegalArgumentException::new);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMonths_whenInvalidMonthValueProvided_illegalArgExIsThrown() {\r\n    assertThatIllegalArgumentException().isThrownBy(() -> Month.findByValue(\"Jan\"));\r\n} \r\n```"]