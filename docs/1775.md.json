["```\r\n@Test\r\npublic void whenCacheMiss_thenValueIsComputed() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder().build(loader);\r\n\r\n    assertEquals(0, cache.size());\r\n    assertEquals(\"HELLO\", cache.getUnchecked(\"hello\"));\r\n    assertEquals(1, cache.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCacheReachMaxSize_thenEviction() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder().maximumSize(3).build(loader);\r\n\r\n    cache.getUnchecked(\"first\");\r\n    cache.getUnchecked(\"second\");\r\n    cache.getUnchecked(\"third\");\r\n    cache.getUnchecked(\"forth\");\r\n    assertEquals(3, cache.size());\r\n    assertNull(cache.getIfPresent(\"first\"));\r\n    assertEquals(\"FORTH\", cache.getIfPresent(\"forth\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCacheReachMaxWeight_thenEviction() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    Weigher<String, String> weighByLength;\r\n    weighByLength = new Weigher<String, String>() {\r\n        @Override\r\n        public int weigh(String key, String value) {\r\n            return value.length();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder()\r\n      .maximumWeight(16)\r\n      .weigher(weighByLength)\r\n      .build(loader);\r\n\r\n    cache.getUnchecked(\"first\");\r\n    cache.getUnchecked(\"second\");\r\n    cache.getUnchecked(\"third\");\r\n    cache.getUnchecked(\"last\");\r\n    assertEquals(3, cache.size());\r\n    assertNull(cache.getIfPresent(\"first\"));\r\n    assertEquals(\"LAST\", cache.getIfPresent(\"last\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenEntryIdle_thenEviction()\r\n  throws InterruptedException {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder()\r\n      .expireAfterAccess(2,TimeUnit.MILLISECONDS)\r\n      .build(loader);\r\n\r\n    cache.getUnchecked(\"hello\");\r\n    assertEquals(1, cache.size());\r\n\r\n    cache.getUnchecked(\"hello\");\r\n    Thread.sleep(300);\r\n\r\n    cache.getUnchecked(\"test\");\r\n    assertEquals(1, cache.size());\r\n    assertNull(cache.getIfPresent(\"hello\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenEntryLiveTimeExpire_thenEviction()\r\n  throws InterruptedException {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder()\r\n      .expireAfterWrite(2,TimeUnit.MILLISECONDS)\r\n      .build(loader);\r\n\r\n    cache.getUnchecked(\"hello\");\r\n    assertEquals(1, cache.size());\r\n    Thread.sleep(300);\r\n    cache.getUnchecked(\"test\");\r\n    assertEquals(1, cache.size());\r\n    assertNull(cache.getIfPresent(\"hello\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenWeakKeyHasNoRef_thenRemoveFromCache() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder().weakKeys().build(loader);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSoftValue_thenRemoveFromCache() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder().softValues().build(loader);\r\n}\r\n```","```\r\n@Test\r\npublic void whenNullValue_thenOptional() {\r\n    CacheLoader<String, Optional<String>> loader;\r\n    loader = new CacheLoader<String, Optional<String>>() {\r\n        @Override\r\n        public Optional<String> load(String key) {\r\n            return Optional.fromNullable(getSuffix(key));\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, Optional<String>> cache;\r\n    cache = CacheBuilder.newBuilder().build(loader);\r\n\r\n    assertEquals(\"txt\", cache.getUnchecked(\"text.txt\").get());\r\n    assertFalse(cache.getUnchecked(\"hello\").isPresent());\r\n}\r\nprivate String getSuffix(final String str) {\r\n    int lastIndex = str.lastIndexOf('.');\r\n    if (lastIndex == -1) {\r\n        return null;\r\n    }\r\n    return str.substring(lastIndex + 1);\r\n}\r\n```","```\r\nString value = loadingCache.get(\"key\");\r\nloadingCache.refresh(\"key\");\r\n```","```\r\n@Test\r\npublic void whenLiveTimeEnd_thenRefresh() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder()\r\n      .refreshAfterWrite(1,TimeUnit.MINUTES)\r\n      .build(loader);\r\n}\r\n```","```\r\n@Test\r\npublic void whenPreloadCache_thenUsePutAll() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder().build(loader);\r\n\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(\"first\", \"FIRST\");\r\n    map.put(\"second\", \"SECOND\");\r\n    cache.putAll(map);\r\n\r\n    assertEquals(2, cache.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenEntryRemovedFromCache_thenNotify() {\r\n    CacheLoader<String, String> loader;\r\n    loader = new CacheLoader<String, String>() {\r\n        @Override\r\n        public String load(final String key) {\r\n            return key.toUpperCase();\r\n        }\r\n    };\r\n\r\n    RemovalListener<String, String> listener;\r\n    listener = new RemovalListener<String, String>() {\r\n        @Override\r\n        public void onRemoval(RemovalNotification<String, String> n){\r\n            if (n.wasEvicted()) {\r\n                String cause = n.getCause().name();\r\n                assertEquals(RemovalCause.SIZE.toString(),cause);\r\n            }\r\n        }\r\n    };\r\n\r\n    LoadingCache<String, String> cache;\r\n    cache = CacheBuilder.newBuilder()\r\n      .maximumSize(3)\r\n      .removalListener(listener)\r\n      .build(loader);\r\n\r\n    cache.getUnchecked(\"first\");\r\n    cache.getUnchecked(\"second\");\r\n    cache.getUnchecked(\"third\");\r\n    cache.getUnchecked(\"last\");\r\n    assertEquals(3, cache.size());\r\n}\r\n```"]