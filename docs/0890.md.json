["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.3.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context-support</artifactId>\r\n    <version>5.3.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-cache</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableCaching\r\npublic class CachingConfig {\r\n\r\n    @Bean\r\n    public CacheManager cacheManager() {\r\n        return new ConcurrentMapCacheManager(\"addresses\");\r\n    }\r\n}\r\n```","```\r\n<beans>\r\n    <cache:annotation-driven />\r\n\r\n    <bean id=\"cacheManager\" class=\"org.springframework.cache.support.SimpleCacheManager\">\r\n        <property name=\"caches\">\r\n            <set>\r\n                <bean \r\n                  class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" \r\n                  name=\"addresses\"/>\r\n            </set>\r\n        </property>\r\n    </bean>\r\n</beans>\r\n```","```\r\n@Component\r\npublic class SimpleCacheCustomizer \r\n  implements CacheManagerCustomizer<ConcurrentMapCacheManager> {\r\n\r\n    @Override\r\n    public void customize(ConcurrentMapCacheManager cacheManager) {\r\n        cacheManager.setCacheNames(asList(\"users\", \"transactions\"));\r\n    }\r\n}\r\n```","```\r\n@Cacheable(\"addresses\")\r\npublic String getAddress(Customer customer) {...} \r\n```","```\r\n@Cacheable({\"addresses\", \"directory\"})\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@CacheEvict(value=\"addresses\", allEntries=true)\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@CachePut(value=\"addresses\")\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@CacheEvict(\"addresses\")\r\n@CacheEvict(value=\"directory\", key=customer.name)\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@Caching(evict = { \r\n  @CacheEvict(\"addresses\"), \r\n  @CacheEvict(value=\"directory\", key=\"#customer.name\") })\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@CacheConfig(cacheNames={\"addresses\"})\r\npublic class CustomerDataService {\r\n\r\n    @Cacheable\r\n    public String getAddress(Customer customer) {...}\r\n```","```\r\n@CachePut(value=\"addresses\")\r\npublic String getAddress(Customer customer) {...} \r\n```","```\r\n@CachePut(value=\"addresses\", condition=\"#customer.name=='Tom'\")\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n@CachePut(value=\"addresses\", unless=\"#result.length()<64\")\r\npublic String getAddress(Customer customer) {...}\r\n```","```\r\n<!-- the service that you wish to make cacheable -->\r\n<bean id=\"customerDataService\" \r\n  class=\"com.your.app.namespace.service.CustomerDataService\"/>\r\n\r\n<bean id=\"cacheManager\" \r\n  class=\"org.springframework.cache.support.SimpleCacheManager\"> \r\n    <property name=\"caches\"> \r\n        <set> \r\n            <bean \r\n              class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" \r\n              name=\"directory\"/> \r\n            <bean \r\n              class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" \r\n              name=\"addresses\"/> \r\n        </set> \r\n    </property> \r\n</bean>\r\n<!-- define caching behavior -->\r\n<cache:advice id=\"cachingBehavior\" cache-manager=\"cacheManager\">\r\n    <cache:caching cache=\"addresses\">\r\n        <cache:cacheable method=\"getAddress\" key=\"#customer.name\"/>\r\n    </cache:caching>\r\n</cache:advice>\r\n\r\n<!-- apply the behavior to all the implementations of CustomerDataService interface->\r\n<aop:config>\r\n    <aop:advisor advice-ref=\"cachingBehavior\"\r\n      pointcut=\"execution(* com.your.app.namespace.service.CustomerDataService.*(..))\"/>\r\n</aop:config>\r\n```","```\r\n@Configuration\r\n@EnableCaching\r\npublic class CachingConfig {\r\n\r\n    @Bean\r\n    public CacheManager cacheManager() {\r\n        SimpleCacheManager cacheManager = new SimpleCacheManager();\r\n        cacheManager.setCaches(Arrays.asList(\r\n          new ConcurrentMapCache(\"directory\"), \r\n          new ConcurrentMapCache(\"addresses\")));\r\n        return cacheManager;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomerDataService {\r\n\r\n    @Cacheable(value = \"addresses\", key = \"#customer.name\")\r\n    public String getAddress(Customer customer) {\r\n        return customer.getAddress();\r\n    }\r\n}\r\n```"]