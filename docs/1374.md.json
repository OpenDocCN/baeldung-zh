["```\r\nList<String> list = List.of(\r\n  \"Java\", \"PHP\", \"Jquery\", \"JavaScript\", \"JShell\", \"JAVA\");\r\n```","```\r\nList list1 = list.drop(2);                                      \r\nassertFalse(list1.contains(\"Java\") && list1.contains(\"PHP\"));   \r\n\r\nList list2 = list.dropRight(2);                                 \r\nassertFalse(list2.contains(\"JAVA\") && list2.contains(\"JShell\"));\r\n\r\nList list3 = list.dropUntil(s -> s.contains(\"Shell\"));          \r\nassertEquals(list3.size(), 2);                                  \r\n\r\nList list4 = list.dropWhile(s -> s.length() > 0);               \r\nassertTrue(list4.isEmpty());\r\n```","```\r\nList list5 = list.take(1);                       \r\nassertEquals(list5.single(), \"Java\");            \r\n\r\nList list6 = list.takeRight(1);                  \r\nassertEquals(list6.single(), \"JAVA\");            \r\n\r\nList list7 = list.takeUntil(s -> s.length() > 6);\r\nassertEquals(list7.size(), 3);\r\n```","```\r\nList list8 = list\r\n  .distinctBy((s1, s2) -> s1.startsWith(s2.charAt(0) + \"\") ? 0 : 1);\r\nassertEquals(list8.size(), 2);\r\n\r\nString words = List.of(\"Boys\", \"Girls\")\r\n  .intersperse(\"and\")\r\n  .reduce((s1, s2) -> s1.concat( \" \" + s2 ))\r\n  .trim();  \r\nassertEquals(words, \"Boys and Girls\");\r\n```","```\r\nIterator<List<String>> iterator = list.grouped(2);\r\nassertEquals(iterator.head().size(), 2);\r\n\r\nMap<Boolean, List<String>> map = list.groupBy(e -> e.startsWith(\"J\"));\r\nassertEquals(map.size(), 2);\r\nassertEquals(map.get(false).get().size(), 1);\r\nassertEquals(map.get(true).get().size(), 5);\r\n```","```\r\nList<Integer> intList = List.empty();\r\n\r\nList<Integer> intList1 = intList.pushAll(List.rangeClosed(5,10));\r\n\r\nassertEquals(intList1.peek(), Integer.valueOf(10));\r\n\r\nList intList2 = intList1.pop();\r\nassertEquals(intList2.size(), (intList1.size() - 1) );\r\n```","```\r\nQueue<Integer> queue = Queue.of(1, 2);\r\nQueue<Integer> secondQueue = queue.enqueueAll(List.of(4,5));\r\n\r\nassertEquals(3, queue.size());\r\nassertEquals(5, secondQueue.size());\r\n\r\nTuple2<Integer, Queue<Integer>> result = secondQueue.dequeue();\r\nassertEquals(Integer.valueOf(1), result._1);\r\n\r\nQueue<Integer> tailQueue = result._2;\r\nassertFalse(tailQueue.contains(secondQueue.get(0)));\r\n```","```\r\nQueue<Queue<Integer>> queue1 = queue.combinations(2);\r\nassertEquals(queue1.get(2).toCharSeq(), CharSeq.of(\"23\"));\r\n```","```\r\nStream<Integer> s = Stream.of(2, 1, 3, 4);\r\n```","```\r\nStream<Integer> intStream = Stream.iterate(0, i -> i + 1)\r\n  .take(10);\r\n\r\nassertEquals(10, intStream.size());\r\n\r\nlong evenSum = intStream.filter(i -> i % 2 == 0)\r\n  .sum()\r\n  .longValue();\r\n\r\nassertEquals(20, evenSum); \r\n```","```\r\nStream<Integer> s1 = Stream.tabulate(5, (i)-> i + 1);\r\nassertEquals(s1.get(2).intValue(), 3);\r\n```","```\r\nStream<Integer> s = Stream.of(2,1,3,4);\r\n\r\nStream<Tuple2<Integer, Integer>> s2 = s.zip(List.of(7,8,9));\r\nTuple2<Integer, Integer> t1 = s2.get(0);\r\n\r\nassertEquals(t1._1().intValue(), 2);\r\nassertEquals(t1._2().intValue(), 7);\r\n```","```\r\nArray<Integer> rArray = Array.range(1, 5);\r\nassertFalse(rArray.contains(5));\r\n\r\nArray<Integer> rArray2 = Array.rangeClosed(1, 5);\r\nassertTrue(rArray2.contains(5));\r\n\r\nArray<Integer> rArray3 = Array.rangeClosedBy(1,6,2);\r\nassertEquals(rArray3.size(), 3);\r\n```","```\r\nArray<Integer> intArray = Array.of(1, 2, 3);\r\nArray<Integer> newArray = intArray.removeAt(1);\r\n\r\nassertEquals(3, intArray.size());\r\nassertEquals(2, newArray.size());\r\nassertEquals(3, newArray.get(1).intValue());\r\n\r\nArray<Integer> array2 = intArray.replace(1, 5);\r\nassertEquals(array2.get(0).intValue(), 5);\r\n```","```\r\nVector<Integer> intVector = Vector.range(1, 5);\r\nVector<Integer> newVector = intVector.replace(2, 6);\r\n\r\nassertEquals(4, intVector.size());\r\nassertEquals(4, newVector.size());\r\n\r\nassertEquals(2, intVector.get(1).intValue());\r\nassertEquals(6, newVector.get(1).intValue());\r\n```","```\r\nCharSeq chars = CharSeq.of(\"vavr\");\r\nCharSeq newChars = chars.replace('v', 'V');\r\n\r\nassertEquals(4, chars.size());\r\nassertEquals(4, newChars.size());\r\n\r\nassertEquals('v', chars.charAt(0));\r\nassertEquals('V', newChars.charAt(0));\r\nassertEquals(\"Vavr\", newChars.mkString());\r\n```","```\r\nHashSet<Integer> set0 = HashSet.rangeClosed(1,5);\r\nHashSet<Integer> set1 = HashSet.rangeClosed(3, 6);\r\n\r\nassertEquals(set0.union(set1), HashSet.rangeClosed(1,6));\r\nassertEquals(set0.diff(set1), HashSet.rangeClosed(1,2));\r\nassertEquals(set0.intersect(set1), HashSet.rangeClosed(3,5));\r\n```","```\r\nHashSet<String> set = HashSet.of(\"Red\", \"Green\", \"Blue\");\r\nHashSet<String> newSet = set.add(\"Yellow\");\r\n\r\nassertEquals(3, set.size());\r\nassertEquals(4, newSet.size());\r\nassertTrue(newSet.contains(\"Yellow\"));\r\n```","```\r\nSortedSet<String> set = TreeSet.of(\"Red\", \"Green\", \"Blue\");\r\nassertEquals(\"Blue\", set.head());\r\n\r\nSortedSet<Integer> intSet = TreeSet.of(1,2,3);\r\nassertEquals(2, intSet.average().get().intValue());\r\n```","```\r\nSortedSet<String> reversedSet\r\n  = TreeSet.of(Comparator.reverseOrder(), \"Green\", \"Red\", \"Blue\");\r\nassertEquals(\"Red\", reversedSet.head());\r\n\r\nString str = reversedSet.mkString(\" and \");\r\nassertEquals(\"Red and Green and Blue\", str);\r\n```","```\r\nBitSet<Integer> bitSet = BitSet.of(1,2,3,4,5,6,7,8);\r\nBitSet<Integer> bitSet1 = bitSet.takeUntil(i -> i > 4);\r\nassertEquals(bitSet1.size(), 4);\r\n```","```\r\nMap<Integer, List<Integer>> map = List.rangeClosed(0, 10)\r\n  .groupBy(i -> i % 2);\r\n\r\nassertEquals(2, map.size());\r\nassertEquals(6, map.get(0).get().size());\r\nassertEquals(5, map.get(1).get().size());\r\n```","```\r\nMap<String, String> map1\r\n  = HashMap.of(\"key1\", \"val1\", \"key2\", \"val2\", \"key3\", \"val3\");\r\n\r\nMap<String, String> fMap\r\n  = map1.filterKeys(k -> k.contains(\"1\") || k.contains(\"2\"));\r\nassertFalse(fMap.containsKey(\"key3\"));\r\n\r\nMap<String, String> fMap2\r\n  = map1.filterValues(v -> v.contains(\"3\"));\r\nassertEquals(fMap2.size(), 1);\r\nassertTrue(fMap2.containsValue(\"val3\"));\r\n```","```\r\nMap<String, Integer> map2 = map1.map(\r\n  (k, v) -> Tuple.of(k, Integer.valueOf(v.charAt(v.length() - 1) + \"\")));\r\nassertEquals(map2.get(\"key1\").get().intValue(), 1);\r\n```","```\r\nSortedMap<Integer, String> map\r\n  = TreeMap.of(3, \"Three\", 2, \"Two\", 4, \"Four\", 1, \"One\");\r\n\r\nassertEquals(1, map.keySet().toJavaArray()[0]);\r\nassertEquals(\"Four\", map.get(4).get());\r\n```","```\r\nTreeMap<Integer, String> treeMap2 =\r\n  TreeMap.of(Comparator.reverseOrder(), 3,\"three\", 6, \"six\", 1, \"one\");\r\nassertEquals(treeMap2.keySet().mkString(), \"631\");\r\n```","```\r\njava.util.List<Integer> javaList = java.util.Arrays.asList(1, 2, 3, 4);\r\nList<Integer> vavrList = List.ofAll(javaList);\r\n\r\njava.util.stream.Stream<Integer> javaStream = javaList.stream();\r\nSet<Integer> vavrSet = HashSet.ofAll(javaStream);\r\n```","```\r\nList<Integer> vavrList = IntStream.range(1, 10)\r\n  .boxed()\r\n  .filter(i -> i % 2 == 0)\r\n  .collect(List.collector());\r\n\r\nassertEquals(4, vavrList.size());\r\nassertEquals(2, vavrList.head().intValue());\r\n```","```\r\nInteger[] array = List.of(1, 2, 3)\r\n  .toJavaArray(Integer.class);\r\nassertEquals(3, array.length);\r\n\r\njava.util.Map<String, Integer> map = List.of(\"1\", \"2\", \"3\")\r\n  .toJavaMap(i -> Tuple.of(i, Integer.valueOf(i)));\r\nassertEquals(2, map.get(\"2\").intValue());\r\n```","```\r\njava.util.Set<Integer> javaSet = List.of(1, 2, 3)\r\n  .collect(Collectors.toSet());\r\n\r\nassertEquals(3, javaSet.size());\r\nassertEquals(1, javaSet.toArray()[0]);\r\n```","```\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void givenVavrList_whenViewConverted_thenException() {\r\n    java.util.List<Integer> javaList = List.of(1, 2, 3)\r\n      .asJava();\r\n\r\n    assertEquals(3, javaList.get(2).intValue());\r\n    javaList.add(4);\r\n}\r\n```","```\r\njava.util.List<Integer> javaList = List.of(1, 2, 3)\r\n  .asJavaMutable();\r\njavaList.add(4);\r\n\r\nassertEquals(4, javaList.get(3).intValue());\r\n```"]