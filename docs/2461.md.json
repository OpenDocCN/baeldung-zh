["```\r\n#{${someProperty} + 2}\r\n```","```\r\n@Value(\"#{19 + 1}\") // 20\r\nprivate double add; \r\n\r\n@Value(\"#{'String1 ' + 'string2'}\") // \"String1 string2\"\r\nprivate String addString; \r\n\r\n@Value(\"#{20 - 1}\") // 19\r\nprivate double subtract;\r\n\r\n@Value(\"#{10 * 2}\") // 20\r\nprivate double multiply;\r\n\r\n@Value(\"#{36 / 2}\") // 19\r\nprivate double divide;\r\n\r\n@Value(\"#{36 div 2}\") // 18, the same as for / operator\r\nprivate double divideAlphabetic; \r\n\r\n@Value(\"#{37 % 10}\") // 7\r\nprivate double modulo;\r\n\r\n@Value(\"#{37 mod 10}\") // 7, the same as for % operator\r\nprivate double moduloAlphabetic; \r\n\r\n@Value(\"#{2 ^ 9}\") // 512\r\nprivate double powerOf;\r\n\r\n@Value(\"#{(2 + 2) * 2 + 9}\") // 17\r\nprivate double brackets; \r\n```","```\r\n@Value(\"#{1 == 1}\") // true\r\nprivate boolean equal;\r\n\r\n@Value(\"#{1 eq 1}\") // true\r\nprivate boolean equalAlphabetic;\r\n\r\n@Value(\"#{1 != 1}\") // false\r\nprivate boolean notEqual;\r\n\r\n@Value(\"#{1 ne 1}\") // false\r\nprivate boolean notEqualAlphabetic;\r\n\r\n@Value(\"#{1 < 1}\") // false\r\nprivate boolean lessThan;\r\n\r\n@Value(\"#{1 lt 1}\") // false\r\nprivate boolean lessThanAlphabetic;\r\n\r\n@Value(\"#{1 <= 1}\") // true\r\nprivate boolean lessThanOrEqual;\r\n\r\n@Value(\"#{1 le 1}\") // true\r\nprivate boolean lessThanOrEqualAlphabetic;\r\n\r\n@Value(\"#{1 > 1}\") // false\r\nprivate boolean greaterThan;\r\n\r\n@Value(\"#{1 gt 1}\") // false\r\nprivate boolean greaterThanAlphabetic;\r\n\r\n@Value(\"#{1 >= 1}\") // true\r\nprivate boolean greaterThanOrEqual;\r\n\r\n@Value(\"#{1 ge 1}\") // true\r\nprivate boolean greaterThanOrEqualAlphabetic; \r\n```","```\r\n@Value(\"#{250 > 200 && 200 < 4000}\") // true\r\nprivate boolean and; \r\n\r\n@Value(\"#{250 > 200 and 200 < 4000}\") // true\r\nprivate boolean andAlphabetic;\r\n\r\n@Value(\"#{400 > 300 || 150 < 100}\") // true\r\nprivate boolean or;\r\n\r\n@Value(\"#{400 > 300 or 150 < 100}\") // true\r\nprivate boolean orAlphabetic;\r\n\r\n@Value(\"#{!true}\") // false\r\nprivate boolean not;\r\n\r\n@Value(\"#{not true}\") // false\r\nprivate boolean notAlphabetic;\r\n```","```\r\n@Value(\"#{2 > 1 ? 'a' : 'b'}\") // \"a\"\r\nprivate String ternary;\r\n```","```\r\n@Value(\"#{someBean.someProperty != null ? someBean.someProperty : 'default'}\")\r\nprivate String ternary;\r\n```","```\r\n@Value(\"#{someBean.someProperty ?: 'default'}\") // Will inject provided string if someProperty is null\r\nprivate String elvis;\r\n```","```\r\n@Value(\"#{'100' matches '\\\\d+' }\") // true\r\nprivate boolean validNumericStringResult;\r\n\r\n@Value(\"#{'100fghdjf' matches '\\\\d+' }\") // false\r\nprivate boolean invalidNumericStringResult;\r\n\r\n@Value(\"#{'valid alphabetic string' matches '[a-zA-Z\\\\s]+' }\") // true\r\nprivate boolean validAlphabeticStringResult;\r\n\r\n@Value(\"#{'invalid alphabetic string #$1' matches '[a-zA-Z\\\\s]+' }\") // false\r\nprivate boolean invalidAlphabeticStringResult;\r\n\r\n@Value(\"#{someBean.someValue matches '\\d+'}\") // true if someValue contains only digits\r\nprivate boolean validNumericValue;\r\n```","```\r\n@Component(\"workersHolder\")\r\npublic class WorkersHolder {\r\n    private List<String> workers = new LinkedList<>();\r\n    private Map<String, Integer> salaryByWorkers = new HashMap<>();\r\n\r\n    public WorkersHolder() {\r\n        workers.add(\"John\");\r\n        workers.add(\"Susie\");\r\n        workers.add(\"Alex\");\r\n        workers.add(\"George\");\r\n\r\n        salaryByWorkers.put(\"John\", 35000);\r\n        salaryByWorkers.put(\"Susie\", 47000);\r\n        salaryByWorkers.put(\"Alex\", 12000);\r\n        salaryByWorkers.put(\"George\", 14000);\r\n    }\r\n\r\n    //Getters and setters\r\n}\r\n```","```\r\n@Value(\"#{workersHolder.salaryByWorkers['John']}\") // 35000\r\nprivate Integer johnSalary;\r\n\r\n@Value(\"#{workersHolder.salaryByWorkers['George']}\") // 14000\r\nprivate Integer georgeSalary;\r\n\r\n@Value(\"#{workersHolder.salaryByWorkers['Susie']}\") // 47000\r\nprivate Integer susieSalary;\r\n\r\n@Value(\"#{workersHolder.workers[0]}\") // John\r\nprivate String firstWorker;\r\n\r\n@Value(\"#{workersHolder.workers[3]}\") // George\r\nprivate String lastWorker;\r\n\r\n@Value(\"#{workersHolder.workers.size()}\") // 4\r\nprivate Integer numberOfWorkers;\r\n```","```\r\npublic class Engine {\r\n    private int capacity;\r\n    private int horsePower;\r\n    private int numberOfCylinders;\r\n\r\n   // Getters and setters\r\n}\r\n\r\npublic class Car {\r\n    private String make;\r\n    private int model;\r\n    private Engine engine;\r\n    private int horsePower;\r\n\r\n   // Getters and setters\r\n}\r\n```","```\r\n<bean id=\"engine\" class=\"com.baeldung.spring.spel.Engine\">\r\n   <property name=\"capacity\" value=\"3200\"/>\r\n   <property name=\"horsePower\" value=\"250\"/>\r\n   <property name=\"numberOfCylinders\" value=\"6\"/>\r\n</bean>\r\n<bean id=\"someCar\" class=\"com.baeldung.spring.spel.Car\">\r\n   <property name=\"make\" value=\"Some make\"/>\r\n   <property name=\"model\" value=\"Some model\"/>\r\n   <property name=\"engine\" value=\"#{engine}\"/>\r\n   <property name=\"horsePower\" value=\"#{engine.horsePower}\"/>\r\n</bean>\r\n```","```\r\npublic class SpelOperators {\r\n    private boolean equal;\r\n    private boolean notEqual;\r\n    private boolean greaterThanOrEqual;\r\n    private boolean and;\r\n    private boolean or;\r\n    private String addString;\r\n\r\n    // Getters and setters\r\n```","```\r\n @Override\r\n    public String toString() {\r\n        // toString which include all fields\r\n    }\r\n```","```\r\n<bean id=\"spelOperators\" class=\"com.baeldung.spring.spel.SpelOperators\">\r\n   <property name=\"equal\" value=\"#{1 == 1}\"/>\r\n   <property name=\"notEqual\" value=\"#{1 lt 1}\"/>\r\n   <property name=\"greaterThanOrEqual\" value=\"#{someCar.engine.numberOfCylinders >= 6}\"/>\r\n   <property name=\"and\" value=\"#{someCar.horsePower == 250 and someCar.engine.capacity lt 4000}\"/>\r\n   <property name=\"or\" value=\"#{someCar.horsePower > 300 or someCar.engine.capacity > 3000}\"/>\r\n   <property name=\"addString\" value=\"#{someCar.model + ' manufactured by ' + someCar.make}\"/>\r\n</bean>\r\n```","```\r\nApplicationContext context = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\r\nSpelOperators spelOperators = (SpelOperators) context.getBean(\"spelOperators\"); \r\n```","```\r\n[equal=true, notEqual=false, greaterThanOrEqual=true, and=true, \r\nor=true, addString=Some model manufactured by Some make] \r\n```","```\r\nExpressionParser expressionParser = new SpelExpressionParser();\r\nExpression expression = expressionParser.parseExpression(\"'Any string'\");\r\nString result = (String) expression.getValue(); \r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"'Any string'.length()\");\r\nInteger result = (Integer) expression.getValue();\r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"new String('Any string').length()\");\r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"'Any string'.bytes\");\r\nbyte[] result = (byte[]) expression.getValue();\r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"'Any string'.replace(\\\" \\\", \\\"\\\").length()\");\r\nInteger result = (Integer) expression.getValue();\r\n```","```\r\nInteger result = expression.getValue(Integer.class);\r\n```","```\r\nCar car = new Car();\r\ncar.setMake(\"Good manufacturer\");\r\ncar.setModel(\"Model 3\");\r\ncar.setYearOfProduction(2014);\r\n\r\nExpressionParser expressionParser = new SpelExpressionParser();\r\nExpression expression = expressionParser.parseExpression(\"model\");\r\n\r\nEvaluationContext context = new StandardEvaluationContext(car);\r\nString result = (String) expression.getValue(context);\r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"model\");\r\nString result = (String) expression.getValue(car);\r\n```","```\r\nExpression expression = expressionParser.parseExpression(\"yearOfProduction > 2005\");\r\nboolean result = expression.getValue(car, Boolean.class);\r\n```","```\r\nCar car = new Car();\r\ncar.setMake(\"Good manufacturer\");\r\ncar.setModel(\"Model 3\");\r\ncar.setYearOfProduction(2014);\r\n\r\nCarPark carPark = new CarPark();\r\ncarPark.getCars().add(car);\r\n\r\nStandardEvaluationContext context = new StandardEvaluationContext(carPark);\r\n\r\nExpressionParser expressionParser = new SpelExpressionParser();\r\nexpressionParser.parseExpression(\"cars[0].model\").setValue(context, \"Other model\");\r\n```","```\r\npublic class CarPark {\r\n    private List<Car> cars = new ArrayList<>();\r\n\r\n    // Getter and setter\r\n}\r\n```","```\r\nEL1025E:(pos 4): The collection has '0' elements, index '0' is invalid\r\n```","```\r\nSpelParserConfiguration config = new SpelParserConfiguration(true, true);\r\nStandardEvaluationContext context = new StandardEvaluationContext(carPark);\r\n\r\nExpressionParser expressionParser = new SpelExpressionParser(config);\r\nexpressionParser.parseExpression(\"cars[0]\").setValue(context, car);\r\n\r\nCar result = carPark.getCars().get(0);\r\n```"]