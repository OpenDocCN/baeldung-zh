["```\r\n<dependency>\r\n    <groupId>org.openpnp</groupId>\r\n    <artifactId>opencv</artifactId>\r\n    <version>3.4.2-0</version>\r\n</dependency>\r\n```","```\r\ncompile group: 'org.openpnp', name: 'opencv', version: '3.4.2-0'\r\n```","```\r\nOpenCV.loadShared();\r\n```","```\r\nSystem.loadLibrary(Core.NATIVE_LIBRARY_NAME)\r\n```","```\r\npublic static Mat loadImage(String imagePath) {\r\n    Imgcodecs imageCodecs = new Imgcodecs();\r\n    return imageCodecs.imread(imagePath);\r\n}\r\n```","```\r\npublic static void saveImage(Mat imageMatrix, String targetPath) {\r\n    Imgcodecs imgcodecs = new Imgcodecs();\r\n    imgcodecs.imwrite(targetPath, imageMatrix);\r\n}\r\n```","```\r\nMat loadedImage = loadImage(sourceImagePath);\r\n```","```\r\nMatOfRect facesDetected = new MatOfRect();\r\n```","```\r\nCascadeClassifier cascadeClassifier = new CascadeClassifier(); \r\nint minFaceSize = Math.round(loadedImage.rows() * 0.1f); \r\ncascadeClassifier.load(\"./src/main/resources/haarcascades/haarcascade_frontalface_alt.xml\"); \r\ncascadeClassifier.detectMultiScale(loadedImage, \r\n  facesDetected, \r\n  1.1, \r\n  3, \r\n  Objdetect.CASCADE_SCALE_IMAGE, \r\n  new Size(minFaceSize, minFaceSize), \r\n  new Size() \r\n);\r\n```","```\r\nRect[] facesArray = facesDetected.toArray(); \r\nfor(Rect face : facesArray) { \r\n    Imgproc.rectangle(loadedImage, face.tl(), face.br(), new Scalar(0, 0, 255), 3); \r\n} \r\nsaveImage(loadedImage, targetImagePath);\r\n```","```\r\npublic Image mat2Img(Mat mat) {\r\n    MatOfByte bytes = new MatOfByte();\r\n    Imgcodecs.imencode(\"img\", mat, bytes);\r\n    InputStream inputStream = new ByteArrayInputStream(bytes.toArray());\r\n    return new Image(inputStream);\r\n}\r\n```","```\r\nOpenCV.loadShared();\r\n```","```\r\nVideoCapture capture = new VideoCapture(0); \r\nImageView imageView = new ImageView(); \r\nHBox hbox = new HBox(imageView); \r\nScene scene = new Scene(hbox);\r\nstage.setScene(scene); \r\nstage.show();\r\n```","```\r\nnew AnimationTimer() { \r\n    @Override public void handle(long l) { \r\n        imageView.setImage(getCapture()); \r\n    } \r\n}.start();\r\n```","```\r\npublic Image getCapture() { \r\n    Mat mat = new Mat(); \r\n    capture.read(mat); \r\n    return mat2Img(mat); \r\n}\r\n```","```\r\npublic Image getCaptureWithFaceDetection() {\r\n    Mat mat = new Mat();\r\n    capture.read(mat);\r\n    Mat haarClassifiedImg = detectFace(mat);\r\n    return mat2Img(haarClassifiedImg);\r\n}\r\n```"]