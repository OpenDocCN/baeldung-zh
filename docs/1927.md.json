["```\r\npublic class User {\r\n    private final String username;\r\n    private final String emailAddress;\r\n    @With\r\n    private final boolean isAuthenticated;\r\n\r\n    //getters, constructors\r\n}\r\n```","```\r\npublic class User {\r\n    private final String username;\r\n    private final String emailAddress;\r\n    private final boolean isAuthenticated;\r\n\r\n    //getters, constructors\r\n\r\n    public User withAuthenticated(boolean isAuthenticated) {\r\n        return this.isAuthenticated == isAuthenticated ? this : new User(this.username, this.emailAddress, isAuthenticated);\r\n    }\r\n}\r\n```","```\r\nUser immutableUser = new User(\"testuser\", \"[[emailÂ protected]](/web/20221126224530/https://www.baeldung.com/cdn-cgi/l/email-protection)\", false);\r\nUser authenticatedUser = immutableUser.withAuthenticated(true);\r\n\r\nassertNotSame(immutableUser, authenticatedUser);\r\nassertFalse(immutableUser.isAuthenticated());\r\nassertTrue(authenticatedUser.isAuthenticated());\r\n```","```\r\npublic abstract class Device {\r\n    private final String serial;\r\n    @With\r\n    private final boolean isInspected;\r\n\r\n    //getters, constructor\r\n}\r\n```","```\r\npublic class KioskDevice extends Device {\r\n\r\n    @Override\r\n    public Device withInspected(boolean isInspected) {\r\n        return new KioskDevice(getSerial(), isInspected);\r\n    }\r\n\r\n    //getters, constructor\r\n}\r\n```","```\r\npublic class Holder {\r\n    @With\r\n    private String variableA;\r\n    @With\r\n    private String _variableB;\r\n    @With\r\n    private String $variableC;\r\n\r\n    //getters, constructor excluding $variableC\r\n}\r\n```","```\r\nHolder value = new Holder(\"a\", \"b\");\r\n\r\nHolder valueModifiedA = value.withVariableA(\"mod-a\");\r\nHolder valueModifiedB = value.with_variableB(\"mod-b\");\r\n// Holder valueModifiedC = value.with$VariableC(\"mod-c\"); not possible\r\n```","```\r\npublic class Stock {\r\n    @With\r\n    private String sku;\r\n    @With\r\n    private int stockCount;\r\n\r\n    //prevents another withSku() method from being generated\r\n    public Stock withSku(String sku) {\r\n        return new Stock(\"mod-\" + sku, stockCount);\r\n    }\r\n\r\n    //constructor\r\n}\r\n```","```\r\npublic class Stock {\r\n    @With\r\n    private String sku;\r\n    private int stockCount;\r\n\r\n    //also prevents another withSku() method from being generated\r\n    public Stock withSKU(String... sku) {\r\n        return sku == null || sku.length == 0 ?\r\n          new Stock(\"unknown\", stockCount) :\r\n          new Stock(\"mod-\" + sku[0], stockCount);\r\n    }\r\n\r\n    //constructor\r\n}\r\n```","```\r\n@With\r\n@AllArgsConstructor\r\npublic class ImprovedUser {\r\n    @NonNull\r\n    private final String username;\r\n    @NonNull\r\n    private final String emailAddress;\r\n}\r\n```","```\r\npublic ImprovedUser withUsername(@NonNull String username) {\r\n    if (username == null) {\r\n        throw new NullPointerException(\"username is marked non-null but is null\");\r\n    } else {\r\n        return this.username == username ? this : new ImprovedUser(username, this.emailAddress);\r\n    }\r\n}\r\n\r\npublic ImprovedUser withEmailAddress(@NonNull String emailAddress) {\r\n    if (emailAddress == null) {\r\n        throw new NullPointerException(\"emailAddress is marked non-null but is null\");\r\n    } else {\r\n        return this.emailAddress == emailAddress ? this : new ImprovedUser(this.username, emailAddress);\r\n    }\r\n}\r\n```"]