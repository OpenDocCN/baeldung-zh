["```\r\npublic class Customer {\r\n    private String name;\r\n    private int points;\r\n    //Constructor and standard getters\r\n}\r\n```","```\r\nCustomer john = new Customer(\"John P.\", 15);\r\nCustomer sarah = new Customer(\"Sarah M.\", 200);\r\nCustomer charles = new Customer(\"Charles B.\", 150);\r\nCustomer mary = new Customer(\"Mary T.\", 1);\r\n\r\nList<Customer> customers = Arrays.asList(john, sarah, charles, mary);\r\n```","```\r\nlong count = customers.stream().count();\r\n\r\nassertThat(count).isEqualTo(4L);\r\n```","```\r\nlong countBigCustomers = customers\r\n  .stream()\r\n  .filter(c -> c.getPoints() > 100)\r\n  .count();\r\n\r\nassertThat(countBigCustomers).isEqualTo(2L);\r\n```","```\r\nlong count = customers\r\n  .stream()\r\n  .filter(c -> c.getPoints() > 500)\r\n  .count();\r\n\r\nassertThat(count).isEqualTo(0L); \r\n```","```\r\nlong count = customers\r\n  .stream()\r\n  .filter(c -> c.getPoints() > 10 && c.getName().startsWith(\"Charles\"))\r\n  .count();\r\n\r\nassertThat(count).isEqualTo(1L);\r\n```","```\r\nlong count = customers\r\n  .stream()\r\n  .filter(Customer::hasOverHundredPoints)\r\n  .count();\r\n\r\nassertThat(count).isEqualTo(2L);\r\n```"]