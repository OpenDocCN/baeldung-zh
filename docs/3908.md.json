["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>    \r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jdbc</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth</groupId>\r\n    <artifactId>spring-security-oauth2</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@PropertySource({ \"classpath:persistence.properties\" })\r\n@EnableAuthorizationServer\r\npublic class OAuth2AuthorizationServerConfig\r\n  extends AuthorizationServerConfigurerAdapter {\r\n\r\n    // config\r\n}\r\n```","```\r\n@Override\r\npublic void configure(final ClientDetailsServiceConfigurer clients) throws Exception {\r\n    clients.jdbc(dataSource())\r\n\r\n    // ...\t\t\r\n}\r\n```","```\r\n@Bean\r\npublic DataSource dataSource() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n\r\n    dataSource.setDriverClassName(env.getProperty(\"jdbc.driverClassName\"));\r\n    dataSource.setUrl(env.getProperty(\"jdbc.url\"));\r\n    dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n    dataSource.setPassword(env.getProperty(\"jdbc.pass\"));\r\n    return dataSource;\r\n}\r\n```","```\r\ncreate table oauth_client_details (\r\n    client_id VARCHAR(256) PRIMARY KEY,\r\n    resource_ids VARCHAR(256),\r\n    client_secret VARCHAR(256),\r\n    scope VARCHAR(256),\r\n    authorized_grant_types VARCHAR(256),\r\n    web_server_redirect_uri VARCHAR(256),\r\n    authorities VARCHAR(256),\r\n    access_token_validity INTEGER,\r\n    refresh_token_validity INTEGER,\r\n    additional_information VARCHAR(4096),\r\n    autoapprove VARCHAR(256)\r\n);\r\n```","```\r\nINSERT INTO oauth_client_details\r\n\t(client_id, client_secret, scope, authorized_grant_types,\r\n\tweb_server_redirect_uri, authorities, access_token_validity,\r\n\trefresh_token_validity, additional_information, autoapprove)\r\nVALUES\r\n\t(\"fooClientIdPassword\", \"secret\", \"foo,read,write,\r\n\t\"password,authorization_code,refresh_token\", null, null, 36000, 36000, null, true);\r\n```","```\r\n@Test\r\npublic void givenDBUser_whenRevokeToken_thenAuthorized() {\r\n    String accessToken = obtainAccessToken(\"fooClientIdPassword\", \"john\", \"123\");\r\n\r\n    assertNotNull(accessToken);\r\n}\r\n```","```\r\nprivate String obtainAccessToken(String clientId, String username, String password) {\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    params.put(\"grant_type\", \"password\");\r\n    params.put(\"client_id\", clientId);\r\n    params.put(\"username\", username);\r\n    params.put(\"password\", password);\r\n    Response response = RestAssured.given().auth().preemptive()\r\n      .basic(clientId, \"secret\").and().with().params(params).when()\r\n      .post(\"http://localhost:8081/spring-security-oauth-server/oauth/token\");\r\n    return response.jsonPath().getString(\"access_token\");\r\n}\r\n```"]