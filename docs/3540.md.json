["```\r\n@DBRef\r\nprivate EmailAddress emailAddress; \r\n```","```\r\n@Document\r\npublic class EmailAddress {\r\n    @Id\r\n    private String id;\r\n\r\n    private String value;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class UserCascadeSaveMongoEventListener extends AbstractMongoEventListener<Object> {\r\n    @Autowired\r\n    private MongoOperations mongoOperations;\r\n\r\n    @Override\r\n    public void onBeforeConvert(BeforeConvertEvent<Object> event) { \r\n        Object source = event.getSource(); \r\n        if ((source instanceof User) && (((User) source).getEmailAddress() != null)) { \r\n            mongoOperations.save(((User) source).getEmailAddress());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic UserCascadeSaveMongoEventListener userCascadingMongoEventListener() {\r\n    return new UserCascadeSaveMongoEventListener();\r\n}\r\n```","```\r\n<bean class=\"org.baeldung.event.UserCascadeSaveMongoEventListener\" />\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.FIELD)\r\npublic @interface CascadeSave {\r\n    //\r\n}\r\n```","```\r\npublic class CascadeSaveMongoEventListener extends AbstractMongoEventListener<Object> {\r\n\r\n    @Autowired\r\n    private MongoOperations mongoOperations;\r\n\r\n    @Override\r\n    public void onBeforeConvert(BeforeConvertEvent<Object> event) { \r\n        Object source = event.getSource(); \r\n        ReflectionUtils.doWithFields(source.getClass(), \r\n          new CascadeCallback(source, mongoOperations));\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {\r\n    ReflectionUtils.makeAccessible(field);\r\n\r\n    if (field.isAnnotationPresent(DBRef.class) && \r\n      field.isAnnotationPresent(CascadeSave.class)) {\r\n\r\n        Object fieldValue = field.get(getSource());\r\n        if (fieldValue != null) {\r\n            FieldCallback callback = new FieldCallback();\r\n            ReflectionUtils.doWithFields(fieldValue.getClass(), callback);\r\n\r\n            getMongoOperations().save(fieldValue);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class FieldCallback implements ReflectionUtils.FieldCallback {\r\n    private boolean idFound;\r\n\r\n    public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {\r\n        ReflectionUtils.makeAccessible(field);\r\n\r\n        if (field.isAnnotationPresent(Id.class)) {\r\n            idFound = true;\r\n        }\r\n    }\r\n\r\n    public boolean isIdFound() {\r\n        return idFound;\r\n    }\r\n}\r\n```","```\r\n@DBRef\r\n@CascadeSave\r\nprivate EmailAddress emailAddress;\r\n```","```\r\nUser user = new User();\r\nuser.setName(\"Brendan\");\r\nEmailAddress emailAddress = new EmailAddress();\r\nemailAddress.setValue(\"[[email protected]](/web/20220625230847/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\nuser.setEmailAddress(emailAddress);\r\nmongoTemplate.insert(user); \r\n```","```\r\n{\r\n    \"_id\" : ObjectId(\"55cee9cc0badb9271768c8b9\"),\r\n    \"name\" : \"Brendan\",\r\n    \"age\" : null,\r\n    \"email\" : {\r\n        \"value\" : \"[[email protected]](/web/20220625230847/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n    }\r\n}\r\n```"]