["```\r\npublic class FooController{\r\n\r\n    //...\r\n    @ExceptionHandler({ CustomException1.class, CustomException2.class })\r\n    public void handleException() {\r\n        //\r\n    }\r\n}\r\n```","```\r\n@ResponseStatus(value = HttpStatus.NOT_FOUND)\r\npublic class MyResourceNotFoundException extends RuntimeException {\r\n    public MyResourceNotFoundException() {\r\n        super();\r\n    }\r\n    public MyResourceNotFoundException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n    public MyResourceNotFoundException(String message) {\r\n        super(message);\r\n    }\r\n    public MyResourceNotFoundException(Throwable cause) {\r\n        super(cause);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class RestResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver {\r\n\r\n    @Override\r\n    protected ModelAndView doResolveException(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response, \r\n      Object handler, \r\n      Exception ex) {\r\n        try {\r\n            if (ex instanceof IllegalArgumentException) {\r\n                return handleIllegalArgument(\r\n                  (IllegalArgumentException) ex, response, handler);\r\n            }\r\n            ...\r\n        } catch (Exception handlerException) {\r\n            logger.warn(\"Handling of [\" + ex.getClass().getName() + \"] \r\n              resulted in Exception\", handlerException);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private ModelAndView \r\n      handleIllegalArgument(IllegalArgumentException ex, HttpServletResponse response) \r\n      throws IOException {\r\n        response.sendError(HttpServletResponse.SC_CONFLICT);\r\n        String accept = request.getHeader(HttpHeaders.ACCEPT);\r\n        ...\r\n        return new ModelAndView();\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class RestResponseEntityExceptionHandler \r\n  extends ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler(value \r\n      = { IllegalArgumentException.class, IllegalStateException.class })\r\n    protected ResponseEntity<Object> handleConflict(\r\n      RuntimeException ex, WebRequest request) {\r\n        String bodyOfResponse = \"This should be application specific\";\r\n        return handleExceptionInternal(ex, bodyOfResponse, \r\n          new HttpHeaders(), HttpStatus.CONFLICT, request);\r\n    }\r\n}\r\n```","```\r\njava.lang.IllegalStateException: No suitable resolver for argument [0] [type=...]\r\nHandlerMethod details: ...\r\n```","```\r\n@GetMapping(value = \"/{id}\")\r\npublic Foo findById(@PathVariable(\"id\") Long id, HttpServletResponse response) {\r\n    try {\r\n        Foo resourceById = RestPreconditions.checkFound(service.findOne(id));\r\n\r\n        eventPublisher.publishEvent(new SingleResourceRetrievedEvent(this, response));\r\n        return resourceById;\r\n     }\r\n    catch (MyResourceNotFoundException exc) {\r\n         throw new ResponseStatusException(\r\n           HttpStatus.NOT_FOUND, \"Foo Not Found\", exc);\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class RestResponseEntityExceptionHandler \r\n  extends ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler({ AccessDeniedException.class })\r\n    public ResponseEntity<Object> handleAccessDeniedException(\r\n      Exception ex, WebRequest request) {\r\n        return new ResponseEntity<Object>(\r\n          \"Access denied message here\", new HttpHeaders(), HttpStatus.FORBIDDEN);\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\n{\r\n    \"timestamp\": \"2019-01-17T16:12:45.977+0000\",\r\n    \"status\": 500,\r\n    \"error\": \"Internal Server Error\",\r\n    \"message\": \"Error processing the request!\",\r\n    \"path\": \"/my-endpoint-with-exceptions\"\r\n}\r\n```","```\r\n@Component\r\npublic class MyCustomErrorAttributes extends DefaultErrorAttributes {\r\n\r\n    @Override\r\n    public Map<String, Object> getErrorAttributes(\r\n      WebRequest webRequest, ErrorAttributeOptions options) {\r\n        Map<String, Object> errorAttributes = \r\n          super.getErrorAttributes(webRequest, options);\r\n        errorAttributes.put(\"locale\", webRequest.getLocale()\r\n            .toString());\r\n        errorAttributes.remove(\"error\");\r\n\r\n        //...\r\n\r\n        return errorAttributes;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class MyErrorController extends BasicErrorController {\r\n\r\n    public MyErrorController(\r\n      ErrorAttributes errorAttributes, ServerProperties serverProperties) {\r\n        super(errorAttributes, serverProperties.getError());\r\n    }\r\n\r\n    @RequestMapping(produces = MediaType.APPLICATION_XML_VALUE)\r\n    public ResponseEntity<Map<String, Object>> xmlError(HttpServletRequest request) {\r\n\r\n    // ...\r\n\r\n    }\r\n}\r\n```"]