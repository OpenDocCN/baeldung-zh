["```\r\n<dependency>\r\n    <groupId>org.lucee</groupId>\r\n    <artifactId>jets3t</artifactId>\r\n    <version>0.9.4.0006L</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.httpcomponents</groupId>\r\n    <artifactId>httpclient</artifactId>\r\n    <version>4.5.5</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.lucee</groupId>\r\n    <artifactId>commons-codec</artifactId>\r\n    <version>1.10.L001</version>\r\n</dependency> \r\n```","```\r\nAWSCredentials awsCredentials \r\n  = new AWSCredentials(\"access key\", \"secret key\");\r\ns3Service = new RestS3Service(awsCredentials); \r\n```","```\r\nS3Bucket[] myBuckets = s3Service.listAllBuckets(); \r\n```","```\r\nS3Bucket bucket = s3Service.createBucket(\"mybucket\"); \r\n```","```\r\norg.jets3t.service.S3ServiceException: Service Error Message.\r\n  -- ResponseCode: 409, ResponseStatus: Conflict, XML Error Message:\r\n  <!--?xml version=\"1.0\" encoding=\"UTF-8\"?-->\r\n  <code>BucketAlreadyExists</code> The requested bucket name is not available. \r\n  The bucket namespace is shared by all users of the system.\r\n  Please select a different name and try again.\r\n  mybucket 07BE34FF3113ECCF \r\nat org.jets3t.service.S3Service.createBucket(S3Service.java:1586)\r\n```","```\r\nS3Bucket bucket = s3Service.createBucket(\"myuniquename\");\r\nlog.info(bucket); \r\n```","```\r\n[INFO] JetS3tClient - S3Bucket\r\n[name=myuniquename,location=US,creationDate=Sat Mar 31 16:47:47 EDT 2018,owner=null] \r\n```","```\r\ns3Service.deleteBucket(\"myuniquename\"); \r\n```","```\r\nS3Bucket euBucket \r\n  = s3Service.createBucket(\"eu-bucket\", S3Bucket.LOCATION_EUROPE);\r\nS3Bucket usWestBucket = s3Service\r\n  .createBucket(\"us-west-bucket\", S3Bucket.LOCATION_US_WEST);\r\nS3Bucket asiaPacificBucket = s3Service\r\n  .createBucket(\"asia-pacific-bucket\", S3Bucket.LOCATION_ASIA_PACIFIC); \r\n```","```\r\nS3Object stringObject = new S3Object(\"object name\", \"string object\");\r\ns3Service.putObject(\"myuniquebucket\", stringObject); \r\n```","```\r\nStorageObject objectDetailsOnly \r\n  = s3Service.getObjectDetails(\"myuniquebucket\", \"my string\");\r\nlog.info(\"Content type: \" + objectDetailsOnly.getContentType() + \" length: \" \r\n  + objectDetailsOnly.getContentLength()); \r\n```","```\r\n[INFO] JetS3tClient - Content type: text/plain; charset=utf-8 length: 9 \r\n```","```\r\nS3Object downloadObject = \r\n  s3Service.getObject(\"myuniquebucket, \"string object\");\r\nString downloadString = new BufferedReader(new InputStreamReader(\r\n  object.getDataInputStream())).lines().collect(Collectors.joining(\"\\n\"));\r\n\r\nassertTrue(\"string object\".equals(downloadString));\r\n```","```\r\nFile file = new File(\"src/test/resources/test.jpg\");\r\nS3Object fileObject = new S3Object(file);\r\ns3Service.putObject(\"myuniquebucket\", fileObject); \r\n```","```\r\n[INFO] JetS3tClient - File object name is test.jpg\r\n```","```\r\n[INFO] JetS3tClient - Content type:application/octet-stream\r\n```","```\r\nString getFileMD5(String filename) throws IOException {\r\n    try (FileInputStream fis = new FileInputStream(new File(filename))) {\r\n        return DigestUtils.md5Hex(fis);\r\n    }\r\n}\r\n\r\nS3Object fileObject = s3Service.getObject(\"myuniquebucket\", \"test.jpg\"); \r\nFile newFile = new File(\"/tmp/newtest.jpg\"); \r\nFiles.copy(fileObject.getDataInputStream(), newFile.toPath(), \r\n  StandardCopyOption.REPLACE_EXISTING);\r\nString origMD5 = getFileMD5(\"src/test/resources/test.jpg\");\r\nString newMD5 = getFileMD5(\"src/test/resources/newtest.jpg\");\r\nassertTrue(origMD5.equals(newMD5));\r\n```","```\r\nArrayList<Integer> numbers = new ArrayList<>();\r\n// adding elements to the ArrayList\r\n\r\nByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\nObjectOutputStream objectOutputStream = new ObjectOutputStream(bytes);\r\nobjectOutputStream.writeObject(numbers);\r\n\r\nByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes.toByteArray());\r\n\r\nS3Object streamObject = new S3Object(\"stream\");\r\nstreamObject.setDataInputStream(byteArrayInputStream);\r\nstreamObject.setContentLength(byteArrayInputStream.available());\r\nstreamObject.setContentType(\"binary/octet-stream\");\r\n\r\ns3Service.putObject(BucketName, streamObject); \r\n```","```\r\nS3Object newStreamObject = s3Service.getObject(BucketName, \"stream\");\r\n\r\nObjectInputStream objectInputStream = new ObjectInputStream(\r\n  newStreamObject.getDataInputStream());\r\nArrayList<Integer> newNumbers = (ArrayList<Integer>) objectInputStream\r\n  .readObject();\r\n\r\nassertEquals(2, (int) newNumbers.get(0));\r\nassertEquals(3, (int) newNumbers.get(1));\r\nassertEquals(5, (int) newNumbers.get(2));\r\nassertEquals(7, (int) newNumbers.get(3)); \r\n```","```\r\nS3Object targetObject = new S3Object(\"testcopy.jpg\");\r\ns3Service.copyObject(\r\n  BucketName, \"test.jpg\", \r\n  \"myuniquebucket\", targetObject, false);\r\nS3Object newFileObject = s3Service.getObject(\r\n  \"myuniquebucket\", \"testcopy.jpg\");\r\n\r\nFile newFile = new File(\"src/test/resources/testcopy.jpg\");\r\nFiles.copy(\r\n  newFileObject.getDataInputStream(), \r\n  newFile.toPath(), \r\n  REPLACE_EXISTING);\r\nString origMD5 = getFileMD5(\"src/test/resources/test.jpg\");\r\nString newMD5 = getFileMD5(\"src/test/resources/testcopy.jpg\");\r\n\r\nassertTrue(origMD5.equals(newMD5)); \r\n```","```\r\ntargetObject = new S3Object(\"testcopy.jpg\");\r\ntargetObject.addMetadata(\"My_Custom_Field\", \"Hello, World!\");\r\ns3Service.copyObject(\r\n  \"myuniquebucket\", \"test.jpg\", \r\n  \"myuniquebucket\", targetObject, true); \r\n```","```\r\ns3Service.moveObject(\r\n  \"myuniquebucket\",\r\n  \"test.jpg\",\r\n  \"myotheruniquebucket\",\r\n  new S3Object(\"spidey.jpg\"),\r\n  false); \r\n```","```\r\ns3Service.renameObject(\r\n  \"myuniquebucket\", \"test.jpg\", new S3Object(\"spidey.jpg\")); \r\n```"]