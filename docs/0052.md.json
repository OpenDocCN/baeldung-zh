["```\r\n@Component\r\npublic class CircularDependencyA {\r\n\r\n    private CircularDependencyB circB;\r\n\r\n    @Autowired\r\n    public CircularDependencyA(CircularDependencyB circB) {\r\n        this.circB = circB;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyB {\r\n\r\n    private CircularDependencyA circA;\r\n\r\n    @Autowired\r\n    public CircularDependencyB(CircularDependencyA circA) {\r\n        this.circA = circA;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(basePackages = { \"com.baeldung.circulardependency\" })\r\npublic class TestConfig {\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { TestConfig.class })\r\npublic class CircularDependencyIntegrationTest {\r\n\r\n    @Test\r\n    public void givenCircularDependency_whenConstructorInjection_thenItFails() {\r\n        // Empty test; we just want the context to load\r\n    }\r\n}\r\n```","```\r\nBeanCurrentlyInCreationException: Error creating bean with name 'circularDependencyA':\r\nRequested bean is currently in creation: Is there an unresolvable circular reference?\r\n```","```\r\n@Component\r\npublic class CircularDependencyA {\r\n\r\n    private CircularDependencyB circB;\r\n\r\n    @Autowired\r\n    public CircularDependencyA(@Lazy CircularDependencyB circB) {\r\n        this.circB = circB;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyA {\r\n\r\n    private CircularDependencyB circB;\r\n\r\n    @Autowired\r\n    public void setCircB(CircularDependencyB circB) {\r\n        this.circB = circB;\r\n    }\r\n\r\n    public CircularDependencyB getCircB() {\r\n        return circB;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyB {\r\n\r\n    private CircularDependencyA circA;\r\n\r\n    private String message = \"Hi!\";\r\n\r\n    @Autowired\r\n    public void setCircA(CircularDependencyA circA) {\r\n        this.circA = circA;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { TestConfig.class })\r\npublic class CircularDependencyIntegrationTest {\r\n\r\n    @Autowired\r\n    ApplicationContext context;\r\n\r\n    @Bean\r\n    public CircularDependencyA getCircularDependencyA() {\r\n        return new CircularDependencyA();\r\n    }\r\n\r\n    @Bean\r\n    public CircularDependencyB getCircularDependencyB() {\r\n        return new CircularDependencyB();\r\n    }\r\n\r\n    @Test\r\n    public void givenCircularDependency_whenSetterInjection_thenItWorks() {\r\n        CircularDependencyA circA = context.getBean(CircularDependencyA.class);\r\n\r\n        Assert.assertEquals(\"Hi!\", circA.getCircB().getMessage());\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyA {\r\n\r\n    @Autowired\r\n    private CircularDependencyB circB;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        circB.setCircA(this);\r\n    }\r\n\r\n    public CircularDependencyB getCircB() {\r\n        return circB;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyB {\r\n\r\n    private CircularDependencyA circA;\r\n\r\n    private String message = \"Hi!\";\r\n\r\n    public void setCircA(CircularDependencyA circA) {\r\n        this.circA = circA;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyA implements ApplicationContextAware, InitializingBean {\r\n\r\n    private CircularDependencyB circB;\r\n\r\n    private ApplicationContext context;\r\n\r\n    public CircularDependencyB getCircB() {\r\n        return circB;\r\n    }\r\n\r\n    @Override\r\n    public void afterPropertiesSet() throws Exception {\r\n        circB = context.getBean(CircularDependencyB.class);\r\n    }\r\n\r\n    @Override\r\n    public void setApplicationContext(final ApplicationContext ctx) throws BeansException {\r\n        context = ctx;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CircularDependencyB {\r\n\r\n    private CircularDependencyA circA;\r\n\r\n    private String message = \"Hi!\";\r\n\r\n    @Autowired\r\n    public void setCircA(CircularDependencyA circA) {\r\n        this.circA = circA;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n}\r\n```"]