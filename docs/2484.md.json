["```\r\n<dependency>\r\n    <groupId>com.couchbase.client</groupId>\r\n    <artifactId>java-client</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\" && doc.name) {    \r\n        emit(doc.name, null);\r\n    }\r\n}\r\n```","```\r\nViewQuery query = ViewQuery.from(\"design-document-name\", \"view-name\");\r\n```","```\r\nViewQuery query \r\n  = ViewQuery.from(\"design-doc-name\", \"view-name\").development();\r\n```","```\r\nViewResult result = bucket.query(query);\r\n```","```\r\nfor(ViewRow row : result.allRows()) {\r\n    JsonDocument doc = row.document();\r\n    String id = doc.id();\r\n    String json = doc.content().toString();\r\n}\r\n```","```\r\n{ \r\n    \"type\": \"StudentGrade\",\r\n    \"name\": \"John Doe\",\r\n    \"course\": \"History\",\r\n    \"hours\": 3,\r\n    \"grade\": 95\r\n}\r\n```","```\r\nBucket bucket = CouchbaseCluster.create(\"127.0.0.1\")\r\n  .openBucket(\"baeldung-tutorial\");\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\" && doc.course && doc.grade) {\r\n        emit(doc.course, null);\r\n    }\r\n}\r\n```","```\r\nViewQuery query \r\n  = ViewQuery.from(\"studentGrades\", \"findByCourse\").key(\"History\");\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByCourse\")\r\n  .keys(JsonArray.from(\"Math\", \"Science\"));\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\" && doc.grade) {\r\n        emit(doc.grade, null);\r\n    }\r\n}\r\n```","```\r\nViewQuery query = ViewQuery.from(\"studentGrades\", \"findByGrade\")\r\n  .startKey(80)\r\n  .endKey(89)\r\n  .inclusiveEnd(true);\r\n```","```\r\nViewQuery query = ViewQuery.from(\"studentGrades\", \"findByGrade\")\r\n  .startKey(80)\r\n  .endKey(90)\r\n  .inclusiveEnd(false);\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByGrade\")\r\n  .startKey(90);\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByGrade\")\r\n  .endKey(60)\r\n  .inclusiveEnd(false);\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\" && doc.course && doc.grade) {\r\n        emit([doc.course, doc.grade], null);\r\n    }\r\n}\r\n```","```\r\n[\"History\", 80]\r\n[\"History\", 90]\r\n[\"History\", 94]\r\n[\"Math\", 82]\r\n[\"Math\", 88]\r\n[\"Math\", 97]\r\n[\"Science\", 78]\r\n[\"Science\", 86]\r\n[\"Science\", 92]\r\n```","```\r\n[\"Math\", 80]\r\n```","```\r\n[\"Math\", 89]\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByCourseAndGrade\")\r\n  .startKey(JsonArray.from(\"Math\", 80))\r\n  .endKey(JsonArray.from(\"Math\", 89))\r\n  .inclusiveEnd(true);\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByCourseAndGrade\")\r\n  .startKey(JsonArray.from(\"Math\", 90))\r\n  .endKey(JsonArray.from(\"Math\", 100));\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByCourseAndGrade\")\r\n  .startKey(JsonArray.from(\"Math\", 0))\r\n  .endKey(JsonArray.from(\"Math\", 60))\r\n  .inclusiveEnd(false);\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"findByCourseAndGrade\")\r\n  .descending()\r\n  .startKey(JsonArray.from(\"Math\", 100))\r\n  .endKey(JsonArray.from(\"Math\", 0))\r\n  .inclusiveEnd(true)\r\n  .limit(5);\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\" && doc.course && doc.name) {\r\n        emit([doc.course, doc.name], null);\r\n    }\r\n}\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"countStudentsByCourse\")\r\n  .reduce()\r\n  .groupLevel(1);\r\n```","```\r\nViewResult result = bucket.query(query);\r\nMap<String, Long> numStudentsByCourse = new HashMap<>();\r\nfor(ViewRow row : result.allRows()) {\r\n    JsonArray keyArray = (JsonArray) row.key();\r\n    String course = keyArray.getString(0);\r\n    long count = Long.valueOf(row.value().toString());\r\n    numStudentsByCourse.put(course, count);\r\n}\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\"\r\n         && doc.name\r\n         && doc.course\r\n         && doc.hours) {\r\n        emit([doc.name, doc.course], doc.hours);\r\n    }\r\n}\r\n```","```\r\nViewQuery query = ViewQuery\r\n  .from(\"studentGrades\", \"sumCreditsByStudent\")\r\n  .reduce()\r\n  .groupLevel(1);\r\n```","```\r\nViewResult result = bucket.query(query);\r\nMap<String, Long> hoursByStudent = new HashMap<>();\r\nfor(ViewRow row : result.allRows()) {\r\n    String name = (String) row.key();\r\n    long sum = Long.valueOf(row.value().toString());\r\n    hoursByStudent.put(name, sum);\r\n}\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc.type == \"StudentGrade\"\r\n         && doc.name\r\n         && doc.hours\r\n         && doc.grade) {\r\n        if(doc.grade >= 90) {\r\n            emit(doc.name, 4*doc.hours);\r\n        }\r\n        else if(doc.grade >= 80) {\r\n            emit(doc.name, 3*doc.hours);\r\n        }\r\n        else if(doc.grade >= 70) {\r\n            emit(doc.name, 2*doc.hours);\r\n        }\r\n        else if(doc.grade >= 60) {\r\n            emit(doc.name, doc.hours);\r\n        }\r\n        else {\r\n            emit(doc.name, 0);\r\n        }\r\n    }\r\n}\r\n```","```\r\nViewQuery query = ViewQuery.from(\r\n  \"studentGrades\",\r\n  \"sumGradePointsByStudent\")\r\n  .reduce()\r\n  .groupLevel(1);\r\nViewResult result = bucket.query(query);\r\n\r\nMap<String, Long> gradePointsByStudent = new HashMap<>();\r\nfor(ViewRow row : result.allRows()) {\r\n    String course = (String) row.key();\r\n    long sum = Long.valueOf(row.value().toString());\r\n    gradePointsByStudent.put(course, sum);\r\n}\r\n```","```\r\nMap<String, Float> result = new HashMap<>();\r\nfor(Entry<String, Long> creditHoursEntry : hoursByStudent.entrySet()) {\r\n    String name = creditHoursEntry.getKey();\r\n    long totalHours = creditHoursEntry.getValue();\r\n    long totalGradePoints = gradePointsByStudent.get(name);\r\n    result.put(name, ((float) totalGradePoints / totalHours));\r\n}\r\n```"]