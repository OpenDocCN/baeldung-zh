["```\r\npublic static <T> Optional<T> or(Optional<T> optional, Optional<T> fallback) {\r\n    return optional.isPresent() ? optional : fallback;\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenValue_thenOptionalGeneralMethod() {\r\n    String name = \"Filan Fisteku\";\r\n    String missingOptional = \"Name not provided\";\r\n    Optional<String> optionalString = Optional.ofNullable(name);\r\n    Optional<String> fallbackOptionalString = Optional.ofNullable(missingOptional);\r\n\r\n    assertEquals(\r\n      optionalString, \r\n      Optionals.or(optionalString, fallbackOptionalString));\r\n}\r\n\r\n@Test\r\npublic void givenEmptyOptional_whenValue_thenOptionalGeneralMethod() {\r\n    Optional<String> optionalString = Optional.empty();\r\n    Optional<String> fallbackOptionalString = Optional.ofNullable(\"Name not provided\");\r\n\r\n    assertEquals(\r\n      fallbackOptionalString, \r\n      Optionals.or(optionalString, fallbackOptionalString));\r\n}\r\n```","```\r\npublic class ItemsProvider {\r\n    public Optional<String> getNail(){\r\n        System.out.println(\"Returning a nail\");\r\n        return Optional.of(\"nail\");\r\n    }\r\n\r\n    public Optional<String> getHammer(){\r\n        System.out.println(\"Returning a hammer\");\r\n        return Optional.of(\"hammer\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoOptionalMethods_whenFirstNonEmpty_thenSecondNotEvaluated() {\r\n    ItemsProvider itemsProvider = new ItemsProvider();\r\n\r\n    Optional<String> item = itemsProvider.getNail()\r\n            .map(Optional::of)\r\n            .orElseGet(itemsProvider::getHammer);\r\n\r\n    assertEquals(Optional.of(\"nail\"), item);\r\n}\r\n```","```\r\npublic static Optional<String> getName(Optional<String> name) {\r\n    return name.or(() -> getCustomMessage());\r\n}\r\n```","```\r\nprivate static Optional<String> getCustomMessage() {\r\n    return Optional.of(\"Name not provided\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenOptional_whenValue_thenOptional() {\r\n    String name = \"Filan Fisteku\";\r\n    Optional<String> optionalString = Optional.ofNullable(name);\r\n    assertEquals(optionalString, Optionals.getName(optionalString));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency> \r\n```","```\r\npublic static com.google.common.base.Optional<String> \r\n  getOptionalGuavaName(com.google.common.base.Optional<String> name) {\r\n    return name.or(getCustomMessageGuava());\r\n}\r\n```","```\r\nprivate static com.google.common.base.Optional<String> getCustomMessageGuava() {\r\n    return com.google.common.base.Optional.of(\"Name not provided\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenGuavaOptional_whenInvoke_thenOptional() {\r\n    String name = \"Filan Fisteku\";\r\n    Optional<String> stringOptional = Optional.of(name);\r\n\r\n    assertEquals(name, Optionals.getOptionalGuavaName(stringOptional));\r\n}\r\n```","```\r\n@Test\r\npublic void givenGuavaOptional_whenNull_thenDefaultText() {\r\n    assertEquals(\r\n      com.google.common.base.Optional.of(\"Name not provided\"), \r\n      Optionals.getOptionalGuavaName(com.google.common.base.Optional.fromNullable(null)));\r\n}\r\n```"]