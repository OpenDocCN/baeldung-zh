["```\r\npublic void doSomething() {\r\n    String result = doSomethingElse();\r\n    if (result.equalsIgnoreCase(\"Success\")) \r\n        // success\r\n    }\r\n}\r\n\r\nprivate String doSomethingElse() {\r\n    return null;\r\n}\r\n```","```\r\npublic static void main(String[] args) {\r\n    findMax(null);\r\n}\r\n\r\nprivate static void findMax(int[] arr) {\r\n    int max = arr[0];\r\n    //check other elements in loop\r\n}\r\n```","```\r\npublic void doSomething() {\r\n    String result = doSomethingElse();\r\n    if (result != null && result.equalsIgnoreCase(\"Success\")) {\r\n        // success\r\n    }\r\n    else\r\n        // failure\r\n}\r\n\r\nprivate String doSomethingElse() {\r\n    return null;\r\n}\r\n```","```\r\npublic void print(Object param) {\r\n    System.out.println(\"Printing \" + param);\r\n}\r\n\r\npublic Object process() throws Exception {\r\n    Object result = doSomething();\r\n    if (result == null) {\r\n        throw new Exception(\"Processing fail. Got a null response\");\r\n    } else {\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic void accept(@NonNull Object param) {\r\n    System.out.println(param.toString());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.jetbrains</groupId>\r\n    <artifactId>annotations</artifactId>\r\n    <version>16.0.2</version>\r\n</dependency>\r\n```","```\r\npublic void accept(Object param){\r\n    assert param != null;\r\n    doSomething(param);\r\n}\r\n```","```\r\npublic void goodAccept(String one, String two, String three) {\r\n    if (one == null || two == null || three == null) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n\r\n    process(one);\r\n    process(two);\r\n    process(three);\r\n}\r\n\r\npublic void badAccept(String one, String two, String three) {\r\n    if (one == null) {\r\n        throw new IllegalArgumentException();\r\n    } else {\r\n        process(one);\r\n    }\r\n\r\n    if (two == null) {\r\n        throw new IllegalArgumentException();\r\n    } else {\r\n        process(two);\r\n    }\r\n\r\n    if (three == null) {\r\n        throw new IllegalArgumentException();\r\n    } else {\r\n        process(three);\r\n    }\r\n}\r\n```","```\r\npublic static int primitiveSum(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\npublic static Integer wrapperSum(Integer a, Integer b) {\r\n    return a + b;\r\n}\r\n```","```\r\nint sum = primitiveSum(null, 2);\r\n```","```\r\nassertThrows(NullPointerException.class, () -> wrapperSum(null, 2));\r\n```","```\r\npublic List<String> names() {\r\n    if (userExists()) {\r\n        return Stream.of(readName()).collect(Collectors.toList());\r\n    } else {\r\n        return Collections.emptyList();\r\n    }\r\n}\r\n```","```\r\npublic void accept(Object param) {\r\n    Objects.requireNonNull(param);\r\n    // doSomething()\r\n}\r\n```","```\r\nassertThrows(NullPointerException.class, () -> accept(null));\r\n```","```\r\npublic Optional<Object> process(boolean processed) {\r\n    String response = doSomething(processed);\r\n\r\n    if (response == null) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    return Optional.of(response);\r\n}\r\n\r\nprivate String doSomething(boolean processed) {\r\n    if (processed) {\r\n        return \"passed\";\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nassertThrows(Exception.class, () -> process(false).orElseThrow(() -> new Exception()));\r\n```","```\r\npublic Optional<Object> process(boolean processed) {\r\n    String response = doSomething(processed);\r\n    return Optional.ofNullable(response);\r\n}\r\n```","```\r\npublic String findFirst() {\r\n    return getList().stream()\r\n      .findFirst()\r\n      .orElse(DEFAULT_VALUE);\r\n}\r\n```","```\r\npublic Optional<String> findOptionalFirst() {\r\n    return getList().stream()\r\n      .findFirst();\r\n}\r\n```","```\r\npublic Optional<String> optionalListFirst() {\r\n   return getOptionalList()\r\n      .flatMap(list -> list.stream().findFirst());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.20</version>\r\n</dependency>\r\n```","```\r\npublic void accept(@NonNull Object param){\r\n    System.out.println(param);\r\n}\r\n```","```\r\npublic void accept(@NonNull Object param) {\r\n    if (param == null) {\r\n        throw new NullPointerException(\"param\");\r\n    } else {\r\n        System.out.println(param);\r\n    }\r\n}\r\n```","```\r\npublic void accept(String param){\r\n    if (null != param && !param.isEmpty())\r\n        System.out.println(param);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic void accept(String param) {\r\n    if (StringUtils.isNotEmpty(param))\r\n        System.out.println(param);\r\n}\r\n```"]