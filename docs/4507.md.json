["```\r\n@Test\r\npublic void whenContainsObjS_thenWeGetOneRecord() {\r\n    List<Author> authors = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.contains(\"Paul\"))\r\n      .select(context);\r\n\r\n    assertEquals(authors.size(), 1);\r\n}\r\n```","```\r\n@Test\r\nvoid whenLikeObjS_thenWeGetTwoAuthors() {\r\n    List<Author> authors = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.likeIgnoreCase(\"Paul%\"))\r\n      .select(context);\r\n\r\n    assertEquals(authors.size(), 2);\r\n}\r\n```","```\r\n@Test\r\nvoid whenEndsWithObjS_thenWeGetOrderedAuthors() {\r\n    List<Author> authors = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.endsWith(\"Sarra\"))\r\n      .select(context);\r\n    Author firstAuthor = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 1);\r\n    assertEquals(firstAuthor.getName(), \"Vicky Sarra\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenInObjS_thenWeGetAuthors() {\r\n    List names = Arrays.asList(\r\n      \"Paul Xavier\", \"pAuL Smith\", \"Vicky Sarra\");\r\n\r\n    List<Author> authors = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.in(names))\r\n      .select(context);\r\n\r\n    assertEquals(authors.size(), 3);\r\n}\r\n```","```\r\n@Test\r\nvoid whenNinObjS_thenWeGetAuthors() {\r\n    List names = Arrays.asList(\r\n      \"Paul Xavier\", \"pAuL Smith\");\r\n    List<Author> authors = ObjectSelect.query(Author.class)\r\n      .where(Author.NAME.nin(names))\r\n      .select(context);\r\n    Author author = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 1);\r\n    assertEquals(author.getName(), \"Vicky Sarra\");\r\n}\r\n```","```\r\nExpression qualifier = ExpressionFactory\r\n  .containsIgnoreCaseExp(Author.NAME.getName(), \"Paul\");\r\n```","```\r\nAuthor.NAME.containsIgnoreCase(\"Paul\");\r\n```","```\r\n@Test\r\nvoid whenLikeSltQry_thenWeGetOneAuthor() {\r\n    Expression qualifier \r\n      = ExpressionFactory.likeExp(Author.NAME.getName(), \"Paul%\");\r\n    SelectQuery query \r\n      = new SelectQuery(Author.class, qualifier);\r\n\r\n    List<Author> authorsTwo = context.performQuery(query);\r\n\r\n    assertEquals(authorsTwo.size(), 1);\r\n}\r\n```","```\r\n@Test\r\nvoid whenCtnsIgnorCaseSltQry_thenWeGetTwoAuthors() {\r\n    Expression qualifier = ExpressionFactory\r\n      .containsIgnoreCaseExp(Author.NAME.getName(), \"Paul\");\r\n    SelectQuery query \r\n      = new SelectQuery(Author.class, qualifier);\r\n\r\n    List<Author> authors = context.performQuery(query);\r\n\r\n    assertEquals(authors.size(), 2);\r\n}\r\n```","```\r\n@Test\r\nvoid whenCtnsIgnorCaseEndsWSltQry_thenWeGetTwoAuthors() {\r\n    Expression qualifier = ExpressionFactory\r\n      .containsIgnoreCaseExp(Author.NAME.getName(), \"Paul\")\r\n      .andExp(ExpressionFactory\r\n        .endsWithExp(Author.NAME.getName(), \"h\"));\r\n    SelectQuery query = new SelectQuery(\r\n      Author.class, qualifier);\r\n    List<Author> authors = context.performQuery(query);\r\n\r\n    Author author = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 1);\r\n    assertEquals(author.getName(), \"pAuL Smith\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenAscOrdering_thenWeGetOrderedAuthors() {\r\n    SelectQuery query = new SelectQuery(Author.class);\r\n    query.addOrdering(Author.NAME.asc());\r\n\r\n    List<Author> authors = query.select(context);\r\n    Author firstAuthor = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 3);\r\n    assertEquals(firstAuthor.getName(), \"Paul Xavier\");\r\n}\r\n```","```\r\nquery.addOrdering(Author.NAME.getName(), SortOrder.ASCENDING);\r\n```","```\r\n@Test\r\nvoid whenDescOrderingSltQry_thenWeGetOrderedAuthors() {\r\n    SelectQuery query = new SelectQuery(Author.class);\r\n    query.addOrdering(Author.NAME.desc());\r\n\r\n    List<Author> authors = query.select(context);\r\n    Author firstAuthor = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 3);\r\n    assertEquals(firstAuthor.getName(), \"pAuL Smith\");\r\n}\r\n```","```\r\nquery.addOrdering(Author.NAME.getName(), SortOrder.DESCENDING);\r\n```","```\r\n@After\r\nvoid deleteAllAuthors() {\r\n    SQLTemplate deleteAuthors = new SQLTemplate(\r\n      Author.class, \"delete from author\");\r\n    context.performGenericQuery(deleteAuthors);\r\n}\r\n```","```\r\n@Test\r\nvoid givenAuthors_whenFindAllSQLTmplt_thenWeGetThreeAuthors() {\r\n    SQLTemplate select = new SQLTemplate(\r\n      Author.class, \"select * from Author\");\r\n    List<Author> authors = context.performQuery(select);\r\n\r\n    assertEquals(authors.size(), 3);\r\n}\r\n```","```\r\n@Test\r\nvoid givenAuthors_whenFindByNameSQLTmplt_thenWeGetOneAuthor() {\r\n    SQLTemplate select = new SQLTemplate(\r\n      Author.class, \"select * from Author where name = 'Vicky Sarra'\");\r\n    List<Author> authors = context.performQuery(select);\r\n    Author author = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 1);\r\n    assertEquals(author.getName(), \"Vicky Sarra\");\r\n}\r\n```","```\r\n@Test\r\nvoid givenAuthors_whenFindAllEJBQL_thenWeGetThreeAuthors() {\r\n    EJBQLQuery query = new EJBQLQuery(\"select a FROM Author a\");\r\n    List<Author> authors = context.performQuery(query);\r\n\r\n    assertEquals(authors.size(), 3);\r\n}\r\n```","```\r\n@Test\r\nvoid givenAuthors_whenFindByNameEJBQL_thenWeGetOneAuthor() {\r\n    EJBQLQuery query = new EJBQLQuery(\r\n      \"select a FROM Author a WHERE a.name = 'Vicky Sarra'\");\r\n    List<Author> authors = context.performQuery(query);\r\n    Author author = authors.get(0);\r\n\r\n    assertEquals(authors.size(), 1);\r\n    assertEquals(author.getName(), \"Vicky Sarra\");\r\n}\r\n```","```\r\n@Test\r\nvoid whenUpdadingByNameEJBQL_thenWeGetTheUpdatedAuthor() {\r\n    EJBQLQuery query = new EJBQLQuery(\r\n      \"UPDATE Author AS a SET a.name \"\r\n      + \"= 'Vicky Edison' WHERE a.name = 'Vicky Sarra'\");\r\n    QueryResponse queryResponse = context.performGenericQuery(query);\r\n\r\n    EJBQLQuery queryUpdatedAuthor = new EJBQLQuery(\r\n      \"select a FROM Author a WHERE a.name = 'Vicky Edison'\");\r\n    List<Author> authors = context.performQuery(queryUpdatedAuthor);\r\n    Author author = authors.get(0);\r\n\r\n    assertNotNull(author);\r\n}\r\n```","```\r\n@Test\r\nvoid whenInsertingSQLExec_thenWeGetNewAuthor() {\r\n    int inserted = SQLExec\r\n      .query(\"INSERT INTO Author (name) VALUES ('Baeldung')\")\r\n      .update(context);\r\n\r\n    assertEquals(inserted, 1);\r\n}\r\n```","```\r\n@Test\r\nvoid whenUpdatingSQLExec_thenItsUpdated() {\r\n    int updated = SQLExec.query(\r\n      \"UPDATE Author SET name = 'Baeldung' \"\r\n      + \"WHERE name = 'Vicky Sarra'\")\r\n      .update(context);\r\n\r\n    assertEquals(updated, 1);\r\n}\r\n```"]