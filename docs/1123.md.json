["```\r\npublic abstract class Tree {\r\n\r\n    // ...\r\n    public abstract Tree copy();\r\n\r\n}\r\n```","```\r\npublic class PlasticTree extends Tree {\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public Tree copy() {\r\n        PlasticTree plasticTreeClone = new PlasticTree(this.getMass(), this.getHeight());\r\n        plasticTreeClone.setPosition(this.getPosition());\r\n        return plasticTreeClone;\r\n    }\r\n\r\n}\r\n```","```\r\npublic class PineTree extends Tree {\r\n    // ...\r\n\r\n    @Override\r\n    public Tree copy() {\r\n        PineTree pineTreeClone = new PineTree(this.getMass(), this.getHeight());\r\n        pineTreeClone.setPosition(this.getPosition());\r\n        return pineTreeClone;\r\n    }\r\n}\r\n```","```\r\npublic class TreePrototypesUnitTest {\r\n\r\n    @Test\r\n    public void givenAPlasticTreePrototypeWhenClonedThenCreateA_Clone() {\r\n        // ...\r\n\r\n        PlasticTree plasticTree = new PlasticTree(mass, height);\r\n        plasticTree.setPosition(position);\r\n        PlasticTree anotherPlasticTree = (PlasticTree) plasticTree.copy();\r\n        anotherPlasticTree.setPosition(otherPosition);\r\n\r\n        assertEquals(position, plasticTree.getPosition());\r\n        assertEquals(otherPosition, anotherPlasticTree.getPosition());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenA_ListOfTreesWhenClonedThenCreateListOfClones() {\r\n\r\n    // create instances of PlasticTree and PineTree\r\n\r\n    List<Tree> trees = Arrays.asList(plasticTree, pineTree);\r\n    List<Tree> treeClones = trees.stream().map(Tree::copy).collect(toList());\r\n\r\n    // ...\r\n\r\n    assertEquals(height, plasticTreeClone.getHeight());\r\n    assertEquals(position, plasticTreeClone.getPosition());\r\n}\r\n```"]