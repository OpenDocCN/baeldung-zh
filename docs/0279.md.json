["```\r\nprivate static Map<String, Employee> map1 = new HashMap<>();\r\nprivate static Map<String, Employee> map2 = new HashMap<>();\r\n```","```\r\npublic class Employee {\r\n\r\n    private Long id;\r\n    private String name;\r\n\r\n    // constructor, getters, setters\r\n}\r\n```","```\r\nEmployee employee1 = new Employee(1L, \"Henry\");\r\nmap1.put(employee1.getName(), employee1);\r\nEmployee employee2 = new Employee(22L, \"Annie\");\r\nmap1.put(employee2.getName(), employee2);\r\nEmployee employee3 = new Employee(8L, \"John\");\r\nmap1.put(employee3.getName(), employee3);\r\n\r\nEmployee employee4 = new Employee(2L, \"George\");\r\nmap2.put(employee4.getName(), employee4);\r\nEmployee employee5 = new Employee(3L, \"Henry\");\r\nmap2.put(employee5.getName(), employee5);\r\n```","```\r\nMap<String, Employee> map3 = new HashMap<>(map1);\r\n```","```\r\nmap3.merge(key, value, (v1, v2) -> new Employee(v1.getId(),v2.getName())\r\n```","```\r\nmap2.forEach(\r\n  (key, value) -> map3.merge(key, value, (v1, v2) -> new Employee(v1.getId(),v2.getName())));\r\n```","```\r\nJohn=Employee{id=8, name='John'}\r\nAnnie=Employee{id=22, name='Annie'}\r\nGeorge=Employee{id=2, name='George'}\r\nHenry=Employee{id=1, name='Henry'}\r\n```","```\r\n(v1, v2) -> new Employee(v1.getId(), v2.getName())\r\n```","```\r\nStream combined = Stream.concat(map1.entrySet().stream(), map2.entrySet().stream());\r\n```","```\r\nMap<String, Employee> result = combined.collect(\r\n  Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\r\n```","```\r\n(value1, value2) -> new Employee(value2.getId(), value1.getName())\r\n```","```\r\nMap<String, Employee> result = Stream.concat(map1.entrySet().stream(), map2.entrySet().stream())\r\n  .collect(Collectors.toMap(\r\n    Map.Entry::getKey, \r\n    Map.Entry::getValue,\r\n    (value1, value2) -> new Employee(value2.getId(), value1.getName())));\r\n```","```\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nAnnie=Employee{id=22, name='Annie'}\r\nHenry=Employee{id=3, name='Henry'}\r\n```","```\r\nMap<String, Employee> map3 = Stream.of(map1, map2)\r\n  .flatMap(map -> map.entrySet().stream())\r\n  .collect(Collectors.toMap(\r\n    Map.Entry::getKey,\r\n    Map.Entry::getValue,\r\n    (v1, v2) -> new Employee(v1.getId(), v2.getName())));\r\n```","```\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nAnnie=Employee{id=22, name='Annie'}\r\nHenry=Employee{id=1, name='Henry'}\r\n```","```\r\nMap<String, Employee> map3 = map2.entrySet()\r\n  .stream()\r\n  .collect(Collectors.toMap(\r\n    Map.Entry::getKey,\r\n    Map.Entry::getValue,\r\n    (v1, v2) -> new Employee(v1.getId(), v2.getName()),\r\n  () -> new HashMap<>(map1)));\r\n```","```\r\n{John=Employee{id=8, name='John'}, \r\nAnnie=Employee{id=22, name='Annie'}, \r\nGeorge=Employee{id=2, name='George'}, \r\nHenry=Employee{id=1, name='Henry'}}\r\n```","```\r\nMap<String, Employee> map3 = EntryStream.of(map1)\r\n  .append(EntryStream.of(map2))\r\n  .toMap((e1, e2) -> e1);\r\n```","```\r\n{George=Employee{id=2, name='George'}, \r\nJohn=Employee{id=8, name='John'}, \r\nAnnie=Employee{id=22, name='Annie'}, \r\nHenry=Employee{id=1, name='Henry'}}\r\n```"]