["```\r\npublic class Vertex {\r\n\r\n    private String label;\r\n    private boolean beingVisited;\r\n    private boolean visited;\r\n    private List<Vertex> adjacencyList;\r\n\r\n    public Vertex(String label) {\r\n        this.label = label;\r\n        this.adjacencyList = new ArrayList<>();\r\n    }\r\n\r\n    public void addNeighbor(Vertex adjacent) {\r\n        this.adjacencyList.add(adjacent);\r\n    }\r\n    //getters and setters\r\n}\r\n```","```\r\npublic class Graph {\r\n\r\n    private List<Vertex> vertices;\r\n\r\n    public Graph() {\r\n        this.vertices = new ArrayList<>();\r\n    }\r\n\r\n    public void addVertex(Vertex vertex) {\r\n        this.vertices.add(vertex);\r\n    }\r\n\r\n    public void addEdge(Vertex from, Vertex to) {\r\n        from.addNeighbor(to);\r\n    }\r\n\r\n   // ...\r\n}\r\n```","```\r\npublic boolean hasCycle(Vertex sourceVertex) {\r\n    sourceVertex.setBeingVisited(true);\r\n\r\n    for (Vertex neighbor : sourceVertex.getAdjacencyList()) {\r\n        if (neighbor.isBeingVisited()) {\r\n            // backward edge exists\r\n            return true;\r\n        } else if (!neighbor.isVisited() && hasCycle(neighbor)) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    sourceVertex.setBeingVisited(false);\r\n    sourceVertex.setVisited(true);\r\n    return false;\r\n}\r\n```","```\r\npublic boolean hasCycle() {\r\n    for (Vertex vertex : vertices) {\r\n        if (!vertex.isVisited() && hasCycle(vertex)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\n@Test\r\npublic void givenGraph_whenCycleExists_thenReturnTrue() {\r\n\r\n    Vertex vertexA = new Vertex(\"A\");\r\n    Vertex vertexB = new Vertex(\"B\");\r\n    Vertex vertexC = new Vertex(\"C\")\r\n    Vertex vertexD = new Vertex(\"D\");\r\n\r\n    Graph graph = new Graph();\r\n    graph.addVertex(vertexA);\r\n    graph.addVertex(vertexB);\r\n    graph.addVertex(vertexC);\r\n    graph.addVertex(vertexD);\r\n\r\n    graph.addEdge(vertexA, vertexB);\r\n    graph.addEdge(vertexB, vertexC);\r\n    graph.addEdge(vertexC, vertexA);\r\n    graph.addEdge(vertexD, vertexC);\r\n\r\n    assertTrue(graph.hasCycle());\r\n\r\n}\r\n```"]