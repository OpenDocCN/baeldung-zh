["```\r\nprivate static final String EXPECTED_STRING = \"aaaaaaa\";\r\nprivate static final int N = 7;\r\n```","```\r\nString newString = \"a\".repeat(N);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\nString newString = \"-->\".repeat(5);\r\nassertEquals(\"-->-->-->-->-->\", newString);\r\n```","```\r\nStringBuilder builder = new StringBuilder(N);\r\nfor (int i = 0; i < N; i++) {\r\n    builder.append(\"a\");\r\n}\r\nString newString = builder.toString();\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\nchar[] charArray = new char[N];\r\nfor (int i = 0; i < N; i++) {\r\n    charArray[i] = 'a';\r\n}\r\nString newString = new String(charArray);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\nchar charToAppend = 'a';\r\nchar[] charArray = new char[N];\r\nArrays.fill(charArray, charToAppend);\r\nString newString = new String(charArray);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nchar charToAppend = 'a';\r\nString newString = StringUtils.repeat(charToAppend, N);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nString charToAppend = \"a\";\r\nString newString = Strings.repeat(charToAppend, N);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\npublic static <T> List<T> nCopies(int n, T o);\r\n```","```\r\nString charToAppend = \"a\";\r\nString newString = String.join(\"\", Collections.nCopies(N, charToAppend));\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\nString charToAppend = \"a\";\r\nString newString = Joiner.on(\"\").join(Collections.nCopies(N, charToAppend));\r\nassertEquals(EXPECTED_STRING, newString);\r\n```","```\r\nString charToAppend = \"a\";\r\nString newString = generate(() -> charToAppend)\r\n  .limit(length)\r\n  .collect(Collectors.joining());\r\nassertEquals(exampleString, newString);\r\n```","```\r\nString charToAppend = \"a\";\r\nString newString = RandomStringUtils.random(N, charToAppend);\r\nassertEquals(EXPECTED_STRING, newString);\r\n```"]