["```\r\nservice CommodityPriceProvider {\r\n    rpc getBestCommodityPrice(Commodity) returns (CommodityQuote) {}\r\n}\r\n\r\nmessage Commodity {\r\n    string access_token = 1;\r\n    string commodity_name = 2;\r\n}\r\n\r\nmessage CommodityQuote {\r\n    string commodity_name = 1;\r\n    string producer_name = 2;\r\n    double price = 3;\r\n}\r\n\r\nmessage ErrorResponse {\r\n    string commodity_name = 1;\r\n    string access_token = 2;\r\n    string expected_token = 3;\r\n    string expected_value = 4;\r\n}\r\n```","```\r\npublic void getBestCommodityPrice(Commodity request, StreamObserver<CommodityQuote> responseObserver) {\r\n\r\n    if (commodityLookupBasePrice.get(request.getCommodityName()) == null) {\r\n\r\n        Metadata.Key<ErrorResponse> errorResponseKey = ProtoUtils.keyForProto(ErrorResponse.getDefaultInstance());\r\n        ErrorResponse errorResponse = ErrorResponse.newBuilder()\r\n          .setCommodityName(request.getCommodityName())\r\n          .setAccessToken(request.getAccessToken())\r\n          .setExpectedValue(\"Only Commodity1, Commodity2 are supported\")\r\n          .build();\r\n        Metadata metadata = new Metadata();\r\n        metadata.put(errorResponseKey, errorResponse);\r\n        responseObserver.onError(io.grpc.Status.INVALID_ARGUMENT.withDescription(\"The commodity is not supported\")\r\n          .asRuntimeException(metadata));\r\n    } \r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingInvalidCommodityName_thenReturnExceptionIoRpcStatus() throws Exception {\r\n\r\n    Commodity request = Commodity.newBuilder()\r\n      .setAccessToken(\"123validToken\")\r\n      .setCommodityName(\"Commodity5\")\r\n      .build();\r\n\r\n    StatusRuntimeException thrown = Assertions.assertThrows(StatusRuntimeException.class, () -> blockingStub.getBestCommodityPrice(request));\r\n\r\n    assertEquals(\"INVALID_ARGUMENT\", thrown.getStatus().getCode().toString());\r\n    assertEquals(\"INVALID_ARGUMENT: The commodity is not supported\", thrown.getMessage());\r\n    Metadata metadata = Status.trailersFromThrowable(thrown);\r\n    ErrorResponse errorResponse = metadata.get(ProtoUtils.keyForProto(ErrorResponse.getDefaultInstance()));\r\n    assertEquals(\"Commodity5\",errorResponse.getCommodityName());\r\n    assertEquals(\"123validToken\", errorResponse.getAccessToken());\r\n    assertEquals(\"Only Commodity1, Commodity2 are supported\", errorResponse.getExpectedValue());\r\n}\r\n```","```\r\npublic void getBestCommodityPrice(Commodity request, StreamObserver<CommodityQuote> responseObserver) {\r\n    // ...\r\n    if (request.getAccessToken().equals(\"123validToken\") == false) {\r\n\r\n        com.google.rpc.Status status = com.google.rpc.Status.newBuilder()\r\n          .setCode(com.google.rpc.Code.NOT_FOUND.getNumber())\r\n          .setMessage(\"The access token not found\")\r\n          .addDetails(Any.pack(ErrorInfo.newBuilder()\r\n            .setReason(\"Invalid Token\")\r\n            .setDomain(\"com.baeldung.grpc.errorhandling\")\r\n            .putMetadata(\"insertToken\", \"123validToken\")\r\n            .build()))\r\n          .build();\r\n        responseObserver.onError(StatusProto.toStatusRuntimeException(status));\r\n    }\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingInvalidRequestToken_thenReturnExceptionGoogleRPCStatus() throws Exception {\r\n\r\n    Commodity request = Commodity.newBuilder()\r\n      .setAccessToken(\"invalidToken\")\r\n      .setCommodityName(\"Commodity1\")\r\n      .build();\r\n\r\n    StatusRuntimeException thrown = Assertions.assertThrows(StatusRuntimeException.class,\r\n      () -> blockingStub.getBestCommodityPrice(request));\r\n    com.google.rpc.Status status = StatusProto.fromThrowable(thrown);\r\n    assertNotNull(status);\r\n    assertEquals(\"NOT_FOUND\", Code.forNumber(status.getCode()).toString());\r\n    assertEquals(\"The access token not found\", status.getMessage());\r\n    for (Any any : status.getDetailsList()) {\r\n        if (any.is(ErrorInfo.class)) {\r\n            ErrorInfo errorInfo = any.unpack(ErrorInfo.class);\r\n            assertEquals(\"Invalid Token\", errorInfo.getReason());\r\n            assertEquals(\"com.baeldung.grpc.errorhandling\", errorInfo.getDomain());\r\n            assertEquals(\"123validToken\", errorInfo.getMetadataMap().get(\"insertToken\"));\r\n        }\r\n    }\r\n}\r\n```","```\r\nservice CommodityPriceProvider {\r\n\r\n    rpc getBestCommodityPrice(Commodity) returns (CommodityQuote) {}\r\n\r\n    rpc bidirectionalListOfPrices(stream Commodity) returns (stream StreamingCommodityQuote) {}\r\n}\r\n\r\nmessage Commodity {\r\n    string access_token = 1;\r\n    string commodity_name = 2;\r\n}\r\n\r\nmessage StreamingCommodityQuote{\r\n    oneof message{\r\n        CommodityQuote comodity_quote = 1;\r\n        google.rpc.Status status = 2;\r\n   }   \r\n}\r\n```","```\r\npublic StreamObserver<Commodity> bidirectionalListOfPrices(StreamObserver<StreamingCommodityQuote> responseObserver) {\r\n\r\n    return new StreamObserver<Commodity>() {\r\n        @Override\r\n        public void onNext(Commodity request) {\r\n\r\n            if (request.getAccessToken().equals(\"123validToken\") == false) {\r\n\r\n                com.google.rpc.Status status = com.google.rpc.Status.newBuilder()\r\n                  .setCode(Code.NOT_FOUND.getNumber())\r\n                  .setMessage(\"The access token not found\")\r\n                  .addDetails(Any.pack(ErrorInfo.newBuilder()\r\n                    .setReason(\"Invalid Token\")\r\n                    .setDomain(\"com.baeldung.grpc.errorhandling\")\r\n                    .putMetadata(\"insertToken\", \"123validToken\")\r\n                    .build()))\r\n                  .build();\r\n                StreamingCommodityQuote streamingCommodityQuote = StreamingCommodityQuote.newBuilder()\r\n                  .setStatus(status)\r\n                  .build();\r\n                responseObserver.onNext(streamingCommodityQuote);\r\n            }\r\n            // ...\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void onNext(StreamingCommodityQuote streamingCommodityQuote) {\r\n\r\n    switch (streamingCommodityQuote.getMessageCase()) {\r\n        case COMODITY_QUOTE:\r\n            CommodityQuote commodityQuote = streamingCommodityQuote.getComodityQuote();\r\n            logger.info(\"RESPONSE producer:\" + commodityQuote.getCommodityName() + \" price:\" + commodityQuote.getPrice());\r\n            break;\r\n        case STATUS:\r\n            com.google.rpc.Status status = streamingCommodityQuote.getStatus();\r\n            logger.info(\"Status code:\" + Code.forNumber(status.getCode()));\r\n            logger.info(\"Status message:\" + status.getMessage());\r\n            for (Any any : status.getDetailsList()) {\r\n                if (any.is(ErrorInfo.class)) {\r\n                    ErrorInfo errorInfo;\r\n                    try {\r\n                        errorInfo = any.unpack(ErrorInfo.class);\r\n                        logger.info(\"Reason:\" + errorInfo.getReason());\r\n                        logger.info(\"Domain:\" + errorInfo.getDomain());\r\n                        logger.info(\"Insert Token:\" + errorInfo.getMetadataMap().get(\"insertToken\"));\r\n                    } catch (InvalidProtocolBufferException e) {\r\n                        logger.error(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        // ...\r\n    }\r\n}\r\n```"]