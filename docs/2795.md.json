["```\r\npublic class WorkerWithCountDownLatch extends Thread {\r\n    private CountDownLatch latch;\r\n\r\n    public WorkerWithCountDownLatch(String name, CountDownLatch latch) {\r\n        this.latch = latch;\r\n        setName(name);\r\n    }\r\n\r\n    @Override public void run() {\r\n        try {\r\n            System.out.printf(\"[ %s ] created, blocked by the latch...\\n\", getName());\r\n            latch.await();\r\n            System.out.printf(\"[ %s ] starts at: %s\\n\", getName(), Instant.now());\r\n            // do actual work here...\r\n        } catch (InterruptedException e) {\r\n            // handle exception\r\n        }\r\n    } \r\n```","```\r\nprivate static void usingCountDownLatch() throws InterruptedException {\r\n    System.out.println(\"===============================================\");\r\n    System.out.println(\"        >>> Using CountDownLatch <<<<\");\r\n    System.out.println(\"===============================================\");\r\n\r\n    CountDownLatch latch = new CountDownLatch(1);\r\n\r\n    WorkerWithCountDownLatch worker1 = new WorkerWithCountDownLatch(\"Worker with latch 1\", latch);\r\n    WorkerWithCountDownLatch worker2 = new WorkerWithCountDownLatch(\"Worker with latch 2\", latch);\r\n\r\n    worker1.start();\r\n    worker2.start();\r\n\r\n    Thread.sleep(10);//simulation of some actual work\r\n\r\n    System.out.println(\"-----------------------------------------------\");\r\n    System.out.println(\" Now release the latch:\");\r\n    System.out.println(\"-----------------------------------------------\");\r\n    latch.countDown();\r\n} \r\n```","```\r\n===============================================\r\n        >>> Using CountDownLatch <<<<\r\n===============================================\r\n[ Worker with latch 1 ] created, blocked by the latch\r\n[ Worker with latch 2 ] created, blocked by the latch\r\n-----------------------------------------------\r\n Now release the latch:\r\n-----------------------------------------------\r\n[ Worker with latch 2 ] starts at: 2021-06-27T16:00:52.268532035Z\r\n[ Worker with latch 1 ] starts at: 2021-06-27T16:00:52.268533787Z \r\n```","```\r\npublic class WorkerWithCyclicBarrier extends Thread {\r\n    private CyclicBarrier barrier;\r\n\r\n    public WorkerWithCyclicBarrier(String name, CyclicBarrier barrier) {\r\n        this.barrier = barrier;\r\n        this.setName(name);\r\n    }\r\n\r\n    @Override public void run() {\r\n        try {\r\n            System.out.printf(\"[ %s ] created, blocked by the barrier\\n\", getName());\r\n            barrier.await();\r\n            System.out.printf(\"[ %s ] starts at: %s\\n\", getName(), Instant.now());\r\n            // do actual work here...\r\n        } catch (InterruptedException | BrokenBarrierException e) {\r\n            // handle exception\r\n        }\r\n    }\r\n} \r\n```","```\r\nprivate static void usingCyclicBarrier() throws BrokenBarrierException, InterruptedException {\r\n    System.out.println(\"\\n===============================================\");\r\n    System.out.println(\"        >>> Using CyclicBarrier <<<<\");\r\n    System.out.println(\"===============================================\");\r\n\r\n    CyclicBarrier barrier = new CyclicBarrier(3);\r\n\r\n    WorkerWithCyclicBarrier worker1 = new WorkerWithCyclicBarrier(\"Worker with barrier 1\", barrier);\r\n    WorkerWithCyclicBarrier worker2 = new WorkerWithCyclicBarrier(\"Worker with barrier 2\", barrier);\r\n\r\n    worker1.start();\r\n    worker2.start();\r\n\r\n    Thread.sleep(10);//simulation of some actual work\r\n\r\n    System.out.println(\"-----------------------------------------------\");\r\n    System.out.println(\" Now open the barrier:\");\r\n    System.out.println(\"-----------------------------------------------\");\r\n    barrier.await();\r\n} \r\n```","```\r\n===============================================\r\n        >>> Using CyclicBarrier <<<<\r\n===============================================\r\n[ Worker with barrier 1 ] created, blocked by the barrier\r\n[ Worker with barrier 2 ] created, blocked by the barrier\r\n-----------------------------------------------\r\n Now open the barrier:\r\n-----------------------------------------------\r\n[ Worker with barrier 1 ] starts at: 2021-06-27T16:00:52.311346392Z\r\n[ Worker with barrier 2 ] starts at: 2021-06-27T16:00:52.311348874Z\r\n```","```\r\npublic class WorkerWithPhaser extends Thread {\r\n    private Phaser phaser;\r\n\r\n    public WorkerWithPhaser(String name, Phaser phaser) {\r\n        this.phaser = phaser;\r\n        phaser.register();\r\n        setName(name);\r\n    }\r\n\r\n    @Override public void run() {\r\n        try {\r\n            System.out.printf(\"[ %s ] created, blocked by the phaser\\n\", getName());\r\n            phaser.arriveAndAwaitAdvance();\r\n            System.out.printf(\"[ %s ] starts at: %s\\n\", getName(), Instant.now());\r\n            // do actual work here...\r\n        } catch (IllegalStateException e) {\r\n            // handle exception\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate static void usingPhaser() throws InterruptedException {\r\n    System.out.println(\"\\n===============================================\");\r\n    System.out.println(\"        >>> Using Phaser <<<\");\r\n    System.out.println(\"===============================================\");\r\n\r\n    Phaser phaser = new Phaser();\r\n    phaser.register();\r\n\r\n    WorkerWithPhaser worker1 = new WorkerWithPhaser(\"Worker with phaser 1\", phaser);\r\n    WorkerWithPhaser worker2 = new WorkerWithPhaser(\"Worker with phaser 2\", phaser);\r\n\r\n    worker1.start();\r\n    worker2.start();\r\n\r\n    Thread.sleep(10);//simulation of some actual work\r\n\r\n    System.out.println(\"-----------------------------------------------\");\r\n    System.out.println(\" Now open the phaser barrier:\");\r\n    System.out.println(\"-----------------------------------------------\");\r\n    phaser.arriveAndAwaitAdvance();\r\n}\r\n```","```\r\n===============================================\r\n        >>> Using Phaser <<<\r\n===============================================\r\n[ Worker with phaser 1 ] created, blocked by the phaser\r\n[ Worker with phaser 2 ] created, blocked by the phaser\r\n-----------------------------------------------\r\n Now open the phaser barrier:\r\n-----------------------------------------------\r\n[ Worker with phaser 2 ] starts at: 2021-07-18T17:39:27.063523636Z\r\n[ Worker with phaser 1 ] starts at: 2021-07-18T17:39:27.063523827Z \r\n```"]