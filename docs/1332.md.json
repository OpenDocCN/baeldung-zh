["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain securityWebFilterChain(\r\n  ServerHttpSecurity http) {\r\n    return http.authorizeExchange()\r\n      .pathMatchers(\"/actuator/**\").permitAll()\r\n      .anyExchange().authenticated()\r\n      .and().build();\r\n}\r\n```","```\r\n{\r\n  \"_links\": {\r\n    \"self\": {\r\n      \"href\": \"http://localhost:8080/actuator\",\r\n      \"templated\": false\r\n    },\r\n    \"features-arg0\": {\r\n      \"href\": \"http://localhost:8080/actuator/features/{arg0}\",\r\n      \"templated\": true\r\n    },\r\n    \"features\": {\r\n      \"href\": \"http://localhost:8080/actuator/features\",\r\n      \"templated\": false\r\n    },\r\n    \"beans\": {\r\n      \"href\": \"http://localhost:8080/actuator/beans\",\r\n      \"templated\": false\r\n    },\r\n    \"caches-cache\": {\r\n      \"href\": \"http://localhost:8080/actuator/caches/{cache}\",\r\n      \"templated\": true\r\n    },\r\n    // truncated\r\n}\r\n```","```\r\n@Component\r\npublic class DownstreamServiceHealthIndicator implements ReactiveHealthIndicator {\r\n\r\n    @Override\r\n    public Mono<Health> health() {\r\n        return checkDownstreamServiceHealth().onErrorResume(\r\n          ex -> Mono.just(new Health.Builder().down(ex).build())\r\n        );\r\n    }\r\n\r\n    private Mono<Health> checkDownstreamServiceHealth() {\r\n        // we could use WebClient to check health reactively\r\n        return Mono.just(new Health.Builder().up().build());\r\n    }\r\n}\r\n```","```\r\nmanagement.endpoint.health.group.custom.include=diskSpace,ping\r\n```","```\r\n{\"status\":\"UP\",\"groups\":[\"custom\"]}\r\n```","```\r\n{\"status\":\"UP\"}\r\n```","```\r\nmanagement.endpoint.health.group.custom.show-components=always\r\nmanagement.endpoint.health.group.custom.show-details=always\r\n```","```\r\n{\r\n  \"status\": \"UP\",\r\n  \"components\": {\r\n    \"diskSpace\": {\r\n      \"status\": \"UP\",\r\n      \"details\": {\r\n        \"total\": 499963170816,\r\n        \"free\": 91300069376,\r\n        \"threshold\": 10485760\r\n      }\r\n    },\r\n    \"ping\": {\r\n      \"status\": \"UP\"\r\n    }\r\n  }\r\n}\r\n```","```\r\nmanagement.endpoint.health.group.custom.show-components=when_authorized\r\nmanagement.endpoint.health.group.custom.show-details=when_authorized\r\n```","```\r\nmanagement.endpoint.health.group.custom.status.http-mapping.up=207\r\n```","```\r\n{\r\n  \"names\": [\r\n    \"jvm.gc.pause\",\r\n    \"jvm.buffer.memory.used\",\r\n    \"jvm.memory.used\",\r\n    \"jvm.buffer.count\",\r\n    // ...\r\n  ]\r\n}\r\n```","```\r\n{\r\n  \"name\": \"jvm.gc.pause\",\r\n  \"measurements\": [\r\n    {\r\n      \"statistic\": \"Count\",\r\n      \"value\": 3.0\r\n    },\r\n    {\r\n      \"statistic\": \"TotalTime\",\r\n      \"value\": 7.9E7\r\n    },\r\n    {\r\n      \"statistic\": \"Max\",\r\n      \"value\": 7.9E7\r\n    }\r\n  ],\r\n  \"availableTags\": [\r\n    {\r\n      \"tag\": \"cause\",\r\n      \"values\": [\r\n        \"Metadata GC Threshold\",\r\n        \"Allocation Failure\"\r\n      ]\r\n    },\r\n    {\r\n      \"tag\": \"action\",\r\n      \"values\": [\r\n        \"end of minor GC\",\r\n        \"end of major GC\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>pl.project13.maven</groupId>\r\n    <artifactId>git-commit-id-plugin</artifactId>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-maven-plugin</artifactId>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>build-info</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n@Component\r\n@Endpoint(id = \"features\")\r\npublic class FeaturesEndpoint {\r\n\r\n    private Map<String, Feature> features = new ConcurrentHashMap<>();\r\n\r\n    @ReadOperation\r\n    public Map<String, Feature> features() {\r\n        return features;\r\n    }\r\n\r\n    @ReadOperation\r\n    public Feature feature(@Selector String name) {\r\n        return features.get(name);\r\n    }\r\n\r\n    @WriteOperation\r\n    public void configureFeature(@Selector String name, Feature feature) {\r\n        features.put(name, feature);\r\n    }\r\n\r\n    @DeleteOperation\r\n    public void deleteFeature(@Selector String name) {\r\n        features.remove(name);\r\n    }\r\n\r\n    public static class Feature {\r\n        private Boolean enabled;\r\n\r\n        // [...] getters and setters \r\n    }\r\n\r\n}\r\n```","```\r\n[...].WebFluxEndpointHandlerMapping: Mapped \"{[/actuator/features/{name}],\r\n  methods=[GET],\r\n  produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}\"\r\n[...].WebFluxEndpointHandlerMapping : Mapped \"{[/actuator/features],\r\n  methods=[GET],\r\n  produces=[application/vnd.spring-boot.actuator.v2+json || application/json]}\"\r\n[...].WebFluxEndpointHandlerMapping : Mapped \"{[/actuator/features/{name}],\r\n  methods=[POST],\r\n  consumes=[application/vnd.spring-boot.actuator.v2+json || application/json]}\"\r\n[...].WebFluxEndpointHandlerMapping : Mapped \"{[/actuator/features/{name}],\r\n  methods=[DELETE]}\"[...]\r\n```","```\r\n@Component\r\n@EndpointWebExtension(endpoint = InfoEndpoint.class)\r\npublic class InfoWebEndpointExtension {\r\n\r\n    private InfoEndpoint delegate;\r\n\r\n    // standard constructor\r\n\r\n    @ReadOperation\r\n    public WebEndpointResponse<Map> info() {\r\n        Map<String, Object> info = this.delegate.info();\r\n        Integer status = getStatus(info);\r\n        return new WebEndpointResponse<>(info, status);\r\n    }\r\n\r\n    private Integer getStatus(Map<String, Object> info) {\r\n        // return 5xx if this is a snapshot\r\n        return 200;\r\n    }\r\n}\r\n```","```\r\nmanagement.endpoints.web.exposure.include=*\r\n```","```\r\nmanagement.endpoint.shutdown.enabled=true\r\n```","```\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.endpoints.web.exposure.exclude=loggers\r\n```","```\r\nendpoints.beans.id=springbeans\r\nendpoints.beans.sensitive=false\r\nendpoints.beans.enabled=true\r\n```","```\r\n{\r\n    \"status\" : \"UP\"\r\n} \r\n```","```\r\n@Component(\"myHealthCheck\")\r\npublic class HealthCheck implements HealthIndicator {\r\n\r\n    @Override\r\n    public Health health() {\r\n        int errorCode = check(); // perform some specific health check\r\n        if (errorCode != 0) {\r\n            return Health.down()\r\n              .withDetail(\"Error Code\", errorCode).build();\r\n        }\r\n        return Health.up().build();\r\n    }\r\n\r\n    public int check() {\r\n    \t// Our logic to check health\r\n    \treturn 0;\r\n    }\r\n} \r\n```","```\r\n{\r\n    \"status\" : \"DOWN\",\r\n    \"myHealthCheck\" : {\r\n        \"status\" : \"DOWN\",\r\n        \"Error Code\" : 1\r\n     },\r\n     \"diskSpace\" : {\r\n         \"status\" : \"UP\",\r\n         \"free\" : 209047318528,\r\n         \"threshold\" : 10485760\r\n     }\r\n}\r\n```","```\r\ninfo.app.name=Spring Sample Application\r\ninfo.app.description=This is my first spring boot application\r\ninfo.app.version=1.0.0\r\n```","```\r\n{\r\n    \"app\" : {\r\n        \"version\" : \"1.0.0\",\r\n        \"description\" : \"This is my first spring boot application\",\r\n        \"name\" : \"Spring Sample Application\"\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"mem\" : 193024,\r\n    \"mem.free\" : 87693,\r\n    \"processors\" : 4,\r\n    \"instance.uptime\" : 305027,\r\n    \"uptime\" : 307077,\r\n    \"systemload.average\" : 0.11,\r\n    \"heap.committed\" : 193024,\r\n    \"heap.init\" : 124928,\r\n    \"heap.used\" : 105330,\r\n    \"heap\" : 1764352,\r\n    \"threads.peak\" : 22,\r\n    \"threads.daemon\" : 19,\r\n    \"threads\" : 22,\r\n    \"classes\" : 5819,\r\n    \"classes.loaded\" : 5819,\r\n    \"classes.unloaded\" : 0,\r\n    \"gc.ps_scavenge.count\" : 7,\r\n    \"gc.ps_scavenge.time\" : 54,\r\n    \"gc.ps_marksweep.count\" : 1,\r\n    \"gc.ps_marksweep.time\" : 44,\r\n    \"httpsessions.max\" : -1,\r\n    \"httpsessions.active\" : 0,\r\n    \"counter.status.200.root\" : 1,\r\n    \"gauge.response.root\" : 37.0\r\n} \r\n```","```\r\n@Service\r\npublic class LoginServiceImpl {\r\n\r\n    private final CounterService counterService;\r\n\r\n    public LoginServiceImpl(CounterService counterService) {\r\n        this.counterService = counterService;\r\n    }\r\n\r\n    public boolean login(String userName, char[] password) {\r\n        boolean success;\r\n        if (userName.equals(\"admin\") && \"secret\".toCharArray().equals(password)) {\r\n            counterService.increment(\"counter.login.success\");\r\n            success = true;\r\n        }\r\n        else {\r\n            counterService.increment(\"counter.login.failure\");\r\n            success = false;\r\n        }\r\n        return success;\r\n    }\r\n}\r\n```","```\r\n{\r\n    ...\r\n    \"counter.login.success\" : 105,\r\n    \"counter.login.failure\" : 12,\r\n    ...\r\n} \r\n```","```\r\n@Component\r\npublic class CustomEndpoint implements Endpoint<List<String>> {\r\n\r\n    @Override\r\n    public String getId() {\r\n        return \"customEndpoint\";\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isSensitive() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public List<String> invoke() {\r\n        // Custom logic to build the output\r\n        List<String> messages = new ArrayList<String>();\r\n        messages.add(\"This is message 1\");\r\n        messages.add(\"This is message 2\");\r\n        return messages;\r\n    }\r\n}\r\n```","```\r\n[ \"This is message 1\", \"This is message 2\" ]\r\n```","```\r\n#port used to expose actuator\r\nmanagement.port=8081 \r\n\r\n#CIDR allowed to hit actuator\r\nmanagement.address=127.0.0.1 \r\n\r\n#Whether security should be enabled or disabled altogether\r\nmanagement.security.enabled=false\r\n```","```\r\nsecurity.user.name=admin\r\nsecurity.user.password=secret\r\nmanagement.security.role=SUPERUSER\r\n```"]