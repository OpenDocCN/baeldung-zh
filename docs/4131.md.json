["```\r\npublic boolean matches(String regex) {\r\n    return Pattern.matches(regex, this);\r\n}\r\n```","```\r\npublic static boolean matches(String regex, CharSequence input) {\r\n    Pattern p = compile(regex);\r\n    Matcher m = p.matcher(input);\r\n    return m.matches();\r\n}\r\n```","```\r\n @Benchmark\r\npublic void matcherFromPreCompiledPatternResetMatches(Blackhole bh) {\r\n    for (String value : values) {\r\n        bh.consume(matcherFromPreCompiledPattern.reset(value).matches());\r\n    }\r\n}\r\n\r\n@Benchmark\r\npublic void preCompiledPatternMatcherMatches(Blackhole bh) {\r\n    for (String value : values) {\r\n        bh.consume(preCompiledPattern.matcher(value).matches());\r\n    }\r\n}\r\n\r\n@Benchmark\r\npublic void patternCompileMatcherMatches(Blackhole bh) {\r\n    for (String value : values) {\r\n        bh.consume(Pattern.compile(PATTERN).matcher(value).matches());\r\n    }\r\n}\r\n\r\n@Benchmark\r\npublic void patternMatches(Blackhole bh) {\r\n    for (String value : values) {\r\n        bh.consume(Pattern.matches(PATTERN, value));\r\n    }\r\n}\r\n\r\n@Benchmark\r\npublic void stringMatchs(Blackhole bh) {\r\n    Instant start = Instant.now();\r\n    for (String value : values) {\r\n        bh.consume(value.matches(PATTERN));\r\n    }\r\n} \r\n```","```\r\nBenchmark                                                               Mode  Cnt     Score     Error  Units\r\nPatternPerformanceComparison.matcherFromPreCompiledPatternResetMatches  avgt   20   278.732 ±  22.960  ms/op\r\nPatternPerformanceComparison.preCompiledPatternMatcherMatches           avgt   20   500.393 ±  34.182  ms/op\r\nPatternPerformanceComparison.stringMatchs                               avgt   20  1433.099 ±  73.687  ms/op\r\nPatternPerformanceComparison.patternCompileMatcherMatches               avgt   20  1774.429 ± 174.955  ms/op\r\nPatternPerformanceComparison.patternMatches                             avgt   20  1792.874 ± 130.213  ms/op\r\n```","```\r\n@Test\r\npublic void givenPreCompiledPattern_whenCallSplitAsStream_thenReturnArraySplitByThePattern() {\r\n    Pattern splitPreCompiledPattern = Pattern.compile(\"__\");\r\n    Stream<String> textSplitAsStream = splitPreCompiledPattern.splitAsStream(\"My_Name__is__Fabio_Silva\");\r\n    String[] textSplit = textSplitAsStream.toArray(String[]::new);\r\n\r\n    assertEquals(\"My_Name\", textSplit[0]);\r\n    assertEquals(\"is\", textSplit[1]);\r\n    assertEquals(\"Fabio_Silva\", textSplit[2]);\r\n}\r\n```","```\r\nstring -> matcher(string).find();\r\n```","```\r\n@Test\r\npublic void givenPreCompiledPattern_whenCallAsPredicate_thenReturnPredicateToFindPatternInTheList() {\r\n    List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Mr. Silva\");\r\n    Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\r\n\r\n    Predicate<String> patternsAsPredicate = firstLastNamePreCompiledPattern.asPredicate();\r\n    List<String> validNames = namesToValidate.stream()\r\n        .filter(patternsAsPredicate)\r\n        .collect(Collectors.toList());\r\n\r\n    assertEquals(1,validNames.size());\r\n    assertTrue(validNames.contains(\"Fabio Silva\"));\r\n}\r\n```","```\r\nstring -> matcher(string).matches();\r\n```","```\r\n@Test\r\npublic void givenPreCompiledPattern_whenCallAsMatchPredicate_thenReturnMatchPredicateToMatchesPattern() {\r\n    List<String> namesToValidate = Arrays.asList(\"Fabio Silva\", \"Fabio Luis Silva\");\r\n    Pattern firstLastNamePreCompiledPattern = Pattern.compile(\"[a-zA-Z]{3,} [a-zA-Z]{3,}\");\r\n\r\n    Predicate<String> patternAsMatchPredicate = firstLastNamePreCompiledPattern.asMatchPredicate();\r\n    List<String> validatedNames = namesToValidate.stream()\r\n        .filter(patternAsMatchPredicate)\r\n        .collect(Collectors.toList());\r\n\r\n    assertTrue(validatedNames.contains(\"Fabio Silva\"));\r\n    assertFalse(validatedNames.contains(\"Fabio Luis Silva\"));\r\n}\r\n```"]