["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>. \r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n```","```\r\nURI url = UriComponentsBuilder.fromHttpUrl(EXTERNAL_UPLOAD_URL).build().toUri(); \r\n```","```\r\nMono<HttpStatus> httpStatusMono = webClient.post()\r\n    .uri(url)\r\n    .contentType(MediaType.APPLICATION_PDF)\r\n    .body(BodyInserters.fromResource(resource))\r\n    .exchangeToMono(response -> {\r\n        if (response.statusCode().equals(HttpStatus.OK)) {\r\n            return response.bodyToMono(HttpStatus.class).thenReturn(response.statusCode());\r\n        } else {\r\n            throw new ServiceException(\"Error uploading file\");\r\n        }\r\n     });\r\n```","```\r\nMultipartBodyBuilder builder = new MultipartBodyBuilder();\r\nbuilder.part(\"file\", multipartFile.getResource());\r\n```","```\r\n.body(BodyInserters.fromMultipartData(builder.build()))\r\n```","```\r\nMono<HttpStatus> httpStatusMono = webClient.post()\r\n    .uri(url)\r\n    .contentType(MediaType.MULTIPART_FORM_DATA)\r\n    .body(BodyInserters.fromMultipartData(builder.build()))\r\n    .exchangeToMono(response -> {\r\n        if (response.statusCode().equals(HttpStatus.OK)) {\r\n            return response.bodyToMono(HttpStatus.class).thenReturn(response.statusCode());\r\n        } else {\r\n            throw new ServiceException(\"Error uploading file\");\r\n        }\r\n      });\r\n```"]