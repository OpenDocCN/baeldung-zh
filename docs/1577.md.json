["```\r\npublic class MyList extends AbstractList<String> {\r\n    @Override\r\n    public String get(int index) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public int size() {\r\n        return 1;\r\n    }\r\n}\r\n```","```\r\npublic static <T> T mock(Class<T> classToMock)\r\n```","```\r\nMyList listMock = mock(MyList.class);\r\nwhen(listMock.add(anyString())).thenReturn(false);\r\n```","```\r\nboolean added = listMock.add(randomAlphabetic(6));\r\n```","```\r\nverify(listMock).add(anyString());\r\nassertThat(added).isFalse();\r\n```","```\r\npublic static <T> T mock(Class<T> classToMock, String name)\r\n```","```\r\nMyList listMock = mock(MyList.class, \"myMock\");\r\n```","```\r\nwhen(listMock.add(anyString())).thenReturn(false);\r\nlistMock.add(randomAlphabetic(6));\r\n```","```\r\nassertThatThrownBy(() -> verify(listMock, times(2)).add(anyString()))\r\n    .isInstanceOf(TooFewActualInvocations.class)\r\n```","```\r\nassertThatThrownBy(() -> verify(listMock, times(2)).add(anyString()))\r\n    .isInstanceOf(TooFewActualInvocations.class)\r\n    .hasMessageContaining(\"myMock.add\");\r\n```","```\r\norg.mockito.exceptions.verification.TooLittleActualInvocations:\r\nmyMock.add(<any>);\r\nWanted 2 times:\r\nat com.baeldung.mockito.MockitoMockTest\r\n  .whenUsingMockWithName_thenCorrect(MockitoMockTest.java:...)\r\nbut was 1 time:\r\nat com.baeldung.mockito.MockitoMockTest\r\n  .whenUsingMockWithName_thenCorrect(MockitoMockTest.java:...)\r\n```","```\r\npublic static <T> T mock(Class<T> classToMock, Answer defaultAnswer)\r\n```","```\r\nclass CustomAnswer implements Answer<Boolean> {\r\n    @Override\r\n    public Boolean answer(InvocationOnMock invocation) throws Throwable {\r\n        return false;\r\n    }\r\n}\r\n```","```\r\nMyList listMock = mock(MyList.class, new CustomAnswer());\r\n```","```\r\nboolean added = listMock.add(randomAlphabetic(6));\r\n```","```\r\nverify(listMock).add(anyString());\r\nassertThat(added).isFalse();\r\n```","```\r\nMockSettings customSettings = withSettings().defaultAnswer(new CustomAnswer());\r\n```","```\r\nMyList listMock = mock(MyList.class, customSettings);\r\n```","```\r\nboolean added = listMock.add(randomAlphabetic(6));\r\nverify(listMock).add(anyString());\r\nassertThat(added).isFalse();\r\n```"]