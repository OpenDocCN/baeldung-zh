["```\r\n<dependency>\r\n    <groupId>io.rest-assured</groupId>\r\n    <artifactId>spring-mock-mvc</artifactId>\r\n    <version>3.3.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenGetCourse() {\r\n    given()\r\n      .standaloneSetup(new CourseController())\r\n      //...\r\n}\r\n```","```\r\n@Before\r\npublic void initialiseRestAssuredMockMvcStandalone() {\r\n    RestAssuredMockMvc.standaloneSetup(new CourseController());\r\n}\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext webApplicationContext;\r\n\r\n@Test\r\npublic void whenGetCourse() {\r\n    given()\r\n      .webAppContextSetup(webApplicationContext)\r\n      //...\r\n}\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext webApplicationContext;\r\n\r\n@Before\r\npublic void initialiseRestAssuredMockMvcWebApplicationContext() {\r\n    RestAssuredMockMvc.webAppContextSetup(webApplicationContext);\r\n}\r\n```","```\r\n@SpringBootApplication\r\nclass Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(path = \"/courses\")\r\npublic class CourseController {\r\n\r\n    private final CourseService courseService;\r\n\r\n    public CourseController(CourseService courseService) {\r\n        this.courseService = courseService;\r\n    }\r\n\r\n    @GetMapping(produces = APPLICATION_JSON_UTF8_VALUE)\r\n    public Collection<Course> getCourses() {\r\n        return courseService.getCourses();\r\n    }\r\n\r\n    @GetMapping(path = \"/{code}\", produces = APPLICATION_JSON_UTF8_VALUE)\r\n    public Course getCourse(@PathVariable String code) {\r\n        return courseService.getCourse(code);\r\n    }\r\n}\r\n```","```\r\nclass Course {\r\n\r\n    private String code;\r\n\r\n    // usual contructors, getters and setters\r\n}\r\n```","```\r\n@Service\r\nclass CourseService {\r\n\r\n    private static final Map<String, Course> COURSE_MAP = new ConcurrentHashMap<>();\r\n\r\n    static {\r\n        Course wizardry = new Course(\"Wizardry\");\r\n        COURSE_MAP.put(wizardry.getCode(), wizardry);\r\n    }\r\n\r\n    Collection<Course> getCourses() {\r\n        return COURSE_MAP.values();\r\n    }\r\n\r\n    Course getCourse(String code) {\r\n        return Optional.ofNullable(COURSE_MAP.get(code)).orElseThrow(() -> \r\n          new CourseNotFoundException(code));\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice(assignableTypes = CourseController.class)\r\npublic class CourseControllerExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    @ResponseStatus(HttpStatus.NOT_FOUND)\r\n    @ExceptionHandler(CourseNotFoundException.class)\r\n    public void handleCourseNotFoundException(CourseNotFoundException cnfe) {\r\n        //...\r\n    }\r\n}\r\n```","```\r\nclass CourseNotFoundException extends RuntimeException {\r\n\r\n    CourseNotFoundException(String code) {\r\n        super(code);\r\n    }\r\n}\r\n```","```\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class CourseControllerUnitTest {\r\n\r\n    @Mock\r\n    private CourseService courseService;\r\n    @InjectMocks\r\n    private CourseController courseController;\r\n    @InjectMocks\r\n    private CourseControllerExceptionHandler courseControllerExceptionHandler;\r\n\r\n    @Before\r\n    public void initialiseRestAssuredMockMvcStandalone() {\r\n        RestAssuredMockMvc.standaloneSetup(courseController, courseControllerExceptionHandler);\r\n    }\r\n```","```\r\n@Test\r\npublic void givenNoExistingCoursesWhenGetCoursesThenRespondWithStatusOkAndEmptyArray() {\r\n    when(courseService.getCourses()).thenReturn(Collections.emptyList());\r\n\r\n    given()\r\n      .when()\r\n        .get(\"/courses\")\r\n      .then()\r\n        .log().ifValidationFails()\r\n        .statusCode(OK.value())\r\n        .contentType(JSON)\r\n        .body(is(equalTo(\"[]\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNoMatchingCoursesWhenGetCoursesThenRespondWithStatusNotFound() {\r\n    String nonMatchingCourseCode = \"nonMatchingCourseCode\";\r\n\r\n    when(courseService.getCourse(nonMatchingCourseCode)).thenThrow(\r\n      new CourseNotFoundException(nonMatchingCourseCode));\r\n\r\n    given()\r\n      .when()\r\n        .get(\"/courses/\" + nonMatchingCourseCode)\r\n      .then()\r\n        .log().ifValidationFails()\r\n        .statusCode(NOT_FOUND.value());\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = RANDOM_PORT)\r\npublic class CourseControllerIntegrationTest {\r\n    //...\r\n}\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext webApplicationContext;\r\n\r\n@Before\r\npublic void initialiseRestAssuredMockMvcWebApplicationContext() {\r\n    RestAssuredMockMvc.webAppContextSetup(webApplicationContext);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNoMatchingCourseCodeWhenGetCourseThenRespondWithStatusNotFound() {\r\n    String nonMatchingCourseCode = \"nonMatchingCourseCode\";\r\n\r\n    given()\r\n      .when()\r\n        .get(\"/courses/\" + nonMatchingCourseCode)\r\n      .then()\r\n        .log().ifValidationFails()\r\n        .statusCode(NOT_FOUND.value());\r\n}\r\n```"]