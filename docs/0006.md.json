["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.0.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\n@Table(name = \"Customers\")\r\npublic class Customer {\r\n\r\n    @Id\r\n    private int id;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    private String customerAttributeJSON;\r\n\r\n    @Convert(converter = HashMapConverter.class)\r\n    private Map<String, Object> customerAttributes;\r\n}\r\n```","```\r\npublic void serializeCustomerAttributes() throws JsonProcessingException {\r\n    this.customerAttributeJSON = objectMapper.writeValueAsString(customerAttributes);\r\n}\r\n```","```\r\npublic void deserializeCustomerAttributes() throws IOException {\r\n    this.customerAttributes = objectMapper.readValue(customerAttributeJSON, HashMap.class);\r\n}\r\n```","```\r\n@Test\r\npublic void whenStoringAJsonColumn_thenDeserializedVersionMatches() {\r\n    Customer customer = new Customer();\r\n    customer.setFirstName(\"first name\");\r\n    customer.setLastName(\"last name\");\r\n\r\n    Map<String, Object> attributes = new HashMap<>();\r\n    attributes.put(\"address\", \"123 Main Street\");\r\n    attributes.put(\"zipcode\", 12345);\r\n\r\n    customer.setCustomerAttributes(attributes);\r\n    customer.serializeCustomerAttributes();\r\n\r\n    String serialized = customer.getCustomerAttributeJSON();\r\n\r\n    customer.setCustomerAttributeJSON(serialized);\r\n    customer.deserializeCustomerAttributes();\r\n\r\n    assertEquals(attributes, customer.getCustomerAttributes());\r\n}\r\n```","```\r\npublic class HashMapConverter implements AttributeConverter<Map<String, Object>, String> {\r\n\r\n    @Override\r\n    public String convertToDatabaseColumn(Map<String, Object> customerInfo) {\r\n\r\n        String customerInfoJson = null;\r\n        try {\r\n            customerInfoJson = objectMapper.writeValueAsString(customerInfo);\r\n        } catch (final JsonProcessingException e) {\r\n            logger.error(\"JSON writing error\", e);\r\n        }\r\n\r\n        return customerInfoJson;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> convertToEntityAttribute(String customerInfoJSON) {\r\n\r\n        Map<String, Object> customerInfo = null;\r\n        try {\r\n            customerInfo = objectMapper.readValue(customerInfoJSON, Map.class);\r\n        } catch (final IOException e) {\r\n            logger.error(\"JSON reading error\", e);\r\n        }\r\n\r\n        return customerInfo;\r\n    }\r\n\r\n}\r\n```","```\r\n@Convert(converter = HashMapConverter.class)\r\nprivate Map<String, Object> customerAttributes;\r\n```"]