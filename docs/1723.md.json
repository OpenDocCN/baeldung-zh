["```\r\n<dependency>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jooq</artifactId>\r\n    <version>3.13.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jooq-meta</artifactId>\r\n    <version>3.13.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jooq-codegen</artifactId>\r\n    <version>3.13.4</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <version>42.2.16</version>\r\n</dependency>\r\n```","```\r\ncreate table AUTHOR\r\n(\r\n    ID         integer PRIMARY KEY,\r\n    FIRST_NAME varchar(255),\r\n    LAST_NAME  varchar(255),\r\n    AGE        integer\r\n);\r\n\r\ncreate table ARTICLE\r\n(\r\n    ID          integer PRIMARY KEY,\r\n    TITLE       varchar(255) not null,\r\n    DESCRIPTION varchar(255),\r\n    AUTHOR_ID   integer\r\n        CONSTRAINT fk_author_id REFERENCES AUTHOR\r\n);\r\n```","```\r\nString userName = \"user\";\r\nString password = \"pass\";\r\nString url = \"jdbc:postgresql://db_host:5432/baeldung\";\r\nConnection conn = DriverManager.getConnection(url, userName, password); \r\n```","```\r\nDSLContext context = DSL.using(conn, SQLDialect.POSTGRES);\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<configuration >\r\n\r\n    <jdbc>\r\n        <driver>org.postgresql.Driver</driver>\r\n        <url>jdbc:postgresql://db_url:5432/baeldung_database</url>\r\n        <user>username</user>\r\n        <password>password</password>\r\n    </jdbc>\r\n\r\n    <generator>\r\n        <name>org.jooq.codegen.JavaGenerator</name>\r\n\r\n        <database>\r\n            <name>org.jooq.meta.postgres.PostgresDatabase</name>\r\n            <inputSchema>public</inputSchema>\r\n            <includes>.*</includes>\r\n            <excludes></excludes>\r\n        </database>\r\n\r\n        <target>\r\n            <packageName>com.baeldung.jooq.model</packageName>\r\n            <directory>C:/projects/baeldung/tutorials/jooq-examples/src/main/java</directory>\r\n        </target>\r\n    </generator>\r\n</configuration>\r\n```","```\r\nGenerationTool.generate(\r\n  Files.readString(\r\n    Path.of(\"jooq-config.xml\")\r\n  )    \r\n);\r\n```","```\r\ncom.baeldung.model.generated.tables.Article;\r\ncom.baeldung.model.generated.tables.Author;\r\n```","```\r\nArticleRecord article = context.newRecord(Article.ARTICLE);\r\n```","```\r\narticle.setId(2);\r\narticle.setTitle(\"jOOQ examples\");\r\narticle.setDescription(\"A few examples of jOOQ CRUD operations\");\r\narticle.setAuthorId(1);\r\n```","```\r\narticle.store();\r\n```","```\r\nResult<Record> authors = context.select()\r\n  .from(Author.AUTHOR)\r\n  .fetch();\r\n```","```\r\nauthors.forEach(author -> {\r\n    Integer id = author.getValue(Author.AUTHOR.ID);\r\n    String firstName = author.getValue(Author.AUTHOR.FIRST_NAME);\r\n    String lastName = author.getValue(Author.AUTHOR.LAST_NAME);\r\n    Integer age = author.getValue(Author.AUTHOR.AGE);\r\n\r\n    System.out.printf(\"Author %s %s has id: %d and age: %d%n\", firstName, lastName, id, age);\r\n});\r\n```","```\r\nResult<Record2<Integer, String>> articles = context.select(Article.ARTICLE.ID, Article.ARTICLE.TITLE)\r\n  .from(Author.AUTHOR)\r\n  .fetch();\r\n```","```\r\nAuthorRecord author = context.fetchOne(Author.AUTHOR, Author.AUTHOR.ID.eq(1))\r\n```","```\r\ncontext.update(Author.AUTHOR)\r\n  .set(Author.AUTHOR.FIRST_NAME, \"David\")\r\n  .set(Author.AUTHOR.LAST_NAME, \"Brown\")\r\n  .where(Author.AUTHOR.ID.eq(1))\r\n  .execute();\r\n```","```\r\nArticleRecord article = context.fetchOne(Article.ARTICLE, Article.ARTICLE.ID.eq(1));\r\narticle.setTitle(\"A New Article Title\");\r\narticle.store();\r\n```","```\r\ncontext.delete(Article.ARTICLE)\r\n  .where(Article.ARTICLE.ID.eq(1))\r\n  .execute();\r\n```","```\r\nArticleRecord articleRecord = context.fetchOne(Article.ARTICLE, Article.ARTICLE.ID.eq(1));\r\narticleRecord.delete();\r\n```"]