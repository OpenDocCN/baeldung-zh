["```\r\npublic class Human {\r\n    private String name;\r\n    private int age;\r\n\r\n    // standard constructors, getters/setters, equals and hashcode\r\n} \r\n```","```\r\nnew Comparator<Human>() {\r\n    @Override\r\n    public int compare(Human h1, Human h2) {\r\n        return h1.getName().compareTo(h2.getName());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPreLambda_whenSortingEntitiesByName_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    Collections.sort(humans, new Comparator<Human>() {\r\n        @Override\r\n        public int compare(Human h1, Human h2) {\r\n            return h1.getName().compareTo(h2.getName());\r\n        }\r\n    });\r\n    Assert.assertThat(humans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n(final Human h1, final Human h2) -> h1.getName().compareTo(h2.getName());\r\n```","```\r\n@Test\r\npublic void whenSortingEntitiesByName_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    humans.sort(\r\n      (Human h1, Human h2) -> h1.getName().compareTo(h2.getName()));\r\n\r\n    assertThat(humans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n(h1, h2) -> h1.getName().compareTo(h2.getName())\r\n```","```\r\n@Test\r\npublic void \r\n  givenLambdaShortForm_whenSortingEntitiesByName_thenCorrectlySorted() {\r\n\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    humans.sort((h1, h2) -> h1.getName().compareTo(h2.getName()));\r\n\r\n    assertThat(humans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\npublic static int compareByNameThenAge(Human lhs, Human rhs) {\r\n    if (lhs.name.equals(rhs.name)) {\r\n        return Integer.compare(lhs.age, rhs.age);\r\n    } else {\r\n        return lhs.name.compareTo(rhs.name);\r\n    }\r\n}\r\n```","```\r\nhumans.sort(Human::compareByNameThenAge);\r\n```","```\r\n@Test\r\npublic void \r\n  givenMethodDefinition_whenSortingEntitiesByNameThenAge_thenCorrectlySorted() {\r\n\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    humans.sort(Human::compareByNameThenAge);\r\n    Assert.assertThat(humans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenInstanceMethod_whenSortingEntitiesByName_thenCorrectlySorted() {\r\n\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    Collections.sort(\r\n      humans, Comparator.comparing(Human::getName));\r\n    assertThat(humans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSortingEntitiesByNameReversed_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Jack\", 12)\r\n    );\r\n\r\n    Comparator<Human> comparator\r\n      = (h1, h2) -> h1.getName().compareTo(h2.getName());\r\n\r\n    humans.sort(comparator.reversed());\r\n\r\n    Assert.assertThat(humans.get(0), equalTo(new Human(\"Sarah\", 10)));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSortingEntitiesByNameThenAge_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 12), \r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Zack\", 12)\r\n    );\r\n\r\n    humans.sort((lhs, rhs) -> {\r\n        if (lhs.getName().equals(rhs.getName())) {\r\n            return Integer.compare(lhs.getAge(), rhs.getAge());\r\n        } else {\r\n            return lhs.getName().compareTo(rhs.getName());\r\n        }\r\n    });\r\n    Assert.assertThat(humans.get(0), equalTo(new Human(\"Sarah\", 10)));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenComposition_whenSortingEntitiesByNameThenAge_thenCorrectlySorted() {\r\n\r\n    List<Human> humans = Lists.newArrayList(\r\n      new Human(\"Sarah\", 12), \r\n      new Human(\"Sarah\", 10), \r\n      new Human(\"Zack\", 12)\r\n    );\r\n\r\n    humans.sort(\r\n      Comparator.comparing(Human::getName).thenComparing(Human::getAge)\r\n    );\r\n\r\n    Assert.assertThat(humans.get(0), equalTo(new Human(\"Sarah\", 10)));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamNaturalOrdering_whenSortingEntitiesByName_thenCorrectlySorted() {\r\n    List<String> letters = Lists.newArrayList(\"B\", \"A\", \"C\");\r\n\r\n    List<String> sortedLetters = letters.stream().sorted().collect(Collectors.toList());\r\n    assertThat(sortedLetters.get(0), equalTo(\"A\"));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamCustomOrdering_whenSortingEntitiesByName_thenCorrectlySorted() {\t\r\n    List<Human> humans = Lists.newArrayList(new Human(\"Sarah\", 10), new Human(\"Jack\", 12));\r\n    Comparator<Human> nameComparator = (h1, h2) -> h1.getName().compareTo(h2.getName());\r\n\r\n    List<Human> sortedHumans = \r\n      humans.stream().sorted(nameComparator).collect(Collectors.toList());\r\n    assertThat(sortedHumans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamComparatorOrdering_whenSortingEntitiesByName_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(new Human(\"Sarah\", 10), new Human(\"Jack\", 12));\r\n\r\n    List<Human> sortedHumans = humans.stream()\r\n      .sorted(Comparator.comparing(Human::getName))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(sortedHumans.get(0), equalTo(new Human(\"Jack\", 12)));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamNaturalOrdering_whenSortingEntitiesByNameReversed_thenCorrectlySorted() {\r\n    List<String> letters = Lists.newArrayList(\"B\", \"A\", \"C\");\r\n\r\n    List<String> reverseSortedLetters = letters.stream()\r\n      .sorted(Comparator.reverseOrder())\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(reverseSortedLetters.get(0), equalTo(\"C\"));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamCustomOrdering_whenSortingEntitiesByNameReversed_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(new Human(\"Sarah\", 10), new Human(\"Jack\", 12));\r\n    Comparator<Human> reverseNameComparator = \r\n      (h1, h2) -> h2.getName().compareTo(h1.getName());\r\n\r\n    List<Human> reverseSortedHumans = humans.stream().sorted(reverseNameComparator)\r\n      .collect(Collectors.toList());\r\n    assertThat(reverseSortedHumans.get(0), equalTo(new Human(\"Sarah\", 10)));\r\n}\r\n```","```\r\n@Test\r\npublic final void \r\n  givenStreamComparatorOrdering_whenSortingEntitiesByNameReversed_thenCorrectlySorted() {\r\n    List<Human> humans = Lists.newArrayList(new Human(\"Sarah\", 10), new Human(\"Jack\", 12));\r\n\r\n    List<Human> reverseSortedHumans = humans.stream()\r\n      .sorted(Comparator.comparing(Human::getName, Comparator.reverseOrder()))\r\n      .collect(Collectors.toList());\r\n\r\n    assertThat(reverseSortedHumans.get(0), equalTo(new Human(\"Sarah\", 10)));\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void givenANullElement_whenSortingEntitiesByName_thenThrowsNPE() {\r\n    List<Human> humans = Lists.newArrayList(null, new Human(\"Jack\", 12));\r\n\r\n    humans.sort((h1, h2) -> h1.getName().compareTo(h2.getName()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenANullElement_whenSortingEntitiesByNameManually_thenMovesTheNullToLast() {\r\n    List<Human> humans = Lists.newArrayList(null, new Human(\"Jack\", 12), null);\r\n\r\n    humans.sort((h1, h2) -> {\r\n        if (h1 == null) {\r\n            return h2 == null ? 0 : 1;\r\n        }\r\n        else if (h2 == null) {\r\n            return -1;\r\n        }\r\n        return h1.getName().compareTo(h2.getName());\r\n    });\r\n\r\n    Assert.assertNotNull(humans.get(0));\r\n    Assert.assertNull(humans.get(1));\r\n    Assert.assertNull(humans.get(2));\r\n}\r\n```","```\r\n@Test\r\npublic void givenANullElement_whenSortingEntitiesByName_thenMovesTheNullToLast() {\r\n    List<Human> humans = Lists.newArrayList(null, new Human(\"Jack\", 12), null);\r\n\r\n    humans.sort(Comparator.nullsLast(Comparator.comparing(Human::getName)));\r\n\r\n    Assert.assertNotNull(humans.get(0));\r\n    Assert.assertNull(humans.get(1));\r\n    Assert.assertNull(humans.get(2));\r\n}\r\n```","```\r\n@Test\r\npublic void givenANullElement_whenSortingEntitiesByName_thenMovesTheNullToStart() {\r\n    List<Human> humans = Lists.newArrayList(null, new Human(\"Jack\", 12), null);\r\n\r\n    humans.sort(Comparator.nullsFirst(Comparator.comparing(Human::getName)));\r\n\r\n    Assert.assertNull(humans.get(0));\r\n    Assert.assertNull(humans.get(1));\r\n    Assert.assertNotNull(humans.get(2));\r\n} \r\n```"]