["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nint[] array = new int[] { 3, 5, 2, 5, 14, 4 };\r\n```","```\r\nint firstItem = array[0];\r\nint lastItem = array[array.length - 1];\r\n```","```\r\nint anyValue = array[new Random().nextInt(array.length)];\r\n```","```\r\nint[] newArray = Arrays.copyOf(array, array.length + 1);\r\nnewArray[newArray.length - 1] = newItem;\r\n```","```\r\nint[] newArray = ArrayUtils.add(array, newItem);\r\n```","```\r\nint[] largerArray = ArrayUtils.insert(2, array, 77);\r\n```","```\r\nboolean areEqual = Arrays.equals(array1, array2);\r\n```","```\r\nboolean isEmpty = array == null || array.length == 0;\r\n```","```\r\nboolean isEmpty = ArrayUtils.isEmpty(array);\r\n```","```\r\n// These are empty arrays\r\nInteger[] array1 = {};\r\nInteger[] array2 = null;\r\nInteger[] array3 = new Integer[0];\r\n\r\n// All these will NOT be considered empty\r\nInteger[] array3 = { null, null, null };\r\nInteger[][] array4 = { {}, {}, {} };\r\nInteger[] array5 = new Integer[3];\r\n```","```\r\nArrayUtils.shuffle(array);\r\n```","```\r\nInteger[] list = ArrayUtils.toObject(array);\r\n```","```\r\nInteger[] objectArray = { 3, 5, 2, 5, 14, 4 };\r\nint[] array = ArrayUtils.toPrimitive(objectArray);\r\n```","```\r\n// Box\r\nInteger[] list = ArrayUtils.toObject(array);\r\n// Remove duplicates\r\nSet<Integer> set = new HashSet<Integer>(Arrays.asList(list));\r\n// Create array and unbox\r\nreturn ArrayUtils.toPrimitive(set.toArray(new Integer[set.size()]));\r\n```","```\r\nString arrayAsString = ArrayUtils.toString(array);\r\n```","```\r\npublic static <T, U> U[] mapObjectArray(\r\n  T[] array, Function<T, U> function,\r\n  Class<U> targetClazz) {\r\n    U[] newArray = (U[]) Array.newInstance(targetClazz, array.length);\r\n    for (int i = 0; i < array.length; i++) {\r\n        newArray[i] = function.apply(array[i]);\r\n    }\r\n    return newArray;\r\n}\r\n```","```\r\n@Test\r\npublic void whenMapArrayMultiplyingValues_thenReturnMultipliedArray() {\r\n    Integer[] multipliedExpectedArray = new Integer[] { 6, 10, 4, 10, 28, 8 };\r\n    Integer[] output = \r\n      MyHelperClass.mapObjectArray(array, value -> value * 2, Integer.class);\r\n\r\n    assertThat(output).containsExactly(multipliedExpectedArray);\r\n}\r\n\r\n@Test\r\npublic void whenMapDividingObjectArray_thenReturnMultipliedArray() {\r\n    Double[] multipliedExpectedArray = new Double[] { 1.5, 2.5, 1.0, 2.5, 7.0, 2.0 };\r\n    Double[] output =\r\n      MyHelperClass.mapObjectArray(array, value -> value / 2.0, Double.class);\r\n\r\n    assertThat(output).containsExactly(multipliedExpectedArray);\r\n}\r\n```","```\r\nString[] stringArray = Arrays.stream(array)\r\n  .mapToObj(value -> String.format(\"Value: %s\", value))\r\n  .toArray(String[]::new);\r\n```","```\r\nint[] evenArray = Arrays.stream(array)\r\n  .filter(value -> value % 2 == 0)\r\n  .toArray();\r\n```"]