["```\r\nMapperFactory mapperFactory = new DefaultMapperFactory.Builder().build();\r\n```","```\r\npublic class Source {\r\n    private String name;\r\n    private int age;\r\n\r\n    public Source(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Dest {\r\n    private String name;\r\n    private int age;\r\n\r\n    public Dest(String name, int age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenMaps_thenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class);\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Source src = new Source(\"Baeldung\", 10);\r\n    Dest dest = mapper.map(src, Dest.class);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenMapsReverse_thenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).byDefault();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Dest src = new Dest(\"Baeldung\", 10);\r\n    Source dest = mapper.map(src, Source.class);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>ma.glasnost.orika</groupId>\r\n    <artifactId>orika-core</artifactId>\r\n    <version>1.4.6</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenMapsUsingBoundMapper_thenCorrect() {\r\n    BoundMapperFacade<Source, Dest> \r\n      boundMapper = mapperFactory.getMapperFacade(Source.class, Dest.class);\r\n    Source src = new Source(\"baeldung\", 10);\r\n    Dest dest = boundMapper.map(src);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenMapsUsingBoundMapperInReverse_thenCorrect() {\r\n    BoundMapperFacade<Source, Dest> \r\n      boundMapper = mapperFactory.getMapperFacade(Source.class, Dest.class);\r\n    Dest src = new Dest(\"baeldung\", 10);\r\n    Source dest = boundMapper.mapReverse(src);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private String nickname;\r\n    private int age;\r\n\r\n    public Person(String name, String nickname, int age) {\r\n        this.name = name;\r\n        this.nickname = nickname;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Personne {\r\n    private String nom;\r\n    private String surnom;\r\n    private int age;\r\n\r\n    public Personne(String nom, String surnom, int age) {\r\n        this.nom = nom;\r\n        this.surnom = surnom;\r\n        this.age = age;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nmapperFactory.classMap(Source.class, Dest.class);\r\n```","```\r\nmapperFactory.classMap(Source.class, Dest.class).byDefault()\r\n```","```\r\n@Test\r\npublic void givenSrcAndDestWithDifferentFieldNames_whenMaps_thenCorrect() {\r\n    mapperFactory.classMap(Personne.class, Person.class)\r\n      .field(\"nom\", \"name\").field(\"surnom\", \"nickname\")\r\n      .field(\"age\", \"age\").register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Personne frenchPerson = new Personne(\"Claire\", \"cla\", 25);\r\n    Person englishPerson = mapper.map(frenchPerson, Person.class);\r\n\r\n    assertEquals(englishPerson.getName(), frenchPerson.getNom());\r\n    assertEquals(englishPerson.getNickname(), frenchPerson.getSurnom());\r\n    assertEquals(englishPerson.getAge(), frenchPerson.getAge());\r\n}\r\n```","```\r\nmapperFactory.classMap(Personne.class, Person.class)\r\n  .field(\"nom\", \"name\").field(\"surnom\", \"nickname\").byDefault().register();\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenCanExcludeField_thenCorrect() {\r\n    mapperFactory.classMap(Personne.class, Person.class).exclude(\"nom\")\r\n      .field(\"surnom\", \"nickname\").field(\"age\", \"age\").register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Personne frenchPerson = new Personne(\"Claire\", \"cla\", 25);\r\n    Person englishPerson = mapper.map(frenchPerson, Person.class);\r\n\r\n    assertEquals(null, englishPerson.getName());\r\n    assertEquals(englishPerson.getNickname(), frenchPerson.getSurnom());\r\n    assertEquals(englishPerson.getAge(), frenchPerson.getAge());\r\n}\r\n```","```\r\npublic class PersonNameList {\r\n    private List<String> nameList;\r\n\r\n    public PersonNameList(List<String> nameList) {\r\n        this.nameList = nameList;\r\n    }\r\n}\r\n```","```\r\npublic class PersonNameParts {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public PersonNameParts(String firstName, String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcWithListAndDestWithPrimitiveAttributes_whenMaps_thenCorrect() {\r\n    mapperFactory.classMap(PersonNameList.class, PersonNameParts.class)\r\n      .field(\"nameList[0]\", \"firstName\")\r\n      .field(\"nameList[1]\", \"lastName\").register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    List<String> nameList = Arrays.asList(new String[] { \"Sylvester\", \"Stallone\" });\r\n    PersonNameList src = new PersonNameList(nameList);\r\n    PersonNameParts dest = mapper.map(src, PersonNameParts.class);\r\n\r\n    assertEquals(dest.getFirstName(), \"Sylvester\");\r\n    assertEquals(dest.getLastName(), \"Stallone\");\r\n}\r\n```","```\r\npublic class PersonNameMap {\r\n    private Map<String, String> nameMap;\r\n\r\n    public PersonNameMap(Map<String, String> nameMap) {\r\n        this.nameMap = nameMap;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcWithMapAndDestWithPrimitiveAttributes_whenMaps_thenCorrect() {\r\n    mapperFactory.classMap(PersonNameMap.class, PersonNameParts.class)\r\n      .field(\"nameMap['first']\", \"firstName\")\r\n      .field(\"nameMap[\\\"last\\\"]\", \"lastName\")\r\n      .register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Map<String, String> nameMap = new HashMap<>();\r\n    nameMap.put(\"first\", \"Leornado\");\r\n    nameMap.put(\"last\", \"DiCaprio\");\r\n    PersonNameMap src = new PersonNameMap(nameMap);\r\n    PersonNameParts dest = mapper.map(src, PersonNameParts.class);\r\n\r\n    assertEquals(dest.getFirstName(), \"Leornado\");\r\n    assertEquals(dest.getLastName(), \"DiCaprio\");\r\n}\r\n```","```\r\npublic class PersonContainer {\r\n    private Name name;\r\n\r\n    public PersonContainer(Name name) {\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\npublic class Name {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public Name(String firstName, String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcWithNestedFields_whenMaps_thenCorrect() {\r\n    mapperFactory.classMap(PersonContainer.class, PersonNameParts.class)\r\n      .field(\"name.firstName\", \"firstName\")\r\n      .field(\"name.lastName\", \"lastName\").register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    PersonContainer src = new PersonContainer(new Name(\"Nick\", \"Canon\"));\r\n    PersonNameParts dest = mapper.map(src, PersonNameParts.class);\r\n\r\n    assertEquals(dest.getFirstName(), \"Nick\");\r\n    assertEquals(dest.getLastName(), \"Canon\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcWithNullField_whenMapsThenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).byDefault();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Source src = new Source(null, 10);\r\n    Dest dest = mapper.map(src, Dest.class);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\nMapperFactory mapperFactory = new DefaultMapperFactory.Builder()\r\n  .mapNulls(false).build();\r\n```","```\r\n@Test\r\npublic void givenSrcWithNullAndGlobalConfigForNoNull_whenFailsToMap_ThenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class);\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Source src = new Source(null, 10);\r\n    Dest dest = new Dest(\"Clinton\", 55);\r\n    mapper.map(src, dest);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), \"Clinton\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcWithNullAndLocalConfigForNoNull_whenFailsToMap_ThenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).field(\"age\", \"age\")\r\n      .mapNulls(false).field(\"name\", \"name\").byDefault().register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Source src = new Source(null, 10);\r\n    Dest dest = new Dest(\"Clinton\", 55);\r\n    mapper.map(src, dest);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), \"Clinton\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenDestWithNullReverseMappedToSource_whenMapsByDefault_thenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).byDefault();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Dest src = new Dest(null, 10);\r\n    Source dest = new Source(\"Vin\", 44);\r\n    mapper.map(src, dest);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), src.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenDestWithNullReverseMappedToSourceAndLocalConfigForNoNull_whenFailsToMap_thenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).field(\"age\", \"age\")\r\n      .mapNullsInReverse(false).field(\"name\", \"name\").byDefault()\r\n      .register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Dest src = new Dest(null, 10);\r\n    Source dest = new Source(\"Vin\", 44);\r\n    mapper.map(src, dest);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), \"Vin\");\r\n}\r\n```","```\r\nmapperFactory.classMap(Source.class, Dest.class).field(\"age\", \"age\")\r\n  .fieldMap(\"name\", \"name\").mapNulls(false).add().byDefault().register();\r\n```","```\r\n@Test\r\npublic void givenSrcWithNullAndFieldLevelConfigForNoNull_whenFailsToMap_ThenCorrect() {\r\n    mapperFactory.classMap(Source.class, Dest.class).field(\"age\", \"age\")\r\n      .fieldMap(\"name\", \"name\").mapNulls(false).add().byDefault().register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    Source src = new Source(null, 10);\r\n    Dest dest = new Dest(\"Clinton\", 55);\r\n    mapper.map(src, dest);\r\n\r\n    assertEquals(dest.getAge(), src.getAge());\r\n    assertEquals(dest.getName(), \"Clinton\");\r\n}\r\n```","```\r\n2007-06-26T21:22:39Z\r\n```","```\r\n1182882159000\r\n```","```\r\npublic class Person3 {\r\n    private String name;\r\n    private String dtob;\r\n\r\n    public Person3(String name, String dtob) {\r\n        this.name = name;\r\n        this.dtob = dtob;\r\n    }\r\n}\r\n```","```\r\npublic class Personne3 {\r\n    private String name;\r\n    private long dtob;\r\n\r\n    public Personne3(String name, long dtob) {\r\n        this.name = name;\r\n        this.dtob = dtob;\r\n    }\r\n}\r\n```","```\r\nclass PersonCustomMapper extends CustomMapper<Personne3, Person3> {\r\n\r\n    @Override\r\n    public void mapAtoB(Personne3 a, Person3 b, MappingContext context) {\r\n        Date date = new Date(a.getDtob());\r\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\r\n        String isoDate = format.format(date);\r\n        b.setDtob(isoDate);\r\n    }\r\n\r\n    @Override\r\n    public void mapBtoA(Person3 b, Personne3 a, MappingContext context) {\r\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\r\n        Date date = format.parse(b.getDtob());\r\n        long timestamp = date.getTime();\r\n        a.setDtob(timestamp);\r\n    }\r\n};\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenCustomMapperWorks_thenCorrect() {\r\n    mapperFactory.classMap(Personne3.class, Person3.class)\r\n      .customize(customMapper).register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    String dateTime = \"2007-06-26T21:22:39Z\";\r\n    long timestamp = new Long(\"1182882159000\");\r\n    Personne3 personne3 = new Personne3(\"Leornardo\", timestamp);\r\n    Person3 person3 = mapper.map(personne3, Person3.class);\r\n\r\n    assertEquals(person3.getDtob(), dateTime);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSrcAndDest_whenCustomMapperWorksBidirectionally_thenCorrect() {\r\n    mapperFactory.classMap(Personne3.class, Person3.class)\r\n      .customize(customMapper).register();\r\n    MapperFacade mapper = mapperFactory.getMapperFacade();\r\n    String dateTime = \"2007-06-26T21:22:39Z\";\r\n    long timestamp = new Long(\"1182882159000\");\r\n    Person3 person3 = new Person3(\"Leornardo\", dateTime);\r\n    Personne3 personne3 = mapper.map(person3, Personne3.class);\r\n\r\n    assertEquals(person3.getDtob(), timestamp);\r\n}\r\n```"]