["```\r\n@Test\r\npublic void whenNotClosingResoures_thenIOExceptionShouldBeThrown() {\r\n    try {\r\n        for (int x = 0; x < 1000000; x++) {\r\n            FileInputStream leakyHandle = new FileInputStream(tempFile);\r\n        }\r\n        fail(\"Method Should Have Failed\");\r\n    } catch (IOException e) {\r\n        assertTrue(e.getMessage().containsIgnoreCase(\"too many open files\"));\r\n    } catch (Exception e) {\r\n        fail(\"Unexpected exception\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenClosingResoures_thenIOExceptionShouldNotBeThrown() {\r\n    try {\r\n        for (int x = 0; x < 1000000; x++) {\r\n            FileInputStream nonLeakyHandle = null;\r\n            try {\r\n                nonLeakyHandle = new FileInputStream(tempFile);\r\n            } finally {\r\n                if (nonLeakyHandle != null) {\r\n                    nonLeakyHandle.close();\r\n                }\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        assertFalse(e.getMessage().toLowerCase().contains(\"too many open files\"));\r\n        fail(\"Method Should Not Have Failed\");\r\n    } catch (Exception e) {\r\n        fail(\"Unexpected exception\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenUsingTryWithResoures_thenIOExceptionShouldNotBeThrown() {\r\n    try {\r\n        for (int x = 0; x < 1000000; x++) {\r\n            try (FileInputStream nonLeakyHandle = new FileInputStream(tempFile)) {\r\n                // do something with the file\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        assertFalse(e.getMessage().toLowerCase().contains(\"too many open files\"));\r\n        fail(\"Method Should Not Have Failed\");\r\n    } catch (Exception e) {\r\n        fail(\"Unexpected exception\");\r\n    }\r\n}\r\n```"]