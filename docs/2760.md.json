["```\r\n<dependency>\r\n    <groupId>io.dropwizard.metrics</groupId>\r\n    <artifactId>metrics-core</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency> \r\n```","```\r\nMetricRegistry metricRegistry = new MetricRegistry();\r\n```","```\r\nMeter meter1 = new Meter();\r\nmetricRegistry.register(\"meter1\", meter1);\r\n\r\nMeter meter2 = metricRegistry.meter(\"meter2\"); \r\n```","```\r\nString name1 = MetricRegistry.name(Filter.class, \"request\", \"count\");\r\nString name2 = MetricRegistry.name(\"CustomFilter\", \"response\", \"count\"); \r\n```","```\r\nSharedMetricRegistries.add(\"default\", metricRegistry);\r\nMetricRegistry retrievedMetricRegistry = SharedMetricRegistries.getOrCreate(\"default\");\r\nSharedMetricRegistries.remove(\"default\"); \r\n```","```\r\nMeter meter = new Meter();\r\nlong initCount = meter.getCount();\r\nassertThat(initCount, equalTo(0L));\r\n\r\nmeter.mark();\r\nassertThat(meter.getCount(), equalTo(1L));\r\n\r\nmeter.mark(20);\r\nassertThat(meter.getCount(), equalTo(21L));\r\n\r\ndouble meanRate = meter.getMeanRate();\r\ndouble oneMinRate = meter.getOneMinuteRate();\r\ndouble fiveMinRate = meter.getFiveMinuteRate();\r\ndouble fifteenMinRate = meter.getFifteenMinuteRate(); \r\n```","```\r\npublic class AttendanceRatioGauge extends RatioGauge {\r\n    private int attendanceCount;\r\n    private int courseCount;\r\n\r\n    @Override\r\n    protected Ratio getRatio() {\r\n        return Ratio.of(attendanceCount, courseCount);\r\n    }\r\n\r\n    // standard constructors\r\n} \r\n```","```\r\nRatioGauge ratioGauge = new AttendanceRatioGauge(15, 20);\r\n\r\nassertThat(ratioGauge.getValue(), equalTo(0.75)); \r\n```","```\r\npublic class ActiveUsersGauge extends CachedGauge<List<Long>> {\r\n\r\n    @Override\r\n    protected List<Long> loadValue() {\r\n        return getActiveUserCount();\r\n    }\r\n\r\n    private List<Long> getActiveUserCount() {\r\n        List<Long> result = new ArrayList<Long>();\r\n        result.add(12L);\r\n        return result;\r\n    }\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\nGauge<List<Long>> activeUsersGauge = new ActiveUsersGauge(15, TimeUnit.MINUTES);\r\nList<Long> expected = new ArrayList<>();\r\nexpected.add(12L);\r\n\r\nassertThat(activeUsersGauge.getValue(), equalTo(expected)); \r\n```","```\r\npublic class ActiveUserCountGauge extends DerivativeGauge<List<Long>, Integer> {\r\n\r\n    @Override\r\n    protected Integer transform(List<Long> value) {\r\n        return value.size();\r\n    }\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\nGauge<List<Long>> activeUsersGauge = new ActiveUsersGauge(15, TimeUnit.MINUTES);\r\nGauge<Integer> activeUserCountGauge = new ActiveUserCountGauge(activeUsersGauge);\r\n\r\nassertThat(activeUserCountGauge.getValue(), equalTo(1)); \r\n```","```\r\nCounter counter = new Counter();\r\nlong initCount = counter.getCount();\r\nassertThat(initCount, equalTo(0L));\r\n\r\ncounter.inc();\r\nassertThat(counter.getCount(), equalTo(1L));\r\n\r\ncounter.inc(11);\r\nassertThat(counter.getCount(), equalTo(12L));\r\n\r\ncounter.dec();\r\nassertThat(counter.getCount(), equalTo(11L));\r\n\r\ncounter.dec(6);\r\nassertThat(counter.getCount(), equalTo(5L));\r\n```","```\r\nHistogram histogram = new Histogram(new UniformReservoir());\r\nhistogram.update(5);\r\nlong count1 = histogram.getCount();\r\nassertThat(count1, equalTo(1L));\r\n\r\nSnapshot snapshot1 = histogram.getSnapshot();\r\nassertThat(snapshot1.getValues().length, equalTo(1));\r\nassertThat(snapshot1.getValues()[0], equalTo(5L));\r\n\r\nhistogram.update(20);\r\nlong count2 = histogram.getCount();\r\nassertThat(count2, equalTo(2L));\r\n\r\nSnapshot snapshot2 = histogram.getSnapshot();\r\nassertThat(snapshot2.getValues().length, equalTo(2));\r\nassertThat(snapshot2.getValues()[1], equalTo(20L));\r\nassertThat(snapshot2.getMax(), equalTo(20L));\r\nassertThat(snapshot2.getMean(), equalTo(12.5));\r\nassertEquals(10.6, snapshot2.getStdDev(), 0.1);\r\nassertThat(snapshot2.get75thPercentile(), equalTo(20.0));\r\nassertThat(snapshot2.get999thPercentile(), equalTo(20.0)); \r\n```","```\r\nTimer timer = new Timer();\r\nTimer.Context context1 = timer.time();\r\nTimeUnit.SECONDS.sleep(5);\r\nlong elapsed1 = context1.stop();\r\n\r\nassertEquals(5000000000L, elapsed1, 1000000);\r\nassertThat(timer.getCount(), equalTo(1L));\r\nassertEquals(0.2, timer.getMeanRate(), 0.1);\r\n\r\nTimer.Context context2 = timer.time();\r\nTimeUnit.SECONDS.sleep(2);\r\ncontext2.close();\r\n\r\nassertThat(timer.getCount(), equalTo(2L));\r\nassertEquals(0.3, timer.getMeanRate(), 0.1); \r\n```","```\r\nMetricRegistry metricRegistry = new MetricRegistry();\r\n\r\nMeter meter = metricRegistry.meter(\"meter\");\r\nmeter.mark();\r\nmeter.mark(200);\r\nHistogram histogram = metricRegistry.histogram(\"histogram\");\r\nhistogram.update(12);\r\nhistogram.update(17);\r\nCounter counter = metricRegistry.counter(\"counter\");\r\ncounter.inc();\r\ncounter.dec();\r\n\r\nConsoleReporter reporter = ConsoleReporter.forRegistry(metricRegistry).build();\r\nreporter.start(5, TimeUnit.MICROSECONDS);\r\nreporter.report(); \r\n```","```\r\n-- Histograms ------------------------------------------------------------------\r\nhistogram\r\ncount = 2\r\nmin = 12\r\nmax = 17\r\nmean = 14.50\r\nstddev = 2.50\r\nmedian = 17.00\r\n75% <= 17.00\r\n95% <= 17.00\r\n98% <= 17.00\r\n99% <= 17.00\r\n99.9% <= 17.00\r\n\r\n-- Meters ----------------------------------------------------------------------\r\nmeter\r\ncount = 201\r\nmean rate = 1756.87 events/second\r\n1-minute rate = 0.00 events/second\r\n5-minute rate = 0.00 events/second\r\n15-minute rate = 0.00 events/second \r\n```","```\r\n<dependency>\r\n    <groupId>io.dropwizard.metrics</groupId>\r\n    <artifactId>metrics-healthchecks</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\npublic class DatabaseHealthCheck extends HealthCheck {\r\n\r\n    @Override\r\n    protected Result check() throws Exception {\r\n        return Result.healthy();\r\n    }\r\n} \r\n```","```\r\npublic class UserCenterHealthCheck extends HealthCheck {\r\n\r\n    @Override\r\n    protected Result check() throws Exception {\r\n        return Result.healthy();\r\n    }\r\n} \r\n```","```\r\nHealthCheckRegistry healthCheckRegistry = new HealthCheckRegistry();\r\nhealthCheckRegistry.register(\"db\", new DatabaseHealthCheck());\r\nhealthCheckRegistry.register(\"uc\", new UserCenterHealthCheck());\r\n\r\nassertThat(healthCheckRegistry.getNames().size(), equalTo(2)); \r\n```","```\r\nhealthCheckRegistry.unregister(\"uc\");\r\n\r\nassertThat(healthCheckRegistry.getNames().size(), equalTo(1)); \r\n```","```\r\nMap<String, HealthCheck.Result> results = healthCheckRegistry.runHealthChecks();\r\nfor (Map.Entry<String, HealthCheck.Result> entry : results.entrySet()) {\r\n    assertThat(entry.getValue().isHealthy(), equalTo(true));\r\n} \r\n```","```\r\nhealthCheckRegistry.runHealthCheck(\"db\"); \r\n```","```\r\n<dependency>\r\n    <groupId>io.dropwizard.metrics</groupId>\r\n    <artifactId>metrics-servlets</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\npublic class MyHealthCheckServletContextListener\r\n  extends HealthCheckServlet.ContextListener {\r\n\r\n    public static HealthCheckRegistry HEALTH_CHECK_REGISTRY\r\n      = new HealthCheckRegistry();\r\n\r\n    static {\r\n        HEALTH_CHECK_REGISTRY.register(\"db\", new DatabaseHealthCheck());\r\n    }\r\n\r\n    @Override\r\n    protected HealthCheckRegistry getHealthCheckRegistry() {\r\n        return HEALTH_CHECK_REGISTRY;\r\n    }\r\n} \r\n```","```\r\n<listener>\r\n    <listener-class>com.baeldung.metrics.servlets.MyHealthCheckServletContextListener</listener-class>\r\n</listener>\r\n<servlet>\r\n    <servlet-name>healthCheck</servlet-name>\r\n    <servlet-class>com.codahale.metrics.servlets.HealthCheckServlet</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>healthCheck</servlet-name>\r\n    <url-pattern>/healthcheck</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n{\r\n  \"db\": {\r\n    \"healthy\": true\r\n  }\r\n}\r\n```","```\r\n<servlet>\r\n    <servlet-name>threadDump</servlet-name>\r\n    <servlet-class>com.codahale.metrics.servlets.ThreadDumpServlet</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>threadDump</servlet-name>\r\n    <url-pattern>/threaddump</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n<servlet>\r\n    <servlet-name>ping</servlet-name>\r\n    <servlet-class>com.codahale.metrics.servlets.PingServlet</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>ping</servlet-name>\r\n    <url-pattern>/ping</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\npublic class MyMetricsServletContextListener\r\n  extends MetricsServlet.ContextListener {\r\n    private static MetricRegistry METRIC_REGISTRY\r\n     = new MetricRegistry();\r\n\r\n    static {\r\n        Counter counter = METRIC_REGISTRY.counter(\"m01-counter\");\r\n        counter.inc();\r\n\r\n        Histogram histogram = METRIC_REGISTRY.histogram(\"m02-histogram\");\r\n        histogram.update(5);\r\n        histogram.update(20);\r\n        histogram.update(100);\r\n    }\r\n\r\n    @Override\r\n    protected MetricRegistry getMetricRegistry() {\r\n        return METRIC_REGISTRY;\r\n    }\r\n} \r\n```","```\r\n<listener>\r\n    <listener-class>com.codahale.metrics.servlets.MyMetricsServletContextListener</listener-class>\r\n</listener>\r\n<servlet>\r\n    <servlet-name>metrics</servlet-name>\r\n    <servlet-class>com.codahale.metrics.servlets.MetricsServlet</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>metrics</servlet-name>\r\n    <url-pattern>/metrics</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n{\r\n  \"version\": \"3.0.0\",\r\n  \"gauges\": {},\r\n  \"counters\": {\r\n    \"m01-counter\": {\r\n      \"count\": 1\r\n    }\r\n  },\r\n  \"histograms\": {\r\n    \"m02-histogram\": {\r\n      \"count\": 3,\r\n      \"max\": 100,\r\n      \"mean\": 41.66666666666666,\r\n      \"min\": 5,\r\n      \"p50\": 20,\r\n      \"p75\": 100,\r\n      \"p95\": 100,\r\n      \"p98\": 100,\r\n      \"p99\": 100,\r\n      \"p999\": 100,\r\n      \"stddev\": 41.69998667732268\r\n    }\r\n  },\r\n  \"meters\": {},\r\n  \"timers\": {}\r\n} \r\n```","```\r\n<servlet>\r\n    <servlet-name>admin</servlet-name>\r\n    <servlet-class>com.codahale.metrics.servlets.AdminServlet</servlet-class>\r\n</servlet>\r\n<servlet-mapping>\r\n    <servlet-name>admin</servlet-name>\r\n    <url-pattern>/admin/*</url-pattern>\r\n</servlet-mapping>\r\n```","```\r\n<dependency>\r\n    <groupId>io.dropwizard.metrics</groupId>\r\n    <artifactId>metrics-servlet</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\npublic class MyInstrumentedFilterContextListener\r\n  extends InstrumentedFilterContextListener {\r\n\r\n    public static MetricRegistry REGISTRY = new MetricRegistry();\r\n\r\n    @Override\r\n    protected MetricRegistry getMetricRegistry() {\r\n        return REGISTRY;\r\n    }\r\n} \r\n```","```\r\n<listener>\r\n     <listener-class>\r\n         com.baeldung.metrics.servlet.MyInstrumentedFilterContextListener\r\n     </listener-class>\r\n</listener>\r\n\r\n<filter>\r\n    <filter-name>instrumentFilter</filter-name>\r\n    <filter-class>\r\n        com.codahale.metrics.servlet.InstrumentedFilter\r\n    </filter-class>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>instrumentFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```"]