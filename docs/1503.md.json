["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency> \r\n```","```\r\npublic class Car {\r\n\r\n    private String color;\r\n    private String type;\r\n\r\n    // standard getters setters\r\n}\r\n```","```\r\nObjectMapper objectMapper = new ObjectMapper();\r\nCar car = new Car(\"yellow\", \"renault\");\r\nobjectMapper.writeValue(new File(\"target/car.json\"), car); \r\n```","```\r\n{\"color\":\"yellow\",\"type\":\"renault\"} \r\n```","```\r\nString carAsString = objectMapper.writeValueAsString(car); \r\n```","```\r\nString json = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }\";\r\nCar car = objectMapper.readValue(json, Car.class); \r\n```","```\r\nCar car = objectMapper.readValue(new File(\"src/test/resources/json_car.json\"), Car.class);\r\n```","```\r\nCar car = \r\n  objectMapper.readValue(new URL(\"file:src/test/resources/json_car.json\"), Car.class);\r\n```","```\r\nString json = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"FIAT\\\" }\";\r\nJsonNode jsonNode = objectMapper.readTree(json);\r\nString color = jsonNode.get(\"color\").asText();\r\n// Output: color -> Black \r\n```","```\r\nString jsonCarArray = \r\n  \"[{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }, { \\\"color\\\" : \\\"Red\\\", \\\"type\\\" : \\\"FIAT\\\" }]\";\r\nList<Car> listCar = objectMapper.readValue(jsonCarArray, new TypeReference<List<Car>>(){}); \r\n```","```\r\nString json = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }\";\r\nMap<String, Object> map \r\n  = objectMapper.readValue(json, new TypeReference<Map<String,Object>>(){}); \r\n```","```\r\nString jsonString \r\n  = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"Fiat\\\", \\\"year\\\" : \\\"1970\\\" }\"; \r\n```","```\r\nobjectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\nCar car = objectMapper.readValue(jsonString, Car.class);\r\n\r\nJsonNode jsonNodeRoot = objectMapper.readTree(jsonString);\r\nJsonNode jsonNodeYear = jsonNodeRoot.get(\"year\");\r\nString year = jsonNodeYear.asText(); \r\n```","```\r\nobjectMapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, false); \r\n```","```\r\nobjectMapper.configure(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS, false);\r\n```","```\r\npublic class CustomCarSerializer extends StdSerializer<Car> {\r\n\r\n    public CustomCarSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomCarSerializer(Class<Car> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(\r\n      Car car, JsonGenerator jsonGenerator, SerializerProvider serializer) {\r\n        jsonGenerator.writeStartObject();\r\n        jsonGenerator.writeStringField(\"car_brand\", car.getType());\r\n        jsonGenerator.writeEndObject();\r\n    }\r\n} \r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nSimpleModule module = \r\n  new SimpleModule(\"CustomCarSerializer\", new Version(1, 0, 0, null, null, null));\r\nmodule.addSerializer(Car.class, new CustomCarSerializer());\r\nmapper.registerModule(module);\r\nCar car = new Car(\"yellow\", \"renault\");\r\nString carJson = mapper.writeValueAsString(car); \r\n```","```\r\nvar carJson = {\"car_brand\":\"renault\"} \r\n```","```\r\npublic class CustomCarDeserializer extends StdDeserializer<Car> {\r\n\r\n    public CustomCarDeserializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomCarDeserializer(Class<?> vc) {\r\n        super(vc);\r\n    }\r\n\r\n    @Override\r\n    public Car deserialize(JsonParser parser, DeserializationContext deserializer) {\r\n        Car car = new Car();\r\n        ObjectCodec codec = parser.getCodec();\r\n        JsonNode node = codec.readTree(parser);\r\n\r\n        // try catch block\r\n        JsonNode colorNode = node.get(\"color\");\r\n        String color = colorNode.asText();\r\n        car.setColor(color);\r\n        return car;\r\n    }\r\n} \r\n```","```\r\nString json = \"{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }\";\r\nObjectMapper mapper = new ObjectMapper();\r\nSimpleModule module =\r\n  new SimpleModule(\"CustomCarDeserializer\", new Version(1, 0, 0, null, null, null));\r\nmodule.addDeserializer(Car.class, new CustomCarDeserializer());\r\nmapper.registerModule(module);\r\nCar car = mapper.readValue(json, Car.class); \r\n```","```\r\npublic class Request \r\n{\r\n    private Car car;\r\n    private Date datePurchased;\r\n\r\n    // standard getters setters\r\n} \r\n```","```\r\nObjectMapper objectMapper = new ObjectMapper();\r\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm a z\");\r\nobjectMapper.setDateFormat(df);\r\nString carAsString = objectMapper.writeValueAsString(request);\r\n// output: {\"car\":{\"color\":\"yellow\",\"type\":\"renault\"},\"datePurchased\":\"2016-07-03 11:43 AM CEST\"} \r\n```","```\r\nString jsonCarArray = \r\n  \"[{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }, { \\\"color\\\" : \\\"Red\\\", \\\"type\\\" : \\\"FIAT\\\" }]\";\r\nObjectMapper objectMapper = new ObjectMapper();\r\nobjectMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true);\r\nCar[] cars = objectMapper.readValue(jsonCarArray, Car[].class);\r\n// print cars\r\n```","```\r\nString jsonCarArray = \r\n  \"[{ \\\"color\\\" : \\\"Black\\\", \\\"type\\\" : \\\"BMW\\\" }, { \\\"color\\\" : \\\"Red\\\", \\\"type\\\" : \\\"FIAT\\\" }]\";\r\nObjectMapper objectMapper = new ObjectMapper();\r\nList<Car> listCar = objectMapper.readValue(jsonCarArray, new TypeReference<List<Car>>(){});\r\n// print cars\r\n```"]