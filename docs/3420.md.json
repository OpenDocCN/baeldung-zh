["```\r\npublic class ExtendableBean {\r\n    public String name;\r\n    private Map<String, String> properties;\r\n\r\n    @JsonAnyGetter\r\n    public Map<String, String> getProperties() {\r\n        return properties;\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"name\":\"My bean\",\r\n    \"attr2\":\"val2\",\r\n    \"attr1\":\"val1\"\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonAnyGetter_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    ExtendableBean bean = new ExtendableBean(\"My bean\");\r\n    bean.add(\"attr1\", \"val1\");\r\n    bean.add(\"attr2\", \"val2\");\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"attr1\"));\r\n    assertThat(result, containsString(\"val1\"));\r\n}\r\n```","```\r\npublic class MyBean {\r\n    public int id;\r\n    private String name;\r\n\r\n    @JsonGetter(\"name\")\r\n    public String getTheName() {\r\n        return name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonGetter_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    MyBean bean = new MyBean(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, containsString(\"1\"));\r\n}\r\n```","```\r\n@JsonPropertyOrder({ \"name\", \"id\" })\r\npublic class MyBean {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n{\r\n    \"name\":\"My bean\",\r\n    \"id\":1\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonPropertyOrder_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    MyBean bean = new MyBean(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, containsString(\"1\"));\r\n}\r\n```","```\r\n{\r\n    \"id\":1,\r\n    \"name\":\"My bean\"\r\n}\r\n```","```\r\npublic class RawBean {\r\n    public String name;\r\n\r\n    @JsonRawValue\r\n    public String json;\r\n}\r\n```","```\r\n{\r\n    \"name\":\"My bean\",\r\n    \"json\":{\r\n        \"attr\":false\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonRawValue_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    RawBean bean = new RawBean(\"My bean\", \"{\\\"attr\\\":false}\");\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, containsString(\"{\\\"attr\\\":false}\"));\r\n}\r\n```","```\r\npublic enum TypeEnumWithValue {\r\n    TYPE1(1, \"Type A\"), TYPE2(2, \"Type 2\");\r\n\r\n    private Integer id;\r\n    private String name;\r\n\r\n    // standard constructors\r\n\r\n    @JsonValue\r\n    public String getName() {\r\n        return name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonValue_thenCorrect()\r\n  throws JsonParseException, IOException {\r\n\r\n    String enumAsString = new ObjectMapper()\r\n      .writeValueAsString(TypeEnumWithValue.TYPE1);\r\n\r\n    assertThat(enumAsString, is(\"\"Type A\"\"));\r\n}\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"John\"\r\n}\r\n```","```\r\n{\r\n    \"User\": {\r\n        \"id\": 1,\r\n        \"name\": \"John\"\r\n    }\r\n}\r\n```","```\r\n@JsonRootName(value = \"user\")\r\npublic class UserWithRoot {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonRootName_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    UserWithRoot user = new User(1, \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);\r\n    String result = mapper.writeValueAsString(user);\r\n\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, containsString(\"user\"));\r\n}\r\n```","```\r\n{\r\n    \"user\":{\r\n        \"id\":1,\r\n        \"name\":\"John\"\r\n    }\r\n}\r\n```","```\r\n@JsonRootName(value = \"user\", namespace=\"users\")\r\npublic class UserWithRootNamespace {\r\n    public int id;\r\n    public String name;\r\n\r\n    // ...\r\n}\r\n```","```\r\n<user >\r\n    <id xmlns=\"\">1</id>\r\n    <name xmlns=\"\">John</name>\r\n    <items xmlns=\"\"/>\r\n</user>\r\n```","```\r\npublic class EventWithSerializer {\r\n    public String name;\r\n\r\n    @JsonSerialize(using = CustomDateSerializer.class)\r\n    public Date eventDate;\r\n}\r\n```","```\r\npublic class CustomDateSerializer extends StdSerializer<Date> {\r\n\r\n    private static SimpleDateFormat formatter \r\n      = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    public CustomDateSerializer() { \r\n        this(null); \r\n    } \r\n\r\n    public CustomDateSerializer(Class<Date> t) {\r\n        super(t); \r\n    }\r\n\r\n    @Override\r\n    public void serialize(\r\n      Date value, JsonGenerator gen, SerializerProvider arg2) \r\n      throws IOException, JsonProcessingException {\r\n        gen.writeString(formatter.format(value));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonSerialize_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df\r\n      = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    String toParse = \"20-12-2014 02:30:00\";\r\n    Date date = df.parse(toParse);\r\n    EventWithSerializer event = new EventWithSerializer(\"party\", date);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(event);\r\n    assertThat(result, containsString(toParse));\r\n}\r\n```","```\r\n{\r\n    \"id\":1,\r\n    \"theName\":\"My bean\"\r\n}\r\n```","```\r\npublic class BeanWithCreator {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonCreator\r\n    public BeanWithCreator(\r\n      @JsonProperty(\"id\") int id, \r\n      @JsonProperty(\"theName\") String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonCreator_thenCorrect()\r\n  throws IOException {\r\n\r\n    String json = \"{\\\"id\\\":1,\\\"theName\\\":\\\"My bean\\\"}\";\r\n\r\n    BeanWithCreator bean = new ObjectMapper()\r\n      .readerFor(BeanWithCreator.class)\r\n      .readValue(json);\r\n    assertEquals(\"My bean\", bean.name);\r\n}\r\n```","```\r\npublic class BeanWithInject {\r\n    @JacksonInject\r\n    public int id;\r\n\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonInject_thenCorrect()\r\n  throws IOException {\r\n\r\n    String json = \"{\\\"name\\\":\\\"My bean\\\"}\";\r\n\r\n    InjectableValues inject = new InjectableValues.Std()\r\n      .addValue(int.class, 1);\r\n    BeanWithInject bean = new ObjectMapper().reader(inject)\r\n      .forType(BeanWithInject.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(\"My bean\", bean.name);\r\n    assertEquals(1, bean.id);\r\n}\r\n```","```\r\npublic class ExtendableBean {\r\n    public String name;\r\n    private Map<String, String> properties;\r\n\r\n    @JsonAnySetter\r\n    public void add(String key, String value) {\r\n        properties.put(key, value);\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"name\":\"My bean\",\r\n    \"attr2\":\"val2\",\r\n    \"attr1\":\"val1\"\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonAnySetter_thenCorrect()\r\n  throws IOException {\r\n    String json\r\n      = \"{\\\"name\\\":\\\"My bean\\\",\\\"attr2\\\":\\\"val2\\\",\\\"attr1\\\":\\\"val1\\\"}\";\r\n\r\n    ExtendableBean bean = new ObjectMapper()\r\n      .readerFor(ExtendableBean.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(\"My bean\", bean.name);\r\n    assertEquals(\"val2\", bean.getProperties().get(\"attr2\"));\r\n}\r\n```","```\r\npublic class MyBean {\r\n    public int id;\r\n    private String name;\r\n\r\n    @JsonSetter(\"name\")\r\n    public void setTheName(String name) {\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonSetter_thenCorrect()\r\n  throws IOException {\r\n\r\n    String json = \"{\\\"id\\\":1,\\\"name\\\":\\\"My bean\\\"}\";\r\n\r\n    MyBean bean = new ObjectMapper()\r\n      .readerFor(MyBean.class)\r\n      .readValue(json);\r\n    assertEquals(\"My bean\", bean.getTheName());\r\n}\r\n```","```\r\npublic class EventWithSerializer {\r\n    public String name;\r\n\r\n    @JsonDeserialize(using = CustomDateDeserializer.class)\r\n    public Date eventDate;\r\n}\r\n```","```\r\npublic class CustomDateDeserializer\r\n  extends StdDeserializer<Date> {\r\n\r\n    private static SimpleDateFormat formatter\r\n      = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    public CustomDateDeserializer() { \r\n        this(null); \r\n    } \r\n\r\n    public CustomDateDeserializer(Class<?> vc) { \r\n        super(vc); \r\n    }\r\n\r\n    @Override\r\n    public Date deserialize(\r\n      JsonParser jsonparser, DeserializationContext context) \r\n      throws IOException {\r\n\r\n        String date = jsonparser.getText();\r\n        try {\r\n            return formatter.parse(date);\r\n        } catch (ParseException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonDeserialize_thenCorrect()\r\n  throws IOException {\r\n\r\n    String json\r\n      = \"{\"name\":\"party\",\"eventDate\":\"20-12-2014 02:30:00\"}\";\r\n\r\n    SimpleDateFormat df\r\n      = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n    EventWithSerializer event = new ObjectMapper()\r\n      .readerFor(EventWithSerializer.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(\r\n      \"20-12-2014 02:30:00\", df.format(event.eventDate));\r\n}\r\n```","```\r\npublic class AliasBean {\r\n    @JsonAlias({ \"fName\", \"f_name\" })\r\n    private String firstName;   \r\n    private String lastName;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingUsingJsonAlias_thenCorrect() throws IOException {\r\n    String json = \"{\\\"fName\\\": \\\"John\\\", \\\"lastName\\\": \\\"Green\\\"}\";\r\n    AliasBean aliasBean = new ObjectMapper().readerFor(AliasBean.class).readValue(json);\r\n    assertEquals(\"John\", aliasBean.getFirstName());\r\n}\r\n```","```\r\n@JsonIgnoreProperties({ \"id\" })\r\npublic class BeanWithIgnore {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonIgnoreProperties_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    BeanWithIgnore bean = new BeanWithIgnore(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, not(containsString(\"id\")));\r\n}\r\n```","```\r\npublic class BeanWithIgnore {\r\n    @JsonIgnore\r\n    public int id;\r\n\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonIgnore_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    BeanWithIgnore bean = new BeanWithIgnore(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, not(containsString(\"id\")));\r\n}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public Name name;\r\n\r\n    @JsonIgnoreType\r\n    public static class Name {\r\n        public String firstName;\r\n        public String lastName;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonIgnoreType_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    User.Name name = new User.Name(\"John\", \"Doe\");\r\n    User user = new User(1, name);\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(user);\r\n\r\n    assertThat(result, containsString(\"1\"));\r\n    assertThat(result, not(containsString(\"name\")));\r\n    assertThat(result, not(containsString(\"John\")));\r\n}\r\n```","```\r\n@JsonInclude(Include.NON_NULL)\r\npublic class MyBean {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\npublic void whenSerializingUsingJsonInclude_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    MyBean bean = new MyBean(1, null);\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"1\"));\r\n    assertThat(result, not(containsString(\"name\")));\r\n}\r\n```","```\r\n@JsonAutoDetect(fieldVisibility = Visibility.ANY)\r\npublic class PrivateBean {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonAutoDetect_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    PrivateBean bean = new PrivateBean(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"1\"));\r\n    assertThat(result, containsString(\"My bean\"));\r\n}\r\n```","```\r\npublic class Zoo {\r\n    public Animal animal;\r\n\r\n    @JsonTypeInfo(\r\n      use = JsonTypeInfo.Id.NAME, \r\n      include = As.PROPERTY, \r\n      property = \"type\")\r\n    @JsonSubTypes({\r\n        @JsonSubTypes.Type(value = Dog.class, name = \"dog\"),\r\n        @JsonSubTypes.Type(value = Cat.class, name = \"cat\")\r\n    })\r\n    public static class Animal {\r\n        public String name;\r\n    }\r\n\r\n    @JsonTypeName(\"dog\")\r\n    public static class Dog extends Animal {\r\n        public double barkVolume;\r\n    }\r\n\r\n    @JsonTypeName(\"cat\")\r\n    public static class Cat extends Animal {\r\n        boolean likesCream;\r\n        public int lives;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingPolymorphic_thenCorrect()\r\n  throws JsonProcessingException {\r\n    Zoo.Dog dog = new Zoo.Dog(\"lacy\");\r\n    Zoo zoo = new Zoo(dog);\r\n\r\n    String result = new ObjectMapper()\r\n      .writeValueAsString(zoo);\r\n\r\n    assertThat(result, containsString(\"type\"));\r\n    assertThat(result, containsString(\"dog\"));\r\n}\r\n```","```\r\n{\r\n    \"animal\": {\r\n        \"type\": \"dog\",\r\n        \"name\": \"lacy\",\r\n        \"barkVolume\": 0\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"animal\":{\r\n        \"name\":\"lacy\",\r\n        \"type\":\"cat\"\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingPolymorphic_thenCorrect()\r\nthrows IOException {\r\n    String json = \"{\\\"animal\\\":{\\\"name\\\":\\\"lacy\\\",\\\"type\\\":\\\"cat\\\"}}\";\r\n\r\n    Zoo zoo = new ObjectMapper()\r\n      .readerFor(Zoo.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(\"lacy\", zoo.animal.name);\r\n    assertEquals(Zoo.Cat.class, zoo.animal.getClass());\r\n}\r\n```","```\r\npublic class MyBean {\r\n    public int id;\r\n    private String name;\r\n\r\n    @JsonProperty(\"name\")\r\n    public void setTheName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    @JsonProperty(\"name\")\r\n    public String getTheName() {\r\n        return name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingJsonProperty_thenCorrect()\r\n  throws IOException {\r\n    MyBean bean = new MyBean(1, \"My bean\");\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, containsString(\"1\"));\r\n\r\n    MyBean resultBean = new ObjectMapper()\r\n      .readerFor(MyBean.class)\r\n      .readValue(result);\r\n    assertEquals(\"My bean\", resultBean.getTheName());\r\n}\r\n```","```\r\npublic class EventWithFormat {\r\n    public String name;\r\n\r\n    @JsonFormat(\r\n      shape = JsonFormat.Shape.STRING,\r\n      pattern = \"dd-MM-yyyy hh:mm:ss\")\r\n    public Date eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonFormat_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n\r\n    String toParse = \"20-12-2014 02:30:00\";\r\n    Date date = df.parse(toParse);\r\n    EventWithFormat event = new EventWithFormat(\"party\", date);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(event);\r\n\r\n    assertThat(result, containsString(toParse));\r\n}\r\n```","```\r\npublic class UnwrappedUser {\r\n    public int id;\r\n\r\n    @JsonUnwrapped\r\n    public Name name;\r\n\r\n    public static class Name {\r\n        public String firstName;\r\n        public String lastName;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonUnwrapped_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n    UnwrappedUser.Name name = new UnwrappedUser.Name(\"John\", \"Doe\");\r\n    UnwrappedUser user = new UnwrappedUser(1, name);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(user);\r\n\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, not(containsString(\"name\")));\r\n}\r\n```","```\r\n{\r\n    \"id\":1,\r\n    \"firstName\":\"John\",\r\n    \"lastName\":\"Doe\"\r\n}\r\n```","```\r\npublic class Views {\r\n    public static class Public {}\r\n    public static class Internal extends Public {}\r\n}\r\n```","```\r\npublic class Item {\r\n    @JsonView(Views.Public.class)\r\n    public int id;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public String itemName;\r\n\r\n    @JsonView(Views.Internal.class)\r\n    public String ownerName;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonView_thenCorrect()\r\n  throws JsonProcessingException {\r\n    Item item = new Item(2, \"book\", \"John\");\r\n\r\n    String result = new ObjectMapper()\r\n      .writerWithView(Views.Public.class)\r\n      .writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"2\"));\r\n    assertThat(result, not(containsString(\"John\")));\r\n}\r\n```","```\r\npublic class ItemWithRef {\r\n    public int id;\r\n    public String itemName;\r\n\r\n    @JsonManagedReference\r\n    public UserWithRef owner;\r\n}\r\n```","```\r\npublic class UserWithRef {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonBackReference\r\n    public List<ItemWithRef> userItems;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJacksonReferenceAnnotation_thenCorrect()\r\n  throws JsonProcessingException {\r\n    UserWithRef user = new UserWithRef(1, \"John\");\r\n    ItemWithRef item = new ItemWithRef(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, not(containsString(\"userItems\")));\r\n}\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class,\r\n  property = \"id\")\r\npublic class ItemWithIdentity {\r\n    public int id;\r\n    public String itemName;\r\n    public UserWithIdentity owner;\r\n}\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class,\r\n  property = \"id\")\r\npublic class UserWithIdentity {\r\n    public int id;\r\n    public String name;\r\n    public List<ItemWithIdentity> userItems;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonIdentityInfo_thenCorrect()\r\n  throws JsonProcessingException {\r\n    UserWithIdentity user = new UserWithIdentity(1, \"John\");\r\n    ItemWithIdentity item = new ItemWithIdentity(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, containsString(\"userItems\"));\r\n}\r\n```","```\r\n{\r\n    \"id\": 2,\r\n    \"itemName\": \"book\",\r\n    \"owner\": {\r\n        \"id\": 1,\r\n        \"name\": \"John\",\r\n        \"userItems\": [\r\n            2\r\n        ]\r\n    }\r\n}\r\n```","```\r\n@JsonFilter(\"myFilter\")\r\npublic class BeanWithFilter {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingJsonFilter_thenCorrect()\r\n  throws JsonProcessingException {\r\n    BeanWithFilter bean = new BeanWithFilter(1, \"My bean\");\r\n\r\n    FilterProvider filters \r\n      = new SimpleFilterProvider().addFilter(\r\n        \"myFilter\", \r\n        SimpleBeanPropertyFilter.filterOutAllExcept(\"name\"));\r\n\r\n    String result = new ObjectMapper()\r\n      .writer(filters)\r\n      .writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, not(containsString(\"id\")));\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n    @JacksonAnnotationsInside\r\n    @JsonInclude(Include.NON_NULL)\r\n    @JsonPropertyOrder({ \"name\", \"id\", \"dateCreated\" })\r\n    public @interface CustomAnnotation {}\r\n```","```\r\n@CustomAnnotation\r\npublic class BeanWithCustomAnnotation {\r\n    public int id;\r\n    public String name;\r\n    public Date dateCreated;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingCustomAnnotation_thenCorrect()\r\n  throws JsonProcessingException {\r\n    BeanWithCustomAnnotation bean \r\n      = new BeanWithCustomAnnotation(1, \"My bean\", null);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"My bean\"));\r\n    assertThat(result, containsString(\"1\"));\r\n    assertThat(result, not(containsString(\"dateCreated\")));\r\n}\r\n```","```\r\n{\r\n    \"name\":\"My bean\",\r\n    \"id\":1\r\n}\r\n```","```\r\npublic class Item {\r\n    public int id;\r\n    public String itemName;\r\n    public User owner;\r\n}\r\n```","```\r\n@JsonIgnoreType\r\npublic class MyMixInForIgnoreType {}\r\n```","```\r\n@Test\r\npublic void whenSerializingUsingMixInAnnotation_thenCorrect() \r\n  throws JsonProcessingException {\r\n    Item item = new Item(1, \"book\", null);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n    assertThat(result, containsString(\"owner\"));\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.addMixIn(User.class, MyMixInForIgnoreType.class);\r\n\r\n    result = mapper.writeValueAsString(item);\r\n    assertThat(result, not(containsString(\"owner\")));\r\n}\r\n```","```\r\n@JsonInclude(Include.NON_NULL)\r\n@JsonPropertyOrder({ \"name\", \"id\" })\r\npublic class MyBean {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDisablingAllAnnotations_thenAllDisabled()\r\n  throws IOException {\r\n    MyBean bean = new MyBean(1, null);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.disable(MapperFeature.USE_ANNOTATIONS);\r\n    String result = mapper.writeValueAsString(bean);\r\n\r\n    assertThat(result, containsString(\"1\"));\r\n    assertThat(result, containsString(\"name\"));\r\n}\r\n```","```\r\n{\"id\":1}\r\n```","```\r\n{\r\n    \"id\":1,\r\n    \"name\":null\r\n}\r\n```"]