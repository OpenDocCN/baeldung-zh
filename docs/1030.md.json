["```\r\npublic class Person {\r\n    private Integer id;\r\n    private String name;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic interface PersonService {\r\n\r\n    public Person saveUpdatePerson(Person person);\r\n    public Person findPersonById(Integer id);\r\n}\r\n```","```\r\n@PostMapping(\r\n  value = \"/createPerson\", consumes = \"application/json\", produces = \"application/json\")\r\npublic Person createPerson(@RequestBody Person person) {\r\n    return personService.saveUpdatePerson(person);\r\n}\r\n\r\n@PostMapping(\r\n  value = \"/updatePerson\", consumes = \"application/json\", produces = \"application/json\")\r\npublic Person updatePerson(@RequestBody Person person, HttpServletResponse response) {\r\n    response.setHeader(\"Location\", ServletUriComponentsBuilder.fromCurrentContextPath()\r\n      .path(\"/findPerson/\" + person.getId()).toUriString());\r\n\r\n    return personService.saveUpdatePerson(person);\r\n}\r\n```","```\r\n@BeforeClass\r\npublic static void runBeforeAllTestMethods() {\r\n    createPersonUrl = \"http://localhost:8082/spring-rest/createPerson\";\r\n    updatePersonUrl = \"http://localhost:8082/spring-rest/updatePerson\";\r\n\r\n    restTemplate = new RestTemplate();\r\n    headers = new HttpHeaders();\r\n    headers.setContentType(MediaType.APPLICATION_JSON);\r\n    personJsonObject = new JSONObject();\r\n    personJsonObject.put(\"id\", 1);\r\n    personJsonObject.put(\"name\", \"John\");\r\n}\r\n```","```\r\nprivate final ObjectMapper objectMapper = new ObjectMapper();\r\n```","```\r\n@Test\r\npublic void givenDataIsJson_whenDataIsPostedByPostForObject_thenResponseBodyIsNotNull()\r\n  throws IOException {\r\n    HttpEntity<String> request = \r\n      new HttpEntity<String>(personJsonObject.toString(), headers);\r\n\r\n    String personResultAsJsonStr = \r\n      restTemplate.postForObject(createPersonUrl, request, String.class);\r\n    JsonNode root = objectMapper.readTree(personResultAsJsonStr);\r\n\r\n    assertNotNull(personResultAsJsonStr);\r\n    assertNotNull(root);\r\n    assertNotNull(root.path(\"name\").asText());\r\n}\r\n```","```\r\nPerson person = restTemplate.postForObject(createPersonUrl, request, Person.class);\r\n\r\nassertNotNull(person);\r\nassertNotNull(person.getName());\r\n```","```\r\n@Test\r\npublic void givenDataIsJson_whenDataIsPostedByPostForEntity_thenResponseBodyIsNotNull()\r\n  throws IOException {\r\n    HttpEntity<String> request = \r\n      new HttpEntity<String>(personJsonObject.toString(), headers);\r\n\r\n    ResponseEntity<String> responseEntityStr = restTemplate.\r\n      postForEntity(createPersonUrl, request, String.class);\r\n    JsonNode root = objectMapper.readTree(responseEntityStr.getBody());\r\n\r\n    assertNotNull(responseEntityStr.getBody());\r\n    assertNotNull(root.path(\"name\").asText());\r\n}\r\n```","```\r\nResponseEntity<Person> responseEntityPerson = restTemplate.\r\n  postForEntity(createPersonUrl, request, Person.class);\r\n\r\nassertNotNull(responseEntityPerson.getBody());\r\nassertNotNull(responseEntityPerson.getBody().getName());\r\n```","```\r\nresponse.setHeader(\"Location\", ServletUriComponentsBuilder.fromCurrentContextPath()\r\n  .path(\"/findPerson/\" + person.getId()).toUriString());\r\n```","```\r\n@Test\r\npublic void givenDataIsJson_whenDataIsPostedByPostForLocation_thenResponseBodyIsTheLocationHeader() \r\n  throws JsonProcessingException {\r\n    HttpEntity<String> request = new HttpEntity<String>(personJsonObject.toString(), headers);\r\n    URI locationHeader = restTemplate.postForLocation(updatePersonUrl, request);\r\n\r\n    assertNotNull(locationHeader);\r\n}\r\n```"]