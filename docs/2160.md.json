["```\r\n<dependency>\r\n    <groupId>com.maxmind.geoip2</groupId>\r\n    <artifactId>geoip2</artifactId>\r\n    <version>2.8.0</version>\r\n</dependency>\r\n```","```\r\nFile database = new File(dbLocation);\r\nDatabaseReader dbReader = new DatabaseReader.Builder(database).build();\r\n```","```\r\nCityResponse response = dbReader.city(ipAddress);\r\n```","```\r\n@Test\r\npublic void givenIP_whenFetchingCity_thenReturnsCityData() \r\n  throws IOException, GeoIp2Exception {\r\n    String ip = \"your-ip-address\";\r\n    String dbLocation = \"your-path-to-mmdb\";\r\n\r\n    File database = new File(dbLocation);\r\n    DatabaseReader dbReader = new DatabaseReader.Builder(database)\r\n      .build();\r\n\r\n    InetAddress ipAddress = InetAddress.getByName(ip);\r\n    CityResponse response = dbReader.city(ipAddress);\r\n\r\n    String countryName = response.getCountry().getName();\r\n    String cityName = response.getCity().getName();\r\n    String postal = response.getPostal().getCode();\r\n    String state = response.getLeastSpecificSubdivision().getName();\r\n}\r\n```","```\r\npublic class GeoIP {\r\n    private String ipAddress;\r\n    private String city;\r\n    private String latitude;\r\n    private String longitude;\r\n    // constructors, getters and setters... \r\n}\r\n```","```\r\npublic class RawDBDemoGeoIPLocationService {\r\n    private DatabaseReader dbReader;\r\n\r\n    public RawDBDemoGeoIPLocationService() throws IOException {\r\n        File database = new File(\"your-mmdb-location\");\r\n        dbReader = new DatabaseReader.Builder(database).build();\r\n    }\r\n\r\n    public GeoIP getLocation(String ip) \r\n      throws IOException, GeoIp2Exception {\r\n        InetAddress ipAddress = InetAddress.getByName(ip);\r\n        CityResponse response = dbReader.city(ipAddress);\r\n\r\n        String cityName = response.getCity().getName();\r\n        String latitude = \r\n          response.getLocation().getLatitude().toString();\r\n        String longitude = \r\n          response.getLocation().getLongitude().toString();\r\n        return new GeoIP(ip, cityName, latitude, longitude);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class GeoIPTestController {\r\n    private RawDBDemoGeoIPLocationService locationService;\r\n\r\n    public GeoIPTestController() throws IOException {\r\n        locationService = new RawDBDemoGeoIPLocationService();\r\n    }\r\n\r\n    @PostMapping(\"/GeoIPTest\")\r\n    public GeoIP getLocation(\r\n      @RequestParam(value=\"ipAddress\", required=true) String ipAddress\r\n    ) throws Exception {\r\n\r\n        GeoIPLocationService<String, GeoIP> locationService \r\n          = new RawDBDemoGeoIPLocationService();\r\n        return locationService.getLocation(ipAddress);\r\n    }\r\n}\r\n```","```\r\n<body>\r\n    <form id=\"ipForm\" action=\"GeoIPTest\" method=\"POST\">\r\n        <input type=\"text\" name = \"ipAddress\" id = \"ip\"/>\r\n        <input type=\"submit\" name=\"submit\" value=\"submit\" /> \r\n    </form>\r\n    ...\r\n</body>\r\n```","```\r\n<script src\r\n   =\"https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js\">\r\n</script>\r\n\r\n<script type=\"text/javascript\">\r\n    $(document).ready (function () {\r\n        $.get( \"https://api.ipify.org?format=json\", \r\n          function( data ) {\r\n             $(\"#ip\").val(data.ip) ;\r\n        });\r\n...\r\n</script>\r\n```","```\r\n$( \"#ipForm\" ).submit(function( event ) {\r\n    event.preventDefault();\r\n    $.ajax({\r\n        url: \"GeoIPTest\",\r\n        type: \"POST\",\r\n        contentType: \r\n         \"application/x-www-form-urlencoded; charset=UTF-8\", \r\n        data: $.param( {ipAddress : $(\"#ip\").val()} ),\r\n        complete: function(data) {},\r\n        success: function(data) {\r\n            $(\"#status\").html(JSON.stringify(data));\r\n            if (data.ipAddress !=null) {\r\n                showLocationOnMap(data);\r\n            }\r\n        },\r\n        error: function(err) {\r\n            $(\"#status\").html(\"Error:\"+JSON.stringify(data));\r\n            },\r\n        });\r\n});\r\n```","```\r\n{\r\n    \"ipAddress\":\"your-ip-address\",\r\n    \"city\":\"your-city\",\r\n    \"latitude\":\"your-latitude\",\r\n    \"longitude\":\"your-longitude\"\r\n}\r\n```","```\r\n<script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR-API-KEY\" \r\nasync defer></script>\r\n```","```\r\n<div id=\"map\" style=\"height: 500px; width:100%; position:absolute\"></div>\r\n```","```\r\nfunction showLocationOnMap (location) {\r\n    var map;\r\n    map = new google.maps.Map(document.getElementById('map'), {\r\n      center: {\r\n        lat: Number(location.latitude), \r\n        lng: Number(location.longitude)},\r\n        zoom: 15\r\n    });\r\n    var marker = new google.maps.Marker({\r\n      position: {\r\n        lat: Number(location.latitude), \r\n        lng: Number(location.longitude)},\r\n        map: map,\r\n        title: \r\n          \"Public IP:\"+location.ipAddress\r\n            +\" @ \"+location.city\r\n    });   \r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-xml/GeoIpTest.jsp\r\n```"]