["```\r\npublic int sum(int n) {\r\n    if (n >= 1) {\r\n        return sum(n - 1) + n;\r\n    }\r\n    return n;\r\n}\r\n```","```\r\npublic int tailSum(int currentSum, int n) {\r\n    if (n <= 1) {\r\n        return currentSum + n;\r\n    }\r\n    return tailSum(currentSum + n, n - 1);\r\n}\r\n```","```\r\npublic int iterativeSum(int n) {\r\n    int sum = 0;\r\n    if(n < 0) {\r\n        return -1;\r\n    }\r\n    for(int i=0; i<=n; i++) {\r\n        sum += i;\r\n    }\r\n    return sum;\r\n}\r\n```","```\r\npublic int powerOf10(int n) {\r\n    if (n == 0) {\r\n        return 1;\r\n    }\r\n    return powerOf10(n-1) * 10;\r\n}\r\n```","```\r\npublic int fibonacci(int n) {\r\n    if (n <= 1) {\r\n        return n;\r\n    }\r\n    return fibonacci(n-1) + fibonacci(n-2);\r\n}\r\n```","```\r\npublic String toBinary(int n) {\r\n    if (n <= 1 ) {\r\n        return String.valueOf(n);\r\n    }\r\n    return toBinary(n / 2) + String.valueOf(n % 2);\r\n}\r\n```","```\r\npublic int calculateTreeHeight(BinaryNode root){\r\n    if (root!= null) {\r\n        if (root.getLeft() != null || root.getRight() != null) {\r\n            return 1 + \r\n              max(calculateTreeHeight(root.left), \r\n                calculateTreeHeight(root.right));\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n```"]