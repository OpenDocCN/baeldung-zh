["```\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface RandomInt {\r\n    int min();\r\n\r\n    int max();\r\n}\r\n```","```\r\n@Component\r\npublic class DataCache {\r\n    @RandomInt(min = 2, max = 10)\r\n    private int group;\r\n    private String name;\r\n}\r\n```","```\r\n@Component\r\npublic class RandomIntGenerator {\r\n    private Random random = new Random();\r\n    private DataCache dataCache;\r\n\r\n    public RandomIntGenerator(DataCache dataCache) {\r\n        this.dataCache = dataCache;\r\n    }\r\n\r\n    public int generate(int min, int max) {\r\n        return random.nextInt(max - min) + min;\r\n    }\r\n}\r\n```","```\r\npublic class RandomIntProcessor implements BeanPostProcessor {\r\n    private final RandomIntGenerator randomIntGenerator;\r\n\r\n    public RandomIntProcessor(RandomIntGenerator randomIntGenerator) {\r\n        this.randomIntGenerator = randomIntGenerator;\r\n    }\r\n\r\n    @Override\r\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\r\n        Field[] fields = bean.getClass().getDeclaredFields();\r\n        for (Field field : fields) {\r\n            RandomInt injectRandomInt = field.getAnnotation(RandomInt.class);\r\n            if (injectRandomInt != null) {\r\n                int min = injectRandomInt.min();\r\n                int max = injectRandomInt.max();\r\n                int randomValue = randomIntGenerator.generate(min, max);\r\n                field.setAccessible(true);\r\n                ReflectionUtils.setField(field, bean, randomValue);\r\n            }\r\n        }\r\n        return bean;\r\n    }\r\n}\r\n```","```\r\nINFO org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'randomIntGenerator' of type [com.baeldung.autoproxying.RandomIntGenerator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = {RandomIntProcessor.class, DataCache.class, RandomIntGenerator.class})\r\npublic class NotEligibleForAutoProxyingIntegrationTest {\r\n\r\n    private RandomIntProcessor randomIntProcessor;\r\n\r\n    @Autowired\r\n    private DataCache dataCache;\r\n\r\n    @Test\r\n    public void givenAutowireInBeanPostProcessor_whenSpringContextInitialize_thenNotEligibleLogShouldShow() {\r\n        assertEquals(0, dataCache.getGroup());\r\n    }\r\n}\r\n```","```\r\npublic class RandomIntProcessor implements BeanPostProcessor {\r\n    private final RandomIntGenerator randomIntGenerator;\r\n\r\n    @Lazy\r\n    public RandomIntProcessor(RandomIntGenerator randomIntGenerator) {\r\n        this.randomIntGenerator = randomIntGenerator;\r\n    }\r\n\r\n    @Override\r\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\r\n        //...\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = {RandomIntProcessor.class, DataCache.class, RandomIntGenerator.class})\r\npublic class NotEligibleForAutoProxyingIntegrationTest {\r\n\r\n    private RandomIntProcessor randomIntProcessor;\r\n\r\n    @Autowired\r\n    private DataCache dataCache;\r\n\r\n    @Test\r\n    public void givenAutowireInBeanPostProcessor_whenSpringContextInitialize_thenGroupFieldShouldBePopulated() {\r\n        assertNotEquals(0, dataCache.getGroup());\r\n    }\r\n}\r\n```"]