["```\r\n<dependency>\r\n    <groupId>io.atomix</groupId>\r\n    <artifactId>atomix-all</artifactId>\r\n    <version>1.0.8</version>\r\n</dependency>\r\n```","```\r\nAtomixReplica replica = AtomixReplica.builder(\r\n  new Address(\"localhost\", 8700))\r\n   .withStorage(storage)\r\n   .withTransport(new NettyTransport())\r\n   .build();\r\n```","```\r\nStorage storage = Storage.builder()\r\n  .withDirectory(new File(\"logs\"))\r\n  .withStorageLevel(StorageLevel.DISK)\r\n  .build();\r\n```","```\r\nCompletableFuture<AtomixReplica> future = replica.bootstrap();\r\nfuture.join();\r\n```","```\r\nAtomixReplica replica2 = AtomixReplica.builder(\r\n  new Address(\"localhost\", 8701))\r\n    .withStorage(storage)\r\n    .withTransport(new NettyTransport())\r\n    .build();\r\n\r\nreplica2\r\n  .join(new Address(\"localhost\", 8700))\r\n  .join();\r\n\r\nAtomixReplica replica3 = AtomixReplica.builder(\r\n  new Address(\"localhost\", 8702))\r\n    .withStorage(storage)\r\n    .withTransport(new NettyTransport())\r\n    .build();\r\n\r\nreplica3.join(\r\n  new Address(\"localhost\", 8700), \r\n  new Address(\"localhost\", 8701))\r\n  .join();\r\n```","```\r\nList<Address> cluster = Arrays.asList(\r\n  new Address(\"localhost\", 8700), \r\n  new Address(\"localhost\", 8701), \r\n  new Address(\"localhsot\", 8702));\r\n\r\nAtomixReplica replica1 = AtomixReplica\r\n  .builder(cluster.get(0))\r\n  .build();\r\nreplica1.bootstrap(cluster).join();\r\n\r\nAtomixReplica replica2 = AtomixReplica\r\n  .builder(cluster.get(1))\r\n  .build();\r\n\r\nreplica2.bootstrap(cluster).join();\r\n\r\nAtomixReplica replica3 = AtomixReplica\r\n  .builder(cluster.get(2))\r\n  .build();\r\n\r\nreplica3.bootstrap(cluster).join();\r\n```","```\r\njava -jar atomix-standalone-server.jar \r\n  -address 127.0.0.1:8700 -bootstrap -config atomix.properties\r\n```","```\r\njava -jar atomix-standalone-server.jar \r\n  -address 127.0.0.1:8701 -join 127.0.0.1:8700\r\n```","```\r\nAtomixClient client = AtomixClient.builder()\r\n  .withTransport(new NettyTransport())\r\n  .build();\r\n```","```\r\nclient.connect(cluster)\r\n  .thenRun(() -> {\r\n      System.out.println(\"Client is connected to the cluster!\");\r\n  });\r\n```","```\r\nreplica.getMap(\"map\")\r\n  .thenCompose(m -> m.put(\"bar\", \"Hello world!\"))\r\n  .thenRun(() -> System.out.println(\"Value is set in Distributed Map\"))\r\n  .join();\r\n```","```\r\nString value = client.getMap(\"map\"))\r\n  .thenCompose(m -> m.get(\"bar\"))\r\n  .thenApply(a -> (String) a)\r\n  .get();\r\n```"]