["```\r\n<dependency>\r\n    <groupId>com.googlecode.libphonenumber</groupId>\r\n    <artifactId>libphonenumber</artifactId>\r\n    <version>8.12.10</version>\r\n</dependency>\r\n```","```\r\nPhoneNumberUtil phoneNumberUtil = PhoneNumberUtil.getInstance();\r\n```","```\r\n@Test\r\npublic void givenPhoneNumber_whenPossible_thenValid() {\r\n    PhoneNumber number = new PhoneNumber();\r\n    number.setCountryCode(1).setNationalNumber(123000L);\r\n    assertFalse(phoneNumberUtil.isPossibleNumber(number));\r\n    assertFalse(phoneNumberUtil.isPossibleNumber(\"+1 343 253 00000\", \"US\"));\r\n    assertFalse(phoneNumberUtil.isPossibleNumber(\"(343) 253-00000\", \"US\"));\r\n    assertFalse(phoneNumberUtil.isPossibleNumber(\"dial p for pizza\", \"US\"));\r\n    assertFalse(phoneNumberUtil.isPossibleNumber(\"123-000\", \"US\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPhoneNumber_whenPossibleForType_thenValid() {\r\n    PhoneNumber number = new PhoneNumber();\r\n    number.setCountryCode(54);\r\n\r\n    number.setNationalNumber(123456);\r\n    assertTrue(phoneNumberUtil.isPossibleNumberForType(number, PhoneNumberType.FIXED_LINE));\r\n    assertFalse(phoneNumberUtil.isPossibleNumberForType(number, PhoneNumberType.TOLL_FREE));\r\n\r\n    number.setNationalNumber(12345678901L);\r\n    assertFalse(phoneNumberUtil.isPossibleNumberForType(number, PhoneNumberType.FIXED_LINE));\r\n    assertTrue(phoneNumberUtil.isPossibleNumberForType(number, PhoneNumberType.MOBILE));\r\n    assertFalse(phoneNumberUtil.isPossibleNumberForType(number, PhoneNumberType.TOLL_FREE));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPhoneNumber_whenAlphaNumber_thenValid() {\r\n    assertTrue(phoneNumberUtil.isAlphaNumber(\"325-CARS\"));\r\n    assertTrue(phoneNumberUtil.isAlphaNumber(\"0800 REPAIR\"));\r\n    assertTrue(phoneNumberUtil.isAlphaNumber(\"1-800-MY-APPLE\"));\r\n    assertTrue(phoneNumberUtil.isAlphaNumber(\"1-800-MY-APPLE..\"));\r\n    assertFalse(phoneNumberUtil.isAlphaNumber(\"+876 1234-1234\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPhoneNumber_whenValid_thenOK() throws Exception {\r\n\r\n    PhoneNumber phone = phoneNumberUtil.parse(\"+911234567890\", \r\n      CountryCodeSource.UNSPECIFIED.name());\r\n\r\n    assertTrue(phoneNumberUtil.isValidNumber(phone));\r\n    assertTrue(phoneNumberUtil.isValidNumberForRegion(phone, \"IN\"));\r\n    assertFalse(phoneNumberUtil.isValidNumberForRegion(phone, \"US\"));\r\n    assertTrue(phoneNumberUtil.isValidNumber(phoneNumberUtil.getExampleNumber(\"IN\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPhoneNumber_whenNumberGeographical_thenValid() throws NumberParseException {\r\n\r\n    PhoneNumber phone = phoneNumberUtil.parse(\"+911234567890\", \"IN\");\r\n    assertTrue(phoneNumberUtil.isNumberGeographical(phone));\r\n\r\n    phone = new PhoneNumber().setCountryCode(1).setNationalNumber(2530000L);\r\n    assertFalse(phoneNumberUtil.isNumberGeographical(phone));\r\n\r\n    phone = new PhoneNumber().setCountryCode(800).setNationalNumber(12345678L);\r\n    assertFalse(phoneNumberUtil.isNumberGeographical(phone));\r\n}\r\n```"]