["```\r\n@Entity\r\npublic class DeptEmployee {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private long id;\r\n\r\n    private String title;\r\n\r\n    @ManyToOne\r\n    private Department department;\r\n}\r\n```","```\r\n@Entity\r\npublic class Department {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private long id;\r\n\r\n    private String name;\r\n\r\n    @OneToMany(mappedBy=\"department\")\r\n    private List<DeptEmployee> employees;\r\n}\r\n```","```\r\nCriteriaQuery<DeptEmployee> criteriaQuery = \r\n  criteriaBuilder.createQuery(DeptEmployee.class);\r\nRoot<DeptEmployee> root = criteriaQuery.from(DeptEmployee.class);\r\nIn<String> inClause = criteriaBuilder.in(root.get(\"title\"));\r\nfor (String title : titles) {\r\n    inClause.value(title);\r\n}\r\ncriteriaQuery.select(root).where(inClause);\r\n```","```\r\ncriteriaQuery.select(root)\r\n  .where(root.get(\"title\")\r\n  .in(titles));\r\n```","```\r\nSubquery<Department> subquery = criteriaQuery.subquery(Department.class);\r\nRoot<Department> dept = subquery.from(Department.class);\r\nsubquery.select(dept)\r\n  .distinct(true)\r\n  .where(criteriaBuilder.like(dept.get(\"name\"), \"%\" + searchKey + \"%\"));\r\n\r\ncriteriaQuery.select(emp)\r\n  .where(criteriaBuilder.in(emp.get(\"department\")).value(subquery));\r\n```"]