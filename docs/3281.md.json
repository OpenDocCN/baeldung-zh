["```\r\nint value = Integer.MAX_VALUE-1;\r\nfor(int i = 0; i < 4; i++, value++) {\r\n    System.out.println(value);\r\n}\r\n```","```\r\n2147483646\r\n2147483647\r\n-2147483648\r\n-2147483647 \r\n```","```\r\nBigInteger largeValue = new BigInteger(Integer.MAX_VALUE + \"\");\r\nfor(int i = 0; i < 4; i++) {\r\n    System.out.println(largeValue);\r\n    largeValue = largeValue.add(BigInteger.ONE);\r\n}\r\n```","```\r\n2147483647\r\n2147483648\r\n2147483649\r\n2147483650\r\n```","```\r\nint value = Integer.MAX_VALUE-1;\r\nfor(int i = 0; i < 4; i++) {\r\n    System.out.println(value);\r\n    value = Math.addExact(value, 1);\r\n}\r\n```","```\r\n2147483646\r\n2147483647\r\nException in thread \"main\" java.lang.ArithmeticException: integer overflow\r\n\tat java.lang.Math.addExact(Math.java:790)\r\n\tat baeldung.underoverflow.OverUnderflow.main(OverUnderflow.java:115)\r\n```","```\r\npublic static intÂ toIntExact(long a)\r\n```","```\r\nBigInteger largeValue = BigInteger.TEN;\r\nlong longValue = largeValue.longValueExact();\r\nint intValue = largeValue.intValueExact();\r\n```","```\r\npublic static int addExact(int x, int y) {\r\n    int r = x + y;\r\n    if (((x ^ r) & (y ^ r)) < 0) {\r\n        throw new ArithmeticException(\"int overflow\");\r\n    }\r\n    return r;\r\n}\r\n```","```\r\nassertTrue(Double.MAX_VALUE + 1 == Double.MIN_VALUE);\r\n```","```\r\nassertTrue(Double.MAX_VALUE + 1 == Double.MAX_VALUE);\r\n```","```\r\nassertTrue(Double.MAX_VALUE * 2 == Double.POSITIVE_INFINITY);\r\n```","```\r\nassertTrue(Double.MAX_VALUE * -2 == Double.NEGATIVE_INFINITY);\r\n```","```\r\nfor(int i = 1073; i <= 1076; i++) {\r\n    System.out.println(\"2^\" + i + \" = \" + Math.pow(2, -i));\r\n}\r\n```","```\r\n2^1073 = 1.0E-323\r\n2^1074 = 4.9E-324\r\n2^1075 = 0.0\r\n2^1076 = 0.0 \r\n```","```\r\npublic static double powExact(double base, double exponent) {\r\n    if(base == 0.0) {\r\n        return 0.0;\r\n    }\r\n\r\n    double result = Math.pow(base, exponent);\r\n\r\n    if(result == Double.POSITIVE_INFINITY ) {\r\n        throw new ArithmeticException(\"Double overflow resulting in POSITIVE_INFINITY\");\r\n    } else if(result == Double.NEGATIVE_INFINITY) {\r\n        throw new ArithmeticException(\"Double overflow resulting in NEGATIVE_INFINITY\");\r\n    } else if(Double.compare(-0.0f, result) == 0) {\r\n        throw new ArithmeticException(\"Double overflow resulting in negative zero\");\r\n    } else if(Double.compare(+0.0f, result) == 0) {\r\n        throw new ArithmeticException(\"Double overflow resulting in positive zero\");\r\n    }\r\n\r\n    return result;\r\n}\r\n```","```\r\ndouble a = +0f;\r\ndouble b = -0f;\r\n```","```\r\nassertTrue(a == b);\r\n```","```\r\nassertTrue(1/a == Double.POSITIVE_INFINITY);\r\nassertTrue(1/b == Double.NEGATIVE_INFINITY);\r\n```","```\r\nassertTrue(1/a != 1/b);\r\n```"]