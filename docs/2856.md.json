["```\r\n@SpringBootApplication\r\npublic class ExitCodeGeneratorDemoApplication implements ExitCodeGenerator {\r\n\r\n    public static void main(String[] args) {\r\n        System.exit(SpringApplication\r\n          .exit(SpringApplication.run(DemoApplication.class, args)));\r\n    }\r\n\r\n    @Override\r\n    public int getExitCode() {\r\n        return 42;\r\n    }\r\n} \r\n```","```\r\n@Bean\r\nCommandLineRunner createException() {\r\n    return args -> Integer.parseInt(\"test\") ;\r\n}\r\n\r\n@Bean\r\nExitCodeExceptionMapper exitCodeToexceptionMapper() {\r\n    return exception -> {\r\n        // set exit code based on the exception type\r\n        if (exception.getCause() instanceof NumberFormatException) {\r\n            return 80;\r\n        }\r\n        return 1;\r\n    };\r\n} \r\n```","```\r\n@Bean\r\nDemoListener demoListenerBean() {\r\n    return new DemoListener();\r\n}\r\n\r\nprivate static class DemoListener {\r\n    @EventListener\r\n    public void exitEvent(ExitCodeEvent event) {\r\n        System.out.println(\"Exit code: \" + event.getExitCode());\r\n    }\r\n}\r\n```","```\r\npublic class FailedToStartException extends RuntimeException implements ExitCodeGenerator {\r\n\r\n    @Override\r\n    public int getExitCode() {\r\n        return 42;\r\n    }\r\n} \r\n```"]