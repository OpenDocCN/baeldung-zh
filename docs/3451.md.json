["```\r\n@Transactional\r\nvoid pay() {}\r\n```","```\r\n@NoRepositoryBean\r\ninterface MyUtilityRepository<T, ID extends Serializable> extends CrudRepository<T, ID> {\r\n    Optional<T> findById(ID id);\r\n}\r\n```","```\r\n@Repository\r\ninterface PersonRepository extends MyUtilityRepository<Person, Long> {}\r\n```","```\r\n@Query(\"FROM Person p WHERE p.name = :name\")\r\nPerson findByName(@Param(\"name\") String name);\r\n```","```\r\nclass Person {\r\n\r\n    @Id\r\n    Long id;\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\nclass Person {\r\n\r\n    // ...\r\n\r\n    @Transient\r\n    int age;\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\npublic class Person {\r\n\r\n    // ...\r\n\r\n    @CreatedBy\r\n    User creator;\r\n\r\n    @LastModifiedBy\r\n    User modifier;\r\n\r\n    @CreatedDate\r\n    Date createdAt;\r\n\r\n    @LastModifiedDate\r\n    Date modifiedAt;\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\n@Query(\"SELECT COUNT(*) FROM Person p\")\r\nlong getPersonCount();\r\n```","```\r\n@Query(\"FROM Person p WHERE p.name = :name\")\r\nPerson findByName(@Param(\"name\") String name);\r\n```","```\r\n@Query(value = \"SELECT AVG(p.age) FROM person p\", nativeQuery = true)\r\nint getAverageAge();\r\n```","```\r\n@NamedStoredProcedureQueries({ \r\n    @NamedStoredProcedureQuery(\r\n        name = \"count_by_name\", \r\n        procedureName = \"person.count_by_name\", \r\n        parameters = { \r\n            @StoredProcedureParameter(\r\n                mode = ParameterMode.IN, \r\n                name = \"name\", \r\n                type = String.class),\r\n            @StoredProcedureParameter(\r\n                mode = ParameterMode.OUT, \r\n                name = \"count\", \r\n                type = Long.class) \r\n            }\r\n    ) \r\n})\r\n\r\nclass Person {}\r\n```","```\r\n@Procedure(name = \"count_by_name\")\r\nlong getCountByName(@Param(\"name\") String name);\r\n```","```\r\n@Lock(LockModeType.NONE)\r\n@Query(\"SELECT COUNT(*) FROM Person p\")\r\nlong getPersonCount();\r\n```","```\r\n@Modifying\r\n@Query(\"UPDATE Person p SET p.name = :name WHERE p.id = :id\")\r\nvoid changeName(@Param(\"id\") long id, @Param(\"name\") String name);\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories\r\nclass PersistenceJPAConfig {}\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(basePackages = \"com.baeldung.persistence.dao\")\r\nclass PersistenceJPAConfig {}\r\n```","```\r\n@Document\r\nclass User {}\r\n```","```\r\n@Document(collection = \"user\")\r\nclass User {}\r\n```","```\r\n@Document\r\nclass User {\r\n\r\n    // ...\r\n\r\n    @Field(\"email\")\r\n    String emailAddress;\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\n@Query(\"{ 'name' : ?0 }\")\r\nList<User> findUsersByName(String name);\r\n```","```\r\n@Configuration\r\n@EnableMongoRepositories\r\nclass MongoConfig {}\r\n```","```\r\n@Configuration\r\n@EnableMongoRepositories(basePackages = \"com.baeldung.repository\")\r\nclass MongoConfig {}\r\n```"]