["```\r\nfinal static MongoDBContainer mongoDBContainer = new MongoDBContainer(DockerImageName.parse(\"mongo:4.0.10\"));\r\n\r\n@DynamicPropertySource\r\nstatic void mongoDbProperties(DynamicPropertyRegistry registry) {\r\n    mongoDBContainer.start();\r\n    registry.add(\"spring.data.mongodb.uri\",  mongoDBContainer::getReplicaSetUrl);\r\n}\r\n```","```\r\n@Service\r\npublic class ItemService {\r\n\r\n    private final ItemRepository repository;\r\n\r\n    public ItemService(ItemRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n    @Cacheable(\"items\")\r\n    public Mono<Item> getItem(String id){\r\n        return repository.findById(id);\r\n    }\r\n    public Mono<Item> save(Item item){\r\n        return repository.save(item);\r\n    }\r\n}\r\n```","```\r\nlogging.level.org.springframework.data.mongodb.core.ReactiveMongoTemplate=DEBUG\r\nlogging.level.org.springframework.cache=TRACE\r\n```","```\r\n@Test\r\npublic void givenItem_whenGetItemIsCalled_thenMonoIsCached() {\r\n    Mono<Item> glass = itemService.save(new Item(\"glass\", 1.00));\r\n\r\n    String id = glass.block().get_id();\r\n\r\n    Mono<Item> mono = itemService.getItem(id);\r\n    Item item = mono.block();\r\n\r\n    assertThat(item).isNotNull();\r\n    assertThat(item.getName()).isEqualTo(\"glass\");\r\n    assertThat(item.getPrice()).isEqualTo(1.00);\r\n\r\n    Mono<Item> mono2 = itemService.getItem(id);\r\n    Item item2 = mono2.block();\r\n\r\n    assertThat(item2).isNotNull();\r\n    assertThat(item2.getName()).isEqualTo(\"glass\");\r\n    assertThat(item2.getPrice()).isEqualTo(1.00);\r\n}\r\n```","```\r\nInserting Document containing fields: [name, price, _class] in collection: item...\r\nComputed cache key '618817a52bffe4526c60f6c0' for operation Builder[public reactor.core.publisher.Mono...\r\nNo cache entry for key '618817a52bffe4526c60f6c0' in cache(s) [items]\r\nComputed cache key '618817a52bffe4526c60f6c0' for operation Builder[public reactor.core.publisher.Mono...\r\nfindOne using query: { \"_id\" : \"618817a52bffe4526c60f6c0\"} fields: Document{{}} for class: class com.baeldung.caching.Item in collection: item...\r\nfindOne using query: { \"_id\" : { \"$oid\" : \"618817a52bffe4526c60f6c0\"}} fields: {} in db.collection: test.item\r\nComputed cache key '618817a52bffe4526c60f6c0' for operation Builder[public reactor.core.publisher.Mono...\r\nCache entry for key '618817a52bffe4526c60f6c0' found in cache 'items'\r\nfindOne using query: { \"_id\" : { \"$oid\" : \"618817a52bffe4526c60f6c0\"}} fields: {} in db.collection: test.item \r\n```","```\r\n@Cacheable(\"items\")\r\npublic Mono<Item> getItem_withCache(String id) {\r\n    return repository.findById(id).cache();\r\n}\r\n```","```\r\nInserting Document containing fields: [name, price, _class] in collection: item\r\nComputed cache key '6189242609a72e0bacae1787' for operation Builder[public reactor.core.publisher.Mono...\r\nNo cache entry for key '6189242609a72e0bacae1787' in cache(s) [items]\r\nComputed cache key '6189242609a72e0bacae1787' for operation Builder[public reactor.core.publisher.Mono...\r\nfindOne using query: { \"_id\" : \"6189242609a72e0bacae1787\"} fields: Document{{}} for class: class com.baeldung.caching.Item in collection: item\r\nfindOne using query: { \"_id\" : { \"$oid\" : \"6189242609a72e0bacae1787\"}} fields: {} in db.collection: test.item\r\nComputed cache key '6189242609a72e0bacae1787' for operation Builder[public reactor.core.publisher.Mono...\r\nCache entry for key '6189242609a72e0bacae1787' found in cache 'items'\r\n```","```\r\npublic ItemService(ItemRepository repository) {\r\n    this.repository = repository;\r\n    this.cache = Caffeine.newBuilder().build(this::getItem_withAddons);\r\n}\r\n```","```\r\n@Cacheable(\"items\")\r\npublic Mono<Item> getItem_withAddons(String id) {\r\n    return CacheMono.lookup(cache.asMap(), id)\r\n      .onCacheMissResume(() -> repository.findById(id).cast(Object.class)).cast(Item.class);\r\n} \r\n```"]