["```\r\nModule javaBaseModule = HashMap.class.getModule();\r\n\r\nassertThat(javaBaseModule.isNamed(), is(true));\r\nassertThat(javaBaseModule.getName(), is(\"java.base\"));\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nModule module = Person.class.getModule();\r\n\r\nassertThat(module.isNamed(), is(false));\r\nassertThat(module.getName(), is(nullValue()));\r\n```","```\r\nassertTrue(javaBaseModule.getPackages().contains(\"java.lang.annotation\"));\r\nassertFalse(javaBaseModule.getPackages().contains(\"java.sql\"));\r\n```","```\r\nassertThat(javaBaseModule.getAnnotations().length, is(0));\r\n```","```\r\nassertThat(\r\n  module.getClassLoader().getClass().getName(), \r\n  is(\"jdk.internal.loader.ClassLoaders$AppClassLoader\")\r\n);\r\n```","```\r\nModuleLayer javaBaseModuleLayer = javaBaseModule.getLayer();\r\n```","```\r\nassertTrue(javaBaseModuleLayer.configuration().findModule(\"java.base\").isPresent());\r\n```","```\r\nModuleDescriptor moduleDescriptor = javaBaseModule.getDescriptor();\r\n```","```\r\nModuleDescriptor.Builder moduleBuilder = ModuleDescriptor\r\n  .newModule(\"baeldung.base\");\r\n\r\nModuleDescriptor moduleDescriptor = moduleBuilder.build();\r\n\r\nassertThat(moduleDescriptor.name(), is(\"baeldung.base\"));\r\n```","```\r\nModuleDescriptor moduleDescriptor = javaBaseModule.getDescriptor();\r\n\r\nassertFalse(moduleDescriptor.isAutomatic());\r\nassertFalse(moduleDescriptor.isOpen());\r\n```","```\r\nSet<Requires> javaBaseRequires = javaBaseModule.getDescriptor().requires();\r\nSet<Requires> javaSqlRequires = javaSqlModule.getDescriptor().requires();\r\n\r\nSet<String> javaSqlRequiresNames = javaSqlRequires.stream()\r\n  .map(Requires::name)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(javaBaseRequires, empty());\r\nassertThat(javaSqlRequiresNames, hasItems(\"java.base\", \"java.xml\", \"java.logging\")); \r\n```","```\r\nSet<Provides> javaBaseProvides = javaBaseModule.getDescriptor().provides();\r\nSet<Provides> javaSqlProvides = javaSqlModule.getDescriptor().provides();\r\n\r\nSet<String> javaBaseProvidesService = javaBaseProvides.stream()\r\n  .map(Provides::service)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(javaBaseProvidesService, hasItem(\"java.nio.file.spi.FileSystemProvider\"));\r\nassertThat(javaSqlProvides, empty());\r\n```","```\r\nSet<Exports> javaSqlExports = javaSqlModule.getDescriptor().exports();\r\n\r\nSet<String> javaSqlExportsSource = javaSqlExports.stream()\r\n  .map(Exports::source)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(javaSqlExportsSource, hasItems(\"java.sql\", \"javax.sql\"));\r\n```","```\r\nSet<String> javaSqlUses = javaSqlModule.getDescriptor().uses();\r\n\r\nassertThat(javaSqlUses, hasItem(\"java.sql.Driver\"));\r\n```","```\r\nSet<Opens> javaBaseUses = javaBaseModule.getDescriptor().opens();\r\nSet<Opens> javaSqlUses = javaSqlModule.getDescriptor().opens();\r\n\r\nassertThat(javaBaseUses, empty());\r\nassertThat(javaSqlUses, empty());\r\n```","```\r\nModule updatedModule = module.addExports(\r\n  \"com.baeldung.java9.modules\", javaSqlModule);\r\n\r\nassertTrue(updatedModule.isExported(\"com.baeldung.java9.modules\"));\r\n```","```\r\nModule updatedModule = module.addReads(javaSqlModule);\r\n\r\nassertTrue(updatedModule.canRead(javaSqlModule));\r\n```","```\r\nModule updatedModule = module.addOpens(\r\n  \"com.baeldung.java9.modules\", javaSqlModule);\r\n\r\nassertTrue(updatedModule.isOpen(\"com.baeldung.java9.modules\", javaSqlModule));\r\n```","```\r\nModule updatedModule = module.addUses(Driver.class);\r\n\r\nassertTrue(updatedModule.canUse(Driver.class));\r\n```"]