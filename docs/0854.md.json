["```\r\n@Test\r\npublic void whenIntegerDivision_thenLosesRemainder() {\r\n    assertThat(11 / 4).isEqualTo(2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDoubleDivision_thenKeepsRemainder() {\r\n    assertThat(11 / 4.0).isEqualTo(2.75);\r\n}\r\n```","```\r\n@Test\r\npublic void whenModulo_thenReturnsRemainder() {\r\n    assertThat(11 % 4).isEqualTo(3);\r\n}\r\n```","```\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenDivisionByZero_thenArithmeticException() {\r\n    double result = 1 / 0;\r\n}\r\n\r\n@Test(expected = ArithmeticException.class)\r\npublic void whenModuloByZero_thenArithmeticException() {\r\n    double result = 1 % 0;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDivisorIsOddAndModulusIs2_thenResultIs1() {\r\n    assertThat(3 % 2).isEqualTo(1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDivisorIsEvenAndModulusIs2_thenResultIs0() {\r\n    assertThat(4 % 2).isEqualTo(0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenItemsIsAddedToCircularQueue_thenNoArrayIndexOutOfBounds() {\r\n    int QUEUE_CAPACITY= 10;\r\n    int[] circularQueue = new int[QUEUE_CAPACITY];\r\n    int itemsInserted = 0;\r\n    for (int value = 0; value < 1000; value++) {\r\n        int writeIndex = ++itemsInserted % QUEUE_CAPACITY;\r\n        circularQueue[writeIndex] = value;\r\n    }\r\n}\r\n```"]