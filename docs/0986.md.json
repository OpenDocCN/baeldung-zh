["```\r\nString kotlin = \"Kotlin\";\r\nString java = \"Java\";\r\nString python = \"Python\";\r\nString ruby = \"Ruby\";\r\nTreeSet<String> myTreeSet = Stream.of(ruby, java, kotlin, python).collect(Collectors.toCollection(TreeSet::new));\r\nassertThat(myTreeSet).containsExactly(java, kotlin, python, ruby);\r\n```","```\r\npublic class Player implements Comparable<Player> {\r\n    private String name;\r\n    private int age;\r\n    private int numberOfPlayed;\r\n    private int numberOfWins;\r\n\r\n    public Player(String name, int age, int numberOfPlayed, int numberOfWins) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.numberOfPlayed = numberOfPlayed;\r\n        this.numberOfWins = numberOfWins;\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Player o) {\r\n        return Integer.compare(age, o.age);\r\n    }\r\n\r\n    // getters are omitted\r\n} \r\n```","```\r\n/*                          name  |  age  | num of played | num of wins\r\n                           --------------------------------------------- */\r\nPlayer kai = new Player(   \"Kai\",     26,       28,            7);\r\nPlayer eric = new Player(  \"Eric\",    28,       30,           11);\r\nPlayer saajan = new Player(\"Saajan\",  30,      100,           66);\r\nPlayer kevin = new Player( \"Kevin\",   24,       50,           49);\r\n```","```\r\nTreeSet<Player> myTreeSet = Stream.of(saajan, eric, kai, kevin).collect(Collectors.toCollection(TreeSet::new));\r\nassertThat(myTreeSet).containsExactly(kevin, kai, eric, saajan);\r\n```","```\r\npublic TreeSet(Comparator<? super E> comparator) { ... }\r\n```","```\r\nTreeSet<Player> myTreeSet = Stream.of(saajan, eric, kai, kevin)\r\n  .collect(Collectors.toCollection(() -> new TreeSet<>(Comparator.comparingInt(Player::getNumberOfWins))\r\n));\r\nassertThat(myTreeSet).containsExactly(kai, eric, kevin, saajan);\r\n```","```\r\nTreeSet<Player> myTreeSet = Stream.of(saajan, eric, kai, kevin)\r\n  .collect(Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(player -> BigDecimal.valueOf(player.getNumberOfWins())\r\n    .divide(BigDecimal.valueOf(player.getNumberOfPlayed()), 2, RoundingMode.HALF_UP)))));\r\nassertThat(myTreeSet).containsExactly(kai, eric, saajan, kevin);\r\n```"]