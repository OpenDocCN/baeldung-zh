["```\r\n@Configuration\r\n@EnableTransactionManagement\r\n@PropertySource(\r\n  { \"classpath:persistence-h2.properties\" }\r\n)\r\n@ComponentScan(\r\n  { \"com.baeldung.persistence.dao\", \"com.baeldung.persistence.service\" }\r\n)\r\npublic class PersistenceConfigHibernate3 {   \r\n    // ...    \r\n    @Bean\r\n    public LocalSessionFactoryBean sessionFactory() {\r\n        LocalSessionFactoryBean sessionFactory \r\n          = new LocalSessionFactoryBean();\r\n        Resource config = new ClassPathResource(\"exceptionDemo.cfg.xml\");\r\n        sessionFactory.setDataSource(dataSource());\r\n        sessionFactory.setConfigLocation(config);\r\n        sessionFactory.setHibernateProperties(hibernateProperties());\r\n\r\n        return sessionFactory;\r\n    }    \r\n    // ...\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class EventService {\r\n\r\n    @Autowired\r\n    private IEventDao dao;\r\n\r\n    public void create(Event entity) {\r\n        dao.create(entity);\r\n    }\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"EVENTS\")\r\npublic class Event implements Serializable {\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n    private String description;\r\n\r\n    // ...\r\n }\r\n```","```\r\npublic abstract class AbstractHibernateDao<T extends Serializable> \r\n  implements IOperations<T> {\r\n    private Class<T> clazz;\r\n    @Autowired\r\n    private SessionFactory sessionFactory;\r\n    // ...\r\n\r\n    @Override\r\n    public void create(T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        getCurrentSession().persist(entity);\r\n    }\r\n\r\n    protected Session getCurrentSession() {\r\n        return sessionFactory.getCurrentSession();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { PersistenceConfigHibernate3.class }, \r\n  loader = AnnotationConfigContextLoader.class\r\n)\r\npublic class HibernateExceptionScen1MainIntegrationTest {\r\n    @Autowired\r\n    EventService service;\r\n\r\n    @Rule\r\n    public ExpectedException expectedEx = ExpectedException.none();\r\n\r\n    @Test\r\n    public void whenNoTransBoundToSession_thenException() {\r\n        expectedEx.expectCause(\r\n          IsInstanceOf.<Throwable>instanceOf(HibernateException.class));\r\n        expectedEx.expectMessage(\"No Hibernate Session bound to thread, \"\r\n          + \"and configuration does not allow creation \"\r\n          + \"of non-transactional one here\");\r\n        service.create(new Event(\"from LocalSessionFactoryBean\"));\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { PersistenceConfigHibernate3.class }, \r\n  loader = AnnotationConfigContextLoader.class\r\n)\r\npublic class HibernateExceptionScen1MainIntegrationTest {\r\n    @Autowired\r\n    EventService service;\r\n\r\n    @Rule\r\n    public ExpectedException expectedEx = ExpectedException.none();\r\n\r\n    @Test\r\n    public void whenEntityIsCreated_thenNoExceptions() {\r\n        service.create(new Event(\"from LocalSessionFactoryBean\"));\r\n        List<Event> events = service.findAll();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableTransactionManagement\r\n@PropertySource(\r\n  { \"classpath:persistence-h2.properties\" }\r\n)\r\n@ComponentScan(\r\n  { \"com.baeldung.persistence.dao\", \"com.baeldung.persistence.service\" }\r\n)\r\npublic class PersistenceConfig {\r\n    //...\r\n    @Bean\r\n    public AnnotationSessionFactoryBean sessionFactory() {\r\n        AnnotationSessionFactoryBean sessionFactory \r\n          = new AnnotationSessionFactoryBean();\r\n        sessionFactory.setDataSource(dataSource());\r\n        sessionFactory.setPackagesToScan(\r\n          new String[] { \"com.baeldung.persistence.model\" });\r\n        sessionFactory.setHibernateProperties(hibernateProperties());\r\n\r\n        return sessionFactory;\r\n    }\r\n    // ...\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { PersistenceConfig.class }, \r\n  loader = AnnotationConfigContextLoader.class\r\n)\r\npublic class HibernateExceptionScen2MainIntegrationTest {\r\n    @Autowired\r\n    EventService service;\r\n\r\n    @Rule\r\n    public ExpectedException expectedEx = ExpectedException.none();\r\n\r\n    @Test\r\n    public void whenNoTransBoundToSession_thenException() {\r\n        expectedEx.expectCause(\r\n          IsInstanceOf.<Throwable>instanceOf(HibernateException.class));\r\n        expectedEx.expectMessage(\"No Hibernate Session bound to thread, \"\r\n          + \"and configuration does not allow creation \"\r\n          + \"of non-transactional one here\");\r\n        service.create(new Event(\"from AnnotationSessionFactoryBean\"));\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { PersistenceConfig.class }, \r\n  loader = AnnotationConfigContextLoader.class\r\n)\r\npublic class HibernateExceptionScen2MainIntegrationTest {\r\n    @Autowired\r\n    EventService service;\r\n\r\n    @Rule\r\n    public ExpectedException expectedEx = ExpectedException.none();\r\n\r\n    @Test\r\n    public void whenEntityIsCreated_thenNoExceptions() {\r\n        service.create(new Event(\"from AnnotationSessionFactoryBean\"));\r\n        List<Event> events = service.findAll();\r\n    }\r\n}\r\n```"]