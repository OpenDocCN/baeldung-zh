["```\r\n<dependency>\r\n  <groupId>org.dbunit</groupId>\r\n  <artifactId>dbunit</artifactId>\r\n  <version>2.7.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```","```\r\nCREATE TABLE IF NOT EXISTS CLIENTS\r\n(\r\n    `id`         int AUTO_INCREMENT NOT NULL,\r\n    `first_name` varchar(100)       NOT NULL,\r\n    `last_name`  varchar(100)       NOT NULL,\r\n    PRIMARY KEY (`id`)\r\n);\r\n\r\nCREATE TABLE IF NOT EXISTS ITEMS\r\n(\r\n    `id`       int AUTO_INCREMENT NOT NULL,\r\n    `title`    varchar(100)       NOT NULL,\r\n    `produced` date,\r\n    `price`    float,\r\n    PRIMARY KEY (`id`)\r\n); \r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<dataset>\r\n    <CLIENTS id='1' first_name='Charles' last_name='Xavier'/>\r\n    <ITEMS id='1' title='Grey T-Shirt' price='17.99' produced='2019-03-20'/>\r\n    <ITEMS id='2' title='Fitted Hat' price='29.99' produced='2019-03-21'/>\r\n    <ITEMS id='3' title='Backpack' price='54.99' produced='2019-03-22'/>\r\n    <ITEMS id='4' title='Earrings' price='14.99' produced='2019-03-23'/>\r\n    <ITEMS id='5' title='Socks' price='9.99'/>\r\n</dataset>\r\n```","```\r\npublic class DataSourceDBUnitTest extends DataSourceBasedDBTestCase {\r\n    @Override\r\n    protected DataSource getDataSource() {\r\n        JdbcDataSource dataSource = new JdbcDataSource();\r\n        dataSource.setURL(\r\n          \"jdbc:h2:mem:default;DB_CLOSE_DELAY=-1;init=runscript from 'classpath:schema.sql'\");\r\n        dataSource.setUser(\"sa\");\r\n        dataSource.setPassword(\"sa\");\r\n        return dataSource;\r\n    }\r\n\r\n    @Override\r\n    protected IDataSet getDataSet() throws Exception {\r\n        return new FlatXmlDataSetBuilder().build(getClass().getClassLoader()\r\n          .getResourceAsStream(\"data.xml\"));\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected DatabaseOperation getSetUpOperation() {\r\n    return DatabaseOperation.REFRESH;\r\n}\r\n\r\n@Override\r\nprotected DatabaseOperation getTearDownOperation() {\r\n    return DatabaseOperation.DELETE_ALL;\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataSetEmptySchema_whenDataSetCreated_thenTablesAreEqual() throws Exception {\r\n    IDataSet expectedDataSet = getDataSet();\r\n    ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\r\n    IDataSet databaseDataSet = getConnection().createDataSet();\r\n    ITable actualTable = databaseDataSet.getTable(\"CLIENTS\");\r\n    assertEquals(expectedTable, actualTable);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataSet_whenInsert_thenTableHasNewClient() throws Exception {\r\n    try (InputStream is = getClass().getClassLoader().getResourceAsStream(\"dbunit/expected-user.xml\")) {\r\n        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(is);\r\n        ITable expectedTable = expectedDataSet.getTable(\"CLIENTS\");\r\n        Connection conn = getDataSource().getConnection();\r\n\r\n        conn.createStatement()\r\n            .executeUpdate(\r\n            \"INSERT INTO CLIENTS (first_name, last_name) VALUES ('John', 'Jansen')\");\r\n        ITable actualData = getConnection()\r\n            .createQueryTable(\r\n                \"result_name\",\r\n                \"SELECT * FROM CLIENTS WHERE last_name='Jansen'\");\r\n\r\n        assertEqualsIgnoreCols(expectedTable, actualData, new String[] { \"id\" });\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataSet_whenInsert_thenGetResultsAreStillEqualIfIgnoringColumnsWithDifferentProduced()\r\n  throws Exception {\r\n    Connection connection = tester.getConnection().getConnection();\r\n    String[] excludedColumns = { \"id\", \"produced\" };\r\n    try (InputStream is = getClass().getClassLoader()\r\n      .getResourceAsStream(\"dbunit/expected-ignoring-registered_at.xml\")) {\r\n        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(is);\r\n        ITable expectedTable = excludedColumnsTable(expectedDataSet.getTable(\"ITEMS\"), excludedColumns);\r\n\r\n        connection.createStatement()\r\n          .executeUpdate(\"INSERT INTO ITEMS (title, price, produced)  VALUES('Necklace', 199.99, now())\");\r\n\r\n        IDataSet databaseDataSet = tester.getConnection().createDataSet();\r\n        ITable actualTable = excludedColumnsTable(databaseDataSet.getTable(\"ITEMS\"), excludedColumns);\r\n\r\n        assertEquals(expectedTable, actualTable);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataSet_whenInsertUnexpectedData_thenFailOnAllUnexpectedValues() throws Exception {\r\n    try (InputStream is = getClass().getClassLoader()\r\n      .getResourceAsStream(\"dbunit/expected-multiple-failures.xml\")) {\r\n        IDataSet expectedDataSet = new FlatXmlDataSetBuilder().build(is);\r\n        ITable expectedTable = expectedDataSet.getTable(\"ITEMS\");\r\n        Connection conn = getDataSource().getConnection();\r\n        DiffCollectingFailureHandler collectingHandler = new DiffCollectingFailureHandler();\r\n\r\n        conn.createStatement()\r\n          .executeUpdate(\"INSERT INTO ITEMS (title, price) VALUES ('Battery', '1000000')\");\r\n        ITable actualData = getConnection().createDataSet().getTable(\"ITEMS\");\r\n\r\n        assertEquals(expectedTable, actualData, collectingHandler);\r\n        if (!collectingHandler.getDiffList().isEmpty()) {\r\n            String message = (String) collectingHandler.getDiffList()\r\n                .stream()\r\n                .map(d -> formatDifference((Difference) d))\r\n                .collect(joining(\"\\n\"));\r\n            logger.error(() -> message);\r\n        }\r\n    }\r\n}\r\n\r\nprivate static String formatDifference(Difference diff) {\r\n    return \"expected value in \" + diff.getExpectedTable()\r\n      .getTableMetaData()\r\n      .getTableName() + \".\" + \r\n      diff.getColumnName() + \" row \" + \r\n      diff.getRowIndex() + \":\" + \r\n      diff.getExpectedValue() + \", but was: \" + \r\n      diff.getActualValue();\r\n}\r\n```","```\r\njava.lang.AssertionError: expected value in ITEMS.price row 5:199.99, but was: 1000000.0\r\nexpected value in ITEMS.produced row 5:2019-03-23, but was: null\r\nexpected value in ITEMS.title row 5:Necklace, but was: Battery\r\n\r\n\tat com.baeldung.dbunit.DataSourceDBUnitTest.givenDataSet_whenInsertUnexpectedData_thenFailOnAllUnexpectedValues(DataSourceDBUnitTest.java:91)\r\n```"]