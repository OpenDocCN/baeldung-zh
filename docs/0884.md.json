["```\r\n<dependency>\r\n    <groupId>org.keycloak</groupId>\r\n    <artifactId>keycloak-spring-boot-starter</artifactId>\r\n</dependency>\r\n```","```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.keycloak.bom</groupId>\r\n            <artifactId>keycloak-adapter-bom</artifactId>\r\n            <version>15.0.2</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\nkeycloak.auth-server-url=http://localhost:8180/auth\r\nkeycloak.realm=SpringBootKeycloak\r\nkeycloak.resource=login-app\r\nkeycloak.public-client=true\r\nkeycloak.security-constraints[0].authRoles[0]=user\r\nkeycloak.security-constraints[0].securityCollections[0].patterns[0]=/users/*\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/users\")\r\npublic class UserController {\r\n    @GetMapping(\"/{userId}\")\r\n    public User getCustomer(@PathVariable Long userId) {\r\n        return new User(userId, \"John\", \"Doe\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenUnauthenticated_whenGettingUser_shouldReturnUser() {\r\n    ResponseEntity<User> responseEntity = restTemplate.getForEntity(\"/users/1\", User.class);\r\n\r\n    assertEquals(HttpStatus.SC_OK, responseEntity.getStatusCodeValue());\r\n    assertNotNull(responseEntity.getBody()\r\n        .getFirstname());\r\n}\r\n```","```\r\nkeycloak.enabled=false\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency> \r\n```","```\r\n@KeycloakConfiguration\r\npublic class KeycloakSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) {\r\n        auth.authenticationProvider(keycloakAuthenticationProvider());\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {\r\n        return new NullAuthenticatedSessionStrategy();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        super.configure(http);\r\n\r\n        http.csrf()\r\n            .disable()\r\n            .authorizeRequests()\r\n            .anyRequest()\r\n            .authenticated();\r\n    }\r\n}\r\n```","```\r\n@KeycloakConfiguration\r\n@Profile(\"tests\")\r\npublic class KeycloakSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {\r\n    // ...\r\n}\r\n```","```\r\n@KeycloakConfiguration\r\n@ConditionalOnProperty(name = \"keycloak.enabled\", havingValue = \"true\", matchIfMissing = true)\r\npublic class KeycloakSecurityConfig extends KeycloakWebSecurityConfigurerAdapter {\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\n@ConditionalOnProperty(name = \"keycloak.enabled\", havingValue = \"false\")\r\npublic class DisableSecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(final HttpSecurity http) throws Exception {\r\n        http.csrf()\r\n            .disable()\r\n            .authorizeRequests()\r\n            .anyRequest()\r\n            .permitAll();\r\n    }\r\n}\r\n```"]