["```\r\nByteBuffer buffer = ByteBuffer.allocate(10);\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocateDirect(10);\r\n```","```\r\nbyte[] bytes = new byte[10];\r\nByteBuffer buffer = ByteBuffer.wrap(bytes);\r\n```","```\r\nByteBuffer buffer = ByteBuffer.wrap(bytes, 0, bytes.length);\r\n```","```\r\nByteBuffer = byte array + index\r\n```","```\r\n0 <= mark <= position <= limit <= capacity\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocate(10);\r\n```","```\r\nbyte[] bytes = new byte[10];\r\nByteBuffer buffer = ByteBuffer.wrap(bytes);\r\n```","```\r\nint position = buffer.position(); // 0\r\nint limit = buffer.limit();       // 10\r\nint capacity = buffer.capacity(); // 10\r\n```","```\r\nbuffer.position(2);\r\nbuffer.limit(5);\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocate(10); // mark = -1, position = 0\r\nbuffer.position(2);                          // mark = -1, position = 2\r\nbuffer.mark();                               // mark = 2,  position = 2\r\nbuffer.position(5);                          // mark = 2,  position = 5\r\nbuffer.reset();                              // mark = 2,  position = 2\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocate(10); // mark = -1, position = 0, limit = 10\r\nbuffer.position(2);                          // mark = -1, position = 2, limit = 10\r\nbuffer.mark();                               // mark = 2,  position = 2, limit = 10\r\nbuffer.position(5);                          // mark = 2,  position = 5, limit = 10\r\nbuffer.limit(8);                             // mark = 2,  position = 5, limit = 8\r\n```","```\r\nbuffer.clear();                              // mark = -1, position = 0, limit = 10\r\n```","```\r\nbuffer.flip();                               // mark = -1, position = 0, limit = 5\r\n```","```\r\nbuffer.rewind();                             // mark = -1, position = 0, limit = 8\r\n```","```\r\nbuffer.compact();                            // mark = -1, position = 3, limit = 10\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocate(10); // mark = -1, position = 0, limit = 10\r\nbuffer.position(2);                          // mark = -1, position = 2, limit = 10\r\nbuffer.limit(8);                             // mark = -1, position = 2, limit = 8\r\nboolean flag = buffer.hasRemaining();        // true\r\nint remaining = buffer.remaining();          // 6\r\n```","```\r\npublic abstract byte get();\r\npublic abstract ByteBuffer put(byte b);\r\npublic abstract byte get(int index);\r\npublic abstract ByteBuffer put(int index, byte b);\r\n```","```\r\npublic ByteBuffer get(byte[] dst);\r\npublic ByteBuffer get(byte[] dst, int offset, int length);\r\npublic ByteBuffer put(byte[] src);\r\npublic ByteBuffer put(byte[] src, int offset, int length);\r\n```","```\r\npublic ByteBuffer put(ByteBuffer src);\r\n```","```\r\npublic abstract int getInt();\r\npublic abstract ByteBuffer putInt(int value);\r\npublic abstract int getInt(int index);\r\npublic abstract ByteBuffer putInt(int index, int value);\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocate(10); // mark = -1, position = 0, limit = 10, capacity = 10\r\nbuffer.position(2);                          // mark = -1, position = 2, limit = 10, capacity = 10\r\nbuffer.mark();                               // mark = 2,  position = 2, limit = 10, capacity = 10\r\nbuffer.position(5);                          // mark = 2,  position = 5, limit = 10, capacity = 10\r\nbuffer.limit(8);                             // mark = 2,  position = 5, limit = 8,  capacity = 10\r\n```","```\r\nByteBuffer view = buffer.duplicate();        // mark = 2,  position = 5, limit = 8,  capacity = 10\r\n```","```\r\nByteBuffer view = buffer.slice();            // mark = -1, position = 0, limit = 3,  capacity = 3\r\n```","```\r\nByteBuffer view = buffer.asReadOnlyBuffer(); // mark = 2,  position = 5, limit = 8,  capacity = 10\r\n```","```\r\nbyte[] bytes = new byte[]{\r\n  (byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE, // CAFEBABE ---> cafebabe\r\n  (byte) 0xF0, (byte) 0x07, (byte) 0xBA, (byte) 0x11, // F007BA11 ---> football\r\n  (byte) 0x0F, (byte) 0xF1, (byte) 0xCE               // 0FF1CE   ---> office\r\n};\r\nByteBuffer buffer = ByteBuffer.wrap(bytes);\r\nIntBuffer intBuffer = buffer.asIntBuffer();\r\nint capacity = intBuffer.capacity();                         // 2\r\n```","```\r\nByteBuffer buffer = ByteBuffer.allocateDirect(10);\r\n```","```\r\nbyte[] bytes = new byte[]{(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE};\r\nByteBuffer buffer = ByteBuffer.wrap(bytes);\r\n```","```\r\nbuffer.order(ByteOrder.BIG_ENDIAN);\r\nint val = buffer.getInt();\r\n```","```\r\nbuffer.order(ByteOrder.LITTLE_ENDIAN);\r\nint val = buffer.getInt();\r\n```","```\r\nbyte[] bytes1 = \"World\".getBytes(StandardCharsets.UTF_8);\r\nbyte[] bytes2 = \"HelloWorld\".getBytes(StandardCharsets.UTF_8);\r\n\r\nByteBuffer buffer1 = ByteBuffer.wrap(bytes1);\r\nByteBuffer buffer2 = ByteBuffer.wrap(bytes2);\r\nbuffer2.position(5);\r\n\r\nboolean equal = buffer1.equals(buffer2); // true\r\nint result = buffer1.compareTo(buffer2); // 0\r\n```"]