["```\r\n<dependency>\r\n    <groupId>com.beust</groupId>\r\n    <artifactId>jcommander</artifactId>\r\n    <version>1.78</version>\r\n</dependency>\r\n```","```\r\nclass HelloWorldArgs {\r\n\r\n    @Parameter(\r\n      names = \"--name\",\r\n      description = \"User name\",\r\n      required = true\r\n    )\r\n    private String name;\r\n}\r\n```","```\r\nHelloWorldArgs jArgs = new HelloWorldArgs();\r\nJCommander helloCmd = JCommander.newBuilder()\r\n  .addObject(jArgs)\r\n  .build();\r\nhelloCmd.parse(args);\r\nSystem.out.println(\"Hello \" + jArgs.getName());\r\n```","```\r\n$ java HelloWorldApp --name JavaWorld\r\nHello JavaWorld\r\n```","```\r\n@Parameter(\r\n  names = { \"--customer\", \"-C\" },\r\n  description = \"Id of the Customer who's using the services\",\r\n  arity = 1,\r\n  required = true\r\n)\r\nString customerId; \r\n```","```\r\n$ java App --customer cust0000001A\r\nRead CustomerId: cust0000001A. \r\n```","```\r\n$ java App -C cust0000001A\r\nRead CustomerId: cust0000001A. \r\n```","```\r\n$ java App\r\nException in thread \"main\" com.beust.jcommander.ParameterException:\r\n  The following option is required: [--customer | -C]\r\n```","```\r\n@Parameter(\r\n  names = { \"--itemized\" }\r\n)\r\nprivate boolean itemized; \r\n```","```\r\n$ java App --itemized\r\nRead flag itemized: true. \r\n```","```\r\n@Parameter(\r\n  names = { \"--itemized\" },\r\n  arity = 1\r\n)\r\nprivate boolean itemized = true; \r\n```","```\r\n$ java App --itemized false\r\nRead flag itemized: false. \r\n```","```\r\n@Parameter(\r\n  names = { \"--subscription\", \"-S\" }\r\n)\r\nprivate List<String> subscriptionIds; \r\n```","```\r\n$ java App -S subscriptionA001 -S subscriptionA002 -S subscriptionA003\r\nRead Subscriptions: [subscriptionA001, subscriptionA002, subscriptionA003]. \r\n```","```\r\n$ java App -S subscriptionA001,subscriptionA002,subscriptionA003\r\nRead Subscriptions: [subscriptionA001, subscriptionA002, subscriptionA003]. \r\n```","```\r\nclass ColonParameterSplitter implements IParameterSplitter {\r\n\r\n    @Override\r\n    public List split(String value) {\r\n        return asList(value.split(\":\"));\r\n    }\r\n}\r\n```","```\r\n@Parameter(\r\n  names = { \"--subscription\", \"-S\" },\r\n  splitter = ColonParameterSplitter.class\r\n)\r\nprivate List<String> subscriptionIds; \r\n```","```\r\n$ java App -S \"subscriptionA001:subscriptionA002:subscriptionA003\"\r\nRead Subscriptions: [subscriptionA001, subscriptionA002, subscriptionA003]. \r\n```","```\r\n@Parameter(\r\n  names = { \"--subscription\", \"-S\" },\r\n  variableArity = true\r\n)\r\nprivate List<String> subscriptionIds; \r\n```","```\r\n$ java App -S subscriptionA001 subscriptionA002 subscriptionA003 --itemized\r\nRead Subscriptions: [subscriptionA001, subscriptionA002, subscriptionA003]. \r\n```","```\r\n@Parameter(\r\n  names = { \"--subscription\", \"-S\" },\r\n  arity = 2\r\n)\r\nprivate List<String> subscriptionIds; \r\n```","```\r\n$ java App -S subscriptionA001 subscriptionA002 subscriptionA003\r\nWas passed main parameter 'subscriptionA003' but no main parameter was defined in your arg class \r\n```","```\r\nclass ISO8601TimestampConverter implements IStringConverter<Instant> {\r\n\r\n    private static final DateTimeFormatter TS_FORMATTER = \r\n      DateTimeFormatter.ofPattern(\"uuuu-MM-dd'T'HH:mm:ss\");\r\n\r\n    @Override\r\n    public Instant convert(String value) {\r\n        try {\r\n            return LocalDateTime\r\n              .parse(value, TS_FORMATTER)\r\n              .atOffset(ZoneOffset.UTC)\r\n              .toInstant();\r\n        } catch (DateTimeParseException e) {\r\n            throw new ParameterException(\"Invalid timestamp\");\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Parameter(\r\n  names = { \"--timestamp\" },\r\n  converter = ISO8601TimestampConverter.class\r\n)\r\nprivate Instant timestamp; \r\n```","```\r\n$ java App --timestamp 2019-10-03T10:58:00\r\nRead timestamp: 2019-10-03T10:58:00Z.\r\n```","```\r\nclass UUIDValidator implements IParameterValidator {\r\n\r\n    private static final String UUID_REGEX = \r\n      \"[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}\";\r\n\r\n    @Override\r\n    public void validate(String name, String value) throws ParameterException {\r\n        if (!isValidUUID(value)) {\r\n            throw new ParameterException(\r\n              \"String parameter \" + value + \" is not a valid UUID.\");\r\n        }\r\n    }\r\n\r\n    private boolean isValidUUID(String value) {\r\n        return Pattern.compile(UUID_REGEX)\r\n          .matcher(value)\r\n          .matches();\r\n    }\r\n} \r\n```","```\r\n@Parameter(\r\n  names = { \"--customer\", \"-C\" },\r\n  validateWith = UUIDValidator.class\r\n)\r\nprivate String customerId; \r\n```","```\r\n$ java App --C customer001\r\nString parameter customer001 is not a valid UUID. \r\n```","```\r\n@Parameters(\r\n  commandNames = { \"submit\" },\r\n  commandDescription = \"Submit usage for a given customer and subscription, \" +\r\n    \"accepts one usage item\"\r\n)\r\nclass SubmitUsageCommand {\r\n    //...\r\n}\r\n\r\n@Parameters(\r\n  commandNames = { \"fetch\" },\r\n  commandDescription = \"Fetch charges for a customer in the current month, \" +\r\n    \"can be itemized or aggregated\"\r\n)\r\nclass FetchCurrentChargesCommand {\r\n    //...\r\n} \r\n```","```\r\nSubmitUsageCommand submitUsageCmd = new SubmitUsageCommand();\r\nFetchCurrentChargesCommand fetchChargesCmd = new FetchCurrentChargesCommand();\r\n\r\nJCommander jc = JCommander.newBuilder()\r\n  .addCommand(submitUsageCmd)\r\n  .addCommand(fetchChargesCmd)\r\n  .build(); \r\n```","```\r\njc.parse(args); \r\n```","```\r\nString parsedCmdStr = jc.getParsedCommand(); \r\n```","```\r\nswitch (parsedCmdStr) {\r\n    case \"submit\":\r\n        submitUsageCmd.submit();\r\n        break;\r\n\r\n    case \"fetch\":\r\n        fetchChargesCmd.fetch();\r\n        break;\r\n\r\n    default:\r\n        System.err.println(\"Invalid command: \" + parsedCmdStr);\r\n} \r\n```","```\r\n@Parameter(names = \"--help\", help = true)\r\nprivate boolean help; \r\n```","```\r\nif (cmd.help) {\r\n  jc.usage();\r\n} \r\n```","```\r\n$ java App submit --help\r\nUsage: submit [options]\r\n  Options:\r\n  * --customer, -C     Id of the Customer who's using the services\r\n  * --subscription, -S Id of the Subscription that was purchased\r\n  * --quantity         Used quantity; reported quantity is added over the \r\n                       billing period\r\n  * --pricing-type, -P Pricing type of the usage reported (values: [PRE_RATED, \r\n                       UNRATED]) \r\n  * --timestamp        Timestamp of the usage event, must lie in the current \r\n                       billing period\r\n    --price            If PRE_RATED, unit price to be applied per unit of \r\n                       usage quantity reported \r\n```","```\r\ntry {\r\n  jc.parse(args);\r\n\r\n} catch (ParameterException e) {\r\n  System.err.println(e.getLocalizedMessage());\r\n  jc.usage();\r\n} \r\n```"]