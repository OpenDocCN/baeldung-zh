["```\r\nprivate final AtomicLong seed;\r\n\r\nprotected int next(int bits) {\r\n    long oldseed, nextseed;\r\n    AtomicLong seed = this.seed;\r\n    do {\r\n        oldseed = seed.get();\r\n        nextseed = (oldseed * multiplier + addend) & mask;\r\n    } while (!seed.compareAndSet(oldseed, nextseed));\r\n\r\n    return (int)(nextseed >>> (48 - bits));\r\n}\r\n```","```\r\nint unboundedRandomValue = ThreadLocalRandom.current().nextInt());\r\n```","```\r\nint boundedRandomValue = ThreadLocalRandom.current().nextInt(0, 100);\r\n```","```\r\nExecutorService executor = Executors.newWorkStealingPool();\r\nList<Callable<Integer>> callables = new ArrayList<>();\r\nRandom random = new Random();\r\nfor (int i = 0; i < 1000; i++) {\r\n    callables.add(() -> {\r\n         return random.nextInt();\r\n    });\r\n}\r\nexecutor.invokeAll(callables);\r\n```","```\r\n# Run complete. Total time: 00:00:36\r\nBenchmark                                            Mode Cnt Score    Error    Units\r\nThreadLocalRandomBenchMarker.randomValuesUsingRandom avgt 20  771.613 ± 222.220 us/op\r\n```","```\r\nExecutorService executor = Executors.newWorkStealingPool();\r\nList<Callable<Integer>> callables = new ArrayList<>();\r\nfor (int i = 0; i < 1000; i++) {\r\n    callables.add(() -> {\r\n        return ThreadLocalRandom.current().nextInt();\r\n    });\r\n}\r\nexecutor.invokeAll(callables);\r\n```","```\r\n# Run complete. Total time: 00:00:36\r\nBenchmark                                                       Mode Cnt Score    Error   Units\r\nThreadLocalRandomBenchMarker.randomValuesUsingThreadLocalRandom avgt 20  624.911 ± 113.268 us/op\r\n```","```\r\nstatic final ThreadLocalRandom instance = new ThreadLocalRandom();\r\n\r\npublic static ThreadLocalRandom current() {\r\n    if (U.getInt(Thread.currentThread(), PROBE) == 0)\r\n        localInit();\r\n\r\n    return instance;\r\n}\r\n```","```\r\npublic class Thread implements Runnable {\r\n    // omitted\r\n\r\n    @jdk.internal.vm.annotation.Contended(\"tlr\")\r\n    long threadLocalRandomSeed;\r\n\r\n    @jdk.internal.vm.annotation.Contended(\"tlr\")\r\n    int threadLocalRandomProbe;\r\n\r\n    @jdk.internal.vm.annotation.Contended(\"tlr\")\r\n    int threadLocalRandomSecondarySeed;\r\n}\r\n```"]