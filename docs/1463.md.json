["```\r\n@Test\r\npublic void whenReadFileWithScanner_thenCorrect() throws IOException{\r\n    Scanner scanner = new Scanner(new File(\"test.txt\"));\r\n\r\n    assertTrue(scanner.hasNext());\r\n    assertEquals(\"Hello\", scanner.next());\r\n    assertEquals(\"world\", scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertInputStreamToString_thenConverted()\r\n  throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    FileInputStream inputStream \r\n      = new FileInputStream(\"test.txt\");\r\n\r\n    Scanner scanner = new Scanner(inputStream);\r\n    scanner.useDelimiter(\"A\");\r\n\r\n    String result = scanner.next();\r\n    assertEquals(expectedValue, result);\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingBufferedReader_thenCorrect() \r\n  throws IOException {\r\n    String firstLine = \"Hello world\";\r\n    String secondLine = \"Hi, John\";\r\n    BufferedReader reader \r\n      = new BufferedReader(new FileReader(\"test.txt\"));\r\n\r\n    String result = reader.readLine();\r\n    assertEquals(firstLine, result);\r\n\r\n    result = reader.readLine();\r\n    assertEquals(secondLine, result);\r\n\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingScanner_thenCorrect() \r\n  throws IOException {\r\n    String firstLine = \"Hello world\";\r\n    FileInputStream inputStream \r\n      = new FileInputStream(\"test.txt\");\r\n    Scanner scanner = new Scanner(inputStream);\r\n\r\n    String result = scanner.nextLine();\r\n    assertEquals(firstLine, result);\r\n\r\n    scanner.useDelimiter(\", \");\r\n    assertEquals(\"Hi\", scanner.next());\r\n    assertEquals(\"John\", scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadingInputFromConsole_thenCorrect() {\r\n    String input = \"Hello\";\r\n    InputStream stdin = System.in;\r\n    System.setIn(new ByteArrayInputStream(input.getBytes()));\r\n\r\n    Scanner scanner = new Scanner(System.in);\r\n\r\n    String result = scanner.next();\r\n    assertEquals(input, result);\r\n\r\n    System.setIn(stdin);\r\n    scanner.close();\r\n}\r\n```","```\r\nscanner.nextLine();\r\n```","```\r\nscanner.nextInt();\r\n```","```\r\n@Test\r\npublic void whenValidateInputUsingScanner_thenValidated() \r\n  throws IOException {\r\n    String input = \"2000\";\r\n    InputStream stdin = System.in;\r\n    System.setIn(new ByteArrayInputStream(input.getBytes()));\r\n\r\n    Scanner scanner = new Scanner(System.in);\r\n\r\n    boolean isIntInput = scanner.hasNextInt();\r\n    assertTrue(isIntInput);\r\n\r\n    System.setIn(stdin);\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenScanString_thenCorrect() \r\n  throws IOException {\r\n    String input = \"Hello 1 F 3.5\";\r\n    Scanner scanner = new Scanner(input);\r\n\r\n    assertEquals(\"Hello\", scanner.next());\r\n    assertEquals(1, scanner.nextInt());\r\n    assertEquals(15, scanner.nextInt(16));\r\n    assertEquals(3.5, scanner.nextDouble(), 0.00000001);\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindPatternUsingScanner_thenFound() throws IOException {\r\n    String expectedValue = \"world\";\r\n    FileInputStream inputStream = new FileInputStream(\"test.txt\");\r\n    Scanner scanner = new Scanner(inputStream);\r\n\r\n    String result = scanner.findInLine(\"wo..d\");\r\n    assertEquals(expectedValue, result);\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindPatternInHorizon_thenFound() \r\n  throws IOException {\r\n    String expectedValue = \"world\";\r\n    FileInputStream inputStream = new FileInputStream(\"test.txt\");\r\n    Scanner scanner = new Scanner(inputStream);\r\n\r\n    String result = scanner.findWithinHorizon(\"wo..d\", 5);\r\n    assertNull(result);\r\n\r\n    result = scanner.findWithinHorizon(\"wo..d\", 100);\r\n    assertEquals(expectedValue, result);\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenSkipPatternUsingScanner_thenSkipped() \r\n  throws IOException {\r\n    FileInputStream inputStream = new FileInputStream(\"test.txt\");\r\n    Scanner scanner = new Scanner(inputStream);\r\n\r\n    scanner.skip(\".e.lo\");\r\n\r\n    assertEquals(\"world\", scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenChangeScannerDelimiter_thenChanged() \r\n  throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    String[] splited = expectedValue.split(\"o\");\r\n\r\n    FileInputStream inputStream = new FileInputStream(\"test.txt\");\r\n    Scanner scanner = new Scanner(inputStream);\r\n    scanner.useDelimiter(\"o\");\r\n\r\n    assertEquals(splited[0], scanner.next());\r\n    assertEquals(splited[1], scanner.next());\r\n    assertEquals(splited[2], scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadWithScannerTwoDelimiters_thenCorrect() \r\n  throws IOException {\r\n    Scanner scanner = new Scanner(new File(\"test.txt\"));\r\n    scanner.useDelimiter(\",|-\");\r\n\r\n    assertEquals(\"John\", scanner.next());\r\n    assertEquals(\"Adam\", scanner.next());\r\n    assertEquals(\"Tom\", scanner.next());\r\n\r\n    scanner.close();\r\n}\r\n```"]