["```\r\nObservable.range(1, 10)\r\n  .doOnNext(r -> receivedTotal += r)\r\n  .doOnCompleted(() -> result = \"Completed\")\r\n  .subscribe();\r\n\r\nassertTrue(receivedTotal == 55);\r\nassertTrue(result.equals(\"Completed\"));\r\n```","```\r\nObservable.range(1, 10)\r\n  .doOnEach(new Observer<Integer>() {\r\n      @Override\r\n      public void onCompleted() {\r\n          System.out.println(\"Complete\");\r\n      }\r\n      @Override\r\n      public void onError(Throwable e) {\r\n          e.printStackTrace();\r\n      }\r\n      @Override\r\n      public void onNext(Integer value) {\r\n          receivedTotal += value;\r\n      }\r\n  })\r\n  .doOnSubscribe(() -> result = \"Subscribed\")\r\n  .subscribe();\r\nassertTrue(receivedTotal == 55);\r\nassertTrue(result.equals(\"Subscribed\"));\r\n```","```\r\nthrown.expect(OnErrorNotImplementedException.class);\r\nObservable.empty()\r\n  .single()\r\n  .doOnError(throwable -> { throw new RuntimeException(\"error\");})\r\n  .doOnTerminate(() -> result += \"doOnTerminate\")\r\n  .doAfterTerminate(() -> result += \"_doAfterTerminate\")\r\n  .subscribe();\r\nassertTrue(result.equals(\"doOnTerminate_doAfterTerminate\"));\r\n```","```\r\nObservable.range(1, 5)\r\n  .map(i -> i * 100)\r\n  .doOnNext(i -> {\r\n      emittedTotal += i;\r\n      System.out.println(\"Emitting \" + i\r\n        + \" on thread \" + Thread.currentThread().getName());\r\n  })\r\n  .observeOn(Schedulers.computation())\r\n  .map(i -> i * 10)\r\n  .subscribe(i -> {\r\n      receivedTotal += i;\r\n      System.out.println(\"Received \" + i + \" on thread \"\r\n        + Thread.currentThread().getName());\r\n  });\r\n\r\nThread.sleep(2000);\r\nassertTrue(emittedTotal == 1500);\r\nassertTrue(receivedTotal == 15000);\r\n```","```\r\nObservable.range(1, 5)\r\n  .map(i -> i * 100)\r\n  .doOnNext(i -> {\r\n      emittedTotal += i;\r\n      System.out.println(\"Emitting \" + i\r\n        + \" on thread \" + Thread.currentThread().getName());\r\n  })\r\n  .subscribeOn(Schedulers.computation())\r\n  .map(i -> i * 10)\r\n  .subscribe(i -> {\r\n      receivedTotal += i;\r\n      System.out.println(\"Received \" + i + \" on thread \"\r\n        + Thread.currentThread().getName());\r\n  });\r\n\r\nThread.sleep(2000);\r\nassertTrue(emittedTotal == 1500);\r\nassertTrue(receivedTotal == 15000);\r\n```","```\r\nObservable.range(1, 1)\r\n  .single()\r\n  .subscribe(i -> receivedTotal += i);\r\nassertTrue(receivedTotal == 1);\r\n```","```\r\nObservable.empty()\r\n  .single()\r\n  .onErrorReturn(e -> receivedTotal += 10)\r\n  .subscribe();\r\nassertTrue(receivedTotal == 10);\r\n```","```\r\nObservable.empty()\r\n  .singleOrDefault(\"Default\")\r\n  .subscribe(i -> result +=i);\r\nassertTrue(result.equals(\"Default\"));\r\n```","```\r\nObservable.range(1, 3)\r\n  .singleOrDefault(5)\r\n  .onErrorReturn(e -> receivedTotal += 10)\r\n  .subscribe();\r\nassertTrue(receivedTotal == 10);\r\n```","```\r\nObservable.range(1, 10)\r\n  .timestamp()\r\n  .map(o -> result = o.getClass().toString() )\r\n  .last()\r\n  .subscribe();\r\n\r\nassertTrue(result.equals(\"class rx.schedulers.Timestamped\"));\r\n```","```\r\nObservable source = Observable.interval(1, TimeUnit.SECONDS)\r\n  .take(5)\r\n  .timestamp();\r\n\r\nObservable delayedObservable\r\n  = source.delay(2, TimeUnit.SECONDS);\r\n\r\nsource.subscribe(\r\n  value -> System.out.println(\"source :\" + value),\r\n  t -> System.out.println(\"source error\"),\r\n  () -> System.out.println(\"source completed\"));\r\n\r\ndelayedObservable.subscribe(\r\n  value -> System.out.println(\"delay : \" + value),\r\n  t -> System.out.println(\"delay error\"),\r\n  () -> System.out.println(\"delay completed\"));\r\nThread.sleep(8000);\r\n```","```\r\nObservable.range(1, 3)\r\n  .repeat(3)\r\n  .subscribe(i -> receivedTotal += i);\r\n\r\nassertTrue(receivedTotal == 18);\r\n```","```\r\nObservable<Integer> source =\r\n  Observable.<Integer>create(subscriber -> {\r\n      System.out.println(\"Create\");\r\n      subscriber.onNext(receivedTotal += 5);\r\n      subscriber.onCompleted();\r\n  }).cache();\r\nsource.subscribe(i -> {\r\n  System.out.println(\"element 1\");\r\n  receivedTotal += 1;\r\n});\r\nsource.subscribe(i -> {\r\n  System.out.println(\"element 2\");\r\n  receivedTotal += 2;\r\n});\r\n\r\nassertTrue(receivedTotal == 8);\r\n```","```\r\nObservable<Character> values = Observable.using(\r\n  () -> \"resource\",\r\n  r -> {\r\n      return Observable.create(o -> {\r\n          for (Character c : r.toCharArray()) {\r\n              o.onNext(c);\r\n          }\r\n          o.onCompleted();\r\n      });\r\n  },\r\n  r -> System.out.println(\"Disposed: \" + r)\r\n);\r\nvalues.subscribe(\r\n  v -> result += v,\r\n  e -> result += e\r\n);\r\nassertTrue(result.equals(\"resource\"));\r\n```"]