["```\r\n@Test \r\npublic void whenStringConstructor_thenOK() {\r\n    final char[] charArray = { 'b', 'a', 'e', 'l', 'd', 'u', 'n', 'g' };\r\n    String string = new String(charArray);\r\n    assertThat(string, is(\"baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenStringValueOf_thenOK() {\r\n    final char[] charArray = { 'b', 'a', 'e', 'l', 'd', 'u', 'n', 'g' };\r\n    String string = String.valueOf(charArray);\r\n    assertThat(string, is(\"baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenStringBuilder_thenOK() {\r\n    final char[][] arrayOfCharArray = { { 'b', 'a' }, { 'e', 'l', 'd', 'u' }, { 'n', 'g' } };    \r\n    StringBuilder sb = new StringBuilder();\r\n    for (char[] subArray : arrayOfCharArray) {\r\n        sb.append(subArray);\r\n    }\r\n    assertThat(sb.toString(), is(\"baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenStreamCollectors_thenOK() {\r\n    final Character[] charArray = { 'b', 'a', 'e', 'l', 'd', 'u', 'n', 'g' };\r\n    Stream<Character> charStream = Arrays.stream(charArray);\r\n    String string = charStream.map(String::valueOf).collect(Collectors.joining());\r\n    assertThat(string, is(\"baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenGuavaCommonBaseJoiners_thenOK() {\r\n    final Character[] charArray = { 'b', 'a', 'e', 'l', 'd', 'u', 'n', 'g' };\r\n    String string = Joiner.on(\"|\").join(charArray);\r\n    assertThat(string, is(\"b|a|e|l|d|u|n|g\"));\r\n}\r\n```"]