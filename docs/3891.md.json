["```\r\nprivate long getFolderSize(File folder) {\r\n    long length = 0;\r\n    File[] files = folder.listFiles();\r\n\r\n    int count = files.length;\r\n\r\n    for (int i = 0; i < count; i++) {\r\n        if (files[i].isFile()) {\r\n            length += files[i].length();\r\n        }\r\n        else {\r\n            length += getFolderSize(files[i]);\r\n        }\r\n    }\r\n    return length;\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetFolderSizeRecursive_thenCorrect() {\r\n    long expectedSize = 12607;\r\n\r\n    File folder = new File(\"src/test/resources\");\r\n    long size = getFolderSize(folder);\r\n\r\n    assertEquals(expectedSize, size);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetFolderSizeUsingJava7_thenCorrect() throws IOException {\r\n    long expectedSize = 12607;\r\n\r\n    AtomicLong size = new AtomicLong(0);\r\n    Path folder = Paths.get(\"src/test/resources\");\r\n\r\n    Files.walkFileTree(folder, new SimpleFileVisitor<Path>() {\r\n        @Override\r\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) \r\n          throws IOException {\r\n            size.addAndGet(attrs.size());\r\n            return FileVisitResult.CONTINUE;\r\n        }\r\n    });\r\n\r\n    assertEquals(expectedSize, size.longValue());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetFolderSizeUsingJava8_thenCorrect() throws IOException {\r\n    long expectedSize = 12607;\r\n\r\n    Path folder = Paths.get(\"src/test/resources\");\r\n    long size = Files.walk(folder)\r\n      .filter(p -> p.toFile().isFile())\r\n      .mapToLong(p -> p.toFile().length())\r\n      .sum();\r\n\r\n    assertEquals(expectedSize, size);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetFolderSizeUsingApacheCommonsIO_thenCorrect() {\r\n    long expectedSize = 12607;\r\n\r\n    File folder = new File(\"src/test/resources\");\r\n    long size = FileUtils.sizeOfDirectory(folder);\r\n\r\n    assertEquals(expectedSize, size);\r\n}\r\n```","```\r\n@Test public void whenGetFolderSizeUsingGuava_thenCorrect() { \r\n    long expectedSize = 12607; \r\n    File folder = new File(\"src/test/resources\"); \r\n\r\n    Iterable<File> files = Files.fileTraverser().breadthFirst(folder);\r\n    long size = StreamSupport.stream(files.spliterator(), false) .filter(f -> f.isFile()) \r\n      .mapToLong(File::length).sum(); \r\n\r\n    assertEquals(expectedSize, size); \r\n}\r\n```","```\r\n@Test\r\npublic void whenGetReadableSize_thenCorrect() {\r\n    File folder = new File(\"src/test/resources\");\r\n    long size = getFolderSize(folder);\r\n\r\n    String[] units = new String[] { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\r\n    int unitIndex = (int) (Math.log10(size) / 3);\r\n    double unitValue = 1 << (unitIndex * 10);\r\n\r\n    String readableSize = new DecimalFormat(\"#,##0.#\")\r\n                                .format(size / unitValue) + \" \" \r\n                                + units[unitIndex];\r\n    assertEquals(\"12.3 KB\", readableSize);\r\n}\r\n```"]