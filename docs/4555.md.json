["```\r\n<dependency>\r\n    <groupId>org.apache.ignite</groupId>\r\n    <artifactId>ignite-core</artifactId>\r\n    <version>${ignite.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.ignite</groupId>\r\n    <artifactId>ignite-indexing</artifactId>\r\n    <version>${ignite.version}</version>\r\n</dependency>\r\n```","```\r\nIgnite node started OK (id=53c77dea)\r\nTopology snapshot [ver=1, servers=1, clients=0, CPUs=4, offheap=1.2GB, heap=1.0GB]\r\nData Regions Configured:\r\n^-- default [initSize=256.0 MiB, maxSize=1.2 GiB, persistenceEnabled=false]\r\n```","```\r\nIgnite ignite = Ignition.start();\r\n```","```\r\nIgnite ignite = Ignition.start(\"config/example-cache.xml\");\r\n```","```\r\npublic class CustomLifecycleBean implements LifecycleBean {\r\n\r\n    @Override\r\n    public void onLifecycleEvent(LifecycleEventType lifecycleEventType) \r\n      throws IgniteException {\r\n\r\n        if(lifecycleEventType == LifecycleEventType.AFTER_NODE_START) {\r\n            // ...\r\n        }\r\n    }\r\n}\r\n```","```\r\nIgniteConfiguration configuration = new IgniteConfiguration();\r\nconfiguration.setLifecycleBeans(new CustomLifecycleBean());\r\nIgnite ignite = Ignition.start(configuration);\r\n```","```\r\nIgniteCache<Employee, Integer> cache = ignite.getOrCreateCache(\r\n  \"baeldingCache\");\r\n```","```\r\ncache.put(1, new Employee(1, \"John\", true));\r\ncache.put(2, new Employee(2, \"Anna\", false));\r\ncache.put(3, new Employee(3, \"George\", true));\r\n```","```\r\nEmployee employee = cache.get(1);\r\n```","```\r\nIgniteDataStreamer<Integer, Employee> streamer = ignite\r\n  .dataStreamer(cache.getName());\r\n```","```\r\nstreamer.receiver(StreamTransformer.from((e, arg) -> {\r\n    Employee employee = e.getValue();\r\n    employee.setEmployed(true);\r\n    e.setValue(employee);\r\n    return employee;\r\n}));\r\n```","```\r\nPath path = Paths.get(IgniteStream.class.getResource(\"employees.txt\")\r\n  .toURI());\r\nGson gson = new Gson();\r\nFiles.lines(path)\r\n  .forEach(l -> streamer.addData(\r\n    employee.getId(), \r\n    gson.fromJson(l, Employee.class)));\r\n```","```\r\nClass.forName(\"org.apache.ignite.IgniteJdbcThinDriver\");\r\nConnection conn = DriverManager.getConnection(\"jdbc:ignite:thin://127.0.0.1/\");\r\n```","```\r\nsql.executeUpdate(\"CREATE TABLE Employee (\" +\r\n  \" id LONG PRIMARY KEY, name VARCHAR, isEmployed tinyint(1)) \" +\r\n  \" WITH \\\"template=replicated\\\"\");\r\n```","```\r\nPreparedStatement sql = conn.prepareStatement(\r\n  \"INSERT INTO Employee (id, name, isEmployed) VALUES (?, ?, ?)\");\r\n\r\nsql.setLong(1, 1);\r\nsql.setString(2, \"James\");\r\nsql.setBoolean(3, true);\r\nsql.executeUpdate();\r\n\r\n// add the rest \r\n```","```\r\nResultSet rs \r\n  = sql.executeQuery(\"SELECT e.name, e.isEmployed \" \r\n    + \" FROM Employee e \" \r\n    + \" WHERE e.isEmployed = TRUE \")\r\n```","```\r\nIgniteCache<Integer, Employee> cache = ignite.cache(\"baeldungCache\");\r\n\r\nSqlFieldsQuery sql = new SqlFieldsQuery(\r\n  \"select name from Employee where isEmployed = 'true'\");\r\n\r\nQueryCursor<List<?>> cursor = cache.query(sql);\r\n\r\nfor (List<?> row : cursor) {\r\n    // do something with the row\r\n}\r\n```"]