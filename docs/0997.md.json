["```\r\npublic class RestClientLiveManualTest {\r\n\r\n    @Test(expected = SSLPeerUnverifiedException.class)\r\n    public void whenHttpsUrlIsConsumed_thenException() \r\n      throws ClientProtocolException, IOException {\r\n\r\n        CloseableHttpClient httpClient = HttpClients.createDefault();\r\n        String urlOverHttps\r\n          = \"https://localhost:8082/httpclient-simple\";\r\n        HttpGet getMethod = new HttpGet(urlOverHttps);\r\n\r\n        HttpResponse response = httpClient.execute(getMethod);\r\n        assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    }\r\n}\r\n```","```\r\njavax.net.ssl.SSLPeerUnverifiedException: peer not authenticated\r\n    at sun.security.ssl.SSLSessionImpl.getPeerCertificates(SSLSessionImpl.java:397)\r\n    at org.apache.http.conn.ssl.AbstractVerifier.verify(AbstractVerifier.java:126)\r\n    ...\r\n```","```\r\n@Test\r\npublic final void givenAcceptingAllCertificates_whenHttpsUrlIsConsumed_thenOk() \r\n  throws GeneralSecurityException {\r\n    HttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();\r\n    CloseableHttpClient httpClient = (CloseableHttpClient) requestFactory.getHttpClient();\r\n\r\n    TrustStrategy acceptingTrustStrategy = (cert, authType) -> true;\r\n    SSLSocketFactory sf = new SSLSocketFactory(acceptingTrustStrategy, ALLOW_ALL_HOSTNAME_VERIFIER);\r\n    httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme(\"https\", 8443, sf));\r\n\r\n    ResponseEntity<String> response = new RestTemplate(requestFactory).\r\n      exchange(urlOverHttps, HttpMethod.GET, null, String.class);\r\n    assertThat(response.getStatusCode().value(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic final void givenAcceptingAllCertificates_whenHttpsUrlIsConsumed_thenOk()\r\n  throws GeneralSecurityException {\r\n    TrustStrategy acceptingTrustStrategy = (cert, authType) -> true;\r\n    SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();\r\n    SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext, \r\n      NoopHostnameVerifier.INSTANCE);\r\n\r\n    Registry<ConnectionSocketFactory> socketFactoryRegistry = \r\n      RegistryBuilder.<ConnectionSocketFactory> create()\r\n      .register(\"https\", sslsf)\r\n      .register(\"http\", new PlainConnectionSocketFactory())\r\n      .build();\r\n\r\n    BasicHttpClientConnectionManager connectionManager = \r\n      new BasicHttpClientConnectionManager(socketFactoryRegistry);\r\n    CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(sslsf)\r\n      .setConnectionManager(connectionManager).build();\r\n\r\n    HttpComponentsClientHttpRequestFactory requestFactory = \r\n      new HttpComponentsClientHttpRequestFactory(httpClient);\r\n    ResponseEntity<String> response = new RestTemplate(requestFactory)\r\n      .exchange(urlOverHttps, HttpMethod.GET, null, String.class);\r\n    assertThat(response.getStatusCode().value(), equalTo(200));\r\n}\r\n```","```\r\n@Test(expected = ResourceAccessException.class)\r\npublic void whenHttpsUrlIsConsumed_thenException() {\r\n    String urlOverHttps \r\n      = \"https://localhost:8443/httpclient-simple/api/bars/1\";\r\n    ResponseEntity<String> response \r\n      = new RestTemplate().exchange(urlOverHttps, HttpMethod.GET, null, String.class);\r\n    assertThat(response.getStatusCode().value(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void givenAcceptingAllCertificates_whenHttpsUrlIsConsumed_thenException() \r\n  throws GeneralSecurityException {\r\n    HttpComponentsClientHttpRequestFactory requestFactory \r\n      = new HttpComponentsClientHttpRequestFactory();\r\n    DefaultHttpClient httpClient\r\n      = (DefaultHttpClient) requestFactory.getHttpClient();\r\n    TrustStrategy acceptingTrustStrategy = (cert, authType) -> true\r\n    SSLSocketFactory sf = new SSLSocketFactory(\r\n      acceptingTrustStrategy, ALLOW_ALL_HOSTNAME_VERIFIER);\r\n    httpClient.getConnectionManager().getSchemeRegistry()\r\n      .register(new Scheme(\"https\", 8443, sf));\r\n\r\n    String urlOverHttps\r\n      = \"https://localhost:8443/httpclient-simple/api/bars/1\";\r\n    ResponseEntity<String> response = new RestTemplate(requestFactory).\r\n      exchange(urlOverHttps, HttpMethod.GET, null, String.class);\r\n    assertThat(response.getStatusCode().value(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void givenAcceptingAllCertificatesUsing4_4_whenUsingRestTemplate_thenCorrect() \r\nthrows ClientProtocolException, IOException {\r\n    CloseableHttpClient httpClient\r\n      = HttpClients.custom()\r\n        .setSSLHostnameVerifier(new NoopHostnameVerifier())\r\n        .build();\r\n    HttpComponentsClientHttpRequestFactory requestFactory \r\n      = new HttpComponentsClientHttpRequestFactory();\r\n    requestFactory.setHttpClient(httpClient);\r\n\r\n    ResponseEntity<String> response \r\n      = new RestTemplate(requestFactory).exchange(\r\n      urlOverHttps, HttpMethod.GET, null, String.class);\r\n    assertThat(response.getStatusCode().value(), equalTo(200));\r\n}\r\n```"]