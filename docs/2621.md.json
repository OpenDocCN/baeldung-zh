["```\r\npublic class Operations {\r\n    public double publicSum(int a, double b) {\r\n        return a + b;\r\n    }\r\n\r\n    public static double publicStaticMultiply(float a, long b) {\r\n        return a * b;\r\n    }\r\n\r\n    private boolean privateAnd(boolean a, boolean b) {\r\n        return a && b;\r\n    }\r\n\r\n    protected int protectedMax(int a, int b) {\r\n        return a > b ? a : b;\r\n    }\r\n}\r\n```","```\r\nMethod sumInstanceMethod\r\n  = Operations.class.getMethod(\"publicSum\", int.class, double.class);\r\n\r\nMethod multiplyStaticMethod\r\n  = Operations.class.getMethod(\r\n    \"publicStaticMultiply\", float.class, long.class);\r\n```","```\r\nMethod andPrivateMethod\r\n  = Operations.class.getDeclaredMethod(\r\n    \"privateAnd\", boolean.class, boolean.class);\r\n```","```\r\nMethod maxProtectedMethod\r\n  = Operations.class.getDeclaredMethod(\"protectedMax\", int.class, int.class);\r\n```","```\r\n@Test\r\npublic void givenObject_whenInvokePublicMethod_thenCorrect() {\r\n    Method sumInstanceMethod\r\n      = Operations.class.getMethod(\"publicSum\", int.class, double.class);\r\n\r\n    Operations operationsInstance = new Operations();\r\n    Double result\r\n      = (Double) sumInstanceMethod.invoke(operationsInstance, 1, 3);\r\n\r\n    assertThat(result, equalTo(4.0));\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenInvokeStaticMethod_thenCorrect() {\r\n    Method multiplyStaticMethod\r\n      = Operations.class.getDeclaredMethod(\r\n        \"publicStaticMultiply\", float.class, long.class);\r\n\r\n    Double result\r\n      = (Double) multiplyStaticMethod.invoke(null, 3.5f, 2);\r\n\r\n    assertThat(result, equalTo(7.0));\r\n}\r\n```","```\r\n@Test(expected = IllegalAccessException.class)\r\npublic void givenObject_whenInvokePrivateMethod_thenFail() {\r\n    Method andPrivateMethod\r\n      = Operations.class.getDeclaredMethod(\r\n        \"privateAnd\", boolean.class, boolean.class);\r\n\r\n    Operations operationsInstance = new Operations();\r\n    Boolean result\r\n      = (Boolean) andPrivateMethod.invoke(operationsInstance, true, false);\r\n\r\n    assertFalse(result);\r\n}\r\n\r\n@Test(expected = IllegalAccessException.class)\r\npublic void givenObject_whenInvokeProtectedMethod_thenFail() {\r\n    Method maxProtectedMethod\r\n      = Operations.class.getDeclaredMethod(\r\n        \"protectedMax\", int.class, int.class);\r\n\r\n    Operations operationsInstance = new Operations();\r\n    Integer result\r\n      = (Integer) maxProtectedMethod.invoke(operationsInstance, 2, 4);\r\n\r\n    assertThat(result, equalTo(4));\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenInvokePrivateMethod_thenCorrect() throws Exception {\r\n    Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\r\n    andPrivatedMethod.setAccessible(true);\r\n\r\n    Operations operationsInstance = new Operations();\r\n    Boolean result = (Boolean) andPrivatedMethod.invoke(operationsInstance, true, false);\r\n\r\n    assertFalse(result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenInvokePrivateMethod_thenCheckAccess() throws Exception {\r\n    Operations operationsInstance = new Operations();\r\n    Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\r\n    boolean isAccessEnabled = andPrivatedMethod.canAccess(operationsInstance);\r\n\r\n    assertFalse(isAccessEnabled);\r\n }\r\n```","```\r\n@Test\r\npublic void givenObject_whenInvokePublicMethod_thenEnableAccess() throws Exception {\r\n    Operations operationsInstance = new Operations();\r\n    Method andPrivatedMethod = Operations.class.getDeclaredMethod(\"privateAnd\", boolean.class, boolean.class);\r\n    andPrivatedMethod.trySetAccessible();\r\n    boolean isAccessEnabled = andPrivatedMethod.canAccess(operationsInstance);\r\n\r\n    assertTrue(isAccessEnabled);\r\n}\r\n```"]