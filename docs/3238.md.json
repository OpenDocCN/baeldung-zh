["```\r\npublic class ApiError {\r\n\r\n    private HttpStatus status;\r\n    private String message;\r\n    private List<String> errors;\r\n\r\n    public ApiError(HttpStatus status, String message, List<String> errors) {\r\n        super();\r\n        this.status = status;\r\n        this.message = message;\r\n        this.errors = errors;\r\n    }\r\n\r\n    public ApiError(HttpStatus status, String message, String error) {\r\n        super();\r\n        this.status = status;\r\n        this.message = message;\r\n        errors = Arrays.asList(error);\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class CustomRestExceptionHandler extends ResponseEntityExceptionHandler {\r\n    ...\r\n}\r\n```","```\r\n@Override\r\nprotected ResponseEntity<Object> handleMethodArgumentNotValid(\r\n  MethodArgumentNotValidException ex, \r\n  HttpHeaders headers, \r\n  HttpStatus status, \r\n  WebRequest request) {\r\n    List<String> errors = new ArrayList<String>();\r\n    for (FieldError error : ex.getBindingResult().getFieldErrors()) {\r\n        errors.add(error.getField() + \": \" + error.getDefaultMessage());\r\n    }\r\n    for (ObjectError error : ex.getBindingResult().getGlobalErrors()) {\r\n        errors.add(error.getObjectName() + \": \" + error.getDefaultMessage());\r\n    }\r\n\r\n    ApiError apiError = \r\n      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);\r\n    return handleExceptionInternal(\r\n      ex, apiError, headers, apiError.getStatus(), request);\r\n} \r\n```","```\r\n@Override\r\nprotected ResponseEntity<Object> handleMissingServletRequestParameter(\r\n  MissingServletRequestParameterException ex, HttpHeaders headers, \r\n  HttpStatus status, WebRequest request) {\r\n    String error = ex.getParameterName() + \" parameter is missing\";\r\n\r\n    ApiError apiError = \r\n      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@ExceptionHandler({ ConstraintViolationException.class })\r\npublic ResponseEntity<Object> handleConstraintViolation(\r\n  ConstraintViolationException ex, WebRequest request) {\r\n    List<String> errors = new ArrayList<String>();\r\n    for (ConstraintViolation<?> violation : ex.getConstraintViolations()) {\r\n        errors.add(violation.getRootBeanClass().getName() + \" \" + \r\n          violation.getPropertyPath() + \": \" + violation.getMessage());\r\n    }\r\n\r\n    ApiError apiError = \r\n      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@ExceptionHandler({ MethodArgumentTypeMismatchException.class })\r\npublic ResponseEntity<Object> handleMethodArgumentTypeMismatch(\r\n  MethodArgumentTypeMismatchException ex, WebRequest request) {\r\n    String error = \r\n      ex.getName() + \" should be of type \" + ex.getRequiredType().getName();\r\n\r\n    ApiError apiError = \r\n      new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void whenMethodArgumentMismatch_thenBadRequest() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"/api/foos/ccc\");\r\n    ApiError error = response.as(ApiError.class);\r\n\r\n    assertEquals(HttpStatus.BAD_REQUEST, error.getStatus());\r\n    assertEquals(1, error.getErrors().size());\r\n    assertTrue(error.getErrors().get(0).contains(\"should be of type\"));\r\n}\r\n```","```\r\nRequest method:\tGET\r\nRequest path:\thttp://localhost:8080/spring-security-rest/api/foos/ccc \r\n```","```\r\n{\r\n    \"status\": \"BAD_REQUEST\",\r\n    \"message\": \r\n      \"Failed to convert value of type [java.lang.String] \r\n       to required type [java.lang.Long]; nested exception \r\n       is java.lang.NumberFormatException: For input string: \\\"ccc\\\"\",\r\n    \"errors\": [\r\n        \"id should be of type java.lang.Long\"\r\n    ]\r\n}\r\n```","```\r\n<servlet>\r\n    <servlet-name>api</servlet-name>\r\n    <servlet-class>\r\n      org.springframework.web.servlet.DispatcherServlet</servlet-class>        \r\n    <init-param>\r\n        <param-name>throwExceptionIfNoHandlerFound</param-name>\r\n        <param-value>true</param-value>\r\n    </init-param>\r\n</servlet>\r\n```","```\r\n@Override\r\nprotected ResponseEntity<Object> handleNoHandlerFoundException(\r\n  NoHandlerFoundException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {\r\n    String error = \"No handler found for \" + ex.getHttpMethod() + \" \" + ex.getRequestURL();\r\n\r\n    ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, ex.getLocalizedMessage(), error);\r\n    return new ResponseEntity<Object>(apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void whenNoHandlerForHttpRequest_thenNotFound() {\r\n    Response response = givenAuth().delete(URL_PREFIX + \"/api/xx\");\r\n    ApiError error = response.as(ApiError.class);\r\n\r\n    assertEquals(HttpStatus.NOT_FOUND, error.getStatus());\r\n    assertEquals(1, error.getErrors().size());\r\n    assertTrue(error.getErrors().get(0).contains(\"No handler found\"));\r\n}\r\n```","```\r\nRequest method:\tDELETE\r\nRequest path:\thttp://localhost:8080/spring-security-rest/api/xx\r\n```","```\r\n{\r\n    \"status\":\"NOT_FOUND\",\r\n    \"message\":\"No handler found for DELETE /spring-security-rest/api/xx\",\r\n    \"errors\":[\r\n        \"No handler found for DELETE /spring-security-rest/api/xx\"\r\n    ]\r\n}\r\n```","```\r\n@Override\r\nprotected ResponseEntity<Object> handleHttpRequestMethodNotSupported(\r\n  HttpRequestMethodNotSupportedException ex, \r\n  HttpHeaders headers, \r\n  HttpStatus status, \r\n  WebRequest request) {\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(ex.getMethod());\r\n    builder.append(\r\n      \" method is not supported for this request. Supported methods are \");\r\n    ex.getSupportedHttpMethods().forEach(t -> builder.append(t + \" \"));\r\n\r\n    ApiError apiError = new ApiError(HttpStatus.METHOD_NOT_ALLOWED, \r\n      ex.getLocalizedMessage(), builder.toString());\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void whenHttpRequestMethodNotSupported_thenMethodNotAllowed() {\r\n    Response response = givenAuth().delete(URL_PREFIX + \"/api/foos/1\");\r\n    ApiError error = response.as(ApiError.class);\r\n\r\n    assertEquals(HttpStatus.METHOD_NOT_ALLOWED, error.getStatus());\r\n    assertEquals(1, error.getErrors().size());\r\n    assertTrue(error.getErrors().get(0).contains(\"Supported methods are\"));\r\n}\r\n```","```\r\nRequest method:\tDELETE\r\nRequest path:\thttp://localhost:8080/spring-security-rest/api/foos/1\r\n```","```\r\n{\r\n    \"status\":\"METHOD_NOT_ALLOWED\",\r\n    \"message\":\"Request method 'DELETE' not supported\",\r\n    \"errors\":[\r\n        \"DELETE method is not supported for this request. Supported methods are GET \"\r\n    ]\r\n}\r\n```","```\r\n@Override\r\nprotected ResponseEntity<Object> handleHttpMediaTypeNotSupported(\r\n  HttpMediaTypeNotSupportedException ex, \r\n  HttpHeaders headers, \r\n  HttpStatus status, \r\n  WebRequest request) {\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(ex.getContentType());\r\n    builder.append(\" media type is not supported. Supported media types are \");\r\n    ex.getSupportedMediaTypes().forEach(t -> builder.append(t + \", \"));\r\n\r\n    ApiError apiError = new ApiError(HttpStatus.UNSUPPORTED_MEDIA_TYPE, \r\n      ex.getLocalizedMessage(), builder.substring(0, builder.length() - 2));\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendInvalidHttpMediaType_thenUnsupportedMediaType() {\r\n    Response response = givenAuth().body(\"\").post(URL_PREFIX + \"/api/foos\");\r\n    ApiError error = response.as(ApiError.class);\r\n\r\n    assertEquals(HttpStatus.UNSUPPORTED_MEDIA_TYPE, error.getStatus());\r\n    assertEquals(1, error.getErrors().size());\r\n    assertTrue(error.getErrors().get(0).contains(\"media type is not supported\"));\r\n}\r\n```","```\r\nRequest method:\tPOST\r\nRequest path:\thttp://localhost:8080/spring-security-\r\nHeaders:\tContent-Type=text/plain; charset=ISO-8859-1\r\n```","```\r\n{\r\n    \"status\":\"UNSUPPORTED_MEDIA_TYPE\",\r\n    \"message\":\"Content type 'text/plain;charset=ISO-8859-1' not supported\",\r\n    \"errors\":[\"text/plain;charset=ISO-8859-1 media type is not supported. \r\n       Supported media types are text/xml \r\n       application/x-www-form-urlencoded \r\n       application/*+xml \r\n       application/json;charset=UTF-8 \r\n       application/*+json;charset=UTF-8 */\"\r\n    ]\r\n}\r\n```","```\r\n@ExceptionHandler({ Exception.class })\r\npublic ResponseEntity<Object> handleAll(Exception ex, WebRequest request) {\r\n    ApiError apiError = new ApiError(\r\n      HttpStatus.INTERNAL_SERVER_ERROR, ex.getLocalizedMessage(), \"error occurred\");\r\n    return new ResponseEntity<Object>(\r\n      apiError, new HttpHeaders(), apiError.getStatus());\r\n}\r\n```"]