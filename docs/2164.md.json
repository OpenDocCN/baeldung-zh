["```\r\npublic class Graph {\r\n\r\n    private Set<Node> nodes = new HashSet<>();\r\n\r\n    public void addNode(Node nodeA) {\r\n        nodes.add(nodeA);\r\n    }\r\n\r\n    // getters and setters \r\n}\r\n```","```\r\npublic class Node {\r\n\r\n    private String name;\r\n\r\n    private List<Node> shortestPath = new LinkedList<>();\r\n\r\n    private Integer distance = Integer.MAX_VALUE;\r\n\r\n    Map<Node, Integer> adjacentNodes = new HashMap<>();\r\n\r\n    public void addDestination(Node destination, int distance) {\r\n        adjacentNodes.put(destination, distance);\r\n    }\r\n\r\n    public Node(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic static Graph calculateShortestPathFromSource(Graph graph, Node source) {\r\n    source.setDistance(0);\r\n\r\n    Set<Node> settledNodes = new HashSet<>();\r\n    Set<Node> unsettledNodes = new HashSet<>();\r\n\r\n    unsettledNodes.add(source);\r\n\r\n    while (unsettledNodes.size() != 0) {\r\n        Node currentNode = getLowestDistanceNode(unsettledNodes);\r\n        unsettledNodes.remove(currentNode);\r\n        for (Entry < Node, Integer> adjacencyPair: \r\n          currentNode.getAdjacentNodes().entrySet()) {\r\n            Node adjacentNode = adjacencyPair.getKey();\r\n            Integer edgeWeight = adjacencyPair.getValue();\r\n            if (!settledNodes.contains(adjacentNode)) {\r\n                calculateMinimumDistance(adjacentNode, edgeWeight, currentNode);\r\n                unsettledNodes.add(adjacentNode);\r\n            }\r\n        }\r\n        settledNodes.add(currentNode);\r\n    }\r\n    return graph;\r\n}\r\n```","```\r\nprivate static Node getLowestDistanceNode(Set < Node > unsettledNodes) {\r\n    Node lowestDistanceNode = null;\r\n    int lowestDistance = Integer.MAX_VALUE;\r\n    for (Node node: unsettledNodes) {\r\n        int nodeDistance = node.getDistance();\r\n        if (nodeDistance < lowestDistance) {\r\n            lowestDistance = nodeDistance;\r\n            lowestDistanceNode = node;\r\n        }\r\n    }\r\n    return lowestDistanceNode;\r\n}\r\n```","```\r\nprivate static void CalculateMinimumDistance(Node evaluationNode,\r\n  Integer edgeWeigh, Node sourceNode) {\r\n    Integer sourceDistance = sourceNode.getDistance();\r\n    if (sourceDistance + edgeWeigh < evaluationNode.getDistance()) {\r\n        evaluationNode.setDistance(sourceDistance + edgeWeigh);\r\n        LinkedList<Node> shortestPath = new LinkedList<>(sourceNode.getShortestPath());\r\n        shortestPath.add(sourceNode);\r\n        evaluationNode.setShortestPath(shortestPath);\r\n    }\r\n}\r\n```","```\r\nNode nodeA = new Node(\"A\");\r\nNode nodeB = new Node(\"B\");\r\nNode nodeC = new Node(\"C\");\r\nNode nodeD = new Node(\"D\"); \r\nNode nodeE = new Node(\"E\");\r\nNode nodeF = new Node(\"F\");\r\n\r\nnodeA.addDestination(nodeB, 10);\r\nnodeA.addDestination(nodeC, 15);\r\n\r\nnodeB.addDestination(nodeD, 12);\r\nnodeB.addDestination(nodeF, 15);\r\n\r\nnodeC.addDestination(nodeE, 10);\r\n\r\nnodeD.addDestination(nodeE, 2);\r\nnodeD.addDestination(nodeF, 1);\r\n\r\nnodeF.addDestination(nodeE, 5);\r\n\r\nGraph graph = new Graph();\r\n\r\ngraph.addNode(nodeA);\r\ngraph.addNode(nodeB);\r\ngraph.addNode(nodeC);\r\ngraph.addNode(nodeD);\r\ngraph.addNode(nodeE);\r\ngraph.addNode(nodeF);\r\n\r\ngraph = Dijkstra.calculateShortestPathFromSource(graph, nodeA); \r\n```"]