["```\r\nSingle<String> employee = Single.just(\"John Doe\");\r\n```","```\r\n@Test\r\nvoid givenASubscriber_whenUsingJust_thenReturnTheCorrectValue() {\r\n    TestSubscriber<String> testSubscriber = new TestSubscriber<>();\r\n    Mockito.when(repository.findById(123L)).thenReturn(\"John Doe\");\r\n\r\n    Single<String> employee = Single.just(repository.findById(123L));\r\n    employee.subscribe(testSubscriber);\r\n\r\n    testSubscriber.assertValue(\"John Doe\");\r\n    testSubscriber.assertCompleted();\r\n}\r\n```","```\r\n@Test\r\nvoid givenNoSubscriber_whenUsingJust_thenDataIsFetched() {\r\n    Mockito.when(repository.findById(123L)).thenReturn(\"John Doe\");\r\n\r\n    Single<String> employee = Single.just(repository.findById(123L));\r\n\r\n    Mockito.verify(repository, times(1)).findById(123L);\r\n}\r\n```","```\r\n@Test\r\nvoid givenNoSubscriber_whenUsingFromCallable_thenNoDataIsFetched() {\r\n    Single<String> employee = Single.fromCallable(() -> repository.findById(123L));\r\n\r\n    Mockito.verify(repository, never()).findById(123L);\r\n}\r\n```","```\r\n@Test\r\nvoid givenASubscriber_whenUsingFromCallable_thenReturnCorrectValue() {\r\n    TestSubscriber<String> testSubscriber = new TestSubscriber<>();\r\n    Mockito.when(repository.findById(123L)).thenReturn(\"John Doe\");\r\n\r\n    Single<String> employee = Single.fromCallable(() -> repository.findById(123L));\r\n    employee.subscribe(testSubscriber);\r\n\r\n    Mockito.verify(repository, times(1)).findById(123L);\r\n    testSubscriber.assertCompleted();\r\n    testSubscriber.assertValue(\"John Doe\");\r\n}\r\n```"]