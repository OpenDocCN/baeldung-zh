["```\r\n@Test\r\npublic void givenStream_whenPrependingObject_thenPrepended() {\r\n    Stream<Integer> anStream = Stream.of(1, 2, 3, 4, 5);\r\n\r\n    Stream<Integer> newStream = Stream.concat(Stream.of(99), anStream);\r\n\r\n    assertEquals(newStream.findFirst().get(), (Integer) 99);\r\n}\r\n```","```\r\n@Test\r\npublic void givenStream_whenAppendingObject_thenAppended() {\r\n    Stream<String> anStream = Stream.of(\"a\", \"b\", \"c\", \"d\", \"e\");\r\n\r\n    Stream<String> newStream = Stream.concat(anStream, Stream.of(\"A\"));\r\n\r\n    List<String> resultList = newStream.collect(Collectors.toList());\r\n\r\n    assertEquals(resultList.get(resultList.size() - 1), \"A\");\r\n}\r\n```","```\r\nprivate static  Stream insertInStream(Stream stream, T elem, int index) {\r\n    Spliterator spliterator = stream.spliterator();\r\n    Iterator iterator = Spliterators.iterator(spliterator);\r\n\r\n    return Stream.concat(Stream.concat(Stream.generate(iterator::next)\r\n      .limit(index), Stream.of(elem)), StreamSupport.stream(spliterator, false));\r\n}\r\n```","```\r\n@Test\r\npublic void givenStream_whenInsertingObject_thenInserted() {\r\n    Stream<Double> anStream = Stream.of(1.1, 2.2, 3.3);\r\n    Stream<Double> newStream = insertInStream(anStream, 9.9, 3);\r\n\r\n    List<Double> resultList = newStream.collect(Collectors.toList());\r\n\r\n    assertEquals(resultList.get(3), (Double) 9.9);\r\n}\r\n```"]