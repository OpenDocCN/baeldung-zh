["```\r\nspring.jpa.open-in-view is enabled by default. Therefore, database \r\nqueries may be performed during view rendering.Explicitly configure \r\nspring.jpa.open-in-view to disable this warning\r\n```","```\r\nspring.jpa.open-in-view=false\r\n```","```\r\n@Entity\r\n@Table(name = \"users\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    @ElementCollection\r\n    private Set<String> permissions;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Service\r\npublic class SimpleUserService implements UserService {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    public SimpleUserService(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n\r\n    @Override\r\n    @Transactional(readOnly = true)\r\n    public Optional<User> findOne(String username) {\r\n        return userRepository.findByUsername(username);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/users\")\r\npublic class UserController {\r\n\r\n    private final UserService userService;\r\n\r\n    public UserController(UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n\r\n    @GetMapping(\"/{username}\")\r\n    public ResponseEntity<?> findOne(@PathVariable String username) {\r\n        return userService\r\n                .findOne(username)\r\n                .map(DetailedUserDto::fromEntity)\r\n                .map(ResponseEntity::ok)\r\n                .orElse(ResponseEntity.notFound().build());\r\n    }\r\n}\r\n```","```\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\n@ActiveProfiles(\"test\")\r\nclass UserControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        User user = new User();\r\n        user.setUsername(\"root\");\r\n        user.setPermissions(new HashSet<>(Arrays.asList(\"PERM_READ\", \"PERM_WRITE\")));\r\n\r\n        userRepository.save(user);\r\n    }\r\n\r\n    @Test\r\n    void givenTheUserExists_WhenOsivIsEnabled_ThenLazyInitWorksEverywhere() throws Exception {\r\n        mockMvc.perform(get(\"/users/root\"))\r\n          .andExpect(status().isOk())\r\n          .andExpect(jsonPath(\"$.username\").value(\"root\"))\r\n          .andExpect(jsonPath(\"$.permissions\", containsInAnyOrder(\"PERM_READ\", \"PERM_WRITE\")));\r\n    }\r\n}\r\n```","```\r\n@Override\r\n@Transactional(readOnly = true)\r\npublic Optional<User> findOne(String username) {\r\n    Optional<User> user = userRepository.findByUsername(username);\r\n    user.ifPresent(u -> Hibernate.initialize(u.getPermissions()));\r\n\r\n    return user;\r\n}\r\n```","```\r\n@Override\r\npublic Optional<User> findOne(String username) {\r\n    Optional<User> user = userRepository.findByUsername(username);\r\n    if (user.isPresent()) {\r\n        // remote call\r\n    }\r\n\r\n    return user;\r\n}\r\n```","```\r\n@Override\r\npublic Optional<User> findOne(String username) {\r\n    Optional<User> user = userRepository.findByUsername(username);\r\n    if (user.isPresent()) {\r\n        // remote call\r\n    }\r\n\r\n    return user;\r\n}\r\n```","```\r\npublic interface UserRepository extends JpaRepository<User, Long> {\r\n\r\n    @EntityGraph(attributePaths = \"permissions\")\r\n    Optional<User> findByUsername(String username);\r\n}\r\n```","```\r\npublic interface UserRepository extends JpaRepository<User, Long> {\r\n    @EntityGraph(attributePaths = \"permissions\")\r\n    Optional<User> findDetailedByUsername(String username);\r\n\r\n    Optional<User> findSummaryByUsername(String username);\r\n}\r\n```","```\r\n@Override\r\n@Transactional(readOnly = true)\r\npublic Optional<User> findOne(String username) {\r\n    Optional<User> user = userRepository.findByUsername(username);\r\n    user.ifPresent(u -> Hibernate.initialize(u.getPermissions()));\r\n\r\n    return user;\r\n}\r\n```","```\r\nOptional<User> user = userRepository.findByUsername(username);\r\nuser.ifPresent(u -> {\r\n    Set<String> permissions = u.getPermissions();\r\n    System.out.println(\"Permissions loaded: \" + permissions.size());\r\n});\r\n```","```\r\n> select u.id, u.username from users u where u.username=?\r\n> select p.user_id, p.permissions from user_permissions p where p.user_id=? \r\n```","```\r\n> select u.id, u.username, p.user_id, p.permissions from users u \r\n  left outer join user_permissions p on u.id=p.user_id where u.username=?\r\n```"]