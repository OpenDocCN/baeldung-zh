["```\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\r\n    public PrototypeBean prototypeBean() {\r\n        return new PrototypeBean();\r\n    }\r\n\r\n    @Bean\r\n    public SingletonBean singletonBean() {\r\n        return new SingletonBean();\r\n    }\r\n}\r\n```","```\r\npublic class SingletonBean {\r\n\r\n    // ..\r\n\r\n    @Autowired\r\n    private PrototypeBean prototypeBean;\r\n\r\n    public SingletonBean() {\r\n        logger.info(\"Singleton instance created\");\r\n    }\r\n\r\n    public PrototypeBean getPrototypeBean() {\r\n        logger.info(String.valueOf(LocalTime.now()));\r\n        return prototypeBean;\r\n    }\r\n}\r\n```","```\r\npublic static void main(String[] args) throws InterruptedException {\r\n    AnnotationConfigApplicationContext context \r\n      = new AnnotationConfigApplicationContext(AppConfig.class);\r\n\r\n    SingletonBean firstSingleton = context.getBean(SingletonBean.class);\r\n    PrototypeBean firstPrototype = firstSingleton.getPrototypeBean();\r\n\r\n    // get singleton bean instance one more time\r\n    SingletonBean secondSingleton = context.getBean(SingletonBean.class);\r\n    PrototypeBean secondPrototype = secondSingleton.getPrototypeBean();\r\n\r\n    isTrue(firstPrototype.equals(secondPrototype), \"The same instance should be returned\");\r\n}\r\n```","```\r\nSingleton Bean created\r\nPrototype Bean created\r\n11:06:57.894\r\n// should create another prototype bean instance here\r\n11:06:58.895\r\n```","```\r\npublic class SingletonAppContextBean implements ApplicationContextAware {\r\n\r\n    private ApplicationContext applicationContext;\r\n\r\n    public PrototypeBean getPrototypeBean() {\r\n        return applicationContext.getBean(PrototypeBean.class);\r\n    }\r\n\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext applicationContext) \r\n      throws BeansException {\r\n        this.applicationContext = applicationContext;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class SingletonLookupBean {\r\n\r\n    @Lookup\r\n    public PrototypeBean getPrototypeBean() {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\npublic class SingletonProviderBean {\r\n\r\n    @Autowired\r\n    private Provider<PrototypeBean> myPrototypeBeanProvider;\r\n\r\n    public PrototypeBean getPrototypeInstance() {\r\n        return myPrototypeBeanProvider.get();\r\n    }\r\n}\r\n```","```\r\n@Scope(\r\n  value = ConfigurableBeanFactory.SCOPE_PROTOTYPE, \r\n  proxyMode = ScopedProxyMode.TARGET_CLASS)\r\n```","```\r\npublic class SingletonObjectFactoryBean {\r\n\r\n    @Autowired\r\n    private ObjectFactory<PrototypeBean> prototypeBeanObjectFactory;\r\n\r\n    public PrototypeBean getPrototypeInstance() {\r\n        return prototypeBeanObjectFactory.getObject();\r\n    }\r\n}\r\n```","```\r\npublic class PrototypeBean {\r\n    private String name;\r\n\r\n    public PrototypeBean(String name) {\r\n        this.name = name;\r\n        logger.info(\"Prototype instance \" + name + \" created\");\r\n    }\r\n\r\n    //...   \r\n}\r\n```","```\r\npublic class SingletonFunctionBean {\r\n\r\n    @Autowired\r\n    private Function<String, PrototypeBean> beanFactory;\r\n\r\n    public PrototypeBean getPrototypeInstance(String name) {\r\n        PrototypeBean bean = beanFactory.apply(name);\r\n        return bean;\r\n    }\r\n\r\n}\r\n```","```\r\n@Configuration\r\npublic class AppConfig {\r\n    @Bean\r\n    public Function<String, PrototypeBean> beanFactory() {\r\n        return name -> prototypeBeanWithParam(name);\r\n    } \r\n\r\n    @Bean\r\n    @Scope(value = \"prototype\")\r\n    public PrototypeBean prototypeBeanWithParam(String name) {\r\n       return new PrototypeBean(name);\r\n    }\r\n\r\n    @Bean\r\n    public SingletonFunctionBean singletonFunctionBean() {\r\n        return new SingletonFunctionBean();\r\n    }\r\n    //...\r\n}\r\n```","```\r\n@Test\r\npublic void givenPrototypeInjection_WhenObjectFactory_ThenNewInstanceReturn() {\r\n\r\n    AbstractApplicationContext context\r\n     = new AnnotationConfigApplicationContext(AppConfig.class);\r\n\r\n    SingletonObjectFactoryBean firstContext\r\n     = context.getBean(SingletonObjectFactoryBean.class);\r\n    SingletonObjectFactoryBean secondContext\r\n     = context.getBean(SingletonObjectFactoryBean.class);\r\n\r\n    PrototypeBean firstInstance = firstContext.getPrototypeInstance();\r\n    PrototypeBean secondInstance = secondContext.getPrototypeInstance();\r\n\r\n    assertTrue(\"New instance expected\", firstInstance != secondInstance);\r\n}\r\n```"]