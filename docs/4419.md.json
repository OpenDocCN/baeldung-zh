["```\r\n<dependency>\r\n    <groupId>org.infinispan</groupId>\r\n    <artifactId>infinispan-core</artifactId>\r\n    <version>9.1.5.Final</version>\r\n</dependency>\r\n```","```\r\npublic DefaultCacheManager cacheManager() {\r\n    return new DefaultCacheManager();\r\n}\r\n```","```\r\npublic class HelloWorldRepository {\r\n    public String getHelloWorld() {\r\n        try {\r\n            System.out.println(\"Executing some heavy query\");\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            // ...\r\n            e.printStackTrace();\r\n        }\r\n        return \"Hello World!\";\r\n    }\r\n}\r\n```","```\r\n@Listener\r\npublic class CacheListener {\r\n    @CacheEntryCreated\r\n    public void entryCreated(CacheEntryCreatedEvent<String, String> event) {\r\n        this.printLog(\"Adding key '\" + event.getKey() \r\n          + \"' to cache\", event);\r\n    }\r\n\r\n    @CacheEntryExpired\r\n    public void entryExpired(CacheEntryExpiredEvent<String, String> event) {\r\n        this.printLog(\"Expiring key '\" + event.getKey() \r\n          + \"' from cache\", event);\r\n    }\r\n\r\n    @CacheEntryVisited\r\n    public void entryVisited(CacheEntryVisitedEvent<String, String> event) {\r\n        this.printLog(\"Key '\" + event.getKey() + \"' was visited\", event);\r\n    }\r\n\r\n    @CacheEntryActivated\r\n    public void entryActivated(CacheEntryActivatedEvent<String, String> event) {\r\n        this.printLog(\"Activating key '\" + event.getKey() \r\n          + \"' on cache\", event);\r\n    }\r\n\r\n    @CacheEntryPassivated\r\n    public void entryPassivated(CacheEntryPassivatedEvent<String, String> event) {\r\n        this.printLog(\"Passivating key '\" + event.getKey() \r\n          + \"' from cache\", event);\r\n    }\r\n\r\n    @CacheEntryLoaded\r\n    public void entryLoaded(CacheEntryLoadedEvent<String, String> event) {\r\n        this.printLog(\"Loading key '\" + event.getKey() \r\n          + \"' to cache\", event);\r\n    }\r\n\r\n    @CacheEntriesEvicted\r\n    public void entriesEvicted(CacheEntriesEvictedEvent<String, String> event) {\r\n        StringBuilder builder = new StringBuilder();\r\n        event.getEntries().forEach(\r\n          (key, value) -> builder.append(key).append(\", \"));\r\n        System.out.println(\"Evicting following entries from cache: \" \r\n          + builder.toString());\r\n    }\r\n\r\n    private void printLog(String log, CacheEntryEvent event) {\r\n        if (!event.isPre()) {\r\n            System.out.println(log);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate <K, V> Cache<K, V> buildCache(\r\n  String cacheName, \r\n  DefaultCacheManager cacheManager, \r\n  CacheListener listener, \r\n  Configuration configuration) {\r\n\r\n    cacheManager.defineConfiguration(cacheName, configuration);\r\n    Cache<K, V> cache = cacheManager.getCache(cacheName);\r\n    cache.addListener(listener);\r\n    return cache;\r\n}\r\n```","```\r\npublic Cache<String, String> simpleHelloWorldCache(\r\n  DefaultCacheManager cacheManager, \r\n  CacheListener listener) {\r\n    return this.buildCache(SIMPLE_HELLO_WORLD_CACHE, \r\n      cacheManager, listener, new ConfigurationBuilder().build());\r\n}\r\n```","```\r\npublic String findSimpleHelloWorld() {\r\n    String cacheKey = \"simple-hello\";\r\n    return simpleHelloWorldCache\r\n      .computeIfAbsent(cacheKey, k -> repository.getHelloWorld());\r\n}\r\n```","```\r\nprotected <T> long timeThis(Supplier<T> supplier) {\r\n    long millis = System.currentTimeMillis();\r\n    supplier.get();\r\n    return System.currentTimeMillis() - millis;\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetIsCalledTwoTimes_thenTheSecondShouldHitTheCache() {\r\n    assertThat(timeThis(() -> helloWorldService.findSimpleHelloWorld()))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(() -> helloWorldService.findSimpleHelloWorld()))\r\n      .isLessThan(100);\r\n}\r\n```","```\r\nprivate Configuration expiringConfiguration() {\r\n    return new ConfigurationBuilder().expiration()\r\n      .lifespan(1, TimeUnit.SECONDS)\r\n      .build();\r\n}\r\n```","```\r\npublic Cache<String, String> expiringHelloWorldCache(\r\n  DefaultCacheManager cacheManager, \r\n  CacheListener listener) {\r\n\r\n    return this.buildCache(EXPIRING_HELLO_WORLD_CACHE, \r\n      cacheManager, listener, expiringConfiguration());\r\n}\r\n```","```\r\npublic String findSimpleHelloWorldInExpiringCache() {\r\n    String cacheKey = \"simple-hello\";\r\n    String helloWorld = expiringHelloWorldCache.get(cacheKey);\r\n    if (helloWorld == null) {\r\n        helloWorld = repository.getHelloWorld();\r\n        expiringHelloWorldCache.put(cacheKey, helloWorld);\r\n    }\r\n    return helloWorld;\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetIsCalledTwoTimesQuickly_thenTheSecondShouldHitTheCache() {\r\n    assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld()))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld()))\r\n      .isLessThan(100);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetIsCalledTwiceSparsely_thenNeitherHitsTheCache()\r\n  throws InterruptedException {\r\n\r\n    assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld()))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    Thread.sleep(1100);\r\n\r\n    assertThat(timeThis(() -> helloWorldService.findExpiringHelloWorld()))\r\n      .isGreaterThanOrEqualTo(1000);\r\n}\r\n```","```\r\nExecuting some heavy query\r\nAdding key 'simple-hello' to cache\r\nExpiring key 'simple-hello' from cache\r\nExecuting some heavy query\r\nAdding key 'simple-hello' to cache\r\n```","```\r\nsimpleHelloWorldCache.put(cacheKey, helloWorld, 10, TimeUnit.SECONDS);\r\n```","```\r\nsimpleHelloWorldCache.put(cacheKey, helloWorld, -1, TimeUnit.SECONDS, 10, TimeUnit.SECONDS);\r\n```","```\r\nprivate Configuration evictingConfiguration() {\r\n    return new ConfigurationBuilder()\r\n      .memory().evictionType(EvictionType.COUNT).size(1)\r\n      .build();\r\n}\r\n```","```\r\npublic String findEvictingHelloWorld(String key) {\r\n    String value = evictingHelloWorldCache.get(key);\r\n    if(value == null) {\r\n        value = repository.getHelloWorld();\r\n        evictingHelloWorldCache.put(key, value);\r\n    }\r\n    return value;\r\n}\r\n```","```\r\n@Test\r\npublic void whenTwoAreAdded_thenFirstShouldntBeAvailable() {\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findEvictingHelloWorld(\"key 1\")))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findEvictingHelloWorld(\"key 2\")))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findEvictingHelloWorld(\"key 1\")))\r\n      .isGreaterThanOrEqualTo(1000);\r\n}\r\n```","```\r\nExecuting some heavy query\r\nAdding key 'key 1' to cache\r\nExecuting some heavy query\r\nEvicting following entries from cache: key 1, \r\nAdding key 'key 2' to cache\r\nExecuting some heavy query\r\nEvicting following entries from cache: key 2, \r\nAdding key 'key 1' to cache\r\n```","```\r\nprivate Configuration passivatingConfiguration() {\r\n    return new ConfigurationBuilder()\r\n      .memory().evictionType(EvictionType.COUNT).size(1)\r\n      .persistence() \r\n      .passivation(true)    // activating passivation\r\n      .addSingleFileStore() // in a single file\r\n      .purgeOnStartup(true) // clean the file on startup\r\n      .location(System.getProperty(\"java.io.tmpdir\")) \r\n      .build();\r\n}\r\n```","```\r\npublic String findPassivatingHelloWorld(String key) {\r\n    return passivatingHelloWorldCache.computeIfAbsent(key, k -> \r\n      repository.getHelloWorld());\r\n}\r\n```","```\r\n@Test\r\npublic void whenTwoAreAdded_thenTheFirstShouldBeAvailable() {\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findPassivatingHelloWorld(\"key 1\")))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findPassivatingHelloWorld(\"key 2\")))\r\n      .isGreaterThanOrEqualTo(1000);\r\n\r\n    assertThat(timeThis(\r\n      () -> helloWorldService.findPassivatingHelloWorld(\"key 1\")))\r\n      .isLessThan(100);\r\n}\r\n```","```\r\nExecuting some heavy query\r\nAdding key 'key 1' to cache\r\nExecuting some heavy query\r\nPassivating key 'key 1' from cache\r\nEvicting following entries from cache: key 1, \r\nAdding key 'key 2' to cache\r\nPassivating key 'key 2' from cache\r\nEvicting following entries from cache: key 2, \r\nLoading key 'key 1' to cache\r\nActivating key 'key 1' on cache\r\nKey 'key 1' was visited\r\n```","```\r\nprivate Configuration transactionalConfiguration() {\r\n    return new ConfigurationBuilder()\r\n      .transaction().transactionMode(TransactionMode.TRANSACTIONAL)\r\n      .lockingMode(LockingMode.PESSIMISTIC)\r\n      .build();\r\n}\r\n```","```\r\npublic Integer getQuickHowManyVisits() {\r\n    TransactionManager tm = transactionalCache\r\n      .getAdvancedCache().getTransactionManager();\r\n    tm.begin();\r\n    Integer howManyVisits = transactionalCache.get(KEY);\r\n    howManyVisits++;\r\n    System.out.println(\"I'll try to set HowManyVisits to \" + howManyVisits);\r\n    StopWatch watch = new StopWatch();\r\n    watch.start();\r\n    transactionalCache.put(KEY, howManyVisits);\r\n    watch.stop();\r\n    System.out.println(\"I was able to set HowManyVisits to \" + howManyVisits + \r\n      \" after waiting \" + watch.getTotalTimeSeconds() + \" seconds\");\r\n\r\n    tm.commit();\r\n    return howManyVisits;\r\n}\r\n```","```\r\npublic void startBackgroundBatch() {\r\n    TransactionManager tm = transactionalCache\r\n      .getAdvancedCache().getTransactionManager();\r\n    tm.begin();\r\n    transactionalCache.put(KEY, 1000);\r\n    System.out.println(\"HowManyVisits should now be 1000, \" +\r\n      \"but we are holding the transaction\");\r\n    Thread.sleep(1000L);\r\n    tm.rollback();\r\n    System.out.println(\"The slow batch suffered a rollback\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenLockingAnEntry_thenItShouldBeInaccessible() throws InterruptedException {\r\n    Runnable backGroundJob = () -> transactionalService.startBackgroundBatch();\r\n    Thread backgroundThread = new Thread(backGroundJob);\r\n    transactionalService.getQuickHowManyVisits();\r\n    backgroundThread.start();\r\n    Thread.sleep(100); //lets wait our thread warm up\r\n\r\n    assertThat(timeThis(() -> transactionalService.getQuickHowManyVisits()))\r\n      .isGreaterThan(500).isLessThan(1000);\r\n}\r\n```","```\r\nAdding key 'key' to cache\r\nKey 'key' was visited\r\nIll try to set HowManyVisits to 1\r\nI was able to set HowManyVisits to 1 after waiting 0.001 seconds\r\nHowManyVisits should now be 1000, but we are holding the transaction\r\nKey 'key' was visited\r\nIll try to set HowManyVisits to 2\r\nI was able to set HowManyVisits to 2 after waiting 0.902 seconds\r\nThe slow batch suffered a rollback\r\n```"]