["```\r\ndouble[][] firstMatrix = {\r\n  new double[]{1d, 5d},\r\n  new double[]{2d, 3d},\r\n  new double[]{1d, 7d}\r\n};\r\n\r\ndouble[][] secondMatrix = {\r\n  new double[]{1d, 2d, 3d, 7d},\r\n  new double[]{5d, 2d, 8d, 1d}\r\n};\r\n```","```\r\ndouble[][] expected = {\r\n  new double[]{26d, 12d, 43d, 12d},\r\n  new double[]{17d, 10d, 30d, 17d},\r\n  new double[]{36d, 16d, 59d, 14d}\r\n};\r\n```","```\r\ndouble[][] multiplyMatrices(double[][] firstMatrix, double[][] secondMatrix) {\r\n    double[][] result = new double[firstMatrix.length][secondMatrix[0].length];\r\n\r\n    for (int row = 0; row < result.length; row++) {\r\n        for (int col = 0; col < result[row].length; col++) {\r\n            result[row][col] = multiplyMatricesCell(firstMatrix, secondMatrix, row, col);\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n```","```\r\ndouble multiplyMatricesCell(double[][] firstMatrix, double[][] secondMatrix, int row, int col) {\r\n    double cell = 0;\r\n    for (int i = 0; i < secondMatrix.length; i++) {\r\n        cell += firstMatrix[row][i] * secondMatrix[i][col];\r\n    }\r\n    return cell;\r\n}\r\n```","```\r\ndouble[][] actual = multiplyMatrices(firstMatrix, secondMatrix);\r\nassertThat(actual).isEqualTo(expected);\r\n```","```\r\n<dependency>\r\n    <groupId>org.ejml</groupId>\r\n    <artifactId>ejml-all</artifactId>\r\n    <version>0.38</version>\r\n</dependency>\r\n```","```\r\nSimpleMatrix firstMatrix = new SimpleMatrix(\r\n  new double[][] {\r\n    new double[] {1d, 5d},\r\n    new double[] {2d, 3d},\r\n    new double[] {1d ,7d}\r\n  }\r\n);\r\n\r\nSimpleMatrix secondMatrix = new SimpleMatrix(\r\n  new double[][] {\r\n    new double[] {1d, 2d, 3d, 7d},\r\n    new double[] {5d, 2d, 8d, 1d}\r\n  }\r\n);\r\n```","```\r\nSimpleMatrix expected = new SimpleMatrix(\r\n  new double[][] {\r\n    new double[] {26d, 12d, 43d, 12d},\r\n    new double[] {17d, 10d, 30d, 17d},\r\n    new double[] {36d, 16d, 59d, 14d}\r\n  }\r\n);\r\n```","```\r\nSimpleMatrix actual = firstMatrix.mult(secondMatrix);\r\n```","```\r\nassertThat(actual).matches(m -> m.isIdentical(expected, 0d));\r\n```","```\r\n<dependency>\r\n    <groupId>org.nd4j</groupId>\r\n    <artifactId>nd4j-native</artifactId>\r\n    <version>1.0.0-beta4</version>\r\n</dependency>\r\n```","```\r\nINDArray matrix = Nd4j.create(/* a two dimensions double array */);\r\n```","```\r\nINDArray actual = firstMatrix.mmul(secondMatrix);\r\n```","```\r\nassertThat(actual).isEqualTo(expected);\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-math3</artifactId>\r\n    <version>3.6.1</version>\r\n</dependency>\r\n```","```\r\nRealMatrix matrix = new Array2DRowRealMatrix(/* a two dimensions double array */);\r\n```","```\r\nRealMatrix actual = firstMatrix.multiply(secondMatrix);\r\n```","```\r\nassertThat(actual).isEqualTo(expected);\r\n```","```\r\n<dependency>\r\n    <groupId>org.la4j</groupId>\r\n    <artifactId>la4j</artifactId>\r\n    <version>0.6.0</version>\r\n</dependency>\r\n```","```\r\nMatrix matrix = new Basic2DMatrix(/* a two dimensions double array */);\r\n```","```\r\nMatrix actual = firstMatrix.multiply(secondMatrix);\r\n```","```\r\nassertThat(actual).isEqualTo(expected);\r\n```","```\r\n<dependency>\r\n    <groupId>colt</groupId>\r\n    <artifactId>colt</artifactId>\r\n    <version>1.2.0</version>\r\n</dependency>\r\n```","```\r\nDoubleMatrix2D matrix = doubleFactory2D.make(/* a two dimensions double array */);\r\n```","```\r\nAlgebra algebra = new Algebra();\r\nDoubleMatrix2D actual = algebra.mult(firstMatrix, secondMatrix);\r\n```","```\r\nassertThat(actual).isEqualTo(expected);\r\n```","```\r\npublic static void main(String[] args) throws Exception {\r\n    Options opt = new OptionsBuilder()\r\n      .include(MatrixMultiplicationBenchmarking.class.getSimpleName())\r\n      .mode(Mode.AverageTime)\r\n      .forks(2)\r\n      .warmupIterations(5)\r\n      .measurementIterations(10)\r\n      .timeUnit(TimeUnit.MICROSECONDS)\r\n      .build();\r\n\r\n    new Runner(opt).run();\r\n}\r\n```","```\r\n@State(Scope.Benchmark)\r\npublic class MatrixProvider {\r\n    private double[][] firstMatrix;\r\n    private double[][] secondMatrix;\r\n\r\n    public MatrixProvider() {\r\n        firstMatrix =\r\n          new double[][] {\r\n            new double[] {1d, 5d},\r\n            new double[] {2d, 3d},\r\n            new double[] {1d ,7d}\r\n          };\r\n\r\n        secondMatrix =\r\n          new double[][] {\r\n            new double[] {1d, 2d, 3d, 7d},\r\n            new double[] {5d, 2d, 8d, 1d}\r\n          };\r\n    }\r\n}\r\n```","```\r\nBenchmark                                                           Mode  Cnt   Score   Error  Units\r\nMatrixMultiplicationBenchmarking.apacheCommonsMatrixMultiplication  avgt   20   1,008 ± 0,032  us/op\r\nMatrixMultiplicationBenchmarking.coltMatrixMultiplication           avgt   20   0,219 ± 0,014  us/op\r\nMatrixMultiplicationBenchmarking.ejmlMatrixMultiplication           avgt   20   0,226 ± 0,013  us/op\r\nMatrixMultiplicationBenchmarking.homemadeMatrixMultiplication       avgt   20   0,389 ± 0,045  us/op\r\nMatrixMultiplicationBenchmarking.la4jMatrixMultiplication           avgt   20   0,427 ± 0,016  us/op\r\nMatrixMultiplicationBenchmarking.nd4jMatrixMultiplication           avgt   20  12,670 ± 2,582  us/op\r\n```","```\r\n@State(Scope.Benchmark)\r\npublic class BigMatrixProvider {\r\n    private double[][] firstMatrix;\r\n    private double[][] secondMatrix;\r\n\r\n    public BigMatrixProvider() {}\r\n\r\n    @Setup\r\n    public void setup(BenchmarkParams parameters) {\r\n        firstMatrix = createMatrix();\r\n        secondMatrix = createMatrix();\r\n    }\r\n\r\n    private double[][] createMatrix() {\r\n        Random random = new Random();\r\n\r\n        double[][] result = new double[3000][3000];\r\n        for (int row = 0; row < result.length; row++) {\r\n            for (int col = 0; col < result[row].length; col++) {\r\n                result[row][col] = random.nextDouble();\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class BigMatrixMultiplicationBenchmarking {\r\n    public static void main(String[] args) throws Exception {\r\n        Map<String, String> parameters = parseParameters(args);\r\n\r\n        ChainedOptionsBuilder builder = new OptionsBuilder()\r\n          .include(BigMatrixMultiplicationBenchmarking.class.getSimpleName())\r\n          .mode(Mode.AverageTime)\r\n          .forks(2)\r\n          .warmupIterations(10)\r\n          .measurementIterations(10)\r\n          .timeUnit(TimeUnit.SECONDS);\r\n\r\n        new Runner(builder.build()).run();\r\n    }\r\n\r\n    @Benchmark\r\n    public Object homemadeMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        return HomemadeMatrix\r\n          .multiplyMatrices(matrixProvider.getFirstMatrix(), matrixProvider.getSecondMatrix());\r\n    }\r\n\r\n    @Benchmark\r\n    public Object ejmlMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        SimpleMatrix firstMatrix = new SimpleMatrix(matrixProvider.getFirstMatrix());\r\n        SimpleMatrix secondMatrix = new SimpleMatrix(matrixProvider.getSecondMatrix());\r\n\r\n        return firstMatrix.mult(secondMatrix);\r\n    }\r\n\r\n    @Benchmark\r\n    public Object apacheCommonsMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        RealMatrix firstMatrix = new Array2DRowRealMatrix(matrixProvider.getFirstMatrix());\r\n        RealMatrix secondMatrix = new Array2DRowRealMatrix(matrixProvider.getSecondMatrix());\r\n\r\n        return firstMatrix.multiply(secondMatrix);\r\n    }\r\n\r\n    @Benchmark\r\n    public Object la4jMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        Matrix firstMatrix = new Basic2DMatrix(matrixProvider.getFirstMatrix());\r\n        Matrix secondMatrix = new Basic2DMatrix(matrixProvider.getSecondMatrix());\r\n\r\n        return firstMatrix.multiply(secondMatrix);\r\n    }\r\n\r\n    @Benchmark\r\n    public Object nd4jMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        INDArray firstMatrix = Nd4j.create(matrixProvider.getFirstMatrix());\r\n        INDArray secondMatrix = Nd4j.create(matrixProvider.getSecondMatrix());\r\n\r\n        return firstMatrix.mmul(secondMatrix);\r\n    }\r\n\r\n    @Benchmark\r\n    public Object coltMatrixMultiplication(BigMatrixProvider matrixProvider) {\r\n        DoubleFactory2D doubleFactory2D = DoubleFactory2D.dense;\r\n\r\n        DoubleMatrix2D firstMatrix = doubleFactory2D.make(matrixProvider.getFirstMatrix());\r\n        DoubleMatrix2D secondMatrix = doubleFactory2D.make(matrixProvider.getSecondMatrix());\r\n\r\n        Algebra algebra = new Algebra();\r\n        return algebra.mult(firstMatrix, secondMatrix);\r\n    }\r\n}\r\n```","```\r\nBenchmark                                                              Mode  Cnt    Score    Error  Units\r\nBigMatrixMultiplicationBenchmarking.apacheCommonsMatrixMultiplication  avgt   20  511.140 ± 13.535   s/op\r\nBigMatrixMultiplicationBenchmarking.coltMatrixMultiplication           avgt   20  197.914 ±  2.453   s/op\r\nBigMatrixMultiplicationBenchmarking.ejmlMatrixMultiplication           avgt   20   25.830 ±  0.059   s/op\r\nBigMatrixMultiplicationBenchmarking.homemadeMatrixMultiplication       avgt   20  497.493 ±  2.121   s/op\r\nBigMatrixMultiplicationBenchmarking.la4jMatrixMultiplication           avgt   20   35.523 ±  0.102   s/op\r\nBigMatrixMultiplicationBenchmarking.nd4jMatrixMultiplication           avgt   20    0.548 ±  0.006   s/op\r\n```"]