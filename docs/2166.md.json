["```\r\n<dependency>\r\n    <groupId>org.springframework.mobile</groupId>\r\n    <artifactId>spring-mobile-device</artifactId>\r\n    <version>2.0.0.M3</version>\r\n</dependency>\r\n```","```\r\n<repositories>\r\n    <repository>\r\n        <id>spring-milestones</id>\r\n        <name>Spring Milestones</name>\r\n        <url>https://repo.spring.io/libs-milestone</url>\r\n        <snapshots>\r\n            <enabled>false</enabled>\r\n        </snapshots>\r\n    </repository>\r\n</repositories>\r\n```","```\r\n└── src\r\n    └── main\r\n        └── resources\r\n            └── templates\r\n                └── index.ftl\r\n                └── mobile\r\n                    └── index.ftl\r\n                └── tablet\r\n                    └── index.ftl\r\n```","```\r\n<h1>You are into browser version</h1>\r\n```","```\r\nspring.mobile.devicedelegatingviewresolver.enabled: true \r\n```","```\r\nspring.mobile.sitepreference.enabled: true\r\n```","```\r\nspring.freemarker.template-loader-path: classpath:/templates\r\nspring.freemarker.suffix: .ftl\r\n```","```\r\n@Controller\r\npublic class IndexController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String greeting(Device device) {\r\n\r\n        String deviceType = \"browser\";\r\n        String platform = \"browser\";\r\n        String viewName = \"index\";\r\n\r\n        if (device.isNormal()) {\r\n            deviceType = \"browser\";\r\n        } else if (device.isMobile()) {\r\n            deviceType = \"mobile\";\r\n            viewName = \"mobile/index\";\r\n        } else if (device.isTablet()) {\r\n            deviceType = \"tablet\";\r\n            viewName = \"tablet/index\";\r\n        }\r\n\r\n        platform = device.getDevicePlatform().name();\r\n\r\n        if (platform.equalsIgnoreCase(\"UNKNOWN\")) {\r\n            platform = \"browser\";\r\n        }\r\n\r\n        return viewName;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class AppConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public DeviceResolverHandlerInterceptor deviceResolverHandlerInterceptor() { \r\n        return new DeviceResolverHandlerInterceptor(); \r\n    }\r\n\r\n    @Bean\r\n    public DeviceHandlerMethodArgumentResolver deviceHandlerMethodArgumentResolver() { \r\n        return new DeviceHandlerMethodArgumentResolver(); \r\n    }\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) { \r\n        registry.addInterceptor(deviceResolverHandlerInterceptor()); \r\n    }\r\n\r\n    @Override\r\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\r\n        argumentResolvers.add(deviceHandlerMethodArgumentResolver()); \r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n?site_preference=mobile\r\n```","```\r\n?site_preference=tablet\r\n```"]