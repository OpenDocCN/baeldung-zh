["```\r\npublic interface PostRepository extends JpaRepository<Post, Long> {\r\n    Page<Post> findByUser(User user, Pageable pageable);\r\n}\r\n```","```\r\nprivate static final int PAGE_SIZE = 10;\r\n\r\n@RequestMapping(\"/scheduledPosts\")\r\n@ResponseBody\r\npublic List<Post> getScheduledPosts(\r\n  @RequestParam(value = \"page\", required = false) int page) {\r\n    User user = getCurrentUser();\r\n    Page<Post> posts = \r\n      postReopsitory.findByUser(user, new PageRequest(page, PAGE_SIZE));\r\n\r\n    return posts.getContent();\r\n}\r\n```","```\r\n<table>\r\n<thead><tr><th>Post title</th></thead>\r\n</table>\r\n<br/>\r\n<button id=\"prev\" onclick=\"loadPrev()\">Previous</button> \r\n<button id=\"next\" onclick=\"loadNext()\">Next</button>\r\n```","```\r\n$(function(){ \r\n    loadPage(0); \r\n}); \r\n\r\nvar currentPage = 0;\r\nfunction loadNext(){ \r\n    loadPage(currentPage+1);\r\n} \r\n\r\nfunction loadPrev(){ \r\n    loadPage(currentPage-1); \r\n}\r\n\r\nfunction loadPage(page){\r\n    currentPage = page;\r\n    $('table').children().not(':first').remove();\r\n    $.get(\"api/scheduledPosts?page=\"+page, function(data){\r\n        $.each(data, function( index, post ) {\r\n            $('.table').append('<tr><td>'+post.title+'</td><td></tr>');\r\n        });\r\n    });\r\n}\r\n```","```\r\n@RequestMapping(\"/\")\r\npublic String homePage() {\r\n    if (SecurityContextHolder.getContext().getAuthentication() != null) {\r\n        return \"home\";\r\n    }\r\n    return \"index\";\r\n}\r\n```","```\r\n@Entity\r\npublic class Post {\r\n    ...\r\n    private int minUpvoteRatio;\r\n    private boolean keepIfHasComments;\r\n    private boolean deleteAfterLastAttempt;\r\n}\r\n```","```\r\n@Scheduled(fixedRate = 3 * 60 * 1000)\r\npublic void checkAndDeleteAll() {\r\n    List<Post> submitted = \r\n      postReopsitory.findByRedditIDNotNullAndNoOfAttemptsAndDeleteAfterLastAttemptTrue(0);\r\n\r\n    for (Post post : submitted) {\r\n        checkAndDelete(post);\r\n    }\r\n}\r\n```","```\r\nprivate void checkAndDelete(Post post) {\r\n    if (didIntervalPass(post.getSubmissionDate(), post.getTimeInterval())) {\r\n        if (didPostGoalFail(post)) {\r\n            deletePost(post.getRedditID());\r\n            post.setSubmissionResponse(\"Consumed Attempts without reaching score\");\r\n            post.setRedditID(null);\r\n            postReopsitory.save(post);\r\n        } else {\r\n            post.setNoOfAttempts(0);\r\n            post.setRedditID(null);\r\n            postReopsitory.save(post);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate boolean didPostGoalFail(Post post) {\r\n    PostScores postScores = getPostScores(post);\r\n    int score = postScores.getScore();\r\n    int upvoteRatio = postScores.getUpvoteRatio();\r\n    int noOfComments = postScores.getNoOfComments();\r\n    return (((score < post.getMinScoreRequired()) || \r\n             (upvoteRatio < post.getMinUpvoteRatio())) && \r\n           !((noOfComments > 0) && post.isKeepIfHasComments()));\r\n}\r\n```","```\r\npublic PostScores getPostScores(Post post) {\r\n    JsonNode node = restTemplate.getForObject(\r\n      \"http://www.reddit.com/r/\" + post.getSubreddit() + \r\n      \"/comments/\" + post.getRedditID() + \".json\", JsonNode.class);\r\n    PostScores postScores = new PostScores();\r\n\r\n    node = node.get(0).get(\"data\").get(\"children\").get(0).get(\"data\");\r\n    postScores.setScore(node.get(\"score\").asInt());\r\n\r\n    double ratio = node.get(\"upvote_ratio\").asDouble();\r\n    postScores.setUpvoteRatio((int) (ratio * 100));\r\n\r\n    postScores.setNoOfComments(node.get(\"num_comments\").asInt());\r\n\r\n    return postScores;\r\n}\r\n```","```\r\npublic class PostScores {\r\n    private int score;\r\n    private int upvoteRatio;\r\n    private int noOfComments;\r\n}\r\n```","```\r\nprivate void checkAndReSubmit(Post post) {\r\n    if (didIntervalPass(post.getSubmissionDate(), post.getTimeInterval())) {\r\n        if (didPostGoalFail(post)) {\r\n            deletePost(post.getRedditID());\r\n            resetPost(post);\r\n        } else {\r\n            post.setNoOfAttempts(0);\r\n            post.setRedditID(null);\r\n            postReopsitory.save(post);\r\n        }\r\n    }\r\n}\r\n```","```\r\n<input type=\"number\" name=\"minUpvoteRatio\"/>\r\n<input type=\"checkbox\" name=\"keepIfHasComments\" value=\"true\"/>\r\n<input type=\"checkbox\" name=\"deleteAfterLastAttempt\" value=\"true\"/>\r\n```","```\r\n<dependency>\r\n    <groupId>javax.activation</groupId>\r\n    <artifactId>activation</artifactId>\r\n    <version>1.1.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>javax.mail</groupId>\r\n    <artifactId>mail</artifactId>\r\n    <version>1.4.1</version>\r\n</dependency>\r\n```","```\r\n<configuration>\r\n\r\n    <appender name=\"STDOUT\" ...\r\n\r\n    <appender name=\"EMAIL\" class=\"ch.qos.logback.classic.net.SMTPAppender\">\r\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <level>ERROR</level>\r\n            <onMatch>ACCEPT</onMatch>\r\n            <onMismatch>DENY</onMismatch>\r\n        </filter>\r\n\r\n        <smtpHost>smtp.example.com</smtpHost>\r\n        <to>[[email protected]](/web/20220120143211/https://www.baeldung.com/cdn-cgi/l/email-protection)</to>\r\n        <from>[[email protected]](/web/20220120143211/https://www.baeldung.com/cdn-cgi/l/email-protection)</from>\r\n        <username>[[email protected]](/web/20220120143211/https://www.baeldung.com/cdn-cgi/l/email-protection)</username>\r\n        <password>password</password>\r\n        <subject>%logger{20} - %m</subject>\r\n        <layout class=\"ch.qos.logback.classic.html.HTMLLayout\"/>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"STDOUT\" />\r\n        <appender-ref ref=\"EMAIL\" />\r\n    </root>\r\n\r\n</configuration>\r\n```","```\r\npublic void getAllSubreddits() {\r\n    JsonNode node;\r\n    String srAfter = \"\";\r\n    FileWriter writer = null;\r\n    try {\r\n        writer = new FileWriter(\"src/main/resources/subreddits.csv\");\r\n        for (int i = 0; i < 20; i++) {\r\n            node = restTemplate.getForObject(\r\n              \"http://www.reddit.com/\" + \"subreddits/popular.json?limit=100&after;=\" + srAfter, \r\n              JsonNode.class);\r\n            srAfter = node.get(\"data\").get(\"after\").asText();\r\n            node = node.get(\"data\").get(\"children\");\r\n            for (JsonNode child : node) {\r\n                writer.append(child.get(\"data\").get(\"display_name\").asText() + \",\");\r\n            }\r\n            try {\r\n                Thread.sleep(3000);\r\n            } catch (InterruptedException e) {\r\n                logger.error(\"Error while getting subreddits\", e);\r\n            }\r\n        }\r\n        writer.close();\r\n    } catch (Exception e) {\r\n        logger.error(\"Error while getting subreddits\", e);\r\n    }\r\n}\r\n```","```\r\npublic void afterPropertiesSet() {\r\n    loadSubreddits();\r\n}\r\nprivate void loadSubreddits() {\r\n    subreddits = new ArrayList<String>();\r\n    try {\r\n        Resource resource = new ClassPathResource(\"subreddits.csv\");\r\n        Scanner scanner = new Scanner(resource.getFile());\r\n        scanner.useDelimiter(\",\");\r\n        while (scanner.hasNext()) {\r\n            subreddits.add(scanner.next());\r\n        }\r\n        scanner.close();\r\n    } catch (IOException e) {\r\n        logger.error(\"error while loading subreddits\", e);\r\n    }\r\n}\r\n```","```\r\npublic List<String> searchSubreddit(String query) {\r\n    return subreddits.stream().\r\n      filter(sr -> sr.startsWith(query)).\r\n      limit(9).\r\n      collect(Collectors.toList());\r\n}\r\n```","```\r\n@RequestMapping(value = \"/subredditAutoComplete\")\r\n@ResponseBody\r\npublic List<String> subredditAutoComplete(@RequestParam(\"term\") String term) {\r\n    return service.searchSubreddit(term);\r\n}\r\n```","```\r\n@Component\r\npublic class MetricFilter implements Filter {\r\n\r\n    @Autowired\r\n    private IMetricService metricService;\r\n\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, ServletResponse response, FilterChain chain) \r\n      throws IOException, ServletException {\r\n        HttpServletRequest httpRequest = ((HttpServletRequest) request);\r\n        String req = httpRequest.getMethod() + \" \" + httpRequest.getRequestURI();\r\n\r\n        chain.doFilter(request, response);\r\n\r\n        int status = ((HttpServletResponse) response).getStatus();\r\n        metricService.increaseCount(req, status);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void onStartup(ServletContext servletContext) throws ServletException {\r\n    super.onStartup(servletContext);\r\n    servletContext.addListener(new SessionListener());\r\n    registerProxyFilter(servletContext, \"oauth2ClientContextFilter\");\r\n    registerProxyFilter(servletContext, \"springSecurityFilterChain\");\r\n    registerProxyFilter(servletContext, \"metricFilter\");\r\n}\r\n```","```\r\npublic interface IMetricService {\r\n    void increaseCount(String request, int status);\r\n\r\n    Map getFullMetric();\r\n    Map getStatusMetric();\r\n\r\n    Object[][] getGraphData();\r\n}\r\n```","```\r\n@Controller\r\npublic class MetricController {\r\n\r\n    @Autowired\r\n    private IMetricService metricService;\r\n\r\n    // \r\n\r\n    @RequestMapping(value = \"/metric\", method = RequestMethod.GET)\r\n    @ResponseBody\r\n    public Map getMetric() {\r\n        return metricService.getFullMetric();\r\n    }\r\n\r\n    @RequestMapping(value = \"/status-metric\", method = RequestMethod.GET)\r\n    @ResponseBody\r\n    public Map getStatusMetric() {\r\n        return metricService.getStatusMetric();\r\n    }\r\n\r\n    @RequestMapping(value = \"/metric-graph-data\", method = RequestMethod.GET)\r\n    @ResponseBody\r\n    public Object[][] getMetricGraphData() {\r\n        Object[][] result = metricService.getGraphData();\r\n        for (int i = 1; i < result[0].length; i++) {\r\n            result[0][i] = result[0][i].toString();\r\n        }\r\n        return result;\r\n    }\r\n}\r\n```"]