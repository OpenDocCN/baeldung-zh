["```\r\n<input name=\"_csrf\" type=\"hidden\" \r\n  value=\"f3f42ea9-3104-4d13-84c0-7bcb68202f16\"/>\r\n```","```\r\n<input name=\"_csrf\" type=\"hidden\" \r\n  value=\"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJlNjc4ZjIzMzQ3ZTM0MTBkYjdlNjg3Njc4MjNiMmQ3MCIsImlhdCI6MTQ2NjYzMzMxNywibmJmIjoxNDY2NjMzMzE3LCJleHAiOjE0NjY2MzY5MTd9.rgx_o8VQGuDa2AqCHSgVOD5G68Ld_YYM7N7THmvLIKc\"/>\r\n```","```\r\n{\"alg\":\"HS256\"}\r\n```","```\r\n{\r\n  \"jti\": \"e678f23347e3410db7e68767823b2d70\",\r\n  \"iat\": 1466633317,\r\n  \"nbf\": 1466633317,\r\n  \"exp\": 1466636917\r\n}\r\n```","```\r\ncomputeHMACSHA256(\r\n    header + \".\" + payload, \r\n    base64DecodeToByteArray(\"4pE8z3PBoHjnV1AhvGk+e8h2p+ShZpOnpr8cwHmMh1w=\")\r\n)\r\n```","```\r\nmvn clean spring-boot:run\r\n```","```\r\nhttp localhost:8080\r\n```","```\r\nAvailable commands (assumes httpie - https://github.com/jkbrzt/httpie):\r\n\r\n  http http://localhost:8080/\r\n\tThis usage message\r\n\r\n  http http://localhost:8080/static-builder\r\n\tbuild JWT from hardcoded claims\r\n\r\n  http POST http://localhost:8080/dynamic-builder-general claim-1=value-1 ... [claim-n=value-n]\r\n\tbuild JWT from passed in claims (using general claims map)\r\n\r\n  http POST http://localhost:8080/dynamic-builder-specific claim-1=value-1 ... [claim-n=value-n]\r\n\tbuild JWT from passed in claims (using specific claims methods)\r\n\r\n  http POST http://localhost:8080/dynamic-builder-compress claim-1=value-1 ... [claim-n=value-n]\r\n\tbuild DEFLATE compressed JWT from passed in claims\r\n\r\n  http http://localhost:8080/parser?jwt=<jwt>\r\n\tParse passed in JWT\r\n\r\n  http http://localhost:8080/parser-enforce?jwt=<jwt>\r\n\tParse passed in JWT enforcing the 'iss' registered claim and the 'hasMotorcycle' custom claim\r\n\r\n  http http://localhost:8080/get-secrets\r\n\tShow the signing keys currently in use.\r\n\r\n  http http://localhost:8080/refresh-secrets\r\n\tGenerate new signing keys and show them.\r\n\r\n  http POST http://localhost:8080/set-secrets \r\n    HS256=base64-encoded-value HS384=base64-encoded-value HS512=base64-encoded-value\r\n\tExplicitly set secrets to use in the application.\r\n```","```\r\nString jws = Jwts.builder()\r\n  .setIssuer(\"Stormpath\")\r\n  .setSubject(\"msilverman\")\r\n  .claim(\"name\", \"Micah Silverman\")\r\n  .claim(\"scope\", \"admins\")\r\n  // Fri Jun 24 2016 15:33:42 GMT-0400 (EDT)\r\n  .setIssuedAt(Date.from(Instant.ofEpochSecond(1466796822L)))\r\n  // Sat Jun 24 2116 15:33:42 GMT-0400 (EDT)\r\n  .setExpiration(Date.from(Instant.ofEpochSecond(4622470422L)))\r\n  .signWith(\r\n    SignatureAlgorithm.HS256,\r\n    TextCodec.BASE64.decode(\"Yn2kjibddFAWtnPJ2AFlL8WXmohJMCvigQggaEypa5E=\")\r\n  )\r\n  .compact();\r\n```","```\r\n    .signWith(\r\n        SignatureAlgorithm.HS256,\r\n       \"secret\".getBytes(\"UTF-8\")    \r\n    )\r\n    ```","```\r\n    .signWith(\r\n        SignatureAlgorithm.HS256,\r\n        \"Yn2kjibddFAWtnPJ2AFlL8WXmohJMCvigQggaEypa5E=\".getBytes(\"UTF-8\")\r\n    )\r\n    ```","```\r\n    .signWith(\r\n        SignatureAlgorithm.HS512,\r\n        TextCodec.BASE64.decode(\"Yn2kjibddFAWtnPJ2AFlL8WXmohJMCvigQggaEypa5E=\")\r\n    )\r\n    ```","```\r\nhttp POST localhost:8080/set-secrets \\\r\n  HS256=\"Yn2kjibddFAWtnPJ2AFlL8WXmohJMCvigQggaEypa5E=\" \\\r\n  HS384=\"VW96zL+tYlrJLNCQ0j6QPTp+d1q75n/Wa8LVvpWyG8pPZOP6AA5X7XOIlI90sDwx\" \\\r\n  HS512=\"cd+Pr1js+w2qfT2BoCD+tPcYp9LbjpmhSMEJqUob1mcxZ7+Wmik4AYdjX+DlDjmE4yporzQ9tm7v3z/j+QbdYg==\"\r\n```","```\r\nhttp http://localhost:8080/static-builder\r\n```","```\r\neyJhbGciOiJIUzI1NiJ9.\r\neyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIiwibmFtZSI6Ik1pY2FoIFNpbHZlcm1hbiIsInNjb3BlIjoiYWRtaW5zIiwiaWF0IjoxNDY2Nzk2ODIyLCJleHAiOjQ2MjI0NzA0MjJ9.\r\nkP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ\r\n```","```\r\nhttp http://localhost:8080/parser?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIiwibmFtZSI6Ik1pY2FoIFNpbHZlcm1hbiIsInNjb3BlIjoiYWRtaW5zIiwiaWF0IjoxNDY2Nzk2ODIyLCJleHAiOjQ2MjI0NzA0MjJ9.kP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ\r\n```","```\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"jws\": {\r\n        \"body\": {\r\n            \"exp\": 4622470422,\r\n            \"iat\": 1466796822,\r\n            \"iss\": \"Stormpath\",\r\n            \"name\": \"Micah Silverman\",\r\n            \"scope\": \"admins\",\r\n            \"sub\": \"msilverman\"\r\n        },\r\n        \"header\": {\r\n            \"alg\": \"HS256\"\r\n        },\r\n        \"signature\": \"kP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ\"\r\n    },\r\n    \"status\": \"SUCCESS\"\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-general iss=Stormpath sub=msilverman hasMotorcycle:=true\r\n```","```\r\nPOST /dynamic-builder-general HTTP/1.1\r\nAccept: application/json\r\n...\r\n{\r\n    \"hasMotorcycle\": true,\r\n    \"iss\": \"Stormpath\",\r\n    \"sub\": \"msilverman\"\r\n}\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"jwt\": \r\n      \"eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIiwiaGFzTW90b3JjeWNsZSI6dHJ1ZX0.OnyDs-zoL3-rw1GaSl_KzZzHK9GoiNocu-YwZ_nQNZU\",\r\n    \"status\": \"SUCCESS\"\r\n} \r\n```","```\r\n@RequestMapping(value = \"/dynamic-builder-general\", method = POST)\r\npublic JwtResponse dynamicBuilderGeneric(@RequestBody Map<String, Object> claims) \r\n  throws UnsupportedEncodingException {\r\n    String jws =  Jwts.builder()\r\n        .setClaims(claims)\r\n        .signWith(\r\n            SignatureAlgorithm.HS256,\r\n            secretService.getHS256SecretBytes()\r\n        )\r\n        .compact();\r\n    return new JwtResponse(jws);\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific iss=Stormpath sub:=5 hasMotorcycle:=true\r\n```","```\r\nPOST /dynamic-builder-specific HTTP/1.1\r\nAccept: application/json\r\n...\r\n{\r\n    \"hasMotorcycle\": true,\r\n    \"iss\": \"Stormpath\",\r\n    \"sub\": 5\r\n}\r\n\r\nHTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"exceptionType\": \"java.lang.ClassCastException\",\r\n    \"message\": \"java.lang.Integer cannot be cast to java.lang.String\",\r\n    \"status\": \"ERROR\"\r\n}\r\n```","```\r\n@RequestMapping(value = \"/dynamic-builder-specific\", method = POST)\r\npublic JwtResponse dynamicBuilderSpecific(@RequestBody Map<String, Object> claims) \r\n  throws UnsupportedEncodingException {\r\n    JwtBuilder builder = Jwts.builder();\r\n\r\n    claims.forEach((key, value) -> {\r\n        switch (key) {\r\n            case \"iss\":\r\n                builder.setIssuer((String) value);\r\n                break;\r\n            case \"sub\":\r\n                builder.setSubject((String) value);\r\n                break;\r\n            case \"aud\":\r\n                builder.setAudience((String) value);\r\n                break;\r\n            case \"exp\":\r\n                builder.setExpiration(Date.from(\r\n                    Instant.ofEpochSecond(Long.parseLong(value.toString()))\r\n                ));\r\n                break;\r\n            case \"nbf\":\r\n                builder.setNotBefore(Date.from(\r\n                    Instant.ofEpochSecond(Long.parseLong(value.toString()))\r\n                ));\r\n                break;\r\n            case \"iat\":\r\n                builder.setIssuedAt(Date.from(\r\n                    Instant.ofEpochSecond(Long.parseLong(value.toString()))\r\n                ));\r\n                break;\r\n            case \"jti\":\r\n                builder.setId((String) value);\r\n                break;\r\n            default:\r\n                builder.claim(key, value);\r\n        }\r\n    });\r\n\r\n    builder.signWith(SignatureAlgorithm.HS256, secretService.getHS256SecretBytes());\r\n\r\n    return new JwtResponse(builder.compact());\r\n}\r\n```","```\r\nprivate void ensureType(String registeredClaim, Object value, Class expectedType) {\r\n    boolean isCorrectType =\r\n        expectedType.isInstance(value) ||\r\n        expectedType == Long.class && value instanceof Integer;\r\n\r\n    if (!isCorrectType) {\r\n        String msg = \"Expected type: \" + expectedType.getCanonicalName() + \r\n\t\t    \" for registered claim: '\" + registeredClaim + \"', but got value: \" + \r\n\t\t\tvalue + \" of type: \" + value.getClass().getCanonicalName();\r\n        throw new JwtException(msg);\r\n    }\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific iss=Stormpath sub:=5 hasMotorcycle:=true\r\n```","```\r\nPOST /dynamic-builder-specific HTTP/1.1\r\nAccept: application/json\r\n...\r\nUser-Agent: HTTPie/0.9.3\r\n\r\n{\r\n    \"hasMotorcycle\": true,\r\n    \"iss\": \"Stormpath\",\r\n    \"sub\": 5\r\n}\r\n\r\nHTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"exceptionType\": \"io.jsonwebtoken.JwtException\",\r\n    \"message\": \r\n      \"Expected type: java.lang.String for registered claim: 'sub', but got value: 5 of type: java.lang.Integer\",\r\n    \"status\": \"ERROR\"\r\n}\r\n```","```\r\n boolean isCorrectType =\r\n     expectedType.isInstance(value) ||\r\n     expectedType == Long.class && value instanceof Integer;\r\n```","```\r\n@RequestMapping(value = \"/dynamic-builder-specific\", method = POST)\r\npublic JwtResponse dynamicBuilderSpecific(@RequestBody Map<String, Object> claims) \r\n  throws UnsupportedEncodingException {\r\n    JwtBuilder builder = Jwts.builder();\r\n\r\n    claims.forEach((key, value) -> {\r\n        switch (key) {\r\n            case \"iss\":\r\n                ensureType(key, value, String.class);\r\n                builder.setIssuer((String) value);\r\n                break;\r\n            case \"sub\":\r\n                ensureType(key, value, String.class);\r\n                builder.setSubject((String) value);\r\n                break;\r\n            case \"aud\":\r\n                ensureType(key, value, String.class);\r\n                builder.setAudience((String) value);\r\n                break;\r\n            case \"exp\":\r\n                ensureType(key, value, Long.class);\r\n                builder.setExpiration(Date.from(\r\n\t\t\t\t    Instant.ofEpochSecond(Long.parseLong(value.toString()))\r\n\t\t\t\t));\r\n                break;\r\n            case \"nbf\":\r\n                ensureType(key, value, Long.class);\r\n                builder.setNotBefore(Date.from(\r\n\t\t\t\t\tInstant.ofEpochSecond(Long.parseLong(value.toString()))\r\n\t\t\t\t));\r\n                break;\r\n            case \"iat\":\r\n                ensureType(key, value, Long.class);\r\n                builder.setIssuedAt(Date.from(\r\n\t\t\t\t\tInstant.ofEpochSecond(Long.parseLong(value.toString()))\r\n\t\t\t\t));\r\n                break;\r\n            case \"jti\":\r\n                ensureType(key, value, String.class);\r\n                builder.setId((String) value);\r\n                break;\r\n            default:\r\n                builder.claim(key, value);\r\n        }\r\n    });\r\n\r\n    builder.signWith(SignatureAlgorithm.HS256, secretService.getHS256SecretBytes());\r\n\r\n    return new JwtResponse(builder.compact());\r\n}\r\n```","```\r\nhttp http://localhost:8080/parser?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIiwibmFtZSI6Ik1pY2FoIFNpbHZlcm1hbiIsInNjb3BlIjoiYWRtaW5zIiwiaWF0IjoxNDY2Nzk2ODIyLCJleHAiOjQ2MjI0NzA0MjJ9.kP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ\r\n```","```\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"claims\": {\r\n        \"body\": {\r\n            \"exp\": 4622470422,\r\n            \"iat\": 1466796822,\r\n            \"iss\": \"Stormpath\",\r\n            \"name\": \"Micah Silverman\",\r\n            \"scope\": \"admins\",\r\n            \"sub\": \"msilverman\"\r\n        },\r\n        \"header\": {\r\n            \"alg\": \"HS256\"\r\n        },\r\n        \"signature\": \"kP0i_RvTAmI8mgpIkDFhRX3XthSdP-eqqFKGcU92ZIQ\"\r\n    },\r\n    \"status\": \"SUCCESS\"\r\n}\r\n```","```\r\n@RequestMapping(value = \"/parser\", method = GET)\r\npublic JwtResponse parser(@RequestParam String jwt) throws UnsupportedEncodingException {\r\n    Jws<Claims> jws = Jwts.parser()\r\n        .setSigningKeyResolver(secretService.getSigningKeyResolver())\r\n        .parseClaimsJws(jwt);\r\n\r\n    return new JwtResponse(jws);\r\n}\r\n```","```\r\nprivate SigningKeyResolver signingKeyResolver = new SigningKeyResolverAdapter() {\r\n    @Override\r\n    public byte[] resolveSigningKeyBytes(JwsHeader header, Claims claims) {\r\n        return TextCodec.BASE64.decode(secrets.get(header.getAlgorithm()));\r\n    }\r\n};\r\n```","```\r\nHTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-Type: application/json;charset=UTF-8\r\nDate: Mon, 27 Jun 2016 13:19:08 GMT\r\nServer: Apache-Coyote/1.1\r\nTransfer-Encoding: chunked\r\n\r\n{\r\n    \"exceptionType\": \"io.jsonwebtoken.SignatureException\",\r\n    \"message\": \r\n      \"JWT signature does not match locally computed signature. JWT validity cannot be asserted and should not be trusted.\",\r\n    \"status\": \"ERROR\"\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    private String[] ignoreCsrfAntMatchers = {\r\n        \"/dynamic-builder-compress\",\r\n        \"/dynamic-builder-general\",\r\n        \"/dynamic-builder-specific\",\r\n        \"/set-secrets\"\r\n    };\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf()\r\n                .ignoringAntMatchers(ignoreCsrfAntMatchers)\r\n            .and().authorizeRequests()\r\n                .antMatchers(\"/**\")\r\n                .permitAll();\r\n    }\r\n}\r\n```","```\r\nhttp://localhost:8080/jwt-csrf-form\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\r\n    <head>\r\n        <!--/*/ <th:block th:include=\"fragments/head :: head\"/> /*/-->\r\n    </head>\r\n    <body>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n                <div class=\"box col-md-6 col-md-offset-3\">\r\n                    <p/>\r\n                    <form method=\"post\" th:action=\"@{/jwt-csrf-form}\">\r\n                        <input type=\"submit\" class=\"btn btn-primary\" value=\"Click Me!\"/>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </body>\r\n</html>\r\n```","```\r\n<input type=\"hidden\" name=\"_csrf\" value=\"5f375db2-4f40-4e72-9907-a290507cb25e\" />\r\n```","```\r\n@Configuration\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    CsrfTokenRepository jwtCsrfTokenRepository;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            .csrf()\r\n                .csrfTokenRepository(jwtCsrfTokenRepository)\r\n                .ignoringAntMatchers(ignoreCsrfAntMatchers)\r\n            .and().authorizeRequests()\r\n                .antMatchers(\"/**\")\r\n                .permitAll();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class CSRFConfig {\r\n\r\n    @Autowired\r\n    SecretService secretService;\r\n\r\n    @Bean\r\n    @ConditionalOnMissingBean\r\n    public CsrfTokenRepository jwtCsrfTokenRepository() {\r\n        return new JWTCsrfTokenRepository(secretService.getHS256SecretBytes());\r\n    }\r\n}\r\n```","```\r\npublic class JWTCsrfTokenRepository implements CsrfTokenRepository {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(JWTCsrfTokenRepository.class);\r\n    private byte[] secret;\r\n\r\n    public JWTCsrfTokenRepository(byte[] secret) {\r\n        this.secret = secret;\r\n    }\r\n\r\n    @Override\r\n    public CsrfToken generateToken(HttpServletRequest request) {\r\n        String id = UUID.randomUUID().toString().replace(\"-\", \"\");\r\n\r\n        Date now = new Date();\r\n        Date exp = new Date(System.currentTimeMillis() + (1000*30)); // 30 seconds\r\n\r\n        String token;\r\n        try {\r\n            token = Jwts.builder()\r\n                .setId(id)\r\n                .setIssuedAt(now)\r\n                .setNotBefore(now)\r\n                .setExpiration(exp)\r\n                .signWith(SignatureAlgorithm.HS256, secret)\r\n                .compact();\r\n        } catch (UnsupportedEncodingException e) {\r\n            log.error(\"Unable to create CSRf JWT: {}\", e.getMessage(), e);\r\n            token = id;\r\n        }\r\n\r\n        return new DefaultCsrfToken(\"X-CSRF-TOKEN\", \"_csrf\", token);\r\n    }\r\n\r\n    @Override\r\n    public void saveToken(CsrfToken token, HttpServletRequest request, HttpServletResponse response) {\r\n        ...\r\n    }\r\n\r\n    @Override\r\n    public CsrfToken loadToken(HttpServletRequest request) {\r\n        ...\r\n    }\r\n}\r\n```","```\r\n<input type=\"hidden\" name=\"_csrf\" \r\n  value=\"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiIxZjIyMDdiNTVjOWM0MjU0YjZlMjY4MjQwYjIwNzZkMSIsImlhdCI6MTQ2NzA3MDQwMCwibmJmIjoxNDY3MDcwNDAwLCJleHAiOjE0NjcwNzA0MzB9.2kYLO0iMWUheAncXAzm0UdQC1xUC5I6RI_ShJ_74e5o\" />\r\n```","```\r\n@Configuration\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    ...\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            .addFilterAfter(new JwtCsrfValidatorFilter(), CsrfFilter.class)\r\n            .csrf()\r\n                .csrfTokenRepository(jwtCsrfTokenRepository)\r\n                .ignoringAntMatchers(ignoreCsrfAntMatchers)\r\n            .and().authorizeRequests()\r\n                .antMatchers(\"/**\")\r\n                .permitAll();\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\nprivate class JwtCsrfValidatorFilter extends OncePerRequestFilter {\r\n\r\n    @Override\r\n    protected void doFilterInternal(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response, \r\n      FilterChain filterChain) throws ServletException, IOException {\r\n        // NOTE: A real implementation should have a nonce cache so the token cannot be reused\r\n        CsrfToken token = (CsrfToken) request.getAttribute(\"_csrf\");\r\n\r\n        if (\r\n            // only care if it's a POST\r\n            \"POST\".equals(request.getMethod()) &&\r\n            // ignore if the request path is in our list\r\n            Arrays.binarySearch(ignoreCsrfAntMatchers, request.getServletPath()) < 0 &&\r\n            // make sure we have a token\r\n            token != null\r\n        ) {\r\n            // CsrfFilter already made sure the token matched. \r\n            // Here, we'll make sure it's not expired\r\n            try {\r\n                Jwts.parser()\r\n                    .setSigningKey(secret.getBytes(\"UTF-8\"))\r\n                    .parseClaimsJws(token.getToken());\r\n            } catch (JwtException e) {\r\n                // most likely an ExpiredJwtException, but this will handle any\r\n                request.setAttribute(\"exception\", e);\r\n                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\r\n                RequestDispatcher dispatcher = request.getRequestDispatcher(\"expired-jwt\");\r\n                dispatcher.forward(request, response);\r\n            }\r\n        }\r\n\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(value = \"/parser-enforce\", method = GET)\r\npublic JwtResponse parserEnforce(@RequestParam String jwt) \r\n  throws UnsupportedEncodingException {\r\n    Jws<Claims> jws = Jwts.parser()\r\n        .requireIssuer(\"Stormpath\")\r\n        .require(\"hasMotorcycle\", true)\r\n        .setSigningKeyResolver(secretService.getSigningKeyResolver())\r\n        .parseClaimsJws(jwt);\r\n\r\n    return new JwtResponse(jws);\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific \\\r\n  iss=Stormpath hasMotorcycle:=true sub=msilverman\r\n```","```\r\nPOST /dynamic-builder-specific HTTP/1.1\r\nAccept: application/json\r\n...\r\n{\r\n    \"hasMotorcycle\": true,\r\n    \"iss\": \"Stormpath\",\r\n    \"sub\": \"msilverman\"\r\n}\r\n\r\nHTTP/1.1 200 OK\r\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"jwt\": \r\n      \"eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjp0cnVlLCJzdWIiOiJtc2lsdmVybWFuIn0.qrH-U6TLSVlHkZdYuqPRDtgKNr1RilFYQJtJbcgwhR0\",\r\n    \"status\": \"SUCCESS\"\r\n}\r\n```","```\r\nhttp -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjp0cnVlLCJzdWIiOiJtc2lsdmVybWFuIn0.qrH-U6TLSVlHkZdYuqPRDtgKNr1RilFYQJtJbcgwhR0\r\n```","```\r\nGET /parser-enforce?jwt=http \r\n  -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjp0cnVlLCJzdWIiOiJtc2lsdmVybWFuIn0.qrH-U6TLSVlHkZdYuqPRDtgKNr1RilFYQJtJbcgwhR0 HTTP/1.1\r\nAccept: */*\r\n...\r\nHTTP/1.1 200 OK\r\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"jws\": {\r\n        \"body\": {\r\n            \"hasMotorcycle\": true,\r\n            \"iss\": \"Stormpath\",\r\n            \"sub\": \"msilverman\"\r\n        },\r\n        \"header\": {\r\n            \"alg\": \"HS256\"\r\n        },\r\n        \"signature\": \"qrH-U6TLSVlHkZdYuqPRDtgKNr1RilFYQJtJbcgwhR0\"\r\n    },\r\n    \"status\": \"SUCCESS\"\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific iss=Stormpath sub=msilverman\r\n```","```\r\nhttp -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIn0.YMONlFM1tNgttUYukDRsi9gKIocxdGAOLaJBymaQAWc\r\n```","```\r\nGET /parser-enforce?jwt=http -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJzdWIiOiJtc2lsdmVybWFuIn0.YMONlFM1tNgttUYukDRsi9gKIocxdGAOLaJBymaQAWc HTTP/1.1\r\nAccept: */*\r\n...\r\nHTTP/1.1 400 Bad Request\r\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\r\nConnection: close\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"exceptionType\": \"io.jsonwebtoken.MissingClaimException\",\r\n    \"message\": \r\n      \"Expected hasMotorcycle claim to be: true, but was not present in the JWT claims.\",\r\n    \"status\": \"ERROR\"\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific iss=Stormpath hasMotorcycle:=false sub=msilverman\r\n```","```\r\nhttp -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjpmYWxzZSwic3ViIjoibXNpbHZlcm1hbiJ9.8LBq2f0eINB34AzhVEgsln_KDo-IyeM8kc-dTzSCr0c\r\n```","```\r\nGET /parser-enforce?jwt=http \r\n  -v localhost:8080/parser-enforce?jwt=eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjpmYWxzZSwic3ViIjoibXNpbHZlcm1hbiJ9.8LBq2f0eINB34AzhVEgsln_KDo-IyeM8kc-dTzSCr0c HTTP/1.1\r\nAccept: */*\r\n...\r\nHTTP/1.1 400 Bad Request\r\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\r\nConnection: close\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"exceptionType\": \"io.jsonwebtoken.IncorrectClaimException\",\r\n    \"message\": \"Expected hasMotorcycle claim to be: true, but was: false.\",\r\n    \"status\": \"ERROR\"\r\n}\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-specific \\\r\n  iss=Stormpath hasMotorcycle:=true sub=msilverman the=quick brown=fox jumped=over lazy=dog \\\r\n  somewhere=over rainbow=way up=high and=the dreams=you dreamed=of\r\n```","```\r\neyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJTdG9ybXBhdGgiLCJoYXNNb3RvcmN5Y2xlIjp0cnVlLCJzdWIiOiJtc2lsdmVybWFuIiwidGhlIjoicXVpY2siLCJicm93biI6ImZveCIsImp1bXBlZCI6Im92ZXIiLCJsYXp5IjoiZG9nIiwic29tZXdoZXJlIjoib3ZlciIsInJhaW5ib3ciOiJ3YXkiLCJ1cCI6ImhpZ2giLCJhbmQiOiJ0aGUiLCJkcmVhbXMiOiJ5b3UiLCJkcmVhbWVkIjoib2YifQ.AHNJxSTiDw_bWNXcuh-LtPLvSjJqwDvOOUcmkk7CyZA\r\n```","```\r\nhttp -v POST localhost:8080/dynamic-builder-compress \\\r\n  iss=Stormpath hasMotorcycle:=true sub=msilverman the=quick brown=fox jumped=over lazy=dog \\\r\n  somewhere=over rainbow=way up=high and=the dreams=you dreamed=of\r\n```","```\r\neyJhbGciOiJIUzI1NiIsImNhbGciOiJERUYifQ.eNpEzkESwjAIBdC7sO4JegdXnoC2tIk2oZLEGB3v7s84jjse_AFe5FOikc5ZLRycHQ3kOJ0Untu8C43ZigyUyoRYSH6_iwWOyGWHKd2Kn6_QZFojvOoDupRwyAIq4vDOzwYtugFJg1QnJv-5sY-TVjQqN7gcKJ3f-j8c-6J-baDFhEN_uGn58XtnpfcHAAD__w.3_wc-2skFBbInk0YAQ96yGWwr8r1xVdbHn-uGPTFuFE\r\n```","```\r\n@RequestMapping(value = \"/dynamic-builder-compress\", method = POST)\r\npublic JwtResponse dynamicBuildercompress(@RequestBody Map<String, Object> claims) \r\n  throws UnsupportedEncodingException {\r\n    String jws =  Jwts.builder()\r\n        .setClaims(claims)\r\n        .compressWith(CompressionCodecs.DEFLATE)\r\n        .signWith(\r\n            SignatureAlgorithm.HS256,\r\n            secretService.getHS256SecretBytes()\r\n        )\r\n        .compact();\r\n    return new JwtResponse(jws);\r\n}\r\n```","```\r\nGET /parser?jwt=eyJhbGciOiJIUzI1NiIsImNhbGciOiJERUYifQ.eNpEzkESwjAIBdC7sO4JegdXnoC2tIk2oZLEGB3v7s84jjse_AFe5FOikc5ZLRycHQ3kOJ0Untu8C43ZigyUyoRYSH6_iwWOyGWHKd2Kn6_QZFojvOoDupRwyAIq4vDOzwYtugFJg1QnJv-5sY-TVjQqN7gcKJ3f-j8c-6J-baDFhEN_uGn58XtnpfcHAAD__w.3_wc-2skFBbInk0YAQ96yGWwr8r1xVdbHn-uGPTFuFE HTTP/1.1\r\nAccept: */*\r\n...\r\nHTTP/1.1 200 OK\r\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\r\nContent-Type: application/json;charset=UTF-8\r\n...\r\n{\r\n    \"claims\": {\r\n        \"body\": {\r\n            \"and\": \"the\",\r\n            \"brown\": \"fox\",\r\n            \"dreamed\": \"of\",\r\n            \"dreams\": \"you\",\r\n            \"hasMotorcycle\": true,\r\n            \"iss\": \"Stormpath\",\r\n            \"jumped\": \"over\",\r\n            \"lazy\": \"dog\",\r\n            \"rainbow\": \"way\",\r\n            \"somewhere\": \"over\",\r\n            \"sub\": \"msilverman\",\r\n            \"the\": \"quick\",\r\n            \"up\": \"high\"\r\n        },\r\n        \"header\": {\r\n            \"alg\": \"HS256\",\r\n            \"calg\": \"DEF\"\r\n        },\r\n        \"signature\": \"3_wc-2skFBbInk0YAQ96yGWwr8r1xVdbHn-uGPTFuFE\"\r\n    },\r\n    \"status\": \"SUCCESS\"\r\n}\r\n```","```\r\nhttp http://localhost:8080\r\n```"]