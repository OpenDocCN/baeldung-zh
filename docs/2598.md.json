["```\r\n<script src=\"keycloak/keycloak.js\"></script>\r\n<script>\r\n  var keycloak = Keycloak('keycloak.json');\r\n    keycloak.init({ onLoad: 'login-required' })\r\n      .success(function (authenticated) {\r\n        console.log('Login Successful');\r\n        window.authorizations.add(\"oauth2\", new ApiKeyAuthorization(\"Authorization\", \"Bearer \" + keycloak.token, \"header\"));\r\n      }).error(function () {\r\n        console.error('Login Failed');\r\n        window.location.reload();\r\n      }\r\n    );\r\n </script>\r\n```","```\r\npaths:\r\n  /api/v1/products:\r\n    get:\r\n      ...\r\n      security:\r\n        - my_oAuth_security_schema:\r\n          - read_access\r\n...\r\nsecuritySchemes:\r\n  my_oAuth_security_schema:\r\n    type: oauth2\r\n    flows:\r\n      implicit:\r\n        authorizationUrl: https://api.example.com/oauth2/authorize\r\n        scopes:\r\n          read_access: read data\r\n          write_access: modify data\r\n```","```\r\n@Configuration\r\npublic class OpenAPISecurityConfig {\r\n\r\n    @Autowired\r\n    void addSecurity(Docket docket) {\r\n        docket\r\n          .securitySchemes(of(authenticationScheme()))\r\n          .securityContexts(of(securityContext()));\r\n    }\r\n\r\n    private SecurityScheme authenticationScheme() {\r\n        return new OAuth2SchemeBuilder(\"implicit\")\r\n          .name(\"my_oAuth_security_schema\")\r\n          .authorizationUrl(\"https://api.example.com/oauth2/authorize\")\r\n          .scopes(authorizationScopes())\r\n          .build();\r\n    }\r\n\r\n    private List<AuthorizationScope> authorizationScopes() {\r\n        return Arrays.asList(\r\n          new AuthorizationScope(\"read_access\", \"read data\"),\r\n          new AuthorizationScope(\"write_access\", \"modify data\")\r\n        );\r\n    }\r\n\r\n    private SecurityContext securityContext() {\r\n        return SecurityContext.builder()\r\n          .securityReferences(readAccessAuth())\r\n          .operationSelector(operationContext ->\r\n            HttpMethod.GET.equals(operationContext.httpMethod())\r\n          )\r\n          .build();\r\n    }\r\n\r\n    private List<SecurityReference> readAccessAuth() {\r\n        AuthorizationScope[] authorizationScopes = new AuthorizationScope[] { authorizationScopes().get(0) };\r\n        return of(new SecurityReference(\"my_oAuth_security_schema\", authorizationScopes));\r\n    }\r\n\r\n} \r\n```"]