["```\r\npublic class ClientErrorLoggingConfigurer \r\n  extends AbstractHttpConfigurer<ClientErrorLoggingConfigurer, HttpSecurity> {\r\n\r\n    private List<HttpStatus> errorCodes;\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public void init(HttpSecurity http) throws Exception {\r\n        // initialization code\r\n    }\r\n\r\n    @Override\r\n    public void configure(HttpSecurity http) throws Exception {\r\n       http.addFilterAfter(\r\n         new ClientErrorLoggingFilter(errorCodes), \r\n         FilterSecurityInterceptor.class);\r\n    }\r\n}\r\n```","```\r\npublic class ClientErrorLoggingFilter extends GenericFilterBean {\r\n\r\n    private static final Logger logger = LogManager.getLogger(\r\n      ClientErrorLoggingFilter.class);\r\n    private List<HttpStatus> errorCodes;\r\n\r\n    // standard constructor\r\n\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, \r\n      ServletResponse response, \r\n      FilterChain chain) \r\n      throws IOException, ServletException {\r\n        //...\r\n\r\n        chain.doFilter(request, response);\r\n    }\r\n}\r\n```","```\r\nAuthentication auth = SecurityContextHolder.getContext().getAuthentication();\r\nif (auth == null) {\r\n    chain.doFilter(request, response);\r\n    return;\r\n}\r\nint status = ((HttpServletResponse) response).getStatus();\r\nif (status < 400 || status >= 500) {\r\n    chain.doFilter(request, response);\r\n    return;\r\n}\r\nif (errorCodes == null) {\r\n    logger.debug(\"User \" + auth.getName() + \" encountered error \" + status);\r\n} else {\r\n    if (errorCodes.stream().anyMatch(s -> s.value() == status)) {\r\n        logger.debug(\"User \" + auth.getName() + \" encountered error \" + status);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n          //...\r\n          .and()\r\n          .apply(clientErrorLogging());\r\n    }\r\n\r\n    @Bean\r\n    public ClientErrorLoggingConfigurer clientErrorLogging() {\r\n        return new ClientErrorLoggingConfigurer() ;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic ClientErrorLoggingConfigurer clientErrorLogging() {\r\n    return new ClientErrorLoggingConfigurer(Arrays.asList(HttpStatus.NOT_FOUND)) ;\r\n}\r\n```","```\r\norg.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer = com.baeldung.dsl.ClientErrorLoggingConfigurer\r\n```","```\r\n//...\r\n.apply(clientErrorLogging()).disable();\r\n```"]