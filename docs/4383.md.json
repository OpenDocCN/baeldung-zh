["```\r\n<dependency>\r\n    <groupId>org.spockframework</groupId>\r\n    <artifactId>spock-core</artifactId>z\r\n    <version>1.3-groovy-2.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy-all</artifactId>\r\n    <version>2.4.7</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Ignore\r\ndef \"I won't be executed\"() {\r\n    expect:\r\n    true\r\n}\r\n```","```\r\n@Ignore\r\nclass IgnoreTest extends Specification\r\n```","```\r\n@Ignore(\"probably no longer needed\")\r\n```","```\r\ndef \"I won't run\"() { }\r\n\r\n@IgnoreRest\r\ndef 'I will run'() { }\r\n\r\ndef \"I won't run too\"() { }\r\n```","```\r\n@IgnoreIf({System.getProperty(\"os.name\").contains(\"windows\")})\r\ndef \"I won't run on windows\"() { }\r\n```","```\r\n@IgnoreIf({ os.isWindows() })\r\ndef \"I'm using Spock helper classes to run only on windows\"() {}\r\n```","```\r\n@Requires({ System.getProperty(\"os.name\").contains(\"windows\") })\r\ndef \"I will run only on Windows\"()\r\n```","```\r\n@PendingFeature\r\ndef 'test for not implemented yet feature. Maybe in the future it will pass'()\r\n```","```\r\ndef 'I will run as first'() { }\r\n\r\ndef 'I will run as second'() { }\r\n```","```\r\n@Timeout(1)\r\ndef 'I have one second to finish'() { }\r\n```","```\r\n@Timeout(value = 200, unit = TimeUnit.SECONDS)\r\ndef 'I will fail after 200 millis'() { }\r\n```","```\r\n@Timeout(5)\r\nclass ExampleTest extends Specification {\r\n\r\n    @Timeout(1)\r\n    def 'I have one second to finish'() {\r\n\r\n    }\r\n\r\n    def 'I will have 5 seconds timeout'() {}\r\n}\r\n```","```\r\n@Retry\r\ndef 'I will retry three times'() { }\r\n```","```\r\n@Retry(exceptions = [RuntimeException])\r\ndef 'I will retry only on RuntimeException'() { }\r\n```","```\r\n@Retry(condition = { failure.message.contains('error') })\r\ndef 'I will retry with a specific message'() { }\r\n```","```\r\n@Retry(delay = 1000)\r\ndef 'I will retry after 1000 millis'() { }\r\n```","```\r\n@Retry\r\nclass RetryTest extends Specification\r\n```","```\r\n@RestoreSystemProperties\r\ndef 'all environment variables will be saved before execution and restored after tests'() {\r\n    given:\r\n    System.setProperty('os.name', 'Mac OS')\r\n}\r\n```","```\r\n@Title(\"This title is easy to read for humans\")\r\nclass CustomTitleTest extends Specification\r\n```","```\r\n@Narrative(\"\"\"\r\n    as a user\r\n    i want to save favourite items \r\n    and then get the list of them\r\n\"\"\")\r\nclass NarrativeDescriptionTest extends Specification\r\n```","```\r\n@See(\"https://example.org\")\r\ndef 'Look at the reference'()\r\n```","```\r\n@See([\"https://example.org/first\", \"https://example.org/first\"])\r\ndef 'Look at the references'()\r\n```","```\r\n@Issue(\"https://jira.org/issues/LO-531\")\r\ndef 'single issue'() {\r\n\r\n}\r\n\r\n@Issue([\"https://jira.org/issues/LO-531\", \"http://jira.org/issues/LO-123\"])\r\ndef 'multiple issues'()\r\n```","```\r\n@Subject\r\nItemService itemService // initialization here...\r\n```","```\r\nrunner {\r\n    filterStackTrace false\r\n}\r\n```","```\r\ndef 'stacktrace'() {\r\n    expect:\r\n    throw new RuntimeException(\"blabla\")\r\n}\r\n```","```\r\njava.lang.RuntimeException: blabla\r\n\r\n  at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n  at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n  at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n  at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n  at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:83)\r\n  at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:105)\r\n  at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:60)\r\n  at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:235)\r\n  at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:247)\r\n  // 34 more lines in the stack trace... \r\n```","```\r\njava.lang.RuntimeException: blabla\r\n\r\n  at extensions.StackTraceTest.stacktrace(StackTraceTest.groovy:10)\r\n```","```\r\nif (System.getenv(\"FILTER_STACKTRACE\") == null) {   \r\n    filterStackTrace false\r\n}\r\n```","```\r\nreport {\r\n    issueNamePrefix 'Bug '\r\n    issueUrlPrefix 'https://jira.org/issues/'\r\n}\r\n```","```\r\nrunner {\r\n  optimizeRunOrder true\r\n}\r\n```","```\r\nimport extensions.TimeoutTest\r\n\r\nrunner {\r\n    exclude TimeoutTest\r\n}\r\n```","```\r\nimport extensions.TimeoutTest\r\nimport spock.lang.Issue\r\n    exclude {\r\n        baseClass TimeoutTest\r\n        annotation Issue\r\n}\r\n```","```\r\nreport {\r\n    enabled true\r\n    logFileDir '.'\r\n    logFileName 'report.json'\r\n    logFileSuffix new Date().format('yyyy-MM-dd')\r\n}\r\n```"]