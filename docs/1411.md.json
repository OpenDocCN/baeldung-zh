["```\r\n├── public\r\n|   └── welcome.html\r\n├── conf\r\n|   ├── application.conf\r\n|   └── logback.xml\r\n└── src\r\n|   ├── main\r\n|   |   └── java\r\n|   |       └── com\r\n|   |           └── baeldung\r\n|   |               └── jooby\r\n|   |                   └── App.java\r\n|   └── test\r\n|       └── java\r\n|           └── com\r\n|               └── baeldung\r\n|                   └── jooby\r\n|                       └── AppTest.java\r\n├── pom.xml\r\n```","```\r\n<dependency>\r\n    <groupId>org.jooby</groupId>\r\n    <artifactId>jooby-netty</artifactId>\r\n    <version>1.1.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jooby</groupId>\r\n    <artifactId>jooby-jetty</artifactId>\r\n    <version>1.1.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jooby</groupId>\r\n    <artifactId>jooby-undertow</artifactId>\r\n    <version>1.1.3</version>\r\n</dependency>\r\n```","```\r\nmvn archetype:generate -B -DgroupId=com.baeldung.jooby -DartifactId=jooby \r\n-Dversion=1.0 -DarchetypeArtifactId=jooby-archetype \r\n-DarchetypeGroupId=org.jooby -DarchetypeVersion=1.1.3\r\n```","```\r\npublic class App extends Jooby {\r\n    public static void main(String[] args) {\r\n        run(App::new, args);\r\n    }\r\n}\r\n```","```\r\n{\r\n    port( 8081 );\r\n    securePort( 8443 );\r\n}\r\n```","```\r\n{\r\n    get( \"/login\", () -> \"Hello from Baeldung\");\r\n}\r\n```","```\r\n{\r\n    post( \"/save\", req -> {\r\n        Mutant token = req.param( \"token\" );\r\n        return token.intValue();\r\n    });\r\n}\r\n```","```\r\n{\r\n    get( \"/user/{id}\", req -> \"Hello user : \" + req.param(\"id\").value() );\r\n    get( \"/user/:id\", req -> \"Hello user: \" + req.param(\"id\").value() );\r\n}\r\n```","```\r\n{\r\n    get( \"/uid:{id}\", req -> \"Hello User with id : uid\" + \r\n        req.param(\"id\").value());\r\n}\r\n```","```\r\n@Path(\"/hello\")\r\npublic class GetController {\r\n    @GET\r\n    public String hello() {\r\n        return \"Hello Baeldung\";\r\n    }\r\n}\r\n```","```\r\n{\r\n    assets( \"/employee\" , \"form.html\" );\r\n}\r\n```","```\r\npublic class Employee {\r\n    String id;\r\n    String name;\r\n    String email;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\n<form enctype=\"application/x-www-form-urlencoded\" action=\"/submitForm\" \r\n    method=\"post\">\r\n    <input name=\"id\" />\r\n    <input name=\"name\" />\r\n    <input name=\"email\" />\r\n    <input type=\"submit\" value=\"Submit\"/>\r\n</form>\r\n```","```\r\npost( \"/submitForm\", req -> {\r\n    Employee employee = req.params(Employee.class);\r\n    // ...\r\n    return \"empoyee data saved successfullly\";\r\n});\r\n```","```\r\npost( \"/upload\", req -> {\r\n    Upload upload = req.file(\"file\");\r\n    // ...\r\n    upload.close();\r\n});\r\n```","```\r\nget( \"/filter\", ( req, resp, chain ) -> {\r\n    // ...\r\n    chain.next( req, resp );\r\n});\r\n```","```\r\nget(\"/filter\", (req, resp) -> {\r\n    resp.send(\"filter response\");\r\n});\r\n```","```\r\n<dependency>\r\n    <groupId>org.jooby</groupId>\r\n    <artifactId>jooby-jedis</artifactId>\r\n    <version>1.1.3</version>\r\n</dependency>\r\n```","```\r\n{\r\n    use(new Redis());\r\n    session(RedisSessionStore.class);\r\n\r\n    get( \"/session\" , req -> {\r\n        Session session = req.session();\r\n        session.set(\"token\", \"value\");\r\n        return session.get(\"token\").value();\r\n    });\r\n}\r\n```","```\r\npublic class AppTest {\r\n\r\n    @ClassRule\r\n    public static JoobyRule app = new JoobyRule(new App());\r\n\r\n    @Test\r\n    public void given_defaultUrl_expect_fixedString() {\r\n\r\n        get(\"/\").then().assertThat().body(equalTo(\"Hello World!\"))\r\n          .statusCode(200).contentType(\"text/html;charset=UTF-8\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void given_defaultUrl_with_mockrouter_expect_fixedString() \r\n  throws Throwable {\r\n\r\n    String result = new MockRouter(new App()).get(\"/\");\r\n\r\n    assertEquals(\"Hello World!\", result);\r\n}\r\n```"]