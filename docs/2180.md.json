["```\r\n$ mvn install spring-boot:run\r\n```","```\r\n@Headers(\"Accept-Language: en-US\")\r\npublic interface BookClient {\r\n\r\n    @RequestLine(\"GET /{isbn}\")\r\n    BookResource findByIsbn(@Param(\"isbn\") String isbn);\r\n\r\n    @RequestLine(\"POST\")\r\n    @Headers(\"Content-Type: application/json\")\r\n    void create(Book book);\r\n}\r\n```","```\r\nFeign.builder()\r\n  .encoder(new GsonEncoder())\r\n  .decoder(new GsonDecoder())\r\n  .logger(new Slf4jLogger(type))\r\n  .logLevel(Logger.Level.HEADERS)\r\n  .target(BookClient.class, \"http://localhost:8081/api/books\"); \r\n```","```\r\nString isbn = UUID.randomUUID().toString();\r\nBook book = new Book(isbn, \"Me\", \"It's me!\", null, null);\r\n\r\nbookClient.create(book);\r\n\r\nbook = bookClient.findByIsbn(isbn).getBook();\r\n```","```\r\n18:01:15.039 [main] DEBUG c.b.f.c.h.staticheader.BookClient - [BookClient#create] Accept-Language: en-US\r\n18:01:15.039 [main] DEBUG c.b.f.c.h.staticheader.BookClient - [BookClient#create] Content-Type: application/json\r\n18:01:15.096 [main] DEBUG c.b.f.c.h.staticheader.BookClient - [BookClient#findByIsbn] Accept-Language: en-US\r\n```","```\r\n@Headers(\"x-requester-id: {requester}\")\r\npublic interface BookClient {\r\n\r\n    @RequestLine(\"GET /{isbn}\")\r\n    BookResource findByIsbn(@Param(\"requester\") String requester, @Param(\"isbn\") String isbn);\r\n}\r\n```","```\r\nString requester = \"test\";\r\nbook = bookClient.findByIsbn(requester, isbn).getBook();\r\n```","```\r\n18:04:27.515 [main] DEBUG c.b.f.c.h.s.parameterized.BookClient - [BookClient#findByIsbn] x-requester-id: test\r\n```","```\r\n@RequestLine(\"POST\")\r\nvoid create(@HeaderMap Map<String, Object> headers, Book book);\r\n```","```\r\nMap<String,Object> headerMap = new HashMap<>();\r\n\r\nheaderMap.put(\"metadata-key1\", \"metadata-value1\");\r\nheaderMap.put(\"metadata-key2\", \"metadata-value2\");\r\n\r\nbookClient.create(headerMap, book);\r\n```","```\r\n18:05:03.202 [main] DEBUG c.b.f.c.h.dynamicheader.BookClient - [BookClient#create] metadata-key1: metadata-value1\r\n18:05:03.202 [main] DEBUG c.b.f.c.h.dynamicheader.BookClient - [BookClient#create] metadata-key2: metadata-value2\r\n```","```\r\npublic class ApiAuthorisationService implements AuthorisationService {\r\n\r\n    @Override\r\n    public String getAuthToken() {\r\n        return \"Bearer \" + UUID.randomUUID();\r\n    }\r\n}\r\n```","```\r\npublic class AuthRequestInterceptor implements RequestInterceptor {\r\n\r\n    private AuthorisationService authTokenService;\r\n\r\n    public AuthRequestInterceptor(AuthorisationService authTokenService) {\r\n        this.authTokenService = authTokenService;\r\n    }\r\n\r\n    @Override\r\n    public void apply(RequestTemplate template) {\r\n        template.header(\"Authorisation\", authTokenService.getAuthToken());\r\n    }\r\n} \r\n```","```\r\nFeign.builder()\r\n  .requestInterceptor(new AuthInterceptor(new ApiAuthorisationService()))\r\n  .encoder(new GsonEncoder())\r\n  .decoder(new GsonDecoder())\r\n  .logger(new Slf4jLogger(type))\r\n  .logLevel(Logger.Level.HEADERS)\r\n  .target(BookClient.class, \"http://localhost:8081/api/books\"); \r\n```","```\r\nbookClient.findByIsbn(\"0151072558\").getBook();\r\n```","```\r\n18:06:06.135 [main] DEBUG c.b.f.c.h.staticheader.BookClient - [BookClient#findByIsbn] Authorisation: Bearer 629e0af7-513d-4385-a5ef-cb9b341cedb5\r\n```"]