["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-feign</artifactId>\r\n</dependency>\r\n```","```\r\n@EnableFeignClients\r\npublic class GatewayApplication { ... }\r\n```","```\r\n@FeignClient(\"book-service\")\r\npublic interface BooksClient {\r\n\r\n    @RequestMapping(value = \"/books/{bookId}\", method = RequestMethod.GET)\r\n    Book getBookById(@PathVariable(\"bookId\") Long bookId);\r\n}\r\n```","```\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class Book {\r\n\r\n    private Long id;\r\n    private String author;\r\n    private String title;\r\n    private List<Rating> ratings;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@FeignClient(\"rating-service\")\r\npublic interface RatingsClient {\r\n\r\n    @RequestMapping(value = \"/ratings\", method = RequestMethod.GET)\r\n    List<Rating> getRatingsByBookId(\r\n      @RequestParam(\"bookId\") Long bookId, \r\n      @RequestHeader(\"Cookie\") String session);\r\n\r\n}\r\n```","```\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class Rating {\r\n    private Long id;\r\n    private Long bookId;\r\n    private int stars;\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/combined\")\r\npublic class CombinedController { ... }\r\n```","```\r\nprivate BooksClient booksClient;\r\nprivate RatingsClient ratingsClient;\r\n\r\n@Autowired\r\npublic CombinedController(\r\n  BooksClient booksClient, \r\n  RatingsClient ratingsClient) {\r\n\r\n    this.booksClient = booksClient;\r\n    this.ratingsClient = ratingsClient;\r\n}\r\n```","```\r\n@GetMapping\r\npublic Book getCombinedResponse(\r\n  @RequestParam Long bookId,\r\n  @CookieValue(\"SESSION\") String session) {\r\n\r\n    Book book = booksClient.getBookById(bookId);\r\n    List<Rating> ratings = ratingsClient.getRatingsByBookId(bookId, \"SESSION=\"+session);\r\n    book.setRatings(ratings);\r\n    return book;\r\n}\r\n```","```\r\n@Test\r\npublic void accessCombinedEndpoint() {\r\n    Response response = RestAssured.given()\r\n      .auth()\r\n      .form(\"user\", \"password\", formConfig)\r\n      .get(ROOT_URI + \"/combined?bookId=1\");\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertNotNull(response.getBody());\r\n\r\n    Book result = response.as(Book.class);\r\n\r\n    assertEquals(new Long(1), result.getId());\r\n    assertNotNull(result.getRatings());\r\n    assertTrue(result.getRatings().size() > 0);\r\n}\r\n```"]