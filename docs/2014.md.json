["```\r\nf(x, y) = z = a*x + b*y\r\n```","```\r\n<dependency>\r\n    <groupId>org.tensorflow</groupId>\r\n    <artifactId>tensorflow</artifactId>\r\n    <version>1.12.0</version>\r\n</dependency>\r\n```","```\r\nz = 3*x + 2*y\r\n```","```\r\nGraph graph = new Graph()\r\n```","```\r\nOperation a = graph.opBuilder(\"Const\", \"a\")\r\n  .setAttr(\"dtype\", DataType.fromClass(Double.class))\r\n  .setAttr(\"value\", Tensor.<Double>create(3.0, Double.class))\r\n  .build();\t\t\r\nOperation b = graph.opBuilder(\"Const\", \"b\")\r\n  .setAttr(\"dtype\", DataType.fromClass(Double.class))\r\n  .setAttr(\"value\", Tensor.<Double>create(2.0, Double.class))\r\n  .build();\r\n```","```\r\nOperation x = graph.opBuilder(\"Placeholder\", \"x\")\r\n  .setAttr(\"dtype\", DataType.fromClass(Double.class))\r\n  .build();\t\t\t\r\nOperation y = graph.opBuilder(\"Placeholder\", \"y\")\r\n  .setAttr(\"dtype\", DataType.fromClass(Double.class))\r\n  .build();\r\n```","```\r\nOperation ax = graph.opBuilder(\"Mul\", \"ax\")\r\n  .addInput(a.output(0))\r\n  .addInput(x.output(0))\r\n  .build();\t\t\t\r\nOperation by = graph.opBuilder(\"Mul\", \"by\")\r\n  .addInput(b.output(0))\r\n  .addInput(y.output(0))\r\n  .build();\r\nOperation z = graph.opBuilder(\"Add\", \"z\")\r\n  .addInput(ax.output(0))\r\n  .addInput(by.output(0))\r\n  .build();\r\n```","```\r\nwriter = tf.summary.FileWriter('.')\r\n......\r\nwriter.add_graph(tf.get_default_graph())\r\nwriter.flush()\r\n```","```\r\ntensorboard --logdir .\r\n```","```\r\nSystem.out.println(z.output(0));\r\n```","```\r\n<Add 'z:0' shape=<unknown> dtype=DOUBLE>\r\n```","```\r\nSession sess = new Session(graph)\r\n```","```\r\nTensor<Double> tensor = sess.runner().fetch(\"z\")\r\n  .feed(\"x\", Tensor.<Double>create(3.0, Double.class))\r\n  .feed(\"y\", Tensor.<Double>create(6.0, Double.class))\r\n  .run().get(0).expect(Double.class);\r\nSystem.out.println(tensor.doubleValue());\r\n```","```\r\n21.0\r\n```","```\r\nimport tensorflow as tf\r\ngraph = tf.Graph()\r\nbuilder = tf.saved_model.builder.SavedModelBuilder('./model')\r\nwith graph.as_default():\r\n  a = tf.constant(2, name='a')\r\n  b = tf.constant(3, name='b')\r\n  x = tf.placeholder(tf.int32, name='x')\r\n  y = tf.placeholder(tf.int32, name='y')\r\n  z = tf.math.add(a*x, b*y, name='z')\r\n  sess = tf.Session()\r\n  sess.run(z, feed_dict = {x: 2, y: 3})\r\n  builder.add_meta_graph_and_variables(sess, [tf.saved_model.tag_constants.SERVING])\r\n  builder.save()\r\n```","```\r\nSavedModelBundle model = SavedModelBundle.load(\"./model\", \"serve\");\t\r\nTensor<Integer> tensor = model.session().runner().fetch(\"z\")\r\n  .feed(\"x\", Tensor.<Integer>create(3, Integer.class))\r\n  .feed(\"y\", Tensor.<Integer>create(3, Integer.class))\r\n  .run().get(0).expect(Integer.class);\t\r\nSystem.out.println(tensor.intValue());\r\n```"]