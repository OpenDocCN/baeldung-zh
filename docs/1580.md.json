["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-websocket</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableWebSocket\r\npublic class WebSocketConfiguration implements WebSocketConfigurer {\r\n\r\n    @Override\r\n    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {\r\n        registry.addHandler(new SocketHandler(), \"/socket\")\r\n          .setAllowedOrigins(\"*\");\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class SocketHandler extends TextWebSocketHandler {\r\n\r\n    List<WebSocketSession>sessions = new CopyOnWriteArrayList<>();\r\n\r\n    @Override\r\n    public void handleTextMessage(WebSocketSession session, TextMessage message)\r\n      throws InterruptedException, IOException {\r\n        for (WebSocketSession webSocketSession : sessions) {\r\n            if (webSocketSession.isOpen() && !session.getId().equals(webSocketSession.getId())) {\r\n                webSocketSession.sendMessage(message);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void afterConnectionEstablished(WebSocketSession session) throws Exception {\r\n        sessions.add(session);\r\n    }\r\n} \r\n```","```\r\nvar conn = new WebSocket('ws://localhost:8080/socket');\r\n```","```\r\nfunction send(message) {\r\n    conn.send(JSON.stringify(message));\r\n}\r\n```","```\r\nconfiguration = null;\r\nvar peerConnection = new RTCPeerConnection(configuration);\r\n```","```\r\nvar dataChannel = peerConnection.createDataChannel(\"dataChannel\", { reliable: true });\r\n```","```\r\ndataChannel.onerror = function(error) {\r\n    console.log(\"Error:\", error);\r\n};\r\ndataChannel.onclose = function() {\r\n    console.log(\"Data channel is closed\");\r\n};\r\n```","```\r\npeerConnection.createOffer(function(offer) {\r\n    send({\r\n        event : \"offer\",\r\n        data : offer\r\n    });\r\n    peerConnection.setLocalDescription(offer);\r\n}, function(error) {\r\n    // Handle error here\r\n});\r\n```","```\r\npeerConnection.onicecandidate = function(event) {\r\n    if (event.candidate) {\r\n        send({\r\n            event : \"candidate\",\r\n            data : event.candidate\r\n        });\r\n    }\r\n};\r\n```","```\r\npeerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n```","```\r\npeerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\npeerConnection.createAnswer(function(answer) {\r\n    peerConnection.setLocalDescription(answer);\r\n        send({\r\n            event : \"answer\",\r\n            data : answer\r\n        });\r\n}, function(error) {\r\n    // Handle error here\r\n});\r\n```","```\r\nhandleAnswer(answer){\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n}\r\n```","```\r\ndataChannel.send(“message”);\r\n```","```\r\ndataChannel.onmessage = function(event) {\r\n    console.log(\"Message:\", event.data);\r\n};\r\n```","```\r\npeerConnection.ondatachannel = function (event) {\r\n    dataChannel = event.channel;\r\n};\r\n```","```\r\nconst constraints = {\r\n    video: true,audio : true\r\n};\r\nnavigator.mediaDevices.getUserMedia(constraints).\r\n  then(function(stream) { /* use the stream */ })\r\n    .catch(function(err) { /* handle the error */ });\r\n```","```\r\nvar constraints = {\r\n    video : {\r\n        frameRate : {\r\n            ideal : 10,\r\n            max : 15\r\n        },\r\n        width : 1280,\r\n        height : 720,\r\n        facingMode : \"user\"\r\n    }\r\n};\r\n```","```\r\npeerConnection.addStream(stream);\r\n```","```\r\npeerConnection.onaddstream = function(event) {\r\n    videoElement.srcObject = event.stream;\r\n};\r\n```","```\r\nvar configuration = {\r\n    \"iceServers\" : [ {\r\n        \"url\" : \"stun:stun2.1.google.com:19302\"\r\n    } ]\r\n}; \r\n```","```\r\n{\r\n  'iceServers': [\r\n    {\r\n      'urls': 'stun:stun.l.google.com:19302'\r\n    },\r\n    {\r\n      'urls': 'turn:10.158.29.39:3478?transport=udp',\r\n      'credential': 'XXXXXXXXXXXXX',\r\n      'username': 'XXXXXXXXXXXXXXX'\r\n    },\r\n    {\r\n      'urls': 'turn:10.158.29.39:3478?transport=tcp',\r\n      'credential': 'XXXXXXXXXXXXX',\r\n      'username': 'XXXXXXXXXXXXXXX'\r\n    }\r\n  ]\r\n}\r\n```"]