["```\r\nScheduler scheduler = Schedulers.immediate();\r\nScheduler.Worker worker = scheduler.createWorker();\r\nworker.schedule(() -> result += \"action\");\r\n\r\nAssert.assertTrue(result.equals(\"action\"));\r\n```","```\r\nScheduler scheduler = Schedulers.newThread();\r\nScheduler.Worker worker = scheduler.createWorker();\r\nworker.schedule(() -> {\r\n    result += \"First_Action\";\r\n    worker.unsubscribe();\r\n});\r\nworker.schedule(() -> result += \"Second_Action\");\r\n\r\nAssert.assertTrue(result.equals(\"First_Action\"));\r\n```","```\r\nObservable.just(\"Hello\")\r\n  .observeOn(Schedulers.newThread())\r\n  .doOnNext(s ->\r\n    result2 += Thread.currentThread().getName()\r\n  )\r\n  .observeOn(Schedulers.newThread())\r\n  .subscribe(s ->\r\n    result1 += Thread.currentThread().getName()\r\n  );\r\nThread.sleep(500);\r\nAssert.assertTrue(result1.equals(\"RxNewThreadScheduler-1\"));\r\nAssert.assertTrue(result2.equals(\"RxNewThreadScheduler-2\"));\r\n```","```\r\nScheduler scheduler = Schedulers.newThread();\r\nScheduler.Worker worker = scheduler.createWorker();\r\nworker.schedule(() -> {\r\n    result += Thread.currentThread().getName() + \"_Start\";\r\n    worker.schedule(() -> result += \"_worker_\");\r\n    result += \"_End\";\r\n});\r\nThread.sleep(3000);\r\nAssert.assertTrue(result.equals(\r\n  \"RxNewThreadScheduler-1_Start_End_worker_\"));\r\n```","```\r\nScheduler scheduler = Schedulers.immediate();\r\nScheduler.Worker worker = scheduler.createWorker();\r\nworker.schedule(() -> {\r\n    result += Thread.currentThread().getName() + \"_Start\";\r\n    worker.schedule(() -> result += \"_worker_\");\r\n    result += \"_End\";\r\n});\r\nThread.sleep(500);\r\nAssert.assertTrue(result.equals(\r\n  \"main_Start_worker__End\"));\r\n```","```\r\nObservable.just(\"Hello\")\r\n  .subscribeOn(Schedulers.immediate())\r\n  .subscribe(s ->\r\n    result += Thread.currentThread().getName()\r\n  );\r\nThread.sleep(500);\r\nAssert.assertTrue(result.equals(\"main\"));\r\n```","```\r\nObservable.just(2, 4, 6, 8)\r\n  .subscribeOn(Schedulers.trampoline())\r\n  .subscribe(i -> result += \"\" + i);\r\nObservable.just(1, 3, 5, 7, 9)\r\n  .subscribeOn(Schedulers.trampoline())\r\n  .subscribe(i -> result += \"\" + i);\r\nThread.sleep(500);\r\nAssert.assertTrue(result.equals(\"246813579\"));\r\n```","```\r\nScheduler scheduler = Schedulers.trampoline();\r\nScheduler.Worker worker = scheduler.createWorker();\r\nworker.schedule(() -> {\r\n    result += Thread.currentThread().getName() + \"Start\";\r\n    worker.schedule(() -> {\r\n        result += \"_middleStart\";\r\n        worker.schedule(() ->\r\n            result += \"_worker_\"\r\n        );\r\n        result += \"_middleEnd\";\r\n    });\r\n    result += \"_mainEnd\";\r\n});\r\nThread.sleep(500);\r\nAssert.assertTrue(result\r\n  .equals(\"mainStart_mainEnd_middleStart_middleEnd_worker_\"));\r\n```","```\r\nprivate ThreadFactory threadFactory(String pattern) {\r\n    return new ThreadFactoryBuilder()\r\n      .setNameFormat(pattern)\r\n      .build();\r\n}\r\n\r\n@Test\r\npublic void givenExecutors_whenSchedulerFrom_thenReturnElements() \r\n throws InterruptedException {\r\n\r\n    ExecutorService poolA = newFixedThreadPool(\r\n      10, threadFactory(\"Sched-A-%d\"));\r\n    Scheduler schedulerA = Schedulers.from(poolA);\r\n    ExecutorService poolB = newFixedThreadPool(\r\n      10, threadFactory(\"Sched-B-%d\"));\r\n    Scheduler schedulerB = Schedulers.from(poolB);\r\n\r\n    Observable<String> observable = Observable.create(subscriber -> {\r\n      subscriber.onNext(\"Alfa\");\r\n      subscriber.onNext(\"Beta\");\r\n      subscriber.onCompleted();\r\n    });;\r\n\r\n    observable\r\n      .subscribeOn(schedulerA)\r\n      .subscribeOn(schedulerB)\r\n      .subscribe(\r\n        x -> result += Thread.currentThread().getName() + x + \"_\",\r\n        Throwable::printStackTrace,\r\n        () -> result += \"_Completed\"\r\n      );\r\n    Thread.sleep(2000);\r\n    Assert.assertTrue(result.equals(\r\n      \"Sched-A-0Alfa_Sched-A-0Beta__Completed\"));\r\n}\r\n```","```\r\nObservable.just(\"io\")\r\n  .subscribeOn(Schedulers.io())\r\n  .subscribe(i -> result += Thread.currentThread().getName());\r\n\r\nAssert.assertTrue(result.equals(\"RxIoScheduler-2\"));\r\n```","```\r\nObservable.just(\"computation\")\r\n  .subscribeOn(Schedulers.computation())\r\n  .subscribe(i -> result += Thread.currentThread().getName());\r\nAssert.assertTrue(result.equals(\"RxComputationScheduler-1\"));\r\n```","```\r\nList<String> letters = Arrays.asList(\"A\", \"B\", \"C\");\r\nTestScheduler scheduler = Schedulers.test();\r\nTestSubscriber<String> subscriber = new TestSubscriber<>();\r\n\r\nObservable<Long> tick = Observable\r\n  .interval(1, TimeUnit.SECONDS, scheduler);\r\n\r\nObservable.from(letters)\r\n  .zipWith(tick, (string, index) -> index + \"-\" + string)\r\n  .subscribeOn(scheduler)\r\n  .subscribe(subscriber);\r\n\r\nsubscriber.assertNoValues();\r\nsubscriber.assertNotCompleted();\r\n\r\nscheduler.advanceTimeBy(1, TimeUnit.SECONDS);\r\nsubscriber.assertNoErrors();\r\nsubscriber.assertValueCount(1);\r\nsubscriber.assertValues(\"0-A\");\r\n\r\nscheduler.advanceTimeTo(3, TimeUnit.SECONDS);\r\nsubscriber.assertCompleted();\r\nsubscriber.assertNoErrors();\r\nsubscriber.assertValueCount(3);\r\nassertThat(\r\n  subscriber.getOnNextEvents(), \r\n  hasItems(\"0-A\", \"1-B\", \"2-C\"));\r\n```","```\r\nExecutorService poolA = newFixedThreadPool(\r\n  10, threadFactory(\"Sched1-\"));\r\nScheduler schedulerA = Schedulers.from(poolA);\r\nObservable.just('A', 'B')\r\n  .delay(1, TimeUnit.SECONDS, schedulerA)\r\n  .subscribe(i -> result+= Thread.currentThread().getName() + i + \" \");\r\n\r\nThread.sleep(2000);\r\nAssert.assertTrue(result.equals(\"Sched1-A Sched1-B \"));\r\n```"]