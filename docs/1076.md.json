["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\r\n    <version>3.1.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.github.openfeign</groupId>\r\n    <artifactId>feign-core</artifactId>\r\n    <version>11.9.1</version>\r\n</dependency>\r\n```","```\r\npublic class RetreiveMessageErrorDecoder implements ErrorDecoder {\r\n    private final ErrorDecoder errorDecoder = new Default();\r\n    @Override\r\n    public Exception decode(String methodKey, Response response) {\r\n        ExceptionMessage message = null;\r\n        try (InputStream bodyIs = response.body().asInputStream()) {\r\n            ObjectMapper mapper = new ObjectMapper();\r\n            message = mapper.readValue(bodyIs, ExceptionMessage.class);\r\n        } catch (IOException e) {\r\n            return new Exception(e.getMessage());\r\n        }\r\n        switch (response.status()) {\r\n            case 400:\r\n                return new BadRequestException(message.getMessage() != null ? message.getMessage() : \"Bad Request\");\r\n            case 404:\r\n                return new NotFoundException(message.getMessage() != null ? message.getMessage() : \"Not found\");\r\n            default:\r\n                return errorDecoder.decode(methodKey, response);\r\n        }\r\n    }\r\n} \r\n```","```\r\n@FeignClient(name = \"file\", url = \"http://localhost:8081\", \r\n  configuration = FeignSupportConfig.class, fallback = FileUploadClientWithFallbackImpl.class)\r\npublic interface FileUploadClientWithFallBack {\r\n    @PostMapping(value = \"/upload-error\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\r\n    String fileUpload(@RequestPart(value = \"file\") MultipartFile file);\r\n} \r\n```","```\r\n@Component\r\npublic class FileUploadClientWithFallbackImpl implements FileUploadClientWithFallBack {\r\n    @Override\r\n    public String fileUpload(MultipartFile file) {\r\n        try {\r\n            throw new NotFoundException(\"hi, something wrong\");\r\n        } catch (Exception ex) {\r\n            if (ex instanceof BadRequestException) {\r\n                return \"Bad Request!!!\";\r\n            }\r\n            if (ex instanceof NotFoundException) {\r\n                return \"Not Found!!!\";\r\n            }\r\n            if (ex instanceof Exception) {\r\n                return \"Exception!!!\";\r\n            }\r\n            return \"Successfully Uploaded file!!!\";\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Test(expected = NotFoundException.class)\r\npublic void whenFileUploadClientFallback_thenFileUploadError() throws IOException {\r\n    ClassLoader classloader = Thread.currentThread().getContextClassLoader();\r\n    File file = new File(classloader.getResource(FILE_NAME).getFile());\r\n    Assert.assertTrue(file.exists());\r\n    FileInputStream input = new FileInputStream(file);\r\n    MultipartFile multipartFile = new MockMultipartFile(\"file\", file.getName(), \"text/plain\",\r\n      IOUtils.toByteArray(input));\r\n    uploadService.uploadFileWithFallback(multipartFile);\r\n}\r\n```","```\r\n@FeignClient(name = \"file\", url = \"http://localhost:8081\", \r\n  configuration = FeignSupportConfig.class, fallbackFactory = FileUploadClientFallbackFactory.class)\r\npublic interface FileUploadClient {\r\n    @PostMapping(value = \"/upload-file\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\r\n    String fileUpload(@RequestPart(value = \"file\") MultipartFile file);\r\n}\r\n```","```\r\n@Component\r\npublic class FileUploadClientFallbackFactory implements FallbackFactory<FileUploadClient> {\r\n    @Override\r\n    public FileUploadClient create(Throwable cause) {\r\n        return new FileUploadClient() {\r\n            @Override\r\n            public String fileUpload(MultipartFile file) {\r\n                if (cause instanceof BadRequestException) {\r\n                    return \"Bad Request!!!\";\r\n                }\r\n                if (cause instanceof NotFoundException) {\r\n                    return \"Not Found!!!\";\r\n                }\r\n                if (cause instanceof Exception) {\r\n                    return \"Exception!!!\";\r\n                }\r\n                return \"Successfully Uploaded file!!!\";\r\n            }\r\n        };\r\n    }\r\n}\r\n```","```\r\n@Test(expected = NotFoundException.class)\r\npublic void whenFileUploadClientFallbackFactory_thenFileUploadError() throws IOException {\r\n    ClassLoader classloader = Thread.currentThread().getContextClassLoader();\r\n    File file = new File(classloader.getResource(FILE_NAME).getFile());\r\n    Assert.assertTrue(file.exists());\r\n    FileInputStream input = new FileInputStream(file);\r\n    MultipartFile multipartFile = new MockMultipartFile(\"file\", file.getName(), \"text/plain\",\r\n      IOUtils.toByteArray(input));\r\n    uploadService.uploadFileWithFallbackFactory(multipartFile);\r\n} \r\n```"]