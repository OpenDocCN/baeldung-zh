["```\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n  <groupId>it.ozimov</groupId>\r\n  <artifactId>embedded-redis</artifactId>\r\n  <version>0.7.2</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n\r\n<dependency>\r\n  <groupId>org.springframework.boot</groupId>\r\n  <artifactId>spring-boot-starter-test</artifactId>\r\n  <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class RedisProperties {\r\n    private int redisPort;\r\n    private String redisHost;\r\n\r\n    public RedisProperties(\r\n      @Value(\"${spring.redis.port}\") int redisPort, \r\n      @Value(\"${spring.redis.host}\") String redisHost) {\r\n        this.redisPort = redisPort;\r\n        this.redisHost = redisHost;\r\n    }\r\n\r\n    // getters\r\n}\r\n```","```\r\n@Configuration\r\n@EnableRedisRepositories\r\npublic class RedisConfiguration {\r\n\r\n    @Bean\r\n    public LettuceConnectionFactory redisConnectionFactory(\r\n      RedisProperties redisProperties) {\r\n        return new LettuceConnectionFactory(\r\n          redisProperties.getRedisHost(), \r\n          redisProperties.getRedisPort());\r\n    }\r\n\r\n    @Bean\r\n    public RedisTemplate<?, ?> redisTemplate(LettuceConnectionFactory connectionFactory) {\r\n        RedisTemplate<byte[], byte[]> template = new RedisTemplate<>();\r\n        template.setConnectionFactory(connectionFactory);\r\n        return template;\r\n    }\r\n}\r\n```","```\r\nspring.redis.host=localhost\r\nspring.redis.port=6370\r\n```","```\r\n@TestConfiguration\r\npublic class TestRedisConfiguration {\r\n\r\n    private RedisServer redisServer;\r\n\r\n    public TestRedisConfiguration(RedisProperties redisProperties) {\r\n        this.redisServer = new RedisServer(redisProperties.getRedisPort());\r\n    }\r\n\r\n    @PostConstruct\r\n    public void postConstruct() {\r\n        redisServer.start();\r\n    }\r\n\r\n    @PreDestroy\r\n    public void preDestroy() {\r\n        redisServer.stop();\r\n    }\r\n}\r\n```","```\r\nthis.redisServer = new RedisServer(\"/path/redis\", redisProperties.getRedisPort());\r\n```","```\r\nRedisExecProvider customProvider = RedisExecProvider.defaultProvider()\r\n  .override(OS.UNIX, \"/path/unix/redis\")\r\n  .override(OS.Windows, Architecture.x86_64, \"/path/windows/redis\")\r\n  .override(OS.MAC_OS_X, Architecture.x86_64, \"/path/macosx/redis\")\r\n\r\nthis.redisServer = new RedisServer(customProvider, redisProperties.getRedisPort());\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = TestRedisConfiguration.class)\r\npublic class UserRepositoryIntegrationTest {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Test\r\n    public void shouldSaveUser_toRedis() {\r\n        UUID id = UUID.randomUUID();\r\n        User user = new User(id, \"name\");\r\n\r\n        User saved = userRepository.save(user);\r\n\r\n        assertNotNull(saved);\r\n    }\r\n}\r\n```"]