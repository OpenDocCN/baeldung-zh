["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-amqp</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```","```\r\n@Bean \r\nCabBookingService bookingService() {\r\n    return new CabBookingServiceImpl();\r\n}\r\n```","```\r\n@Bean \r\nQueue queue() {\r\n    return new Queue(\"remotingQueue\");\r\n}\r\n```","```\r\n@Bean AmqpInvokerServiceExporter exporter(\r\n  CabBookingService implementation, AmqpTemplate template) {\r\n\r\n    AmqpInvokerServiceExporter exporter = new AmqpInvokerServiceExporter();\r\n    exporter.setServiceInterface(CabBookingService.class);\r\n    exporter.setService(implementation);\r\n    exporter.setAmqpTemplate(template);\r\n    return exporter;\r\n}\r\n```","```\r\n@Bean \r\nSimpleMessageListenerContainer listener(\r\n  ConnectionFactory facotry, \r\n  AmqpInvokerServiceExporter exporter, \r\n  Queue queue) {\r\n\r\n    SimpleMessageListenerContainer container\r\n     = new SimpleMessageListenerContainer(facotry);\r\n    container.setMessageListener(exporter);\r\n    container.setQueueNames(queue.getName());\r\n    return container;\r\n}\r\n```","```\r\nspring.rabbitmq.dynamic=true\r\nspring.rabbitmq.port=5672\r\nspring.rabbitmq.username=guest\r\nspring.rabbitmq.password=guest\r\nspring.rabbitmq.host=localhost\r\n```","```\r\n@Bean \r\nQueue queue() {\r\n    return new Queue(\"remotingQueue\");\r\n}\r\n```","```\r\n@Bean \r\nExchange directExchange(Queue someQueue) {\r\n    DirectExchange exchange = new DirectExchange(\"remoting.exchange\");\r\n    BindingBuilder\r\n      .bind(someQueue)\r\n      .to(exchange)\r\n      .with(\"remoting.binding\");\r\n    return exchange;\r\n}\r\n```","```\r\n@Bean RabbitTemplate amqpTemplate(ConnectionFactory factory) {\r\n    RabbitTemplate template = new RabbitTemplate(factory);\r\n    template.setRoutingKey(\"remoting.binding\");\r\n    template.setExchange(\"remoting.exchange\");\r\n    return template;\r\n}\r\n```","```\r\n@Bean AmqpProxyFactoryBean amqpFactoryBean(AmqpTemplate amqpTemplate) {\r\n    AmqpProxyFactoryBean factoryBean = new AmqpProxyFactoryBean();\r\n    factoryBean.setServiceInterface(CabBookingService.class);\r\n    factoryBean.setAmqpTemplate(amqpTemplate);\r\n    return factoryBean;\r\n}\r\n```","```\r\nCabBookingService service = context.getBean(CabBookingService.class);\r\nout.println(service.bookRide(\"13 Seagate Blvd, Key Largo, FL 33037\"));\r\n```"]