["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\r\n    <version>3.1.3</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-stream-test-support</artifactId>\r\n    <version>3.1.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableBinding(Processor.class)\r\npublic class MyLoggerServiceApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(MyLoggerServiceApplication.class, args);\r\n    }\r\n\r\n    @StreamListener(Processor.INPUT)\r\n    @SendTo(Processor.OUTPUT)\r\n    public LogMessage enrichLogMessage(LogMessage log) {\r\n        return new LogMessage(String.format(\"[1]: %s\", log.getMessage()));\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = MyLoggerServiceApplication.class)\r\n@DirtiesContext\r\npublic class MyLoggerApplicationTests {\r\n\r\n    @Autowired\r\n    private Processor pipe;\r\n\r\n    @Autowired\r\n    private MessageCollector messageCollector;\r\n\r\n    @Test\r\n    public void whenSendMessage_thenResponseShouldUpdateText() {\r\n        pipe.input()\r\n          .send(MessageBuilder.withPayload(new LogMessage(\"This is my message\"))\r\n          .build());\r\n\r\n        Object payload = messageCollector.forChannel(pipe.output())\r\n          .poll()\r\n          .getPayload();\r\n\r\n        assertEquals(\"[1]: This is my message\", payload.toString());\r\n    }\r\n}\r\n```","```\r\npublic interface MyProcessor {\r\n    String INPUT = \"myInput\";\r\n\r\n    @Input\r\n    SubscribableChannel myInput();\r\n\r\n    @Output(\"myOutput\")\r\n    MessageChannel anOutput();\r\n\r\n    @Output\r\n    MessageChannel anotherOutput();\r\n}\r\n```","```\r\n@Autowired\r\nprivate MyProcessor processor;\r\n\r\n@StreamListener(MyProcessor.INPUT)\r\npublic void routeValues(Integer val) {\r\n    if (val < 10) {\r\n        processor.anOutput().send(message(val));\r\n    } else {\r\n        processor.anotherOutput().send(message(val));\r\n    }\r\n}\r\n\r\nprivate static final <T> Message<T> message(T val) {\r\n    return MessageBuilder.withPayload(val).build();\r\n}\r\n```","```\r\n@Autowired\r\nprivate MyProcessor processor;\r\n\r\n@StreamListener(\r\n  target = MyProcessor.INPUT, \r\n  condition = \"payload < 10\")\r\npublic void routeValuesToAnOutput(Integer val) {\r\n    processor.anOutput().send(message(val));\r\n}\r\n\r\n@StreamListener(\r\n  target = MyProcessor.INPUT, \r\n  condition = \"payload >= 10\")\r\npublic void routeValuesToAnotherOutput(Integer val) {\r\n    processor.anotherOutput().send(message(val));\r\n}\r\n```","```\r\nrabbit:\\\r\norg.springframework.cloud.stream.binder.rabbit.config.RabbitMessageChannelBinderConfiguration\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-stream-binder-rabbit</artifactId>\r\n    <version>1.3.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\nspring:\r\n  cloud:\r\n    stream:\r\n      bindings:\r\n        input:\r\n          destination: queue.log.messages\r\n          binder: local_rabbit\r\n        output:\r\n          destination: queue.pretty.log.messages\r\n          binder: local_rabbit\r\n      binders:\r\n        local_rabbit:\r\n          type: rabbit\r\n          environment:\r\n            spring:\r\n              rabbitmq:\r\n                host: <host>\r\n                port: 5672\r\n                username: <username>\r\n                password: <password>\r\n                virtual-host: /\r\n```","```\r\n@SpringBootApplication\r\n@EnableBinding(Processor.class)\r\npublic class MyLoggerServiceApplication {\r\n    //...\r\n\r\n    @Bean\r\n    public MessageConverter providesTextPlainMessageConverter() {\r\n        return new TextPlainMessageConverter();\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\npublic class TextPlainMessageConverter extends AbstractMessageConverter {\r\n\r\n    public TextPlainMessageConverter() {\r\n        super(new MimeType(\"text\", \"plain\"));\r\n    }\r\n\r\n    @Override\r\n    protected boolean supports(Class<?> clazz) {\r\n        return (LogMessage.class == clazz);\r\n    }\r\n\r\n    @Override\r\n    protected Object convertFromInternal(Message<?> message, \r\n        Class<?> targetClass, Object conversionHint) {\r\n        Object payload = message.getPayload();\r\n        String text = payload instanceof String \r\n          ? (String) payload \r\n          : new String((byte[]) payload);\r\n        return new LogMessage(text);\r\n    }\r\n}\r\n```","```\r\nspring:\r\n  cloud:\r\n    stream:\r\n      bindings:\r\n        input:\r\n          destination: queue.log.messages\r\n          binder: local_rabbit\r\n          group: logMessageConsumers\r\n          ...\r\n```"]