["```\r\n@Test\r\npublic void whenWriteUsingFiles_thenWritten() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    Files.write(expectedValue, file, Charsets.UTF_8);\r\n    String result = Files.toString(file, Charsets.UTF_8);\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteUsingCharSink_thenWritten() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    CharSink sink = Files.asCharSink(file, Charsets.UTF_8);\r\n    sink.write(expectedValue);\r\n\r\n    String result = Files.toString(file, Charsets.UTF_8);\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteMultipleLinesUsingCharSink_thenWritten() throws IOException {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Jane\", \"Adam\", \"Tom\");\r\n    File file = new File(\"test.txt\");\r\n    CharSink sink = Files.asCharSink(file, Charsets.UTF_8);\r\n    sink.writeLines(names, \" \");\r\n\r\n    String result = Files.toString(file, Charsets.UTF_8);\r\n    String expectedValue = Joiner.on(\" \").join(names);\r\n    assertEquals(expectedValue, result.trim());\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteUsingByteSink_thenWritten() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    ByteSink sink = Files.asByteSink(file);\r\n    sink.write(expectedValue.getBytes());\r\n\r\n    String result = Files.toString(file, Charsets.UTF_8);\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingFiles_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    String result = Files.toString(file, Charsets.UTF_8);\r\n\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadMultipleLinesUsingFiles_thenRead() throws IOException {\r\n    File file = new File(\"test.txt\");\r\n    List<String> result = Files.readLines(file, Charsets.UTF_8);\r\n\r\n    assertThat(result, contains(\"John\", \"Jane\", \"Adam\", \"Tom\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingCharSource_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    CharSource source = Files.asCharSource(file, Charsets.UTF_8);\r\n\r\n    String result = source.read();\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadMultipleCharSources_thenRead() throws IOException {\r\n    String expectedValue = \"Hello worldTest\";\r\n    File file1 = new File(\"test1.txt\");\r\n    File file2 = new File(\"test2.txt\");\r\n\r\n    CharSource source1 = Files.asCharSource(file1, Charsets.UTF_8);\r\n    CharSource source2 = Files.asCharSource(file2, Charsets.UTF_8);\r\n    CharSource source = CharSource.concat(source1, source2);\r\n\r\n    String result = source.read();\r\n    assertEquals(expectedValue, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingCharStream_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    FileReader reader = new FileReader(\"test.txt\");\r\n    String result = CharStreams.toString(reader);\r\n\r\n    assertEquals(expectedValue, result);\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingByteSource_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    File file = new File(\"test.txt\");\r\n    ByteSource source = Files.asByteSource(file);\r\n\r\n    byte[] result = source.read();\r\n    assertEquals(expectedValue, new String(result));\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadAfterOffsetUsingByteSource_thenRead() throws IOException {\r\n    String expectedValue = \"lo world\";\r\n    File file = new File(\"test.txt\");\r\n    long offset = 3;\r\n    long len = 1000;\r\n\r\n    ByteSource source = Files.asByteSource(file).slice(offset, len);\r\n    byte[] result = source.read();\r\n    assertEquals(expectedValue, new String(result));\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingByteStream_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    FileInputStream reader = new FileInputStream(\"test.txt\");\r\n    byte[] result = ByteStreams.toByteArray(reader);\r\n    reader.close();\r\n\r\n    assertEquals(expectedValue, new String(result));\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadUsingResources_thenRead() throws IOException {\r\n    String expectedValue = \"Hello world\";\r\n    URL url = Resources.getResource(\"test.txt\");\r\n    String result = Resources.toString(url, Charsets.UTF_8);\r\n\r\n    assertEquals(expectedValue, result);\r\n}\r\n```"]