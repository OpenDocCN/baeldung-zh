["```\r\nprivate String fileLocation;\r\n\r\n@PostMapping(\"/uploadExcelFile\")\r\npublic String uploadFile(Model model, MultipartFile file) throws IOException {\r\n    InputStream in = file.getInputStream();\r\n    File currDir = new File(\".\");\r\n    String path = currDir.getAbsolutePath();\r\n    fileLocation = path.substring(0, path.length() - 1) + file.getOriginalFilename();\r\n    FileOutputStream f = new FileOutputStream(fileLocation);\r\n    int ch = 0;\r\n    while ((ch = in.read()) != -1) {\r\n        f.write(ch);\r\n    }\r\n    f.flush();\r\n    f.close();\r\n    model.addAttribute(\"message\", \"File: \" + file.getOriginalFilename() \r\n      + \" has been uploaded successfully!\");\r\n    return \"excel\";\r\n}\r\n```","```\r\n<c:url value=\"/uploadExcelFile\" var=\"uploadFileUrl\" />\r\n<form method=\"post\" enctype=\"multipart/form-data\"\r\n  action=\"${uploadFileUrl}\">\r\n    <input type=\"file\" name=\"file\" accept=\".xls,.xlsx\" /> <input\r\n      type=\"submit\" value=\"Upload file\" />\r\n</form>\r\n```","```\r\npublic class MyCell {\r\n    private String content;\r\n    private String textColor;\r\n    private String bgColor;\r\n    private String textSize;\r\n    private String textWeight;\r\n\r\n    public MyCell(String content) {\r\n        this.content = content;\r\n    }\r\n\r\n    //standard constructor, getters, setters\r\n}\r\n```","```\r\nHSSFCellStyle cellStyle = cell.getCellStyle();\r\n\r\nMyCell myCell = new MyCell();\r\n\r\nHSSFColor bgColor = cellStyle.getFillForegroundColorColor();\r\nif (bgColor != null) {\r\n    short[] rgbColor = bgColor.getTriplet();\r\n    myCell.setBgColor(\"rgb(\" + rgbColor[0] + \",\"\r\n      + rgbColor[1] + \",\" + rgbColor[2] + \")\");\r\n    }\r\nHSSFFont font = cell.getCellStyle().getFont(workbook);\r\n```","```\r\nmyCell.setTextSize(font.getFontHeightInPoints() + \"\");\r\nif (font.getBold()) {\r\n    myCell.setTextWeight(\"bold\");\r\n}\r\nHSSFColor textColor = font.getHSSFColor(workbook);\r\nif (textColor != null) {\r\n    short[] rgbColor = textColor.getTriplet();\r\n    myCell.setTextColor(\"rgb(\" + rgbColor[0] + \",\"\r\n      + rgbColor[1] + \",\" + rgbColor[2] + \")\");\r\n}\r\n```","```\r\nXSSFCellStyle cellStyle = cell.getCellStyle();\r\n\r\nMyCell myCell = new MyCell();\r\nXSSFColor bgColor = cellStyle.getFillForegroundColorColor();\r\nif (bgColor != null) {\r\n    byte[] rgbColor = bgColor.getRGB();\r\n    myCell.setBgColor(\"rgb(\" \r\n      + (rgbColor[0] < 0 ? (rgbColor[0] + 0xff) : rgbColor[0]) + \",\"\r\n      + (rgbColor[1] < 0 ? (rgbColor[1] + 0xff) : rgbColor[1]) + \",\"\r\n      + (rgbColor[2] < 0 ? (rgbColor[2] + 0xff) : rgbColor[2]) + \")\");\r\n}\r\nXSSFFont font = cellStyle.getFont();\r\n```","```\r\nmyCell.setTextSize(font.getFontHeightInPoints() + \"\");\r\nif (font.getBold()) {\r\n    myCell.setTextWeight(\"bold\");\r\n}\r\nXSSFColor textColor = font.getXSSFColor();\r\nif (textColor != null) {\r\n    byte[] rgbColor = textColor.getRGB();\r\n    myCell.setTextColor(\"rgb(\"\r\n      + (rgbColor[0] < 0 ? (rgbColor[0] + 0xff) : rgbColor[0]) + \",\" \r\n      + (rgbColor[1] < 0 ? (rgbColor[1] + 0xff) : rgbColor[1]) + \",\" \r\n      + (rgbColor[2] < 0 ? (rgbColor[2] + 0xff) : rgbColor[2]) + \")\");\r\n}\r\n```","```\r\nint maxNrCols = data.values().stream()\r\n  .mapToInt(List::size)\r\n  .max()\r\n  .orElse(0);\r\n\r\ndata.values().stream()\r\n  .filter(ls -> ls.size() < maxNrCols)\r\n  .forEach(ls -> {\r\n      IntStream.range(ls.size(), maxNrCols)\r\n        .forEach(i -> ls.add(new MyCell(\"\")));\r\n  });\r\n```","```\r\n@Resource(name = \"excelPOIHelper\")\r\nprivate ExcelPOIHelper excelPOIHelper;\r\n\r\n@RequestMapping(method = RequestMethod.GET, value = \"/readPOI\")\r\npublic String readPOI(Model model) throws IOException {\r\n\r\n  if (fileLocation != null) {\r\n      if (fileLocation.endsWith(\".xlsx\") || fileLocation.endsWith(\".xls\")) {\r\n          Map<Integer, List<MyCell>> data\r\n            = excelPOIHelper.readExcel(fileLocation);\r\n          model.addAttribute(\"data\", data);\r\n      } else {\r\n          model.addAttribute(\"message\", \"Not a valid excel file!\");\r\n      }\r\n  } else {\r\n      model.addAttribute(\"message\", \"File missing! Please upload an excel file.\");\r\n  }\r\n  return \"excel\";\r\n}\r\n```","```\r\n<c:if test=\"${not empty data}\">\r\n    <table style=\"border: 1px solid black; border-collapse: collapse;\">\r\n        <c:forEach items=\"${data}\" var=\"row\">\r\n            <tr>\r\n                <c:forEach items=\"${row.value}\" var=\"cell\">\r\n                    <td style=\"border:1px solid black;height:20px;width:100px;\r\n                      background-color:${cell.bgColor};color:${cell.textColor};\r\n                      font-weight:${cell.textWeight};font-size:${cell.textSize}pt;\">\r\n                      ${cell.content}\r\n                    </td>\r\n                </c:forEach>\r\n            </tr>\r\n        </c:forEach>\r\n    </table>\r\n</c:if>\r\n```"]