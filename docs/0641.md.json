["```\r\nConnection connection = DriverManager.getConnection(CONNECTION_URL, USER, PASSWORD);\r\ntry {\r\n    connection.setAutoCommit(false);\r\n    PreparedStatement firstStatement = connection .prepareStatement(\"firstQuery\");\r\n    firstStatement.executeUpdate();\r\n    PreparedStatement secondStatement = connection .prepareStatement(\"secondQuery\");\r\n    secondStatement.executeUpdate();\r\n    connection.commit();\r\n} catch (Exception e) {\r\n    connection.rollback();\r\n}\r\n```","```\r\nEntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory(\"jpa-example\");\r\nEntityManager entityManager = entityManagerFactory.createEntityManager();\r\ntry {\r\n    entityManager.getTransaction().begin();\r\n    entityManager.persist(firstEntity);\r\n    entityManager.persist(secondEntity);\r\n    entityManager.getTransaction().commit();\r\n} catch (Exception e) {\r\n    entityManager.getTransaction().rollback();\r\n}\r\n```","```\r\nActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONNECTION_URL);\r\nConnection connection = = connectionFactory.createConnection();\r\nconnection.start();\r\ntry {\r\n    Session session = connection.createSession(true, 0);\r\n    Destination = destination = session.createTopic(\"TEST.FOO\");\r\n    MessageProducer producer = session.createProducer(destination);\r\n    producer.send(firstMessage);\r\n    producer.send(secondMessage);\r\n    session.commit();\r\n} catch (Exception e) {\r\n    session.rollback();\r\n}\r\n```","```\r\nAtomikosDataSourceBean atomikosDataSourceBean = new AtomikosDataSourceBean();\r\natomikosDataSourceBean.setXaDataSourceClassName(\"com.mysql.cj.jdbc.MysqlXADataSource\");\r\nDataSource dataSource = atomikosDataSourceBean;\r\n```","```\r\nAtomikosConnectionFactoryBean atomikosConnectionFactoryBean = new AtomikosConnectionFactoryBean();\r\natomikosConnectionFactoryBean.setXaConnectionFactory(new ActiveMQXAConnectionFactory());\r\nConnectionFactory connectionFactory = atomikosConnectionFactoryBean;\r\n```","```\r\nUserTransaction userTransaction = new UserTransactionImp();\r\n```","```\r\ntry {\r\n    userTransaction.begin();\r\n\r\n    java.sql.Connection dbConnection = dataSource.getConnection();\r\n    PreparedStatement preparedStatement = dbConnection.prepareStatement(SQL_INSERT);\r\n    preparedStatement.executeUpdate();\r\n\r\n    javax.jms.Connection mbConnection = connectionFactory.createConnection();\r\n    Session session = mbConnection.createSession(true, 0);\r\n    Destination destination = session.createTopic(\"TEST.FOO\");\r\n    MessageProducer producer = session.createProducer(destination);\r\n    producer.send(MESSAGE);\r\n\r\n    userTransaction.commit();\r\n} catch (Exception e) {\r\n    userTransaction.rollback();\r\n}\r\n```","```\r\n@Bean\r\npublic PlatformTransactionManager platformTransactionManager() throws Throwable {\r\n    return new JtaTransactionManager(\r\n                userTransaction(), transactionManager());\r\n}\r\n```","```\r\n@Bean\r\npublic UserTransaction userTransaction() {\r\n    return new UserTransactionImp();\r\n}\r\n\r\n@Bean(initMethod = \"init\", destroyMethod = \"close\")\r\npublic TransactionManager transactionManager() {\r\n    return new UserTransactionManager();\r\n}\r\n```","```\r\n@Bean\r\npublic JmsTemplate jmsTemplate() throws Throwable {\r\n    return new JmsTemplate(connectionFactory());\r\n}\r\n```","```\r\n@Bean(initMethod = \"init\", destroyMethod = \"close\")\r\npublic ConnectionFactory connectionFactory() {\r\n    ActiveMQXAConnectionFactory activeMQXAConnectionFactory = new \r\nActiveMQXAConnectionFactory();\r\n    activeMQXAConnectionFactory.setBrokerURL(\"tcp://localhost:61616\");\r\n    AtomikosConnectionFactoryBean atomikosConnectionFactoryBean = new AtomikosConnectionFactoryBean();\r\n    atomikosConnectionFactoryBean.setUniqueResourceName(\"xamq\");\r\n    atomikosConnectionFactoryBean.setLocalTransactionMode(false);\r\natomikosConnectionFactoryBean.setXaConnectionFactory(activeMQXAConnectionFactory);\r\n    return atomikosConnectionFactoryBean;\r\n}\r\n```","```\r\n@Bean\r\npublic LocalContainerEntityManagerFactoryBean entityManager() throws SQLException {\r\n    LocalContainerEntityManagerFactoryBean entityManager = new LocalContainerEntityManagerFactoryBean();\r\n    entityManager.setDataSource(dataSource());\r\n    Properties properties = new Properties();\r\n    properties.setProperty( \"javax.persistence.transactionType\", \"jta\");\r\n    entityManager.setJpaProperties(properties);\r\n    return entityManager;\r\n}\r\n```","```\r\n@Bean(initMethod = \"init\", destroyMethod = \"close\")\r\npublic DataSource dataSource() throws SQLException {\r\n    MysqlXADataSource mysqlXaDataSource = new MysqlXADataSource();\r\n    mysqlXaDataSource.setUrl(\"jdbc:mysql://127.0.0.1:3306/test\");\r\n    AtomikosDataSourceBean xaDataSource = new AtomikosDataSourceBean();\r\n    xaDataSource.setXaDataSource(mysqlXaDataSource);\r\n    xaDataSource.setUniqueResourceName(\"xads\");\r\n    return xaDataSource;\r\n}\r\n```","```\r\n@PersistenceContext\r\nEntityManager entityManager;\r\n\r\n@Autowired\r\nJmsTemplate jmsTemplate;\r\n\r\n@Transactional(propagation = Propagation.REQUIRED)\r\npublic void process(ENTITY, MESSAGE) {\r\n   entityManager.persist(ENTITY);\r\n   jmsTemplate.convertAndSend(DESTINATION, MESSAGE);\r\n}\r\n```","```\r\n@Autowired\r\nprivate PlatformTransactionManager transactionManager;\r\n\r\npublic void process(ENTITY, MESSAGE) {\r\n    TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);\r\n    transactionTemplate.executeWithoutResult(status -> {\r\n        entityManager.persist(ENTITY);\r\n        jmsTemplate.convertAndSend(DESTINATION, MESSAGE);\r\n    });\r\n}\r\n```"]