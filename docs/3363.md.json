["```\r\nList<Integer> integers = Arrays.asList(3, 2, 1);\r\n\r\nintegers.sort(Ordering.natural());\r\n\r\nassertEquals(Arrays.asList(1,2,3), integers);\r\n```","```\r\nclass Person {\r\n    private String name;\r\n    private Integer age;\r\n\r\n    // standard constructors, getters\r\n}\r\n```","```\r\nList<Person> persons = Arrays.asList(new Person(\"Michael\", 10), new Person(\"Alice\", 3));\r\nOrdering<Person> orderingByAge = new Ordering<Person>() {\r\n    @Override\r\n    public int compare(Person p1, Person p2) {\r\n        return Ints.compare(p1.age, p2.age);\r\n    }\r\n};\r\n\r\npersons.sort(orderingByAge);\r\n\r\nassertEquals(Arrays.asList(new Person(\"Alice\", 3), new Person(\"Michael\", 10)), persons);\r\n```","```\r\nList<Person> persons = Arrays.asList(\r\n  new Person(\"Michael\", 10),\r\n  new Person(\"Alice\", 3), \r\n  new Person(\"Thomas\", null));\r\n\r\nOrdering<Person> ordering = Ordering\r\n  .natural()\r\n  .nullsFirst()\r\n  .onResultOf(new Function<Person, Comparable>() {\r\n      @Override\r\n      public Comparable apply(Person person) {\r\n          return person.age;\r\n      }\r\n});\r\n\r\npersons.sort(ordering);\r\n\r\nassertEquals(Arrays.asList(\r\n  new Person(\"Thomas\", null), \r\n  new Person(\"Alice\", 3), \r\n  new Person(\"Michael\", 10)), persons);\r\n```"]