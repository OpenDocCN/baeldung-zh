["```\r\n@Transactional\r\npublic class TxServiceActivator {\r\n\r\n    @Autowired\r\n    private JdbcTemplate jdbcTemplate;\r\n\r\n    public void storeTestResult(String testResult) {\r\n        this.jdbcTemplate.update(\"insert into STUDENT values(?)\", testResult);\r\n        log.info(\"Test result is stored: {}\", testResult);\r\n    }\r\n} \r\n```","```\r\n@Bean\r\n@InboundChannelAdapter(value = \"someChannel\", poller = @Poller(value = \"pollerMetadata\"))\r\npublic MessageSource<File> someMessageSource() {\r\n    ...\r\n}\r\n\r\n@Bean\r\npublic PollerMetadata pollerMetadata() {\r\n    return Pollers.fixedDelay(5000)\r\n      .advice(transactionInterceptor())\r\n      .transactionSynchronizationFactory(transactionSynchronizationFactory)\r\n      .get();\r\n}\r\n\r\nprivate TransactionInterceptor transactionInterceptor() {\r\n    return new TransactionInterceptorBuilder()\r\n      .transactionManager(txManager)\r\n      .build();\r\n} \r\n```","```\r\n@Bean\r\n@InboundChannelAdapter(value = \"inputChannel\", poller = @Poller(value = \"pollerMetadata\"))\r\npublic MessageSource<File> fileReadingMessageSource() {\r\n    FileReadingMessageSource sourceReader = new FileReadingMessageSource();\r\n    sourceReader.setDirectory(new File(INPUT_DIR));\r\n    sourceReader.setFilter(new SimplePatternFileListFilter(FILE_PATTERN));\r\n    return sourceReader;\r\n}\r\n\r\n@Bean\r\npublic PollerMetadata pollerMetadata() {\r\n    return Pollers.fixedDelay(5000)\r\n      .advice(transactionInterceptor())\r\n      .transactionSynchronizationFactory(transactionSynchronizationFactory)\r\n      .get();\r\n} \r\n```","```\r\n@Bean\r\npublic TransactionSynchronizationFactory transactionSynchronizationFactory() {\r\n    ExpressionEvaluatingTransactionSynchronizationProcessor processor =\r\n      new ExpressionEvaluatingTransactionSynchronizationProcessor();\r\n\r\n    SpelExpressionParser spelParser = new SpelExpressionParser();\r\n\r\n    processor.setAfterCommitExpression(\r\n      spelParser.parseExpression(\r\n        \"payload.renameTo(new java.io.File(payload.absolutePath + '.PASSED'))\"));\r\n\r\n    processor.setAfterRollbackExpression(\r\n      spelParser.parseExpression(\r\n        \"payload.renameTo(new java.io.File(payload.absolutePath + '.FAILED'))\"));\r\n\r\n    return new DefaultTransactionSynchronizationFactory(processor);\r\n} \r\n```","```\r\n@Bean\r\npublic MessageChannel inputChannel() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean\r\n@Transformer(inputChannel = \"inputChannel\", outputChannel = \"toServiceChannel\")\r\npublic FileToStringTransformer fileToStringTransformer() {\r\n    return new FileToStringTransformer();\r\n} \r\n```","```\r\n@ServiceActivator(inputChannel = \"toServiceChannel\")\r\npublic void serviceActivator(String payload) {\r\n\r\n    jdbcTemplate.update(\"insert into STUDENT values(?)\", payload);\r\n\r\n    if (payload.toLowerCase().startsWith(\"fail\")) {\r\n        log.error(\"Service failure. Test result: {} \", payload);\r\n        throw new RuntimeException(\"Service failure.\");\r\n    }\r\n\r\n    log.info(\"Service success. Test result: {}\", payload);\r\n} \r\n```"]