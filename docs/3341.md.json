["```\r\npublic class DelayObject implements Delayed {\r\n    private String data;\r\n    private long startTime;\r\n\r\n    public DelayObject(String data, long delayInMilliseconds) {\r\n        this.data = data;\r\n        this.startTime = System.currentTimeMillis() + delayInMilliseconds;\r\n    }\r\n```","```\r\n@Override\r\npublic long getDelay(TimeUnit unit) {\r\n    long diff = startTime - System.currentTimeMillis();\r\n    return unit.convert(diff, TimeUnit.MILLISECONDS);\r\n}\r\n```","```\r\n@Override\r\npublic int compareTo(Delayed o) {\r\n    return Ints.saturatedCast(\r\n      this.startTime - ((DelayObject) o).startTime);\r\n}\r\n```","```\r\npublic class DelayQueueProducer implements Runnable {\r\n\r\n    private BlockingQueue<DelayObject> queue;\r\n    private Integer numberOfElementsToProduce;\r\n    private Integer delayOfEachProducedMessageMilliseconds;\r\n\r\n    // standard constructor\r\n\r\n    @Override\r\n    public void run() {\r\n        for (int i = 0; i < numberOfElementsToProduce; i++) {\r\n            DelayObject object\r\n              = new DelayObject(\r\n                UUID.randomUUID().toString(), delayOfEachProducedMessageMilliseconds);\r\n            System.out.println(\"Put object: \" + object);\r\n            try {\r\n                queue.put(object);\r\n                Thread.sleep(500);\r\n            } catch (InterruptedException ie) {\r\n                ie.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class DelayQueueConsumer implements Runnable {\r\n    private BlockingQueue<DelayObject> queue;\r\n    private Integer numberOfElementsToTake;\r\n    public AtomicInteger numberOfConsumedElements = new AtomicInteger();\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public void run() {\r\n        for (int i = 0; i < numberOfElementsToTake; i++) {\r\n            try {\r\n                DelayObject object = queue.take();\r\n                numberOfConsumedElements.incrementAndGet();\r\n                System.out.println(\"Consumer take: \" + object);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDelayQueue_whenProduceElement\r\n  _thenShouldConsumeAfterGivenDelay() throws InterruptedException {\r\n    // given\r\n    ExecutorService executor = Executors.newFixedThreadPool(2);\r\n\r\n    BlockingQueue<DelayObject> queue = new DelayQueue<>();\r\n    int numberOfElementsToProduce = 2;\r\n    int delayOfEachProducedMessageMilliseconds = 500;\r\n    DelayQueueConsumer consumer = new DelayQueueConsumer(\r\n      queue, numberOfElementsToProduce);\r\n    DelayQueueProducer producer = new DelayQueueProducer(\r\n      queue, numberOfElementsToProduce, delayOfEachProducedMessageMilliseconds);\r\n\r\n    // when\r\n    executor.submit(producer);\r\n    executor.submit(consumer);\r\n\r\n    // then\r\n    executor.awaitTermination(5, TimeUnit.SECONDS);\r\n    executor.shutdown();\r\n\r\n    assertEquals(consumer.numberOfConsumedElements.get(), numberOfElementsToProduce);\r\n}\r\n```","```\r\nPut object: {data='86046157-e8a0-49b2-9cbb-8326124bcab8', startTime=1494069868007}\r\nConsumer take: {data='86046157-e8a0-49b2-9cbb-8326124bcab8', startTime=1494069868007}\r\nPut object: {data='d47927ef-18c7-449b-b491-5ff30e6795ed', startTime=1494069868512}\r\nConsumer take: {data='d47927ef-18c7-449b-b491-5ff30e6795ed', startTime=1494069868512}\r\n```","```\r\nint numberOfElementsToProduce = 1;\r\nint delayOfEachProducedMessageMilliseconds = 10_000;\r\nDelayQueueConsumer consumer = new DelayQueueConsumer(\r\n  queue, numberOfElementsToProduce);\r\nDelayQueueProducer producer = new DelayQueueProducer(\r\n  queue, numberOfElementsToProduce, delayOfEachProducedMessageMilliseconds);\r\n```","```\r\nexecutor.submit(producer);\r\nexecutor.submit(consumer);\r\n\r\nexecutor.awaitTermination(5, TimeUnit.SECONDS);\r\nexecutor.shutdown();\r\nassertEquals(consumer.numberOfConsumedElements.get(), 0);\r\n```","```\r\nint numberOfElementsToProduce = 1;\r\nint delayOfEachProducedMessageMilliseconds = -10_000;\r\nDelayQueueConsumer consumer = new DelayQueueConsumer(queue, numberOfElementsToProduce);\r\nDelayQueueProducer producer = new DelayQueueProducer(\r\n  queue, numberOfElementsToProduce, delayOfEachProducedMessageMilliseconds);\r\n```","```\r\nexecutor.submit(producer);\r\nexecutor.submit(consumer);\r\n\r\nexecutor.awaitTermination(1, TimeUnit.SECONDS);\r\nexecutor.shutdown();\r\nassertEquals(consumer.numberOfConsumedElements.get(), 1);\r\n```"]