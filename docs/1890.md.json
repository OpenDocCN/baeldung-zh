["```\r\n<dependency>\r\n    <groupId>io.sirix</groupId>\r\n    <artifactId>sirix-core</artifactId>\r\n    <version>0.9.3</version>\r\n</dependency>\r\n```","```\r\ndependencies {\r\n    compile 'io.sirix:sirix-core:0.9.3'\r\n} \r\n```","```\r\nvar pathToJsonFile = Paths.get(\"jsonFile\");\r\nvar databaseFile = Paths.get(\"database\");\r\n\r\nDatabases.createJsonDatabase(new DatabaseConfiguration(databaseFile));\r\n\r\ntry (var database = Databases.openJsonDatabase(databaseFile)) {\r\n    database.createResource(ResourceConfiguration.newBuilder(\"resource\").build());\r\n\r\n    try (var manager = database.openResourceManager(\"resource\");\r\n         var wtx = manager.beginNodeTrx()) {\r\n        wtx.insertSubtreeAsFirstChild(JsonShredder.createFileReader(pathToJsonFile));\r\n        wtx.commit();\r\n    }\r\n}\r\n```","```\r\ntry (var database = Databases.openJsonDatabase(databaseFile);\r\n     var manager = database.openResourceManager(\"resource\");\r\n     var rtx = manager.beginNodeReadOnlyTrx()) {\r\n\r\n    new DescendantAxis(rtx, IncludeSelf.YES).forEach((unused) -> {\r\n        switch (rtx.getKind()) {\r\n            case OBJECT:\r\n            case ARRAY:\r\n                LOG.info(rtx.getDescendantCount());\r\n                LOG.info(rtx.getChildCount());\r\n                LOG.info(rtx.getHash());\r\n                break;\r\n            case OBJECT_KEY:\r\n                LOG.info(rtx.getName());\r\n                break;\r\n            case STRING_VALUE:\r\n            case BOOLEAN_VALUE:\r\n            case NUMBER_VALUE:\r\n            case NULL_VALUE:\r\n                LOG.info(rtx.getValue());\r\n                break;\r\n            default:\r\n        }\r\n    });\r\n}\r\n```","```\r\npublic enum VisitResultType implements VisitResult {\r\n    SKIPSIBLINGS,\r\n    SKIPSUBTREE,\r\n    CONTINUE,\r\n    TERMINATE\r\n}\r\n```","```\r\nvar axis = VisitorDescendantAxis.newBuilder(rtx)\r\n  .includeSelf()\r\n  .visitor(new MyVisitor())\r\n  .build();\r\n\r\nwhile (axis.hasNext()) axis.next();\r\n```","```\r\nvar axis = new PastAxis(resourceManager, rtx);\r\nif (axis.hasNext()) {\r\n    var trx = axis.next();\r\n    // Do something with the transactional cursor.\r\n}\r\n```","```\r\nnew FilterAxis<JsonNodeReadOnlyTrx>(new ChildAxis(rtx), new JsonNameFilter(rtx, \"a\"))\r\n```","```\r\nvar axis = new VisitorDescendantAxis.Builder(rtx).includeSelf().visitor(myVisitor).build();\r\nvar filter = new JsonNameFilter(rtx, \"foobar\");\r\nfor (var filterAxis = new FilterAxis<JsonNodeReadOnlyTrx>(axis, filter); filterAxis.hasNext();) {\r\n    filterAxis.next();\r\n}\r\n```","```\r\nvar axis = new PostOrderAxis(rtx);\r\nvar axisStream = StreamSupport.stream(axis.spliterator(), false);\r\n\r\naxisStream.filter((unusedNodeKey) -> new JsonNameFilter(rtx, \"a\"))\r\n  .forEach((unused) -> /* Do something with the transactional cursor */);\r\n```","```\r\nif (wtx.isObjectKey()) wtx.setObjectKeyName(\"foo\");\r\nif (wtx.isStringValue()) wtx.setStringValue(\"foo\");\r\n```","```\r\nwtx.insertObjectRecordAsFirstChild(\"foo\", new StringValue(\"bar\"))\r\n   .moveToParent().trx()\r\n   .insertObjectRecordAsRightSibling(\"baz\", new NullValue());\r\n```","```\r\nvar json = \"{\\\"foo\\\": \\\"bar\\\",\\\"baz\\\": [0, \\\"bla\\\", true, null]}\";\r\nwtx.insertSubtreeAsFirstChild(JsonShredder.createStringReader(json));\r\n```","```\r\nwtx.copySubtreeAsRightSibling(rtx);\r\n```","```\r\nresourceManager.beginNodeTrx(TimeUnit.SECONDS, 30);\r\nresourceManager.beginNodeTrx(1000);\r\nresourceManager.beginNodeTrx(1000, TimeUnit.SECONDS, 30);\r\n```","```\r\nresourceManager.beginNodeTrx().revertTo(2).commit();\r\n```","```\r\nvar rtxOpenedByRevisionNumber = resourceManager.beginNodeReadOnlyTrx(2);\r\n\r\nvar dateTime = LocalDateTime.of(2019, Month.JUNE, 15, 13, 39);\r\nvar instant = dateTime.atZone(ZoneId.of(\"Europe/Berlin\")).toInstant();\r\nvar rtxOpenedByTimestamp = resourceManager.beginNodeReadOnlyTrx(instant);\r\n```","```\r\nDiffFactory.invokeJsonDiff(\r\n  new DiffFactory.Builder(\r\n    resourceManager,\r\n    2,\r\n    1,\r\n    DiffOptimized.HASHED,\r\n    ImmutableSet.of(observer)));\r\n```","```\r\npublic interface DiffObserver {\r\n    void diffListener(DiffType diffType, long newNodeKey, long oldNodeKey, DiffDepth depth);\r\n    void diffDone();\r\n}\r\n```","```\r\nvar writer = new StringWriter();\r\nvar serializer = new JsonSerializer.Builder(resourceManager, writer).build();\r\nserializer.call();\r\n```","```\r\nvar serializer = new\r\nJsonSerializer.Builder(resourceManager, writer, 1, 2).build();\r\nserializer.call();\r\n```","```\r\nvar serializer = new\r\nJsonSerializer.Builder(resourceManager, writer, -1).build();\r\nserializer.call(); \r\n```"]