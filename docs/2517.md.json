["```\r\n<dependency>\r\n    <groupId>org.bouncycastle</groupId>\r\n    <artifactId>bcpkix-jdk15on</artifactId>\r\n    <version>1.58</version>\r\n</dependency>\r\n```","```\r\nSecurity.setProperty(\"crypto.policy\", \"unlimited\");\r\n```","```\r\nint maxKeySize = javax.crypto.Cipher.getMaxAllowedKeyLength(\"AES\");\r\nSystem.out.println(\"Max Key Size for AES : \" + maxKeySize);\r\n```","```\r\nMax Key Size for AES : 2147483647\r\n```","```\r\nSecurity.addProvider(new BouncyCastleProvider());\r\nCertificateFactory certFactory= CertificateFactory\r\n  .getInstance(\"X.509\", \"BC\");\r\n\r\nX509Certificate certificate = (X509Certificate) certFactory\r\n  .generateCertificate(new FileInputStream(\"Baeldung.cer\"));\r\n\r\nchar[] keystorePassword = \"password\".toCharArray();\r\nchar[] keyPassword = \"password\".toCharArray();\r\n\r\nKeyStore keystore = KeyStore.getInstance(\"PKCS12\");\r\nkeystore.load(new FileInputStream(\"Baeldung.p12\"), keystorePassword);\r\nPrivateKey key = (PrivateKey) keystore.getKey(\"baeldung\", keyPassword);\r\n```","```\r\nsecurity.provider.N = org.bouncycastle.jce.provider.BouncyCastleProvider\r\n```","```\r\npublic static byte[] encryptData(byte[] data,\r\n  X509Certificate encryptionCertificate)\r\n  throws CertificateEncodingException, CMSException, IOException {\r\n\r\n    byte[] encryptedData = null;\r\n    if (null != data && null != encryptionCertificate) {\r\n        CMSEnvelopedDataGenerator cmsEnvelopedDataGenerator\r\n          = new CMSEnvelopedDataGenerator();\r\n\r\n        JceKeyTransRecipientInfoGenerator jceKey \r\n          = new JceKeyTransRecipientInfoGenerator(encryptionCertificate);\r\n        cmsEnvelopedDataGenerator.addRecipientInfoGenerator(transKeyGen);\r\n        CMSTypedData msg = new CMSProcessableByteArray(data);\r\n        OutputEncryptor encryptor\r\n          = new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC)\r\n          .setProvider(\"BC\").build();\r\n        CMSEnvelopedData cmsEnvelopedData = cmsEnvelopedDataGenerator\r\n          .generate(msg,encryptor);\r\n        encryptedData = cmsEnvelopedData.getEncoded();\r\n    }\r\n    return encryptedData;\r\n}\r\n```","```\r\npublic static byte[] decryptData(\r\n  byte[] encryptedData, \r\n  PrivateKey decryptionKey) \r\n  throws CMSException {\r\n\r\n    byte[] decryptedData = null;\r\n    if (null != encryptedData && null != decryptionKey) {\r\n        CMSEnvelopedData envelopedData = new CMSEnvelopedData(encryptedData);\r\n\r\n        Collection<RecipientInformation> recipients\r\n          = envelopedData.getRecipientInfos().getRecipients();\r\n        KeyTransRecipientInformation recipientInfo \r\n          = (KeyTransRecipientInformation) recipients.iterator().next();\r\n        JceKeyTransRecipient recipient\r\n          = new JceKeyTransEnvelopedRecipient(decryptionKey);\r\n\r\n        return recipientInfo.getContent(recipient);\r\n    }\r\n    return decryptedData;\r\n}\r\n```","```\r\nString secretMessage = \"My password is 123456Seven\";\r\nSystem.out.println(\"Original Message : \" + secretMessage);\r\nbyte[] stringToEncrypt = secretMessage.getBytes();\r\nbyte[] encryptedData = encryptData(stringToEncrypt, certificate);\r\nSystem.out.println(\"Encrypted Message : \" + new String(encryptedData));\r\nbyte[] rawData = decryptData(encryptedData, privateKey);\r\nString decryptedMessage = new String(rawData);\r\nSystem.out.println(\"Decrypted Message : \" + decryptedMessage);\r\n```","```\r\nOriginal Message : My password is 123456Seven\r\nEncrypted Message : 0�*�H��...\r\nDecrypted Message : My password is 123456Seven\r\n```","```\r\npublic static byte[] signData(\r\n  byte[] data, \r\n  X509Certificate signingCertificate,\r\n  PrivateKey signingKey) throws Exception {\r\n\r\n    byte[] signedMessage = null;\r\n    List<X509Certificate> certList = new ArrayList<X509Certificate>();\r\n    CMSTypedData cmsData= new CMSProcessableByteArray(data);\r\n    certList.add(signingCertificate);\r\n    Store certs = new JcaCertStore(certList);\r\n\r\n    CMSSignedDataGenerator cmsGenerator = new CMSSignedDataGenerator();\r\n    ContentSigner contentSigner \r\n      = new JcaContentSignerBuilder(\"SHA256withRSA\").build(signingKey);\r\n    cmsGenerator.addSignerInfoGenerator(new JcaSignerInfoGeneratorBuilder(\r\n      new JcaDigestCalculatorProviderBuilder().setProvider(\"BC\")\r\n      .build()).build(contentSigner, signingCertificate));\r\n    cmsGenerator.addCertificates(certs);\r\n\r\n    CMSSignedData cms = cmsGenerator.generate(cmsData, true);\r\n    signedMessage = cms.getEncoded();\r\n    return signedMessage;\r\n} \r\n```","```\r\npublic static boolean verifSignedData(byte[] signedData)\r\n  throws Exception {\r\n\r\n    X509Certificate signCert = null;\r\n    ByteArrayInputStream inputStream\r\n     = new ByteArrayInputStream(signedData);\r\n    ASN1InputStream asnInputStream = new ASN1InputStream(inputStream);\r\n    CMSSignedData cmsSignedData = new CMSSignedData(\r\n      ContentInfo.getInstance(asnInputStream.readObject()));\r\n\r\n    SignerInformationStore signers \r\n      = cmsSignedData.getCertificates().getSignerInfos();\r\n    SignerInformation signer = signers.getSigners().iterator().next();\r\n    Collection<X509CertificateHolder> certCollection \r\n      = certs.getMatches(signer.getSID());\r\n    X509CertificateHolder certHolder = certCollection.iterator().next();\r\n\r\n    return signer\r\n      .verify(new JcaSimpleSignerInfoVerifierBuilder()\r\n      .build(certHolder));\r\n}\r\n```","```\r\nbyte[] signedData = signData(rawData, certificate, privateKey);\r\nBoolean check = verifSignData(signedData);\r\nSystem.out.println(check);\r\n```","```\r\ntrue\r\n```"]