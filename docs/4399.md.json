["```\r\nList<Integer> numbers = Arrays.asList(1,2,3,4,5,6,7,8,9,10);\r\nStream<Integer> streamFromCollection = Streams.stream(numbers);\r\nStream<Integer> streamFromIterator = Streams.stream(numbers.iterator());\r\nStream<Integer> streamFromIterable = Streams.stream((Iterable<Integer>) numbers);\r\nStream<Integer> streamFromOptional = Streams.stream(Optional.of(1)); \r\n```","```\r\nLongStream streamFromOptionalLong = Streams.stream(OptionalLong.of(1));\r\nIntStream streamFromOptionalInt = Streams.stream(OptionalInt.of(1));\r\nDoubleStream streamFromOptionalDouble = Streams.stream(OptionalDouble.of(1.0));\r\n```","```\r\nStream<Integer> concatenatedStreams = Streams.concat(streamFromCollection, streamFromIterable,streamFromIterator);\r\n```","```\r\nList<Integer> integers = Arrays.asList(1,2,3,4,5,6,7,8,9,10);\r\nOptional<Integer> lastItem = Streams.findLast(integers.stream());\r\n```","```\r\nmapWithIndex( Stream.of(\"a\", \"b\", \"c\"), (str, index) -> str + \":\" + index)\r\n```","```\r\nStreams.zip(\r\n  Stream.of(\"candy\", \"chocolate\", \"bar\"),\r\n  Stream.of(\"$1\", \"$2\",\"$3\"),\r\n  (arg1, arg2) -> arg1 + \":\" + arg2\r\n);\r\n```","```\r\nList<Integer> integers = Arrays.asList(1,2,3,4,4,6,7,8,9,10);\r\nboolean isInAscendingOrder = Comparators.isInOrder(\r\n  integers, new AscedingOrderComparator());\r\n```","```\r\nList<Integer> numbers = Arrays.asList(1);\r\nOptional<Integer> number = numbers.stream()\r\n  .map(e -> e * 2)\r\n  .collect(MoreCollectors.toOptional());\r\n```","```\r\nInterners interners = Interners.newBuilder()\r\n  .concurrencyLevel(2)\r\n  .weak()\r\n  .build();\r\n```"]