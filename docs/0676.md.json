["```\r\n<dependency>\r\n    <groupId>org.jobrunr</groupId>\r\n    <artifactId>jobrunr-spring-boot-starter</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\norg.jobrunr.background-job-server.enabled=true\r\norg.jobrunr.dashboard.enabled=true\r\n```","```\r\n@Bean\r\npublic StorageProvider storageProvider(JobMapper jobMapper) {\r\n    InMemoryStorageProvider storageProvider = new InMemoryStorageProvider();\r\n    storageProvider.setJobMapper(jobMapper);\r\n    return storageProvider;\r\n}\r\n```","```\r\n@Inject\r\nprivate JobScheduler jobScheduler;\r\n\r\n@Inject\r\nprivate SampleJobService sampleJobService;\r\n```","```\r\njobScheduler.enqueue(() -> sampleJobService.executeSampleJob());\r\n```","```\r\njobScheduler.enqueue(() -> sampleJobService.executeSampleJob(\"some string\"));\r\n```","```\r\njobScheduler.schedule(LocalDateTime.now().plusHours(5), () -> sampleJobService.executeSampleJob());\r\n```","```\r\njobScheduler.scheduleRecurrently(Cron.hourly(), () -> sampleJobService.executeSampleJob());\r\n```","```\r\n@Job(name = \"The sample job with variable %0\", retries = 2)\r\npublic void executeSampleJob(String variable) {\r\n    ...\r\n}\r\n```"]