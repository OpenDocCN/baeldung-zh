["```\r\n@Entity\r\npublic class Book {\r\n\r\n    @Id\r\n    private UUID id;\r\n    private String title;\r\n\r\n}\r\n```","```\r\npublic interface BookRepository extends CrudRepository<Book, UUID> {\r\n\r\n    @Cacheable(value = \"books\", unless = \"#a0=='Foundation'\")\r\n    Optional<Book> findFirstByTitle(String title);\r\n\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@SpringBootTest(classes = CacheApplication.class)\r\npublic class BookRepositoryIntegrationTest {\r\n\r\n    @Autowired\r\n    CacheManager cacheManager;\r\n\r\n    @Autowired\r\n    BookRepository repository;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        repository.save(new Book(UUID.randomUUID(), \"Dune\"));\r\n        repository.save(new Book(UUID.randomUUID(), \"Foundation\"));\r\n    }\r\n\r\n    private Optional<Book> getCachedBook(String title) {\r\n        return ofNullable(cacheManager.getCache(\"books\")).map(c -> c.get(title, Book.class));\r\n    }\r\n```","```\r\n @Test\r\n    void givenBookThatShouldBeCached_whenFindByTitle_thenResultShouldBePutInCache() {\r\n        Optional<Book> dune = repository.findFirstByTitle(\"Dune\");\r\n\r\n        assertEquals(dune, getCachedBook(\"Dune\"));\r\n    }\r\n```","```\r\n @Test\r\n    void givenBookThatShouldNotBeCached_whenFindByTitle_thenResultShouldNotBePutInCache() {\r\n        repository.findFirstByTitle(\"Foundation\");\r\n\r\n        assertEquals(empty(), getCachedBook(\"Foundation\"));\r\n    }\r\n```","```\r\n@ContextConfiguration\r\n@ExtendWith(SpringExtension.class)\r\npublic class BookRepositoryCachingIntegrationTest {\r\n\r\n    private static final Book DUNE = new Book(UUID.randomUUID(), \"Dune\");\r\n    private static final Book FOUNDATION = new Book(UUID.randomUUID(), \"Foundation\");\r\n\r\n    private BookRepository mock;\r\n\r\n    @Autowired\r\n    private BookRepository bookRepository;\r\n\r\n    @EnableCaching\r\n    @Configuration\r\n    public static class CachingTestConfig {\r\n\r\n        @Bean\r\n        public BookRepository bookRepositoryMockImplementation() {\r\n            return mock(BookRepository.class);\r\n        }\r\n\r\n        @Bean\r\n        public CacheManager cacheManager() {\r\n            return new ConcurrentMapCacheManager(\"books\");\r\n        }\r\n\r\n    } \r\n```","```\r\n @BeforeEach\r\n    void setUp() {\r\n        mock = AopTestUtils.getTargetObject(bookRepository);\r\n\r\n        reset(mock);\r\n\r\n        when(mock.findFirstByTitle(eq(\"Foundation\")))\r\n                .thenReturn(of(FOUNDATION));\r\n\r\n        when(mock.findFirstByTitle(eq(\"Dune\")))\r\n                .thenReturn(of(DUNE))\r\n                .thenThrow(new RuntimeException(\"Book should be cached!\"));\r\n    }\r\n```","```\r\n @Test\r\n    void givenCachedBook_whenFindByTitle_thenRepositoryShouldNotBeHit() {\r\n        assertEquals(of(DUNE), bookRepository.findFirstByTitle(\"Dune\"));\r\n        verify(mock).findFirstByTitle(\"Dune\");\r\n\r\n        assertEquals(of(DUNE), bookRepository.findFirstByTitle(\"Dune\"));\r\n        assertEquals(of(DUNE), bookRepository.findFirstByTitle(\"Dune\"));\r\n\r\n        verifyNoMoreInteractions(mock);\r\n    }\r\n```","```\r\n @Test\r\n    void givenNotCachedBook_whenFindByTitle_thenRepositoryShouldBeHit() {\r\n        assertEquals(of(FOUNDATION), bookRepository.findFirstByTitle(\"Foundation\"));\r\n        assertEquals(of(FOUNDATION), bookRepository.findFirstByTitle(\"Foundation\"));\r\n        assertEquals(of(FOUNDATION), bookRepository.findFirstByTitle(\"Foundation\"));\r\n\r\n        verify(mock, times(3)).findFirstByTitle(\"Foundation\");\r\n    }\r\n```"]