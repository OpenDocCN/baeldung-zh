["```\r\nObject[] toArray()\r\n\r\n<T> T[] toArray(T[] a)\r\n```","```\r\nList<Integer> naturalNumbers = IntStream\r\n    .range(1, 10000)\r\n    .boxed()\r\n    .collect(Collectors.toList());\r\n```","```\r\nObject[] naturalNumbersArray = naturalNumbers.toArray();\r\n```","```\r\nInteger[] naturalNumbersArray = naturalNumbers.toArray(new Integer[0]);\r\n```","```\r\nInteger[] naturalNumbersArray = naturalNumbers.toArray(new Integer[naturalNumbers.size]);\r\n```","```\r\n@Param({ \"10\", \"10000\", \"10000000\" })\r\nprivate int size;\r\n\r\n@Param({ \"array-list\", \"tree-set\" })\r\nprivate String type;\r\n```","```\r\n@Benchmark\r\npublic String[] zero_sized() {\r\n    return collection.toArray(new String[0]);\r\n}\r\n\r\n@Benchmark\r\npublic String[] pre_sized() {\r\n    return collection.toArray(new String[collection.size()]);\r\n}\r\n```","```\r\nBenchmark                   (size)      (type)  Mode  Cnt          Score          Error  Units\r\n\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nTestBenchmark.zero_sized        10  array-list  avgt   15         24.939 ±        1.202  ns/op\r\nTestBenchmark.pre_sized         10  array-list  avgt   15         38.196 ±        3.767  ns/op\r\n----------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized     10000  array-list  avgt   15      15244.367 ±      238.676  ns/op\r\nTestBenchmark.pre_sized      10000  array-list  avgt   15      21263.225 ±      802.684  ns/op\r\n----------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized  10000000  array-list  avgt   15   82710389.163 ±  6616266.065  ns/op\r\nTestBenchmark.pre_sized   10000000  array-list  avgt   15  100426920.878 ± 10381964.911  ns/op\r\n\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nTestBenchmark.zero_sized        10    tree-set  avgt   15         66.802 ±        5.667  ns/op\r\nTestBenchmark.pre_sized         10    tree-set  avgt   15         66.009 ±        4.504  ns/op\r\n----------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized     10000    tree-set  avgt   15      85141.622 ±     2323.420  ns/op\r\nTestBenchmark.pre_sized      10000    tree-set  avgt   15      89090.155 ±     4895.966  ns/op\r\n----------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized  10000000    tree-set  avgt   15  211896860.317 ± 21019102.769  ns/op\r\nTestBenchmark.pre_sized   10000000    tree-set  avgt   15  212882486.630 ± 20921740.965  ns/op\r\n```","```\r\nBenchmark                                                    (size)      (type)  Mode  Cnt          Score           Error   Units\r\n\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm                     10  array-list  avgt   15         72.000 ±         0.001    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                      10  array-list  avgt   15         56.000 ±         0.001    B/op\r\n---------------------------------------------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm                  10000  array-list  avgt   15      40032.007 ±         0.001    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                   10000  array-list  avgt   15      40016.010 ±         0.001    B/op\r\n---------------------------------------------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm               10000000  array-list  avgt   15   40000075.796 ±         8.882    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                10000000  array-list  avgt   15   40000062.213 ±         4.739    B/op\r\n\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm                     10    tree-set  avgt   15         56.000 ±         0.001    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                      10    tree-set  avgt   15         56.000 ±         0.001    B/op\r\n---------------------------------------------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm                  10000    tree-set  avgt   15      40055.818 ±        16.723    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                   10000    tree-set  avgt   15      41069.423 ±      1644.717    B/op\r\n---------------------------------------------------------------------------------------------------------------------------------\r\nTestBenchmark.zero_sized:·gc.alloc.rate.norm               10000000    tree-set  avgt   15   40000155.947 ±         9.416    B/op\r\nTestBenchmark.pre_sized:·gc.alloc.rate.norm                10000000    tree-set  avgt   15   40000138.987 ±         7.987    B/op\r\n```","```\r\nif (a.length < size)\r\n    return (T[]) Arrays.copyOf(elementData, size, a.getClass());\r\nSystem.arraycopy(elementData, 0, a, 0, size);\r\nif (a.length > size)\r\n    a[size] = null;\r\nreturn a;\r\n```","```\r\nT[] copy = ((Object)newType == (Object)Object[].class)\r\n    ? (T[]) new Object[newLength]\r\n    : (T[]) Array.newInstance(newType.getComponentType(), newLength);\r\nSystem.arraycopy(original, 0, copy, 0,\r\n    Math.min(original.length, newLength));\r\n```","```\r\n@Benchmark\r\npublic Foo[] arraycopy_srcLength() {\r\n    Object[] src = this.src;\r\n    Foo[] dst = new Foo[size];\r\n    System.arraycopy(src, 0, dst, 0, src.length);\r\n    return dst;\r\n}\r\n\r\n@Benchmark\r\npublic Foo[] arraycopy_dstLength() {\r\n    Object[] src = this.src;\r\n    Foo[] dst = new Foo[size];\r\n    System.arraycopy(src, 0, dst, 0, dst.length);\r\n    return dst;\r\n}\r\n```","```\r\n# VM version: JDK 11.0.2, OpenJDK 64-Bit Server VM, 11.0.2+9\r\n-----------------------------------------------------------------------------------\r\nBenchmark                    (size)      (type)  Mode  Cnt    Score    Error  Units\r\n-----------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100  array-list  avgt   15  199.920 ± 11.309  ns/op\r\nToArrayBenchmark.pre_sized      100  array-list  avgt   15  237.342 ± 14.166  ns/op\r\n-----------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100    tree-set  avgt   15  819.306 ± 85.916  ns/op\r\nToArrayBenchmark.pre_sized      100    tree-set  avgt   15  972.771 ± 69.743  ns/op\r\n```","```\r\n###################################################################################\r\n\r\n# VM version: JDK 14.0.2, OpenJDK 64-Bit Server VM, 14.0.2+12-46\r\n------------------------------------------------------------------------------------\r\nBenchmark                    (size)      (type)  Mode  Cnt    Score    Error   Units\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100  array-list  avgt   15  158.344 ±   3.862  ns/op\r\nToArrayBenchmark.pre_sized      100  array-list  avgt   15  214.340 ±   5.877  ns/op\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100    tree-set  avgt   15  877.289 ± 132.673  ns/op\r\nToArrayBenchmark.pre_sized      100    tree-set  avgt   15  934.550 ± 148.660  ns/op\r\n\r\n####################################################################################\r\n\r\n# VM version: JDK 15.0.2, OpenJDK 64-Bit Server VM, 15.0.2+7-27\r\n------------------------------------------------------------------------------------\r\nBenchmark                    (size)      (type)  Mode  Cnt    Score     Error  Units\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100  array-list  avgt   15  147.925 ±   3.968  ns/op\r\nToArrayBenchmark.pre_sized      100  array-list  avgt   15  213.525 ±   6.378  ns/op\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100    tree-set  avgt   15  820.853 ± 105.491  ns/op\r\nToArrayBenchmark.pre_sized      100    tree-set  avgt   15  947.433 ± 123.782  ns/op\r\n\r\n####################################################################################\r\n\r\n# VM version: JDK 16, OpenJDK 64-Bit Server VM, 16+36-2231\r\n------------------------------------------------------------------------------------\r\nBenchmark                    (size)      (type)  Mode  Cnt    Score     Error  Units\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100  array-list  avgt   15  146.431 ±   2.639  ns/op\r\nToArrayBenchmark.pre_sized      100  array-list  avgt   15  214.117 ±   3.679  ns/op\r\n------------------------------------------------------------------------------------\r\nToArrayBenchmark.zero_sized     100    tree-set  avgt   15  818.370 ± 104.643  ns/op\r\nToArrayBenchmark.pre_sized      100    tree-set  avgt   15  964.072 ± 142.008  ns/op\r\n\r\n####################################################################################\r\n```"]