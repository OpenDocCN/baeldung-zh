["```\r\n<dependency>\r\n    <groupId>com.github.scribejava</groupId>\r\n    <artifactId>scribejava-apis</artifactId>\r\n    <version>latest-version</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.scribejava</groupId>\r\n    <artifactId>scribejava-core</artifactId>\r\n    <version>latest-version</version>\r\n</dependency>\r\n```","```\r\nOAuthService service = new ServiceBuilder(\"api_key\")\r\n  .apiSecret(\"api_secret\")\r\n  .scope(\"scope\")\r\n  .callback(\"callback\")\r\n  .build(GoogleApi20.instance());\r\n```","```\r\nServiceBuilder builder = new ServiceBuilder(\"api_key\")\r\n  .httpClient(new OkHttpHttpClient());\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.scribejava</groupId>\r\n    <artifactId>scribejava-httpclient-okhttp</artifactId>\r\n    <version>latest-version</version>\r\n</dependency>\r\n```","```\r\nServiceBuilder builder = new ServiceBuilder(\"api_key\")\r\n  .debug();\r\n```","```\r\nFileOutputStream debugFile = new FileOutputStream(\"debug\");\r\n\r\nServiceBuilder builder = new ServiceBuilder(\"api_key\")\r\n  .debug()\r\n  .debugStream(debugFile);\r\n```","```\r\nOAuth10aService service = new ServiceBuilder(\"api_key\")\r\n  .apiSecret(\"api_secret\")\r\n  .build(TwitterApi.instance());\r\n```","```\r\nOAuth1RequestToken requestToken = service.getRequestToken();\r\nString authUrl = service.getAuthorizationUrl(requestToken);\r\n```","```\r\nOAuth1AccessToken accessToken = service.getAccessToken(requestToken,oauthVerifier);\r\n```","```\r\nOAuthRequest request = new OAuthRequest(Verb.GET, \r\n    \"https://api.twitter.com/1.1/account/verify_credentials.json\");\r\nservice.signRequest(accessToken, request);\r\n\r\nResponse response = service.execute(request);\r\n```","```\r\nOAuth20Service service = new ServiceBuilder(\"api_key\")\r\n  .apiSecret(\"api_secret\")\r\n  .scope(\"https://www.googleapis.com/auth/userinfo.email\")\r\n  .callback(\"http://localhost:8080/auth\")\r\n  .build(GoogleApi20.instance());\r\n\r\nString authUrl = service.getAuthorizationUrl();\r\n```","```\r\nOAuth2AccessToken accessToken = service.getAccessToken(code);\r\n\r\nOAuthRequest request = new OAuthRequest(Verb.GET, \"https://www.googleapis.com/oauth2/v1/userinfo?alt=json\");\r\nservice.signRequest(accessToken, request);\r\n\r\nResponse response = service.execute(request);\r\n```","```\r\npublic class MyApi extends DefaultApi20 {\r\n\r\n    public MyApi() {}\r\n\r\n    private static class InstanceHolder {\r\n        private static final MyApi INSTANCE = new MyApi();\r\n    }\r\n\r\n    public static MyApi instance() {\r\n        return InstanceHolder.INSTANCE;\r\n    }\r\n\r\n    @Override\r\n    public String getAccessTokenEndpoint() {\r\n        return \"http://localhost:8080/oauth/token\";\r\n    }\r\n\r\n    @Override\r\n    protected String getAuthorizationBaseUrl() {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nOAuth20Service service = new ServiceBuilder(\"baeldung_api_key\")\r\n  .apiSecret(\"baeldung_api_secret\")\r\n  .scope(\"read write\")\r\n  .build(MyApi.instance());\r\n\r\nOAuth2AccessToken token = service.getAccessTokenPasswordGrant(username, password);\r\n\r\nOAuthRequest request = new OAuthRequest(Verb.GET, \"http://localhost:8080/me\");\r\nservice.signRequest(token, request);\r\nResponse response = service.execute(request);\r\n```"]