["```\r\nstatic final String INPUT_FILE_NAME = \"src/main/resources/input.txt\";\r\nstatic final int NO_OF_LINES = 45; \r\n```","```\r\n@Test\r\npublic void whenUsingNIOFiles_thenReturnTotalNumberOfLines() throws IOException {\r\n    try (Stream<String> fileStream = Files.lines(Paths.get(INPUT_FILE_NAME))) {\r\n        int noOfLines = (int) fileStream.count();\r\n        assertEquals(NO_OF_LINES, noOfLines);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingNIOFilesReadAllLines_thenReturnTotalNumberOfLines() throws IOException {\r\n    List<String> fileStream = Files.readAllLines(Paths.get(INPUT_FILE_NAME));\r\n    int noOfLines = fileStream.size();\r\n    assertEquals(NO_OF_LINES, noOfLines);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingNIOFileChannel_thenReturnTotalNumberOfLines() throws IOException {\r\n    int noOfLines = 1;\r\n    try (FileChannel channel = FileChannel.open(Paths.get(INPUT_FILE_NAME), StandardOpenOption.READ)) {\r\n        ByteBuffer byteBuffer = channel.map(MapMode.READ_ONLY, 0, channel.size());\r\n        while (byteBuffer.hasRemaining()) {\r\n            byte currentByte = byteBuffer.get();\r\n            if (currentByte == '\\n')\r\n                noOfLines++;\r\n       }\r\n    }\r\n    assertEquals(NO_OF_LINES, noOfLines);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenUsingGoogleGuava_thenReturnTotalNumberOfLines() throws IOException {\r\n    List<String> lineItems = Files.readLines(Paths.get(INPUT_FILE_NAME)\r\n      .toFile(), Charset.defaultCharset());\r\n    int noOfLines = lineItems.size();\r\n    assertEquals(NO_OF_LINES, noOfLines);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenUsingApacheCommonsIO_thenReturnTotalNumberOfLines() throws IOException {\r\n    int noOfLines = 0;\r\n    LineIterator lineIterator = FileUtils.lineIterator(new File(INPUT_FILE_NAME));\r\n    while (lineIterator.hasNext()) {\r\n        lineIterator.nextLine();\r\n        noOfLines++;\r\n    }\r\n    assertEquals(NO_OF_LINES, noOfLines);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingBufferedReader_thenReturnTotalNumberOfLines() throws IOException {\r\n    int noOfLines = 0;\r\n    try (BufferedReader reader = new BufferedReader(new FileReader(INPUT_FILE_NAME))) {\r\n        while (reader.readLine() != null) {\r\n            noOfLines++;\r\n        }\r\n    }\r\n    assertEquals(NO_OF_LINES, noOfLines);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingLineNumberReader_thenReturnTotalNumberOfLines() throws IOException {\r\n    try (LineNumberReader reader = new LineNumberReader(new FileReader(INPUT_FILE_NAME))) {\r\n        reader.skip(Integer.MAX_VALUE);\r\n        int noOfLines = reader.getLineNumber() + 1;\r\n        assertEquals(NO_OF_LINES, noOfLines);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingScanner_thenReturnTotalNumberOfLines() throws IOException {\r\n    try (Scanner scanner = new Scanner(new FileReader(INPUT_FILE_NAME))) {\r\n        int noOfLines = 0;\r\n        while (scanner.hasNextLine()) {\r\n            scanner.nextLine();\r\n            noOfLines++;\r\n        }\r\n        assertEquals(NO_OF_LINES, noOfLines);\r\n    }\r\n}\r\n```"]