["```\r\n<dependency>\r\n    <groupId>com.opencsv</groupId>\r\n    <artifactId>opencsv</artifactId>\r\n    <version>4.1</version>\r\n</dependency> \r\n```","```\r\ncolA,colB\r\nA,B\r\nC,D\r\nG,G\r\nG,F\r\n```","```\r\npublic List<String[]> readAllLines(Path filePath) throws Exception {\r\n    try (Reader reader = Files.newBufferedReader(filePath)) {\r\n        try (CSVReader csvReader = new CSVReader(reader)) {\r\n            return csvReader.readAll();\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic List<String[]> readAllExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/twoColumn.csv\").toURI())\r\n    );\r\n    return CsvReaderExamples.readAllLines(path);\r\n}\r\n```","```\r\npublic List<String[]> readLineByLine(Path filePath) throws Exception {\r\n    List<String[]> list = new ArrayList<>();\r\n    try (Reader reader = Files.newBufferedReader(filePath)) {\r\n        try (CSVReader csvReader = new CSVReader(reader)) {\r\n            String[] line;\r\n            while ((line = csvReader.readNext()) != null) {\r\n                list.add(line);\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}\r\n```","```\r\npublic List<String[]> readLineByLineExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/twoColumn.csv\").toURI())\r\n    );\r\n    return CsvReaderExamples.readLineByLine(path);\r\n} \r\n```","```\r\nCSVParser parser = new CSVParserBuilder()\r\n    .withSeparator(',')\r\n    .withIgnoreQuotations(true)\r\n    .build();\r\n\r\nCSVReader csvReader = new CSVReaderBuilder(reader)\r\n    .withSkipLines(0)\r\n    .withCSVParser(parser)\r\n    .build();\r\n```","```\r\npublic String writeLineByLine(List<String[]> lines, Path path) throws Exception {\r\n    try (CSVWriter writer = new CSVWriter(new FileWriter(path.toString()))) {\r\n        for (String[] line : lines) {\r\n            writer.writeNext(array);\r\n        }\r\n    return Helpers.readFile(path);\r\n} \r\n```","```\r\npublic String writeLinebylineExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/writtenOneByOne.csv\").toURI()\r\n    ); \r\n    return CsvWriterExamples.writeLineByLine(Helpers.fourColumnCsvString(), path); \r\n}\r\n```","```\r\npublic String writeAllLines(List<String[]> lines, Path path) throws Exception {\r\n    try (CSVWriter writer = new CSVWriter(new FileWriter(path.toString()))) {\r\n        writer.writeAll(stringArray);\r\n    }\r\n    return Helpers.readFile(path);\r\n}\r\n```","```\r\npublic String writeAllExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/writtenAll.csv\").toURI()\r\n    ); \r\n    return CsvWriterExamples.writeAllLines(Helpers.fourColumnCsvString(), path);\r\n}\r\n```","```\r\npublic class SimplePositionBean  {\r\n    @CsvBindByPosition(position = 0)\r\n    private String exampleColOne;\r\n\r\n    @CsvBindByPosition(position = 1)\r\n    private String exampleColTwo;\r\n\r\n    // getters and setters\r\n} \r\n```","```\r\npublic class CsvBean { }\r\n```","```\r\npublic class NamedColumnBean extends CsvBean {\r\n\r\n    @CsvBindByName(column = \"name\")\r\n    private String name;\r\n\r\n    // Automatically infer column name as 'Age'\r\n    @CsvBindByName\r\n    private int age;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic List<CsvBean> beanBuilderExample(Path path, Class clazz) throws Exception {\r\n    CsvTransfer csvTransfer = new CsvTransfer();\r\n\r\n    try (Reader reader = Files.newBufferedReader(path)) {\r\n        CsvToBean<CsvBean> cb = new CsvToBeanBuilder<CsvBean>(reader)\r\n         .withType(clazz)\r\n         .build();\r\n\r\n        csvTransfer.setCsvList(cb.parse());\r\n    }\r\n    return csvTransfer.getCsvList();\r\n}\r\n```","```\r\npublic List<CsvBean> simplePositionBeanExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/twoColumn.csv\").toURI()); \r\n    return BeanExamples.beanBuilderExample(path, SimplePositionBean.class); \r\n}\r\n```","```\r\npublic List<CsvBean> namedColumnBeanExample() throws Exception {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/namedColumn.csv\").toURI()); \r\n    return BeanExamples.beanBuilderExample(path, NamedColumnBean.class);\r\n}\r\n```","```\r\npublic String writeCsvFromBean(Path path) throws Exception {\r\n\r\n    List<CsvBean> sampleData = Arrays.asList(\r\n        new WriteExampleBean(\"Test1\", \"sfdsf\", \"fdfd\"),\r\n        new WriteExampleBean(\"Test2\", \"ipso\", \"facto\")\r\n    );\r\n\r\n    try (Writer writer  = new FileWriter(path.toString())) {\r\n\r\n        StatefulBeanToCsv<CsvBean> sbc = new StatefulBeanToCsvBuilder<CsvBean>(writer)\r\n          .withQuotechar('\\'')\r\n          .withSeparator(CSVWriter.DEFAULT_SEPARATOR)\r\n          .build();\r\n\r\n        sbc.write(sampleData);\r\n    }\r\n    return Helpers.readFile(path);\r\n}\r\n```","```\r\npublic String writeCsvFromBeanExample() {\r\n    Path path = Paths.get(\r\n      ClassLoader.getSystemResource(\"csv/writtenBean.csv\").toURI()); \r\n    return BeanExamples.writeCsvFromBean(path); \r\n}\r\n```"]