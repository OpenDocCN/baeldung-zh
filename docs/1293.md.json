["```\r\n<properties>\r\n    <resteasy.version>3.0.14.Final</resteasy.version>\r\n</properties>\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.jboss.resteasy</groupId>\r\n        <artifactId>resteasy-servlet-initializer</artifactId>\r\n        <version>${resteasy.version}</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.jboss.resteasy</groupId>\r\n        <artifactId>resteasy-client</artifactId>\r\n        <version>${resteasy.version}</version>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\n<jboss-deployment-structure>\r\n    <deployment>\r\n        <exclude-subsystems>\r\n            <subsystem name=\"resteasy\" />\r\n        </exclude-subsystems>\r\n        <exclusions>\r\n            <module name=\"javaee.api\" />\r\n            <module name=\"javax.ws.rs.api\"/>\r\n            <module name=\"org.jboss.resteasy.resteasy-jaxrs\" />\r\n        </exclusions>\r\n        <local-last value=\"true\" />\r\n    </deployment>\r\n</jboss-deployment-structure>\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.jboss.resteasy</groupId>\r\n        <artifactId>resteasy-jaxrs</artifactId>\r\n        <version>${resteasy.version}</version>\r\n    </dependency>\r\n<dependencies> \r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<web-app version=\"3.0\" \r\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n   xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee \r\n     http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\r\n\r\n   <display-name>RestEasy Example</display-name>\r\n\r\n   <context-param>\r\n      <param-name>resteasy.servlet.mapping.prefix</param-name>\r\n      <param-value>/rest</param-value>\r\n   </context-param>\r\n\r\n</web-app>\r\n```","```\r\n@ApplicationPath(\"/rest\")\r\npublic class RestEasyServices extends Application {\r\n\r\n    private Set<Object> singletons = new HashSet<Object>();\r\n\r\n    public RestEasyServices() {\r\n        singletons.add(new MovieCrudService());\r\n    }\r\n\r\n    @Override\r\n    public Set<Object> getSingletons() {\r\n        return singletons;\r\n    }\r\n}\r\n```","```\r\n@Path(\"/movies\")\r\npublic class MovieCrudService {\r\n\r\n    private Map<String, Movie> inventory = new HashMap<String, Movie>();\r\n\r\n    @GET\r\n    @Path(\"/getinfo\")\r\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    public Movie movieByImdbId(@QueryParam(\"imdbId\") String imdbId) {\r\n        if (inventory.containsKey(imdbId)) {\r\n            return inventory.get(imdbId);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    @POST\r\n    @Path(\"/addmovie\")\r\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    public Response addMovie(Movie movie) {\r\n        if (null != inventory.get(movie.getImdbId())) {\r\n            return Response\r\n              .status(Response.Status.NOT_MODIFIED)\r\n              .entity(\"Movie is Already in the database.\").build();\r\n        }\r\n\r\n        inventory.put(movie.getImdbId(), movie);\r\n        return Response.status(Response.Status.CREATED).build();\r\n    }\r\n}\r\n```"]