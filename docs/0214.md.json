["```\r\ncreateTransactionIfNecessary();\r\ntry {\r\n    callMethod();\r\n    commitTransactionAfterReturning();\r\n} catch (exception) {\r\n    completeTransactionAfterThrowing();\r\n    throw exception;\r\n}\r\n```","```\r\n@Transactional\r\npublic interface TransferService {\r\n    void transfer(String user1, String user2, double val);\r\n} \r\n```","```\r\n@Service\r\n@Transactional\r\npublic class TransferServiceImpl implements TransferService {\r\n    @Override\r\n    public void transfer(String user1, String user2, double val) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@Transactional\r\npublic void transfer(String user1, String user2, double val) {\r\n    // ...\r\n}\r\n```","```\r\n@Transactional(propagation = Propagation.REQUIRED)\r\npublic void requiredExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\n@Transactional\r\npublic void requiredExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isExistingTransaction()) {\r\n    if (isValidateExistingTransaction()) {\r\n        validateExisitingAndThrowExceptionIfNotValid();\r\n    }\r\n    return existing;\r\n}\r\nreturn createNewTransaction();\r\n```","```\r\n@Transactional(propagation = Propagation.SUPPORTS)\r\npublic void supportsExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isExistingTransaction()) {\r\n    if (isValidateExistingTransaction()) {\r\n        validateExisitingAndThrowExceptionIfNotValid();\r\n    }\r\n    return existing;\r\n}\r\nreturn emptyTransaction;\r\n```","```\r\n@Transactional(propagation = Propagation.MANDATORY)\r\npublic void mandatoryExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isExistingTransaction()) {\r\n    if (isValidateExistingTransaction()) {\r\n        validateExisitingAndThrowExceptionIfNotValid();\r\n    }\r\n    return existing;\r\n}\r\nthrow IllegalTransactionStateException;\r\n```","```\r\n@Transactional(propagation = Propagation.NEVER)\r\npublic void neverExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isExistingTransaction()) {\r\n    throw IllegalTransactionStateException;\r\n}\r\nreturn emptyTransaction;\r\n```","```\r\n@Transactional(propagation = Propagation.NOT_SUPPORTED)\r\npublic void notSupportedExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\n@Transactional(propagation = Propagation.REQUIRES_NEW)\r\npublic void requiresNewExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isExistingTransaction()) {\r\n    suspend(existing);\r\n    try {\r\n        return createNewTransaction();\r\n    } catch (exception) {\r\n        resumeAfterBeginException();\r\n        throw exception;\r\n    }\r\n}\r\nreturn createNewTransaction();\r\n```","```\r\n@Transactional(propagation = Propagation.NESTED)\r\npublic void nestedExample(String user) { \r\n    // ... \r\n}\r\n```","```\r\nif (isolationLevel != ISOLATION_DEFAULT) {\r\n    if (currentTransactionIsolationLevel() != isolationLevel) {\r\n        throw IllegalTransactionStateException\r\n    }\r\n}\r\n```","```\r\n@Transactional(isolation = Isolation.READ_UNCOMMITTED)\r\npublic void log(String message) {\r\n    // ...\r\n}\r\n```","```\r\n@Transactional(isolation = Isolation.READ_COMMITTED)\r\npublic void log(String message){\r\n    // ...\r\n}\r\n```","```\r\n@Transactional(isolation = Isolation.REPEATABLE_READ) \r\npublic void log(String message){\r\n    // ...\r\n}\r\n```","```\r\n@Transactional(isolation = Isolation.SERIALIZABLE)\r\npublic void log(String message){\r\n    // ...\r\n}\r\n```"]