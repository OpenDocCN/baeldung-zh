["```\r\nkeytool -genkey -alias serverkey -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -keystore serverkeystore.p12 -storepass password -ext san=ip:127.0.0.1,dns:localhost\r\n```","```\r\nkeytool -exportcert -keystore serverkeystore.p12 -alias serverkey -storepass password -rfc -file server-certificate.pem\r\n```","```\r\nkeytool -import -trustcacerts -file server-certificate.pem -keypass password -storepass password -keystore clienttruststore.jks\r\n```","```\r\nkeytool -genkey -alias clientkey -keyalg RSA -keysize 2048 -sigalg SHA256withRSA -keystore clientkeystore.p12 -storepass password -ext san=ip:127.0.0.1,dns:localhost\r\n\r\nkeytool -exportcert -keystore clientkeystore.p12 -alias clientkey -storepass password -rfc -file client-certificate.pem\r\n\r\nkeytool -import -trustcacerts -file client-certificate.pem -keypass password -storepass password -keystore servertruststore.jks\r\n```","```\r\npublic class SSLSocketEchoServer {\r\n\r\n    static void startServer(int port) throws IOException {\r\n\r\n        ServerSocketFactory factory = SSLServerSocketFactory.getDefault();\r\n        try (SSLServerSocket listener = (SSLServerSocket) factory.createServerSocket(port)) {\r\n            listener.setNeedClientAuth(true);\r\n            listener.setEnabledCipherSuites(new String[] { \"TLS_AES_128_GCM_SHA256\" });\r\n            listener.setEnabledProtocols(new String[] { \"TLSv1.3\" });\r\n            System.out.println(\"listening for messages...\");\r\n            try (Socket socket = listener.accept()) {\r\n\r\n                InputStream is = new BufferedInputStream(socket.getInputStream());\r\n                byte[] data = new byte[2048];\r\n                int len = is.read(data);\r\n\r\n                String message = new String(data, 0, len);\r\n                OutputStream os = new BufferedOutputStream(socket.getOutputStream());\r\n                System.out.printf(\"server received %d bytes: %s%n\", len, message);\r\n                String response = message + \" processed by server\";\r\n                os.write(response.getBytes(), 0, response.getBytes().length);\r\n                os.flush();\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class SSLScocketClient {\r\n\r\n    static void startClient(String host, int port) throws IOException {\r\n\r\n        SocketFactory factory = SSLSocketFactory.getDefault();\r\n        try (SSLSocket socket = (SSLSocket) factory.createSocket(host, port)) {\r\n\r\n            socket.setEnabledCipherSuites(new String[] { \"TLS_AES_128_GCM_SHA256\" });\r\n            socket.setEnabledProtocols(new String[] { \"TLSv1.3\" });\r\n\r\n            String message = \"Hello World Message\";\r\n            System.out.println(\"sending message: \" + message);\r\n            OutputStream os = new BufferedOutputStream(socket.getOutputStream());\r\n            os.write(message.getBytes());\r\n            os.flush();\r\n\r\n            InputStream is = new BufferedInputStream(socket.getInputStream());\r\n            byte[] data = new byte[2048];\r\n            int len = is.read(data);\r\n            System.out.printf(\"client received %d bytes: %s%n\", len, new String(data, 0, len));\r\n        }\r\n    }\r\n}\r\n```","```\r\njava -Djavax.net.ssl.keyStore=/path/to/serverkeystore.p12 \\ \r\n  -Djavax.net.ssl.keyStorePassword=password \\\r\n  -Djavax.net.ssl.trustStore=/path/to/servertruststore.jks \\ \r\n  -Djavax.net.ssl.trustStorePassword=password \\\r\n  com.baeldung.httpsclientauthentication.SSLSocketEchoServer\r\n```","```\r\njava -Djavax.net.ssl.keyStore=/path/to/clientkeystore.p12 \\ \r\n  -Djavax.net.ssl.keyStorePassword=password \\ \r\n  -Djavax.net.ssl.trustStore=/path/to/clienttruststore.jks \\ \r\n  -Djavax.net.ssl.trustStorePassword=password \\ \r\n  com.baeldung.httpsclientauthentication.SSLScocketClient \r\n```"]