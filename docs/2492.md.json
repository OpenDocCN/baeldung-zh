["```\r\nMethodHandles.Lookup publicLookup = MethodHandles.publicLookup();\r\n```","```\r\nMethodHandles.Lookup lookup = MethodHandles.lookup();\r\n```","```\r\nMethodType mt = MethodType.methodType(List.class, Object[].class);\r\n```","```\r\nMethodType mt = MethodType.methodType(int.class, Object.class);\r\n```","```\r\nMethodType mt = MethodType.methodType(String.class, String.class);\r\nMethodHandle concatMH = publicLookup.findVirtual(String.class, \"concat\", mt);\r\n```","```\r\nMethodType mt = MethodType.methodType(List.class, Object[].class);\r\n\r\nMethodHandle asListMH = publicLookup.findStatic(Arrays.class, \"asList\", mt);\r\n```","```\r\nMethodType mt = MethodType.methodType(void.class, String.class);\r\n\r\nMethodHandle newIntegerMH = publicLookup.findConstructor(Integer.class, mt);\r\n```","```\r\npublic class Book {\r\n\r\n    String id;\r\n    String title;\r\n\r\n    // constructor\r\n\r\n}\r\n```","```\r\nMethodHandle getTitleMH = lookup.findGetter(Book.class, \"title\", String.class);\r\n```","```\r\nprivate String formatBook() {\r\n    return id + \" > \" + title;\r\n}\r\n```","```\r\nMethod formatBookMethod = Book.class.getDeclaredMethod(\"formatBook\");\r\nformatBookMethod.setAccessible(true);\r\n\r\nMethodHandle formatBookMH = lookup.unreflect(formatBookMethod);\r\n```","```\r\nMethodType mt = MethodType.methodType(String.class, char.class, char.class);\r\nMethodHandle replaceMH = publicLookup.findVirtual(String.class, \"replace\", mt);\r\n\r\nString output = (String) replaceMH.invoke(\"jovo\", Character.valueOf('o'), 'a');\r\n\r\nassertEquals(\"java\", output);\r\n```","```\r\nMethodType mt = MethodType.methodType(List.class, Object[].class);\r\nMethodHandle asList = publicLookup.findStatic(Arrays.class, \"asList\", mt);\r\n\r\nList<Integer> list = (List<Integer>) asList.invokeWithArguments(1,2);\r\n\r\nassertThat(Arrays.asList(1,2), is(list));\r\n```","```\r\nMethodType mt = MethodType.methodType(int.class, int.class, int.class);\r\nMethodHandle sumMH = lookup.findStatic(Integer.class, \"sum\", mt);\r\n\r\nint sum = (int) sumMH.invokeExact(1, 11);\r\n\r\nassertEquals(12, sum);\r\n```","```\r\nMethodType mt = MethodType.methodType(boolean.class, Object.class);\r\nMethodHandle equals = publicLookup.findVirtual(String.class, \"equals\", mt);\r\n\r\nMethodHandle methodHandle = equals.asSpreader(Object[].class, 2);\r\n\r\nassertTrue((boolean) methodHandle.invoke(new Object[] { \"java\", \"java\" }));\r\n```","```\r\nMethodType mt = MethodType.methodType(String.class, String.class);\r\nMethodHandle concatMH = publicLookup.findVirtual(String.class, \"concat\", mt);\r\n\r\nMethodHandle bindedConcatMH = concatMH.bindTo(\"Hello \");\r\n\r\nassertEquals(\"Hello World!\", bindedConcatMH.invoke(\"World!\"));\r\n```"]