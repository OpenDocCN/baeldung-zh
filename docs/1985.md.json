["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>5.2.2.RELEASE</version>   \r\n</dependency>\r\n```","```\r\n@RestController\r\npublic class TaxiFareController {\r\n\r\n    @GetMapping(\"/taxifare/get/\")\r\n    public RateCard getTaxiFare() {\r\n        return new RateCard();\r\n    }\r\n\r\n    @PostMapping(\"/taxifare/calculate/\")\r\n    public String calculateTaxiFare(\r\n      @RequestBody @Valid TaxiRide taxiRide) {\r\n\r\n        // return the calculated fare\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class TaxiFareRequestInterceptor \r\n  extends HandlerInterceptorAdapter {\r\n\r\n    @Override\r\n    public boolean preHandle(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response, \r\n      Object handler) {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public void afterCompletion(\r\n      HttpServletRequest request, \r\n      HttpServletResponse response, \r\n      Object handler, \r\n      Exception ex) {\r\n        //\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class TaxiFareMVCConfig implements WebMvcConfigurer {\r\n\r\n    @Autowired\r\n    private TaxiFareRequestInterceptor taxiFareRequestInterceptor;\r\n\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(taxiFareRequestInterceptor)\r\n          .addPathPatterns(\"/taxifare/*/\");\r\n    }\r\n}\r\n```","```\r\n{\r\n  \"timestamp\": 1500645243383,\r\n  \"status\": 400,\r\n  \"error\": \"Bad Request\",\r\n  \"exception\": \"org.springframework.http.converter\r\n    .HttpMessageNotReadableException\",\r\n  \"message\": \"Could not read document: Stream closed; \r\n    nested exception is java.io.IOException: Stream closed\",\r\n  \"path\": \"/rest-log/taxifare/calculate/\"\r\n}\r\n```","```\r\n@Override\r\npublic boolean preHandle(HttpServletRequest request, \r\n  HttpServletResponse response, Object handler) {\r\n\r\n    HttpServletRequest requestCacheWrapperObject\r\n      = new ContentCachingRequestWrapper(request);\r\n    requestCacheWrapperObject.getParameterMap();\r\n    // Read inputStream from requestCacheWrapperObject and log it\r\n    return true;\r\n}\r\n```","```\r\nrequestCacheWrapperObject.getContentAsByteArray();\r\n```","```\r\nContent-Type:application/x-www-form-urlencoded\r\nMethod-Type:POST\r\n```","```\r\nrequestCacheWrapperObject.getParameterMap();\r\n```","```\r\n@Configuration\r\npublic class RequestLoggingFilterConfig {\r\n\r\n    @Bean\r\n    public CommonsRequestLoggingFilter logFilter() {\r\n        CommonsRequestLoggingFilter filter\r\n          = new CommonsRequestLoggingFilter();\r\n        filter.setIncludeQueryString(true);\r\n        filter.setIncludePayload(true);\r\n        filter.setMaxPayloadLength(10000);\r\n        filter.setIncludeHeaders(false);\r\n        filter.setAfterMessagePrefix(\"REQUEST DATA : \");\r\n        return filter;\r\n    }\r\n}\r\n```","```\r\n<logger name=\"org.springframework.web.filter.CommonsRequestLoggingFilter\">\r\n    <level value=\"DEBUG\" />\r\n</logger>\r\n```","```\r\nlogging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=\r\n  DEBUG\r\n```","```\r\npublic class CustomeRequestLoggingFilter \r\n  extends CommonsRequestLoggingFilter {\r\n\r\n    public CustomeRequestLoggingFilter() {\r\n        super.setIncludeQueryString(true);\r\n        super.setIncludePayload(true);\r\n        super.setMaxPayloadLength(10000);\r\n    }\r\n}\r\n```","```\r\npublic class CustomWebAppInitializer implements \r\n  WebApplicationInitializer {\r\n    public void onStartup(ServletContext container) {\r\n\r\n        AnnotationConfigWebApplicationContext context \r\n          = new AnnotationConfigWebApplicationContext();\r\n\tcontext.setConfigLocation(\"com.baeldung\");\r\n\tcontainer.addListener(new ContextLoaderListener(context));\r\n\r\n\tServletRegistration.Dynamic dispatcher \r\n          = container.addServlet(\"dispatcher\", \r\n          new DispatcherServlet(context));\r\n\tdispatcher.setLoadOnStartup(1);\r\n\tdispatcher.addMapping(\"/\");\t\r\n\r\n\tcontainer.addFilter(\"customRequestLoggingFilter\", \r\n          CustomeRequestLoggingFilter.class)\r\n          .addMappingForServletNames(null, false, \"dispatcher\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenRequest_whenFetchTaxiFareRateCard_thanOK() {\r\n    TestRestTemplate testRestTemplate = new TestRestTemplate();\r\n    TaxiRide taxiRide = new TaxiRide(true, 10l);\r\n    String fare = testRestTemplate.postForObject(\r\n      URL + \"calculate/\", \r\n      taxiRide, String.class);\r\n\r\n    assertThat(fare, equalTo(\"200\"));\r\n}\r\n```"]