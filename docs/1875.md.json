["```\r\nint knapsackRec(int[] w, int[] v, int n, int W) {\r\n    if (n <= 0) { \r\n        return 0; \r\n    } else if (w[n - 1] > W) {\r\n        return knapsackRec(w, v, n - 1, W);\r\n    } else {\r\n        return Math.max(knapsackRec(w, v, n - 1, W), v[n - 1] \r\n          + knapsackRec(w, v, n - 1, W - w[n - 1]));\r\n    }\r\n} \r\n```","```\r\nint knapsackDP(int[] w, int[] v, int n, int W) {\r\n    if (n <= 0 || W <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    int[][] m = new int[n + 1][W + 1];\r\n    for (int j = 0; j <= W; j++) {\r\n        m[0][j] = 0;\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = 1; j <= W; j++) { \r\n            if (w[i - 1] > j) {\r\n                m[i][j] = m[i - 1][j];\r\n            } else {\r\n                m[i][j] = Math.max(\r\n                  m[i - 1][j], \r\n                  m[i - 1][j - w[i - 1]] + v[i - 1]);\r\n            }\r\n        }\r\n    }\r\n    return m[n][W];\r\n} \r\n```"]