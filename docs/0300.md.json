["```\r\n<dependency>\r\n    <groupId>org.modelmapper</groupId>\r\n    <artifactId>modelmapper</artifactId>\r\n    <version>2.4.5</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic ModelMapper modelMapper() {\r\n    return new ModelMapper();\r\n}\r\n```","```\r\npublic class PostDto {\r\n    private static final SimpleDateFormat dateFormat\r\n      = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n\r\n    private Long id;\r\n\r\n    private String title;\r\n\r\n    private String url;\r\n\r\n    private String date;\r\n\r\n    private UserDto user;\r\n\r\n    public Date getSubmissionDateConverted(String timezone) throws ParseException {\r\n        dateFormat.setTimeZone(TimeZone.getTimeZone(timezone));\r\n        return dateFormat.parse(this.date);\r\n    }\r\n\r\n    public void setSubmissionDate(Date date, String timezone) {\r\n        dateFormat.setTimeZone(TimeZone.getTimeZone(timezone));\r\n        this.date = dateFormat.format(date);\r\n    }\r\n\r\n    // standard getters and setters\r\n} \r\n```","```\r\npublic List<Post> getPostsList(\r\n  int page, int size, String sortDir, String sort) {\r\n\r\n    PageRequest pageReq\r\n     = PageRequest.of(page, size, Sort.Direction.fromString(sortDir), sort);\r\n\r\n    Page<Post> posts = postRepository\r\n      .findByUser(userService.getCurrentUser(), pageReq);\r\n    return posts.getContent();\r\n}\r\n```","```\r\n@Controller\r\nclass PostRestController {\r\n\r\n    @Autowired\r\n    private IPostService postService;\r\n\r\n    @Autowired\r\n    private IUserService userService;\r\n\r\n    @Autowired\r\n    private ModelMapper modelMapper;\r\n\r\n    @GetMapping\r\n    @ResponseBody\r\n    public List<PostDto> getPosts(...) {\r\n        //...\r\n        List<Post> posts = postService.getPostsList(page, size, sortDir, sort);\r\n        return posts.stream()\r\n          .map(this::convertToDto)\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @ResponseBody\r\n    public PostDto createPost(@RequestBody PostDto postDto) {\r\n        Post post = convertToEntity(postDto);\r\n        Post postCreated = postService.createPost(post));\r\n        return convertToDto(postCreated);\r\n    }\r\n\r\n    @GetMapping(value = \"/{id}\")\r\n    @ResponseBody\r\n    public PostDto getPost(@PathVariable(\"id\") Long id) {\r\n        return convertToDto(postService.getPostById(id));\r\n    }\r\n\r\n    @PutMapping(value = \"/{id}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void updatePost(@PathVariable(\"id\") Long id, @RequestBody PostDto postDto) {\r\n        if(!Objects.equals(id, postDto.getId())){\r\n            throw new IllegalArgumentException(\"IDs don't match\");\r\n        }\r\n        Post post = convertToEntity(postDto);\r\n        postService.updatePost(post);\r\n    }\r\n}\r\n```","```\r\nprivate PostDto convertToDto(Post post) {\r\n    PostDto postDto = modelMapper.map(post, PostDto.class);\r\n    postDto.setSubmissionDate(post.getSubmissionDate(), \r\n        userService.getCurrentUser().getPreference().getTimezone());\r\n    return postDto;\r\n}\r\n```","```\r\nprivate Post convertToEntity(PostDto postDto) throws ParseException {\r\n    Post post = modelMapper.map(postDto, Post.class);\r\n    post.setSubmissionDate(postDto.getSubmissionDateConverted(\r\n      userService.getCurrentUser().getPreference().getTimezone()));\r\n\r\n    if (postDto.getId() != null) {\r\n        Post oldPost = postService.getPostById(postDto.getId());\r\n        post.setRedditID(oldPost.getRedditID());\r\n        post.setSent(oldPost.isSent());\r\n    }\r\n    return post;\r\n}\r\n```","```\r\npublic class PostDtoUnitTest {\r\n\r\n    private ModelMapper modelMapper = new ModelMapper();\r\n\r\n    @Test\r\n    public void whenConvertPostEntityToPostDto_thenCorrect() {\r\n        Post post = new Post();\r\n        post.setId(1L);\r\n        post.setTitle(randomAlphabetic(6));\r\n        post.setUrl(\"www.test.com\");\r\n\r\n        PostDto postDto = modelMapper.map(post, PostDto.class);\r\n        assertEquals(post.getId(), postDto.getId());\r\n        assertEquals(post.getTitle(), postDto.getTitle());\r\n        assertEquals(post.getUrl(), postDto.getUrl());\r\n    }\r\n\r\n    @Test\r\n    public void whenConvertPostDtoToPostEntity_thenCorrect() {\r\n        PostDto postDto = new PostDto();\r\n        postDto.setId(1L);\r\n        postDto.setTitle(randomAlphabetic(6));\r\n        postDto.setUrl(\"www.test.com\");\r\n\r\n        Post post = modelMapper.map(postDto, Post.class);\r\n        assertEquals(postDto.getId(), post.getId());\r\n        assertEquals(postDto.getTitle(), post.getTitle());\r\n        assertEquals(postDto.getUrl(), post.getUrl());\r\n    }\r\n}\r\n```"]