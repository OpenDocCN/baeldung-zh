["```\r\narangosh> db._createDatabase(\"baeldung-database\", {}, [{ username: \"baeldung\", passwd: \"password\", active: true}]);\r\n```","```\r\n<dependency>\r\n    <groupId>com.arangodb</groupId>\r\n    <artifactId>arangodb-spring-data</artifactId>\r\n    <version>3.5.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class ArangoDbConfiguration implements ArangoConfiguration {}\r\n```","```\r\n@Override\r\npublic ArangoDB.Builder arango() {\r\n    return new ArangoDB.Builder()\r\n      .host(\"127.0.0.1\", 8529)\r\n      .user(\"baeldung\").password(\"password\"); }\r\n```","```\r\n@Override\r\npublic ArangoDB.Builder arango() {\r\n    return new ArangoDB.Builder();\r\n}\r\n```","```\r\narangodb.host=127.0.0.1\r\narangodb.port=8529\r\narangodb.user=baeldung\r\narangodb.password=password\r\n```","```\r\nInputStream in = MyClass.class.getResourceAsStream(\"my.properties\");\r\nArangoDB.Builder arango = new ArangoDB.Builder()\r\n  .loadProperties(in);\r\n```","```\r\n@Override\r\npublic String database() {\r\n    return \"baeldung-database\";\r\n}\r\n```","```\r\n@EnableArangoRepositories(basePackages = {\"com.baeldung\"})\r\n```","```\r\n@Document(\"articles\")\r\npublic class Article {\r\n\r\n    @Id\r\n    private String id;\r\n\r\n    @ArangoId\r\n    private String arangoId;\r\n\r\n    private String name;\r\n    private String author;\r\n    private ZonedDateTime publishDate;\r\n\r\n    // constructors\r\n}\r\n```","```\r\n@Repository\r\npublic interface ArticleRepository extends ArangoRepository<Article, String> {}\r\n```","```\r\n@Autowired\r\nArticleRepository articleRepository;\r\n```","```\r\nArticle newArticle = new Article(\r\n  \"ArangoDb with Spring Data\",\r\n  \"Baeldung Writer\",\r\n  ZonedDateTime.now()\r\n);\r\n```","```\r\nArticle savedArticle = articleRepository.save(newArticle);\r\n```","```\r\nassertNotNull(savedArticle.getId());\r\nassertNotNull(savedArticle.getArangoId());\r\n```","```\r\nString articleId = savedArticle.getId();\r\n```","```\r\nOptional<Article> articleOpt = articleRepository.findById(articleId);\r\nassertTrue(articleOpt.isPresent());\r\n```","```\r\nArticle article = articleOpt.get();\r\narticle.setName(\"New Article Name\");\r\narticleRepository.save(article);\r\n```","```\r\narticleRepository.delete(article)\r\n```","```\r\narticleRepository.deleteById(articleId)\r\n```","```\r\n@Repository\r\npublic interface ArticleRepository extends ArangoRepository<Article, String> {\r\n    Iterable<Article> findByAuthor(String author);\r\n}\r\n```","```\r\n@Query(\"FOR a IN articles FILTER a.author == @author SORT a.publishDate ASC RETURN a\")\r\nIterable<Article> getByAuthor(@Param(\"author\") String author);\r\n```","```\r\n@Relations(edges = ArticleLink.class, lazy = true)\r\nprivate Collection<Article> articles;\r\n```","```\r\n@Edge\r\npublic class ArticleLink {\r\n\r\n    @From\r\n    private Article article;\r\n\r\n    @To\r\n    private Author author;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```"]