["```\r\n@Entity\r\npublic class Article {\r\n    @Id\r\n    private int id;\r\n\r\n    private String title;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic enum Status {\r\n    OPEN, REVIEW, APPROVED, REJECTED;\r\n}\r\n```","```\r\n@Entity\r\npublic class Article {\r\n    @Id\r\n    private int id;\r\n\r\n    private String title;\r\n\r\n    @Enumerated(EnumType.ORDINAL)\r\n    private Status status;\r\n}\r\n```","```\r\nArticle article = new Article();\r\narticle.setId(1);\r\narticle.setTitle(\"ordinal title\");\r\narticle.setStatus(Status.OPEN); \r\n```","```\r\ninsert \r\ninto\r\n    Article\r\n    (status, title, id) \r\nvalues\r\n    (?, ?, ?)\r\nbinding parameter [1] as [INTEGER] - [0]\r\nbinding parameter [2] as [VARCHAR] - [ordinal title]\r\nbinding parameter [3] as [INTEGER] - [1]\r\n```","```\r\npublic enum Type {\r\n    INTERNAL, EXTERNAL;\r\n}\r\n```","```\r\n@Entity\r\npublic class Article {\r\n    @Id\r\n    private int id;\r\n\r\n    private String title;\r\n\r\n    @Enumerated(EnumType.ORDINAL)\r\n    private Status status;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Type type;\r\n}\r\n```","```\r\nArticle article = new Article();\r\narticle.setId(2);\r\narticle.setTitle(\"string title\");\r\narticle.setType(Type.EXTERNAL);\r\n```","```\r\ninsert \r\ninto\r\n    Article\r\n    (status, title, type, id) \r\nvalues\r\n    (?, ?, ?, ?)\r\nbinding parameter [1] as [INTEGER] - [null]\r\nbinding parameter [2] as [VARCHAR] - [string title]\r\nbinding parameter [3] as [VARCHAR] - [EXTERNAL]\r\nbinding parameter [4] as [INTEGER] - [2]\r\n```","```\r\npublic enum Priority {\r\n    LOW(100), MEDIUM(200), HIGH(300);\r\n\r\n    private int priority;\r\n\r\n    private Priority(int priority) {\r\n        this.priority = priority;\r\n    }\r\n\r\n    public int getPriority() {\r\n        return priority;\r\n    }\r\n\r\n    public static Priority of(int priority) {\r\n        return Stream.of(Priority.values())\r\n          .filter(p -> p.getPriority() == priority)\r\n          .findFirst()\r\n          .orElseThrow(IllegalArgumentException::new);\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Article {\r\n\r\n    @Id\r\n    private int id;\r\n\r\n    private String title;\r\n\r\n    @Enumerated(EnumType.ORDINAL)\r\n    private Status status;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Type type;\r\n\r\n    @Basic\r\n    private int priorityValue;\r\n\r\n    @Transient\r\n    private Priority priority;\r\n\r\n    @PostLoad\r\n    void fillTransient() {\r\n        if (priorityValue > 0) {\r\n            this.priority = Priority.of(priorityValue);\r\n        }\r\n    }\r\n\r\n    @PrePersist\r\n    void fillPersistent() {\r\n        if (priority != null) {\r\n            this.priorityValue = priority.getPriority();\r\n        }\r\n    }\r\n}\r\n```","```\r\nArticle article = new Article();\r\narticle.setId(3);\r\narticle.setTitle(\"callback title\");\r\narticle.setPriority(Priority.HIGH);\r\n```","```\r\ninsert \r\ninto\r\n    Article\r\n    (priorityValue, status, title, type, id) \r\nvalues\r\n    (?, ?, ?, ?, ?)\r\nbinding parameter [1] as [INTEGER] - [300]\r\nbinding parameter [2] as [INTEGER] - [null]\r\nbinding parameter [3] as [VARCHAR] - [callback title]\r\nbinding parameter [4] as [VARCHAR] - [null]\r\nbinding parameter [5] as [INTEGER] - [3]\r\n```","```\r\npublic enum Category {\r\n    SPORT(\"S\"), MUSIC(\"M\"), TECHNOLOGY(\"T\");\r\n\r\n    private String code;\r\n\r\n    private Category(String code) {\r\n        this.code = code;\r\n    }\r\n\r\n    public String getCode() {\r\n        return code;\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Article {\r\n\r\n    @Id\r\n    private int id;\r\n\r\n    private String title;\r\n\r\n    @Enumerated(EnumType.ORDINAL)\r\n    private Status status;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private Type type;\r\n\r\n    @Basic\r\n    private int priorityValue;\r\n\r\n    @Transient\r\n    private Priority priority;\r\n\r\n    private Category category;\r\n}\r\n```","```\r\n@Converter(autoApply = true)\r\npublic class CategoryConverter implements AttributeConverter<Category, String> {\r\n\r\n    @Override\r\n    public String convertToDatabaseColumn(Category category) {\r\n        if (category == null) {\r\n            return null;\r\n        }\r\n        return category.getCode();\r\n    }\r\n\r\n    @Override\r\n    public Category convertToEntityAttribute(String code) {\r\n        if (code == null) {\r\n            return null;\r\n        }\r\n\r\n        return Stream.of(Category.values())\r\n          .filter(c -> c.getCode().equals(code))\r\n          .findFirst()\r\n          .orElseThrow(IllegalArgumentException::new);\r\n    }\r\n}\r\n```","```\r\nArticle article = new Article();\r\narticle.setId(4);\r\narticle.setTitle(\"converted title\");\r\narticle.setCategory(Category.MUSIC);\r\n```","```\r\ninsert \r\ninto\r\n    Article\r\n    (category, priorityValue, status, title, type, id) \r\nvalues\r\n    (?, ?, ?, ?, ?, ?)\r\nConverted value on binding : MUSIC -> M\r\nbinding parameter [1] as [VARCHAR] - [M]\r\nbinding parameter [2] as [INTEGER] - [0]\r\nbinding parameter [3] as [INTEGER] - [null]\r\nbinding parameter [4] as [VARCHAR] - [converted title]\r\nbinding parameter [5] as [VARCHAR] - [null]\r\nbinding parameter [6] as [INTEGER] - [4]\r\n```","```\r\nString jpql = \"select a from Article a where a.category = com.baeldung.jpa.enums.Category.SPORT\";\r\n\r\nList<Article> articles = em.createQuery(jpql, Article.class).getResultList();\r\n```","```\r\nString jpql = \"select a from Article a where a.category = :category\";\r\n\r\nTypedQuery<Article> query = em.createQuery(jpql, Article.class);\r\nquery.setParameter(\"category\", Category.TECHNOLOGY);\r\n\r\nList<Article> articles = query.getResultList();\r\n```"]