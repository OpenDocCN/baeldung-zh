["```\r\n<dependency>\r\n    <groupId>org.cache2k</groupId>\r\n    <artifactId>cache2k-base-bom</artifactId>\r\n    <version>1.2.3.Final</version>\r\n    <type>pom</type>\r\n</dependency>\r\n```","```\r\npublic class ProductHelper {\r\n\r\n    private Cache<String, Integer> cachedDiscounts;\r\n    private int cacheMissCount = 0;\r\n\r\n    public ProductHelper() {\r\n        cachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\r\n          .name(\"discount\")\r\n          .eternal(true)\r\n          .entryCapacity(100)\r\n          .build();\r\n    }\r\n\r\n    public Integer getDiscount(String productType) {\r\n        Integer discount = cachedDiscounts.get(productType);\r\n        if (Objects.isNull(discount)) {\r\n            cacheMissCount++;\r\n            discount = \"Sports\".equalsIgnoreCase(productType) ? 20 : 10;\r\n            cachedDiscounts.put(productType, discount);\r\n        }\r\n        return discount;\r\n    }\r\n\r\n    // Getters and setters\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenInvokedGetDiscountTwice_thenGetItFromCache() {\r\n    ProductHelper productHelper = new ProductHelper();\r\n    assertTrue(productHelper.getCacheMissCount() == 0);\r\n\r\n    assertTrue(productHelper.getDiscount(\"Sports\") == 20);\r\n    assertTrue(productHelper.getDiscount(\"Sports\") == 20);\r\n\r\n    assertTrue(productHelper.getCacheMissCount() == 1);\r\n}\r\n```","```\r\ncachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\r\n  // other configurations\r\n  .expireAfterWrite(10, TimeUnit.MILLISECONDS)\r\n  .build();\r\n```","```\r\n@Test\r\npublic void whenInvokedGetDiscountAfterExpiration_thenDiscountCalculatedAgain() \r\n  throws InterruptedException {\r\n    ProductHelper productHelper = new ProductHelper();\r\n    assertTrue(productHelper.getCacheMissCount() == 0);\r\n    assertTrue(productHelper.getDiscount(\"Sports\") == 20);\r\n    assertTrue(productHelper.getCacheMissCount() == 1);\r\n\r\n    Thread.sleep(20);\r\n\r\n    assertTrue(productHelper.getDiscount(\"Sports\") == 20);\r\n    assertTrue(productHelper.getCacheMissCount() == 2);\r\n}\r\n```","```\r\ncachedDiscounts = Cache2kBuilder.of(String.class, Integer.class)\r\n  // other configurations\r\n  .loader((key) -> {\r\n      cacheMissCount++;\r\n      return \"Sports\".equalsIgnoreCase(key) ? 20 : 10;\r\n  })\r\n  .build();\r\n```","```\r\npublic Integer getDiscount(String productType) {\r\n    return cachedDiscounts.get(productType);\r\n}\r\n```","```\r\n@Test\r\npublic void whenInvokedGetDiscount_thenPopulateCacheUsingLoader() {\r\n    ProductHelper productHelper = new ProductHelper();\r\n    assertTrue(productHelper.getCacheMissCount() == 0);\r\n\r\n    assertTrue(productHelper.getDiscount(\"Sports\") == 20);\r\n    assertTrue(productHelper.getCacheMissCount() == 1);\r\n\r\n    assertTrue(productHelper.getDiscount(\"Electronics\") == 10);\r\n    assertTrue(productHelper.getCacheMissCount() == 2);\r\n}\r\n```","```\r\n.addListener(new CacheEntryCreatedListener<String, Integer>() {\r\n    @Override\r\n    public void onEntryCreated(Cache<String, Integer> cache, CacheEntry<String, Integer> entry) {\r\n        LOGGER.info(\"Entry created: [{}, {}].\", entry.getKey(), entry.getValue());\r\n    }\r\n})\r\n```","```\r\nEntry created: [Sports, 20].\r\n```"]