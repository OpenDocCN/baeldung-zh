["```\r\n<dependency>\r\n    <groupId>org.thymeleaf</groupId>\r\n    <artifactId>thymeleaf-spring5</artifactId>\r\n    <version>3.0.11.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-commons</artifactId>\r\n    <version>2.3.2.RELEASE</version>\r\n</dependency>\r\n```","```\r\npublic class Book {\r\n    private int id;\r\n    private String name;\r\n\r\n    // standard constructor, setters and getters\r\n}\r\n```","```\r\n@Service\r\npublic class BookService {\r\n\r\n    final private List<Book> books = BookUtils.buildBooks();\r\n\r\n    public Page<Book> findPaginated(Pageable pageable) {\r\n        int pageSize = pageable.getPageSize();\r\n        int currentPage = pageable.getPageNumber();\r\n        int startItem = currentPage * pageSize;\r\n        List<Book> list;\r\n\r\n        if (books.size() < startItem) {\r\n            list = Collections.emptyList();\r\n        } else {\r\n            int toIndex = Math.min(startItem + pageSize, books.size());\r\n            list = books.subList(startItem, toIndex);\r\n        }\r\n\r\n        Page<Book> bookPage\r\n          = new PageImpl<Book>(list, PageRequest.of(currentPage, pageSize), books.size());\r\n\r\n        return bookPage;\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class BookController {\r\n\r\n    @Autowired\r\n    private BookService bookService;\r\n\r\n    @RequestMapping(value = \"/listBooks\", method = RequestMethod.GET)\r\n    public String listBooks(\r\n      Model model, \r\n      @RequestParam(\"page\") Optional<Integer> page, \r\n      @RequestParam(\"size\") Optional<Integer> size) {\r\n        int currentPage = page.orElse(1);\r\n        int pageSize = size.orElse(5);\r\n\r\n        Page<Book> bookPage = bookService.findPaginated(PageRequest.of(currentPage - 1, pageSize));\r\n\r\n        model.addAttribute(\"bookPage\", bookPage);\r\n\r\n        int totalPages = bookPage.getTotalPages();\r\n        if (totalPages > 0) {\r\n            List<Integer> pageNumbers = IntStream.rangeClosed(1, totalPages)\r\n                .boxed()\r\n                .collect(Collectors.toList());\r\n            model.addAttribute(\"pageNumbers\", pageNumbers);\r\n        }\r\n\r\n        return \"listBooks.html\";\r\n    }\r\n}\r\n```","```\r\n<table border=\"1\">\r\n    <thead>\r\n        <tr>\r\n            <th th:text=\"#{msg.id}\" />\r\n            <th th:text=\"#{msg.name}\" />\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr th:each=\"book, iStat : ${bookPage.content}\"\r\n            th:style=\"${iStat.odd}? 'font-weight: bold;'\"\r\n            th:alt-title=\"${iStat.even}? 'even' : 'odd'\">\r\n            <td th:text=\"${book.id}\" />\r\n            <td th:text=\"${book.name}\" />\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n<div th:if=\"${bookPage.totalPages > 0}\" class=\"pagination\"\r\n    th:each=\"pageNumber : ${pageNumbers}\">\r\n    <a th:href=\"@{/listBooks(size=${bookPage.size}, page=${pageNumber})}\"\r\n        th:text=${pageNumber}\r\n        th:class=\"${pageNumber==bookPage.number + 1} ? active\"></a>\r\n</div>\r\n```"]