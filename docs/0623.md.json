["```\r\npublic abstract class Account {\r\n    protected abstract void deposit(BigDecimal amount);\r\n\r\n    /**\r\n     * Reduces the balance of the account by the specified amount\r\n     * provided given amount > 0 and account meets minimum available\r\n     * balance criteria.\r\n     *\r\n     * @param amount\r\n     */\r\n    protected abstract void withdraw(BigDecimal amount);\r\n} \r\n```","```\r\npublic class BankingAppWithdrawalService {\r\n    private Account account;\r\n\r\n    public BankingAppWithdrawalService(Account account) {\r\n        this.account = account;\r\n    }\r\n\r\n    public void withdraw(BigDecimal amount) {\r\n        account.withdraw(amount);\r\n    }\r\n}\r\n```","```\r\npublic class FixedTermDepositAccount extends Account {\r\n    // Overridden methods...\r\n}\r\n```","```\r\npublic class FixedTermDepositAccount extends Account {\r\n    @Override\r\n    protected void deposit(BigDecimal amount) {\r\n        // Deposit into this account\r\n    }\r\n\r\n    @Override\r\n    protected void withdraw(BigDecimal amount) {\r\n        throw new UnsupportedOperationException(\"Withdrawals are not supported by FixedTermDepositAccount!!\");\r\n    }\r\n}\r\n```","```\r\nAccount myFixedTermDepositAccount = new FixedTermDepositAccount();\r\nmyFixedTermDepositAccount.deposit(new BigDecimal(1000.00));\r\n\r\nBankingAppWithdrawalService withdrawalService = new BankingAppWithdrawalService(myFixedTermDepositAccount);\r\nwithdrawalService.withdraw(new BigDecimal(100.00));\r\n```","```\r\nWithdrawals are not supported by FixedTermDepositAccount!!\r\n```","```\r\n/**\r\n * Reduces the account balance by the specified amount\r\n * provided given amount > 0 and account meets minimum available\r\n * balance criteria.\r\n *\r\n * @param amount\r\n */\r\nprotected abstract void withdraw(BigDecimal amount);\r\n```","```\r\npublic class BankingAppWithdrawalService {\r\n    private WithdrawableAccount withdrawableAccount;\r\n\r\n    public BankingAppWithdrawalService(WithdrawableAccount withdrawableAccount) {\r\n        this.withdrawableAccount = withdrawableAccount;\r\n    }\r\n\r\n    public void withdraw(BigDecimal amount) {\r\n        withdrawableAccount.withdraw(amount);\r\n    }\r\n}\r\n```","```\r\npublic abstract class Foo {\r\n    public abstract Number generateNumber();    \r\n    // Other Methods\r\n} \r\n```","```\r\npublic class Bar extends Foo {\r\n    @Override\r\n    public Integer generateNumber() {\r\n        return new Integer(10);\r\n    }\r\n    // Other Methods\r\n}\r\n```","```\r\npublic abstract class Car {\r\n    protected int limit;\r\n\r\n    // invariant: speed < limit;\r\n    protected int speed;\r\n\r\n    // postcondition: speed < limit\r\n    protected abstract void accelerate();\r\n\r\n    // Other methods...\r\n}\r\n```","```\r\npublic class HybridCar extends Car {\r\n    // invariant: charge >= 0;\r\n    private int charge;\r\n\r\n      @Override\r\n    // postcondition: speed < limit\r\n    protected void accelerate() {\r\n        // Accelerate HybridCar ensuring speed < limit\r\n    }\r\n\r\n    // Other methods...\r\n}\r\n```","```\r\npublic abstract class Car {\r\n\r\n    // Allowed to be set once at the time of creation.\r\n    // Value can only increment thereafter.\r\n    // Value cannot be reset.\r\n    protected int mileage;\r\n\r\n    public Car(int mileage) {\r\n        this.mileage = mileage;\r\n    }\r\n\r\n    // Other properties and methods...\r\n\r\n}\r\n```","```\r\npublic class ToyCar extends Car {\r\n    public void reset() {\r\n        mileage = 0;\r\n    }\r\n\r\n    // Other properties and methods\r\n}\r\n```","```\r\npublic class Foo {\r\n\r\n    // precondition: 0 < num <= 5\r\n    public void doStuff(int num) {\r\n        if (num <= 0 || num > 5) {\r\n            throw new IllegalArgumentException(\"Input out of range 1-5\");\r\n        }\r\n        // some logic here...\r\n    }\r\n}\r\n```","```\r\npublic class Bar extends Foo {\r\n\r\n    @Override\r\n    // precondition: 0 < num <= 10\r\n    public void doStuff(int num) {\r\n        if (num <= 0 || num > 10) {\r\n            throw new IllegalArgumentException(\"Input out of range 1-10\");\r\n        }\r\n        // some logic here...\r\n    }\r\n}\r\n```","```\r\npublic abstract class Car {\r\n\r\n    protected int speed;\r\n\r\n    // postcondition: speed must reduce\r\n    protected abstract void brake();\r\n\r\n    // Other methods...\r\n} \r\n```","```\r\npublic class HybridCar extends Car {\r\n\r\n   // Some properties and other methods...\r\n\r\n    @Override\r\n    // postcondition: speed must reduce\r\n    // postcondition: charge must increase\r\n    protected void brake() {\r\n        // Apply HybridCar brake\r\n    }\r\n}\r\n```","```\r\npublic interface FileSystem {\r\n    File[] listFiles(String path);\r\n\r\n    void deleteFile(String path) throws IOException;\r\n} \r\n```","```\r\npublic class ReadOnlyFileSystem implements FileSystem {\r\n    public File[] listFiles(String path) {\r\n        // code to list files\r\n        return new File[0];\r\n    }\r\n\r\n    public void deleteFile(String path) throws IOException {\r\n        // Do nothing.\r\n        // deleteFile operation is not supported on a read-only file system\r\n    }\r\n}\r\n```","```\r\npublic class FilePurgingJob {\r\n    private FileSystem fileSystem;\r\n\r\n    public FilePurgingJob(FileSystem fileSystem) {\r\n        this.fileSystem = fileSystem;\r\n    }\r\n\r\n    public void purgeOldestFile(String path) {\r\n        if (!(fileSystem instanceof ReadOnlyFileSystem)) {\r\n            // code to detect oldest file\r\n            fileSystem.deleteFile(path);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class ToyCar extends Car {\r\n\r\n    @Override\r\n    protected int getRemainingFuel() {\r\n        return 0;\r\n    }\r\n} \r\n```"]