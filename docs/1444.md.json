["```\r\n<dependency>\r\n    <groupId>io.helidon.webserver</groupId>\r\n    <artifactId>helidon-webserver</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\npublic static void main(String... args) throws Exception {\r\n    ServerConfiguration serverConfig = ServerConfiguration.builder()\r\n      .port(9001).build();\r\n    Routing routing = Routing.builder()\r\n      .get(\"/greet\", (request, response) -> response.send(\"Hello World !\")).build();\r\n    WebServer.create(serverConfig, routing)\r\n      .start()\r\n      .thenAccept(ws ->\r\n          System.out.println(\"Server started at: http://localhost:\" + ws.port())\r\n      );\r\n}\r\n```","```\r\nException in thread \"main\" java.lang.IllegalStateException: \r\n  No implementation found for SPI: io.helidon.webserver.spi.WebServerFactory\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.webserver</groupId>\r\n    <artifactId>helidon-webserver-netty</artifactId>\r\n    <version>0.10.4</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nhttp://localhost:9001/greet\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.config</groupId>\r\n    <artifactId>helidon-config</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\nConfig config = Config.builder().build();\r\n```","```\r\nserver.port=9080\r\nweb.debug=true\r\nweb.page-size=15\r\nuser.home=C:/Users/app\r\n```","```\r\nint port = config.get(\"server.port\").asInt();\r\nint pageSize = config.get(\"web.page-size\").asInt();\r\nboolean debug = config.get(\"web.debug\").asBoolean();\r\nString userHome = config.get(\"user.home\").asString();\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.config</groupId>\r\n    <artifactId>helidon-config-yaml</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\nserver:\r\n  port: 9080  \r\nweb:\r\n  debug: true\r\n  page-size: 15\r\nuser:\r\n  home: C:/Users/app\r\n```","```\r\nConfigSource configSource = ConfigSources.classpath(\"application.yaml\").build();\r\nConfig config = Config.builder()\r\n  .disableSystemPropertiesSource()\r\n  .disableEnvironmentVariablesSource()\r\n  .sources(configSource)\r\n  .build();\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .get((request, response) -> {} );\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .get(\"/path\", (request, response) -> {} );\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .post(\"/save\",\r\n    RequestPredicate.whenRequest()\r\n      .containsHeader(\"header1\")\r\n      .containsCookie(\"cookie1\")\r\n      .accepts(MediaType.APPLICATION_JSON)\r\n      .containsQueryParameter(\"param1\")\r\n      .hasContentType(\"application/json\")\r\n      .thenApply((request, response) -> { })\r\n      .otherwise((request, response) -> { }))\r\n      .build();\r\n```","```\r\npublic class Book {\r\n    private String id;\r\n    private String name;\r\n    private String author;\r\n    private Integer pages;\r\n    // ...\r\n}\r\n```","```\r\npublic class BookResource implements Service {\r\n\r\n    private BookManager bookManager = new BookManager();\r\n\r\n    @Override\r\n    public void update(Routing.Rules rules) {\r\n        rules\r\n          .get(\"/\", this::books)\r\n          .get(\"/{id}\", this::bookById);\r\n    }\r\n\r\n    private void bookById(ServerRequest serverRequest, ServerResponse serverResponse) {\r\n        String id = serverRequest.path().param(\"id\");\r\n        Book book = bookManager.get(id);\r\n        JsonObject jsonObject = from(book);\r\n        serverResponse.send(jsonObject);\r\n    }\r\n\r\n    private void books(ServerRequest serverRequest, ServerResponse serverResponse) {\r\n        List<Book> books = bookManager.getAll();\r\n        JsonArray jsonArray = from(books);\r\n        serverResponse.send(jsonArray);\r\n    }\r\n    //...\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.webserver</groupId>\r\n    <artifactId>helidon-webserver-json</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .register(JsonSupport.get())\r\n  .register(\"/books\", new BookResource())\r\n  .build();\r\n```","```\r\nhttp://localhost:9080/books\r\nhttp://localhost:9080/books/0001-201810\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.security</groupId>\r\n    <artifactId>helidon-security</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.helidon.security</groupId>\r\n    <artifactId>helidon-security-provider-http-auth</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.helidon.security</groupId>\r\n    <artifactId>helidon-security-integration-webserver</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n```","```\r\nMap<String, MyUser> users = //...\r\nUserStore store = user -> Optional.ofNullable(users.get(user));\r\n\r\nHttpBasicAuthProvider httpBasicAuthProvider = HttpBasicAuthProvider.builder()\r\n  .realm(\"myRealm\")\r\n  .subjectType(SubjectType.USER)\r\n  .userStore(store)\r\n  .build();\r\n\r\nSecurity security = Security.builder()\r\n  .addAuthenticationProvider(httpBasicAuthProvider)\r\n  .build();\r\n```","```\r\n#Config 4 Security ==> Mapped to Security Object\r\nsecurity:\r\n  providers:\r\n  - http-basic-auth:\r\n      realm: \"helidon\"\r\n      principal-type: USER # Can be USER or SERVICE, default is USER\r\n      users:\r\n      - login: \"user\"\r\n        password: \"user\"\r\n        roles: [\"ROLE_USER\"]\r\n      - login: \"admin\"\r\n        password: \"admin\"\r\n        roles: [\"ROLE_USER\", \"ROLE_ADMIN\"]\r\n\r\n  #Config 4 Security Web Server Integration ==> Mapped to WebSecurity Object\r\n  web-server:\r\n    securityDefaults:\r\n      authenticate: true\r\n    paths:\r\n    - path: \"/user\"\r\n      methods: [\"get\"]\r\n      roles-allowed: [\"ROLE_USER\", \"ROLE_ADMIN\"]\r\n    - path: \"/admin\"\r\n      methods: [\"get\"]\r\n      roles-allowed: [\"ROLE_ADMIN\"]\r\n```","```\r\nConfig config = Config.create();\r\nSecurity security = Security.fromConfig(config);\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .register(WebSecurity.from(security).securityDefaults(WebSecurity.authenticate()))\r\n  .build();\r\n```","```\r\nRouting routing = Routing.builder()        \r\n  .register(WebSecurity.from(config))\r\n  .build();\r\n```","```\r\nRouting routing = Routing.builder()\r\n  .register(WebSecurity.from(config))\r\n  .get(\"/user\", (request, response) -> response.send(\"Hello, I'm Helidon SE\"))\r\n  .get(\"/admin\", (request, response) -> response.send(\"Hello, I'm Helidon SE\"))\r\n  .build();\r\n```","```\r\n<dependency>\r\n    <groupId>io.helidon.microprofile.bundles</groupId>\r\n    <artifactId>helidon-microprofile-1.2</artifactId>\r\n    <version>0.10.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.media</groupId>\r\n    <artifactId>jersey-media-json-binding</artifactId>\r\n    <version>2.26</version>\r\n</dependency>\r\n```","```\r\n<beans xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\r\n  xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee\r\n  http://xmlns.jcp.org/xml/ns/javaee/beans_2_0.xsd\"\r\n  version=\"2.0\" bean-discovery-mode=\"annotated\">\r\n</beans>\r\n```","```\r\n@Override\r\npublic Set<Class<?>> getClasses() {\r\n    return CollectionsHelper.setOf(BookEndpoint.class);\r\n}\r\n```","```\r\npublic static void main(String... args) {\r\n    Server server = Server.builder()\r\n      .addApplication(LibraryApplication.class)\r\n      .port(9080)\r\n      .build();\r\n    server.start();\r\n}\r\n```"]