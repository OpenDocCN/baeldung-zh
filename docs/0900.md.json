["```\r\nvoid forEach(Consumer<? super T> action)\r\n```","```\r\nfor (String name : names) {\r\n    System.out.println(name);\r\n}\r\n```","```\r\nnames.forEach(name -> {\r\n    System.out.println(name);\r\n});\r\n```","```\r\n@FunctionalInterface\r\npublic interface Consumer {\r\n    void accept(T t);\r\n}\r\n```","```\r\nConsumer<String> printConsumer = new Consumer<String>() {\r\n    public void accept(String name) {\r\n        System.out.println(name);\r\n    };\r\n};\r\n```","```\r\nnames.forEach(printConsumer);\r\n```","```\r\nConsumer<String> printConsumer= new Consumer<String>() {\r\n    public void accept(String name) {\r\n        System.out.println(name);\r\n    }\r\n};\r\nnames.forEach(printConsumer);\r\n```","```\r\n(argument) -> { //body }\r\n```","```\r\nname -> System.out.println(name)\r\n```","```\r\nnames.forEach(name -> System.out.println(name));\r\n```","```\r\nnames.forEach(System.out::println);\r\n```","```\r\nList<String> names = Arrays.asList(\"Larry\", \"Steve\", \"James\");\r\n\r\nnames.forEach(System.out::println);\r\n```","```\r\nSet<String> uniqueNames = new HashSet<>(Arrays.asList(\"Larry\", \"Steve\", \"James\"));\r\n\r\nuniqueNames.forEach(System.out::println);\r\n```","```\r\nQueue<String> namesQueue = new ArrayDeque<>(Arrays.asList(\"Larry\", \"Steve\", \"James\"));\r\n\r\nnamesQueue.forEach(System.out::println);\r\n```","```\r\nMap<Integer, String> namesMap = new HashMap<>();\r\nnamesMap.put(1, \"Larry\");\r\nnamesMap.put(2, \"Steve\");\r\nnamesMap.put(3, \"James\");\r\n```","```\r\nnamesMap.forEach((key, value) -> System.out.println(key + \" \" + value));\r\n```","```\r\n(key, value) -> System.out.println(key + \" \" + value)\r\n```","```\r\nnamesMap.entrySet().forEach(entry -> System.out.println(\r\n  entry.getKey() + \" \" + entry.getValue()));\r\n```","```\r\nnames.forEach(name -> System.out.println(name));\r\n```","```\r\nfor (String name : names) {\r\n    System.out.println(name);\r\n}\r\n```"]