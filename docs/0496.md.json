["```\r\nCsvReadOptions csvReadOptions =\r\n    CsvReadOptions.builder(file)\r\n        .separator(',')\r\n        .header(true)\r\n        .dateFormat(formatter)\r\n        .build();\r\ntable = Table.read().usingOptions(csvReadOptions);\r\n```","```\r\n Structure of avocado.csv         \r\n Index  |  Column Name   |  Column Type  |\r\n------------------------------------------\r\n     0  |            C0  |      INTEGER  |\r\n     1  |          Date  |   LOCAL_DATE  |\r\n     2  |  AveragePrice  |       DOUBLE  |\r\n     3  |  Total Volume  |       DOUBLE  |\r\n    ... |       ...      |       ...     |\r\n```","```\r\nassertThat(table.shape()).isEqualTo(\"avocado.csv: 18249 rows X 14 cols\");\r\n```","```\r\nStringColumn type = table.stringColumn(\"type\");\r\nList<String> conventional = type.where(type.isEqualTo(\"conventional\")).asList().stream()\r\n    .limit(2)\r\n    .toList();\r\nassertThat(conventional.get(0)).isSameAs(conventional.get(1));\r\n```","```\r\nTimeColumn time = TimeColumn.create(\"Time\");\r\n```","```\r\nTable table = Table.create(\"test\");\r\ntable.addColumns(time);\r\nassertThat(table.columnNames()).contains(\"time\");\r\n```","```\r\nDoubleColumn averagePrice = table.doubleColumn(\"AveragePrice\");\r\naveragePrice.append(1.123);\r\nassertThat(averagePrice.get(averagePrice.size() - 1)).isEqualTo(1.123);\r\n```","```\r\nDoubleColumn averagePrice2 = table.doubleColumn(\"AveragePrice\").copy();\r\naveragePrice2.setName(\"AveragePrice2\");\r\naveragePrice2.append(1.123);\r\nassertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> table.addColumns(averagePrice2));\r\n```","```\r\nstringColumn.set(2, \"Baeldung\");\r\n```","```\r\nDoubleColumn averagePrice = table.doubleColumn(\"AveragePrice\").setMissing(0);\r\nassertThat(averagePrice.get(0)).isNull();\r\n```","```\r\nTable ascendingDateSortedTable = table.sortAscendingOn(\"Date\");\r\nassertThat(ascendingDateSortedTable.dateColumn(\"Date\").get(0)).isEqualTo(LocalDate.parse(\"2015-01-04\"));\r\nTable descendingDateSortedTable = table.sortDescendingOn(\"Date\");\r\nassertThat(descendingDateSortedTable.dateColumn(\"Date\").get(0)).isEqualTo(LocalDate.parse(\"2018-03-25\"));\r\n```","```\r\nTable ascendingYearAndAveragePriceSortedTable = table.sortOn(\"year\", \"-AveragePrice\");\r\nassertThat(ascendingYearAndAveragePriceSortedTable.intColumn(\"year\").get(0)).isEqualTo(2015);\r\nassertThat(ascendingYearAndAveragePriceSortedTable.numberColumn(\"AveragePrice\").get(0)).isEqualTo(2.79);\r\n```","```\r\nDateColumn dateTable = table.dateColumn(\"Date\");\r\nDoubleColumn averagePrice = table.doubleColumn(\"AveragePrice\");\r\nSelection selection = dateTable.isInYear(2017).and(averagePrice.isGreaterThan(2D));\r\nTable table2017 = table.where(selection);\r\nassertThat(table2017.intColumn(\"year\")).containsOnly(2017);\r\nassertThat(table2017.doubleColumn(\"AveragePrice\")).allMatch(avrgPrice -> avrgPrice > 2D);\r\n```","```\r\nTable summary = table.summarize(\"AveragePrice\", max, min, mean, stdDev).by(\"year\");\r\nSystem.out.println(summary.print());\r\n```","```\r\n avocado.csv summary                                               \r\n year  |  Mean [AveragePrice]  |  Max [AveragePrice]  |  Min [AveragePrice]  |  Std. Deviation [AveragePrice]  |\r\n----------------------------------------------------------------------------------------------------------------\r\n 2015  |    1.375590382902939  |                2.79  |                0.49  |            0.37559477067238917  |\r\n 2016  |   1.3386396011396013  |                3.25  |                0.51  |            0.39370799476072077  |\r\n 2017  |   1.5151275777700104  |                3.17  |                0.44  |             0.4329056466203253  |\r\n 2018  |   1.3475308641975308  |                 2.3  |                0.56  |             0.3058577391135024  | \r\n```","```\r\nsummary.write().csv(\"summary.csv\");\r\n```"]