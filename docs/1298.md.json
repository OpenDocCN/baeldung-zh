["```\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-guava</artifactId>\r\n    <version>3.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nFile temp1 = File.createTempFile(\"bael\", \"dung1\");\r\nFile temp2 = File.createTempFile(\"bael\", \"dung2\");\r\n```","```\r\nByteSource byteSource1 = Files.asByteSource(temp1);\r\nByteSource byteSource2 = Files.asByteSource(temp2);\r\n```","```\r\nassertThat(buteSource1)\r\n  .hasSize(0)\r\n  .hasSameContentAs(byteSource2); \r\n```","```\r\nMultimap<Integer, String> mmap = Multimaps\r\n  .newMultimap(new HashMap<>(), Sets::newHashSet);\r\nmmap.put(1, \"one\");\r\nmmap.put(1, \"1\");\r\n```","```\r\nassertThat(mmap)\r\n  .hasSize(2)\r\n  .containsKeys(1)\r\n  .contains(entry(1, \"one\"))\r\n  .contains(entry(1, \"1\"));\r\n```","```\r\nMultimap<Integer, String> mmap1 = ArrayListMultimap.create();\r\nmmap1.put(1, \"one\");\r\nmmap1.put(1, \"1\");\r\nmmap1.put(2, \"two\");\r\nmmap1.put(2, \"2\");\r\n\r\nMultimap<Integer, String> mmap1_clone = Multimaps\r\n  .newSetMultimap(new HashMap<>(), HashSet::new);\r\nmmap1_clone.put(1, \"one\");\r\nmmap1_clone.put(1, \"1\");\r\nmmap1_clone.put(2, \"two\");\r\nmmap1_clone.put(2, \"2\");\r\n\r\nMultimap<Integer, String> mmap2 = Multimaps\r\n  .newSetMultimap(new HashMap<>(), HashSet::new);\r\nmmap2.put(1, \"one\");\r\nmmap2.put(1, \"1\");\r\n```","```\r\nassertThat(mmap1)\r\n  .containsAllEntriesOf(mmap2)\r\n  .containsAllEntriesOf(mmap1_clone)\r\n  .hasSameEntriesAs(mmap1_clone);\r\n```","```\r\nOptional<String> something = Optional.of(\"something\");\r\n```","```\r\nassertThat(something)\r\n  .isPresent()\r\n  .extractingValue()\r\n  .isEqualTo(\"something\");\r\n```","```\r\nRange<String> range = Range.openClosed(\"a\", \"g\");\r\n```","```\r\nassertThat(range)\r\n  .hasOpenedLowerBound()\r\n  .isNotEmpty()\r\n  .hasClosedUpperBound()\r\n  .contains(\"b\");\r\n```","```\r\nTable<Integer, String, String> table = HashBasedTable.create(2, 2);\r\ntable.put(1, \"A\", \"PRESENT\");\r\ntable.put(1, \"B\", \"ABSENT\");\r\n```","```\r\nassertThat(table)\r\n  .hasRowCount(1)\r\n  .containsValues(\"ABSENT\")\r\n  .containsCell(1, \"B\", \"ABSENT\");\r\n```"]