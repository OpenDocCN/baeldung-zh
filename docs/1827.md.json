["```\r\nS(n) = S(n-1) + S(n-2), with S(0) = 0 and S(1) = 1\r\n```","```\r\npublic static int nthFibonacciTerm(int n) {\r\n    if (n == 1 || n == 0) {\r\n        return n;\r\n    }\r\n    return nthFibonacciTerm(n-1) + nthFibonacciTerm(n-2);\r\n}\r\n```","```\r\npublic static int nthFibonacciTerm(int n) {\r\n    if(n == 0 || n == 1) {\r\n        return n;\r\n    }\r\n    int n0 = 0, n1 = 1;\r\n    int tempNthTerm;\r\n    for (int i = 2; i <= n; i++) {\r\n        tempNthTerm = n0 + n1;\r\n        n0 = n1;\r\n        n1 = tempNthTerm;\r\n    }\r\n    return n1;\r\n}\r\n```","```\r\nΦ = ( 1 + √5 )/2 = 1.6180339887...\r\n```","```\r\nSn = Φⁿ–(– Φ⁻ⁿ)/√5\r\n```","```\r\npublic static int nthFibonacciTerm(int n) {\r\n    double squareRootOf5 = Math.sqrt(5);\r\n    double phi = (1 + squareRootOf5)/2;\r\n    int nthTerm = (int) ((Math.pow(phi, n) - Math.pow(-phi, -n))/squareRootOf5);\r\n    return nthTerm;\r\n}\r\n```"]