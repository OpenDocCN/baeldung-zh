["```\r\n<dependency>\r\n   <groupId>org.apache.httpcomponents</groupId>\r\n   <artifactId>httpclient</artifactId>\r\n   <version>4.3.3</version>\r\n</dependency>\r\n```","```\r\npublic String questions(int min, String questionsUri) {\r\n   HttpGet request = null;\r\n   try {\r\n      request = new HttpGet(questionsUri);\r\n      HttpResponse httpResponse = client.execute(request);\r\n      InputStream entityContentStream = httpResponse.getEntity().getContent();\r\n      return IOUtils.toString(entityContentStream, Charset.forName(\"utf-8\"));\r\n   } catch (IOException ex) {\r\n      throw new IllegalStateException(ex);\r\n   } finally {\r\n      if (request != null) {\r\n         request.releaseConnection();\r\n      }\r\n   }\r\n}\r\n```","```\r\npublic class RequestBuilder {\r\n   private Map<String, Object> parameters = new HashMap<>();\r\n\r\n   public RequestBuilder add(String paramName, Object paramValue) {\r\n       this.parameters.put(paramName, paramValue);\r\n      return this;\r\n   }\r\n   public String build() {\r\n      URIBuilder uriBuilder = new URIBuilder();\r\n      for (Entry<String, Object> param : this.parameters.entrySet()) {\r\n         uriBuilder.addParameter(param.getKey(), param.getValue().toString());\r\n      }\r\n\r\n      return uriBuilder.toString();\r\n   }\r\n}\r\n```","```\r\nString params = new RequestBuilder().\r\n   add(\"order\", \"desc\").add(\"sort\", \"votes\").add(\"min\", min).add(\"site\", site).build();\r\nreturn \"https://api.stackexchange.com/2.1/questions\" + params;\r\n```","```\r\n<dependency>\r\n   <groupId>com.fasterxml.jackson.core</groupId>\r\n   <artifactId>jackson-databind</artifactId>\r\n   <version>2.3.3</version>\r\n   <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenRequestIsPerformed_thenSuccess() \r\n      throws ClientProtocolException, IOException {\r\n   HttpResponse response = questionsApi.questionsAsResponse(50, Site.serverfault);\r\n   assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n}\r\n@Test\r\npublic void whenRequestIsPerformed_thenOutputIsJson() \r\n      throws ClientProtocolException, IOException {\r\n   HttpResponse response = questionsApi.questionsAsResponse(50, Site.serverfault);\r\n   String contentType = httpResponse.getHeaders(HttpHeaders.CONTENT_TYPE)[0].getValue();\r\n   assertThat(contentType, containsString(\"application/json\"));\r\n}\r\n@Test\r\npublic void whenParsingOutputFromQuestionsApi_thenOutputContainsSomeQuestions() \r\n     throws ClientProtocolException, IOException {\r\n   String questionsAsJson = questionsApi.questions(50, Site.serverfault);\r\n\r\n   JsonNode rootNode = new ObjectMapper().readTree(questionsAsJson);\r\n   ArrayNode questionsArray = (ArrayNode) rootNode.get(\"items\");\r\n   assertThat(questionsArray.size(), greaterThan(20));\r\n}\r\n```","```\r\n<plugin>\r\n   <groupId>org.apache.maven.plugins</groupId>\r\n   <artifactId>maven-surefire-plugin</artifactId>\r\n   <version>2.17</version>\r\n   <configuration>\r\n      <excludes>\r\n         <exclude>**/*LiveTest.java</exclude>\r\n      </excludes>\r\n   </configuration>\r\n</plugin>\r\n```"]