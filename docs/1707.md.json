["```\r\n<dependency>\r\n    <groupId>io.reactivex</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>${rx.java.version}</version>\r\n</dependency>\r\n```","```\r\ncompile 'io.reactivex.rxjava:rxjava:x.y.z'\r\n```","```\r\nBlockingObservable<String> blockingObservable = observable.toBlocking();\r\n```","```\r\nObservable<String> observable = Observable.just(\"Hello\");\r\nobservable.subscribe(s -> result = s);\r\n\r\nassertTrue(result.equals(\"Hello\"));\r\n```","```\r\nString[] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\r\nObservable<String> observable = Observable.from(letters);\r\nobservable.subscribe(\r\n  i -> result += i,  //OnNext\r\n  Throwable::printStackTrace, //OnError\r\n  () -> result += \"_Completed\" //OnCompleted\r\n);\r\nassertTrue(result.equals(\"abcdefg_Completed\"));\r\n```","```\r\nObservable.from(letters)\r\n  .map(String::toUpperCase)\r\n  .subscribe(letter -> result += letter);\r\nassertTrue(result.equals(\"ABCDEFG\"));\r\n```","```\r\nObservable<String> getTitle() {\r\n    return Observable.from(titleList);\r\n}\r\nObservable.just(\"book1\", \"book2\")\r\n  .flatMap(s -> getTitle())\r\n  .subscribe(l -> result += l);\r\n\r\nassertTrue(result.equals(\"titletitle\"));\r\n```","```\r\nString[] letters = {\"a\", \"b\", \"c\"};\r\nObservable.from(letters)\r\n  .scan(new StringBuilder(), StringBuilder::append)\r\n  .subscribe(total -> result += total.toString());\r\nassertTrue(result.equals(\"aababc\"));\r\n```","```\r\nObservable.from(numbers)\r\n  .groupBy(i -> 0 == (i % 2) ? \"EVEN\" : \"ODD\")\r\n  .subscribe(group ->\r\n    group.subscribe((number) -> {\r\n        if (group.getKey().toString().equals(\"EVEN\")) {\r\n            EVEN[0] += number;\r\n        } else {\r\n            ODD[0] += number;\r\n        }\r\n    })\r\n  );\r\nassertTrue(EVEN[0].equals(\"0246810\"));\r\nassertTrue(ODD[0].equals(\"13579\"));\r\n```","```\r\nObservable.from(numbers)\r\n  .filter(i -> (i % 2 == 1))\r\n  .subscribe(i -> result += i);\r\n\r\nassertTrue(result.equals(\"13579\"));\r\n```","```\r\nObservable.empty()\r\n  .defaultIfEmpty(\"Observable is empty\")\r\n  .subscribe(s -> result += s);\r\n\r\nassertTrue(result.equals(\"Observable is empty\"));\r\n```","```\r\nObservable.from(letters)\r\n  .defaultIfEmpty(\"Observable is empty\")\r\n  .first()\r\n  .subscribe(s -> result += s);\r\n\r\nassertTrue(result.equals(\"a\"));\r\n```","```\r\nObservable.from(numbers)\r\n  .takeWhile(i -> i < 5)\r\n  .subscribe(s -> sum[0] += s);\r\n\r\nassertTrue(sum[0] == 10);\r\n```","```\r\nString[] result = {\"\"};\r\nConnectableObservable<Long> connectable\r\n  = Observable.interval(200, TimeUnit.MILLISECONDS).publish();\r\nconnectable.subscribe(i -> result[0] += i);\r\nassertFalse(result[0].equals(\"01\"));\r\n\r\nconnectable.connect();\r\nThread.sleep(500);\r\n\r\nassertTrue(result[0].equals(\"01\"));\r\n```","```\r\nString[] result = {\"\"};\r\nSingle<String> single = Observable.just(\"Hello\")\r\n  .toSingle()\r\n  .doOnSuccess(i -> result[0] += i)\r\n  .doOnError(error -> {\r\n      throw new RuntimeException(error.getMessage());\r\n  });\r\nsingle.subscribe();\r\n\r\nassertTrue(result[0].equals(\"Hello\"));\r\n```","```\r\nInteger subscriber1 = 0;\r\nInteger subscriber2 = 0;\r\nObserver<Integer> getFirstObserver() {\r\n    return new Observer<Integer>() {\r\n        @Override\r\n        public void onNext(Integer value) {\r\n           subscriber1 += value;\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable e) {\r\n            System.out.println(\"error\");\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            System.out.println(\"Subscriber1 completed\");\r\n        }\r\n    };\r\n}\r\n\r\nObserver<Integer> getSecondObserver() {\r\n    return new Observer<Integer>() {\r\n        @Override\r\n        public void onNext(Integer value) {\r\n            subscriber2 += value;\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable e) {\r\n            System.out.println(\"error\");\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            System.out.println(\"Subscriber2 completed\");\r\n        }\r\n    };\r\n}\r\n\r\nPublishSubject<Integer> subject = PublishSubject.create(); \r\nsubject.subscribe(getFirstObserver()); \r\nsubject.onNext(1); \r\nsubject.onNext(2); \r\nsubject.onNext(3); \r\nsubject.subscribe(getSecondObserver()); \r\nsubject.onNext(4); \r\nsubject.onCompleted();\r\n\r\nassertTrue(subscriber1 + subscriber2 == 14)\r\n```","```\r\nString[] result = {\"\"};\r\nObservable<Character> values = Observable.using(\r\n  () -> \"MyResource\",\r\n  r -> {\r\n      return Observable.create(o -> {\r\n          for (Character c : r.toCharArray()) {\r\n              o.onNext(c);\r\n          }\r\n          o.onCompleted();\r\n      });\r\n  },\r\n  r -> System.out.println(\"Disposed: \" + r)\r\n);\r\nvalues.subscribe(\r\n  v -> result[0] += v,\r\n  e -> result[0] += e\r\n);\r\nassertTrue(result[0].equals(\"MyResource\"));\r\n```"]