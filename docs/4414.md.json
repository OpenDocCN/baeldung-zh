["```\r\n<dependency>\r\n    <groupId>org.easymock</groupId>\r\n    <artifactId>easymock</artifactId>\r\n    <version>4.0.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic interface WeatherService {\r\n    void populateTemperature(Location location);\r\n}\r\n```","```\r\n@Mock\r\nprivate WeatherService mockWeatherService;\r\n```","```\r\nmockWeatherService.populateTemperature(EasyMock.anyObject(Location.class));\r\n```","```\r\nEasyMock.expectLastCall().andThrow(new ServiceUnavailableException());\r\n```","```\r\nEasyMock.expectLastCall()\r\n  .andAnswer(() -> {\r\n      Location passedLocation = (Location) EasyMock.getCurrentArguments()[0];\r\n      passedLocation.setMaximumTemparature(new BigDecimal(MAX_TEMP));\r\n      passedLocation.setMinimumTemperature(new BigDecimal(MAX_TEMP - 10));\r\n      return null;\r\n  });\r\n```","```\r\nEasyMock.replay(mockWeatherService);\r\n```"]