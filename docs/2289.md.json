["```\r\n<dependency> \r\n    <groupId>org.jooq</groupId> \r\n    <artifactId>jooq</artifactId> \r\n    <version>3.14.8</version> \r\n</dependency>\r\n```","```\r\nint count = dsl.fetchCount(DSL.selectFrom(AUTHOR));\r\nAssert.assertEquals(3, count); \r\n```","```\r\nint count = dsl.fetchCount(DSL.selectFrom(AUTHOR)\r\n  .where(AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\")));\r\nAssert.assertEquals(1, count);\r\n```","```\r\nint count = dsl.fetchCount(AUTHOR, AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\"));\r\nAssert.assertEquals(1, count); \r\n```","```\r\nCondition firstCond = AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\");\r\nCondition secondCond = AUTHOR.ID.notEqual(1);\r\nList<Condition> conditions = new ArrayList<>();\r\nconditions.add(firstCond);\r\nconditions.add(secondCond);\r\nint count = dsl.fetchCount(AUTHOR, conditions);\r\nAssert.assertEquals(1, count); \r\n```","```\r\nCondition firstCond = AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\");\r\nCondition secondCond = AUTHOR.ID.notEqual(1);\r\nint count = dsl.fetchCount(AUTHOR, firstCond, secondCond);\r\nAssert.assertEquals(1, count); \r\n```","```\r\nint count = dsl.fetchCount(AUTHOR, AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\").and(AUTHOR.ID.notEqual(1)));\r\nAssert.assertEquals(1, count);\r\n```","```\r\nint count = dsl.select(DSL.count()).from(AUTHOR)\r\n  .fetchOne(0, int.class);\r\nAssert.assertEquals(3, count); \r\n```","```\r\nint count = dsl.selectCount().from(AUTHOR)\r\n  .where(AUTHOR.FIRST_NAME.equalIgnoreCase(\"Bryan\"))\r\n  .fetchOne(0, int.class);\r\nAssert.assertEquals(1, count);\r\n```","```\r\nint count = dsl.select().from(AUTHOR).execute();\r\nAssert.assertEquals(3, count);\r\n```","```\r\nResult<Record2<String, Integer>> result = dsl.select(AUTHOR.FIRST_NAME, DSL.count())\r\n  .from(AUTHOR).groupBy(AUTHOR.FIRST_NAME).fetch();\r\nAssert.assertEquals(3, result.size());\r\nAssert.assertEquals(result.get(0).get(0), \"Bert\");\r\nAssert.assertEquals(result.get(0).get(1), 1);\r\n```"]