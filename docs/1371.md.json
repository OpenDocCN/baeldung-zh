["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-tomcat</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.vertx</groupId>\r\n    <artifactId>vertx-web</artifactId>\r\n    <version>3.4.1</version>\r\n</dependency>\r\n```","```\r\n@Override\r\npublic void start() throws Exception {\r\n    super.start();\r\n\r\n    Router router = Router.router(vertx);\r\n    router.get(\"/api/baeldung/articles\")\r\n      .handler(this::getAllArticlesHandler);\r\n\r\n    vertx.createHttpServer()\r\n      .requestHandler(router::accept)\r\n      .listen(config().getInteger(\"http.port\", 8080));\r\n}\r\n```","```\r\nprivate void getAllArticlesHandler(RoutingContext routingContext) {\r\n    vertx.eventBus().<String>send(ArticleRecipientVerticle.GET_ALL_ARTICLES, \"\", \r\n      result -> {\r\n        if (result.succeeded()) {\r\n            routingContext.response()\r\n              .putHeader(\"content-type\", \"application/json\")\r\n              .setStatusCode(200)\r\n              .end(result.result()\r\n              .body());\r\n        } else {\r\n            routingContext.response()\r\n              .setStatusCode(500)\r\n              .end();\r\n        }\r\n      });\r\n}\r\n```","```\r\n@Override\r\npublic void start() throws Exception {\r\n    super.start();\r\n    vertx.eventBus().<String>consumer(GET_ALL_ARTICLES)\r\n      .handler(getAllArticleService(articleService));\r\n} \r\n```","```\r\n@Autowired\r\nprivate ArticleService articleService; \r\n```","```\r\nprivate Handler<Message<String>> getAllArticleService(ArticleService service) {\r\n    return msg -> vertx.<String> executeBlocking(future -> {\r\n        try {\r\n            future.complete(\r\n            mapper.writeValueAsString(service.getAllArticle()));\r\n        } catch (JsonProcessingException e) {\r\n            future.fail(e);\r\n        }\r\n    }, result -> {\r\n        if (result.succeeded()) {\r\n            msg.reply(result.result());\r\n        } else {\r\n            msg.reply(result.cause().toString());\r\n        }\r\n    });\r\n}\r\n```","```\r\n@Service\r\npublic class ArticleService {\r\n\r\n    @Autowired\r\n    private ArticleRepository articleRepository;\r\n\r\n    public List<Article> getAllArticle() {\r\n        return articleRepository.findAll();\r\n    }\r\n}\r\n```","```\r\npublic class VertxSpringApplication {\r\n\r\n    @Autowired\r\n    private ServerVerticle serverVerticle;\r\n\r\n    @Autowired\r\n    private ArticleRecipientVerticle articleRecipientVerticle;\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(VertxSpringApplication.class, args);\r\n    }\r\n\r\n    @PostConstruct\r\n    public void deployVerticle() {\r\n        Vertx vertx = Vertx.vertx();\r\n        vertx.deployVerticle(serverVerticle);\r\n        vertx.deployVerticle(articleRecipientVerticle);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenReceivedArticles_thenSuccess() {\r\n    ResponseEntity<String> responseEntity = restTemplate\r\n      .getForEntity(\"http://localhost:8080/api/baeldung/articles\", String.class);\r\n\r\n    assertEquals(200, responseEntity.getStatusCodeValue());\r\n}\r\n```"]