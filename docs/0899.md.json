["```\r\n@Configuration\r\n@EnableWebMvc\r\npublic class WebConfig{\r\n   //\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration( \r\n  classes = {WebConfig.class, PersistenceConfig.class},\r\n  loader = AnnotationConfigContextLoader.class)\r\npublic class SpringContextIntegrationTest {\r\n\r\n   @Test\r\n   public void contextLoads(){\r\n      // When\r\n   }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\npublic class FooControllerAppIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void whenTestApp_thenEmptyResponse() throws Exception {\r\n        this.mockMvc.perform(get(\"/foos\")\r\n            .andExpect(status().isOk())\r\n            .andExpect(...);\r\n    }\r\n\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebMvcTest(FooController.class)\r\npublic class FooControllerWebLayerIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @MockBean\r\n    private IFooService service;\r\n\r\n    @Test()\r\n    public void whenTestMvcController_thenRetrieveExpectedResult() throws Exception {\r\n        // ...\r\n\r\n        this.mockMvc.perform(get(\"/foos\")\r\n            .andExpect(...);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/foos\")\r\nclass FooController {\r\n\r\n    @Autowired\r\n    private IFooService service;\r\n\r\n    @GetMapping\r\n    public List<Foo> findAll() {\r\n        return service.findAll();\r\n    }\r\n\r\n    @GetMapping(value = \"/{id}\")\r\n    public Foo findById(@PathVariable(\"id\") Long id) {\r\n        return RestPreconditions.checkFound(service.findById(id));\r\n    }\r\n\r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public Long create(@RequestBody Foo resource) {\r\n        Preconditions.checkNotNull(resource);\r\n        return service.create(resource);\r\n    }\r\n\r\n    @PutMapping(value = \"/{id}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void update(@PathVariable( \"id\" ) Long id, @RequestBody Foo resource) {\r\n        Preconditions.checkNotNull(resource);\r\n        RestPreconditions.checkNotNull(service.getById(resource.getId()));\r\n        service.update(resource);\r\n    }\r\n\r\n    @DeleteMapping(value = \"/{id}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void delete(@PathVariable(\"id\") Long id) {\r\n        service.deleteById(id);\r\n    }\r\n\r\n}\r\n```","```\r\npublic class RestPreconditions {\r\n    public static <T> T checkFound(T resource) {\r\n        if (resource == null) {\r\n            throw new MyResourceNotFoundException();\r\n        }\r\n        return resource;\r\n    }\r\n}\r\n```","```\r\n@ResponseStatus(HttpStatus.BAD_REQUEST)\r\npublic class BadRequestException extends RuntimeException {\r\n   //\r\n}\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic class ResourceNotFoundException extends RuntimeException {\r\n   //\r\n}\r\n```","```\r\n<dependencies>\r\n   <dependency>\r\n      <groupId>com.fasterxml.jackson.core</groupId>\r\n      <artifactId>jackson-databind</artifactId>\r\n      <version>2.9.8</version>\r\n   </dependency>\r\n   <dependency>\r\n      <groupId>javax.xml.bind</groupId>\r\n      <artifactId>jaxb-api</artifactId>\r\n      <version>2.3.1</version>\r\n      <scope>runtime</scope>\r\n   </dependency>\r\n</dependencies>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n```"]