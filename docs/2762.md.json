["```\r\n<dependency>\r\n    <groupId>io.astefanutti.metrics.aspectj</groupId>\r\n    <artifactId>metrics-aspectj</artifactId>\r\n    <version>1.2.0</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.astefanutti.metrics.aspectj</groupId>\r\n    <artifactId>metrics-aspectj-deps</artifactId>\r\n    <version>1.2.0</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>aspectj-maven-plugin</artifactId>\r\n    <version>1.8</version>\r\n    <configuration>\r\n        <complianceLevel>1.8</complianceLevel>\r\n        <source>1.8</source>\r\n        <target>1.8</target>\r\n        <aspectLibraries>\r\n            <aspectLibrary>\r\n                <groupId>io.astefanutti.metrics.aspectj</groupId>\r\n                <artifactId>metrics-aspectj</artifactId>\r\n            </aspectLibrary>\r\n        </aspectLibraries>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>compile</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\nimport com.codahale.metrics.annotation.Timed;\r\nimport io.astefanutti.metrics.aspectj.Metrics;\r\n\r\n@Metrics(registry = \"objectRunnerRegistryName\")\r\npublic class ObjectRunner {\r\n\r\n    @Timed(name = \"timerName\")\r\n    public void run() throws InterruptedException {\r\n        Thread.sleep(1000L);\r\n    }\r\n}\r\n```","```\r\npublic class ApplicationMain {\r\n    static final MetricRegistry registry = new MetricRegistry();\r\n\r\n    public static void main(String args[]) throws InterruptedException {\r\n        startReport();\r\n\r\n        ObjectRunner runner = new ObjectRunner();\r\n\r\n        for (int i = 0; i < 5; i++) {\r\n            runner.run();\r\n        }\r\n\r\n        Thread.sleep(3000L);\r\n    }\r\n\r\n    static void startReport() {\r\n        SharedMetricRegistries.add(\"objectRunnerRegistryName\", registry);\r\n\r\n        ConsoleReporter reporter = ConsoleReporter.forRegistry(registry)\r\n                .convertRatesTo(TimeUnit.SECONDS)\r\n                .convertDurationsTo(TimeUnit.MILLISECONDS)\r\n                .outputTo(new PrintStream(System.out))\r\n                .build();\r\n        reporter.start(3, TimeUnit.SECONDS);\r\n    }\r\n}\r\n```","```\r\n-- Timers ----------------------------------------------------------------------\r\nObjectRunner.timerName\r\n             count = 5\r\n         mean rate = 0.86 calls/second\r\n     1-minute rate = 0.80 calls/second\r\n     5-minute rate = 0.80 calls/second\r\n    15-minute rate = 0.80 calls/second\r\n               min = 1000.49 milliseconds\r\n               max = 1003.00 milliseconds\r\n              mean = 1001.03 milliseconds\r\n            stddev = 1.10 milliseconds\r\n            median = 1000.54 milliseconds\r\n              75% <= 1001.81 milliseconds\r\n              95% <= 1003.00 milliseconds\r\n              98% <= 1003.00 milliseconds\r\n              99% <= 1003.00 milliseconds\r\n            99.9% <= 1003.00 milliseconds\r\n```"]