["```\r\n<dependency>\r\n    <groupId>javax.cache</groupId>\r\n    <artifactId>cache-api</artifactId>\r\n    <version>1.1.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.hazelcast</groupId>\r\n    <artifactId>hazelcast</artifactId>\r\n    <version>5.2.0</version>\r\n</dependency>\r\n```","```\r\nCachingProvider cachingProvider = Caching.getCachingProvider();\r\nCacheManager cacheManager = cachingProvider.getCacheManager();\r\nMutableConfiguration<String, String> config\r\n  = new MutableConfiguration<>();\r\nCache<String, String> cache = cacheManager\r\n  .createCache(\"simpleCache\", config);\r\ncache.put(\"key1\", \"value1\");\r\ncache.put(\"key2\", \"value2\");\r\ncacheManager.close();\r\n```","```\r\njavax.cache.CacheException: No CachingProviders have been configured\r\n```","```\r\npublic class SimpleEntryProcessor\r\n  implements EntryProcessor<String, String, String>, Serializable {\r\n\r\n    public String process(MutableEntry<String, String> entry, Object... args)\r\n      throws EntryProcessorException {\r\n\r\n        if (entry.exists()) {\r\n            String current = entry.getValue();\r\n            entry.setValue(current + \" - modified\");\r\n            return current;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenModifyValue_thenCorrect() {\r\n    this.cache.invoke(\"key\", new SimpleEntryProcessor());\r\n\r\n    assertEquals(\"value - modified\", cache.get(\"key\"));\r\n}\r\n```","```\r\npublic class SimpleCacheEntryListener implements\r\n  CacheEntryCreatedListener<String, String>,\r\n  CacheEntryUpdatedListener<String, String>,\r\n  Serializable {\r\n\r\n    private boolean updated;\r\n    private boolean created;\r\n\r\n    // standard getters\r\n\r\n    public void onUpdated(\r\n      Iterable<CacheEntryEvent<? extends String,\r\n      ? extends String>> events) throws CacheEntryListenerException {\r\n        this.updated = true;\r\n    }\r\n\r\n    public void onCreated(\r\n      Iterable<CacheEntryEvent<? extends String,\r\n      ? extends String>> events) throws CacheEntryListenerException {\r\n        this.created = true;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenRunEvent_thenCorrect() throws InterruptedException {\r\n    this.listenerConfiguration\r\n      = new MutableCacheEntryListenerConfiguration<String, String>(\r\n        FactoryBuilder.factoryOf(this.listener), null, false, true);\r\n    this.cache.registerCacheEntryListener(this.listenerConfiguration);\r\n\r\n    assertEquals(false, this.listener.getCreated());\r\n\r\n    this.cache.put(\"key\", \"value\");\r\n\r\n    assertEquals(true, this.listener.getCreated());\r\n    assertEquals(false, this.listener.getUpdated());\r\n\r\n    this.cache.put(\"key\", \"newValue\");\r\n\r\n    assertEquals(true, this.listener.getUpdated());\r\n}\r\n```","```\r\npublic class SimpleCacheLoader\r\n  implements CacheLoader<Integer, String> {\r\n\r\n    public String load(Integer key) throws CacheLoaderException {\r\n        return \"fromCache\" + key;\r\n    }\r\n\r\n    public Map<Integer, String> loadAll(Iterable<? extends Integer> keys)\r\n      throws CacheLoaderException {\r\n        Map<Integer, String> data = new HashMap<>();\r\n        for (int key : keys) {\r\n            data.put(key, load(key));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n```","```\r\npublic class CacheLoaderIntegrationTest {\r\n\r\n    private Cache<Integer, String> cache;\r\n\r\n    @Before\r\n    public void setup() {\r\n        CachingProvider cachingProvider = Caching.getCachingProvider();\r\n        CacheManager cacheManager = cachingProvider.getCacheManager();\r\n        MutableConfiguration<Integer, String> config\r\n          = new MutableConfiguration<>()\r\n            .setReadThrough(true)\r\n            .setCacheLoaderFactory(new FactoryBuilder.SingletonFactory<>(\r\n              new SimpleCacheLoader()));\r\n        this.cache = cacheManager.createCache(\"SimpleCache\", config);\r\n    }\r\n\r\n    @Test\r\n    public void whenReadingFromStorage_thenCorrect() {\r\n        for (int i = 1; i < 4; i++) {\r\n            String value = cache.get(i);\r\n\r\n            assertEquals(\"fromCache\" + i, value);\r\n        }\r\n    }\r\n}\r\n```"]