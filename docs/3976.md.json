["```\r\npublic class NumberInfoClassifier extends ItemListenerSupport<NumberInfo, Integer>\r\n  implements ItemProcessor<NumberInfo, Integer> {\r\n\r\n    private StepExecution stepExecution;\r\n\r\n    @BeforeStep\r\n    public void beforeStep(StepExecution stepExecution) {\r\n        this.stepExecution = stepExecution;\r\n        this.stepExecution.setExitStatus(new ExitStatus(QUIET));\r\n    }\r\n\r\n    @Override\r\n    public Integer process(NumberInfo numberInfo) throws Exception {\r\n        return Integer.valueOf(numberInfo.getNumber());\r\n    }\r\n\r\n    @Override\r\n    public void afterProcess(NumberInfo item, Integer result) {\r\n        super.afterProcess(item, result);\r\n        if (item.isPositive()) {\r\n            stepExecution.setExitStatus(new ExitStatus(NOTIFY));\r\n        }\r\n    }\r\n}\r\n```","```\r\njobBuilderFactory.get(\"Number generator - second dataset\")\r\n    .start(dataProviderStep)\r\n    .on(\"NOTIFY\").to(notificationStep)\r\n    .end()\r\n    .build();\r\n```","```\r\njobBuilderFactory.get(\"Number generator - second dataset\")\r\n    .start(dataProviderStep)\r\n    .on(\"NOTIFY\").to(notificationStep)\r\n    .from(step).on(\"LOG_ERROR\").to(errorLoggingStep)\r\n    .end()\r\n    .build();\r\n```","```\r\nSecond Dataset Processor 11\r\nSecond Dataset Processor -2\r\nSecond Dataset Processor -3\r\n[Number generator - second dataset] contains interesting data!! \r\n```","```\r\nSecond Dataset Processor -1\r\nSecond Dataset Processor -2\r\nSecond Dataset Processor -3 \r\n```","```\r\npublic class NumberInfoClassifierWithDecider extends ItemListenerSupport<NumberInfo, Integer>\r\n  implements ItemProcessor<NumberInfo, Integer> {\r\n\r\n    @Override\r\n    public Integer process(NumberInfo numberInfo) throws Exception {\r\n        return Integer.valueOf(numberInfo.getNumber());\r\n    }\r\n} \r\n```","```\r\npublic class NumberInfoDecider implements JobExecutionDecider {\r\n\r\n    private boolean shouldNotify() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public FlowExecutionStatus decide(JobExecution jobExecution, StepExecution stepExecution) {\r\n        if (shouldNotify()) {\r\n            return new FlowExecutionStatus(NOTIFY);\r\n        } else {\r\n            return new FlowExecutionStatus(QUIET);\r\n        }\r\n    }\r\n} \r\n```","```\r\njobBuilderFactory.get(\"Number generator - third dataset\")\r\n    .start(dataProviderStep)\r\n    .next(new NumberInfoDecider()).on(\"NOTIFY\").to(notificationStep)\r\n    .end()\r\n    .build(); \r\n```"]