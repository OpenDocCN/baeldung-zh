["```\r\npublic interface NotificationSender {\r\n    String send(String message);\r\n}\r\n```","```\r\npublic class EmailNotification implements NotificationSender {\r\n    @Override\r\n    public String send(String message) {\r\n        return \"Email Notification: \" + message;\r\n    }\r\n}\r\n```","```\r\n@Bean(name = \"emailNotification\")\r\n@ConditionalOnProperty(prefix = \"notification\", name = \"service\")\r\npublic NotificationSender notificationSender() {\r\n    return new EmailNotification();\r\n}\r\n```","```\r\nnotification.service=email\r\n```","```\r\npublic class SmsNotification implements NotificationSender {\r\n    @Override\r\n    public String send(String message) {\r\n        return \"SMS Notification: \" + message;\r\n    }\r\n}\r\n```","```\r\n@Bean(name = \"smsNotification\")\r\n@ConditionalOnProperty(prefix = \"notification\", name = \"service\", havingValue = \"sms\")\r\npublic NotificationSender notificationSender2() {\r\n    return new SmsNotification();\r\n}\r\n```","```\r\n@Test\r\npublic void whenValueSetToEmail_thenCreateEmailNotification() {\r\n    this.contextRunner.withPropertyValues(\"notification.service=email\")\r\n        .withUserConfiguration(NotificationConfig.class)\r\n        .run(context -> {\r\n            assertThat(context).hasBean(\"emailNotification\");\r\n            NotificationSender notificationSender = context.getBean(EmailNotification.class);\r\n            assertThat(notificationSender.send(\"Hello From Baeldung!\")).isEqualTo(\"Email Notification: Hello From Baeldung!\");\r\n            assertThat(context).doesNotHaveBean(\"smsNotification\");\r\n        });\r\n}\r\n```"]