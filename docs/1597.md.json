["```\r\n@Document\r\npublic class Car {\r\n    private String name;\r\n\r\n    private String brand;\r\n\r\n    public Car(String brand) {\r\n        this.brand = brand;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic interface CarRepository extends MongoRepository<Car, String> {\r\n}\r\n```","```\r\n@Service\r\npublic class CountCarService {\r\n\r\n    @Autowired\r\n    private CarRepository repo;\r\n}\r\n```","```\r\npublic class CountCarServiceIntegrationTest {\r\n    @Autowired\r\n    private CountCarService service;\r\n\r\n    Car car1 = new Car(\"B-A\");\r\n\r\n    @Before\r\n    public void init() {\r\n        service.insertCar(car1);\r\n        service.insertCar(new Car(\"B-B\"));\r\n    }\r\n}\r\n```","```\r\npublic long getCountWithCrudRepository() {\r\n    return repo.count();\r\n}\r\n```","```\r\n@Test\r\npublic void givenAllDocs_whenCrudRepositoryCount_thenCountEqualsSize() {\r\n    List<Car> all = service.findCars();\r\n\r\n    long count = service.getCountWithCrudRepository();\r\n\r\n    assertEquals(count, all.size());\r\n}\r\n```","```\r\npublic long getCountWithExample(Car item) {\r\n    return repo.count(Example.of(item));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilteredDocs_whenExampleCount_thenCountEqualsSize() {\r\n    long all = service.findCars()\r\n      .stream()\r\n      .filter(car -> car.getBrand().equals(car1.getBrand()))\r\n      .count();\r\n\r\n    long count = service.getCountWithExample(car1);\r\n\r\n    assertEquals(count, all);\r\n}\r\n```","```\r\n@Query(value = \"{}\", count = true)\r\nLong countWithAnnotation();\r\n```","```\r\n@Test\r\npublic void givenAllDocs_whenQueryAnnotationCount_thenCountEqualsSize() {\r\n    List<Car> all = service.findCars();\r\n\r\n    long count = service.getCountWithQueryAnnotation();\r\n\r\n    assertEquals(count, all.size());\r\n}\r\n```","```\r\n@Query(value = \"{brand: ?0}\", count = true)\r\npublic long countBrand(String brand);\r\n```","```\r\nLong countByBrand(String brand);\r\n```","```\r\npublic long getCountBrandWithQueryMethod(String brand) {\r\n    return repo.countByBrand(brand);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilteredDocs_whenQueryMethodCountByBrand_thenCountEqualsSize() {\r\n    String filter = \"B-A\";\r\n    long all = service.findCars()\r\n      .stream()\r\n      .filter(car -> car.getBrand().equals(filter))\r\n      .count();\r\n\r\n    long count = service.getCountBrandWithQueryMethod(filter);\r\n\r\n    assertEquals(count, all);\r\n}\r\n```","```\r\n@Autowired\r\nprivate MongoTemplate mongo;\r\n```","```\r\npublic long getCountBrandWithCriteria(String brand) {\r\n    Query query = new Query();\r\n    query.addCriteria(Criteria.where(\"brand\")\r\n      .is(brand));\r\n    return mongo.count(query, Car.class);\r\n}\r\n```","```\r\npublic long getCountWithExampleCriteria(Car item) {\r\n    Query query = new Query();\r\n    query.addCriteria(Criteria.byExample(item));\r\n    return mongo.count(query, Car.class);\r\n}\r\n```"]