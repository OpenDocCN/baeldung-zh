["```\r\n<http create-session=\"ifRequired\">...</http>\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.sessionManagement()\r\n        .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\r\n}\r\n```","```\r\n<listener>\r\n    <listener-class>\r\n      org.springframework.security.web.session.HttpSessionEventPublisher\r\n    </listener-class>\r\n</listener>\r\n```","```\r\n@Bean\r\npublic HttpSessionEventPublisher httpSessionEventPublisher() {\r\n    return new HttpSessionEventPublisher();\r\n}\r\n```","```\r\n<http ...>\r\n    <session-management>\r\n        <concurrency-control max-sessions=\"2\" />\r\n    </session-management>\r\n</http>\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.sessionManagement().maximumSessions(2)\r\n}\r\n```","```\r\n<session-management>\r\n    <concurrency-control expired-url=\"/sessionExpired.html\" ... />\r\n</session-management>\r\n```","```\r\n<session-management invalid-session-url=\"/invalidSession.html\">\r\n    ...\r\n</session-management>\r\n```","```\r\nhttp.sessionManagement()\r\n  .expiredUrl(\"/sessionExpired.html\")\r\n  .invalidSessionUrl(\"/invalidSession.html\");\r\n```","```\r\nserver.servlet.session.timeout=15m\r\n```","```\r\n<session-config>\r\n     <tracking-mode>COOKIE</tracking-mode>\r\n</session-config>\r\n```","```\r\nservletContext.setSessionTrackingModes(EnumSet.of(SessionTrackingMode.COOKIE));\r\n```","```\r\n<session-management session-fixation-protection=\"migrateSession\"> ...\r\n```","```\r\nhttp.sessionManagement()\r\n  .sessionFixation().migrateSession()\r\n```","```\r\n<session-config>\r\n    <session-timeout>1</session-timeout>\r\n    <cookie-config>\r\n        <http-only>true</http-only>\r\n        <secure>true</secure>\r\n    </cookie-config>\r\n</session-config>\r\n```","```\r\npublic class MainWebAppInitializer implements WebApplicationInitializer {\r\n    @Override\r\n    public void onStartup(ServletContext sc) throws ServletException {\r\n        // ...\r\n        sc.getSessionCookieConfig().setHttpOnly(true);        \r\n        sc.getSessionCookieConfig().setSecure(true);        \r\n    }\r\n}\r\n```","```\r\nserver.servlet.session.cookie.http-only=true\r\nserver.servlet.session.cookie.secure=true\r\n```","```\r\npublic class SessionFilter implements Filter {\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, ServletResponse response, FilterChain chain)\r\n      throws IOException, ServletException {\r\n        HttpServletRequest req = (HttpServletRequest) request;\r\n        HttpServletResponse res = (HttpServletResponse) response;\r\n        Cookie[] allCookies = req.getCookies();\r\n        if (allCookies != null) {\r\n            Cookie session = \r\n              Arrays.stream(allCookies).filter(x -> x.getName().equals(\"JSESSIONID\"))\r\n                    .findFirst().orElse(null);\r\n\r\n            if (session != null) {\r\n                session.setHttpOnly(true);\r\n                session.setSecure(true);\r\n                res.addCookie(session);\r\n            }\r\n        }\r\n        chain.doFilter(req, res);\r\n    }\r\n}\r\n```","```\r\n@Component\r\n@Scope(\"session\")\r\npublic class Foo { .. }\r\n```","```\r\n<bean id=\"foo\" scope=\"session\"/>\r\n```","```\r\n@Autowired\r\nprivate Foo theFoo;\r\n```","```\r\n@RequestMapping(..)\r\npublic void fooMethod(HttpSession session) {\r\n    session.setAttribute(Constants.FOO, new Foo());\r\n    //...\r\n    Foo foo = (Foo) session.getAttribute(Constants.FOO);\r\n}\r\n```","```\r\nServletRequestAttributes attr = (ServletRequestAttributes) \r\n    RequestContextHolder.currentRequestAttributes();\r\nHttpSession session= attr.getRequest().getSession(true); // true == allow create\r\n```"]