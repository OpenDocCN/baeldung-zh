["```\r\nint[][] multiDimensionalArr = {{1, 2}, {3, 4, 5}, {6, 7, 8, 9}};\r\n```","```\r\nint[][] multiDimensionalArr = new int[3][];\r\n```","```\r\nmultiDimensionalArr[0] = new int[] {1, 2};\r\nmultiDimensionalArr[1] = new int[] {3, 4, 5};\r\nmultiDimensionalArr[2] = new int[] {6, 7, 8, 9};\r\n```","```\r\nmultiDimensionalArr[0] = new int[2];\r\nmultiDimensionalArr[1] = new int[3];\r\nmultiDimensionalArr[2] = new int[4];\r\n```","```\r\nvoid initialize2DArray(int[][] multiDimensionalArray) {\r\n    for (int[] array : multiDimensionalArray) {\r\n        Arrays.fill(array, 7);\r\n    }\r\n} \r\n```","```\r\nvoid initializeElements(int[][] multiDimensionalArr) {\r\n    Scanner sc = new Scanner(System.in);\r\n    for (int outer = 0; outer < multiDimensionalArr.length; outer++) {\r\n        for (int inner = 0; inner < multiDimensionalArr[outer].length; inner++) {\r\n            multiDimensionalArr[outer][inner] = sc.nextInt();\r\n        }\r\n    }\r\n}\r\n```","```\r\nvoid printElements(int[][] multiDimensionalArr) {\r\n    for (int index = 0; index < multiDimensionalArr.length; index++) {\r\n        System.out.println(Arrays.toString(multiDimensionalArr[index]));\r\n    }\r\n}\r\n```","```\r\n[1, 2] [3, 4, 5] [6, 7, 8, 9]\r\n```","```\r\nint[] findLengthOfElements(int[][] multiDimensionalArray) {\r\n    int[] arrayOfLengths = new int[multiDimensionalArray.length];\r\n    for (int i = 0; i < multiDimensionalArray.length; i++) {\r\n        arrayOfLengths[i] = multiDimensionalArray[i].length;\r\n    }\r\n    return arrayOfLengths;\r\n}\r\n```","```\r\nInteger[] findLengthOfArrays(int[][] multiDimensionalArray) {\r\n    return Arrays.stream(multiDimensionalArray)\r\n      .map(array -> array.length)\r\n      .toArray(Integer[]::new);\r\n}\r\n```","```\r\nint[][] copy2DArray(int[][] arrayOfArrays) {\r\n    int[][] copied2DArray = new int[arrayOfArrays.length][];\r\n    for (int i = 0; i < arrayOfArrays.length; i++) {\r\n        int[] array = arrayOfArrays[i];\r\n        copied2DArray[i] = Arrays.copyOf(array, array.length);\r\n    }\r\n    return copied2DArray;\r\n}\r\n```","```\r\nInteger[][] copy2DArray(Integer[][] arrayOfArrays) {\r\n    return Arrays.stream(arrayOfArrays)\r\n      .map(array -> Arrays.copyOf(array, array.length))\r\n      .toArray(Integer[][]::new);\r\n}\r\n```"]