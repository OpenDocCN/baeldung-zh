["```\r\n<dependency>\r\n    <groupId>com.lmax</groupId>\r\n    <artifactId>disruptor</artifactId>\r\n    <version>3.3.6</version>\r\n</dependency>\r\n```","```\r\npublic static class ValueEvent {\r\n    private int value;\r\n    public final static EventFactory EVENT_FACTORY \r\n      = () -> new ValueEvent();\r\n\r\n    // standard getters and setters\r\n} \r\n```","```\r\npublic class SingleEventPrintConsumer {\r\n    ...\r\n\r\n    public EventHandler<ValueEvent>[] getEventHandler() {\r\n        EventHandler<ValueEvent> eventHandler \r\n          = (event, sequence, endOfBatch) \r\n            -> print(event.getValue(), sequence);\r\n        return new EventHandler[] { eventHandler };\r\n    }\r\n\r\n    private void print(int id, long sequenceId) {\r\n        logger.info(\"Id is \" + id \r\n          + \" sequence id that was used is \" + sequenceId);\r\n    }\r\n}\r\n```","```\r\nThreadFactory threadFactory = DaemonThreadFactory.INSTANCE;\r\n\r\nWaitStrategy waitStrategy = new BusySpinWaitStrategy();\r\nDisruptor<ValueEvent> disruptor \r\n  = new Disruptor<>(\r\n    ValueEvent.EVENT_FACTORY, \r\n    16, \r\n    threadFactory, \r\n    ProducerType.SINGLE, \r\n    waitStrategy); \r\n```","```\r\ndisruptor.handleEventsWith(getEventHandler()); \r\n```","```\r\nRingBuffer<ValueEvent> ringBuffer = disruptor.start();\r\n```","```\r\nfor (int eventCount = 0; eventCount < 32; eventCount++) {\r\n    long sequenceId = ringBuffer.next();\r\n    ValueEvent valueEvent = ringBuffer.get(sequenceId);\r\n    valueEvent.setValue(eventCount);\r\n    ringBuffer.publish(sequenceId);\r\n} \r\n```"]