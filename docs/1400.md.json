["```\r\nPublisher<String> pub = Streams.publish(Arrays.asList(\"hello\", \"hello again\"));\r\nLoggingSubscriber<String> sub = new LoggingSubscriber<String>();\r\npub.subscribe(sub);\r\nsub.block(); \r\n```","```\r\nonSubscribe: sub=7311908\r\nonNext: sub=7311908, value=hello\r\nonNext: sub=7311908, value=hello again\r\nonComplete: sub=7311908 \r\n```","```\r\n@Test\r\npublic void whenYield_thenSuccess() {\r\n\r\n    Publisher<String> pub = Streams.yield((t) -> {\r\n        return t.getRequestNum() < 5 ? \"hello\" : null;\r\n    });\r\n\r\n    LoggingSubscriber<String> sub = new LoggingSubscriber<String>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n    assertEquals(5, sub.getReceived());\r\n} \r\n```","```\r\n@Test\r\npublic void whenPeriodic_thenSuccess() {\r\n    ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\r\n    Publisher<String> pub = Streams.periodically(executor, Duration.ofSeconds(1), (t) -> {\r\n        return t < 5 ? String.format(\"hello %d\",t): null; \r\n    });\r\n\r\n    LoggingSubscriber<String> sub = new LoggingSubscriber<String>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n    assertEquals(5, sub.getReceived());\r\n} \r\n```","```\r\n@Test\r\npublic void whenMap_thenSuccess() throws Exception {\r\n    TransformablePublisher<String> pub = Streams.yield( t -> {\r\n        return t.getRequestNum() < 5 ? t.getRequestNum() : null;\r\n      })\r\n      .map(v -> String.format(\"item %d\", v));\r\n\r\n    ExecResult<List<String>> result = ExecHarness.yieldSingle((c) -> pub.toList());\r\n    assertTrue(\"should succeed\", result.isSuccess());\r\n    assertEquals(\"should have 5 items\",5,result.getValue().size());\r\n} \r\n```","```\r\nprivate class NonCompliantPublisher implements Publisher<Integer> {\r\n\r\n    @Override\r\n    public void subscribe(Subscriber<? super Integer> subscriber) {\r\n        log.info(\"subscribe\");\r\n        subscriber.onSubscribe(new NonCompliantSubscription(subscriber));\r\n    }\r\n\r\n    private class NonCompliantSubscription implements Subscription {\r\n        private Subscriber<? super Integer> subscriber;\r\n        private int recurseLevel = 0;\r\n\r\n        public NonCompliantSubscription(Subscriber<? super Integer> subscriber) {\r\n            this.subscriber = subscriber;\r\n        }\r\n\r\n        @Override\r\n        public void request(long n) {\r\n            log.info(\"request: n={}\", n);\r\n            if ( recurseLevel > 0 ) {\r\n               return;\r\n            }\r\n            recurseLevel++;\r\n            for (int i = 0 ; i < (n + 5) ; i ++ ) {\r\n                subscriber.onNext(i);\r\n            }\r\n            subscriber.onComplete();\r\n        }\r\n\r\n        @Override\r\n        public void cancel() {\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenNonCompliantPublisherWithoutBuffer_thenSuccess() throws Exception {\r\n    TransformablePublisher<Integer> pub = Streams.transformable(new NonCompliantPublisher())\r\n      .wiretap(new LoggingAction(\"\"))\r\n      .take(1);\r\n\r\n    LoggingSubscriber<Integer> sub = new LoggingSubscriber<>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n} \r\n```","```\r\nRatpackStreamsUnitTest - : event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\nLoggingSubscriber - onNext: sub=583189145, value=0\r\nRatpackStreamsUnitTest - : event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nNonCompliantPublisher - request: n=1\r\nRatpackStreamsUnitTest - : event=StreamEvent[CancelEvent{subscriptionId=0}]\r\nLoggingSubscriber - onComplete: sub=583189145\r\nRatpackStreamsUnitTest - : event=StreamEvent[DataEvent{subscriptionId=0, data=1}]\r\n... more expurious data event\r\nRatpackStreamsUnitTest - : event=StreamEvent[CompletionEvent{subscriptionId=0}]\r\nLoggingSubscriber - onComplete: sub=583189145\r\n```","```\r\n@Test\r\npublic void whenNonCompliantPublisherWithBuffer_thenSuccess() throws Exception {\r\n    TransformablePublisher<Integer> pub = Streams.transformable(new NonCompliantPublisher())\r\n      .wiretap(new LoggingAction(\"before buffer\"))\r\n      .buffer()\r\n      .wiretap(new LoggingAction(\"after buffer\"))\r\n      .take(1);\r\n\r\n    LoggingSubscriber<Integer> sub = new LoggingSubscriber<>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n} \r\n```","```\r\nLoggingSubscriber - onSubscribe: sub=675852144\r\nRatpackStreamsUnitTest - after buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nNonCompliantPublisher - subscribe\r\nRatpackStreamsUnitTest - before buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nNonCompliantPublisher - request: n=1\r\nRatpackStreamsUnitTest - before buffer: event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\n... more data events\r\nRatpackStreamsUnitTest - before buffer: event=StreamEvent[CompletionEvent{subscriptionId=0}]\r\nRatpackStreamsUnitTest - after buffer: event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\nLoggingSubscriber - onNext: sub=675852144, value=0\r\nRatpackStreamsUnitTest - after buffer: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nRatpackStreamsUnitTest - after buffer: event=StreamEvent[CancelEvent{subscriptionId=0}]\r\nRatpackStreamsUnitTest - before buffer: event=StreamEvent[CancelEvent{subscriptionId=0}]\r\nLoggingSubscriber - onComplete: sub=67585214\r\n```","```\r\n@Test\r\npublic void whenCompliantPublisherWithoutBatch_thenSuccess() throws Exception {\r\n    TransformablePublisher<Integer> pub = Streams.transformable(new CompliantPublisher(10))\r\n      .wiretap(new LoggingAction(\"\"));\r\n\r\n    LoggingSubscriber<Integer> sub = new LoggingSubscriber<>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n} \r\n```","```\r\nCompliantPublisher - subscribe\r\nLoggingSubscriber - onSubscribe: sub=-779393331\r\nRatpackStreamsUnitTest - : event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nCompliantPublisher - request: requested=1, available=10\r\nRatpackStreamsUnitTest - : event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\nLoggingSubscriber - onNext: sub=-779393331, value=0\r\n... more data events omitted\r\nCompliantPublisher - request: requested=1, available=1\r\nRatpackStreamsUnitTest - : event=StreamEvent[CompletionEvent{subscriptionId=0}]\r\nLoggingSubscriber - onComplete: sub=-779393331 \r\n```","```\r\n@Test\r\npublic void whenCompliantPublisherWithBatch_thenSuccess() throws Exception {\r\n\r\n    TransformablePublisher<Integer> pub = Streams.transformable(new CompliantPublisher(10))\r\n      .wiretap(new LoggingAction(\"before batch\"))\r\n      .batch(5, Action.noop())\r\n      .wiretap(new LoggingAction(\"after batch\"));\r\n\r\n    LoggingSubscriber<Integer> sub = new LoggingSubscriber<>();\r\n    pub.subscribe(sub);\r\n    sub.block();\r\n} \r\n```","```\r\nLoggingSubscriber - onSubscribe: sub=-1936924690\r\nRatpackStreamsUnitTest - after batch: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nCompliantPublisher - subscribe\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[RequestEvent{requestAmount=5, subscriptionId=0}]\r\nCompliantPublisher - request: requested=5, available=10\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\n... first batch data events omitted\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[RequestEvent{requestAmount=5, subscriptionId=0}]\r\nCompliantPublisher - request: requested=5, available=6\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[DataEvent{subscriptionId=0, data=5}]\r\n... second batch data events omitted\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[RequestEvent{requestAmount=5, subscriptionId=0}]\r\nCompliantPublisher - request: requested=5, available=1\r\nRatpackStreamsUnitTest - before batch: event=StreamEvent[CompletionEvent{subscriptionId=0}]\r\nRatpackStreamsUnitTest - after batch: event=StreamEvent[DataEvent{subscriptionId=0, data=0}]\r\nLoggingSubscriber - onNext: sub=-1936924690, value=0\r\nRatpackStreamsUnitTest - after batch: event=StreamEvent[RequestEvent{requestAmount=1, subscriptionId=0}]\r\nRatpackStreamsUnitTest - after batch: event=StreamEvent[DataEvent{subscriptionId=0, data=1}]\r\n... downstream data events omitted\r\nLoggingSubscriber - onComplete: sub=-1936924690 \r\n```","```\r\n@Bean\r\npublic Action<Chain> uploadFile() {\r\n\r\n    return chain -> chain.post(\"upload\", ctx -> {\r\n        TransformablePublisher<? extends ByteBuf> pub = ctx.getRequest().getBodyStream();\r\n        pub.subscribe(new Subscriber<ByteBuf>() {\r\n            private Subscription sub;\r\n            @Override\r\n            public void onSubscribe(Subscription sub) {\r\n                this.sub = sub;\r\n                sub.request(1);\r\n            }\r\n\r\n            @Override\r\n            public void onNext(ByteBuf t) {\r\n                try {\r\n                    ... do something useful with received data\r\n                    sub.request(1);\r\n                }\r\n                finally {\r\n                    // DO NOT FORGET to RELEASE !\r\n                    t.release();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable t) {\r\n                ctx.getResponse().status(500);\r\n            }\r\n\r\n            @Override\r\n            public void onComplete() {\r\n                ctx.getResponse().status(202);\r\n            }\r\n        }); \r\n    });\r\n} \r\n```","```\r\n@Bean\r\npublic Action<Chain> download() {\r\n    return chain -> chain.get(\"download\", ctx -> {\r\n        ctx.getResponse().sendStream(new RandomBytesPublisher(1024,512));\r\n    });\r\n} \r\n```","```\r\n$ curl -v --output data.bin http://localhost:5050/download\r\n... request messages omitted\r\n< HTTP/1.1 200 OK\r\n< transfer-encoding: chunked\r\n... download progress messages omitted \r\n```","```\r\n@Bean\r\npublic Action<Chain> downloadChunks() {\r\n    return chain -> chain.get(\"downloadChunks\", ctx -> {\r\n        ctx.render(ResponseChunks.bufferChunks(\"application/octetstream\",\r\n          new RandomBytesPublisher(1024,512)));\r\n    });\r\n} \r\n```","```\r\n$ curl -v --output data.bin http://localhost:5050/downloadChunks\r\n... request messages omitted\r\n< HTTP/1.1 200 OK\r\n< transfer-encoding: chunked\r\n< content-type: application/octetstream\r\n<\r\n... progress messages omitted\r\n```","```\r\n@Bean\r\npublic Action<Chain> quotes() {\r\n    ServerSentEvents sse = ServerSentEvents.serverSentEvents(quotesService.newTicker(), (evt) -> {\r\n        evt\r\n          .id(Long.toString(idSeq.incrementAndGet()))\r\n          .event(\"quote\")\r\n          .data( q -> q.toString());\r\n    });\r\n\r\n    return chain -> chain.get(\"quotes\", ctx -> ctx.render(sse));\r\n} \r\n```","```\r\n$ curl -v http://localhost:5050/quotes\r\n... request messages omitted\r\n< HTTP/1.1 200 OK\r\n< content-type: text/event-stream;charset=UTF-8\r\n< transfer-encoding: chunked\r\n... other response headers omitted\r\nid: 10\r\nevent: quote\r\ndata: Quote [ts=2021-10-11T01:20:52.081Z, symbol=ORCL, value=53.0]\r\n\r\n... more quotes\r\n```","```\r\n@Bean\r\npublic Action<Chain> quotesWS() {\r\n    Publisher<String> pub = Streams.transformable(quotesService.newTicker())\r\n      .map(Quote::toString);\r\n    return chain -> chain.get(\"quotes-ws\", ctx -> WebSockets.websocketBroadcast(ctx, pub));\r\n} \r\n```","```\r\n$ curl --include -v \\\r\n     --no-buffer \\\r\n     --header \"Connection: Upgrade\" \\\r\n     --header \"Upgrade: websocket\" \\\r\n     --header \"Sec-WebSocket-Key: SGVsbG8sIHdvcmxkIQ==\" \\\r\n     --header \"Sec-WebSocket-Version: 13\" \\\r\n     http://localhost:5050/quotes-ws\r\n... request messages omitted\r\n< HTTP/1.1 101 Switching Protocols\r\nHTTP/1.1 101 Switching Protocols\r\n< upgrade: websocket\r\nupgrade: websocket\r\n< connection: upgrade\r\nconnection: upgrade\r\n< sec-websocket-accept: qGEgH3En71di5rrssAZTmtRTyFk=\r\nsec-websocket-accept: qGEgH3En71di5rrssAZTmtRTyFk=\r\n\r\n<\r\n<Quote [ts=2021-10-11T01:39:42.915Z, symbol=ORCL, value=63.0]\r\n... more quotes omitted \r\n```"]