["```\r\nAC = y2 - y1\r\n```","```\r\nBC = x2 - x1\r\n```","```\r\ndistance * distance = (y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1)\r\n```","```\r\ndistance = sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1))\r\n```","```\r\npublic double calculateDistanceBetweenPoints(\r\n  double x1, \r\n  double y1, \r\n  double x2, \r\n  double y2) {       \r\n    return Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\r\n}\r\n```","```\r\n3 * 3 + 4 * 4 = 5 * 5\r\n```","```\r\n@Test\r\npublic void givenTwoPoints_whenCalculateDistanceByFormula_thenCorrect() {\r\n    double x1 = 3;\r\n    double y1 = 4;\r\n    double x2 = 7;\r\n    double y2 = 1;\r\n\r\n    double distance = service.calculateDistanceBetweenPoints(x1, y1, x2, y2);\r\n\r\n    assertEquals(distance, 5, 0.001);\r\n}\r\n```","```\r\npublic double calculateDistanceBetweenPointsWithHypot(\r\n    double x1, \r\n    double y1, \r\n    double x2, \r\n    double y2) {\r\n\r\n    double ac = Math.abs(y2 - y1);\r\n    double cb = Math.abs(x2 - x1);\r\n\r\n    return Math.hypot(ac, cb);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoPoints_whenCalculateDistanceWithHypot_thenCorrect() {\r\n    double x1 = 3;\r\n    double y1 = 4;\r\n    double x2 = 7;\r\n    double y2 = 1;\r\n\r\n    double distance = service.calculateDistanceBetweenPointsWithHypot(x1, y1, x2, y2);\r\n\r\n    assertEquals(distance, 5, 0.001);\r\n}\r\n```","```\r\npublic double calculateDistanceBetweenPointsWithPoint2D( \r\n    double x1, \r\n    double y1, \r\n    double x2, \r\n    double y2) {\r\n\r\n    return Point2D.distance(x1, y1, x2, y2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoPoints_whenCalculateDistanceWithPoint2D_thenCorrect() {\r\n\r\n    double x1 = 3;\r\n    double y1 = 4;\r\n    double x2 = 7;\r\n    double y2 = 1;\r\n\r\n    double distance = service.calculateDistanceBetweenPointsWithPoint2D(x1, y1, x2, y2);\r\n\r\n    assertEquals(distance, 5, 0.001);\r\n}\r\n```"]