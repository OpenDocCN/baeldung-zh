["```\r\nList<String> names = Lists.newArrayList(\"John\", \"Adam\", \"Jane\");\r\n```","```\r\n@Test\r\npublic void whenReverseList_thenReversed() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Adam\", \"Jane\");\r\n\r\n    List<String> reversed = Lists.reverse(names);\r\n    assertThat(reversed, contains(\"Jane\", \"Adam\", \"John\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateCharacterListFromString_thenCreated() {\r\n    List<Character> chars = Lists.charactersOf(\"John\");\r\n\r\n    assertEquals(4, chars.size());\r\n    assertThat(chars, contains('J', 'o', 'h', 'n'));\r\n}\r\n```","```\r\n@Test\r\npublic void whenPartitionList_thenPartitioned(){\r\n    List<String> names = Lists.newArrayList(\"John\",\"Jane\",\"Adam\",\"Tom\",\"Viki\",\"Tyler\");\r\n\r\n    List<List<String>> result = Lists.partition(names, 2);\r\n\r\n    assertEquals(3, result.size());\r\n    assertThat(result.get(0), contains(\"John\", \"Jane\"));\r\n    assertThat(result.get(1), contains(\"Adam\", \"Tom\"));\r\n    assertThat(result.get(2), contains(\"Viki\", \"Tyler\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveDuplicatesFromList_thenRemoved() {\r\n    List<Character> chars = Lists.newArrayList('h','e','l','l','o');\r\n    assertEquals(5, chars.size());\r\n\r\n    List<Character> result = ImmutableSet.copyOf(chars).asList();\r\n    assertThat(result, contains('h', 'e', 'l', 'o'));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveNullFromList_thenRemoved() {\r\n    List<String> names = Lists.newArrayList(\"John\", null, \"Adam\", null, \"Jane\");\r\n    Iterables.removeIf(names, Predicates.isNull());\r\n\r\n    assertEquals(3, names.size());\r\n    assertThat(names, contains(\"John\", \"Adam\", \"Jane\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreateImmutableList_thenCreated() {\r\n    List<String> names = Lists.newArrayList(\"John\", \"Adam\", \"Jane\");\r\n\r\n    names.add(\"Tom\");\r\n    assertEquals(4, names.size());\r\n\r\n    ImmutableList<String> immutable = ImmutableList.copyOf(names);\r\n    assertThat(immutable, contains(\"John\", \"Adam\", \"Jane\", \"Tom\"));\r\n}\r\n```"]