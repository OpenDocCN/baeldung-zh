["```\r\npublic interface HttpClient {\r\n    Response call() throws ClientException;\r\n} \r\n```","```\r\npublic class Response {\r\n    public final String id;\r\n\r\n    public Response(String id) {\r\n        this.id = id;\r\n    }\r\n}\r\n```","```\r\npublic Response getResponse() {\r\n    try {\r\n        return httpClient.call();\r\n    } catch (ClientException e) {\r\n        return null;\r\n    }\r\n}\r\n```","```\r\npublic class VavrTry {\r\n    private HttpClient httpClient;\r\n\r\n    public Try<Response> getResponse() {\r\n        return Try.of(httpClient::call);\r\n    }\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\n@Test\r\npublic void givenHttpClient_whenMakeACall_shouldReturnSuccess() {\r\n    // given\r\n    Integer defaultChainedResult = 1;\r\n    String id = \"a\";\r\n    HttpClient httpClient = () -> new Response(id);\r\n\r\n    // when\r\n    Try<Response> response = new VavrTry(httpClient).getResponse();\r\n    Integer chainedResult = response\r\n      .map(this::actionThatTakesResponse)\r\n      .getOrElse(defaultChainedResult);\r\n    Stream<String> stream = response.toStream().map(it -> it.id);\r\n\r\n    // then\r\n    assertTrue(!stream.isEmpty());\r\n    assertTrue(response.isSuccess());\r\n    response.onSuccess(r -> assertEquals(id, r.id));\r\n    response.andThen(r -> assertEquals(id, r.id)); \r\n\r\n    assertNotEquals(defaultChainedResult, chainedResult);\r\n}\r\n```","```\r\npublic int actionThatTakesResponse(Response response) {\r\n    return response.id.hashCode();\r\n}\r\n```","```\r\npublic int actionThatTakesTryResponse(Try<Response> response, int defaultTransformation){\r\n    return response.transform(responses -> response.map(it -> it.id.hashCode())\r\n      .getOrElse(defaultTransformation));\r\n}\r\n```","```\r\n@Test\r\npublic void givenHttpClientFailure_whenMakeACall_shouldReturnFailure() {\r\n    // given\r\n    Integer defaultChainedResult = 1;\r\n    HttpClient httpClient = () -> {\r\n        throw new ClientException(\"problem\");\r\n    };\r\n\r\n    // when\r\n    Try<Response> response = new VavrTry(httpClient).getResponse();\r\n    Integer chainedResult = response\r\n        .map(this::actionThatTakesResponse)\r\n        .getOrElse(defaultChainedResult);\r\n     Option<Response> optionalResponse = response.toOption();\r\n\r\n    // then\r\n    assertTrue(optionalResponse.isEmpty());\r\n    assertTrue(response.isFailure());\r\n    response.onFailure(ex -> assertTrue(ex instanceof ClientException));\r\n    assertEquals(defaultChainedResult, chainedResult);\r\n}\r\n```","```\r\n@Test\r\npublic void givenHttpClientThatFailure_whenMakeACall_shouldReturnFailureAndNotRecover() {\r\n    // given\r\n    Response defaultResponse = new Response(\"b\");\r\n    HttpClient httpClient = () -> {\r\n        throw new RuntimeException(\"critical problem\");\r\n    };\r\n\r\n    // when\r\n    Try<Response> recovered = new VavrTry(httpClient).getResponse()\r\n      .recover(r -> Match(r).of(\r\n          Case(instanceOf(ClientException.class), defaultResponse)\r\n      ));\r\n\r\n    // then\r\n    assertTrue(recovered.isFailure());\r\n```","```\r\nrecovered.getOrElseThrow(throwable -> {\r\n    throw new RuntimeException(throwable);\r\n});\r\n```","```\r\n@Test\r\npublic void givenHttpClientThatFailure_whenMakeACall_shouldReturnFailureAndRecover() {\r\n    // given\r\n    Response defaultResponse = new Response(\"b\");\r\n    HttpClient httpClient = () -> {\r\n        throw new ClientException(\"non critical problem\");\r\n    };\r\n\r\n    // when\r\n    Try<Response> recovered = new VavrTry(httpClient).getResponse()\r\n      .recover(r -> Match(r).of(\r\n        Case(instanceOf(ClientException.class), defaultResponse),\r\n        Case(instanceOf(IllegalArgumentException.class), defaultResponse)\r\n       ));\r\n\r\n    // then\r\n    assertTrue(recovered.isSuccess());\r\n}\r\n```"]