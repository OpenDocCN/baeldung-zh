["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/users\")\r\npublic class UserController {\r\n\r\n    @GetMapping(\"me\")\r\n    public UserDto getMe() {\r\n        return new UserDto(1L, \"janedoe\", \"Doe\", \"Jane\", \"[[email protected]](/web/20220810180302/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    }\r\n}\r\n```","```\r\ndocker run -p 8081:8080 -e KEYCLOAK_ADMIN=admin -e KEYCLOAK_ADMIN_PASSWORD=admin quay.io/keycloak/keycloak:17.0.1 start-dev\r\n```","```\r\n<dependency>\r\n    <groupId>org.keycloak</groupId>\r\n    <artifactId>keycloak-spring-boot-starter</artifactId>\r\n</dependency>\r\n```","```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.keycloak.bom</groupId>\r\n            <artifactId>keycloak-adapter-bom</artifactId>\r\n            <version>${keycloak-adapter.version}</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n@Configuration\r\npublic class KeycloakConfiguration {\r\n\r\n    @Bean\r\n    public KeycloakSpringBootConfigResolver keycloakConfigResolver() {\r\n        return new KeycloakSpringBootConfigResolver();\r\n    }\r\n}\r\n```","```\r\n@KeycloakConfiguration\r\n@ConditionalOnProperty(name = \"keycloak.enabled\", havingValue = \"true\", matchIfMissing = true)\r\npublic class KeycloakSecurityConfiguration extends KeycloakWebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth) {\r\n        auth.authenticationProvider(keycloakAuthenticationProvider());\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {\r\n        return new NullAuthenticatedSessionStrategy();\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        super.configure(http);\r\n\r\n        http.csrf()\r\n            .disable()\r\n            .cors()\r\n            .and()\r\n            .authorizeRequests()\r\n            .anyRequest()\r\n            .authenticated();\r\n    }\r\n}\r\n```","```\r\nkeycloak.enabled=true\r\nkeycloak.realm=baeldung\r\nkeycloak.resource=baeldung-api\r\nkeycloak.auth-server-url=http://localhost:8081 \r\n```","```\r\n\"users\": [\r\n  {\r\n    \"username\": \"janedoe\",\r\n    \"email\": \"j[[email protected]](/web/20220810180302/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"firstName\": \"Jane\",\r\n    \"lastName\": \"Doe\",\r\n    \"enabled\": true,\r\n    \"credentials\": [\r\n      {\r\n        \"type\": \"password\",\r\n        \"value\": \"s3cr3t\"\r\n      }\r\n    ],\r\n    \"clientRoles\": {\r\n      \"account\": [\r\n        \"view-profile\",\r\n        \"manage-account\"\r\n      ]\r\n    }\r\n  }\r\n]\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.dasniko</groupId>\r\n    <artifactId>testcontainers-keycloak</artifactId>\r\n    <version>2.1.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>testcontainers</artifactId>\r\n    <version>1.16.3</version>\r\n</dependency>\r\n```","```\r\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic abstract class KeycloakTestContainers {\r\n\r\n    static final KeycloakContainer keycloak = new KeycloakContainer().withRealmImportFile(\"keycloak/realm-export.json\");\r\n}\r\n```","```\r\nstatic class Initializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n\r\n    public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\r\n        keycloak.start();\r\n        TestPropertyValues.of(\"keycloak.auth-server-url=\" + keycloak.getAuthServerUrl())\r\n          .applyTo(configurableApplicationContext.getEnvironment());\r\n    }\r\n} \r\n```","```\r\n@ContextConfiguration(initializers = { IntegrationTest.Initializer.class })\r\n```","```\r\nURI authorizationURI = new URIBuilder(keycloak.getAuthServerUrl() + \"/realms/baeldung/protocol/openid-connect/token\").build();\r\nWebClient webclient = WebClient.builder().build();\r\nMultiValueMap<String, String> formData = new LinkedMultiValueMap<>();\r\nformData.put(\"grant_type\", Collections.singletonList(\"password\"));\r\nformData.put(\"client_id\", Collections.singletonList(\"baeldung-api\"));\r\nformData.put(\"username\", Collections.singletonList(\"[[email protected]](/web/20220810180302/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\nformData.put(\"password\", Collections.singletonList(\"s3cr3t\"));\r\n\r\nString result = webclient.post()\r\n  .uri(authorizationURI)\r\n  .contentType(MediaType.APPLICATION_FORM_URLENCODED)\r\n  .body(BodyInserters.fromFormData(formData))\r\n  .retrieve()\r\n  .bodyToMono(String.class)\r\n  .block();\r\n```","```\r\nJacksonJsonParser jsonParser = new JacksonJsonParser();\r\nreturn \"Bearer \" + jsonParser.parseMap(result)\r\n  .get(\"access_token\")\r\n  .toString();\r\n```","```\r\n<dependency>\r\n    <groupId>io.rest-assured</groupId>\r\n    <artifactId>rest-assured</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\nvoid givenAuthenticatedUser_whenGetMe_shouldReturnMyInfo() {\r\n\r\n    given().header(\"Authorization\", getJaneDoeBearer())\r\n      .when()\r\n      .get(\"/users/me\")\r\n      .then()\r\n      .body(\"username\", equalTo(\"janedoe\"))\r\n      .body(\"lastname\", equalTo(\"Doe\"))\r\n      .body(\"firstname\", equalTo(\"Jane\"))\r\n      .body(\"email\", equalTo(\"[[email protected]](/web/20220810180302/https://www.baeldung.com/cdn-cgi/l/email-protection)\"));\r\n}\r\n```"]