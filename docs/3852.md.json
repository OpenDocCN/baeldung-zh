["```\r\n<dependency>\r\n    <groupId>com.googlecode.jmapper-framework</groupId>\r\n    <artifactId>jmapper-core</artifactId>\r\n    <version>1.6.0.1</version>\r\n</dependency>\r\n```","```\r\npublic class User {\r\n    private long id;    \r\n    private String email;\r\n    private LocalDate birthDate;\r\n}\r\n```","```\r\npublic class UserDto {\r\n    private long id;\r\n    private String username;\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseApi_thenConverted(){\r\n    JMapperAPI jmapperApi = new JMapperAPI() \r\n      .add(mappedClass(UserDto.class)\r\n        .add(attribute(\"id\").value(\"id\"))\r\n        .add(attribute(\"username\").value(\"email\")));\r\n\r\n    JMapper<UserDto, User> userMapper = new JMapper<>\r\n      (UserDto.class, User.class, jmapperApi);\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getUsername());\r\n}\r\n```","```\r\npublic class UserDto {  \r\n    @JMap\r\n    private long id;\r\n\r\n    @JMap(\"email\")\r\n    private String username;\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseAnnotation_thenConverted(){\r\n    JMapper<UserDto, User> userMapper = new JMapper<>(UserDto.class, User.class);\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getUsername());        \r\n}\r\n```","```\r\n<jmapper>\r\n  <class name=\"com.baeldung.jmapper.UserDto\">\r\n    <attribute name=\"id\">\r\n      <value name=\"id\"/>\r\n    </attribute>\r\n    <attribute name=\"username\">\r\n      <value name=\"email\"/>\r\n    </attribute>\r\n  </class>\r\n</jmapper>\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseXml_thenConverted(){\r\n    JMapper<UserDto, User> userMapper = new JMapper<>\r\n      (UserDto.class, User.class,\"user_jmapper.xml\");\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getUsername());            \r\n}\r\n```","```\r\npublic class UserDto1 {  \r\n    private long id;\r\n    private String email;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseApiGlobal_thenConverted() {\r\n    JMapperAPI jmapperApi = new JMapperAPI()\r\n      .add(mappedClass(UserDto.class).add(global())) ;\r\n    JMapper<UserDto1, User> userMapper1 = new JMapper<>\r\n      (UserDto1.class, User.class,jmapperApi);\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto1 result = userMapper1.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getEmail());\r\n}\r\n```","```\r\n@JGlobalMap\r\npublic class UserDto1 {  \r\n    private long id;\r\n    private String email;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseGlobalMapAnnotation_thenConverted(){\r\n    JMapper<UserDto1, User> userMapper= new JMapper<>(\r\n      UserDto1.class, User.class);\r\n    User user = new User(\r\n      1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto1 result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getEmail());        \r\n}\r\n```","```\r\n<jmapper>\r\n  <class name=\"com.baeldung.jmapper.UserDto1\">\r\n    <global/>\r\n  </class>\r\n</jmapper>\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseXmlGlobal_thenConverted(){\r\n    JMapper<UserDto1, User> userMapper = new JMapper<>\r\n      (UserDto1.class, User.class,\"user_jmapper1.xml\");\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto1 result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getEmail());            \r\n}\r\n```","```\r\npublic class UserDto {\r\n    @JMap\r\n    private long id;\r\n\r\n    @JMap(\"email\")\r\n    private String username;\r\n\r\n    @JMap(\"birthDate\")\r\n    private int age;\r\n\r\n    @JMapConversion(from={\"birthDate\"}, to={\"age\"})\r\n    public int conversion(LocalDate birthDate){\r\n        return Period.between(birthDate, LocalDate.now())\r\n          .getYears();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseAnnotationExplicitConversion_thenConverted(){\r\n    JMapper<UserDto, User> userMapper = new JMapper<>(\r\n      UserDto.class, User.class);\r\n    User user = new User(\r\n      1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\", LocalDate.of(1980,8,20));\r\n    UserDto result = userMapper.getDestination(user);\r\n\r\n    assertEquals(user.getId(), result.getId());\r\n    assertEquals(user.getEmail(), result.getUsername());     \r\n    assertTrue(result.getAge() > 0);\r\n}\r\n```","```\r\npublic class User {\r\n    private long id;    \r\n    private String email;\r\n}\r\n```","```\r\npublic class UserDto1 {  \r\n    private long id;\r\n    private String username;\r\n}\r\n```","```\r\npublic class UserDto2 {\r\n    private long id;\r\n    private String email;\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseApi_thenConverted(){\r\n    JMapperAPI jmapperApi = new JMapperAPI()\r\n      .add(mappedClass(User.class)\r\n      .add(attribute(\"id\")\r\n        .value(\"id\")\r\n        .targetClasses(UserDto1.class,UserDto2.class))\r\n      .add(attribute(\"email\")\r\n        .targetAttributes(\"username\",\"email\")\r\n        .targetClasses(UserDto1.class,UserDto2.class)));\r\n\r\n    RelationalJMapper<User> relationalMapper = new RelationalJMapper<>\r\n      (User.class,jmapperApi);\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    UserDto1 result1 = relationalMapper\r\n      .oneToMany(UserDto1.class, user);\r\n    UserDto2 result2 = relationalMapper\r\n      .oneToMany(UserDto2.class, user);\r\n\r\n    assertEquals(user.getId(), result1.getId());\r\n    assertEquals(user.getEmail(), result1.getUsername());\r\n    assertEquals(user.getId(), result2.getId());\r\n    assertEquals(user.getEmail(), result2.getEmail());            \r\n}\r\n```","```\r\npublic class User {\r\n    @JMap(classes = {UserDto1.class, UserDto2.class})\r\n    private long id;    \r\n\r\n    @JMap(\r\n      attributes = {\"username\", \"email\"}, \r\n      classes = {UserDto1.class, UserDto2.class})\r\n    private String email;\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseAnnotation_thenConverted(){\r\n    RelationalJMapper<User> relationalMapper\r\n      = new RelationalJMapper<>(User.class);\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    UserDto1 result1 = relationalMapper\r\n      .oneToMany(UserDto1.class, user);\r\n    UserDto2 result2= relationalMapper\r\n      .oneToMany(UserDto2.class, user);\r\n\r\n    assertEquals(user.getId(), result1.getId());\r\n    assertEquals(user.getEmail(), result1.getUsername());  \r\n    assertEquals(user.getId(), result2.getId());\r\n    assertEquals(user.getEmail(), result2.getEmail());          \r\n}\r\n```","```\r\n<jmapper>\r\n  <class name=\"com.baeldung.jmapper.relational.User\">\r\n    <attribute name=\"id\">\r\n      <value name=\"id\"/>\r\n      <classes>\r\n        <class name=\"com.baeldung.jmapper.relational.UserDto1\"/>\r\n        <class name=\"com.baeldung.jmapper.relational.UserDto2\"/>\r\n      </classes>\r\n    </attribute>\r\n    <attribute name=\"email\">\r\n      <attributes>\r\n        <attribute name=\"username\"/>\r\n        <attribute name=\"email\"/>\r\n      </attributes>\r\n      <classes>\r\n        <class name=\"com.baeldung.jmapper.relational.UserDto1\"/>\r\n        <class name=\"com.baeldung.jmapper.relational.UserDto2\"/>\r\n      </classes>      \r\n    </attribute>\r\n  </class>\r\n</jmapper>\r\n```","```\r\n@Test\r\npublic void givenUser_whenUseXml_thenConverted(){\r\n    RelationalJMapper<User> relationalMapper\r\n     = new RelationalJMapper<>(User.class,\"user_jmapper2.xml\");\r\n    User user = new User(1L,\"[[email protected]](/web/20221127215441/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    UserDto1 result1 = relationalMapper\r\n      .oneToMany(UserDto1.class, user);\r\n    UserDto2 result2 = relationalMapper\r\n      .oneToMany(UserDto2.class, user);\r\n\r\n    assertEquals(user.getId(), result1.getId());\r\n    assertEquals(user.getEmail(), result1.getUsername());\r\n    assertEquals(user.getId(), result2.getId());\r\n    assertEquals(user.getEmail(), result2.getEmail());         \r\n}\r\n```"]