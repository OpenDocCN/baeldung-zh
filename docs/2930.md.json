["```\r\n<dependency>\r\n    <groupId>org.apache.curator</groupId>\r\n    <artifactId>curator-x-async</artifactId>\r\n    <version>4.0.1</version>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.apache.zookeeper</groupId>\r\n            <artifactId>zookeeper</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.zookeeper</groupId>\r\n    <artifactId>zookeeper</artifactId>\r\n    <version>3.4.11</version>\r\n</dependency>\r\n```","```\r\nint sleepMsBetweenRetries = 100;\r\nint maxRetries = 3;\r\nRetryPolicy retryPolicy = new RetryNTimes(\r\n  maxRetries, sleepMsBetweenRetries);\r\n\r\nCuratorFramework client = CuratorFrameworkFactory\r\n  .newClient(\"127.0.0.1:2181\", retryPolicy);\r\nclient.start();\r\n\r\nassertThat(client.checkExists().forPath(\"/\")).isNotNull();\r\n```","```\r\nint sleepMsBetweenRetries = 100;\r\nint maxRetries = 3;\r\nRetryPolicy retryPolicy \r\n  = new RetryNTimes(maxRetries, sleepMsBetweenRetries);\r\n\r\nCuratorFramework client = CuratorFrameworkFactory\r\n  .newClient(\"127.0.0.1:2181\", retryPolicy);\r\n\r\nclient.start();\r\nAsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\r\n\r\nAtomicBoolean exists = new AtomicBoolean(false);\r\n\r\nasync.checkExists()\r\n  .forPath(\"/\")\r\n  .thenAcceptAsync(s -> exists.set(s != null));\r\n\r\nawait().until(() -> assertThat(exists.get()).isTrue());\r\n```","```\r\nCuratorFramework client = newClient();\r\nclient.start();\r\nAsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\r\nString key = getKey();\r\nString expected = \"my_value\";\r\n\r\nclient.create().forPath(key);\r\n\r\nasync.setData()\r\n  .forPath(key, expected.getBytes());\r\n\r\nAtomicBoolean isEquals = new AtomicBoolean();\r\nasync.getData()\r\n  .forPath(key)\r\n  .thenAccept(data -> isEquals.set(new String(data).equals(expected)));\r\n\r\nawait().until(() -> assertThat(isEquals.get()).isTrue());\r\n```","```\r\nCuratorFramework client = newClient()\r\nclient.start();\r\nAsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\r\nString key = getKey();\r\nString expected = \"my_value\";\r\n\r\nasync.create().forPath(key);\r\n\r\nList<String> changes = new ArrayList<>();\r\n\r\nasync.watched()\r\n  .getData()\r\n  .forPath(key)\r\n  .event()\r\n  .thenAccept(watchedEvent -> {\r\n    try {\r\n        changes.add(new String(client.getData()\r\n          .forPath(watchedEvent.getPath())));\r\n    } catch (Exception e) {\r\n        // fail ...\r\n    }});\r\n\r\n// Set data value for our key\r\nasync.setData()\r\n  .forPath(key, expected.getBytes());\r\n\r\nawait()\r\n  .until(() -> assertThat(changes.size()).isEqualTo(1));\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.0</version>\r\n</dependency>\r\n```","```\r\npublic class HostConfig {\r\n    private String hostname;\r\n    private int port;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nModelSpec<HostConfig> mySpec = ModelSpec.builder(\r\n  ZPath.parseWithIds(\"/config/dev\"), \r\n  JacksonModelSerializer.build(HostConfig.class))\r\n  .build();\r\n\r\nCuratorFramework client = newClient();\r\nclient.start();\r\n\r\nAsyncCuratorFramework async \r\n  = AsyncCuratorFramework.wrap(client);\r\nModeledFramework<HostConfig> modeledClient \r\n  = ModeledFramework.wrap(async, mySpec);\r\n\r\nmodeledClient.set(new HostConfig(\"host-name\", 8080));\r\n\r\nmodeledClient.read()\r\n  .whenComplete((value, e) -> {\r\n     if (e != null) {\r\n          fail(\"Cannot read host config\", e);\r\n     } else {\r\n          assertThat(value).isNotNull();\r\n          assertThat(value.getHostname()).isEqualTo(\"host-name\");\r\n          assertThat(value.getPort()).isEqualTo(8080);\r\n     }\r\n   });\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.curator</groupId>\r\n    <artifactId>curator-recipes</artifactId>\r\n    <version>4.0.1</version>\r\n</dependency>\r\n```","```\r\nCuratorFramework client = newClient();\r\nclient.start();\r\nLeaderSelector leaderSelector = new LeaderSelector(client, \r\n  \"/mutex/select/leader/for/job/A\", \r\n  new LeaderSelectorListener() {\r\n      @Override\r\n      public void stateChanged(\r\n        CuratorFramework client, \r\n        ConnectionState newState) {\r\n      }\r\n\r\n      @Override\r\n      public void takeLeadership(\r\n        CuratorFramework client) throws Exception {\r\n      }\r\n  });\r\n\r\n// join the members group\r\nleaderSelector.start();\r\n\r\n// wait until the job A is done among all members\r\nleaderSelector.close();\r\n```","```\r\nCuratorFramework client = newClient();\r\nclient.start();\r\nInterProcessSemaphoreMutex sharedLock = new InterProcessSemaphoreMutex(\r\n  client, \"/mutex/process/A\");\r\n\r\nsharedLock.acquire();\r\n\r\n// do process A\r\n\r\nsharedLock.release();\r\n```","```\r\nCuratorFramework client = newClient();\r\nclient.start();\r\n\r\nSharedCount counter = new SharedCount(client, \"/counters/A\", 0);\r\ncounter.start();\r\n\r\ncounter.setCount(counter.getCount() + 1);\r\n\r\nassertThat(counter.getCount()).isEqualTo(1);\r\n```"]