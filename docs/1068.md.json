["```\r\n<properties>\r\n    <spring.version>5.3.13</spring.version>\r\n    <spring-security.version>5.6.0</spring-security.version>\r\n</properties>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>${spring.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-web</artifactId>\r\n    <version>${spring.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>${spring.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-web</artifactId>\r\n    <version>${spring-security.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n    <version>${spring-security.version}</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-websocket</artifactId>\r\n    <version>${spring.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-messaging</artifactId>\r\n    <version>${spring.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-messaging</artifactId>\r\n    <version>${spring-security.version}</version>\r\n</dependency> \r\n```","```\r\n@Configuration\r\npublic class SocketSecurityConfig \r\n  extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n      //...\r\n}\r\n```","```\r\n@Override \r\nprotected void configureInbound(\r\n  MessageSecurityMetadataSourceRegistry messages) { \r\n    messages\r\n      .simpDestMatchers(\"/secured/**\").authenticated()\r\n      .anyMessage().authenticated(); \r\n}\r\n```","```\r\n.simpTypeMatchers(CONNECT, UNSUBSCRIBE, DISCONNECT).permitAll()\r\n```","```\r\n.simpDestMatchers(\"/app/**\").hasRole(\"ADMIN\")\r\n```","```\r\n.simpSubscribeDestMatchers(\"/topic/**\").authenticated()\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\n@EnableWebSecurity\r\n@ComponentScan(\"com.baeldung.springsecuredsockets\")\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter { \r\n    @Override \r\n    protected void configure(HttpSecurity http) throws Exception { \r\n        http\r\n          .authorizeRequests()\r\n          .antMatchers(\"/\", \"/index\", \"/authenticate\").permitAll()\r\n          .antMatchers(\r\n            \"/secured/**/**\",\r\n            \"/secured/success\", \r\n            \"/secured/socket\",\r\n            \"/secured/success\").authenticated()\r\n          .anyRequest().authenticated()\r\n          .and()\r\n          .formLogin()\r\n          .loginPage(\"/login\").permitAll()\r\n          .usernameParameter(\"username\")\r\n          .passwordParameter(\"password\")\r\n          .loginProcessingUrl(\"/authenticate\")\r\n          //...\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SocketSecurityConfig \r\n  extends AbstractSecurityWebSocketMessageBrokerConfigurer {\r\n    @Override\r\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\r\n        messages\r\n          .simpDestMatchers(\"/secured/**\").authenticated()\r\n          .anyMessage().authenticated();\r\n    }   \r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSocketMessageBroker\r\npublic class SocketBrokerConfig \r\n  implements WebSocketMessageBrokerConfigurer {\r\n\r\n    @Override\r\n    public void configureMessageBroker(MessageBrokerRegistry config) {\r\n        config.enableSimpleBroker(\"/secured/history\");\r\n        config.setApplicationDestinationPrefixes(\"/spring-security-mvc-socket\");\r\n    }\r\n\r\n    @Override\r\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\r\n        registry.addEndpoint(\"/secured/chat\")\r\n          .withSockJS();\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class SocketController {\r\n\r\n    @MessageMapping(\"/secured/chat\")\r\n    @SendTo(\"/secured/history\")\r\n    public OutputMessage send(Message msg) throws Exception {\r\n        return new OutputMessage(\r\n           msg.getFrom(),\r\n           msg.getText(), \r\n           new SimpleDateFormat(\"HH:mm\").format(new Date())); \r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class CsrfTokenController {\r\n    @GetMapping(\"/csrf\")\r\n    public @ResponseBody String getCsrfToken(HttpServletRequest request) {\r\n        CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class.getName());\r\n        return csrf.getToken();\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected boolean sameOriginDisabled() {\r\n    return true;\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) \r\n  throws Exception {\r\n    http\r\n      .csrf()\r\n        //...\r\n        .and()\r\n      .headers()\r\n        .frameOptions().sameOrigin()\r\n      .and()\r\n        .authorizeRequests();\r\n}\r\n```","```\r\nvar endpoint = '/ws/?access_token=' + auth.access_token;\r\nvar socket = new SockJS(endpoint);\r\nvar stompClient = Stomp.over(socket);\r\n```"]