["```\r\nkeycloak:\r\n  server:\r\n    contextPath: /auth\r\n    adminUser:\r\n      username: bael-admin\r\n      password: pass\r\n    realmImportFile: feign-realm.json \r\n```","```\r\npublic class Payment {\r\n\r\n    private String id;\r\n    private double amount;\r\n\r\n   // standard getters and setters\r\n} \r\n```","```\r\n@RestController\r\npublic class PaymentController {\r\n\r\n    @GetMapping(\"/payments\")\r\n    public List<Payment> getPayments() {\r\n        List<Payment> payments = new ArrayList<>();\r\n        for(int i = 1; i < 6; i++){\r\n            Payment payment = new Payment();\r\n            payment.setId(String.valueOf(i));\r\n            payment.setAmount(2);\r\n            payments.add(payment);\r\n        }\r\n        return payments;\r\n    }\r\n\r\n}\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        jwt:\r\n          issuer-uri: http://localhost:8083/auth/realms/master\r\n```","```\r\ncurl --location --request POST 'http://localhost:8083/auth/realms/master/protocol/openid-connect/token' \\\r\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\r\n  --data-urlencode 'client_id=payment-app' \\\r\n  --data-urlencode 'client_secret=863e9de4-33d4-4471-b35e-f8d2434385bb' \\\r\n  --data-urlencode 'grant_type=client_credentials'\r\n```","```\r\ncurl --location --request GET 'http://localhost:8081/resource-server-jwt/payments' \\\r\n  --header 'Authorization: Bearer Access_Token' \r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-openfeign</artifactId>\r\n    <version>3.1.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-dependencies</artifactId>\r\n    <version>2021.0.0</version>\r\n    <type>pom</type>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableFeignClients\r\npublic class ExampleApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ExampleApplication.class, args);\r\n    }\r\n} \r\n```","```\r\n@FeignClient(\r\n  name = \"payment-client\", \r\n  url = \"http://localhost:8081/resource-server-jwt\", \r\n  configuration = OAuthFeignConfig.class)\r\npublic interface PaymentClient {\r\n\r\n    @RequestMapping(value = \"/payments\", method = RequestMethod.GET)\r\n    List<Payment> getPayments();\r\n} \r\n```","```\r\n@RestController\r\npublic class PaymentController {\r\n\r\n    private final PaymentClient paymentClient;\r\n\r\n    public PaymentController(PaymentClient paymentClient) {\r\n        this.paymentClient = paymentClient;\r\n    }\r\n\r\n    @GetMapping(\"/payments\")\r\n    public List<Payment> getPayments() {\r\n        List<Payment> payments = paymentClient.getPayments();\r\n        return payments;\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-client</artifactId>\r\n    <version>5.6.0</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class OAuthFeignConfig {\r\n\r\n    public static final String CLIENT_REGISTRATION_ID = \"keycloak\";\r\n\r\n    private final OAuth2AuthorizedClientService oAuth2AuthorizedClientService;\r\n    private final ClientRegistrationRepository clientRegistrationRepository;\r\n\r\n    public OAuthFeignConfig(OAuth2AuthorizedClientService oAuth2AuthorizedClientService,\r\n      ClientRegistrationRepository clientRegistrationRepository) {\r\n        this.oAuth2AuthorizedClientService = oAuth2AuthorizedClientService;\r\n        this.clientRegistrationRepository = clientRegistrationRepository;\r\n    }\r\n\r\n    @Bean\r\n    public RequestInterceptor requestInterceptor() {\r\n        ClientRegistration clientRegistration = clientRegistrationRepository.findByRegistrationId(CLIENT_REGISTRATION_ID);\r\n        OAuthClientCredentialsFeignManager clientCredentialsFeignManager =\r\n          new OAuthClientCredentialsFeignManager(authorizedClientManager(), clientRegistration);\r\n        return requestTemplate -> {\r\n            requestTemplate.header(\"Authorization\", \"Bearer \" + clientCredentialsFeignManager.getAccessToken());\r\n        };\r\n    }\r\n}\r\n```","```\r\nspring.security.oauth2.client.registration.keycloak.authorization-grant-type=client_credentials\r\nspring.security.oauth2.client.registration.keycloak.client-id=payment-app\r\nspring.security.oauth2.client.registration.keycloak.client-secret=863e9de4-33d4-4471-b35e-f8d2434385bb\r\nspring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8083/auth/realms/master/protocol/openid-connect/token\r\n```","```\r\npublic String getAccessToken() {\r\n    try {\r\n        OAuth2AuthorizeRequest oAuth2AuthorizeRequest = OAuth2AuthorizeRequest\r\n          .withClientRegistrationId(clientRegistration.getRegistrationId())\r\n          .principal(principal)\r\n          .build();\r\n        OAuth2AuthorizedClient client = manager.authorize(oAuth2AuthorizeRequest);\r\n        if (isNull(client)) {\r\n            throw new IllegalStateException(\"client credentials flow on \" + clientRegistration.getRegistrationId() + \" failed, client is null\");\r\n        }\r\n        return client.getAccessToken().getTokenValue();\r\n    } catch (Exception exp) {\r\n        logger.error(\"client credentials error \" + exp.getMessage());\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class PaymentClientUnitTest {\r\n\r\n    @Autowired\r\n    private PaymentClient paymentClient;\r\n\r\n    @Test\r\n    public void whenGetPayment_thenListPayments() {\r\n        List<Payment> payments = paymentClient.getPayments();\r\n        assertFalse(payments.isEmpty());\r\n    }\r\n} \r\n```"]