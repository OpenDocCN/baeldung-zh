["```\r\n<dependency>\r\n    <groupId>org.easymock</groupId>\r\n    <artifactId>easymock</artifactId>\r\n    <version>3.5.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class BaeldungReader {\r\n\r\n    private ArticleReader articleReader;\r\n    private IArticleWriter articleWriter;\r\n\r\n    // constructors\r\n\r\n    public BaeldungArticle readNext(){\r\n        return articleReader.next();\r\n    }\r\n\r\n    public List<BaeldungArticle> readTopic(String topic){\r\n        return articleReader.ofTopic(topic);\r\n    }\r\n\r\n    public String write(String title, String content){\r\n        return articleWriter.write(title, content);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadNext_thenNextArticleRead(){\r\n    ArticleReader mockArticleReader = mock(ArticleReader.class);\r\n    BaeldungReader baeldungReader\r\n      = new BaeldungReader(mockArticleReader);\r\n\r\n    expect(mockArticleReader.next()).andReturn(null);\r\n    replay(mockArticleReader);\r\n\r\n    baeldungReader.readNext();\r\n\r\n    verify(mockArticleReader);\r\n}\r\n```","```\r\nmockArticleReader.next();\r\nreplay(mockArticleReader);\r\n```","```\r\nmockArticleReader.someVoidMethod();\r\nexpectLastCall();\r\nreplay(mockArticleReader);\r\n```","```\r\n@Test\r\npublic void whenReadNextAndSkimTopics_thenAllAllowed(){\r\n    ArticleReader mockArticleReader\r\n      = strictMock(ArticleReader.class);\r\n    BaeldungReade baeldungReader\r\n      = new BaeldungReader(mockArticleReader);\r\n\r\n    expect(mockArticleReader.next()).andReturn(null);\r\n    expect(mockArticleReader.ofTopic(\"easymock\")).andReturn(null);\r\n    replay(mockArticleReader);\r\n\r\n    baeldungReader.readNext();\r\n    baeldungReader.readTopic(\"easymock\");\r\n\r\n    verify(mockArticleReader);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReadNextAndOthers_thenAllowed(){\r\n    ArticleReader mockArticleReader = niceMock(ArticleReader.class);\r\n    BaeldungReade baeldungReader = new BaeldungReader(mockArticleReader);\r\n\r\n    expect(mockArticleReader.next()).andReturn(null);\r\n    replay(mockArticleReader);\r\n\r\n    baeldungReader.readNext();\r\n    baeldungReader.readTopic(\"easymock\");\r\n\r\n    verify(mockArticleReader);\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteMaliciousContent_thenArgumentIllegal() {\r\n    // mocking and initialization\r\n\r\n    expect(mockArticleWriter\r\n      .write(\"easymock\",\"<body onload=alert('baeldung')>\"))\r\n      .andThrow(new IllegalArgumentException());\r\n    replay(mockArticleWriter);\r\n\r\n    // write malicious content and capture exception as expectedException\r\n\r\n    verify(mockArticleWriter);\r\n    assertEquals(\r\n      IllegalArgumentException.class, \r\n      expectedException.getClass());\r\n}\r\n```","```\r\n@RunWith(EasyMockRunner.class)\r\npublic class BaeldungReaderAnnotatedTest {\r\n\r\n    @Mock\r\n    ArticleReader mockArticleReader;\r\n\r\n    @TestSubject\r\n    BaeldungReader baeldungReader = new BaeldungReader();\r\n\r\n    @Test\r\n    public void whenReadNext_thenNextArticleRead() {\r\n        expect(mockArticleReader.next()).andReturn(null);\r\n        replay(mockArticleReader);\r\n        baeldungReader.readNext();\r\n        verify(mockArticleReader);\r\n    }\r\n}\r\n```","```\r\npublic class BaeldungReaderAnnotatedWithRuleTest {\r\n\r\n    @Rule\r\n    public EasyMockRule mockRule = new EasyMockRule(this);\r\n\r\n    //...\r\n\r\n    @Test\r\n    public void whenReadNext_thenNextArticleRead(){\r\n        expect(mockArticleReader.next()).andReturn(null);\r\n        replay(mockArticleReader);\r\n        baeldungReader.readNext();\r\n        verify(mockArticleReader);\r\n    }\r\n\r\n}\r\n```","```\r\nreplay(A);\r\nreplay(B);\r\nreplay(C);\r\n//...\r\nverify(A);\r\nverify(B);\r\nverify(C);\r\n```","```\r\n//...\r\npublic class BaeldungReaderMockSupportTest extends EasyMockSupport{\r\n\r\n    //...\r\n\r\n    @Test\r\n    public void whenReadAndWriteSequencially_thenWorks(){\r\n        expect(mockArticleReader.next()).andReturn(null)\r\n          .times(2).andThrow(new NoSuchElementException());\r\n        expect(mockArticleWriter.write(\"title\", \"content\"))\r\n          .andReturn(\"BAEL-201801\");\r\n        replayAll();\r\n\r\n        // execute read and write operations consecutively\r\n\r\n        verifyAll();\r\n\r\n        assertEquals(\r\n          NoSuchElementException.class, \r\n          expectedException.getClass());\r\n        assertEquals(\"BAEL-201801\", articleId);\r\n    }\r\n\r\n}\r\n```","```\r\nEasyMockSupport easyMockSupport = new EasyMockSupport();\r\n\r\n@Test\r\npublic void whenReadAndWriteSequencially_thenWorks(){\r\n    ArticleReader mockArticleReader = easyMockSupport\r\n      .createMock(ArticleReader.class);\r\n    IArticleWriter mockArticleWriter = easyMockSupport\r\n      .createMock(IArticleWriter.class);\r\n    BaeldungReader baeldungReader = new BaeldungReader(\r\n      mockArticleReader, mockArticleWriter);\r\n\r\n    expect(mockArticleReader.next()).andReturn(null);\r\n    expect(mockArticleWriter.write(\"title\", \"content\"))\r\n      .andReturn(\"\");\r\n    easyMockSupport.replayAll();\r\n\r\n    baeldungReader.readNext();\r\n    baeldungReader.write(\"title\", \"content\");\r\n\r\n    easyMockSupport.verifyAll();\r\n}\r\n```"]