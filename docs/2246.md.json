["```\r\npublic static Optional<String> findMiddleElementLinkedList(\r\n  LinkedList<String> linkedList) {\r\n    if (linkedList == null || linkedList.isEmpty()) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    return Optional.of(linkedList.get(\r\n      (linkedList.size() - 1) / 2));\r\n}\r\n```","```\r\nNode<E> node(int index) {\r\n    if (index < (size >> 1)) {\r\n        Node<E> x = first;\r\n        for (int i = 0; i < index; i++) {\r\n            x = x.next;\r\n        }\r\n        return x;\r\n    } else {\r\n        Node<E> x = last;\r\n        for (int i = size - 1; i > index; i--) {\r\n            x = x.prev;\r\n        }\r\n        return x;\r\n    }\r\n}\r\n```","```\r\npublic static class Node {\r\n\r\n    private Node next;\r\n    private String data;\r\n\r\n    // constructors/getters/setters\r\n\r\n    public boolean hasNext() {\r\n        return next != null;\r\n    }\r\n\r\n    public void setNext(Node next) {\r\n        this.next = next;\r\n    }\r\n\r\n    public String toString() {\r\n        return this.data;\r\n    }\r\n}\r\n```","```\r\nprivate static Node createNodesList(int n) {\r\n    Node head = new Node(\"1\");\r\n    Node current = head;\r\n\r\n    for (int i = 2; i <= n; i++) {\r\n        Node newNode = new Node(String.valueOf(i));\r\n        current.setNext(newNode);\r\n        current = newNode;\r\n    }\r\n\r\n    return head;\r\n}\r\n```","```\r\npublic static Optional<String> findMiddleElementFromHead(Node head) {\r\n    if (head == null) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    // calculate the size of the list\r\n    Node current = head;\r\n    int size = 1;\r\n    while (current.hasNext()) {\r\n        current = current.next();\r\n        size++;\r\n    }\r\n\r\n    // iterate till the middle element\r\n    current = head;\r\n    for (int i = 0; i < (size - 1) / 2; i++) {\r\n        current = current.next();\r\n    }\r\n\r\n    return Optional.of(current.data());\r\n}\r\n```","```\r\npublic static Optional<String> findMiddleElementFromHead1PassIteratively(Node head) {\r\n    if (head == null) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    Node slowPointer = head;\r\n    Node fastPointer = head;\r\n\r\n    while (fastPointer.hasNext() && fastPointer.next().hasNext()) {\r\n        fastPointer = fastPointer.next().next();\r\n        slowPointer = slowPointer.next();\r\n    }\r\n\r\n    return Optional.ofNullable(slowPointer.data());\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindingMiddleFromHead1PassIteratively_thenMiddleFound() {\r\n\r\n    assertEquals(\"3\", MiddleElementLookup\r\n      .findMiddleElementFromHead1PassIteratively(\r\n        createNodesList(5)).get());\r\n    assertEquals(\"2\", MiddleElementLookup\r\n      .findMiddleElementFromHead1PassIteratively(\r\n        reateNodesList(4)).get());\r\n}\r\n```","```\r\nprivate static class MiddleAuxRecursion {\r\n    Node middle;\r\n    int length = 0;\r\n}\r\n```","```\r\nprivate static void findMiddleRecursively(\r\n  Node node, MiddleAuxRecursion middleAux) {\r\n    if (node == null) {\r\n        // reached the end\r\n        middleAux.length = middleAux.length / 2;\r\n        return;\r\n    }\r\n    middleAux.length++;\r\n    findMiddleRecursively(node.next(), middleAux);\r\n\r\n    if (middleAux.length == 0) {\r\n        // found the middle\r\n        middleAux.middle = node;\r\n    }\r\n\r\n    middleAux.length--;\r\n}\r\n```","```\r\npublic static Optional<String> findMiddleElementFromHead1PassRecursively(Node head) {\r\n\r\n    if (head == null) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    MiddleAuxRecursion middleAux = new MiddleAuxRecursion();\r\n    findMiddleRecursively(head, middleAux);\r\n    return Optional.of(middleAux.middle.data());\r\n}\r\n```","```\r\n@Test\r\npublic void whenFindingMiddleFromHead1PassRecursively_thenMiddleFound() {\r\n    assertEquals(\"3\", MiddleElementLookup\r\n      .findMiddleElementFromHead1PassRecursively(\r\n        createNodesList(5)).get());\r\n    assertEquals(\"2\", MiddleElementLookup\r\n      .findMiddleElementFromHead1PassRecursively(\r\n        createNodesList(4)).get());\r\n}\r\n```"]