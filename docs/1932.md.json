["```\r\n<dependency>\r\n    <groupId>io.reactivex</groupId>\r\n    <artifactId>rxjava-math</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```","```\r\ncompile 'io.reactivex:rxjava-math:1.0.0'\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 20);\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nMathObservable.averageInteger(sourceObservable).subscribe(subscriber);\r\n\r\nsubscriber.assertValue(10);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 20);\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nMathObservable.max(sourceObservable).subscribe(subscriber);\r\n\r\nsubscriber.assertValue(9);\r\n```","```\r\nclass Item {\r\n    private Integer id;\r\n\r\n    // standard constructors, getter, and setter\r\n}\r\n```","```\r\nItem five = new Item(5);\r\nList<Item> list = Arrays.asList(\r\n  new Item(1), \r\n  new Item(2), \r\n  new Item(3), \r\n  new Item(4), \r\n  five);\r\nObservable<Item> itemObservable = Observable.from(list);\r\n\r\nTestSubscriber<Item> subscriber = TestSubscriber.create();\r\n\r\nMathObservable.from(itemObservable)\r\n  .max(Comparator.comparing(Item::getId))\r\n  .subscribe(subscriber);\r\n\r\nsubscriber.assertValue(five);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 20);\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nMathObservable.min(sourceObservable).subscribe(subscriber);\r\n\r\nsubscriber.assertValue(1);\r\n```","```\r\nItem one = new Item(1);\r\nList<Item> list = Arrays.asList(\r\n  one, \r\n  new Item(2), \r\n  new Item(3), \r\n  new Item(4), \r\n  new Item(5));\r\nTestSubscriber<Item> subscriber = TestSubscriber.create();\r\nObservable<Item> itemObservable = Observable.from(list);\r\n\r\nMathObservable.from(itemObservable)\r\n  .min(Comparator.comparing(Item::getId))\r\n  .subscribe(subscriber);\r\n\r\nsubscriber.assertValue(one);\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 20);\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nMathObservable.sumInteger(sourceObservable).subscribe(subscriber);\r\n\r\nsubscriber.assertValue(210);\r\n```","```\r\nList<Integer> listOne = Arrays.asList(1, 2, 3, 4);\r\nObservable<Integer> observableOne = Observable.from(listOne);\r\n\r\nList<Integer> listTwo = Arrays.asList(5, 6, 7, 8);\r\nObservable<Integer> observableTwo = Observable.from(listTwo);\r\n\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nObservable<Integer> concatObservable = observableOne\r\n  .concatWith(observableTwo);\r\n\r\nconcatObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(1, 2, 3, 4, 5, 6, 7, 8);\r\n```","```\r\nList<String> lettersList = Arrays.asList(\r\n  \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\");\r\nTestSubscriber<Integer> subscriber = TestSubscriber.create();\r\n\r\nObservable<Integer> sourceObservable = Observable\r\n  .from(lettersList).count();\r\nsourceObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(7);\r\n```","```\r\nList<String> list = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\");\r\nTestSubscriber<String> subscriber = TestSubscriber.create();\r\n\r\nObservable<String> reduceObservable = Observable.from(list)\r\n  .reduce((letter1, letter2) -> letter2 + letter1);\r\nreduceObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(\"GFEDCBA\");\r\n```","```\r\nList<String> list = Arrays.asList(\"A\", \"B\", \"C\", \"B\", \"B\", \"A\", \"D\");\r\nTestSubscriber<HashSet> subscriber = TestSubscriber.create();\r\n\r\nObservable<HashSet<String>> reduceListObservable = Observable\r\n  .from(list)\r\n  .collect(HashSet::new, HashSet::add);\r\nreduceListObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValues(new HashSet(list));\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(1, 5);\r\nTestSubscriber<List> subscriber = TestSubscriber.create();\r\n\r\nObservable<List<Integer>> listObservable = sourceObservable\r\n  .toList();\r\nlistObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(Arrays.asList(1, 2, 3, 4, 5));\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(10, 5);\r\nTestSubscriber<List> subscriber = TestSubscriber.create();\r\n\r\nObservable<List<Integer>> listObservable = sourceObservable\r\n  .toSortedList();\r\nlistObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(Arrays.asList(10, 11, 12, 13, 14));\r\n```","```\r\nObservable<Integer> sourceObservable = Observable.range(10, 5);\r\nTestSubscriber<List> subscriber = TestSubscriber.create();\r\n\r\nObservable<List<Integer>> listObservable \r\n  = sourceObservable.toSortedList((int1, int2) -> int2 - int1);\r\nlistObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(Arrays.asList(14, 13, 12, 11, 10));\r\n```","```\r\nclass Book {\r\n    private String title;\r\n    private Integer year;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n```","```\r\nObservable<Book> bookObservable = Observable.just(\r\n  new Book(\"The North Water\", 2016), \r\n  new Book(\"Origin\", 2017), \r\n  new Book(\"Sleeping Beauties\", 2017)\r\n);\r\nTestSubscriber<Map> subscriber = TestSubscriber.create();\r\n\r\nObservable<Map<String, Integer>> mapObservable = bookObservable\r\n  .toMap(Book::getTitle, Book::getYear, HashMap::new);\r\nmapObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(new HashMap() {{\r\n  put(\"The North Water\", 2016);\r\n  put(\"Origin\", 2017);\r\n  put(\"Sleeping Beauties\", 2017);\r\n}});\r\n```","```\r\nObservable<Book> bookObservable = Observable.just(\r\n  new Book(\"The North Water\", 2016), \r\n  new Book(\"Origin\", 2017), \r\n  new Book(\"Sleeping Beauties\", 2017)\r\n);\r\nTestSubscriber<Map> subscriber = TestSubscriber.create();\r\n\r\nObservable multiMapObservable = bookObservable.toMultimap(\r\n  Book::getYear, \r\n  Book::getTitle, \r\n  () -> new HashMap<>(), \r\n  (key) -> new ArrayList<>()\r\n);\r\nmultiMapObservable.subscribe(subscriber);\r\n\r\nsubscriber.assertValue(new HashMap() {{\r\n    put(2016, Arrays.asList(\"The North Water\"));\r\n    put(2017, Arrays.asList(\"Origin\", \"Sleeping Beauties\"));\r\n}});\r\n```"]