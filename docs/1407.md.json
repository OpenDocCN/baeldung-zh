["```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-core</artifactId>\r\n    <version>1.4.5</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-test</artifactId>\r\n    <version>1.4.5</version>\r\n</dependency>\r\n```","```\r\nbuildscript {\r\n    repositories {\r\n      jcenter()\r\n    }\r\n    dependencies {\r\n      classpath \"io.ratpack:ratpack-gradle:1.4.5\"\r\n    }\r\n}\r\n\r\napply plugin: \"io.ratpack.ratpack-java\"\r\nrepositories {\r\n    jcenter()\r\n}\r\ndependencies {\r\n    testCompile 'junit:junit:4.11'\r\n    runtime \"org.slf4j:slf4j-simple:1.7.21\"\r\n}\r\ntest {\r\n    testLogging {\r\n      events 'started', 'passed'\r\n    }\r\n} \r\n```","```\r\npublic class Application {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        RatpackServer.start(server -> server.handlers(chain -> chain\r\n          .get(ctx -> ctx.render(\"Welcome to Baeldung ratpack!!!\"))));\r\n    }\r\n}\r\n```","```\r\nRatpackServer.start(server -> server\r\n  .handlers(chain -> chain\r\n  .get(\":name\", ctx -> ctx.render(\"Hello \" \r\n  + ctx.getPathTokens().get(\"name\") + \" !!!\"))));\r\n```","```\r\nRatpackServer.start(server -> server.handlers(chain -> chain.all(ctx -> {\r\n    MutableHeaders headers = ctx.getResponse().getHeaders();\r\n    headers.set(\"Access-Control-Allow-Origin\", \"*\");\r\n    headers.set(\"Accept-Language\", \"en-us\");\r\n    headers.set(\"Accept-Charset\", \"UTF-8\");\r\n    ctx.next();\r\n}).get(\":name\", ctx -> ctx\r\n    .render(\"Hello \" + ctx.getPathTokens().get(\"name\") + \"!!!\"))));\r\n```","```\r\nctx.getRequest().getHeaders().get(\"//TODO\")\r\n```","```\r\npublic class RequestValidatorFilter implements Handler {\r\n\r\n    @Override\r\n    public void handle(Context ctx) throws Exception {\r\n        MutableHeaders headers = ctx.getResponse().getHeaders();\r\n        headers.set(\"Access-Control-Allow-Origin\", \"*\");\r\n        ctx.next();\r\n    }\r\n}\r\n```","```\r\nRatpackServer.start(\r\n    server -> server.handlers(chain -> chain\r\n      .all(new RequestValidatorFilter())\r\n      .get(ctx -> ctx.render(\"Welcome to baeldung ratpack!!!\"))));\r\n}\r\n```","```\r\npublic class Employee {\r\n\r\n    private Long id;\r\n    private String title;\r\n    private String name;\r\n\r\n    // getters and setters \r\n\r\n}\r\n```","```\r\nList<Employee> employees = new ArrayList<Employee>();\r\nemployees.add(new Employee(1L, \"Mr\", \"John Doe\"));\r\nemployees.add(new Employee(2L, \"Mr\", \"White Snow\"));\r\n\r\nRatpackServer.start(\r\n    server -> server.handlers(chain -> chain\r\n      .get(\"data/employees\",\r\n      ctx -> ctx.render(Jackson.json(employees)))));\r\n```","```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-hikari</artifactId>\r\n    <version>1.4.5</version>\r\n</dependency>\r\n```","```\r\ncompile ratpack.dependency('hikari')\r\n```","```\r\nRatpackServer.start(\r\n    server -> server.registry(Guice.registry(bindings -> \r\n      bindings.module(HikariModule.class, config -> {\r\n          config.setDataSourceClassName(\"org.h2.jdbcx.JdbcDataSource\");\r\n          config.addDataSourceProperty(\"URL\",\r\n          \"jdbc:h2:mem:baeldung;INIT=RUNSCRIPT FROM 'classpath:/DDL.sql'\");\r\n      }))).handlers(...));\r\n```","```\r\n@RunWith(JUnit4.class)\r\npublic class ApplicationTest {\r\n\r\n    MainClassApplicationUnderTest appUnderTest\r\n      = new MainClassApplicationUnderTest(Application.class);\r\n\r\n    @Test\r\n    public void givenDefaultUrl_getStaticText() {\r\n        assertEquals(\"Welcome to baeldung ratpack!!!\", \r\n          appUnderTest.getHttpClient().getText(\"/\"));\r\n    }\r\n\r\n    @Test\r\n    public void givenDynamicUrl_getDynamicText() {\r\n        assertEquals(\"Hello dummybot!!!\", \r\n          appUnderTest.getHttpClient().getText(\"/dummybot\"));\r\n    }\r\n\r\n    @Test\r\n    public void givenUrl_getListOfEmployee() \r\n      throws JsonProcessingException {\r\n\r\n        List<Employee> employees = new ArrayList<Employee>();\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        employees.add(new Employee(1L, \"Mr\", \"John Doe\"));\r\n        employees.add(new Employee(2L, \"Mr\", \"White Snow\"));\r\n\r\n        assertEquals(mapper.writeValueAsString(employees), \r\n          appUnderTest.getHttpClient().getText(\"/data/employees\"));\r\n    }\r\n\r\n    @After\r\n    public void shutdown() {\r\n        appUnderTest.close();\r\n    }\r\n\r\n}\r\n```"]