["```\r\nSplittableRandom random = new SplittableRandom();\r\n```","```\r\nboolean probablyFalse = random.nextInt(10) == 0\r\n```","```\r\nboolean whoKnows = random.nextInt(1, 101) <= 50\r\n```","```\r\nprivate final Lazy<SplittableRandom> random = Lazy.of(SplittableRandom::new); \r\n```","```\r\npublic <T> withProbability(Supplier<T> positiveCase, Supplier<T> negativeCase, int probability) {\r\n    SplittableRandom random = this.random.get();\r\n    if (random.nextInt(1, 101) <= probability) {\r\n        return positiveCase.get();\r\n    } else {\r\n        return negativeCase.get();\r\n    }\r\n}\r\n```","```\r\nint numberOfSamples = 1_000_000;\r\nint probability = 10;\r\nint howManyTimesInvoked = \r\n  Stream.generate(() -> randomInvoker.withProbability(() -> 1, () -> 0, probability))\r\n    .limit(numberOfSamples)\r\n    .mapToInt(e -> e)\r\n    .sum();\r\n```","```\r\nint monteCarloProbability = (howManyTimesInvoked * 100) / numberOfSamples; \r\n```","```\r\nprivate static final double MEAN_HEIGHT = 176.02;\r\nprivate static final double STANDARD_DEVIATION = 7.11;\r\nprivate static NormalDistribution distribution =  new NormalDistribution(MEAN_HEIGHT, STANDARD_DEVIATION); \r\n```","```\r\npublic static double generateNormalHeight() {\r\n    return distribution.sample();\r\n}\r\n```","```\r\npublic static double probabilityOfHeightBetween(double heightLowerExclusive, double heightUpperInclusive) {\r\n    return distribution.probability(heightLowerExclusive, heightUpperInclusive);\r\n}\r\n```"]