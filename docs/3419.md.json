["```\r\npublic class Customer {\r\n\r\n    private int id;\r\n    private String name;\r\n\r\n    // getters/setters, custom hashcode/equals\r\n}\r\n```","```\r\nList<Customer> customers = new ArrayList<>();\r\ncustomers.add(new Customer(1, \"Jack\"));\r\ncustomers.add(new Customer(2, \"James\"));\r\ncustomers.add(new Customer(3, \"Kelly\")); \r\n```","```\r\nboolean contains(Object element)\r\n```","```\r\nCustomer james = new Customer(2, \"James\");\r\nif (customers.contains(james)) {\r\n    // ...\r\n}\r\n```","```\r\nint indexOf(Object element)\r\n```","```\r\nif(customers.indexOf(james) != -1) {\r\n    // ...\r\n}\r\n```","```\r\npublic Customer findUsingEnhancedForLoop(\r\n  String name, List<Customer> customers) {\r\n\r\n    for (Customer customer : customers) {\r\n        if (customer.getName().equals(name)) {\r\n            return customer;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic Customer findUsingIterator(\r\n  String name, List<Customer> customers) {\r\n    Iterator<Customer> iterator = customers.iterator();\r\n    while (iterator.hasNext()) {\r\n        Customer customer = iterator.next();\r\n        if (customer.getName().equals(name)) {\r\n            return customer;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```","```\r\nCustomer james = customers.stream()\r\n  .filter(customer -> \"James\".equals(customer.getName()))\r\n  .findAny()\r\n  .orElse(null);\r\n```","```\r\nCustomer james = Iterables.tryFind(customers,\r\n  new Predicate<Customer>() {\r\n      public boolean apply(Customer customer) {\r\n          return \"James\".equals(customer.getName());\r\n      }\r\n  }).orNull();\r\n```","```\r\nCustomer james = Iterables.tryFind(customers,\r\n  new Predicate<Customer>() {\r\n      public boolean apply(Customer customer) {\r\n          return \"James\".equals(customer.getName());\r\n      }\r\n  }).or(customers.get(0));\r\n```","```\r\nCustomer james = IterableUtils.find(customers,\r\n  new Predicate<Customer>() {\r\n      public boolean evaluate(Customer customer) {\r\n          return \"James\".equals(customer.getName());\r\n      }\r\n  });\r\n```"]