["```\r\nint readFileLineByLine(String filePath) {\r\n    File file = new File(filePath)\r\n    def line, noOfLines = 0;\r\n    file.withReader { reader ->\r\n        while ((line = reader.readLine()) != null) {\r\n            println \"${line}\"\r\n            noOfLines++\r\n        }\r\n    }\r\n    return noOfLines\r\n}\r\n```","```\r\nLine 1 : Hello World!!!\r\nLine 2 : This is a file content.\r\nLine 3 : String content\r\n```","```\r\ndef 'Should return number of lines in File given filePath' () {\r\n    given:\r\n        def filePath = \"src/main/resources/fileContent.txt\"\r\n    when:\r\n        def noOfLines = readFile.readFileLineByLine(filePath)\r\n    then:\r\n        noOfLines\r\n        noOfLines instanceof Integer\r\n        assert noOfLines, 3\r\n} \r\n```","```\r\nnew File(\"src/main/resources/utf8Content.html\").withReader('UTF-8') { reader ->\r\ndef line\r\n    while ((line = reader.readLine()) != null) { \r\n        println \"${line}\"\r\n    }\r\n}\r\n```","```\r\nnew File(\"src/main/resources/fileContent.txt\").eachLine { line ->\r\n    println line\r\n} \r\n```","```\r\ndef is = new File(\"src/main/resources/fileContent.txt\").newInputStream()\r\nis.eachLine { \r\n    println it\r\n}\r\nis.close()\r\n```","```\r\nnew File(\"src/main/resources/fileContent.txt\").withInputStream { stream ->\r\n    stream.eachLine { line ->\r\n        println line\r\n    }\r\n}\r\n```","```\r\nList<String> readFileInList(String filePath) {\r\n    File file = new File(filePath)\r\n    def lines = file.readLines()\r\n    return lines\r\n}\r\n```","```\r\ndef 'Should return File Content in list of lines given filePath' () {\r\n    given:\r\n        def filePath = \"src/main/resources/fileContent.txt\"\r\n    when:\r\n        def lines = readFile.readFileInList(filePath)\r\n    then:\r\n        lines\r\n        lines instanceof List<String>\r\n        assert lines.size(), 3\r\n}\r\n```","```\r\ndef list = new File(\"src/main/resources/fileContent.txt\").collect {it} \r\n```","```\r\ndef array = new File(\"src/main/resources/fileContent.txt\") as String[]\r\n```","```\r\nString readFileString(String filePath) {\r\n    File file = new File(filePath)\r\n    String fileContent = file.text\r\n    return fileContent\r\n} \r\n```","```\r\ndef 'Should return file content in string given filePath' () {\r\n    given:\r\n        def filePath = \"src/main/resources/fileContent.txt\"\r\n    when:\r\n        def fileContent = readFile.readFileString(filePath)\r\n    then:\r\n        fileContent\r\n        fileContent instanceof String\r\n        fileContent.contains(\"\"\"Line 1 : Hello World!!!\r\nLine 2 : This is a file content.\r\nLine 3 : String content\"\"\")\r\n}\r\n```","```\r\nString readFileStringWithCharset(String filePath) {\r\n    File file = new File(filePath)\r\n    String utf8Content = file.getText(\"UTF-8\")\r\n    return utf8Content\r\n}\r\n```","```\r\nᚠᛇᚻ᛫ᛒᛦᚦ᛫ᚠᚱᚩᚠᚢᚱ᛫ᚠᛁᚱᚪ᛫ᚷᛖᚻᚹᛦᛚᚳᚢᛗ\r\nᛋᚳᛖᚪᛚ᛫ᚦᛖᚪᚻ᛫ᛗᚪᚾᚾᚪ᛫ᚷᛖᚻᚹᛦᛚᚳ᛫ᛗᛁᚳᛚᚢᚾ᛫ᚻᛦᛏ᛫ᛞᚫᛚᚪᚾ\r\nᚷᛁᚠ᛫ᚻᛖ᛫ᚹᛁᛚᛖ᛫ᚠᚩᚱ᛫ᛞᚱᛁᚻᛏᚾᛖ᛫ᛞᚩᛗᛖᛋ᛫ᚻᛚᛇᛏᚪᚾ \r\n```","```\r\ndef 'Should return UTF-8 encoded file content in string given filePath' () {\r\n    given:\r\n        def filePath = \"src/main/resources/utf8Content.html\"\r\n    when:\r\n        def encodedContent = readFile.readFileStringWithCharset(filePath)\r\n    then:\r\n        encodedContent\r\n        encodedContent instanceof String\r\n}\r\n```","```\r\nbyte[] readBinaryFile(String filePath) {\r\n    File file = new File(filePath)\r\n    byte[] binaryContent = file.bytes\r\n    return binaryContent\r\n}\r\n```","```\r\ndef 'Should return binary file content in byte array given filePath' () {\r\n    given:\r\n        def filePath = \"src/main/resources/sample.png\"\r\n    when:\r\n        def binaryContent = readFile.readBinaryFile(filePath)\r\n    then:\r\n        binaryContent\r\n        binaryContent instanceof byte[]\r\n        binaryContent.length == 329\r\n}\r\n```"]