["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n```","```\r\n@GetMapping(path = \"/users/{name}\")\r\npublic Mono<String> getName(@PathVariable String name) {\r\n    return Mono.just(name);\r\n}\r\n```","```\r\n@Component\r\npublic class PlayerHandler {\r\n    public Mono<ServerResponse> getName(ServerRequest request) {\r\n        Mono<String> name = Mono.just(request.pathVariable(\"name\"));\r\n        return ok().body(name, String.class);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic RouterFunction<ServerResponse> route(PlayerHandler playerHandler) {\r\n    return RouterFunctions\r\n      .route(GET(\"/players/{name}\"), playerHandler::getName)\r\n      .filter(new ExampleHandlerFilterFunction());\r\n}\r\n```","```\r\n@Component\r\npublic class ExampleWebFilter implements WebFilter {\r\n\r\n    @Override\r\n    public Mono<Void> filter(ServerWebExchange serverWebExchange, \r\n      WebFilterChain webFilterChain) {\r\n\r\n        serverWebExchange.getResponse()\r\n          .getHeaders().add(\"web-filter\", \"web-filter-test\");\r\n        return webFilterChain.filter(serverWebExchange);\r\n    }\r\n}\r\n```","```\r\npublic class ExampleHandlerFilterFunction \r\n  implements HandlerFilterFunction<ServerResponse, ServerResponse> {\r\n\r\n    @Override\r\n    public Mono<ServerResponse> filter(ServerRequest serverRequest,\r\n      HandlerFunction<ServerResponse> handlerFunction) {\r\n        if (serverRequest.pathVariable(\"name\").equalsIgnoreCase(\"test\")) {\r\n            return ServerResponse.status(FORBIDDEN).build();\r\n        }\r\n        return handlerFunction.handle(serverRequest);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUserNameIsBaeldung_thenWebFilterIsApplied() {\r\n    EntityExchangeResult<String> result = webTestClient.get()\r\n      .uri(\"/users/baeldung\")\r\n      .exchange()\r\n      .expectStatus().isOk()\r\n      .expectBody(String.class)\r\n      .returnResult();\r\n\r\n    assertEquals(result.getResponseBody(), \"baeldung\");\r\n    assertEquals(\r\n      result.getResponseHeaders().getFirst(\"web-filter\"), \r\n      \"web-filter-test\");\r\n}\r\n\r\n@Test\r\npublic void whenUserNameIsTest_thenHandlerFilterFunctionIsNotApplied() {\r\n    webTestClient.get().uri(\"/users/test\")\r\n      .exchange()\r\n      .expectStatus().isOk();\r\n}\r\n```","```\r\n@Test\r\npublic void whenPlayerNameIsBaeldung_thenWebFilterIsApplied() {\r\n    EntityExchangeResult<String> result = webTestClient.get()\r\n      .uri(\"/players/baeldung\")\r\n      .exchange()\r\n      .expectStatus().isOk()\r\n      .expectBody(String.class)\r\n      .returnResult();\r\n\r\n    assertEquals(result.getResponseBody(), \"baeldung\");\r\n    assertEquals(\r\n      result.getResponseHeaders().getFirst(\"web-filter\"),\r\n      \"web-filter-test\");\r\n} \r\n\r\n@Test \r\npublic void whenPlayerNameIsTest_thenHandlerFilterFunctionIsApplied() {\r\n    webTestClient.get().uri(\"/players/test\")\r\n      .exchange()\r\n      .expectStatus().isForbidden(); \r\n}\r\n```"]