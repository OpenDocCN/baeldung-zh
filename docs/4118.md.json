["```\r\nList<List<String>> nestedList = asList(\r\n  asList(\"one:one\"), \r\n  asList(\"two:one\", \"two:two\", \"two:three\"), \r\n  asList(\"three:one\", \"three:two\", \"three:three\", \"three:four\"));\r\n```","```\r\npublic <T> List<T> flattenListOfListsImperatively(\r\n    List<List<T>> nestedList) {\r\n    List<T> ls = new ArrayList<>();\r\n    nestedList.forEach(ls::addAll);\r\n    return ls;\r\n} \r\n```","```\r\n@Test\r\npublic void givenNestedList_thenFlattenImperatively() {\r\n    List<String> ls = flattenListOfListsImperatively(nestedList);\r\n\r\n    assertNotNull(ls);\r\n    assertTrue(ls.size() == 8);\r\n    assertThat(ls, IsIterableContainingInOrder.contains(\r\n      \"one:one\",\r\n      \"two:one\", \"two:two\", \"two:three\", \"three:one\",\r\n      \"three:two\", \"three:three\", \"three:four\"));\r\n}\r\n```","```\r\npublic <T> List<T> flattenListOfListsStream(List<List<T>> list) {\r\n    return list.stream()\r\n      .flatMap(Collection::stream)\r\n      .collect(Collectors.toList());    \r\n} \r\n```","```\r\n@Test\r\npublic void givenNestedList_thenFlattenFunctionally() {\r\n    List<String> ls = flattenListOfListsStream(nestedList);\r\n\r\n    assertNotNull(ls);\r\n    assertTrue(ls.size() == 8);\r\n}\r\n```"]