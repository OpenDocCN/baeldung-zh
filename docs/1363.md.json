["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-dataflow-server-local</artifactId>\r\n    <version>1.7.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@EnableDataFlowServer\r\n@SpringBootApplication\r\npublic class SpringDataFlowServerApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(\r\n          SpringDataFlowServerApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.spark</groupId>\r\n    <artifactId>spark-core_2.10</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency> \r\n```","```\r\npublic class PiApproximation {\r\n    public static void main(String[] args) {\r\n        SparkConf conf = new SparkConf().setAppName(\"BaeldungPIApproximation\");\r\n        JavaSparkContext context = new JavaSparkContext(conf);\r\n        int slices = args.length >= 1 ? Integer.valueOf(args[0]) : 2;\r\n        int n = (100000L * slices) > Integer.MAX_VALUE ? Integer.MAX_VALUE : 100000 * slices;\r\n\r\n        List<Integer> xs = IntStream.rangeClosed(0, n)\r\n          .mapToObj(element -> Integer.valueOf(element))\r\n          .collect(Collectors.toList());\r\n\r\n        JavaRDD<Integer> dataSet = context.parallelize(xs, slices);\r\n\r\n        JavaRDD<Integer> pointsInsideTheCircle = dataSet.map(integer -> {\r\n           double x = Math.random() * 2 - 1;\r\n           double y = Math.random() * 2 - 1;\r\n           return (x * x + y * y ) < 1 ? 1: 0;\r\n        });\r\n\r\n        int count = pointsInsideTheCircle.reduce((integer, integer2) -> integer + integer2);\r\n\r\n        System.out.println(\"The pi was estimated as:\" + count / n);\r\n\r\n        context.stop();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-dataflow-shell</artifactId>\r\n    <version>1.7.4.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@EnableDataFlowShell\r\n@SpringBootApplication\r\npublic class SpringDataFlowShellApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringDataFlowShellApplication.class, args);\r\n    }\r\n}\r\n```","```\r\napp register --type task --name spark-client --uri maven://org.springframework.cloud.task.app:spark-client-task:1.0.0.BUILD-SNAPSHOT \r\n```","```\r\ntask create spark1 --definition \"spark-client \\\r\n  --spark.app-name=my-test-pi --spark.app-class=com.baeldung.spring.cloud.PiApproximation \\\r\n  --spark.app-jar=/apache-spark-job-0.0.1-SNAPSHOT.jar --spark.app-args=10\"\r\n```","```\r\ntask launch spark1\r\n```"]