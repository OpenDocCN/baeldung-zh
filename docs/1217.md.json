["```\r\n<dependency>\r\n   <groupId>org.hibernate</groupId>\r\n   <artifactId>hibernate-core</artifactId>\r\n   <version>5.2.12.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n   <groupId>com.h2database</groupId>\r\n   <artifactId>h2</artifactId>\r\n   <version>1.4.196</version>\r\n</dependency>\r\n```","```\r\ninterface MultiTenantConnectionProvider extends Service, Wrapped {\r\n    Connection getAnyConnection() throws SQLException;\r\n\r\n    Connection getConnection(String tenantIdentifier) throws SQLException;\r\n     // ...\r\n}\r\n```","```\r\npublic interface CurrentTenantIdentifierResolver {\r\n\r\n    String resolveCurrentTenantIdentifier();\r\n\r\n    boolean validateExistingCurrentSessions();\r\n}\r\n```","```\r\npublic abstract class MultitenancyIntegrationTest {\r\n\r\n    @Mock\r\n    private CurrentTenantIdentifierResolver currentTenantIdentifierResolver;\r\n\r\n    private SessionFactory sessionFactory;\r\n\r\n    @Before\r\n    public void setup() throws IOException {\r\n        MockitoAnnotations.initMocks(this);\r\n\r\n        when(currentTenantIdentifierResolver.validateExistingCurrentSessions())\r\n          .thenReturn(false);\r\n\r\n        Properties properties = getHibernateProperties();\r\n        properties.put(\r\n          AvailableSettings.MULTI_TENANT_IDENTIFIER_RESOLVER, \r\n          currentTenantIdentifierResolver);\r\n\r\n        sessionFactory = buildSessionFactory(properties);\r\n\r\n        initTenant(TenantIdNames.MYDB1);\r\n        initTenant(TenantIdNames.MYDB2);\r\n    }\r\n\r\n    protected void initTenant(String tenantId) {\r\n        when(currentTenantIdentifierResolver\r\n         .resolveCurrentTenantIdentifier())\r\n           .thenReturn(tenantId);\r\n        createCarTable();\r\n    }\r\n}\r\n```","```\r\nclass SchemaMultiTenantConnectionProvider\r\n  extends AbstractMultiTenantConnectionProvider {\r\n\r\n    private ConnectionProvider connectionProvider;\r\n\r\n    public SchemaMultiTenantConnectionProvider() throws IOException {\r\n        this.connectionProvider = initConnectionProvider();\r\n    }\r\n\r\n    @Override\r\n    protected ConnectionProvider getAnyConnectionProvider() {\r\n        return connectionProvider;\r\n    }\r\n\r\n    @Override\r\n    protected ConnectionProvider selectConnectionProvider(\r\n      String tenantIdentifier) {\r\n\r\n        return connectionProvider;\r\n    }\r\n\r\n    @Override\r\n    public Connection getConnection(String tenantIdentifier)\r\n      throws SQLException {\r\n\r\n        Connection connection = super.getConnection(tenantIdentifier);\r\n        connection.createStatement()\r\n          .execute(String.format(\"SET SCHEMA %s;\", tenantIdentifier));\r\n        return connection;\r\n    }\r\n\r\n    private ConnectionProvider initConnectionProvider() throws IOException {\r\n        Properties properties = new Properties();\r\n        properties.load(getClass()\r\n          .getResourceAsStream(\"/hibernate.properties\"));\r\n\r\n        DriverManagerConnectionProviderImpl connectionProvider \r\n          = new DriverManagerConnectionProviderImpl();\r\n        connectionProvider.configure(properties);\r\n        return connectionProvider;\r\n    }\r\n}\r\n```","```\r\nhibernate.connection.url=jdbc:h2:mem:mydb1;DB_CLOSE_DELAY=-1;\\\r\n  INIT=CREATE SCHEMA IF NOT EXISTS MYDB1\\\\;CREATE SCHEMA IF NOT EXISTS MYDB2\\\\;\r\nhibernate.multiTenancy=SCHEMA\r\nhibernate.multi_tenant_connection_provider=\\\r\n  com.baeldung.hibernate.multitenancy.schema.SchemaMultiTenantConnectionProvider\r\n```","```\r\n@Test\r\nvoid whenAddingEntries_thenOnlyAddedToConcreteDatabase() {\r\n    whenCurrentTenantIs(TenantIdNames.MYDB1);\r\n    whenAddCar(\"myCar\");\r\n    thenCarFound(\"myCar\");\r\n    whenCurrentTenantIs(TenantIdNames.MYDB2);\r\n    thenCarNotFound(\"myCar\");\r\n}\r\n```","```\r\nclass MapMultiTenantConnectionProvider\r\n  extends AbstractMultiTenantConnectionProvider {\r\n\r\n    private Map<String, ConnectionProvider> connectionProviderMap\r\n     = new HashMap<>();\r\n\r\n    public MapMultiTenantConnectionProvider() throws IOException {\r\n        initConnectionProviderForTenant(TenantIdNames.MYDB1);\r\n        initConnectionProviderForTenant(TenantIdNames.MYDB2);\r\n    }\r\n\r\n    @Override\r\n    protected ConnectionProvider getAnyConnectionProvider() {\r\n        return connectionProviderMap.values()\r\n          .iterator()\r\n          .next();\r\n    }\r\n\r\n    @Override\r\n    protected ConnectionProvider selectConnectionProvider(\r\n      String tenantIdentifier) {\r\n\r\n        return connectionProviderMap.get(tenantIdentifier);\r\n    }\r\n\r\n    private void initConnectionProviderForTenant(String tenantId)\r\n     throws IOException {\r\n        Properties properties = new Properties();\r\n        properties.load(getClass().getResourceAsStream(\r\n          String.format(\"/hibernate-database-%s.properties\", tenantId)));\r\n        DriverManagerConnectionProviderImpl connectionProvider \r\n          = new DriverManagerConnectionProviderImpl();\r\n        connectionProvider.configure(properties);\r\n        this.connectionProviderMap.put(tenantId, connectionProvider);\r\n    }\r\n}\r\n```","```\r\nhibernate.connection.driver_class=org.h2.Driver\r\nhibernate.connection.url=jdbc:h2:mem:<Tenant Identifier>;DB_CLOSE_DELAY=-1\r\nhibernate.connection.username=sa\r\nhibernate.dialect=org.hibernate.dialect.H2Dialect\r\n```","```\r\nhibernate.multiTenancy=DATABASE\r\nhibernate.multi_tenant_connection_provider=\\\r\n  com.baeldung.hibernate.multitenancy.database.MapMultiTenantConnectionProvider\r\n```"]