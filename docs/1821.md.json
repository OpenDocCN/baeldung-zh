["```\r\npublic static List<Integer> primeNumbersBruteForce(int n) {\r\n    List<Integer> primeNumbers = new LinkedList<>();\r\n    for (int i = 2; i <= n; i++) {\r\n        if (isPrimeBruteForce(i)) {\r\n            primeNumbers.add(i);\r\n        }\r\n    }\r\n    return primeNumbers;\r\n}\r\npublic static boolean isPrimeBruteForce(int number) {\r\n    for (int i = 2; i < number; i++) {\r\n        if (number % i == 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n} \r\n```","```\r\npublic static List<Integer> primeNumbersBruteForce(int n) {\r\n    List<Integer> primeNumbers = new LinkedList<>();\r\n    if (n >= 2) {\r\n        primeNumbers.add(2);\r\n    }\r\n    for (int i = 3; i <= n; i += 2) {\r\n        if (isPrimeBruteForce(i)) {\r\n            primeNumbers.add(i);\r\n        }\r\n    }\r\n    return primeNumbers;\r\n}\r\nprivate static boolean isPrimeBruteForce(int number) {\r\n    for (int i = 2; i*i <= number; i++) {\r\n        if (number % i == 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n} \r\n```","```\r\npublic static List<Integer> primeNumbersTill(int n) {\r\n    return IntStream.rangeClosed(2, n)\r\n      .filter(x -> isPrime(x)).boxed()\r\n      .collect(Collectors.toList());\r\n}\r\nprivate static boolean isPrime(int number) {\r\n    return IntStream.rangeClosed(2, (int) (Math.sqrt(number)))\r\n      .allMatch(n -> x % n != 0);\r\n} \r\n```","```\r\npublic static List<Integer> sieveOfEratosthenes(int n) {\r\n    boolean prime[] = new boolean[n + 1];\r\n    Arrays.fill(prime, true);\r\n    for (int p = 2; p * p <= n; p++) {\r\n        if (prime[p]) {\r\n            for (int i = p * 2; i <= n; i += p) {\r\n                prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n    List<Integer> primeNumbers = new LinkedList<>();\r\n    for (int i = 2; i <= n; i++) {\r\n        if (prime[i]) {\r\n            primeNumbers.add(i);\r\n        }\r\n    }\r\n    return primeNumbers;\r\n} \r\n```"]