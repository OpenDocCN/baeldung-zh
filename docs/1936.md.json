["```\r\nObservable\r\n  .from(new String[] { \"John\", \"Doe\" })\r\n  .subscribe(name -> System.out.println(\"Hello \" + name))\r\n```","```\r\n@Test\r\npublic void givenTwoObservables_whenMerged_shouldEmitCombinedResults() {\r\n    TestSubscriber<String> testSubscriber = new TestSubscriber<>();\r\n\r\n    Observable.merge(\r\n      Observable.from(new String[] {\"Hello\", \"World\"}),\r\n      Observable.from(new String[] {\"I love\", \"RxJava\"})\r\n    ).subscribe(testSubscriber);\r\n\r\n    testSubscriber.assertValues(\"Hello\", \"World\", \"I love\", \"RxJava\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenMutipleObservablesOneThrows_whenMerged_thenCombineBeforePropagatingError() {\r\n    TestSubscriber<String> testSubscriber = new TestSubscriber<>();\r\n\r\n    Observable.mergeDelayError(\r\n      Observable.from(new String[] { \"hello\", \"world\" }),\r\n      Observable.error(new RuntimeException(\"Some exception\")),\r\n      Observable.from(new String[] { \"rxjava\" })\r\n    ).subscribe(testSubscriber);\r\n\r\n    testSubscriber.assertValues(\"hello\", \"world\", \"rxjava\");\r\n    testSubscriber.assertError(RuntimeException.class);\r\n}\r\n```","```\r\nhello\r\nworld\r\nrxjava\r\n```","```\r\n@Test\r\npublic void givenTwoObservables_whenZipped_thenReturnCombinedResults() {\r\n    List<String> zippedStrings = new ArrayList<>();\r\n\r\n    Observable.zip(\r\n      Observable.from(new String[] { \"Simple\", \"Moderate\", \"Complex\" }), \r\n      Observable.from(new String[] { \"Solutions\", \"Success\", \"Hierarchy\"}),\r\n      (str1, str2) -> str1 + \" \" + str2).subscribe(zippedStrings::add);\r\n\r\n    assertThat(zippedStrings).isNotEmpty();\r\n    assertThat(zippedStrings.size()).isEqualTo(3);\r\n    assertThat(zippedStrings).contains(\"Simple Solutions\", \"Moderate Success\", \"Complex Hierarchy\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenAStream_whenZippedWithInterval_shouldDelayStreamEmmission() {\r\n    TestSubscriber<String> testSubscriber = new TestSubscriber<>();\r\n\r\n    Observable<String> data = Observable.just(\"one\", \"two\", \"three\", \"four\", \"five\");\r\n    Observable<Long> interval = Observable.interval(1L, TimeUnit.SECONDS);\r\n\r\n    Observable\r\n      .zip(data, interval, (strData, tick) -> String.format(\"[%d]=%s\", tick, strData))\r\n      .toBlocking().subscribe(testSubscriber);\r\n\r\n    testSubscriber.assertCompleted();\r\n    testSubscriber.assertValueCount(5);\r\n    testSubscriber.assertValues(\"[0]=one\", \"[1]=two\", \"[2]=three\", \"[3]=four\", \"[4]=five\");\r\n}\r\n```"]