["```\r\n@Component\r\npublic class Setup {\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private PreferenceRepository preferenceRepository;\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @PostConstruct\r\n    private void createTestUser() {\r\n        User userJohn = userRepository.findByUsername(\"john\");\r\n        if (userJohn == null) {\r\n            userJohn = new User();\r\n            userJohn.setUsername(\"john\");\r\n            userJohn.setPassword(passwordEncoder.encode(\"123\"));\r\n            userJohn.setAccessToken(\"token\");\r\n            userRepository.save(userJohn);\r\n            final Preference pref = new Preference();\r\n            pref.setTimezone(TimeZone.getDefault().getID());\r\n            pref.setEmail(\"[[email protected]](/web/20220120083301/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n            preferenceRepository.save(pref);\r\n            userJohn.setPreference(pref);\r\n            userRepository.save(userJohn);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { TestConfig.class }, \r\n  loader = AnnotationConfigContextLoader.class)\r\npublic class AbstractLiveTest {\r\n    public static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n\r\n    @Autowired\r\n    private CommonPaths commonPaths;\r\n\r\n    protected String urlPrefix;\r\n\r\n    protected ObjectMapper objectMapper = new ObjectMapper().setDateFormat(dateFormat);\r\n\r\n    @Before\r\n    public void setup() {\r\n        urlPrefix = commonPaths.getServerRoot();\r\n    }\r\n\r\n    protected RequestSpecification givenAuth() {\r\n        FormAuthConfig formConfig \r\n          = new FormAuthConfig(urlPrefix + \"/j_spring_security_check\", \"username\", \"password\");\r\n        return RestAssured.given().auth().form(\"john\", \"123\", formConfig);\r\n    }\r\n\r\n    protected RequestSpecification withRequestBody(RequestSpecification req, Object obj) \r\n      throws JsonProcessingException {\r\n        return req.contentType(MediaType.APPLICATION_JSON_VALUE)\r\n          .body(objectMapper.writeValueAsString(obj));\r\n    }\r\n}\r\n```","```\r\n@Component\r\n@PropertySource({ \"classpath:web-${envTarget:local}.properties\" })\r\npublic class CommonPaths {\r\n\r\n    @Value(\"${http.protocol}\")\r\n    private String protocol;\r\n\r\n    @Value(\"${http.port}\")\r\n    private String port;\r\n\r\n    @Value(\"${http.host}\")\r\n    private String host;\r\n\r\n    @Value(\"${http.address}\")\r\n    private String address;\r\n\r\n    public String getServerRoot() {\r\n        if (port.equals(\"80\")) {\r\n            return protocol + \"://\" + host + \"/\" + address;\r\n        }\r\n        return protocol + \"://\" + host + \":\" + port + \"/\" + address;\r\n    }\r\n}\r\n```","```\r\nhttp.protocol=http\r\nhttp.port=8080\r\nhttp.host=localhost\r\nhttp.address=reddit-scheduler\r\n```","```\r\n@Configuration\r\n@ComponentScan({ \"org.baeldung.web.live\" })\r\npublic class TestConfig {\r\n    @Bean\r\n    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\r\n        return new PropertySourcesPlaceholderConfigurer();\r\n    }\r\n}\r\n```","```\r\npublic class ScheduledPostLiveTest extends AbstractLiveTest {\r\n    private static final String date = \"2016-01-01 00:00\";\r\n\r\n    private Post createPost() throws ParseException, IOException {\r\n        Post post = new Post();\r\n        post.setTitle(\"test\");\r\n        post.setUrl(\"test.com\");\r\n        post.setSubreddit(\"test\");\r\n        post.setSubmissionDate(dateFormat.parse(date));\r\n\r\n        Response response = withRequestBody(givenAuth(), post)\r\n          .post(urlPrefix + \"/api/scheduledPosts?date=\" + date);\r\n\r\n        return objectMapper.reader().forType(Post.class).readValue(response.asString());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenScheduleANewPost_thenCreated() \r\n  throws ParseException, IOException {\r\n    Post post = new Post();\r\n    post.setTitle(\"test\");\r\n    post.setUrl(\"test.com\");\r\n    post.setSubreddit(\"test\");\r\n    post.setSubmissionDate(dateFormat.parse(date));\r\n\r\n    Response response = withRequestBody(givenAuth(), post)\r\n      .post(urlPrefix + \"/api/scheduledPosts?date=\" + date);\r\n\r\n    assertEquals(201, response.statusCode());\r\n    Post result = objectMapper.reader().forType(Post.class).readValue(response.asString());\r\n    assertEquals(result.getUrl(), post.getUrl());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingUserScheduledPosts_thenCorrect() \r\n  throws ParseException, IOException {\r\n    createPost();\r\n\r\n    Response response = givenAuth().get(urlPrefix + \"/api/scheduledPosts?page=0\");\r\n\r\n    assertEquals(201, response.statusCode());\r\n    assertTrue(response.as(List.class).size() > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUpdatingScheduledPost_thenUpdated() \r\n  throws ParseException, IOException {\r\n    Post post = createPost();\r\n\r\n    post.setTitle(\"new title\");\r\n    Response response = withRequestBody(givenAuth(), post).\r\n      put(urlPrefix + \"/api/scheduledPosts/\" + post.getId() + \"?date=\" + date);\r\n\r\n    assertEquals(200, response.statusCode());\r\n    response = givenAuth().get(urlPrefix + \"/api/scheduledPosts/\" + post.getId());\r\n    assertTrue(response.asString().contains(post.getTitle()));\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletingScheduledPost_thenDeleted() \r\n  throws ParseException, IOException {\r\n    Post post = createPost();\r\n    Response response = givenAuth().delete(urlPrefix + \"/api/scheduledPosts/\" + post.getId());\r\n\r\n    assertEquals(204, response.statusCode());\r\n}\r\n```","```\r\npublic class MySitesLiveTest extends AbstractLiveTest {\r\n\r\n    private Site createSite() throws ParseException, IOException {\r\n        Site site = new Site(\"/feed/\");\r\n        site.setName(\"baeldung\");\r\n\r\n        Response response = withRequestBody(givenAuth(), site)\r\n          .post(urlPrefix + \"/sites\");\r\n\r\n        return objectMapper.reader().forType(Site.class).readValue(response.asString());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingUserSites_thenCorrect() \r\n  throws ParseException, IOException {\r\n    createSite();\r\n    Response response = givenAuth().get(urlPrefix + \"/sites\");\r\n\r\n    assertEquals(200, response.statusCode());\r\n    assertTrue(response.as(List.class).size() > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingSiteArticles_thenCorrect() \r\n  throws ParseException, IOException {\r\n    Site site = createSite();\r\n    Response response = givenAuth().get(urlPrefix + \"/sites/articles?id=\" + site.getId());\r\n\r\n    assertEquals(200, response.statusCode());\r\n    assertTrue(response.as(List.class).size() > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddingNewSite_thenCorrect() \r\n  throws ParseException, IOException {\r\n    Site site = createSite();\r\n\r\n    Response response = givenAuth().get(urlPrefix + \"/sites\");\r\n    assertTrue(response.asString().contains(site.getUrl()));\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletingSite_thenDeleted() throws ParseException, IOException {\r\n    Site site = createSite();\r\n    Response response = givenAuth().delete(urlPrefix + \"/sites/\" + site.getId());\r\n\r\n    assertEquals(204, response.statusCode());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingPrefernce_thenCorrect() {\r\n    Response response = givenAuth().get(urlPrefix + \"/user/preference\");\r\n\r\n    assertEquals(200, response.statusCode());\r\n    assertTrue(response.as(Preference.class).getEmail().contains(\"john\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenUpdattingPrefernce_thenCorrect() \r\n  throws JsonProcessingException {\r\n    Preference pref = givenAuth().get(urlPrefix + \"/user/preference\").as(Preference.class);\r\n    pref.setEmail(\"[[email protected]](/web/20220120083301/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    Response response = withRequestBody(givenAuth(), pref).\r\n      put(urlPrefix + \"/user/preference/\" + pref.getId());\r\n\r\n    assertEquals(200, response.statusCode());\r\n    response = givenAuth().get(urlPrefix + \"/user/preference\");\r\n    assertEquals(response.as(Preference.class).getEmail(), pref.getEmail());\r\n}\r\n```"]