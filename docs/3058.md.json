["```\r\n@Document\r\npublic class Log {\r\n    private @Id String id;\r\n    private String service;\r\n    private LogLevel level;\r\n    private String message;\r\n}\r\n```","```\r\ndb.createCollection(COLLECTION_NAME, new CreateCollectionOptions()\r\n  .capped(true)\r\n  .sizeInBytes(1024)\r\n  .maxDocuments(5));\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\r\n    <versionId>2.2.2.RELEASE</versionId>\r\n</dependency>\r\n```","```\r\nprivate Disposable subscription;\r\n\r\npublic WarnLogsCounter(ReactiveMongoOperations template) {\r\n    Flux<Log> stream = template.tail(\r\n      query(where(\"level\").is(LogLevel.WARN)), \r\n      Log.class);\r\n    subscription = stream.subscribe(logEntity -> \r\n      counter.incrementAndGet()\r\n    );\r\n}\r\n```","```\r\npublic void close() {\r\n    this.subscription.dispose();\r\n}\r\n```","```\r\npublic interface LogsRepository extends ReactiveCrudRepository<Log, String> {\r\n    @Tailable\r\n    Flux<Log> findByLevel(LogLevel level);\r\n}\r\n```","```\r\nprivate Disposable subscription;\r\n\r\npublic InfoLogsCounter(LogsRepository repository) {\r\n    Flux<Log> stream = repository.findByLevel(LogLevel.INFO);\r\n    this.subscription = stream.subscribe(logEntity -> \r\n      counter.incrementAndGet()\r\n    );\r\n}\r\n```","```\r\npublic void close() {\r\n    this.subscription.dispose();\r\n}\r\n```","```\r\nprivate String collectionName;\r\nprivate MessageListenerContainer container;\r\nprivate AtomicInteger counter = new AtomicInteger();\r\n\r\npublic ErrorLogsCounter(MongoTemplate mongoTemplate,\r\n  String collectionName) {\r\n    this.collectionName = collectionName;\r\n    this.container = new DefaultMessageListenerContainer(mongoTemplate);\r\n\r\n    container.start();\r\n    TailableCursorRequest<Log> request = getTailableCursorRequest();\r\n    container.register(request, Log.class);\r\n}\r\n\r\nprivate TailableCursorRequest<Log> getTailableCursorRequest() {\r\n    MessageListener<Document, Log> listener = message -> \r\n      counter.incrementAndGet();\r\n\r\n    return TailableCursorRequest.builder()\r\n      .collection(collectionName)\r\n      .filter(query(where(\"level\").is(LogLevel.ERROR)))\r\n      .publishTo(listener)\r\n      .build();\r\n}\r\n```","```\r\npublic void close() {\r\n    container.stop();\r\n}\r\n```"]