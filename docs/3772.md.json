["```\r\n@Service\r\npublic class FooService {\r\n\r\n    private final FooRepository repository;\r\n\r\n    @Autowired\r\n    public FooService(FooRepository repository) {\r\n        this.repository = repository\r\n    }\r\n}\r\n```","```\r\npublic class FooService {\r\n\r\n    private final FooRepository repository;\r\n\r\n    public FooService(FooRepository repository) {\r\n        this.repository = repository\r\n    }\r\n}\r\n```","```\r\n<beans>\r\n    <bean class=\"com.baeldung.spring43.ctor.FooRepository\" />\r\n    <bean class=\"com.baeldung.spring43.ctor.FooService\" />\r\n</beans>\r\n```","```\r\n@Configuration\r\npublic class FooConfiguration {\r\n\r\n    private final FooRepository repository;\r\n\r\n    public FooConfiguration(FooRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    @Bean\r\n    public FooService fooService() {\r\n        return new FooService(this.repository);\r\n    }\r\n}\r\n```","```\r\npublic interface IDateHolder {\r\n\r\n    void setLocalDate(LocalDate localDate);\r\n\r\n    LocalDate getLocalDate();\r\n\r\n    default void setStringDate(String stringDate) {\r\n        setLocalDate(LocalDate.parse(stringDate, \r\n          DateTimeFormatter.ofPattern(\"dd.MM.yyyy\")));\r\n    }\r\n\r\n} \r\n```","```\r\n<bean id=\"dateHolder\" \r\n  class=\"com.baeldung.spring43.defaultmethods.DateHolder\">\r\n    <property name=\"stringDate\" value=\"15.10.1982\"/>\r\n</bean>\r\n```","```\r\npublic interface ITransactionalTest {\r\n\r\n    Logger log = LoggerFactory.getLogger(ITransactionalTest.class);\r\n\r\n    @BeforeTransaction\r\n    default void beforeTransaction() {\r\n        log.info(\"Before opening transaction\");\r\n    }\r\n\r\n    @AfterTransaction\r\n    default void afterTransaction() {\r\n        log.info(\"After closing transaction\");\r\n    }\r\n\r\n}\r\n```","```\r\n@Service\r\npublic class FooService {\r\n\r\n    private final FooRepository repository;\r\n\r\n    public FooService(ObjectProvider<FooRepository> repositoryProvider) {\r\n        this.repository = repositoryProvider.getIfUnique();\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class FooService {\r\n\r\n    @Cacheable(cacheNames = \"foos\", sync = true)\r\n    public Foo getFoo(String id) { ... }\r\n\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/appointments\")\r\npublic class AppointmentsController {\r\n\r\n    private final AppointmentBook appointmentBook;\r\n\r\n    @Autowired\r\n    public AppointmentsController(AppointmentBook appointmentBook) {\r\n        this.appointmentBook = appointmentBook;\r\n    }\r\n\r\n    @GetMapping\r\n    public Map<String, Appointment> get() {\r\n        return appointmentBook.getAppointmentsForToday();\r\n    }\r\n}\r\n```","```\r\n@RequestScope\r\n@Component\r\npublic class LoginAction {\r\n    // ...\r\n}\r\n```","```\r\n@SessionScope\r\n@Component\r\npublic class UserPreferences {\r\n    // ...\r\n}\r\n```","```\r\n@ApplicationScope\r\n@Component\r\npublic class AppPreferences {\r\n    // ...\r\n}\r\n```","```\r\npublic class ParamInterceptor extends HandlerInterceptorAdapter {\r\n\r\n    @Override\r\n    public boolean preHandle(HttpServletRequest request, \r\n      HttpServletResponse response, Object handler) throws Exception {\r\n        request.getSession().setAttribute(\"login\", \"john\");\r\n        request.setAttribute(\"query\", \"invoices\");\r\n        return super.preHandle(request, response, handler);\r\n    }\r\n\r\n}\r\n```","```\r\n@GetMapping\r\npublic String get(@SessionAttribute String login, \r\n  @RequestAttribute String query) {\r\n    return String.format(\"login = %s, query = %s\", login, query);\r\n}\r\n```","```\r\n@Bean\r\n@Scope(\"prototype\")\r\npublic Logger logger(InjectionPoint injectionPoint) {\r\n    return Logger.getLogger(\r\n      injectionPoint.getMethodParameter().getContainingClass());\r\n}\r\n```","```\r\n@Autowired\r\nprivate Logger logger;\r\n```"]