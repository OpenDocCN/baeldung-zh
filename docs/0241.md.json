["```\r\npublic Stack reverseIntegerStack(Stack<Integer> inputStack) {\r\n    Queue<Integer> queue = new LinkedList<>();\r\n    while (!inputStack.isEmpty()) {\r\n        queue.add(inputStack.pop());\r\n    }\r\n    while (!queue.isEmpty()) {\r\n        inputStack.add(queue.remove());\r\n    }\r\n    return inputStack;\r\n} \r\n```","```\r\nprivate void reverseStack(Stack<Integer> stack) {\r\n    if (stack.isEmpty()) {\r\n        return;\r\n    }\r\n    int top = stack.pop();\r\n    reverseStack(stack);\r\n    insertBottom(stack, top);\r\n}\r\n```","```\r\nprivate void insertBottom(Stack<Integer> stack, int value) {\r\n    if (stack.isEmpty()) {\r\n        stack.add(value);\r\n    } else {\r\n        int top = stack.pop();\r\n        insertBottom(stack, value);\r\n        stack.add(top);\r\n    }\r\n}\r\n```"]