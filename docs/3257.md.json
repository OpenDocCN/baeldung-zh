["```\r\nList first = Arrays.asList(1, 3, 4, 6, 8);\r\nList second = Arrays.asList(8, 1, 6, 3, 4);\r\nList third = Arrays.asList(1, 3, 3, 6, 6);\r\n```","```\r\n@Test\r\npublic void whenTestingForOrderAgnosticEquality_ShouldBeTrue() {\r\n    assertTrue(first.size() == second.size() && first.containsAll(second) && second.containsAll(first));\r\n}\r\n```","```\r\n@Test\r\npublic void whenTestingForOrderAgnosticEquality_ShouldBeFalse() {\r\n    assertFalse(first.size() == third.size() && first.containsAll(third) && third.containsAll(first));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-core</artifactId>\r\n    <version>3.16.1</version>\r\n</dependency>\r\n```","```\r\n@Test\r\nvoid whenTestingForOrderAgnosticEqualityBothList_ShouldBeEqual() {\r\n    assertThat(first).hasSameElementsAs(second);\r\n}\r\n```","```\r\n@Test\r\nvoid whenTestingForOrderAgnosticEqualityBothList_ShouldNotBeEqual() {\r\n    List a = Arrays.asList(\"a\", \"a\", \"b\", \"c\");\r\n    List b = Arrays.asList(\"a\", \"b\", \"c\");\r\n    assertThat(a).hasSameElementsAs(b);\r\n}\r\n```","```\r\nassertThat(a).hasSize(b.size()).hasSameElementsAs(b);\r\n```","```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>hamcrest-all</artifactId>\r\n    <version>1.3</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenTestingForOrderAgnosticEquality_ShouldBeEqual() {\r\n    assertThat(first, Matchers.containsInAnyOrder(second.toArray()));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.4</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenTestingForOrderAgnosticEquality_ShouldBeTrueIfEqualOtherwiseFalse() {\r\n    assertTrue(CollectionUtils.isEqualCollection(first, second));\r\n    assertFalse(CollectionUtils.isEqualCollection(first, third));\r\n}\r\n```"]