["```\r\nFamily1:{  \r\n   'Qualifier1':'row1:cell_data',\r\n   'Qualifier2':'row2:cell_data',\r\n   'Qualifier3':'row3:cell_data'\r\n}\r\nFamily2:{  \r\n   'Qualifier1':'row1:cell_data',\r\n   'Qualifier2':'row2:cell_data',\r\n   'Qualifier3':'row3:cell_data'\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.hbase</groupId>\r\n    <artifactId>hbase-client</artifactId>\r\n    <version>${hbase.version}</version>\r\n</dependency>\r\n<dependency>\r\n     <groupId>org.apache.hbase</groupId>\r\n     <artifactId>hbase</artifactId>\r\n     <version>${hbase.version}</version>\r\n</dependency>\r\n```","```\r\nhbase master start\r\n```","```\r\n<configuration>\r\n    <property>\r\n        <name>hbase.zookeeper.quorum</name>\r\n        <value>localhost</value>\r\n    </property>\r\n    <property>\r\n        <name>hbase.zookeeper.property.clientPort</name>\r\n        <value>2181</value>\r\n    </property>\r\n</configuration> \r\n```","```\r\nConfiguration config = HBaseConfiguration.create();\r\n\r\nString path = this.getClass()\r\n  .getClassLoader()\r\n  .getResource(\"hbase-site.xml\")\r\n  .getPath();\r\nconfig.addResource(new Path(path)); \r\n```","```\r\nHBaseAdmin.checkHBaseAvailable(config);\r\n```","```\r\nprivate TableName table1 = TableName.valueOf(\"Table1\");\r\nprivate String family1 = \"Family1\";\r\nprivate String family2 = \"Family2\";\r\n```","```\r\nConnection connection = ConnectionFactory.createConnection(config)\r\nAdmin admin = connection.getAdmin();\r\n```","```\r\nHTableDescriptor desc = new HTableDescriptor(table1);\r\ndesc.addFamily(new HColumnDescriptor(family1));\r\ndesc.addFamily(new HColumnDescriptor(family2));\r\nadmin.createTable(desc);\r\n```","```\r\nbyte[] row1 = Bytes.toBytes(\"row1\")\r\nPut p = new Put(row1);\r\np.addImmutable(family1.getBytes(), qualifier1, Bytes.toBytes(\"cell_data\"));\r\ntable1.put(p);\r\n```","```\r\nGet g = new Get(row1);\r\nResult r = table1.get(g);\r\nbyte[] value = r.getValue(family1.getBytes(), qualifier1);\r\n```","```\r\nBytes.bytesToString(value)\r\n```","```\r\nScan scan = new Scan();\r\nscan.addColumn(family1.getBytes(), qualifier1);\r\n\r\nResultScanner scanner = table.getScanner(scan);\r\nfor (Result result : scanner) {\r\n    System.out.println(\"Found row: \" + result);\r\n} \r\n```","```\r\nFound row: keyvalues={Row1/Family1:Qualifier1/1488202127489/Put/vlen=9/seqid=0}\r\n```","```\r\nFilter filter1 = new PrefixFilter(row1);\r\nFilter filter2 = new QualifierFilter(\r\n  CompareOp.GREATER_OR_EQUAL, \r\n  new BinaryComparator(qualifier1));\r\nList<Filter> filters = Arrays.asList(filter1, filter2);\r\n```","```\r\nScan scan = new Scan();\r\nscan.setFilter(new FilterList(Operator.MUST_PASS_ALL, filters));\r\n\r\ntry (ResultScanner scanner = table.getScanner(scan)) {\r\n    for (Result result : scanner) {\r\n        System.out.println(\"Found row: \" + result);\r\n    }\r\n}\r\n```","```\r\nDelete delete = new Delete(row1);\r\ndelete.addColumn(family1.getBytes(), qualifier1);\r\ntable.delete(delete);\r\n```"]