["```\r\n@Test\r\npublic void givenJsonArray_whenDeserializingAsArray_thenCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    List<MyDto> listOfDtos = Lists.newArrayList(\r\n      new MyDto(\"a\", 1, true), new MyDto(\"bc\", 3, false));\r\n    String jsonArray = mapper.writeValueAsString(listOfDtos);\r\n\r\n    // [{\"stringValue\":\"a\",\"intValue\":1,\"booleanValue\":true},\r\n    // {\"stringValue\":\"bc\",\"intValue\":3,\"booleanValue\":false}]\r\n\r\n    MyDto[] asArray = mapper.readValue(jsonArray, MyDto[].class);\r\n    assertThat(asArray[0], instanceOf(MyDto.class));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonArray_whenDeserializingAsListWithNoTypeInfo_thenNotCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    List<MyDto> listOfDtos = Lists.newArrayList(\r\n      new MyDto(\"a\", 1, true), new MyDto(\"bc\", 3, false));\r\n    String jsonArray = mapper.writeValueAsString(listOfDtos);\r\n\r\n    List<MyDto> asList = mapper.readValue(jsonArray, List.class);\r\n    assertThat((Object) asList.get(0), instanceOf(LinkedHashMap.class));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonArray_whenDeserializingAsListWithTypeReferenceHelp_thenCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    List<MyDto> listOfDtos = Lists.newArrayList(\r\n      new MyDto(\"a\", 1, true), new MyDto(\"bc\", 3, false));\r\n    String jsonArray = mapper.writeValueAsString(listOfDtos);\r\n\r\n    List<MyDto> asList = mapper.readValue(\r\n      jsonArray, new TypeReference<List<MyDto>>() { });\r\n    assertThat(asList.get(0), instanceOf(MyDto.class));\r\n}\r\n```","```\r\n@Test\r\npublic void givenJsonArray_whenDeserializingAsListWithJavaTypeHelp_thenCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    List<MyDto> listOfDtos = Lists.newArrayList(\r\n      new MyDto(\"a\", 1, true), new MyDto(\"bc\", 3, false));\r\n    String jsonArray = mapper.writeValueAsString(listOfDtos);\r\n\r\n    CollectionType javaType = mapper.getTypeFactory()\r\n      .constructCollectionType(List.class, MyDto.class);\r\n    List<MyDto> asList = mapper.readValue(jsonArray, javaType);\r\n\r\n    assertThat(asList.get(0), instanceOf(MyDto.class));\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException: \r\nNo suitable constructor found for type [simple type, class org.baeldung.jackson.ignore.MyDto]: \r\ncan not instantiate from JSON object (need to add/enable type information?)\r\n```"]