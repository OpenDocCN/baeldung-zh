["```\r\n<dependency\r\n    <groupId>org.eclipse.collections</groupId>\r\n    <artifactId>eclipse-collections</artifactId>\r\n    <version>8.2.0</version>\r\n</dependency>\r\n```","```\r\nMutableList<String> list = FastList.newListWith(\r\n  \"Porsche\", \"Volkswagen\", \"Toyota\", \"Mercedes\", \"Toyota\");\r\n```","```\r\nSet<String> comparison = UnifiedSet.newSetWith(\r\n  \"Porsche\", \"Volkswagen\", \"Toyota\", \"Mercedes\");\r\n```","```\r\nMutableBag<String> bag = HashBag.newBagWith(\r\n  \"Porsche\", \"Volkswagen\", \"Toyota\", \"Porsche\", \"Mercedes\");\r\n```","```\r\nPair<Integer, String> pair1 = Tuples.pair(1, \"One\");\r\nPair<Integer, String> pair2 = Tuples.pair(2, \"Two\");\r\nPair<Integer, String> pair3 = Tuples.pair(3, \"Three\");\r\n\r\nUnifiedMap<Integer, String> map = new UnifiedMap<>(pair1, pair2, pair3);\r\n```","```\r\nUnifiedMap<Integer, String> map = new UnifiedMap<>();\r\n\r\nmap.put(1, \"one\");\r\nmap.put(2, \"two\");\r\nmap.put(3, \"three\");\r\n```","```\r\nlist.get(0);\r\n```","```\r\nmap.get(0);\r\n```","```\r\nmap.getFirst();\r\nmap.getLast();\r\n```","```\r\nmap.max();\r\nmap.min();\r\n```","```\r\n@Test\r\npublic void givenListwhenSelect_thenCorrect() {\r\n    MutableList<Integer> greaterThanThirty = list\r\n      .select(Predicates.greaterThan(30))\r\n      .sortThis();\r\n\r\n    Assertions.assertThat(greaterThanThirty)\r\n      .containsExactly(31, 38, 41);\r\n}\r\n```","```\r\nreturn list.select(i -> i > 30)\r\n  .sortThis();\r\n```","```\r\n@Test\r\npublic void whenReject_thenCorrect() {\r\n    MutableList<Integer> notGreaterThanThirty = list\r\n      .reject(Predicates.greaterThan(30))\r\n      .sortThis();\r\n\r\n    Assertions.assertThat(notGreaterThanThirty)\r\n      .containsExactlyElementsOf(this.expectedList);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCollect_thenCorrect() {\r\n    Student student1 = new Student(\"John\", \"Hopkins\");\r\n    Student student2 = new Student(\"George\", \"Adams\");\r\n\r\n    MutableList<Student> students = FastList\r\n      .newListWith(student1, student2);\r\n\r\n    MutableList<String> lastNames = students\r\n      .collect(Student::getLastName);\r\n\r\n    Assertions.assertThat(lastNames)\r\n      .containsExactly(\"Hopkins\", \"Adams\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenFlatCollect_thenCorrect() {\r\n    MutableList<String> addresses = students\r\n      .flatCollect(Student::getAddresses);\r\n\r\n    Assertions.assertThat(addresses)\r\n      .containsExactlyElementsOf(this.expectedAddresses);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDetect_thenCorrect() {\r\n    Integer result = list.detect(Predicates.greaterThan(30));\r\n\r\n    Assertions.assertThat(result)\r\n      .isEqualTo(41);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnySatisfiesCondition_thenCorrect() {\r\n    boolean result = list.anySatisfy(Predicates.greaterThan(30));\r\n\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnySatisfiesCondition_thenCorrect() {\r\n    boolean result = list.allSatisfy(Predicates.greaterThan(0));\r\n\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnySatisfiesCondition_thenCorrect() {\r\n    MutableList<Integer> numbers = list;\r\n    PartitionMutableList<Integer> partitionedFolks = numbers\r\n      .partition(i -> i > 30);\r\n\r\n    MutableList<Integer> greaterThanThirty = partitionedFolks\r\n      .getSelected()\r\n      .sortThis();\r\n    MutableList<Integer> smallerThanThirty = partitionedFolks\r\n      .getRejected()\r\n      .sortThis();\r\n\r\n    Assertions.assertThat(smallerThanThirty)\r\n      .containsExactly(1, 5, 8, 17, 23);\r\n    Assertions.assertThat(greaterThanThirty)\r\n      .containsExactly(31, 38, 41);\r\n}\r\n```","```\r\n@Test\r\npublic void whenLazyIteration_thenCorrect() {\r\n    Student student1 = new Student(\"John\", \"Hopkins\");\r\n    Student student2 = new Student(\"George\", \"Adams\");\r\n    Student student3 = new Student(\"Jennifer\", \"Rodriguez\");\r\n\r\n    MutableList<Student> students = Lists.mutable\r\n      .with(student1, student2, student3);\r\n    LazyIterable<Student> lazyStudents = students.asLazy();\r\n    LazyIterable<String> lastNames = lazyStudents\r\n      .collect(Student::getLastName);\r\n\r\n    Assertions.assertThat(lastNames)\r\n      .containsAll(Lists.mutable.with(\"Hopkins\", \"Adams\", \"Rodriguez\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenZip_thenCorrect() {\r\n    MutableList<String> numbers = Lists.mutable\r\n      .with(\"1\", \"2\", \"3\", \"Ignored\");\r\n    MutableList<String> cars = Lists.mutable\r\n      .with(\"Porsche\", \"Volvo\", \"Toyota\");\r\n    MutableList<Pair<String, String>> pairs = numbers.zip(cars);\r\n\r\n    Assertions.assertThat(pairs)\r\n      .containsExactlyElementsOf(this.expectedPairs);\r\n}\r\n```","```\r\n@Test\r\npublic void whenZip_thenCorrect() {\r\n    MutableList<String> cars = FastList\r\n      .newListWith(\"Porsche\", \"Volvo\", \"Toyota\");\r\n    MutableList<Pair<String, Integer>> pairs = cars.zipWithIndex();\r\n\r\n    Assertions.assertThat(pairs)\r\n      .containsExactlyElementsOf(this.expectedPairs);\r\n}\r\n```","```\r\npublic static List convertToList() {\r\n    UnifiedSet<String> cars = new UnifiedSet<>();\r\n\r\n    cars.add(\"Toyota\");\r\n    cars.add(\"Mercedes\");\r\n    cars.add(\"Volkswagen\");\r\n\r\n    return cars.toList();\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertContainerToAnother_thenCorrect() {\r\n    MutableList<String> cars = (MutableList) ConvertContainerToAnother \r\n      .convertToList();\r\n\r\n    Assertions.assertThat(cars)\r\n      .containsExactlyElementsOf(\r\n      FastList.newListWith(\"Volkswagen\", \"Toyota\", \"Mercedes\"));\r\n}\r\n```"]