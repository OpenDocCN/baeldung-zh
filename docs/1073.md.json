["```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\npublic class Item {\r\n    public int id;\r\n    public String itemName;\r\n    public User owner;\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenBidirectionRelation_whenSerializing_thenException()\r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    new ObjectMapper().writeValueAsString(item);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException:\r\nInfinite recursion (StackOverflowError) \r\n(through reference chain: \r\norg.baeldung.jackson.bidirection.Item[\"owner\"]\r\n->org.baeldung.jackson.bidirection.User[\"userItems\"]\r\n->java.util.ArrayList[0]\r\n->org.baeldung.jackson.bidirection.Item[\"owner\"]\r\n->â€¦..\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonManagedReference\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\npublic class Item {\r\n    public int id;\r\n    public String itemName;\r\n\r\n    @JsonBackReference\r\n    public User owner;\r\n}\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingJacksonReferenceAnnotationWithSerialization_thenCorrect() throws JsonProcessingException {\r\n    final User user = new User(1, \"John\");\r\n    final Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    final String itemJson = new ObjectMapper().writeValueAsString(item);\r\n    final String userJson = new ObjectMapper().writeValueAsString(user);\r\n\r\n    assertThat(itemJson, containsString(\"book\"));\r\n    assertThat(itemJson, not(containsString(\"John\")));\r\n\r\n    assertThat(userJson, containsString(\"John\"));\r\n    assertThat(userJson, containsString(\"userItems\"));\r\n    assertThat(userJson, containsString(\"book\"));\r\n}\r\n```","```\r\n{\r\n \"id\":2,\r\n \"itemName\":\"book\"\r\n}\r\n```","```\r\n{\r\n \"id\":1,\r\n \"name\":\"John\",\r\n \"userItems\":[{\r\n   \"id\":2,\r\n   \"itemName\":\"book\"}]\r\n}\r\n```","```\r\n@JsonBackReference\r\npublic List<Item> userItems;\r\n\r\n@JsonManagedReference\r\npublic User owner;\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class, \r\n  property = \"id\")\r\npublic class User { ... }\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class, \r\n  property = \"id\")\r\npublic class Item { ... }\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingJsonIdentityInfo_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, containsString(\"userItems\"));\r\n}\r\n```","```\r\n{\r\n \"id\":2,\r\n \"itemName\":\"book\",\r\n \"owner\":\r\n    {\r\n        \"id\":1,\r\n        \"name\":\"John\",\r\n        \"userItems\":[2]\r\n    }\r\n}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonIgnore\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingJsonIgnore_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, not(containsString(\"userItems\")));\r\n}\r\n```","```\r\n{\r\n \"id\":2,\r\n \"itemName\":\"book\",\r\n \"owner\":\r\n    {\r\n        \"id\":1,\r\n        \"name\":\"John\"\r\n    }\r\n}\r\n```","```\r\npublic class Views {\r\n    public static class Public {}\r\n\r\n    public static class Internal extends Public {}\r\n}\r\n```","```\r\npublic class User {\r\n    @JsonView(Views.Public.class)\r\n    public int id;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public String name;\r\n\r\n    @JsonView(Views.Internal.class)\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\npublic class Item {\r\n    @JsonView(Views.Public.class)\r\n    public int id;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public String itemName;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public User owner;\r\n}\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingPublicJsonView_thenCorrect() \r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writerWithView(Views.Public.class)\r\n      .writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, not(containsString(\"userItems\")));\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenBidirectionRelation_whenUsingInternalJsonView_thenException()\r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    new ObjectMapper()\r\n      .writerWithView(Views.Internal.class)\r\n      .writeValueAsString(item);\r\n}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonSerialize(using = CustomListSerializer.class)\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\npublic class CustomListSerializer extends StdSerializer<List<Item>>{\r\n\r\n   public CustomListSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomListSerializer(Class<List> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(\r\n      List<Item> items, \r\n      JsonGenerator generator, \r\n      SerializerProvider provider) \r\n      throws IOException, JsonProcessingException {\r\n\r\n        List<Integer> ids = new ArrayList<>();\r\n        for (Item item : items) {\r\n            ids.add(item.id);\r\n        }\r\n        generator.writeObject(ids);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingCustomSerializer_thenCorrect()\r\n  throws JsonProcessingException {\r\n    User user = new User(1, \"John\");\r\n    Item item = new Item(2, \"book\", user);\r\n    user.addItem(item);\r\n\r\n    String result = new ObjectMapper().writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, containsString(\"userItems\"));\r\n}\r\n```","```\r\n{\r\n \"id\":2,\r\n \"itemName\":\"book\",\r\n \"owner\":\r\n    {\r\n        \"id\":1,\r\n        \"name\":\"John\",\r\n        \"userItems\":[2]\r\n    }\r\n}\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class, \r\n  property = \"id\")\r\npublic class User { ... }\r\n```","```\r\n@JsonIdentityInfo(\r\n  generator = ObjectIdGenerators.PropertyGenerator.class, \r\n  property = \"id\")\r\npublic class Item { ... }\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenDeserializingWithIdentity_thenCorrect() \r\n  throws JsonProcessingException, IOException {\r\n    String json = \r\n      \"{\\\"id\\\":2,\\\"itemName\\\":\\\"book\\\",\\\"owner\\\":{\\\"id\\\":1,\\\"name\\\":\\\"John\\\",\\\"userItems\\\":[2]}}\";\r\n\r\n    ItemWithIdentity item\r\n      = new ObjectMapper().readerFor(ItemWithIdentity.class).readValue(json);\r\n\r\n    assertEquals(2, item.id);\r\n    assertEquals(\"book\", item.itemName);\r\n    assertEquals(\"John\", item.owner.name);\r\n}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    @JsonDeserialize(using = CustomListDeserializer.class)\r\n    public List<Item> userItems;\r\n}\r\n```","```\r\npublic class CustomListDeserializer extends StdDeserializer<List<Item>>{\r\n\r\n    public CustomListDeserializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomListDeserializer(Class<?> vc) {\r\n        super(vc);\r\n    }\r\n\r\n    @Override\r\n    public List<Item> deserialize(\r\n      JsonParser jsonparser, \r\n      DeserializationContext context) \r\n      throws IOException, JsonProcessingException {\r\n\r\n        return new ArrayList<>();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenBidirectionRelation_whenUsingCustomDeserializer_thenCorrect()\r\n  throws JsonProcessingException, IOException {\r\n    String json = \r\n      \"{\\\"id\\\":2,\\\"itemName\\\":\\\"book\\\",\\\"owner\\\":{\\\"id\\\":1,\\\"name\\\":\\\"John\\\",\\\"userItems\\\":[2]}}\";\r\n\r\n    Item item = new ObjectMapper().readerFor(Item.class).readValue(json);\r\n\r\n    assertEquals(2, item.id);\r\n    assertEquals(\"book\", item.itemName);\r\n    assertEquals(\"John\", item.owner.name);\r\n}\r\n```"]