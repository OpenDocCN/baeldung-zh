["```\r\ncurl -i -X POST -H \"Content-Type:application/json\" -d \r\n  '{ \"name\" : \"Test\", \"email\" : \"[[email protected]](/web/20221023133213/https://www.baeldung.com/cdn-cgi/l/email-protection)\" }' \r\n  http://localhost:8080/users\r\n```","```\r\n{\r\n  \"name\" : \"Test\",\r\n  \"email\" : \"[[email protected]](/web/20221023133213/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n        \"href\" : \"http://localhost:8080/users/1\"\r\n    },\r\n    \"websiteUser\" : {\r\n        \"href\" : \"http://localhost:8080/users/1\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" -d \r\n  '{ \"name\" : \"\", \"email\" : \"Baggins\" }' http://localhost:8080/users\r\n```","```\r\n{\r\n  \"name\" : \"\",\r\n  \"email\" : \"Baggins\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n        \"href\" : \"http://localhost:8080/users/1\"\r\n    },\r\n    \"websiteUser\" : {\r\n        \"href\" : \"http://localhost:8080/users/1\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" -d \r\n  '{ \"email\" : \"Baggins\" }' http://localhost:8080/users\r\n```","```\r\n{\r\n  \"name\" : null,\r\n  \"email\" : \"Baggins\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n        \"href\" : \"http://localhost:8080/users/2\"\r\n    },\r\n    \"websiteUser\" : {\r\n        \"href\" : \"http://localhost:8080/users/2\"\r\n    }\r\n  }\r\n}\r\n```","```\r\npublic class WebsiteUserValidator implements Validator {\r\n\r\n    @Override\r\n    public boolean supports(Class<?> clazz) {\r\n        return WebsiteUser.class.equals(clazz);\r\n    }\r\n\r\n    @Override\r\n    public void validate(Object obj, Errors errors) {\r\n        WebsiteUser user = (WebsiteUser) obj;\r\n        if (checkInputString(user.getName())) {\r\n            errors.rejectValue(\"name\", \"name.empty\");\r\n        }\r\n\r\n        if (checkInputString(user.getEmail())) {\r\n            errors.rejectValue(\"email\", \"email.empty\");\r\n        }\r\n    }\r\n\r\n    private boolean checkInputString(String input) {\r\n        return (input == null || input.trim().length() == 0);\r\n    }\r\n}\r\n```","```\r\n    @Component(\"beforeCreateWebsiteUserValidator\")\r\n    public class WebsiteUserValidator implements Validator {\r\n        ...\r\n    }\r\n    ```","```\r\n    @Bean\r\n    public WebsiteUserValidator beforeCreateWebsiteUserValidator() {\r\n        return new WebsiteUserValidator();\r\n    }\r\n    ```","```\r\n    @SpringBootApplication\r\n    public class SpringDataRestApplication implements RepositoryRestConfigurer {\r\n        public static void main(String[] args) {\r\n            SpringApplication.run(SpringDataRestApplication.class, args);\r\n        }\r\n\r\n        @Override\r\n        public void configureValidatingRepositoryEventListener(\r\n          ValidatingRepositoryEventListener v) {\r\n            v.addValidator(\"beforeCreate\", new WebsiteUserValidator());\r\n        }\r\n    }\r\n    ```","```\r\n@Configuration\r\npublic class ValidatorEventRegister implements InitializingBean {\r\n\r\n    @Autowired\r\n    ValidatingRepositoryEventListener validatingRepositoryEventListener;\r\n\r\n    @Autowired\r\n    private Map<String, Validator> validators;\r\n\r\n    @Override\r\n    public void afterPropertiesSet() throws Exception {\r\n        List<String> events = Arrays.asList(\"beforeCreate\");\r\n        for (Map.Entry<String, Validator> entry : validators.entrySet()) {\r\n            events.stream()\r\n              .filter(p -> entry.getKey().startsWith(p))\r\n              .findFirst()\r\n              .ifPresent(\r\n                p -> validatingRepositoryEventListener\r\n               .addValidator(p, entry.getValue()));\r\n        }\r\n    }\r\n}\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" -d \r\n  '{ \"email\" : \"[[email protected]](/web/20221023133213/https://www.baeldung.com/cdn-cgi/l/email-protection)\" }' http://localhost:8080/users\r\n```","```\r\n{  \r\n   \"timestamp\":1472510818701,\r\n   \"status\":406,\r\n   \"error\":\"Not Acceptable\",\r\n   \"exception\":\"org.springframework.data.rest.core.\r\n    RepositoryConstraintViolationException\",\r\n   \"message\":\"Validation failed\",\r\n   \"path\":\"/users\"\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class RestResponseEntityExceptionHandler extends\r\n  ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler({ RepositoryConstraintViolationException.class })\r\n    public ResponseEntity<Object> handleAccessDeniedException(\r\n      Exception ex, WebRequest request) {\r\n          RepositoryConstraintViolationException nevEx = \r\n            (RepositoryConstraintViolationException) ex;\r\n\r\n          String errors = nevEx.getErrors().getAllErrors().stream()\r\n            .map(p -> p.toString()).collect(Collectors.joining(\"\\n\"));\r\n\r\n          return new ResponseEntity<Object>(errors, new HttpHeaders(),\r\n            HttpStatus.PARTIAL_CONTENT);\r\n    }\r\n}\r\n```"]