["```\r\npublic void whenWriteStringUsingBufferedWritter_thenCorrect() \r\n  throws IOException {\r\n    String str = \"Hello\";\r\n    BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));\r\n    writer.write(str);\r\n\r\n    writer.close();\r\n}\r\n```","```\r\nHello\r\n```","```\r\n@Test\r\npublic void whenAppendStringUsingBufferedWritter_thenOldContentShouldExistToo() \r\n  throws IOException {\r\n    String str = \"World\";\r\n    BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));\r\n    writer.append(' ');\r\n    writer.append(str);\r\n\r\n    writer.close();\r\n}\r\n```","```\r\nHello World\r\n```","```\r\n@Test\r\npublic void givenWritingStringToFile_whenUsingPrintWriter_thenCorrect() \r\n  throws IOException {\r\n    FileWriter fileWriter = new FileWriter(fileName);\r\n    PrintWriter printWriter = new PrintWriter(fileWriter);\r\n    printWriter.print(\"Some String\");\r\n    printWriter.printf(\"Product name is %s and its price is %d $\", \"iPhone\", 1000);\r\n    printWriter.close();\r\n}\r\n```","```\r\nSome String\r\nProduct name is iPhone and its price is 1000$\r\n```","```\r\n@Test\r\npublic void givenWritingStringToFile_whenUsingFileOutputStream_thenCorrect() \r\n  throws IOException {\r\n    String str = \"Hello\";\r\n    FileOutputStream outputStream = new FileOutputStream(fileName);\r\n    byte[] strToBytes = str.getBytes();\r\n    outputStream.write(strToBytes);\r\n\r\n    outputStream.close();\r\n}\r\n```","```\r\nHello\r\n```","```\r\n@Test\r\npublic void givenWritingToFile_whenUsingDataOutputStream_thenCorrect() \r\n  throws IOException {\r\n    String value = \"Hello\";\r\n    FileOutputStream fos = new FileOutputStream(fileName);\r\n    DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(fos));\r\n    outStream.writeUTF(value);\r\n    outStream.close();\r\n\r\n    // verify the results\r\n    String result;\r\n    FileInputStream fis = new FileInputStream(fileName);\r\n    DataInputStream reader = new DataInputStream(fis);\r\n    result = reader.readUTF();\r\n    reader.close();\r\n\r\n    assertEquals(value, result);\r\n}\r\n```","```\r\nprivate void writeToPosition(String filename, int data, long position) \r\n  throws IOException {\r\n    RandomAccessFile writer = new RandomAccessFile(filename, \"rw\");\r\n    writer.seek(position);\r\n    writer.writeInt(data);\r\n    writer.close();\r\n}\r\n```","```\r\nprivate int readFromPosition(String filename, long position) \r\n  throws IOException {\r\n    int result = 0;\r\n    RandomAccessFile reader = new RandomAccessFile(filename, \"r\");\r\n    reader.seek(position);\r\n    result = reader.readInt();\r\n    reader.close();\r\n    return result;\r\n}\r\n```","```\r\n@Test\r\npublic void whenWritingToSpecificPositionInFile_thenCorrect() \r\n  throws IOException {\r\n    int data1 = 2014;\r\n    int data2 = 1500;\r\n\r\n    writeToPosition(fileName, data1, 4);\r\n    assertEquals(data1, readFromPosition(fileName, 4));\r\n\r\n    writeToPosition(fileName2, data2, 4);\r\n    assertEquals(data2, readFromPosition(fileName, 4));\r\n}\r\n```","```\r\n@Test\r\npublic void givenWritingToFile_whenUsingFileChannel_thenCorrect() \r\n  throws IOException {\r\n    RandomAccessFile stream = new RandomAccessFile(fileName, \"rw\");\r\n    FileChannel channel = stream.getChannel();\r\n    String value = \"Hello\";\r\n    byte[] strBytes = value.getBytes();\r\n    ByteBuffer buffer = ByteBuffer.allocate(strBytes.length);\r\n    buffer.put(strBytes);\r\n    buffer.flip();\r\n    channel.write(buffer);\r\n    stream.close();\r\n    channel.close();\r\n\r\n    // verify\r\n    RandomAccessFile reader = new RandomAccessFile(fileName, \"r\");\r\n    assertEquals(value, reader.readLine());\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void givenUsingJava7_whenWritingToFile_thenCorrect() \r\n  throws IOException {\r\n    String str = \"Hello\";\r\n\r\n    Path path = Paths.get(fileName);\r\n    byte[] strToBytes = str.getBytes();\r\n\r\n    Files.write(path, strToBytes);\r\n\r\n    String read = Files.readAllLines(path).get(0);\r\n    assertEquals(str, read);\r\n}\r\n```","```\r\n@Test\r\npublic void whenWriteToTmpFile_thenCorrect() throws IOException {\r\n    String toWrite = \"Hello\";\r\n    File tmpFile = File.createTempFile(\"test\", \".tmp\");\r\n    FileWriter writer = new FileWriter(tmpFile);\r\n    writer.write(toWrite);\r\n    writer.close();\r\n\r\n    BufferedReader reader = new BufferedReader(new FileReader(tmpFile));\r\n    assertEquals(toWrite, reader.readLine());\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenTryToLockFile_thenItShouldBeLocked() \r\n  throws IOException {\r\n    RandomAccessFile stream = new RandomAccessFile(fileName, \"rw\");\r\n    FileChannel channel = stream.getChannel();\r\n\r\n    FileLock lock = null;\r\n    try {\r\n        lock = channel.tryLock();\r\n    } catch (final OverlappingFileLockException e) {\r\n        stream.close();\r\n        channel.close();\r\n    }\r\n    stream.writeChars(\"test lock\");\r\n    lock.release();\r\n\r\n    stream.close();\r\n    channel.close();\r\n}\r\n```"]