["```\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 \r\n  (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\r\n```","```\r\npublic class MySimpleUrlAuthenticationSuccessHandler \r\n  implements AuthenticationSuccessHandler {\r\n    //...\r\n    @Override\r\n    public void onAuthenticationSuccess(\r\n      final HttpServletRequest request,\r\n      final HttpServletResponse response,\r\n      final Authentication authentication)\r\n      throws IOException {\r\n        handle(request, response, authentication);\r\n        //...\r\n        loginNotification(authentication, request);\r\n    }\r\n\r\n    private void loginNotification(Authentication authentication, \r\n      HttpServletRequest request) {\r\n        try {\r\n            if (authentication.getPrincipal() instanceof User) { \r\n                deviceService.verifyDevice(((User)authentication.getPrincipal()), request); \r\n            }\r\n        } catch(Exception e) {\r\n            logger.error(\"An error occurred verifying device or location\");\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    //...\r\n}\r\n```","```\r\n@Entity\r\npublic class DeviceMetadata {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n    private Long userId;\r\n    private String deviceDetails;\r\n    private String location;\r\n    private Date lastLoggedIn;\r\n    //...\r\n}\r\n```","```\r\npublic interface DeviceMetadataRepository extends JpaRepository<DeviceMetadata, Long> {\r\n    List<DeviceMetadata> findByUserId(Long userId);\r\n}\r\n```","```\r\nprivate String extractIp(HttpServletRequest request) {\r\n    String clientIp;\r\n    String clientXForwardedForIp = request\r\n      .getHeader(\"x-forwarded-for\");\r\n    if (nonNull(clientXForwardedForIp)) {\r\n        clientIp = parseXForwardedHeader(clientXForwardedForIp);\r\n    } else {\r\n        clientIp = request.getRemoteAddr();\r\n    }\r\n    return clientIp;\r\n}\r\n```","```\r\nprivate String getIpLocation(String ip) {\r\n    String location = UNKNOWN;\r\n    InetAddress ipAddress = InetAddress.getByName(ip);\r\n    CityResponse cityResponse = databaseReader\r\n      .city(ipAddress);\r\n\r\n    if (Objects.nonNull(cityResponse) &&\r\n      Objects.nonNull(cityResponse.getCity()) &&\r\n      !Strings.isNullOrEmpty(cityResponse.getCity().getName())) {\r\n        location = cityResponse.getCity().getName();\r\n    }    \r\n    return location;\r\n}\r\n```","```\r\nprivate String getDeviceDetails(String userAgent) {\r\n    String deviceDetails = UNKNOWN;\r\n\r\n    Client client = parser.parse(userAgent);\r\n    if (Objects.nonNull(client)) {\r\n        deviceDetails = client.userAgent.family\r\n          + \" \" + client.userAgent.major + \".\" \r\n          + client.userAgent.minor + \" - \"\r\n          + client.os.family + \" \" + client.os.major\r\n          + \".\" + client.os.minor; \r\n    }\r\n    return deviceDetails;\r\n}\r\n```","```\r\npublic void verifyDevice(User user, HttpServletRequest request) {\r\n\r\n    String ip = extractIp(request);\r\n    String location = getIpLocation(ip);\r\n\r\n    String deviceDetails = getDeviceDetails(request.getHeader(\"user-agent\"));\r\n\r\n    DeviceMetadata existingDevice\r\n      = findExistingDevice(user.getId(), deviceDetails, location);\r\n\r\n    if (Objects.isNull(existingDevice)) {\r\n        unknownDeviceNotification(deviceDetails, location,\r\n          ip, user.getEmail(), request.getLocale());\r\n\r\n        DeviceMetadata deviceMetadata = new DeviceMetadata();\r\n        deviceMetadata.setUserId(user.getId());\r\n        deviceMetadata.setLocation(location);\r\n        deviceMetadata.setDeviceDetails(deviceDetails);\r\n        deviceMetadata.setLastLoggedIn(new Date());\r\n        deviceMetadataRepository.save(deviceMetadata);\r\n    } else {\r\n        existingDevice.setLastLoggedIn(new Date());\r\n        deviceMetadataRepository.save(existingDevice);\r\n    }\r\n}\r\n```","```\r\nprivate DeviceMetadata findExistingDevice(\r\n  Long userId, String deviceDetails, String location) {\r\n    List<DeviceMetadata> knownDevices\r\n      = deviceMetadataRepository.findByUserId(userId);\r\n\r\n    for (DeviceMetadata existingDevice : knownDevices) {\r\n        if (existingDevice.getDeviceDetails().equals(deviceDetails) \r\n          && existingDevice.getLocation().equals(location)) {\r\n            return existingDevice;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```"]