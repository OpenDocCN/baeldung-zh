["```\r\npublic class Tree {\r\n    private int value;\r\n    private Tree left;\r\n    private Tree right;\r\n\r\n    public Tree(int value, Tree left, Tree right) {\r\n        this.value = value;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n} \r\n```","```\r\nprivate class Result {\r\n    private boolean isBalanced;\r\n    private int height;\r\n\r\n    private Result(boolean isBalanced, int height) {\r\n        this.isBalanced = isBalanced;\r\n        this.height = height;\r\n    }\r\n}\r\n```","```\r\nprivate Result isBalancedRecursive(Tree tree, int depth) {\r\n    if (tree == null) {\r\n        return new Result(true, -1);\r\n    }\r\n\r\n    Result leftSubtreeResult = isBalancedRecursive(tree.left(), depth + 1);\r\n    Result rightSubtreeResult = isBalancedRecursive(tree.right(), depth + 1);\r\n\r\n    boolean isBalanced = Math.abs(leftSubtreeResult.height - rightSubtreeResult.height) <= 1;\r\n    boolean subtreesAreBalanced = leftSubtreeResult.isBalanced && rightSubtreeResult.isBalanced;\r\n    int height = Math.max(leftSubtreeResult.height, rightSubtreeResult.height) + 1;\r\n\r\n    return new Result(isBalanced && subtreesAreBalanced, height);\r\n}\r\n```","```\r\npublic boolean isBalanced(Tree tree) {\r\n    return isBalancedRecursive(tree, -1).isBalanced;\r\n}\r\n```"]