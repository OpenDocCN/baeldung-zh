["```\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-core</artifactId>\r\n    <version>1.5.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.ratpack</groupId>\r\n    <artifactId>ratpack-test</artifactId>\r\n    <version>1.5.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class FooHandler implements Handler {\r\n    @Override\r\n    public void handle(Context ctx) throws Exception {\r\n        ctx.getResponse().send(\"Hello Foo!\");\r\n    }\r\n}\r\n```","```\r\nHandler allHandler = context -> {\r\n    Long id = Long.valueOf(context.getPathTokens().get(\"id\"));\r\n    Employee employee = new Employee(id, \"Mr\", \"NY\");\r\n    context.next(Registry.single(Employee.class, employee));\r\n};\r\n```","```\r\nHandler empNameHandler = ctx -> {\r\n    Employee employee = ctx.get(Employee.class);\r\n    ctx.getResponse()\r\n      .send(\"Name of employee with ID \" + employee.getId() + \" is \" + employee.getName());\r\n};\r\n```","```\r\nAction<Chain> chainAction = chain -> chain.prefix(\"employee/:id\", empChain -> {\r\n    empChain.all(allHandler)\r\n      .get(\"name\", empNameHandler)\r\n      .get(\"title\", empTitleHandler);\r\n});\r\n```","```\r\n@Test\r\npublic void givenAnyUri_GetEmployeeFromSameRegistry() throws Exception {\r\n    EmbeddedApp.fromHandlers(chainAction)\r\n      .test(testHttpClient -> {\r\n          assertEquals(\"Name of employee with ID 1 is NY\", testHttpClient.get(\"employee/1/name\")\r\n            .getBody()\r\n            .getText());\r\n          assertEquals(\"Title of employee with ID 1 is Mr\", testHttpClient.get(\"employee/1/title\")\r\n            .getBody()\r\n            .getText());\r\n      });\r\n}\r\n```","```\r\npublic class EmployeeHandler implements Handler {\r\n    @Override\r\n    public void handle(Context ctx) throws Exception {\r\n        EmployeeRepository repository = ctx.get(EmployeeRepository.class);\r\n        Long id = Long.valueOf(ctx.getPathTokens().get(\"id\"));\r\n        Promise<Employee> employeePromise = repository.findEmployeeById(id);\r\n        employeePromise.map(employee -> employee.getName())\r\n          .then(name -> ctx.getResponse()\r\n          .send(name));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenSyncDataSource_GetDataFromPromise() throws Exception {\r\n    String value = ExecHarness.yieldSingle(execution -> Promise.sync(() -> \"Foo\"))\r\n      .getValueOrThrow();\r\n    assertEquals(\"Foo\", value);\r\n}\r\n```","```\r\nHttpClient httpClient = HttpClient.of(httpClientSpec -> {\r\n    httpClientSpec.poolSize(10)\r\n      .connectTimeout(Duration.of(60, ChronoUnit.SECONDS))\r\n      .maxContentLength(ServerConfig.DEFAULT_MAX_CONTENT_LENGTH)\r\n      .responseMaxChunkSize(16384)\r\n      .readTimeout(Duration.of(60, ChronoUnit.SECONDS))\r\n      .byteBufAllocator(PooledByteBufAllocator.DEFAULT);\r\n});\r\n```","```\r\npublic class RedirectHandler implements Handler {\r\n\r\n    @Override\r\n    public void handle(Context ctx) throws Exception {\r\n        HttpClient client = ctx.get(HttpClient.class);\r\n        URI uri = URI.create(\"http://localhost:5050/employee/1\");\r\n        Promise<ReceivedResponse> responsePromise = client.get(uri);\r\n        responsePromise.map(response -> response.getBody()\r\n          .getText()\r\n          .toUpperCase())\r\n          .then(responseText -> ctx.getResponse()\r\n            .send(responseText));\r\n    }\r\n}\r\n```","```\r\ncurl http://localhost:5050/redirect\r\nJANE DOE\r\n```"]