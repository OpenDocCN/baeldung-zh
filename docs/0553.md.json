["```\r\n<dependency>\r\n    <groupId>javax.enterprise</groupId>\r\n    <artifactId>cdi-api</artifactId>\r\n    <version>2.0.SP1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jboss.weld.se</groupId>\r\n    <artifactId>weld-se-core</artifactId>\r\n    <version>3.0.5.Final</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nDataSource dataSource = //...\r\nFlyway flyway = new Flyway();\r\nflyway.setDataSource(dataSource);\r\nflyway.migrate();\r\n```","```\r\npublic class FlywayExtension implements Extension {\r\n}\r\n```","```\r\ncom.baeldung.cdi.extension.FlywayExtension\r\n```","```\r\npublic void registerFlywayType(\r\n  @Observes BeforeBeanDiscovery bbdEvent) {\r\n    bbdEvent.addAnnotatedType(\r\n      Flyway.class, Flyway.class.getName());\r\n}\r\n```","```\r\npublic void processAnnotatedType(@Observes ProcessAnnotatedType<Flyway> patEvent) {\r\n    patEvent.configureAnnotatedType()\r\n      .add(ApplicationScoped.Literal.INSTANCE)\r\n      .add(new AnnotationLiteral<FlywayType>() {})\r\n      .filterMethods(annotatedMethod -> {\r\n          return annotatedMethod.getParameters().size() == 1\r\n            && annotatedMethod.getParameters().get(0).getBaseType()\r\n              .equals(javax.sql.DataSource.class);\r\n      }).findFirst().get().add(InjectLiteral.INSTANCE);\r\n}\r\n```","```\r\n@ApplicationScoped\r\n@FlywayType\r\npublic class Flyway {\r\n\r\n    //...\r\n    @Inject\r\n    public void setDataSource(DataSource dataSource) {\r\n      //...\r\n    }\r\n}\r\n```","```\r\nvoid afterBeanDiscovery(@Observes AfterBeanDiscovery abdEvent, BeanManager bm) {\r\n    abdEvent.addBean()\r\n      .types(javax.sql.DataSource.class, DataSource.class)\r\n      .qualifiers(new AnnotationLiteral<Default>() {}, new AnnotationLiteral<Any>() {})\r\n      .scope(ApplicationScoped.class)\r\n      .name(DataSource.class.getName())\r\n      .beanClass(DataSource.class)\r\n      .createWith(creationalContext -> {\r\n          DataSource instance = new DataSource();\r\n          instance.setUrl(dataSourceDefinition.url());\r\n          instance.setDriverClassName(dataSourceDefinition.className());\r\n              return instance;\r\n      });\r\n}\r\n```","```\r\n@DataSourceDefinition(\r\n  name = \"ds\", \r\n  className = \"org.h2.Driver\", \r\n  url = \"jdbc:h2:mem:testdb\")\r\n```","```\r\npublic void detectDataSourceDefinition(\r\n  @Observes @WithAnnotations(DataSourceDefinition.class) ProcessAnnotatedType<?> patEvent) {\r\n    AnnotatedType at = patEvent.getAnnotatedType();\r\n    dataSourceDefinition = at.getAnnotation(DataSourceDefinition.class);\r\n}\r\n```","```\r\nvoid runFlywayMigration(\r\n  @Observes AfterDeploymentValidation adv, \r\n  BeanManager manager) {\r\n    Flyway flyway = manager.createInstance()\r\n      .select(Flyway.class, new AnnotationLiteral<FlywayType>() {}).get();\r\n    flyway.migrate();\r\n}\r\n```"]