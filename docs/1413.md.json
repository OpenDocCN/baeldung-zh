["```\r\n<dependency>\r\n    <groupId>javax.batch</groupId>\r\n    <artifactId>javax.batch-api</artifactId>\r\n    <version>1.0.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jberet</groupId>\r\n    <artifactId>jberet-core</artifactId>\r\n    <version>1.0.2.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jberet</groupId>\r\n    <artifactId>jberet-support</artifactId>\r\n    <version>1.0.2.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.jberet</groupId>\r\n    <artifactId>jberet-se</artifactId>\r\n    <version>1.0.2.Final</version>\r\n</dependency>\r\n```","```\r\n@Named\r\npublic class SimpleChunkItemReader extends AbstractItemReader {\r\n    private Integer[] tokens;\r\n    private Integer count;\r\n\r\n    @Inject\r\n    JobContext jobContext;\r\n\r\n    @Override\r\n    public Integer readItem() throws Exception {\r\n        if (count >= tokens.length) { \r\n            return null;\r\n        }\r\n\r\n        jobContext.setTransientUserData(count);\r\n        return tokens[count++];\r\n    }\r\n\r\n    @Override\r\n    public void open(Serializable checkpoint) throws Exception {\r\n        tokens = new Integer[] { 1,2,3,4,5,6,7,8,9,10 };\r\n        count = 0;\r\n    }\r\n}\r\n```","```\r\n@Named\r\npublic class SimpleChunkItemProcessor implements ItemProcessor {\r\n    @Override\r\n    public Integer processItem(Object t) {\r\n        Integer item = (Integer) t;\r\n        return item % 2 == 0 ? item : null;\r\n    }\r\n}\r\n```","```\r\n@Named\r\npublic class SimpleChunkWriter extends AbstractItemWriter {\r\n    List<Integer> processed = new ArrayList<>();\r\n    @Override\r\n    public void writeItems(List<Object> items) throws Exception {\r\n        items.stream().map(Integer.class::cast).forEach(processed::add);\r\n    }\r\n} \r\n```","```\r\n<job id=\"simpleChunk\">\r\n    <step id=\"firstChunkStep\" >\r\n        <chunk item-count=\"3\">\r\n            <reader ref=\"simpleChunkItemReader\"/>\r\n            <processor ref=\"simpleChunkItemProcessor\"/>\r\n            <writer ref=\"simpleChunkWriter\"/>\r\n        </chunk>    \r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenChunk_thenBatch_completesWithSuccess() throws Exception {\r\n    JobOperator jobOperator = BatchRuntime.getJobOperator();\r\n    Long executionId = jobOperator.start(\"simpleChunk\", new Properties());\r\n    JobExecution jobExecution = jobOperator.getJobExecution(executionId);\r\n    jobExecution = BatchTestHelper.keepTestAlive(jobExecution);\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n} \r\n```","```\r\n@Named\r\npublic class SimpleBatchLet extends AbstractBatchlet {\r\n\r\n    @Override\r\n    public String process() throws Exception {\r\n        return BatchStatus.COMPLETED.toString();\r\n    }\r\n}\r\n```","```\r\n<job id=\"simpleBatchLet\">\r\n    <step id=\"firstStep\" >\r\n        <batchlet ref=\"simpleBatchLet\"/>\r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenBatchlet_thenBatch_completeWithSuccess() throws Exception {\r\n    JobOperator jobOperator = BatchRuntime.getJobOperator();\r\n    Long executionId = jobOperator.start(\"simpleBatchLet\", new Properties());\r\n    JobExecution jobExecution = jobOperator.getJobExecution(executionId);\r\n    jobExecution = BatchTestHelper.keepTestAlive(jobExecution);\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n@Named\r\npublic class CustomCheckPoint extends AbstractCheckpointAlgorithm {\r\n\r\n    @Inject\r\n    JobContext jobContext;\r\n\r\n    @Override\r\n    public boolean isReadyToCheckpoint() throws Exception {\r\n        int counterRead = (Integer) jobContext.getTransientUserData();\r\n        return counterRead % 5 == 0;\r\n    }\r\n}\r\n```","```\r\n<job id=\"customCheckPoint\">\r\n    <step id=\"firstChunkStep\" >\r\n        <chunk item-count=\"3\" checkpoint-policy=\"custom\">\r\n            <reader ref=\"simpleChunkItemReader\"/>\r\n            <processor ref=\"simpleChunkItemProcessor\"/>\r\n            <writer ref=\"simpleChunkWriter\"/>\r\n            <checkpoint-algorithm ref=\"customCheckPoint\"/>\r\n        </chunk>    \r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenChunk_whenCustomCheckPoint_thenCommitCountIsThree() throws Exception {\r\n    // ... start job and wait for completion\r\n\r\n    jobOperator.getStepExecutions(executionId)\r\n      .stream()\r\n      .map(BatchTestHelper::getCommitCount)\r\n      .forEach(count -> assertEquals(3L, count.longValue()));\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n@Override\r\npublic Integer readItem() throws Exception {\r\n    if (tokens.hasMoreTokens()) {\r\n        String tempTokenize = tokens.nextToken();\r\n        throw new RuntimeException();\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@Test\r\npublic void whenChunkError_thenBatch_CompletesWithFailed() throws Exception {\r\n    // ... start job and wait for completion\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.FAILED);\r\n}\r\n```","```\r\n<job id=\"simpleErrorSkipChunk\" >\r\n    <step id=\"errorStep\" >\r\n        <chunk checkpoint-policy=\"item\" item-count=\"3\" skip-limit=\"3\" retry-limit=\"3\">\r\n            <reader ref=\"myItemReader\"/>\r\n            <processor ref=\"myItemProcessor\"/>\r\n            <writer ref=\"myItemWriter\"/>\r\n            <skippable-exception-classes>\r\n                <include class=\"java.lang.RuntimeException\"/>\r\n                <include class=\"java.lang.UnsupportedOperationException\"/>\r\n            </skippable-exception-classes>\r\n            <retryable-exception-classes>\r\n                <include class=\"java.lang.IllegalArgumentException\"/>\r\n                <include class=\"java.lang.UnsupportedOperationException\"/>\r\n            </retryable-exception-classes>\r\n        </chunk>\r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenChunkError_thenErrorSkipped_CompletesWithSuccess() throws Exception {\r\n   // ... start job and wait for completion\r\n   jobOperator.getStepExecutions(executionId).stream()\r\n     .map(BatchTestHelper::getProcessSkipCount)\r\n     .forEach(skipCount -> assertEquals(1L, skipCount.longValue()));\r\n   assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n<job id=\"simpleJobSequence\">\r\n    <step id=\"firstChunkStepStep1\" next=\"firstBatchStepStep2\">\r\n        <chunk item-count=\"3\">\r\n            <reader ref=\"simpleChunkItemReader\"/>\r\n            <processor ref=\"simpleChunkItemProcessor\"/>\r\n            <writer ref=\"simpleChunkWriter\"/>\r\n        </chunk>    \r\n    </step>\r\n    <step id=\"firstBatchStepStep2\" >\r\n        <batchlet ref=\"simpleBatchLet\"/>\r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenTwoSteps_thenBatch_CompleteWithSuccess() throws Exception {\r\n    // ... start job and wait for completion\r\n    assertEquals(2 , jobOperator.getStepExecutions(executionId).size());\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n<job id=\"flowJobSequence\">\r\n    <flow id=\"flow1\" next=\"firstBatchStepStep3\">\r\n        <step id=\"firstChunkStepStep1\" next=\"firstBatchStepStep2\">\r\n            <chunk item-count=\"3\">\r\n\t        <reader ref=\"simpleChunkItemReader\" />\r\n\t\t<processor ref=\"simpleChunkItemProcessor\" />\r\n\t\t<writer ref=\"simpleChunkWriter\" />\r\n\t    </chunk>\r\n\t</step>\r\n\t<step id=\"firstBatchStepStep2\">\r\n\t    <batchlet ref=\"simpleBatchLet\" />\r\n\t</step>\r\n    </flow>\r\n    <step id=\"firstBatchStepStep3\">\r\n\t <batchlet ref=\"simpleBatchLet\" />\r\n    </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenFlow_thenBatch_CompleteWithSuccess() throws Exception {\r\n    // ... start job and wait for completion\r\n\r\n    assertEquals(3, jobOperator.getStepExecutions(executionId).size());\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n<job id=\"decideJobSequence\">\r\n     <step id=\"firstBatchStepStep1\" next=\"firstDecider\">\r\n\t <batchlet ref=\"simpleBatchLet\" />\r\n     </step>\t\r\n     <decision id=\"firstDecider\" ref=\"deciderJobSequence\">\r\n        <next on=\"two\" to=\"firstBatchStepStep2\"/>\r\n        <next on=\"three\" to=\"firstBatchStepStep3\"/>\r\n     </decision>\r\n     <step id=\"firstBatchStepStep2\">\r\n\t<batchlet ref=\"simpleBatchLet\" />\r\n     </step>\t\r\n     <step id=\"firstBatchStepStep3\">\r\n\t<batchlet ref=\"simpleBatchLet\" />\r\n     </step>\t\t\r\n</job>\r\n```","```\r\n<job id=\"splitJobSequence\">\r\n   <split id=\"split1\" next=\"splitJobSequenceStep3\">\r\n      <flow id=\"flow1\">\r\n\t  <step id=\"splitJobSequenceStep1\">\r\n              <batchlet ref=\"simpleBatchLet\" />\r\n           </step>\r\n      </flow>\r\n      <flow id=\"flow2\">\r\n          <step id=\"splitJobSequenceStep2\">\r\n              <batchlet ref=\"simpleBatchLet\" />\r\n\t  </step>\r\n      </flow>\r\n   </split>\r\n   <step id=\"splitJobSequenceStep3\">\r\n      <batchlet ref=\"simpleBatchLet\" />\r\n   </step>\r\n</job>\r\n```","```\r\n@Test\r\npublic void givenSplit_thenBatch_CompletesWithSuccess() throws Exception {\r\n    // ... start job and wait for completion\r\n    List<StepExecution> stepExecutions = jobOperator.getStepExecutions(executionId);\r\n\r\n    assertEquals(3, stepExecutions.size());\r\n    assertEquals(\"splitJobSequenceStep3\", stepExecutions.get(2).getStepName());\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n@Inject\r\nJobContext jobContext;\r\n...\r\njobProperties = jobContext.getProperties();\r\n...\r\n```","```\r\n@Inject\r\nStepContext stepContext;\r\n...\r\nstepProperties = stepContext.getProperties();\r\n...\r\n```","```\r\n@Inject\r\n@BatchProperty(name = \"name\")\r\nprivate String nameString;\r\n```","```\r\n<job id=\"injectSimpleBatchLet\">\r\n    <properties>\r\n        <property name=\"jobProp1\" value=\"job-value1\"/>\r\n    </properties>\r\n    <step id=\"firstStep\">\r\n        <properties>\r\n            <property name=\"stepProp1\" value=\"value1\" />\r\n        </properties>\r\n\t<batchlet ref=\"injectSimpleBatchLet\">\r\n\t    <properties>\r\n\t\t<property name=\"name\" value=\"#{partitionPlan['name']}\" />\r\n\t    </properties>\r\n\t</batchlet>\r\n\t<partition>\r\n\t    <plan partitions=\"2\">\r\n\t\t<properties partition=\"0\">\r\n\t\t    <property name=\"name\" value=\"firstPartition\" />\r\n\t\t</properties>\r\n\t\t<properties partition=\"1\">\r\n\t\t    <property name=\"name\" value=\"secondPartition\" />\r\n\t\t</properties>\r\n\t    </plan>\r\n\t</partition>\r\n    </step>\r\n</job>\r\n```","```\r\nJobOperator jobOperator = BatchRuntime.getJobOperator();\r\n```","```\r\nLong executionId = jobOperator.start(\"simpleBatchlet\", new Properties());\r\n```","```\r\njobOperator.stop(executionId);\r\n```","```\r\nexecutionId = jobOperator.restart(executionId, new Properties());\r\n```","```\r\n@Test\r\npublic void givenBatchLetStarted_whenStopped_thenBatchStopped() throws Exception {\r\n    JobOperator jobOperator = BatchRuntime.getJobOperator();\r\n    Long executionId = jobOperator.start(\"simpleBatchLet\", new Properties());\r\n    JobExecution jobExecution = jobOperator.getJobExecution(executionId);\r\n    jobOperator.stop(executionId);\r\n    jobExecution = BatchTestHelper.keepTestStopped(jobExecution);\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.STOPPED);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBatchLetStopped_whenRestarted_thenBatchCompletesSuccess() {\r\n    // ... start and stop the job\r\n\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.STOPPED);\r\n    executionId = jobOperator.restart(jobExecution.getExecutionId(), new Properties());\r\n    jobExecution = BatchTestHelper.keepTestAlive(jobOperator.getJobExecution(executionId));\r\n\r\n    assertEquals(jobExecution.getBatchStatus(), BatchStatus.COMPLETED);\r\n}\r\n```","```\r\n@Test\r\npublic void givenChunk_whenJobStarts_thenStepsHaveMetrics() throws Exception {\r\n    // ... start job and wait for completion\r\n    assertTrue(jobOperator.getJobNames().contains(\"simpleChunk\"));\r\n    assertTrue(jobOperator.getParameters(executionId).isEmpty());\r\n    StepExecution stepExecution = jobOperator.getStepExecutions(executionId).get(0);\r\n    Map<Metric.MetricType, Long> metricTest = BatchTestHelper.getMetricsMap(stepExecution.getMetrics());\r\n    assertEquals(10L, metricTest.get(Metric.MetricType.READ_COUNT).longValue());\r\n    assertEquals(5L, metricTest.get(Metric.MetricType.FILTER_COUNT).longValue());\r\n    assertEquals(4L, metricTest.get(Metric.MetricType.COMMIT_COUNT).longValue());\r\n    assertEquals(5L, metricTest.get(Metric.MetricType.WRITE_COUNT).longValue());\r\n    // ... and many more!\r\n}\r\n```"]