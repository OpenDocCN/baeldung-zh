["```\r\n<dependency>\r\n    <groupId>org.springframework.kafka</groupId>\r\n    <artifactId>spring-kafka</artifactId>\r\n    <version>2.7.2</version>\r\n</dependency>\r\n```","```\r\n---\r\nversion: '2'\r\nservices:\r\n  zookeeper:\r\n    image: confluentinc/cp-zookeeper:6.2.0\r\n    environment:\r\n      ZOOKEEPER_CLIENT_PORT: 2181\r\n      ZOOKEEPER_TICK_TIME: 2000\r\n\r\n  kafka:\r\n    image: confluentinc/cp-kafka:6.2.0\r\n    depends_on:\r\n      - zookeeper\r\n    ports:\r\n      - 9092:9092\r\n    environment:\r\n      KAFKA_BROKER_ID: 1\r\n      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\r\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\r\n      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'\r\n      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 \r\n```","```\r\ndocker-compose up\r\n```","```\r\nlisteners=PLAINTEXT://kafka1:9092,SSL://kafka1:9093\r\nadvertised.listeners=PLAINTEXT://localhost:9092,SSL://localhost:9093\r\n```","```\r\nssl.keystore.location=/certs/kafka.server.keystore.jks\r\nssl.keystore.password=password\r\nssl.truststore.location=/certs/kafka.server.truststore.jks\r\nssl.truststore.password=password\r\nssl.key.password=password\r\n```","```\r\nssl.client.auth=required\r\n```","```\r\nkafka:\r\n  image: confluentinc/cp-kafka:6.2.0\r\n  depends_on:\r\n    - zookeeper\r\n  ports:\r\n    - 9092:9092\r\n    - 9093:9093\r\n  environment:\r\n    ...\r\n    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,SSL://localhost:9093\r\n    KAFKA_SSL_CLIENT_AUTH: 'required'\r\n    KAFKA_SSL_KEYSTORE_FILENAME: '/certs/kafka.server.keystore.jks'\r\n    KAFKA_SSL_KEYSTORE_CREDENTIALS: '/certs/kafka_keystore_credentials'\r\n    KAFKA_SSL_KEY_CREDENTIALS: '/certs/kafka_sslkey_credentials'\r\n    KAFKA_SSL_TRUSTSTORE_FILENAME: '/certs/kafka.server.truststore.jks'\r\n    KAFKA_SSL_TRUSTSTORE_CREDENTIALS: '/certs/kafka_truststore_credentials'\r\n  volumes:\r\n    - ./certs/:/etc/kafka/secrets/certs\r\n```","```\r\n...\r\nkafka_1      | uid=1000(appuser) gid=1000(appuser) groups=1000(appuser)\r\nkafka_1      | ===> Configuring ...\r\n<strong>kafka_1      | SSL is enabled.</strong>\r\n....\r\nkafka_1      | [2021-08-20 22:45:10,772] INFO KafkaConfig values:\r\n<strong>kafka_1      |  advertised.listeners = PLAINTEXT://localhost:9092,SSL://localhost:9093\r\nkafka_1      |  ssl.client.auth = required</strong>\r\n<strong>kafka_1      |  ssl.enabled.protocols = [TLSv1.2, TLSv1.3]</strong>\r\nkafka_1      |  ssl.endpoint.identification.algorithm = https\r\nkafka_1      |  ssl.key.password = [hidden]\r\nkafka_1      |  ssl.keymanager.algorithm = SunX509\r\n<strong>kafka_1      |  ssl.keystore.location = /etc/kafka/secrets/certs/kafka.server.keystore.jks</strong>\r\nkafka_1      |  ssl.keystore.password = [hidden]\r\nkafka_1      |  ssl.keystore.type = JKS\r\nkafka_1      |  ssl.principal.mapping.rules = DEFAULT\r\n<strong>kafka_1      |  ssl.protocol = TLSv1.3</strong>\r\nkafka_1      |  ssl.trustmanager.algorithm = PKIX\r\nkafka_1      |  ssl.truststore.certificates = null\r\n<strong>kafka_1      |  ssl.truststore.location = /etc/kafka/secrets/certs/kafka.server.truststore.jks</strong>\r\nkafka_1      |  ssl.truststore.password = [hidden]\r\nkafka_1      |  ssl.truststore.type = JKS\r\n....\r\n```","```\r\npublic class KafkaProducer {\r\n\r\n    private final KafkaTemplate<String, String> kafkaTemplate;\r\n\r\n    public void sendMessage(String message, String topic) {\r\n        log.info(\"Producing message: {}\", message);\r\n        kafkaTemplate.send(topic, \"key\", message)\r\n          .addCallback(\r\n            result -> log.info(\"Message sent to topic: {}\", message),\r\n            ex -> log.error(\"Failed to send message\", ex)\r\n          );\r\n    }\r\n}\r\n```","```\r\npublic class KafkaConsumer {\r\n\r\n    public static final String TOPIC = \"test-topic\";\r\n\r\n    public final List<String> messages = new ArrayList<>();\r\n\r\n    @KafkaListener(topics = TOPIC)\r\n    public void receive(ConsumerRecord<String, String> consumerRecord) {\r\n        log.info(\"Received payload: '{}'\", consumerRecord.toString());\r\n        messages.add(consumerRecord.value());\r\n    }\r\n}\r\n```","```\r\nspring:\r\n  kafka:\r\n    security:\r\n      protocol: \"SSL\"\r\n    bootstrap-servers: localhost:9093\r\n    ssl:\r\n      trust-store-location: classpath:/client-certs/kafka.client.truststore.jks\r\n      trust-store-password: <password>\r\n      key-store-location:  classpath:/client-certs/kafka.client.keystore.jks\r\n      key-store-password: <password>\r\n\r\n    # additional config for producer/consumer \r\n```","```\r\n@ActiveProfiles(\"ssl\")\r\n@Testcontainers\r\n@SpringBootTest(classes = KafkaSslApplication.class)\r\nclass KafkaSslApplicationLiveTest {\r\n\r\n    private static final String KAFKA_SERVICE = \"kafka\";\r\n    private static final int SSL_PORT = 9093;  \r\n\r\n    @Container\r\n    public DockerComposeContainer<?> container =\r\n      new DockerComposeContainer<>(KAFKA_COMPOSE_FILE)\r\n        .withExposedService(KAFKA_SERVICE, SSL_PORT, Wait.forListeningPort());\r\n\r\n    @Autowired\r\n    private KafkaProducer kafkaProducer;\r\n\r\n    @Autowired\r\n    private KafkaConsumer kafkaConsumer;\r\n\r\n    @Test\r\n    void givenSslIsConfigured_whenProducerSendsMessageOverSsl_thenConsumerReceivesOverSsl() {\r\n        String message = generateSampleMessage();\r\n        kafkaProducer.sendMessage(message, TOPIC);\r\n\r\n        await().atMost(Duration.ofMinutes(2))\r\n          .untilAsserted(() -> assertThat(kafkaConsumer.messages).containsExactly(message));\r\n    }\r\n\r\n    private static String generateSampleMessage() {\r\n        return UUID.randomUUID().toString();\r\n    }\r\n}\r\n```"]