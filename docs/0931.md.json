["```\r\npublic interface Sender {\r\n    void send(File fileToBeSent);\r\n}\r\n```","```\r\npublic class ImageSender implements Sender {\r\n    @Override\r\n    public void send(File fileToBeSent) {\r\n        // image sending implementation code.\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenImageUploaded_whenButtonClicked_thenSendImage() { \r\n\r\n    File imageFile = new File(IMAGE_FILE_PATH);\r\n\r\n    Sender sender = new ImageSender();\r\n    sender.send(imageFile);\r\n}\r\n```","```\r\npublic abstract class Vehicle {\r\n\r\n    protected abstract void start();\r\n    protected abstract void stop();\r\n    protected abstract void drive();\r\n    protected abstract void changeGear();\r\n    protected abstract void reverse();\r\n\r\n    // standard getters and setters\r\n} \r\n```","```\r\npublic class Car extends Vehicle {\r\n\r\n    @Override\r\n    protected void start() {\r\n        // code implementation details on starting a car.\r\n    }\r\n\r\n    @Override\r\n    protected void stop() {\r\n        // code implementation details on stopping a car.\r\n    }\r\n\r\n    @Override\r\n    protected void drive() {\r\n        // code implementation details on start driving a car.\r\n    }\r\n\r\n    @Override\r\n    protected void changeGear() {\r\n        // code implementation details on changing the car gear.\r\n    }\r\n\r\n    @Override\r\n    protected void reverse() {\r\n        // code implementation details on reverse driving a car.\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenVehicle_whenNeedToDrive_thenStart() {\r\n\r\n    Vehicle car = new Car(\"BMW\");\r\n\r\n    car.start();\r\n    car.drive();\r\n    car.changeGear();\r\n    car.stop();\r\n}\r\n```"]