["```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.setSerializationInclusion(Include.NON_NULL);\r\n```","```\r\n@Test\r\npublic void givenIgnoringNullValuesInMap_whenWritingMapObjectWithNullValue_thenIgnored() \r\n  throws JsonProcessingException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setSerializationInclusion(Include.NON_NULL);\r\n\r\n    MyDto dtoObject1 = new MyDto();\r\n\r\n    Map<String, MyDto> dtoMap = new HashMap<String, MyDto>();\r\n    dtoMap.put(\"dtoObject1\", dtoObject1);\r\n    dtoMap.put(\"dtoObject2\", null);\r\n\r\n    String dtoMapAsString = mapper.writeValueAsString(dtoMap);\r\n\r\n    assertThat(dtoMapAsString, containsString(\"dtoObject1\"));\r\n    assertThat(dtoMapAsString, not(containsString(\"dtoObject2\")));\r\n}\r\n```","```\r\nc.f.j.c.JsonGenerationException: \r\n  Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)\r\n    at c.f.j.d.s.i.FailingSerializer.serialize(FailingSerializer.java:36)\r\n```","```\r\nclass MyDtoNullKeySerializer extends StdSerializer<Object> {\r\n    public MyDtoNullKeySerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public MyDtoNullKeySerializer(Class<Object> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(Object nullKey, JsonGenerator jsonGenerator, SerializerProvider unused) \r\n      throws IOException, JsonProcessingException {\r\n        jsonGenerator.writeFieldName(\"\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenAllowingMapObjectWithNullKey_whenWriting_thenCorrect() \r\nthrows JsonProcessingException {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.getSerializerProvider().setNullKeySerializer(new MyDtoNullKeySerializer());\r\n\r\n    MyDto dtoObject = new MyDto();\r\n    dtoObject.setStringValue(\"dtoObjectString\");\r\n\r\n    Map<String, MyDto> dtoMap = new HashMap<String, MyDto>();\r\n    dtoMap.put(null, dtoObject);\r\n\r\n    String dtoMapAsString = mapper.writeValueAsString(dtoMap);\r\n\r\n    assertThat(dtoMapAsString, containsString(\"\\\"\\\"\"));\r\n    assertThat(dtoMapAsString, containsString(\"dtoObjectString\"));\r\n}\r\n```"]