["```\r\nprivate static final String CIPHER = \"AES\"; \r\n```","```\r\nprivate static Key getRandomKey(String cipher, int keySize) {\r\n    byte[] randomKeyBytes = new byte[keySize / 8];\r\n    Random random = new Random();\r\n    random.nextBytes(randomKeyBytes);\r\n    return new SecretKeySpec(randomKeyBytes, cipher);\r\n}\r\n```","```\r\nprivate static Key getSecureRandomKey(String cipher, int keySize) {\r\n    byte[] secureRandomKeyBytes = new byte[keySize / 8];\r\n    SecureRandom secureRandom = new SecureRandom();\r\n    secureRandom.nextBytes(secureRandomKeyBytes);\r\n    return new SecretKeySpec(secureRandomKeyBytes, cipher);\r\n}\r\n```","```\r\nprivate static Key getKeyFromKeyGenerator(String cipher, int keySize) throws NoSuchAlgorithmException {\r\n    KeyGenerator keyGenerator = KeyGenerator.getInstance(cipher);\r\n    keyGenerator.init(keySize);\r\n    return keyGenerator.generateKey();\r\n}\r\n```","```\r\nencrypt(plainText, getSecureRandomKey(CIPHER, 111)); \r\n```","```\r\njava.security.InvalidKeyException: Invalid AES key length: 13 bytes\r\n  at java.base/com.sun.crypto.provider.AESCrypt.init(AESCrypt.java:90)\r\n  at java.base/com.sun.crypto.provider.GaloisCounterMode.init(GaloisCounterMode.java:321)\r\n  at java.base/com.sun.crypto.provider.CipherCore.init(CipherCore.java:592)\r\n  at java.base/com.sun.crypto.provider.CipherCore.init(CipherCore.java:470)\r\n  at java.base/com.sun.crypto.provider.AESCipher.engineInit(AESCipher.java:322)\r\n  at java.base/javax.crypto.Cipher.implInit(Cipher.java:867)\r\n  at java.base/javax.crypto.Cipher.chooseProvider(Cipher.java:929)\r\n  at java.base/javax.crypto.Cipher.init(Cipher.java:1299)\r\n  at java.base/javax.crypto.Cipher.init(Cipher.java:1236)\r\n  at com.baeldung.secretkey.Main.encrypt(Main.java:59)\r\n  at com.baeldung.secretkey.Main.main(Main.java:51)\r\n```","```\r\nencrypt(plainText, getKeyFromKeyGenerator(CIPHER, 111));\r\n```","```\r\njava.security.InvalidParameterException: Wrong keysize: must be equal to 128, 192 or 256\r\n  at java.base/com.sun.crypto.provider.AESKeyGenerator.engineInit(AESKeyGenerator.java:93)\r\n  at java.base/javax.crypto.KeyGenerator.init(KeyGenerator.java:539)\r\n  at java.base/javax.crypto.KeyGenerator.init(KeyGenerator.java:516)\r\n  at com.baeldung.secretkey.Main.getKeyFromKeyGenerator(Main.java:89)\r\n  at com.baeldung.secretkey.Main.main(Main.java:58)\r\n```","```\r\npublic final void init(int keysize) {\r\n    init(keysize, JCAUtil.getSecureRandom());\r\n}\r\n```","```\r\nprivate static Key getPasswordBasedKey(String cipher, int keySize, char[] password) throws NoSuchAlgorithmException, InvalidKeySpecException {\r\n    byte[] salt = new byte[100];\r\n    SecureRandom random = new SecureRandom();\r\n    random.nextBytes(salt);\r\n    PBEKeySpec pbeKeySpec = new PBEKeySpec(password, salt, 1000, keySize);\r\n    SecretKey pbeKey = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\").generateSecret(pbeKeySpec);\r\n    return new SecretKeySpec(pbeKey.getEncoded(), cipher);\r\n}\r\n```"]