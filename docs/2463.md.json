["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\r\n</dependency>\r\n```","```\r\n@Service\r\npublic class ImportJsonService {\r\n\r\n    @Autowired\r\n    private MongoTemplate mongo;\r\n}\r\n```","```\r\nprivate List<Document> generateMongoDocs(List<String> lines) {\r\n    List<Document> docs = new ArrayList<>();\r\n    for (String json : lines) {\r\n        docs.add(Document.parse(json));\r\n    }\r\n    return docs;\r\n}\r\n```","```\r\nprivate int insertInto(String collection, List<Document> mongoDocs) {\r\n    try {\r\n        Collection<Document> inserts = mongo.insert(mongoDocs, collection);\r\n        return inserts.size();\r\n    } catch (DataIntegrityViolationException e) {\r\n        if (e.getCause() instanceof MongoBulkWriteException) {\r\n            return ((MongoBulkWriteException) e.getCause())\r\n              .getWriteResult()\r\n              .getInsertedCount();\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n```","```\r\npublic String importTo(String collection, List<String> jsonLines) {\r\n    List<Document> mongoDocs = generateMongoDocs(jsonLines);\r\n    int inserts = insertInto(collection, mongoDocs);\r\n    return inserts + \"/\" + jsonLines.size();\r\n}\r\n```","```\r\npublic static List<String> lines(String json) {\r\n    String[] split = json.split(\"[\\\\r\\\\n]+\");\r\n    return Arrays.asList(split);\r\n} \r\n```","```\r\npublic static List<String> lines(File file) {\r\n    return Files.readAllLines(file.toPath());\r\n}\r\n```","```\r\npublic static List<String> linesFromResource(String resource) {\r\n    Resource input = new ClassPathResource(resource);\r\n    Path path = input.getFile().toPath();\r\n    return Files.readAllLines(path);\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBootJsonConvertFileApplication implements ApplicationRunner {\r\n    private static final String RESOURCE_PREFIX = \"classpath:\";\r\n\r\n    @Autowired\r\n    private ImportJsonService importService;\r\n\r\n    public static void main(String ... args) {\r\n        SpringApplication.run(SpringBootPersistenceApplication.class, args);\r\n    }\r\n\r\n    @Override\r\n    public void run(ApplicationArguments args) {\r\n        if (args.containsOption(\"import\")) {\r\n            String collection = args.getOptionValues(\"collection\")\r\n              .get(0);\r\n\r\n            List<String> sources = args.getOptionValues(\"import\");\r\n            for (String source : sources) {\r\n                List<String> jsonLines = new ArrayList<>();\r\n                if (source.startsWith(RESOURCE_PREFIX)) {\r\n                    String resource = source.substring(RESOURCE_PREFIX.length());\r\n                    jsonLines = ImportUtils.linesFromResource(resource);\r\n                } else {\r\n                    jsonLines = ImportUtils.lines(new File(source));\r\n                }\r\n\r\n                String result = importService.importTo(collection, jsonLines);\r\n                log.info(source + \" - result: \" + result);\r\n            }\r\n        }\r\n    }\r\n} \r\n```","```\r\n{\"name\":\"Book A\", \"genre\": \"Comedy\"}\r\n{\"name\":\"Book B\", \"genre\": \"Thriller\"}\r\n{\"name\":\"Book C\", \"genre\": \"Drama\"}\r\n```","```\r\njava -cp target/spring-boot-persistence-mongodb/WEB-INF/lib/*:target/spring-boot-persistence-mongodb/WEB-INF/classes \\\r\n  -Djdk.tls.client.protocols=TLSv1.2 \\\r\n  com.baeldung.SpringBootPersistenceApplication \\\r\n  --import=classpath:data.json.log \\\r\n  --import=/tmp/data.json \\\r\n  --collection=books\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/import-json\")\r\npublic class ImportJsonController {\r\n    @Autowired\r\n    private ImportJsonService service;\r\n\r\n    @PostMapping(\"/file/{collection}\")\r\n    public String postJsonFile(@RequestPart(\"parts\") MultipartFile jsonStringsFile, @PathVariable String collection)  {\r\n        List<String> jsonLines = ImportUtils.lines(jsonStringsFile);\r\n        return service.importTo(collection, jsonLines);\r\n    }\r\n}\r\n```","```\r\ncurl -X POST http://localhost:8082/import-json/file/books -F \"[[emailÂ protected]](/web/20220524050538/https://www.baeldung.com/cdn-cgi/l/email-protection)/tmp/books.json\"\r\n```","```\r\nprivate <T> List<Document> generateMongoDocs(List<String> lines, Class<T> type) {\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    List<Document> docs = new ArrayList<>();\r\n    for (String json : lines) {\r\n        if (type != null) {\r\n            mapper.readValue(json, type);\r\n        }\r\n        docs.add(Document.parse(json));\r\n    }\r\n    return docs;\r\n}\r\n```","```\r\n@Document(\"books\")\r\npublic class Book {\r\n    @Id\r\n    private String id;\r\n    private String name;\r\n    private String genre;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic String importTo(Class<?> type, List<String> jsonLines) {\r\n    List<Document> mongoDocs = generateMongoDocs(jsonLines, type);\r\n    String collection = type.getAnnotation(org.springframework.data.mongodb.core.mapping.Document.class)\r\n      .value();\r\n    int inserts = insertInto(collection, mongoDocs);\r\n    return inserts + \"/\" + jsonLines.size();\r\n}\r\n```"]