["```\r\npublic class DeadlockExample {\r\n\r\n    private Lock lock1 = new ReentrantLock(true);\r\n    private Lock lock2 = new ReentrantLock(true);\r\n\r\n    public static void main(String[] args) {\r\n        DeadlockExample deadlock = new DeadlockExample();\r\n        new Thread(deadlock::operation1, \"T1\").start();\r\n        new Thread(deadlock::operation2, \"T2\").start();\r\n    }\r\n\r\n    public void operation1() {\r\n        lock1.lock();\r\n        print(\"lock1 acquired, waiting to acquire lock2.\");\r\n        sleep(50);\r\n\r\n        lock2.lock();\r\n        print(\"lock2 acquired\");\r\n\r\n        print(\"executing first operation.\");\r\n\r\n        lock2.unlock();\r\n        lock1.unlock();\r\n    }\r\n\r\n    public void operation2() {\r\n        lock2.lock();\r\n        print(\"lock2 acquired, waiting to acquire lock1.\");\r\n        sleep(50);\r\n\r\n        lock1.lock();\r\n        print(\"lock1 acquired\");\r\n\r\n        print(\"executing second operation.\");\r\n\r\n        lock1.unlock();\r\n        lock2.unlock();\r\n    }\r\n\r\n    // helper methods\r\n\r\n}\r\n```","```\r\nThread T1: lock1 acquired, waiting to acquire lock2.\r\nThread T2: lock2 acquired, waiting to acquire lock1.\r\n```","```\r\npublic class LivelockExample {\r\n\r\n    private Lock lock1 = new ReentrantLock(true);\r\n    private Lock lock2 = new ReentrantLock(true);\r\n\r\n    public static void main(String[] args) {\r\n        LivelockExample livelock = new LivelockExample();\r\n        new Thread(livelock::operation1, \"T1\").start();\r\n        new Thread(livelock::operation2, \"T2\").start();\r\n    }\r\n\r\n    public void operation1() {\r\n        while (true) {\r\n            tryLock(lock1, 50);\r\n            print(\"lock1 acquired, trying to acquire lock2.\");\r\n            sleep(50);\r\n\r\n            if (tryLock(lock2)) {\r\n                print(\"lock2 acquired.\");\r\n            } else {\r\n                print(\"cannot acquire lock2, releasing lock1.\");\r\n                lock1.unlock();\r\n                continue;\r\n            }\r\n\r\n            print(\"executing first operation.\");\r\n            break;\r\n        }\r\n        lock2.unlock();\r\n        lock1.unlock();\r\n    }\r\n\r\n    public void operation2() {\r\n        while (true) {\r\n            tryLock(lock2, 50);\r\n            print(\"lock2 acquired, trying to acquire lock1.\");\r\n            sleep(50);\r\n\r\n            if (tryLock(lock1)) {\r\n                print(\"lock1 acquired.\");\r\n            } else {\r\n                print(\"cannot acquire lock1, releasing lock2.\");\r\n                lock2.unlock();\r\n                continue;\r\n            }\r\n\r\n            print(\"executing second operation.\");\r\n            break;\r\n        }\r\n        lock1.unlock();\r\n        lock2.unlock();\r\n    }\r\n\r\n    // helper methods\r\n\r\n}\r\n```","```\r\nThread T1: lock1 acquired, trying to acquire lock2.\r\nThread T2: lock2 acquired, trying to acquire lock1.\r\nThread T1: cannot acquire lock2, releasing lock1.\r\nThread T2: cannot acquire lock1, releasing lock2.\r\nThread T2: lock2 acquired, trying to acquire lock1.\r\nThread T1: lock1 acquired, trying to acquire lock2.\r\nThread T1: cannot acquire lock2, releasing lock1.\r\nThread T1: lock1 acquired, trying to acquire lock2.\r\nThread T2: cannot acquire lock1, releasing lock2.\r\n..\r\n```"]