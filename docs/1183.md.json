["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.7.2</version>\r\n    <relativePath/>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n     </dependency>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-test</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\npublic class TodoItem {\r\n\r\n    private String description;\r\n    private LocalDateTime createDate;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class TodoList extends ArrayDeque<TodoItem>{\r\n\r\n}\r\n```","```\r\n@Bean\r\n@Scope(\r\n  value = WebApplicationContext.SCOPE_SESSION, \r\n  proxyMode = ScopedProxyMode.TARGET_CLASS)\r\npublic TodoList todos() {\r\n    return new TodoList();\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(\"/scopedproxy\")\r\npublic class TodoControllerWithScopedProxy {\r\n\r\n    private TodoList todos;\r\n\r\n    // constructor and request mappings\r\n} \r\n```","```\r\n@GetMapping(\"/form\")\r\npublic String showForm(Model model) {\r\n    if (!todos.isEmpty()) {\r\n        model.addAttribute(\"todo\", todos.peekLast());\r\n    } else {\r\n        model.addAttribute(\"todo\", new TodoItem());\r\n    }\r\n    return \"scopedproxyform\";\r\n}\r\n```","```\r\n@Configuration\r\npublic class TestConfig {\r\n\r\n    @Bean\r\n    public CustomScopeConfigurer customScopeConfigurer() {\r\n        CustomScopeConfigurer configurer = new CustomScopeConfigurer();\r\n        configurer.addScope(\"session\", new SimpleThreadScope());\r\n        return configurer;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class) \r\n@SpringBootTest\r\n@AutoConfigureMockMvc\r\n@Import(TestConfig.class) \r\npublic class TodoControllerWithScopedProxyIntegrationTest {\r\n\r\n    // ...\r\n\r\n    @Test\r\n    public void whenFirstRequest_thenContainsUnintializedTodo() throws Exception {\r\n        MvcResult result = mockMvc.perform(get(\"/scopedproxy/form\"))\r\n          .andExpect(status().isOk())\r\n          .andExpect(model().attributeExists(\"todo\"))\r\n          .andReturn();\r\n\r\n        TodoItem item = (TodoItem) result.getModelAndView().getModel().get(\"todo\");\r\n\r\n        assertTrue(StringUtils.isEmpty(item.getDescription()));\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenSubmit_thenSubsequentFormRequestContainsMostRecentTodo() throws Exception {\r\n    mockMvc.perform(post(\"/scopedproxy/form\")\r\n      .param(\"description\", \"newtodo\"))\r\n      .andExpect(status().is3xxRedirection())\r\n      .andReturn();\r\n\r\n    MvcResult result = mockMvc.perform(get(\"/scopedproxy/form\"))\r\n      .andExpect(status().isOk())\r\n      .andExpect(model().attributeExists(\"todo\"))\r\n      .andReturn();\r\n    TodoItem item = (TodoItem) result.getModelAndView().getModel().get(\"todo\");\r\n\r\n    assertEquals(\"newtodo\", item.getDescription());\r\n}\r\n```","```\r\n@ModelAttribute(\"todos\")\r\npublic TodoList todos() {\r\n    return new TodoList();\r\n} \r\n```","```\r\n@Controller\r\n@RequestMapping(\"/sessionattributes\")\r\n@SessionAttributes(\"todos\")\r\npublic class TodoControllerWithSessionAttributes {\r\n    // ... other methods\r\n}\r\n```","```\r\n@GetMapping(\"/form\")\r\npublic String showForm(\r\n  Model model,\r\n  @ModelAttribute(\"todos\") TodoList todos) {\r\n\r\n    if (!todos.isEmpty()) {\r\n        model.addAttribute(\"todo\", todos.peekLast());\r\n    } else {\r\n        model.addAttribute(\"todo\", new TodoItem());\r\n    }\r\n    return \"sessionattributesform\";\r\n} \r\n```","```\r\n@PostMapping(\"/form\")\r\npublic RedirectView create(\r\n  @ModelAttribute TodoItem todo, \r\n  @ModelAttribute(\"todos\") TodoList todos, \r\n  RedirectAttributes attributes) {\r\n    todo.setCreateDate(LocalDateTime.now());\r\n    todos.add(todo);\r\n    attributes.addFlashAttribute(\"todos\", todos);\r\n    return new RedirectView(\"/sessionattributes/todos.html\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenTodoExists_thenSubsequentFormRequestContainsesMostRecentTodo() throws Exception {\r\n    FlashMap flashMap = mockMvc.perform(post(\"/sessionattributes/form\")\r\n      .param(\"description\", \"newtodo\"))\r\n      .andExpect(status().is3xxRedirection())\r\n      .andReturn().getFlashMap();\r\n\r\n    MvcResult result = mockMvc.perform(get(\"/sessionattributes/form\")\r\n      .sessionAttrs(flashMap))\r\n      .andExpect(status().isOk())\r\n      .andExpect(model().attributeExists(\"todo\"))\r\n      .andReturn();\r\n    TodoItem item = (TodoItem) result.getModelAndView().getModel().get(\"todo\");\r\n\r\n    assertEquals(\"newtodo\", item.getDescription());\r\n}\r\n```"]