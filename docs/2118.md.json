["```\r\ndef lines = []\r\n\r\nnew File('src/main/resources/ioInput.txt').eachLine { line ->\r\n    lines.add(line)\r\n}\r\n```","```\r\ndef lineNoRange = 2..4\r\ndef lines = []\r\n\r\nnew File('src/main/resources/ioInput.txt').eachLine { line, lineNo ->\r\n    if (lineNoRange.contains(lineNo)) {\r\n        lines.add(line)\r\n    }\r\n}\r\n```","```\r\nnew File('src/main/resources/ioInput.txt').eachLine(0, { line, lineNo ->\r\n    if (lineNoRange.contains(lineNo)) {\r\n        lines.add(line)\r\n    }\r\n})\r\n```","```\r\ndef actualCount = 0\r\nnew File('src/main/resources/ioInput.txt').withReader { reader ->\r\n    while(reader.readLine()) {\r\n        actualCount++\r\n    }\r\n}\r\n```","```\r\ndef outputPath = 'src/main/resources/ioOut.txt'\r\ndef reader = new File('src/main/resources/ioInput.txt').newReader()\r\nnew File(outputPath).append(reader)\r\nreader.close()\r\n```","```\r\nbyte[] data = []\r\nnew File(\"src/main/resources/binaryExample.jpg\").withInputStream { stream ->\r\n    data = stream.getBytes()\r\n}\r\n```","```\r\ndef outputPath = 'src/main/resources/binaryOut.jpg'\r\ndef is = new File('src/main/resources/binaryExample.jpg').newInputStream()\r\nnew File(outputPath).append(is)\r\nis.close()\r\n```","```\r\ndef actualList = new File('src/main/resources/ioInput.txt').collect {it}\r\n```","```\r\ndef actualArray = new File('src/main/resources/ioInput.txt') as String[]\r\n```","```\r\ndef actualString = new File('src/main/resources/ioInput.txt').text\r\n```","```\r\ndef contents = new File('src/main/resources/binaryExample.jpg').bytes\r\n```","```\r\ndef outputLines = [\r\n    'Line one of output example',\r\n    'Line two of output example',\r\n    'Line three of output example'\r\n]\r\n```","```\r\ndef outputFileName = 'src/main/resources/ioOutput.txt'\r\nnew File(outputFileName).withWriter { writer ->\r\n    outputLines.each { line ->\r\n        writer.writeLine line\r\n    }\r\n}\r\n```","```\r\ndef outputFileName = 'src/main/resources/ioOutput.txt'\r\ndef writer = new File(outputFileName).newWriter()\r\noutputLines.forEach {line ->\r\n    writer.writeLine line\r\n}\r\nwriter.flush()\r\nwriter.close()\r\n```","```\r\nbyte[] outBytes = [44, 88, 22]\r\nnew File(outputFileName).withOutputStream { stream ->\r\n    stream.write(outBytes)\r\n}\r\n```","```\r\nbyte[] outBytes = [44, 88, 22]\r\ndef os = new File(outputFileName).newOutputStream()\r\nos.write(outBytes)\r\nos.close()\r\n```","```\r\ndef ln = System.getProperty('line.separator')\r\ndef outputFileName = 'src/main/resources/ioOutput.txt'\r\nnew File(outputFileName) << \"Line one of output example${ln}\" + \r\n  \"Line two of output example${ln}Line three of output example\"\r\n```","```\r\ndef outputFileName = 'src/main/resources/ioBinaryOutput.bin'\r\ndef outputFile = new File(outputFileName)\r\nbyte[] outBytes = [44, 88, 22]\r\noutputFile.bytes = outBytes\r\n```","```\r\nnew File('src/main/resources').eachFile { file ->\r\n    println file.name\r\n}\r\n```","```\r\nnew File('src/main/resources').eachFileMatch(~/io.*\\.txt/) { file ->\r\n    println file.name\r\n}\r\n```","```\r\nnew File('src/main').eachFileRecurse(FileType.FILES) { file ->\r\n    println \"$file.parent $file.name\"\r\n}\r\n```","```\r\nnew File('src/main').eachFileRecurse(FileType.DIRECTORIES) { file ->\r\n    println \"$file.parent $file.name\"\r\n}\r\n```","```\r\nnew File('src/main').eachDirRecurse { dir ->\r\n    println \"$dir.parent $dir.name\"\r\n}\r\n```","```\r\nnew File('src/main').traverse { file ->\r\n   if (file.directory && file.name == 'groovy') {\r\n        FileVisitResult.SKIP_SUBTREE\r\n    } else {\r\n        println \"$file.parent - $file.name\"\r\n    }\r\n}\r\n```","```\r\nString message = 'This is a serialized string'\r\nint length = message.length()\r\nboolean valid = true\r\n```","```\r\nnew File('src/main/resources/ioData.txt').withDataOutputStream { out ->\r\n    out.writeUTF(message)\r\n    out.writeInt(length)\r\n    out.writeBoolean(valid)\r\n}\r\n```","```\r\nString loadedMessage = \"\"\r\nint loadedLength\r\nboolean loadedValid\r\n\r\nnew File('src/main/resources/ioData.txt').withDataInputStream { is ->\r\n    loadedMessage = is.readUTF()\r\n    loadedLength = is.readInt()\r\n    loadedValid = is.readBoolean()\r\n}\r\n```","```\r\nclass Task implements Serializable {\r\n    String description\r\n    Date startDate\r\n    Date dueDate\r\n    int status\r\n}\r\n```","```\r\nTask task = new Task(description:'Take out the trash', startDate:new Date(), status:0)\r\n```","```\r\nnew File('src/main/resources/ioSerializedObject.txt').withObjectOutputStream { out ->\r\n    out.writeObject(task)\r\n}\r\n```","```\r\nTask taskRead\r\n\r\nnew File('src/main/resources/ioSerializedObject.txt').withObjectInputStream { is ->\r\n    taskRead = is.readObject()\r\n}\r\n```"]