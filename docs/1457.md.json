["```\r\n@Test\r\npublic void givenList_whenParitioningIntoNSublists_thenCorrect() {\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n    List<List<Integer>> subSets = Lists.partition(intList, 3);\r\n\r\n    List<Integer> lastPartition = subSets.get(2);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8);\r\n    assertThat(subSets.size(), equalTo(3));\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCollection_whenParitioningIntoNSublists_thenCorrect() {\r\n    Collection<Integer> intCollection = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n\r\n    Iterable<List<Integer>> subSets = Iterables.partition(intCollection, 3);\r\n\r\n    List<Integer> firstPartition = subSets.iterator().next();\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(1, 2, 3);\r\n    assertThat(firstPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic void givenListPartitioned_whenOriginalListIsModified_thenPartitionsChangeAsWell() {\r\n    // Given\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n    List<List<Integer>> subSets = Lists.partition(intList, 3);\r\n\r\n    // When\r\n    intList.add(9);\r\n\r\n    // Then\r\n    List<Integer> lastPartition = subSets.get(2);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8, 9);\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic void givenList_whenParitioningIntoNSublists_thenCorrect() {\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n    List<List<Integer>> subSets = ListUtils.partition(intList, 3);\r\n\r\n    List<Integer> lastPartition = subSets.get(2);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8);\r\n    assertThat(subSets.size(), equalTo(3));\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic void givenList_whenParitioningIntoSublistsUsingPartitionBy_thenCorrect() {\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n\r\n    Map<Boolean, List<Integer>> groups = \r\n      intList.stream().collect(Collectors.partitioningBy(s -> s > 6));\r\n    List<List<Integer>> subSets = new ArrayList<List<Integer>>(groups.values());\r\n\r\n    List<Integer> lastPartition = subSets.get(1);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8);\r\n    assertThat(subSets.size(), equalTo(2));\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic final void givenList_whenParitioningIntoNSublistsUsingGroupingBy_thenCorrect() {\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 4, 5, 6, 7, 8);\r\n\r\n    Map<Integer, List<Integer>> groups = \r\n      intList.stream().collect(Collectors.groupingBy(s -> (s - 1) / 3));\r\n    List<List<Integer>> subSets = new ArrayList<List<Integer>>(groups.values());\r\n\r\n    List<Integer> lastPartition = subSets.get(2);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8);\r\n    assertThat(subSets.size(), equalTo(3));\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```","```\r\n@Test\r\npublic void givenList_whenSplittingBySeparator_thenCorrect() {\r\n    List<Integer> intList = Lists.newArrayList(1, 2, 3, 0, 4, 5, 6, 0, 7, 8);\r\n\r\n    int[] indexes = \r\n      Stream.of(IntStream.of(-1), IntStream.range(0, intList.size())\r\n      .filter(i -> intList.get(i) == 0), IntStream.of(intList.size()))\r\n      .flatMapToInt(s -> s).toArray();\r\n    List<List<Integer>> subSets = \r\n      IntStream.range(0, indexes.length - 1)\r\n               .mapToObj(i -> intList.subList(indexes[i] + 1, indexes[i + 1]))\r\n               .collect(Collectors.toList());\r\n\r\n    List<Integer> lastPartition = subSets.get(2);\r\n    List<Integer> expectedLastPartition = Lists.<Integer> newArrayList(7, 8);\r\n    assertThat(subSets.size(), equalTo(3));\r\n    assertThat(lastPartition, equalTo(expectedLastPartition));\r\n}\r\n```"]