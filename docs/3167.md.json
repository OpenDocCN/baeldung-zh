["```\r\npackage animal;\r\npublic abstract class Animal {\r\n\r\n    abstract boolean canFly();\r\n}\r\n\r\npackage horse;\r\nimport animal.Animal;\r\n\r\npublic class Horse extends Animal {\r\n\r\n    @Override\r\n    boolean canFly() {\r\n        return false;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        System.out.println(new Horse().canFly());\r\n    }    \r\n}\r\n```","```\r\nWhich of the following is true?\r\nA. The output is false\r\nB. Compilation fails on Line 10\r\nC. Compilation fails on Line 12\r\nD. None of the above\r\n```","```\r\npublic abstract class Animal {\r\n\r\n    protected abstract boolean canFly() {\r\n    }\r\n\r\n    public abstract void eat() {\r\n        System.out.println(\"Eat...\");\r\n    }\r\n}\r\n\r\npublic class Amphibian extends Animal {\r\n    @Override\r\n    protected boolean canFly() {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public void eat() {\r\n\r\n    }\r\n\r\n    public abstract boolean swim();\r\n}\r\n\r\npublic class Frog extends Amphibian {\r\n}\r\n```","```\r\nWhich are true? (Choose all that apply.)\r\nA. Compilation error on line 3\r\nB. Compilation error on line 6\r\nC. Compilation error on line 11\r\nD. Compilation error on line 13\r\nE. Compilation error on line 22\r\n```","```\r\npublic abstract class Animal {\r\n\r\n    protected abstract boolean canFly();\r\n\r\n    public abstract void eat();\r\n}\r\n\r\npublic abstract class Amphibian extends Animal {\r\n\r\n    @Override\r\n    public void eat() {\r\n        System.out.println(\"Eat...\");\r\n    }\r\n\r\n    public abstract boolean swim();\r\n}\r\n\r\npublic class Frog extends Amphibian {\r\n\r\n    @Override\r\n    protected boolean swim() {\r\n        return false;\r\n    }\r\n\r\n}\r\n```","```\r\nWhich are true? (Choose all that apply)\r\nA. Compilation error on line 8\r\nB. Compilation error on line 11\r\nC. Compilation error on line 18\r\nD. Compilation error on line 21\r\nE. No compilation error\r\n```","```\r\npublic final abstract class Animal {\r\n}\r\n\r\npublic abstract class Animal {\r\n\r\n    public final abstract void eat();\r\n}\r\n\r\npublic abstract class Animal {\r\n\r\n    private abstract void eat();\r\n}\r\n```","```\r\npublic abstract class Animal {\r\n\r\n    public final void eat() {\r\n        System.out.println(\"Eat...\");\r\n    }\r\n}\r\n\r\npublic class Horse extends Animal {\r\n\r\n    public void eat() {\r\n        System.out.println(\"Eat Grass\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Animal animal = new Horse();\r\n        animal.eat();\r\n    }\r\n}\r\n```","```\r\nWhat is the output?\r\nA. Eat...\r\nB. Eat Grass\r\nC. The code will not compile because of line 3\r\nD. The code will not compile because of line 8\r\nE. The code will not compile because of line 10\r\n```","```\r\npublic class Animal {\r\n\r\n    class EatingHabbits {\r\n    }\r\n\r\n    private EatingHabbits eatingHabbits() {\r\n        return new EatingHabbits();\r\n    }\r\n}\r\n\r\npublic class Zookeeper {\r\n\r\n    public static void main(String[] args) {\r\n        Zookeeper zookeeper = new Zookeeper();\r\n        zookeeper.feed();\r\n    }\r\n\r\n    private void feed() {\r\n        EatingHabbits habbits = new EatingHabbits();\r\n        Animal animal = new Animal();\r\n        Animal.EatingHabbits habbits1 = animal.eatingHabbits();\r\n    }\r\n}\r\n```","```\r\nWhat is the result? (Choose all that apply.)\r\nA. Compilation error on line 7\r\nB. Compilation error on line 19\r\nC. Compilation error on line 21\r\nD. No compilation error\r\n```","```\r\npublic class Animal {\r\n    private int age = 10;\r\n\r\n    public class EatingHabbits {\r\n        private int numOfTimes = 5;\r\n\r\n        public void print() {\r\n            System.out.println(\"The value of numOfTimes \" + this.numOfTimes);\r\n            System.out.println(\"The value of age \" + this.age);\r\n            System.out.println(\"The value of age \" + Animal.this.age);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Animal.EatingHabbits habbits = new Animal().new EatingHabbits();\r\n        habbits.print();\r\n    }\r\n}\r\n```","```\r\npublic class Animal {\r\n    private int age = 10;\r\n\r\n    public void printAge() {\r\n        String message = \"The age is \";\r\n        class PrintUtility {\r\n            void print() {\r\n                System.out.println(message + age);\r\n            }\r\n        }\r\n\r\n        PrintUtility utility = new PrintUtility();\r\n        utility.print();\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        new Animal().printAge();\r\n    }\r\n}\r\n```","```\r\nWhat is the result of the following code?\r\n\r\nA. The age is 0\r\nB. The age is 10\r\nC. Line 8 generates a compiler error\r\nD. Line 12 generates a compiler error\r\nE. An exception is thrown\r\n```","```\r\npublic class Animal {\r\n\r\n    private int age = 10;\r\n\r\n    static class EatingHabits {\r\n\r\n        private int numOfTimes = 5;\r\n\r\n        public void print() {\r\n            System.out.println(\"The value of x \" + age);\r\n            System.out.println(\"The value of x \" + Animal.this.age);\r\n            System.out.println(\"The value of numOfTimes \" + numOfTimes);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class Animal {\r\n\r\n    public void feed() {\r\n        System.out.println(\"Eating Grass\");\r\n    }\r\n}\r\n\r\npublic class Zookeeper {\r\n\r\n    public static void main(String[] args) {\r\n        Animal animal = new Animal(){\r\n            public void feed(){\r\n                System.out.println(\"Eating Fish\");\r\n            }\r\n        }\r\n        animal.feed();\r\n    }\r\n}\r\n```","```\r\nWhat is the result?\r\n\r\nA. An exception occurs at runtime\r\nB. Eating Fish\r\nC. Eating Grass\r\nD. Compilation fails because of an error on line 11\r\nE. Compilation fails because of an error on line 12\r\nF. Compilation fails because of an error on line 15\r\n```","```\r\nRunnable r = new Runnable(); // compilation error\r\n\r\nRunnable r = new Runnable() { // legal statement\r\n    @Override\r\n    public void run() {\r\n\r\n    }\r\n};\r\n```","```\r\npublic enum AnimalSpecies {\r\n    MAMMAL(false), FISH(true), BIRD(false),\r\n    REPTILE(false), AMPHIBIAN(true)\r\n\r\n    boolean hasFins;\r\n\r\n    public AnimalSpecies(boolean hasFins) {\r\n        this.hasFins = hasFins;\r\n    }\r\n\r\n    public boolean hasFins() {\r\n        return hasFins;\r\n    }\r\n}\r\n```","```\r\nWhat is the result of the following code? (Choose all that apply.)\r\n\r\nA. Compiler error on line 2\r\nB. Compiler error on line 3\r\nC. Compiler error on line 7\r\nD. Compiler error on line 11\r\nE. The code compiles successfully\r\n```","```\r\npublic enum AnimalSpecies {\r\n    MAMMAL(false), FISH(true){\r\n        @Override\r\n        boolean canFly() {\r\n            return false;\r\n        }\r\n    }, BIRD(false),\r\n    REPTILE(false), AMPHIBIAN(true);\r\n\r\n    boolean hasFins;\r\n\r\n    AnimalSpecies(boolean hasFins) {\r\n        this.hasFins = hasFins;\r\n    }\r\n\r\n    public boolean hasFins() {\r\n        return hasFins;\r\n    }\r\n\r\n    abstract boolean canFly();\r\n}\r\n\r\npublic class Zookeeper {\r\n\r\n    public static void main(String[] args) {\r\n        AnimalSpecies.MAMMAL.canFly();\r\n    }\r\n}\r\n```","```\r\nWhat is the result of the following code? (Choose all that apply.)\r\n\r\nA. Compilation error on line 2\r\nB. Compilation error on line 4\r\nC. Compilation error on line 20\r\nD. Compilation error on line 26\r\nE. No compilation error\r\n```","```\r\npublic enum AnimalSpecies {\r\n    MAMMAL, FISH, BIRD, REPTILE, AMPHIBIAN\r\n}\r\n\r\npublic class Zookeeper {\r\n\r\n    public static void main(String[] args) {\r\n        AnimalSpecies[] animals = AnimalSpecies.values();\r\n        System.out.println(animals[2]);\r\n    }\r\n}\r\n```","```\r\nWhat is the result? (Choose all that apply.)\r\n\r\nA. FISH\r\nB. BIRD\r\nC. Compilation fails due to an error on line 2\r\nD. Compilation fails due to an error on line 8\r\nE. Compilation fails due to an error on line 10\r\n```","```\r\nclass Bird implements Flyable {\r\n    public void fly() {\r\n    }\r\n}\r\n\r\nabstract class Catbirds extends Bird {\r\n\r\n}\r\n\r\nabstract class Flamingos extends Bird {\r\n    public abstract String color();\r\n}\r\n\r\nclass GreaterFlamingo extends Flamingos {\r\n    public String color() {\r\n        System.out.println(\"The color is pink\");\r\n    }    \r\n}\r\n\r\ninterface Flyable {\r\n    void fly();\r\n}\r\n```","```\r\nWhat is the result? (Choose all that apply.)\r\n\r\nA. Compilation succeeds\r\nB. Compilation fails with an error on line 6\r\nC. Compilation fails with an error on line 10\r\nD. Compilation fails with an error on line 11\r\nE. Compilation fails with an error on line 14\r\n```","```\r\ninterface Bird extends Flyable, Wings {}\r\n\r\npublic class GreaterFlamingo extends Flamingos implements Bird, Vegetarian {}\r\n\r\npublic class GreaterFlamingo extends Flamingos, Bird {}\r\n```","```\r\npublic interface Vegetarian {\r\n\r\n    default void eat() {\r\n        System.out.println(\"Eat Veg\");\r\n    }\r\n}\r\n\r\npublic interface NonVegetarian {\r\n\r\n    default void eat() {\r\n        System.out.println(\"Eat NonVeg\");\r\n    }\r\n}\r\n\r\npublic class Racoon implements Vegetarian, NonVegetarian {\r\n\r\n    @Override\r\n    void eat() {\r\n        System.out.println(\"Eat Something\")\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Racoon racoon = new Racoon();\r\n        racoon.eat();\r\n    }\r\n}\r\n```","```\r\nWhat is the result?\r\n\r\nA. Eat Veg\r\nB. Eat NonVeg\r\nC. Eat Something\r\nD. The output is unpredictable\r\nE. Compilation fails\r\nF. An exception is thrown at runtime\r\n```","```\r\npublic abstract class Flamingo {\r\n\r\n    public abstract String color();\r\n\r\n    public abstract void fly();\r\n}\r\n\r\npublic class GreaterFlamingo extends Flamingo {\r\n    @Override\r\n    public String color() {\r\n        return \"Pink\";\r\n    }\r\n\r\n    @Override\r\n    public void fly() {\r\n        System.out.println(\"Flying\");\r\n    }\r\n\r\n    @Override\r\n    public void eat() {\r\n        System.out.println(\"Eating\");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        GreaterFlamingo flamingo = new GreaterFlamingo();\r\n        System.out.println(flamingo.color());\r\n    }\r\n}\r\n```","```\r\nWhat is the result? (Choose all that apply.)\r\n\r\nA. Pink\r\nB. Compilation error on line 8\r\nC. Compilation error on line 19\r\nD. Compilation error on line 20\r\n```","```\r\nList<String> birds = Arrays.asList(\"eagle\", \"seagull\", \"albatross\", \"buzzard\", \"goose\");\r\nint longest = 0;\r\nbirds.forEach(b -> {\r\n    if (b.length() > longest){\r\n        longest = b.length();\r\n    }\r\n});\r\n\r\nSystem.out.println(\"Longest bird name is length: \" + longest);\r\n```","```\r\nWhat is the result?\r\n\r\nA. \"Longest bird name is length: 9\"\r\nB. Compilation fails because of an error on line 3\r\nC. Compilation fails because of an error on line 5\r\nD. A runtime exception occurs on line 5\r\n```"]