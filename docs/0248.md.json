["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n@EnableWebSecurity\r\npublic class MySecurityConfigurer extends WebSecurityConfigurerAdapter {\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http.authorizeRequests((requests) -> requests.anyRequest().authenticated());\r\n    http.formLogin();\r\n    http.httpBasic();\r\n}\r\n```","```\r\nhttp.authorizeRequests().anyRequest().authenticated()\r\n  .and().formLogin()\r\n  .and().httpBasic()\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http.authorizeRequests()\r\n      .antMatchers(\"/admin/**\")\r\n      .hasRole(\"ADMIN\")\r\n      .antMatchers(\"/protected/**\")\r\n      .hasRole(\"USER\");\r\n}\r\n```","```\r\n@Override\r\npublic void configure(WebSecurity web) {\r\n    web.ignoring()\r\n      .antMatchers(\"/hello/*\");\r\n}\r\n```","```\r\n@EnableGlobalMethodSecurity(jsr250Enabled = true)\r\n@Controller\r\npublic class AnnotationSecuredController {\r\n    @RolesAllowed(\"ADMIN\")\r\n    @RequestMapping(\"/admin\")\r\n    public String adminHello() {\r\n        return \"Hello Admin\";\r\n    }\r\n\r\n    @RolesAllowed(\"USER\")\r\n    @RequestMapping(\"/protected\")\r\n    public String jsr250Hello() {\r\n        return \"Hello Jsr250\";\r\n    }\r\n}\r\n```","```\r\npublic class MyPublicPermitter implements WebSecurityCustomizer {\r\n    public void customize(WebSecurity webSecurity) {\r\n        webSecurity.ignoring()\r\n          .antMatchers(\"/hello/*\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class MyWebConfig {\r\n    @Bean\r\n    public WebSecurityCustomizer ignoreResources() {\r\n        return (webSecurity) -> webSecurity\r\n          .ignoring()\r\n          .antMatchers(\"/hello/*\");\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = RANDOM_PORT)\r\npublic class WebSecuritySpringBootIntegrationTest {\r\n    @Autowired\r\n    private TestRestTemplate template;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPublicResource_whenGetViaWeb_thenOk() {\r\n    ResponseEntity<String> result = template.getForEntity(\"/hello/baeldung.txt\", String.class);\r\n    assertEquals(\"Hello From Baeldung\", result.getBody());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetProtectedViaWeb_thenForbidden() {\r\n    ResponseEntity<String> result = template.getForEntity(\"/protected\", String.class);\r\n    assertEquals(HttpStatus.FORBIDDEN, result.getStatusCode());\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = RANDOM_PORT)\r\npublic class GlobalMethodSpringBootIntegrationTest {\r\n    @Autowired\r\n    private AnnotationSecuredController api;\r\n}\r\n```","```\r\n@Test\r\n@WithAnonymousUser\r\npublic void givenAnonymousUser_whenPublic_thenOk() {\r\n    assertThat(api.publicHello()).isEqualTo(HELLO_PUBLIC);\r\n} \r\n```","```\r\n@WithMockUser(username=\"baeldung\", roles = \"USER\")\r\n@Test\r\npublic void givenUserWithRole_whenJsr250_thenOk() {\r\n    assertThat(api.jsr250Hello()).isEqualTo(\"Hello Jsr250\");\r\n}\r\n```","```\r\n@WithMockUser(username=\"baeldung\", roles = \"NOT-USER\")\r\n@Test(expected = AccessDeniedException.class)\r\npublic void givenWrongRole_whenJsr250_thenAccessDenied() {\r\n    api.jsr250Hello();\r\n}\r\n```","```\r\n@GetMapping(\"/indirect\")\r\npublic String indirectHello() {\r\n    return jsr250Hello();\r\n} \r\n```","```\r\n@Test\r\n@WithAnonymousUser\r\npublic void givenAnonymousUser_whenIndirectCall_thenNoSecurity() {\r\n    assertThat(api.indirectHello()).isEqualTo(HELLO_JSR_250);\r\n}\r\n```","```\r\n@Component\r\npublic class DifferentClass {\r\n    @RolesAllowed(\"USER\")\r\n    public String differentJsr250Hello() {\r\n        return \"Hello Jsr250\";\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nDifferentClass differentClass;\r\n\r\n@GetMapping(\"/differentclass\")\r\npublic String differentClassHello() {\r\n    return differentClass.differentJsr250Hello();\r\n}\r\n```","```\r\n@Test(expected = AccessDeniedException.class)\r\n@WithAnonymousUser\r\npublic void givenAnonymousUser_whenIndirectToDifferentClass_thenAccessDenied() {\r\n    api.differentClassHello();\r\n}\r\n```","```\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\n```","```\r\n@EnableGlobalMethodSecurity(jsr250Enabled = true, prePostEnabled = true)\r\n```","```\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\n```"]