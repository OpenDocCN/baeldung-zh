["```\r\npublic interface AuthenticationManagerResolver<C> {\r\n    AuthenticationManager resolve(C context);\r\n}\r\n```","```\r\n@Configuration\r\npublic class CustomWebSecurityConfigurer {\r\n    // ...\r\n}\r\n```","```\r\nAuthenticationManager customersAuthenticationManager() {\r\n    return authentication -> {\r\n        if (isCustomer(authentication)) {\r\n            return new UsernamePasswordAuthenticationToken(/*credentials*/);\r\n        }\r\n        throw new UsernameNotFoundException(/*principal name*/);\r\n    };\r\n}\r\n```","```\r\npublic AuthenticationManager employeesAuthenticationManager() {\r\n    return authentication -> {\r\n        if (isEmployee(authentication)) {\r\n            return new UsernamePasswordAuthenticationToken(/*credentials*/);\r\n        }\r\n        throw new UsernameNotFoundException(/*principal name*/);\r\n    };\r\n}\r\n```","```\r\nAuthenticationManagerResolver<HttpServletRequest> resolver() {\r\n    return request -> {\r\n        if (request.getPathInfo().startsWith(\"/employee\")) {\r\n            return employeesAuthenticationManager();\r\n        }\r\n        return customersAuthenticationManager();\r\n    };\r\n}\r\n```","```\r\nprivate AuthenticationFilter authenticationFilter() {\r\n    AuthenticationFilter filter = new AuthenticationFilter(\r\n      resolver(), authenticationConverter());\r\n    filter.setSuccessHandler((request, response, auth) -> {});\r\n    return filter;\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http.addFilterBefore(authenticationFilter(), BasicAuthenticationFilter.class);\r\n    return http.build();\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n    http\r\n      .oauth2ResourceServer()\r\n      .authenticationManagerResolver(resolver());\r\n    return http.build();\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface ReactiveAuthenticationManagerResolver<C> {\r\n    Mono<ReactiveAuthenticationManager> resolve(C context);\r\n}\r\n```","```\r\n@EnableWebFluxSecurity\r\n@EnableReactiveMethodSecurity\r\npublic class CustomWebSecurityConfig {\r\n    // ...\r\n}\r\n```","```\r\nReactiveAuthenticationManager customersAuthenticationManager() {\r\n    return authentication -> customer(authentication)\r\n      .switchIfEmpty(Mono.error(new UsernameNotFoundException(/*principal name*/)))\r\n      .map(b -> new UsernamePasswordAuthenticationToken(/*credentials*/));\r\n} \r\n```","```\r\npublic ReactiveAuthenticationManager employeesAuthenticationManager() {\r\n    return authentication -> employee(authentication)\r\n      .switchIfEmpty(Mono.error(new UsernameNotFoundException(/*principal name*/)))\r\n      .map(b -> new UsernamePasswordAuthenticationToken(/*credentials*/));\r\n}\r\n```","```\r\nReactiveAuthenticationManagerResolver<ServerWebExchange> resolver() {\r\n    return exchange -> {\r\n        if (match(exchange.getRequest(), \"/employee\")) {\r\n            return Mono.just(employeesAuthenticationManager());\r\n        }\r\n        return Mono.just(customersAuthenticationManager());\r\n    };\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {\r\n    return http\r\n      .authorizeExchange()\r\n      .pathMatchers(\"/**\")\r\n      .authenticated()\r\n      .and()\r\n      .httpBasic()\r\n      .disable()\r\n      .addFilterAfter(\r\n        new AuthenticationWebFilter(resolver()), \r\n        SecurityWebFiltersOrder.REACTOR_CONTEXT\r\n      )\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {\r\n    return http\r\n      // ...\r\n      .and()\r\n      .oauth2ResourceServer()\r\n      .authenticationManagerResolver(resolver())\r\n      .and()\r\n      // ...;\r\n}\r\n```"]