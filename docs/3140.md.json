["```\r\n@Before\r\npublic void initVariables () {\r\n    toSort = new int[] \r\n      { 5, 1, 89, 255, 7, 88, 200, 123, 66 }; \r\n    sortedInts = new int[] \r\n      {1, 5, 7, 66, 88, 89, 123, 200, 255};\r\n    sortedRangeInts = new int[] \r\n      {5, 1, 89, 7, 88, 200, 255, 123, 66};\r\n    ...\r\n}\r\n```","```\r\n@Test\r\npublic void givenIntArray_whenUsingSort_thenSortedArray() {\r\n    Arrays.sort(toSort);\r\n\r\n    assertTrue(Arrays.equals(toSort, sortedInts));\r\n}\r\n```","```\r\n[1, 5, 7, 66, 88, 89, 123, 200, 255]\r\n```","```\r\nArrays.sort(int[] a, int fromIndex, int toIndex)\r\n```","```\r\n@Test\r\npublic void givenIntArray_whenUsingRangeSort_thenRangeSortedArray() {\r\n    Arrays.sort(toSort, 3, 7);\r\n\r\n    assertTrue(Arrays.equals(toSort, sortedRangeInts));\r\n}\r\n```","```\r\n[255, 7, 88, 200]\r\n```","```\r\n[5, 1, 89, 7, 88, 200, 255, 123, 66]\r\n```","```\r\n@Test \r\npublic void givenIntArray_whenUsingParallelSort_thenArraySorted() {\r\n    Arrays.parallelSort(toSort);\r\n\r\n    assertTrue(Arrays.equals(toSort, sortedInts));\r\n}\r\n```","```\r\nArrays.parallelSort (int [] a, int fromIndex, int toIndex);\r\n```","```\r\n@Test\r\npublic void givenList_whenUsingSort_thenSortedList() {\r\n    List<Integer> toSortList = Ints.asList(toSort);\r\n    Collections.sort(toSortList);\r\n\r\n    assertTrue(Arrays.equals(toSortList.toArray(), \r\n    ArrayUtils.toObject(sortedInts)));\r\n}\r\n```","```\r\n[5, 1, 89, 255, 7, 88, 200, 123, 66]\r\n```","```\r\n[1, 5, 7, 66, 88, 89, 123, 200, 255]\r\n```","```\r\n@Test\r\npublic void givenSet_whenUsingSort_thenSortedSet() {\r\n    Set<Integer> integersSet = new LinkedHashSet<>(Ints.asList(toSort));\r\n    Set<Integer> descSortedIntegersSet = new LinkedHashSet<>(\r\n      Arrays.asList(new Integer[] \r\n        {255, 200, 123, 89, 88, 66, 7, 5, 1}));\r\n\r\n    List<Integer> list = new ArrayList<Integer>(integersSet);\r\n    Collections.sort(Comparator.reverseOrder());\r\n    integersSet = new LinkedHashSet<>(list);\r\n\r\n    assertTrue(Arrays.equals(\r\n      integersSet.toArray(), descSortedIntegersSet.toArray()));\r\n}\r\n```","```\r\n@Before\r\npublic void initVariables () {\r\n    ....\r\n    HashMap<Integer, String> map = new HashMap<>();\r\n    map.put(55, \"John\");\r\n    map.put(22, \"Apple\");\r\n    map.put(66, \"Earl\");\r\n    map.put(77, \"Pearl\");\r\n    map.put(12, \"George\");\r\n    map.put(6, \"Rocky\");\r\n    ....\r\n}\r\n```","```\r\n@Test\r\npublic void givenMap_whenSortingByKeys_thenSortedMap() {\r\n    Integer[] sortedKeys = new Integer[] { 6, 12, 22, 55, 66, 77 };\r\n\r\n    List<Map.Entry<Integer, String>> entries \r\n      = new ArrayList<>(map.entrySet());\r\n    Collections.sort(entries, new Comparator<Entry<Integer, String>>() {\r\n        @Override\r\n        public int compare(\r\n          Entry<Integer, String> o1, Entry<Integer, String> o2) {\r\n            return o1.getKey().compareTo(o2.getKey());\r\n        }\r\n    });\r\n    Map<Integer, String> sortedMap = new LinkedHashMap<>();\r\n    for (Map.Entry<Integer, String> entry : entries) {\r\n        sortedMap.put(entry.getKey(), entry.getValue());\r\n    }\r\n\r\n    assertTrue(Arrays.equals(sortedMap.keySet().toArray(), sortedKeys));\r\n}\r\n```","```\r\n[Key: 66 , Value: Earl] \r\n[Key: 22 , Value: Apple] \r\n[Key: 6 , Value: Rocky] \r\n[Key: 55 , Value: John] \r\n[Key: 12 , Value: George] \r\n[Key: 77 , Value: Pearl]\r\n```","```\r\n[Key: 6 , Value: Rocky] \r\n[Key: 12 , Value: George] \r\n[Key: 22 , Value: Apple] \r\n[Key: 55 , Value: John] \r\n[Key: 66 , Value: Earl] \r\n[Key: 77 , Value: Pearl] \r\n```","```\r\n@Test\r\npublic void givenMap_whenSortingByValues_thenSortedMap() {\r\n    String[] sortedValues = new String[] \r\n      { \"Apple\", \"Earl\", \"George\", \"John\", \"Pearl\", \"Rocky\" };\r\n\r\n    List<Map.Entry<Integer, String>> entries \r\n      = new ArrayList<>(map.entrySet());\r\n    Collections.sort(entries, new Comparator<Entry<Integer, String>>() {\r\n        @Override\r\n        public int compare(\r\n          Entry<Integer, String> o1, Entry<Integer, String> o2) {\r\n            return o1.getValue().compareTo(o2.getValue());\r\n        }\r\n    });\r\n    Map<Integer, String> sortedMap = new LinkedHashMap<>();\r\n    for (Map.Entry<Integer, String> entry : entries) {\r\n        sortedMap.put(entry.getKey(), entry.getValue());\r\n    }\r\n\r\n    assertTrue(Arrays.equals(sortedMap.values().toArray(), sortedValues));\r\n}\r\n```","```\r\n[Key: 66 , Value: Earl] \r\n[Key: 22 , Value: Apple] \r\n[Key: 6 , Value: Rocky] \r\n[Key: 55 , Value: John] \r\n[Key: 12 , Value: George] \r\n[Key: 77 , Value: Pearl]\r\n```","```\r\n[Key: 22 , Value: Apple] \r\n[Key: 66 , Value: Earl] \r\n[Key: 12 , Value: George] \r\n[Key: 55 , Value: John] \r\n[Key: 77 , Value: Pearl] \r\n[Key: 6 , Value: Rocky]\r\n```","```\r\npublic class Employee implements Comparable {\r\n    private String name;\r\n    private int age;\r\n    private double salary;\r\n\r\n    public Employee(String name, int age, double salary) {\r\n        ...\r\n    }\r\n\r\n    // standard getters, setters and toString\r\n}\r\n```","```\r\n@Before\r\npublic void initVariables () {\r\n    ....    \r\n    employees = new Employee[] { \r\n      new Employee(\"John\", 23, 5000), new Employee(\"Steve\", 26, 6000), \r\n      new Employee(\"Frank\", 33, 7000), new Employee(\"Earl\", 43, 10000), \r\n      new Employee(\"Jessica\", 23, 4000), new Employee(\"Pearl\", 33, 6000)};\r\n\r\n    employeesSorted = new Employee[] {\r\n      new Employee(\"Earl\", 43, 10000), new Employee(\"Frank\", 33, 70000),\r\n      new Employee(\"Jessica\", 23, 4000), new Employee(\"John\", 23, 5000), \r\n      new Employee(\"Pearl\", 33, 4000), new Employee(\"Steve\", 26, 6000)};\r\n\r\n    employeesSortedByAge = new Employee[] { \r\n      new Employee(\"John\", 23, 5000), new Employee(\"Jessica\", 23, 4000), \r\n      new Employee(\"Steve\", 26, 6000), new Employee(\"Frank\", 33, 70000), \r\n      new Employee(\"Pearl\", 33, 4000), new Employee(\"Earl\", 43, 10000)};\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmpArray_SortEmpArray_thenSortedArrayinNaturalOrder() {\r\n    Arrays.sort(employees);\r\n\r\n    assertTrue(Arrays.equals(employees, employeesSorted));\r\n}\r\n```","```\r\npublic class Employee implements Comparable {\r\n    ...\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        return ((Employee) obj).getName().equals(getName());\r\n    }\r\n\r\n    @Override\r\n    public int compareTo(Object o) {\r\n        Employee e = (Employee) o;\r\n        return getName().compareTo(e.getName());\r\n    }\r\n}\r\n```","```\r\n[(\"Earl\", 43, 10000),(\"Frank\", 33, 70000), (\"Jessica\", 23, 4000),\r\n (\"John\", 23, 5000),(\"Pearl\", 33, 4000), (\"Steve\", 26, 6000)]\r\n```","```\r\n@Test\r\npublic void givenIntegerArray_whenUsingSort_thenSortedArray() {\r\n    Integer [] integers = ArrayUtils.toObject(toSort);\r\n    Arrays.sort(integers, new Comparator<Integer>() {\r\n        @Override\r\n        public int compare(Integer a, Integer b) {\r\n            return Integer.compare(a, b);\r\n        }\r\n    });\r\n\r\n    assertTrue(Arrays.equals(integers, ArrayUtils.toObject(sortedInts)));\r\n}\r\n```","```\r\nArrays.sort(employees, new Comparator<Employee>() {\r\n    @Override\r\n    public int compare(Employee o1, Employee o2) {\r\n       return Double.compare(o1.getSalary(), o2.getSalary());\r\n    }\r\n });\r\n```","```\r\n[(Jessica,23,4000.0), (John,23,5000.0), (Pearl,33,6000.0), (Steve,26,6000.0), \r\n(Frank,33,7000.0), (Earl,43,10000.0)] \r\n```","```\r\nComparator<Integer> c  = new Comparator<>() {\r\n    @Override\r\n    public int compare(Integer a, Integer b) {\r\n        return Integer.compare(a, b);\r\n    }\r\n}\r\n```","```\r\nComparator<Integer> c = (a, b) -> Integer.compare(a, b);\r\n```","```\r\n@Test\r\npublic void givenArray_whenUsingSortWithLambdas_thenSortedArray() {\r\n    Integer [] integersToSort = ArrayUtils.toObject(toSort);\r\n    Arrays.sort(integersToSort, (a, b) -> {\r\n        return Integer.compare(a, b);\r\n    });\r\n\r\n    assertTrue(Arrays.equals(integersToSort, \r\n      ArrayUtils.toObject(sortedInts)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenArrayObjects_whenUsingComparing_thenSortedArrayObjects() {\r\n    List<Employee> employeesList = Arrays.asList(employees);\r\n    employees.sort(Comparator.comparing(Employee::getAge));\r\n\r\n    assertTrue(Arrays.toString(employees.toArray())\r\n      .equals(sortedArrayString));\r\n}\r\n```","```\r\n[(John,23,5000.0), (Jessica,23,4000.0), (Steve,26,6000.0), (Frank,33,7000.0), \r\n(Pearl,33,6000.0), (Earl,43,10000.0)]\r\n```","```\r\n... \r\nemployees.sort(Comparator.comparing(Employee::getAge)\r\n  .thenComparing(Employee::getName)); \r\n... \r\n```","```\r\n[(Jessica,23,4000.0), \r\n (John,23,5000.0), \r\n (Steve,26,6000.0), \r\n (Frank,33,7000.0), \r\n (Pearl,33,6000.0), \r\n (Earl,43,10000.0)\r\n]\r\n```"]