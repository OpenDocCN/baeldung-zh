["```\r\npublic class Post {\r\n    ...\r\n    @OneToMany(fetch = FetchType.EAGER, mappedBy = \"post\")\r\n    private List<SubmissionResponse> submissionsResponse;\r\n}\r\n```","```\r\n@Entity\r\npublic class SubmissionResponse implements IEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private int attemptNumber;\r\n\r\n    private String content;\r\n\r\n    private Date submissionDate;\r\n\r\n    private Date scoreCheckDate;\r\n\r\n    @JsonIgnore\r\n    @ManyToOne\r\n    @JoinColumn(name = \"post_id\", nullable = false)\r\n    private Post post;\r\n\r\n    public SubmissionResponse(int attemptNumber, String content, Post post) {\r\n        super();\r\n        this.attemptNumber = attemptNumber;\r\n        this.content = content;\r\n        this.submissionDate = new Date();\r\n        this.post = post;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(\"Attempt No \").append(attemptNumber).append(\" : \").append(content);\r\n        return builder.toString();\r\n    }\r\n}\r\n```","```\r\npublic interface SubmissionResponseRepository extends JpaRepository<SubmissionResponse, Long> {\r\n\r\n    SubmissionResponse findOneByPostAndAttemptNumber(Post post, int attemptNumber);\r\n}\r\n```","```\r\nprivate final static String SCORE_TEMPLATE = \"score %d %s minimum score %d\";\r\nprivate final static String TOTAL_VOTES_TEMPLATE = \"total votes %d %s minimum total votes %d\";\r\n\r\nprotected String getFailReason(Post post, PostScores postScores) { \r\n    StringBuilder builder = new StringBuilder(); \r\n    builder.append(\"Failed because \"); \r\n    builder.append(String.format(\r\n      SCORE_TEMPLATE, postScores.getScore(), \"<\", post.getMinScoreRequired())); \r\n\r\n    if (post.getMinTotalVotes() > 0) { \r\n        builder.append(\" and \"); \r\n        builder.append(String.format(TOTAL_VOTES_TEMPLATE, \r\n          postScores.getTotalVotes(), \"<\", post.getMinTotalVotes()));\r\n    } \r\n    if (post.isKeepIfHasComments()) { \r\n        builder.append(\" and has no comments\"); \r\n    } \r\n    return builder.toString(); \r\n}\r\n\r\nprotected String getSuccessReason(Post post, PostScores postScores) {\r\n    StringBuilder builder = new StringBuilder(); \r\n    if (postScores.getScore() >= post.getMinScoreRequired()) { \r\n        builder.append(\"Succeed because \"); \r\n        builder.append(String.format(SCORE_TEMPLATE, \r\n          postScores.getScore(), \">=\", post.getMinScoreRequired())); \r\n        return builder.toString(); \r\n    } \r\n    if (\r\n      (post.getMinTotalVotes() > 0) && \r\n      (postScores.getTotalVotes() >= post.getMinTotalVotes())\r\n    ) { \r\n        builder.append(\"Succeed because \"); \r\n        builder.append(String.format(TOTAL_VOTES_TEMPLATE, \r\n          postScores.getTotalVotes(), \">=\", post.getMinTotalVotes()));\r\n        return builder.toString(); \r\n    } \r\n    return \"Succeed because has comments\"; \r\n} \r\n```","```\r\nprivate void submitPost(...) {\r\n    ...\r\n    if (errorNode == null) {\r\n        post.setSubmissionsResponse(addAttemptResponse(post, \"Submitted to Reddit\"));\r\n        ...\r\n    } else {\r\n        post.setSubmissionsResponse(addAttemptResponse(post, errorNode.toString()));\r\n        ...\r\n    }\r\n}\r\nprivate void checkAndReSubmit(Post post) {\r\n    if (didIntervalPass(...)) {\r\n        PostScores postScores = getPostScores(post);\r\n        if (didPostGoalFail(post, postScores)) {\r\n            ...\r\n            resetPost(post, getFailReason(post, postScores));\r\n        } else {\r\n            ...\r\n            updateLastAttemptResponse(\r\n              post, \"Post reached target score successfully \" + \r\n                getSuccessReason(post, postScores));\r\n        }\r\n    }\r\n}\r\nprivate void checkAndDeleteInternal(Post post) {\r\n    if (didIntervalPass(...)) {\r\n        PostScores postScores = getPostScores(post);\r\n        if (didPostGoalFail(post, postScores)) {\r\n            updateLastAttemptResponse(post, \r\n              \"Deleted from reddit, consumed all attempts without reaching score \" + \r\n                getFailReason(post, postScores));\r\n            ...\r\n        } else {\r\n            updateLastAttemptResponse(post, \r\n              \"Post reached target score successfully \" + \r\n                getSuccessReason(post, postScores));\r\n            ...\r\n        }\r\n    }\r\n}\r\nprivate void resetPost(Post post, String failReason) {\r\n    ...\r\n    updateLastAttemptResponse(post, \"Deleted from Reddit, to be resubmitted \" + failReason);\r\n    ...\r\n}\r\n```","```\r\npublic class ScheduledPostDto {\r\n    ...\r\n\r\n    private String status;\r\n\r\n    private List<SubmissionResponseDto> detailedStatus;\r\n}\r\n```","```\r\npublic class SubmissionResponseDto {\r\n\r\n    private int attemptNumber;\r\n\r\n    private String content;\r\n\r\n    private String localSubmissionDate;\r\n\r\n    private String localScoreCheckDate;\r\n}\r\n```","```\r\nprivate ScheduledPostDto convertToDto(Post post) {\r\n    ...\r\n    List<SubmissionResponse> response = post.getSubmissionsResponse();\r\n    if ((response != null) && (response.size() > 0)) {\r\n        postDto.setStatus(response.get(response.size() - 1).toString().substring(0, 30));\r\n        List<SubmissionResponseDto> responsedto = \r\n          post.getSubmissionsResponse().stream().\r\n            map(res -> generateResponseDto(res)).collect(Collectors.toList());\r\n        postDto.setDetailedStatus(responsedto);\r\n    } else {\r\n        postDto.setStatus(\"Not sent yet\");\r\n        postDto.setDetailedStatus(Collections.emptyList());\r\n    }\r\n    return postDto;\r\n}\r\n\r\nprivate SubmissionResponseDto generateResponseDto(SubmissionResponse responseEntity) {\r\n    SubmissionResponseDto dto = modelMapper.map(responseEntity, SubmissionResponseDto.class);\r\n    String timezone = userService.getCurrentUser().getPreference().getTimezone();\r\n    dto.setLocalSubmissionDate(responseEntity.getSubmissionDate(), timezone);\r\n    if (responseEntity.getScoreCheckDate() != null) {\r\n        dto.setLocalScoreCheckDate(responseEntity.getScoreCheckDate(), timezone);\r\n    }\r\n    return dto;\r\n}\r\n```","```\r\n<div class=\"modal\">\r\n    <h4 class=\"modal-title\">Detailed Status</h4>\r\n    <table id=\"res\"></table>\r\n</div>\r\n\r\n<script >\r\nvar loadedData = [];\r\nvar detailedResTable = $('#res').DataTable( {\r\n    \"searching\":false,\r\n    \"paging\": false,\r\n    columns: [\r\n        { title: \"Attempt Number\", data: \"attemptNumber\" },\r\n        { title: \"Detailed Status\", data: \"content\" },\r\n        { title: \"Attempt Submitted At\", data: \"localSubmissionDate\" },\r\n        { title: \"Attempt Score Checked At\", data: \"localScoreCheckDate\" }\r\n ]\r\n} );\r\n\r\n$(document).ready(function() {\r\n    $('#myposts').dataTable( {\r\n        ...\r\n        \"columnDefs\": [\r\n            { \"targets\": 2, \"data\": \"status\",\r\n              \"render\": function ( data, type, full, meta ) {\r\n                  return data + \r\n                    ' <a href=\"#\" onclick=\"showDetailedStatus('+meta.row+' )\">More Details</a>';\r\n              }\r\n            },\r\n            ....\r\n        ],\r\n        ...\r\n    });\r\n});\r\n\r\nfunction showDetailedStatus(row){\r\n    detailedResTable.clear().rows.add(loadedData[row].detailedStatus).draw();\r\n    $('.modal').modal();\r\n}\r\n\r\n</script>\r\n```","```\r\n@Test\r\npublic void whenHasEnoughScore_thenSucceed() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    PostScores postScores = new PostScores(6, 10, 1);\r\n\r\n    assertTrue(getSuccessReason(post, postScores).contains(\"Succeed because score\"));\r\n}\r\n\r\n@Test\r\npublic void whenHasEnoughTotalVotes_thenSucceed() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    post.setMinTotalVotes(8);\r\n    PostScores postScores = new PostScores(2, 10, 1);\r\n\r\n    assertTrue(getSuccessReason(post, postScores).contains(\"Succeed because total votes\"));\r\n}\r\n\r\n@Test\r\npublic void givenKeepPostIfHasComments_whenHasComments_thenSucceed() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    post.setKeepIfHasComments(true);\r\n    final PostScores postScores = new PostScores(2, 10, 1);\r\n\r\n    assertTrue(getSuccessReason(post, postScores).contains(\"Succeed because has comments\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenNotEnoughScore_thenFail() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    PostScores postScores = new PostScores(2, 10, 1);\r\n\r\n    assertTrue(getFailReason(post, postScores).contains(\"Failed because score\"));\r\n}\r\n\r\n@Test\r\npublic void whenNotEnoughTotalVotes_thenFail() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    post.setMinTotalVotes(15);\r\n    PostScores postScores = new PostScores(2, 10, 1);\r\n\r\n    String reason = getFailReason(post, postScores);\r\n    assertTrue(reason.contains(\"Failed because score\"));\r\n    assertTrue(reason.contains(\"and total votes\"));\r\n}\r\n\r\n@Test\r\npublic void givenKeepPostIfHasComments_whenNotHasComments_thenFail() {\r\n    Post post = new Post();\r\n    post.setMinScoreRequired(5);\r\n    post.setKeepIfHasComments(true);\r\n    final PostScores postScores = new PostScores(2, 10, 0);\r\n\r\n    String reason = getFailReason(post, postScores);\r\n    assertTrue(reason.contains(\"Failed because score\"));\r\n    assertTrue(reason.contains(\"and has no comments\"));\r\n}\r\n```"]