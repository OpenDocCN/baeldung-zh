["```\r\nmongod --replSet rs0\r\n```","```\r\nmongo --eval \"rs.initiate()\"\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-mongodb</artifactId>\r\n    <version>3.0.3.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableMongoRepositories(basePackages = \"com.baeldung.repository\")\r\npublic class MongoConfig extends AbstractMongoClientConfiguration{\r\n\r\n    @Bean\r\n    MongoTransactionManager transactionManager(MongoDatabaseFactory dbFactory) {\r\n        return new MongoTransactionManager(dbFactory);\r\n    }\r\n\r\n    @Override\r\n    protected String getDatabaseName() {\r\n        return \"test\";\r\n    }\r\n\r\n    @Override\r\n    public MongoClient mongoClient() {\r\n        final ConnectionString connectionString = new ConnectionString(\"mongodb://localhost:27017/test\");\r\n        final MongoClientSettings mongoClientSettings = MongoClientSettings.builder()\r\n            .applyConnectionString(connectionString)\r\n            .build();\r\n        return MongoClients.create(mongoClientSettings);\r\n    }\r\n}\r\n```","```\r\n@Test\r\n@Transactional\r\npublic void whenPerformMongoTransaction_thenSuccess() {\r\n    userRepository.save(new User(\"John\", 30));\r\n    userRepository.save(new User(\"Ringo\", 35));\r\n    Query query = new Query().addCriteria(Criteria.where(\"name\").is(\"John\"));\r\n    List<User> users = mongoTemplate.find(query, User.class);\r\n\r\n    assertThat(users.size(), is(1));\r\n}\r\n```","```\r\n@Test(expected = MongoTransactionException.class)\r\n@Transactional\r\npublic void whenListCollectionDuringMongoTransaction_thenException() {\r\n    if (mongoTemplate.collectionExists(User.class)) {\r\n        mongoTemplate.save(new User(\"John\", 30));\r\n        mongoTemplate.save(new User(\"Ringo\", 35));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenTransactionTemplate_whenPerformTransaction_thenSuccess() {\r\n    mongoTemplate.setSessionSynchronization(SessionSynchronization.ALWAYS);                                     \r\n\r\n    TransactionTemplate transactionTemplate = new TransactionTemplate(mongoTransactionManager);\r\n    transactionTemplate.execute(new TransactionCallbackWithoutResult() {\r\n        @Override\r\n        protected void doInTransactionWithoutResult(TransactionStatus status) {\r\n            mongoTemplate.insert(new User(\"Kim\", 20));\r\n            mongoTemplate.insert(new User(\"Jack\", 45));\r\n        };\r\n    });\r\n\r\n    Query query = new Query().addCriteria(Criteria.where(\"name\").is(\"Jack\")); \r\n    List<User> users = mongoTemplate.find(query, User.class);\r\n\r\n    assertThat(users.size(), is(1));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.mongodb</groupId>\r\n    <artifactId>mongodb-driver-reactivestreams</artifactId>\r\n    <version>4.1.0</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.mongodb</groupId>\r\n    <artifactId>mongodb-driver-sync</artifactId>\r\n    <version>4.0.5</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <version>3.2.0.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableReactiveMongoRepositories(basePackages \r\n  = \"com.baeldung.reactive.repository\")\r\npublic class MongoReactiveConfig \r\n  extends AbstractReactiveMongoConfiguration {\r\n\r\n    @Override\r\n    public MongoClient reactiveMongoClient() {\r\n        return MongoClients.create();\r\n    }\r\n\r\n    @Override\r\n    protected String getDatabaseName() {\r\n        return \"reactive\";\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate ReactiveMongoOperations reactiveOps;\r\n\r\n@Test\r\npublic void whenPerformTransaction_thenSuccess() {\r\n    User user1 = new User(\"Jane\", 23);\r\n    User user2 = new User(\"John\", 34);\r\n    reactiveOps.inTransaction()\r\n      .execute(action -> action.insert(user1)\r\n      .then(action.insert(user2)));\r\n}\r\n```"]