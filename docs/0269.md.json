["```\r\n<dependency>\r\n    <groupId>org.activiti</groupId>\r\n    <artifactId>activiti-spring-boot-starter-basic</artifactId>\r\n</dependency>\r\n```","```\r\n <process id=\"my-process\" name=\"say-hello-process\" isExecutable=\"true\">\r\n     <startEvent id=\"startEvent\" name=\"startEvent\">\r\n     </startEvent>\r\n     <sequenceFlow id=\"sequence-flow-1\" sourceRef=\"startEvent\" targetRef=\"A\">\r\n     </sequenceFlow>     \r\n     <userTask id=\"A\" name=\"A\" activiti:assignee=\"$INITIATOR\">\r\n     </userTask>\r\n     <sequenceFlow id=\"sequence-flow-2\" sourceRef=\"A\" targetRef=\"endEvent\">\r\n     </sequenceFlow>\r\n     <endEvent id=\"endEvent\" name=\"endEvent\">\r\n     </endEvent>\r\n</process>\r\n```","```\r\n@Autowired\r\nprivate RuntimeService runtimeService;\r\n\r\n@GetMapping(\"/start-process\")\r\npublic String startProcess() {\r\n\r\n    runtimeService.startProcessInstanceByKey(\"my-process\");\r\n    return \"Process started. Number of currently running\"\r\n      + \"process instances = \"\r\n      + runtimeService.createProcessInstanceQuery().count();\r\n}\r\n```","```\r\n@Test\r\npublic void givenProcess_whenStartProcess_thenIncreaseInProcessInstanceCount() \r\n  throws Exception {\r\n\r\n    String responseBody = this.mockMvc\r\n      .perform(MockMvcRequestBuilders.get(\"/start-process\"))\r\n      .andReturn().getResponse().getContentAsString();\r\n\r\n    assertEquals(\"Process started. Number of currently running\"\r\n      + \" process instances = 1\", responseBody);\r\n\r\n    responseBody = this.mockMvc\r\n      .perform(MockMvcRequestBuilders.get(\"/start-process\"))\r\n      .andReturn().getResponse().getContentAsString();\r\n\r\n    assertEquals(\"Process started. Number of currently running\"\r\n      + \" process instances = 2\", responseBody);\r\n\r\n    responseBody = this.mockMvc\r\n      .perform(MockMvcRequestBuilders.get(\"/start-process\"))\r\n      .andReturn().getResponse().getContentAsString();\r\n\r\n    assertEquals(\"Process started. Number of currently running\"\r\n      + \" process instances = 3\", responseBody);\r\n} \r\n```","```\r\nclass TaskRepresentation {\r\n    private String id;\r\n    private String name;\r\n    private String processInstanceId;\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\n@GetMapping(\"/get-tasks/{processInstanceId}\")\r\npublic List<TaskRepresentation> getTasks(\r\n  @PathVariable String processInstanceId) {\r\n\r\n    List<Task> usertasks = taskService.createTaskQuery()\r\n      .processInstanceId(processInstanceId)\r\n      .list();\r\n\r\n    return usertasks.stream()\r\n      .map(task -> new TaskRepresentation(\r\n        task.getId(), task.getName(), task.getProcessInstanceId()))\r\n      .collect(Collectors.toList());\r\n} \r\n```","```\r\n@Test\r\npublic void givenProcess_whenProcessInstance_thenReceivedRunningTask() \r\n  throws Exception {\r\n\r\n    this.mockMvc.perform(MockMvcRequestBuilders.get(\"/start-process\"))\r\n      .andReturn()\r\n      .getResponse();\r\n    ProcessInstance pi = runtimeService.createProcessInstanceQuery()\r\n      .orderByProcessInstanceId()\r\n      .desc()\r\n      .list()\r\n      .get(0);\r\n    String responseBody = this.mockMvc\r\n      .perform(MockMvcRequestBuilders.get(\"/get-tasks/\" + pi.getId()))\r\n      .andReturn()\r\n      .getResponse()\r\n      .getContentAsString();\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    List<TaskRepresentation> tasks = Arrays.asList(mapper\r\n      .readValue(responseBody, TaskRepresentation[].class));\r\n\r\n    assertEquals(1, tasks.size());\r\n    assertEquals(\"A\", tasks.get(0).getName());\r\n}\r\n```","```\r\n@GetMapping(\"/complete-task-A/{processInstanceId}\")\r\npublic void completeTaskA(@PathVariable String processInstanceId) {\r\n    Task task = taskService.createTaskQuery()\r\n      .processInstanceId(processInstanceId)\r\n      .singleResult();\r\n    taskService.complete(task.getId());\r\n}\r\n```","```\r\n@Test\r\npublic void givenProcess_whenCompleteTaskA_thenNoProcessInstance() \r\n  throws Exception {\r\n\r\n    this.mockMvc.perform(MockMvcRequestBuilders.get(\"/start-process\"))\r\n      .andReturn()\r\n      .getResponse();\r\n    ProcessInstance pi = runtimeService.createProcessInstanceQuery()\r\n      .orderByProcessInstanceId()\r\n      .desc()\r\n      .list()\r\n      .get(0);\r\n    this.mockMvc.perform(MockMvcRequestBuilders.get(\"/complete-task-A/\" + pi.getId()))\r\n      .andReturn()\r\n      .getResponse()\r\n      .getContentAsString();\r\n    List<ProcessInstance> list = runtimeService.createProcessInstanceQuery().list();\r\n    assertEquals(0, list.size());\r\n}\r\n```"]