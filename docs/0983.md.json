["```\r\npublic class CustomAuthenticationFailureHandler \r\n  implements AuthenticationFailureHandler {\r\n\r\n    private ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(\r\n      HttpServletRequest request,\r\n      HttpServletResponse response,\r\n      AuthenticationException exception) \r\n      throws IOException, ServletException {\r\n\r\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\r\n        Map<String, Object> data = new HashMap<>();\r\n        data.put(\r\n          \"timestamp\", \r\n          Calendar.getInstance().getTime());\r\n        data.put(\r\n          \"exception\", \r\n          exception.getMessage());\r\n\r\n        response.getOutputStream()\r\n          .println(objectMapper.writeValueAsString(data));\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) \r\n      throws Exception {\r\n        auth.inMemoryAuthentication()\r\n          .withUser(\"user1\").password(passwordEncoder.encode(\"user1Pass\")).roles(\"USER\");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) \r\n      throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .formLogin()\r\n          .failureHandler(authenticationFailureHandler());\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationFailureHandler authenticationFailureHandler() {\r\n        return new CustomAuthenticationFailureHandler();\r\n    }\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n} \r\n```"]