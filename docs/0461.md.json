["```\r\n<dependency>\r\n    <groupId>org.jboss.aerogear</groupId>\r\n    <artifactId>aerogear-otp-java</artifactId>\r\n    <version>1.0.0</version>\r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class User {\r\n    ...\r\n    private boolean isUsing2FA;\r\n    private String secret;\r\n\r\n    public User() {\r\n        super();\r\n        this.secret = Base32.random();\r\n        ...\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomWebAuthenticationDetailsSource implements \r\n  AuthenticationDetailsSource<HttpServletRequest, WebAuthenticationDetails> {\r\n\r\n    @Override\r\n    public WebAuthenticationDetails buildDetails(HttpServletRequest context) {\r\n        return new CustomWebAuthenticationDetails(context);\r\n    }\r\n}\r\n```","```\r\npublic class CustomWebAuthenticationDetails extends WebAuthenticationDetails {\r\n\r\n    private String verificationCode;\r\n\r\n    public CustomWebAuthenticationDetails(HttpServletRequest request) {\r\n        super(request);\r\n        verificationCode = request.getParameter(\"code\");\r\n    }\r\n\r\n    public String getVerificationCode() {\r\n        return verificationCode;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class LssSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private CustomWebAuthenticationDetailsSource authenticationDetailsSource;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.formLogin()\r\n            .authenticationDetailsSource(authenticationDetailsSource)\r\n            ...\r\n    } \r\n}\r\n```","```\r\n<labelth:text=\"#{label.form.login2fa}\">\r\n    Google Authenticator Verification Code\r\n</label>\r\n<input type='text' name='code'/>\r\n```","```\r\npublic class CustomAuthenticationProvider extends DaoAuthenticationProvider {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Override\r\n    public Authentication authenticate(Authentication auth)\r\n      throws AuthenticationException {\r\n        String verificationCode \r\n          = ((CustomWebAuthenticationDetails) auth.getDetails())\r\n            .getVerificationCode();\r\n        User user = userRepository.findByEmail(auth.getName());\r\n        if ((user == null)) {\r\n            throw new BadCredentialsException(\"Invalid username or password\");\r\n        }\r\n        if (user.isUsing2FA()) {\r\n            Totp totp = new Totp(user.getSecret());\r\n            if (!isValidLong(verificationCode) || !totp.verify(verificationCode)) {\r\n                throw new BadCredentialsException(\"Invalid verfication code\");\r\n            }\r\n        }\r\n\r\n        Authentication result = super.authenticate(auth);\r\n        return new UsernamePasswordAuthenticationToken(\r\n          user, result.getCredentials(), result.getAuthorities());\r\n    }\r\n\r\n    private boolean isValidLong(String code) {\r\n        try {\r\n            Long.parseLong(code);\r\n        } catch (NumberFormatException e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean supports(Class<?> authentication) {\r\n        return authentication.equals(UsernamePasswordAuthenticationToken.class);\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic DaoAuthenticationProvider authProvider() {\r\n    CustomAuthenticationProvider authProvider = new CustomAuthenticationProvider();\r\n    authProvider.setUserDetailsService(userDetailsService);\r\n    authProvider.setPasswordEncoder(encoder());\r\n    return authProvider;\r\n}\r\n```","```\r\nUse Two step verification <input type=\"checkbox\" name=\"using2FA\" value=\"true\"/>\r\n```","```\r\n@GetMapping(\"/registrationConfirm\")\r\npublic String confirmRegistration(@RequestParam(\"token\") String token, ...) {\r\n    String result = userService.validateVerificationToken(token);\r\n    if(result.equals(\"valid\")) {\r\n        User user = userService.getUser(token);\r\n        if (user.isUsing2FA()) {\r\n            model.addAttribute(\"qr\", userService.generateQRUrl(user));\r\n            return \"redirect:/qrcode.html?lang=\" + locale.getLanguage();\r\n        }\r\n\r\n        model.addAttribute(\r\n          \"message\", messages.getMessage(\"message.accountVerified\", null, locale));\r\n        return \"redirect:/login?lang=\" + locale.getLanguage();\r\n    }\r\n    ...\r\n}\r\n```","```\r\npublic static String QR_PREFIX = \r\n  \"https://chart.googleapis.com/chart?chs=200x200&chld;=M%%7C0&cht;=qr&chl;=\";\r\n\r\n@Override\r\npublic String generateQRUrl(User user) {\r\n    return QR_PREFIX + URLEncoder.encode(String.format(\r\n      \"otpauth://totp/%s:%s?secret=%s&issuer;=%s\", \r\n      APP_NAME, user.getEmail(), user.getSecret(), APP_NAME),\r\n      \"UTF-8\");\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n<div id=\"qr\">\r\n    <p>\r\n        Scan this Barcode using Google Authenticator app on your phone \r\n        to use it later in login\r\n    </p>\r\n    <img th:src=\"${param.qr[0]}\"/>\r\n</div>\r\n<a href=\"/login\" class=\"btn btn-primary\">Go to login page</a>\r\n</body>\r\n</html>\r\n```","```\r\n@PostMapping(\"/user/update/2fa\")\r\npublic GenericResponse modifyUser2FA(@RequestParam(\"use2FA\") boolean use2FA) \r\n  throws UnsupportedEncodingException {\r\n    User user = userService.updateUser2FA(use2FA);\r\n    if (use2FA) {\r\n        return new GenericResponse(userService.generateQRUrl(user));\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@Override\r\npublic User updateUser2FA(boolean use2FA) {\r\n    Authentication curAuth = SecurityContextHolder.getContext().getAuthentication();\r\n    User currentUser = (User) curAuth.getPrincipal();\r\n    currentUser.setUsing2FA(use2FA);\r\n    currentUser = repository.save(currentUser);\r\n\r\n    Authentication auth = new UsernamePasswordAuthenticationToken(\r\n      currentUser, currentUser.getPassword(), curAuth.getAuthorities());\r\n    SecurityContextHolder.getContext().setAuthentication(auth);\r\n    return currentUser;\r\n}\r\n```","```\r\n<div th:if=\"${#authentication.principal.using2FA}\">\r\n    You are using Two-step authentication \r\n    <a href=\"#\" onclick=\"disable2FA()\">Disable 2FA</a> \r\n</div>\r\n<div th:if=\"${! #authentication.principal.using2FA}\">\r\n    You are not using Two-step authentication \r\n    <a href=\"#\" onclick=\"enable2FA()\">Enable 2FA</a> \r\n</div>\r\n<br/>\r\n<div id=\"qr\" style=\"display:none;\">\r\n    <p>Scan this Barcode using Google Authenticator app on your phone </p>\r\n</div>\r\n\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"></script>\r\n<script type=\"text/javascript\">\r\nfunction enable2FA(){\r\n    set2FA(true);\r\n}\r\nfunction disable2FA(){\r\n    set2FA(false);\r\n}\r\nfunction set2FA(use2FA){\r\n    $.post( \"/user/update/2fa\", { use2FA: use2FA } , function( data ) {\r\n        if(use2FA){\r\n        \t$(\"#qr\").append('<img src=\"'+data.message+'\" />').show();\r\n        }else{\r\n            window.location.reload();\r\n        }\r\n    });\r\n}\r\n</script>\r\n```"]