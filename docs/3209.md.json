["```\r\nString[] strArray1 = {\"element 1\", \"element 2\", \"element 3\"};\r\nString[] strArray2 = {\"element 4\", \"element 5\"};\r\n```","```\r\nString[] expectedStringArray = {\"element 1\", \"element 2\", \"element 3\", \"element 4\", \"element 5\"}\r\n```","```\r\nint[] intArray1 = { 0, 1, 2, 3 };\r\nint[] intArray2 = { 4, 5, 6, 7 };\r\nint[] expectedIntArray = { 0, 1, 2, 3, 4, 5, 6, 7 }; \r\n```","```\r\nstatic <T> T[] concatWithCollection(T[] array1, T[] array2) {\r\n    List<T> resultList = new ArrayList<>(array1.length + array2.length);\r\n    Collections.addAll(resultList, array1);\r\n    Collections.addAll(resultList, array2);\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    //the type cast is safe as the array1 has the type T[]\r\n    T[] resultArray = (T[]) Array.newInstance(array1.getClass().getComponentType(), 0);\r\n    return resultList.toArray(resultArray);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoStringArrays_whenConcatWithList_thenGetExpectedResult() {\r\n    String[] result = ArrayConcatUtil.concatWithCollection(strArray1, strArray2);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n} \r\n```","```\r\nstatic <T> T[] concatWithArrayCopy(T[] array1, T[] array2) {\r\n    T[] result = Arrays.copyOf(array1, array1.length + array2.length);\r\n    System.arraycopy(array2, 0, result, array1.length, array2.length);\r\n    return result;\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoStringArrays_whenConcatWithCopy_thenGetExpectedResult() {\r\n    String[] result = ArrayConcatUtil.concatWithArrayCopy(strArray1, strArray2);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n} \r\n```","```\r\nstatic <T> T concatWithCopy2(T array1, T array2) {\r\n    if (!array1.getClass().isArray() || !array2.getClass().isArray()) {\r\n        throw new IllegalArgumentException(\"Only arrays are accepted.\");\r\n    }\r\n\r\n    Class<?> compType1 = array1.getClass().getComponentType();\r\n    Class<?> compType2 = array2.getClass().getComponentType();\r\n\r\n    if (!compType1.equals(compType2)) {\r\n        throw new IllegalArgumentException(\"Two arrays have different types.\");\r\n    }\r\n\r\n    int len1 = Array.getLength(array1);\r\n    int len2 = Array.getLength(array2);\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    //the cast is safe due to the previous checks\r\n    T result = (T) Array.newInstance(compType1, len1 + len2);\r\n\r\n    System.arraycopy(array1, 0, result, 0, len1);\r\n    System.arraycopy(array2, 0, result, len1, len2);\r\n\r\n    return result;\r\n} \r\n```","```\r\nif (!array1.getClass().isArray() || !array2.getClass().isArray()) {\r\n    throw new IllegalArgumentException(\"Only arrays are accepted.\");\r\n}\r\n```","```\r\nif (!compType1.equals(compType2)) {\r\n    throw new IllegalArgumentException(\"Two arrays have different types.\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoStrings_whenConcatWithCopy2_thenGetException() {\r\n    String exMsg = \"Only arrays are accepted.\";\r\n    try {\r\n        ArrayConcatUtil.concatWithCopy2(\"String Nr. 1\", \"String Nr. 2\");\r\n        fail(String.format(\"IllegalArgumentException with message:'%s' should be thrown. But it didn't\", exMsg));\r\n    } catch (IllegalArgumentException e) {\r\n        assertThat(e).hasMessage(exMsg);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoArrays_whenConcatWithCopy2_thenGetExpectedResult() {\r\n    String[] result = ArrayConcatUtil.concatWithCopy2(strArray1, strArray2);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n\r\n    int[] intResult = ArrayConcatUtil.concatWithCopy2(intArray1, intArray2);\r\n    assertThat(intResult).isEqualTo(expectedIntArray);\r\n} \r\n```","```\r\nstatic <T> T[] concatWithStream(T[] array1, T[] array2) {\r\n    return Stream.concat(Arrays.stream(array1), Arrays.stream(array2))\r\n      .toArray(size -> (T[]) Array.newInstance(array1.getClass().getComponentType(), size));\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoStringArrays_whenConcatWithStream_thenGetExpectedResult() {\r\n    String[] result = ArrayConcatUtil.concatWithStream(strArray1, strArray2);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n} \r\n```","```\r\nstatic int[] concatIntArraysWithIntStream(int[] array1, int[] array2) {\r\n    return IntStream.concat(Arrays.stream(array1), Arrays.stream(array2)).toArray();\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoIntArrays_whenConcatWithIntStream_thenGetExpectedResult() {\r\n    int[] intResult = ArrayConcatUtil.concatIntArraysWithIntStream(intArray1, intArray2);\r\n    assertThat(intResult).isEqualTo(expectedIntArray);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoArrays_whenConcatWithCommonsLang_thenGetExpectedResult() {\r\n    String[] result = ArrayUtils.addAll(strArray1, strArray2);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n\r\n    int[] intResult = ArrayUtils.addAll(intArray1, intArray2);\r\n    assertThat(intResult).isEqualTo(expectedIntArray);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoStringArrays_whenConcatWithGuava_thenGetExpectedResult() {\r\n    String[] result = ObjectArrays.concat(strArray1, strArray2, String.class);\r\n    assertThat(result).isEqualTo(expectedStringArray);\r\n} \r\n```","```\r\n@Test\r\npublic void givenTwoIntArrays_whenConcatWithGuava_thenGetExpectedResult() {\r\n    int[] intResult = Ints.concat(intArray1, intArray2);\r\n    assertThat(intResult).isEqualTo(expectedIntArray);\r\n}\r\n```"]