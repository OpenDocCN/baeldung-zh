["```\r\n<dependency>\r\n    <groupId>com.itextpdf</groupId>\r\n    <artifactId>itextpdf</artifactId>\r\n    <version>5.5.13.3</version>\r\n</dependency>\r\n```","```\r\npublic class PdfInfoIText {\r\n\r\n    public static int getNumberOfPages(final String pdfFile) throws IOException {\r\n        PdfReader reader = new PdfReader(pdfFile);\r\n        int pages = reader.getNumberOfPages();\r\n        reader.close();\r\n        return pages;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenGetNumberOfPages_thenOK() throws IOException {\r\n    Assert.assertEquals(4, PdfInfoIText.getNumberOfPages(PDF_FILE));\r\n}\r\n```","```\r\npublic static Map<String, String> getInfo(final String pdfFile) throws IOException {\r\n    PdfReader reader = new PdfReader(pdfFile);\r\n    Map<String, String> info = reader.getInfo();\r\n    reader.close();\r\n    return info;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenGetInfo_thenOK() throws IOException {\r\n    Map<String, String> info = PdfInfoIText.getInfo(PDF_FILE);\r\n    Assert.assertEquals(\"LibreOffice 4.2\", info.get(\"Producer\"));\r\n    Assert.assertEquals(\"Writer\", info.get(\"Creator\"));\r\n}\r\n```","```\r\npublic static boolean isPasswordRequired(final String pdfFile) throws IOException {\r\n    PdfReader reader = new PdfReader(pdfFile);\r\n    boolean isEncrypted = reader.isEncrypted();\r\n    reader.close();\r\n    return isEncrypted;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenIsPasswordRequired_thenOK() throws IOException {\r\n    Assert.assertFalse(PdfInfoIText.isPasswordRequired(PDF_FILE));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.pdfbox</groupId>\r\n    <artifactId>pdfbox</artifactId>\r\n    <version>3.0.0-RC1</version>\r\n</dependency>\r\n```","```\r\npublic class PdfInfoPdfBox {\r\n\r\n    public static int getNumberOfPages(final String pdfFile) throws IOException {\r\n        File file = new File(pdfFile);\r\n        PDDocument document = Loader.loadPDF(file);\r\n        int pages = document.getNumberOfPages();\r\n        document.close();\r\n        return pages;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenGetNumberOfPages_thenOK() throws IOException {\r\n    Assert.assertEquals(4, PdfInfoPdfBox.getNumberOfPages(PDF_FILE));\r\n}\r\n```","```\r\npublic static PDDocumentInformation getInfo(final String pdfFile) throws IOException {\r\n    File file = new File(pdfFile);\r\n    PDDocument document = Loader.loadPDF(file);\r\n    PDDocumentInformation info = document.getDocumentInformation();\r\n    document.close();\r\n    return info;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenGetInfo_thenOK() throws IOException {\r\n    PDDocumentInformation info = PdfInfoPdfBox.getInfo(PDF_FILE);\r\n    Assert.assertEquals(\"LibreOffice 4.2\", info.getProducer());\r\n    Assert.assertEquals(\"Writer\", info.getCreator());\r\n}\r\n```","```\r\npublic static boolean isPasswordRequired(final String pdfFile) throws IOException {\r\n    File file = new File(pdfFile);\r\n    PDDocument document = Loader.loadPDF(file);\r\n    boolean isEncrypted = document.isEncrypted();\r\n    document.close();\r\n    return isEncrypted;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPdf_whenIsPasswordRequired_thenOK() throws IOException {\r\n    Assert.assertFalse(PdfInfoPdfBox.isPasswordRequired(PDF_FILE));\r\n}\r\n```"]