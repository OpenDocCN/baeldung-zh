["```\r\n@Container\r\npublic static final CassandraContainer cassandra = (CassandraContainer) new CassandraContainer(\"cassandra:3.11.2\")\r\n    .withExposedPorts(9042);\r\n```","```\r\nTestPropertyValues.of(\r\n    \"spring.data.cassandra.keyspace-name=\" + KEYSPACE_NAME,\r\n    \"spring.data.cassandra.contact-points=\" + cassandra.getContainerIpAddress(),\r\n    \"spring.data.cassandra.port=\" + cassandra.getMappedPort(9042)\r\n).applyTo(configurableApplicationContext.getEnvironment());\r\n```","```\r\nsession.execute(\"CREATE KEYSPACE IF NOT EXISTS \" + KEYSPACE_NAME + \" WITH replication = {'class':'SimpleStrategy','replication_factor':'1'};\");\r\n```","```\r\n@Table\r\npublic class Person {\r\n\r\n    @PrimaryKey\r\n    private UUID id;\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public Person(UUID id, String firstName, String lastName) {\r\n        this.id = id;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    //getters, setters, equals and hash code\r\n\r\n}\r\n```","```\r\n@Repository\r\npublic interface PersonRepository extends CassandraRepository<Person, UUID> {}\r\n```","```\r\nspring.data.cassandra.schema-action=create_if_not_exists\r\nspring.data.cassandra.local-datacenter=datacenter1\r\n```","```\r\n@Test\r\npublic void givenValidPersonUsingLocalDate_whenSavingIt_thenDataIsPersisted() {\r\n    UUID personId = UUIDs.timeBased();\r\n    Person newPerson = new Person(personId, \"Luka\", \"Modric\");\r\n    newPerson.setBirthDate(LocalDate.of(1985, 9, 9));\r\n    personRepository.save(newPerson);\r\n\r\n    List<Person> savedPersons = personRepository.findAllById(List.of(personId));\r\n    assertThat(savedPersons.get(0)).isEqualTo(newPerson);\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidPersonUsingLocalDateTime_whenSavingIt_thenDataIsPersisted() {\r\n    UUID personId = UUIDs.timeBased();\r\n    Person newPerson = new Person(personId, \"Luka\", \"Modric\");\r\n    newPerson.setLastVisitedDate(LocalDateTime.of(2021, 7, 13, 11, 30));\r\n    personRepository.save(newPerson);\r\n\r\n    List<Person> savedPersons = personRepository.findAllById(List.of(personId));\r\n    assertThat(savedPersons.get(0)).isEqualTo(newPerson);\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidPersonUsingLegacyDate_whenSavingIt_thenDataIsPersisted() {\r\n    UUID personId = UUIDs.timeBased();\r\n    Person newPerson = new Person(personId, \"Luka\", \"Modric\");\r\n    newPerson.setLastPurchasedDate(new Date(LocalDate.of(2021, 7, 13).toEpochDay()));\r\n    personRepository.save(newPerson);\r\n\r\n    List<Person> savedPersons = personRepository.findAllById(List.of(personId));\r\n    assertThat(savedPersons.get(0)).isEqualTo(newPerson);\r\n}\r\n```","```\r\n# cqlsh\r\nConnected to Test Cluster at 127.0.0.1:9042.\r\n[cqlsh 5.0.1 | Cassandra 3.11.2 | CQL spec 3.4.4 | Native protocol v4]\r\nUse HELP for help.\r\ncqlsh> USE test;\r\ncqlsh:test> select * from person;\r\n```","```\r\n id                                   | birthdate  | firstname | lastname | lastpurchaseddate | lastvisiteddate\r\n--------------------------------------+------------+-----------+----------+-------------------+-----------------\r\n 9abef910-e3fd-11eb-9829-c5149ac796de | 1985-09-09 |      Luka |   Modric |              null |            null\r\n```","```\r\ncqlsh:test> DESC TABLE person;\r\n```","```\r\nCREATE TABLE test.person (\r\n    id uuid PRIMARY KEY,\r\n    birthdate date,\r\n    firstname text,\r\n    lastname text,\r\n    lastpurchaseddate timestamp,\r\n    lastvisiteddate timestamp\r\n)\r\n```"]