["```\r\n<dependency>\r\n    <groupId>io.nats</groupId>\r\n    <artifactId>jnats</artifactId>\r\n    <version>1.0</version>\r\n</dependency>\r\n```","```\r\nConnection natsConnection = Nats.connect(); \r\n```","```\r\nprivate Connection initConnection() {\r\n    Options options = new Options.Builder()\r\n      .errorCb(ex -> log.error(\"Connection Exception: \", ex))\r\n      .disconnectedCb(event -> log.error(\"Channel disconnected: {}\", event.getConnection()))\r\n      .reconnectedCb(event -> log.error(\"Reconnected to server: {}\", event.getConnection()))\r\n      .build();\r\n\r\n    return Nats.connect(uri, options);\r\n}\r\n```","```\r\nConnection natsConnection = initConnection();\r\nThread.sleep(60000); \r\n```","```\r\n[jnats-callbacks] ERROR com.baeldung.nats.NatsClient \r\n  - Channel disconnected: [[email protected]](/web/20220625082214/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n[reconnect] WARN io.nats.client.ConnectionImpl \r\n  - couldn't connect to nats://localhost:4222 (nats: connection read error)\r\n[jnats-callbacks] ERROR com.baeldung.nats.NatsClient \r\n  - Reconnected to server: [[email protected]](/web/20220625082214/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nAsyncSubscription subscription = natsConnection\r\n  .subscribe( topic, msg -> log.info(\"Received message on {}\", msg.getSubject())); \r\n```","```\r\nSyncSubscription subscription = natsConnection.subscribeSync(\"foo.bar\");\r\nMessage message = subscription.nextMessage(1000); \r\n```","```\r\nsubscription.unsubscribe(); \r\n```","```\r\nnatsConnection.publish(\"foo.bar\", \"Hi there!\".getBytes()); \r\n```","```\r\nnatsConnection.publish(\"foo.bar\", \"bar.foo\", \"Hi there!\".getBytes()); \r\n```","```\r\nSyncSubscription fooSubscription = natsConnection.subscribe(\"foo.bar\");\r\nSyncSubscription barSubscription = natsConnection.subscribe(\"bar.foo\");\r\nnatsConnection.publish(\"foo.bar\", \"bar.foo\", \"hello there\".getBytes());\r\n\r\nMessage message = fooSubscription.nextMessage();\r\nassertNotNull(\"No message!\", message);\r\nassertEquals(\"hello there\", new String(message.getData()));\r\n\r\nnatsConnection\r\n  .publish(message.getReplyTo(), message.getSubject(), \"hello back\".getBytes());\r\n\r\nmessage = barSubscription.nextMessage();\r\nassertNotNull(\"No message!\", message);\r\nassertEquals(\"hello back\", new String(message.getData())); \r\n```","```\r\nSyncSubscription fooSubscription = client.subscribeSync(\"foo.*\");\r\n\r\nclient.publishMessage(\"foo.bar\", \"bar.foo\", \"hello there\");\r\n\r\nMessage message = fooSubscription.nextMessage(200);\r\nassertNotNull(\"No message!\", message);\r\nassertEquals(\"hello there\", new String(message.getData()));\r\n\r\nclient.publishMessage(\"foo.bar.plop\", \"bar.foo\", \"hello there\");\r\nmessage = fooSubscription.nextMessage(200);\r\nassertNull(\"Got message!\", message);\r\n\r\nSyncSubscription barSubscription = client.subscribeSync(\"foo.>\");\r\n\r\nclient.publishMessage(\"foo.bar.plop\", \"bar.foo\", \"hello there\");\r\n\r\nmessage = barSubscription.nextMessage(200);\r\nassertNotNull(\"No message!\", message);\r\nassertEquals(\"hello there\", new String(message.getData()));\r\n```","```\r\nAsyncSubscription subscription = natsConnection\r\n  .subscribe(\"foo.bar.requests\", new MessageHandler() {\r\n    @Override\r\n    public void onMessage(Message msg) {\r\n        natsConnection.publish(message.getReplyTo(), reply.getBytes());\r\n    }\r\n}); \r\n```","```\r\nMessage reply = natsConnection.request(\"foo.bar.requests\", request.getBytes(), 100); \r\n```","```\r\nnatsConnection.subscribe(salary.requests\", message -> {\r\n    natsConnection.publish(message.getReplyTo(), \"denied!\".getBytes());\r\n});\r\nMessage reply = natsConnection.request(\"salary.requests\", \"I need a raise.\", 100);\r\nassertNotNull(\"No message!\", reply);\r\nassertEquals(\"denied!\", new String(reply.getData())); \r\n```","```\r\nSyncSubscription subscription = natsConnection.subscribe(\"topic\", \"queue name\");\r\n```","```\r\nSyncSubscription subscription = natsConnection\r\n  .subscribe(\"topic\", \"queue name\", new MessageHandler() {\r\n    @Override\r\n    public void onMessage(Message msg) {\r\n        log.info(\"Received message on {}\", msg.getSubject());\r\n    }\r\n}); \r\n```","```\r\nnatsConnection.publish(\"foo\",  \"queue message\".getBytes());\r\n```","```\r\nSyncSubscription queue1 = natsConnection.subscribe(\"foo\", \"queue name\");\r\nSyncSubscription queue2 = natsConnection.subscribe(\"foo\", \"queue name\");\r\n\r\nnatsConnection.publish(\"foo\", \"foobar\".getBytes());\r\n\r\nList<Message> messages = new ArrayList<>();\r\n\r\nMessage message = queue1.nextMessage(200);\r\nif (message != null) messages.add(message);\r\n\r\nmessage = queue2.nextMessage(200);\r\nif (message != null) messages.add(message);\r\n\r\nassertEquals(1, messages.size());\r\n```","```\r\nSyncSubscription queue1 = natsConnection.subscribe(\"foo\");\r\nSyncSubscription queue2 = natsConnection.subscribe(\"foo\"); \r\n```"]