["```\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class BakeryController { \r\n    @GetMapping(\"/bake/{bakedGood}\")\r\n    public DeferredResult<String> publisher(@PathVariable String bakedGood, @RequestParam Integer bakeTime) {\r\n        DeferredResult<String> output = new DeferredResult<>();\r\n        try {\r\n            Thread.sleep(bakeTime);\r\n            output.setResult(format(\"Bake for %s complete and order dispatched. Enjoy!\", bakedGood));\r\n        } catch (Exception e) {\r\n            // ...\r\n        }\r\n        return output;\r\n    }\r\n}\r\n```","```\r\nprivate ExecutorService bakers = Executors.newFixedThreadPool(5);\r\n\r\n@GetMapping(\"/bake/{bakedGood}\")\r\npublic DeferredResult<String> publisher(@PathVariable String bakedGood, @RequestParam Integer bakeTime) {\r\n    DeferredResult<String> output = new DeferredResult<>();\r\n    bakers.execute(() -> {\r\n        try {\r\n            Thread.sleep(bakeTime);\r\n            output.setResult(format(\"Bake for %s complete and order dispatched. Enjoy!\", bakedGood));\r\n        } catch (Exception e) {\r\n            // ...\r\n        }\r\n    });\r\n    return output;\r\n}\r\n```","```\r\nbakers.execute(() -> {\r\n    try {\r\n        Thread.sleep(bakeTime);\r\n        output.setResult(format(\"Bake for %s complete and order dispatched. Enjoy!\", bakedGood));\r\n     } catch (Exception e) {\r\n        output.setErrorResult(\"Something went wrong with your order!\");\r\n     }\r\n});\r\n```","```\r\nDeferredResult<String> output = new DeferredResult<>(5000L);\r\n```","```\r\noutput.onTimeout(() -> output.setErrorResult(\"the bakery is not responding in allowed time\"));\r\n```","```\r\npublic String callBakeWithRestTemplate(RestTemplateBuilder restTemplateBuilder) {\r\n    RestTemplate restTemplate = restTemplateBuilder\r\n      .setConnectTimeout(Duration.ofSeconds(10))\r\n      .setReadTimeout(Duration.ofSeconds(10))\r\n      .build();\r\n\r\n    try {\r\n        return restTemplate.getForObject(\"/api/bake/cookie?bakeTime=1000\", String.class);\r\n    } catch (ResourceAccessException e) {\r\n        // handle timeout\r\n    }\r\n}\r\n```","```\r\npublic String callBakeWithWebClient() {\r\n    WebClient webClient = WebClient.create();\r\n    try {\r\n        return webClient.get()\r\n          .uri(\"/api/bake/cookie?bakeTime=1000\")\r\n          .retrieve()\r\n          .bodyToFlux(String.class)\r\n          .timeout(Duration.ofSeconds(10))\r\n          .blockFirst();\r\n    } catch (ReadTimeoutException e) {\r\n        // handle timeout\r\n    }\r\n}\r\n```","```\r\nMvcResult asyncListener = mockMvc\r\n  .perform(MockMvcRequestBuilders.get(\"/api/bake/cookie?bakeTime=1000\"))\r\n  .andExpect(request().asyncStarted())\r\n  .andReturn();\r\n```","```\r\nString response = mockMvc\r\n  .perform(asyncDispatch(asyncListener))\r\n  .andReturn()\r\n  .getResponse()\r\n  .getContentAsString();\r\n\r\nassertThat(response)\r\n  .isEqualTo(\"Bake for cookie complete and order dispatched. Enjoy!\");\r\n```","```\r\n((MockAsyncContext) asyncListener\r\n  .getRequest()\r\n  .getAsyncContext())\r\n  .getListeners()\r\n  .get(0)\r\n  .onTimeout(null);\r\n```"]