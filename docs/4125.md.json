["```\r\n<dependency>\r\n    <groupId>com.squareup.retrofit2</groupId>\r\n    <artifactId>retrofit</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>com.squareup.retrofit2</groupId>\r\n    <artifactId>converter-gson</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>\r\n```","```\r\npublic interface GitHubBasicApi {\r\n\r\n    @GET(\"users/{user}/repos\")\r\n    Call<List> listRepos(@Path(\"user\") String user);\r\n\r\n    @GET(\"repos/{user}/{repo}/contributors\")\r\n    Call<List> listRepoContributors(\r\n      @Path(\"user\") String user,\r\n      @Path(\"repo\") String repo);   \r\n}\r\n```","```\r\nclass GitHubBasicService {\r\n\r\n    private GitHubBasicApi gitHubApi;\r\n\r\n    GitHubBasicService() {\r\n        Retrofit retrofit = new Retrofit.Builder()\r\n          .baseUrl(\"https://api.github.com/\")\r\n          .addConverterFactory(GsonConverterFactory.create())\r\n          .build();\r\n\r\n        gitHubApi = retrofit.create(GitHubBasicApi.class);\r\n    }\r\n\r\n    List<String> getTopContributors(String userName) throws IOException {\r\n        List<Repository> repos = gitHubApi\r\n          .listRepos(userName)\r\n          .execute()\r\n          .body();\r\n\r\n        repos = repos != null ? repos : Collections.emptyList();\r\n\r\n        return repos.stream()\r\n          .flatMap(repo -> getContributors(userName, repo))\r\n          .sorted((a, b) -> b.getContributions() - a.getContributions())\r\n          .map(Contributor::getName)\r\n          .distinct()\r\n          .sorted()\r\n          .collect(Collectors.toList());\r\n    }\r\n\r\n    private Stream<Contributor> getContributors(String userName, Repository repo) {\r\n        List<Contributor> contributors = null;\r\n        try {\r\n            contributors = gitHubApi\r\n              .listRepoContributors(userName, repo.getName())\r\n              .execute()\r\n              .body();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        contributors = contributors != null ? contributors : Collections.emptyList();\r\n\r\n        return contributors.stream()\r\n          .filter(c -> c.getContributions() > 100);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.squareup.retrofit2</groupId>\r\n    <artifactId>adapter-rxjava</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>\r\n```","```\r\nRetrofit retrofit = new Retrofit.Builder()\r\n  .baseUrl(\"https://api.github.com/\")\r\n  .addConverterFactory(GsonConverterFactory.create())\r\n  .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\r\n  .build();\r\n```","```\r\npublic interface GitHubRxApi {\r\n\r\n    @GET(\"users/{user}/repos\")\r\n    Observable<List<Repository>> listRepos(@Path(\"user\") String user);\r\n\r\n    @GET(\"repos/{user}/{repo}/contributors\")\r\n    Observable<List<Contributer>> listRepoContributors(\r\n      @Path(\"user\") String user,\r\n      @Path(\"repo\") String repo);   \r\n}\r\n```","```\r\nclass GitHubRxService {\r\n\r\n    private GitHubRxApi gitHubApi;\r\n\r\n    GitHubRxService() {\r\n        Retrofit retrofit = new Retrofit.Builder()\r\n          .baseUrl(\"https://api.github.com/\")\r\n          .addConverterFactory(GsonConverterFactory.create())\r\n          .addCallAdapterFactory(RxJavaCallAdapterFactory.create())\r\n          .build();\r\n\r\n        gitHubApi = retrofit.create(GitHubRxApi.class);\r\n    }\r\n\r\n    Observable<String> getTopContributors(String userName) {\r\n        return gitHubApi.listRepos(userName)\r\n          .flatMapIterable(x -> x)\r\n          .flatMap(repo -> gitHubApi.listRepoContributors(userName, repo.getName()))\r\n          .flatMapIterable(x -> x)\r\n          .filter(c -> c.getContributions() > 100)\r\n          .sorted((a, b) -> b.getContributions() - a.getContributions())\r\n          .map(Contributor::getName)\r\n          .distinct();\r\n    }\r\n}\r\n```"]