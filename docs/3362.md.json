["```\r\n@Test\r\npublic void givenList_whenSatifyPredicate_thenMapValueWithOccurences() {\r\n    List<Integer> numbers = List.of(1, 2, 3, 5, 5);\r\n\r\n    Map<Integer, Long> result = numbers.stream()\r\n      .filter(val -> val > 3)\r\n      .collect(Collectors.groupingBy(i -> i, Collectors.counting()));\r\n\r\n    assertEquals(1, result.size());\r\n\r\n    result = numbers.stream()\r\n      .collect(Collectors.groupingBy(i -> i,\r\n        Collectors.filtering(val -> val > 3, Collectors.counting())));\r\n\r\n    assertEquals(4, result.size());\r\n}\r\n```","```\r\nclass Blog {\r\n    private String authorName;\r\n    private List<String> comments;\r\n\r\n    // constructor and getters\r\n} \r\n```","```\r\n@Test\r\npublic void givenListOfBlogs_whenAuthorName_thenMapAuthorWithComments() {\r\n    Blog blog1 = new Blog(\"1\", \"Nice\", \"Very Nice\");\r\n    Blog blog2 = new Blog(\"2\", \"Disappointing\", \"Ok\", \"Could be better\");\r\n    List<Blog> blogs = List.of(blog1, blog2);\r\n\r\n    Map<String,  List<List<String>>> authorComments1 = blogs.stream()\r\n     .collect(Collectors.groupingBy(Blog::getAuthorName, \r\n       Collectors.mapping(Blog::getComments, Collectors.toList())));\r\n\r\n    assertEquals(2, authorComments1.size());\r\n    assertEquals(2, authorComments1.get(\"1\").get(0).size());\r\n    assertEquals(3, authorComments1.get(\"2\").get(0).size());\r\n\r\n    Map<String, List<String>> authorComments2 = blogs.stream()\r\n      .collect(Collectors.groupingBy(Blog::getAuthorName, \r\n        Collectors.flatMapping(blog -> blog.getComments().stream(), \r\n        Collectors.toList())));\r\n\r\n    assertEquals(2, authorComments2.size());\r\n    assertEquals(2, authorComments2.get(\"1\").size());\r\n    assertEquals(3, authorComments2.get(\"2\").size());\r\n}\r\n```"]