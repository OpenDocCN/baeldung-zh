["```\r\n@Entity\r\npublic class DeptEmployee {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private long id;\r\n\r\n    private String employeeNumber;\r\n\r\n    private String title;\r\n\r\n    private String name;\r\n\r\n    @ManyToOne\r\n    private Department department;\r\n\r\n   // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Department {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.SEQUENCE)\r\n    private long id;\r\n\r\n    private String name;\r\n\r\n    @OneToMany(mappedBy=\"department\")\r\n    private List<DeptEmployee> employees;\r\n\r\n    // standard getters and setters\r\n} \r\n```","```\r\nsession.createQuery(\"SELECT e FROM DeptEmployee e \" +\r\n  \"JOIN e.department WHERE e.department.name = :deptName\")\r\n  .setMaxResults(30)\r\n  .setHint(QueryHints.HINT_FETCH_SIZE, 30);\r\n```","```\r\nsession.createQuery(\"SELECT e FROM DeptEmployee e \" +\r\n  \"WHERE e.title = :designation\")\r\n  .setHint(QueryHints.SPEC_HINT_TIMEOUT, 1000);\r\n```","```\r\nsession.createQuery(\"SELECT e.department FROM DeptEmployee e \" +\r\n  \"JOIN e.department WHERE e.employeeNumber = :empId\");\r\n```","```\r\n@State(Scope.Thread)\r\npublic static class QueryPlanCacheBenchMarkState {\r\n    @Param({\"1\", \"2\", \"3\"})\r\n    public int planCacheSize;\r\n\r\n    public Session session;\r\n\r\n    @Setup\r\n    public void stateSetup() throws IOException {\r\n       session = initSession(planCacheSize);\r\n    }\r\n\r\n    private Session initSession(int planCacheSize) throws IOException {\r\n        Properties properties = HibernateUtil.getProperties();\r\n        properties.put(\"hibernate.query.plan_cache_max_size\", planCacheSize);\r\n        properties.put(\"hibernate.query.plan_parameter_metadata_max_size\", planCacheSize);\r\n        SessionFactory sessionFactory = HibernateUtil.getSessionFactoryByProperties(properties);\r\n        return sessionFactory.openSession();\r\n    }\r\n    //teardown...\r\n}\r\n```","```\r\n@Benchmark\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.MICROSECONDS)\r\n@Fork(1)\r\n@Warmup(iterations = 2)\r\n@Measurement(iterations = 5)\r\npublic void givenQueryPlanCacheSize_thenCompileQueries(\r\n  QueryPlanCacheBenchMarkState state, Blackhole blackhole) {\r\n\r\n    Query query1 = findEmployeesByDepartmentNameQuery(state.session);\r\n    Query query2 = findEmployeesByDesignationQuery(state.session);\r\n    Query query3 = findDepartmentOfAnEmployeeQuery(state.session);\r\n\r\n    blackhole.consume(query1);\r\n    blackhole.consume(query2);\r\n    blackhole.consume(query3);\r\n}\r\n```"]