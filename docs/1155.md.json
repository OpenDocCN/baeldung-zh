["```\r\nclass Resource {\r\n\r\n    final BufferedReader reader;\r\n\r\n    public Resource(String filename) throws FileNotFoundException {\r\n        reader = new BufferedReader(new FileReader(filename));\r\n    }\r\n\r\n    public long getLineNumber() {\r\n        return reader.lines().count();\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected void finalize() {\r\n    try {\r\n        reader.close();\r\n    } catch (IOException e) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nclass Resource implements AutoCloseable {\r\n\r\n    final BufferedReader reader;\r\n\r\n    public Resource(String filename) throws FileNotFoundException {\r\n        reader = new BufferedReader(new FileReader(filename));\r\n    }\r\n\r\n    public long getLineNumber() {\r\n        return reader.lines().count();\r\n    }\r\n\r\n    @Override\r\n    public void close() throws Exception {\r\n        reader.close();\r\n    }\r\n}\r\n```","```\r\nCleaner cleaner = Cleaner.create();\r\n```","```\r\nclass Order implements AutoCloseable {\r\n\r\n    private final Cleaner cleaner;\r\n\r\n    public Order(Cleaner cleaner) {\r\n        this.cleaner = cleaner;\r\n    }\r\n}\r\n```","```\r\nstatic class CleaningAction implements Runnable {\r\n\r\n    private final int id;\r\n\r\n    public CleaningAction(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        System.out.printf(\"Object with id %s is garbage collected. %n\", id);\r\n    }\r\n}\r\n```","```\r\nprivate Cleaner.Cleanable cleanable;\r\n```","```\r\npublic void register(Product product, int id) {\r\n    this.cleanable = cleaner.register(product, new CleaningAction(id));\r\n}\r\n```","```\r\npublic void close() {\r\n    cleanable.clean();\r\n}\r\n```","```\r\nfinal Cleaner cleaner = Cleaner.create();\r\ntry (Order order = new Order(cleaner)) {\r\n    for (int i = 0; i < 10; i++) {\r\n        order.register(new Product(i), i);\r\n    }\r\n} catch (Exception e) {\r\n    System.err.println(\"Error: \" + e);\r\n}\r\n```"]