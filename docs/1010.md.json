["```\r\npublic class Polynom {\r\n\r\n    private double a;\r\n    private double b;\r\n    private double c;\r\n\r\n    public Polynom(double a, double b, double c) {\r\n        if (a==0) {\r\n            throw new IllegalArgumentException(\"a can not be equal to 0\");\r\n        }\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Complex {\r\n\r\n    private double realPart;\r\n    private double imaginaryPart;\r\n\r\n    public Complex(double realPart, double imaginaryPart) {\r\n        this.realPart = realPart;\r\n        this.imaginaryPart = imaginaryPart;\r\n    }\r\n\r\n    public static Complex ofReal(double realPart) {\r\n        return new Complex(realPart, 0);\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic double getDiscriminant() {\r\n    return b*b - 4*a*c;\r\n}\r\n```","```\r\nDouble solution1 = (-polynom.getB() - Math.sqrt(polynom.getDiscriminant())) / (2 * polynom.getA());\r\nDouble solution2 = (-polynom.getB() + Math.sqrt(polynom.getDiscriminant())) / (2 * polynom.getA());\r\n```","```\r\nComplex solution1 = Complex.ofReal((-polynom.getB() - Math.sqrt(polynom.getDiscriminant())) / (2 * polynom.getA()));\r\nComplex solution2 = Complex.ofReal((-polynom.getB() + Math.sqrt(polynom.getDiscriminant())) / (2 * polynom.getA()));\r\n```","```\r\nDouble solution = (double) -polynom.getB() / (2 * polynom.getA());\r\n```","```\r\nComplex solution = Complex.ofReal(-polynom.getB() / (2 * polynom.getA()));\r\n```","```\r\nComplex solution1 = new Complex(-polynom.getB() / (2* polynom.getA()), -Math.sqrt(-polynom.getDiscriminant()) / 2* polynom.getA());\r\nComplex solution2 = new Complex(-polynom.getB() / (2* polynom.getA()), Math.sqrt(-polynom.getDiscriminant()) / 2* polynom.getA());\r\n```","```\r\npublic static List<Double> getPolynomRoots(Polynom polynom) {\r\n    List<Double> roots = new ArrayList<>();\r\n    double discriminant = polynom.getDiscriminant();\r\n    if (discriminant > 0) {\r\n        roots.add((-polynom.getB() - Math.sqrt(discriminant)) / (2 * polynom.getA()));\r\n        roots.add((-polynom.getB() + Math.sqrt(discriminant)) / (2 * polynom.getA()));\r\n    } else if (discriminant == 0) {\r\n        roots.add(-polynom.getB() / (2 * polynom.getA()));\r\n    }\r\n    return roots;\r\n}\r\n```","```\r\npublic static List<Complex> getPolynomRoots(Polynom polynom) {\r\n    List<Complex> roots = new ArrayList<>();\r\n    double discriminant = polynom.getDiscriminant();\r\n    if (discriminant > 0) {\r\n        roots.add(Complex.ofReal((-polynom.getB() - Math.sqrt(discriminant)) / (2 * polynom.getA())));\r\n        roots.add(Complex.ofReal((-polynom.getB() + Math.sqrt(discriminant)) / (2 * polynom.getA())));\r\n    } else if (discriminant == 0) {\r\n        roots.add(Complex.ofReal(-polynom.getB() / (2 * polynom.getA())));\r\n    } else {\r\n        roots.add(new Complex(-polynom.getB() / (2* polynom.getA()), -Math.sqrt(-discriminant) / 2* polynom.getA()));\r\n        roots.add(new Complex(-polynom.getB() / (2* polynom.getA()), Math.sqrt(-discriminant) / 2* polynom.getA()));\r\n    }\r\n    return roots;\r\n}\r\n```"]