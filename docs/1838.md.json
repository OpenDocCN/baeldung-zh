["```\r\n<properties>\r\n    <spring.version>4.3.1.RELEASE</spring.version>\r\n    <akka.version>2.4.8</akka.version>\r\n</properties>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework</groupId>\r\n        <artifactId>spring-context</artifactId>\r\n        <version>${spring.version}</version>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>com.typesafe.akka</groupId>\r\n        <artifactId>akka-actor_2.11</artifactId>\r\n        <version>${akka.version}</version>\r\n    </dependency>\r\n\r\n</dependencies>\r\n```","```\r\n@Component\r\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\r\npublic class GreetingActor extends UntypedActor {\r\n\r\n    private GreetingService greetingService;\r\n\r\n    // constructor\r\n\r\n    @Override\r\n    public void onReceive(Object message) throws Throwable {\r\n        if (message instanceof Greet) {\r\n            String name = ((Greet) message).getName();\r\n            getSender().tell(greetingService.greet(name), getSelf());\r\n        } else {\r\n            unhandled(message);\r\n        }\r\n    }\r\n\r\n    public static class Greet {\r\n\r\n        private String name;\r\n\r\n        // standard constructors/getters\r\n\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class GreetingService {\r\n\r\n    public String greet(String name) {\r\n        return \"Hello, \" + name;\r\n    }\r\n}\r\n```","```\r\npublic class SpringExtension \r\n  extends AbstractExtensionId<SpringExtension.SpringExt> {\r\n\r\n    public static final SpringExtension SPRING_EXTENSION_PROVIDER \r\n      = new SpringExtension();\r\n\r\n    @Override\r\n    public SpringExt createExtension(ExtendedActorSystem system) {\r\n        return new SpringExt();\r\n    }\r\n\r\n    public static class SpringExt implements Extension {\r\n        private volatile ApplicationContext applicationContext;\r\n\r\n        public void initialize(ApplicationContext applicationContext) {\r\n            this.applicationContext = applicationContext;\r\n        }\r\n\r\n        public Props props(String actorBeanName) {\r\n            return Props.create(\r\n              SpringActorProducer.class, applicationContext, actorBeanName);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class SpringActorProducer implements IndirectActorProducer {\r\n\r\n    private ApplicationContext applicationContext;\r\n\r\n    private String beanActorName;\r\n\r\n    public SpringActorProducer(ApplicationContext applicationContext, \r\n      String beanActorName) {\r\n        this.applicationContext = applicationContext;\r\n        this.beanActorName = beanActorName;\r\n    }\r\n\r\n    @Override\r\n    public Actor produce() {\r\n        return (Actor) applicationContext.getBean(beanActorName);\r\n    }\r\n\r\n    @Override\r\n    public Class<? extends Actor> actorClass() {\r\n        return (Class<? extends Actor>) applicationContext\r\n          .getType(beanActorName);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan\r\npublic class AppConfiguration {\r\n\r\n    @Autowired\r\n    private ApplicationContext applicationContext;\r\n\r\n    @Bean\r\n    public ActorSystem actorSystem() {\r\n        ActorSystem system = ActorSystem.create(\"akka-spring-demo\");\r\n        SPRING_EXTENSION_PROVIDER.get(system)\r\n          .initialize(applicationContext);\r\n        return system;\r\n    }\r\n}\r\n```","```\r\nActorRef greeter = system.actorOf(SPRING_EXTENSION_PROVIDER.get(system)\r\n  .props(\"greetingActor\"), \"greeter\");\r\n\r\nFiniteDuration duration = FiniteDuration.create(1, TimeUnit.SECONDS);\r\nTimeout timeout = Timeout.durationToTimeout(duration);\r\n\r\nFuture<Object> result = ask(greeter, new Greet(\"John\"), timeout);\r\n\r\nAssert.assertEquals(\"Hello, John\", Await.result(result, duration));\r\n```"]