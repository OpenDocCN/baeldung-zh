["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.endpoint.shutdown.enabled=true\r\nendpoints.shutdown.enabled=true\r\n```","```\r\ncurl -X POST localhost:port/actuator/shutdown\r\n```","```\r\nConfigurableApplicationContext ctx = new \r\n  SpringApplicationBuilder(Application.class).web(WebApplicationType.NONE).run();\r\nSystem.out.println(\"Spring Boot application started\");\r\nctx.getBean(TerminateBean.class);\r\nctx.close();\r\n```","```\r\npublic class TerminateBean {\r\n\r\n    @PreDestroy\r\n    public void onDestroy() throws Exception {\r\n        System.out.println(\"Spring Container is destroyed!\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ShutdownConfig {\r\n\r\n    @Bean\r\n    public TerminateBean getTerminateBean() {\r\n        return new TerminateBean();\r\n    }\r\n}\r\n```","```\r\nSpring Boot application started\r\nClosing [[emailÂ protected]](/web/20220905213101/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\nDefaultLifecycleProcessor - Stopping beans in phase 0\r\nUnregistering JMX-exposed beans on shutdown\r\nSpring Container is destroyed!\r\n```","```\r\n@RestController\r\npublic class ShutdownController implements ApplicationContextAware {\r\n\r\n    private ApplicationContext context;\r\n\r\n    @PostMapping(\"/shutdownContext\")\r\n    public void shutdownContext() {\r\n        ((ConfigurableApplicationContext) context).close();\r\n    }\r\n\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\r\n        this.context = ctx;\r\n\r\n    }\r\n}\r\n```","```\r\ncurl -X POST localhost:port/shutdownContext\r\n```","```\r\nConfigurableApplicationContext ctx = new SpringApplicationBuilder(Application.class)\r\n  .web(WebApplicationType.NONE).run();\r\n\r\nint exitCode = SpringApplication.exit(ctx, new ExitCodeGenerator() {\r\n@Override\r\npublic int getExitCode() {\r\n        // return the error code\r\n        return 0;\r\n    }\r\n});\r\n\r\nSystem.exit(exitCode);\r\n```","```\r\nSpringApplication.exit(ctx, () -> 0);\r\n```","```\r\nProcess finished with exit code 0\r\n```","```\r\nSpringApplicationBuilder app = new SpringApplicationBuilder(Application.class)\r\n  .web(WebApplicationType.NONE);\r\napp.build().addListeners(new ApplicationPidFileWriter(\"./bin/shutdown.pid\"));\r\napp.run();\r\n```","```\r\nkill $(cat ./bin/shutdown.pid)\r\n```"]