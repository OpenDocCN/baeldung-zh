["```\r\n@Path(\"/greetings\")\r\npublic class Greetings {\r\n\r\n    @GET\r\n    public String getHelloGreeting() {\r\n        return \"hello\";\r\n    }\r\n}\r\n```","```\r\n@ApplicationPath(\"/*\")\r\npublic class ServerConfig extends ResourceConfig {\r\n\r\n    public ServerConfig() {\r\n        packages(\"com.baeldung.jersey.server\");\r\n    }\r\n}\r\n```","```\r\n@Provider\r\npublic class RestrictedOperationsRequestFilter implements ContainerRequestFilter {\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext ctx) throws IOException {\r\n        if (ctx.getLanguage() != null && \"EN\".equals(ctx.getLanguage()\r\n          .getLanguage())) {\r\n\r\n            ctx.abortWith(Response.status(Response.Status.FORBIDDEN)\r\n              .entity(\"Cannot access\")\r\n              .build());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Provider\r\n@PreMatching\r\npublic class PrematchingRequestFilter implements ContainerRequestFilter {\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext ctx) throws IOException {\r\n        if (ctx.getMethod().equals(\"DELETE\")) {\r\n            LOG.info(\"\\\"Deleting request\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n2018-02-25 16:07:27,800 [http-nio-8080-exec-3] INFO  c.b.j.s.f.PrematchingRequestFilter - prematching filter\r\n2018-02-25 16:07:27,816 [http-nio-8080-exec-3] INFO  c.b.j.s.f.RestrictedOperationsRequestFilter - Restricted operations filter\r\n```","```\r\n@Provider\r\npublic class ResponseServerFilter implements ContainerResponseFilter {\r\n\r\n    @Override\r\n    public void filter(ContainerRequestContext requestContext, \r\n      ContainerResponseContext responseContext) throws IOException {\r\n        responseContext.getHeaders().add(\"X-Test\", \"Filter test\");\r\n    }\r\n}\r\n```","```\r\n@Provider\r\npublic class RequestClientFilter implements ClientRequestFilter {\r\n\r\n    @Override\r\n    public void filter(ClientRequestContext requestContext) throws IOException {\r\n        requestContext.setProperty(\"test\", \"test client request filter\");\r\n    }\r\n}\r\n```","```\r\npublic class JerseyClient {\r\n\r\n    private static String URI_GREETINGS = \"http://localhost:8080/jersey/greetings\";\r\n\r\n    public static String getHelloGreeting() {\r\n        return createClient().target(URI_GREETINGS)\r\n          .request()\r\n          .get(String.class);\r\n    }\r\n\r\n    private static Client createClient() {\r\n        ClientConfig config = new ClientConfig();\r\n        config.register(RequestClientFilter.class);\r\n\r\n        return ClientBuilder.newClient(config);\r\n    }\r\n}\r\n```","```\r\n@Provider\r\npublic class ResponseClientFilter implements ClientResponseFilter {\r\n\r\n    @Override\r\n    public void filter(ClientRequestContext requestContext, \r\n      ClientResponseContext responseContext) throws IOException {\r\n        responseContext.getHeaders()\r\n          .add(\"X-Test-Client\", \"Test response client filter\");\r\n    }\r\n\r\n}\r\n```","```\r\n@POST\r\n@Path(\"/custom\")\r\npublic Response getCustomGreeting(String name) {\r\n    return Response.status(Status.OK.getStatusCode())\r\n      .build();\r\n}\r\n```","```\r\npublic static Response getCustomGreeting() {\r\n    return createClient().target(URI_GREETINGS + \"/custom\")\r\n      .request()\r\n      .post(Entity.text(\"custom\"));\r\n}\r\n```","```\r\n@Provider\r\npublic class RequestServerReaderInterceptor implements ReaderInterceptor {\r\n\r\n    @Override\r\n    public Object aroundReadFrom(ReaderInterceptorContext context) \r\n      throws IOException, WebApplicationException {\r\n        InputStream is = context.getInputStream();\r\n        String body = new BufferedReader(new InputStreamReader(is)).lines()\r\n          .collect(Collectors.joining(\"\\n\"));\r\n\r\n        context.setInputStream(new ByteArrayInputStream(\r\n          (body + \" message added in server reader interceptor\").getBytes()));\r\n\r\n        return context.proceed();\r\n    }\r\n}\r\n```","```\r\n@Provider\r\npublic class RequestClientWriterInterceptor implements WriterInterceptor {\r\n\r\n    @Override\r\n    public void aroundWriteTo(WriterInterceptorContext context) \r\n      throws IOException, WebApplicationException {\r\n        context.getOutputStream()\r\n          .write((\"Message added in the writer interceptor in the client side\").getBytes());\r\n\r\n        context.proceed();\r\n    }\r\n}\r\n```","```\r\nprivate static Client createClient() {\r\n    ClientConfig config = new ClientConfig();\r\n    config.register(RequestClientFilter.class);\r\n    config.register(RequestWriterInterceptor.class);\r\n\r\n    return ClientBuilder.newClient(config);\r\n}\r\n```","```\r\n@Provider\r\n@Priority(Priorities.AUTHORIZATION)\r\npublic class RestrictedOperationsRequestFilter implements ContainerRequestFilter {\r\n    // ...\r\n}\r\n```","```\r\n@NameBinding\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface HelloBinding {\r\n}\r\n```","```\r\n@GET\r\n@HelloBinding\r\npublic String getHelloGreeting() {\r\n    return \"hello\";\r\n}\r\n```","```\r\n@Provider\r\n@Priority(Priorities.AUTHORIZATION)\r\n@HelloBinding\r\npublic class RestrictedOperationsRequestFilter implements ContainerRequestFilter {\r\n    // ...\r\n}\r\n```","```\r\n@GET\r\n@Path(\"/hi\")\r\npublic String getHiGreeting() {\r\n    return \"hi\";\r\n}\r\n```","```\r\n@Provider\r\npublic class HelloDynamicBinding implements DynamicFeature {\r\n\r\n    @Override\r\n    public void configure(ResourceInfo resourceInfo, FeatureContext context) {\r\n        if (Greetings.class.equals(resourceInfo.getResourceClass()) \r\n          && resourceInfo.getResourceMethod().getName().contains(\"HiGreeting\")) {\r\n            context.register(ResponseServerFilter.class);\r\n        }\r\n    }\r\n}\r\n```"]