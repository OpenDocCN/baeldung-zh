["```\r\npackage com.baeldung.multipledb.model.user;\r\n\r\n@Entity\r\n@Table(schema = \"users\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private int id;\r\n\r\n    private String name;\r\n\r\n    @Column(unique = true, nullable = false)\r\n    private String email;\r\n\r\n    private int age;\r\n}\r\n```","```\r\npackage com.baeldung.multipledb.model.product;\r\n\r\n@Entity\r\n@Table(schema = \"products\")\r\npublic class Product {\r\n\r\n    @Id\r\n    private int id;\r\n\r\n    private String name;\r\n\r\n    private double price;\r\n}\r\n```","```\r\npackage com.baeldung.multipledb.dao.user;\r\n\r\npublic interface UserRepository\r\n  extends JpaRepository<User, Integer> { }\r\n```","```\r\npackage com.baeldung.multipledb.dao.product;\r\n\r\npublic interface ProductRepository\r\n  extends JpaRepository<Product, Integer> { }\r\n```","```\r\n@Configuration\r\n@PropertySource({ \"classpath:persistence-multiple-db.properties\" })\r\n@EnableJpaRepositories(\r\n    basePackages = \"com.baeldung.multipledb.dao.user\", \r\n    entityManagerFactoryRef = \"userEntityManager\", \r\n    transactionManagerRef = \"userTransactionManager\"\r\n)\r\npublic class PersistenceUserConfiguration {\r\n    @Autowired\r\n    private Environment env;\r\n\r\n    @Bean\r\n    @Primary\r\n    public LocalContainerEntityManagerFactoryBean userEntityManager() {\r\n        LocalContainerEntityManagerFactoryBean em\r\n          = new LocalContainerEntityManagerFactoryBean();\r\n        em.setDataSource(userDataSource());\r\n        em.setPackagesToScan(\r\n          new String[] { \"com.baeldung.multipledb.model.user\" });\r\n\r\n        HibernateJpaVendorAdapter vendorAdapter\r\n          = new HibernateJpaVendorAdapter();\r\n        em.setJpaVendorAdapter(vendorAdapter);\r\n        HashMap<String, Object> properties = new HashMap<>();\r\n        properties.put(\"hibernate.hbm2ddl.auto\",\r\n          env.getProperty(\"hibernate.hbm2ddl.auto\"));\r\n        properties.put(\"hibernate.dialect\",\r\n          env.getProperty(\"hibernate.dialect\"));\r\n        em.setJpaPropertyMap(properties);\r\n\r\n        return em;\r\n    }\r\n\r\n    @Primary\r\n    @Bean\r\n    public DataSource userDataSource() {\r\n\r\n        DriverManagerDataSource dataSource\r\n          = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\r\n          env.getProperty(\"jdbc.driverClassName\"));\r\n        dataSource.setUrl(env.getProperty(\"user.jdbc.url\"));\r\n        dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n        dataSource.setPassword(env.getProperty(\"jdbc.pass\"));\r\n\r\n        return dataSource;\r\n    }\r\n\r\n    @Primary\r\n    @Bean\r\n    public PlatformTransactionManager userTransactionManager() {\r\n\r\n        JpaTransactionManager transactionManager\r\n          = new JpaTransactionManager();\r\n        transactionManager.setEntityManagerFactory(\r\n          userEntityManager().getObject());\r\n        return transactionManager;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@PropertySource({ \"classpath:persistence-multiple-db.properties\" })\r\n@EnableJpaRepositories(\r\n    basePackages = \"com.baeldung.multipledb.dao.product\", \r\n    entityManagerFactoryRef = \"productEntityManager\", \r\n    transactionManagerRef = \"productTransactionManager\"\r\n)\r\npublic class PersistenceProductConfiguration {\r\n    @Autowired\r\n    private Environment env;\r\n\r\n    @Bean\r\n    public LocalContainerEntityManagerFactoryBean productEntityManager() {\r\n        LocalContainerEntityManagerFactoryBean em\r\n          = new LocalContainerEntityManagerFactoryBean();\r\n        em.setDataSource(productDataSource());\r\n        em.setPackagesToScan(\r\n          new String[] { \"com.baeldung.multipledb.model.product\" });\r\n\r\n        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\r\n        em.setJpaVendorAdapter(vendorAdapter);\r\n        HashMap<String, Object> properties = new HashMap<>();\r\n        properties.put(\"hibernate.hbm2ddl.auto\",\r\n          env.getProperty(\"hibernate.hbm2ddl.auto\"));\r\n        properties.put(\"hibernate.dialect\",\r\n          env.getProperty(\"hibernate.dialect\"));\r\n        em.setJpaPropertyMap(properties);\r\n\r\n        return em;\r\n    }\r\n\r\n    @Bean\r\n    public DataSource productDataSource() {\r\n\r\n        DriverManagerDataSource dataSource\r\n          = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\r\n          env.getProperty(\"jdbc.driverClassName\"));\r\n        dataSource.setUrl(env.getProperty(\"product.jdbc.url\"));\r\n        dataSource.setUsername(env.getProperty(\"jdbc.user\"));\r\n        dataSource.setPassword(env.getProperty(\"jdbc.pass\"));\r\n\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean\r\n    public PlatformTransactionManager productTransactionManager() {\r\n\r\n        JpaTransactionManager transactionManager\r\n          = new JpaTransactionManager();\r\n        transactionManager.setEntityManagerFactory(\r\n          productEntityManager().getObject());\r\n        return transactionManager;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\n@EnableTransactionManagement\r\npublic class JpaMultipleDBIntegrationTest {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private ProductRepository productRepository;\r\n\r\n    @Test\r\n    @Transactional(\"userTransactionManager\")\r\n    public void whenCreatingUser_thenCreated() {\r\n        User user = new User();\r\n        user.setName(\"John\");\r\n        user.setEmail(\"[[email protected]](/web/20220523145709/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        user.setAge(20);\r\n        user = userRepository.save(user);\r\n\r\n        assertNotNull(userRepository.findOne(user.getId()));\r\n    }\r\n\r\n    @Test\r\n    @Transactional(\"userTransactionManager\")\r\n    public void whenCreatingUsersWithSameEmail_thenRollback() {\r\n        User user1 = new User();\r\n        user1.setName(\"John\");\r\n        user1.setEmail(\"[[email protected]](/web/20220523145709/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        user1.setAge(20);\r\n        user1 = userRepository.save(user1);\r\n        assertNotNull(userRepository.findOne(user1.getId()));\r\n\r\n        User user2 = new User();\r\n        user2.setName(\"Tom\");\r\n        user2.setEmail(\"[[email protected]](/web/20220523145709/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        user2.setAge(10);\r\n        try {\r\n            user2 = userRepository.save(user2);\r\n        } catch (DataIntegrityViolationException e) {\r\n        }\r\n\r\n        assertNull(userRepository.findOne(user2.getId()));\r\n    }\r\n\r\n    @Test\r\n    @Transactional(\"productTransactionManager\")\r\n    public void whenCreatingProduct_thenCreated() {\r\n        Product product = new Product();\r\n        product.setName(\"Book\");\r\n        product.setId(2);\r\n        product.setPrice(20);\r\n        product = productRepository.save(product);\r\n\r\n        assertNotNull(productRepository.findOne(product.getId()));\r\n    }\r\n}\r\n```","```\r\nspring.datasource.jdbcUrl = [url]\r\nspring.datasource.username = [username]\r\nspring.datasource.password = [password]\r\n```","```\r\nspring.second-datasource.jdbcUrl = [url]\r\nspring.second-datasource.username = [username]\r\nspring.second-datasource.password = [password]\r\n```","```\r\n@Configuration\r\n@PropertySource({\"classpath:persistence-multiple-db-boot.properties\"})\r\n@EnableJpaRepositories(\r\n  basePackages = \"com.baeldung.multipledb.dao.user\",\r\n  entityManagerFactoryRef = \"userEntityManager\",\r\n  transactionManagerRef = \"userTransactionManager\")\r\npublic class PersistenceUserAutoConfiguration {\r\n\r\n    @Primary\r\n    @Bean\r\n    @ConfigurationProperties(prefix=\"spring.datasource\")\r\n    public DataSource userDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n    // userEntityManager bean \r\n\r\n    // userTransactionManager bean\r\n}\r\n```","```\r\n@Configuration\r\n@PropertySource({\"classpath:persistence-multiple-db-boot.properties\"})\r\n@EnableJpaRepositories(\r\n  basePackages = \"com.baeldung.multipledb.dao.product\", \r\n  entityManagerFactoryRef = \"productEntityManager\", \r\n  transactionManagerRef = \"productTransactionManager\")\r\npublic class PersistenceProductAutoConfiguration {\r\n\r\n    @Bean\r\n    @ConfigurationProperties(prefix=\"spring.second-datasource\")\r\n    public DataSource productDataSource() {\r\n        return DataSourceBuilder.create().build();\r\n    }\r\n\r\n    // productEntityManager bean \r\n\r\n    // productTransactionManager bean\r\n} \r\n```","```\r\npublic T build() {\r\n    Class<? extends DataSource> type = getType();\r\n    DataSource result = BeanUtils.instantiateClass(type);\r\n    maybeGetDriverClassName();\r\n    bind(result);\r\n    return (T) result;\r\n}\r\n```","```\r\nprivate void bind(DataSource result) {\r\n    ConfigurationPropertySource source = new MapConfigurationPropertySource(this.properties);\r\n    ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases();\r\n    aliases.addAliases(\"url\", \"jdbc-url\");\r\n    aliases.addAliases(\"username\", \"user\");\r\n    Binder binder = new Binder(source.withAliases(aliases));\r\n    binder.bind(ConfigurationPropertyName.EMPTY, Bindable.ofInstance(result));\r\n}\r\n```"]