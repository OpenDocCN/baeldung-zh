["```\r\n@Override\r\npublic int compareTo(Integer anotherInteger) {\r\n    return compare(this.value, anotherInteger.value);\r\n}\r\n\r\npublic static int compare (int x, int y) {\r\n    return (x < y) ? -1 : ((x == y) ? 0 : 1);\r\n}\r\n```","```\r\n@Override\r\npublic int compareTo(BankAccount anotherAccount) {\r\n    return this.balance - anotherAccount.balance;\r\n}\r\n```","```\r\nBankAccount accountOne = new BankAccount(1900000000);\r\nBankAccount accountTwo = new BankAccount(-2000000000);\r\nint comparison = accountOne.compareTo(accountTwo);\r\nassertThat(comparison).isNegative();\r\n```","```\r\n@Override\r\npublic int compareTo(BankAccount anotherAccount) {\r\n    return Integer.compare(this.balance, anotherAccount.balance);\r\n}\r\n```","```\r\n@Override\r\npublic int compareTo(FootballPlayer anotherPlayer) {\r\n    return this.goalsScored - anotherPlayer.goalsScored;\r\n}\r\n\r\n@Override\r\npublic boolean equals(Object object) {\r\n    if (this == object)\r\n        return true;\r\n    if (object == null || getClass() != object.getClass())\r\n        return false;\r\n    FootballPlayer player = (FootballPlayer) object;\r\n    return name.equals(player.name);\r\n}\r\n```","```\r\nFootballPlayer messi = new FootballPlayer(\"Messi\", 800);\r\nFootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 800);\r\n\r\nTreeSet<FootballPlayer> set = new TreeSet<>();\r\nset.add(messi);\r\nset.add(ronaldo);\r\n\r\nassertThat(set).hasSize(1);\r\nassertThat(set).doesNotContain(ronaldo);\r\n```","```\r\nint[] numbers = new int[] {5, 3, 9, 11, 1, 7};\r\nArrays.sort(numbers);\r\nassertThat(numbers).containsExactly(1, 3, 5, 7, 9, 11);\r\n```","```\r\nString[] players = new String[] {\"ronaldo\",  \"modric\", \"ramos\", \"messi\"};\r\nArrays.sort(players);\r\nassertThat(players).containsExactly(\"messi\", \"modric\", \"ramos\", \"ronaldo\");\r\n```","```\r\nHandballPlayer duvnjak = new HandballPlayer(\"Duvnjak\", 197);\r\nHandballPlayer hansen = new HandballPlayer(\"Hansen\", 196);\r\nHandballPlayer[] players = new HandballPlayer[] {duvnjak, hansen};\r\nassertThatExceptionOfType(ClassCastException.class).isThrownBy(() -> Arrays.sort(players));\r\n```","```\r\n@Override\r\npublic int compareTo(FootballPlayer anotherPlayer) {\r\n    return Integer.compare(this.goalsScored, anotherPlayer.goalsScored);\r\n}\r\n```","```\r\nFootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 900);\r\nFootballPlayer messi = new FootballPlayer(\"Messi\", 800);\r\nFootballPlayer modric = new FootballPlayer(\"modric\", 100);\r\n\r\nMap<FootballPlayer, String> players = new TreeMap<>();\r\nplayers.put(ronaldo, \"forward\");\r\nplayers.put(messi, \"forward\");\r\nplayers.put(modric, \"midfielder\");\r\n\r\nassertThat(players.keySet()).containsExactly(modric, messi, ronaldo);\r\n```","```\r\nFootballPlayer ronaldo = new FootballPlayer(\"Ronaldo\", 900);\r\nFootballPlayer messi = new FootballPlayer(\"Messi\", 800);\r\nFootballPlayer modric = new FootballPlayer(\"Modric\", 100);\r\n\r\nList<FootballPlayer> players = Arrays.asList(ronaldo, messi, modric);\r\nComparator<FootballPlayer> nameComparator = Comparator.comparing(FootballPlayer::getName);\r\nCollections.sort(players, nameComparator);\r\n\r\nassertThat(players).containsExactly(messi, modric, ronaldo);\r\n```"]