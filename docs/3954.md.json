["```\r\n<dependency>\r\n    <groupId>org.jooq</groupId>\r\n    <artifactId>jool</artifactId>\r\n    <version>0.9.12</version>\r\n</dependency> \r\n```","```\r\nFunction3<String, String, String, Integer> lengthSum\r\n  = (v1, v2, v3) -> v1.length() + v2.length() + v3.length();\r\n```","```\r\nFunction2<Integer, Integer, Integer> addTwoNumbers = (v1, v2) -> v1 + v2;\r\nFunction1<Integer, Integer> addToTwo = addTwoNumbers.applyPartially(2);\r\n\r\nInteger result = addToTwo.apply(5);\r\n\r\nassertEquals(result, (Integer) 7);\r\n```","```\r\nBiFunction biFunc = addTwoNumbers.toBiFunction();\r\n```","```\r\ntuple(2, 2)\r\n```","```\r\ntuple(1,2,3,4); \r\n```","```\r\nSeq<Tuple3<String, String, Integer>> personDetails = Seq.of(\r\n  tuple(\"michael\", \"similar\", 49),\r\n  tuple(\"jodie\", \"variable\", 43));\r\nTuple2<String, String> tuple = tuple(\"winter\", \"summer\");\r\n\r\nList<Tuple4<String, String, String, String>> result = personDetails\r\n  .map(t -> t.limit2().concat(tuple)).toList();\r\n\r\nassertEquals(\r\n  result,\r\n  Arrays.asList(tuple(\"michael\", \"similar\", \"winter\", \"summer\"), tuple(\"jodie\", \"variable\", \"winter\", \"summer\"))\r\n);\r\n```","```\r\nassertTrue(Seq.of(1, 2, 3, 4).contains(2));\r\n\r\nassertTrue(Seq.of(1, 2, 3, 4).containsAll(2, 3));\r\n\r\nassertTrue(Seq.of(1, 2, 3, 4).containsAny(2, 5)); \r\n```","```\r\nStream<Integer> left = Stream.of(1, 2, 4);\r\nStream<Integer> right = Stream.of(1, 2, 3);\r\n\r\nList<Integer> rightCollected = right.collect(Collectors.toList());\r\nList<Integer> collect = left\r\n  .filter(rightCollected::contains)\r\n  .collect(Collectors.toList());\r\n\r\nassertEquals(collect, Arrays.asList(1, 2));\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 4).innerJoin(Seq.of(1, 2, 3), (a, b) -> a == b).toList(),\r\n  Arrays.asList(tuple(1, 1), tuple(2, 2))\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 4).leftOuterJoin(Seq.of(1, 2, 3), (a, b) -> a == b).toList(),\r\n  Arrays.asList(tuple(1, 1), tuple(2, 2), tuple(4, null))\r\n);\r\n\r\nassertEquals(\r\n  Seq.of(1, 2, 4).rightOuterJoin(Seq.of(1, 2, 3), (a, b) -> a == b).toList(),\r\n  Arrays.asList(tuple(1, 1), tuple(2, 2), tuple(null, 3))\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2).crossJoin(Seq.of(\"A\", \"B\")).toList(),\r\n  Arrays.asList(tuple(1, \"A\"), tuple(1, \"B\"), tuple(2, \"A\"), tuple(2, \"B\"))\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3).cycle().limit(9).toList(),\r\n  Arrays.asList(1, 2, 3, 1, 2, 3, 1, 2, 3)\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3).duplicate().map((first, second) -> tuple(first.toList(), second.toList())),\r\n  tuple(Arrays.asList(1, 2, 3), Arrays.asList(1, 2, 3))\r\n); \r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3, 4).partition(i -> i > 2)\r\n    .map((first, second) -> tuple(first.toList(), second.toList())),\r\n  tuple(Arrays.asList(3, 4), Arrays.asList(1, 2))\r\n);\r\n```","```\r\nMap<Integer, List<Integer>> expectedAfterGroupBy = new HashMap<>();\r\nexpectedAfterGroupBy.put(1, Arrays.asList(1, 3));\r\nexpectedAfterGroupBy.put(0, Arrays.asList(2, 4));\r\n\r\nassertEquals(\r\n  Seq.of(1, 2, 3, 4).groupBy(i -> i % 2),\r\n  expectedAfterGroupBy\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3, 4, 5).skipWhile(i -> i < 3).toList(),\r\n  Arrays.asList(3, 4, 5)\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3, 4, 5).skipUntil(i -> i == 3).toList(),\r\n  Arrays.asList(3, 4, 5)\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3).zip(Seq.of(\"a\", \"b\", \"c\")).toList(),\r\n  Arrays.asList(tuple(1, \"a\"), tuple(2, \"b\"), tuple(3, \"c\"))\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(1, 2, 3).zip(Seq.of(\"a\", \"b\", \"c\"), (x, y) -> x + \":\" + y).toList(),\r\n  Arrays.asList(\"1:a\", \"2:b\", \"3:c\")\r\n);\r\n```","```\r\nassertEquals(\r\n  Seq.of(\"a\", \"b\", \"c\").zipWithIndex().toList(),\r\n  Arrays.asList(tuple(\"a\", 0L), tuple(\"b\", 1L), tuple(\"c\", 2L))\r\n);\r\n```","```\r\npublic Integer methodThatThrowsChecked(String arg) throws Exception {\r\n    return arg.length();\r\n}\r\n```","```\r\nList<Integer> collect = Stream.of(\"a\", \"b\", \"c\").map(elem -> {\r\n    try {\r\n        return methodThatThrowsChecked(elem);\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n        throw new RuntimeException(e);\r\n    }\r\n}).collect(Collectors.toList());\r\n\r\nassertEquals(\r\n    collect,\r\n    Arrays.asList(1, 1, 1)\r\n);\r\n```","```\r\nList<Integer> collect = Stream.of(\"a\", \"b\", \"c\")\r\n  .map(Unchecked.function(elem -> methodThatThrowsChecked(elem)))\r\n  .collect(Collectors.toList());\r\n\r\nassertEquals(\r\n  collect,\r\n  Arrays.asList(1, 1, 1)\r\n);\r\n```"]