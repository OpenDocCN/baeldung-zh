["```\r\n@Bean\r\npublic RouterFunction<ServerResponse> functionalRoute(\r\n  FunctionalHandler handler) {\r\n    return RouterFunctions.route(\r\n      RequestPredicates.POST(\"/functional-endpoint\"),\r\n      handler::handleRequest);\r\n}\r\n```","```\r\n@Component\r\npublic class FunctionalHandler {\r\n\r\n    public Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n        Mono<String> responseBody = request\r\n          .bodyToMono(CustomRequestEntity.class)\r\n          .map(cre -> String.format(\r\n            \"Hi, %s [%s]!\", cre.getName(), cre.getCode()));\r\n\r\n        return ServerResponse.ok()\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .body(responseBody, String.class);\r\n    }\r\n}\r\n```","```\r\npublic class CustomRequestEntity {\r\n\r\n    private String name;\r\n    private String code;\r\n\r\n    // ... Constructors, Getters and Setters ...\r\n\r\n}\r\n```","```\r\npublic class CustomRequestEntityValidator \r\n  implements Validator {\r\n\r\n    @Override\r\n    public boolean supports(Class<?> clazz) {\r\n        return CustomRequestEntity.class.isAssignableFrom(clazz);\r\n    }\r\n\r\n    @Override\r\n    public void validate(Object target, Errors errors) {\r\n        ValidationUtils.rejectIfEmptyOrWhitespace(\r\n          errors, \"name\", \"field.required\");\r\n        ValidationUtils.rejectIfEmptyOrWhitespace(\r\n          errors, \"code\", \"field.required\");\r\n        CustomRequestEntity request = (CustomRequestEntity) target;\r\n        if (request.getCode() != null && request.getCode().trim().length() < 6) {\r\n            errors.rejectValue(\r\n              \"code\",\r\n              \"field.min.length\",\r\n              new Object[] { Integer.valueOf(6) },\r\n              \"The code must be at least [6] characters in length.\");\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic Mono<ServerResponse> handleRequest(ServerRequest request) {\r\n    Validator validator = new CustomRequestEntityValidator();\r\n    Mono<String> responseBody = request\r\n      .bodyToMono(CustomRequestEntity.class)\r\n      .map(body -> {\r\n        Errors errors = new BeanPropertyBindingResult(\r\n          body,\r\n          CustomRequestEntity.class.getName());\r\n        validator.validate(body, errors);\r\n\r\n        if (errors == null || errors.getAllErrors().isEmpty()) {\r\n            return String.format(\"Hi, %s [%s]!\", body.getName(), body.getCode());\r\n        } else {\r\n            throw new ResponseStatusException(\r\n              HttpStatus.BAD_REQUEST,\r\n              errors.getAllErrors().toString());\r\n        }\r\n    });\r\n    return ServerResponse.ok()\r\n      .contentType(MediaType.APPLICATION_JSON)\r\n      .body(responseBody, String.class);\r\n}\r\n```","```\r\npublic abstract class AbstractValidationHandler<T, U extends Validator> {\r\n\r\n    private final Class<T> validationClass;\r\n\r\n    private final U validator;\r\n\r\n    protected AbstractValidationHandler(Class<T> clazz, U validator) {\r\n        this.validationClass = clazz;\r\n        this.validator = validator;\r\n    }\r\n\r\n    public final Mono<ServerResponse> handleRequest(final ServerRequest request) {\r\n        // ...here we will validate and process the request...\r\n    }\r\n}\r\n```","```\r\npublic Mono<ServerResponse> handleRequest(final ServerRequest request) {\r\n    return request.bodyToMono(this.validationClass)\r\n      .flatMap(body -> {\r\n        Errors errors = new BeanPropertyBindingResult(\r\n          body,\r\n          this.validationClass.getName());\r\n        this.validator.validate(body, errors);\r\n\r\n        if (errors == null || errors.getAllErrors().isEmpty()) {\r\n            return processBody(body, request);\r\n        } else {\r\n            return onValidationErrors(errors, body, request);\r\n        }\r\n    });\r\n}\r\n```","```\r\nprotected Mono<ServerResponse> onValidationErrors(\r\n  Errors errors,\r\n  T invalidBody,\r\n  ServerRequest request) {\r\n    throw new ResponseStatusException(\r\n      HttpStatus.BAD_REQUEST,\r\n      errors.getAllErrors().toString());\r\n}\r\n```","```\r\nabstract protected Mono<ServerResponse> processBody(\r\n  T validBody,\r\n  ServerRequest originalRequest);\r\n```","```\r\n@Component\r\npublic class FunctionalHandler\r\n  extends AbstractValidationHandler<CustomRequestEntity, CustomRequestEntityValidator> {\r\n\r\n    private CustomRequestEntityValidationHandler() {\r\n        super(CustomRequestEntity.class, new CustomRequestEntityValidator());\r\n    }\r\n\r\n    @Override\r\n    protected Mono<ServerResponse> processBody(\r\n      CustomRequestEntity validBody,\r\n      ServerRequest originalRequest) {\r\n        String responseBody = String.format(\r\n          \"Hi, %s [%s]!\",\r\n          validBody.getName(),\r\n          validBody.getCode());\r\n        return ServerResponse.ok()\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .body(Mono.just(responseBody), String.class);\r\n    }\r\n}\r\n```","```\r\npublic class AnnotatedRequestEntity {\r\n\r\n    @NotNull\r\n    private String user;\r\n\r\n    @NotNull\r\n    @Size(min = 4, max = 7)\r\n    private String password;\r\n\r\n    // ... Constructors, Getters and Setters ...\r\n}\r\n```","```\r\npublic class AnnotatedRequestEntityValidationHandler\r\n  extends AbstractValidationHandler<AnnotatedRequestEntity, Validator> {\r\n\r\n    private AnnotatedRequestEntityValidationHandler(@Autowired Validator validator) {\r\n        super(AnnotatedRequestEntity.class, validator);\r\n    }\r\n\r\n    @Override\r\n    protected Mono<ServerResponse> processBody(\r\n      AnnotatedRequestEntity validBody,\r\n      ServerRequest originalRequest) {\r\n\r\n        // ...\r\n\r\n    }\r\n}\r\n```","```\r\n@Bean\r\n@Primary\r\npublic Validator springValidator() {\r\n    return new LocalValidatorFactoryBean();\r\n}\r\n```"]