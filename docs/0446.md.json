["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-jms</artifactId>\r\n    <version>4.3.4.RELEASE</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.apache.activemq.tooling</groupId>\r\n    <artifactId>activemq-junit</artifactId>\r\n    <version>5.16.5</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>testcontainers</artifactId>\r\n    <version>1.17.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@ComponentScan\r\npublic class JmsApplication {\r\n    public static void main(String[] args) {\r\n        ApplicationContext context = new AnnotationConfigApplicationContext(JmsApplication.class);\r\n    }\r\n} \r\n```","```\r\n@Configuration\r\n@EnableJms\r\npublic class JmsConfig {\r\n\r\n    @Bean\r\n    public JmsListenerContainerFactory<?> jmsListenerContainerFactory() {\r\n        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\r\n        factory.setConnectionFactory(connectionFactory());\r\n        return factory;\r\n    }\r\n\r\n    @Bean\r\n    public ConnectionFactory connectionFactory() {\r\n        return new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\r\n    }\r\n\r\n    @Bean\r\n    public JmsTemplate jmsTemplate() {\r\n        return new JmsTemplate(connectionFactory());\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class MessageListener {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(MessageListener.class);\r\n\r\n    @JmsListener(destination = \"queue-1\")\r\n    public void sampleJmsListenerMethod(TextMessage message) throws JMSException {\r\n        logger.info(\"JMS listener received text message: {}\", message.getText());\r\n    }\r\n} \r\n```","```\r\n@Component\r\npublic class MessageSender {\r\n\r\n    @Autowired\r\n    private JmsTemplate jmsTemplate;\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(MessageSender.class);\r\n\r\n    public void sendTextMessage(String destination, String message) {\r\n        logger.info(\"Sending message to {} destination with text {}\", destination, message);\r\n        jmsTemplate.send(destination, s -> s.createTextMessage(message));\r\n    }\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\npublic class EmbeddedActiveMqTests4 {\r\n\r\n    @ClassRule\r\n    public static EmbeddedActiveMQBroker embeddedBroker = new EmbeddedActiveMQBroker();\r\n\r\n    @Test\r\n    public void test() {\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\nINFO | Starting embedded ActiveMQ broker: embedded-broker\r\nINFO | Using Persistence Adapter: MemoryPersistenceAdapter\r\nINFO | Apache ActiveMQ 5.14.1 (embedded-broker, ID:DESKTOP-52539-254421135-0:1) is starting\r\nINFO | Apache ActiveMQ 5.14.1 (embedded-broker, ID:DESKTOP-52539-254421135-0:1) started\r\nINFO | For help or more information please see: http://activemq.apache.org\r\nINFO | Connector vm://embedded-broker started\r\nINFO | Successfully connected to vm://embedded-broker?create=false\r\n```","```\r\n@Configuration\r\n@EnableJms\r\nstatic class TestConfiguration {\r\n    @Bean\r\n    public JmsListenerContainerFactory<?> jmsListenerContainerFactory() {\r\n        DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();\r\n        factory.setConnectionFactory(connectionFactory());\r\n        return factory;\r\n    }\r\n\r\n    @Bean\r\n    public ConnectionFactory connectionFactory() {\r\n        return new ActiveMQConnectionFactory(embeddedBroker.getVmURL());\r\n    }\r\n\r\n    @Bean\r\n    public JmsTemplate jmsTemplate() {\r\n        return new JmsTemplate(connectionFactory());\r\n    }\r\n}\r\n```","```\r\n@ContextConfiguration(classes = { TestConfiguration.class, MessageSender.class }) public class EmbeddedActiveMqTests {\r\n```","```\r\n@Autowired\r\nprivate MessageSender messageSender;\r\n```","```\r\n@Test\r\npublic void whenSendingMessage_thenCorrectQueueAndMessageText() throws JMSException {\r\n    String queueName = \"queue-2\";\r\n    String messageText = \"Test message\";\r\n\r\n    messageSender.sendTextMessage(queueName, messageText);\r\n\r\n    assertEquals(1, embeddedBroker.getMessageCount(queueName));\r\n    TextMessage sentMessage = embeddedBroker.peekTextMessage(queueName);\r\n    assertEquals(messageText, sentMessage.getText());\r\n}\r\n```","```\r\n@SpyBean\r\nprivate MessageListener messageListener;\r\n```","```\r\n@Test\r\npublic void whenListening_thenReceivingCorrectMessage() throws JMSException {\r\n    String queueName = \"queue-1\";\r\n    String messageText = \"Test message\";\r\n\r\n    embeddedBroker.pushMessage(queueName, messageText);\r\n    assertEquals(1, embeddedBroker.getMessageCount(queueName));\r\n\r\n    ArgumentCaptor<TextMessage> messageCaptor = ArgumentCaptor.forClass(TextMessage.class);\r\n\r\n    Mockito.verify(messageListener, Mockito.timeout(100)).sampleJmsListenerMethod(messageCaptor.capture());\r\n\r\n    TextMessage receivedMessage = messageCaptor.getValue();\r\n    assertEquals(messageText, receivedMessage.getText());\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\npublic class TestContainersActiveMqTests {\r\n\r\n    @ClassRule\r\n    public static GenericContainer<?> activeMqContainer \r\n      = new GenericContainer<>(DockerImageName.parse(\"rmohr/activemq:5.14.3\")).withExposedPorts(61616);\r\n\r\n    @Test\r\n    public void test() throws JMSException {\r\n    }\r\n}\r\n```","```\r\nINFO | Creating container for image: rmohr/activemq:5.14.3\r\nINFO | Container rmohr/activemq:5.14.3 is starting: e9b0ddcd45c54fc9994aff99d734d84b5fae14b55fdc70887c4a2c2309b229a7\r\nINFO | Container rmohr/activemq:5.14.3 started in PT2.635S \r\n```","```\r\n@Bean\r\npublic ConnectionFactory connectionFactory() {\r\n    String brokerUrlFormat = \"tcp://%s:%d\";\r\n    String brokerUrl = String.format(brokerUrlFormat, activeMqContainer.getHost(), activeMqContainer.getFirstMappedPort());\r\n    return new ActiveMQConnectionFactory(brokerUrl);\r\n}\r\n```","```\r\n@Autowired\r\nprivate MessageSender messageSender;\r\n\r\n@Autowired\r\nprivate JmsTemplate jmsTemplate;\r\n\r\n@Test\r\npublic void whenSendingMessage_thenCorrectQueueAndMessageText() throws JMSException {\r\n    String queueName = \"queue-2\";\r\n    String messageText = \"Test message\";\r\n\r\n    messageSender.sendTextMessage(queueName, messageText);\r\n\r\n    Message sentMessage = jmsTemplate.receive(queueName);\r\n    Assertions.assertThat(sentMessage).isInstanceOf(TextMessage.class);\r\n\r\n    assertEquals(messageText, ((TextMessage) sentMessage).getText());\r\n}\r\n```","```\r\n@SpyBean\r\nprivate MessageListener messageListener;\r\n\r\n@Test\r\npublic void whenListening_thenReceivingCorrectMessage() throws JMSException {\r\n    String queueName = \"queue-1\";\r\n    String messageText = \"Test message\";\r\n\r\n    jmsTemplate.send(queueName, s -> s.createTextMessage(messageText));\r\n\r\n    ArgumentCaptor<TextMessage> messageCaptor = ArgumentCaptor.forClass(TextMessage.class);\r\n\r\n    Mockito.verify(messageListener, Mockito.timeout(100)).sampleJmsListenerMethod(messageCaptor.capture());\r\n\r\n    TextMessage receivedMessage = messageCaptor.getValue();\r\n    assertEquals(messageText, receivedMessage.getText());\r\n}\r\n```"]