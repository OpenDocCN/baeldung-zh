["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.junit.jupiter</groupId>\r\n        <artifactId>junit-jupiter-api</artifactId>\r\n        <version>5.9.1</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.mockito</groupId>\r\n        <artifactId>mockito-core</artifactId>\r\n        <version>4.8.1</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\npublic class CacheManager {\r\n    private final HashMap<String, Object> map;\r\n    private static CacheManager instance;\r\n\r\n    private CacheManager() {\r\n        map = new HashMap<>();\r\n    }\r\n\r\n    public static CacheManager getInstance() {\r\n        if(instance == null) {\r\n            instance = new CacheManager();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public <T> T getValue(String key, Class<T> clazz) {\r\n        return clazz.cast(map.get(key));\r\n    }\r\n\r\n    public Object setValue(String key, Object value) {\r\n        return map.put(key, value);\r\n    }\r\n}\r\n```","```\r\npublic class ProductService {\r\n\r\n    private final ProductDAO productDAO;\r\n    private final CacheManager cacheManager;\r\n\r\n    public ProductService(ProductDAO productDAO) {\r\n        this.productDAO = productDAO;\r\n        this.cacheManager = CacheManager.getInstance();\r\n    }\r\n\r\n    public Product getProduct(String productName) {\r\n        Product product = cacheManager.getValue(productName, Product.class);\r\n        if (product == null) {\r\n            product = productDAO.getProduct(productName);\r\n        }\r\n\r\n        return product;\r\n    }\r\n} \r\n```","```\r\npublic ProductService(ProductDAO productDAO, CacheManager cacheManager) {\r\n    this.productDAO = productDAO;\r\n    this.cacheManager = cacheManager;\r\n} \r\n```","```\r\n@Test\r\nvoid givenValueExistsInCache_whenGetProduct_thenDAOIsNotCalled() {\r\n    ProductDAO productDAO = mock(ProductDAO.class);\r\n    CacheManager cacheManager = mock(CacheManager.class);\r\n    Product product = new Product(\"product1\", \"description\");\r\n\r\n    when(cacheManager.getValue(any(), any())).thenReturn(product);\r\n\r\n    ProductService productService = new ProductService(productDAO, cacheManager);\r\n    productService.getProduct(\"product1\");\r\n\r\n    Mockito.verify(productDAO, times(0)).getProduct(any());\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-inline</artifactId>\r\n    <version>4.8.1</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@Test\r\nvoid givenValueExistsInCache_whenGetProduct_thenDAOIsNotCalled_mockingStatic() {\r\n    ProductDAO productDAO = mock(ProductDAO.class);\r\n    CacheManager cacheManager = mock(CacheManager.class);\r\n    Product product = new Product(\"product1\", \"description\");\r\n\r\n    try (MockedStatic<CacheManager> cacheManagerMock = mockStatic(CacheManager.class)) {\r\n        cacheManagerMock.when(CacheManager::getInstance).thenReturn(cacheManager);\r\n        when(cacheManager.getValue(any(), any())).thenReturn(product);\r\n\r\n        ProductService productService = new ProductService(productDAO);\r\n        productService.getProduct(\"product1\");\r\n\r\n        Mockito.verify(productDAO, times(0)).getProduct(any());\r\n    }\r\n} \r\n```"]