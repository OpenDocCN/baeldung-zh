["```\r\nStack<Character> charStack = new Stack<>();\r\n```","```\r\npublic class CharStack {\r\n\r\n    private LinkedList<Character> items;\r\n\r\n    public CharStack() {\r\n        this.items = new LinkedList<Character>();\r\n    }\r\n}\r\n```","```\r\npublic void push(Character item) {\r\n    items.push(item);\r\n}\r\n\r\npublic Character peek() {\r\n    return items.getFirst();\r\n}\r\n\r\npublic Character pop() {\r\n    Iterator<Character> iter = items.iterator();\r\n    Character item = iter.next();\r\n    if (item != null) {\r\n        iter.remove();\r\n        return item;\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic class CharStackWithArray {\r\n\r\n    private char[] elements;\r\n    private int size;\r\n\r\n    public CharStackWithArray() {\r\n        size = 0;\r\n        elements = new char[4];\r\n    }\r\n\r\n}\r\n```","```\r\npublic void push(char item) {\r\n    ensureCapacity(size + 1);\r\n    elements[size] = item;\r\n    size++;\r\n}\r\n\r\nprivate void ensureCapacity(int newSize) {\r\n    char newBiggerArray[];\r\n    if (elements.length < newSize) {\r\n        newBiggerArray = new char[elements.length * 2];\r\n        System.arraycopy(elements, 0, newBiggerArray, 0, size);\r\n        elements = newBiggerArray;\r\n    }\r\n}\r\n```","```\r\npublic char peek() {\r\n    if (size == 0) {\r\n        throw new EmptyStackException();\r\n    }\r\n    return elements[size - 1];\r\n}\r\n\r\npublic char pop() {\r\n    if (size == 0) {\r\n        throw new EmptyStackException();\r\n    }\r\n    return elements[--size];\r\n}\r\n```"]