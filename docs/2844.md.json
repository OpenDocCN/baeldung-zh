["```\r\nSELECT * FROM store.product;\r\n```","```\r\nSHOW search_path;\r\n```","```\r\nSET search_path TO store,public;\r\n```","```\r\n@ClassRule\r\npublic static PostgresqlTestContainer container = PostgresqlTestContainer.getInstance();\r\n\r\n@BeforeClass\r\npublic static void setup() throws Exception {\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"user\", container.getUsername());\r\n    properties.setProperty(\"password\", container.getPassword());\r\n    Connection connection = DriverManager.getConnection(container.getJdbcUrl(), properties);\r\n    connection.createStatement().execute(\"CREATE SCHEMA store\");\r\n    connection.createStatement().execute(\"CREATE TABLE store.product(id SERIAL PRIMARY KEY, name VARCHAR(20))\");\r\n    connection.createStatement().execute(\"INSERT INTO store.product VALUES(1, 'test product')\");\r\n}\r\n```","```\r\n@Test\r\npublic void settingUpSchemaUsingJdbcURL() throws Exception {\r\n    Properties properties = new Properties();\r\n    properties.setProperty(\"user\", container.getUsername());\r\n    properties.setProperty(\"password\", container.getPassword());\r\n    Connection connection = DriverManager.getConnection(container.getJdbcUrl().concat(\"&\" + \"currentSchema=store\"), properties);\r\n\r\n    ResultSet resultSet = connection.createStatement().executeQuery(\"SELECT * FROM product\");\r\n    resultSet.next();\r\n\r\n    assertThat(resultSet.getInt(1), equalTo(1));\r\n    assertThat(resultSet.getString(2), equalTo(\"test product\"));\r\n}\r\n```","```\r\n@Test\r\npublic void settingUpSchemaUsingPGSimpleDataSource() throws Exception {\r\n    int port = //extracting port from container.getJdbcUrl()\r\n    PGSimpleDataSource ds = new PGSimpleDataSource();\r\n    ds.setServerNames(new String[]{container.getHost()});\r\n    ds.setPortNumbers(new int[]{port});\r\n    ds.setUser(container.getUsername());\r\n    ds.setPassword(container.getPassword());\r\n    ds.setDatabaseName(\"test\");\r\n    ds.setCurrentSchema(\"store\");\r\n\r\n    ResultSet resultSet = ds.getConnection().createStatement().executeQuery(\"SELECT * FROM product\");\r\n    resultSet.next();\r\n\r\n    assertThat(resultSet.getInt(1), equalTo(1));\r\n    assertThat(resultSet.getString(2), equalTo(\"test product\"));\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"product\", schema = \"store\")\r\npublic class Product {\r\n\r\n    @Id\r\n    private int id;\r\n    private String name;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void settingUpSchemaUsingTableAnnotation(){\r\n    Map<String,String> props = new HashMap<>();\r\n    props.put(\"hibernate.connection.url\", container.getJdbcUrl());\r\n    props.put(\"hibernate.connection.user\", container.getUsername());\r\n    props.put(\"hibernate.connection.password\", container.getPassword());\r\n    EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"postgresql_schema_unit\", props);\r\n    EntityManager entityManager = emf.createEntityManager();\r\n\r\n    Product product = entityManager.find(Product.class, 1);\r\n\r\n    assertThat(product.getName(), equalTo(\"test product\"));\r\n}\r\n```"]