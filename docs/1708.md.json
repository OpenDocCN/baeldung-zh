["```\r\nRestTemplate restTemplate = new RestTemplate();\r\nString fooResourceUrl\r\n  = \"http://localhost:8080/spring-rest/foos\";\r\nResponseEntity<String> response\r\n  = restTemplate.getForEntity(fooResourceUrl + \"/1\", String.class);\r\nAssertions.assertEquals(response.getStatusCode(), HttpStatus.OK); \r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nJsonNode root = mapper.readTree(response.getBody());\r\nJsonNode name = root.path(\"name\");\r\nAssertions.assertNotNull(name.asText());\r\n```","```\r\npublic class Foo implements Serializable {\r\n    private long id;\r\n\r\n    private String name;\r\n    // standard getters and setters\r\n}\r\n```","```\r\nFoo foo = restTemplate\r\n  .getForObject(fooResourceUrl + \"/1\", Foo.class);\r\nAssertions.assertNotNull(foo.getName());\r\nAssertions.assertEquals(foo.getId(), 1L); \r\n```","```\r\nHttpHeaders httpHeaders = restTemplate.headForHeaders(fooResourceUrl);\r\nAssertions.assertTrue(httpHeaders.getContentType().includes(MediaType.APPLICATION_JSON));\r\n```","```\r\nRestTemplate restTemplate = new RestTemplate();\r\n\r\nHttpEntity<Foo> request = new HttpEntity<>(new Foo(\"bar\"));\r\nFoo foo = restTemplate.postForObject(fooResourceUrl, request, Foo.class);\r\nAssertions.assertNotNull(foo);\r\nAssertions.assertEquals(foo.getName(), \"bar\");\r\n```","```\r\nHttpEntity<Foo> request = new HttpEntity<>(new Foo(\"bar\"));\r\nURI location = restTemplate\r\n  .postForLocation(fooResourceUrl, request);\r\nAssertions.assertNotNull(location);\r\n```","```\r\nRestTemplate restTemplate = new RestTemplate();\r\nHttpEntity<Foo> request = new HttpEntity<>(new Foo(\"bar\"));\r\nResponseEntity<Foo> response = restTemplate\r\n  .exchange(fooResourceUrl, HttpMethod.POST, request, Foo.class);\r\n\r\nAssertions.assertEquals(response.getStatusCode(), HttpStatus.CREATED);\r\n\r\nFoo foo = response.getBody();\r\n\r\nAssertions.assertNotNull(foo);\r\nAssertions.assertEquals(foo.getName(), \"bar\"); \r\n```","```\r\nHttpHeaders headers = new HttpHeaders();\r\nheaders.setContentType(MediaType.APPLICATION_FORM_URLENCODED);\r\n```","```\r\nMultiValueMap<String, String> map= new LinkedMultiValueMap<>();\r\nmap.add(\"id\", \"1\");\r\n```","```\r\nHttpEntity<MultiValueMap<String, String>> request = new HttpEntity<>(map, headers);\r\n```","```\r\nResponseEntity<String> response = restTemplate.postForEntity(\r\n  fooResourceUrl+\"/form\", request , String.class);\r\nAssertions.assertEquals(response.getStatusCode(), HttpStatus.CREATED); \r\n```","```\r\nSet<HttpMethod> optionsForAllow = restTemplate.optionsForAllow(fooResourceUrl);\r\nHttpMethod[] supportedMethods\r\n  = {HttpMethod.GET, HttpMethod.POST, HttpMethod.PUT, HttpMethod.DELETE};\r\nAssertions.assertTrue(optionsForAllow.containsAll(Arrays.asList(supportedMethods))); \r\n```","```\r\nFoo updatedInstance = new Foo(\"newName\");\r\nupdatedInstance.setId(createResponse.getBody().getId());\r\nString resourceUrl = \r\n  fooResourceUrl + '/' + createResponse.getBody().getId();\r\nHttpEntity<Foo> requestUpdate = new HttpEntity<>(updatedInstance, headers);\r\ntemplate.exchange(resourceUrl, HttpMethod.PUT, requestUpdate, Void.class);\r\n```","```\r\nRequestCallback requestCallback(final Foo updatedInstance) {\r\n    return clientHttpRequest -> {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        mapper.writeValue(clientHttpRequest.getBody(), updatedInstance);\r\n        clientHttpRequest.getHeaders().add(\r\n          HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);\r\n        clientHttpRequest.getHeaders().add(\r\n          HttpHeaders.AUTHORIZATION, \"Basic \" + getBase64EncodedLogPass());\r\n    };\r\n}\r\n```","```\r\nResponseEntity<Foo> response = restTemplate\r\n  .exchange(fooResourceUrl, HttpMethod.POST, request, Foo.class);\r\nAssertions.assertEquals(response.getStatusCode(), HttpStatus.CREATED); \r\n```","```\r\nFoo updatedInstance = new Foo(\"newName\");\r\nupdatedInstance.setId(response.getBody().getId());\r\nString resourceUrl =fooResourceUrl + '/' + response.getBody().getId();\r\nrestTemplate.execute(\r\n  resourceUrl, \r\n  HttpMethod.PUT, \r\n  requestCallback(updatedInstance), \r\n  clientHttpResponse -> null);\r\n```","```\r\nString entityUrl = fooResourceUrl + \"/\" + existingResource.getId();\r\nrestTemplate.delete(entityUrl); \r\n```","```\r\nRestTemplate restTemplate = new RestTemplate(getClientHttpRequestFactory());\r\n\r\nprivate ClientHttpRequestFactory getClientHttpRequestFactory() {\r\n    int timeout = 5000;\r\n    HttpComponentsClientHttpRequestFactory clientHttpRequestFactory\r\n      = new HttpComponentsClientHttpRequestFactory();\r\n    clientHttpRequestFactory.setConnectTimeout(timeout);\r\n    return clientHttpRequestFactory;\r\n}\r\n```","```\r\nprivate ClientHttpRequestFactory getClientHttpRequestFactory() {\r\n    int timeout = 5000;\r\n    RequestConfig config = RequestConfig.custom()\r\n      .setConnectTimeout(timeout)\r\n      .setConnectionRequestTimeout(timeout)\r\n      .setSocketTimeout(timeout)\r\n      .build();\r\n    CloseableHttpClient client = HttpClientBuilder\r\n      .create()\r\n      .setDefaultRequestConfig(config)\r\n      .build();\r\n    return new HttpComponentsClientHttpRequestFactory(client);\r\n}\r\n```"]