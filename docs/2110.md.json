["```\r\n@Test\r\nvoid whenListContainsElement_thenCheckReturnsTrue() {\r\n    def list = ['a', 'b', 'c']\r\n\r\n    assertTrue(list.indexOf('a') > -1)\r\n    assertTrue(list.contains('a'))\r\n}\r\n```","```\r\nelement in list\r\n```","```\r\n@Test\r\nvoid whenListContainsElement_thenCheckWithMembershipOperatorReturnsTrue() {\r\n    def list = ['a', 'b', 'c']\r\n\r\n    assertTrue('a' in list)\r\n}\r\n```","```\r\n@Test\r\nvoid whenSetContainsElement_thenCheckReturnsTrue() {\r\n    def set = ['a', 'b', 'c'] as Set\r\n\r\n    assertTrue(set.contains('a'))\r\n    assertTrue('a' in set)\r\n}\r\n```","```\r\n@Test\r\nvoid whenMapContainsKeyElement_thenCheckReturnsTrue() {\r\n    def map = [a: 'd', b: 'e', c: 'f']\r\n\r\n    assertTrue(map.containsKey('a'))\r\n    assertFalse(map.containsKey('e'))\r\n    assertTrue(map.containsValue('e'))\r\n}\r\n```","```\r\n@Test\r\nvoid whenMapContainsKeyElement_thenCheckByMembershipReturnsTrue() {\r\n    def map = [a: 'd', b: 'e', c: 'f']\r\n\r\n    assertTrue('a' in map)\r\n    assertFalse('f' in map)\r\n}\r\n```","```\r\n@Test\r\nvoid whenMapContainsFalseBooleanValues_thenCheckReturnsFalse() {\r\n    def map = [a: true, b: false, c: null]\r\n\r\n    assertTrue(map.containsKey('b'))\r\n    assertTrue('a' in map)\r\n    assertFalse('b' in map)\r\n    assertFalse('c' in map)\r\n}\r\n```","```\r\nclass Person {\r\n    private String firstname\r\n    private String lastname\r\n    private Integer age\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nprivate final personList = [\r\n  new Person(\"Regina\", \"Fitzpatrick\", 25),\r\n  new Person(\"Abagail\", \"Ballard\", 26),\r\n  new Person(\"Lucian\", \"Walter\", 30),\r\n]\r\n```","```\r\n@Test\r\nvoid givenListOfPerson_whenUsingStreamMatching_thenShouldEvaluateList() {\r\n    assertTrue(personList.stream().anyMatch {it.age > 20})\r\n    assertFalse(personList.stream().allMatch {it.age < 30})\r\n}\r\n```","```\r\n@Test\r\nvoid givenListOfPerson_whenUsingCollectionMatching_thenShouldEvaluateList() {\r\n    assertTrue(personList.any {it.age > 20})\r\n    assertFalse(personList.every {it.age < 30})\r\n}\r\n```","```\r\nprivate final personMap = [\r\n  Regina : new Person(\"Regina\", \"Fitzpatrick\", 25),\r\n  Abagail: new Person(\"Abagail\", \"Ballard\", 26),\r\n  Lucian : new Person(\"Lucian\", \"Walter\", 30)\r\n]\r\n```","```\r\n@Test\r\nvoid givenMapOfPerson_whenUsingStreamMatching_thenShouldEvaluateMap() {\r\n    assertTrue(personMap.keySet().stream().anyMatch {it == \"Regina\"})\r\n    assertFalse(personMap.keySet().stream().allMatch {it == \"Albert\"})\r\n    assertFalse(personMap.values().stream().allMatch {it.age < 30})\r\n    assertTrue(personMap.entrySet().stream().anyMatch\r\n      {it.key == \"Abagail\" && it.value.lastname == \"Ballard\"})\r\n}\r\n```","```\r\n@Test\r\nvoid givenMapOfPerson_whenUsingCollectionMatching_thenShouldEvaluateMap() {\r\n    assertTrue(personMap.keySet().any {it == \"Regina\"})\r\n    assertFalse(personMap.keySet().every {it == \"Albert\"})\r\n    assertFalse(personMap.values().every {it.age < 30})\r\n    assertTrue(personMap.any {firstname, person -> firstname == \"Abagail\" && person.lastname == \"Ballard\"})\r\n}\r\n```","```\r\n@Test\r\nvoid givenListOfPerson_whenUsingStreamFind_thenShouldReturnMatchingElements() {\r\n    assertTrue(personList.stream().filter {it.age > 20}.findAny().isPresent())\r\n    assertFalse(personList.stream().filter {it.age > 30}.findAny().isPresent())\r\n    assertTrue(personList.stream().filter {it.age > 20}.findAll().size() == 3)\r\n    assertTrue(personList.stream().filter {it.age > 30}.findAll().isEmpty())\r\n}\r\n```","```\r\n@Test\r\nvoid givenListOfPerson_whenUsingCollectionFind_thenShouldReturnMatchingElements() {\r\n    assertNotNull(personList.find {it.age > 20})\r\n    assertNull(personList.find {it.age > 30})\r\n    assertTrue(personList.findAll {it.age > 20}.size() == 3)\r\n    assertTrue(personList.findAll {it.age > 30}.isEmpty())\r\n}\r\n```","```\r\n@Test\r\nvoid givenMapOfPerson_whenUsingStreamFind_thenShouldReturnElements() {\r\n    assertTrue(\r\n      personMap.entrySet().stream()\r\n        .filter {it.key == \"Abagail\" && it.value.lastname == \"Ballard\"}\r\n        .findAny().isPresent())\r\n    assertTrue(\r\n      personMap.entrySet().stream()\r\n        .filter {it.value.age > 20}\r\n        .findAll().size() == 3)\r\n}\r\n```","```\r\n@Test\r\nvoid givenMapOfPerson_whenUsingCollectionFind_thenShouldReturnElements() {\r\n    assertNotNull(personMap.find {it.key == \"Abagail\" && it.value.lastname == \"Ballard\"})\r\n    assertTrue(personMap.findAll {it.value.age > 20}.size() == 3)\r\n}\r\n```"]