["```\r\npublic class SequenceGenerator {\r\n\r\n    private int currentValue = 0;\r\n\r\n    public int getNextSequence() {\r\n        currentValue = currentValue + 1;\r\n        return currentValue;\r\n    }\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenUnsafeSequenceGenerator_whenRaceCondition_thenUnexpectedBehavior() throws Exception {\r\n    int count = 1000;\r\n    Set<Integer> uniqueSequences = getUniqueSequences(new SequenceGenerator(), count);\r\n    Assert.assertEquals(count, uniqueSequences.size());\r\n}\r\n\r\nprivate Set<Integer> getUniqueSequences(SequenceGenerator generator, int count) throws Exception {\r\n    ExecutorService executor = Executors.newFixedThreadPool(3);\r\n    Set<Integer> uniqueSequences = new LinkedHashSet<>();\r\n    List<Future<Integer>> futures = new ArrayList<>();\r\n\r\n    for (int i = 0; i < count; i++) {\r\n        futures.add(executor.submit(generator::getNextSequence));\r\n    }\r\n\r\n    for (Future<Integer> future : futures) {\r\n        uniqueSequences.add(future.get());\r\n    }\r\n\r\n    executor.awaitTermination(1, TimeUnit.SECONDS);\r\n    executor.shutdown();\r\n\r\n    return uniqueSequences;\r\n}\r\n```","```\r\njava.lang.AssertionError: expected:<1000> but was:<989>\r\n  at org.junit.Assert.fail(Assert.java:88)\r\n  at org.junit.Assert.failNotEquals(Assert.java:834)\r\n  at org.junit.Assert.assertEquals(Assert.java:645)\r\n```","```\r\npublic class SequenceGeneratorUsingSynchronizedMethod extends SequenceGenerator {\r\n\r\n    @Override\r\n    public synchronized int getNextSequence() {\r\n        return super.getNextSequence();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class SequenceGeneratorUsingSynchronizedBlock extends SequenceGenerator {\r\n\r\n    private Object mutex = new Object();\r\n\r\n    @Override\r\n    public int getNextSequence() {\r\n        synchronized (mutex) {\r\n            return super.getNextSequence();\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\npublic class SequenceGeneratorUsingReentrantLock extends SequenceGenerator {\r\n\r\n    private ReentrantLock mutex = new ReentrantLock();\r\n\r\n    @Override\r\n    public int getNextSequence() {\r\n        try {\r\n            mutex.lock();\r\n            return super.getNextSequence();\r\n        } finally {\r\n            mutex.unlock();\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class SequenceGeneratorUsingSemaphore extends SequenceGenerator {\r\n\r\n    private Semaphore mutex = new Semaphore(1);\r\n\r\n    @Override\r\n    public int getNextSequence() {\r\n        try {\r\n            mutex.acquire();\r\n            return super.getNextSequence();\r\n        } catch (InterruptedException e) {\r\n            // exception handling code\r\n        } finally {\r\n            mutex.release();\r\n        }\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic class SequenceGeneratorUsingMonitor extends SequenceGenerator {\r\n\r\n    private Monitor mutex = new Monitor();\r\n\r\n    @Override\r\n    public int getNextSequence() {\r\n        mutex.enter();\r\n        try {\r\n            return super.getNextSequence();\r\n        } finally {\r\n            mutex.leave();\r\n        }\r\n    }\r\n\r\n}\r\n```"]