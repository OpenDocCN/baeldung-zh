["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n</dependency>\r\n```","```\r\nserver: \r\n  port: 8081\r\n  servlet: \r\n    context-path: /resource-server\r\n\r\nspring:\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        jwt:\r\n          issuer-uri: http://localhost:8083/auth/realms/baeldung\r\n          jwk-set-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/certs\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors()\r\n            .and()\r\n              .authorizeRequests()\r\n                .antMatchers(HttpMethod.GET, \"/user/info\", \"/api/foos/**\")\r\n                  .hasAuthority(\"SCOPE_read\")\r\n                .antMatchers(HttpMethod.POST, \"/api/foos\")\r\n                  .hasAuthority(\"SCOPE_write\")\r\n                .anyRequest()\r\n                  .authenticated()\r\n            .and()\r\n              .oauth2ResourceServer()\r\n                .jwt();\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Foo {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\npublic interface IFooRepository extends PagingAndSortingRepository<Foo, Long> {\r\n} \r\n```","```\r\npublic interface IFooService {\r\n    Optional<Foo> findById(Long id);\r\n\r\n    Foo save(Foo foo);\r\n\r\n    Iterable<Foo> findAll();\r\n\r\n}\r\n\r\n@Service\r\npublic class FooServiceImpl implements IFooService {\r\n\r\n    private IFooRepository fooRepository;\r\n\r\n    public FooServiceImpl(IFooRepository fooRepository) {\r\n        this.fooRepository = fooRepository;\r\n    }\r\n\r\n    @Override\r\n    public Optional<Foo> findById(Long id) {\r\n        return fooRepository.findById(id);\r\n    }\r\n\r\n    @Override\r\n    public Foo save(Foo foo) {\r\n        return fooRepository.save(foo);\r\n    }\r\n\r\n    @Override\r\n    public Iterable<Foo> findAll() {\r\n        return fooRepository.findAll();\r\n    }\r\n} \r\n```","```\r\n@RestController\r\n@RequestMapping(value = \"/api/foos\")\r\npublic class FooController {\r\n\r\n    private IFooService fooService;\r\n\r\n    public FooController(IFooService fooService) {\r\n        this.fooService = fooService;\r\n    }\r\n\r\n    @CrossOrigin(origins = \"http://localhost:8089\")    \r\n    @GetMapping(value = \"/{id}\")\r\n    public FooDto findOne(@PathVariable Long id) {\r\n        Foo entity = fooService.findById(id)\r\n            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\r\n        return convertToDto(entity);\r\n    }\r\n\r\n    @GetMapping\r\n    public Collection<FooDto> findAll() {\r\n        Iterable<Foo> foos = this.fooService.findAll();\r\n        List<FooDto> fooDtos = new ArrayList<>();\r\n        foos.forEach(p -> fooDtos.add(convertToDto(p)));\r\n        return fooDtos;\r\n    }\r\n\r\n    protected FooDto convertToDto(Foo entity) {\r\n        FooDto dto = new FooDto(entity.getId(), entity.getName());\r\n\r\n        return dto;\r\n    }\r\n}\r\n```","```\r\npublic class FooDto {\r\n    private long id;\r\n    private String name;\r\n}\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>com.github.eirslett</groupId>\r\n            <artifactId>frontend-maven-plugin</artifactId>\r\n            <version>1.3</version>\r\n            <configuration>\r\n                <nodeVersion>v6.10.2</nodeVersion>\r\n                <npmVersion>3.10.10</npmVersion>\r\n                <workingDirectory>src/main/resources</workingDirectory>\r\n            </configuration>\r\n            <executions>\r\n                <execution>\r\n                    <id>install node and npm</id>\r\n                    <goals>\r\n                        <goal>install-node-and-npm</goal>\r\n                    </goals>\r\n                </execution>\r\n                <execution>\r\n                    <id>npm install</id>\r\n                    <goals>\r\n                        <goal>npm</goal>\r\n                    </goals>\r\n                </execution>\r\n                <execution>\r\n                    <id>npm run build</id>\r\n                    <goals>\r\n                        <goal>npm</goal>\r\n                    </goals>\r\n                    <configuration>\r\n                        <arguments>run build</arguments>\r\n                    </configuration>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\nng new oauthApp\r\n```","```\r\n@Component({\r\n  selector: 'home-header',\r\n  providers: [AppService],\r\n  template: `<div class=\"container\" >\r\n    <button *ngIf=\"!isLoggedIn\" class=\"btn btn-primary\" (click)=\"login()\" type=\"submit\">\r\n      Login</button>\r\n    <div *ngIf=\"isLoggedIn\" class=\"content\">\r\n      <span>Welcome !!</span>\r\n      <a class=\"btn btn-default pull-right\"(click)=\"logout()\" href=\"#\">Logout</a>\r\n      <br/>\r\n      <foo-details></foo-details>\r\n    </div>\r\n  </div>`\r\n})\r\n\r\nexport class HomeComponent {\r\n  public isLoggedIn = false;\r\n\r\n  constructor(private _service: AppService) { }\r\n\r\n  ngOnInit() {\r\n    this.isLoggedIn = this._service.checkCredentials();    \r\n    let i = window.location.href.indexOf('code');\r\n    if(!this.isLoggedIn && i != -1) {\r\n      this._service.retrieveToken(window.location.href.substring(i + 5));\r\n    }\r\n  }\r\n\r\n  login() {\r\n    window.location.href = \r\n      'http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth?\r\n         response_type=code&scope;=openid%20write%20read&client;_id=' + \r\n         this._service.clientId + '&redirect;_uri='+ this._service.redirectUri;\r\n    }\r\n\r\n  logout() {\r\n    this._service.logout();\r\n  }\r\n} \r\n```","```\r\nexport class Foo {\r\n  constructor(public id: number, public name: string) { }\r\n} \r\n\r\n@Injectable()\r\nexport class AppService {\r\n  public clientId = 'newClient';\r\n  public redirectUri = 'http://localhost:8089/';\r\n\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  retrieveToken(code) {\r\n    let params = new URLSearchParams();   \r\n    params.append('grant_type','authorization_code');\r\n    params.append('client_id', this.clientId);\r\n    params.append('client_secret', 'newClientSecret');\r\n    params.append('redirect_uri', this.redirectUri);\r\n    params.append('code',code);\r\n\r\n    let headers = \r\n      new HttpHeaders({'Content-type': 'application/x-www-form-urlencoded; charset=utf-8'});\r\n\r\n      this._http.post('http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token', \r\n        params.toString(), { headers: headers })\r\n        .subscribe(\r\n          data => this.saveToken(data),\r\n          err => alert('Invalid Credentials')); \r\n  }\r\n\r\n  saveToken(token) {\r\n    var expireDate = new Date().getTime() + (1000 * token.expires_in);\r\n    Cookie.set(\"access_token\", token.access_token, expireDate);\r\n    console.log('Obtained Access token');\r\n    window.location.href = 'http://localhost:8089';\r\n  }\r\n\r\n  getResource(resourceUrl) : Observable<any> {\r\n    var headers = new HttpHeaders({\r\n      'Content-type': 'application/x-www-form-urlencoded; charset=utf-8', \r\n      'Authorization': 'Bearer '+Cookie.get('access_token')});\r\n    return this._http.get(resourceUrl, { headers: headers })\r\n                   .catch((error:any) => Observable.throw(error.json().error || 'Server error'));\r\n  }\r\n\r\n  checkCredentials() {\r\n    return Cookie.check('access_token');\r\n  } \r\n\r\n  logout() {\r\n    Cookie.delete('access_token');\r\n    window.location.reload();\r\n  }\r\n}\r\n```","```\r\n@Component({\r\n  selector: 'foo-details',\r\n  providers: [AppService],  \r\n  template: `<div class=\"container\">\r\n    <h1 class=\"col-sm-12\">Foo Details</h1>\r\n    <div class=\"col-sm-12\">\r\n        <label class=\"col-sm-3\">ID</label> <span>{{foo.id}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <label class=\"col-sm-3\">Name</label> <span>{{foo.name}}</span>\r\n    </div>\r\n    <div class=\"col-sm-12\">\r\n        <button class=\"btn btn-primary\" (click)=\"getFoo()\" type=\"submit\">New Foo</button>        \r\n    </div>\r\n  </div>`\r\n})\r\n\r\nexport class FooComponent {\r\n  public foo = new Foo(1,'sample foo');\r\n  private foosUrl = 'http://localhost:8081/resource-server/api/foos/';  \r\n\r\n  constructor(private _service:AppService) {}\r\n\r\n  getFoo() {\r\n    this._service.getResource(this.foosUrl+this.foo.id)\r\n      .subscribe(\r\n         data => this.foo = data,\r\n         error =>  this.foo.name = 'Error');\r\n    }\r\n}\r\n```","```\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `<nav class=\"navbar navbar-default\">\r\n    <div class=\"container-fluid\">\r\n      <div class=\"navbar-header\">\r\n        <a class=\"navbar-brand\" href=\"/\">Spring Security Oauth - Authorization Code</a>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  <router-outlet></router-outlet>`\r\n})\r\n\r\nexport class AppComponent { } \r\n```","```\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    FooComponent    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot([\r\n     { path: '', component: HomeComponent, pathMatch: 'full' }], {onSameUrlNavigation: 'reload'})\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { } \r\n```","```\r\nmvn clean install\r\n```","```\r\ncd src/main/resources\r\n```","```\r\nnpm start\r\n```","```\r\n\"start\": \"ng serve\"\r\n```","```\r\n\"start\": \"ng serve --port 8089\"\r\n```"]