["```\r\npublic class AverageCalculator implements Callable<Double> {\r\n\r\n    int[] numbers;\r\n\r\n    public AverageCalculator(int... numbers) {\r\n        this.numbers = numbers == null ? new int[0] : numbers;\r\n    }\r\n\r\n    @Override\r\n    public Double call() throws Exception {\r\n        return IntStream.of(numbers).average().orElse(0d);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendingParameterToCallable_thenSuccessful() throws Exception {\r\n    ExecutorService executorService = Executors.newSingleThreadExecutor();\r\n    Future<Double> result = executorService.submit(new AverageCalculator(1, 2, 3));\r\n    try {\r\n        assertEquals(2.0, result.get().doubleValue());\r\n    } finally {\r\n        executorService.shutdown();\r\n    }\r\n}\r\n```","```\r\nexecutorService.submit(() -> IntStream.of(numbers).average().orElse(0d));\r\n```","```\r\nexecutorService.submit(() -> IntStream.of(numbers).sum());\r\n```","```\r\n@Test\r\npublic void whenParametersToThreadWithLamda_thenParametersPassedCorrectly()\r\n  throws Exception {\r\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    int[] numbers = new int[] { 4, 5, 6 };\r\n\r\n    try {\r\n        Future<Integer> sumResult = \r\n          executorService.submit(() -> IntStream.of(numbers).sum()); \r\n        Future<Double> averageResult = \r\n          executorService.submit(() -> IntStream.of(numbers).average().orElse(0d));\r\n        assertEquals(Integer.valueOf(15), sumResult.get());\r\n        assertEquals(Double.valueOf(5.0), averageResult.get());\r\n    } finally {\r\n        executorService.shutdown();\r\n    }\r\n}\r\n```","```\r\nfinal int[] numbers = { 1, 2, 3 };\r\nThread parameterizedThread = new Thread(new Callable<Double>() {\r\n    @Override\r\n    public Double call() {\r\n        return calculateTheAverage(numbers);\r\n    }\r\n});\r\nparameterizedThread.start();\r\n```"]