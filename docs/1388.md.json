["```\r\nstatic List<Integer> digitsInList(int n) {\r\n    List<Integer> list = new ArrayList<>();\r\n    while (n > 0) {\r\n        list.add(n % 10);\r\n        n = n / 10;\r\n    }\r\n    return list;\r\n} \r\n```","```\r\nstatic boolean isArmstrong(int n) {\r\n    if (n < 0) {\r\n        return false;\r\n    }\r\n    List<Integer> digitsList = digitsInList(n);\r\n    int len = digitsList.size();\r\n    int sum = digitsList.stream()\r\n      .mapToInt(d -> (int) Math.pow(d, len))\r\n      .sum();\r\n    return n == sum;\r\n} \r\n```","```\r\nint sum = digits.stream()\r\n  .reduce(0, (subtotal, digit) -> subtotal + (int) Math.pow(digit, len));\r\n```","```\r\nstatic List<Integer> getA005188Sequence(int limit) {\r\n    if (limit < 0) {\r\n        throw new IllegalArgumentException(\"The limit cannot be a negative number.\");\r\n    }\r\n    return IntStream.range(0, limit)\r\n      .boxed()\r\n      .filter(ArmstrongNumberUtil::isArmstrong)\r\n      .collect(Collectors.toList());\r\n} \r\n```","```\r\nstatic final Map<Integer, Boolean> ARMSTRONG_MAP = ImmutableMap.of(\r\n  0, true,\r\n  1, true,\r\n  2, true,\r\n  153, true,\r\n  370, true,\r\n  407, true,\r\n  42, false,\r\n  777, false,\r\n  12345, false); \r\n```","```\r\nARMSTRONG_MAP.forEach((number, result) -> assertEquals(result, ArmstrongNumberUtil.isArmstrong(number))); \r\n```","```\r\nList<Integer> A005188_SEQ_1K = ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407);\r\nList<Integer> A005188_SEQ_10K = ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208, 9474);\r\n\r\nassertEquals(A005188_SEQ_1K, ArmstrongNumberUtil.getA005188Sequence(1000));\r\nassertEquals(A005188_SEQ_10K, ArmstrongNumberUtil.getA005188Sequence(10000)); \r\n```"]