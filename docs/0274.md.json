["```\r\n@Service(\"ConfigManager\")\r\npublic class ConfigManager {\r\n\r\n    private static final Log LOG = LogFactory.getLog(ConfigManager.class);\r\n\r\n    private Map<String, Object> config;\r\n\r\n    private final String filePath;\r\n\r\n    public ConfigManager(@Value(\"${config.file.path}\") String filePath) {\r\n        this.filePath = filePath;\r\n        initConfigs();\r\n    }\r\n\r\n    private void initConfigs() {\r\n        Properties properties = new Properties();\r\n        try {\r\n            properties.load(Files.newInputStream(Paths.get(filePath)));\r\n        } catch (IOException e) {\r\n            LOG.error(\"Error loading configuration:\", e);\r\n        }\r\n        config = new HashMap<>();\r\n        for (Map.Entry<Object, Object> entry : properties.entrySet()) {\r\n            config.put(String.valueOf(entry.getKey()), entry.getValue());\r\n        }\r\n    }\r\n\r\n    public Object getConfig(String key) {\r\n        return config.get(key);\r\n    }\r\n} \r\n```","```\r\nproperty1=value1 \r\n```","```\r\n@RestController\r\n@RequestMapping(\"/config\")\r\npublic class ConfigController {\r\n\r\n    @Autowired\r\n    private ConfigManager configManager;\r\n\r\n    @GetMapping(\"/{key}\")\r\n    public Object get(@PathVariable String key) {\r\n        return configManager.getConfig(key);\r\n    }\r\n} \r\n```","```\r\npublic void reinitializeConfig() {\r\n    initConfigs();\r\n} \r\n```","```\r\n@GetMapping(\"/reinitializeConfig\")\r\npublic void reinitializeConfig() {\r\n    configManager.reinitializeConfig();\r\n} \r\n```","```\r\n@GetMapping(\"/reinitializeBean\")\r\npublic void reinitializeBean() {\r\n    DefaultSingletonBeanRegistry registry = (DefaultSingletonBeanRegistry) applicationContext.getAutowireCapableBeanFactory();\r\n    registry.destroySingleton(\"ConfigManager\");\r\n    registry.registerSingleton(\"ConfigManager\", new ConfigManager(filePath)); \r\n} \r\n```","```\r\n@GetMapping(\"/destroyBean\")\r\npublic void destroyBean() {\r\n    DefaultSingletonBeanRegistry registry = (DefaultSingletonBeanRegistry) applicationContext.getAutowireCapableBeanFactory();\r\n    registry.destroySingleton(\"ConfigManager\");\r\n} \r\n```","```\r\n@GetMapping(\"/context/{key}\")\r\npublic Object getFromContext(@PathVariable String key) {\r\n    ConfigManager dynamicConfigManager = applicationContext.getBean(ConfigManager.class);\r\n    return dynamicConfigManager.getConfig(key);\r\n} \r\n```"]