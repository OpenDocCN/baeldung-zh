["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency> \r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session-jdbc</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.197</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nspring.session.store-type=jdbc\r\n```","```\r\n@Configuration\r\n@EnableJdbcHttpSession\r\npublic class Config\r\n  extends AbstractHttpSessionApplicationInitializer {\r\n\r\n    @Bean\r\n    public EmbeddedDatabase dataSource() {\r\n        return new EmbeddedDatabaseBuilder()\r\n          .setType(EmbeddedDatabaseType.H2)\r\n          .addScript(\"org/springframework/session/jdbc/schema-h2.sql\").build();\r\n    }\r\n\r\n    @Bean\r\n    public PlatformTransactionManager transactionManager(DataSource dataSource) {\r\n        return new DataSourceTransactionManager(dataSource);\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class SpringSessionJdbcController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(Model model, HttpSession session) {\r\n        List<String> favoriteColors = getFavColors(session);\r\n        model.addAttribute(\"favoriteColors\", favoriteColors);\r\n        model.addAttribute(\"sessionId\", session.getId());\r\n        return \"index\";\r\n    }\r\n\r\n    @PostMapping(\"/saveColor\")\r\n    public String saveMessage\r\n      (@RequestParam(\"color\") String color, \r\n      HttpServletRequest request) {\r\n\r\n        List<String> favoriteColors \r\n          = getFavColors(request.getSession());\r\n        if (!StringUtils.isEmpty(color)) {\r\n            favoriteColors.add(color);\r\n            request.getSession().\r\n              setAttribute(\"favoriteColors\", favoriteColors);\r\n        }\r\n        return \"redirect:/\";\r\n    }\r\n\r\n    private List<String> getFavColors(HttpSession session) {\r\n        List<String> favoriteColors = (List<String>) session\r\n          .getAttribute(\"favoriteColors\");\r\n\r\n        if (favoriteColors == null) {\r\n            favoriteColors = new ArrayList<>();\r\n        }\r\n        return favoriteColors;\r\n    }\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(\r\n  webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\r\npublic class SpringSessionJdbcApplicationTests {\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @Autowired\r\n    private TestRestTemplate testRestTemplate;\r\n\r\n    private List<String> getSessionIdsFromDatabase() \r\n      throws SQLException {\r\n\r\n        List<String> result = new ArrayList<>();\r\n        ResultSet rs = getResultSet(\r\n          \"SELECT * FROM SPRING_SESSION\");\r\n\r\n        while (rs.next()) {\r\n            result.add(rs.getString(\"SESSION_ID\"));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private List<byte[]> getSessionAttributeBytesFromDb() \r\n      throws SQLException {\r\n\r\n        List<byte[]> result = new ArrayList<>();\r\n        ResultSet rs = getResultSet(\r\n          \"SELECT * FROM SPRING_SESSION_ATTRIBUTES\");\r\n\r\n        while (rs.next()) {\r\n            result.add(rs.getBytes(\"ATTRIBUTE_BYTES\"));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private ResultSet getResultSet(String sql) \r\n      throws SQLException {\r\n\r\n        Connection conn = DriverManager\r\n          .getConnection(\"jdbc:h2:mem:testdb\", \"sa\", \"\");\r\n        Statement stat = conn.createStatement();\r\n        return stat.executeQuery(sql);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenH2DbIsQueried_thenSessionInfoIsEmpty() \r\n  throws SQLException {\r\n\r\n    assertEquals(\r\n      0, getSessionIdsFromDatabase().size());\r\n    assertEquals(\r\n      0, getSessionAttributeBytesFromDatabase().size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenH2DbIsQueried_thenOneSessionIsCreated() \r\n  throws SQLException {\r\n\r\n    assertThat(this.testRestTemplate.getForObject(\r\n      \"http://localhost:\" + port + \"/\", String.class))\r\n      .isNotEmpty();\r\n    assertEquals(1, getSessionIdsFromDatabase().size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenH2DbIsQueried_thenSessionAttributeIsRetrieved()\r\n  throws Exception {\r\n\r\n    MultiValueMap<String, String> map = new LinkedMultiValueMap<>();\r\n    map.add(\"color\", \"red\");\r\n    this.testRestTemplate.postForObject(\r\n      \"http://localhost:\" + port + \"/saveColor\", map, String.class);\r\n    List<byte[]> queryResponse = getSessionAttributeBytesFromDatabase();\r\n\r\n    assertEquals(1, queryResponse.size());\r\n    ObjectInput in = new ObjectInputStream(\r\n      new ByteArrayInputStream(queryResponse.get(0)));\r\n    List<String> obj = (List<String>) in.readObject();\r\n    assertEquals(\"red\", obj.get(0));\r\n}\r\n```","```\r\nspring.h2.console.enabled=true\r\nspring.h2.console.path=/h2-console\r\n```"]