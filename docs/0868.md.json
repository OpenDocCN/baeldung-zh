["```\r\npublic class FindAllOrderedProductsQuery {}\r\n```","```\r\n@Service\r\npublic class InMemoryOrdersEventHandler implements OrdersEventHandler {\r\n    private final Map<String, Order> orders = new HashMap<>();\r\n\r\n    @QueryHandler\r\n    public List<Order> handle(FindAllOrderedProductsQuery query) {\r\n        return new ArrayList<>(orders.values());\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class OrderQueryService {\r\n    private final QueryGateway queryGateway;\r\n\r\n    public OrderQueryService(QueryGateway queryGateway) {\r\n        this.queryGateway = queryGateway;\r\n    }\r\n\r\n    public CompletableFuture<List<OrderResponse>> findAllOrders() {\r\n        return queryGateway.query(new FindAllOrderedProductsQuery(),\r\n            ResponseTypes.multipleInstancesOf(Order.class))\r\n          .thenApply(r -> r.stream()\r\n            .map(OrderResponse::new)\r\n            .collect(Collectors.toList()));\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n@SpringBootTest(classes = OrderApplication.class)\r\nclass OrderQueryServiceIntegrationTest {\r\n\r\n    @Autowired\r\n    OrderQueryService queryService;\r\n\r\n    @Autowired\r\n    OrdersEventHandler handler;\r\n\r\n    private String orderId;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        orderId = UUID.randomUUID().toString();\r\n        Order order = new Order(orderId);\r\n        handler.reset(Collections.singletonList(order));\r\n    }\r\n\r\n    @Test\r\n    void givenOrderCreatedEventSend_whenCallingAllOrders_thenOneCreatedOrderIsReturned()\r\n            throws ExecutionException, InterruptedException {\r\n        List<OrderResponse> result = queryService.findAllOrders().get();\r\n        assertEquals(1, result.size());\r\n        OrderResponse response = result.get(0);\r\n        assertEquals(orderId, response.getOrderId());\r\n        assertEquals(OrderStatusResponse.CREATED, response.getOrderStatus());\r\n        assertTrue(response.getProducts().isEmpty());\r\n    }\r\n}\r\n```","```\r\npublic class TotalProductsShippedQuery {\r\n    private final String productId;\r\n\r\n    public TotalProductsShippedQuery(String productId) {\r\n        this.productId = productId;\r\n    }\r\n\r\n    // getter\r\n}\r\n```","```\r\n@QueryHandler\r\npublic Integer handle(TotalProductsShippedQuery query) {\r\n    return orders.values().stream()\r\n      .filter(o -> o.getOrderStatus() == OrderStatus.SHIPPED)\r\n      .map(o -> Optional.ofNullable(o.getProducts().get(query.getProductId())).orElse(0))\r\n      .reduce(0, Integer::sum);\r\n}\r\n```","```\r\n@Service\r\npublic class LegacyQueryHandler {\r\n    @QueryHandler\r\n    public Integer handle(TotalProductsShippedQuery query) {\r\n        switch (query.getProductId()) {\r\n        case \"Deluxe Chair\":\r\n            return 234;\r\n        case \"a6aa01eb-4e38-4dfb-b53b-b5b82961fbf3\":\r\n            return 10;\r\n        default:\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic Integer totalShipped(String productId) {\r\n    return queryGateway.scatterGather(new TotalProductsShippedQuery(productId),\r\n        ResponseTypes.instanceOf(Integer.class), 10L, TimeUnit.SECONDS)\r\n      .reduce(0, Integer::sum);\r\n}\r\n```","```\r\nvoid givenThreeDeluxeChairsShipped_whenCallingAllShippedChairs_then234PlusTreeIsReturned() {\r\n    Order order = new Order(orderId);\r\n    order.getProducts().put(\"Deluxe Chair\", 3);\r\n    order.setOrderShipped();\r\n    handler.reset(Collections.singletonList(order));\r\n\r\n    assertEquals(237, queryService.totalShipped(\"Deluxe Chair\"));\r\n}\r\n```","```\r\npublic class OrderUpdatesQuery {\r\n    private final String orderId;\r\n\r\n    public OrderUpdatesQuery(String orderId) {\r\n        this.orderId = orderId;\r\n    }\r\n\r\n    // getter\r\n}\r\n```","```\r\n@QueryHandler\r\npublic Order handle(OrderUpdatesQuery query) {\r\n    return orders.get(query.getOrderId());\r\n}\r\n```","```\r\n@Service\r\npublic class InMemoryOrdersEventHandler implements OrdersEventHandler {\r\n\r\n    private final QueryUpdateEmitter emitter;\r\n\r\n    public InMemoryOrdersEventHandler(QueryUpdateEmitter emitter) {\r\n        this.emitter = emitter;\r\n    }\r\n\r\n    private void emitUpdate(Order order) {\r\n        emitter.emit(OrderUpdatesQuery.class, q -> order.getOrderId()\r\n          .equals(q.getOrderId()), order);\r\n    }\r\n\r\n    // our event and query handlers\r\n}\r\n```","```\r\n@Service\r\npublic class InMemoryOrdersEventHandler implements OrdersEventHandler {\r\n    @EventHandler\r\n    public void on(OrderShippedEvent event) {\r\n        orders.computeIfPresent(event.getOrderId(), (orderId, order) -> {\r\n            order.setOrderShipped();\r\n            emitUpdate(order);\r\n            return order;\r\n        });\r\n    }\r\n\r\n    // fields, query handlers, other event handlers, and our emitUpdate() method\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n</dependency>\r\n```","```\r\npublic class OrderQueryService {\r\n    public Flux<OrderResponse> orderUpdates(String orderId) {\r\n        return subscriptionQuery(new OrderUpdatesQuery(orderId), ResponseTypes.instanceOf(Order.class))\r\n                .map(OrderResponse::new);\r\n    }\r\n\r\n    private <Q, R> Flux<R> subscriptionQuery(Q query, ResponseType<R> resultType) {\r\n        SubscriptionQueryResult<R, R> result = queryGateway.subscriptionQuery(query,\r\n          resultType, resultType);\r\n        return result.initialResult()\r\n          .concatWith(result.updates())\r\n          .doFinally(signal -> result.close());\r\n    }\r\n\r\n    // our other service methods\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nclass OrderQueryServiceIntegrationTest {\r\n    @Test\r\n    void givenOrdersAreUpdated_whenCallingOrderUpdates_thenUpdatesReturned() {\r\n        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\r\n        executor.schedule(this::addIncrementDecrementConfirmAndShip, 100L, TimeUnit.MILLISECONDS);\r\n        try {\r\n            StepVerifier.create(queryService.orderUpdates(orderId))\r\n              .assertNext(order -> assertTrue(order.getProducts().isEmpty()))\r\n              .assertNext(order -> assertEquals(1, order.getProducts().get(productId)))\r\n              .assertNext(order -> assertEquals(2, order.getProducts().get(productId)))\r\n              .assertNext(order -> assertEquals(1, order.getProducts().get(productId)))\r\n              .assertNext(order -> assertEquals(OrderStatusResponse.CONFIRMED, order.getOrderStatus()))\r\n              .assertNext(order -> assertEquals(OrderStatusResponse.SHIPPED, order.getOrderStatus()))\r\n              .thenCancel()\r\n              .verify();\r\n        } finally {\r\n            executor.shutdown();\r\n        }\r\n    }\r\n\r\n    private void addIncrementDecrementConfirmAndShip() {\r\n        sendProductAddedEvent();\r\n        sendProductCountIncrementEvent();\r\n        sendProductCountDecrement();\r\n        sendOrderConfirmedEvent();\r\n        sendOrderShippedEvent();\r\n    }\r\n\r\n    private void sendProductAddedEvent() {\r\n        ProductAddedEvent event = new ProductAddedEvent(orderId, productId);\r\n        eventGateway.publish(event);\r\n    }\r\n\r\n    private void sendProductCountIncrementEvent() {\r\n        ProductCountIncrementedEvent event = new ProductCountIncrementedEvent(orderId, productId);\r\n        eventGateway.publish(event);\r\n    }\r\n\r\n    private void sendProductCountDecrement() {\r\n        ProductCountDecrementedEvent event = new ProductCountDecrementedEvent(orderId, productId);\r\n        eventGateway.publish(event);\r\n    }\r\n\r\n    private void sendOrderConfirmedEvent() {\r\n        OrderConfirmedEvent event = new OrderConfirmedEvent(orderId);\r\n        eventGateway.publish(event);\r\n    }\r\n\r\n    private void sendOrderShippedEvent() {\r\n        OrderShippedEvent event = new OrderShippedEvent(orderId);\r\n        eventGateway.publish(event);\r\n    }\r\n\r\n    // our other tests\r\n}\r\n```"]