["```\r\n@Test\r\npublic void given_binaryLiteral_thenReturnDecimalValue() {\r\n\r\n    byte five = 0b101;\r\n    assertEquals((byte) 5, five);\r\n\r\n    short three = 0b11;\r\n    assertEquals((short) 3, three);\r\n\r\n    int nine = 0B1001;\r\n    assertEquals(9, nine);\r\n\r\n    long twentyNine = 0B11101;\r\n    assertEquals(29, twentyNine);\r\n\r\n    int minusThirtySeven = -0B100101;\r\n    assertEquals(-37, minusThirtySeven);\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void given_decimalNumber_then_convertToBinaryNumber() {\r\n    assertEquals(\"1000\", Integer.toBinaryString(8));\r\n    assertEquals(\"10100\", Integer.toBinaryString(20));\r\n}\r\n```","```\r\npublic Integer convertDecimalToBinary(Integer decimalNumber) {\r\n\r\n    if (decimalNumber == 0) {\r\n        return decimalNumber;\r\n    }\r\n\r\n    StringBuilder binaryNumber = new StringBuilder();\r\n    Integer quotient = decimalNumber;\r\n\r\n    while (quotient > 0) {\r\n        int remainder = quotient % 2;\r\n        binaryNumber.append(remainder);\r\n        quotient /= 2;\r\n    }\r\n\r\n    binaryNumber = binaryNumber.reverse();\r\n    return Integer.valueOf(binaryNumber.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void given_binaryNumber_then_ConvertToDecimalNumber() {\r\n    assertEquals(8, Integer.parseInt(\"1000\", 2));\r\n    assertEquals(20, Integer.parseInt(\"10100\", 2));\r\n}\r\n```","```\r\npublic Integer convertBinaryToDecimal(Integer binaryNumber) {\r\n\r\n    Integer decimalNumber = 0;\r\n    Integer base = 1;\r\n\r\n    while (binaryNumber > 0) {\r\n        int lastDigit = binaryNumber % 10;\r\n        binaryNumber = binaryNumber / 10;\r\n        decimalNumber += lastDigit * base;\r\n        base = base * 2;\r\n    }\r\n    return decimalNumber;\r\n}\r\n```","```\r\npublic Integer addBinaryNumber(Integer firstNum, Integer secondNum) {\r\n    StringBuilder output = new StringBuilder();\r\n    int carry = 0;\r\n    int temp;\r\n    while (firstNum != 0 || secondNum != 0) {\r\n        temp = (firstNum % 10 + secondNum % 10 + carry) % 2;\r\n        output.append(temp);\r\n\r\n        carry = (firstNum % 10 + secondNum % 10 + carry) / 2;\r\n        firstNum = firstNum / 10;\r\n        secondNum = secondNum / 10;\r\n    }\r\n    if (carry != 0) {\r\n        output.append(carry);\r\n    }\r\n    return Integer.valueOf(output.reverse().toString());\r\n}\r\n```","```\r\npublic Integer getOnesComplement(Integer num) {\r\n    StringBuilder onesComplement = new StringBuilder();\r\n    while (num > 0) {\r\n        int lastDigit = num % 10;\r\n        if (lastDigit == 0) {\r\n            onesComplement.append(1);\r\n        } else {\r\n            onesComplement.append(0);\r\n        }\r\n        num = num / 10;\r\n    }\r\n    return Integer.valueOf(onesComplement.reverse().toString());\r\n}\r\n```","```\r\npublic Integer substractBinaryNumber(Integer firstNum, Integer secondNum) {\r\n    int onesComplement = Integer.valueOf(getOnesComplement(secondNum));\r\n    StringBuilder output = new StringBuilder();\r\n    int carry = 0;\r\n    int temp;\r\n    while (firstNum != 0 || onesComplement != 0) {\r\n        temp = (firstNum % 10 + onesComplement % 10 + carry) % 2;\r\n        output.append(temp);\r\n        carry = (firstNum % 10 + onesComplement % 10 + carry) / 2;\r\n\r\n        firstNum = firstNum / 10;\r\n        onesComplement = onesComplement / 10;\r\n    }\r\n    String additionOfFirstNumAndOnesComplement = output.reverse().toString();\r\n    if (carry == 1) {\r\n        return addBinaryNumber(Integer.valueOf(additionOfFirstNumAndOnesComplement), carry);\r\n    } else {\r\n        return getOnesComplement(Integer.valueOf(additionOfFirstNumAndOnesComplement));\r\n    }\r\n}\r\n```"]