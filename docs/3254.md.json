["```\r\n@Test\r\npublic void givenObjectAndType_whenGettingClassObject_thenTwoMethodsHaveTheSameResult() {\r\n    String str = \"I am an object of the String class\";\r\n\r\n    Class fromStrObject = str.getClass();\r\n    Class clazz = String.class;\r\n\r\n    assertSame(fromStrObject, clazz);\r\n} \r\n```","```\r\npublic class Animal {\r\n    protected int numberOfEyes;\r\n}\r\n\r\npublic class Monkey extends Animal {\r\n    // monkey stuff\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassInheritance_whenGettingRuntimeTypeAndStaticType_thenGetDifferentResult() {\r\n    Animal animal = new Monkey();\r\n\r\n    Class runtimeType = animal.getClass();\r\n    Class staticType = Animal.class;\r\n\r\n    assertSame(staticType, runtimeType);\r\n} \r\n```","```\r\njava.lang.AssertionError: ....\r\nExpected :class com.baeldung.getclassobject.Animal\r\nActual   :class com.baeldung.getclassobject.Monkey\r\n```","```\r\nint number = 7;\r\nClass numberClass = number.getClass();\r\n```","```\r\nError: java: int cannot be dereferenced\r\n```","```\r\n@Test\r\npublic void givenPrimitiveType_whenGettingClassObject_thenOnlyStaticTypeWorks() {\r\n    Class intType = int.class;\r\n    assertNotNull(intType);\r\n    assertEquals(\"int\", intType.getName());\r\n    assertTrue(intType.isPrimitive());\r\n} \r\n```","```\r\npublic abstract class SomeAbstractClass {\r\n    // ...\r\n}\r\n\r\ninterface SomeInterface {\r\n   // some methods ...\r\n}\r\n\r\npublic class SomeUtils {\r\n    private SomeUtils() {\r\n        throw new RuntimeException(\"This Util class is not allowed to be instantiated!\");\r\n    }\r\n    // some public static methods...\r\n} \r\n```","```\r\n@Test\r\npublic void givenTypeCannotInstantiate_whenGetTypeStatically_thenGetTypesSuccefully() {\r\n    Class interfaceType = SomeInterface.class;\r\n    Class abstractClassType = SomeAbstractClass.class;\r\n    Class utilClassType = SomeUtils.class;\r\n\r\n    assertNotNull(interfaceType);\r\n    assertTrue(interfaceType.isInterface());\r\n    assertEquals(\"SomeInterface\", interfaceType.getSimpleName());\r\n\r\n    assertNotNull(abstractClassType);\r\n    assertEquals(\"SomeAbstractClass\", abstractClassType.getSimpleName());\r\n\r\n    assertNotNull(utilClassType);\r\n    assertEquals(\"SomeUtils\", utilClassType.getSimpleName());\r\n} \r\n```"]