["```\r\n@Test\r\n@EnabledOnOs({OS.WINDOWS, OS.MAC})\r\npublic void shouldRunBothWindowsAndMac() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@DisabledOnOs(OS.LINUX)\r\npublic void shouldNotRunAtLinux() {\r\n    //...\r\n} \r\n```","```\r\n@Test\r\n@EnabledOnJre({JRE.JAVA_10, JRE.JAVA_11})\r\npublic void shouldOnlyRunOnJava10And11() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@EnabledForJreRange(min = JRE.JAVA_8, max = JRE.JAVA_13)\r\npublic void shouldOnlyRunOnJava8UntilJava13() {\r\n    // this test will only run on Java 8, 9, 10, 11, 12, and 13.\r\n}\r\n```","```\r\n@Test\r\n@DisabledForJreRange(min = JRE.JAVA_14, max = JRE.JAVA_15)\r\npublic void shouldNotBeRunOnJava14AndJava15() {\r\n    // this won't run on Java 14 and 15.\r\n}\r\n```","```\r\n@Test\r\n@DisabledOnJre(JRE.OTHER)\r\npublic void thisTestOnlyRunsWithUpToDateJREs() {\r\n    // this test will only run on Java 8, 9, 10, and 11.\r\n}\r\n```","```\r\n@Test\r\n@EnabledIfSystemProperty(named = \"java.vm.vendor\", matches = \"Oracle.*\")\r\npublic void onlyIfVendorNameStartsWithOracle() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@DisabledIfSystemProperty(named = \"file.separator\", matches = \"[/]\")\r\npublic void disabledIfFileSeperatorIsSlash() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@EnabledIfEnvironmentVariable(named = \"GDMSESSION\", matches = \"ubuntu\")\r\npublic void onlyRunOnUbuntuServer() {\r\n    //...\r\n}\r\n\r\n@Test\r\n@DisabledIfEnvironmentVariable(named = \"LC_TIME\", matches = \".*UTF-8.\")\r\npublic void shouldNotRunWhenTimeIsNotUTF8() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@EnabledIf(\"'FR' == systemProperty.get('user.country')\")\r\npublic void onlyFrenchPeopleWillRunThisMethod() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@DisabledIf(\"java.lang.System.getProperty('os.name').toLowerCase().contains('mac')\")\r\npublic void shouldNotRunOnMacOS() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@EnabledIf(value = {\r\n    \"load('nashorn:mozilla_compat.js')\",\r\n    \"importPackage(java.time)\",\r\n    \"\",\r\n    \"var thisMonth = LocalDate.now().getMonth().name()\",\r\n    \"var february = Month.FEBRUARY.name()\",\r\n    \"thisMonth.equals(february)\"\r\n},\r\n    engine = \"nashorn\",\r\n    reason = \"On {annotation}, with script: {script}, result is: {result}\")\r\npublic void onlyRunsInFebruary() {\r\n    //...\r\n}\r\n```","```\r\n@Test\r\n@DisabledIf(\"systemEnvironment.get('XPC_SERVICE_NAME') != null\" +\r\n        \"&& systemEnvironment.get('XPC_SERVICE_NAME').contains('intellij')\")\r\npublic void notValidForIntelliJ() {\r\n    //this method will not run on intelliJ\r\n}\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Test\r\n@DisabledOnOs({OS.WINDOWS, OS.SOLARIS, OS.OTHER})\r\n@EnabledOnJre({JRE.JAVA_9, JRE.JAVA_10, JRE.JAVA_11})\r\n@interface ThisTestWillOnlyRunAtLinuxAndMacWithJava9Or10Or11 {\r\n}\r\n\r\n@ThisTestWillOnlyRunAtLinuxAndMacWithJava9Or10Or11\r\npublic void someSuperTestMethodHere() {\r\n    // this method will run with Java9, 10, 11 and Linux or macOS.\r\n}\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@DisabledIf(\"Math.random() >= 0.5\")\r\n@interface CoinToss {\r\n}\r\n\r\n@RepeatedTest(2)\r\n@CoinToss\r\npublic void gamble() {\r\n    // this method run run roughly 50% of the time\r\n}\r\n```"]