["```\r\npublic class WordIndexer {\r\n\r\n    public List<Integer> findWord(String textString, String word) {\r\n        List<Integer> indexes = new ArrayList<Integer>();\r\n        String lowerCaseTextString = textString.toLowerCase();\r\n        String lowerCaseWord = word.toLowerCase();\r\n\r\n        int index = 0;\r\n        while(index != -1){\r\n            index = lowerCaseTextString.indexOf(lowerCaseWord, index);\r\n            if (index != -1) {\r\n                indexes.add(index);\r\n                index++;\r\n            }\r\n        }\r\n        return indexes;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenWord_whenSearching_thenFindAllIndexedLocations() {\r\n    String theString;\r\n    WordIndexer wordIndexer = new WordIndexer();\r\n\r\n    theString = \"To be, or not to be: that is the question: \"\r\n      + \"Whether 'tis nobler in the mind to suffer \"\r\n      + \"The slings and arrows of outrageous fortune, \"\r\n      + \"Or to take arms against a sea of troubles, \"\r\n      + \"And by opposing end them? To die: to sleep; \"\r\n      + \"No more; and by a sleep to say we end \"\r\n      + \"The heart-ache and the thousand natural shocks \"\r\n      + \"That flesh is heir to, 'tis a consummation \"\r\n      + \"Devoutly to be wish'd. To die, to sleep; \"\r\n      + \"To sleep: perchance to dream: ay, there's the rub: \"\r\n      + \"For in that sleep of death what dreams may come,\";\r\n\r\n    List<Integer> expectedResult = Arrays.asList(7, 122, 130, 221, 438);\r\n    List<Integer> actualResult = wordIndexer.findWord(theString, \"or\");\r\n    assertEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\nindex of 7, in \"or\"\r\nindex of 122, in \"fortune\"\r\nindex of 130, in \"Or\r\nindex of 221, in \"more\"\r\nindex of 438, in \"For\"\r\n```","```\r\npublic List<Integer> findWordUpgrade(String textString, String word) {\r\n    List<Integer> indexes = new ArrayList<Integer>();\r\n    StringBuilder output = new StringBuilder();\r\n    String lowerCaseTextString = textString.toLowerCase();\r\n    String lowerCaseWord = word.toLowerCase();\r\n    int wordLength = 0;\r\n\r\n    int index = 0;\r\n    while(index != -1){\r\n        index = lowerCaseTextString.indexOf(lowerCaseWord, index + wordLength);  // Slight improvement\r\n        if (index != -1) {\r\n            indexes.add(index);\r\n        }\r\n        wordLength = word.length();\r\n    }\r\n    return indexes;\r\n}\r\n```"]