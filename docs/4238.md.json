["```\r\n@Test\r\npublic void givenDir_whenMkdir_thenDirIsDeleted() {\r\n    File directory = new File(\"dir\");\r\n    assertTrue(directory.mkdir());\r\n    assertTrue(directory.delete());\r\n}\r\n\r\n@Test\r\npublic void givenFile_whenCreateNewFile_thenFileIsDeleted() {\r\n    File file = new File(\"file.txt\");\r\n    try {\r\n        assertTrue(file.createNewFile());\r\n    } catch (IOException e) {\r\n        fail(\"Could not create \" + \"file.txt\");\r\n    }\r\n    assertTrue(file.delete());\r\n}\r\n```","```\r\n@Test\r\npublic void givenFile_whenCreateNewFile_thenMetadataIsCorrect() {\r\n\r\n    String sep = File.separator;\r\n\r\n    File parentDir = makeDir(\"filesDir\");\r\n\r\n    File child = new File(parentDir, \"file.txt\");\r\n    try {\r\n        child.createNewFile();\r\n    } catch (IOException e) {\r\n        fail(\"Could not create \" + \"file.txt\");\r\n    }\r\n\r\n    assertEquals(\"file.txt\", child.getName());\r\n    assertEquals(parentDir.getName(), child.getParentFile().getName());\r\n    assertEquals(parentDir.getPath() + sep + \"file.txt\", child.getPath());\r\n\r\n    removeDir(parentDir);\r\n}\r\n```","```\r\n@Test\r\npublic void givenReadOnlyFile_whenCreateNewFile_thenCantModFile() {\r\n    File parentDir = makeDir(\"readDir\");\r\n\r\n    File child = new File(parentDir, \"file.txt\");\r\n    try {\r\n        child.createNewFile();\r\n    } catch (IOException e) {\r\n        fail(\"Could not create \" + \"file.txt\");\r\n    }\r\n    child.setWritable(false);\r\n    boolean writable = true;\r\n    try (FileOutputStream fos = new FileOutputStream(child)) {\r\n        fos.write(\"Hello World\".getBytes()); // write operation\r\n        fos.flush();\r\n    } catch (IOException e) {\r\n        writable = false;\r\n    } finally {\r\n        removeDir(parentDir);\r\n    }\r\n    assertFalse(writable);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWriteOnlyFile_whenCreateNewFile_thenCantReadFile() {\r\n    File parentDir = makeDir(\"writeDir\");\r\n\r\n    File child = new File(parentDir, \"file.txt\");\r\n    try {\r\n        child.createNewFile();\r\n    } catch (IOException e) {\r\n        fail(\"Could not create \" + \"file.txt\");\r\n    }\r\n    child.setReadable(false);\r\n    boolean readable = true;\r\n    try (FileInputStream fis = new FileInputStream(child)) {\r\n        fis.read(); // read operation\r\n    } catch (IOException e) {\r\n        readable = false;\r\n    } finally {\r\n        removeDir(parentDir);\r\n    }\r\n    assertFalse(readable);\r\n}\r\n```","```\r\n@Test\r\npublic void givenFilesInDir_whenCreateNewFile_thenCanListFiles() {\r\n    File parentDir = makeDir(\"filtersDir\");\r\n\r\n    String[] files = {\"file1.csv\", \"file2.txt\"};\r\n    for (String file : files) {\r\n        try {\r\n            new File(parentDir, file).createNewFile();\r\n        } catch (IOException e) {\r\n            fail(\"Could not create \" + file);\r\n        }\r\n    }\r\n\r\n    //normal listing\r\n    assertEquals(2, parentDir.list().length);\r\n\r\n    //filtered listing\r\n    FilenameFilter csvFilter = (dir, ext) -> ext.endsWith(\".csv\");\r\n    assertEquals(1, parentDir.list(csvFilter).length);\r\n\r\n    removeDir(parentDir);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDir_whenMkdir_thenCanRenameDir() {\r\n\r\n    File source = makeDir(\"source\");\r\n    File destination = makeDir(\"destination\");\r\n    boolean renamed = source.renameTo(destination);\r\n\r\n    if (renamed) {\r\n        assertFalse(source.isDirectory());\r\n        assertTrue(destination.isDirectory());\r\n\r\n        removeDir(destination);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDataWritten_whenWrite_thenFreeSpaceReduces() {\r\n\r\n    String home = System.getProperty(\"user.home\");\r\n    String sep = File.separator;\r\n    File testDir = makeDir(home + sep + \"test\");\r\n    File sample = new File(testDir, \"sample.txt\");\r\n\r\n    long freeSpaceBefore = testDir.getFreeSpace();\r\n    try {\r\n        writeSampleDataToFile(sample);\r\n    } catch (IOException e) {\r\n        fail(\"Could not write to \" + \"sample.txt\");\r\n    }\r\n\r\n    long freeSpaceAfter = testDir.getFreeSpace();\r\n    assertTrue(freeSpaceAfter < freeSpaceBefore);\r\n\r\n    removeDir(testDir);\r\n}\r\n```"]