["```\r\nBasicHttpClientConnectionManager connManager\r\n = new BasicHttpClientConnectionManager();\r\nHttpRoute route = new HttpRoute(new HttpHost(\"www.baeldung.com\", 80));\r\nConnectionRequest connRequest = connManager.requestConnection(route, null);\r\n```","```\r\nHttpClientConnectionManager poolingConnManager\r\n  = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client\r\n = HttpClients.custom().setConnectionManager(poolingConnManager)\r\n .build();\r\nclient.execute(new HttpGet(\"/\"));\r\nassertTrue(poolingConnManager.getTotalStats().getLeased() == 1);\r\n```","```\r\nHttpGet get1 = new HttpGet(\"/\");\r\nHttpGet get2 = new HttpGet(\"http://google.com\"); \r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager(); \r\nCloseableHttpClient client1 \r\n  = HttpClients.custom().setConnectionManager(connManager).build();\r\nCloseableHttpClient client2 \r\n  = HttpClients.custom().setConnectionManager(connManager).build();\r\n\r\nMultiHttpClientConnThread thread1\r\n = new MultiHttpClientConnThread(client1, get1); \r\nMultiHttpClientConnThread thread2\r\n = new MultiHttpClientConnThread(client2, get2); \r\nthread1.start();\r\nthread2.start();\r\nthread1.join();\r\nthread2.join();\r\n```","```\r\npublic class MultiHttpClientConnThread extends Thread {\r\n    private CloseableHttpClient client;\r\n    private HttpGet get;\r\n\r\n    // standard constructors\r\n    public void run(){\r\n        try {\r\n            HttpResponse response = client.execute(get);  \r\n            EntityUtils.consume(response.getEntity());\r\n        } catch (ClientProtocolException ex) {    \r\n        } catch (IOException ex) {\r\n        }\r\n    }\r\n}\r\n```","```\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nconnManager.setMaxTotal(5);\r\nconnManager.setDefaultMaxPerRoute(4);\r\nHttpHost host = new HttpHost(\"www.baeldung.com\", 80);\r\nconnManager.setMaxPerRoute(new HttpRoute(host), 5);\r\n```","```\r\nHttpGet get = new HttpGet(\"http://www.baeldung.com\");\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client = HttpClients.custom().\r\n    setConnectionManager(connManager).build();\r\nMultiHttpClientConnThread thread1 \r\n  = new MultiHttpClientConnThread(client, get);\r\nMultiHttpClientConnThread thread2 \r\n  = new MultiHttpClientConnThread(client, get);\r\nMultiHttpClientConnThread thread3 \r\n  = new MultiHttpClientConnThread(client, get);\r\nthread1.start();\r\nthread2.start();\r\nthread3.start();\r\nthread1.join();\r\nthread2.join();\r\nthread3.join();\r\n```","```\r\n[Thread-0] INFO  o.b.h.c.MultiHttpClientConnThread\r\n - Before - Leased Connections = 0\r\n[Thread-1] INFO  o.b.h.c.MultiHttpClientConnThread\r\n - Before - Leased Connections = 0\r\n[Thread-2] INFO  o.b.h.c.MultiHttpClientConnThread\r\n - Before - Leased Connections = 0\r\n[Thread-2] INFO  o.b.h.c.MultiHttpClientConnThread\r\n - After - Leased Connections = 2\r\n[Thread-0] INFO  o.b.h.c.MultiHttpClientConnThread\r\n - After - Leased Connections = 2\r\n```","```\r\nConnectionKeepAliveStrategy myStrategy = new ConnectionKeepAliveStrategy() {\r\n    @Override\r\n    public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\r\n        HeaderElementIterator it = new BasicHeaderElementIterator\r\n            (response.headerIterator(HTTP.CONN_KEEP_ALIVE));\r\n        while (it.hasNext()) {\r\n            HeaderElement he = it.nextElement();\r\n            String param = he.getName();\r\n            String value = he.getValue();\r\n            if (value != null && param.equalsIgnoreCase\r\n               (\"timeout\")) {\r\n                return Long.parseLong(value) * 1000;\r\n            }\r\n        }\r\n        return 5 * 1000;\r\n    }\r\n};\r\n```","```\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client = HttpClients.custom()\r\n  .setKeepAliveStrategy(myStrategy)\r\n  .setConnectionManager(connManager)\r\n  .build();\r\n```","```\r\nBasicHttpClientConnectionManager basicConnManager = \r\n    new BasicHttpClientConnectionManager();\r\nHttpClientContext context = HttpClientContext.create();\r\n\r\n// low level\r\nHttpRoute route = new HttpRoute(new HttpHost(\"www.baeldung.com\", 80));\r\nConnectionRequest connRequest = basicConnManager.requestConnection(route, null);\r\nHttpClientConnection conn = connRequest.get(10, TimeUnit.SECONDS);\r\nbasicConnManager.connect(conn, route, 1000, context);\r\nbasicConnManager.routeComplete(conn, route, context);\r\n\r\nHttpRequestExecutor exeRequest = new HttpRequestExecutor();\r\ncontext.setTargetHost((new HttpHost(\"www.baeldung.com\", 80)));\r\nHttpGet get = new HttpGet(\"http://www.baeldung.com\");\r\nexeRequest.execute(get, conn, context);\r\n\r\nbasicConnManager.releaseConnection(conn, null, 1, TimeUnit.SECONDS);\r\n\r\n// high level\r\nCloseableHttpClient client = HttpClients.custom()\r\n  .setConnectionManager(basicConnManager)\r\n  .build();\r\nclient.execute(get);\r\n```","```\r\njava.lang.IllegalStateException: Connection is still allocated\r\n  at o.a.h.u.Asserts.check(Asserts.java:34)\r\n  at o.a.h.i.c.BasicHttpClientConnectionManager.getConnection\r\n    (BasicHttpClientConnectionManager.java:248)\r\n```","```\r\nHttpGet get = new HttpGet(\"http://echo.200please.com\");\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nconnManager.setDefaultMaxPerRoute(5);\r\nconnManager.setMaxTotal(5);\r\nCloseableHttpClient client = HttpClients.custom()\r\n  .setConnectionManager(connManager)\r\n  .build();\r\nMultiHttpClientConnThread[] threads \r\n  = new  MultiHttpClientConnThread[10];\r\nfor(int i = 0; i < threads.length; i++){\r\n    threads[i] = new MultiHttpClientConnThread(client, get, connManager);\r\n}\r\nfor (MultiHttpClientConnThread thread: threads) {\r\n     thread.start();\r\n}\r\nfor (MultiHttpClientConnThread thread: threads) {\r\n     thread.join(1000);     \r\n}\r\n```","```\r\nHttpRoute route = new HttpRoute(new HttpHost(\"www.baeldung.com\", 80));\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nconnManager.setSocketConfig(route.getTargetHost(),SocketConfig.custom().\r\n    setSoTimeout(5000).build());\r\n```","```\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client = HttpClients.custom().setDefaultRequestConfig(\r\n    RequestConfig.custom().setStaleConnectionCheckEnabled(true).build()\r\n).setConnectionManager(connManager).build();\r\n```","```\r\nPoolingHttpClientConnectionManager connManager \r\n  = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client = HttpClients.custom()\r\n  .setConnectionManager(connManager).build();\r\nIdleConnectionMonitorThread staleMonitor\r\n = new IdleConnectionMonitorThread(connManager);\r\nstaleMonitor.start();\r\nstaleMonitor.join(1000);\r\n```","```\r\npublic class IdleConnectionMonitorThread extends Thread {\r\n    private final HttpClientConnectionManager connMgr;\r\n    private volatile boolean shutdown;\r\n\r\n    public IdleConnectionMonitorThread(\r\n      PoolingHttpClientConnectionManager connMgr) {\r\n        super();\r\n        this.connMgr = connMgr;\r\n    }\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            while (!shutdown) {\r\n                synchronized (this) {\r\n                    wait(1000);\r\n                    connMgr.closeExpiredConnections();\r\n                    connMgr.closeIdleConnections(30, TimeUnit.SECONDS);\r\n                }\r\n            }\r\n        } catch (InterruptedException ex) {\r\n            shutdown();\r\n        }\r\n    }\r\n    public void shutdown() {\r\n        shutdown = true;\r\n        synchronized (this) {\r\n            notifyAll();\r\n        }\r\n    }\r\n}\r\n```","```\r\nconnManager = new PoolingHttpClientConnectionManager();\r\nCloseableHttpClient client = HttpClients.custom()\r\n  .setConnectionManager(connManager).build();\r\nHttpGet get = new HttpGet(\"http://google.com\");\r\nCloseableHttpResponse response = client.execute(get);\r\n\r\nEntityUtils.consume(response.getEntity());\r\nresponse.close();\r\nclient.close();\r\nconnManager.close(); \r\n```"]