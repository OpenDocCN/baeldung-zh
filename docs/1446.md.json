["```\r\nString[] chunks = token.split(\"\\\\.\");\r\n```","```\r\nBase64.Decoder decoder = Base64.getUrlDecoder();\r\n\r\nString header = new String(decoder.decode(chunks[0]));\r\nString payload = new String(decoder.decode(chunks[1]));\r\n```","```\r\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkJhZWxkdW5nIFVzZXIiLCJpYXQiOjE1MTYyMzkwMjJ9.qH7Zj_m3kY69kxhaQXTa-ivIpytKXXjZc1ZSmapZnGE\r\n```","```\r\n{\"alg\":\"HS256\",\"typ\":\"JWT\"}{\"sub\":\"1234567890\",\"name\":\"Baeldung User\",\"iat\":1516239022}\r\n```","```\r\n<dependency>\r\n    <groupId>io.jsonwebtoken</groupId>\r\n    <artifactId>jjwt</artifactId>\r\n    <version>0.7.0</version>\r\n</dependency>\r\n```","```\r\nSignatureAlgorithm sa = HS256;\r\nSecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(), sa.getJcaName());\r\n```","```\r\nString tokenWithoutSignature = chunks[0] + \".\" + chunks[1];\r\nString signature = chunks[2];\r\n```","```\r\nDefaultJwtSignatureValidator validator = new DefaultJwtSignatureValidator(sa, secretKeySpec);\r\n\r\nif (!validator.isValid(tokenWithoutSignature, signature)) {\r\n    throw new Exception(\"Could not verify JWT token integrity!\");\r\n}\r\n```"]