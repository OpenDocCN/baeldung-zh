["```\r\n<dependency>\r\n    <groupId>com.auth0</groupId>\r\n    <artifactId>mvc-auth-commons</artifactId>\r\n    <version>1.2.0</version>\r\n</dependency>\r\n```","```\r\ncompile 'com.auth0:mvc-auth-commons:1.2.0'\r\n```","```\r\ncom.auth0.domain: dev-example.auth0.com\r\ncom.auth0.clientId: {clientId}\r\ncom.auth0.clientSecret: {clientSecret}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class AuthConfig {\r\n    @Value(value = \"${com.auth0.domain}\")\r\n    private String domain;\r\n\r\n    @Value(value = \"${com.auth0.clientId}\")\r\n    private String clientId;\r\n\r\n    @Value(value = \"${com.auth0.clientSecret}\")\r\n    private String clientSecret;\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.csrf()\r\n          .disable()\r\n          .authorizeRequests()\r\n          .antMatchers(\"/callback\", \"/login\", \"/\").permitAll()\r\n          .anyRequest().authenticated()\r\n          .and()\r\n          .formLogin()\r\n          .loginPage(\"/login\")\r\n          .and()\r\n          .logout().logoutSuccessHandler(logoutSuccessHandler()).permitAll();\r\n        return http.build();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic AuthenticationController authenticationController() throws UnsupportedEncodingException {\r\n    JwkProvider jwkProvider = new JwkProviderBuilder(domain).build();\r\n    return AuthenticationController.newBuilder(domain, clientId, clientSecret)\r\n      .withJwkProvider(jwkProvider)\r\n      .build();\r\n}\r\n```","```\r\n@Controller\r\npublic class AuthController {\r\n    @Autowired\r\n    private AuthConfig config;\r\n\r\n    @Autowired \r\n    private AuthenticationController authenticationController;\r\n}\r\n```","```\r\n@GetMapping(value = \"/login\")\r\nprotected void login(HttpServletRequest request, HttpServletResponse response) {\r\n    String redirectUri = \"http://localhost:8080/callback\";\r\n    String authorizeUrl = authenticationController.buildAuthorizeUrl(request, response, redirectUri)\r\n      .withScope(\"openid email\")\r\n      .build();\r\n    response.sendRedirect(authorizeUrl);\r\n}\r\n```","```\r\n@GetMapping(value=\"/callback\")\r\npublic void callback(HttpServletRequest request, HttpServletResponse response) {\r\n    Tokens tokens = authenticationController.handle(request, response);\r\n\r\n    DecodedJWT jwt = JWT.decode(tokens.getIdToken());\r\n    TestingAuthenticationToken authToken2 = new TestingAuthenticationToken(jwt.getSubject(),\r\n      jwt.getToken());\r\n    authToken2.setAuthenticated(true);\r\n\r\n    SecurityContextHolder.getContext().setAuthentication(authToken2);\r\n    response.sendRedirect(config.getContextPath(request) + \"/\"); \r\n}\r\n```","```\r\n@Controller\r\npublic class HomeController {\r\n    @GetMapping(value = \"/\")\r\n    @ResponseBody\r\n    public String home(final Authentication authentication) {\r\n        TestingAuthenticationToken token = (TestingAuthenticationToken) authentication;\r\n        DecodedJWT jwt = JWT.decode(token.getCredentials().toString());\r\n        String email = jwt.getClaims().get(\"email\").asString();\r\n        return \"Welcome, \" + email + \"!\";\r\n    }\r\n}\r\n```","```\r\nmvn spring-boot:run\r\n```","```\r\n@Controller\r\npublic class LogoutController implements LogoutSuccessHandler {\r\n    @Autowired\r\n    private AuthConfig config;\r\n\r\n    @Override\r\n    public void onLogoutSuccess(HttpServletRequest req, HttpServletResponse res, \r\n      Authentication authentication) {\r\n        if (req.getSession() != null) {\r\n            req.getSession().invalidate();\r\n        }\r\n        String returnTo = \"http://localhost:8080/\";\r\n        String logoutUrl = \"https://dev-example.auth0.com/v2/logout?client_id=\" +\r\n          config.getClientId() + \"&returnTo;=\" +returnTo;\r\n        res.sendRedirect(logoutUrl);\r\n    }\r\n}\r\n```","```\r\npublic String getManagementApiToken() {\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.setContentType(MediaType.APPLICATION_JSON);\r\n\r\n    JSONObject requestBody = new JSONObject();\r\n    requestBody.put(\"client_id\", \"auth0ManagementAppClientId\");\r\n    requestBody.put(\"client_secret\", \"auth0ManagementAppClientSecret\");\r\n    requestBody.put(\"audience\", \"https://dev-example.auth0.com/api/v2/\");\r\n    requestBody.put(\"grant_type\", \"client_credentials\"); \r\n\r\n    HttpEntity<String> request = new HttpEntity<String>(requestBody.toString(), headers);\r\n\r\n    RestTemplate restTemplate = new RestTemplate();\r\n    HashMap<String, String> result = restTemplate\r\n      .postForObject(\"https://dev-example.auth0.com/oauth/token\", request, HashMap.class);\r\n\r\n    return result.get(\"access_token\");\r\n}\r\n```","```\r\n@Controller\r\npublic class UserController {\r\n    @GetMapping(value=\"/users\")\r\n    @ResponseBody\r\n    public ResponseEntity<String> users(HttpServletRequest request, HttpServletResponse response) {\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.APPLICATION_JSON);\r\n        headers.set(\"Authorization\", \"Bearer \" + getManagementApiToken());\r\n\r\n        HttpEntity<String> entity = new HttpEntity<String>(headers);\r\n\r\n        RestTemplate restTemplate = new RestTemplate();\r\n        ResponseEntity<String> result = restTemplate\r\n          .exchange(\"https://dev-example.auth0.com/api/v2/users\", HttpMethod.GET, entity, String.class);\r\n        return result;\r\n    }\r\n}\r\n```","```\r\n[{\r\n    \"created_at\": \"2020-05-05T14:38:18.955Z\",\r\n    \"email\": \"[[email protected]](/web/20221126215056/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"email_verified\": true,\r\n    \"identities\": [\r\n        {\r\n            \"user_id\": \"5eb17a5a1cc1ac0c1487c37f78758\",\r\n            \"provider\": \"auth0\",\r\n            \"connection\": \"Username-Password-Authentication\",\r\n            \"isSocial\": false\r\n        }\r\n    ],\r\n    \"name\": \"[[email protected]](/web/20221126215056/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"nickname\": \"ansh\",\r\n    \"logins_count\": 64\r\n    // ...\r\n}]\r\n```","```\r\n@GetMapping(value = \"/createUser\")\r\n@ResponseBody\r\npublic ResponseEntity<String> createUser(HttpServletResponse response) {\r\n    JSONObject request = new JSONObject();\r\n    request.put(\"email\", \"[[email protected]](/web/20221126215056/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n    request.put(\"given_name\", \"Norman\");\r\n    request.put(\"family_name\", \"Lewis\");\r\n    request.put(\"connection\", \"Username-Password-Authentication\");\r\n    request.put(\"password\", \"Pa33w0rd\");\r\n\r\n    // ...\r\n    ResponseEntity<String> result = restTemplate\r\n      .postForEntity(\"https://dev-example.auth0.com/api/v2/users\", request.toString(), String.class);\r\n    return result;\r\n}\r\n```","```\r\n{\r\n    \"created_at\": \"2020-05-10T12:30:15.343Z\",\r\n    \"email\": \"[[email protected]](/web/20221126215056/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"email_verified\": false,\r\n    \"family_name\": \"Lewis\",\r\n    \"given_name\": \"Norman\",\r\n    \"identities\": [\r\n        {\r\n            \"connection\": \"Username-Password-Authentication\",\r\n            \"user_id\": \"5eb7f3d76b69bc0c120a8901576\",\r\n            \"provider\": \"auth0\",\r\n            \"isSocial\": false\r\n        }\r\n    ],\r\n    \"name\": \"[[email protected]](/web/20221126215056/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"nickname\": \"norman.lewis\",\r\n    // ...\r\n}\r\n```"]