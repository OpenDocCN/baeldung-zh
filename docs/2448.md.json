["```\r\nclass SomeImplementation implements SomeInterface {\r\n    // ...\r\n} \r\n```","```\r\npublic class SomeInterfaceFactory {\r\n    public SomeInterface newInstance() {\r\n        return new SomeImplementation();\r\n    }\r\n}\r\n```","```\r\ninterface FileSystem {\r\n    // ...\r\n} \r\n```","```\r\nclass LocalFileSystem implements FileSystem {\r\n    // ...\r\n} \r\n```","```\r\nclass NetworkFileSystem implements FileSystem {\r\n    // ...\r\n} \r\n```","```\r\ninterface FileSystemFactory {\r\n    FileSystem newInstance();\r\n} \r\n```","```\r\nclass LocalFileSystemFactory implements FileSystemFactory {\r\n    // ...\r\n} \r\n```","```\r\nclass NetworkFileSystemFactory implements FileSystemFactory {\r\n    // ...\r\n} \r\n```","```\r\nclass Example {\r\n    static FileSystemFactory getFactory(String fs) {\r\n        FileSystemFactory factory;\r\n        if (\"local\".equals(fs)) {\r\n            factory = new LocalFileSystemFactory();\r\n        else if (\"network\".equals(fs)) {\r\n            factory = new NetworkFileSystemFactory();\r\n        }\r\n        return factory;\r\n    }\r\n}\r\n```","```\r\nclass CarBuilder {\r\n    private String make = \"Ford\";\r\n    private String model = \"Fiesta\";\r\n    private int doors = 4;\r\n    private String color = \"White\";\r\n\r\n    public Car build() {\r\n        return new Car(make, model, doors, color);\r\n    }\r\n}\r\n```","```\r\nStream.Builder<Integer> builder = Stream.builder<Integer>();\r\nbuilder.add(1);\r\nbuilder.add(2);\r\nif (condition) {\r\n    builder.add(3);\r\n    builder.add(4);\r\n}\r\nbuilder.add(5);\r\nStream<Integer> stream = builder.build();\r\n```","```\r\nclass LazyPi {\r\n    private Supplier<Double> calculator;\r\n    private Double value;\r\n\r\n    public synchronized Double getValue() {\r\n        if (value == null) {\r\n            value = calculator.get();\r\n        }\r\n        return value;\r\n    }\r\n}\r\n```","```\r\nStream.generate(new BaeldungArticlesLoader())\r\n  .filter(article -> article.getTags().contains(\"java-streams\"))\r\n  .map(article -> article.getTitle())\r\n  .findFirst();\r\n```","```\r\nExecutorService pool = Executors.newFixedThreadPool(10);\r\n\r\npool.execute(new SomeTask()); // Runs on a thread from the pool\r\npool.execute(new AnotherTask()); // Runs on a thread from the pool\r\n```","```\r\npublic class Prototype implements Cloneable {\r\n    private Map<String, String> contents = new HashMap<>();\r\n\r\n    public void setValue(String key, String value) {\r\n        // ...\r\n    }\r\n    public String getValue(String key) {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public Prototype clone() {\r\n        Prototype result = new Prototype();\r\n        this.contents.entrySet().forEach(entry -> result.setValue(entry.getKey(), entry.getValue()));\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class Singleton {\r\n    private static Singleton instance = null;\r\n\r\n    public static Singleton getInstance() {\r\n        if (instance == null) {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n}\r\n```"]