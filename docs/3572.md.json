["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webmvc</artifactId>\r\n    <version>5.2.1.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.2.1.RELEASE</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>javax.servlet-api</artifactId>\r\n    <version>4.0.1</version>\r\n</dependency>\r\n<dependency>\r\n     <groupId>javax.servlet.jsp</groupId>\r\n     <artifactId>javax.servlet.jsp-api</artifactId>\r\n     <version>2.3.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>jstl</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n```","```\r\nstyleSheet=themes/black.css\r\nbackground=black\r\n```","```\r\nstyleSheet=themes/white.css\r\nbackground=white\r\n```","```\r\n@Override \r\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n    registry.addResourceHandler(\"/themes/**\").addResourceLocations(\"classpath:/themes/\");\r\n}\r\n```","```\r\n@Bean\r\npublic ResourceBundleThemeSource resourceBundleThemeSource() {\r\n    return new ResourceBundleThemeSource();\r\n}\r\n```","```\r\n@Bean\r\npublic ThemeResolver themeResolver() {\r\n    CookieThemeResolver themeResolver = new CookieThemeResolver();\r\n    themeResolver.setDefaultThemeName(\"light\");\r\n    return themeResolver;\r\n}\r\n```","```\r\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\"%>\r\n```","```\r\n<link rel=\"stylesheet\" href=\"<spring:theme code='styleSheet'/>\"/>\r\n```","```\r\n<body bgcolor=\"<spring:theme code='background'/>\">\r\n```","```\r\n<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\"%>\r\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\r\n<html>\r\n    <head>\r\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n        <link rel=\"stylesheet\" href=\"<spring:theme code='styleSheet'/>\"/>\r\n        <title>Themed Application</title>\r\n    </head>\r\n    <body>\r\n        <header>\r\n            <h1>Themed Application</h1>\r\n            <hr />\r\n        </header>\r\n        <section>\r\n            <h2>Spring MVC Theme Demo</h2>\r\n            <form action=\"<c:url value='/'/>\" method=\"POST\" name=\"themeChangeForm\" id=\"themeChangeForm\">\r\n                <div>\r\n                    <h4>\r\n                        Change Theme\r\n                    </h4>\r\n                </div>\r\n                <select id=\"theme\" name=\"theme\" onChange=\"submitForm()\">\r\n                    <option value=\"\">Reset</option>\r\n                    <option value=\"light\">Light</option>\r\n                    <option value=\"dark\">Dark</option>\r\n                </select>\r\n            </form>\r\n        </section>\r\n\r\n        <script type=\"text/javascript\">\r\n            function submitForm() {\r\n                document.themeChangeForm.submit();\r\n            }\r\n        </script>\r\n    </body>\r\n</html>\r\n```","```\r\n@Override\r\npublic void addInterceptors(InterceptorRegistry registry) {\r\n    registry.addInterceptor(themeChangeInterceptor());\r\n}\r\n\r\n@Bean\r\npublic ThemeChangeInterceptor themeChangeInterceptor() {\r\n    ThemeChangeInterceptor interceptor = new ThemeChangeInterceptor();\r\n    interceptor.setParamName(\"theme\");\r\n    return interceptor;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-web</artifactId>\r\n    <version>5.2.1.RELEASE</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n    <version>5.2.1.RELEASE</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-taglibs</artifactId>\r\n    <version>5.2.1.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-jpa</artifactId>\r\n    <version>2.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.9.Final</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.5.0</version>\r\n</dependency> \r\n```","```\r\n@Entity\r\n@Table(name = \"preferences\")\r\npublic class UserPreference {\r\n    @Id\r\n    private String username;\r\n\r\n    private String theme;\r\n}\r\n```","```\r\n@Override\r\npublic String resolveThemeName(HttpServletRequest request) {\r\n    String themeName = findThemeFromRequest(request)\r\n      .orElse(findUserPreferredTheme().orElse(getDefaultThemeName()));\r\n    request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, themeName);\r\n    return themeName;\r\n}\r\n\r\nprivate Optional<String> findUserPreferredTheme() {\r\n    Authentication authentication = SecurityContextHolder.getContext()\r\n            .getAuthentication();\r\n    UserPreference userPreference = getUserPreference(authentication).orElse(new UserPreference());\r\n    return Optional.ofNullable(userPreference.getTheme());\r\n}\r\n\r\nprivate Optional<String> findThemeFromRequest(HttpServletRequest request) {\r\n    return Optional.ofNullable((String) request.getAttribute(THEME_REQUEST_ATTRIBUTE_NAME));\r\n}\r\n\r\nprivate Optional<UserPreference> getUserPreference(Authentication authentication) {\r\n    return isAuthenticated(authentication) ? \r\n      userPreferenceRepository.findById(((User) authentication.getPrincipal()).getUsername()) : \r\n      Optional.empty();\r\n}\r\n```","```\r\n@Override\r\npublic void setThemeName(HttpServletRequest request, HttpServletResponse response, String theme) {\r\n    Authentication authentication = SecurityContextHolder.getContext()\r\n        .getAuthentication();\r\n    if (isAuthenticated(authentication)) {\r\n        request.setAttribute(THEME_REQUEST_ATTRIBUTE_NAME, theme);\r\n        UserPreference userPreference = getUserPreference(authentication).orElse(new UserPreference());\r\n        userPreference.setUsername(((User) authentication.getPrincipal()).getUsername());\r\n        userPreference.setTheme(StringUtils.hasText(theme) ? theme : null);\r\n        userPreferenceRepository.save(userPreference);\r\n    }\r\n}\r\n```","```\r\n@Bean \r\npublic ThemeResolver themeResolver() { \r\n    return new UserPreferenceThemeResolver();\r\n}\r\n```"]