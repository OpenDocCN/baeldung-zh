["```\r\n<dependency>\r\n    <groupId>org.redisson</groupId>\r\n    <artifactId>redisson</artifactId>\r\n    <version>3.13.1</version>\r\n</dependency>\r\n```","```\r\nRedissonClient client = Redisson.create();\r\n```","```\r\nConfig config = new Config();\r\nconfig.useSingleServer()\r\n  .setAddress(\"redis://127.0.0.1:6379\");\r\n\r\nRedissonClient client = Redisson.create(config);\r\n```","```\r\nConfig config = Config.fromJSON(new File(\"singleNodeConfig.json\"));  \r\nRedissonClient client = Redisson.create(config);\r\n```","```\r\n{\r\n    \"singleServerConfig\": {\r\n        \"idleConnectionTimeout\": 10000,\r\n        \"connectTimeout\": 10000,\r\n        \"timeout\": 3000,\r\n        \"retryAttempts\": 3,\r\n        \"retryInterval\": 1500,\r\n        \"password\": null,\r\n        \"subscriptionsPerConnection\": 5,\r\n        \"clientName\": null,\r\n        \"address\": \"redis://127.0.0.1:6379\",\r\n        \"subscriptionConnectionMinimumIdleSize\": 1,\r\n        \"subscriptionConnectionPoolSize\": 50,\r\n        \"connectionMinimumIdleSize\": 10,\r\n        \"connectionPoolSize\": 64,\r\n        \"database\": 0,\r\n        \"dnsMonitoringInterval\": 5000\r\n    },\r\n    \"threads\": 0,\r\n    \"nettyThreads\": 0,\r\n    \"codec\": null\r\n}\r\n```","```\r\nsingleServerConfig:\r\n    idleConnectionTimeout: 10000\r\n    connectTimeout: 10000\r\n    timeout: 3000\r\n    retryAttempts: 3\r\n    retryInterval: 1500\r\n    password: null\r\n    subscriptionsPerConnection: 5\r\n    clientName: null\r\n    address: \"redis://127.0.0.1:6379\"\r\n    subscriptionConnectionMinimumIdleSize: 1\r\n    subscriptionConnectionPoolSize: 50\r\n    connectionMinimumIdleSize: 10\r\n    connectionPoolSize: 64\r\n    database: 0\r\n    dnsMonitoringInterval: 5000\r\nthreads: 0\r\nnettyThreads: 0\r\ncodec: !<org.redisson.codec.JsonJacksonCodec> {} \r\n```","```\r\nConfig config = new Config();\r\n// ... we configure multiple settings here in Java\r\nString jsonFormat = config.toJSON();\r\nString yamlFormat = config.toYAML();\r\n```","```\r\nRedissonClient client = Redisson.create();\r\nRAtomicLong myLong = client.getAtomicLong('myLong'); \r\n```","```\r\nRFuture<Boolean> isSet = myLong.compareAndSetAsync(6, 27);\r\n```","```\r\nisSet.handle((result, exception) -> {\r\n    // handle the result or exception here.\r\n});\r\n```","```\r\nRedissonReactiveClient client = Redisson.createReactive();\r\nRAtomicLongReactive myLong = client.getAtomicLong(\"myLong\");\r\n\r\nPublisher<Boolean> isSetPublisher = myLong.compareAndSet(5, 28);\r\n```","```\r\nRKeys keys = client.getKeys();\r\n```","```\r\nIterable<String> allKeys = keys.getKeys();\r\n```","```\r\nIterable<String> keysByPattern = keys.getKeysByPattern('key*')\r\n```","```\r\nRBucket<Ledger> bucket = client.getBucket(\"ledger\");\r\nbucket.set(new Ledger());\r\nLedger ledger = bucket.get();\r\n```","```\r\nRAtomicLong atomicLong = client.getAtomicLong(\"myAtomicLong\");\r\natomicLong.set(5);\r\natomicLong.incrementAndGet();\r\n```","```\r\nRTopic subscribeTopic = client.getTopic(\"baeldung\");\r\nsubscribeTopic.addListener(CustomMessage.class,\r\n  (channel, customMessage) -> future.complete(customMessage.getMessage()));\r\n```","```\r\nRTopic publishTopic = client.getTopic(\"baeldung\");\r\nlong clientsReceivedMessage\r\n  = publishTopic.publish(new CustomMessage(\"This is a message\"));\r\n```","```\r\nRMap<String, Ledger> map = client.getMap(\"ledger\");\r\nLedger newLedger = map.put(\"123\", new Ledger());map\r\n```","```\r\nRSet<Ledger> ledgerSet = client.getSet(\"ledgerSet\");\r\nledgerSet.add(new Ledger());\r\n```","```\r\nRList<Ledger> ledgerList = client.getList(\"ledgerList\");\r\nledgerList.add(new Ledger());\r\n```","```\r\nRLock lock = client.getLock(\"lock\");\r\nlock.lock();\r\n// perform some long operations...\r\nlock.unlock();\r\n```","```\r\nRLock lock1 = clientInstance1.getLock(\"lock1\");\r\nRLock lock2 = clientInstance2.getLock(\"lock2\");\r\nRLock lock3 = clientInstance3.getLock(\"lock3\");\r\n\r\nRedissonMultiLock lock = new RedissonMultiLock(lock1, lock2, lock3);\r\nlock.lock();\r\n// perform long running operation...\r\nlock.unlock();\r\n```","```\r\nRRemoteService remoteService = client.getRemoteService();\r\nLedgerServiceImpl ledgerServiceImpl = new LedgerServiceImpl();\r\n\r\nremoteService.register(LedgerServiceInterface.class, ledgerServiceImpl);\r\n```","```\r\nRRemoteService remoteService = client.getRemoteService();\r\nLedgerServiceInterface ledgerService\r\n  = remoteService.get(LedgerServiceInterface.class);\r\n\r\nList<String> entries = ledgerService.getEntries(10);\r\n```","```\r\n@REntity\r\npublic class LedgerLiveObject {\r\n    @RId\r\n    private String name;\r\n\r\n    // getters and setters...\r\n}\r\n```","```\r\nRLiveObjectService service = client.getLiveObjectService();\r\n\r\nLedgerLiveObject ledger = new LedgerLiveObject();\r\nledger.setName(\"ledger1\");\r\n\r\nledger = service.persist(ledger);\r\n```","```\r\nLedgerLiveObject returnLedger\r\n  = service.get(LedgerLiveObject.class, \"ledger1\");\r\n```","```\r\nRBatch batch = client.createBatch();\r\nbatch.getMap(\"ledgerMap\").fastPutAsync(\"1\", \"2\");\r\nbatch.getMap(\"ledgerMap\").putAsync(\"2\", \"5\");\r\n\r\nBatchResult<?> batchResult = batch.execute();\r\n```","```\r\nclient.getBucket(\"foo\").set(\"bar\");\r\nString result = client.getScript().eval(Mode.READ_ONLY,\r\n  \"return redis.call('get', 'foo')\", RScript.ReturnType.VALUE);\r\n```","```\r\nRedisClientConfig redisClientConfig = new RedisClientConfig();\r\nredisClientConfig.setAddress(\"localhost\", 6379);\r\n\r\nRedisClient client = RedisClient.create(redisClientConfig);\r\n\r\nRedisConnection conn = client.connect();\r\nconn.sync(StringCodec.INSTANCE, RedisCommands.SET, \"test\", 0);\r\n\r\nconn.closeAsync();\r\nclient.shutdown();\r\n```"]