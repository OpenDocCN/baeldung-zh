["```\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>testcontainers</artifactId>\r\n    <version>1.15.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>cassandra</artifactId>\r\n    <version>1.15.3</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.testcontainers</groupId>\r\n    <artifactId>junit-jupiter</artifactId>\r\n    <version>1.15.3</version>\r\n    <scope>test</scope>\r\n<dependency>\r\n```","```\r\n@SpringBootTest\r\n@Testcontainers\r\nclass CassandraSimpleIntegrationTest {}\r\n```","```\r\n@Container\r\npublic static final CassandraContainer cassandra \r\n  = (CassandraContainer) new CassandraContainer(\"cassandra:3.11.2\").withExposedPorts(9042); \r\n```","```\r\n@Test\r\nvoid givenCassandraContainer_whenSpringContextIsBootstrapped_thenContainerIsRunningWithNoExceptions() {\r\n    assertThat(cassandra.isRunning()).isTrue();\r\n}\r\n```","```\r\n@BeforeAll\r\nstatic void setupCassandraConnectionProperties() {\r\n    System.setProperty(\"spring.data.cassandra.keyspace-name\", KEYSPACE_NAME);\r\n    System.setProperty(\"spring.data.cassandra.contact-points\", cassandra.getContainerIpAddress());\r\n    System.setProperty(\"spring.data.cassandra.port\", String.valueOf(cassandra.getMappedPort(9042)));\r\n}\r\n```","```\r\nprivate static void createKeyspace(Cluster cluster) {\r\n    try (Session session = cluster.connect()) {\r\n        session.execute(\"CREATE KEYSPACE IF NOT EXISTS \" + KEYSPACE_NAME +\r\n          \" WITH replication = \\n\" +\r\n          \"{'class':'SimpleStrategy','replication_factor':'1'};\");\r\n    }\r\n}\r\n```","```\r\n@Table\r\npublic class Car {\r\n\r\n    @PrimaryKey\r\n    private UUID id;\r\n    private String make;\r\n    private String model;\r\n    private int year;\r\n\r\n    public Car(UUID id, String make, String model, int year) {\r\n        this.id = id;\r\n        this.make = make;\r\n        this.model = model;\r\n        this.year = year;\r\n    }\r\n\r\n    //getters, setters, equals and hashcode\r\n}\r\n```","```\r\n@SpringBootApplication\r\n@EnableCassandraRepositories(basePackages = \"org.baeldung.springcassandra.repository\")\r\npublic class SpringCassandraApplication {}\r\n```","```\r\n@Repository\r\npublic interface CarRepository extends CassandraRepository<Car, UUID> {}\r\n```","```\r\nspring.data.cassandra.local-datacenter=datacenter1\r\nspring.data.cassandra.schema-action=create_if_not_exists\r\n```","```\r\n@Test\r\nvoid givenValidCarRecord_whenSavingIt_thenRecordIsSaved() {\r\n    UUID carId = UUIDs.timeBased();\r\n    Car newCar = new Car(carId, \"Nissan\", \"Qashqai\", 2018);\r\n\r\n    carRepository.save(newCar);\r\n\r\n    List<Car> savedCars = carRepository.findAllById(List.of(carId));\r\n    assertThat(savedCars.get(0)).isEqualTo(newCar);\r\n}\r\n```","```\r\n@Test\r\nvoid givenExistingCarRecord_whenUpdatingIt_thenRecordIsUpdated() {\r\n    UUID carId = UUIDs.timeBased();\r\n    Car existingCar = carRepository.save(new Car(carId, \"Nissan\", \"Qashqai\", 2018));\r\n\r\n    existingCar.setModel(\"X-Trail\");\r\n    carRepository.save(existingCar);\r\n\r\n    List<Car> savedCars = carRepository.findAllById(List.of(carId));\r\n    assertThat(savedCars.get(0).getModel()).isEqualTo(\"X-Trail\");\r\n}\r\n```","```\r\n@Test\r\nvoid givenExistingCarRecord_whenDeletingIt_thenRecordIsDeleted() {\r\n    UUID carId = UUIDs.timeBased();\r\n    Car existingCar = carRepository.save(new Car(carId, \"Nissan\", \"Qashqai\", 2018));\r\n\r\n    carRepository.delete(existingCar);\r\n\r\n    List<Car> savedCars = carRepository.findAllById(List.of(carId));\r\n    assertThat(savedCars.isEmpty()).isTrue();\r\n}\r\n```","```\r\n@Testcontainers\r\n@SpringBootTest\r\nclass CassandraNestedIntegrationTest {\r\n\r\n    private static final String KEYSPACE_NAME = \"test\";\r\n\r\n    @Container\r\n    private static final CassandraContainer cassandra \r\n      = (CassandraContainer) new CassandraContainer(\"cassandra:3.11.2\").withExposedPorts(9042);\r\n\r\n    // Set connection properties and create keyspace\r\n\r\n    @Nested\r\n    class ApplicationContextIntegrationTest {\r\n        @Test\r\n        void givenCassandraContainer_whenSpringContextIsBootstrapped_thenContainerIsRunningWithNoExceptions() {\r\n            assertThat(cassandra.isRunning()).isTrue();\r\n        }\r\n    }\r\n\r\n    @Nested\r\n    class CarRepositoryIntegrationTest {\r\n\r\n        @Autowired\r\n        private CarRepository carRepository;\r\n\r\n        @Test\r\n        void givenValidCarRecord_whenSavingIt_thenRecordIsSaved() {\r\n            UUID carId = UUIDs.timeBased();\r\n            Car newCar = new Car(carId, \"Nissan\", \"Qashqai\", 2018);\r\n\r\n            carRepository.save(newCar);\r\n\r\n            List<Car> savedCars = carRepository.findAllById(List.of(carId));\r\n            assertThat(savedCars.get(0)).isEqualTo(newCar);\r\n        }\r\n\r\n        // Tests for update and delete\r\n    }\r\n}\r\n```"]