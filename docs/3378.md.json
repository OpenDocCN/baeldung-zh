["```\r\nInteger[] integers = (Integer[])(new int[]{0,1,2,3,4});\r\n```","```\r\nint[] input = new int[] { 0, 1, 2, 3, 4 };\r\nInteger[] expected = new Integer[] { 0, 1, 2, 3, 4 };\r\n\r\nInteger[] output = new Integer[input.length];\r\nfor (int i = 0; i < input.length; i++) {\r\n    output[i] = input[i];\r\n}\r\n\r\nassertArrayEquals(expected, output);\r\n```","```\r\nInteger[] input = new Integer[] { 0, 1, 2, 3, 4 };\r\nint[] expected = new int[] { 0, 1, 2, 3, 4 };\r\n\r\nint[] output = new int[input.length];\r\nfor (int i = 0; i < input.length; i++) {\r\n    output[i] = input[i];\r\n}\r\n\r\nassertArrayEquals(expected, output);\r\n```","```\r\nint[] input = new int[] { 0, 1, 2, 3, 4 };\r\nInteger[] expected = new Integer[] { 0, 1, 2, 3, 4 };\r\n\r\nInteger[] output = Arrays.stream(input)\r\n  .boxed()\r\n  .toArray(Integer[]::new);\r\n\r\nassertArrayEquals(expected, output);\r\n```","```\r\nInteger[] input = new Integer[] { 0, 1, 2, 3, 4 };\r\nint[] expected = new int[] { 0, 1, 2, 3, 4 };\r\n\r\nint[] output = Arrays.stream(input)\r\n  .mapToInt(Integer::intValue)\r\n  .toArray();\r\n\r\nassertArrayEquals(expected, output);\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nint[] input = new int[] { 0, 1, 2, 3, 4 };\r\nInteger[] expected = new Integer[] { 0, 1, 2, 3, 4 };\r\n\r\nInteger[] output = ArrayUtils.toObject(input);\r\n\r\nassertArrayEquals(expected, output);\r\n```","```\r\nInteger[] input = new Integer[] { 0, 1, 2, 3, 4 };\r\nint[] expected = new int[] { 0, 1, 2, 3, 4 };\r\n\r\nint[] output = ArrayUtils.toPrimitive(input);\r\n\r\nassertArrayEquals(expected, output);\r\n```"]