["```\r\npublic class Animal {\r\n    private int id;\r\n    private String name;\r\n\r\n    //  constructor/getters/setters\r\n}\r\n```","```\r\npublic Map<Integer, Animal> convertListBeforeJava8(List<Animal> list) {\r\n    Map<Integer, Animal> map = new HashMap<>();\r\n    for (Animal animal : list) {\r\n        map.put(animal.getId(), animal);\r\n    }\r\n    return map;\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertBeforeJava8_thenReturnMapWithTheSameElements() {\r\n    Map<Integer, Animal> map = convertListService\r\n      .convertListBeforeJava8(list);\r\n\r\n    assertThat(\r\n      map.values(), \r\n      containsInAnyOrder(list.toArray()));\r\n}\r\n```","```\r\n public Map<Integer, Animal> convertListAfterJava8(List<Animal> list) {\r\n    Map<Integer, Animal> map = list.stream()\r\n      .collect(Collectors.toMap(Animal::getId, Function.identity()));\r\n    return map;\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertAfterJava8_thenReturnMapWithTheSameElements() {\r\n    Map<Integer, Animal> map = convertListService.convertListAfterJava8(list);\r\n\r\n    assertThat(\r\n      map.values(), \r\n      containsInAnyOrder(list.toArray()));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic Map<Integer, Animal> convertListWithGuava(List<Animal> list) {\r\n    Map<Integer, Animal> map = Maps\r\n      .uniqueIndex(list, Animal::getId);\r\n    return map;\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertWithGuava_thenReturnMapWithTheSameElements() {\r\n    Map<Integer, Animal> map = convertListService\r\n      .convertListWithGuava(list);\r\n\r\n    assertThat(\r\n      map.values(), \r\n      containsInAnyOrder(list.toArray()));\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.4</version>\r\n</dependency>\r\n```","```\r\npublic Map<Integer, Animal> convertListWithApacheCommons2(List<Animal> list) {\r\n    Map<Integer, Animal> map = new HashMap<>();\r\n    MapUtils.populateMap(map, list, Animal::getId);\r\n    return map;\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertWithApacheCommons2_thenReturnMapWithTheSameElements() {\r\n    Map<Integer, Animal> map = convertListService\r\n      .convertListWithApacheCommons2(list);\r\n\r\n    assertThat(\r\n      map.values(), \r\n      containsInAnyOrder(list.toArray()));\r\n}\r\n```","```\r\n@Before\r\npublic void init() {\r\n\r\n    this.duplicatedIdList = new ArrayList<>();\r\n\r\n    Animal cat = new Animal(1, \"Cat\");\r\n    duplicatedIdList.add(cat);\r\n    Animal dog = new Animal(2, \"Dog\");\r\n    duplicatedIdList.add(dog);\r\n    Animal pig = new Animal(3, \"Pig\");\r\n    duplicatedIdList.add(pig);\r\n    Animal cow = new Animal(4, \"Cow\");\r\n    duplicatedIdList.add(cow);\r\n    Animal goat= new Animal(4, \"Goat\");\r\n    duplicatedIdList.add(goat);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertBeforeJava8_thenReturnMapWithRewrittenElement() {\r\n\r\n    Map<Integer, Animal> map = convertListService\r\n      .convertListBeforeJava8(duplicatedIdList);\r\n\r\n    assertThat(map.values(), hasSize(4));\r\n    assertThat(map.values(), hasItem(duplicatedIdList.get(4)));\r\n}\r\n\r\n@Test\r\npublic void whenConvertWithApacheCommons_thenReturnMapWithRewrittenElement() {\r\n\r\n    Map<Integer, Animal> map = convertListService\r\n      .convertListWithApacheCommons(duplicatedIdList);\r\n\r\n    assertThat(map.values(), hasSize(4));\r\n    assertThat(map.values(), hasItem(duplicatedIdList.get(4)));\r\n}\r\n```","```\r\n@Test(expected = IllegalStateException.class)\r\npublic void givenADupIdList_whenConvertAfterJava8_thenException() {\r\n\r\n    convertListService.convertListAfterJava8(duplicatedIdList);\r\n}\r\n\r\n@Test(expected = IllegalArgumentException.class)\r\npublic void givenADupIdList_whenConvertWithGuava_thenException() {\r\n\r\n    convertListService.convertListWithGuava(duplicatedIdList);\r\n}\r\n```"]