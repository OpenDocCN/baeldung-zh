["```\r\npublic class User {\r\n\r\n    private String name;\r\n    private String surname;\r\n    private LocalDate birthDate;\r\n    private Integer age;\r\n    private Boolean canDriveACar = false;\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\nV call() throws Exception;\r\n```","```\r\npublic class AgeCalculatorCallable implements Callable<Integer> {\r\n\r\n    private final LocalDate birthDate;\r\n\r\n    @Override\r\n    public Integer call() throws Exception {\r\n        return Period.between(birthDate, LocalDate.now()).getYears();\r\n    }\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic User execute(User user) {\r\n    ExecutorService executorService = Executors.newCachedThreadPool();\r\n    try {\r\n        Future<Integer> ageFuture = executorService.submit(new AgeCalculatorCallable(user.getBirthDate()));\r\n        user.setAge(age.get());\r\n    } catch (ExecutionException | InterruptedException e) {\r\n        throw new RuntimeException(e.getCause());\r\n    }\r\n    return user;\r\n}\r\n```","```\r\nFuture<Integer> ageFuture = executorService.submit(\r\n  () -> Period.between(user.getBirthDate(), LocalDate.now()).getYears());\r\n```","```\r\npublic class CarDriverValidatorCallable implements Callable<Boolean> {\r\n\r\n    private final Integer age;\r\n\r\n    @Override\r\n    public Boolean call() throws Exception {\r\n        return age > 18;\r\n    }\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic User execute(User user) {\r\n    ExecutorService executorService = Executors.newCachedThreadPool();\r\n    try {\r\n        Future<Integer> ageFuture = executorService.submit(new AgeCalculatorCallable(user.getBirthDate()));\r\n        Integer age = ageFuture.get();\r\n        Future<Boolean> canDriveACarFuture = executorService.submit(new CarDriverValidatorCallable(age));\r\n        Boolean canDriveACar = canDriveACarFuture.get();\r\n        user.setAge(age);\r\n        user.setCanDriveACar(canDriveACar);\r\n    } catch (ExecutionException | InterruptedException e) {\r\n        throw new RuntimeException(e.getCause());\r\n    }\r\n    return user;\r\n}\r\n```","```\r\nT get();\r\n```","```\r\npublic User execute(User user) {\r\n    ExecutorService executorService = Executors.newCachedThreadPool();\r\n    CompletableFuture<Integer> ageFut = CompletableFuture.supplyAsync(() -> Period.between(user.getBirthDate(), LocalDate.now())\r\n      .getYears(), executorService)\r\n      .exceptionally(throwable -> {throw new RuntimeException(throwable);});\r\n    user.setAge(ageFut.join());\r\n    return user;\r\n}\r\n```","```\r\npublic User execute(User user) {\r\n    ExecutorService executorService = Executors.newCachedThreadPool();\r\n    CompletableFuture<Integer> ageFut = CompletableFuture.supplyAsync(() -> Period.between(user.getBirthDate(), LocalDate.now())\r\n      .getYears(), executorService);\r\n    CompletableFuture<Boolean> canDriveACarFut = ageFut.thenComposeAsync(age -> CompletableFuture.supplyAsync(() -> age > 18, executorService))\r\n      .exceptionally((ex) -> false);\r\n    user.setAge(ageFut.join());\r\n    user.setCanDriveACar(canDriveACarFut.join());\r\n    return user;\r\n}\r\n```"]