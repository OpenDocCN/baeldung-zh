["```\r\nTime\tCumulative Downloads\tDownloads/min\r\n----------------------------------------------\r\nT       497                     0  \r\nT+1     624                     127\r\nT+2     676                     52\r\n...     \r\nT+14    19347                   17390\r\nT+15    19427                   80\r\n...  \r\nT+22    27195                   7350\r\n...  \r\nT+41    41321                   11885\r\n...   \r\nT+60    43395                   40\r\n```","```\r\nprivate static boolean isPrimeNumber(long number) {\r\n    for (long i = 2; i <= number / 2; i++) {\r\n        if (number % i == 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.spf4j</groupId>\r\n    <artifactId>spf4j-core</artifactId>\r\n    <version>8.6.10</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.spf4j</groupId>\r\n    <artifactId>spf4j-aspects</artifactId>\r\n    <version>8.6.10</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.spf4j</groupId>\r\n    <artifactId>spf4j-ui</artifactId>\r\n    <version>8.6.10</version>\r\n</dependency>\r\n```","```\r\npublic static void initialize() {\r\n  String tsDbFile = System.getProperty(\"user.dir\") + File.separator + \"spf4j-performance-monitoring.tsdb2\";\r\n  String tsTextFile = System.getProperty(\"user.dir\") + File.separator + \"spf4j-performance-monitoring.txt\";\r\n  LOGGER.info(\"\\nTime Series DB (TSDB) : {}\\nTime Series text file : {}\", tsDbFile, tsTextFile);\r\n  System.setProperty(\"spf4j.perf.ms.config\", \"[[email protected]](/web/20221205151829/https://www.baeldung.com/cdn-cgi/l/email-protection)\" + tsDbFile + \",\" + \"[[email protected]](/web/20221205151829/https://www.baeldung.com/cdn-cgi/l/email-protection)\" + tsTextFile);\r\n}\r\n```","```\r\npublic static MeasurementRecorder getMeasurementRecorder(Object forWhat) {\r\n    String unitOfMeasurement = \"ms\";\r\n    int sampleTimeMillis = 1_000;\r\n    int factor = 10;\r\n    int lowerMagnitude = 0;\r\n    int higherMagnitude = 4;\r\n    int quantasPerMagnitude = 10;\r\n\r\n    return RecorderFactory.createScalableQuantizedRecorder(\r\n      forWhat, unitOfMeasurement, sampleTimeMillis, factor, lowerMagnitude, \r\n      higherMagnitude, quantasPerMagnitude);\r\n}\r\n```","```\r\npublic static final class RecorderSourceForIsPrimeNumber extends RecorderSourceInstance {\r\n    public static final MeasurementRecorderSource INSTANCE;\r\n    static {\r\n        Object forWhat = App.class + \" isPrimeNumber\";\r\n        String unitOfMeasurement = \"ms\";\r\n        int sampleTimeMillis = 1_000;\r\n        int factor = 10;\r\n        int lowerMagnitude = 0;\r\n        int higherMagnitude = 4;\r\n        int quantasPerMagnitude = 10;\r\n        INSTANCE = RecorderFactory.createScalableQuantizedRecorderSource(\r\n          forWhat, unitOfMeasurement, sampleTimeMillis, factor, \r\n          lowerMagnitude, higherMagnitude, quantasPerMagnitude);\r\n    }\r\n}\r\n```","```\r\npublic class Spf4jConfig {\r\n    public static void initialize() {\r\n        //...\r\n    }\r\n\r\n    public static MeasurementRecorder getMeasurementRecorder(Object forWhat) {\r\n        //...\r\n    }\r\n\r\n    public static final class RecorderSourceForIsPrimeNumber extends RecorderSourceInstance {\r\n        //...\r\n    }\r\n}\r\n```","```\r\n<aspectj>\r\n    <aspects>\r\n        <aspect name=\"org.spf4j.perf.aspects.PerformanceMonitorAspect\" />\r\n    </aspects>\r\n    <weaver options=\"-verbose\">\r\n        <include within=\"com..*\" />\r\n        <include within=\"org.spf4j.perf.aspects.PerformanceMonitorAspect\" />\r\n    </weaver>\r\n</aspectj>\r\n```","```\r\nSpf4jConfig.initialize();\r\nMeasurementRecorder measurementRecorder = Spf4jConfig\r\n  .getMeasurementRecorder(App.class + \" isPrimeNumber\");\r\nRandom random = new Random();\r\nfor (int i = 0; i < 100; i++) {\r\n    long numberToCheck = random.nextInt(999_999_999 - 100_000_000 + 1) + 100_000_000;\r\n    long startTime = System.currentTimeMillis();\r\n    boolean isPrime = isPrimeNumber(numberToCheck);\r\n    measurementRecorder.record(System.currentTimeMillis() - startTime);\r\n    LOGGER.info(\"{}. {} is prime? {}\", i + 1, numberToCheck, isPrime);\r\n}\r\n```","```\r\nTime Series DB (TSDB) : E:\\Projects\\spf4j-core-app\\spf4j-performance-monitoring.tsdb2\r\nTime Series text file : E:\\Projects\\spf4j-core-app\\spf4j-performance-monitoring.txt\r\n1\\. 406704834 is prime? false\r\n...\r\n9\\. 507639059 is prime? true\r\n...\r\n20\\. 557385397 is prime? true\r\n...\r\n26\\. 152042771 is prime? true\r\n...\r\n100\\. 841159884 is prime? false\r\n```","```\r\njava -jar target/dependency-jars/spf4j-ui-8.6.9.jar\r\n```","```\r\nSpf4jConfig.initialize();\r\nRandom random = new Random();\r\nfor (int i = 0; i < 50; i++) {\r\n    long numberToCheck = random.nextInt(999_999_999 - 100_000_000 + 1) + 100_000_000;\r\n    isPrimeNumber(numberToCheck);\r\n}\r\n```","```\r\n@PerformanceMonitor(\r\n  warnThresholdMillis = 1,\r\n  errorThresholdMillis = 100, \r\n  recorderSource = Spf4jConfig.RecorderSourceForIsPrimeNumber.class)\r\nprivate static boolean isPrimeNumber(long number) {\r\n    //...\r\n}\r\n```","```\r\njava -javaagent:target/dependency-jars/aspectjweaver-1.8.13.jar -jar target/spf4j-aspects-app.jar\r\n```","```\r\nTime Series DB (TSDB) : E:\\Projects\\spf4j-aspects-app\\spf4j-performance-monitoring.tsdb2\r\nTime Series text file : E:\\Projects\\spf4j-aspects-app\\spf4j-performance-monitoring.txt\r\n\r\n[DEBUG] Execution time 0 ms for execution(App.isPrimeNumber(..)), arguments [555031768]\r\n...\r\n[ERROR] Execution time  2826 ms for execution(App.isPrimeNumber(..)) exceeds error threshold of 100 ms, arguments [464032213]\r\n...\r\n```"]