["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n    <version>3.1.4.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <version>3.1.4.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nFlux<Integer> evenNumbers = Flux\r\n  .range(min, max)\r\n  .filter(x -> x % 2 == 0); // i.e. 2, 4\r\n\r\nFlux<Integer> oddNumbers = Flux\r\n  .range(min, max)\r\n  .filter(x -> x % 2 > 0);  // ie. 1, 3, 5\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenConcatIsInvoked_thenConcat() {\r\n    Flux<Integer> fluxOfIntegers = Flux.concat(\r\n      evenNumbers, \r\n      oddNumbers);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(2)\r\n      .expectNext(4)\r\n      .expectNext(1)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenConcatWithIsInvoked_thenConcatWith() {\r\n    Flux<Integer> fluxOfIntegers = evenNumbers.concatWith(oddNumbers);\r\n\r\n    // same stepVerifier as in the concat example above\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenCombineLatestIsInvoked_thenCombineLatest() {\r\n    Flux<Integer> fluxOfIntegers = Flux.combineLatest(\r\n      evenNumbers, \r\n      oddNumbers, \r\n      (a, b) -> a + b);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(5) // 4 + 1\r\n      .expectNext(7) // 4 + 3\r\n      .expectNext(9) // 4 + 5\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenMergeIsInvoked_thenMerge() {\r\n    Flux<Integer> fluxOfIntegers = Flux.merge(\r\n      evenNumbers, \r\n      oddNumbers);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(2)\r\n      .expectNext(4)\r\n      .expectNext(1)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenMergeWithDelayedElementsIsInvoked_thenMergeWithDelayedElements() {\r\n    Flux<Integer> fluxOfIntegers = Flux.merge(\r\n      evenNumbers.delayElements(Duration.ofMillis(500L)), \r\n      oddNumbers.delayElements(Duration.ofMillis(300L)));\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(1)\r\n      .expectNext(2)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectNext(4)\r\n      .expectComplete()\r\n      .verify();\r\n} \r\n```","```\r\n@Test\r\npublic void testMergeSequential() {\r\n    Flux<Integer> fluxOfIntegers = Flux.mergeSequential(\r\n      evenNumbers, \r\n      oddNumbers);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(2)\r\n      .expectNext(4)\r\n      .expectNext(1)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenMergeWithDelayedElementsIsInvoked_thenMergeWithDelayedElements() {\r\n    Flux<Integer> fluxOfIntegers = Flux.mergeDelayError(1, \r\n      evenNumbers.delayElements(Duration.ofMillis(500L)), \r\n      oddNumbers.delayElements(Duration.ofMillis(300L)));\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(1)\r\n      .expectNext(2)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectNext(4)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenMergeWithIsInvoked_thenMergeWith() {\r\n    Flux<Integer> fluxOfIntegers = evenNumbers.mergeWith(oddNumbers);\r\n\r\n    // same StepVerifier as in \"3.4\\. Merge\"\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(2)\r\n      .expectNext(4)\r\n      .expectNext(1)\r\n      .expectNext(3)\r\n      .expectNext(5)\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenZipIsInvoked_thenZip() {\r\n    Flux<Integer> fluxOfIntegers = Flux.zip(\r\n      evenNumbers, \r\n      oddNumbers, \r\n      (a, b) -> a + b);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(3) // 2 + 1\r\n      .expectNext(7) // 4 + 3\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\n@Test\r\npublic void givenFluxes_whenZipWithIsInvoked_thenZipWith() {\r\n    Flux<Integer> fluxOfIntegers = evenNumbers\r\n     .zipWith(oddNumbers, (a, b) -> a * b);\r\n\r\n    StepVerifier.create(fluxOfIntegers)\r\n      .expectNext(2)  // 2 * 1\r\n      .expectNext(12) // 4 * 3\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```"]