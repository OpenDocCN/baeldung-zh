["```\r\npublic interface Runnable {\r\n    public void run();\r\n}\r\n```","```\r\npublic class EventLoggingTask implements  Runnable{\r\n    private Logger logger\r\n      = LoggerFactory.getLogger(EventLoggingTask.class);\r\n\r\n    @Override\r\n    public void run() {\r\n        logger.info(\"Message\");\r\n    }\r\n}\r\n```","```\r\npublic void executeTask() {\r\n    executorService = Executors.newSingleThreadExecutor();\r\n    Future future = executorService.submit(new EventLoggingTask());\r\n    executorService.shutdown();\r\n}\r\n```","```\r\npublic interface Callable<V> {\r\n    V call() throws Exception;\r\n}\r\n```","```\r\npublic class FactorialTask implements Callable<Integer> {\r\n    int number;\r\n\r\n    // standard constructors\r\n\r\n    public Integer call() throws InvalidParamaterException {\r\n        int fact = 1;\r\n        // ...\r\n        for(int count = number; count > 1; count--) {\r\n            fact = fact * count;\r\n        }\r\n\r\n        return fact;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenTaskSubmitted_ThenFutureResultObtained(){\r\n    FactorialTask task = new FactorialTask(5);\r\n    Future<Integer> future = executorService.submit(task);\r\n\r\n    assertEquals(120, future.get().intValue());\r\n}\r\n```","```\r\npublic class FactorialTask implements Callable<Integer> {\r\n    // ...\r\n    public Integer call() throws InvalidParamaterException {\r\n\r\n        if(number < 0) {\r\n            throw new InvalidParamaterException(\"Number should be positive\");\r\n        }\r\n    // ...\r\n    }\r\n}\r\n```","```\r\n@Test(expected = ExecutionException.class)\r\npublic void whenException_ThenCallableThrowsIt() {\r\n\r\n    FactorialCallableTask task = new FactorialCallableTask(-5);\r\n    Future<Integer> future = executorService.submit(task);\r\n    Integer result = future.get().intValue();\r\n}\r\n```","```\r\n@Test\r\npublic void whenException_ThenCallableDoesntThrowsItIfGetIsNotCalled(){\r\n    FactorialCallableTask task = new FactorialCallableTask(-5);\r\n    Future<Integer> future = executorService.submit(task);\r\n\r\n    assertEquals(false, future.isDone());\r\n}\r\n```"]