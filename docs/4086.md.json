["```\r\n@Test(expected = ClassCastException.class)\r\npublic void test_Class_Cast_Exception() {\r\n    TimeZone tz = TimeZone.getTimeZone(\"GMT+9:00\");\r\n    Locale loc = new Locale(\"ja\", \"JP\", \"JP\");\r\n    Calendar calendar = Calendar.getInstance(loc);\r\n    GregorianCalendar gc = (GregorianCalendar) calendar;\r\n}\r\n```","```\r\nnew GregorianCalendar();\r\n```","```\r\nnew GregorianCalendar(2018, 6, 27, 16, 16, 47);\r\n```","```\r\nnew GregorianCalendar(TimeZone.getTimeZone(\"GMT+5:30\"));\r\n```","```\r\nnew GregorianCalendar(new Locale(\"en\", \"IN\"));\r\n```","```\r\nnew GregorianCalendar(TimeZone.getTimeZone(\"GMT+5:30\"), new Locale(\"en\", \"IN\"));\r\n```","```\r\n@Test\r\npublic void test_Calendar_Return_Type_Valid() {\r\n    Calendar calendar = Calendar.getInstance();\r\n    assert (\"gregory\".equals(calendar.getCalendarType()));\r\n}\r\n```","```\r\n@Test\r\npublic void test_whenAddOneDay_thenMonthIsChanged() {\r\n    int finalDay1 = 1;\r\n    int finalMonthJul = 6; \r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 5, 30);\r\n    calendarExpected.add(Calendar.DATE, 1);\r\n    System.out.println(calendarExpected.getTime());\r\n\r\n    assertEquals(calendarExpected.get(Calendar.DATE), finalDay1);\r\n    assertEquals(calendarExpected.get(Calendar.MONTH), finalMonthJul);\r\n}\r\n```","```\r\n@Test\r\npublic void test_whenSubtractOneDay_thenMonthIsChanged() {\r\n    int finalDay31 = 31;\r\n    int finalMonthMay = 4; \r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 5, 1);\r\n    calendarExpected.add(Calendar.DATE, -1);\r\n\r\n    assertEquals(calendarExpected.get(Calendar.DATE), finalDay31);\r\n    assertEquals(calendarExpected.get(Calendar.MONTH), finalMonthMay);\r\n}\r\n```","```\r\n@Test\r\npublic void test_whenRollUpOneMonth_thenYearIsUnchanged() {\r\n    int rolledUpMonthJuly = 7, orginalYear2018 = 2018;\r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 6, 28);\r\n    calendarExpected.roll(Calendar.MONTH, 1);\r\n\r\n    assertEquals(calendarExpected.get(Calendar.MONTH), rolledUpMonthJuly);\r\n    assertEquals(calendarExpected.get(Calendar.YEAR), orginalYear2018);\r\n}\r\n```","```\r\n@Test\r\npublic void test_whenRollDownOneMonth_thenYearIsUnchanged() {\r\n    int rolledDownMonthJune = 5, orginalYear2018 = 2018;\r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 6, 28);\r\n    calendarExpected.roll(Calendar.MONTH, -1);\r\n\r\n    assertEquals(calendarExpected.get(Calendar.MONTH), rolledDownMonthJune);\r\n    assertEquals(calendarExpected.get(Calendar.YEAR), orginalYear2018);\r\n}\r\n```","```\r\n@Test\r\npublic void test_setMonth() {\r\n    GregorianCalendarExample calendarDemo = new GregorianCalendarExample();\r\n    GregorianCalendar calendarActual = new GregorianCalendar(2018, 6, 28);\r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 6, 28);\r\n    calendarExpected.set(Calendar.MONTH, 3);\r\n    Date expectedDate = calendarExpected.getTime();\r\n\r\n    assertEquals(expectedDate, calendarDemo.setMonth(calendarActual, 3));\r\n}\r\n```","```\r\n@Test\r\npublic void test_toXMLGregorianCalendar() throws Exception {\r\n    GregorianCalendarExample calendarDemo = new GregorianCalendarExample();\r\n    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();\r\n    GregorianCalendar calendarActual = new GregorianCalendar(2018, 6, 28);\r\n    GregorianCalendar calendarExpected = new GregorianCalendar(2018, 6, 28);\r\n    XMLGregorianCalendar expectedXMLGregorianCalendar = datatypeFactory\r\n      .newXMLGregorianCalendar(calendarExpected);\r\n\r\n    assertEquals(\r\n      expectedXMLGregorianCalendar, \r\n      alendarDemo.toXMLGregorianCalendar(calendarActual));\r\n}\r\n```","```\r\n@Test\r\npublic void test_toDate() throws DatatypeConfigurationException {\r\n    GregorianCalendar calendarActual = new GregorianCalendar(2018, 6, 28);\r\n    DatatypeFactory datatypeFactory = DatatypeFactory.newInstance();\r\n    XMLGregorianCalendar expectedXMLGregorianCalendar = datatypeFactory\r\n      .newXMLGregorianCalendar(calendarActual);\r\n    expectedXMLGregorianCalendar.toGregorianCalendar().getTime();\r\n    assertEquals(\r\n      calendarActual.getTime(), \r\n      expectedXMLGregorianCalendar.toGregorianCalendar().getTime() );\r\n}\r\n```","```\r\n@Test\r\npublic void test_Compare_Date_FirstDate_Greater_SecondDate() {\r\n    GregorianCalendar firstDate = new GregorianCalendar(2018, 6, 28);\r\n    GregorianCalendar secondDate = new GregorianCalendar(2018, 5, 28);\r\n    assertTrue(1 == firstDate.compareTo(secondDate));\r\n}\r\n\r\n@Test\r\npublic void test_Compare_Date_FirstDate_Smaller_SecondDate() {\r\n    GregorianCalendar firstDate = new GregorianCalendar(2018, 5, 28);\r\n    GregorianCalendar secondDate = new GregorianCalendar(2018, 6, 28);\r\n    assertTrue(-1 == firstDate.compareTo(secondDate));\r\n}\r\n\r\n@Test\r\npublic void test_Compare_Date_Both_Dates_Equal() {\r\n    GregorianCalendar firstDate = new GregorianCalendar(2018, 6, 28);\r\n    GregorianCalendar secondDate = new GregorianCalendar(2018, 6, 28);\r\n    assertTrue(0 == firstDate.compareTo(secondDate));\r\n}\r\n```","```\r\n@Test\r\npublic void test_dateFormatdMMMuuuu() {\r\n    String expectedDate = new GregorianCalendar(2018, 6, 28).toZonedDateTime()\r\n      .format(DateTimeFormatter.ofPattern(\"d MMM uuuu\"));\r\n    assertEquals(\"28 Jul 2018\", expectedDate);\r\n}\r\n```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(30 == calendar.getActualMaximum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(1 == calendar.getActualMinimum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(1 == calendar.getGreatestMinimum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(28 == calendar.getLeastMaximum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(31 == calendar.getMaximum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(1 == calendar.getMinimum(calendar.DAY_OF_MONTH));\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(2018 == calendar.getWeekYear());\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(52 == calendar.getWeeksInWeekYear());\r\n    ```","```\r\n    GregorianCalendar calendar = new GregorianCalendar(2018 , 5, 28);\r\n    assertTrue(false == calendar.isLeapYear(calendar.YEAR));\r\n    ```"]