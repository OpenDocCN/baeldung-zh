["```\r\nusername, user_id, transaction_date, transaction_amount\r\ndevendra, 1234, 31/10/2015, 10000\r\njohn, 2134, 3/12/2015, 12321\r\nrobin, 2134, 2/02/2015, 23411\r\n, 2536, 3/10/2019, 100\r\nmike, 9876, 5/11/2018, -500\r\n, 3425, 10/10/2017, 9999\r\n```","```\r\n@Bean\r\npublic Step skippingStep(\r\n  ItemProcessor<Transaction, Transaction> processor,\r\n  ItemWriter<Transaction> writer) throws ParseException {\r\n    return stepBuilderFactory\r\n      .get(\"skippingStep\")\r\n      .<Transaction, Transaction>chunk(10)\r\n      .reader(itemReader(invalidInputCsv))\r\n      .processor(processor)\r\n      .writer(writer)\r\n      .faultTolerant()\r\n      .skipLimit(2)\r\n      .skip(MissingUsernameException.class)\r\n      .skip(NegativeAmountException.class)\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic Step skippingStep(\r\n  ItemProcessor<Transaction, Transaction> processor,\r\n  ItemWriter<Transaction> writer) throws ParseException {\r\n    return stepBuilderFactory\r\n      .get(\"skippingStep\")\r\n      .<Transaction, Transaction>chunk(10)\r\n      .reader(itemReader(invalidInputCsv))\r\n      .processor(processor)\r\n      .writer(writer)\r\n      .faultTolerant()\r\n      .skipLimit(2)\r\n      .skip(Exception.class)\r\n      .noSkip(SAXException.class)\r\n      .build();\r\n}\r\n```","```\r\npublic class CustomSkipPolicy implements SkipPolicy {\r\n\r\n    private static final int MAX_SKIP_COUNT = 2;\r\n    private static final int INVALID_TX_AMOUNT_LIMIT = -1000;\r\n\r\n    @Override\r\n    public boolean shouldSkip(Throwable throwable, int skipCount) \r\n      throws SkipLimitExceededException {\r\n\r\n        if (throwable instanceof MissingUsernameException && skipCount < MAX_SKIP_COUNT) {\r\n            return true;\r\n        }\r\n\r\n        if (throwable instanceof NegativeAmountException && skipCount < MAX_SKIP_COUNT ) {\r\n            NegativeAmountException ex = (NegativeAmountException) throwable;\r\n            if(ex.getAmount() < INVALID_TX_AMOUNT_LIMIT) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n```","```\r\n @Bean\r\n    public Step skippingStep(\r\n      ItemProcessor<Transaction, Transaction> processor,\r\n      ItemWriter<Transaction> writer) throws ParseException {\r\n        return stepBuilderFactory\r\n          .get(\"skippingStep\")\r\n          .<Transaction, Transaction>chunk(10)\r\n          .reader(itemReader(invalidInputCsv))\r\n          .processor(processor)\r\n          .writer(writer)\r\n          .faultTolerant()\r\n          .skipPolicy(new CustomSkipPolicy())\r\n          .build();\r\n    }\r\n```"]