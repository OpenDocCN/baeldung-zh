["```\r\n<dependency>\r\n    <groupId>org.apache.beam</groupId>\r\n    <artifactId>beam-sdks-java-core</artifactId>\r\n    <version>${beam.version}</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.beam</groupId>\r\n    <artifactId>beam-runners-direct-java</artifactId>\r\n    <version>${beam.version}</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nPipelineOptions options = PipelineOptionsFactory.create();\r\nPipeline p = Pipeline.create(options);\r\n```","```\r\nPCollection<KV<String, Long>> wordCount = p\r\n    .apply(\"(1) Read all lines\", \r\n      TextIO.read().from(inputFilePath))\r\n    .apply(\"(2) Flatmap to a list of words\", \r\n      FlatMapElements.into(TypeDescriptors.strings())\r\n      .via(line -> Arrays.asList(line.split(\"\\\\s\"))))\r\n    .apply(\"(3) Lowercase all\", \r\n      MapElements.into(TypeDescriptors.strings())\r\n      .via(word -> word.toLowerCase()))\r\n    .apply(\"(4) Trim punctuations\", \r\n      MapElements.into(TypeDescriptors.strings())\r\n      .via(word -> trim(word)))\r\n    .apply(\"(5) Filter stopwords\", \r\n      Filter.by(word -> !isStopWord(word)))\r\n    .apply(\"(6) Count words\", \r\n      Count.perElement());\r\n```","```\r\nwordCount.apply(MapElements.into(TypeDescriptors.strings())\r\n    .via(count -> count.getKey() + \" --> \" + count.getValue()))\r\n    .apply(TextIO.write().to(outputFilePath));\r\n```","```\r\np.run().waitUntilFinish();\r\n```","```\r\n...\r\napache --> 3\r\nbeam --> 5\r\nrocks --> 2\r\n...\r\n```"]