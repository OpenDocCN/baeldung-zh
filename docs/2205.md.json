["```\r\n<dependency>\r\n    <groupId>org.jgrapht</groupId>\r\n    <artifactId>jgrapht-core</artifactId>\r\n    <version>1.0.1</version>\r\n</dependency>\r\n```","```\r\nGraph<String, DefaultEdge> g \r\n  = new SimpleGraph<>(DefaultEdge.class);\r\ng.addVertex(“v1”);\r\ng.addVertex(“v2”);\r\ng.addEdge(v1, v2);\r\n```","```\r\nDirectedGraph<String, DefaultEdge> directedGraph \r\n  = new DefaultDirectedGraph<>(DefaultEdge.class);\r\ndirectedGraph.addVertex(\"v1\");\r\ndirectedGraph.addVertex(\"v2\");\r\ndirectedGraph.addVertex(\"v3\");\r\ndirectedGraph.addEdge(\"v1\", \"v2\");\r\n// Add remaining vertices and edges\r\n```","```\r\npublic void createCompleteGraph() {\r\n    completeGraph = new SimpleWeightedGraph<>(DefaultEdge.class);\r\n    CompleteGraphGenerator<String, DefaultEdge> completeGenerator \r\n      = new CompleteGraphGenerator<>(size);\r\n    VertexFactory<String> vFactory = new VertexFactory<String>() {\r\n        private int id = 0;\r\n        public String createVertex() {\r\n            return \"v\" + id++;\r\n        }\r\n    };\r\n    completeGenerator.generateGraph(completeGraph, vFactory, null);\r\n}\r\n```","```\r\npublic void createMultiGraphWithWeightedEdges() {\r\n    multiGraph = new Multigraph<>(DefaultWeightedEdge.class);\r\n    multiGraph.addVertex(\"v1\");\r\n    multiGraph.addVertex(\"v2\");\r\n    DefaultWeightedEdge edge1 = multiGraph.addEdge(\"v1\", \"v2\");\r\n    multiGraph.setEdgeWeight(edge1, 5);\r\n\r\n    DefaultWeightedEdge edge2 = multiGraph.addEdge(\"v1\", \"v2\");\r\n    multiGraph.setEdgeWeight(edge2, 3);\r\n}\r\n```","```\r\nDepthFirstIterator depthFirstIterator \r\n  = new DepthFirstIterator<>(directedGraph);\r\nBreadthFirstIterator breadthFirstIterator \r\n  = new BreadthFirstIterator<>(directedGraph);\r\n```","```\r\n@Test\r\npublic void whenGetDijkstraShortestPath_thenGetNotNullPath() {\r\n    DijkstraShortestPath dijkstraShortestPath \r\n      = new DijkstraShortestPath(directedGraph);\r\n    List<String> shortestPath = dijkstraShortestPath\r\n      .getPath(\"v1\",\"v4\").getVertexList();\r\n\r\n    assertNotNull(shortestPath);\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  whenGetBellmanFordShortestPath_thenGetNotNullPath() {\r\n    BellmanFordShortestPath bellmanFordShortestPath \r\n      = new BellmanFordShortestPath(directedGraph);\r\n    List<String> shortestPath = bellmanFordShortestPath\r\n      .getPath(\"v1\", \"v4\")\r\n      .getVertexList();\r\n\r\n    assertNotNull(shortestPath);\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  whenGetStronglyConnectedSubgraphs_thenPathExists() {\r\n\r\n    StrongConnectivityAlgorithm<String, DefaultEdge> scAlg \r\n      = new KosarajuStrongConnectivityInspector<>(directedGraph);\r\n    List<DirectedSubgraph<String, DefaultEdge>> stronglyConnectedSubgraphs \r\n      = scAlg.stronglyConnectedSubgraphs();\r\n    List<String> stronglyConnectedVertices \r\n      = new ArrayList<>(stronglyConnectedSubgraphs.get(3)\r\n      .vertexSet());\r\n\r\n    String randomVertex1 = stronglyConnectedVertices.get(0);\r\n    String randomVertex2 = stronglyConnectedVertices.get(3);\r\n    AllDirectedPaths<String, DefaultEdge> allDirectedPaths \r\n      = new AllDirectedPaths<>(directedGraph);\r\n\r\n    List<GraphPath<String, DefaultEdge>> possiblePathList \r\n      = allDirectedPaths.getAllPaths(\r\n        randomVertex1, randomVertex2, false,\r\n          stronglyConnectedVertices.size());\r\n\r\n    assertTrue(possiblePathList.size() > 0);\r\n}\r\n```","```\r\npublic void createGraphWithEulerianCircuit() {\r\n    SimpleWeightedGraph<String, DefaultEdge> simpleGraph \r\n      = new SimpleWeightedGraph<>(DefaultEdge.class);\r\n    IntStream.range(1,5)\r\n      .forEach(i-> simpleGraph.addVertex(\"v\" + i));\r\n    IntStream.range(1,5)\r\n      .forEach(i-> {\r\n        int endVertexNo = (i + 1) > 5 ? 1 : i + 1;\r\n        simpleGraph.addEdge(\"v\" + i,\"v\" + endVertexNo);\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void givenGraph_whenCheckEluerianCycle_thenGetResult() {\r\n    HierholzerEulerianCycle eulerianCycle \r\n      = new HierholzerEulerianCycle<>();\r\n\r\n    assertTrue(eulerianCycle.isEulerian(simpleGraph));\r\n}\r\n@Test\r\npublic void whenGetEulerianCycle_thenGetGraphPath() {\r\n    HierholzerEulerianCycle eulerianCycle \r\n      = new HierholzerEulerianCycle<>();\r\n    GraphPath path = eulerianCycle.getEulerianCycle(simpleGraph);\r\n\r\n    assertTrue(path.getEdgeList()\r\n      .containsAll(simpleGraph.edgeSet()));\r\n}\r\n```","```\r\npublic void \r\n  whenGetHamiltonianCyclePath_thenGetVerticeSequence() {\r\n    List<String> verticeList = HamiltonianCycle\r\n      .getApproximateOptimalForCompleteGraph(completeGraph);\r\n\r\n    assertEquals(verticeList.size(), completeGraph.vertexSet().size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCheckCycles_thenDetectCycles() {\r\n    CycleDetector<String, DefaultEdge> cycleDetector \r\n      = new CycleDetector<String, DefaultEdge>(directedGraph);\r\n\r\n    assertTrue(cycleDetector.detectCycles());\r\n    Set<String> cycleVertices = cycleDetector.findCycles();\r\n\r\n    assertTrue(cycleVertices.size() > 0);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.jgrapht</groupId>\r\n    <artifactId>jgrapht-ext</artifactId>\r\n    <version>1.0.1</version>\r\n</dependency>\r\n```","```\r\n@Before\r\npublic void createGraph() {\r\n\r\n    File imgFile = new File(\"src/test/resources/graph.png\");\r\n    imgFile.createNewFile();\r\n\r\n    DefaultDirectedGraph<String, DefaultEdge> g = \r\n      new DefaultDirectedGraph<String, DefaultEdge>(DefaultEdge.class);\r\n\r\n    String x1 = \"x1\";\r\n    String x2 = \"x2\";\r\n    String x3 = \"x3\";\r\n\r\n    g.addVertex(x1);\r\n    g.addVertex(x2);\r\n    g.addVertex(x3);\r\n\r\n    g.addEdge(x1, x2);\r\n    g.addEdge(x2, x3);\r\n    g.addEdge(x3, x1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenAdaptedGraph_whenWriteBufferedImage_thenFileShouldExist() throws IOException {\r\n\r\n    JGraphXAdapter<String, DefaultEdge> graphAdapter = \r\n      new JGraphXAdapter<String, DefaultEdge>(g);\r\n    mxIGraphLayout layout = new mxCircleLayout(graphAdapter);\r\n    layout.execute(graphAdapter.getDefaultParent());\r\n\r\n    BufferedImage image = \r\n      mxCellRenderer.createBufferedImage(graphAdapter, null, 2, Color.WHITE, true, null);\r\n    File imgFile = new File(\"src/test/resources/graph.png\");\r\n    ImageIO.write(image, \"PNG\", imgFile);\r\n\r\n    assertTrue(imgFile.exists());\r\n}\r\n```"]