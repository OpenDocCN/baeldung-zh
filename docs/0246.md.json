["```\r\npublic Future<String> calculateAsync() throws InterruptedException {\r\n    CompletableFuture<String> completableFuture = new CompletableFuture<>();\r\n\r\n    Executors.newCachedThreadPool().submit(() -> {\r\n        Thread.sleep(500);\r\n        completableFuture.complete(\"Hello\");\r\n        return null;\r\n    });\r\n\r\n    return completableFuture;\r\n}\r\n```","```\r\nFuture<String> completableFuture = calculateAsync();\r\n\r\n// ... \r\n\r\nString result = completableFuture.get();\r\nassertEquals(\"Hello\", result);\r\n```","```\r\nFuture<String> completableFuture = \r\n  CompletableFuture.completedFuture(\"Hello\");\r\n\r\n// ...\r\n\r\nString result = completableFuture.get();\r\nassertEquals(\"Hello\", result);\r\n```","```\r\nCompletableFuture<String> future\r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\n\r\n// ...\r\n\r\nassertEquals(\"Hello\", future.get());\r\n```","```\r\nCompletableFuture<String> completableFuture\r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\n\r\nCompletableFuture<String> future = completableFuture\r\n  .thenApply(s -> s + \" World\");\r\n\r\nassertEquals(\"Hello World\", future.get());\r\n```","```\r\nCompletableFuture<String> completableFuture\r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\n\r\nCompletableFuture<Void> future = completableFuture\r\n  .thenAccept(s -> System.out.println(\"Computation returned: \" + s));\r\n\r\nfuture.get();\r\n```","```\r\nCompletableFuture<String> completableFuture \r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\n\r\nCompletableFuture<Void> future = completableFuture\r\n  .thenRun(() -> System.out.println(\"Computation finished.\"));\r\n\r\nfuture.get();\r\n```","```\r\nCompletableFuture<String> completableFuture \r\n  = CompletableFuture.supplyAsync(() -> \"Hello\")\r\n    .thenCompose(s -> CompletableFuture.supplyAsync(() -> s + \" World\"));\r\n\r\nassertEquals(\"Hello World\", completableFuture.get());\r\n```","```\r\nCompletableFuture<String> completableFuture \r\n  = CompletableFuture.supplyAsync(() -> \"Hello\")\r\n    .thenCombine(CompletableFuture.supplyAsync(\r\n      () -> \" World\"), (s1, s2) -> s1 + s2));\r\n\r\nassertEquals(\"Hello World\", completableFuture.get());\r\n```","```\r\nCompletableFuture future = CompletableFuture.supplyAsync(() -> \"Hello\")\r\n  .thenAcceptBoth(CompletableFuture.supplyAsync(() -> \" World\"),\r\n    (s1, s2) -> System.out.println(s1 + s2));\r\n```","```\r\nCompletableFuture<Integer> finalResult = compute().thenApply(s-> s + 1);\r\n```","```\r\nCompletableFuture<Integer> computeAnother(Integer i){\r\n    return CompletableFuture.supplyAsync(() -> 10 + i);\r\n}\r\nCompletableFuture<Integer> finalResult = compute().thenCompose(this::computeAnother);\r\n```","```\r\nCompletableFuture<String> future1  \r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\nCompletableFuture<String> future2  \r\n  = CompletableFuture.supplyAsync(() -> \"Beautiful\");\r\nCompletableFuture<String> future3  \r\n  = CompletableFuture.supplyAsync(() -> \"World\");\r\n\r\nCompletableFuture<Void> combinedFuture \r\n  = CompletableFuture.allOf(future1, future2, future3);\r\n\r\n// ...\r\n\r\ncombinedFuture.get();\r\n\r\nassertTrue(future1.isDone());\r\nassertTrue(future2.isDone());\r\nassertTrue(future3.isDone());\r\n```","```\r\nString combined = Stream.of(future1, future2, future3)\r\n  .map(CompletableFuture::join)\r\n  .collect(Collectors.joining(\" \"));\r\n\r\nassertEquals(\"Hello Beautiful World\", combined);\r\n```","```\r\nString name = null;\r\n\r\n// ...\r\n\r\nCompletableFuture<String> completableFuture  \r\n  =  CompletableFuture.supplyAsync(() -> {\r\n      if (name == null) {\r\n          throw new RuntimeException(\"Computation error!\");\r\n      }\r\n      return \"Hello, \" + name;\r\n  }).handle((s, t) -> s != null ? s : \"Hello, Stranger!\");\r\n\r\nassertEquals(\"Hello, Stranger!\", completableFuture.get());\r\n```","```\r\nCompletableFuture<String> completableFuture = new CompletableFuture<>();\r\n\r\n// ...\r\n\r\ncompletableFuture.completeExceptionally(\r\n  new RuntimeException(\"Calculation failed!\"));\r\n\r\n// ...\r\n\r\ncompletableFuture.get(); // ExecutionException\r\n```","```\r\nCompletableFuture<String> completableFuture  \r\n  = CompletableFuture.supplyAsync(() -> \"Hello\");\r\n\r\nCompletableFuture<String> future = completableFuture\r\n  .thenApplyAsync(s -> s + \" World\");\r\n\r\nassertEquals(\"Hello World\", future.get());\r\n```"]