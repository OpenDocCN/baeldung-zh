["```\r\npublic abstract class AuthenticationProcessor {\r\n\r\n    public AuthenticationProcessor nextProcessor;\r\n\r\n    // standard constructors\r\n\r\n    public abstract boolean isAuthorized(AuthenticationProvider authProvider);\r\n}\r\n```","```\r\npublic class OAuthProcessor extends AuthenticationProcessor {\r\n\r\n    public OAuthProcessor(AuthenticationProcessor nextProcessor) {\r\n        super(nextProcessor);\r\n    }\r\n\r\n    @Override\r\n    public boolean isAuthorized(AuthenticationProvider authProvider) {\r\n        if (authProvider instanceof OAuthTokenProvider) {\r\n            return true;\r\n        } else if (nextProcessor != null) {\r\n            return nextProcessor.isAuthorized(authProvider);\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n```","```\r\npublic class UsernamePasswordProcessor extends AuthenticationProcessor {\r\n\r\n    public UsernamePasswordProcessor(AuthenticationProcessor nextProcessor) {\r\n        super(nextProcessor);\r\n    }\r\n\r\n    @Override\r\n    public boolean isAuthorized(AuthenticationProvider authProvider) {\r\n        if (authProvider instanceof UsernamePasswordProvider) {\r\n            return true;\r\n        } else if (nextProcessor != null) {\r\n            return nextProcessor.isAuthorized(authProvider);\r\n        }\r\n    return false;\r\n    }\r\n}\r\n```","```\r\npublic class ChainOfResponsibilityTest {\r\n\r\n    private static AuthenticationProcessor getChainOfAuthProcessor() {\r\n        AuthenticationProcessor oAuthProcessor = new OAuthProcessor(null);\r\n        return new UsernamePasswordProcessor(oAuthProcessor);\r\n    }\r\n\r\n    @Test\r\n    public void givenOAuthProvider_whenCheckingAuthorized_thenSuccess() {\r\n        AuthenticationProcessor authProcessorChain = getChainOfAuthProcessor();\r\n        assertTrue(authProcessorChain.isAuthorized(new OAuthTokenProvider()));\r\n    }\r\n\r\n    @Test\r\n    public void givenSamlProvider_whenCheckingAuthorized_thenSuccess() {\r\n        AuthenticationProcessor authProcessorChain = getChainOfAuthProcessor();\r\n\r\n        assertFalse(authProcessorChain.isAuthorized(new SamlTokenProvider()));\r\n    }\r\n}\r\n```","```\r\npublic class CustomFilter implements Filter {\r\n\r\n    public void doFilter(\r\n      ServletRequest request,\r\n      ServletResponse response,\r\n      FilterChain chain)\r\n      throws IOException, ServletException {\r\n\r\n        // process the request\r\n\r\n        // pass the request (i.e. the command) along the filter chain\r\n        chain.doFilter(request, response);\r\n    }\r\n}\r\n```"]