["```\r\npublic abstract class AbstractHibernateDao<T extends Serializable> {\r\n    private Class<T> clazz;\r\n\r\n    @Autowired\r\n    protected SessionFactory sessionFactory;\r\n\r\n    public void setClazz(final Class<T> clazzToSet) {\r\n        clazz = Preconditions.checkNotNull(clazzToSet);\r\n    }\r\n\r\n    public T findOne(final long id) {\r\n        return (T) getCurrentSession().get(clazz, id);\r\n    }\r\n\r\n    public List<T> findAll() {\r\n        return getCurrentSession().createQuery(\"from \" + clazz.getName()).list();\r\n    }\r\n\r\n    public T create(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        getCurrentSession().saveOrUpdate(entity);\r\n        return entity;\r\n    }\r\n\r\n    public T update(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        return (T) getCurrentSession().merge(entity);\r\n    }\r\n\r\n    public void delete(final T entity) {\r\n        Preconditions.checkNotNull(entity);\r\n        getCurrentSession().delete(entity);\r\n    }\r\n\r\n    public void deleteById(final long entityId) {\r\n        final T entity = findOne(entityId);\r\n        Preconditions.checkState(entity != null);\r\n        delete(entity);\r\n    }\r\n\r\n    protected Session getCurrentSession() {\r\n        return sessionFactory.getCurrentSession();\r\n    }\r\n}\r\n```","```\r\n@Repository\r\n@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\npublic class GenericHibernateDao<T extends Serializable>\r\n  extends AbstractHibernateDao<T> implements IGenericDao<T>{\r\n   //\r\n}\r\n```","```\r\npublic interface IGenericDao<T extends Serializable> {\r\n    void setClazz(Class< T > clazzToSet);\r\n\r\n    T findOne(final long id);\r\n\r\n    List<T> findAll();\r\n\r\n    T create(final T entity);\r\n\r\n    T update(final T entity);\r\n\r\n    void delete(final T entity);\r\n\r\n    void deleteById(final long entityId);\r\n} \r\n```","```\r\npublic abstract class AbstractJpaDAO<T extends Serializable> {\r\n    private Class<T> clazz;\r\n\r\n    @PersistenceContext(unitName = \"entityManagerFactory\")\r\n    private EntityManager entityManager;\r\n\r\n    public final void setClazz(final Class<T> clazzToSet) {\r\n        this.clazz = clazzToSet;\r\n    }\r\n\r\n    public T findOne(final long id) {\r\n        return entityManager.find(clazz, id);\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    public List<T> findAll() {\r\n        return entityManager.createQuery(\"from \" + clazz.getName()).getResultList();\r\n    }\r\n\r\n    public T create(final T entity) {\r\n        entityManager.persist(entity);\r\n        return entity;\r\n    }\r\n\r\n    public T update(final T entity) {\r\n        return entityManager.merge(entity);\r\n    }\r\n\r\n    public void delete(final T entity) {\r\n        entityManager.remove(entity);\r\n    }\r\n\r\n    public void deleteById(final long entityId) {\r\n        final T entity = findOne(entityId);\r\n        delete(entity);\r\n    }\r\n}\r\n```","```\r\n@Repository\r\n@Scope( BeanDefinition.SCOPE_PROTOTYPE )\r\npublic class GenericJpaDao< T extends Serializable >\r\n extends AbstractJpaDao< T > implements IGenericDao< T >{\r\n   //\r\n}\r\n```","```\r\n@Service\r\nclass FooService implements IFooService{\r\n\r\n   IGenericDao<Foo> dao;\r\n\r\n   @Autowired\r\n   public void setDao(IGenericDao<Foo> daoToSet) {\r\n      dao = daoToSet;\r\n      dao.setClazz(Foo.class);\r\n   }\r\n\r\n   // ...\r\n}\r\n```"]