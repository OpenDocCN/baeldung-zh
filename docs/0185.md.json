["```\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.24</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.14.1</version>\r\n</dependency>\r\n```","```\r\n@Data\r\n@Builder\r\n@Jacksonized\r\npublic class Fruit {\r\n    private String name;\r\n    private int id;\r\n}\r\n```","```\r\n@Test\r\npublic void withFruitJSON_thenDeserializeSucessfully() throws IOException {\r\n    String json = \"{\\\"name\\\":\\\"Apple\\\",\\\"id\\\":101}\";\r\n\r\n    Fruit fruit = newObjectMapper().readValue(json, Fruit.class);\r\n    assertEquals(new Fruit(\"Apple\", 101), fruit);\r\n}\r\n```","```\r\n@Test\r\nvoid withFruitObject_thenSerializeSucessfully() throws IOException {\r\n    Fruit fruit = Fruit.builder()\r\n      .id(101)\r\n      .name(\"Apple\")\r\n      .build();\r\n\r\n    String json = newObjectMapper().writeValueAsString(fruit);\r\n    assertEquals(\"{\\\"name\\\":\\\"Apple\\\",\\\"id\\\":101}\", json);\r\n}\r\n```","```\r\n{\r\n    \"id\": 5,\r\n    \"name\": \"Bob\"\r\n}\r\n```","```\r\n@Data\r\n@Builder(builderClassName = \"EmployeeBuilder\")\r\n@JsonDeserialize(builder = Employee.EmployeeBuilder.class)\r\n@AllArgsConstructor\r\npublic class Employee {\r\n\r\n    private int identity;\r\n    private String firstName;\r\n\r\n}\r\n```","```\r\n@JsonPOJOBuilder(buildMethodName = \"createEmployee\", withPrefix = \"construct\")\r\npublic static class EmployeeBuilder {\r\n\r\n    private int idValue;\r\n    private String nameValue;\r\n\r\n    public EmployeeBuilder constructId(int id) {\r\n        idValue = id;\r\n        return this;\r\n    }\r\n\r\n    public EmployeeBuilder constructName(String name) {\r\n        nameValue = name;\r\n        return this;\r\n    }\r\n\r\n    public Employee createEmployee() {\r\n        return new Employee(idValue, nameValue);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void withEmployeeJSON_thenDeserializeSucessfully() throws IOException {\r\n    String json = \"{\\\"id\\\":5,\\\"name\\\":\\\"Bob\\\"}\";\r\n    Employee employee = newObjectMapper().readValue(json, Employee.class);\r\n\r\n    assertEquals(5, employee.getIdentity());\r\n    assertEquals(\"Bob\", employee.getFirstName());\r\n}\r\n```"]