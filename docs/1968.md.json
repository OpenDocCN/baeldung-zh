["```\r\npublic static <E extends Throwable> void sneakyThrow(Throwable e) throws E {\r\n    throw (E) e;\r\n}\r\n\r\nprivate static void throwSneakyIOException() {\r\n    sneakyThrow(new IOException(\"sneaky\"));\r\n}\r\n```","```\r\n@Test\r\npublic void throwSneakyIOException_IOExceptionShouldBeThrown() {\r\n    assertThatThrownBy(() -> throwSneakyIOException())\r\n      .isInstanceOf(IOException.class)\r\n      .hasMessage(\"sneaky\")\r\n      .hasStackTraceContaining(\"SneakyThrowsExamples.throwSneakyIOException\");\r\n}\r\n```","```\r\n@SneakyThrows\r\npublic static void throwSneakyIOExceptionUsingLombok() {\r\n    throw new IOException(\"lombok sneaky\");\r\n}\r\n```","```\r\n@Test\r\npublic void throwSneakyIOExceptionUsingLombok_IOExceptionShouldBeThrown() {\r\n    assertThatThrownBy(() -> throwSneakyIOExceptionUsingLombok())\r\n      .isInstanceOf(IOException.class)\r\n      .hasMessage(\"lombok sneaky\")\r\n      .hasStackTraceContaining(\"SneakyThrowsExamples.throwSneakyIOExceptionUsingLombok\");\r\n}\r\n```"]