["```\r\nMap<Integer, String> wordsByKey = new HashMap<>();\r\nwordsByKey.put(1, \"one\");\r\nwordsByKey.put(2, \"two\");\r\nwordsByKey.put(3, \"three\");\r\nwordsByKey.put(4, \"four\");\r\n```","```\r\npublic String convertWithIteration(Map<Integer, ?> map) {\r\n    StringBuilder mapAsString = new StringBuilder(\"{\");\r\n    for (Integer key : map.keySet()) {\r\n        mapAsString.append(key + \"=\" + map.get(key) + \", \");\r\n    }\r\n    mapAsString.delete(mapAsString.length()-2, mapAsString.length()).append(\"}\");\r\n    return mapAsString.toString();\r\n}\r\n```","```\r\n@Test\r\npublic void givenMap_WhenUsingIteration_ThenResultingStringIsCorrect() {\r\n    String mapAsString = MapToString.convertWithIteration(wordsByKey);\r\n    Assert.assertEquals(\"{1=one, 2=two, 3=three, 4=four}\", mapAsString);\r\n}\r\n```","```\r\npublic String convertWithStream(Map<Integer, ?> map) {\r\n    String mapAsString = map.keySet().stream()\r\n      .map(key -> key + \"=\" + map.get(key))\r\n      .collect(Collectors.joining(\", \", \"{\", \"}\"));\r\n    return mapAsString;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic String convertWithGuava(Map<Integer, ?> map) {\r\n    return Joiner.on(\",\").withKeyValueSeparator(\"=\").join(map);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.2</version>\r\n</dependency>\r\n```","```\r\npublic String convertWithApache(Map map) {\r\n    return StringUtils.join(map);\r\n}\r\n```","```\r\nMapUtils.debugPrint(System.out, \"Map as String\", wordsByKey);\r\n```","```\r\nMap as String = \r\n{\r\n    1 = one java.lang.String\r\n    2 = two java.lang.String\r\n    3 = three java.lang.String\r\n    4 = four java.lang.String\r\n} java.util.HashMap\r\n```","```\r\npublic Map<String, String> convertWithStream(String mapAsString) {\r\n    Map<String, String> map = Arrays.stream(mapAsString.split(\",\"))\r\n      .map(entry -> entry.split(\"=\"))\r\n      .collect(Collectors.toMap(entry -> entry[0], entry -> entry[1]));\r\n    return map;\r\n}\r\n```","```\r\npublic Map<String, String> convertWithGuava(String mapAsString) {\r\n    return Splitter.on(',').withKeyValueSeparator('=').split(mapAsString);\r\n}\r\n```"]