["```\r\nString DIGIT_AND_DECIMAL_REGEX = \"[^\\\\d.]\"\r\n\r\nString digitsOnly = input.replaceAll(DIGIT_AND_DECIMAL_REGEX, \"\");\r\n```","```\r\nif(\"\".equals(digitsOnly)) return 0;\r\n\r\ntry {\r\n    return Double.parseDouble(digitsOnly);\r\n} catch (NumberFormatException nfe) {\r\n    return 0;\r\n}\r\n```","```\r\npublic static Comparator<String> createNaturalOrderRegexComparator() {\r\n    return Comparator.comparingDouble(NaturalOrderComparators::parseStringToNumber);\r\n}\r\n```","```\r\nList<String> testStrings = \r\n  Arrays.asList(\"a1\", \"d2.2\", \"b3\", \"d2.3.3d\", \"c4\", \"d2.f4\",); // 1, 2.2, 3, 0, 4, 2.4\r\n\r\ntestStrings.sort(NaturalOrderComparators.createNaturalOrderRegexComparator());\r\n\r\nList<String> expected = Arrays.asList(\"d2.3.3d\", \"a1\", \"d2.2\", \"d2.f4\", \"b3\", \"c4\");\r\n\r\nassertEquals(expected, testStrings);\r\n```"]