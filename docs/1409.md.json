["```\r\nmvn archetype:generate -DarchetypeGroupId=org.ninjaframework \\\r\n  -DarchetypeArtifactId=ninja-servlet-archetype-simple\r\n```","```\r\n<dependency>\r\n    <groupId>org.ninjaframework</groupId>\r\n    <artifactId>ninja-core</artifactId>\r\n    <version>6.5.0</version>\r\n</dependency>\r\n```","```\r\nmvn clean install\r\n```","```\r\nmvn ninja:run\r\n```","```\r\n@Singleton\r\npublic class ApplicationController {\r\n    public Result index() {\r\n        return Results.html();\r\n    }\r\n}\r\n```","```\r\n<html>  \r\n<head>\r\n    <title>Ninja: Index</title>\r\n</head>\r\n<body>\r\n    <h1>${i18n(\"helloMsg\")}</h1>\r\n    <a href=\"/userJson\">User Json</a>\r\n</body>\r\n</html>\r\n```","```\r\npublic class Routes implements ApplicationRoutes {\r\n    @Override\r\n    public void init(Router router) {          \r\n        router.GET().route(\"/index\").with(ApplicationController::index);\r\n    }\r\n}\r\n```","```\r\npublic Result userJson() {\r\n    HashMap<String, String> userMap = new HashMap<>();\r\n    userMap.put(\"name\", \"Norman Lewis\");\r\n    userMap.put(\"email\", \"[[email protected]](/web/20221128054812/https://www.baeldung.com/cdn-cgi/l/email-protection)\");    \r\n    return Results.json().render(user);\r\n}\r\n```","```\r\nrouter.GET().route(\"/userJson\").with(ApplicationController::userJson);\r\n```","```\r\npublic interface UserService {\r\n    HashMap<String, String> getUserMap();\r\n}\r\n```","```\r\npublic class UserServiceImpl implements UserService {\r\n    @Override\r\n    public HashMap<String, String> getUserMap() {\r\n        HashMap<String, String> userMap = new HashMap<>(); \r\n        userMap.put(\"name\", \"Norman Lewis\"); \r\n        userMap.put(\"email\", \"[[email protected]](/web/20221128054812/https://www.baeldung.com/cdn-cgi/l/email-protection)\"); \r\n        return userMap;\r\n    }\r\n}\r\n```","```\r\n@Singleton\r\npublic class Module extends AbstractModule {\r\n    protected void configure() {        \r\n        bind(UserService.class).to(UserServiceImpl.class);\r\n    }\r\n}\r\n```","```\r\npublic class ApplicationController {\r\n    @Inject\r\n    UserService userService;\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic Result userJson() {\r\n    HashMap<String, String> userMap = userService.getUserMap();\r\n    return Results.json().render(userMap);\r\n}\r\n```","```\r\npublic Result showFlashMsg(FlashScope flashScope) {\r\n    flashScope.success(\"Success message\");\r\n    flashScope.error(\"Error message\");\r\n    return Results.redirect(\"/home\");\r\n}\r\n```","```\r\n<#if (flash.error)??>\r\n    <div class=\"alert alert-danger\">\r\n        ${flash.error}\r\n    </div>\r\n</#if>\r\n<#if (flash.success)??>\r\n    <div class=\"alert alert-success\">\r\n        ${flash.success}\r\n    </div>\r\n</#if>\r\n```","```\r\napplication.languages=fr,en\r\n```","```\r\nheader.home=Home!\r\nhelloMsg=Hello, welcome to Ninja Framework!\r\n```","```\r\nheader.home=Accueil!\r\nhelloMsg=Bonjour, bienvenue dans Ninja Framework!\r\n```","```\r\n@Singleton\r\npublic class ApplicationController {\r\n    @Inject\r\n    Lang lang;\r\n\r\n    @Inject\r\n    Messages msg;\r\n\r\n    // ...\r\n}\r\n```","```\r\nResult result = Results.html();\r\nlang.setLanguage(\"fr\", result);\r\n```","```\r\nOptional<String> language = Optional.of(\"fr\");        \r\nString helloMsg = msg.get(\"helloMsg\", language).get();\r\n```","```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy=GenerationType.AUTO)\r\n    Long id;\r\n    public String firstName;\r\n    public String email;  \r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<persistence \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\r\n  version=\"2.0\">\r\n\r\n    <!-- Database settings for development -->\r\n    <persistence-unit name=\"dev_unit\"\r\n      transaction-type=\"RESOURCE_LOCAL\">\r\n        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>\r\n        <properties>\r\n            <property name=\"hibernate.connection.driver_class\" value=\"org.h2.Driver\" />\r\n            <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.H2Dialect\" />\r\n            <property name=\"hibernate.show_sql\" value=\"true\" />\r\n            <property name=\"hibernate.format_sql\" value=\"true\" />\r\n            <property name=\"hibernate.hbm2ddl.auto\" value=\"update\" />\r\n            <property name=\"hibernate.connection.autocommit\" value=\"true\" />\r\n        </properties>\r\n    </persistence-unit>\r\n</persistence>\r\n```","```\r\nninja.jpa.persistence_unit_name=dev_unit\r\ndb.connection.url=jdbc:h2:./devDb\r\ndb.connection.username=sa\r\ndb.connection.password=\r\n```","```\r\npublic class ApplicationController {\r\n    @Inject \r\n    Provider<EntityManager> entityManagerProvider;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Transactional\r\npublic Result insertUser(User user) {\r\n    EntityManager entityManager = entityManagerProvider.get();\r\n    entityManager.persist(user);\r\n    entityManager.flush();\r\n    return Results.redirect(\"/home\");\r\n}\r\n```","```\r\n@UnitOfWork\r\npublic Result fetchUsers() {\r\n    EntityManager entityManager = entityManagerProvider.get();\r\n    Query q = entityManager.createQuery(\"SELECT x FROM User x\");\r\n    List<User> users = (List<User>) q.getResultList();\r\n    return Results.json().render(users);\r\n}\r\n```","```\r\npublic class User {\r\n    // ...\r\n\r\n    @NotNull\r\n    public String firstName;\r\n}\r\n```","```\r\n@Transactional\r\npublic Result insertUser(FlashScope flashScope, @JSR303Validation User user, Validation validation) {\r\n    if (validation.getViolations().size() > 0) {\r\n        flashScope.error(\"Validation Error: User can't be created\");\r\n    } else {\r\n        EntityManager entityManager = entitiyManagerProvider.get();\r\n        entityManager.persist(user);\r\n        entityManager.flush();\r\n        flashScope.success(\"User '\" + user + \"' is created successfully\");\r\n    }\r\n    return Results.redirect(\"/home\");\r\n}\r\n```"]