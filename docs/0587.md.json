["```\r\n<T> void validate(T t) {\r\n    Set<ConstraintViolation<T>> violations = validator.validate(t);\r\n    if (!violations.isEmpty()) {\r\n        throw new ConstraintViolationException(violations);\r\n    }\r\n}\r\n```","```\r\npublic class BeanDeserializerWithValidation extends BeanDeserializer {\r\n\r\n    protected BeanDeserializerWithValidation(BeanDeserializerBase src) {\r\n        super(src);\r\n    }\r\n\r\n    @Override\r\n    public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {\r\n        Object instance = super.deserialize(p, ctxt);\r\n        validate(instance);\r\n        return instance;\r\n    }\r\n\r\n}\r\n```","```\r\npublic class BeanDeserializerModifierWithValidation extends BeanDeserializerModifier {\r\n\r\n    @Override\r\n    public JsonDeserializer<?> modifyDeserializer(DeserializationConfig config, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {\r\n        if (deserializer instanceof BeanDeserializer) {\r\n            return new BeanDeserializerWithValidation((BeanDeserializer) deserializer);\r\n        }\r\n\r\n        return deserializer;\r\n    }\r\n\r\n}\r\n```","```\r\nObjectMapper getObjectMapperWithValidation() {\r\n    SimpleModule validationModule = new SimpleModule();\r\n    validationModule.setDeserializerModifier(new BeanDeserializerModifierWithValidation());\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.registerModule(validationModule);\r\n    return mapper;\r\n}\r\n```","```\r\npublic class Student {\r\n\r\n    @Size(min = 5, max = 10, message = \"Student's name must be between 5 and 10 characters\")\r\n    private String name;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n}\r\n```","```\r\n{\r\n  \"name\": \"Daniel\"\r\n}\r\n```","```\r\nStudent readStudent(InputStream inputStream) throws IOException {\r\n    ObjectMapper mapper = getObjectMapperWithValidation();\r\n    return mapper.readValue(inputStream, Student.class);\r\n}\r\n```","```\r\n@Test\r\nvoid givenValidStudent_WhenReadStudent_ThenReturnStudent() throws IOException {\r\n    InputStream inputStream = getClass().getClassLoader().getResourceAsStream((\"validStudent.json\");\r\n    Student result = readStudent(inputStream);\r\n    assertEquals(\"Daniel\", result.getName());\r\n}\r\n```","```\r\n{\r\n  \"name\": \"Max\"\r\n}\r\n```","```\r\n@Test\r\nvoid givenStudentWithInvalidName_WhenReadStudent_ThenThrows() {\r\n    InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"invalidStudent.json\");\r\n    ConstraintViolationException constraintViolationException = assertThrows(ConstraintViolationException.class, () -> readStudent(inputStream));\r\n    assertEquals(\"name: Student's name must be between 5 and 10 characters\", constraintViolationException.getMessage());\r\n}\r\n```"]