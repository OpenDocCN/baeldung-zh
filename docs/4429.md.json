["```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    while (list.contains(element)) {\r\n        list.remove(element);\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nassertThatThrownBy(() -> removeAll(list, valueToRemove))\r\n  .isInstanceOf(IndexOutOfBoundsException.class);\r\n```","```\r\nvoid removeAll(List<Integer> list, Integer element) {\r\n    while (list.contains(element)) {\r\n        list.remove(element);\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, Integer element) {\r\n    int index;\r\n    while ((index = list.indexOf(element)) >= 0) {\r\n        list.remove(index);\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    while (list.remove(element));\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (Objects.equals(element, list.get(i))) {\r\n            list.remove(i);\r\n        }\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(1, 2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    for (int i = 0; i < list.size(); i++) {\r\n        if (Objects.equals(element, list.get(i))) {\r\n            list.remove(i);\r\n            i--;\r\n        }\r\n    }\r\n}\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    for (int i = 0; i < list.size();) {\r\n        if (Objects.equals(element, list.get(i))) {\r\n            list.remove(i);\r\n        } else {\r\n            i++;\r\n        }\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    for (Integer number : list) {\r\n        if (Objects.equals(number, element)) {\r\n            list.remove(number);\r\n        }\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nassertThatThrownBy(() -> removeWithForEachLoop(list, valueToRemove))\r\n  .isInstanceOf(ConcurrentModificationException.class);\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    for (Iterator<Integer> i = list.iterator(); i.hasNext();) {\r\n        Integer number = i.next();\r\n        if (Objects.equals(number, element)) {\r\n            i.remove();\r\n        }\r\n    }\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nList<Integer> removeAll(List<Integer> list, int element) {\r\n    List<Integer> remainingElements = new ArrayList<>();\r\n    for (Integer number : list) {\r\n        if (!Objects.equals(number, element)) {\r\n            remainingElements.add(number);\r\n        }\r\n    }\r\n    return remainingElements;\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nList<Integer> result = removeAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(result).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    List<Integer> remainingElements = new ArrayList<>();\r\n    for (Integer number : list) {\r\n        if (!Objects.equals(number, element)) {\r\n            remainingElements.add(number);\r\n        }\r\n    }\r\n\r\n    list.clear();\r\n    list.addAll(remainingElements);\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```","```\r\nList<Integer> removeAll(List<Integer> list, int element) {\r\n    return list.stream()\r\n      .filter(e -> !Objects.equals(e, element))\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nList<Integer> result = removeAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(result).isEqualTo(list(2, 3));\r\n```","```\r\nvoid removeAll(List<Integer> list, int element) {\r\n    list.removeIf(n -> Objects.equals(n, element));\r\n}\r\n```","```\r\n// given\r\nList<Integer> list = list(1, 1, 2, 3);\r\nint valueToRemove = 1;\r\n\r\n// when\r\nremoveAll(list, valueToRemove);\r\n\r\n// then\r\nassertThat(list).isEqualTo(list(2, 3));\r\n```"]