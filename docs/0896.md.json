["```\r\n<dependency>\r\n    <groupId>org.springframework.retry</groupId>\r\n    <artifactId>spring-retry</artifactId>\r\n    <version>1.2.5.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-aspects</artifactId>\r\n    <version>5.2.8.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableRetry\r\npublic class AppConfig { ... }\r\n```","```\r\n@Service\r\npublic interface MyService {\r\n    @Retryable(value = RuntimeException.class)\r\n    void retryService(String sql);\r\n\r\n}\r\n```","```\r\n@Service\r\npublic interface MyService {\r\n    @Retryable(value = SQLException.class)\r\n    void retryServiceWithRecovery(String sql) throws SQLException;\r\n\r\n    @Recover\r\n    void recover(SQLException e, String sql);\r\n}\r\n```","```\r\n@Service\r\npublic interface MyService {\r\n    @Retryable( value = SQLException.class, \r\n      maxAttempts = 2, backoff = @Backoff(delay = 100))\r\n    void retryServiceWithCustomization(String sql) throws SQLException;\r\n}\r\n```","```\r\nretry.maxAttempts=2\r\nretry.maxDelay=100\r\n```","```\r\n// ...\r\n@PropertySource(\"classpath:retryConfig.properties\")\r\npublic class AppConfig { ... }\r\n```","```\r\n@Service \r\npublic interface MyService { \r\n  @Retryable( value = SQLException.class, maxAttemptsExpression = \"${retry.maxAttempts}\",\r\n            backoff = @Backoff(delayExpression = \"${retry.maxDelay}\")) \r\n  void retryServiceWithExternalConfiguration(String sql) throws SQLException; \r\n}\r\n```","```\r\npublic interface RetryOperations {\r\n    <T> T execute(RetryCallback<T> retryCallback) throws Exception;\r\n\r\n    ...\r\n}\r\n```","```\r\npublic interface RetryCallback<T> {\r\n    T doWithRetry(RetryContext context) throws Throwable;\r\n}\r\n```","```\r\n@Configuration\r\npublic class AppConfig {\r\n    //...\r\n    @Bean\r\n    public RetryTemplate retryTemplate() {\r\n        RetryTemplate retryTemplate = new RetryTemplate();\r\n\r\n        FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();\r\n        fixedBackOffPolicy.setBackOffPeriod(2000l);\r\n        retryTemplate.setBackOffPolicy(fixedBackOffPolicy);\r\n\r\n        SimpleRetryPolicy retryPolicy = new SimpleRetryPolicy();\r\n        retryPolicy.setMaxAttempts(2);\r\n        retryTemplate.setRetryPolicy(retryPolicy);\r\n\r\n        return retryTemplate;\r\n    }\r\n} \r\n```","```\r\nretryTemplate.execute(new RetryCallback<Void, RuntimeException>() {\r\n    @Override\r\n    public Void doWithRetry(RetryContext arg0) {\r\n        myService.templateRetryService();\r\n        ...\r\n    }\r\n});\r\n```","```\r\nretryTemplate.execute(arg0 -> {\r\n    myService.templateRetryService();\r\n    return null;\r\n}); \r\n```","```\r\npublic class DefaultListenerSupport extends RetryListenerSupport {\r\n    @Override\r\n    public <T, E extends Throwable> void close(RetryContext context,\r\n      RetryCallback<T, E> callback, Throwable throwable) {\r\n        logger.info(\"onClose);\r\n        ...\r\n        super.close(context, callback, throwable);\r\n    }\r\n\r\n    @Override\r\n    public <T, E extends Throwable> void onError(RetryContext context,\r\n      RetryCallback<T, E> callback, Throwable throwable) {\r\n        logger.info(\"onError\"); \r\n        ...\r\n        super.onError(context, callback, throwable);\r\n    }\r\n\r\n    @Override\r\n    public <T, E extends Throwable> boolean open(RetryContext context,\r\n      RetryCallback<T, E> callback) {\r\n        logger.info(\"onOpen);\r\n        ...\r\n        return super.open(context, callback);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class AppConfig {\r\n    ...\r\n\r\n    @Bean\r\n    public RetryTemplate retryTemplate() {\r\n        RetryTemplate retryTemplate = new RetryTemplate();\r\n        ...\r\n        retryTemplate.registerListener(new DefaultListenerSupport());\r\n        return retryTemplate;\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = AppConfig.class,\r\n  loader = AnnotationConfigContextLoader.class)\r\npublic class SpringRetryIntegrationTest {\r\n\r\n    @Autowired\r\n    private MyService myService;\r\n\r\n    @Autowired\r\n    private RetryTemplate retryTemplate;\r\n\r\n    @Test(expected = RuntimeException.class)\r\n    public void givenTemplateRetryService_whenCallWithException_thenRetry() {\r\n        retryTemplate.execute(arg0 -> {\r\n            myService.templateRetryService();\r\n            return null;\r\n        });\r\n    }\r\n}\r\n```","```\r\n2020-01-09 20:04:10 [main] INFO  o.b.s.DefaultListenerSupport - onOpen \r\n2020-01-09 20:04:10 [main] INFO  o.baeldung.springretry.MyServiceImpl\r\n- throw RuntimeException in method templateRetryService() \r\n2020-01-09 20:04:10 [main] INFO  o.b.s.DefaultListenerSupport - onError \r\n2020-01-09 20:04:12 [main] INFO  o.baeldung.springretry.MyServiceImpl\r\n- throw RuntimeException in method templateRetryService() \r\n2020-01-09 20:04:12 [main] INFO  o.b.s.DefaultListenerSupport - onError \r\n2020-01-09 20:04:12 [main] INFO  o.b.s.DefaultListenerSupport - onClose\r\n```"]