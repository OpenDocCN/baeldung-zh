["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-cache</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.github.ben-manes.caffeine</groupId>\r\n        <artifactId>caffeine</artifactId>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@Bean\r\npublic Caffeine caffeineConfig() {\r\n    return Caffeine.newBuilder().expireAfterWrite(60, TimeUnit.MINUTES);\r\n}\r\n```","```\r\n@Bean\r\npublic CacheManager cacheManager(Caffeine caffeine) {\r\n    CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();\r\n    caffeineCacheManager.setCaffeine(caffeine);\r\n    return caffeineCacheManager;\r\n}\r\n```","```\r\n@Service\r\npublic class AddressService {\r\n    @Cacheable\r\n    public AddressDTO getAddress(long customerId) {\r\n        // lookup and return result\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class AddressService {\r\n    @Cacheable(value = \"address_cache\", key = \"customerId\")\r\n    public AddressDTO getAddress(long customerId) {\r\n        // lookup and return result\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class AddressService {\r\n\r\n    @Autowired\r\n    CacheManager cacheManager;\r\n\r\n    public AddressDTO getAddress(long customerId) {\r\n        if(cacheManager.containsKey(customerId)) {\r\n            return cacheManager.get(customerId);\r\n        }\r\n\r\n        // lookup address, cache result, and return it\r\n    }\r\n}\r\n```"]