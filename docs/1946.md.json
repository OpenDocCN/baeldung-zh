["```\r\nList<String> letters = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\");\r\nList<String> results = new ArrayList<>();\r\nObservable<String> observable = Observable\r\n  .from(letters)\r\n  .zipWith(\r\n     Observable.range(1, Integer.MAX_VALUE), \r\n     (string, index) -> index + \"-\" + string);\r\n\r\nobservable.subscribe(results::add);\r\n\r\nassertThat(results, notNullValue());\r\nassertThat(results, hasSize(5));\r\nassertThat(results, hasItems(\"1-A\", \"2-B\", \"3-C\", \"4-D\", \"5-E\"));\r\n```","```\r\nList<String> letters = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\");\r\nTestSubscriber<String> subscriber = new TestSubscriber<>();\r\n\r\nObservable<String> observable = Observable\r\n  .from(letters)\r\n  .zipWith(\r\n    Observable.range(1, Integer.MAX_VALUE), \r\n    ((string, index) -> index + \"-\" + string));\r\n\r\nobservable.subscribe(subscriber);\r\n\r\nsubscriber.assertCompleted();\r\nsubscriber.assertNoErrors();\r\nsubscriber.assertValueCount(5);\r\nassertThat(\r\n  subscriber.getOnNextEvents(),\r\n  hasItems(\"1-A\", \"2-B\", \"3-C\", \"4-D\", \"5-E\"));\r\n```","```\r\nList<String> letters = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\");\r\nTestSubscriber<String> subscriber = new TestSubscriber<>();\r\n\r\nObservable<String> observable = Observable\r\n  .from(letters)\r\n  .zipWith(Observable.range(1, Integer.MAX_VALUE), ((string, index) -> index + \"-\" + string))\r\n  .concatWith(Observable.error(new RuntimeException(\"error in Observable\")));\r\n\r\nobservable.subscribe(subscriber);\r\n\r\nsubscriber.assertError(RuntimeException.class);\r\nsubscriber.assertNotCompleted();\r\n```","```\r\nList<String> letters = Arrays.asList(\"A\", \"B\", \"C\", \"D\", \"E\");\r\nTestScheduler scheduler = new TestScheduler();\r\nTestSubscriber<String> subscriber = new TestSubscriber<>();\r\nObservable<Long> tick = Observable.interval(1, TimeUnit.SECONDS, scheduler);\r\n\r\nObservable<String> observable = Observable.from(letters)\r\n  .zipWith(tick, (string, index) -> index + \"-\" + string);\r\n\r\nobservable.subscribeOn(scheduler)\r\n  .subscribe(subscriber);\r\n```","```\r\nsubscriber.assertNoValues();\r\nsubscriber.assertNotCompleted();\r\n```","```\r\nscheduler.advanceTimeBy(1, TimeUnit.SECONDS);\r\n```","```\r\nsubscriber.assertNoErrors();\r\nsubscriber.assertValueCount(1);\r\nsubscriber.assertValues(\"0-A\");\r\n```","```\r\nscheduler.advanceTimeTo(6, TimeUnit.SECONDS);\r\n\r\nsubscriber.assertCompleted();\r\nsubscriber.assertNoErrors();\r\nsubscriber.assertValueCount(5);\r\nassertThat(subscriber.getOnNextEvents(), hasItems(\"0-A\", \"1-B\", \"2-C\", \"3-D\", \"4-E\"));\r\n```"]