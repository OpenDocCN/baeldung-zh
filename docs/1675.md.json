["```\r\nconst express = require('express')\r\nconst app = express()\r\nconst port = 3000\r\n\r\napp.get('/', (req, res) => {\r\n    res.send('Hello World!')\r\n})\r\n\r\napp.get('/health', (req, res) => {\r\n    res.send({ \"status\":\"UP\"})\r\n})\r\n\r\napp.get('/hello/:me', (req, res) => {\r\n    res.send('Hello ' + req.params.me + '!')\r\n})\r\n\r\napp.listen(port, () => {\r\n    console.log(`Hello app listening on port ${port}`)\r\n})\r\n```","```\r\nnpm install express\r\n```","```\r\nnode hello.js\r\n```","```\r\ncurl http://localhost:3000/hello/baeldung\r\nHello baeldung!\r\n```","```\r\ncurl http://localhost:3000/health\r\nstatus\":\"UP\"}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-netflix-sidecar</artifactId>\r\n    <version>2.2.10.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableSidecar\r\npublic class SidecarApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SidecarApplication.class, args);\r\n    }\r\n}\r\n```","```\r\nserver.port: 8084\r\nspring:\r\n  application:\r\n    name: sidecar\r\neureka:\r\n  instance:\r\n    hostname: localhost\r\n    leaseRenewalIntervalInSeconds: 1\r\n    leaseExpirationDurationInSeconds: 2\r\n  client:\r\n    service-url:\r\n      defaultZone: http://127.0.0.1:8761/eureka\r\n    healthcheck:\r\n      enabled: true\r\nsidecar:\r\n  port: 3000\r\n  health-uri: http://localhost:3000/health\r\n```","```\r\n <dependency>\r\n     <groupId>org.springframework.cloud</groupId>\r\n     <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\r\n     <version>2.2.10.RELEASE</version>\r\n </dependency>\r\n <dependency>\r\n     <groupId>org.springframework.cloud</groupId>\r\n     <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\r\n     <version>2.2.10.RELEASE</version>\r\n </dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableEurekaClient\r\n@EnableZuulProxy\r\npublic class EchoApplication {\r\n    // ...\r\n}\r\n```","```\r\nserver.port: 8085\r\nspring:\r\n  application:\r\n    name: echo\r\neureka:\r\n  instance:\r\n    hostname: localhost\r\n    leaseRenewalIntervalInSeconds: 1\r\n    leaseExpirationDurationInSeconds: 2\r\n  client:\r\n    service-url:\r\n      defaultZone: http://127.0.0.1:8761/eureka\r\n ...\r\n```","```\r\ncurl http://localhost:8084/hosts/echo\r\n```","```\r\ncurl http://localhost:8085/sidecar/hello/baeldung\r\nHello baeldung!\r\n```","```\r\n@Autowired\r\nDiscoveryClient discoveryClient;\r\n\r\n@GetMapping(\"/hello/{me}\")\r\npublic ResponseEntity<String> echo(@PathVariable(\"me\") String me) {\r\n    List<ServiceInstance> instances = discoveryClient.getInstances(\"sidecar\");\r\n    if (instances.isEmpty()) {\r\n        return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE).body(\"hello service is down\");\r\n    }\r\n    String url = instances.get(0).getUri().toString();\r\n    return ResponseEntity.ok(restTemplate.getForObject(url + \"/hello/\" + me, String.class));\r\n}\r\n```","```\r\ncurl http://localhost:8085/hello/baeldung\r\nHello baeldung!\r\n```","```\r\ncurl http://localhost:8084/echo/hello/baeldung\r\nHello baeldung!\r\n```"]