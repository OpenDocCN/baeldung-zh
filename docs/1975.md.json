["```\r\n[{\r\n  \"id\": 1,\r\n  \"name\": \"user1\",\r\n}, {\r\n  \"id\": 2,\r\n  \"name\": \"user2\"\r\n}]\r\n```","```\r\npublic class User {\r\n    private int id;\r\n    private String name;\r\n\r\n    // getters and setters..\r\n}\r\n```","```\r\npublic class UserConsumerServiceImpl implements UserConsumerService {\r\n\r\n    private final RestTemplate restTemplate;\r\n\r\n    public UserConsumerServiceImpl(RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n\r\n...\r\n}\r\n```","```\r\nResponseEntity<Object[]> responseEntity =\r\n   restTemplate.getForEntity(BASE_URL, Object[].class);\r\n```","```\r\nObject[] objects = responseEntity.getBody();\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\n```","```\r\nreturn Arrays.stream(objects)\r\n  .map(object -> mapper.convertValue(object, User.class))\r\n  .map(User::getName)\r\n  .collect(Collectors.toList());\r\n```","```\r\n ResponseEntity<User[]> responseEntity = \r\n    restTemplate.getForEntity(BASE_URL, User[].class); \r\n  User[] userArray = responseEntity.getBody();\r\n  return Arrays.stream(userArray) \r\n    .map(User::getName) \r\n    .collect(Collectors.toList());\r\n```","```\r\nResponseEntity<List<User>> responseEntity = \r\n  restTemplate.exchange(\r\n    BASE_URL,\r\n    HttpMethod.GET,\r\n    null,\r\n    new ParameterizedTypeReference<List<User>>() {}\r\n  );\r\nList<User> users = responseEntity.getBody();\r\nreturn users.stream()\r\n  .map(User::getName)\r\n  .collect(Collectors.toList());\r\n```"]