["```\r\n@Transactional\r\npublic void initialPayment(PaymentRequest request) {\r\n    savePaymentRequest(request); // DB\r\n    callThePaymentProviderApi(request); // API\r\n    updatePaymentState(request); // DB\r\n    saveHistoryForAuditing(request); // DB\r\n}\r\n```","```\r\n// test annotations\r\nclass ManualTransactionIntegrationTest {\r\n\r\n    @Autowired\r\n    private PlatformTransactionManager transactionManager;\r\n\r\n    private TransactionTemplate transactionTemplate;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        transactionTemplate = new TransactionTemplate(transactionManager);\r\n    }\r\n\r\n    // omitted\r\n}\r\n```","```\r\n@Entity\r\npublic class Payment {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private Long amount;\r\n\r\n    @Column(unique = true)\r\n    private String referenceNumber;\r\n\r\n    @Enumerated(EnumType.STRING)\r\n    private State state;\r\n\r\n    // getters and setters\r\n\r\n    public enum State {\r\n        STARTED, FAILED, SUCCESSFUL\r\n    }\r\n}\r\n```","```\r\n@DataJpaTest\r\n@Testcontainers\r\n@ActiveProfiles(\"test\")\r\n@AutoConfigureTestDatabase(replace = NONE)\r\n@Transactional(propagation = NOT_SUPPORTED) // we're going to handle transactions manually\r\npublic class ManualTransactionIntegrationTest {\r\n\r\n    @Autowired \r\n    private PlatformTransactionManager transactionManager;\r\n\r\n    @Autowired \r\n    private EntityManager entityManager;\r\n\r\n    @Container\r\n    private static PostgreSQLContainer<?> pg = initPostgres();\r\n\r\n    private TransactionTemplate transactionTemplate;\r\n\r\n    @BeforeEach\r\n    public void setUp() {\r\n        transactionTemplate = new TransactionTemplate(transactionManager);\r\n    }\r\n\r\n    // tests\r\n\r\n    private static PostgreSQLContainer<?> initPostgres() {\r\n        PostgreSQLContainer<?> pg = new PostgreSQLContainer<>(\"postgres:11.1\")\r\n                .withDatabaseName(\"baeldung\")\r\n                .withUsername(\"test\")\r\n                .withPassword(\"test\");\r\n        pg.setPortBindings(singletonList(\"54320:5432\"));\r\n\r\n        return pg;\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPayment_WhenNotDuplicate_ThenShouldCommit() {\r\n    Long id = transactionTemplate.execute(status -> {\r\n        Payment payment = new Payment();\r\n        payment.setAmount(1000L);\r\n        payment.setReferenceNumber(\"Ref-1\");\r\n        payment.setState(Payment.State.SUCCESSFUL);\r\n\r\n        entityManager.persist(payment);\r\n\r\n        return payment.getId();\r\n    });\r\n\r\n    Payment payment = entityManager.find(Payment.class, id);\r\n    assertThat(payment).isNotNull();\r\n}\r\n```","```\r\n@Test\r\nvoid givenTwoPayments_WhenRefIsDuplicate_ThenShouldRollback() {\r\n    try {\r\n        transactionTemplate.execute(status -> {\r\n            Payment first = new Payment();\r\n            first.setAmount(1000L);\r\n            first.setReferenceNumber(\"Ref-1\");\r\n            first.setState(Payment.State.SUCCESSFUL);\r\n\r\n            Payment second = new Payment();\r\n            second.setAmount(2000L);\r\n            second.setReferenceNumber(\"Ref-1\"); // same reference number\r\n            second.setState(Payment.State.SUCCESSFUL);\r\n\r\n            entityManager.persist(first); // ok\r\n            entityManager.persist(second); // fails\r\n\r\n            return \"Ref-1\";\r\n        });\r\n    } catch (Exception ignored) {}\r\n\r\n    assertThat(entityManager.createQuery(\"select p from Payment p\").getResultList()).isEmpty();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPayment_WhenMarkAsRollback_ThenShouldRollback() {\r\n    transactionTemplate.execute(status -> {\r\n        Payment payment = new Payment();\r\n        payment.setAmount(1000L);\r\n        payment.setReferenceNumber(\"Ref-1\");\r\n        payment.setState(Payment.State.SUCCESSFUL);\r\n\r\n        entityManager.persist(payment);\r\n        status.setRollbackOnly();\r\n\r\n        return payment.getId();\r\n    });\r\n\r\n    assertThat(entityManager.createQuery(\"select p from Payment p\").getResultList()).isEmpty();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPayment_WhenNotExpectingAnyResult_ThenShouldCommit() {\r\n    transactionTemplate.execute(new TransactionCallbackWithoutResult() {\r\n        @Override\r\n        protected void doInTransactionWithoutResult(TransactionStatus status) {\r\n            Payment payment = new Payment();\r\n            payment.setReferenceNumber(\"Ref-1\");\r\n            payment.setState(Payment.State.SUCCESSFUL);\r\n\r\n            entityManager.persist(payment);\r\n        }\r\n    });\r\n\r\n    assertThat(entityManager.createQuery(\"select p from Payment p\").getResultList()).hasSize(1);\r\n}\r\n```","```\r\ntransactionTemplate = new TransactionTemplate(transactionManager);\r\ntransactionTemplate.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ);\r\n```","```\r\ntransactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\r\n```","```\r\ntransactionTemplate.setTimeout(1000);\r\n```","```\r\ntransactionTemplate.setReadOnly(true);\r\n```","```\r\nDefaultTransactionDefinition definition = new DefaultTransactionDefinition();\r\ndefinition.setIsolationLevel(TransactionDefinition.ISOLATION_REPEATABLE_READ);\r\ndefinition.setTimeout(3); \r\n```","```\r\n@Test\r\nvoid givenAPayment_WhenUsingTxManager_ThenShouldCommit() {\r\n\r\n    // transaction definition\r\n\r\n    TransactionStatus status = transactionManager.getTransaction(definition);\r\n    try {\r\n        Payment payment = new Payment();\r\n        payment.setReferenceNumber(\"Ref-1\");\r\n        payment.setState(Payment.State.SUCCESSFUL);\r\n\r\n        entityManager.persist(payment);\r\n        transactionManager.commit(status);\r\n    } catch (Exception ex) {\r\n        transactionManager.rollback(status);\r\n    }\r\n\r\n    assertThat(entityManager.createQuery(\"select p from Payment p\").getResultList()).hasSize(1);\r\n}\r\n```"]