["```\r\n(object) instanceof (type)\r\n```","```\r\npublic class Round {\r\n    // implementation details\r\n}\r\n```","```\r\npublic class Ring extends Round {\r\n    // implementation details\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenInstanceIsCorrect_thenReturnTrue() {\r\n    Ring ring = new Ring();\r\n    Assert.assertTrue(ring instanceof Round);\r\n}\r\n```","```\r\npublic interface Shape {\r\n    // implementation details\r\n}\r\n```","```\r\npublic class Circle extends Round implements Shape {\r\n    // implementation details\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenObjectIsInstanceOfType_thenReturnTrue() {\r\n    Circle circle = new Circle();\r\n    Assert.assertTrue(circle instanceof Circle);\r\n}\r\n```","```\r\n@Test\r\npublic void giveWhenInstanceIsOfSubtype_thenReturnTrue() {\r\n    Circle circle = new Circle();\r\n    Assert.assertTrue(circle instanceof Round);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenTypeIsInterface_thenReturnTrue() {\r\n    Circle circle = new Circle();\r\n    Assert.assertTrue(circle instanceof Shape);\r\n}\r\n```","```\r\npublic class Triangle implements Shape {\r\n    // implementation details\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenComparingClassInDiffHierarchy_thenCompilationError() {\r\n    Circle circle = new Circle();\r\n    Assert.assertFalse(circle instanceof Triangle);\r\n}\r\n```","```\r\njava.lang.Error: Unresolved compilation problem:\r\n  Incompatible conditional operand types Circle and Triangle\r\n```","```\r\n@Test\r\npublic void givenWhenTypeIsOfObjectType_thenReturnTrue() {\r\n    Thread thread = new Thread();\r\n    Assert.assertTrue(thread instanceof Object);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenInstanceValueIsNull_thenReturnFalse() {\r\n    Circle circle = null;\r\n    Assert.assertFalse(circle instanceof Round);\r\n}\r\n```","```\r\npublic static <T> void sort(List<T> collection) {\r\n    if (collection instanceof List<String>) {\r\n        // sort strings differently\r\n    }\r\n\r\n    // omitted\r\n}\r\n```","```\r\nerror: illegal generic type for instanceof\r\n        if (collection instanceof List<String>) {\r\n                                      ^\r\n```","```\r\npublic static <T> boolean isOfType(Object input) {\r\n    return input instanceof T; // won't compile\r\n}\r\n```","```\r\nif (collection instanceof List<?>) {\r\n    // do something\r\n}\r\n```"]