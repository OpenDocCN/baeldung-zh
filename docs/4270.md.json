["```\r\npublic List<String> getEvenIndexedStrings(String[] names) {\r\n    List<String> evenIndexedNames = IntStream\r\n      .range(0, names.length)\r\n      .filter(i -> i % 2 == 0)\r\n      .mapToObj(i -> names[i])\r\n      .collect(Collectors.toList());\r\n\r\n    return evenIndexedNames;\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalled_thenReturnListOfEvenIndexedStrings() {\r\n    String[] names \r\n      = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\r\n    List<String> expectedResult \r\n      = Arrays.asList(\"Afrim\", \"Besim\", \"Durim\");\r\n    List<String> actualResult \r\n      = StreamIndices.getEvenIndexedStrings(names);\r\n\r\n    assertEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.codepoetics</groupId>\r\n    <artifactId>protonpack</artifactId>\r\n    <version>1.13</version>\r\n</dependency> \r\n```","```\r\npublic List<Indexed<String>> getEvenIndexedStrings(List<String> names) {\r\n    List<Indexed<String>> list = StreamUtils\r\n      .zipWithIndex(names.stream())\r\n      .filter(i -> i.getIndex() % 2 == 0)\r\n      .collect(Collectors.toList());\r\n\r\n    return list;\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalled_thenReturnListOfEvenIndexedStrings() {\r\n    List<String> names = Arrays.asList(\r\n      \"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\");\r\n    List<Indexed<String>> expectedResult = Arrays.asList(\r\n      Indexed.index(0, \"Afrim\"), \r\n      Indexed.index(2, \"Besim\"), \r\n      Indexed.index(4, \"Durim\"));\r\n    List<Indexed<String>> actualResult \r\n      = StreamIndices.getEvenIndexedStrings(names);\r\n\r\n    assertEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>one.util</groupId>\r\n    <artifactId>streamex</artifactId>\r\n    <version>0.6.5</version>\r\n</dependency>\r\n```","```\r\npublic List<String> getEvenIndexedStringsVersionTwo(List<String> names) {\r\n    return EntryStream.of(names)\r\n      .filterKeyValue((index, name) -> index % 2 == 0)\r\n      .values()\r\n      .toList();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalled_thenReturnListOfEvenIndexedStringsVersionTwo() {\r\n    String[] names \r\n      = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\r\n    List<String> expectedResult \r\n      = Arrays.asList(\"Afrim\", \"Besim\", \"Durim\");\r\n    List<String> actualResult \r\n      = StreamIndices.getEvenIndexedStrings(names);\r\n\r\n   assertEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\npublic List<String> getOddIndexedStringsVersionTwo(String[] names) {\r\n    return Stream\r\n      .of(names)\r\n      .zipWithIndex()\r\n      .filter(tuple -> tuple._2 % 2 == 1)\r\n      .map(tuple -> tuple._1)\r\n      .toJavaList();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalled_thenReturnListOfOddStringsVersionTwo() {\r\n    String[] names \r\n      = {\"Afrim\", \"Bashkim\", \"Besim\", \"Lulzim\", \"Durim\", \"Shpetim\"};\r\n    List<String> expectedResult \r\n      = Arrays.asList(\"Bashkim\", \"Lulzim\", \"Shpetim\");\r\n    List<String> actualResult \r\n      = StreamIndices.getOddIndexedStringsVersionTwo(names);\r\n\r\n    assertEquals(expectedResult, actualResult);\r\n}\r\n```"]