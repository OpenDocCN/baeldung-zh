["```\r\n{\r\n    \"access_token\": \"2e17505e-1c34-4ea6-a901-40e49ba786fa\",\r\n    \"token_type\": \"bearer\",\r\n    \"refresh_token\": \"e5f19364-862d-4212-ad14-9d6275ab1a62\",\r\n    \"expires_in\": 59,\r\n    \"scope\": \"read write\",\r\n}\r\n```","```\r\n@Component\r\npublic class CustomPostZuulFilter extends ZuulFilter {\r\n\r\n    @Override\r\n    public Object run() {\r\n        //...\r\n        Cookie cookie = new Cookie(\"refreshToken\", refreshToken);\r\n        cookie.setHttpOnly(true);\r\n        cookie.setPath(ctx.getRequest().getContextPath() + \"/oauth/token\");\r\n        cookie.setMaxAge(2592000); // 30 days\r\n        ctx.getResponse().addCookie(cookie);\r\n        //...\r\n    }\r\n}\r\n```","```\r\n<input type=\"checkbox\"  ng-model=\"loginData.remember\" id=\"remember\"/>\r\n<label for=\"remember\">Remeber me</label>\r\n```","```\r\nfunction obtainAccessToken(params){\r\n    if (params.username != null){\r\n        if (params.remember != null){\r\n            $cookies.put(\"remember\",\"yes\");\r\n        }\r\n        else {\r\n            $cookies.remove(\"remember\");\r\n        }\r\n    }\r\n    //...\r\n}\r\n```","```\r\napp.factory('rememberMeInterceptor', ['$q', '$injector', '$httpParamSerializer', \r\n  function($q, $injector, $httpParamSerializer) {  \r\n    var interceptor = {\r\n        responseError: function(response) {\r\n            if (response.status == 401){\r\n\r\n                // refresh access token\r\n\r\n                // make the backend call again and chain the request\r\n                return deferred.promise.then(function() {\r\n                    return $http(response.config);\r\n                });\r\n            }\r\n            return $q.reject(response);\r\n        }\r\n    };\r\n    return interceptor;\r\n}]);\r\n```","```\r\nvar $http = $injector.get('$http');\r\nvar $cookies = $injector.get('$cookies');\r\nvar deferred = $q.defer();\r\n\r\nvar refreshData = {grant_type:\"refresh_token\"};\r\n\r\nvar req = {\r\n    method: 'POST',\r\n    url: \"oauth/token\",\r\n    headers: {\"Content-type\": \"application/x-www-form-urlencoded; charset=utf-8\"},\r\n    data: $httpParamSerializer(refreshData)\r\n}\r\n```","```\r\n$http(req).then(\r\n    function(data){\r\n        $http.defaults.headers.common.Authorization= 'Bearer ' + data.data.access_token;\r\n        var expireDate = new Date (new Date().getTime() + (1000 * data.data.expires_in));\r\n        $cookies.put(\"access_token\", data.data.access_token, {'expires': expireDate});\r\n        window.location.href=\"index\";\r\n    },function(){\r\n        console.log(\"error\");\r\n        $cookies.remove(\"access_token\");\r\n        window.location.href = \"login\";\r\n    }\r\n);\r\n```","```\r\n@Component\r\npublic class CustomPreZuulFilter extends ZuulFilter {\r\n\r\n    @Override\r\n    public Object run() {\r\n        //...\r\n        String refreshToken = extractRefreshToken(req);\r\n        if (refreshToken != null) {\r\n            Map<String, String[]> param = new HashMap<String, String[]>();\r\n            param.put(\"refresh_token\", new String[] { refreshToken });\r\n            param.put(\"grant_type\", new String[] { \"refresh_token\" });\r\n\r\n            ctx.setRequest(new CustomHttpServletRequest(req, param));\r\n        }\r\n        //...\r\n    }\r\n}\r\n```","```\r\napp.config(['$httpProvider', function($httpProvider) {  \r\n    $httpProvider.interceptors.push('rememberMeInterceptor');\r\n}]);\r\n```","```\r\n$cookies.put(\"validity\", data.data.expires_in);\r\n```","```\r\nif ($cookies.get(\"remember\") == \"yes\"){\r\n    var validity = $cookies.get(\"validity\");\r\n    if (validity >10) validity -= 10;\r\n    $timeout( function(){ $scope.refreshAccessToken(); }, validity * 1000);\r\n}\r\n```"]