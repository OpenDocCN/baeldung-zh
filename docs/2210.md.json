["```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-registry-atlas</artifactId>\r\n    <version>1.7.1</version>\r\n</dependency>\r\n```","```\r\nCompositeMeterRegistry compositeRegistry = new CompositeMeterRegistry();\r\nSimpleMeterRegistry oneSimpleMeter = new SimpleMeterRegistry();\r\nAtlasMeterRegistry atlasMeterRegistry \r\n  = new AtlasMeterRegistry(atlasConfig, Clock.SYSTEM);\r\n\r\ncompositeRegistry.add(oneSimpleMeter);\r\ncompositeRegistry.add(atlasMeterRegistry);\r\n```","```\r\n@Test\r\npublic void givenGlobalRegistry_whenIncrementAnywhere_thenCounted() {\r\n    class CountedObject {\r\n        private CountedObject() {\r\n            Metrics.counter(\"objects.instance\").increment(1.0);\r\n        }\r\n    }\r\n    Metrics.addRegistry(new SimpleMeterRegistry());\r\n\r\n    Metrics.counter(\"objects.instance\").increment();\r\n    new CountedObject();\r\n\r\n    Optional<Counter> counterOptional = Optional.ofNullable(Metrics.globalRegistry\r\n      .find(\"objects.instance\").counter());\r\n    assertTrue(counterOptional.isPresent());\r\n    assertTrue(counterOptional.get().count() == 2.0);\r\n}\r\n```","```\r\nCounter counter = registry.counter(\"page.visitors\", \"age\", \"20s\");\r\n```","```\r\nregistry.config().commonTags(\"region\", \"ua-east\");\r\n```","```\r\nCounter counter = Counter\r\n  .builder(\"instance\")\r\n  .description(\"indicates instance count of the object\")\r\n  .tags(\"dev\", \"performance\")\r\n  .register(registry);\r\n\r\ncounter.increment(2.0);\r\n\r\nassertTrue(counter.count() == 2);\r\n\r\ncounter.increment(-1);\r\n\r\nassertTrue(counter.count() == 1);\r\n```","```\r\nSimpleMeterRegistry registry = new SimpleMeterRegistry();\r\nTimer timer = registry.timer(\"app.event\");\r\ntimer.record(() -> {\r\n    try {\r\n        TimeUnit.MILLISECONDS.sleep(15);\r\n    } catch (InterruptedException ignored) {\r\n    }\r\n    });\r\n\r\ntimer.record(30, TimeUnit.MILLISECONDS);\r\n\r\nassertTrue(2 == timer.count());\r\nassertThat(timer.totalTime(TimeUnit.MILLISECONDS)).isBetween(40.0, 55.0);\r\n```","```\r\nSimpleMeterRegistry registry = new SimpleMeterRegistry();\r\nLongTaskTimer longTaskTimer = LongTaskTimer\r\n  .builder(\"3rdPartyService\")\r\n  .register(registry);\r\n\r\nLongTaskTimer.Sample currentTaskId = longTaskTimer.start();\r\ntry {\r\n    TimeUnit.MILLISECONDS.sleep(2);\r\n} catch (InterruptedException ignored) { }\r\nlong timeElapsed = currentTaskId.stop();\r\n\r\n assertEquals(2L, timeElapsed/((int) 1e6),1L);\r\n```","```\r\nSimpleMeterRegistry registry = new SimpleMeterRegistry();\r\nList<String> list = new ArrayList<>(4);\r\n\r\nGauge gauge = Gauge\r\n  .builder(\"cache.size\", list, List::size)\r\n  .register(registry);\r\n\r\nassertTrue(gauge.value() == 0.0);\r\n\r\nlist.add(\"1\");\r\n\r\nassertTrue(gauge.value() == 1.0);\r\n```","```\r\nSimpleMeterRegistry registry = new SimpleMeterRegistry();\r\nDistributionSummary distributionSummary = DistributionSummary\r\n  .builder(\"request.size\")\r\n  .baseUnit(\"bytes\")\r\n  .register(registry);\r\n\r\ndistributionSummary.record(3);\r\ndistributionSummary.record(4);\r\ndistributionSummary.record(5);\r\n\r\nassertTrue(3 == distributionSummary.count());\r\nassertTrue(12 == distributionSummary.totalAmount());\r\n```","```\r\nSimpleMeterRegistry registry = new SimpleMeterRegistry();\r\nTimer timer = Timer\r\n  .builder(\"test.timer\")\r\n  .publishPercentiles(0.3, 0.5, 0.95)\r\n  .publishPercentileHistogram()\r\n  .register(registry);\r\n```","```\r\ntimer.record(2, TimeUnit.SECONDS);\r\ntimer.record(2, TimeUnit.SECONDS);\r\ntimer.record(3, TimeUnit.SECONDS);\r\ntimer.record(4, TimeUnit.SECONDS);\r\ntimer.record(8, TimeUnit.SECONDS);\r\ntimer.record(13, TimeUnit.SECONDS);\r\n```","```\r\nMap<Double, Double> actualMicrometer = new TreeMap<>();\r\nValueAtPercentile[] percentiles = timer.takeSnapshot().percentileValues();\r\nfor (ValueAtPercentile percentile : percentiles) {\r\n    actualMicrometer.put(percentile.percentile(), percentile.value(TimeUnit.MILLISECONDS));\r\n}\r\n\r\nMap<Double, Double> expectedMicrometer = new TreeMap<>();\r\nexpectedMicrometer.put(0.3, 1946.157056);\r\nexpectedMicrometer.put(0.5, 3019.89888);\r\nexpectedMicrometer.put(0.95, 13354.663936);\r\n\r\nassertEquals(expectedMicrometer, actualMicrometer);\r\n```","```\r\nDistributionSummary hist = DistributionSummary\r\n  .builder(\"summary\")\r\n  .serviceLevelObjectives(1, 10, 5)\r\n  .register(registry);\r\n```","```\r\nMap<Integer, Double> actualMicrometer = new TreeMap<>();\r\nHistogramSnapshot snapshot = hist.takeSnapshot();\r\nArrays.stream(snapshot.histogramCounts()).forEach(p -> {\r\n  actualMicrometer.put((Integer.valueOf((int) p.bucket())), p.count());\r\n});\r\n\r\nMap<Integer, Double> expectedMicrometer = new TreeMap<>();\r\nexpectedMicrometer.put(1,0D);\r\nexpectedMicrometer.put(10,2D);\r\nexpectedMicrometer.put(5,1D);\r\n\r\nassertEquals(expectedMicrometer, actualMicrometer); \r\n```","```\r\nDuration[] durations = {Duration.ofMillis(25), Duration.ofMillis(300), Duration.ofMillis(600)};\r\nTimer timer = Timer\r\n  .builder(\"timer\")\r\n  .sla(durations)\r\n  .publishPercentileHistogram()\r\n  .register(registry);\r\n```","```\r\nnew LogbackMetrics().bind(registry);\r\n```","```\r\n<dependency>\r\n    <groupId>io.micrometer</groupId>\r\n    <artifactId>micrometer-spring-legacy</artifactId>\r\n    <version>1.3.20</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\nJvmThreadMetrics threadMetrics(){\r\n    return new JvmThreadMetrics();\r\n}\r\n```","```\r\n@RestController\r\n@Timed(\"people\")\r\npublic class PeopleController {\r\n\r\n    @GetMapping(\"/people\")\r\n    @Timed(value = \"people.all\", longTask = true)\r\n    public List<String> listPeople() {\r\n        //...\r\n    }\r\n\r\n}\r\n```","```\r\n[\"people\", \"people.all\", \"jvmBufferCount\", ... ]\r\n```","```\r\nRouterFunctionMetrics metrics = new RouterFunctionMetrics(registry);\r\nRouterFunctions.route(...)\r\n  .filter(metrics.timer(\"server.requests\"));\r\n```"]