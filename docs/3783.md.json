["```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String name;\r\n    private String email;\r\n\r\n    //...\r\n}\r\n```","```\r\n@Entity\r\npublic class Post {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    private String subject;\r\n    @OneToMany(mappedBy = \"post\")\r\n    private List<Comment> comments = new ArrayList<>();\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn\r\n    private User user;\r\n\r\n    //...\r\n}\r\n```","```\r\n@Entity\r\npublic class Comment {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String reply;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn\r\n    private Post post;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn\r\n    private User user;\r\n\r\n    //...\r\n}\r\n```","```\r\nPost  ->  user:User\r\n      ->  comments:List<Comment>\r\n            comments[0]:Comment -> user:User\r\n            comments[1]:Comment -> user:User\r\n```","```\r\n@OneToMany(mappedBy = \"post\", fetch = FetchType.EAGER)\r\nprivate List<Comment> comments = new ArrayList<>();\r\n```","```\r\n@ManyToOne(fetch = FetchType.LAZY) \r\n@JoinColumn(name = \"post_id\") \r\nprivate Post post;\r\n```","```\r\n@NamedEntityGraph(\r\n  name = \"post-entity-graph\",\r\n  attributeNodes = {\r\n    @NamedAttributeNode(\"subject\"),\r\n    @NamedAttributeNode(\"user\"),\r\n    @NamedAttributeNode(\"comments\"),\r\n  }\r\n)\r\n@Entity\r\npublic class Post {\r\n\r\n    @OneToMany(mappedBy = \"post\")\r\n    private List<Comment> comments = new ArrayList<>();\r\n\r\n    //...\r\n}\r\n```","```\r\n@NamedEntityGraph(\r\n  name = \"post-entity-graph-with-comment-users\",\r\n  attributeNodes = {\r\n    @NamedAttributeNode(\"subject\"),\r\n    @NamedAttributeNode(\"user\"),\r\n    @NamedAttributeNode(value = \"comments\", subgraph = \"comments-subgraph\"),\r\n  },\r\n  subgraphs = {\r\n    @NamedSubgraph(\r\n      name = \"comments-subgraph\",\r\n      attributeNodes = {\r\n        @NamedAttributeNode(\"user\")\r\n      }\r\n    )\r\n  }\r\n)\r\n@Entity\r\npublic class Post {\r\n\r\n    @OneToMany(mappedBy = \"post\")\r\n    private List<Comment> comments = new ArrayList<>();\r\n    //...\r\n}\r\n```","```\r\n<entity-mappings>\r\n  <entity class=\"com.baeldung.jpa.entitygraph.Post\" name=\"Post\">\r\n    ...\r\n    <named-entity-graph name=\"post-entity-graph\">\r\n            <named-attribute-node name=\"comments\" />\r\n    </named-entity-graph>\r\n  </entity>\r\n  ...\r\n</entity-mappings>\r\n```","```\r\nEntityGraph<Post> entityGraph = entityManager.createEntityGraph(Post.class);\r\n```","```\r\nentityGraph.addAttributeNodes(\"subject\");\r\nentityGraph.addAttributeNodes(\"user\");\r\n```","```\r\nentityGraph.addSubgraph(\"comments\")\r\n  .addAttributeNodes(\"user\");\r\n```","```\r\nPost post = entityManager.find(Post.class, 1L);\r\n```","```\r\nselect\r\n    post0_.id as id1_1_0_,\r\n    post0_.subject as subject2_1_0_,\r\n    post0_.user_id as user_id3_1_0_ \r\nfrom\r\n    Post post0_ \r\nwhere\r\n    post0_.id=?\r\n```","```\r\nEntityGraph entityGraph = entityManager.getEntityGraph(\"post-entity-graph\");\r\nMap<String, Object> properties = new HashMap<>();\r\nproperties.put(\"javax.persistence.fetchgraph\", entityGraph);\r\nPost post = entityManager.find(Post.class, id, properties);\r\n```","```\r\nselect\r\n    post0_.id as id1_1_0_,\r\n    post0_.subject as subject2_1_0_,\r\n    post0_.user_id as user_id3_1_0_,\r\n    comments1_.post_id as post_id3_0_1_,\r\n    comments1_.id as id1_0_1_,\r\n    comments1_.id as id1_0_2_,\r\n    comments1_.post_id as post_id3_0_2_,\r\n    comments1_.reply as reply2_0_2_,\r\n    comments1_.user_id as user_id4_0_2_,\r\n    user2_.id as id1_2_3_,\r\n    user2_.email as email2_2_3_,\r\n    user2_.name as name3_2_3_ \r\nfrom\r\n    Post post0_ \r\nleft outer join\r\n    Comment comments1_ \r\n        on post0_.id=comments1_.post_id \r\nleft outer join\r\n    User user2_ \r\n        on post0_.user_id=user2_.id \r\nwhere\r\n    post0_.id=?\r\n```","```\r\nEntityGraph entityGraph = entityManager.getEntityGraph(\"post-entity-graph-with-comment-users\");\r\nPost post = entityManager.createQuery(\"select p from Post p where p.id = :id\", Post.class)\r\n  .setParameter(\"id\", id)\r\n  .setHint(\"javax.persistence.fetchgraph\", entityGraph)\r\n  .getSingleResult();\r\n```","```\r\nEntityGraph entityGraph = entityManager.getEntityGraph(\"post-entity-graph-with-comment-users\");\r\nCriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();\r\nCriteriaQuery<Post> criteriaQuery = criteriaBuilder.createQuery(Post.class);\r\nRoot<Post> root = criteriaQuery.from(Post.class);\r\ncriteriaQuery.where(criteriaBuilder.equal(root.<Long>get(\"id\"), id));\r\nTypedQuery<Post> typedQuery = entityManager.createQuery(criteriaQuery);\r\ntypedQuery.setHint(\"javax.persistence.loadgraph\", entityGraph);\r\nPost post = typedQuery.getSingleResult();\r\n```"]