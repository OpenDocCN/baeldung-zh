["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-batch</artifactId>\r\n    <version>2.6.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <version>2.6.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.batch</groupId>\r\n    <artifactId>spring-batch-test</artifactId>\r\n    <version>4.3.0.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic Step step1(\r\n  ItemReader<BookRecord> csvItemReader, ItemWriter<Book> jsonItemWriter) throws IOException {\r\n    return stepBuilderFactory\r\n      .get(\"step1\")\r\n      .<BookRecord, Book> chunk(3)\r\n      .reader(csvItemReader)\r\n      .processor(bookItemProcessor())\r\n      .writer(jsonItemWriter)\r\n      .build();\r\n}\r\n\r\n@Bean\r\npublic Step step2(\r\n  ItemReader<BookRecord> csvItemReader, ItemWriter<BookDetails> listItemWriter) {\r\n    return stepBuilderFactory\r\n      .get(\"step2\")\r\n      .<BookRecord, BookDetails> chunk(3)\r\n      .reader(csvItemReader)\r\n      .processor(bookDetailsItemProcessor())\r\n      .writer(listItemWriter)\r\n      .build();\r\n}\r\n```","```\r\nprivate static final String[] TOKENS = { \r\n  \"bookname\", \"bookauthor\", \"bookformat\", \"isbn\", \"publishyear\" };\r\n\r\n@Bean\r\n@StepScope\r\npublic FlatFileItemReader<BookRecord> csvItemReader(\r\n  @Value(\"#{jobParameters['file.input']}\") String input) {\r\n    FlatFileItemReaderBuilder<BookRecord> builder = new FlatFileItemReaderBuilder<>();\r\n    FieldSetMapper<BookRecord> bookRecordFieldSetMapper = new BookRecordFieldSetMapper();\r\n    return builder\r\n      .name(\"bookRecordItemReader\")\r\n      .resource(new FileSystemResource(input))\r\n      .delimited()\r\n      .names(TOKENS)\r\n      .fieldSetMapper(bookRecordFieldSetMapper)\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\n@StepScope\r\npublic JsonFileItemWriter<Book> jsonItemWriter(\r\n  @Value(\"#{jobParameters['file.output']}\") String output) throws IOException {\r\n    JsonFileItemWriterBuilder<Book> builder = new JsonFileItemWriterBuilder<>();\r\n    JacksonJsonObjectMarshaller<Book> marshaller = new JacksonJsonObjectMarshaller<>();\r\n    return builder\r\n      .name(\"bookItemWriter\")\r\n      .jsonObjectMarshaller(marshaller)\r\n      .resource(new FileSystemResource(output))\r\n      .build();\r\n} \r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBatchApplication implements CommandLineRunner {\r\n\r\n    // autowired jobLauncher and transformBooksRecordsJob\r\n\r\n    @Value(\"${file.input}\")\r\n    private String input;\r\n\r\n    @Value(\"${file.output}\")\r\n    private String output;\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        JobParametersBuilder paramsBuilder = new JobParametersBuilder();\r\n        paramsBuilder.addString(\"file.input\", input);\r\n        paramsBuilder.addString(\"file.output\", output);\r\n        jobLauncher.run(transformBooksRecordsJob, paramsBuilder.toJobParameters());\r\n   }\r\n\r\n   // other methods (main etc.)\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBatchTest\r\n@EnableAutoConfiguration\r\n@ContextConfiguration(classes = { SpringBatchConfiguration.class })\r\n@TestExecutionListeners({ DependencyInjectionTestExecutionListener.class, \r\n  DirtiesContextTestExecutionListener.class})\r\n@DirtiesContext(classMode = ClassMode.AFTER_CLASS)\r\npublic class SpringBatchIntegrationTest {\r\n\r\n    // other test constants\r\n\r\n    @Autowired\r\n    private JobLauncherTestUtils jobLauncherTestUtils;\r\n\r\n    @Autowired\r\n    private JobRepositoryTestUtils jobRepositoryTestUtils;\r\n\r\n    @After\r\n    public void cleanUp() {\r\n        jobRepositoryTestUtils.removeJobExecutions();\r\n    }\r\n\r\n    private JobParameters defaultJobParameters() {\r\n        JobParametersBuilder paramsBuilder = new JobParametersBuilder();\r\n        paramsBuilder.addString(\"file.input\", TEST_INPUT);\r\n        paramsBuilder.addString(\"file.output\", TEST_OUTPUT);\r\n        return paramsBuilder.toJobParameters();\r\n   } \r\n```","```\r\n@Test\r\npublic void givenReferenceOutput_whenJobExecuted_thenSuccess() throws Exception {\r\n    // given\r\n    FileSystemResource expectedResult = new FileSystemResource(EXPECTED_OUTPUT);\r\n    FileSystemResource actualResult = new FileSystemResource(TEST_OUTPUT);\r\n\r\n    // when\r\n    JobExecution jobExecution = jobLauncherTestUtils.launchJob(defaultJobParameters());\r\n    JobInstance actualJobInstance = jobExecution.getJobInstance();\r\n    ExitStatus actualJobExitStatus = jobExecution.getExitStatus();\r\n\r\n    // then\r\n    assertThat(actualJobInstance.getJobName(), is(\"transformBooksRecords\"));\r\n    assertThat(actualJobExitStatus.getExitCode(), is(\"COMPLETED\"));\r\n    AssertFile.assertFileEquals(expectedResult, actualResult);\r\n}\r\n```","```\r\n@Test\r\npublic void givenReferenceOutput_whenStep1Executed_thenSuccess() throws Exception {\r\n    // given\r\n    FileSystemResource expectedResult = new FileSystemResource(EXPECTED_OUTPUT);\r\n    FileSystemResource actualResult = new FileSystemResource(TEST_OUTPUT);\r\n\r\n    // when\r\n    JobExecution jobExecution = jobLauncherTestUtils.launchStep(\r\n      \"step1\", defaultJobParameters()); \r\n    Collection actualStepExecutions = jobExecution.getStepExecutions();\r\n    ExitStatus actualJobExitStatus = jobExecution.getExitStatus();\r\n\r\n    // then\r\n    assertThat(actualStepExecutions.size(), is(1));\r\n    assertThat(actualJobExitStatus.getExitCode(), is(\"COMPLETED\"));\r\n    AssertFile.assertFileEquals(expectedResult, actualResult);\r\n}\r\n\r\n@Test\r\npublic void whenStep2Executed_thenSuccess() {\r\n    // when\r\n    JobExecution jobExecution = jobLauncherTestUtils.launchStep(\r\n      \"step2\", defaultJobParameters());\r\n    Collection actualStepExecutions = jobExecution.getStepExecutions();\r\n    ExitStatus actualExitStatus = jobExecution.getExitStatus();\r\n\r\n    // then\r\n    assertThat(actualStepExecutions.size(), is(1));\r\n    assertThat(actualExitStatus.getExitCode(), is(\"COMPLETED\"));\r\n    actualStepExecutions.forEach(stepExecution -> {\r\n        assertThat(stepExecution.getWriteCount(), is(8));\r\n    });\r\n}\r\n```","```\r\n// previously autowired itemReader\r\n\r\n@Test\r\npublic void givenMockedStep_whenReaderCalled_thenSuccess() throws Exception {\r\n    // given\r\n    StepExecution stepExecution = MetaDataInstanceFactory\r\n      .createStepExecution(defaultJobParameters());\r\n\r\n    // when\r\n    StepScopeTestUtils.doInStepScope(stepExecution, () -> {\r\n        BookRecord bookRecord;\r\n        itemReader.open(stepExecution.getExecutionContext());\r\n        while ((bookRecord = itemReader.read()) != null) {\r\n\r\n            // then\r\n            assertThat(bookRecord.getBookName(), is(\"Foundation\"));\r\n            assertThat(bookRecord.getBookAuthor(), is(\"Asimov I.\"));\r\n            assertThat(bookRecord.getBookISBN(), is(\"ISBN 12839\"));\r\n            assertThat(bookRecord.getBookFormat(), is(\"hardcover\"));\r\n            assertThat(bookRecord.getPublishingYear(), is(\"2018\"));\r\n        }\r\n        itemReader.close();\r\n        return null;\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void givenMockedStep_whenWriterCalled_thenSuccess() throws Exception {\r\n    // given\r\n    FileSystemResource expectedResult = new FileSystemResource(EXPECTED_OUTPUT_ONE);\r\n    FileSystemResource actualResult = new FileSystemResource(TEST_OUTPUT);\r\n    Book demoBook = new Book();\r\n    demoBook.setAuthor(\"Grisham J.\");\r\n    demoBook.setName(\"The Firm\");\r\n    StepExecution stepExecution = MetaDataInstanceFactory\r\n      .createStepExecution(defaultJobParameters());\r\n\r\n    // when\r\n    StepScopeTestUtils.doInStepScope(stepExecution, () -> {\r\n        jsonItemWriter.open(stepExecution.getExecutionContext());\r\n        jsonItemWriter.write(Arrays.asList(demoBook));\r\n        jsonItemWriter.close();\r\n        return null;\r\n    });\r\n\r\n    // then\r\n    AssertFile.assertFileEquals(expectedResult, actualResult);\r\n} \r\n```"]