["```\r\nboolean add(E e);\r\nboolean offer(E e);\r\n```","```\r\nE remove();\r\nE poll();\r\n```","```\r\nE element();\r\nE peek();\r\n```","```\r\npublic interface Queue<E> extends Collection<E> {\r\n    // ...\r\n}\r\n```","```\r\npublic class FifoFixedSizeQueue<E> extends AbstractQueue<E> {\r\n    final Object[] items;\r\n    int count;\r\n\r\n    public FifoFixedSizeQueue(int capacity) {\r\n        super();\r\n\r\n        items = new Object[capacity];\r\n        count = 0;\r\n    }\r\n\r\n    ...\r\n} \r\n```","```\r\npublic boolean offer(E e) {\r\n    if (e == null) {\r\n        throw new NullPointerException(\"Queue doesn't allow nulls\");\r\n    }\r\n    if (count == items.length) {\r\n        this.poll();\r\n    }\r\n    this.items[count] = e;\r\n    count++;\r\n    return true;\r\n} \r\n```","```\r\nif (e == null) {\r\n    throw new NullPointerException(\"Queue doesn't allow nulls\");\r\n} \r\n```","```\r\nwhile (count >= items.length) {\r\n    this.poll();\r\n} \r\n```","```\r\nthis.items[count] = e;\r\ncount++; \r\n```","```\r\n@Override\r\npublic E poll() {\r\n    if (count <= 0) {\r\n        return null;\r\n    }\r\n    E item = (E) items[0];\r\n    shiftLeft();\r\n    count--;\r\n    return item;\r\n} \r\n```","```\r\nif (count <= 0) {\r\n    return null;\r\n} \r\n```","```\r\nE item = (E) items[0];\r\nshiftLeft();\r\n```","```\r\nprivate void shiftLeft() {\r\n    int i = 1;\r\n    while (i < items.length) {\r\n        if (items[i] == null) {\r\n            break;\r\n        }\r\n        items[i - 1] = items[i];\r\n        i++;\r\n    }\r\n} \r\n```","```\r\npublic E peek() {\r\n    if (count <= 0) {\r\n        return null;\r\n    }\r\n    return (E) items[0];\r\n}\r\n```"]