["```\r\nForkJoinPool forkJoinPool = new ForkJoinPool(2);\r\nforkJoinPool.submit(() -> /*some parallel stream pipeline */)\r\n  .get();\r\n```","```\r\npublic static int getLength(String input) {\r\n    if (StringUtils.isEmpty(input) {\r\n        throw new IllegalArgumentException();\r\n    }\r\n    return input.length();\r\n}\r\n\r\nList lengths = new ArrayList();\r\n\r\nfor (String name : Arrays.asList(args)) {\r\n    lengths.add(getLength(name));\r\n}\r\n```","```\r\nat LmbdaMain.getLength(LmbdaMain.java:19)\r\nat LmbdaMain.main(LmbdaMain.java:34)\r\n```","```\r\nStream lengths = names.stream()\r\n  .map(name -> getLength(name));\r\n```","```\r\nat LmbdaMain.getLength(LmbdaMain.java:19)\r\nat LmbdaMain.lambda$0(LmbdaMain.java:37)\r\nat LmbdaMain$$Lambda$1/821270929.apply(Unknown Source)\r\nat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\r\nat java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\nat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\r\nat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\r\nat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\r\nat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\nat java.util.stream.LongPipeline.reduce(LongPipeline.java:438)\r\nat java.util.stream.LongPipeline.sum(LongPipeline.java:396)\r\nat java.util.stream.ReferencePipeline.count(ReferencePipeline.java:526)\r\nat LmbdaMain.main(LmbdaMain.java:39)\r\n```","```\r\nstatic void writeToFile(Integer integer) throws IOException {\r\n    // logic to write to file which throws IOException\r\n}\r\n```","```\r\nList<Integer> integers = Arrays.asList(3, 9, 7, 0, 10, 20);\r\nintegers.forEach(i -> writeToFile(i));\r\n```","```\r\nList<Integer> integers = Arrays.asList(3, 9, 7, 0, 10, 20);\r\nintegers.forEach(i -> {\r\n    try {\r\n        writeToFile(i);\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n});\r\n```","```\r\n@FunctionalInterface\r\npublic interface ThrowingConsumer<T, E extends Exception> {\r\n    void accept(T t) throws E;\r\n}\r\n```","```\r\nstatic <T> Consumer<T> throwingConsumerWrapper(\r\n  ThrowingConsumer<T, Exception> throwingConsumer) {\r\n\r\n    return i -> {\r\n        try {\r\n            throwingConsumer.accept(i);\r\n        } catch (Exception ex) {\r\n            throw new RuntimeException(ex);\r\n        }\r\n    };\r\n}\r\n```"]