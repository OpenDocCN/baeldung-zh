["```\r\n$ ./lein\r\nDownloading Leiningen to /Users/user/.lein/self-installs/leiningen-2.8.3-standalone.jar now...\r\n.....\r\nLeiningen is a tool for working with Clojure projects.\r\n\r\nSeveral tasks are available:\r\n.....\r\n\r\nRun `lein help $TASK` for details.\r\n\r\n.....\r\n```","```\r\n$ ./lein new app my-project\r\nGenerating a project called my-project based on the 'app' template.\r\n```","```\r\n(defproject my-project \"0.1.0-SNAPSHOT\"\r\n  :description \"FIXME: write description\"\r\n  :url \"http://example.com/FIXME\"\r\n  :license {:name \"EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\"\r\n            :url \"https://www.eclipse.org/legal/epl-2.0/\"}\r\n  :dependencies [[org.clojure/clojure \"1.9.0\"]]\r\n  :main ^:skip-aot my-project.core\r\n  :target-path \"target/%s\"\r\n  :profiles {:uberjar {:aot :all}})\r\n```","```\r\n(ns my-project.core\r\n  (:gen-class))\r\n\r\n(defn -main\r\n  \"I don't do a whole lot ... yet.\"\r\n  [& args]\r\n  (println \"Hello, World!\"))\r\n```","```\r\n$ lein repl\r\nnREPL server started on port 62856 on host 127.0.0.1 - nrepl://127.0.0.1:62856\r\n[]REPL-y 0.4.3, nREPL 0.5.3\r\nClojure 1.9.0\r\nJava HotSpot(TM) 64-Bit Server VM 1.8.0_77-b03\r\n\r\n    Docs: (doc function-name-here)\r\n          (find-doc \"part-of-name-here\")\r\n  Source: (source function-name-here)\r\n Javadoc: (javadoc java-object-or-class-here)\r\n    Exit: Control+D or (exit) or (quit)\r\n Results: Stored in vars *1, *2, *3, an exception in *e\r\n\r\nmy-project.core=> (-main)\r\nHello, World!\r\nnil\r\n```","```\r\n$ lein run\r\nHello, World!\r\n```","```\r\n$ lein jar\r\nCreated /Users/user/source/me/my-library/target/my-library-0.1.0-SNAPSHOT.jar\r\n```","```\r\n$ lein install\r\nCreated /Users/user/source/me/my-library/target/my-library-0.1.0-SNAPSHOT.jar\r\nWrote /Users/user/source/me/my-library/pom.xml\r\nInstalled jar and pom into local repo.\r\n```","```\r\n$ lein uberjar\r\nCompiling my-project.core\r\nCreated /Users/user/source/me/my-project/target/uberjar/my-project-0.1.0-SNAPSHOT.jar\r\nCreated /Users/user/source/me/my-project/target/uberjar/my-project-0.1.0-SNAPSHOT-standalone.jar\r\n```","```\r\n$ java -jar target/uberjar/my-project-0.1.0-SNAPSHOT-standalone.jar\r\nHello, World!\r\n```","```\r\n :dependencies [[org.clojure/clojure \"1.9.0\"] [clj-json \"0.5.3\"]]\r\n```","```\r\n$ lein repl\r\nRetrieving clj-json/clj-json/0.5.3/clj-json-0.5.3.pom from clojars\r\nRetrieving clj-json/clj-json/0.5.3/clj-json-0.5.3.jar from clojars\r\nnREPL server started on port 62146 on host 127.0.0.1 - nrepl://127.0.0.1:62146\r\nREPL-y 0.4.3, nREPL 0.5.3\r\nClojure 1.9.0\r\nJava HotSpot(TM) 64-Bit Server VM 1.8.0_77-b03\r\n    Docs: (doc function-name-here)\r\n          (find-doc \"part-of-name-here\")\r\n  Source: (source function-name-here)\r\n Javadoc: (javadoc java-object-or-class-here)\r\n    Exit: Control+D or (exit) or (quit)\r\n Results: Stored in vars *1, *2, *3, an exception in *e\r\n\r\nmy-project.core=> (require '(clj-json [core :as json]))\r\nnil\r\nmy-project.core=> (json/generate-string {\"foo\" \"bar\"})\r\n\"{\\\"foo\\\":\\\"bar\\\"}\"\r\nmy-project.core=>\r\n```","```\r\n(ns my-project.core\r\n  (:gen-class))\r\n\r\n(require '(clj-json [core :as json]))\r\n\r\n(defn -main\r\n  \"I don't do a whole lot ... yet.\"\r\n  [& args]\r\n  (println (json/generate-string {\"foo\" \"bar\"})))\r\n```","```\r\n$ lein run\r\n{\"foo\":\"bar\"}\r\n```","```\r\n$ lein search json\r\nSearching central ...\r\n[com.jwebmp/json \"0.63.0.60\"]\r\n[com.ufoscout.coreutils/json \"3.7.4\"]\r\n[com.github.iarellano/json \"20190129\"]\r\n.....\r\nSearching clojars ...\r\n[cheshire \"5.8.1\"]\r\n  JSON and JSON SMILE encoding, fast.\r\n[json-html \"0.4.4\"]\r\n  Provide JSON and get a DOM node with a human representation of that JSON\r\n[ring/ring-json \"0.5.0-beta1\"]\r\n  Ring middleware for handling JSON\r\n[clj-json \"0.5.3\"]\r\n  Fast JSON encoding and decoding for Clojure via the Jackson library.\r\n.....\r\n```","```\r\n(ns my-project.core-test\r\n  (:require [clojure.test :refer :all]\r\n            [my-project.core :refer :all]))\r\n\r\n(deftest a-test\r\n  (testing \"FIXME, I fail.\"\r\n    (is (= 0 1))))\r\n```","```\r\n$ lein test\r\nlein test my-project.core-test\r\n\r\nlein test :only my-project.core-test/a-test\r\n\r\nFAIL in (a-test) (core_test.clj:7)\r\nFIXME, I fail.\r\nexpected: (= 0 1)\r\n  actual: (not (= 0 1))\r\n\r\nRan 1 tests containing 1 assertions.\r\n1 failures, 0 errors.\r\nTests failed.\r\n```","```\r\n$ lein test\r\nlein test my-project.core-test\r\n\r\nRan 1 tests containing 1 assertions.\r\n0 failures, 0 errors.\r\n```","```\r\n$ lein test my-project.core-test\r\n\r\nlein test my-project.core-test\r\n\r\nRan 1 tests containing 1 assertions.\r\n0 failures, 0 errors.\r\n\r\n$ lein test my-project.unknown\r\n\r\nlein test my-project.unknown\r\n\r\nRan 0 tests containing 0 assertions.\r\n0 failures, 0 errors.\r\n```"]