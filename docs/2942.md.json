["```\r\n<dependency>\r\n    <groupId>com.hazelcast.jet</groupId>\r\n    <artifactId>hazelcast-jet</artifactId>\r\n    <version>4.2</version>\r\n</dependency>\r\n```","```\r\nprivate Pipeline createPipeLine() {\r\n    Pipeline p = Pipeline.create();\r\n    p.readFrom(Sources.<String>list(LIST_NAME))\r\n      .flatMap(word -> traverseArray(word.toLowerCase().split(\"\\\\W+\")))\r\n      .filter(word -> !word.isEmpty())\r\n      .groupingKey(wholeItem())\r\n      .aggregate(counting())\r\n      .writeTo(Sinks.map(MAP_NAME));\r\n    return p;\r\n}\r\n```","```\r\npublic Long countWord(List<String> sentences, String word) {\r\n    long count = 0;\r\n    JetInstance jet = Jet.newJetInstance();\r\n    try {\r\n        List<String> textList = jet.getList(LIST_NAME);\r\n        textList.addAll(sentences);\r\n        Pipeline p = createPipeLine();\r\n        jet.newJob(p).join();\r\n        Map<String, Long> counts = jet.getMap(MAP_NAME);\r\n        count = counts.get(word);\r\n        } finally {\r\n            Jet.shutdownAll();\r\n      }\r\n    return count;\r\n}\r\n```","```\r\n@Test\r\npublic void whenGivenSentencesAndWord_ThenReturnCountOfWord() {\r\n    List<String> sentences = new ArrayList<>();\r\n    sentences.add(\"The first second was alright, but the second second was tough.\");\r\n    WordCounter wordCounter = new WordCounter();\r\n    long countSecond = wordCounter.countWord(sentences, \"second\");\r\n    assertEquals(3, countSecond);\r\n}\r\n```"]