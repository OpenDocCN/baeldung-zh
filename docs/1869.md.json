["```\r\n(21,25), (55,53), (70,318), (98,302), (49,229), (135,229), (224,292), (206,321), (197,258), (245,238)\r\n```","```\r\npublic class Point {\r\n    private float x;\r\n    private float y;\r\n\r\n    public Point(float x, float y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    // getters & toString()\r\n}\r\n```","```\r\npublic class Region {\r\n    private float x1;\r\n    private float y1;\r\n    private float x2;\r\n    private float y2;\r\n\r\n    public Region(float x1, float y1, float x2, float y2) {\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n    }\r\n\r\n    // getters & toString()\r\n}\r\n```","```\r\npublic class QuadTree {\r\n    private static final int MAX_POINTS = 3;\r\n    private Region area;\r\n    private List<Point> points = new ArrayList<>();\r\n    private List<QuadTree> quadTrees = new ArrayList<>();\r\n\r\n    public QuadTree(Region area) {\r\n        this.area = area;\r\n    }\r\n}\r\n```","```\r\npublic boolean containsPoint(Point point) {\r\n    return point.getX() >= this.x1 \r\n        && point.getX() < this.x2 \r\n        && point.getY() >= this.y1 \r\n        && point.getY() < this.y2;\r\n}\r\n```","```\r\npublic boolean doesOverlap(Region testRegion) {\r\n    if (testRegion.getX2() < this.getX1()) {\r\n        return false;\r\n    }\r\n    if (testRegion.getX1() > this.getX2()) {\r\n        return false;\r\n    }\r\n    if (testRegion.getY1() > this.getY2()) {\r\n        return false;\r\n    }\r\n    if (testRegion.getY2() < this.getY1()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\npublic Region getQuadrant(int quadrantIndex) {\r\n    float quadrantWidth = (this.x2 - this.x1) / 2;\r\n    float quadrantHeight = (this.y2 - this.y1) / 2;\r\n\r\n    // 0=SW, 1=NW, 2=NE, 3=SE\r\n    switch (quadrantIndex) {\r\n    case 0:\r\n        return new Region(x1, y1, x1 + quadrantWidth, y1 + quadrantHeight);\r\n    case 1:\r\n        return new Region(x1, y1 + quadrantHeight, x1 + quadrantWidth, y2);\r\n    case 2:\r\n        return new Region(x1 + quadrantWidth, y1 + quadrantHeight, x2, y2);\r\n    case 3:\r\n        return new Region(x1 + quadrantWidth, y1, x2, y1 + quadrantHeight);\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic boolean addPoint(Point point) {\r\n    // ...\r\n}\r\n```","```\r\nif (this.area.containsPoint(point)) {\r\n    if (this.points.size() < MAX_POINTS) {\r\n        this.points.add(point);\r\n        return true;\r\n    }\r\n}\r\n```","```\r\nprivate boolean addPointToOneQuadrant(Point point) {\r\n    boolean isPointAdded;\r\n    for (int i = 0; i < 4; i++) {\r\n        isPointAdded = this.quadTrees.get(i)\r\n            .addPoint(point);\r\n        if (isPointAdded)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n```","```\r\nprivate void createQuadrants() {\r\n    Region region;\r\n    for (int i = 0; i < 4; i++) {\r\n        region = this.area.getQuadrant(i);\r\n        quadTrees.add(new QuadTree(region));\r\n    }\r\n}\r\n```","```\r\npublic boolean addPoint(Point point) {\r\n    if (this.area.containsPoint(point)) {\r\n        if (this.points.size() < MAX_POINTS) {\r\n            this.points.add(point);\r\n            return true;\r\n        } else {\r\n            if (this.quadTrees.size() == 0) {\r\n                createQuadrants();\r\n            }\r\n            return addPointToOneQuadrant(point);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\npublic List<Point> search(Region searchRegion, List<Point> matches) {\r\n    if (matches == null) {\r\n        matches = new ArrayList<Point>();\r\n    }\r\n    if (!this.area.doesOverlap(searchRegion)) {\r\n        return matches;\r\n    } else {\r\n        for (Point point : points) {\r\n            if (searchRegion.containsPoint(point)) {\r\n                matches.add(point);\r\n            }\r\n        }\r\n        if (this.quadTrees.size() > 0) {\r\n            for (int i = 0; i < 4; i++) {\r\n                quadTrees.get(i)\r\n                    .search(searchRegion, matches);\r\n            }\r\n        }\r\n    }\r\n    return matches;\r\n}\r\n```","```\r\nRegion area = new Region(0, 0, 400, 400);\r\nQuadTree quadTree = new QuadTree(area);\r\n\r\nfloat[][] points = new float[][] { { 21, 25 }, { 55, 53 }, { 70, 318 }, { 98, 302 }, \r\n    { 49, 229 }, { 135, 229 }, { 224, 292 }, { 206, 321 }, { 197, 258 }, { 245, 238 } };\r\n\r\nfor (int i = 0; i < points.length; i++) {\r\n    Point point = new Point(points[i][0], points[i][1]);\r\n        quadTree.addPoint(point);\r\n}\r\n```","```\r\nRegion searchArea = new Region(200, 200, 250, 250);\r\nList<Point> result = quadTree.search(searchArea, null);\r\n```","```\r\n[[245.0 , 238.0]]\r\n```","```\r\nRegion searchArea = new Region(0, 0, 100, 100);\r\nList<Point> result = quadTree.search(searchArea, null);\r\n```","```\r\n[[21.0 , 25.0], [55.0 , 53.0]]\r\n```"]