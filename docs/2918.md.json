["```\r\n@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\r\npublic class BeanWithoutIdentityReference {\r\n    private int id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = \"id\")\r\n@JsonIdentityReference(alwaysAsId = true)\r\npublic class BeanWithIdentityReference {\r\n    private int id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nBeanWithoutIdentityReference bean \r\n  = new BeanWithoutIdentityReference(1, \"Bean Without Identity Reference Annotation\");\r\nString jsonString = mapper.writeValueAsString(bean);\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"name\": \"Bean Without Identity Reference Annotation\"\r\n}\r\n```","```\r\nBeanWithIdentityReference bean \r\n  = new BeanWithIdentityReference(1, \"Bean With Identity Reference Annotation\");\r\nString jsonString = mapper.writeValueAsString(bean);\r\nassertEquals(\"1\", jsonString);\r\n```","```\r\npublic class BeanWithoutAppend {\r\n    private int id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nBeanWithoutAppend bean = new BeanWithoutAppend(2, \"Bean Without Append Annotation\");\r\nObjectWriter writer \r\n  = mapper.writerFor(BeanWithoutAppend.class).withAttribute(\"version\", \"1.0\");\r\nString jsonString = writer.writeValueAsString(bean);\r\n```","```\r\n{\r\n    \"id\": 2,\r\n    \"name\": \"Bean Without Append Annotation\"\r\n}\r\n```","```\r\n@JsonAppend(attrs = { \r\n  @JsonAppend.Attr(value = \"version\") \r\n})\r\npublic class BeanWithAppend {\r\n    private int id;\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nBeanWithAppend bean = new BeanWithAppend(2, \"Bean With Append Annotation\");\r\nObjectWriter writer \r\n  = mapper.writerFor(BeanWithAppend.class).withAttribute(\"version\", \"1.0\");\r\nString jsonString = writer.writeValueAsString(bean);\r\n```","```\r\n{\r\n    \"id\": 2,\r\n    \"name\": \"Bean With Append Annotation\",\r\n    \"version\": \"1.0\"\r\n}\r\n```","```\r\n@JsonNaming(PropertyNamingStrategies.SnakeCaseStrategy.class)\r\npublic class NamingBean {\r\n    private int id;\r\n    private String beanName;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nNamingBean bean = new NamingBean(3, \"Naming Bean\");\r\nString jsonString = mapper.writeValueAsString(bean);        \r\nassertThat(jsonString, containsString(\"bean_name\"));\r\n```","```\r\n{\r\n    \"id\": 3,\r\n    \"bean_name\": \"Naming Bean\"\r\n}\r\n```","```\r\npublic class PropertyDescriptionBean {\r\n    private int id;\r\n    @JsonPropertyDescription(\"This is a description of the name property\")\r\n    private String name;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nSchemaFactoryWrapper wrapper = new SchemaFactoryWrapper();\r\nmapper.acceptJsonFormatVisitor(PropertyDescriptionBean.class, wrapper);\r\nJsonSchema jsonSchema = wrapper.finalSchema();\r\nString jsonString = mapper.writeValueAsString(jsonSchema);\r\nassertThat(jsonString, containsString(\"This is a description of the name property\"));\r\n```","```\r\n{\r\n    \"type\": \"object\",\r\n    \"id\": \"urn:jsonschema:com:baeldung:jackson:annotation:extra:PropertyDescriptionBean\",\r\n    \"properties\": \r\n    {\r\n        \"name\": \r\n        {\r\n            \"type\": \"string\",\r\n            \"description\": \"This is a description of the name property\"\r\n        },\r\n\r\n        \"id\": \r\n        {\r\n            \"type\": \"integer\"\r\n        }\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"id\": 5,\r\n    \"name\": \"POJO Builder Bean\"\r\n}\r\n```","```\r\n@JsonDeserialize(builder = BeanBuilder.class)\r\npublic class POJOBuilderBean {\r\n    private int identity;\r\n    private String beanName;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@JsonPOJOBuilder(buildMethodName = \"createBean\", withPrefix = \"construct\")\r\npublic class BeanBuilder {\r\n    private int idValue;\r\n    private String nameValue;\r\n\r\n    public BeanBuilder constructId(int id) {\r\n        idValue = id;\r\n        return this;\r\n    }\r\n\r\n    public BeanBuilder constructName(String name) {\r\n        nameValue = name;\r\n        return this;\r\n    }\r\n\r\n    public POJOBuilderBean createBean() {\r\n        return new POJOBuilderBean(idValue, nameValue);\r\n    }\r\n}\r\n```","```\r\nString jsonString = \"{\\\"id\\\":5,\\\"name\\\":\\\"POJO Builder Bean\\\"}\";\r\nPOJOBuilderBean bean = mapper.readValue(jsonString, POJOBuilderBean.class);\r\n\r\nassertEquals(5, bean.getIdentity());\r\nassertEquals(\"POJO Builder Bean\", bean.getBeanName());\r\n```","```\r\npublic class TypeIdBean {\r\n    private int id;\r\n    @JsonTypeId\r\n    private String name;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\nmapper.enableDefaultTyping(DefaultTyping.NON_FINAL);\r\nTypeIdBean bean = new TypeIdBean(6, \"Type Id Bean\");\r\nString jsonString = mapper.writeValueAsString(bean);\r\n\r\nassertThat(jsonString, containsString(\"Type Id Bean\"));\r\n```","```\r\n[\r\n    \"Type Id Bean\",\r\n    {\r\n        \"id\": 6\r\n    }\r\n]\r\n```","```\r\n@JsonTypeInfo(\r\n  use = JsonTypeInfo.Id.NAME, \r\n  include = JsonTypeInfo.As.PROPERTY, \r\n  property = \"@type\"\r\n)\r\n@JsonTypeIdResolver(BeanIdResolver.class)\r\npublic class AbstractBean {\r\n    private int id;\r\n\r\n    protected AbstractBean(int id) {\r\n        this.id = id;\r\n    }\r\n\r\n    // no-arg constructor, getter and setter\r\n}\r\n```","```\r\npublic class FirstBean extends AbstractBean {\r\n    String firstName;\r\n\r\n    public FirstBean(int id, String name) {\r\n        super(id);\r\n        setFirstName(name);\r\n    }\r\n\r\n    // no-arg constructor, getter and setter\r\n}\r\n```","```\r\npublic class LastBean extends AbstractBean {\r\n    String lastName;\r\n\r\n    public LastBean(int id, String name) {\r\n        super(id);\r\n        setLastName(name);\r\n    }\r\n\r\n    // no-arg constructor, getter and setter\r\n}\r\n```","```\r\npublic class BeanContainer {\r\n    private List<AbstractBean> beans;\r\n\r\n    // getter and setter\r\n}\r\n```","```\r\npublic class BeanIdResolver extends TypeIdResolverBase {\r\n\r\n    private JavaType superType;\r\n\r\n    @Override\r\n    public void init(JavaType baseType) {\r\n        superType = baseType;\r\n    }\r\n\r\n    @Override\r\n    public Id getMechanism() {\r\n        return Id.NAME;\r\n    }\r\n\r\n    @Override\r\n    public String idFromValue(Object obj) {\r\n        return idFromValueAndType(obj, obj.getClass());\r\n    }\r\n\r\n    @Override\r\n    public String idFromValueAndType(Object obj, Class<?> subType) {\r\n        String typeId = null;\r\n        switch (subType.getSimpleName()) {\r\n        case \"FirstBean\":\r\n            typeId = \"bean1\";\r\n            break;\r\n        case \"LastBean\":\r\n            typeId = \"bean2\";\r\n        }\r\n        return typeId;\r\n    }\r\n\r\n    @Override\r\n    public JavaType typeFromId(DatabindContext context, String id) {\r\n        Class<?> subType = null;\r\n        switch (id) {\r\n        case \"bean1\":\r\n            subType = FirstBean.class;\r\n            break;\r\n        case \"bean2\":\r\n            subType = LastBean.class;\r\n        }\r\n        return context.constructSpecializedType(superType, subType);\r\n    }\r\n}\r\n```","```\r\nFirstBean bean1 = new FirstBean(1, \"Bean 1\");\r\nLastBean bean2 = new LastBean(2, \"Bean 2\");\r\n\r\nList<AbstractBean> beans = new ArrayList<>();\r\nbeans.add(bean1);\r\nbeans.add(bean2);\r\n\r\nBeanContainer serializedContainer = new BeanContainer();\r\nserializedContainer.setBeans(beans);\r\n```","```\r\nString jsonString = mapper.writeValueAsString(serializedContainer);\r\nassertThat(jsonString, containsString(\"bean1\"));\r\nassertThat(jsonString, containsString(\"bean2\"));\r\n```","```\r\n{\r\n    \"beans\": \r\n    [\r\n        {\r\n            \"@type\": \"bean1\",\r\n            \"id\": 1,\r\n            \"firstName\": \"Bean 1\"\r\n        },\r\n\r\n        {\r\n            \"@type\": \"bean2\",\r\n            \"id\": 2,\r\n            \"lastName\": \"Bean 2\"\r\n        }\r\n    ]\r\n}\r\n```","```\r\nBeanContainer deserializedContainer = mapper.readValue(jsonString, BeanContainer.class);\r\nList<AbstractBean> beanList = deserializedContainer.getBeans();\r\nassertThat(beanList.get(0), instanceOf(FirstBean.class));\r\nassertThat(beanList.get(1), instanceOf(LastBean.class));\r\n```"]