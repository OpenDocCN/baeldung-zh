["```\r\npublic class Transfer {\r\n    private String transactionId;\r\n    private String sender;\r\n    private Long amount;\r\n\r\n    public Transfer(String transactionId, String sender, long amount) {\r\n        this.transactionId = transactionId;\r\n        this.sender = sender;\r\n        this.amount = amount;\r\n    }\r\n\r\n    public String getSender() {\r\n        return sender;\r\n    }\r\n\r\n    public String getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    public Long getAmount() {\r\n        return amount;\r\n    }\r\n} \r\n```","```\r\npublic abstract class TransferService {\r\n\r\n    public boolean transfer(long amount) {\r\n        // connects to the remote service to actually transfer money\r\n    }\r\n\r\n    abstract protected void beforeTransfer(long amount);\r\n\r\n    abstract protected void afterTransfer(long amount, boolean outcome);\r\n} \r\n```","```\r\nimport org.apache.log4j.Logger;\r\nimport com.baeldung.mdc.TransferService;\r\n\r\npublic class Log4JTransferService extends TransferService {\r\n    private Logger logger = Logger.getLogger(Log4JTransferService.class);\r\n\r\n    @Override\r\n    protected void beforeTransfer(long amount) {\r\n        logger.info(\"Preparing to transfer \" + amount + \"$.\");\r\n    }\r\n\r\n    @Override\r\n    protected void afterTransfer(long amount, boolean outcome) {\r\n        logger.info(\r\n          \"Has transfer of \" + amount + \"$ completed successfully ? \" + outcome + \".\");\r\n    }\r\n} \r\n```","```\r\nlog4j.appender.consoleAppender=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.consoleAppender.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.consoleAppender.layout.ConversionPattern=%-4r [%t] %5p %c %x - %m%n\r\nlog4j.rootLogger = TRACE, consoleAppender \r\n```","```\r\npublic class TransferDemo {\r\n\r\n    public static void main(String[] args) {\r\n        ExecutorService executor = Executors.newFixedThreadPool(3);\r\n        TransactionFactory transactionFactory = new TransactionFactory();\r\n        for (int i = 0; i < 10; i++) {\r\n            Transfer tx = transactionFactory.newInstance();\r\n            Runnable task = new Log4JRunnable(tx);            \r\n            executor.submit(task);\r\n        }\r\n        executor.shutdown();\r\n    }\r\n}\r\n```","```\r\npublic class Log4JRunnable implements Runnable {\r\n    private Transfer tx;\r\n\r\n    public Log4JRunnable(Transfer tx) {\r\n        this.tx = tx;\r\n    }\r\n\r\n    public void run() {\r\n        log4jBusinessService.transfer(tx.getAmount());\r\n    }\r\n} \r\n```","```\r\n...\r\n519  [pool-1-thread-3]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1393$.\r\n911  [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Has transfer of 1065$ completed successfully ? true.\r\n911  [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1189$.\r\n989  [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Has transfer of 1350$ completed successfully ? true.\r\n989  [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1178$.\r\n1245 [pool-1-thread-3]  INFO Log4JBusinessService \r\n  - Has transfer of 1393$ completed successfully ? true.\r\n1246 [pool-1-thread-3]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1133$.\r\n1507 [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Has transfer of 1189$ completed successfully ? true.\r\n1508 [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1907$.\r\n1639 [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Has transfer of 1178$ completed successfully ? true.\r\n1640 [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Preparing to transfer 674$.\r\n... \r\n```","```\r\nimport org.apache.log4j.MDC;\r\n\r\npublic class Log4JRunnable implements Runnable {\r\n    private Transfer tx;\r\n    private static Log4JTransferService log4jBusinessService = new Log4JTransferService();\r\n\r\n    public Log4JRunnable(Transfer tx) {\r\n        this.tx = tx;\r\n    }\r\n\r\n    public void run() {\r\n        MDC.put(\"transaction.id\", tx.getTransactionId());\r\n        MDC.put(\"transaction.owner\", tx.getSender());\r\n        log4jBusinessService.transfer(tx.getAmount());\r\n        MDC.clear();\r\n    }\r\n} \r\n```","```\r\nlog4j.appender.consoleAppender.layout.ConversionPattern=\r\n  %-4r [%t] %5p %c{1} %x - %m - tx.id=%X{transaction.id} tx.owner=%X{transaction.owner}%n\r\n```","```\r\n638  [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Has transfer of 1104$ completed successfully ? true. - tx.id=2 tx.owner=Marc\r\n638  [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1685$. - tx.id=4 tx.owner=John\r\n666  [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Has transfer of 1985$ completed successfully ? true. - tx.id=1 tx.owner=Marc\r\n666  [pool-1-thread-1]  INFO Log4JBusinessService \r\n  - Preparing to transfer 958$. - tx.id=5 tx.owner=Susan\r\n739  [pool-1-thread-3]  INFO Log4JBusinessService \r\n  - Has transfer of 783$ completed successfully ? true. - tx.id=3 tx.owner=Samantha\r\n739  [pool-1-thread-3]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1024$. - tx.id=6 tx.owner=John\r\n1259 [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Has transfer of 1685$ completed successfully ? false. - tx.id=4 tx.owner=John\r\n1260 [pool-1-thread-2]  INFO Log4JBusinessService \r\n  - Preparing to transfer 1667$. - tx.id=7 tx.owner=Marc \r\n```","```\r\nimport org.apache.logging.log4j.LogManager;\r\nimport org.apache.logging.log4j.Logger;\r\n\r\npublic class Log4J2TransferService extends TransferService {\r\n    private static final Logger logger = LogManager.getLogger();\r\n\r\n    @Override\r\n    protected void beforeTransfer(long amount) {\r\n        logger.info(\"Preparing to transfer {}$.\", amount);\r\n    }\r\n\r\n    @Override\r\n    protected void afterTransfer(long amount, boolean outcome) {\r\n        logger.info(\"Has transfer of {}$ completed successfully ? {}.\", amount, outcome);\r\n    }\r\n} \r\n```","```\r\nimport org.apache.log4j.MDC;\r\n\r\npublic class Log4J2Runnable implements Runnable {\r\n    private final Transaction tx;\r\n    private Log4J2BusinessService log4j2BusinessService = new Log4J2BusinessService();\r\n\r\n    public Log4J2Runnable(Transaction tx) {\r\n        this.tx = tx;\r\n    }\r\n\r\n    public void run() {\r\n        ThreadContext.put(\"transaction.id\", tx.getTransactionId());\r\n        ThreadContext.put(\"transaction.owner\", tx.getOwner());\r\n        log4j2BusinessService.transfer(tx.getAmount());\r\n        ThreadContext.clearAll();\r\n    }\r\n} \r\n```","```\r\n<Configuration status=\"INFO\">\r\n    <Appenders>\r\n        <Console name=\"stdout\" target=\"SYSTEM_OUT\">\r\n            <PatternLayout\r\n              pattern=\"%-4r [%t] %5p %c{1} - %m - tx.id=%X{transaction.id} tx.owner=%X{transaction.owner}%n\" />\r\n        </Console>\r\n    </Appenders>\r\n    <Loggers>\r\n        <Logger name=\"com.baeldung.log4j2\" level=\"TRACE\" />\r\n        <AsyncRoot level=\"DEBUG\">\r\n            <AppenderRef ref=\"stdout\" />\r\n        </AsyncRoot>\r\n    </Loggers>\r\n</Configuration> \r\n```","```\r\n1119 [pool-1-thread-3]  INFO Log4J2BusinessService \r\n  - Has transfer of 1198$ completed successfully ? true. - tx.id=3 tx.owner=Samantha\r\n1120 [pool-1-thread-3]  INFO Log4J2BusinessService \r\n  - Preparing to transfer 1723$. - tx.id=5 tx.owner=Samantha\r\n1170 [pool-1-thread-2]  INFO Log4J2BusinessService \r\n  - Has transfer of 701$ completed successfully ? true. - tx.id=2 tx.owner=Susan\r\n1171 [pool-1-thread-2]  INFO Log4J2BusinessService \r\n  - Preparing to transfer 1108$. - tx.id=6 tx.owner=Susan\r\n1794 [pool-1-thread-1]  INFO Log4J2BusinessService \r\n  - Has transfer of 645$ completed successfully ? true. - tx.id=4 tx.owner=Susan \r\n```","```\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nfinal class Slf4TransferService extends TransferService {\r\n    private static final Logger logger = LoggerFactory.getLogger(Slf4TransferService.class);\r\n\r\n    @Override\r\n    protected void beforeTransfer(long amount) {\r\n        logger.info(\"Preparing to transfer {}$.\", amount);\r\n    }\r\n\r\n    @Override\r\n    protected void afterTransfer(long amount, boolean outcome) {\r\n        logger.info(\"Has transfer of {}$ completed successfully ? {}.\", amount, outcome);\r\n    }\r\n} \r\n```","```\r\nimport org.slf4j.MDC;\r\n\r\npublic class Slf4jRunnable implements Runnable {\r\n    private final Transaction tx;\r\n\r\n    public Slf4jRunnable(Transaction tx) {\r\n        this.tx = tx;\r\n    }\r\n\r\n    public void run() {\r\n        MDC.put(\"transaction.id\", tx.getTransactionId());\r\n        MDC.put(\"transaction.owner\", tx.getOwner());\r\n        new Slf4TransferService().transfer(tx.getAmount());\r\n        MDC.clear();\r\n    }\r\n} \r\n```","```\r\n<configuration>\r\n    <appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <pattern>%-4r [%t] %5p %c{1} - %m - tx.id=%X{transaction.id} tx.owner=%X{transaction.owner}%n</pattern>\r\n\t</encoder>\r\n    </appender>\r\n    <root level=\"TRACE\">\r\n        <appender-ref ref=\"stdout\" />\r\n    </root>\r\n</configuration> \r\n```","```\r\n1020 [pool-1-thread-3]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Has transfer of 1869$ completed successfully ? true. - tx.id=3 tx.owner=John\r\n1021 [pool-1-thread-3]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Preparing to transfer 1303$. - tx.id=6 tx.owner=Samantha\r\n1221 [pool-1-thread-1]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Has transfer of 1498$ completed successfully ? true. - tx.id=4 tx.owner=Marc\r\n1221 [pool-1-thread-1]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Preparing to transfer 1528$. - tx.id=7 tx.owner=Samantha\r\n1492 [pool-1-thread-2]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Has transfer of 1110$ completed successfully ? true. - tx.id=5 tx.owner=Samantha\r\n1493 [pool-1-thread-2]  INFO c.b.m.s.Slf4jBusinessService \r\n  - Preparing to transfer 644$. - tx.id=8 tx.owner=John\r\n```","```\r\npublic class MdcAwareThreadPoolExecutor extends ThreadPoolExecutor {\r\n\r\n    public MdcAwareThreadPoolExecutor(int corePoolSize, \r\n      int maximumPoolSize, \r\n      long keepAliveTime, \r\n      TimeUnit unit, \r\n      BlockingQueue<Runnable> workQueue, \r\n      ThreadFactory threadFactory, \r\n      RejectedExecutionHandler handler) {\r\n        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\r\n    }\r\n\r\n    @Override\r\n    protected void afterExecute(Runnable r, Throwable t) {\r\n        System.out.println(\"Cleaning the MDC context\");\r\n        MDC.clear();\r\n        org.apache.log4j.MDC.clear();\r\n        ThreadContext.clearAll();\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void run() {\r\n    MDC.put(\"transaction.id\", tx.getTransactionId());\r\n    MDC.put(\"transaction.owner\", tx.getSender());\r\n\r\n    new Slf4TransferService().transfer(tx.getAmount());\r\n}\r\n```","```\r\nExecutorService executor = new MdcAwareThreadPoolExecutor(3, 3, 0, MINUTES, \r\n  new LinkedBlockingQueue<>(), Thread::new, new AbortPolicy());\r\n\r\nTransactionFactory transactionFactory = new TransactionFactory();\r\n\r\nfor (int i = 0; i < 10; i++) {\r\n    Transfer tx = transactionFactory.newInstance();\r\n    Runnable task = new Slf4jRunnable(tx);\r\n\r\n    executor.submit(task);\r\n}\r\n\r\nexecutor.shutdown();\r\n```"]