["```\r\nList<String> IMDB_TOP_MOVIES = Arrays.asList(\"The Shawshank Redemption\",\r\n  \"The Godfather\", \"The Godfather II\", \"The Dark Knight\");\r\n```","```\r\nList rankings = new ArrayList<>();\r\nfor (int i = 0; i < movies.size(); i++) {\r\n    String ranking = (i + 1) + \": \" + movies.get(i);\r\n    rankings.add(ranking);\r\n}\r\n```","```\r\nassertThat(getRankingsWithForLoop(IMDB_TOP_MOVIES))\r\n  .containsExactly(\"1: The Shawshank Redemption\",\r\n      \"2: The Godfather\", \"3: The Godfather II\", \"4: The Dark Knight\");\r\n```","```\r\nfor (String movie : IMDB_TOP_MOVIES) {\r\n   // use movie value\r\n}\r\n```","```\r\nint i = 0;\r\nfor (String movie : movies) {\r\n    String ranking = (i + 1) + \": \" + movie;\r\n    rankings.add(ranking);\r\n\r\n    i++;\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface BiConsumer<T, U> {\r\n   void accept(T t, U u);\r\n}\r\n```","```\r\nstatic <T> void forEachWithCounter(Iterable<T> source, BiConsumer<Integer, T> consumer) {\r\n    int i = 0;\r\n    for (T item : source) {\r\n        consumer.accept(i, item);\r\n        i++;\r\n    }\r\n}\r\n```","```\r\nList rankings = new ArrayList<>();\r\nforEachWithCounter(movies, (i, movie) -> {\r\n    String ranking = (i + 1) + \": \" + movies.get(i);\r\n    rankings.add(ranking);\r\n});\r\n```","```\r\npublic static <T> Consumer<T> withCounter(BiConsumer<Integer, T> consumer) {\r\n    AtomicInteger counter = new AtomicInteger(0);\r\n    return item -> consumer.accept(counter.getAndIncrement(), item);\r\n}\r\n```","```\r\nList rankings = new ArrayList<>();\r\nmovies.forEach(withCounter((i, movie) -> {\r\n    String ranking = (i + 1) + \": \" + movie;\r\n    rankings.add(ranking);\r\n}));\r\n```"]