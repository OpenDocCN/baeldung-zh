["```\r\n<dependency>\r\n    <groupId>com.itextpdf</groupId>\r\n    <artifactId>itext7-core</artifactId>\r\n    <version>7.2.4</version>\r\n    <type>pom</type>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-core</artifactId>\r\n    <version>3.23.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class StoryTime {\r\n    String aliceStory = \"I am ...\";\r\n    String paulStory = \"I am Paul ..\";\r\n}\r\n```","```\r\npublic static final String OUTPUT_DIR = \"output/alice.pdf\";\r\n```","```\r\npublic void createPdf(String output) throws IOException {\r\n\r\n    PdfWriter writer = new PdfWriter(output);\r\n    PdfDocument pdf = new PdfDocument(writer);\r\n    try (Document document = new Document(pdf, PageSize.A4, false)) {\r\n        document.add(new Paragraph(aliceSpeech)\r\n          .setFont(PdfFontFactory.createFont(StandardFonts.TIMES_ROMAN)));\r\n        document.add(new Paragraph(paulSpeech)\r\n          .setFont(PdfFontFactory.createFont(StandardFonts.TIMES_ROMAN)));\r\n        document.close();\r\n    }\r\n}\r\n```","```\r\npublic Paragraph createWatermarkParagraph(String watermark) throws IOException {\r\n\r\n    PdfFont font = PdfFontFactory.createFont(StandardFonts.HELVETICA);\r\n    Text text = new Text(watermark);\r\n    text.setFont(font);\r\n    text.setFontSize(56);\r\n    text.setOpacity(0.5f);\r\n    return new Paragraph(text);\r\n}\r\n```","```\r\npublic void addWatermarkToGeneratedPDF(Document document, int pageIndex, \r\n  Paragraph paragraph, float verticalOffset) {\r\n\r\n    PdfPage pdfPage = document.getPdfDocument().getPage(pageIndex);\r\n    PageSize pageSize = (PageSize) pdfPage.getPageSizeWithRotation();\r\n    float x = (pageSize.getLeft() + pageSize.getRight()) / 2;\r\n    float y = (pageSize.getTop() + pageSize.getBottom()) / 2;\r\n    float xOffset = 100f / 2;\r\n    float rotationInRadians = (float) (PI / 180 * 45f);\r\n    document.showTextAligned(paragraph, x - xOffset, y + verticalOffset, \r\n      pageIndex, CENTER, TOP, rotationInRadians);\r\n}\r\n```","```\r\npublic void createNewPDF() throws IOException {\r\n\r\n    StoryTime storyTime = new StoryTime();\r\n    String waterMark = \"CONFIDENTIAL\";\r\n    PdfWriter writer = new PdfWriter(storyTime.OUTPUT_FILE);\r\n    PdfDocument pdf = new PdfDocument(writer);\r\n\r\n    try (Document document = new Document(pdf)) {\r\n        document.add(new Paragraph(storyTime.alice)\r\n          .setFont(PdfFontFactory.createFont(StandardFonts.TIMES_ROMAN)));\r\n        document.add(new Paragraph(storyTime.paul));\r\n        Paragrapgh paragraph = storyTime.createWatermarkParagraph(waterMark);\r\n        for (int i = 1; i <= document.getPdfDocument().getNumberOfPages(); i++) {\r\n            storyTime.addWatermarkToGeneratedPDF(document, i, paragraph, 0f);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNewTexts_whenGeneratingNewPDFWithIText() throws IOException {\r\n\r\n    StoryTime storyTime = new StoryTime();\r\n    String waterMark = \"CONFIDENTIAL\";\r\n    LocationTextExtractionStrategy extStrategy = new LocationTextExtractionStrategy();\r\n    try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(storyTime.OUTPUT_FILE))) {\r\n        for (int i = 1; i <= pdfDocument.getNumberOfPages(); i++) {\r\n            String textFromPage = getTextFromPage(pdfDocument.getPage(i), extStrategy);\r\n            assertThat(textFromPage).contains(waterMark);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void addWatermarkToExistingPDF(Document document, int pageIndex,\r\n  Paragraph paragraph, PdfExtGState graphicState, float verticalOffset) {\r\n\r\n    PdfDocument pdfDocument = document.getPdfDocument();\r\n    PdfPage pdfPage = pdfDocument.getPage(pageIndex);\r\n    PageSize pageSize = (PageSize) pdfPage.getPageSizeWithRotation();\r\n    float x = (pageSize.getLeft() + pageSize.getRight()) / 2;\r\n    float y = (pageSize.getTop() + pageSize.getBottom()) / 2;\r\n\r\n    PdfCanvas over = new PdfCanvas(pdfDocument.getPage(pageIndex));\r\n    over.saveState();\r\n    over.setExtGState(graphicState);\r\n    float xOffset = 14 / 2;\r\n    float rotationInRadians = (float) (PI / 180 * 45f);\r\n\r\n    document.showTextAligned(paragraph, x - xOffset, y + verticalOffset, \r\n      pageIndex, CENTER, TOP, rotationInRadians);\r\n    document.flush();\r\n    over.restoreState();\r\n    over.release();\r\n}\r\n```","```\r\npublic void addWatermarkToExistingPdf() throws IOException {\r\n\r\n    StoryTime storyTime = new StoryTime();\r\n    String outputPdf = \"output/aliceNew.pdf\";\r\n    String watermark = \"CONFIDENTIAL\";\r\n\r\n    try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(\"output/alice.pdf\"), \r\n      new PdfWriter(outputPdf))) {\r\n        Document document = new Document(pdfDocument);\r\n        Paragraph paragraph = storyTime.createWatermarkParagraph(watermark);\r\n        PdfExtGState transparentGraphicState = new PdfExtGState().setFillOpacity(0.5f);\r\n        for (int i = 1; i <= document.getPdfDocument().getNumberOfPages(); i++) {\r\n            storyTime.addWatermarkToExistingPage(document, i, paragraph, \r\n              transparentGraphicState, 0f);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenAnExistingPDF_whenManipulatedPDFWithITextmark() throws IOException {\r\n    StoryTime storyTime = new StoryTime();\r\n    String outputPdf = \"output/aliceupdated.pdf\";\r\n    String watermark = \"CONFIDENTIAL\";\r\n\r\n    LocationTextExtractionStrategy extStrategy \r\n      = new LocationTextExtractionStrategy();\r\n    try (PdfDocument pdfDocument = new PdfDocument(new PdfReader(outputPdf))) {\r\n        for (int i = 1; i <= pdfDocument.getNumberOfPages(); i++) {\r\n            String textFromPage = getTextFromPage(pdfDocument.getPage(i), extStrategy);\r\n            assertThat(textFromPage).contains(watermark);\r\n        }\r\n    }\r\n}\r\n```"]