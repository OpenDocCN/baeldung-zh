["```\r\n<dependency>\r\n    <groupId>com.github.dozermapper</groupId>\r\n    <artifactId>dozer-core</artifactId>\r\n    <version>6.5.2</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>ma.glasnost.orika</groupId>\r\n    <artifactId>orika-core</artifactId>\r\n    <version>1.5.4</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.mapstruct</groupId>\r\n    <artifactId>mapstruct</artifactId>\r\n    <version>1.5.2.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n  <groupId>org.modelmapper</groupId>\r\n  <artifactId>modelmapper</artifactId>\r\n  <version>3.1.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.googlecode.jmapper-framework</groupId>\r\n    <artifactId>jmapper-core</artifactId>\r\n    <version>1.6.1.CR2</version>\r\n</dependency>\r\n```","```\r\npublic class SourceCode {\r\n    String code;\r\n    // getter and setter\r\n}\r\n```","```\r\npublic class DestinationCode {\r\n    String code;\r\n    // getter and setter\r\n}\r\n```","```\r\npublic class SourceOrder {\r\n    private String orderFinishDate;\r\n    private PaymentType paymentType;\r\n    private Discount discount;\r\n    private DeliveryData deliveryData;\r\n    private User orderingUser;\r\n    private List<Product> orderedProducts;\r\n    private Shop offeringShop;\r\n    private int orderId;\r\n    private OrderStatus status;\r\n    private LocalDate orderDate;\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class Order {\r\n    private User orderingUser;\r\n    private List<Product> orderedProducts;\r\n    private OrderStatus orderStatus;\r\n    private LocalDate orderDate;\r\n    private LocalDate orderFinishDate;\r\n    private PaymentType paymentType;\r\n    private Discount discount;\r\n    private int shopId;\r\n    private DeliveryData deliveryData;\r\n    private Shop offeringShop;\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic interface Converter {\r\n    Order convert(SourceOrder sourceOrder);\r\n    DestinationCode convert(SourceCode sourceCode);\r\n}\r\n```","```\r\npublic class OrikaConverter implements Converter{\r\n    private MapperFacade mapperFacade;\r\n\r\n    public OrikaConverter() {\r\n        MapperFactory mapperFactory = new DefaultMapperFactory\r\n          .Builder().build();\r\n\r\n        mapperFactory.classMap(Order.class, SourceOrder.class)\r\n          .field(\"orderStatus\", \"status\").byDefault().register();\r\n        mapperFacade = mapperFactory.getMapperFacade();\r\n    }\r\n\r\n    @Override\r\n    public Order convert(SourceOrder sourceOrder) {\r\n        return mapperFacade.map(sourceOrder, Order.class);\r\n    }\r\n\r\n    @Override\r\n    public DestinationCode convert(SourceCode sourceCode) {\r\n        return mapperFacade.map(sourceCode, DestinationCode.class);\r\n    }\r\n}\r\n```","```\r\n<mappings \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://dozermapper.github.io/schema/bean-mapping\r\n  https://dozermapper.github.io/schema/bean-mapping.xsd\">\r\n\r\n    <mapping>\r\n        <class-a>com.baeldung.performancetests.model.source.SourceOrder</class-a>\r\n        <class-b>com.baeldung.performancetests.model.destination.Order</class-b>\r\n        <field>\r\n            <a>status</a>\r\n            <b>orderStatus</b>\r\n        </field>\r\n    </mapping>\r\n    <mapping>\r\n        <class-a>com.baeldung.performancetests.model.source.SourceCode</class-a>\r\n        <class-b>com.baeldung.performancetests.model.destination.DestinationCode</class-b>\r\n    </mapping>\r\n</mappings>\r\n```","```\r\npublic class DozerConverter implements Converter {\r\n    private final Mapper mapper;\r\n\r\n    public DozerConverter() {\r\n        this.mapper = DozerBeanMapperBuilder.create()\r\n          .withMappingFiles(\"dozer-mapping.xml\")\r\n          .build();       \r\n    }\r\n\r\n    @Override\r\n    public Order convert(SourceOrder sourceOrder) {\r\n        return mapper.map(sourceOrder,Order.class);\r\n    }\r\n\r\n    @Override\r\n    public DestinationCode convert(SourceCode sourceCode) {\r\n        return mapper.map(sourceCode, DestinationCode.class);\r\n    }\r\n}\r\n```","```\r\n@Mapper\r\npublic interface MapStructConverter extends Converter {\r\n    MapStructConverter MAPPER = Mappers.getMapper(MapStructConverter.class);\r\n\r\n    @Mapping(source = \"status\", target = \"orderStatus\")\r\n    @Override\r\n    Order convert(SourceOrder sourceOrder);\r\n\r\n    @Override\r\n    DestinationCode convert(SourceCode sourceCode);\r\n}\r\n```","```\r\npublic class JMapperConverter implements Converter {\r\n    JMapper realLifeMapper;\r\n    JMapper simpleMapper;\r\n\r\n    public JMapperConverter() {\r\n        JMapperAPI api = new JMapperAPI()\r\n          .add(JMapperAPI.mappedClass(Order.class));\r\n        realLifeMapper = new JMapper(Order.class, SourceOrder.class, api);\r\n        JMapperAPI simpleApi = new JMapperAPI()\r\n          .add(JMapperAPI.mappedClass(DestinationCode.class));\r\n        simpleMapper = new JMapper(\r\n          DestinationCode.class, SourceCode.class, simpleApi);\r\n    }\r\n\r\n    @Override\r\n    public Order convert(SourceOrder sourceOrder) {\r\n        return (Order) realLifeMapper.getDestination(sourceOrder);\r\n    }\r\n\r\n    @Override\r\n    public DestinationCode convert(SourceCode sourceCode) {\r\n        return (DestinationCode) simpleMapper.getDestination(sourceCode);\r\n    }\r\n}\r\n```","```\r\n@JMapConversion(from = \"paymentType\", to = \"paymentType\")\r\npublic PaymentType conversion(com.baeldung.performancetests.model.source.PaymentType type) {\r\n    PaymentType paymentType = null;\r\n    switch(type) {\r\n        case CARD:\r\n            paymentType = PaymentType.CARD;\r\n            break;\r\n\r\n        case CASH:\r\n            paymentType = PaymentType.CASH;\r\n            break;\r\n\r\n        case TRANSFER:\r\n            paymentType = PaymentType.TRANSFER;\r\n            break;\r\n    }\r\n    return paymentType;\r\n}\r\n```","```\r\npublic class ModelMapperConverter implements Converter {\r\n    private ModelMapper modelMapper;\r\n\r\n    public ModelMapperConverter() {\r\n        modelMapper = new ModelMapper();\r\n    }\r\n\r\n    @Override\r\n    public Order convert(SourceOrder sourceOrder) {\r\n       return modelMapper.map(sourceOrder, Order.class);\r\n    }\r\n\r\n    @Override\r\n    public DestinationCode convert(SourceCode sourceCode) {\r\n        return modelMapper.map(sourceCode, DestinationCode.class);\r\n    }\r\n}\r\n```"]