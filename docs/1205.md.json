["```\r\npublic static <T> Optional<T> findUniqueElementMatchingPredicate_WithReduction(Stream<T> elements, Predicate<T> predicate) {\r\n    return elements.filter(predicate)\r\n      .collect(Collectors.reducing((a, b) -> null));\r\n}\r\n```","```\r\npublic static <T> T getUniqueElementMatchingPredicate_WithReduction(Stream<T> elements, Predicate<T> predicate) {\r\n    return elements.filter(predicate)\r\n      .reduce((a, b) -> {\r\n          throw new IllegalStateException(\"Too many elements match the predicate\");\r\n      })\r\n      .orElseThrow(() -> new IllegalStateException(\"No element matches the predicate\"));\r\n}\r\n```","```\r\nprivate static <T> T findUniqueElement(List<T> elements) {\r\n    if (elements.size() == 1) {\r\n        return elements.get(0);\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic static <T> Optional<T> findUniqueElementMatchingPredicate_WithCollectingAndThen(Stream<T> elements, Predicate<T> predicate) {\r\n    return elements.filter(predicate)\r\n      .collect(Collectors.collectingAndThen(Collectors.toList(), list -> Optional.ofNullable(findUniqueElement(list))));\r\n}\r\n```","```\r\nprivate static <T> T getUniqueElement(List<T> elements) {\r\n    if (elements.size() > 1) {\r\n        throw new IllegalStateException(\"Too many elements match the predicate\");\r\n    } else if (elements.size() == 0) {\r\n        throw new IllegalStateException(\"No element matches the predicate\");\r\n    }\r\n    return elements.get(0);\r\n}\r\n```","```\r\npublic static <T> T getUniqueElementMatchingPredicate_WithCollectingAndThen(Stream<T> elements, Predicate<T> predicate) {\r\n    return elements.filter(predicate)\r\n      .collect(Collectors.collectingAndThen(Collectors.toList(), FilterUtils::getUniqueElement));\r\n}\r\n```","```\r\n@State(Scope.Benchmark)\r\npublic static class MyState {\r\n    final Stream<Integer> getIntegers() { \r\n        return IntStream.range(1, 1000000).boxed();\r\n    }\r\n\r\n    final Predicate<Integer> PREDICATE = i -> i == 751879;\r\n}\r\n\r\n@Benchmark\r\npublic void evaluateFindUniqueElementMatchingPredicate_WithReduction(Blackhole blackhole, MyState state) {\r\n    blackhole.consume(FilterUtils.findUniqueElementMatchingPredicate_WithReduction(state.INTEGERS.stream(), state.PREDICATE));\r\n}\r\n\r\n@Benchmark\r\npublic void evaluateFindUniqueElementMatchingPredicate_WithCollectingAndThen(Blackhole blackhole, MyState state) {\r\n    blackhole.consume(FilterUtils.findUniqueElementMatchingPredicate_WithCollectingAndThen(state.INTEGERS.stream(), state.PREDICATE));\r\n}\r\n\r\n@Benchmark\r\npublic void evaluateGetUniqueElementMatchingPredicate_WithReduction(Blackhole blackhole, MyState state) {\r\n    try {\r\n        FilterUtils.getUniqueElementMatchingPredicate_WithReduction(state.INTEGERS.stream(), state.PREDICATE);\r\n    } catch (IllegalStateException exception) {\r\n        blackhole.consume(exception);\r\n    }\r\n}\r\n\r\n@Benchmark\r\npublic void evaluateGetUniqueElementMatchingPredicate_WithCollectingAndThen(Blackhole blackhole, MyState state) {\r\n    try {\r\n        FilterUtils.getUniqueElementMatchingPredicate_WithCollectingAndThen(state.INTEGERS.stream(), state.PREDICATE);\r\n    } catch (IllegalStateException exception) {\r\n        blackhole.consume(exception);\r\n    }\r\n}\r\n```","```\r\nBenchmark                                                                          Mode  Cnt    Score    Error  Units\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithCollectingAndThen  thrpt   25  140.581 ± 28.793  ops/s\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithReduction          thrpt   25  100.171 ± 36.796  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithCollectingAndThen   thrpt   25  145.568 ±  5.333  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithReduction           thrpt   25  144.616 ± 12.917  ops/s\r\n```","```\r\nBenchmark                                                                          Mode  Cnt    Score    Error  Units\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithCollectingAndThen  thrpt   25  165.751 ± 19.816  ops/s\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithReduction          thrpt   25  174.667 ± 20.909  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithCollectingAndThen   thrpt   25  188.293 ± 18.348  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithReduction           thrpt   25  196.689 ±  4.155  ops/s\r\n```","```\r\nBenchmark                                                                          Mode  Cnt    Score    Error  Units\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithCollectingAndThen  thrpt   25   70.879 ±  6.205  ops/s\r\nBenchmarkRunner.evaluateFindUniqueElementMatchingPredicate_WithReduction          thrpt   25  210.142 ± 23.680  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithCollectingAndThen   thrpt   25   83.927 ±  1.812  ops/s\r\nBenchmarkRunner.evaluateGetUniqueElementMatchingPredicate_WithReduction           thrpt   25  252.881 ±  2.710  ops/s\r\n```"]