["```\r\n@Test\r\npublic void whenSerializingDateWithJackson_thenSerializedToTimestamp()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm\");\r\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n\r\n    Date date = df.parse(\"01-01-1970 01:00\");\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.writeValueAsString(event);\r\n}\r\n```","```\r\n{\r\n   \"name\":\"party\",\r\n   \"eventDate\":3600000\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingDateToISO8601_thenSerializedToText()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm\");\r\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n\r\n    String toParse = \"01-01-1970 02:30\";\r\n    Date date = df.parse(toParse);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n    // StdDateFormat is ISO8601 since jackson 2.9\r\n    mapper.setDateFormat(new StdDateFormat().withColonInTimeZone(true));\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(\"1970-01-01T02:30:00.000+00:00\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSettingObjectMapperDateFormat_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm\");\r\n\r\n    String toParse = \"20-12-2014 02:30\";\r\n    Date date = df.parse(toParse);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setDateFormat(df);\r\n\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(toParse));\r\n}\r\n```","```\r\npublic class Event {\r\n    public String name;\r\n\r\n    @JsonFormat\r\n      (shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy hh:mm:ss\")\r\n    public Date eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingJsonFormatAnnotationToFormatDate_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n    df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n\r\n    String toParse = \"20-12-2014 02:30:00\";\r\n    Date date = df.parse(toParse);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(toParse));\r\n}\r\n```","```\r\npublic class CustomDateSerializer extends StdSerializer<Date> {\r\n\r\n    private SimpleDateFormat formatter \r\n      = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    public CustomDateSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomDateSerializer(Class t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize (Date value, JsonGenerator gen, SerializerProvider arg2)\r\n      throws IOException, JsonProcessingException {\r\n        gen.writeString(formatter.format(value));\r\n    }\r\n}\r\n```","```\r\npublic class Event {\r\n    public String name;\r\n\r\n    @JsonSerialize(using = CustomDateSerializer.class)\r\n    public Date eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingCustomDateSerializer_thenCorrect()\r\n  throws JsonProcessingException, ParseException {\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    String toParse = \"20-12-2014 02:30:00\";\r\n    Date date = df.parse(toParse);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(toParse));\r\n}\r\n```","```\r\n<dependency>\r\n  <groupId>com.fasterxml.jackson.datatype</groupId>\r\n  <artifactId>jackson-datatype-joda</artifactId>\r\n  <version>2.9.7</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenSerializingJodaTime_thenCorrect() \r\n  throws JsonProcessingException {\r\n    DateTime date = new DateTime(2014, 12, 20, 2, 30, \r\n      DateTimeZone.forID(\"Europe/London\"));\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.registerModule(new JodaModule());\r\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n\r\n    String result = mapper.writeValueAsString(date);\r\n    assertThat(result, containsString(\"2014-12-20T02:30:00.000Z\"));\r\n}\r\n```","```\r\npublic class CustomDateTimeSerializer extends StdSerializer<DateTime> {\r\n\r\n    private static DateTimeFormatter formatter = \r\n      DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\");\r\n\r\n    public CustomDateTimeSerializer() {\r\n        this(null);\r\n    }\r\n\r\n     public CustomDateTimeSerializer(Class<DateTime> t) {\r\n         super(t);\r\n     }\r\n\r\n    @Override\r\n    public void serialize\r\n      (DateTime value, JsonGenerator gen, SerializerProvider arg2)\r\n      throws IOException, JsonProcessingException {\r\n        gen.writeString(formatter.print(value));\r\n    }\r\n}\r\n```","```\r\npublic class Event {\r\n    public String name;\r\n\r\n    @JsonSerialize(using = CustomDateTimeSerializer.class)\r\n    public DateTime eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingJodaTimeWithJackson_thenCorrect() \r\n  throws JsonProcessingException {\r\n\r\n    DateTime date = new DateTime(2014, 12, 20, 2, 30);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(\"2014-12-20 02:30\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.datatype</groupId>\r\n    <artifactId>jackson-datatype-jsr310</artifactId>\r\n    <version>2.9.7</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenSerializingJava8Date_thenCorrect()\r\n  throws JsonProcessingException {\r\n    LocalDateTime date = LocalDateTime.of(2014, 12, 20, 2, 30);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.registerModule(new JavaTimeModule());\r\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n\r\n    String result = mapper.writeValueAsString(date);\r\n    assertThat(result, containsString(\"2014-12-20T02:30\"));\r\n}\r\n```","```\r\npublic class CustomLocalDateTimeSerializer \r\n  extends StdSerializer<LocalDateTime> {\r\n\r\n    private static DateTimeFormatter formatter = \r\n      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");\r\n\r\n    public CustomLocalDateTimeSerializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomLocalDateTimeSerializer(Class<LocalDateTime> t) {\r\n        super(t);\r\n    }\r\n\r\n    @Override\r\n    public void serialize(\r\n      LocalDateTime value,\r\n      JsonGenerator gen,\r\n      SerializerProvider arg2)\r\n      throws IOException, JsonProcessingException {\r\n\r\n        gen.writeString(formatter.format(value));\r\n    }\r\n}\r\n```","```\r\npublic class Event {\r\n    public String name;\r\n\r\n    @JsonSerialize(using = CustomLocalDateTimeSerializer.class)\r\n    public LocalDateTime eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingJava8DateWithCustomSerializer_thenCorrect()\r\n  throws JsonProcessingException {\r\n\r\n    LocalDateTime date = LocalDateTime.of(2014, 12, 20, 2, 30);\r\n    Event event = new Event(\"party\", date);\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper.writeValueAsString(event);\r\n    assertThat(result, containsString(\"2014-12-20 02:30\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingDateWithJackson_thenCorrect()\r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json = \"{\"name\":\"party\",\"eventDate\":\"20-12-2014 02:30:00\"}\";\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setDateFormat(df);\r\n\r\n    Event event = mapper.readerFor(Event.class).readValue(json);\r\n    assertEquals(\"20-12-2014 02:30:00\", df.format(event.eventDate));\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserialisingZonedDateTimeWithDefaults_thenNotCorrect()\r\n  throws IOException {\r\n    ObjectMapper objectMapper = new ObjectMapper();\r\n    objectMapper.findAndRegisterModules();\r\n    objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n    ZonedDateTime now = ZonedDateTime.now(ZoneId.of(\"Europe/Berlin\"));\r\n    String converted = objectMapper.writeValueAsString(now);\r\n\r\n    ZonedDateTime restored = objectMapper.readValue(converted, ZonedDateTime.class);\r\n    System.out.println(\"serialized: \" + now);\r\n    System.out.println(\"restored: \" + restored);\r\n    assertThat(now, is(restored));\r\n}\r\n```","```\r\nserialized: 2017-08-14T13:52:22.071+02:00[Europe/Berlin]\r\nrestored: 2017-08-14T11:52:22.071Z[UTC]\r\n```","```\r\nobjectMapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\r\n```","```\r\npublic class CustomDateDeserializer extends StdDeserializer<Date> {\r\n\r\n    private SimpleDateFormat formatter = \r\n      new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n\r\n    public CustomDateDeserializer() {\r\n        this(null);\r\n    }\r\n\r\n    public CustomDateDeserializer(Class<?> vc) {\r\n        super(vc);\r\n    }\r\n\r\n    @Override\r\n    public Date deserialize(JsonParser jsonparser, DeserializationContext context)\r\n      throws IOException, JsonProcessingException {\r\n        String date = jsonparser.getText();\r\n        try {\r\n            return formatter.parse(date);\r\n        } catch (ParseException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class Event {\r\n    public String name;\r\n\r\n    @JsonDeserialize(using = CustomDateDeserializer.class)\r\n    public Date eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeserializingDateUsingCustomDeserializer_thenCorrect()\r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json = \"{\"name\":\"party\",\"eventDate\":\"20-12-2014 02:30:00\"}\";\r\n\r\n    SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy hh:mm:ss\");\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    Event event = mapper.readerFor(Event.class).readValue(json);\r\n    assertEquals(\"20-12-2014 02:30:00\", df.format(event.eventDate));\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance\r\nof `java.time.LocalDate`(no Creators, like default construct, exist): no String-argument\r\nconstructor/factory method to deserialize from String value ('2014-12-20') at [Source:\r\n(String)\"2014-12-20\"; line: 1, column: 1]\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.datatype</groupId>\r\n    <artifactId>jackson-datatype-jsr310</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenSerializingJava8DateAndReadingValue_thenCorrect() throws IOException {\r\n    String stringDate = \"\\\"2014-12-20\\\"\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.registerModule(new JavaTimeModule());\r\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\r\n\r\n    LocalDate result = mapper.readValue(stringDate, LocalDate.class);\r\n    assertThat(result.toString(), containsString(\"2014-12-20\"));\r\n}\r\n```","```\r\npublic class EventWithLocalDate {\r\n\r\n    @JsonDeserialize(using = LocalDateDeserializer.class)\r\n    @JsonSerialize(using = LocalDateSerializer.class)\r\n    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = \"dd-MM-yyyy\")\r\n    public LocalDate eventDate;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSerializingJava8DateAndReadingFromEntity_thenCorrect() throws IOException {\r\n    String json = \"{\\\"name\\\":\\\"party\\\",\\\"eventDate\\\":\\\"20-12-2014\\\"}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    EventWithLocalDate result = mapper.readValue(json, EventWithLocalDate.class);\r\n    assertThat(result.getEventDate().toString(), containsString(\"2014-12-20\"));\r\n}\r\n```"]