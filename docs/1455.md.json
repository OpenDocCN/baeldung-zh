["```\r\nList<String> givenList = Arrays.asList(\"a\", \"b\", \"c\");\r\nList<String> result = givenList.stream()\r\n  .collect(toUnmodifiableList());\r\n```","```\r\nclass java.util.ImmutableCollections$ListN\r\n```","```\r\nList<String> givenList = Arrays.asList(\"a\", \"b\", \"c\");\r\nList<String> result = givenList.stream()\r\n  .collect(collectingAndThen(toList(), ImmutableList::copyOf));\r\n\r\nSystem.out.println(result.getClass());\r\n```","```\r\n@Test\r\npublic void whenUsingStreamToList_thenReturnImmutableList() {\r\n    List<String> immutableList = Stream.of(\"a\", \"b\", \"c\", \"d\").toList();\r\n\r\n    Assertions.assertThrows(UnsupportedOperationException.class, () -> {\r\n        immutableList.add(\"e\");\r\n    });\r\n}\r\n```","```\r\npublic static <T> Collector<T, List<T>, List<T>> toImmutableList() {\r\n    return Collector.of(ArrayList::new, List::add,\r\n      (left, right) -> {\r\n        left.addAll(right);\r\n        return left;\r\n      }, Collections::unmodifiableList);\r\n}\r\n```","```\r\nList<String> givenList = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\r\nList<String> result = givenList.stream()\r\n  .collect(MyImmutableListCollector.toImmutableList());\r\n```","```\r\nclass java.util.Collections$UnmodifiableRandomAccessList\r\n```","```\r\npublic static <T, A extends List<T>> Collector<T, A, List<T>> toImmutableList(\r\n  Supplier<A> supplier) {\r\n\r\n    return Collector.of(\r\n      supplier,\r\n      List::add, (left, right) -> {\r\n        left.addAll(right);\r\n        return left;\r\n      }, Collections::unmodifiableList);\r\n}\r\n```","```\r\nList<String> givenList = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\r\nList<String> result = givenList.stream()\r\n  .collect(MyImmutableListCollector.toImmutableList(LinkedList::new));\r\n```","```\r\nclass java.util.Collections$UnmodifiableList\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.1-jre</version>\r\n</dependency>\r\n```","```\r\nList<Integer> list = IntStream.range(0, 9)\r\n  .boxed()\r\n  .collect(ImmutableList.toImmutableList());\r\n```","```\r\nclass com.google.common.collect.RegularImmutableList\r\n```"]