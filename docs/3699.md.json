["```\r\n@Test\r\npublic void whenFilterList_thenSuccess(){\r\n   List<String> names = Arrays.asList(\"Adam\", \"Alexander\", \"John\", \"Tom\");\r\n   List<String> result = names.stream()\r\n     .filter(name -> name.startsWith(\"A\"))\r\n     .collect(Collectors.toList());\r\n\r\n   assertEquals(2, result.size());\r\n   assertThat(result, contains(\"Adam\",\"Alexander\"));\r\n}\r\n```","```\r\nname -> name.startsWith(\"A\")\r\n```","```\r\n@Test\r\npublic void whenFilterListWithMultipleFilters_thenSuccess(){\r\n    List<String> result = names.stream()\r\n      .filter(name -> name.startsWith(\"A\"))\r\n      .filter(name -> name.length() < 5)\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(1, result.size());\r\n    assertThat(result, contains(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithComplexPredicate_thenSuccess(){\r\n    List<String> result = names.stream()\r\n      .filter(name -> name.startsWith(\"A\") && name.length() < 5)\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(1, result.size());\r\n    assertThat(result, contains(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCombinedPredicatesUsingAnd_thenSuccess(){\r\n    Predicate<String> predicate1 =  str -> str.startsWith(\"A\");\r\n    Predicate<String> predicate2 =  str -> str.length() < 5;\r\n\r\n    List<String> result = names.stream()\r\n      .filter(predicate1.and(predicate2))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(1, result.size());\r\n    assertThat(result, contains(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCombinedPredicatesUsingOr_thenSuccess(){\r\n    Predicate<String> predicate1 =  str -> str.startsWith(\"J\");\r\n    Predicate<String> predicate2 =  str -> str.length() < 4;\r\n\r\n    List<String> result = names.stream()\r\n      .filter(predicate1.or(predicate2))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(2, result.size());\r\n    assertThat(result, contains(\"John\",\"Tom\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCombinedPredicatesUsingOrAndNegate_thenSuccess(){\r\n    Predicate<String> predicate1 =  str -> str.startsWith(\"J\");\r\n    Predicate<String> predicate2 =  str -> str.length() < 4;\r\n\r\n    List<String> result = names.stream()\r\n      .filter(predicate1.or(predicate2.negate()))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(3, result.size());\r\n    assertThat(result, contains(\"Adam\",\"Alexander\",\"John\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCombinedPredicatesInline_thenSuccess(){\r\n    List<String> result = names.stream()\r\n      .filter(((Predicate<String>)name -> name.startsWith(\"A\"))\r\n      .and(name -> name.length()<5))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(1, result.size());\r\n    assertThat(result, contains(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCollectionOfPredicatesUsingAnd_thenSuccess(){\r\n    List<Predicate<String>> allPredicates = new ArrayList<Predicate<String>>();\r\n    allPredicates.add(str -> str.startsWith(\"A\"));\r\n    allPredicates.add(str -> str.contains(\"d\"));        \r\n    allPredicates.add(str -> str.length() > 4);\r\n\r\n    List<String> result = names.stream()\r\n      .filter(allPredicates.stream().reduce(x->true, Predicate::and))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(1, result.size());\r\n    assertThat(result, contains(\"Alexander\"));\r\n}\r\n```","```\r\nx->true\r\n```","```\r\n@Test\r\npublic void whenFilterListWithCollectionOfPredicatesUsingOr_thenSuccess(){\r\n    List<String> result = names.stream()\r\n      .filter(allPredicates.stream().reduce(x->false, Predicate::or))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(2, result.size());\r\n    assertThat(result, contains(\"Adam\",\"Alexander\"));\r\n}\r\n```"]