["```\r\nString[] stringArray = new String[] { \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"42\" };\r\n```","```\r\nint[] expected = new int[] { 1, 2, 3, 4, 5, 6, 42 };\r\n```","```\r\nString[] stringArrayWithInvalidNum = new String[] { \"1\", \"2\", \"hello\", \"4\", \"world\", \"6\", \"42\" };\r\n```","```\r\nint[] expectedWithInvalidInput = new int[] { 1, 2, Integer.MIN_VALUE, 4, Integer.MIN_VALUE, 6, 42 };\r\n```","```\r\nint[] result = Arrays.stream(stringArray).mapToInt(Integer::parseInt).toArray();\r\nassertArrayEquals(expected, result);\r\n```","```\r\nint[] result = Arrays.stream(stringArrayWithInvalidNum).mapToInt(s -> {\r\n    try {\r\n        return Integer.parseInt(s);\r\n    } catch (NumberFormatException ex) {\r\n        // logging ...\r\n        return Integer.MIN_VALUE;\r\n    }\r\n}).toArray();\r\n\r\nassertArrayEquals(expectedWithInvalidInput, result);\r\n```","```\r\nint[] result = new int[stringArray.length];\r\nfor (int i = 0; i < stringArray.length; i++) {\r\n    result[i] = Integer.parseInt(stringArray[i]);\r\n}\r\n\r\nassertArrayEquals(expected, result);\r\n```","```\r\nint[] result = new int[stringArrayWithInvalidNum.length];\r\nfor (int i = 0; i < stringArrayWithInvalidNum.length; i++) {\r\n    try {\r\n        result[i] = Integer.parseInt(stringArrayWithInvalidNum[i]);\r\n    } catch (NumberFormatException exception) {\r\n        // logging ...\r\n        result[i] = Integer.MIN_VALUE;\r\n    }\r\n}\r\n\r\nassertArrayEquals(expectedWithInvalidInput, result);\r\n```"]