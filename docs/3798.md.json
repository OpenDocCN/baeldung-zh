["```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, null, 1, 2);\r\nCollections.sort(toSort, Ordering.natural().nullsFirst());\r\nassertThat(toSort.get(0), nullValue());\r\n```","```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, null, 1, 2);\r\nCollections.sort(toSort, Ordering.natural().nullsLast());\r\nassertThat(toSort.get(toSort.size() - 1), nullValue());\r\n```","```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, 1, 2);\r\nCollections.sort(toSort, Ordering.natural());\r\n\r\nassertTrue(Ordering.natural().isOrdered(toSort));\r\n```","```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, 1, 2);\r\nCollections.sort(toSort, Ordering.natural().reverse());\r\n```","```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, null, 1, 2);\r\nCollections.sort(toSort, Ordering.natural().nullsLast().reverse());\r\nassertThat(toSort.get(0), nullValue());\r\n```","```\r\nprivate class OrderingByLenght extends Ordering<String> {\r\n    @Override\r\n    public int compare(String s1, String s2) {\r\n        return Ints.compare(s1.length(), s2.length());\r\n    }\r\n}\r\nList<String> toSort = Arrays.asList(\"zz\", \"aa\", \"b\", \"ccc\");\r\nOrdering<String> byLength = new OrderingByLenght();\r\nCollections.sort(toSort, byLength);\r\n\r\nOrdering<String> expectedOrder = Ordering.explicit(Lists.newArrayList(\"b\", \"zz\", \"aa\", \"ccc\"));\r\nassertTrue(expectedOrder.isOrdered(toSort))\r\n```","```\r\nList<String> toSort = Arrays.asList(\"zz\", \"aa\", \"b\", \"ccc\");\r\nOrdering<String> byLength = new OrderingByLenght();\r\nCollections.sort(toSort, byLength);\r\n\r\nOrdering<String> expectedOrder = Ordering.explicit(Lists.newArrayList(\"b\", \"zz\", \"aa\", \"ccc\"));\r\nassertTrue(expectedOrder.isOrdered(toSort));\r\n```","```\r\nList<Integer> toSort = Arrays.asList(3, 5, 4, 2, 1, 2);\r\nCollections.sort(toSort, Ordering.natural());\r\n\r\nassertFalse(Ordering.natural().isStrictlyOrdered(toSort));\r\n```","```\r\nList<String> toSort = Arrays.asList(\"zz\", \"aa\", \"b\", \"ccc\");\r\nOrdering<String> byLength = new OrderingByLenght();\r\nCollections.sort(toSort, byLength.compound(Ordering.natural()));\r\n\r\nOrdering<String> expectedOrder = Ordering.explicit(Lists.newArrayList(\"b\", \"aa\", \"zz\", \"ccc\"));\r\nassertTrue(expectedOrder.isOrdered(toSort));\r\n```","```\r\nList<String> toSort = Arrays.asList(\"zz\", \"aa\", null, \"b\", \"ccc\");\r\nCollections.sort(toSort, \r\n    new OrderingByLenght().reverse().compound(Ordering.natural()).nullsLast());\r\nSystem.out.println(toSort);\r\n```","```\r\nList<Integer> toSort = Arrays.asList(1, 2, 11);\r\nCollections.sort(toSort, Ordering.usingToString());\r\n\r\nOrdering<Integer> expectedOrder = Ordering.explicit(Lists.newArrayList(1, 11, 2));\r\nassertTrue(expectedOrder.isOrdered(toSort));\r\n```","```\r\nList<Integer> toSort = Arrays.asList(1, 2, 11);\r\nCollections.sort(toSort, Ordering.usingToString());\r\nint found = Ordering.usingToString().binarySearch(toSort, 2);\r\nSystem.out.println(found);\r\n```","```\r\nList<Integer> toSort = Arrays.asList(2, 1, 11, 100, 8, 14);\r\nint found = Ordering.usingToString().min(toSort);\r\nassertThat(found, equalTo(1));\r\n```","```\r\nList<String> toSort = Arrays.asList(\"aa\", \"b\", \"ccc\");\r\nList<String> sortedCopy = new OrderingByLenght().sortedCopy(toSort);\r\n\r\nOrdering<String> expectedOrder = Ordering.explicit(Lists.newArrayList(\"b\", \"aa\", \"ccc\"));\r\nassertFalse(expectedOrder.isOrdered(toSort));\r\nassertTrue(expectedOrder.isOrdered(sortedCopy));\r\n```","```\r\nList<Integer> toSort = Arrays.asList(2, 1, 11, 100, 8, 14);\r\nList<Integer> leastOf = Ordering.natural().leastOf(toSort, 3);\r\nList<Integer> expected = Lists.newArrayList(1, 2, 8);\r\nassertThat(expected, equalTo(leastOf));\r\n```","```\r\nList<Integer> toSort = Arrays.asList(2, 1, 11, 100, 8, 14);\r\nOrdering<Object> ordering = Ordering.natural().onResultOf(Functions.toStringFunction());\r\nList<Integer> sortedCopy = ordering.sortedCopy(toSort);\r\n\r\nList<Integer> expected = Lists.newArrayList(1, 100, 11, 14, 2, 8);\r\nassertThat(expected, equalTo(sortedCopy));\r\n```"]