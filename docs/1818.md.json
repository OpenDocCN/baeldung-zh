["```\r\npublic static int lcm(int number1, int number2) {\r\n    if (number1 == 0 || number2 == 0) {\r\n        return 0;\r\n    }\r\n    int absNumber1 = Math.abs(number1);\r\n    int absNumber2 = Math.abs(number2);\r\n    int absHigherNumber = Math.max(absNumber1, absNumber2);\r\n    int absLowerNumber = Math.min(absNumber1, absNumber2);\r\n    int lcm = absHigherNumber;\r\n    while (lcm % absLowerNumber != 0) {\r\n        lcm += absHigherNumber;\r\n    }\r\n    return lcm;\r\n}\r\n```","```\r\n@Test\r\npublic void testLCM() {\r\n    Assert.assertEquals(36, lcm(12, 18));\r\n}\r\n```","```\r\npublic static Map<Integer, Integer> getPrimeFactors(int number) {\r\n    int absNumber = Math.abs(number);\r\n\r\n    Map<Integer, Integer> primeFactorsMap = new HashMap<Integer, Integer>();\r\n\r\n    for (int factor = 2; factor <= absNumber; factor++) {\r\n        while (absNumber % factor == 0) {\r\n            Integer power = primeFactorsMap.get(factor);\r\n            if (power == null) {\r\n                power = 0;\r\n            }\r\n            primeFactorsMap.put(factor, power + 1);\r\n            absNumber /= factor;\r\n        }\r\n    }\r\n\r\n    return primeFactorsMap;\r\n}\r\n```","```\r\n@Test\r\npublic void testGetPrimeFactors() {\r\n    Map<Integer, Integer> expectedPrimeFactorsMapForTwelve = new HashMap<>();\r\n    expectedPrimeFactorsMapForTwelve.put(2, 2);\r\n    expectedPrimeFactorsMapForTwelve.put(3, 1);\r\n\r\n    Assert.assertEquals(expectedPrimeFactorsMapForTwelve, \r\n      PrimeFactorizationAlgorithm.getPrimeFactors(12));\r\n\r\n    Map<Integer, Integer> expectedPrimeFactorsMapForEighteen = new HashMap<>();\r\n    expectedPrimeFactorsMapForEighteen.put(2, 1);\r\n    expectedPrimeFactorsMapForEighteen.put(3, 2);\r\n\r\n    Assert.assertEquals(expectedPrimeFactorsMapForEighteen, \r\n      PrimeFactorizationAlgorithm.getPrimeFactors(18));\r\n}\r\n```","```\r\npublic static int lcm(int number1, int number2) {\r\n    if(number1 == 0 || number2 == 0) {\r\n        return 0;\r\n    }\r\n\r\n    Map<Integer, Integer> primeFactorsForNum1 = getPrimeFactors(number1);\r\n    Map<Integer, Integer> primeFactorsForNum2 = getPrimeFactors(number2);\r\n\r\n    Set<Integer> primeFactorsUnionSet = new HashSet<>(primeFactorsForNum1.keySet());\r\n    primeFactorsUnionSet.addAll(primeFactorsForNum2.keySet());\r\n\r\n    int lcm = 1;\r\n\r\n    for (Integer primeFactor : primeFactorsUnionSet) {\r\n        lcm *= Math.pow(primeFactor, \r\n          Math.max(primeFactorsForNum1.getOrDefault(primeFactor, 0),\r\n            primeFactorsForNum2.getOrDefault(primeFactor, 0)));\r\n    }\r\n\r\n    return lcm;\r\n}\r\n```","```\r\n@Test\r\npublic void testLCM() {\r\n    Assert.assertEquals(36, PrimeFactorizationAlgorithm.lcm(12, 18));\r\n}\r\n```","```\r\npublic static int gcd(int number1, int number2) {\r\n    if (number1 == 0 || number2 == 0) {\r\n        return number1 + number2;\r\n    } else {\r\n        int absNumber1 = Math.abs(number1);\r\n        int absNumber2 = Math.abs(number2);\r\n        int biggerValue = Math.max(absNumber1, absNumber2);\r\n        int smallerValue = Math.min(absNumber1, absNumber2);\r\n        return gcd(biggerValue % smallerValue, smallerValue);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testGCD() {\r\n    Assert.assertEquals(6, EuclideanAlgorithm.gcd(12, 18));\r\n}\r\n```","```\r\npublic static int lcm(int number1, int number2) {\r\n    if (number1 == 0 || number2 == 0)\r\n        return 0;\r\n    else {\r\n        int gcd = gcd(number1, number2);\r\n        return Math.abs(number1 * number2) / gcd;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testLCM() {\r\n    Assert.assertEquals(36, EuclideanAlgorithm.lcm(12, 18));\r\n}\r\n```","```\r\npublic static BigInteger lcm(BigInteger number1, BigInteger number2) {\r\n    BigInteger gcd = number1.gcd(number2);\r\n    BigInteger absProduct = number1.multiply(number2).abs();\r\n    return absProduct.divide(gcd);\r\n}\r\n```","```\r\n@Test\r\npublic void testLCM() {\r\n    BigInteger number1 = new BigInteger(\"12\");\r\n    BigInteger number2 = new BigInteger(\"18\");\r\n    BigInteger expectedLCM = new BigInteger(\"36\");\r\n    Assert.assertEquals(expectedLCM, BigIntegerLCM.lcm(number1, number2));\r\n}\r\n```"]