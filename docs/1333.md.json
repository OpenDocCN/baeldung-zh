["```\r\nspring.security.oauth2.client.registration.bael.authorization-grant-type=client_credentials\r\nspring.security.oauth2.client.registration.bael.client-id=bael-client-id\r\nspring.security.oauth2.client.registration.bael.client-secret=bael-secret\r\n\r\nspring.security.oauth2.client.provider.bael.token-uri=http://localhost:8085/oauth/token\r\n```","```\r\n@Autowired\r\nprivate WebClient webClient;\r\n\r\n@Scheduled(fixedRate = 5000)\r\npublic void logResourceServiceResponse() {\r\n\r\n    webClient.get()\r\n      .uri(\"http://localhost:8084/retrieve-resource\")\r\n      .retrieve()\r\n      .bodyToMono(String.class)\r\n      .map(string \r\n        -> \"Retrieved using Client Credentials Grant Type: \" + string)\r\n      .subscribe(logger::info);\r\n}\r\n```","```\r\n@Bean\r\nWebClient webClient(ReactiveClientRegistrationRepository clientRegistrations) {\r\n    ServerOAuth2AuthorizedClientExchangeFilterFunction oauth =\r\n      new ServerOAuth2AuthorizedClientExchangeFilterFunction(\r\n        clientRegistrations,\r\n        new UnAuthenticatedServerOAuth2AuthorizedClientRepository());\r\n    oauth.setDefaultClientRegistrationId(\"bael\");\r\n    return WebClient.builder()\r\n      .filter(oauth)\r\n      .build();\r\n}\r\n```","```\r\nwebClient.get()\r\n  .uri(\"http://localhost:8084/retrieve-resource\")\r\n  .attributes(\r\n    ServerOAuth2AuthorizedClientExchangeFilterFunction\r\n      .clientRegistrationId(\"bael\"))\r\n  .retrieve()\r\n  // ...\r\n```","```\r\no.s.w.r.f.client.ExchangeFunctions:\r\n  HTTP POST http://localhost:8085/oauth/token\r\no.s.http.codec.json.Jackson2JsonDecoder:\r\n  Decoded [{access_token=89cf72cd-183e-48a8-9d08-661584db4310,\r\n    token_type=bearer,\r\n    expires_in=41196,\r\n    scope=read\r\n    (truncated)...]\r\no.s.w.r.f.client.ExchangeFunctions:\r\n  HTTP GET http://localhost:8084/retrieve-resource\r\no.s.core.codec.StringDecoder:\r\n  Decoded \"This is the resource!\"\r\nc.b.w.c.service.WebClientChonJob:\r\n  We retrieved the following resource using Client Credentials Grant Type: This is the resource!\r\n```","```\r\nspring.security.oauth2.client.registration.bael.client-name=bael\r\nspring.security.oauth2.client.registration.bael.client-id=bael-client-id\r\nspring.security.oauth2.client.registration.bael.client-secret=bael-secret\r\nspring.security.oauth2.client.registration.bael\r\n  .authorization-grant-type=authorization_code\r\nspring.security.oauth2.client.registration.bael\r\n  .redirect-uri=http://localhost:8080/login/oauth2/code/bael\r\n\r\nspring.security.oauth2.client.provider.bael.token-uri=http://localhost:8085/oauth/token\r\nspring.security.oauth2.client.provider.bael\r\n  .authorization-uri=http://localhost:8085/oauth/authorize\r\nspring.security.oauth2.client.provider.bael.user-info-uri=http://localhost:8084/user\r\nspring.security.oauth2.client.provider.bael.user-name-attribute=name\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\r\n    http.authorizeExchange()\r\n      .anyExchange()\r\n      .authenticated()\r\n      .and()\r\n      .oauth2Login();\r\n    return http.build();\r\n}\r\n```","```\r\n@Bean\r\nWebClient webClient(\r\n  ReactiveClientRegistrationRepository clientRegistrations,\r\n  ServerOAuth2AuthorizedClientRepository authorizedClients) {\r\n    ServerOAuth2AuthorizedClientExchangeFilterFunction oauth =\r\n      new ServerOAuth2AuthorizedClientExchangeFilterFunction(\r\n        clientRegistrations,\r\n        authorizedClients);\r\n    oauth.setDefaultOAuth2AuthorizedClient(true);\r\n    return WebClient.builder()\r\n      .filter(oauth)\r\n      .build();\r\n}\r\n```","```\r\n@RestController\r\npublic class ClientRestController {\r\n\r\n    @Autowired\r\n    WebClient webClient;\r\n\r\n    @GetMapping(\"/auth-code\")\r\n    Mono<String> useOauthWithAuthCode() {\r\n        Mono<String> retrievedResource = webClient.get()\r\n          .uri(\"http://localhost:8084/retrieve-resource\")\r\n          .retrieve()\r\n          .bodyToMono(String.class);\r\n        return retrievedResource.map(string ->\r\n          \"We retrieved the following resource using Oauth: \" + string);\r\n    }\r\n}\r\n```","```\r\no.s.w.s.adapter.HttpWebHandlerAdapter: HTTP GET \"/auth-code\"\r\n...\r\nHTTP/1.1 302 Found\r\nLocation: /oauth2/authorization/bael\r\n```","```\r\nHTTP/1.1 302 Found\r\nLocation: http://localhost:8085/oauth/authorize\r\n  ?response_type=code\r\n  &client;_id=bael-client-id\r\n  &state;=...\r\n  &redirect;_uri=http%3A%2F%2Flocalhost%3A8080%2Flogin%2Foauth2%2Fcode%2Fbael\r\n```","```\r\no.s.w.s.adapter.HttpWebHandlerAdapter:HTTP GET \"/login/oauth2/code/bael?code=...&state;=...\r\n```","```\r\no.s.w.r.f.client.ExchangeFunctions:HTTP POST http://localhost:8085/oauth/token\r\n```","```\r\no.s.w.r.f.client.ExchangeFunctions:HTTP GET http://localhost:8084/user\r\n```","```\r\nHTTP/1.1 302 Found\r\nLocation: /auth-code\r\n```","```\r\no.s.w.r.f.client.ExchangeFunctions:HTTP GET http://localhost:8084/retrieve-resource\r\no.s.w.r.f.client.ExchangeFunctions:Response 200 OK\r\no.s.core.codec.StringDecoder :Decoded \"This is the resource!\"\r\n```","```\r\n@GetMapping(\"/auth-code-annotated\")\r\nMono<String> useOauthWithAuthCodeAndAnnotation(\r\n  @RegisteredOAuth2AuthorizedClient(\"bael\") OAuth2AuthorizedClient authorizedClient) {\r\n    Mono<String> retrievedResource = webClient.get()\r\n      .uri(\"http://localhost:8084/retrieve-resource\")\r\n      .attributes(\r\n        ServerOAuth2AuthorizedClientExchangeFilterFunction.oauth2AuthorizedClient(authorizedClient))\r\n      .retrieve()\r\n      .bodyToMono(String.class);\r\n    return retrievedResource.map(string -> \r\n      \"Resource: \" + string \r\n        + \" - Principal associated: \" + authorizedClient.getPrincipalName() \r\n        + \" - Token will expire at: \" + authorizedClient.getAccessToken()\r\n          .getExpiresAt());\r\n}\r\n```","```\r\nspring.security.oauth2.client.registration.bael\r\n  .redirect-uri=http://localhost:8080/login/oauth2/code/bael\r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {\r\n    http.authorizeExchange()\r\n      .anyExchange()\r\n      .authenticated()\r\n      .and()\r\n      .oauth2Client()\r\n      .and()\r\n      .formLogin();\r\n    return http.build();\r\n}\r\n```","```\r\n@Autowired\r\nWebClient client;\r\n\r\npublic Mono<String> obtainSecuredResource() {\r\n    String encodedClientData = \r\n      Base64Utils.encodeToString(\"bael-client-id:bael-secret\".getBytes());\r\n    Mono<String> resource = client.post()\r\n      .uri(\"localhost:8085/oauth/token\")\r\n      .header(\"Authorization\", \"Basic \" + encodedClientData)\r\n      .body(BodyInserters.fromFormData(\"grant_type\", \"client_credentials\"))\r\n      .retrieve()\r\n      .bodyToMono(JsonNode.class)\r\n      .flatMap(tokenResponse -> {\r\n          String accessTokenValue = tokenResponse.get(\"access_token\")\r\n            .textValue();\r\n          return client.get()\r\n            .uri(\"localhost:8084/retrieve-resource\")\r\n            .headers(h -> h.setBearerAuth(accessTokenValue))\r\n            .retrieve()\r\n            .bodyToMono(String.class);\r\n        });\r\n    return resource.map(res ->\r\n      \"Retrieved the resource using a manual approach: \" + res);\r\n}\r\n```"]