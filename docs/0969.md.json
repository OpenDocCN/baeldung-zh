["```\r\n$> mvn install jetty:run\r\n```","```\r\npublic class AuthenticationFilter implements Filter {\r\n    ...\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request,\r\n      ServletResponse response, \r\n      FilterChain chain) {\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\r\n        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\r\n\r\n        HttpSession session = httpServletRequest.getSession(false);\r\n        if (session == null || session.getAttribute(\"username\") == null) {\r\n            FrontCommand command = new LoginCommand();\r\n            command.init(httpServletRequest, httpServletResponse);\r\n            command.process();\r\n        } else {\r\n            chain.doFilter(request, response);\r\n        }\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class VisitorCounterFilter implements Filter {\r\n    private static Set<String> users = new HashSet<>();\r\n\r\n    ...\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response,\r\n      FilterChain chain) {\r\n        HttpSession session = ((HttpServletRequest) request).getSession(false);\r\n        Optional.ofNullable(session.getAttribute(\"username\"))\r\n          .map(Object::toString)\r\n          .ifPresent(users::add);\r\n        request.setAttribute(\"counter\", users.size());\r\n        chain.doFilter(request, response);\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class FilterChainImpl implements FilterChain {\r\n    private Iterator<Filter> filters;\r\n\r\n    public FilterChainImpl(Filter... filters) {\r\n        this.filters = Arrays.asList(filters).iterator();\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request, ServletResponse response) {\r\n        if (filters.hasNext()) {\r\n            Filter filter = filters.next();\r\n            filter.doFilter(request, response, this);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class FilterManager {\r\n    public static void process(HttpServletRequest request,\r\n      HttpServletResponse response, OnIntercept callback) {\r\n        FilterChain filterChain = new FilterChainImpl(\r\n          new AuthenticationFilter(callback), new VisitorCounterFilter());\r\n        filterChain.doFilter(request, response);\r\n    }\r\n}\r\n```","```\r\npublic abstract class FrontCommand {\r\n    ...\r\n\r\n    public void process() {\r\n        FilterManager.process(request, response);\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic abstract class BaseFilter implements Filter {\r\n    private Logger log = LoggerFactory.getLogger(BaseFilter.class);\r\n\r\n    protected FilterConfig filterConfig;\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n        log.info(\"Initialize filter: {}\", getClass().getSimpleName());\r\n        this.filterConfig = filterConfig;\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n        log.info(\"Destroy filter: {}\", getClass().getSimpleName());\r\n    }\r\n}\r\n```","```\r\npublic class LoggingFilter extends BaseFilter {\r\n    private static final Logger log = LoggerFactory.getLogger(LoggingFilter.class);\r\n\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, \r\n      ServletResponse response,\r\n      FilterChain chain) {\r\n        chain.doFilter(request, response);\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\r\n\r\n        String username = Optional\r\n          .ofNullable(httpServletRequest.getAttribute(\"username\"))\r\n          .map(Object::toString)\r\n          .orElse(\"guest\");\r\n\r\n        log.info(\r\n          \"Request from '{}@{}': {}?{}\", \r\n          username, \r\n          request.getRemoteAddr(),\r\n          httpServletRequest.getRequestURI(), \r\n          request.getParameterMap());\r\n    }\r\n}\r\n```","```\r\n@WebFilter(servletNames = {\"intercepting-filter\"}, \r\n  initParams = {@WebInitParam(name = \"encoding\", value = \"UTF-8\")})\r\npublic class EncodingFilter extends BaseFilter {\r\n    private String encoding;\r\n\r\n    @Override\r\n    public void init(FilterConfig filterConfig) throws ServletException {\r\n        super.init(filterConfig);\r\n        this.encoding = filterConfig.getInitParameter(\"encoding\");\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request,\r\n      ServletResponse response, FilterChain chain) {\r\n        String encoding = Optional\r\n          .ofNullable(request.getParameter(\"encoding\"))\r\n          .orElse(this.encoding);\r\n        response.setCharacterEncoding(encoding); \r\n\r\n        chain.doFilter(request, response);\r\n    }\r\n}\r\n```","```\r\n<filter>\r\n    <filter-name>encoding-filter</filter-name>\r\n    <filter-class>\r\n      com.baeldung.patterns.intercepting.filter.filters.EncodingFilter\r\n    </filter-class>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>encoding-filter</filter-name>\r\n    <servlet-name>intercepting-filter</servlet-name>\r\n</filter-mapping>\r\n```","```\r\n@WebFilter(servletNames = \"intercepting-filter\")\r\npublic class LoggingFilter extends BaseFilter {\r\n    ...\r\n}\r\n```","```\r\npublic abstract class TemplateFilter extends BaseFilter {\r\n    protected abstract void preFilter(HttpServletRequest request,\r\n      HttpServletResponse response);\r\n\r\n    protected abstract void postFilter(HttpServletRequest request,\r\n      HttpServletResponse response);\r\n\r\n    @Override\r\n    public void doFilter(ServletRequest request,\r\n      ServletResponse response, FilterChain chain) {\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\r\n        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\r\n\r\n        preFilter(httpServletRequest, httpServletResponse);\r\n        chain.doFilter(request, response);\r\n        postFilter(httpServletRequest, httpServletResponse);\r\n    }\r\n}\r\n```"]