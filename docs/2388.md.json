["```\r\n@Entity\r\npublic class VerificationToken {\r\n    private static final int EXPIRATION = 60 * 24;\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String token;\r\n\r\n    @OneToOne(targetEntity = User.class, fetch = FetchType.EAGER)\r\n    @JoinColumn(nullable = false, name = \"user_id\")\r\n    private User user;\r\n\r\n    private Date expiryDate;\r\n\r\n    private Date calculateExpiryDate(int expiryTimeInMinutes) {\r\n        Calendar cal = Calendar.getInstance();\r\n        cal.setTime(new Timestamp(cal.getTime().getTime()));\r\n        cal.add(Calendar.MINUTE, expiryTimeInMinutes);\r\n        return new Date(cal.getTime().getTime());\r\n    }\r\n\r\n    // standard constructors, getters and setters\r\n}\r\n```","```\r\npublic class User {\r\n    ...\r\n    @Column(name = \"enabled\")\r\n    private boolean enabled;\r\n\r\n    public User() {\r\n        super();\r\n        this.enabled=false;\r\n    }\r\n    ...\r\n}\r\n```","```\r\n@Autowired\r\nApplicationEventPublisher eventPublisher\r\n\r\n@PostMapping(\"/user/registration\")\r\npublic ModelAndView registerUserAccount(\r\n  @ModelAttribute(\"user\") @Valid UserDto userDto, \r\n  HttpServletRequest request, Errors errors) { \r\n\r\n    try {\r\n        User registered = userService.registerNewUserAccount(userDto);\r\n\r\n        String appUrl = request.getContextPath();\r\n        eventPublisher.publishEvent(new OnRegistrationCompleteEvent(registered, \r\n          request.getLocale(), appUrl));\r\n    } catch (UserAlreadyExistException uaeEx) {\r\n        ModelAndView mav = new ModelAndView(\"registration\", \"user\", userDto);\r\n        mav.addObject(\"message\", \"An account for that username/email already exists.\");\r\n        return mav;\r\n    } catch (RuntimeException ex) {\r\n        return new ModelAndView(\"emailError\", \"user\", userDto);\r\n    }\r\n\r\n    return new ModelAndView(\"successRegister\", \"user\", userDto);\r\n}\r\n```","```\r\npublic class OnRegistrationCompleteEvent extends ApplicationEvent {\r\n    private String appUrl;\r\n    private Locale locale;\r\n    private User user;\r\n\r\n    public OnRegistrationCompleteEvent(\r\n      User user, Locale locale, String appUrl) {\r\n        super(user);\r\n\r\n        this.user = user;\r\n        this.locale = locale;\r\n        this.appUrl = appUrl;\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Component\r\npublic class RegistrationListener implements \r\n  ApplicationListener<OnRegistrationCompleteEvent> {\r\n\r\n    @Autowired\r\n    private IUserService service;\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @Autowired\r\n    private JavaMailSender mailSender;\r\n\r\n    @Override\r\n    public void onApplicationEvent(OnRegistrationCompleteEvent event) {\r\n        this.confirmRegistration(event);\r\n    }\r\n\r\n    private void confirmRegistration(OnRegistrationCompleteEvent event) {\r\n        User user = event.getUser();\r\n        String token = UUID.randomUUID().toString();\r\n        service.createVerificationToken(user, token);\r\n\r\n        String recipientAddress = user.getEmail();\r\n        String subject = \"Registration Confirmation\";\r\n        String confirmationUrl \r\n          = event.getAppUrl() + \"/regitrationConfirm?token=\" + token;\r\n        String message = messages.getMessage(\"message.regSucc\", null, event.getLocale());\r\n\r\n        SimpleMailMessage email = new SimpleMailMessage();\r\n        email.setTo(recipientAddress);\r\n        email.setSubject(subject);\r\n        email.setText(message + \"\\r\\n\" + \"http://localhost:8080\" + confirmationUrl);\r\n        mailSender.send(email);\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate IUserService service;\r\n\r\n@GetMapping(\"/regitrationConfirm\")\r\npublic String confirmRegistration\r\n  (WebRequest request, Model model, @RequestParam(\"token\") String token) {\r\n\r\n    Locale locale = request.getLocale();\r\n\r\n    VerificationToken verificationToken = service.getVerificationToken(token);\r\n    if (verificationToken == null) {\r\n        String message = messages.getMessage(\"auth.message.invalidToken\", null, locale);\r\n        model.addAttribute(\"message\", message);\r\n        return \"redirect:/badUser.html?lang=\" + locale.getLanguage();\r\n    }\r\n\r\n    User user = verificationToken.getUser();\r\n    Calendar cal = Calendar.getInstance();\r\n    if ((verificationToken.getExpiryDate().getTime() - cal.getTime().getTime()) <= 0) {\r\n        String messageValue = messages.getMessage(\"auth.message.expired\", null, locale)\r\n        model.addAttribute(\"message\", messageValue);\r\n        return \"redirect:/badUser.html?lang=\" + locale.getLanguage();\r\n    } \r\n\r\n    user.setEnabled(true); \r\n    service.saveRegisteredUser(user); \r\n    return \"redirect:/login.html?lang=\" + request.getLocale().getLanguage(); \r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h1 th:text=\"${param.message[0]}>Error Message</h1>\r\n    <a th:href=\"@{/registration.html}\" \r\n      th:text=\"#{label.form.loginSignUp}\">signup</a>\r\n</body>\r\n</html>\r\n```","```\r\n@Autowired\r\nUserRepository userRepository;\r\n\r\npublic UserDetails loadUserByUsername(String email) \r\n  throws UsernameNotFoundException {\r\n\r\n    boolean enabled = true;\r\n    boolean accountNonExpired = true;\r\n    boolean credentialsNonExpired = true;\r\n    boolean accountNonLocked = true;\r\n    try {\r\n        User user = userRepository.findByEmail(email);\r\n        if (user == null) {\r\n            throw new UsernameNotFoundException(\r\n              \"No user found with username: \" + email);\r\n        }\r\n\r\n        return new org.springframework.security.core.userdetails.User(\r\n          user.getEmail(), \r\n          user.getPassword().toLowerCase(), \r\n          user.isEnabled(), \r\n          accountNonExpired, \r\n          credentialsNonExpired, \r\n          accountNonLocked, \r\n          getAuthorities(user.getRole()));\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @Autowired\r\n    private LocaleResolver localeResolver;\r\n\r\n    @Override\r\n    public void onAuthenticationFailure(HttpServletRequest request, \r\n      HttpServletResponse response, AuthenticationException exception)\r\n      throws IOException, ServletException {\r\n        setDefaultFailureUrl(\"/login.html?error=true\");\r\n\r\n        super.onAuthenticationFailure(request, response, exception);\r\n\r\n        Locale locale = localeResolver.resolveLocale(request);\r\n\r\n        String errorMessage = messages.getMessage(\"message.badCredentials\", null, locale);\r\n\r\n        if (exception.getMessage().equalsIgnoreCase(\"User is disabled\")) {\r\n            errorMessage = messages.getMessage(\"auth.message.disabled\", null, locale);\r\n        } else if (exception.getMessage().equalsIgnoreCase(\"User account has expired\")) {\r\n            errorMessage = messages.getMessage(\"auth.message.expired\", null, locale);\r\n        }\r\n\r\n        request.getSession().setAttribute(WebAttributes.AUTHENTICATION_EXCEPTION, errorMessage);\r\n    }\r\n}\r\n```","```\r\n<div th:if=\"${param.error != null}\" \r\n  th:text=\"${session[SPRING_SECURITY_LAST_EXCEPTION]}\">error</div>\r\n```","```\r\npublic interface VerificationTokenRepository \r\n  extends JpaRepository<VerificationToken, Long> {\r\n\r\n    VerificationToken findByToken(String token);\r\n\r\n    VerificationToken findByUser(User user);\r\n}\r\n```","```\r\npublic interface IUserService {\r\n\r\n    User registerNewUserAccount(UserDto userDto) \r\n      throws UserAlreadyExistException;\r\n\r\n    User getUser(String verificationToken);\r\n\r\n    void saveRegisteredUser(User user);\r\n\r\n    void createVerificationToken(User user, String token);\r\n\r\n    VerificationToken getVerificationToken(String VerificationToken);\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class UserService implements IUserService {\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    @Autowired\r\n    private VerificationTokenRepository tokenRepository;\r\n\r\n    @Override\r\n    public User registerNewUserAccount(UserDto userDto) \r\n      throws UserAlreadyExistException {\r\n\r\n        if (emailExist(userDto.getEmail())) {\r\n            throw new UserAlreadyExistException(\r\n              \"There is an account with that email adress: \" \r\n              + userDto.getEmail());\r\n        }\r\n\r\n        User user = new User();\r\n        user.setFirstName(userDto.getFirstName());\r\n        user.setLastName(userDto.getLastName());\r\n        user.setPassword(userDto.getPassword());\r\n        user.setEmail(userDto.getEmail());\r\n        user.setRole(new Role(Integer.valueOf(1), user));\r\n        return repository.save(user);\r\n    }\r\n\r\n    private boolean emailExist(String email) {\r\n        return userRepository.findByEmail(email) != null;\r\n    }\r\n\r\n    @Override\r\n    public User getUser(String verificationToken) {\r\n        User user = tokenRepository.findByToken(verificationToken).getUser();\r\n        return user;\r\n    }\r\n\r\n    @Override\r\n    public VerificationToken getVerificationToken(String VerificationToken) {\r\n        return tokenRepository.findByToken(VerificationToken);\r\n    }\r\n\r\n    @Override\r\n    public void saveRegisteredUser(User user) {\r\n        repository.save(user);\r\n    }\r\n\r\n    @Override\r\n    public void createVerificationToken(User user, String token) {\r\n        VerificationToken myToken = new VerificationToken(token, user);\r\n        tokenRepository.save(myToken);\r\n    }\r\n}\r\n```"]