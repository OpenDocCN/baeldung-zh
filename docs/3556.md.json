["```\r\n@Document(indexName = \"blog\", type = \"article\")\r\npublic class Article {\r\n\r\n    // ...\r\n\r\n    @Field(type = Keyword)\r\n    private String[] tags;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Query(\"{\\\"bool\\\": {\\\"must\\\": [{\\\"match\\\": {\\\"tags\\\": \\\"?0\\\"}}]}}\")\r\nPage<Article> findByTagUsingDeclaredQuery(String tag, Pageable pageable);\r\n```","```\r\nboolQuery().must(termQuery(\"tags\", \"elasticsearch\"));\r\n```","```\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Spring Data Elasticsearch\",\r\n        \"authors\": [ { \"name\": \"John Doe\" }, { \"name\": \"John Smith\" } ],\r\n        \"tags\": [ \"elasticsearch\", \"spring data\" ]\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"title\": \"Search engines\",\r\n        \"authors\": [ { \"name\": \"John Doe\" } ],\r\n        \"tags\": [ \"search engines\", \"tutorial\" ]\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"title\": \"Second Article About Elasticsearch\",\r\n        \"authors\": [ { \"name\": \"John Smith\" } ],\r\n        \"tags\": [ \"elasticsearch\", \"spring data\" ]\r\n    },\r\n    {\r\n        \"id\": 4,\r\n        \"title\": \"Elasticsearch Tutorial\",\r\n        \"authors\": [ { \"name\": \"John Doe\" } ],\r\n        \"tags\": [ \"elasticsearch\" ]\r\n    },\r\n]\r\n```","```\r\nPage<Article> articleByTags \r\n  = articleService.findByTagUsingDeclaredQuery(\"elasticsearch\", PageRequest.of(0, 10));\r\n\r\n// articleByTags will contain 3 articles [ 1, 3, 4]\r\nassertThat(articleByTags, containsInAnyOrder(\r\n hasProperty(\"id\", is(1)),\r\n hasProperty(\"id\", is(3)),\r\n hasProperty(\"id\", is(4)))\r\n);\r\n```","```\r\n@Query(\"{\\\"bool\\\": {\\\"must\\\": \" +\r\n  \"{\\\"match_all\\\": {}}, \\\"filter\\\": {\\\"term\\\": {\\\"tags\\\": \\\"?0\\\" }}}}\")\r\nPage<Article> findByFilteredTagQuery(String tag, Pageable pageable);\r\n```","```\r\nPage<Article> articleByTags =\r\n  articleService.findByFilteredTagQuery(\"elasticsearch\", PageRequest.of(0, 10));\r\n\r\n// articleByTags will contain 3 articles [ 1, 3, 4]\r\nassertThat(articleByTags, containsInAnyOrder(\r\n  hasProperty(\"id\", is(1)),\r\n  hasProperty(\"id\", is(3)),\r\n  hasProperty(\"id\", is(4)))\r\n);\r\n```","```\r\n@Query(\"{\\\"bool\\\": {\\\"must\\\": \" + \r\n  \"{\\\"match\\\": {\\\"authors.name\\\": \\\"?0\\\"}}, \" +\r\n  \"\\\"filter\\\": {\\\"term\\\": {\\\"tags\\\": \\\"?1\\\" }}}}\")\r\nPage<Article> findByAuthorsNameAndFilteredTagQuery(\r\n  String name, String tag, Pageable pageable);\r\n```","```\r\nQueryBuilder builder = boolQuery().must(\r\n  nestedQuery(\"authors\", boolQuery().must(termQuery(\"authors.name\", \"doe\")), ScoreMode.None))\r\n  .filter(termQuery(\"tags\", \"elasticsearch\"));\r\n```","```\r\nSearchQuery searchQuery = new NativeSearchQueryBuilder().withQuery(builder)\r\n  .build();\r\nList<Article> articles = \r\n  elasticsearchTemplate.queryForList(searchQuery, Article.class);\r\n\r\n// articles contains [ 1, 4 ]\r\nassertThat(articleByTags, containsInAnyOrder(\r\n hasProperty(\"id\", is(1)),\r\n hasProperty(\"id\", is(4)))\r\n);\r\n```","```\r\n@Field(type = Nested)\r\nprivate List<Tag> tags;\r\n```"]