["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>javax</groupId>\r\n        <artifactId>javaee-web-api</artifactId>\r\n        <version>8.0</version>\r\n        <scope>provided</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>javax.security.enterprise</groupId>\r\n        <artifactId>javax.security.enterprise-api</artifactId>\r\n        <version>1.0</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.glassfish.soteria</groupId>\r\n        <artifactId>javax.security.enterprise</artifactId>\r\n        <version>1.0</version>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\n@BasicAuthenticationMechanismDefinition(\r\n  realmName = \"userRealm\")\r\n@ApplicationScoped\r\npublic class AppConfig{}\r\n```","```\r\nWWW-Authenticate: Basic realm=\"userRealm\"\r\n```","```\r\n//user=baeldung, password=baeldung\r\nAuthorization: Basic YmFlbGR1bmc6YmFlbGR1bmc= \r\n```","```\r\n@FormAuthenticationMechanismDefinition(\r\n  loginToContinue = @LoginToContinue(\r\n    loginPage = \"/login.html\",\r\n    errorPage = \"/login-error.html\"))\r\n@ApplicationScoped\r\npublic class AppConfig{}\r\n```","```\r\n<form action=\"j_security_check\" method=\"post\">\r\n    <input name=\"j_username\" type=\"text\"/>\r\n    <input name=\"j_password\" type=\"password\"/>\r\n    <input type=\"submit\">\r\n</form>\r\n```","```\r\n@CustomFormAuthenticationMechanismDefinition(\r\n  loginToContinue = @LoginToContinue(loginPage = \"/login.xhtml\"))\r\n@ApplicationScoped\r\npublic class AppConfig {\r\n}\r\n```","```\r\n@Named\r\n@RequestScoped\r\npublic class LoginBean {\r\n\r\n    @Inject\r\n    private SecurityContext securityContext;\r\n\r\n    @NotNull private String username;\r\n\r\n    @NotNull private String password;\r\n\r\n    public void login() {\r\n        Credential credential = new UsernamePasswordCredential(\r\n          username, new Password(password));\r\n        AuthenticationStatus status = securityContext\r\n          .authenticate(\r\n            getHttpRequestFromFacesContext(),\r\n            getHttpResponseFromFacesContext(),\r\n            withParams().credential(credential));\r\n        // ...\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n//...\r\n<input type=\"submit\" value=\"Login\" jsf:action=\"#{loginBean.login}\"/>\r\n```","```\r\n@ApplicationScoped\r\npublic class CustomAuthentication \r\n  implements HttpAuthenticationMechanism {\r\n\r\n    @Override\r\n    public AuthenticationStatus validateRequest(\r\n      HttpServletRequest request,\r\n      HttpServletResponse response, \r\n      HttpMessageContext httpMsgContext) \r\n      throws AuthenticationException {\r\n\r\n        String username = request.getParameter(\"username\");\r\n        String password = response.getParameter(\"password\");\r\n        // mocking UserDetail, but in real life, we can obtain it from a database\r\n        UserDetail userDetail = findByUserNameAndPassword(username, password);\r\n        if (userDetail != null) {\r\n            return httpMsgContext.notifyContainerAboutLogin(\r\n              new CustomPrincipal(userDetail),\r\n              new HashSet<>(userDetail.getRoles()));\r\n        }\r\n        return httpMsgContext.responseUnauthorized();\r\n    }\r\n    //...\r\n}\r\n```","```\r\nHttpMessageContext.notifyContainerAboutLogin(Principal principal, Set groups)\r\n```","```\r\n@WebServlet(\"/secured\")\r\n@ServletSecurity(\r\n  value = @HttpConstraint(rolesAllowed = {\"admin_role\"}),\r\n  httpMethodConstraints = {\r\n    @HttpMethodConstraint(\r\n      value = \"GET\", \r\n      rolesAllowed = {\"user_role\"}),\r\n    @HttpMethodConstraint(     \r\n      value = \"POST\", \r\n      rolesAllowed = {\"admin_role\"})\r\n  })\r\npublic class SecuredServlet extends HttpServlet {\r\n}\r\n```","```\r\n@DatabaseIdentityStoreDefinition(\r\n  dataSourceLookup = \"java:comp/env/jdbc/securityDS\",\r\n  callerQuery = \"select password from users where username = ?\",\r\n  groupsQuery = \"select GROUPNAME from groups where username = ?\",\r\n  priority=30)\r\n@ApplicationScoped\r\npublic class AppConfig {\r\n}\r\n```","```\r\n@LdapIdentityStoreDefinition(\r\n  url = \"ldap://localhost:10389\",\r\n  callerBaseDn = \"ou=caller,dc=baeldung,dc=com\",\r\n  groupSearchBase = \"ou=group,dc=baeldung,dc=com\",\r\n  groupSearchFilter = \"(&(member=%s)(objectClass=groupOfNames))\")\r\n@ApplicationScoped\r\npublic class AppConfig {\r\n}\r\n```","```\r\ndefault CredentialValidationResult validate(\r\n  Credential credential)\r\ndefault Set<String> getCallerGroups(\r\n  CredentialValidationResult validationResult)\r\ndefault int priority()\r\ndefault Set<ValidationType> validationTypes()\r\n```","```\r\n@Override\r\npublic Set<ValidationType> validationTypes() {\r\n    return EnumSet.of(ValidationType.VALIDATE);\r\n}\r\n```","```\r\n@ApplicationScoped\r\npublic class InMemoryIdentityStore implements IdentityStore {\r\n    // init from a file or harcoded\r\n    private Map<String, UserDetails> users = new HashMap<>();\r\n\r\n    @Override\r\n    public int priority() {\r\n        return 70;\r\n    }\r\n\r\n    @Override\r\n    public Set<ValidationType> validationTypes() {\r\n        return EnumSet.of(ValidationType.VALIDATE);\r\n    }\r\n\r\n    public CredentialValidationResult validate( \r\n      UsernamePasswordCredential credential) {\r\n\r\n        UserDetails user = users.get(credential.getCaller());\r\n        if (credential.compareTo(user.getLogin(), user.getPassword())) {\r\n            return new CredentialValidationResult(user.getLogin());\r\n        }\r\n        return INVALID_RESULT;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic Set<ValidationType> validationTypes() {\r\n    return EnumSet.of(ValidationType.PROVIDE_GROUPS);\r\n}\r\n```","```\r\n@ApplicationScoped\r\npublic class InMemoryIdentityStore implements IdentityStore {\r\n    // init from a file or harcoded\r\n    private Map<String, UserDetails> users = new HashMap<>();\r\n\r\n    @Override\r\n    public int priority() {\r\n        return 90;\r\n    }\r\n\r\n    @Override\r\n    public Set<ValidationType> validationTypes() {\r\n        return EnumSet.of(ValidationType.PROVIDE_GROUPS);\r\n    }\r\n\r\n    @Override\r\n    public Set<String> getCallerGroups(CredentialValidationResult validationResult) {\r\n        UserDetails user = users.get(\r\n          validationResult.getCallerPrincipal().getName());\r\n        return new HashSet<>(user.getRoles());\r\n    }\r\n}\r\n```","```\r\n@Inject\r\nSecurityContext securityContext;\r\n```","```\r\nPrincipal getCallerPrincipal();\r\nboolean isCallerInRole(String role);\r\n<T extends Principal> Set<T> getPrincipalsByType(Class<T> type);\r\n```","```\r\n@WebServlet(\"/protectedServlet\")\r\n@ServletSecurity(@HttpConstraint(rolesAllowed = \"USER_ROLE\"))\r\npublic class ProtectedServlet extends HttpServlet {\r\n    //...\r\n}\r\n```","```\r\nsecurityContext.hasAccessToWebResource(\"/protectedServlet\", \"GET\");\r\n```","```\r\nAuthenticationStatus authenticate(\r\n  HttpServletRequest request, \r\n  HttpServletResponse response,\r\n  AuthenticationParameters parameters);\r\n```","```\r\nwithParams().credential(credential)\r\n```","```\r\nmvn clean package liberty:run\r\n```"]