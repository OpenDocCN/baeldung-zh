["```\r\n@Entity\r\npublic class Employee {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n    @NotNull\r\n    private String firstName;\r\n    @NotNull\r\n    private String lastName;\r\n    // Standard constructor, getters and setters\r\n}\r\n```","```\r\npublic interface EmployeeRepository \r\n  extends CrudRepository<Employee, Long> {\r\n    List<Employee> findAll();\r\n}\r\n```","```\r\n@RestController\r\npublic class EmployeeController {\r\n    @Autowired\r\n    private EmployeeRepository repository;\r\n    @GetMapping(\"/employees\")\r\n    public List<Employee> getEmployees() {\r\n        return repository.findAll();\r\n    }\r\n    // Other CRUD endpoints handlers\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class WebSecurityConfig \r\n  extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) \r\n      throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n            .antMatchers(HttpMethod.GET, \"/employees\", \"/employees/**\")\r\n            .permitAll()\r\n          .anyRequest()\r\n            .authenticated()\r\n          .and()\r\n            .httpBasic();\r\n    }\r\n    // other necessary beans and definitions\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\r\n@AutoConfigureMockMvc\r\npublic class EmployeeControllerTests {\r\n    @Autowired\r\n    private MockMvc mvc;\r\n    @Test\r\n    @WithMockUser()\r\n    public void givenNoEmployee_whenCreateEmployee_thenEmployeeCreated() throws Exception {\r\n        mvc.perform(post(\"/employees\").content(\r\n            new ObjectMapper().writeValueAsString(new Employee(\"First\", \"Last\"))\r\n            .with(csrf()))\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .accept(MediaType.APPLICATION_JSON))\r\n          .andExpect(MockMvcResultMatchers.status()\r\n            .isCreated())\r\n          .andExpect(jsonPath(\"$.firstName\", is(\"First\")))\r\n          .andExpect(jsonPath(\"$.lastName\", is(\"Last\")));\r\n    }\r\n    // other tests as necessary\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```"]