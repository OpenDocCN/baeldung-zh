["```\r\npublic class Book {\r\n\r\n    private Long bookId;\r\n    private String title;\r\n    private String author;\r\n    private int numberOfPages;\r\n\r\n    // constructors, getters and setters\r\n\r\n}\r\n```","```\r\npublic class BookRepository {\r\n    public Book getByBookId(Long bookId) {\r\n        return new Book(bookId, \"To Kill a Mocking Bird\", \"Harper Lee\", 256);\r\n    }\r\n\r\n    public Book save(Book book) {\r\n        return new Book(book.getBookId(), book.getTitle(), book.getAuthor(), book.getNumberOfPages());\r\n    }\r\n\r\n    public Book selectRandomBook(Book bookOne, Book bookTwo, Book bookThree) {\r\n        List<Book> selection = new ArrayList<>();\r\n        selection.add(bookOne);\r\n        selection.add(bookTwo);\r\n        selection.add(bookThree);\r\n        Random random = new Random();\r\n        return selection.get(random.nextInt(selection.size()));\r\n    }\r\n}\r\n```","```\r\npublic class BookService {\r\n    private final BookRepository bookRepository;\r\n\r\n    public BookService(BookRepository bookRepository) {\r\n        this.bookRepository = bookRepository;\r\n    }\r\n\r\n    public Book getByBookId(Long id) {\r\n        return bookRepository.getByBookId(id);\r\n    }\r\n\r\n    public Book save(Book book) {\r\n        return bookRepository.save(book);\r\n    }\r\n\r\n    public Book selectRandomBook(Book book1, Book book2, Book book3) {\r\n        return bookRepository.selectRandomBook(book1, book2, book3);\r\n    }\r\n}\r\n```","```\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class BookServiceUnitTest {\r\n    @InjectMocks\r\n    private BookService bookService;\r\n\r\n    @Mock\r\n    private BookRepository bookRepository;\r\n\r\n    // test methods\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenSaveMethodMocked_whenSaveInvoked_ThenReturnFirstArgument_UnitTest() {\r\n    Book book = new Book(\"To Kill a Mocking Bird\", \"Harper Lee\", 256);\r\n    Mockito.when(bookRepository.save(any(Book.class))).then(AdditionalAnswers.returnsFirstArg());\r\n\r\n    Book savedBook = bookService.save(book);\r\n\r\n    assertEquals(savedBook, book);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnSecondArgument_UnitTest() {\r\n    Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\r\n    Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\r\n    Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\r\n\r\n    Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class),\r\n      any(Book.class))).then(AdditionalAnswers.returnsSecondArg());\r\n\r\n    Book secondBook = bookService.selectRandomBook(book1, book2, book3);\r\n\r\n    assertEquals(secondBook, book2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnLastArgument_UnitTest() {\r\n    Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\r\n    Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\r\n    Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\r\n\r\n    Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class), \r\n      any(Book.class))).then(AdditionalAnswers.returnsLastArg());\r\n\r\n    Book lastBook = bookService.selectRandomBook(book1, book2, book3);\r\n    assertEquals(lastBook, book3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCheckifEqualsMethodMocked_whenCheckifEqualsInvoked_ThenReturnArgumentAtIndex_UnitTest() {\r\n    Book book1 = new Book(1L, \"The Stranger\", \"Albert Camus\", 456);\r\n    Book book2 = new Book(2L, \"Animal Farm\", \"George Orwell\", 300);\r\n    Book book3 = new Book(3L, \"Romeo and Juliet\", \"William Shakespeare\", 200);\r\n\r\n    Mockito.when(bookRepository.selectRandomBook(any(Book.class), any(Book.class), \r\n      any(Book.class))).then(AdditionalAnswers.returnsArgAt(1));\r\n\r\n    Book bookOnIndex = bookService.selectRandomBook(book1, book2, book3);\r\n\r\n    assertEquals(bookOnIndex, book2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMockedMethod_whenMethodInvoked_thenReturnBook() {\r\n    Long id = 1L;\r\n    when(bookRepository.getByBookId(anyLong())).thenAnswer(answer(BookServiceUnitTest::buildBook));\r\n\r\n    assertNotNull(bookService.getByBookId(id));\r\n    assertEquals(\"The Stranger\", bookService.getByBookId(id).getTitle());\r\n}\r\n\r\nprivate static Book buildBook(Long bookId) {\r\n    return new Book(bookId, \"The Stranger\", \"Albert Camus\", 456);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMockedMethod_whenMethodInvoked_thenReturnVoid() {\r\n    Long id = 2L;\r\n    when(bookRepository.getByBookId(anyLong())).thenAnswer(answerVoid(BookServiceUnitTest::printBookId));\r\n    bookService.getByBookId(id);\r\n\r\n    verify(bookRepository, times(1)).getByBookId(id);\r\n}\r\n\r\nprivate static void printBookId(Long bookId) {\r\n    System.out.println(bookId);\r\n}\r\n```"]