["```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>vavr</artifactId>\r\n    <version>0.9.0</version>\r\n</dependency>\r\n```","```\r\npublic class User {\r\n    private String name;\r\n    private String email;\r\n\r\n    // standard constructors, setters and getters, toString\r\n} \r\n```","```\r\npublic class UserValidator {\r\n    private static final String NAME_PATTERN = ...\r\n    private static final String NAME_ERROR = ...\r\n    private static final String EMAIL_PATTERN = ...\r\n    private static final String EMAIL_ERROR = ...\r\n\r\n    public Validation<Seq<String>, User> validateUser(\r\n      String name, String email) {\r\n        return Validation\r\n          .combine(\r\n            validateField(name, NAME_PATTERN, NAME_ERROR),\r\n            validateField(email, EMAIL_PATTERN, EMAIL_ERROR))\r\n          .ap(User::new);\r\n    }\r\n\r\n    private Validation<String, String> validateField\r\n      (String field, String pattern, String error) {\r\n\r\n        return CharSeq.of(field)\r\n          .replaceAll(pattern, \"\")\r\n          .transform(seq -> seq.isEmpty() \r\n            ? Validation.valid(field) \r\n            : Validation.invalid(error));\t\t\r\n    }\r\n}\r\n```","```\r\nstatic <E, T1, T2> Builder<E, T1, T2> combine(\r\n  Validation<E, T1> validation1, Validation<E, T2> validation2) {\r\n    Objects.requireNonNull(validation1, \"validation1 is null\");\r\n    Objects.requireNonNull(validation2, \"validation2 is null\");\r\n    return new Builder<>(validation1, validation2);\r\n}\r\n```","```\r\nfinal class Builder<E, T1, T2> {\r\n\r\n    private Validation<E, T1> v1;\r\n    private Validation<E, T2> v2;\r\n\r\n    // standard constructors\r\n\r\n    public <R> Validation<Seq<E>, R> ap(Function2<T1, T2, R> f) {\r\n        return v2.ap(v1.ap(Validation.valid(f.curried())));\r\n    }\r\n\r\n    public <T3> Builder3<E, T1, T2, T3> combine(\r\n      Validation<E, T3> v3) {\r\n        return new Builder3<>(v1, v2, v3);\r\n    }\r\n}\r\n```","```\r\nUserValidator userValidator = new UserValidator(); \r\nValidation<Seq<String>, User> validation = userValidator\r\n  .validateUser(\"John\", \"[[email protected]](/web/20220524003107/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n```","```\r\n@Test\r\npublic void \r\n  givenInvalidUserParams_whenValidated_thenInvalidInstance() {\r\n    assertThat(\r\n      userValidator.validateUser(\" \", \"no-email\"), \r\n      instanceOf(Invalid.class));\r\n}\r\n\r\n@Test\r\npublic void \r\n  givenValidUserParams_whenValidated_thenValidInstance() {\r\n    assertThat(\r\n      userValidator.validateUser(\"John\", \"[[email protected]](/web/20220524003107/https://www.baeldung.com/cdn-cgi/l/email-protection)\"), \r\n      instanceOf(Valid.class));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenInvalidUserParams_whenValidated_thenIsInvalidIsTrue() {\r\n    assertTrue(userValidator\r\n      .validateUser(\"John\", \"no-email\")\r\n      .isInvalid());\r\n}\r\n\r\n@Test\r\npublic void \r\n  givenValidUserParams_whenValidated_thenIsValidMethodIsTrue() {\r\n    assertTrue(userValidator\r\n      .validateUser(\"John\", \"[[email protected]](/web/20220524003107/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .isValid());\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenInValidUserParams_withGetErrorMethod_thenGetErrorMessages() {\r\n    assertEquals(\r\n      \"Name contains invalid characters, Email must be a well-formed email address\", \r\n      userValidator.validateUser(\"John\", \"no-email\")\r\n        .getError()\r\n        .intersperse(\", \")\r\n        .fold(\"\", String::concat));\r\n }\r\n```","```\r\n@Test\r\npublic void \r\n  givenValidUserParams_withGetMethod_thenGetUserInstance() {\r\n    assertThat(userValidator.validateUser(\"John\", \"[[email protected]](/web/20220524003107/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .get(), instanceOf(User.class));\r\n }\r\n```","```\r\n@Test\r\npublic void \r\n  givenValidUserParams_withtoEitherMethod_thenRightInstance() {\r\n    assertThat(userValidator.validateUser(\"John\", \"[[email protected]](/web/20220524003107/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .toEither(), instanceOf(Right.class));\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenValidUserParams_withFoldMethod_thenEqualstoParamsLength() {\r\n    assertEquals(2, (int) userValidator.validateUser(\" \", \" \")\r\n      .fold(Seq::length, User::hashCode));\r\n}\r\n```"]