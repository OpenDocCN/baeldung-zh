["```\r\nString example = \"\"\"\r\n     Example text\"\"\";\r\n```","```\r\npublic String getBlockOfHtml() {\r\n    return \"\"\"\r\n            <html>\r\n\r\n                <body>\r\n                    <span>example text</span>\r\n                </body>\r\n            </html>\"\"\";\r\n}\r\n```","```\r\n@Test\r\nvoid givenAnOldStyleMultilineString_whenComparing_thenEqualsTextBlock() {\r\n    String expected = \"<html>\\n\"\r\n      + \"\\n\" \r\n      + \"    <body>\\n\"\r\n      + \"        <span>example text</span>\\n\"\r\n      + \"    </body>\\n\"\r\n      + \"</html>\";\r\n    assertThat(subject.getBlockOfHtml()).isEqualTo(expected);\r\n}\r\n\r\n@Test\r\nvoid givenAnOldStyleString_whenComparing_thenEqualsTextBlock() {\r\n    String expected = \"<html>\\n\\n    <body>\\n        <span>example text</span>\\n    </body>\\n</html>\";\r\n    assertThat(subject.getBlockOfHtml())\r\n       .isEqualTo(expected);\r\n}\r\n```","```\r\npublic String getNonStandardIndent() {\r\n    return \"\"\"\r\n                Indent\r\n            \"\"\";\r\n}\r\n\r\n@Test\r\nvoid givenAnIndentedString_thenMatchesIndentedOldStyle() {\r\n    assertThat(subject.getNonStandardIndent())\r\n            .isEqualTo(\"    Indent\\n\");\r\n}\r\n```","```\r\npublic String getTextWithEscapes() {\r\n    return \"\"\"\r\n            \"fun\" with\r\n            whitespace\r\n            and other escapes \\\"\"\"\r\n            \"\"\";\r\n}\r\n```","```\r\npublic String getTextWithCarriageReturns() {\r\nreturn \"\"\"\r\nseparated with\\r\r\ncarriage returns\"\"\";\r\n}\r\n\r\n@Test\r\nvoid givenATextWithCarriageReturns_thenItContainsBoth() {\r\nassertThat(subject.getTextWithCarriageReturns())\r\n.isEqualTo(\"separated with\\r\\ncarriage returns\");\r\n}\r\n```","```\r\npublic String getIgnoredNewLines() {\r\n    return \"\"\"\r\n            This is a long test which looks to \\\r\n            have a newline but actually does not\"\"\";\r\n}\r\n```","```\r\n@Test\r\nvoid givenAStringWithEscapedNewLines_thenTheResultHasNoNewLines() {\r\n    String expected = \"This is a long test which looks to have a newline but actually does not\";\r\n    assertThat(subject.getIgnoredNewLines())\r\n            .isEqualTo(expected);\r\n}\r\n```","```\r\npublic String getEscapedSpaces() {\r\n    return \"\"\"\r\n            line 1·······\r\n            line 2·······\\s\r\n            \"\"\";\r\n}\r\n\r\n@Test\r\nvoid givenAStringWithEscapesSpaces_thenTheResultHasLinesEndingWithSpaces() {\r\n    String expected = \"line 1\\nline 2        \\n\";\r\n    assertThat(subject.getEscapedSpaces())\r\n            .isEqualTo(expected);\r\n} \r\n```","```\r\npublic String getFormattedText(String parameter) {\r\n    return \"\"\"\r\n            Some parameter: %s\r\n            \"\"\".formatted(parameter);\r\n}\r\n```"]