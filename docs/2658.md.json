["```\r\n@Entity\r\npublic class UserLocation {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String country;\r\n\r\n    private boolean enabled;\r\n\r\n    @ManyToOne(targetEntity = User.class, fetch = FetchType.EAGER)\r\n    @JoinColumn(nullable = false, name = \"user_id\")\r\n    private User user;\r\n\r\n    public UserLocation() {\r\n        super();\r\n        enabled = false;\r\n    }\r\n\r\n    public UserLocation(String country, User user) {\r\n        super();\r\n        this.country = country;\r\n        this.user = user;\r\n        enabled = false;\r\n    }\r\n    ...\r\n}\r\n```","```\r\npublic interface UserLocationRepository extends JpaRepository<UserLocation, Long> {\r\n    UserLocation findByCountryAndUser(String country, User user);\r\n}\r\n```","```\r\n@PostMapping(\"/user/registration\")\r\npublic GenericResponse registerUserAccount(@Valid UserDto accountDto, \r\n  HttpServletRequest request) {\r\n\r\n    User registered = userService.registerNewUserAccount(accountDto);\r\n    userService.addUserLocation(registered, getClientIP(request));\r\n    ...\r\n}\r\n```","```\r\npublic void addUserLocation(User user, String ip) {\r\n    InetAddress ipAddress = InetAddress.getByName(ip);\r\n    String country \r\n      = databaseReader.country(ipAddress).getCountry().getName();\r\n    UserLocation loc = new UserLocation(country, user);\r\n    loc.setEnabled(true);\r\n    loc = userLocationRepo.save(loc);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.maxmind.geoip2</groupId>\r\n    <artifactId>geoip2</artifactId>\r\n    <version>2.15.0</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic DatabaseReader databaseReader() throws IOException, GeoIp2Exception {\r\n    File resource = new File(\"src/main/resources/GeoLite2-Country.mmdb\");\r\n    return new DatabaseReader.Builder(resource).build();\r\n}\r\n```","```\r\n@Autowired\r\nprivate DifferentLocationChecker differentLocationChecker;\r\n\r\n@Bean\r\npublic DaoAuthenticationProvider authProvider() {\r\n    CustomAuthenticationProvider authProvider = new CustomAuthenticationProvider();\r\n    authProvider.setUserDetailsService(userDetailsService);\r\n    authProvider.setPasswordEncoder(encoder());\r\n    authProvider.setPostAuthenticationChecks(differentLocationChecker);\r\n    return authProvider;\r\n}\r\n```","```\r\n@Component\r\npublic class DifferentLocationChecker implements UserDetailsChecker {\r\n\r\n    @Autowired\r\n    private IUserService userService;\r\n\r\n    @Autowired\r\n    private HttpServletRequest request;\r\n\r\n    @Autowired\r\n    private ApplicationEventPublisher eventPublisher;\r\n\r\n    @Override\r\n    public void check(UserDetails userDetails) {\r\n        String ip = getClientIP();\r\n        NewLocationToken token = userService.isNewLoginLocation(userDetails.getUsername(), ip);\r\n        if (token != null) {\r\n            String appUrl = \r\n              \"http://\" \r\n              + request.getServerName() \r\n              + \":\" + request.getServerPort() \r\n              + request.getContextPath();\r\n\r\n            eventPublisher.publishEvent(\r\n              new OnDifferentLocationLoginEvent(\r\n                request.getLocale(), userDetails.getUsername(), ip, token, appUrl));\r\n            throw new UnusualLocationException(\"unusual location\");\r\n        }\r\n    }\r\n\r\n    private String getClientIP() {\r\n        String xfHeader = request.getHeader(\"X-Forwarded-For\");\r\n        if (xfHeader == null) {\r\n            return request.getRemoteAddr();\r\n        }\r\n        return xfHeader.split(\",\")[0];\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void onAuthenticationFailure(...) {\r\n    ...\r\n    else if (exception.getMessage().equalsIgnoreCase(\"unusual location\")) {\r\n        errorMessage = messages.getMessage(\"auth.message.unusual.location\", null, locale);\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic NewLocationToken isNewLoginLocation(String username, String ip) {\r\n    try {\r\n        InetAddress ipAddress = InetAddress.getByName(ip);\r\n        String country \r\n          = databaseReader.country(ipAddress).getCountry().getName();\r\n\r\n        User user = repository.findByEmail(username);\r\n        UserLocation loc = userLocationRepo.findByCountryAndUser(country, user);\r\n        if ((loc == null) || !loc.isEnabled()) {\r\n            return createNewLocationToken(country, user);\r\n        }\r\n    } catch (Exception e) {\r\n        return null;\r\n    }\r\n    return null;\r\n}\r\n```","```\r\nprivate NewLocationToken createNewLocationToken(String country, User user) {\r\n    UserLocation loc = new UserLocation(country, user);\r\n    loc = userLocationRepo.save(loc);\r\n    NewLocationToken token = new NewLocationToken(UUID.randomUUID().toString(), loc);\r\n    return newLocationTokenRepository.save(token);\r\n}\r\n```","```\r\n@Entity\r\npublic class NewLocationToken {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String token;\r\n\r\n    @OneToOne(targetEntity = UserLocation.class, fetch = FetchType.EAGER)\r\n    @JoinColumn(nullable = false, name = \"user_location_id\")\r\n    private UserLocation userLocation;\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class OnDifferentLocationLoginEvent extends ApplicationEvent {\r\n    private Locale locale;\r\n    private String username;\r\n    private String ip;\r\n    private NewLocationToken token;\r\n    private String appUrl;\r\n}\r\n```","```\r\n@Component\r\npublic class DifferentLocationLoginListener \r\n  implements ApplicationListener<OnDifferentLocationLoginEvent> {\r\n\r\n    @Autowired\r\n    private MessageSource messages;\r\n\r\n    @Autowired\r\n    private JavaMailSender mailSender;\r\n\r\n    @Autowired\r\n    private Environment env;\r\n\r\n    @Override\r\n    public void onApplicationEvent(OnDifferentLocationLoginEvent event) {\r\n        String enableLocUri = event.getAppUrl() + \"/user/enableNewLoc?token=\" \r\n          + event.getToken().getToken();\r\n        String changePassUri = event.getAppUrl() + \"/changePassword.html\";\r\n        String recipientAddress = event.getUsername();\r\n        String subject = \"Login attempt from different location\";\r\n        String message = messages.getMessage(\"message.differentLocation\", new Object[] { \r\n          new Date().toString(), \r\n          event.getToken().getUserLocation().getCountry(), \r\n          event.getIp(), enableLocUri, changePassUri \r\n          }, event.getLocale());\r\n\r\n        SimpleMailMessage email = new SimpleMailMessage();\r\n        email.setTo(recipientAddress);\r\n        email.setSubject(subject);\r\n        email.setText(message);\r\n        email.setFrom(env.getProperty(\"support.email\"));\r\n        mailSender.send(email);\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(value = \"/user/enableNewLoc\", method = RequestMethod.GET)\r\npublic String enableNewLoc(Locale locale, Model model, @RequestParam(\"token\") String token) {\r\n    String loc = userService.isValidNewLocationToken(token);\r\n    if (loc != null) {\r\n        model.addAttribute(\r\n          \"message\", \r\n          messages.getMessage(\"message.newLoc.enabled\", new Object[] { loc }, locale)\r\n        );\r\n    } else {\r\n        model.addAttribute(\r\n          \"message\", \r\n          messages.getMessage(\"message.error\", null, locale)\r\n        );\r\n    }\r\n    return \"redirect:/login?lang=\" + locale.getLanguage();\r\n}\r\n```","```\r\n@Override\r\npublic String isValidNewLocationToken(String token) {\r\n    NewLocationToken locToken = newLocationTokenRepository.findByToken(token);\r\n    if (locToken == null) {\r\n        return null;\r\n    }\r\n    UserLocation userLoc = locToken.getUserLocation();\r\n    userLoc.setEnabled(true);\r\n    userLoc = userLocationRepo.save(userLoc);\r\n    newLocationTokenRepository.delete(locToken);\r\n    return userLoc.getCountry();\r\n}\r\n```","```\r\nprivate final String getClientIP(HttpServletRequest request) \r\n```"]