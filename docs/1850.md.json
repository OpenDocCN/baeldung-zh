["```\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>fastjson</artifactId>\r\n    <version>1.2.13</version>\r\n</dependency> \r\n```","```\r\npublic class Person {\r\n\r\n    @JSONField(name = \"AGE\")\r\n    private int age;\r\n\r\n    @JSONField(name = \"FULL NAME\")\r\n    private String fullName;\r\n\r\n    @JSONField(name = \"DATE OF BIRTH\")\r\n    private Date dateOfBirth;\r\n\r\n    public Person(int age, String fullName, Date dateOfBirth) {\r\n        super();\r\n        this.age = age;\r\n        this.fullName= fullName;\r\n        this.dateOfBirth = dateOfBirth;\r\n    }\r\n\r\n    // standard getters & setters\r\n}\r\n```","```\r\nprivate List<Person> listOfPersons = new ArrayList<Person>();\r\n\r\n@Before\r\npublic void setUp() {\r\n    listOfPersons.add(new Person(15, \"John Doe\", new Date()));\r\n    listOfPersons.add(new Person(20, \"Janette Doe\", new Date()));\r\n}\r\n\r\n@Test\r\npublic void whenJavaList_thanConvertToJsonCorrect() {\r\n    String jsonOutput= JSON.toJSONString(listOfPersons);\r\n}\r\n```","```\r\n[  \r\n    {  \r\n        \"AGE\":15,\r\n        \"DATE OF BIRTH\":1468962431394,\r\n        \"FULL NAME\":\"John Doe\"\r\n    },\r\n    {  \r\n        \"AGE\":20,\r\n        \"DATE OF BIRTH\":1468962431394,\r\n        \"FULL NAME\":\"Janette Doe\"\r\n    }\r\n]\r\n```","```\r\n@JSONField(name=\"AGE\", serialize=false)\r\nprivate int age;\r\n\r\n@JSONField(name=\"LAST NAME\", ordinal = 2)\r\nprivate String lastName;\r\n\r\n@JSONField(name=\"FIRST NAME\", ordinal = 1)\r\nprivate String firstName;\r\n\r\n@JSONField(name=\"DATE OF BIRTH\", format=\"dd/MM/yyyy\", ordinal = 3)\r\nprivate Date dateOfBirth;\r\n```","```\r\n[\r\n    {\r\n        \"FIRST NAME\":\"Doe\",\r\n        \"LAST NAME\":\"Jhon\",\r\n        \"DATE OF BIRTH\":\"19/07/2016\"\r\n    },\r\n    {\r\n        \"FIRST NAME\":\"Doe\",\r\n        \"LAST NAME\":\"Janette\",\r\n        \"DATE OF BIRTH\":\"19/07/2016\"\r\n    }\r\n]\r\n```","```\r\nString jsonOutput= JSON.toJSONString(listOfPersons, SerializerFeature.BeanToArray);\r\n```","```\r\n[\r\n    [\r\n        15,\r\n        1469003271063,\r\n        \"John Doe\"\r\n    ],\r\n    [\r\n        20,\r\n        1469003271063,\r\n        \"Janette Doe\"\r\n    ]\r\n]\r\n```","```\r\n@Test\r\npublic void whenGenerateJson_thanGenerationCorrect() throws ParseException {\r\n    JSONArray jsonArray = new JSONArray();\r\n    for (int i = 0; i < 2; i++) {\r\n        JSONObject jsonObject = new JSONObject();\r\n        jsonObject.put(\"AGE\", 10);\r\n        jsonObject.put(\"FULL NAME\", \"Doe \" + i);\r\n        jsonObject.put(\"DATE OF BIRTH\", \"2016/12/12 12:12:12\");\r\n        jsonArray.add(jsonObject);\r\n    }\r\n    String jsonOutput = jsonArray.toJSONString();\r\n}\r\n```","```\r\n[\r\n   {\r\n      \"AGE\":\"10\",\r\n      \"DATE OF BIRTH\":\"2016/12/12 12:12:12\",\r\n      \"FULL NAME\":\"Doe 0\"\r\n   },\r\n   {\r\n      \"AGE\":\"10\",\r\n      \"DATE OF BIRTH\":\"2016/12/12 12:12:12\",\r\n      \"FULL NAME\":\"Doe 1\"\r\n   }\r\n]\r\n```","```\r\n@Test\r\npublic void whenJson_thanConvertToObjectCorrect() {\r\n    Person person = new Person(20, \"John\", \"Doe\", new Date());\r\n    String jsonObject = JSON.toJSONString(person);\r\n    Person newPerson = JSON.parseObject(jsonObject, Person.class);\r\n\r\n    assertEquals(newPerson.getAge(), 0); // if we set serialize to false\r\n    assertEquals(newPerson.getFullName(), listOfPersons.get(0).getFullName());\r\n}\r\n```","```\r\nPerson [age=20, fullName=John Doe, dateOfBirth=Wed Jul 20 08:51:12 WEST 2016]\r\n```","```\r\n@JSONField(name = \"DATE OF BIRTH\", deserialize=false)\r\nprivate Date dateOfBirth;\r\n```","```\r\nPerson [age=20, fullName=John Doe, dateOfBirth=null]\r\n```","```\r\n@Test\r\npublic void givenContextFilter_whenJavaObject_thanJsonCorrect() {\r\n    ContextValueFilter valueFilter = new ContextValueFilter () {\r\n        public Object process(\r\n          BeanContext context, Object object, String name, Object value) {\r\n            if (name.equals(\"DATE OF BIRTH\")) {\r\n                return \"NOT TO DISCLOSE\";\r\n            }\r\n            if (value.equals(\"John\")) {\r\n                return ((String) value).toUpperCase();\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    String jsonOutput = JSON.toJSONString(listOfPersons, valueFilter);\r\n}\r\n```","```\r\n[\r\n    {\r\n        \"FULL NAME\":\"JOHN DOE\",\r\n        \"DATE OF BIRTH\":\"NOT TO DISCLOSE\"\r\n    }\r\n]\r\n```","```\r\n@Test\r\npublic void givenSerializeConfig_whenJavaObject_thanJsonCorrect() {\r\n    NameFilter formatName = new NameFilter() {\r\n        public String process(Object object, String name, Object value) {\r\n            return name.toLowerCase().replace(\" \", \"_\");\r\n        }\r\n    };\r\n\r\n    SerializeConfig.getGlobalInstance().addFilter(Person.class,  formatName);\r\n    String jsonOutput = \r\n      JSON.toJSONStringWithDateFormat(listOfPersons, \"yyyy-MM-dd\");\r\n}\r\n```","```\r\n[  \r\n    {  \r\n        \"full_name\":\"John Doe\",\r\n        \"date_of_birth\":\"2016-07-21\"\r\n    },\r\n    {  \r\n        \"full_name\":\"Janette Doe\",\r\n        \"date_of_birth\":\"2016-07-21\"\r\n    }\r\n]\r\n```"]