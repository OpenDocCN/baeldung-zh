["```\r\n@Entity\r\npublic class Library {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long id;\r\n\r\n    @Column\r\n    private String name;\r\n\r\n    @OneToOne\r\n    @JoinColumn(name = \"address_id\")\r\n    @RestResource(path = \"libraryAddress\", rel=\"address\")\r\n    private Address address;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Address {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long id;\r\n\r\n    @Column(nullable = false)\r\n    private String location;\r\n\r\n    @OneToOne(mappedBy = \"address\")\r\n    private Library library;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@OneToOne\r\n@JoinColumn(name = \"secondary_address_id\")\r\n@RestResource(path = \"libraryAddress\", rel=\"address\")\r\nprivate Address secondaryAddress;\r\n```","```\r\npublic interface LibraryRepository extends CrudRepository<Library, Long> {}\r\n```","```\r\npublic interface AddressRepository extends CrudRepository<Address, Long> {}\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" \r\n  -d '{\"name\":\"My Library\"}' http://localhost:8080/libraries\r\n```","```\r\n{\r\n  \"name\" : \"My Library\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/libraries/1\"\r\n    },\r\n    \"library\" : {\r\n      \"href\" : \"http://localhost:8080/libraries/1\"\r\n    },\r\n    \"address\" : {\r\n      \"href\" : \"http://localhost:8080/libraries/1/libraryAddress\"\r\n    }\r\n  }\r\n}\r\n```","```\r\n-d \"{\\\"name\\\":\\\"My Library\\\"}\"\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" \r\n  -d '{\"location\":\"Main Street nr 5\"}' http://localhost:8080/addresses\r\n```","```\r\n{\r\n  \"location\" : \"Main Street nr 5\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/addresses/1\"\r\n    },\r\n    \"address\" : {\r\n      \"href\" : \"http://localhost:8080/addresses/1\"\r\n    },\r\n    \"library\" : {\r\n      \"href\" : \"http://localhost:8080/addresses/1/library\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X PUT -d \"http://localhost:8080/addresses/1\" \r\n  -H \"Content-Type:text/uri-list\" http://localhost:8080/libraries/1/libraryAddress\r\n```","```\r\ncurl -i -X GET http://localhost:8080/addresses/1/library\r\n```","```\r\ncurl -i -X DELETE http://localhost:8080/libraries/1/libraryAddress\r\n```","```\r\n@Entity\r\npublic class Book {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long id;\r\n\r\n    @Column(nullable=false)\r\n    private String title;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name=\"library_id\")\r\n    private Library library;\r\n\r\n    // standard constructor, getter, setter\r\n}\r\n```","```\r\npublic class Library {\r\n\r\n    //...\r\n\r\n    @OneToMany(mappedBy = \"library\")\r\n    private List<Book> books;\r\n\r\n    //...\r\n\r\n}\r\n```","```\r\npublic interface BookRepository extends CrudRepository<Book, Long> { }\r\n```","```\r\ncurl -i -X POST -d \"{\\\"title\\\":\\\"Book1\\\"}\" \r\n  -H \"Content-Type:application/json\" http://localhost:8080/books\r\n```","```\r\n{\r\n  \"title\" : \"Book1\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/books/1\"\r\n    },\r\n    \"book\" : {\r\n      \"href\" : \"http://localhost:8080/books/1\"\r\n    },\r\n    \"bookLibrary\" : {\r\n      \"href\" : \"http://localhost:8080/books/1/library\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X PUT -H \"Content-Type:text/uri-list\" \r\n-d \"http://localhost:8080/libraries/1\" http://localhost:8080/books/1/library\r\n```","```\r\ncurl -i -X GET http://localhost:8080/libraries/1/books\r\n```","```\r\n{\r\n  \"_embedded\" : {\r\n    \"books\" : [ {\r\n      \"title\" : \"Book1\",\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"href\" : \"http://localhost:8080/books/1\"\r\n        },\r\n        \"book\" : {\r\n          \"href\" : \"http://localhost:8080/books/1\"\r\n        },\r\n        \"bookLibrary\" : {\r\n          \"href\" : \"http://localhost:8080/books/1/library\"\r\n        }\r\n      }\r\n    } ]\r\n  },\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/libraries/1/books\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X DELETE http://localhost:8080/books/1/library\r\n```","```\r\n@Entity\r\npublic class Author {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long id;\r\n\r\n    @Column(nullable = false)\r\n    private String name;\r\n\r\n    @ManyToMany(cascade = CascadeType.ALL)\r\n    @JoinTable(name = \"book_author\", \r\n      joinColumns = @JoinColumn(name = \"book_id\", referencedColumnName = \"id\"), \r\n      inverseJoinColumns = @JoinColumn(name = \"author_id\", \r\n      referencedColumnName = \"id\"))\r\n    private List<Book> books;\r\n\r\n    //standard constructors, getters, setters\r\n}\r\n```","```\r\npublic class Book {\r\n\r\n    //...\r\n\r\n    @ManyToMany(mappedBy = \"books\")\r\n    private List<Author> authors;\r\n\r\n    //...\r\n}\r\n```","```\r\npublic interface AuthorRepository extends CrudRepository<Author, Long> { }\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" \r\n  -d \"{\\\"name\\\":\\\"author1\\\"}\" http://localhost:8080/authors\r\n```","```\r\ncurl -i -X POST -H \"Content-Type:application/json\" \r\n  -d \"{\\\"title\\\":\\\"Book 2\\\"}\" http://localhost:8080/books\r\n```","```\r\n{\r\n  \"name\" : \"author1\",\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/authors/1\"\r\n    },\r\n    \"author\" : {\r\n      \"href\" : \"http://localhost:8080/authors/1\"\r\n    },\r\n    \"books\" : {\r\n      \"href\" : \"http://localhost:8080/authors/1/books\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X PUT -H \"Content-Type:text/uri-list\" \r\n  --data-binary @uris.txt http://localhost:8080/authors/1/books\r\n```","```\r\nhttp://localhost:8080/books/1\r\nhttp://localhost:8080/books/2\r\n```","```\r\ncurl -i -X GET http://localhost:8080/authors/1/books\r\n```","```\r\n{\r\n  \"_embedded\" : {\r\n    \"books\" : [ {\r\n      \"title\" : \"Book 1\",\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"href\" : \"http://localhost:8080/books/1\"\r\n        }\r\n      //...\r\n      }\r\n    }, {\r\n      \"title\" : \"Book 2\",\r\n      \"_links\" : {\r\n        \"self\" : {\r\n          \"href\" : \"http://localhost:8080/books/2\"\r\n        }\r\n      //...\r\n      }\r\n    } ]\r\n  },\r\n  \"_links\" : {\r\n    \"self\" : {\r\n      \"href\" : \"http://localhost:8080/authors/1/books\"\r\n    }\r\n  }\r\n}\r\n```","```\r\ncurl -i -X DELETE http://localhost:8080/authors/1/books/1\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = SpringDataRestApplication.class, \r\n  webEnvironment = WebEnvironment.DEFINED_PORT)\r\npublic class SpringDataRelationshipsTest {\r\n\r\n    @Autowired\r\n    private TestRestTemplate template;\r\n\r\n    private static String BOOK_ENDPOINT = \"http://localhost:8080/books/\";\r\n    private static String AUTHOR_ENDPOINT = \"http://localhost:8080/authors/\";\r\n    private static String ADDRESS_ENDPOINT = \"http://localhost:8080/addresses/\";\r\n    private static String LIBRARY_ENDPOINT = \"http://localhost:8080/libraries/\";\r\n\r\n    private static String LIBRARY_NAME = \"My Library\";\r\n    private static String AUTHOR_NAME = \"George Orwell\";\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveOneToOneRelationship_thenCorrect() {\r\n    Library library = new Library(LIBRARY_NAME);\r\n    template.postForEntity(LIBRARY_ENDPOINT, library, Library.class);\r\n\r\n    Address address = new Address(\"Main street, nr 1\");\r\n    template.postForEntity(ADDRESS_ENDPOINT, address, Address.class);\r\n\r\n    HttpHeaders requestHeaders = new HttpHeaders();\r\n    requestHeaders.add(\"Content-type\", \"text/uri-list\");\r\n    HttpEntity<String> httpEntity \r\n      = new HttpEntity<>(ADDRESS_ENDPOINT + \"/1\", requestHeaders);\r\n    template.exchange(LIBRARY_ENDPOINT + \"/1/libraryAddress\", \r\n      HttpMethod.PUT, httpEntity, String.class);\r\n\r\n    ResponseEntity<Library> libraryGetResponse \r\n      = template.getForEntity(ADDRESS_ENDPOINT + \"/1/library\", Library.class);\r\n    assertEquals(\"library is incorrect\", \r\n      libraryGetResponse.getBody().getName(), LIBRARY_NAME);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveOneToManyRelationship_thenCorrect() {\r\n    Library library = new Library(LIBRARY_NAME);\r\n    template.postForEntity(LIBRARY_ENDPOINT, library, Library.class);\r\n\r\n    Book book1 = new Book(\"Dune\");\r\n    template.postForEntity(BOOK_ENDPOINT, book1, Book.class);\r\n\r\n    Book book2 = new Book(\"1984\");\r\n    template.postForEntity(BOOK_ENDPOINT, book2, Book.class);\r\n\r\n    HttpHeaders requestHeaders = new HttpHeaders();\r\n    requestHeaders.add(\"Content-Type\", \"text/uri-list\");    \r\n    HttpEntity<String> bookHttpEntity \r\n      = new HttpEntity<>(LIBRARY_ENDPOINT + \"/1\", requestHeaders);\r\n    template.exchange(BOOK_ENDPOINT + \"/1/library\", \r\n      HttpMethod.PUT, bookHttpEntity, String.class);\r\n    template.exchange(BOOK_ENDPOINT + \"/2/library\", \r\n      HttpMethod.PUT, bookHttpEntity, String.class);\r\n\r\n    ResponseEntity<Library> libraryGetResponse = \r\n      template.getForEntity(BOOK_ENDPOINT + \"/1/library\", Library.class);\r\n    assertEquals(\"library is incorrect\", \r\n      libraryGetResponse.getBody().getName(), LIBRARY_NAME);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveManyToManyRelationship_thenCorrect() {\r\n    Author author1 = new Author(AUTHOR_NAME);\r\n    template.postForEntity(AUTHOR_ENDPOINT, author1, Author.class);\r\n\r\n    Book book1 = new Book(\"Animal Farm\");\r\n    template.postForEntity(BOOK_ENDPOINT, book1, Book.class);\r\n\r\n    Book book2 = new Book(\"1984\");\r\n    template.postForEntity(BOOK_ENDPOINT, book2, Book.class);\r\n\r\n    HttpHeaders requestHeaders = new HttpHeaders();\r\n    requestHeaders.add(\"Content-type\", \"text/uri-list\");\r\n    HttpEntity<String> httpEntity = new HttpEntity<>(\r\n      BOOK_ENDPOINT + \"/1\\n\" + BOOK_ENDPOINT + \"/2\", requestHeaders);\r\n    template.exchange(AUTHOR_ENDPOINT + \"/1/books\", \r\n      HttpMethod.PUT, httpEntity, String.class);\r\n\r\n    String jsonResponse = template\r\n      .getForObject(BOOK_ENDPOINT + \"/1/authors\", String.class);\r\n    JSONObject jsonObj = new JSONObject(jsonResponse).getJSONObject(\"_embedded\");\r\n    JSONArray jsonArray = jsonObj.getJSONArray(\"authors\");\r\n    assertEquals(\"author is incorrect\", \r\n      jsonArray.getJSONObject(0).getString(\"name\"), AUTHOR_NAME);\r\n}\r\n```"]