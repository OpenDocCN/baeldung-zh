["```\r\npublic class Multiplier {\r\n\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    public int multiply(int a, int b, int c) {\r\n        return a * b * c;\r\n    }\r\n}\r\n```","```\r\npublic class Multiplier {\r\n\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    public double multiply(double a, double b) {\r\n        return a * b;\r\n    }\r\n} \r\n```","```\r\npublic class Multiplier {\r\n\r\n    public int multiply(int a, int b) {\r\n        return a * b;\r\n    }\r\n\r\n    public int multiply(int a, int b, int c) {\r\n        return a * b * c;\r\n    }\r\n\r\n    public double multiply(double a, double b) {\r\n        return a * b;\r\n    }\r\n} \r\n```","```\r\npublic int multiply(int a, int b) { \r\n    return a * b; \r\n}\r\n\r\npublic double multiply(int a, int b) { \r\n    return a * b; \r\n}\r\n```","```\r\npublic double multiply(int a, long b) {\r\n    return a * b;\r\n}\r\n\r\npublic int multiply(int a, int b, int c) {\r\n    return a * b * c;\r\n} \r\n```","```\r\n@Test\r\npublic void whenCalledMultiplyAndNoMatching_thenTypePromotion() {\r\n    assertThat(multiplier.multiply(10, 10)).isEqualTo(100.0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledMultiplyAndMatching_thenNoTypePromotion() {\r\n    assertThat(multiplier.multiply(10, 10, 10)).isEqualTo(1000);\r\n}\r\n```","```\r\npublic class Vehicle {\r\n\r\n    public String accelerate(long mph) {\r\n        return \"The vehicle accelerates at : \" + mph + \" MPH.\";\r\n    }\r\n\r\n    public String stop() {\r\n        return \"The vehicle has stopped.\";\r\n    }\r\n\r\n    public String run() {\r\n        return \"The vehicle is running.\";\r\n    }\r\n}\r\n```","```\r\npublic class Car extends Vehicle {\r\n\r\n    @Override\r\n    public String accelerate(long mph) {\r\n        return \"The car accelerates at : \" + mph + \" MPH.\";\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledAccelerate_thenOneAssertion() {\r\n    assertThat(vehicle.accelerate(100))\r\n      .isEqualTo(\"The vehicle accelerates at : 100 MPH.\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledRun_thenOneAssertion() {\r\n    assertThat(vehicle.run())\r\n      .isEqualTo(\"The vehicle is running.\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledStop_thenOneAssertion() {\r\n    assertThat(vehicle.stop())\r\n      .isEqualTo(\"The vehicle has stopped.\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledAccelerate_thenOneAssertion() {\r\n    assertThat(car.accelerate(80))\r\n      .isEqualTo(\"The car accelerates at : 80 MPH.\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledRun_thenOneAssertion() {\r\n    assertThat(car.run())\r\n      .isEqualTo(\"The vehicle is running.\");\r\n}\r\n\r\n@Test\r\npublic void whenCalledStop_thenOneAssertion() {\r\n    assertThat(car.stop())\r\n      .isEqualTo(\"The vehicle has stopped.\");\r\n} \r\n```","```\r\n@Test\r\npublic void givenVehicleCarInstances_whenCalledRun_thenEqual() {\r\n    assertThat(vehicle.run()).isEqualTo(car.run());\r\n}\r\n\r\n@Test\r\npublic void givenVehicleCarInstances_whenCalledStop_thenEqual() {\r\n   assertThat(vehicle.stop()).isEqualTo(car.stop());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalledAccelerateWithSameArgument_thenNotEqual() {\r\n    assertThat(vehicle.accelerate(100))\r\n      .isNotEqualTo(car.accelerate(100));\r\n}\r\n```"]