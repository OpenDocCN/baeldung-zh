["```\r\nimport java.nio.channels.*;\r\n```","```\r\nPath filePath = Paths.get(\"/path/to/file\");\r\n\r\nAsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n  filePath, READ, WRITE, CREATE, DELETE_ON_CLOSE); \r\n```","```\r\nPath filePath = Paths.get(\"/path/to/file\");\r\n\r\nAsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n  filePath, StandardOpenOption.READ);\r\n```","```\r\n@Test\r\npublic void givenFilePath_whenReadsContentWithFuture_thenCorrect() {\r\n    Path path = Paths.get(\r\n      URI.create(\r\n        this.getClass().getResource(\"/file.txt\").toString()));\r\n    AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n      path, StandardOpenOption.READ);\r\n\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n\r\n    Future<Integer> operation = fileChannel.read(buffer, 0);\r\n\r\n    // run other code as operation continues in background\r\n    operation.get();\r\n\r\n    String fileContent = new String(buffer.array()).trim();\r\n    buffer.clear();\r\n\r\n    assertEquals(fileContent, \"baeldung.com\");\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenPath_whenReadsContentWithCompletionHandler_thenCorrect() {\r\n\r\n    Path path = Paths.get(\r\n      URI.create( this.getClass().getResource(\"/file.txt\").toString()));\r\n    AsynchronousFileChannel fileChannel \r\n      = AsynchronousFileChannel.open(path, StandardOpenOption.READ);\r\n\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n\r\n    fileChannel.read(\r\n      buffer, 0, buffer, new CompletionHandler<Integer, ByteBuffer>() {\r\n\r\n        @Override\r\n        public void completed(Integer result, ByteBuffer attachment) {\r\n            // result is number of bytes read\r\n            // attachment is the buffer containing content\r\n        }\r\n        @Override\r\n        public void failed(Throwable exc, ByteBuffer attachment) {\r\n\r\n        }\r\n    });\r\n}\r\n```","```\r\nAsynchronousFileChannel fileChannel\r\n  = AsynchronousFileChannel.open(path, StandardOpenOption.WRITE);\r\n```","```\r\nAsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n  path, WRITE, CREATE, DELETE_ON_CLOSE);\r\n```","```\r\npublic static String readContent(Path file) {\r\n    AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n      file, StandardOpenOption.READ);\r\n\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n\r\n    Future<Integer> operation = fileChannel.read(buffer, 0);\r\n\r\n    // run other code as operation continues in background\r\n    operation.get();     \r\n\r\n    String fileContent = new String(buffer.array()).trim();\r\n    buffer.clear();\r\n    return fileContent;\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenPathAndContent_whenWritesToFileWithFuture_thenCorrect() {\r\n\r\n    String fileName = UUID.randomUUID().toString();\r\n    Path path = Paths.get(fileName);\r\n    AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n      path, WRITE, CREATE, DELETE_ON_CLOSE);\r\n\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n\r\n    buffer.put(\"hello world\".getBytes());\r\n    buffer.flip();\r\n\r\n    Future<Integer> operation = fileChannel.write(buffer, 0);\r\n    buffer.clear();\r\n\r\n    //run other code as operation continues in background\r\n    operation.get();\r\n\r\n    String content = readContent(path);\r\n    assertEquals(\"hello world\", content);\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenPathAndContent_whenWritesToFileWithHandler_thenCorrect() {\r\n\r\n    String fileName = UUID.randomUUID().toString();\r\n    Path path = Paths.get(fileName);\r\n    AsynchronousFileChannel fileChannel = AsynchronousFileChannel.open(\r\n      path, WRITE, CREATE, DELETE_ON_CLOSE);\r\n\r\n    ByteBuffer buffer = ByteBuffer.allocate(1024);\r\n    buffer.put(\"hello world\".getBytes());\r\n    buffer.flip();\r\n\r\n    fileChannel.write(\r\n      buffer, 0, buffer, new CompletionHandler<Integer, ByteBuffer>() {\r\n\r\n        @Override\r\n        public void completed(Integer result, ByteBuffer attachment) {\r\n            // result is number of bytes written\r\n            // attachment is the buffer\r\n        }\r\n        @Override\r\n        public void failed(Throwable exc, ByteBuffer attachment) {\r\n\r\n        }\r\n    });\r\n}\r\n```"]