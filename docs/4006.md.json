["```\r\nGET /authorize?response_type=code&client_id={apps-client-id}&state={state}&redirect_uri=https%3A%2F%2Fevil.cloudapp.net%2Fcb HTTP/1.1\r\n```","```\r\n@Configuration\r\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {    \r\n    @Override\r\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\r\n        clients.inMemory()\r\n          .withClient(\"apricot-client-id\")\r\n          .authorizedGrantTypes(\"authorization_code\")\r\n          .scopes(\"scope1\", \"scope2\")\r\n          .redirectUris(\"https://app.cloudapp.net/oauth\");\r\n    }\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {    \r\n    //...\r\n\r\n    @Override\r\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\r\n        endpoints.redirectResolver(new ExactMatchRedirectResolver());\r\n    }\r\n}\r\n```","```\r\n/**\r\nWhether the requested redirect URI \"matches\" the specified redirect URI. For a URL, this implementation tests if\r\nthe user requested redirect starts with the registered redirect, so it would have the same host and root path if\r\nit is an HTTP URL. The port, userinfo, query params also matched. Request redirect uri path can include\r\nadditional parameters which are ignored for the match\r\n<p>\r\nFor other (non-URL) cases, such as for some implicit clients, the redirect_uri must be an exact match.\r\n@param requestedRedirect The requested redirect URI.\r\n@param redirectUri The registered redirect URI.\r\n@return Whether the requested redirect URI \"matches\" the specified redirect URI.\r\n*/\r\nprotected boolean redirectMatches(String requestedRedirect, String redirectUri) {\r\n   UriComponents requestedRedirectUri = UriComponentsBuilder.fromUriString(requestedRedirect).build();\r\n   UriComponents registeredRedirectUri = UriComponentsBuilder.fromUriString(redirectUri).build();\r\n   boolean schemeMatch = isEqual(registeredRedirectUri.getScheme(), requestedRedirectUri.getScheme());\r\n   boolean userInfoMatch = isEqual(registeredRedirectUri.getUserInfo(), requestedRedirectUri.getUserInfo());\r\n   boolean hostMatch = hostMatches(registeredRedirectUri.getHost(), requestedRedirectUri.getHost());\r\n   boolean portMatch = matchPorts ? registeredRedirectUri.getPort() == requestedRedirectUri.getPort() : true;\r\n   boolean pathMatch = isEqual(registeredRedirectUri.getPath(),\r\n     StringUtils.cleanPath(requestedRedirectUri.getPath()));\r\n   boolean queryParamMatch = matchQueryParams(registeredRedirectUri.getQueryParams(),\r\n     requestedRedirectUri.getQueryParams());\r\n\r\n   return schemeMatch && userInfoMatch && hostMatch && portMatch && pathMatch && queryParamMatch;\r\n}\r\n```","```\r\nGET /authorize?response_type=token&client;_id=ABCD&state;=xyz&redirect;_uri=https%3A%2F%2Fapp.cloudapp.net%2Fcb%26redirect_to\r\n%253Dhttps%253A%252F%252Fevil.cloudapp.net%252Fcb HTTP/1.1 \r\n```","```\r\nLocation: https://app.cloudapp.net/cb?redirect_to%3Dhttps%3A%2F%2Fevil.cloudapp.net%2Fcb#access_token=LdKgJIfEWR34aslkf&... \r\n```","```\r\nhttps://evil.cloudapp.net/cb#access_token=LdKgJIfEWR34aslkf&... \r\n```"]