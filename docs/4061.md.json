["```\r\n<dependency>\r\n    <groupId>net.openhft</groupId>\r\n    <artifactId>chronicle-map</artifactId>\r\n    <version>3.17.2</version>\r\n</dependency>\r\n```","```\r\nChronicleMap<LongValue, CharSequence> inMemoryCountryMap = ChronicleMap\r\n  .of(LongValue.class, CharSequence.class)\r\n  .name(\"country-map\")\r\n  .entries(50)\r\n  .averageValue(\"America\")\r\n  .create();\r\n```","```\r\nChronicleMap<LongValue, CharSequence> persistedCountryMap = ChronicleMap\r\n  .of(LongValue.class, CharSequence.class)\r\n  .name(\"country-map\")\r\n  .entries(50)\r\n  .averageValue(\"America\")\r\n  .createPersistedTo(new File(System.getProperty(\"user.home\") + \"/country-details.dat\"));\r\n```","```\r\nLongValue qatarKey = Values.newHeapInstance(LongValue.class);\r\nqatarKey.setValue(1);\r\ninMemoryCountryMap.put(qatarKey, \"Qatar\");\r\n\r\n//...\r\n\r\nCharSequence country = inMemoryCountryMap.get(key);\r\n```","```\r\nLongValue key = Values.newHeapInstance(LongValue.class);\r\nStringBuilder country = new StringBuilder();\r\nkey.setValue(1);\r\npersistedCountryMap.getUsing(key, country);\r\nassertThat(country.toString(), is(equalTo(\"Romania\")));\r\n\r\nkey.setValue(2);\r\npersistedCountryMap.getUsing(key, country);\r\nassertThat(country.toString(), is(equalTo(\"India\")));\r\n```","```\r\ncountry.setLength(0);\r\ncountry.append(persistedCountryMap.get(key));\r\n```","```\r\nSet<Integer> averageValue = IntStream.of(1, 2).boxed().collect(Collectors.toSet());\r\nChronicleMap<Integer, Set<Integer>> multiMap = ChronicleMap\r\n  .of(Integer.class, (Class<Set<Integer>>) (Class) Set.class)\r\n  .name(\"multi-map\")\r\n  .entries(50)\r\n  .averageValue(averageValue)\r\n  .create();\r\n\r\nSet<Integer> set1 = new HashSet<>();\r\nset1.add(1);\r\nset1.add(2);\r\nmultiMap.put(1, set1);\r\n\r\nSet<Integer> set2 = new HashSet<>();\r\nset2.add(3);\r\nmultiMap.put(2, set2);\r\n```","```\r\ntry (ExternalMapQueryContext<Integer, Set<Integer>, ?> fistContext = multiMap.queryContext(1)) {\r\n    try (ExternalMapQueryContext<Integer, Set<Integer>, ?> secondContext = multiMap.queryContext(2)) {\r\n        fistContext.updateLock().lock();\r\n        secondContext.updateLock().lock();\r\n\r\n        MapEntry<Integer, Set<Integer>> firstEntry = fistContext.entry();\r\n        Set<Integer> firstSet = firstEntry.value().get();\r\n        firstSet.remove(2);\r\n\r\n        MapEntry<Integer, Set<Integer>> secondEntry = secondContext.entry();\r\n        Set<Integer> secondSet = secondEntry.value().get();\r\n        secondSet.add(4);\r\n\r\n        firstEntry.doReplaceValue(fistContext.wrapValueAsData(firstSet));\r\n        secondEntry.doReplaceValue(secondContext.wrapValueAsData(secondSet));\r\n    }\r\n} finally {\r\n    assertThat(multiMap.get(1).size(), is(equalTo(1)));\r\n    assertThat(multiMap.get(2).size(), is(equalTo(2)));\r\n}\r\n```","```\r\npersistedCountryMap.close();\r\ninMemoryCountryMap.close();\r\nmultiMap.close();\r\n```"]