["```\r\n@Entity\r\npublic class User {\r\n    ...\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    ...\r\n}\r\n```","```\r\n@Controller\r\n@RequestMapping(value = \"/user\")\r\npublic class UserController {\r\n\r\n    @Autowired\r\n    private UserService service;\r\n\r\n    @RequestMapping(value = \"/register\", method = RequestMethod.POST)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    public void register(\r\n      @RequestParam(\"username\") String username, \r\n      @RequestParam(\"email\") String email,\r\n      @RequestParam(\"password\") String password) \r\n    {\r\n        service.registerNewUser(username, email, password);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class UserService {\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private PreferenceRepository preferenceReopsitory;\r\n\r\n    @Autowired\r\n    private PasswordEncoder passwordEncoder;\r\n\r\n    @Override\r\n    public void registerNewUser(String username, String email, String password) {\r\n        User existingUser = userRepository.findByUsername(username);\r\n        if (existingUser != null) {\r\n            throw new UsernameAlreadyExistsException(\"Username already exists\");\r\n        }\r\n\r\n        User user = new User();\r\n        user.setUsername(username);\r\n        user.setPassword(passwordEncoder.encode(password));\r\n        Preference pref = new Preference();\r\n        pref.setTimezone(TimeZone.getDefault().getID());\r\n        pref.setEmail(email);\r\n        preferenceReopsitory.save(pref);\r\n        user.setPreference(pref);\r\n        userRepository.save(user);\r\n    }\r\n}\r\n```","```\r\npublic class UsernameAlreadyExistsException extends RuntimeException {\r\n\r\n    public UsernameAlreadyExistsException(String message) {\r\n        super(message);\r\n    }\r\n    public UsernameAlreadyExistsException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n}\r\n```","```\r\n@ExceptionHandler({ UsernameAlreadyExistsException.class })\r\npublic ResponseEntity<Object> \r\n  handleUsernameAlreadyExists(RuntimeException ex, WebRequest request) {\r\n    logger.error(\"400 Status Code\", ex);\r\n    String bodyOfResponse = ex.getLocalizedMessage();\r\n    return new \r\n      ResponseEntity<Object>(bodyOfResponse, new HttpHeaders(), HttpStatus.BAD_REQUEST);\r\n}\r\n```","```\r\n<form>\r\n    <input  id=\"username\"/>\r\n    <input  id=\"email\"/>\r\n    <input type=\"password\" id=\"password\" />\r\n    <button onclick=\"register()\">Sign up</button>\r\n</form>\r\n\r\n<script>\r\nfunction register(){\r\n    $.post(\"user/register\", {username: $(\"#username\").val(),\r\n      email: $(\"#email\").val(), password: $(\"#password\").val()}, \r\n      function (data){\r\n        window.location.href= \"./\";\r\n    }).fail(function(error){\r\n        alert(\"Error: \"+ error.responseText);\r\n    }); \r\n}\r\n</script>\r\n```","```\r\n<div th:if=\"${param.containsKey('error')}\">\r\nInvalid username or password\r\n</div>\r\n<form method=\"post\" action=\"j_spring_security_check\">\r\n    <input name=\"username\" />\r\n    <input type=\"password\" name=\"password\"/>  \r\n    <button type=\"submit\" >Login</button>\r\n</form>\r\n<a href=\"signup\">Sign up</a>\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@ComponentScan({ \"org.baeldung.security\" })\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private MyUserDetailsService userDetailsService;\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.userDetailsService(userDetailsService).passwordEncoder(encoder());\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            ...\r\n            .formLogin()\r\n            .loginPage(\"/\")\r\n            .loginProcessingUrl(\"/j_spring_security_check\")\r\n            .defaultSuccessUrl(\"/home\")\r\n            .failureUrl(\"/?error=true\")\r\n            .usernameParameter(\"username\")\r\n            .passwordParameter(\"password\")\r\n            ...\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder encoder() { \r\n        return new BCryptPasswordEncoder(11); \r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) {\r\n        User user = userRepository.findByUsername(username); \r\n        if (user == null) { \r\n            throw new UsernameNotFoundException(username);\r\n        } \r\n        return new UserPrincipal(user);\r\n    }\r\n}\r\n```","```\r\npublic class UserPrincipal implements UserDetails {\r\n\r\n    private User user;\r\n\r\n    public UserPrincipal(User user) {\r\n        super();\r\n        this.user = user;\r\n    }\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return user.getUsername();\r\n    }\r\n\r\n    @Override\r\n    public String getPassword() {\r\n        return user.getPassword();\r\n    }\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        return Arrays.asList(new SimpleGrantedAuthority(\"ROLE_USER\"));\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isAccountNonLocked() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isCredentialsNonExpired() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEnabled() {\r\n        return true;\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(\"/redditLogin\")\r\npublic String redditLogin() {\r\n    OAuth2AccessToken token = redditTemplate.getAccessToken();\r\n    service.connectReddit(redditTemplate.needsCaptcha(), token);\r\n    return \"redirect:home\";\r\n}\r\n```","```\r\n@Override\r\npublic void connectReddit(boolean needsCaptcha, OAuth2AccessToken token) {\r\n    UserPrincipal userPrincipal = (UserPrincipal) \r\n      SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n    User currentUser = userPrincipal.getUser();\r\n    currentUser.setNeedCaptcha(needsCaptcha);\r\n    currentUser.setAccessToken(token.getValue());\r\n    currentUser.setRefreshToken(token.getRefreshToken().getValue());\r\n    currentUser.setTokenExpiration(token.getExpiration());\r\n    userRepository.save(currentUser);\r\n}\r\n```","```\r\n<h1>Welcome, \r\n<a href=\"profile\" sec:authentication=\"principal.username\">Bob</a></small>\r\n</h1>\r\n<a th:if=\"${#authentication.principal.user.accessToken == null}\" href=\"redditLogin\" >\r\n    Connect your Account to Reddit\r\n</a>\r\n```","```\r\n@RequestMapping(\"/post\")\r\npublic String showSubmissionForm(Model model) {\r\n    if (getCurrentUser().getAccessToken() == null) {\r\n        model.addAttribute(\"msg\", \"Sorry, You did not connect your account to Reddit yet\");\r\n        return \"submissionResponse\";\r\n    }\r\n    ...\r\n}\r\n```"]