["```\r\npublic static <T> void printAllRecursive(\r\n  int n, T[] elements, char delimiter) {\r\n\r\n    if(n == 1) {\r\n        printArray(elements, delimiter);\r\n    } else {\r\n        for(int i = 0; i < n-1; i++) {\r\n            printAllRecursive(n - 1, elements, delimiter);\r\n            if(n % 2 == 0) {\r\n                swap(elements, i, n-1);\r\n            } else {\r\n                swap(elements, 0, n-1);\r\n            }\r\n        }\r\n        printAllRecursive(n - 1, elements, delimiter);\r\n    }\r\n} \r\n```","```\r\nprivate void swap(T[] input, int a, int b) {\r\n    T tmp = input[a];\r\n    input[a] = input[b];\r\n    input[b] = tmp;\r\n}\r\n```","```\r\nprivate void printArray(T[] input) {\r\n    System.out.print('\\n');\r\n    for(int i = 0; i < input.length; i++) {\r\n        System.out.print(input[i]);\r\n    }\r\n} \r\n```","```\r\nint[] indexes = new int[n];\r\nint[] indexes = new int[n];\r\nfor (int i = 0; i < n; i++) {\r\n    indexes[i] = 0;\r\n}\r\n\r\nprintArray(elements, delimiter);\r\n\r\nint i = 0;\r\nwhile (i < n) {\r\n    if (indexes[i] < i) {\r\n        swap(elements, i % 2 == 0 ?  0: indexes[i], i);\r\n        printArray(elements, delimiter);\r\n        indexes[i]++;\r\n        i = 0;\r\n    }\r\n    else {\r\n        indexes[i] = 0;\r\n        i++;\r\n    }\r\n} \r\n```","```\r\npublic static <T extends Comparable<T>> void printAllOrdered(\r\n  T[] elements, char delimiter) {\r\n\r\n    Arrays.sort(elements);\r\n    boolean hasNext = true;\r\n\r\n    while(hasNext) {\r\n        printArray(elements, delimiter);\r\n        int k = 0, l = 0;\r\n        hasNext = false;\r\n        for (int i = elements.length - 1; i > 0; i--) {\r\n            if (elements[i].compareTo(elements[i - 1]) > 0) {\r\n                k = i - 1;\r\n                hasNext = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (int i = elements.length - 1; i > k; i--) {\r\n            if (elements[i].compareTo(elements[k]) > 0) {\r\n                l = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        swap(elements, k, l);\r\n        Collections.reverse(Arrays.asList(elements).subList(k + 1, elements.length));\r\n    }\r\n} \r\n```","```\r\nCollections.shuffle(Arrays.asList(elements));\r\n```"]