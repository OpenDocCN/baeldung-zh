["```\r\nAmazonEC2 ec2Client = AmazonEC2ClientBuilder\r\n  .standard()\r\n  .withCredentials(new AWSStaticCredentialsProvider(credentials))\r\n  .withRegion(Regions.US_EAST_1)\r\n  .build();\r\n```","```\r\nCreateSecurityGroupRequest createSecurityGroupRequest = new CreateSecurityGroupRequest()\r\n  .withGroupName(\"BaeldungSecurityGroup\")\r\n  .withDescription(\"Baeldung Security Group\");\r\nCreateSecurityGroupResult createSecurityGroupResult = ec2Client.createSecurityGroup(\r\n  createSecurityGroupRequest);\r\n```","```\r\nIpRange ipRange = new IpRange().withCidrIp(\"0.0.0.0/0\");\r\nIpPermission ipPermission = new IpPermission()\r\n  .withIpv4Ranges(Arrays.asList(new IpRange[] { ipRange }))\r\n  .withIpProtocol(\"tcp\")\r\n  .withFromPort(80)\r\n  .withToPort(80);\r\n```","```\r\nAuthorizeSecurityGroupIngressRequest authorizeSecurityGroupIngressRequest \r\n  = new AuthorizeSecurityGroupIngressRequest()\r\n  .withGroupName(\"BaeldungSecurityGroup\")\r\n  .withIpPermissions(ipPermission);\r\nec2Client.authorizeSecurityGroupIngress(authorizeSecurityGroupIngressRequest);\r\n```","```\r\nCreateKeyPairRequest createKeyPairRequest = new CreateKeyPairRequest()\r\n  .withKeyName(\"baeldung-key-pair\");\r\nCreateKeyPairResult createKeyPairResult = ec2Client.createKeyPair(createKeyPairRequest);\r\n```","```\r\ncreateKeyPairResult.getKeyPair().getKeyMaterial(); \r\n```","```\r\nRunInstancesRequest runInstancesRequest = new RunInstancesRequest()\r\n  .withImageId(\"ami-97785bed\")\r\n  .withInstanceType(\"t2.micro\") \r\n  .withKeyName(\"baeldung-key-pair\") \r\n  .withMinCount(1)\r\n  .withMaxCount(1)\r\n  .withSecurityGroups(\"BaeldungSecurityGroup\"); \r\n```","```\r\nString yourInstanceId = ec2Client.runInstances(runInstancesRequest)\r\n  .getReservation().getInstances().get(0).getInstanceId();\r\n```","```\r\nStartInstancesRequest startInstancesRequest = new StartInstancesRequest()\r\n  .withInstanceIds(yourInstanceId);\r\n\r\nec2Client.startInstances(request); \r\n```","```\r\nStopInstancesRequest stopInstancesRequest = new StopInstancesRequest()\r\n  .withInstanceIds(yourInstanceId);\r\n\r\nec2Client.stopInstances(request); \r\n```","```\r\nRebootInstancesRequest request = new RebootInstancesRequest()\r\n  .withInstanceIds(yourInstanceId);\r\n\r\nRebootInstancesResult rebootInstancesRequest = ec2Client.rebootInstances(request); \r\n```","```\r\nec2Client.stopInstances(stopInstancesRequest)\r\n  .getStoppingInstances()\r\n  .get(0)\r\n  .getPreviousState()\r\n  .getName()\r\n```","```\r\nMonitorInstancesRequest monitorInstancesRequest = new MonitorInstancesRequest()\r\n  .withInstanceIds(yourInstanceId);\r\n\r\nec2Client.monitorInstances(monitorInstancesRequest);\r\n\r\nUnmonitorInstancesRequest unmonitorInstancesRequest = new UnmonitorInstancesRequest()\r\n  .withInstanceIds(yourInstanceId);\r\n\r\nec2Client.unmonitorInstances(unmonitorInstancesRequest); \r\n```","```\r\nDescribeInstancesRequest describeInstancesRequest\r\n = new DescribeInstancesRequest();\r\nDescribeInstancesResult response = ec2Client\r\n  .describeInstances(describeInstancesRequest); \r\n```","```\r\nresponse.getReservations()\r\n```","```\r\nresponse.getReservations().get(0).getInstances().get(0)\r\n```","```\r\n// ...\r\n.getImageId()\r\n.getSubnetId()\r\n.getInstanceId()\r\n.getImageId()\r\n.getInstanceType()\r\n.getState().getName()\r\n.getMonitoring().getState()\r\n.getKernelId()\r\n.getKeyName() \r\n```"]