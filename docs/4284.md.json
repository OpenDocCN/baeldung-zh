["```\r\nprivate static final int QUOTE_CHARACTER = '\\'';\r\nprivate static final int DOUBLE_QUOTE_CHARACTER = '\"';\r\n\r\npublic static List<Object> streamTokenizerWithDefaultConfiguration(Reader reader) throws IOException {\r\n    StreamTokenizer streamTokenizer = new StreamTokenizer(reader);\r\n    List<Object> tokens = new ArrayList<Object>();\r\n\r\n    int currentToken = streamTokenizer.nextToken();\r\n    while (currentToken != StreamTokenizer.TT_EOF) {\r\n\r\n        if (streamTokenizer.ttype == StreamTokenizer.TT_NUMBER) {\r\n            tokens.add(streamTokenizer.nval);\r\n        } else if (streamTokenizer.ttype == StreamTokenizer.TT_WORD\r\n            || streamTokenizer.ttype == QUOTE_CHARACTER\r\n            || streamTokenizer.ttype == DOUBLE_QUOTE_CHARACTER) {\r\n            tokens.add(streamTokenizer.sval);\r\n        } else {\r\n            tokens.add((char) currentToken);\r\n        }\r\n\r\n        currentToken = streamTokenizer.nextToken();\r\n    }\r\n\r\n    return tokens;\r\n}\r\n```","```\r\n3 quick brown foxes jump over the \"lazy\" dog!\r\n#test1\r\n//test2\r\n```","```\r\nNumber: 3.0\r\nWord: quick\r\nWord: brown\r\nWord: foxes\r\nWord: jump\r\nWord: over\r\nWord: the\r\nWord: lazy\r\nWord: dog\r\nOrdinary char: !\r\nOrdinary char: #\r\nWord: test1\r\n```","```\r\npublic static List<Object> streamTokenizerWithCustomConfiguration(Reader reader) throws IOException {\r\n    StreamTokenizer streamTokenizer = new StreamTokenizer(reader);\r\n    List<Object> tokens = new ArrayList<Object>();\r\n\r\n    streamTokenizer.wordChars('!', '-');\r\n    streamTokenizer.ordinaryChar('/');\r\n    streamTokenizer.commentChar('#');\r\n    streamTokenizer.eolIsSignificant(true);\r\n\r\n    // same as before\r\n\r\n    return tokens;\r\n}\r\n```","```\r\n// same output as earlier\r\nWord: \"lazy\"\r\nWord: dog!\r\nOrdinary char: \r\n\r\nOrdinary char: \r\n\r\nOrdinary char: /\r\nOrdinary char: /\r\nWord: test2\r\n```"]