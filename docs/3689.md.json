["```\r\nMap<Integer, String> hashMap = new HashMap<>();\r\nhashMap.put(5, \"A\");\r\nhashMap.put(1, \"B\");\r\nhashMap.put(2, \"C\");\r\n```","```\r\nIterator<Map.Entry<Integer, String>> iterator = hashMap.entrySet().iterator();\r\n\r\nMap.Entry<Integer, String> actualValue = iterator.next();\r\nMap.Entry<Integer, String> expectedValue = new AbstractMap.SimpleEntry<Integer, String>(1, \"B\");\r\n\r\nassertEquals(expectedValue, actualValue);\r\n```","```\r\nMap.Entry<Integer, String> actualValue = hashMap.entrySet()\r\n  .stream()\r\n  .findFirst()\r\n  .get(); \r\n```","```\r\nMap.Entry<Integer, String> expectedValue = new AbstractMap.SimpleEntry<Integer, String>(1, \"B\");\r\n\r\nassertEquals(expectedValue, actualValue);\r\n```","```\r\nSystem.out.println(hashMap);\r\n```","```\r\n{1=B, 2=C, 5=A}\r\n```","```\r\nhashMap.put(0, \"D\");\r\n\r\nIterator<Map.Entry<Integer, String>> iterator = hashMap.entrySet().iterator();\r\n\r\nMap.Entry<Integer, String> actualValue = iterator.next();\r\nMap.Entry<Integer, String> expectedValue = new AbstractMap.SimpleEntry<Integer, String>(0, \"D\");\r\n\r\nassertEquals(expectedValue, actualValue);\r\n```","```\r\nMap<Integer, String> linkedHashMap = new LinkedHashMap<>();\r\nlinkedHashMap.put(5, \"A\");\r\nlinkedHashMap.put(1, \"B\");\r\nlinkedHashMap.put(2, \"C\");\r\nlinkedHashMap.put(0, \"D\");\r\n\r\nIterator<Map.Entry<Integer, String>> iterator = linkedHashMap.entrySet().iterator();\r\nMap.Entry<Integer, String> actualValue = iterator.next();\r\nMap.Entry<Integer, String> expectedValue = new AbstractMap.SimpleEntry<Integer, String>(5, \"A\");\r\n\r\nassertEquals(expectedValue, actualValue);\r\n```"]