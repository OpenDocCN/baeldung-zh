["```\r\nResourceLoader resourceLoader = new DefaultResourceLoader();\r\nResource resource = resourceLoader.getResource(\"classpath:resource.txt\");\r\n```","```\r\n@Autowired\r\nprivate ResourceLoader resourceLoader;\r\n```","```\r\n@Value(\"classpath:resource.txt\")\r\nprivate Resource resource;\r\n```","```\r\nInputStream inputStream = resource.getInputStream();\r\n```","```\r\npublic class ResourceReader {\r\n\r\n    public static String asString(Resource resource) {\r\n        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {\r\n            return FileCopyUtils.copyToString(reader);\r\n        } catch (IOException e) {\r\n            throw new UncheckedIOException(e);\r\n        }\r\n    }\r\n\r\n    // more utility methods\r\n}\r\n```","```\r\npublic static String readFileToString(String path) {\r\n    ResourceLoader resourceLoader = new DefaultResourceLoader();\r\n    Resource resource = resourceLoader.getResource(path);\r\n    return asString(resource);\r\n}\r\n```","```\r\n@Configuration\r\npublic class LoadResourceConfig {\r\n\r\n    // Bean Declarations\r\n}\r\n```","```\r\n@Bean\r\npublic String resourceString() {\r\n    return ResourceReader.readFileToString(\"resource.txt\");\r\n}\r\n```","```\r\npublic class LoadResourceAsStringIntegrationTest {\r\n    private static final String EXPECTED_RESOURCE_VALUE = \"...\";  // The string value of the file content\r\n\r\n    @Autowired\r\n    @Qualifier(\"resourceString\")\r\n    private String resourceString;\r\n\r\n    @Test\r\n    public void givenUsingResourceStringBean_whenConvertingAResourceToAString_thenCorrect() {\r\n        assertEquals(EXPECTED_RESOURCE_VALUE, resourceString);\r\n    }\r\n}\r\n```","```\r\npublic class LoadResourceAsStringIntegrationTest {\r\n    private static final String EXPECTED_RESOURCE_VALUE = \"...\"; // The string value of the file content\r\n\r\n    @Value(\r\n      \"#{T(com.baeldung.loadresourceasstring.ResourceReader).readFileToString('classpath:resource.txt')}\"\r\n    )\r\n    private String resourceStringUsingSpel;\r\n\r\n    @Test\r\n    public void givenUsingSpel_whenConvertingAResourceToAString_thenCorrect() {\r\n        assertEquals(EXPECTED_RESOURCE_VALUE, resourceStringUsingSpel);\r\n    }\r\n}\r\n```","```\r\npublic class ResourceReader {\r\n    public static String readFileToString(String path) throws IOException {\r\n        return FileUtils.readFileToString(ResourceUtils.getFile(path), StandardCharsets.UTF_8);\r\n    }\r\n}\r\n```"]