["```\r\npublic class UnintendedInfiniteRecursion {\r\n    public int calculateFactorial(int number) {\r\n        return number * calculateFactorial(number - 1);\r\n    }\r\n}\r\n```","```\r\npublic class UnintendedInfiniteRecursionManualTest {\r\n    @Test(expected = StackOverflowError.class)\r\n    public void givenPositiveIntNoOne_whenCalFact_thenThrowsException() {\r\n        int numToCalcFactorial= 1;\r\n        UnintendedInfiniteRecursion uir \r\n          = new UnintendedInfiniteRecursion();\r\n\r\n        uir.calculateFactorial(numToCalcFactorial);\r\n    }\r\n\r\n    @Test(expected = StackOverflowError.class)\r\n    public void givenPositiveIntGtOne_whenCalcFact_thenThrowsException() {\r\n        int numToCalcFactorial= 2;\r\n        UnintendedInfiniteRecursion uir \r\n          = new UnintendedInfiniteRecursion();\r\n\r\n        uir.calculateFactorial(numToCalcFactorial);\r\n    }\r\n\r\n    @Test(expected = StackOverflowError.class)\r\n    public void givenNegativeInt_whenCalcFact_thenThrowsException() {\r\n        int numToCalcFactorial= -1;\r\n        UnintendedInfiniteRecursion uir \r\n          = new UnintendedInfiniteRecursion();\r\n\r\n        uir.calculateFactorial(numToCalcFactorial);\r\n    }\r\n}\r\n```","```\r\npublic class InfiniteRecursionWithTerminationCondition {\r\n    public int calculateFactorial(int number) {\r\n       return number == 1 ? 1 : number * calculateFactorial(number - 1);\r\n    }\r\n}\r\n```","```\r\npublic class InfiniteRecursionWithTerminationConditionManualTest {\r\n    @Test\r\n    public void givenPositiveIntNoOne_whenCalcFact_thenCorrectlyCalc() {\r\n        int numToCalcFactorial = 1;\r\n        InfiniteRecursionWithTerminationCondition irtc \r\n          = new InfiniteRecursionWithTerminationCondition();\r\n\r\n        assertEquals(1, irtc.calculateFactorial(numToCalcFactorial));\r\n    }\r\n\r\n    @Test\r\n    public void givenPositiveIntGtOne_whenCalcFact_thenCorrectlyCalc() {\r\n        int numToCalcFactorial = 5;\r\n        InfiniteRecursionWithTerminationCondition irtc \r\n          = new InfiniteRecursionWithTerminationCondition();\r\n\r\n        assertEquals(120, irtc.calculateFactorial(numToCalcFactorial));\r\n    }\r\n\r\n    @Test(expected = StackOverflowError.class)\r\n    public void givenNegativeInt_whenCalcFact_thenThrowsException() {\r\n        int numToCalcFactorial = -1;\r\n        InfiniteRecursionWithTerminationCondition irtc \r\n          = new InfiniteRecursionWithTerminationCondition();\r\n\r\n        irtc.calculateFactorial(numToCalcFactorial);\r\n    }\r\n}\r\n```","```\r\npublic class RecursionWithCorrectTerminationCondition {\r\n    public int calculateFactorial(int number) {\r\n        return number <= 1 ? 1 : number * calculateFactorial(number - 1);\r\n    }\r\n}\r\n```","```\r\npublic class RecursionWithCorrectTerminationConditionManualTest {\r\n    @Test\r\n    public void givenNegativeInt_whenCalcFact_thenCorrectlyCalc() {\r\n        int numToCalcFactorial = -1;\r\n        RecursionWithCorrectTerminationCondition rctc \r\n          = new RecursionWithCorrectTerminationCondition();\r\n\r\n        assertEquals(1, rctc.calculateFactorial(numToCalcFactorial));\r\n    }\r\n}\r\n```","```\r\npublic class ClassOne {\r\n    private int oneValue;\r\n    private ClassTwo clsTwoInstance = null;\r\n\r\n    public ClassOne() {\r\n        oneValue = 0;\r\n        clsTwoInstance = new ClassTwo();\r\n    }\r\n\r\n    public ClassOne(int oneValue, ClassTwo clsTwoInstance) {\r\n        this.oneValue = oneValue;\r\n        this.clsTwoInstance = clsTwoInstance;\r\n    }\r\n}\r\n```","```\r\npublic class ClassTwo {\r\n    private int twoValue;\r\n    private ClassOne clsOneInstance = null;\r\n\r\n    public ClassTwo() {\r\n        twoValue = 10;\r\n        clsOneInstance = new ClassOne();\r\n    }\r\n\r\n    public ClassTwo(int twoValue, ClassOne clsOneInstance) {\r\n        this.twoValue = twoValue;\r\n        this.clsOneInstance = clsOneInstance;\r\n    }\r\n}\r\n```","```\r\npublic class CyclicDependancyManualTest {\r\n    @Test(expected = StackOverflowError.class)\r\n    public void whenInstanciatingClassOne_thenThrowsException() {\r\n        ClassOne obj = new ClassOne();\r\n    }\r\n}\r\n```","```\r\npublic class AccountHolder {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    AccountHolder jointAccountHolder = new AccountHolder();\r\n}\r\n```","```\r\npublic class AccountHolderManualTest {\r\n    @Test(expected = StackOverflowError.class)\r\n    public void whenInstanciatingAccountHolder_thenThrowsException() {\r\n        AccountHolder holder = new AccountHolder();\r\n    }\r\n}\r\n```","```\r\njava.lang.StackOverflowError\r\n\r\n at c.b.s.InfiniteRecursionWithTerminationCondition\r\n  .calculateFactorial(InfiniteRecursionWithTerminationCondition.java:5)\r\n at c.b.s.InfiniteRecursionWithTerminationCondition\r\n  .calculateFactorial(InfiniteRecursionWithTerminationCondition.java:5)\r\n at c.b.s.InfiniteRecursionWithTerminationCondition\r\n  .calculateFactorial(InfiniteRecursionWithTerminationCondition.java:5)\r\n at c.b.s.InfiniteRecursionWithTerminationCondition\r\n  .calculateFactorial(InfiniteRecursionWithTerminationCondition.java:5)\r\n```","```\r\njava.lang.StackOverflowError\r\n  at c.b.s.ClassTwo.<init>(ClassTwo.java:9)\r\n  at c.b.s.ClassOne.<init>(ClassOne.java:9)\r\n  at c.b.s.ClassTwo.<init>(ClassTwo.java:9)\r\n  at c.b.s.ClassOne.<init>(ClassOne.java:9)\r\n```"]