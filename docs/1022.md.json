["```\r\n123e4567-e89b-42d3-a456-556642440000\r\nxxxxxxxx-xxxx-Bxxx-Axxx-xxxxxxxxxxxx\r\n```","```\r\n MSB1    MSB2    MSB3\r\n   0       X       X     reserved (0)\r\n   1       0       X     current variant (2)\r\n   1       1       0     reserved for Microsoft (6)\r\n   1       1       1     reserved for future (7)\r\n```","```\r\nUUID uuid = new UUID(long mostSignificant64Bits, long leastSignificant64Bits);\r\n```","```\r\nUUID uuid = UUID.nameUUIDFromBytes(byte[] bytes);\r\n```","```\r\nUUID uuid = UUID.randomUUID();\r\n```","```\r\nUUID uuid = UUID.fromString(String uuidHexDigitString);\r\n```","```\r\nprivate static long get64LeastSignificantBitsForVersion1() {\r\n    Random random = new Random();\r\n    long random63BitLong = random.nextLong() & 0x3FFFFFFFFFFFFFFFL;\r\n    long variant3BitFlag = 0x8000000000000000L;\r\n    return random63BitLong + variant3BitFlag;\r\n}\r\n\r\nprivate static long get64MostSignificantBitsForVersion1() {\r\n    LocalDateTime start = LocalDateTime.of(1582, 10, 15, 0, 0, 0);\r\n    Duration duration = Duration.between(start, LocalDateTime.now());\r\n    long seconds = duration.getSeconds();\r\n    long nanos = duration.getNano();\r\n    long timeForUuidIn100Nanos = seconds * 10000000 + nanos * 100;\r\n    long least12SignificatBitOfTime = (timeForUuidIn100Nanos & 0x000000000000FFFFL) >> 4;\r\n    long version = 1 << 12;\r\n    return \r\n      (timeForUuidIn100Nanos & 0xFFFFFFFFFFFF0000L) + version + least12SignificatBitOfTime;\r\n}\r\n```","```\r\npublic static UUID generateType1UUID() {\r\n\r\n    long most64SigBits = get64MostSignificantBitsForVersion1();\r\n    long least64SigBits = get64LeastSignificantBitsForVersion1();\r\n\r\n    return new UUID(most64SigBits, least64SigBits);\r\n}\r\n```","```\r\nUUID uuid = UUID.randomUUID();\r\n```","```\r\nMessageDigest salt = MessageDigest.getInstance(\"SHA-256\");\r\nsalt.update(UUID.randomUUID().toString().getBytes(\"UTF-8\"));\r\nString digest = bytesToHex(salt.digest());\r\n```","```\r\nUUID = hash(NAMESPACE_IDENTIFIER + NAME)\r\n```","```\r\nbyte[] nameSpaceBytes = bytesFromUUID(namespace);\r\nbyte[] nameBytes = name.getBytes(\"UTF-8\");\r\nbyte[] result = joinBytes(nameSpaceBytes, nameBytes);\r\n```","```\r\nUUID uuid = UUID.nameUUIDFromBytes(result);\r\n```","```\r\npublic static long getLeastAndMostSignificantBitsVersion5(final byte[] src, final int offset, final ByteOrder order) {\r\n    long ans = 0;\r\n    if (order == ByteOrder.BIG_ENDIAN) {\r\n        for (int i = offset; i < offset + 8; i += 1) {\r\n            ans <<= 8;\r\n            ans |= src[i] & 0xffL;\r\n        }\r\n    } else {\r\n        for (int i = offset + 7; i >= offset; i -= 1) {\r\n            ans <<= 8;\r\n            ans |= src[i] & 0xffL;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n```","```\r\nprivate static UUID generateType5UUID(String name) { \r\n    byte[] bytes = name.getBytes(StandardCharsets.UTF_8);\r\n    MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\r\n    byte[] hash = md.digest(bytes);\r\n    long msb = getLeastAndMostSignificantBitsVersion5(hash, 0, ByteOrder.BIG_ENDIAN);\r\n    long lsb = getLeastAndMostSignificantBitsVersion5(hash, 8, ByteOrder.BIG_ENDIAN);\r\n    msb &= ~(0xfL << 12);\r\n    msb |= ((long) 5) << 12;\r\n    lsb &= ~(0x3L << 62);\r\n    lsb |= 2L << 62;\r\n    return new UUID(msb, lsb);\r\n}\r\n```"]