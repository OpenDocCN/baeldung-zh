["```\r\n<dependency>\r\n    <groupId>io.jenetics</groupId>\r\n    <artifactId>jenetics</artifactId>\r\n    <version>3.7.0</version>\r\n</dependency>\r\n```","```\r\nFactory<Genotype<BitGene>> gtf = Genotype.of(BitChromosome.of(10, 0.5));\r\n```","```\r\nEngine<BitGene, Integer> engine\r\n  = Engine.builder(SimpleGeneticAlgorithm::eval, gtf).build();\r\n```","```\r\nprivate Integer eval(Genotype<BitGene> gt) {\r\n    return gt.getChromosome().as(BitChromosome.class).bitCount();\r\n}\r\n```","```\r\nGenotype<BitGene> result = engine.stream()\r\n  .limit(500)\r\n  .collect(EvolutionResult.toBestGenotype());\r\n```","```\r\nBefore the evolution:\r\n[00000010|11111100]\r\nAfter the evolution:\r\n[00000000|11111111]\r\n```","```\r\npublic class SubsetSum implements Problem<ISeq<Integer>, EnumGene<Integer>, Integer> {\r\n    // implementation\r\n}\r\n```","```\r\n@Override\r\npublic Function<ISeq<Integer>, Integer> fitness() {\r\n    return subset -> Math.abs(subset.stream()\r\n      .mapToInt(Integer::intValue).sum());\r\n}\r\n\r\n@Override\r\npublic Codec<ISeq<Integer>, EnumGene<Integer>> codec() {\r\n    return codecs.ofSubSet(basicSet, size);\r\n}\r\n```","```\r\nSubsetSum problem = of(500, 15, new LCG64ShiftRandom(101010));\r\n```","```\r\nEngine<EnumGene<Integer>, Integer> engine = Engine.builder(problem)\r\n  .minimizing()\r\n  .maximalPhenotypeAge(5)\r\n  .alterers(new PartiallyMatchedCrossover<>(0.4), new Mutator<>(0.3))\r\n  .build();\r\n```","```\r\nPhenotype<EnumGene<Integer>, Integer> result = engine.stream()\r\n  .limit(limit.bySteadyFitness(55))\r\n  .collect(EvolutionResult.toBestPhenotype());\r\n```","```\r\n[85|-76|178|-197|91|-106|-70|-243|-41|-98|94|-213|139|238|219] --> 0\r\n```","```\r\nint nItems = 15;\r\ndouble ksSize = nItems * 100.0 / 3.0;\r\n```","```\r\nKnapsackFF ff = new KnapsackFF(Stream.generate(KnapsackItem::random)\r\n  .limit(nItems)\r\n  .toArray(KnapsackItem[]::new), ksSize);\r\n```","```\r\nEngine<BitGene, Double> engine\r\n  = Engine.builder(ff, BitChromosome.of(nItems, 0.5))\r\n  .populationSize(500)\r\n  .survivorsSelector(new TournamentSelector<>(5))\r\n  .offspringSelector(new RouletteWheelSelector<>())\r\n  .alterers(new Mutator<>(0.115), new SinglePointCrossover<>(0.16))\r\n  .build();\r\n```","```\r\nEvolutionStatistics<Double, ?> statistics = EvolutionStatistics.ofNumber();\r\n```","```\r\nPhenotype<BitGene, Double> best = engine.stream()\r\n  .limit(bySteadyFitness(7))\r\n  .limit(100)\r\n  .peek(statistics)\r\n  .collect(toBestPhenotype());\r\n```","```\r\n+---------------------------------------------------------------------------+\r\n|  Time statistics                                                          |\r\n+---------------------------------------------------------------------------+\r\n|             Selection: sum=0,039207931000 s; mean=0,003267327583 s        |\r\n|              Altering: sum=0,065145069000 s; mean=0,005428755750 s        |\r\n|   Fitness calculation: sum=0,029678433000 s; mean=0,002473202750 s        |\r\n|     Overall execution: sum=0,111383965000 s; mean=0,009281997083 s        |\r\n+---------------------------------------------------------------------------+\r\n|  Evolution statistics                                                     |\r\n+---------------------------------------------------------------------------+\r\n|           Generations: 12                                                 |\r\n|               Altered: sum=7 664; mean=638,666666667                      |\r\n|                Killed: sum=0; mean=0,000000000                            |\r\n|              Invalids: sum=0; mean=0,000000000                            |\r\n+---------------------------------------------------------------------------+\r\n|  Population statistics                                                    |\r\n+---------------------------------------------------------------------------+\r\n|                   Age: max=10; mean=1,792167; var=4,657748                |\r\n|               Fitness:                                                    |\r\n|                      min  = 0,000000000000                                |\r\n|                      max  = 716,684883338605                              |\r\n|                      mean = 587,012666759785                              |\r\n|                      var  = 17309,892287851708                            |\r\n|                      std  = 131,567063841418                              |\r\n+---------------------------------------------------------------------------+\r\n```"]