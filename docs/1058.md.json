["```\r\n@Autowired\r\nResourceLoader resourceLoader;\r\n\r\npublic void downloadS3Object(String s3Url) throws IOException {\r\n    Resource resource = resourceLoader.getResource(s3Url);\r\n    File downloadedS3Object = new File(resource.getFilename());\r\n\r\n    try (InputStream inputStream = resource.getInputStream()) {\r\n        Files.copy(inputStream, downloadedS3Object.toPath(), \r\n          StandardCopyOption.REPLACE_EXISTING);\r\n    }\r\n}\r\n```","```\r\npublic void uploadFileToS3(File file, String s3Url) throws IOException {\r\n    WritableResource resource = (WritableResource) resourceLoader\r\n      .getResource(s3Url);\r\n\r\n    try (OutputStream outputStream = resource.getOutputStream()) {\r\n        Files.copy(file.toPath(), outputStream);\r\n    }\r\n}\r\n```","```\r\ns3://<bucket>/<object>\r\n```","```\r\ns3://my-s3-bucket/foo/bar.zip\r\n```","```\r\nprivate ResourcePatternResolver resourcePatternResolver;\r\n\r\n@Autowired\r\npublic void setupResolver(ApplicationContext applicationContext, AmazonS3 amazonS3) {\r\n    this.resourcePatternResolver = \r\n      new PathMatchingSimpleStorageResourcePatternResolver(amazonS3, applicationContext);\r\n }\r\n\r\npublic void downloadMultipleS3Objects(String s3Url) throws IOException {\r\n    Resource[] allFileMatchingPatten = this.resourcePatternResolver\r\n      .getResources(s3Url);\r\n        // ...\r\n    }\r\n}\r\n```"]