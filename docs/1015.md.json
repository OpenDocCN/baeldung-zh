["```\r\n@Autowired\r\nprivate DataSource dataSource;\r\n\r\n@Autowired\r\npublic void configureGlobal(AuthenticationManagerBuilder auth)\r\n  throws Exception {\r\n    auth.jdbcAuthentication()\r\n      .dataSource(dataSource)\r\n      .withDefaultSchema()\r\n      .withUser(User.withUsername(\"user\")\r\n        .password(passwordEncoder().encode(\"pass\"))\r\n        .roles(\"USER\"));\r\n}\r\n\r\n@Bean\r\npublic PasswordEncoder passwordEncoder() {\r\n    return new BCryptPasswordEncoder();\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/principal\")\r\npublic class UserController {\r\n\r\n    @GetMapping\r\n    public Principal retrievePrincipal(Principal principal) {\r\n        return principal;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfiguration {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity httpSecurity)\r\n      throws Exception {\r\n        httpSecurity.authorizeRequests()\r\n          .antMatchers(\"/h2-console/**\")\r\n          .permitAll()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .formLogin();\r\n\r\n        httpSecurity.csrf()\r\n          .ignoringAntMatchers(\"/h2-console/**\");\r\n        httpSecurity.headers()\r\n          .frameOptions()\r\n          .sameOrigin();\r\n      return http.build();\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>8.0.17</version>\r\n</dependency>\r\n```","```\r\nspring.datasource.url=\r\n  jdbc:mysql://localhost:3306/jdbc_authentication\r\nspring.datasource.username=root\r\nspring.datasource.password=pass\r\n```","```\r\ndocker run -p 3306:3306\r\n  --name bael-mysql\r\n  -e MYSQL_ROOT_PASSWORD=pass\r\n  -e MYSQL_DATABASE=jdbc_authentication\r\n  mysql:latest\r\n```","```\r\n@Autowired\r\npublic void configureGlobal(AuthenticationManagerBuilder auth)\r\n  throws Exception {\r\n    auth.jdbcAuthentication()\r\n      .dataSource(dataSource);\r\n}\r\n```","```\r\nCREATE TABLE users (\r\n  username VARCHAR(50) NOT NULL,\r\n  password VARCHAR(100) NOT NULL,\r\n  enabled TINYINT NOT NULL DEFAULT 1,\r\n  PRIMARY KEY (username)\r\n);\r\n\r\nCREATE TABLE authorities (\r\n  username VARCHAR(50) NOT NULL,\r\n  authority VARCHAR(50) NOT NULL,\r\n  FOREIGN KEY (username) REFERENCES users(username)\r\n);\r\n\r\nCREATE UNIQUE INDEX ix_auth_username\r\n  on authorities (username,authority);\r\n```","```\r\n-- User user/pass\r\nINSERT INTO users (username, password, enabled)\r\n  values ('user',\r\n    '$2a$10$8.UnVuG9HHgffUDAlk8qfOuVGkqRzgVymGe07xd00DMxs.AQubh4a',\r\n    1);\r\n\r\nINSERT INTO authorities (username, authority)\r\n  values ('user', 'ROLE_USER');\r\n```","```\r\nspring.sql.init.mode=always\r\nspring.jpa.hibernate.ddl-auto=none\r\n```","```\r\nCREATE TABLE bael_users (\r\n  name VARCHAR(50) NOT NULL,\r\n  email VARCHAR(50) NOT NULL,\r\n  password VARCHAR(100) NOT NULL,\r\n  enabled TINYINT NOT NULL DEFAULT 1,\r\n  PRIMARY KEY (email)\r\n);\r\n\r\nCREATE TABLE authorities (\r\n  email VARCHAR(50) NOT NULL,\r\n  authority VARCHAR(50) NOT NULL,\r\n  FOREIGN KEY (email) REFERENCES bael_users(email)\r\n);\r\n\r\nCREATE UNIQUE INDEX ix_auth_email on authorities (email,authority);\r\n```","```\r\n-- User [[email protected]](/web/20221108144117/https://www.baeldung.com/cdn-cgi/l/email-protection)/pass\r\nINSERT INTO bael_users (name, email, password, enabled)\r\n  values ('user',\r\n    '[[email protected]](/web/20221108144117/https://www.baeldung.com/cdn-cgi/l/email-protection)',\r\n    '$2a$10$8.UnVuG9HHgffUDAlk8qfOuVGkqRzgVymGe07xd00DMxs.AQubh4a',\r\n    1);\r\n\r\nINSERT INTO authorities (email, authority)\r\n  values ('[[email protected]](/web/20221108144117/https://www.baeldung.com/cdn-cgi/l/email-protection)', 'ROLE_USER');\r\n```","```\r\n@Autowired\r\npublic void configureGlobal(AuthenticationManagerBuilder auth) \r\n  throws Exception {\r\n    auth.jdbcAuthentication()\r\n      .dataSource(dataSource)\r\n      .usersByUsernameQuery(\"select email,password,enabled \"\r\n        + \"from bael_users \"\r\n        + \"where email = ?\")\r\n      .authoritiesByUsernameQuery(\"select email,authority \"\r\n        + \"from authorities \"\r\n        + \"where email = ?\");\r\n}\r\n```"]