["```\r\n<dependency>\r\n    <groupId>org.thymeleaf</groupId>\r\n    <artifactId>thymeleaf</artifactId>\r\n    <version>3.0.11.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.thymeleaf</groupId>\r\n    <artifactId>thymeleaf-spring5</artifactId>\r\n    <version>3.0.11.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"com.baeldung.thymeleaf\" })\r\npublic class WebMVCConfig implements WebMvcConfigurer, ApplicationContextAware {\r\n\r\n    private ApplicationContext applicationContext;\r\n\r\n    // Java setter\r\n\r\n    @Bean\r\n    public ViewResolver htmlViewResolver() {\r\n        ThymeleafViewResolver resolver = new ThymeleafViewResolver();\r\n        resolver.setTemplateEngine(templateEngine(htmlTemplateResolver()));\r\n        resolver.setContentType(\"text/html\");\r\n        resolver.setCharacterEncoding(\"UTF-8\");\r\n        resolver.setViewNames(ArrayUtil.array(\"*.html\"));\r\n        return resolver;\r\n    }\r\n\r\n    @Bean\r\n    public ViewResolver javascriptViewResolver() {\r\n        ThymeleafViewResolver resolver = new ThymeleafViewResolver();\r\n        resolver.setTemplateEngine(templateEngine(javascriptTemplateResolver()));\r\n        resolver.setContentType(\"application/javascript\");\r\n        resolver.setCharacterEncoding(\"UTF-8\");\r\n        resolver.setViewNames(ArrayUtil.array(\"*.js\"));\r\n        return resolver;\r\n    }\r\n\r\n    @Bean\r\n    public ViewResolver plainViewResolver() {\r\n        ThymeleafViewResolver resolver = new ThymeleafViewResolver();\r\n        resolver.setTemplateEngine(templateEngine(plainTemplateResolver()));\r\n        resolver.setContentType(\"text/plain\");\r\n        resolver.setCharacterEncoding(\"UTF-8\");\r\n        resolver.setViewNames(ArrayUtil.array(\"*.txt\"));\r\n        return resolver;\r\n    }\r\n} \r\n```","```\r\nprivate ISpringTemplateEngine templateEngine(ITemplateResolver templateResolver) {\r\n    SpringTemplateEngine engine = new SpringTemplateEngine();\r\n    engine.setTemplateResolver(templateResolver);\r\n    return engine;\r\n} \r\n```","```\r\nprivate ITemplateResolver htmlTemplateResolver() {\r\n    SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\r\n    resolver.setApplicationContext(applicationContext);\r\n    resolver.setPrefix(\"/WEB-INF/views/\");\r\n    resolver.setCacheable(false);\r\n    resolver.setTemplateMode(TemplateMode.HTML);\r\n    return resolver;\r\n}\r\n\r\nprivate ITemplateResolver javascriptTemplateResolver() {\r\n    SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\r\n    resolver.setApplicationContext(applicationContext);\r\n    resolver.setPrefix(\"/WEB-INF/js/\");\r\n    resolver.setCacheable(false);\r\n    resolver.setTemplateMode(TemplateMode.JAVASCRIPT);\r\n    return resolver;\r\n}\r\n\r\nprivate ITemplateResolver plainTemplateResolver() {\r\n    SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver();\r\n    resolver.setApplicationContext(applicationContext);\r\n    resolver.setPrefix(\"/WEB-INF/txt/\");\r\n    resolver.setCacheable(false);\r\n    resolver.setTemplateMode(TemplateMode.TEXT);\r\n    return resolver;\r\n}\r\n```","```\r\n@Controller\r\npublic class InliningController {\r\n\r\n    @RequestMapping(value = \"/html\", method = RequestMethod.GET)\r\n    public String getExampleHTML(Model model) {\r\n        model.addAttribute(\"title\", \"Baeldung\");\r\n        model.addAttribute(\"description\", \"<strong>Thymeleaf</strong> tutorial\");\r\n        return \"inliningExample.html\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/js\", method = RequestMethod.GET)\r\n    public String getExampleJS(Model model) {\r\n        model.addAttribute(\"students\", StudentUtils.buildStudents());\r\n        return \"studentCheck.js\";\r\n    }\r\n\r\n    @RequestMapping(value = \"/plain\", method = RequestMethod.GET)\r\n    public String getExamplePlain(Model model) {\r\n        model.addAttribute(\"username\", SecurityContextHolder.getContext()\r\n          .getAuthentication().getName());\r\n        model.addAttribute(\"students\", StudentUtils.buildStudents());\r\n        return \"studentsList.txt\";\r\n    }\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html  xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Inlining example</title>\r\n</head>\r\n<body>\r\n    <p>Title of tutorial: [[${title}]]</p>\r\n    <p>Description: [(${description})]</p>\r\n</body>\r\n</html>\r\n```","```\r\n<p>Title of tutorial: Baeldung</p>\r\n<p>Description: <strong>Thymeleaf</strong> tutorial</p>\r\n```","```\r\nvar count = [[${students.size()}]];\r\nalert(\"Number of students in group: \" + count); \r\n```","```\r\n<script>\r\n    $(document).ready(function() {\r\n        $.ajax({\r\n            url : \"/spring-thymeleaf/js\",\r\n            });\r\n        });\r\n</script>\r\n```","```\r\nDear [(${username})],\r\n\r\nThis is the list of our students:\r\n[# th:each=\"s : ${students}\"]\r\n   - [(${s.name})]. ID: [(${s.id})]\r\n[/]\r\nThanks,\r\nThe Baeldung University\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n    <version>2.3.3.RELEASE</version>\r\n</dependency> \r\n```"]