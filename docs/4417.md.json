["```\r\n@Test\r\npublic void accumulateAndGet_withLongBinaryOperator_thenSuccessful() {\r\n    long noOfStudents = 56;\r\n    long oldValue = courses.get(SPRING_COURSE_KEY);\r\n\r\n    long totalNotesRequired = courses.accumulateAndGet(\r\n      \"Guava\", \r\n      noOfStudents, \r\n      (x, y) -> (x * y));\r\n\r\n    assertEquals(totalNotesRequired, oldValue * noOfStudents);\r\n}\r\n```","```\r\n@Test\r\npublic void updateAndGet_withLongUnaryOperator_thenSuccessful() {\r\n    long beforeUpdate = courses.get(SPRING_COURSE_KEY);\r\n    long onUpdate = courses.updateAndGet(\r\n      \"Guava\",\r\n      (x) -> (x / 2));\r\n    long afterUpdate = courses.get(SPRING_COURSE_KEY);\r\n\r\n    assertEquals(onUpdate, afterUpdate);\r\n    assertEquals(afterUpdate, beforeUpdate / 2);\r\n}\r\n```","```\r\npublic class MonitorExample {\r\n    private List<String> students = new ArrayList<String>();\r\n    private static final int MAX_SIZE = 100;\r\n\r\n    private Monitor monitor = new Monitor();\r\n\r\n    public void addToCourse(String item) throws InterruptedException {\r\n        Monitor.Guard studentsBelowCapacity = monitor.newGuard(this::isStudentsCapacityUptoLimit);\r\n        monitor.enterWhen(studentsBelowCapacity);\r\n        try {\r\n            students.add(item);\r\n        } finally {\r\n            monitor.leave();\r\n        }\r\n    }\r\n\r\n    public Boolean isStudentsCapacityUptoLimit() {\r\n        return students.size() > MAX_SIZE;\r\n    }\r\n}\r\n```"]