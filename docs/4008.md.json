["```\r\ntry {\r\n    // ...\r\n} catch (Exception e) {\r\n    // assertions\r\n} \r\n```","```\r\nassertThatThrownBy(() -> {\r\n    List<String> list = Arrays.asList(\"String one\", \"String two\");\r\n    list.get(2);\r\n}).isInstanceOf(IndexOutOfBoundsException.class)\r\n  .hasMessageContaining(\"Index: 2, Size: 2\"); \r\n```","```\r\n.hasMessage(\"Index: %s, Size: %s\", 2, 2)\r\n.hasMessageStartingWith(\"Index: 2\")\r\n.hasMessageContaining(\"2\")\r\n.hasMessageEndingWith(\"Size: 2\")\r\n.hasMessageMatching(\"Index: \\\\d+, Size: \\\\d+\")\r\n.hasCauseInstanceOf(IOException.class)\r\n.hasStackTraceContaining(\"java.io.IOException\");\r\n```","```\r\nassertThatExceptionOfType(IndexOutOfBoundsException.class)\r\n  .isThrownBy(() -> {\r\n      // ...\r\n}).hasMessageMatching(\"Index: \\\\d+, Size: \\\\d+\"); \r\n```","```\r\nassertThatIOException().isThrownBy(() -> {\r\n    // ...\r\n}); \r\n```","```\r\n// when\r\nThrowable thrown = catchThrowable(() -> {\r\n    // ...\r\n});\r\n\r\n// then\r\nassertThat(thrown)\r\n  .isInstanceOf(ArithmeticException.class)\r\n  .hasMessageContaining(\"/ by zero\");\r\n```"]