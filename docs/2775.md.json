["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n```","```\r\n@Service\r\npublic class DomainService {\r\n\r\n    // ...\r\n    @Transactional\r\n    public void serviceDomainOperation(long entityId) {\r\n        repository.findById(entityId)\r\n            .ifPresent(entity -> {\r\n                entity.domainOperation();\r\n                repository.save(entity);\r\n                eventPublisher.publishEvent(new DomainEvent());\r\n            });\r\n    }\r\n}\r\n```","```\r\n@DisplayName(\"given existing aggregate,\"\r\n    + \" when do domain operation on service,\"\r\n    + \" then domain event is published\")\r\n@Test\r\nvoid serviceEventsTest() {\r\n    Aggregate existingDomainEntity = new Aggregate(1, eventPublisher);\r\n    repository.save(existingDomainEntity);\r\n\r\n    // when\r\n    domainService.serviceDomainOperation(existingDomainEntity.getId());\r\n\r\n    // then\r\n    verify(eventHandler, times(1)).handleEvent(any(DomainEvent.class));\r\n}\r\n```","```\r\n@Entity\r\nclass Aggregate {\r\n    // ...\r\n    void domainOperation() {\r\n        // some business logic\r\n        if (eventPublisher != null) {\r\n            eventPublisher.publishEvent(new DomainEvent());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@DisplayName(\"given existing aggregate,\"\r\n    + \" when do domain operation directly on aggregate,\"\r\n    + \" then domain event is NOT published\")\r\n@Test\r\nvoid aggregateEventsTest() {\r\n    Aggregate existingDomainEntity = new Aggregate(0, eventPublisher);\r\n    repository.save(existingDomainEntity);\r\n\r\n    // when\r\n    repository.findById(existingDomainEntity.getId())\r\n      .get()\r\n      .domainOperation();\r\n\r\n    // then\r\n    verifyNoInteractions(eventHandler);\r\n}\r\n```","```\r\n@Entity\r\npublic class Aggregate2 {\r\n\r\n    @Transient\r\n    private final Collection<DomainEvent> domainEvents;\r\n    // ...\r\n    public void domainOperation() {\r\n        // some domain operation\r\n        domainEvents.add(new DomainEvent());\r\n    }\r\n\r\n    @DomainEvents\r\n    public Collection<DomainEvent> events() {\r\n        return domainEvents;\r\n    }\r\n}\r\n```","```\r\n@DisplayName(\"given aggregate with @DomainEvents,\"\r\n    + \" when do domain operation and save,\"\r\n    + \" then event is published\")\r\n@Test\r\nvoid domainEvents() {\r\n\r\n    // given\r\n    Aggregate2 aggregate = new Aggregate2();\r\n\r\n    // when\r\n    aggregate.domainOperation();\r\n    repository.save(aggregate);\r\n\r\n    // then\r\n    verify(eventHandler, times(1)).handleEvent(any(DomainEvent.class));\r\n}\r\n```","```\r\n@AfterDomainEventPublication\r\npublic void clearEvents() {\r\n    domainEvents.clear();\r\n}\r\n```","```\r\n@DisplayName(\"given aggregate with @AfterDomainEventPublication,\"\r\n    + \" when do domain operation and save twice,\"\r\n    + \" then an event is published only for the first time\")\r\n@Test\r\nvoid afterDomainEvents() {\r\n\r\n    // given\r\n    Aggregate2 aggregate = new Aggregate2();\r\n\r\n    // when\r\n    aggregate.domainOperation();\r\n    repository.save(aggregate);\r\n    repository.save(aggregate);\r\n\r\n    // then\r\n    verify(eventHandler, times(1)).handleEvent(any(DomainEvent.class));\r\n}\r\n```","```\r\n@Entity\r\npublic class Aggregate3 extends AbstractAggregateRoot<Aggregate3> {\r\n    // ...\r\n    public void domainOperation() {\r\n        // some domain operation\r\n        registerEvent(new DomainEvent());\r\n    }\r\n}\r\n```","```\r\n@DisplayName(\"given aggregate extending AbstractAggregateRoot,\"\r\n    + \" when do domain operation and save twice,\"\r\n    + \" then an event is published only for the first time\")\r\n@Test\r\nvoid afterDomainEvents() {\r\n\r\n    // given\r\n    Aggregate3 aggregate = new Aggregate3();\r\n\r\n    // when\r\n    aggregate.domainOperation();\r\n    repository.save(aggregate);\r\n    repository.save(aggregate);\r\n\r\n    // then\r\n    verify(eventHandler, times(1)).handleEvent(any(DomainEvent.class));\r\n}\r\n\r\n@DisplayName(\"given aggregate extending AbstractAggregateRoot,\"\r\n    + \" when do domain operation and save,\"\r\n    + \" then an event is published\")\r\n@Test\r\nvoid domainEvents() {\r\n    // given\r\n    Aggregate3 aggregate = new Aggregate3();\r\n\r\n    // when\r\n    aggregate.domainOperation();\r\n    repository.save(aggregate);\r\n\r\n    // then\r\n    verify(eventHandler, times(1)).handleEvent(any(DomainEvent.class));\r\n}\r\n```"]