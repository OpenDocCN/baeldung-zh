["```\r\n<dependency>\r\n    <groupId>com.hubspot.slack</groupId>\r\n    <artifactId>slack-base</artifactId>\r\n    <version>${slack.version}</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.hubspot.slack</groupId>\r\n    <artifactId>slack-java-client</artifactId>\r\n    <version>${slack.version}</version>\r\n</dependency>\r\n```","```\r\npublic interface ErrorChecker {\r\n    void check();\r\n}\r\n```","```\r\npublic interface ErrorReporter {\r\n    void reportProblem(String problem);\r\n}\r\n```","```\r\npublic class DiskSpaceErrorChecker implements ErrorChecker {\r\n    private static final Logger LOG = LoggerFactory.getLogger(DiskSpaceErrorChecker.class);\r\n\r\n    private ErrorReporter errorReporter;\r\n\r\n    private double limit;\r\n\r\n    public DiskSpaceErrorChecker(ErrorReporter errorReporter, double limit) {\r\n        this.errorReporter = errorReporter;\r\n        this.limit = limit;\r\n    }\r\n\r\n    @Override\r\n    public void check() {\r\n        FileSystems.getDefault().getFileStores().forEach(fileStore -> {\r\n            try {\r\n                long totalSpace = fileStore.getTotalSpace();\r\n                long usableSpace = fileStore.getUsableSpace();\r\n                double usablePercentage = ((double) usableSpace) / totalSpace;\r\n\r\n                if (totalSpace > 0 && usablePercentage < limit) {\r\n                    String error = String.format(\"File store %s only has %d%% usable disk space\",\r\n                        fileStore.name(), (int)(usablePercentage * 100));\r\n                    errorReporter.reportProblem(error);\r\n                }\r\n            } catch (IOException e) {\r\n                LOG.error(\"Error getting disk space for file store {}\", fileStore, e);\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\npublic class SlackChannelErrorReporter implements ErrorReporter {\r\n    private SlackClient slackClient;\r\n\r\n    private String channel;\r\n\r\n    public SlackChannelErrorReporter(SlackClient slackClient, String channel) {\r\n        this.slackClient = slackClient;\r\n        this.channel = channel;\r\n    }\r\n\r\n    @Override\r\n    public void reportProblem(String problem) {\r\n        slackClient.postMessage(\r\n          ChatPostMessageParams.builder()\r\n            .setText(problem)\r\n            .setChannelId(channel)\r\n            .build()\r\n        ).join().unwrapOrElseThrow();\r\n    }\r\n}\r\n```","```\r\npublic class MainClass {\r\n    public static final long MINUTES = 1000 * 60;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        SlackClientRuntimeConfig runtimeConfig = SlackClientRuntimeConfig.builder()\r\n          .setTokenSupplier(() -> \"<Your API Token>\")\r\n          .build();\r\n\r\n        SlackClient slackClient = SlackClientFactory.defaultFactory().build(runtimeConfig);\r\n\r\n        ErrorReporter slackChannelErrorReporter = new SlackChannelErrorReporter(slackClient, \"general\");\r\n\r\n        ErrorChecker diskSpaceErrorChecker10pct = \r\n          new DiskSpaceErrorChecker(slackChannelErrorReporter, 0.1);\r\n\r\n        Timer timer = new Timer();\r\n        timer.scheduleAtFixedRate(new TimerTask() {\r\n            @Override\r\n            public void run() {\r\n                diskSpaceErrorChecker10pct.check();\r\n            }\r\n        }, 0, 5 * MINUTES);\r\n    }\r\n}\r\n```","```\r\npublic class SlackUserErrorReporter implements ErrorReporter {\r\n    private SlackClient slackClient;\r\n\r\n    private String user;\r\n\r\n    public SlackUserErrorReporter(SlackClient slackClient, String user) {\r\n        this.slackClient = slackClient;\r\n        this.user = user;\r\n    }\r\n\r\n    @Override\r\n    public void reportProblem(String problem) {\r\n        UsersInfoResponse usersInfoResponse = slackClient\r\n            .lookupUserByEmail(UserEmailParams.builder()\r\n              .setEmail(user)\r\n              .build()\r\n            ).join().unwrapOrElseThrow();\r\n\r\n        ImOpenResponse imOpenResponse = slackClient.openIm(ImOpenParams.builder()\r\n            .setUserId(usersInfoResponse.getUser().getId())\r\n            .build()\r\n        ).join().unwrapOrElseThrow();\r\n\r\n        imOpenResponse.getChannel().ifPresent(channel -> {\r\n            slackClient.postMessage(\r\n                ChatPostMessageParams.builder()\r\n                  .setText(problem)\r\n                  .setChannelId(channel.getId())\r\n                  .build()\r\n            ).join().unwrapOrElseThrow();\r\n        });\r\n    }\r\n}\r\n```","```\r\nErrorReporter slackUserErrorReporter = new SlackUserErrorReporter(slackClient, \"[[emailÂ protected]](/web/20221205180928/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n\r\nErrorChecker diskSpaceErrorChecker2pct = new DiskSpaceErrorChecker(slackUserErrorReporter, 0.02);\r\n\r\ntimer.scheduleAtFixedRate(new TimerTask() {\r\n    @Override\r\n    public void run() {\r\n        diskSpaceErrorChecker2pct.check();\r\n    }\r\n}, 0, 5 * MINUTES);\r\n```"]