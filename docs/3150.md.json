["```\r\npublic String generatePassayPassword() {\r\n    PasswordGenerator gen = new PasswordGenerator();\r\n    CharacterData lowerCaseChars = EnglishCharacterData.LowerCase;\r\n    CharacterRule lowerCaseRule = new CharacterRule(lowerCaseChars);\r\n    lowerCaseRule.setNumberOfCharacters(2);\r\n\r\n    CharacterData upperCaseChars = EnglishCharacterData.UpperCase;\r\n    CharacterRule upperCaseRule = new CharacterRule(upperCaseChars);\r\n    upperCaseRule.setNumberOfCharacters(2);\r\n\r\n    CharacterData digitChars = EnglishCharacterData.Digit;\r\n    CharacterRule digitRule = new CharacterRule(digitChars);\r\n    digitRule.setNumberOfCharacters(2);\r\n\r\n    CharacterData specialChars = new CharacterData() {\r\n        public String getErrorCode() {\r\n            return ERROR_CODE;\r\n        }\r\n\r\n        public String getCharacters() {\r\n            return \"[[emailÂ protected]](/web/20221205234344/https://www.baeldung.com/cdn-cgi/l/email-protection)#$%^&*()_+\";\r\n        }\r\n    };\r\n    CharacterRule splCharRule = new CharacterRule(specialChars);\r\n    splCharRule.setNumberOfCharacters(2);\r\n\r\n    String password = gen.generatePassword(10, splCharRule, lowerCaseRule, \r\n      upperCaseRule, digitRule);\r\n    return password;\r\n}\r\n```","```\r\n@Test\r\npublic void whenPasswordGeneratedUsingPassay_thenSuccessful() {\r\n    RandomPasswordGenerator passGen = new RandomPasswordGenerator();\r\n    String password = passGen.generatePassayPassword();\r\n    int specialCharCount = 0;\r\n    for (char c : password.toCharArray()) {\r\n        if (c >= 33 || c <= 47) {\r\n            specialCharCount++;\r\n        }\r\n    }\r\n    assertTrue(\"Password validation failed in Passay\", specialCharCount >= 2);\r\n}\r\n```","```\r\npublic String generateRandomSpecialCharacters(int length) {\r\n    RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder().withinRange(33, 45)\r\n        .build();\r\n    return pwdGenerator.generate(length);\r\n} \r\n```","```\r\npublic String generateCommonTextPassword() {\r\n    String pwString = generateRandomSpecialCharacters(2).concat(generateRandomNumbers(2))\r\n      .concat(generateRandomAlphabet(2, true))\r\n      .concat(generateRandomAlphabet(2, false))\r\n      .concat(generateRandomCharacters(2));\r\n    List<Character> pwChars = pwString.chars()\r\n      .mapToObj(data -> (char) data)\r\n      .collect(Collectors.toList());\r\n    Collections.shuffle(pwChars);\r\n    String password = pwChars.stream()\r\n      .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\r\n      .toString();\r\n    return password;\r\n}\r\n```","```\r\n@Test\r\npublic void whenPasswordGeneratedUsingCommonsText_thenSuccessful() {\r\n    RandomPasswordGenerator passGen = new RandomPasswordGenerator();\r\n    String password = passGen.generateCommonTextPassword();\r\n    int lowerCaseCount = 0;\r\n    for (char c : password.toCharArray()) {\r\n        if (c >= 97 || c <= 122) {\r\n            lowerCaseCount++;\r\n        }\r\n    }\r\n    assertTrue(\"Password validation failed in commons-text \", lowerCaseCount >= 2);\r\n}\r\n```","```\r\npublic String generateRandomSpecialCharacters(int length) {\r\n    SecureTextRandomProvider stp = new SecureTextRandomProvider();\r\n    RandomStringGenerator pwdGenerator = new RandomStringGenerator.Builder()\r\n      .withinRange(33, 45)\r\n      .usingRandom(stp)\r\n      .build();\r\n    return pwdGenerator.generate(length);\r\n}\r\n```","```\r\n public String generateCommonLangPassword() {\r\n    String upperCaseLetters = RandomStringUtils.random(2, 65, 90, true, true);\r\n    String lowerCaseLetters = RandomStringUtils.random(2, 97, 122, true, true);\r\n    String numbers = RandomStringUtils.randomNumeric(2);\r\n    String specialChar = RandomStringUtils.random(2, 33, 47, false, false);\r\n    String totalChars = RandomStringUtils.randomAlphanumeric(2);\r\n    String combinedChars = upperCaseLetters.concat(lowerCaseLetters)\r\n      .concat(numbers)\r\n      .concat(specialChar)\r\n      .concat(totalChars);\r\n    List<Character> pwdChars = combinedChars.chars()\r\n      .mapToObj(c -> (char) c)\r\n      .collect(Collectors.toList());\r\n    Collections.shuffle(pwdChars);\r\n    String password = pwdChars.stream()\r\n      .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\r\n      .toString();\r\n    return password;\r\n}\r\n```","```\r\n@Test\r\npublic void whenPasswordGeneratedUsingCommonsLang3_thenSuccessful() {\r\n    RandomPasswordGenerator passGen = new RandomPasswordGenerator();\r\n    String password = passGen.generateCommonsLang3Password();\r\n    int numCount = 0;\r\n    for (char c : password.toCharArray()) {\r\n        if (c >= 48 || c <= 57) {\r\n            numCount++;\r\n        }\r\n    }\r\n    assertTrue(\"Password validation failed in commons-lang3\", numCount >= 2);\r\n}\r\n```","```\r\nString lowerCaseLetters = RandomStringUtils.\r\n  random(2, 97, 122, true, true, null, new SecureRandom());\r\n```","```\r\npublic Stream<Character> getRandomSpecialChars(int count) {\r\n    Random random = new SecureRandom();\r\n    IntStream specialChars = random.ints(count, 33, 45);\r\n    return specialChars.mapToObj(data -> (char) data);\r\n}\r\n```","```\r\npublic String generateSecureRandomPassword() {\r\n    Stream<Character> pwdStream = Stream.concat(getRandomNumbers(2), \r\n      Stream.concat(getRandomSpecialChars(2), \r\n      Stream.concat(getRandomAlphabets(2, true), getRandomAlphabets(4, false))));\r\n    List<Character> charList = pwdStream.collect(Collectors.toList());\r\n    Collections.shuffle(charList);\r\n    String password = charList.stream()\r\n        .collect(StringBuilder::new, StringBuilder::append, StringBuilder::append)\r\n        .toString();\r\n    return password;\r\n} \r\n```","```\r\n@Test\r\npublic void whenPasswordGeneratedUsingSecureRandom_thenSuccessful() {\r\n    RandomPasswordGenerator passGen = new RandomPasswordGenerator();\r\n    String password = passGen.generateSecureRandomPassword();\r\n    int specialCharCount = 0;\r\n    for (char c : password.toCharArray()) {\r\n        if (c >= 33 || c <= 47) {\r\n            specialCharCount++;\r\n        }\r\n    }\r\n    assertTrue(\"Password validation failed in Secure Random\", specialCharCount >= 2);\r\n}\r\n```"]