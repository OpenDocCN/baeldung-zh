["```\r\n<dependencyManagement>\r\n    <dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.data</groupId>\r\n        <artifactId>spring-data-releasetrain</artifactId>\r\n        <version>Lovelace-SR16</version>\r\n        <type>pom</type>\r\n        <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>com.amazonaws</groupId>\r\n        <artifactId>aws-java-sdk-dynamodb</artifactId>\r\n        <version>1.11.64</version>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>com.github.derjust</groupId>\r\n        <artifactId>spring-data-dynamodb</artifactId>\r\n        <version>5.1.0</version>\r\n    </dependency>\r\n</dependencies> \r\n```","```\r\namazon.dynamodb.endpoint=http://localhost:8000/\r\namazon.aws.accesskey=key\r\namazon.aws.secretkey=key2 \r\n```","```\r\n@Configuration\r\n@EnableDynamoDBRepositories\r\n  (basePackages = \"com.baeldung.spring.data.dynamodb.repositories\")\r\npublic class DynamoDBConfig {\r\n\r\n    @Value(\"${amazon.dynamodb.endpoint}\")\r\n    private String amazonDynamoDBEndpoint;\r\n\r\n    @Value(\"${amazon.aws.accesskey}\")\r\n    private String amazonAWSAccessKey;\r\n\r\n    @Value(\"${amazon.aws.secretkey}\")\r\n    private String amazonAWSSecretKey;\r\n\r\n    @Bean\r\n    public AmazonDynamoDB amazonDynamoDB() {\r\n        AmazonDynamoDB amazonDynamoDB \r\n          = new AmazonDynamoDBClient(amazonAWSCredentials());\r\n\r\n        if (!StringUtils.isEmpty(amazonDynamoDBEndpoint)) {\r\n            amazonDynamoDB.setEndpoint(amazonDynamoDBEndpoint);\r\n        }\r\n\r\n        return amazonDynamoDB;\r\n    }\r\n\r\n    @Bean\r\n    public AWSCredentials amazonAWSCredentials() {\r\n        return new BasicAWSCredentials(\r\n          amazonAWSAccessKey, amazonAWSSecretKey);\r\n    }\r\n}\r\n```","```\r\n@DynamoDBTable(tableName = \"ProductInfo\")\r\npublic class ProductInfo {\r\n    private String id;\r\n    private String msrp;\r\n    private String cost;\r\n\r\n    @DynamoDBHashKey\r\n    @DynamoDBAutoGeneratedKey\r\n    public String getId() {\r\n        return id;\r\n    }\r\n\r\n    @DynamoDBAttribute\r\n    public String getMsrp() {\r\n        return msrp;\r\n    }\r\n\r\n    @DynamoDBAttribute\r\n    public String getCost() {\r\n        return cost;\r\n    }\r\n\r\n    // standard setters/constructors\r\n} \r\n```","```\r\n@EnableScan\r\npublic interface ProductInfoRepository extends \r\n  CrudRepository<ProductInfo, String> {\r\n\r\n    Optional<ProductInfo> findById(String id);\r\n} \r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringBootTest(classes = Application.class)\r\n@WebAppConfiguration\r\n@ActiveProfiles(\"local\")\r\n@TestPropertySource(properties = { \r\n  \"amazon.dynamodb.endpoint=http://localhost:8000/\", \r\n  \"amazon.aws.accesskey=test1\", \r\n  \"amazon.aws.secretkey=test231\" })\r\npublic class ProductInfoRepositoryIntegrationTest {\r\n\r\n    private DynamoDBMapper dynamoDBMapper;\r\n\r\n    @Autowired\r\n    private AmazonDynamoDB amazonDynamoDB;\r\n\r\n    @Autowired\r\n    ProductInfoRepository repository;\r\n\r\n    private static final String EXPECTED_COST = \"20\";\r\n    private static final String EXPECTED_PRICE = \"50\";\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        dynamoDBMapper = new DynamoDBMapper(amazonDynamoDB);\r\n\r\n        CreateTableRequest tableRequest = dynamoDBMapper\r\n          .generateCreateTableRequest(ProductInfo.class);\r\n        tableRequest.setProvisionedThroughput(\r\n          new ProvisionedThroughput(1L, 1L));\r\n        amazonDynamoDB.createTable(tableRequest);\r\n\r\n        //...\r\n\r\n        dynamoDBMapper.batchDelete(\r\n          (List<ProductInfo>)repository.findAll());\r\n    }\r\n\r\n    @Test\r\n    public void givenItemWithExpectedCost_whenRunFindAll_thenItemIsFound() { \r\n        ProductInfo productInfo = new ProductInfo(EXPECTED_COST, EXPECTED_PRICE);\r\n        repository.save(productInfo); \r\n        List<ProductInfo> result = (List<ProductInfo>) repository.findAll();\r\n\r\n        assertThat(result.size(), is(greaterThan(0)));\r\n        assertThat(result.get(0).getCost(), is(equalTo(EXPECTED_COST))); \r\n    }\r\n} \r\n```"]