["```\r\n<dependency>\r\n    <groupId>org.ow2.asm</groupId>\r\n    <artifactId>asm</artifactId>\r\n    <version>6.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.ow2.asm</groupId>\r\n    <artifactId>asm-util</artifactId>\r\n    <version>6.0</version>\r\n</dependency> \r\n```","```\r\nvisit\r\nvisitSource?\r\nvisitOuterClass?\r\n( visitAnnotation | visitAttribute )*\r\n( visitInnerClass | visitField | visitMethod )*\r\nvisitEnd\r\n```","```\r\npublic class CustomClassWriter {\r\n\r\n    static String className = \"java.lang.Integer\"; \r\n    static String cloneableInterface = \"java/lang/Cloneable\";\r\n    ClassReader reader;\r\n    ClassWriter writer;\r\n\r\n    public CustomClassWriter() {\r\n        reader = new ClassReader(className);\r\n        writer = new ClassWriter(reader, 0);\r\n    }\r\n}\r\n```","```\r\npublic class AddFieldAdapter extends ClassVisitor {\r\n    private String fieldName;\r\n    private String fieldDefault;\r\n    private int access = org.objectweb.asm.Opcodes.ACC_PUBLIC;\r\n    private boolean isFieldPresent;\r\n\r\n    public AddFieldAdapter(\r\n      String fieldName, int fieldAccess, ClassVisitor cv) {\r\n        super(ASM4, cv);\r\n        this.cv = cv;\r\n        this.fieldName = fieldName;\r\n        this.access = fieldAccess;\r\n    }\r\n} \r\n```","```\r\n@Override\r\npublic FieldVisitor visitField(\r\n  int access, String name, String desc, String signature, Object value) {\r\n    if (name.equals(fieldName)) {\r\n        isFieldPresent = true;\r\n    }\r\n    return cv.visitField(access, name, desc, signature, value); \r\n} \r\n```","```\r\n@Override\r\npublic void visitEnd() {\r\n    if (!isFieldPresent) {\r\n        FieldVisitor fv = cv.visitField(\r\n          access, fieldName, fieldType, null, null);\r\n        if (fv != null) {\r\n            fv.visitEnd();\r\n        }\r\n    }\r\n    cv.visitEnd();\r\n} \r\n```","```\r\npublic class CustomClassWriter {\r\n    AddFieldAdapter addFieldAdapter;\r\n    //...\r\n    public byte[] addField() {\r\n        addFieldAdapter = new AddFieldAdapter(\r\n          \"aNewBooleanField\",\r\n          org.objectweb.asm.Opcodes.ACC_PUBLIC,\r\n          writer);\r\n        reader.accept(addFieldAdapter, 0);\r\n        return writer.toByteArray();\r\n    }\r\n}\r\n```","```\r\npublic class PublicizeMethodAdapter extends ClassVisitor {\r\n    public PublicizeMethodAdapter(int api, ClassVisitor cv) {\r\n        super(ASM4, cv);\r\n        this.cv = cv;\r\n    }\r\n    public MethodVisitor visitMethod(\r\n      int access,\r\n      String name,\r\n      String desc,\r\n      String signature,\r\n      String[] exceptions) {\r\n        if (name.equals(\"toUnsignedString0\")) {\r\n            return cv.visitMethod(\r\n              ACC_PUBLIC + ACC_STATIC,\r\n              name,\r\n              desc,\r\n              signature,\r\n              exceptions);\r\n        }\r\n        return cv.visitMethod(\r\n          access, name, desc, signature, exceptions);\r\n   }\r\n} \r\n```","```\r\npublic byte[] publicizeMethod() {\r\n    pubMethAdapter = new PublicizeMethodAdapter(writer);\r\n    reader.accept(pubMethAdapter, 0);\r\n    return writer.toByteArray();\r\n} \r\n```","```\r\npublic class AddInterfaceAdapter extends ClassVisitor {\r\n\r\n    public AddInterfaceAdapter(ClassVisitor cv) {\r\n        super(ASM4, cv);\r\n    }\r\n\r\n    @Override\r\n    public void visit(\r\n      int version,\r\n      int access,\r\n      String name,\r\n      String signature,\r\n      String superName, String[] interfaces) {\r\n        String[] holding = new String[interfaces.length + 1];\r\n        holding[holding.length - 1] = cloneableInterface;\r\n        System.arraycopy(interfaces, 0, holding, 0, interfaces.length);\r\n        cv.visit(V1_8, access, name, signature, superName, holding);\r\n    }\r\n} \r\n```","```\r\nPrintWriter pw = new PrintWriter(System.out);\r\n\r\npublic PublicizeMethodAdapter(ClassVisitor cv) {\r\n    super(ASM4, cv);\r\n    this.cv = cv;\r\n    tracer = new TraceClassVisitor(cv,pw);\r\n}\r\n\r\npublic MethodVisitor visitMethod(\r\n  int access,\r\n  String name,\r\n  String desc,\r\n  String signature,\r\n  String[] exceptions) {\r\n    if (name.equals(\"toUnsignedString0\")) {\r\n        System.out.println(\"Visiting unsigned method\");\r\n        return tracer.visitMethod(\r\n          ACC_PUBLIC + ACC_STATIC, name, desc, signature, exceptions);\r\n    }\r\n    return tracer.visitMethod(\r\n      access, name, desc, signature, exceptions);\r\n}\r\n\r\npublic void visitEnd(){\r\n    tracer.visitEnd();\r\n    System.out.println(tracer.p.getText());\r\n} \r\n```","```\r\npublic class Premain {\r\n    public static void premain(String agentArgs, Instrumentation inst) {\r\n        inst.addTransformer(new ClassFileTransformer() {\r\n            @Override\r\n            public byte[] transform(\r\n              ClassLoader l,\r\n              String name,\r\n              Class c,\r\n              ProtectionDomain d,\r\n              byte[] b)\r\n              throws IllegalClassFormatException {\r\n                if(name.equals(\"java/lang/Integer\")) {\r\n                    CustomClassWriter cr = new CustomClassWriter(b);\r\n                    return cr.addField();\r\n                }\r\n                return b;\r\n            }\r\n        });\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-jar-plugin</artifactId>\r\n    <version>2.4</version>\r\n    <configuration>\r\n        <archive>\r\n            <manifestEntries>\r\n                <Premain-Class>\r\n                    com.baeldung.examples.asm.instrumentation.Premain\r\n                </Premain-Class>\r\n                <Can-Retransform-Classes>\r\n                    true\r\n                </Can-Retransform-Classes>\r\n            </manifestEntries>\r\n        </archive>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\njava YourClass -javaagent:\"/path/to/theAgentJar.jar\"\r\n```"]