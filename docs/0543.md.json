["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-bus</artifactId>\r\n    <version>2.0.8.RELEASE</version>\r\n</dependency>\r\n```","```\r\npublic class NotificationData {\r\n\r\n    private long id;\r\n    private String name;\r\n    private String email;\r\n    private String mobile;\r\n\r\n    // getter and setter methods\r\n}\r\n```","```\r\npublic interface NotificationService {\r\n\r\n    void initiateNotification(NotificationData notificationData) \r\n      throws InterruptedException;\r\n\r\n}\r\n```","```\r\n@Service\r\npublic class NotificationServiceimpl implements NotificationService {\r\n\r\n    @Override\r\n    public void initiateNotification(NotificationData notificationData) \r\n      throws InterruptedException {\r\n\r\n      System.out.println(\"Notification service started for \"\r\n        + \"Notification ID: \" + notificationData.getId());\r\n\r\n      Thread.sleep(5000);\r\n\r\n      System.out.println(\"Notification service ended for \"\r\n        + \"Notification ID: \" + notificationData.getId());\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class NotificationConsumer implements \r\n  Consumer<Event<NotificationData>> {\r\n\r\n    @Autowired\r\n    private NotificationService notificationService;\r\n\r\n    @Override\r\n    public void accept(Event<NotificationData> notificationDataEvent) {\r\n        NotificationData notificationData = notificationDataEvent.getData();\r\n\r\n        try {\r\n            notificationService.initiateNotification(notificationData);\r\n        } catch (InterruptedException e) {\r\n            // ignore        \r\n        }\t\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class NotificationController {\r\n\r\n    @Autowired\r\n    private EventBus eventBus;\r\n\r\n    @GetMapping(\"/startNotification/{param}\")\r\n    public void startNotification(@PathVariable Integer param) {\r\n        for (int i = 0; i < param; i++) {\r\n            NotificationData data = new NotificationData();\r\n            data.setId(i);\r\n\r\n            eventBus.notify(\"notificationConsumer\", Event.wrap(data));\r\n\r\n            System.out.println(\r\n              \"Notification \" + i + \": notification task submitted successfully\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class Config {\r\n\r\n    @Bean\r\n    public Environment env() {\r\n        return Environment.initializeIfEmpty().assignErrorJournal();\r\n    }\r\n\r\n    @Bean\r\n    public EventBus createEventBus(Environment env) {\r\n        return EventBus.create(env, Environment.THREAD_POOL);\r\n    }\r\n}\r\n```","```\r\nEventBus evBus = EventBus.create(\r\n  env, \r\n  Environment.newDispatcher(\r\n    REACTOR_CAPACITY,REACTOR_CONSUMERS_COUNT,   \r\n    DispatcherType.THREAD_POOL_EXECUTOR));\r\n```","```\r\nimport static reactor.bus.selector.Selectors.$;\r\n\r\n@SpringBootApplication\r\npublic class NotificationApplication implements CommandLineRunner {\r\n\r\n    @Autowired\r\n    private EventBus eventBus;\r\n\r\n    @Autowired\r\n    private NotificationConsumer notificationConsumer;\r\n\r\n    @Override\r\n    public void run(String... args) throws Exception {\r\n        eventBus.on($(\"notificationConsumer\"), notificationConsumer);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(NotificationApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\npublic class NotificationApplicationIntegrationTest {\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @Test\r\n    public void givenAppStarted_whenNotificationTasksSubmitted_thenProcessed() {\r\n        RestTemplate restTemplate = new RestTemplate();\r\n        restTemplate.getForObject(\"http://localhost:\" + port + \"/startNotification/10\", String.class);\r\n    }\r\n}\r\n```","```\r\nNotification 0: notification task submitted successfully\r\nNotification 1: notification task submitted successfully\r\nNotification 2: notification task submitted successfully\r\nNotification 3: notification task submitted successfully\r\nNotification 4: notification task submitted successfully\r\nNotification 5: notification task submitted successfully\r\nNotification 6: notification task submitted successfully\r\nNotification 7: notification task submitted successfully\r\nNotification 8: notification task submitted successfully\r\nNotification 9: notification task submitted successfully\r\nNotification service started for Notification ID: 1\r\nNotification service started for Notification ID: 2\r\nNotification service started for Notification ID: 3\r\nNotification service started for Notification ID: 0\r\nNotification service ended for Notification ID: 1\r\nNotification service ended for Notification ID: 0\r\nNotification service started for Notification ID: 4\r\nNotification service ended for Notification ID: 3\r\nNotification service ended for Notification ID: 2\r\nNotification service started for Notification ID: 6\r\nNotification service started for Notification ID: 5\r\nNotification service started for Notification ID: 7\r\nNotification service ended for Notification ID: 4\r\nNotification service started for Notification ID: 8\r\nNotification service ended for Notification ID: 6\r\nNotification service ended for Notification ID: 5\r\nNotification service started for Notification ID: 9\r\nNotification service ended for Notification ID: 7\r\nNotification service ended for Notification ID: 8\r\nNotification service ended for Notification ID: 9\r\n```"]