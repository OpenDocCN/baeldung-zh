["```\r\nclass SampleThread extends Thread {\r\n    public int processingCount = 0;\r\n\r\n    SampleThread(int processingCount) {\r\n        this.processingCount = processingCount;\r\n        LOGGER.info(\"Thread Created\");\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        LOGGER.info(\"Thread \" + this.getName() + \" started\");\r\n        while (processingCount > 0) {\r\n            try {\r\n                Thread.sleep(1000);\r\n            } catch (InterruptedException e) {\r\n                LOGGER.info(\"Thread \" + this.getName() + \" interrupted\");\r\n            }\r\n            processingCount--;\r\n        }\r\n        LOGGER.info(\"Thread \" + this.getName() + \" exiting\");\r\n    }\r\n}\r\n\r\n@Test\r\npublic void givenStartedThread_whenJoinCalled_waitsTillCompletion() \r\n  throws InterruptedException {\r\n    Thread t2 = new SampleThread(1);\r\n    t2.start();\r\n    LOGGER.info(\"Invoking join\");\r\n    t2.join();\r\n    LOGGER.info(\"Returned from join\");\r\n    assertFalse(t2.isAlive());\r\n} \r\n```","```\r\nINFO: Thread Created\r\nINFO: Invoking join\r\nINFO: Thread Thread-1 started\r\nINFO: Thread Thread-1 exiting\r\nINFO: Returned from join\r\n```","```\r\nThread t1 = new SampleThread(0);\r\nt1.join();  //returns immediately\r\n```","```\r\n@Test\r\npublic void givenStartedThread_whenTimedJoinCalled_waitsUntilTimedout()\r\n  throws InterruptedException {\r\n    Thread t3 = new SampleThread(10);\r\n    t3.start();\r\n    t3.join(1000);\r\n    assertTrue(t3.isAlive());\r\n} \r\n```","```\r\nSampleThread t4 = new SampleThread(10);\r\nt4.start();\r\n// not guaranteed to stop even if t4 finishes.\r\ndo {\r\n\r\n} while (t4.processingCount > 0);\r\n```"]