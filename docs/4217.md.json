["```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic class AppControllerIntegrationTest {\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    private String uri;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        uri = \"http://localhost:\" + port;\r\n    }\r\n\r\n    @MockBean\r\n    AppService appService;\r\n\r\n     //test cases\r\n}\r\n```","```\r\n@Test\r\npublic void givenMovieId_whenMakingGetRequestToMovieEndpoint_thenReturnMovie() {\r\n\r\n    Movie testMovie = new Movie(1, \"movie1\", \"summary1\");\r\n    when(appService.findMovie(1)).thenReturn(testMovie);\r\n\r\n    get(uri + \"/movie/\" + testMovie.getId()).then()\r\n      .assertThat()\r\n      .statusCode(HttpStatus.OK.value())\r\n      .body(\"id\", equalTo(testMovie.getId()))\r\n      .body(\"name\", equalTo(testMovie.getName()))\r\n      .body(\"synopsis\", notNullValue());\r\n}\r\n```","```\r\nMovie result = get(uri + \"/movie/\" + testMovie.getId()).then()\r\n  .assertThat()\r\n  .statusCode(HttpStatus.OK.value())\r\n  .extract()\r\n  .as(Movie.class);\r\nassertThat(result).isEqualTo(testMovie);\r\n```","```\r\nString responseString = get(uri + \"/movie/\" + testMovie.getId()).then()\r\n  .assertThat()\r\n  .statusCode(HttpStatus.OK.value())\r\n  .extract()\r\n  .asString();\r\nassertThat(responseString).isNotEmpty();\r\n```","```\r\n@Test\r\npublic void givenMovie_whenMakingPostRequestToMovieEndpoint_thenCorrect() {\r\n    Map<String, String> request = new HashMap<>();\r\n    request.put(\"id\", \"11\");\r\n    request.put(\"name\", \"movie1\");\r\n    request.put(\"synopsis\", \"summary1\");\r\n\r\n    int movieId = given().contentType(\"application/json\")\r\n      .body(request)\r\n      .when()\r\n      .post(uri + \"/movie\")\r\n      .then()\r\n      .assertThat()\r\n      .statusCode(HttpStatus.CREATED.value())\r\n      .extract()\r\n      .path(\"id\");\r\n    assertThat(movieId).isEqualTo(11);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCallingMoviesEndpoint_thenReturnAllMovies() {\r\n\r\nSet<Movie> movieSet = new HashSet<>();\r\nmovieSet.add(new Movie(1, \"movie1\", \"summary1\"));\r\nmovieSet.add(new Movie(2, \"movie2\", \"summary2\"));\r\nwhen(appService.getAll()).thenReturn(movieSet);\r\n\r\nget(uri + \"/movies\").then()\r\n    .statusCode(HttpStatus.OK.value())\r\n    .assertThat()\r\n    .body(\"size()\", is(2));\r\n}\r\n```","```\r\nMovie[] movies = get(uri + \"/movies\").then()\r\n  .statusCode(200)\r\n  .extract()\r\n  .as(Movie[].class);\r\nassertThat(movies.length).isEqualTo(2);\r\n```","```\r\n@Test\r\npublic void whenCallingWelcomeEndpoint_thenCorrect() {\r\n    get(uri + \"/welcome\").then()\r\n        .assertThat()\r\n        .header(\"sessionId\", notNullValue())\r\n        .cookie(\"token\", notNullValue());\r\n}\r\n```","```\r\nResponse response = get(uri + \"/welcome\");\r\n\r\nString headerName = response.getHeader(\"sessionId\");\r\nString cookieValue = response.getCookie(\"token\");\r\nassertThat(headerName).isNotBlank();\r\nassertThat(cookieValue).isNotBlank();\r\n```","```\r\nFile file = new ClassPathResource(\"test.txt\").getFile();\r\nlong fileSize = file.length();\r\nwhen(appService.getFile(1)).thenReturn(file);\r\n\r\nbyte[] result = get(uri + \"/download/1\").asByteArray();\r\n\r\nassertThat(result.length).isEqualTo(fileSize);\r\n```"]