["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-stream-binder-kafka</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-stream-schema</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.confluent</groupId>\r\n    <artifactId>kafka-avro-serializer</artifactId>\r\n    <version>4.0.0</version>\r\n</dependency>\r\n```","```\r\n<repositories>\r\n    <repository>\r\n        <id>confluent</id>\r\n        <url>https://packages.confluent.io/maven/</url>\r\n    </repository>\r\n</repositories>\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.apache.avro</groupId>\r\n            <artifactId>avro-maven-plugin</artifactId>\r\n            <version>1.8.2</version>\r\n            <executions>\r\n                <execution>\r\n                    <id>schemas</id>\r\n                    <phase>generate-sources</phase>\r\n                    <goals>\r\n                        <goal>schema</goal>\r\n                        <goal>protocol</goal>\r\n                        <goal>idl-protocol</goal>\r\n                    </goals>\r\n                    <configuration>                        \r\n                        <sourceDirectory>${project.basedir}/src/main/resources/</sourceDirectory>\r\n                        <outputDirectory>${project.basedir}/src/main/java/</outputDirectory>\r\n                    </configuration>\r\n                </execution>\r\n            </executions>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\n{\r\n    \"type\": \"record\",\r\n    \"name\": \"Employee\",\r\n    \"namespace\": \"com.baeldung.schema\",\r\n    \"fields\": [\r\n    {\r\n        \"name\": \"id\",\r\n        \"type\": \"int\"\r\n    },\r\n    {\r\n        \"name\": \"firstName\",\r\n        \"type\": \"string\"\r\n    },\r\n    {\r\n        \"name\": \"lastName\",\r\n        \"type\": \"string\"\r\n    }]\r\n}\r\n```","```\r\n@Autowired\r\nprivate Processor processor;\r\n\r\npublic void produceEmployeeDetails(int empId, String firstName, String lastName) {\r\n\r\n    // creating employee details\r\n    Employee employee = new Employee();\r\n    employee.setId(empId);\r\n    employee.setFirstName(firstName);\r\n    employee.setLastName(lastName);\r\n\r\n    Message<Employee> message = MessageBuilder.withPayload(employee)\r\n                .build();\r\n\r\n    processor.output()\r\n        .send(message);\r\n}\r\n```","```\r\n@StreamListener(Processor.INPUT)\r\npublic void consumeEmployeeDetails(Employee employeeDetails) {\r\n    logger.info(\"Let's process employee details: {}\", employeeDetails);\r\n}\r\n```","```\r\nspring:\r\n  cloud:\r\n    stream: \r\n      bindings:\r\n        input:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n        output:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n```","```\r\n@Autowired\r\nprivate AvroProducer avroProducer;\r\n\r\n@PostMapping(\"/employees/{id}/{firstName}/{lastName}\")\r\npublic String producerAvroMessage(@PathVariable int id, @PathVariable String firstName, \r\n  @PathVariable String lastName) {\r\n    avroProducer.produceEmployeeDetails(id, firstName, lastName);\r\n    return \"Sent employee details to consumer\";\r\n}\r\n```","```\r\n@SpringBootApplication\r\n@EnableBinding(Processor.class)\r\n// The @EnableSchemaRegistryClient annotationÂ needs to be uncommented to use the Spring native method.\r\n// @EnableSchemaRegistryClient\r\npublic class AvroKafkaApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AvroKafkaApplication.class, args);\r\n    }\r\n\r\n}\r\n```","```\r\n@Value(\"${spring.cloud.stream.kafka.binder.producer-properties.schema.registry.url}\")\r\nprivate String endPoint;\r\n\r\n@Bean\r\npublic SchemaRegistryClient schemaRegistryClient() {\r\n    ConfluentSchemaRegistryClient client = new ConfluentSchemaRegistryClient();\r\n    client.setEndpoint(endPoint);\r\n    return client;\r\n}\r\n```","```\r\ncurl -X POST localhost:8080/employees/1001/Harry/Potter\r\n```","```\r\n2019-06-11 18:45:45.343  INFO 17036 --- [container-0-C-1] com.baeldung.consumer.AvroConsumer       : Let's process employee details: {\"id\": 1001, \"firstName\": \"Harry\", \"lastName\": \"Potter\"}\r\n```","```\r\nspring:\r\n  cloud:\r\n    stream:\r\n      default: \r\n        producer: \r\n          useNativeEncoding: true\r\n        consumer:  \r\n          useNativeEncoding: true     \r\n      bindings:\r\n        input:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n        output:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n      kafka:\r\n         binder:        \r\n           producer-properties:\r\n             key.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer\r\n             value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer\r\n             schema.registry.url: http://localhost:8081 \r\n           consumer-properties:\r\n             key.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer\r\n             value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer\r\n             schema.registry.url: http://localhost:8081\r\n             specific.avro.reader: true \r\n```","```\r\nspring:\r\n  cloud:\r\n    stream:\r\n      // ...     \r\n      bindings:\r\n        input:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n          group: group-1\r\n      // ...\r\n```","```\r\n{\r\n    \"type\": \"record\",\r\n    \"name\": \"EmployeeKey\",\r\n    \"namespace\": \"com.baeldung.schema\",\r\n    \"fields\": [\r\n     {\r\n        \"name\": \"id\",\r\n        \"type\": \"int\"\r\n    },\r\n    {\r\n        \"name\": \"departmentName\",\r\n        \"type\": \"string\"\r\n    }]\r\n}\r\n```","```\r\npublic void produceEmployeeDetails(int empId, String firstName, String lastName) {\r\n\r\n    // creating employee details\r\n    Employee employee = new Employee();\r\n    employee.setId(empId);\r\n    // ...\r\n\r\n    // creating partition key for kafka topic\r\n    EmployeeKey employeeKey = new EmployeeKey();\r\n    employeeKey.setId(empId);\r\n    employeeKey.setDepartmentName(\"IT\");\r\n\r\n    Message<Employee> message = MessageBuilder.withPayload(employee)\r\n        .setHeader(KafkaHeaders.MESSAGE_KEY, employeeKey)\r\n        .build();\r\n\r\n    processor.output()\r\n        .send(message);\r\n}\r\n```","```\r\nspring:\r\n  cloud:\r\n    stream:\r\n      // ... \r\n      bindings:\r\n        input:\r\n          destination: employee-details\r\n          content-type: application/*+avro\r\n          group: group-1\r\n          concurrency: 3\r\n```"]