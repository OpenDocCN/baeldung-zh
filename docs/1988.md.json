["```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.axonframework</groupId>\r\n            <artifactId>axon-bom</artifactId>\r\n            <version>4.5.13</version>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.axonframework</groupId>\r\n        <artifactId>axon-spring-boot-starter</artifactId>\r\n    </dependency>\r\n\r\n    <dependency>\r\n        <groupId>org.axonframework</groupId>\r\n        <artifactId>axon-test</artifactId>\r\n        <scope>test</scope>\r\n    </dependency>\r\n</dependencies>\r\n```","```\r\njava -jar axonserver.jar\r\n```","```\r\npublic class CreateOrderCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // constructor, getters, equals/hashCode and toString \r\n}\r\npublic class ConfirmOrderCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n\r\n    // constructor, getters, equals/hashCode and toString\r\n}\r\npublic class ShipOrderCommand {\r\n\r\n    @TargetAggregateIdentifier\r\n    private final String orderId;\r\n\r\n    // constructor, getters, equals/hashCode and toString\r\n}\r\n```","```\r\npublic class OrderCreatedEvent {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\npublic class OrderConfirmedEvent {\r\n\r\n    private final String orderId;\r\n\r\n    // default constructor, getters, equals/hashCode and toString\r\n}\r\npublic class OrderShippedEvent { \r\n\r\n    private final String orderId; \r\n\r\n    // default constructor, getters, equals/hashCode and toString \r\n}\r\n```","```\r\n@Aggregate\r\npublic class OrderAggregate {\r\n\r\n    @AggregateIdentifier\r\n    private String orderId;\r\n    private boolean orderConfirmed;\r\n\r\n    @CommandHandler\r\n    public OrderAggregate(CreateOrderCommand command) {\r\n        AggregateLifecycle.apply(new OrderCreatedEvent(command.getOrderId(), command.getProductId()));\r\n    }\r\n\r\n    @EventSourcingHandler\r\n    public void on(OrderCreatedEvent event) {\r\n        this.orderId = event.getOrderId();\r\n        orderConfirmed = false;\r\n    }\r\n\r\n    protected OrderAggregate() { }\r\n}\r\n```","```\r\n@CommandHandler \r\npublic void handle(ConfirmOrderCommand command) { \r\n    if (orderConfirmed) {\r\n        return;\r\n    }\r\n    apply(new OrderConfirmedEvent(orderId)); \r\n} \r\n\r\n@CommandHandler \r\npublic void handle(ShipOrderCommand command) { \r\n    if (!orderConfirmed) { \r\n        throw new UnconfirmedOrderException(); \r\n    } \r\n    apply(new OrderShippedEvent(orderId)); \r\n} \r\n\r\n@EventSourcingHandler \r\npublic void on(OrderConfirmedEvent event) { \r\n    orderConfirmed = true; \r\n}\r\n```","```\r\nprivate FixtureConfiguration<OrderAggregate> fixture;\r\n\r\n@Before\r\npublic void setUp() {\r\n    fixture = new AggregateTestFixture<>(OrderAggregate.class);\r\n}\r\n```","```\r\nString orderId = UUID.randomUUID().toString();\r\nString productId = \"Deluxe Chair\";\r\nfixture.givenNoPriorActivity()\r\n  .when(new CreateOrderCommand(orderId, productId))\r\n  .expectEvents(new OrderCreatedEvent(orderId, productId));\r\n```","```\r\nString orderId = UUID.randomUUID().toString();\r\nString productId = \"Deluxe Chair\";\r\nfixture.given(new OrderCreatedEvent(orderId, productId))\r\n  .when(new ShipOrderCommand(orderId))\r\n  .expectException(UnconfirmedOrderException.class); \r\n```","```\r\nString orderId = UUID.randomUUID().toString();\r\nString productId = \"Deluxe Chair\";\r\nfixture.given(new OrderCreatedEvent(orderId, productId), new OrderConfirmedEvent(orderId))\r\n  .when(new ShipOrderCommand(orderId))\r\n  .expectEvents(new OrderShippedEvent(orderId));\r\n```","```\r\npublic class Order {\r\n\r\n    private final String orderId;\r\n    private final String productId;\r\n    private OrderStatus orderStatus;\r\n\r\n    public Order(String orderId, String productId) {\r\n        this.orderId = orderId;\r\n        this.productId = productId;\r\n        orderStatus = OrderStatus.CREATED;\r\n    }\r\n\r\n    public void setOrderConfirmed() {\r\n        this.orderStatus = OrderStatus.CONFIRMED;\r\n    }\r\n\r\n    public void setOrderShipped() {\r\n        this.orderStatus = OrderStatus.SHIPPED;\r\n    }\r\n\r\n    // getters, equals/hashCode and toString functions\r\n}\r\npublic enum OrderStatus {\r\n    CREATED, CONFIRMED, SHIPPED\r\n}\r\n```","```\r\n@Service\r\npublic class OrdersEventHandler {\r\n\r\n    private final Map<String, Order> orders = new HashMap<>();\r\n\r\n    @EventHandler\r\n    public void on(OrderCreatedEvent event) {\r\n        String orderId = event.getOrderId();\r\n        orders.put(orderId, new Order(orderId, event.getProductId()));\r\n    }\r\n\r\n    // Event Handlers for OrderConfirmedEvent and OrderShippedEvent...\r\n}\r\n```","```\r\npublic class FindAllOrderedProductsQuery { }\r\n```","```\r\n@QueryHandler\r\npublic List<Order> handle(FindAllOrderedProductsQuery query) {\r\n    return new ArrayList<>(orders.values());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\npublic class OrderRestEndpoint {\r\n\r\n    private final CommandGateway commandGateway;\r\n    private final QueryGateway queryGateway;\r\n\r\n    // Autowiring constructor and POST/GET endpoints\r\n}\r\n```","```\r\n@PostMapping(\"/ship-order\")\r\npublic CompletableFuture<Void> shipOrder() {\r\n    String orderId = UUID.randomUUID().toString();\r\n    return commandGateway.send(new CreateOrderCommand(orderId, \"Deluxe Chair\"))\r\n                         .thenCompose(result -> commandGateway.send(new ConfirmOrderCommand(orderId)))\r\n                         .thenCompose(result -> commandGateway.send(new ShipOrderCommand(orderId)));\r\n}\r\n```","```\r\n@GetMapping(\"/all-orders\")\r\npublic CompletableFuture<List<Order>> findAllOrders() {\r\n    return queryGateway.query(new FindAllOrderedProductsQuery(), ResponseTypes.multipleInstancesOf(Order.class));\r\n}\r\n```"]