["```\r\nAbstractMap.SimpleEntry<String, String> firstEntry = new AbstractMap.SimpleEntry<>(\"key1\", \"value1\");\r\nAbstractMap.SimpleEntry<String, String> secondEntry = new AbstractMap.SimpleEntry<>(\"key2\", \"value2\");\r\nAbstractMap.SimpleEntry<String, String> thirdEntry = new AbstractMap.SimpleEntry<>(firstEntry);\r\nthirdEntry.setValue(\"a different value\");\r\n\r\nassertThat(Stream.of(firstEntry, secondEntry, thirdEntry))\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\r\n    tuple(\"key1\", \"value1\"),\r\n    tuple(\"key2\", \"value2\"),\r\n    tuple(\"key1\", \"a different value\"));\r\n```","```\r\nAbstractMap.SimpleImmutableEntry<String, String> firstEntry = new AbstractMap.SimpleImmutableEntry<>(\"key1\", \"value1\");\r\nAbstractMap.SimpleImmutableEntry<String, String> secondEntry = new AbstractMap.SimpleImmutableEntry<>(\"key2\", \"value2\");\r\nAbstractMap.SimpleImmutableEntry<String, String> thirdEntry = new AbstractMap.SimpleImmutableEntry<>(firstEntry);\r\n\r\nassertThat(Stream.of(firstEntry, secondEntry, thirdEntry))\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\r\n    tuple(\"key1\", \"value1\"),\r\n    tuple(\"key2\", \"value2\"),\r\n    tuple(\"key1\", \"value1\"));\r\n```","```\r\nMap.Entry<String, String> entry = Map.entry(\"key\", \"value\");\r\n\r\nassertThat(entry.getKey()).isEqualTo(\"key\");\r\nassertThat(entry.getValue()).isEqualTo(\"value\");\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n</dependency>\r\n```","```\r\nMap.Entry<String, String> firstEntry = new DefaultMapEntry<>(\"key1\", \"value1\");\r\nKeyValue<String, String> secondEntry = new DefaultMapEntry<>(\"key2\", \"value2\");\r\n\r\nKeyValue<String, String> thirdEntry = new DefaultMapEntry<>(firstEntry);\r\nKeyValue<String, String> fourthEntry = new DefaultMapEntry<>(secondEntry);\r\n\r\nfirstEntry.setValue(\"a different value\");\r\n\r\nassertThat(firstEntry)\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\"key1\", \"a different value\");\r\n\r\nassertThat(Stream.of(secondEntry, thirdEntry, fourthEntry))\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\r\n    tuple(\"key2\", \"value2\"),\r\n    tuple(\"key1\", \"value1\"),\r\n    tuple(\"key2\", \"value2\"));\r\n```","```\r\nMap.Entry<String, String> firstEntry = new UnmodifiableMapEntry<>(\"key1\", \"value1\");\r\nKeyValue<String, String> secondEntry = new UnmodifiableMapEntry<>(\"key2\", \"value2\");\r\n\r\nKeyValue<String, String> thirdEntry = new UnmodifiableMapEntry<>(firstEntry);\r\nKeyValue<String, String> fourthEntry = new UnmodifiableMapEntry<>(secondEntry);\r\n\r\nassertThat(firstEntry)\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\"key1\", \"value1\");\r\n\r\nassertThat(Stream.of(secondEntry, thirdEntry, fourthEntry))\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\r\n    tuple(\"key2\", \"value2\"),\r\n    tuple(\"key1\", \"value1\"),\r\n    tuple(\"key2\", \"value2\"));\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n </dependency>\r\n```","```\r\nMap.Entry<String, String> firstEntry = Maps.immutableEntry(\"key1\", \"value1\");\r\nMap.Entry<String, String> secondEntry = Maps.immutableEntry(\"key2\", \"value2\");\r\n\r\nassertThat(Stream.of(firstEntry, secondEntry))\r\n  .extracting(\"key\", \"value\")\r\n  .containsExactly(\r\n    tuple(\"key1\", \"value1\"),\r\n    tuple(\"key2\", \"value2\"));\r\n```","```\r\npublic class SimpleCustomKeyValue<K, V> implements Map.Entry<K, V> {\r\n\r\n    private final K key;\r\n    private V value;\r\n\r\n    public SimpleCustomKeyValue(K key, V value) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n    // standard getters and setters\r\n    // standard equals and hashcode\r\n    // standard toString\r\n}\r\n```","```\r\nMap.Entry<String, String> firstEntry = new SimpleCustomKeyValue<>(\"key1\", \"value1\");\r\n\r\nMap.Entry<String, String> secondEntry = new SimpleCustomKeyValue<>(\"key2\", \"value2\");\r\nsecondEntry.setValue(\"different value\");\r\n\r\nMap<String, String> map = Map.ofEntries(firstEntry, secondEntry);\r\n\r\nassertThat(map)\r\n  .isEqualTo(ImmutableMap.<String, String>builder()\r\n    .put(\"key1\", \"value1\")\r\n    .put(\"key2\", \"different value\")\r\n    .build());\r\n```"]