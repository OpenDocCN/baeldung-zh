["```\r\n<dependency>\r\n    <groupId>net.agkn</groupId>\r\n    <artifactId>hll</artifactId>\r\n    <version>1.6.0</version>\r\n</dependency>\r\n```","```\r\nHashFunction hashFunction = Hashing.murmur3_128();\r\nlong numberOfElements = 100_000_000;\r\nlong toleratedDifference = 1_000_000;\r\nHLL hll = new HLL(14, 5);\r\n```","```\r\nLongStream.range(0, numberOfElements).forEach(element -> {\r\n    long hashedValue = hashFunction.newHasher().putLong(element).hash().asLong();\r\n    hll.addRaw(hashedValue);\r\n  }\r\n);\r\n```","```\r\nlong cardinality = hll.cardinality();\r\nassertThat(cardinality)\r\n  .isCloseTo(numberOfElements, Offset.offset(toleratedDifference));\r\n```","```\r\nHashFunction hashFunction = Hashing.murmur3_128();\r\nlong numberOfElements = 100_000_000;\r\nlong toleratedDifference = 1_000_000;\r\nHLL firstHll = new HLL(15, 5);\r\nHLL secondHLL = new HLL(15, 5);\r\n\r\nLongStream.range(0, numberOfElements).forEach(element -> {\r\n    long hashedValue = hashFunction.newHasher()\r\n      .putLong(element)\r\n      .hash()\r\n      .asLong();\r\n    firstHll.addRaw(hashedValue);\r\n    }\r\n);\r\n\r\nLongStream.range(numberOfElements, numberOfElements * 2).forEach(element -> {\r\n    long hashedValue = hashFunction.newHasher()\r\n      .putLong(element)\r\n      .hash()\r\n      .asLong();\r\n    secondHLL.addRaw(hashedValue);\r\n    }\r\n);\r\n```","```\r\nfirstHll.union(secondHLL);\r\nlong cardinality = firstHll.cardinality();\r\nassertThat(cardinality)\r\n  .isCloseTo(numberOfElements * 2, Offset.offset(toleratedDifference * 2)); \r\n```"]