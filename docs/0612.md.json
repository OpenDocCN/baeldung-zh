["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.2.2.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n    <version>2.2.2.RELEASE</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.197</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.datatype</groupId>\r\n    <artifactId>jackson-datatype-jsr310</artifactId>\r\n    <version>2.9.6</version>\r\n</dependency>\r\n```","```\r\nspring.datasource.name=ecommercedb\r\nspring.jpa.show-sql=true\r\n\r\n#H2 settings\r\nspring.h2.console.enabled=true\r\nspring.h2.console.path=/h2-console\r\n```","```\r\n├───pom.xml            \r\n├───src\r\n    ├───main\r\n    │   ├───frontend\r\n    │   ├───java\r\n    │   │   └───com\r\n    │   │       └───baeldung\r\n    │   │           └───ecommerce\r\n    │   │               │   EcommerceApplication.java\r\n    │   │               ├───controller \r\n    │   │               ├───dto  \r\n    │   │               ├───exception\r\n    │   │               ├───model\r\n    │   │               ├───repository\r\n    │   │               └───service\r\n    │   │                       \r\n    │   └───resources\r\n    │       │   application.properties\r\n    │       ├───static\r\n    │       └───templates\r\n    └───test\r\n        └───java\r\n            └───com\r\n                └───baeldung\r\n                    └───ecommerce\r\n                            EcommerceApplicationIntegrationTest.java\r\n```","```\r\n@RestControllerAdvice\r\npublic class ApiExceptionHandler {\r\n\r\n    @SuppressWarnings(\"rawtypes\")\r\n    @ExceptionHandler(ConstraintViolationException.class)\r\n    public ResponseEntity<ErrorResponse> handle(ConstraintViolationException e) {\r\n        ErrorResponse errors = new ErrorResponse();\r\n        for (ConstraintViolation violation : e.getConstraintViolations()) {\r\n            ErrorItem error = new ErrorItem();\r\n            error.setCode(violation.getMessageTemplate());\r\n            error.setMessage(violation.getMessage());\r\n            errors.addError(error);\r\n        }\r\n        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);\r\n    }\r\n\r\n    @SuppressWarnings(\"rawtypes\")\r\n    @ExceptionHandler(ResourceNotFoundException.class)\r\n    public ResponseEntity<ErrorItem> handle(ResourceNotFoundException e) {\r\n        ErrorItem error = new ErrorItem();\r\n        error.setMessage(e.getMessage());\r\n\r\n        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Product {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @NotNull(message = \"Product name is required.\")\r\n    @Basic(optional = false)\r\n    private String name;\r\n\r\n    private Double price;\r\n\r\n    private String pictureUrl;\r\n\r\n    // all arguments contructor \r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class ProductServiceImpl implements ProductService {\r\n\r\n    // productRepository constructor injection\r\n\r\n    @Override\r\n    public Iterable<Product> getAllProducts() {\r\n        return productRepository.findAll();\r\n    }\r\n\r\n    @Override\r\n    public Product getProduct(long id) {\r\n        return productRepository\r\n          .findById(id)\r\n          .orElseThrow(() -> new ResourceNotFoundException(\"Product not found\"));\r\n    }\r\n\r\n    @Override\r\n    public Product save(Product product) {\r\n        return productRepository.save(product);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api/products\")\r\npublic class ProductController {\r\n\r\n    // productService constructor injection\r\n\r\n    @GetMapping(value = { \"\", \"/\" })\r\n    public @NotNull Iterable<Product> getProducts() {\r\n        return productService.getAllProducts();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\nCommandLineRunner runner(ProductService productService) {\r\n    return args -> {\r\n        productService.save(...);\r\n        // more products\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"orders\")\r\npublic class Order {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    @JsonFormat(pattern = \"dd/MM/yyyy\")\r\n    private LocalDate dateCreated;\r\n\r\n    private String status;\r\n\r\n    @JsonManagedReference\r\n    @OneToMany(mappedBy = \"pk.order\")\r\n    @Valid\r\n    private List<OrderProduct> orderProducts = new ArrayList<>();\r\n\r\n    @Transient\r\n    public Double getTotalOrderPrice() {\r\n        double sum = 0D;\r\n        List<OrderProduct> orderProducts = getOrderProducts();\r\n        for (OrderProduct op : orderProducts) {\r\n            sum += op.getTotalPrice();\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    @Transient\r\n    public int getNumberOfProducts() {\r\n        return this.orderProducts.size();\r\n    }\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class OrderProduct {\r\n\r\n    @EmbeddedId\r\n    @JsonIgnore\r\n    private OrderProductPK pk;\r\n\r\n    @Column(nullable = false)\r\n\tprivate Integer quantity;\r\n\r\n    // default constructor\r\n\r\n    public OrderProduct(Order order, Product product, Integer quantity) {\r\n        pk = new OrderProductPK();\r\n        pk.setOrder(order);\r\n        pk.setProduct(product);\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    @Transient\r\n    public Product getProduct() {\r\n        return this.pk.getProduct();\r\n    }\r\n\r\n    @Transient\r\n    public Double getTotalPrice() {\r\n        return getProduct().getPrice() * getQuantity();\r\n    }\r\n\r\n    // standard getters and setters\r\n\r\n    // hashcode() and equals() methods\r\n}\r\n```","```\r\n@Embeddable\r\npublic class OrderProductPK implements Serializable {\r\n\r\n    @JsonBackReference\r\n    @ManyToOne(optional = false, fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"order_id\")\r\n    private Order order;\r\n\r\n    @ManyToOne(optional = false, fetch = FetchType.LAZY)\r\n    @JoinColumn(name = \"product_id\")\r\n    private Product product;\r\n\r\n    // standard getters and setters\r\n\r\n    // hashcode() and equals() methods\r\n}\r\n```","```\r\n@Service\r\n@Transactional\r\npublic class OrderServiceImpl implements OrderService {\r\n\r\n    // orderRepository constructor injection\r\n\r\n    @Override\r\n    public Iterable<Order> getAllOrders() {\r\n        return this.orderRepository.findAll();\r\n    }\r\n\r\n    @Override\r\n    public Order create(Order order) {\r\n        order.setDateCreated(LocalDate.now());\r\n        return this.orderRepository.save(order);\r\n    }\r\n\r\n    @Override\r\n    public void update(Order order) {\r\n        this.orderRepository.save(order);\r\n    }\r\n}\r\n```","```\r\n@PostMapping\r\npublic ResponseEntity<Order> create(@RequestBody OrderForm form) {\r\n    List<OrderProductDto> formDtos = form.getProductOrders();\r\n    validateProductsExistence(formDtos);\r\n    // create order logic\r\n    // populate order with products\r\n\r\n    order.setOrderProducts(orderProducts);\r\n    this.orderService.update(order);\r\n\r\n    String uri = ServletUriComponentsBuilder\r\n      .fromCurrentServletMapping()\r\n      .path(\"/orders/{id}\")\r\n      .buildAndExpand(order.getId())\r\n      .toString();\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(\"Location\", uri);\r\n\r\n    return new ResponseEntity<>(order, headers, HttpStatus.CREATED);\r\n}\r\n```","```\r\nng new frontend\r\n```","```\r\nnpm install --save bootstrap\r\n```","```\r\nng g c ecommerce\r\n```","```\r\n<div class=\"container\">\r\n    <app-ecommerce></app-ecommerce>\r\n</div>\r\n```","```\r\nng g c /ecommerce/products\r\nng g c /ecommerce/orders\r\nng g c /ecommerce/shopping-cart\r\n```","```\r\nexport class Product {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    pictureUrl: string;\r\n\r\n    // all arguments constructor\r\n}\r\n```","```\r\nexport class ProductOrder {\r\n    product: Product;\r\n    quantity: number;\r\n\r\n    // all arguments constructor\r\n}\r\n```","```\r\nexport class ProductOrders {\r\n    productOrders: ProductOrder[] = [];\r\n}\r\n```","```\r\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\">\r\n    <div class=\"container\">\r\n        <a class=\"navbar-brand\" href=\"#\">Baeldung Ecommerce</a>\r\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" \r\n          data-target=\"#navbarResponsive\" aria-controls=\"navbarResponsive\" \r\n          aria-expanded=\"false\" aria-label=\"Toggle navigation\" \r\n          (click)=\"toggleCollapsed()\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div id=\"navbarResponsive\" \r\n            [ngClass]=\"{'collapse': collapsed, 'navbar-collapse': true}\">\r\n            <ul class=\"navbar-nav ml-auto\">\r\n                <li class=\"nav-item active\">\r\n                    <a class=\"nav-link\" href=\"#\" (click)=\"reset()\">Home\r\n                        <span class=\"sr-only\">(current)</span>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    </div>\r\n</nav>\r\n```","```\r\n<div class=\"row\">\r\n    <div class=\"col-md-9\">\r\n        <app-products #productsC [hidden]=\"orderFinished\"></app-products>\r\n    </div>\r\n    <div class=\"col-md-3\">\r\n        <app-shopping-cart (onOrderFinished)=finishOrder($event) #shoppingCartC \r\n          [hidden]=\"orderFinished\"></app-shopping-cart>\r\n    </div>\r\n    <div class=\"col-md-6 offset-3\">\r\n        <app-orders #ordersC [hidden]=\"!orderFinished\"></app-orders>\r\n    </div>\r\n</div>\r\n```","```\r\n.container {\r\n    padding-top: 65px;\r\n}\r\n```","```\r\n@Component({\r\n    selector: 'app-ecommerce',\r\n    templateUrl: './ecommerce.component.html',\r\n    styleUrls: ['./ecommerce.component.css']\r\n})\r\nexport class EcommerceComponent implements OnInit {\r\n    private collapsed = true;\r\n    orderFinished = false;\r\n\r\n    @ViewChild('productsC')\r\n    productsC: ProductsComponent;\r\n\r\n    @ViewChild('shoppingCartC')\r\n    shoppingCartC: ShoppingCartComponent;\r\n\r\n    @ViewChild('ordersC')\r\n    ordersC: OrdersComponent;\r\n\r\n    toggleCollapsed(): void {\r\n        this.collapsed = !this.collapsed;\r\n    }\r\n\r\n    finishOrder(orderFinished: boolean) {\r\n        this.orderFinished = orderFinished;\r\n    }\r\n\r\n    reset() {\r\n        this.orderFinished = false;\r\n        this.productsC.reset();\r\n        this.shoppingCartC.reset();\r\n        this.ordersC.paid = false;\r\n    }\r\n}\r\n```","```\r\n@Injectable()\r\nexport class EcommerceService {\r\n    private productsUrl = \"/api/products\";\r\n    private ordersUrl = \"/api/orders\";\r\n\r\n    private productOrder: ProductOrder;\r\n    private orders: ProductOrders = new ProductOrders();\r\n\r\n    private productOrderSubject = new Subject();\r\n    private ordersSubject = new Subject();\r\n    private totalSubject = new Subject();\r\n\r\n    private total: number;\r\n\r\n    ProductOrderChanged = this.productOrderSubject.asObservable();\r\n    OrdersChanged = this.ordersSubject.asObservable();\r\n    TotalChanged = this.totalSubject.asObservable();\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    getAllProducts() {\r\n        return this.http.get(this.productsUrl);\r\n    }\r\n\r\n    saveOrder(order: ProductOrders) {\r\n        return this.http.post(this.ordersUrl, order);\r\n    }\r\n\r\n    // getters and setters for shared fields\r\n}\r\n```","```\r\n{\r\n    \"/api\": {\r\n        \"target\": \"http://localhost:8080\",\r\n        \"secure\": false\r\n    }\r\n}\r\n```","```\r\n\"scripts\": {\r\n    ...\r\n    \"start\": \"ng serve --proxy-config proxy-conf.json\",\r\n    ...\r\n  }\r\n```","```\r\nexport class ProductsComponent implements OnInit {\r\n    productOrders: ProductOrder[] = [];\r\n    products: Product[] = [];\r\n    selectedProductOrder: ProductOrder;\r\n    private shoppingCartOrders: ProductOrders;\r\n    sub: Subscription;\r\n    productSelected: boolean = false;\r\n\r\n    constructor(private ecommerceService: EcommerceService) {}\r\n\r\n    ngOnInit() {\r\n        this.productOrders = [];\r\n        this.loadProducts();\r\n        this.loadOrders();\r\n    }\r\n\r\n    loadProducts() {\r\n        this.ecommerceService.getAllProducts()\r\n            .subscribe(\r\n                (products: any[]) => {\r\n                    this.products = products;\r\n                    this.products.forEach(product => {\r\n                        this.productOrders.push(new ProductOrder(product, 0));\r\n                    })\r\n                },\r\n                (error) => console.log(error)\r\n            );\r\n    }\r\n\r\n    loadOrders() {\r\n        this.sub = this.ecommerceService.OrdersChanged.subscribe(() => {\r\n            this.shoppingCartOrders = this.ecommerceService.ProductOrders;\r\n        });\r\n    }\r\n}\r\n```","```\r\naddToCart(order: ProductOrder) {\r\n    this.ecommerceService.SelectedProductOrder = order;\r\n    this.selectedProductOrder = this.ecommerceService.SelectedProductOrder;\r\n    this.productSelected = true;\r\n}\r\n\r\nremoveFromCart(productOrder: ProductOrder) {\r\n    let index = this.getProductIndex(productOrder.product);\r\n    if (index > -1) {\r\n        this.shoppingCartOrders.productOrders.splice(\r\n            this.getProductIndex(productOrder.product), 1);\r\n    }\r\n    this.ecommerceService.ProductOrders = this.shoppingCartOrders;\r\n    this.shoppingCartOrders = this.ecommerceService.ProductOrders;\r\n    this.productSelected = false;\r\n}\r\n```","```\r\nreset() {\r\n    this.productOrders = [];\r\n    this.loadProducts();\r\n    this.ecommerceService.ProductOrders.productOrders = [];\r\n    this.loadOrders();\r\n    this.productSelected = false;\r\n}\r\n```","```\r\n<div class=\"row card-deck\">\r\n    <div class=\"col-lg-4 col-md-6 mb-4\" *ngFor=\"let order of productOrders\">\r\n        <div class=\"card text-center\">\r\n            <div class=\"card-header\">\r\n                <h4>{{order.product.name}}</h4>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <a href=\"#\"><img class=\"card-img-top\" src={{order.product.pictureUrl}} \r\n                    alt=\"\"></a>\r\n                <h5 class=\"card-title\">${{order.product.price}}</h5>\r\n                <div class=\"row\">\r\n                    <div class=\"col-4 padding-0\" *ngIf=\"!isProductSelected(order.product)\">\r\n                        <input type=\"number\" min=\"0\" class=\"form-control\" \r\n                            [(ngModel)]=order.quantity>\r\n                    </div>\r\n                    <div class=\"col-4 padding-0\" *ngIf=\"!isProductSelected(order.product)\">\r\n                        <button class=\"btn btn-primary\" (click)=\"addToCart(order)\"\r\n                                [disabled]=\"order.quantity <= 0\">Add To Cart\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"col-12\" *ngIf=\"isProductSelected(order.product)\">\r\n                        <button class=\"btn btn-primary btn-block\"\r\n                                (click)=\"removeFromCart(order)\">Remove From Cart\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n```","```\r\n.padding-0 {\r\n    padding-right: 0;\r\n    padding-left: 1;\r\n}\r\n```","```\r\nexport class ShoppingCartComponent implements OnInit, OnDestroy {\r\n    orderFinished: boolean;\r\n    orders: ProductOrders;\r\n    total: number;\r\n    sub: Subscription;\r\n\r\n    @Output() onOrderFinished: EventEmitter<boolean>;\r\n\r\n    constructor(private ecommerceService: EcommerceService) {\r\n        this.total = 0;\r\n        this.orderFinished = false;\r\n        this.onOrderFinished = new EventEmitter<boolean>();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.orders = new ProductOrders();\r\n        this.loadCart();\r\n        this.loadTotal();\r\n    }\r\n\r\n    loadTotal() {\r\n        this.sub = this.ecommerceService.OrdersChanged.subscribe(() => {\r\n            this.total = this.calculateTotal(this.orders.productOrders);\r\n        });\r\n    }\r\n\r\n    loadCart() {\r\n        this.sub = this.ecommerceService.ProductOrderChanged.subscribe(() => {\r\n            let productOrder = this.ecommerceService.SelectedProductOrder;\r\n            if (productOrder) {\r\n                this.orders.productOrders.push(new ProductOrder(\r\n                    productOrder.product, productOrder.quantity));\r\n            }\r\n            this.ecommerceService.ProductOrders = this.orders;\r\n            this.orders = this.ecommerceService.ProductOrders;\r\n            this.total = this.calculateTotal(this.orders.productOrders);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.sub.unsubscribe();\r\n    }\r\n}\r\n```","```\r\nfinishOrder() {\r\n    this.orderFinished = true;\r\n    this.ecommerceService.Total = this.total;\r\n    this.onOrderFinished.emit(this.orderFinished);\r\n}\r\n\r\nreset() {\r\n    this.orderFinished = false;\r\n    this.orders = new ProductOrders();\r\n    this.orders.productOrders = []\r\n    this.loadTotal();\r\n    this.total = 0;\r\n}\r\n```","```\r\n<div class=\"card text-white bg-danger mb-3\" style=\"max-width: 18rem;\">\r\n    <div class=\"card-header text-center\">Shopping Cart</div>\r\n    <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Total: ${{total}}</h5>\r\n        <hr>\r\n        <h6 class=\"card-title\">Items bought:</h6>\r\n\r\n        <ul>\r\n            <li *ngFor=\"let order of orders.productOrders\">\r\n                {{ order.product.name }} - {{ order.quantity}} pcs.\r\n            </li>\r\n        </ul>\r\n\r\n        <button class=\"btn btn-light btn-block\" (click)=\"finishOrder()\"\r\n             [disabled]=\"orders.productOrders.length == 0\">Checkout\r\n        </button>\r\n    </div>\r\n</div>\r\n```","```\r\nexport class OrdersComponent implements OnInit {\r\n    orders: ProductOrders;\r\n    total: number;\r\n    paid: boolean;\r\n    sub: Subscription;\r\n\r\n    constructor(private ecommerceService: EcommerceService) {\r\n        this.orders = this.ecommerceService.ProductOrders;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.paid = false;\r\n        this.sub = this.ecommerceService.OrdersChanged.subscribe(() => {\r\n            this.orders = this.ecommerceService.ProductOrders;\r\n        });\r\n        this.loadTotal();\r\n    }\r\n\r\n    pay() {\r\n        this.paid = true;\r\n        this.ecommerceService.saveOrder(this.orders).subscribe();\r\n    }\r\n}\r\n```","```\r\n<h2 class=\"text-center\">ORDER</h2>\r\n<ul>\r\n    <li *ngFor=\"let order of orders.productOrders\">\r\n        {{ order.product.name }} - ${{ order.product.price }} x {{ order.quantity}} pcs.\r\n    </li>\r\n</ul>\r\n<h3 class=\"text-right\">Total amount: ${{ total }}</h3>\r\n\r\n<button class=\"btn btn-primary btn-block\" (click)=\"pay()\" *ngIf=\"!paid\">Pay</button>\r\n<div class=\"alert alert-success\" role=\"alert\" *ngIf=\"paid\">\r\n    <strong>Congratulation!</strong> You successfully made the order.\r\n</div>\r\n```","```\r\n\"postbuild\": \"npm run deploy\",\r\n\"predeploy\": \"rimraf ../resources/static/ && mkdirp ../resources/static\",\r\n\"deploy\": \"copyfiles -f dist/** ../resources/static\",\r\n```","```\r\nnpm install --save-dev rimraf\r\nnpm install --save-dev mkdirp\r\nnpm install --save-dev copyfiles\r\n```"]