["```\r\n@Entity\r\n@Table(name = \"articles\")\r\npublic class Article {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = IDENTITY)\r\n    private Long id;\r\n\r\n    private String title;\r\n\r\n    private String content;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@SpringBootTest\r\n@Testcontainers\r\n@ContextConfiguration(initializers = ArticleTraditionalLiveTest.EnvInitializer.class)\r\nclass ArticleTraditionalLiveTest {\r\n\r\n    @Container\r\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(\"postgres:11\")\r\n      .withDatabaseName(\"prop\")\r\n      .withUsername(\"postgres\")\r\n      .withPassword(\"pass\")\r\n      .withExposedPorts(5432);\r\n\r\n    static class EnvInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n\r\n        @Override\r\n        public void initialize(ConfigurableApplicationContext applicationContext) {\r\n            TestPropertyValues.of(\r\n              String.format(\"spring.datasource.url=jdbc:postgresql://localhost:%d/prop\", postgres.getFirstMappedPort()),\r\n              \"spring.datasource.username=postgres\",\r\n              \"spring.datasource.password=pass\"\r\n            ).applyTo(applicationContext);\r\n        }\r\n    }\r\n\r\n    // omitted \r\n}\r\n```","```\r\n@Autowired\r\nprivate ArticleRepository articleRepository;\r\n\r\n@Test\r\nvoid givenAnArticle_whenPersisted_thenShouldBeAbleToReadIt() {\r\n    Article article = new Article();\r\n    article.setTitle(\"A Guide to @DynamicPropertySource in Spring\");\r\n    article.setContent(\"Today's applications...\");\r\n\r\n    articleRepository.save(article);\r\n\r\n    Article persisted = articleRepository.findAll().get(0);\r\n    assertThat(persisted.getId()).isNotNull();\r\n    assertThat(persisted.getTitle()).isEqualTo(\"A Guide to @DynamicPropertySource in Spring\");\r\n    assertThat(persisted.getContent()).isEqualTo(\"Today's applications...\");\r\n}\r\n```","```\r\n@SpringBootTest\r\n@Testcontainers\r\npublic class ArticleLiveTest {\r\n\r\n    @Container\r\n    static PostgreSQLContainer<?> postgres = new PostgreSQLContainer<>(\"postgres:11\")\r\n      .withDatabaseName(\"prop\")\r\n      .withUsername(\"postgres\")\r\n      .withPassword(\"pass\")\r\n      .withExposedPorts(5432);\r\n\r\n    @DynamicPropertySource\r\n    static void registerPgProperties(DynamicPropertyRegistry registry) {\r\n        registry.add(\"spring.datasource.url\", \r\n          () -> String.format(\"jdbc:postgresql://localhost:%d/prop\", postgres.getFirstMappedPort()));\r\n        registry.add(\"spring.datasource.username\", () -> \"postgres\");\r\n        registry.add(\"spring.datasource.password\", () -> \"pass\");\r\n    }\r\n\r\n    // tests are same as before\r\n}\r\n```","```\r\npublic class PostgreSQLExtension implements BeforeAllCallback, AfterAllCallback {\r\n\r\n    private PostgreSQLContainer<?> postgres;\r\n\r\n    @Override\r\n    public void beforeAll(ExtensionContext context) {\r\n        postgres = new PostgreSQLContainer<>(\"postgres:11\")\r\n          .withDatabaseName(\"prop\")\r\n          .withUsername(\"postgres\")\r\n          .withPassword(\"pass\")\r\n          .withExposedPorts(5432);\r\n\r\n        postgres.start();\r\n        String jdbcUrl = String.format(\"jdbc:postgresql://localhost:%d/prop\", postgres.getFirstMappedPort());\r\n        System.setProperty(\"spring.datasource.url\", jdbcUrl);\r\n        System.setProperty(\"spring.datasource.username\", \"postgres\");\r\n        System.setProperty(\"spring.datasource.password\", \"pass\");\r\n    }\r\n\r\n    @Override\r\n    public void afterAll(ExtensionContext context) {\r\n        // do nothing, Testcontainers handles container shutdown\r\n    }\r\n} \r\n```","```\r\n@SpringBootTest\r\n@ExtendWith(PostgreSQLExtension.class)\r\n@DirtiesContext\r\npublic class ArticleTestFixtureLiveTest {\r\n    // just the test code\r\n}\r\n```"]