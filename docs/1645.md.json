["```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: rewrite_v1\r\n        uri: ${rewrite.backend.uri:http://example.com}\r\n        predicates:\r\n        - Path=/v1/customer/**\r\n        filters:\r\n        - RewritePath=/v1/customer/(?<segment>.*),/api/$\\{segment} \r\n```","```\r\n@Configuration\r\npublic class DynamicRewriteRoute {\r\n\r\n    @Value(\"${rewrite.backend.uri}\")\r\n    private String backendUri;\r\n    private static Random rnd = new Random();\r\n\r\n    @Bean\r\n    public RouteLocator dynamicZipCodeRoute(RouteLocatorBuilder builder) {\r\n        return builder.routes()\r\n          .route(\"dynamicRewrite\", r ->\r\n             r.path(\"/v2/zip/**\")\r\n              .filters(f -> f.filter((exchange, chain) -> {\r\n                  ServerHttpRequest req = exchange.getRequest();\r\n                  addOriginalRequestUrl(exchange, req.getURI());\r\n                  String path = req.getURI().getRawPath();\r\n                  String newPath = path.replaceAll(\r\n                    \"/v2/zip/(?<zipcode>.*)\", \r\n                    \"/api/zip/${zipcode}-\" + String.format(\"%03d\", rnd.nextInt(1000)));\r\n                  ServerHttpRequest request = req.mutate().path(newPath).build();\r\n                  exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR, request.getURI());\r\n                  return chain.filter(exchange.mutate().request(request).build());\r\n              }))\r\n              .uri(backendUri))\r\n          .build();\r\n    }\r\n} \r\n```","```\r\n@DynamicPropertySource\r\nstatic void registerBackendServer(DynamicPropertyRegistry registry) {\r\n    registry.add(\"rewrite.backend.uri\", () -> {\r\n        HttpServer s = startTestServer();\r\n        return \"http://localhost:\" + s.getAddress().getPort();\r\n    });\r\n} \r\n```","```\r\n@Test\r\nvoid testWhenApiCall_thenRewriteSuccess(@Autowired WebTestClient webClient) {\r\n    webClient.get()\r\n      .uri(\"http://localhost:\" + localPort + \"/v1/customer/customer1\")\r\n      .exchange()\r\n      .expectBody()\r\n      .consumeWith((result) -> {\r\n          String body = new String(result.getResponseBody());\r\n          assertEquals(\"/api/customer1\", body);\r\n      });\r\n} \r\n```"]