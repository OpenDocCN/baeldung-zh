["```\r\ndef printWelcome = {\r\n    println \"Welcome to Closures!\"\r\n}\r\n```","```\r\ndef print = { name ->\r\n    println name \r\n}\r\n```","```\r\ndef formatToLowerCase(name) {\r\n    return name.toLowerCase()\r\n}\r\ndef formatToLowerCaseClosure = { name ->\r\n    return name.toLowerCase()\r\n} \r\n```","```\r\nprint(\"Hello! Closure\")\r\nformatToLowerCaseClosure(\"Hello! Closure\") \r\n```","```\r\nprint.call(\"Hello! Closure\") \r\nformatToLowerCaseClosure.call(\"Hello! Closure\")\r\n```","```\r\ndef greet = {\r\n    return \"Hello! ${it}\"\r\n}\r\nassert greet(\"Alex\") == \"Hello! Alex\"\r\n```","```\r\ndef multiply = { x, y -> \r\n    return x*y \r\n}\r\nassert multiply(2, 4) == 8\r\n```","```\r\ndef calculate = {int x, int y, String operation ->\r\n    def result = 0    \r\n    switch(operation) {\r\n        case \"ADD\":\r\n            result = x+y\r\n            break\r\n        case \"SUB\":\r\n            result = x-y\r\n            break\r\n        case \"MUL\":\r\n            result = x*y\r\n            break\r\n        case \"DIV\":\r\n            result = x/y\r\n            break\r\n    }\r\n    return result\r\n}\r\nassert calculate(12, 4, \"ADD\") == 16\r\nassert calculate(43, 8, \"DIV\") == 5.375\r\n```","```\r\ndef addAll = { int... args ->\r\n    return args.sum()\r\n}\r\nassert addAll(12, 10, 14) == 36\r\n```","```\r\ndef volume(Closure areaCalculator, int... dimensions) {\r\n    if(dimensions.size() == 3) {\r\n        return areaCalculator(dimensions[0], dimensions[1]) * dimensions[2]\r\n    } else if(dimensions.size() == 2) {\r\n        return areaCalculator(dimensions[0]) * dimensions[1]\r\n    } else if(dimensions.size() == 1) {\r\n        return areaCalculator(dimensions[0]) * dimensions[0]\r\n    }    \r\n}\r\nassert volume({ l, b -> return l*b }, 12, 6, 10) == 720 \r\n```","```\r\nassert volume({ radius -> return Math.PI*radius*radius/3 }, 5, 10) == Math.PI * 250\r\n```","```\r\ndef calculate = {int x, int y, String operation ->\r\n\r\n    def log = {\r\n        println \"Performing $it\"\r\n    }\r\n\r\n    def result = 0    \r\n    switch(operation) {\r\n        case \"ADD\":\r\n            log(\"Addition\")\r\n            result = x+y\r\n            break\r\n        case \"SUB\":\r\n            log(\"Subtraction\")\r\n            result = x-y\r\n            break\r\n        case \"MUL\":\r\n            log(\"Multiplication\")\r\n            result = x*y\r\n            break\r\n        case \"DIV\":\r\n            log(\"Division\")\r\n            result = x/y\r\n            break\r\n    }\r\n    return result\r\n}\r\n```","```\r\ndef name = \"Samwell\"\r\ndef welcomeMsg = \"Welcome! $name\"\r\n\r\nassert welcomeMsg == \"Welcome! Samwell\"\r\n```","```\r\nname = \"Tarly\"\r\nassert welcomeMsg != \"Welcome! Tarly\"\r\n```","```\r\ndef fullName = \"Tarly Samson\"\r\ndef greetStr = \"Hello! ${-> fullName}\"\r\n\r\nassert greetStr == \"Hello! Tarly Samson\"\r\n```","```\r\nfullName = \"Jon Smith\"\r\nassert greetStr == \"Hello! Jon Smith\"\r\n```","```\r\ndef list = [10, 11, 12, 13, 14, true, false, \"BUNTHER\"]\r\n\r\nlist.each {\r\n    println it\r\n}\r\n\r\nassert [13, 14] == list.findAll{ it instanceof Integer && it >= 13 }\r\n```","```\r\ndef map = [1:10, 2:30, 4:5]\r\n\r\nassert [10, 60, 20] == map.collect{it.key * it.value} \r\n```"]