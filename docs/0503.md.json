["```\r\n@RestController\r\npublic class LibraryController {\r\n\r\n    @Autowired\r\n    private BookRepository repository;\r\n\r\n    @GetMapping(\"/count\")\r\n    public Long findCount() {\r\n        System.out.println(repository);\r\n        return repository.count();\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class BookController {\r\n\r\n    @Autowired\r\n    private BookRepository repository;\r\n\r\n    @GetMapping(\"/book/{id}\")\r\n    public Book findById(@PathVariable long id) {\r\n        System.out.println(repository);\r\n        return repository.findById(id).get();\r\n    }\r\n}\r\n```","```\r\ncurl -X GET http://localhost:8080/count\r\ncurl -X GET http://localhost:8080/book/1\r\n```","```\r\n[[email protected]](/web/20221207170657/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n[[email protected]](/web/20221207170657/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\npublic interface BeanFactory {\r\n\r\n    getBean(Class<T> requiredType);\r\n    getBean(Class<T> requiredType, Object... args);\r\n    getBean(String name);\r\n\r\n    // ...\r\n]\r\n```","```\r\n@Configuration\r\n@ComponentScan(basePackageClasses = ApplicationConfig.class)\r\npublic class ApplicationConfig {\r\n}\r\n```","```\r\n@Component\r\npublic class Foo {\r\n}\r\n```","```\r\n@Component\r\n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\r\npublic class Bar {\r\n\r\n    private String name;\r\n\r\n    public Bar(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    // Getter ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetSimpleBean_thenReturnConstructedBean() {\r\n\r\n    ApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\r\n\r\n    Foo foo = context.getBean(Foo.class);\r\n\r\n    assertNotNull(foo);\r\n}\r\n\r\n@Test\r\npublic void whenGetPrototypeBean_thenReturnConstructedBean() {\r\n\r\n    String expectedName = \"Some name\";\r\n    ApplicationContext context = new AnnotationConfigApplicationContext(ApplicationConfig.class);\r\n\r\n    Bar bar = context.getBean(Bar.class, expectedName);\r\n\r\n    assertNotNull(bar);\r\n    assertThat(bar.getName(), is(expectedName));\r\n}\r\n```","```\r\n@Test \r\npublic void givenXmlConfiguration_whenGetPrototypeBean_thenReturnConstructedBean() { \r\n\r\n    String expectedName = \"Some name\";\r\n    ApplicationContext context = new ClassPathXmlApplicationContext(\"context.xml\");\r\n\r\n    // Same test as before ...\r\n}\r\n```","```\r\n@Service\r\npublic class BookManager {\r\n\r\n    @Autowired\r\n    private BookRepository repository;\r\n\r\n    @Transactional\r\n    public Book create(String author) {\r\n        System.out.println(repository.getClass().getName());\r\n        return repository.create(author);\r\n    }\r\n}\r\n```","```\r\ncom.baeldung.patterns.proxy.BookRepository$$EnhancerBySpringCGLIB$$3dc2b55c\r\n```","```\r\npublic abstract DatabaseQuery {\r\n\r\n    public void execute() {\r\n        Connection connection = createConnection();\r\n        executeQuery(connection);\r\n        closeConnection(connection);\r\n    } \r\n\r\n    protected Connection createConnection() {\r\n        // Connect to database...\r\n    }\r\n\r\n    protected void closeConnection(Connection connection) {\r\n        // Close connection...\r\n    }\r\n\r\n    protected abstract void executeQuery(Connection connection);\r\n}\r\n```","```\r\npublic interface ResultsMapper<T> {\r\n    public T map(Results results);\r\n}\r\n```","```\r\npublic abstract DatabaseQuery {\r\n\r\n    public <T> T execute(String query, ResultsMapper<T> mapper) {\r\n        Connection connection = createConnection();\r\n        Results results = executeQuery(connection, query);\r\n        closeConnection(connection);\r\n        return mapper.map(results);\r\n    ]\r\n\r\n    protected Results executeQuery(Connection connection, String query) {\r\n        // Perform query...\r\n    }\r\n}\r\n```","```\r\npublic class JdbcTemplate {\r\n\r\n    public <T> T query(final String sql, final ResultSetExtractor<T> rse) throws DataAccessException {\r\n        // Execute query...\r\n    }\r\n\r\n    // Other methods...\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface ResultSetExtractor<T> {\r\n    T extractData(ResultSet rs) throws SQLException, DataAccessException;\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface RowMapper<T> {\r\n    T mapRow(ResultSet rs, int rowNum) throws SQLException;\r\n}\r\n```","```\r\npublic class JdbcTemplate {\r\n\r\n    public <T> List<T> query(String sql, RowMapper<T> rowMapper) throws DataAccessException {\r\n        return result(query(sql, new RowMapperResultSetExtractor<>(rowMapper)));\r\n    }\r\n\r\n    // Other methods...\r\n}\r\n```","```\r\npublic class BookRowMapper implements RowMapper<Book> {\r\n\r\n    @Override\r\n    public Book mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n\r\n        Book book = new Book();\r\n\r\n        book.setId(rs.getLong(\"id\"));\r\n        book.setTitle(rs.getString(\"title\"));\r\n        book.setAuthor(rs.getString(\"author\"));\r\n\r\n        return book;\r\n    }\r\n}\r\n```","```\r\nJdbcTemplate template = // create template...\r\ntemplate.query(\"SELECT * FROM books\", new BookRowMapper());\r\n```"]