["```\r\n<dependency>\r\n    <groupId>com.univocity</groupId>\r\n    <artifactId>univocity-parsers</artifactId>\r\n    <version>2.8.4</version>\r\n</dependency>\r\n```","```\r\ntry (Reader inputReader = new InputStreamReader(new FileInputStream(\r\n  new File(\"src/test/resources/productList.csv\")), \"UTF-8\")) {\r\n    CsvParser parser = new CsvParser(new CsvParserSettings());\r\n    List<String[]> parsedRows = parser.parseAll(inputReader);\r\n    return parsedRows;\r\n} catch (IOException e) {\r\n    // handle exception\r\n}\r\n```","```\r\ntry (Reader inputReader = new InputStreamReader(new FileInputStream(\r\n  new File(\"src/test/resources/productList.txt\")), \"UTF-8\")) {\r\n    FixedWidthFields fieldLengths = new FixedWidthFields(8, 30, 10);\r\n    FixedWidthParserSettings settings = new FixedWidthParserSettings(fieldLengths);\r\n\r\n    FixedWidthParser parser = new FixedWidthParser(settings);\r\n    List<String[]> parsedRows = parser.parseAll(inputReader);\r\n    return parsedRows;\r\n} catch (IOException e) {\r\n    // handle exception\r\n}\r\n```","```\r\npublic boolean writeData(List<Object[]> products, OutputType outputType, String outputPath) {\r\n    try (Writer outputWriter = new OutputStreamWriter(new FileOutputStream(new File(outputPath)),\"UTF-8\")){\r\n        switch(outputType) {\r\n            case CSV:\r\n                CsvWriter writer = new CsvWriter(outputWriter, new CsvWriterSettings());\r\n                writer.writeRowsAndClose(products);\r\n                break;\r\n            case TSV:\r\n                TsvWriter writer = new TsvWriter(outputWriter, new TsvWriterSettings());\r\n                writer.writeRowsAndClose(products);\r\n                break;\r\n            case FIXED_WIDTH:\r\n                FixedWidthFields fieldLengths = new FixedWidthFields(8, 30, 10);\r\n                FixedWidthWriterSettings settings = new FixedWidthWriterSettings(fieldLengths);\r\n                FixedWidthWriter writer = new FixedWidthWriter(outputWriter, settings);\r\n                writer.writeRowsAndClose(products);\r\n                break;\r\n            default:\r\n                logger.warn(\"Invalid OutputType: \" + outputType);\r\n                return false;\r\n        }\r\n        return true;\r\n    } catch (IOException e) {\r\n        // handle exception\r\n    }\r\n}\r\n```","```\r\ntry (Reader inputReader = new InputStreamReader(new FileInputStream(new File(relativePath)), \"UTF-8\")) {\r\n    CsvParserSettings settings = new CsvParserSettings();\r\n    settings.setProcessor(new BatchedColumnProcessor(5) {\r\n        @Override\r\n        public void batchProcessed(int rowsInThisBatch) {}\r\n    });\r\n    CsvParser parser = new CsvParser(settings);\r\n    List<String[]> parsedRows = parser.parseAll(inputReader);\r\n    return parsedRows;\r\n} catch (IOException e) {\r\n    // handle exception\r\n}\r\n```","```\r\npublic class Product {\r\n\r\n    @Parsed(field = \"product_no\")\r\n    private String productNumber;\r\n\r\n    @Parsed\r\n    private String description;\r\n\r\n    @Parsed(field = \"unit_price\")\r\n    private float unitPrice;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\ntry (Reader inputReader = new InputStreamReader(new FileInputStream(\r\n  new File(\"src/test/resources/productList.csv\")), \"UTF-8\")) {\r\n    BeanListProcessor<Product> rowProcessor = new BeanListProcessor<Product>(Product.class);\r\n    CsvParserSettings settings = new CsvParserSettings();\r\n    settings.setHeaderExtractionEnabled(true);\r\n    settings.setProcessor(rowProcessor);\r\n    CsvParser parser = new CsvParser(settings);\r\n    parser.parse(inputReader);\r\n    return rowProcessor.getBeans();\r\n} catch (IOException e) {\r\n    // handle exception\r\n}\r\n```","```\r\ntry (Writer outputWriter = new OutputStreamWriter(new FileOutputStream(new File(outputPath)), \"UTF-8\")) {\r\n    BeanWriterProcessor<Product> rowProcessor = new BeanWriterProcessor<Product>(Product.class);\r\n    FixedWidthFields fieldLengths = new FixedWidthFields(8, 30, 10);\r\n    FixedWidthWriterSettings settings = new FixedWidthWriterSettings(fieldLengths);\r\n    settings.setHeaders(\"product_no\", \"description\", \"unit_price\");\r\n    settings.setRowWriterProcessor(rowProcessor);\r\n    FixedWidthWriter writer = new FixedWidthWriter(outputWriter, settings);\r\n    writer.writeHeaders();\r\n    for (Product product : products) {\r\n        writer.processRecord(product);\r\n    }\r\n    writer.close();\r\n    return true;\r\n} catch (IOException e) {\r\n    // handle exception\r\n}\r\n```","```\r\nCsvParserSettings settings = new CsvParserSettings();\r\nsettings.setMaxCharsPerColumn(100);\r\nsettings.setMaxColumns(50);\r\nCsvParser parser = new CsvParser(new CsvParserSettings());\r\n```"]