["```\r\n    ProcessBuilder(String... command)\r\n    ```","```\r\n    directory(File directory)\r\n    ```","```\r\n    environment()\r\n    ```","```\r\n    inheritIO()\r\n    ```","```\r\n    redirectInput(File file), redirectOutput(File file), redirectError(File file)\r\n    ```","```\r\n    start()\r\n    ```","```\r\nProcess process = new ProcessBuilder(\"java\", \"-version\").start();\r\n```","```\r\nList<String> results = readOutput(process.getInputStream());\r\n\r\nassertThat(\"Results should not be empty\", results, is(not(empty())));\r\nassertThat(\"Results should contain java version: \", results, hasItem(containsString(\"java version\")));\r\n\r\nint exitCode = process.waitFor();\r\nassertEquals(\"No errors should be detected\", 0, exitCode);\r\n```","```\r\nProcessBuilder processBuilder = new ProcessBuilder();        \r\nMap<String, String> environment = processBuilder.environment();\r\nenvironment.forEach((key, value) -> System.out.println(key + value));\r\n```","```\r\nPATH/usr/bin:/bin:/usr/sbin:/sbin\r\nSHELL/bin/bash\r\n...\r\n```","```\r\nenvironment.put(\"GREETING\", \"Hola Mundo\");\r\n\r\nprocessBuilder.command(\"/bin/bash\", \"-c\", \"echo $GREETING\");\r\nProcess process = processBuilder.start();\r\n```","```\r\nList<String> results = readOutput(process.getInputStream());\r\nassertThat(\"Results should not be empty\", results, is(not(empty())));\r\nassertThat(\"Results should contain java version: \", results, hasItem(containsString(\"Hola Mundo\")));\r\n```","```\r\n@Test\r\npublic void givenProcessBuilder_whenModifyWorkingDir_thenSuccess() \r\n  throws IOException, InterruptedException {\r\n    ProcessBuilder processBuilder = new ProcessBuilder(\"/bin/sh\", \"-c\", \"ls\");\r\n\r\n    processBuilder.directory(new File(\"src\"));\r\n    Process process = processBuilder.start();\r\n\r\n    List<String> results = readOutput(process.getInputStream());\r\n    assertThat(\"Results should not be empty\", results, is(not(empty())));\r\n    assertThat(\"Results should contain directory listing: \", results, contains(\"main\", \"test\"));\r\n\r\n    int exitCode = process.waitFor();\r\n    assertEquals(\"No errors should be detected\", 0, exitCode);\r\n}\r\n```","```\r\nProcessBuilder processBuilder = new ProcessBuilder(\"java\", \"-version\");\r\n\r\nprocessBuilder.redirectErrorStream(true);\r\nFile log = folder.newFile(\"java-version.log\");\r\nprocessBuilder.redirectOutput(log);\r\n\r\nProcess process = processBuilder.start();\r\n```","```\r\nassertEquals(\"If redirected, should be -1 \", -1, process.getInputStream().read());\r\nList<String> lines = Files.lines(log.toPath()).collect(Collectors.toList());\r\nassertThat(\"Results should contain java version: \", lines, hasItem(containsString(\"java version\")));\r\n```","```\r\nFile log = tempFolder.newFile(\"java-version-append.log\");\r\nprocessBuilder.redirectErrorStream(true);\r\nprocessBuilder.redirectOutput(Redirect.appendTo(log));\r\n```","```\r\nFile outputLog = tempFolder.newFile(\"standard-output.log\");\r\nFile errorLog = tempFolder.newFile(\"error.log\");\r\n\r\nprocessBuilder.redirectOutput(Redirect.appendTo(outputLog));\r\nprocessBuilder.redirectError(Redirect.appendTo(errorLog));\r\n```","```\r\n@Test\r\npublic void givenProcessBuilder_whenInheritIO_thenSuccess() throws IOException, InterruptedException {\r\n    ProcessBuilder processBuilder = new ProcessBuilder(\"/bin/sh\", \"-c\", \"echo hello\");\r\n\r\n    processBuilder.inheritIO();\r\n    Process process = processBuilder.start();\r\n\r\n    int exitCode = process.waitFor();\r\n    assertEquals(\"No errors should be detected\", 0, exitCode);\r\n}\r\n```","```\r\npublic static List<Process> startPipelineâ€‹(List<ProcessBuilder> builders) \r\n```","```\r\nfind . -name *.java -type f | wc -l\r\n```","```\r\n@Test\r\npublic void givenProcessBuilder_whenStartingPipeline_thenSuccess()\r\n  throws IOException, InterruptedException {\r\n    List builders = Arrays.asList(\r\n      new ProcessBuilder(\"find\", \"src\", \"-name\", \"*.java\", \"-type\", \"f\"), \r\n      new ProcessBuilder(\"wc\", \"-l\"));\r\n\r\n    List processes = ProcessBuilder.startPipeline(builders);\r\n    Process last = processes.get(processes.size() - 1);\r\n\r\n    List output = readOutput(last.getInputStream());\r\n    assertThat(\"Results should not be empty\", output, is(not(empty())));\r\n}\r\n```"]