["```\r\n<dependency>\r\n    <groupId>org.mockito</groupId> \r\n    <artifactId>mockito-core</artifactId>\r\n    <version>2.21.0</version> \r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\ndoReturn(\"Flower\").when(flowerService).analyze(\"poppy\");\r\n```","```\r\nwhen(flowerService.analyze(anyString())).thenReturn(\"Flower\");\r\n```","```\r\nabstract class FlowerService {\r\n    public abstract boolean isABigFlower(String name, int petals);\r\n}\r\n\r\nFlowerService mock = mock(FlowerService.class);\r\n\r\nwhen(mock.isABigFlower(\"poppy\", anyInt())).thenReturn(true);\r\n```","```\r\nwhen(mock.isABigFlower(eq(\"poppy\"), anyInt())).thenReturn(true);\r\n```","```\r\nString orMatcher = or(eq(\"poppy\"), endsWith(\"y\"));\r\nverify(mock).analyze(orMatcher);\r\n```","```\r\nverify(mock).analyze(or(eq(\"poppy\"), endsWith(\"y\")));\r\n```","```\r\nverify(mock).analyze(or(eq(\"poppy\"), endsWith(\"y\")));\r\n```","```\r\nverify(messageService, times(1)).deliverMessage(any(Message.class));\r\n```","```\r\npublic class MessageMatcher implements ArgumentMatcher<Message> {\r\n\r\n    private Message left;\r\n\r\n    // constructors\r\n\r\n    @Override\r\n    public boolean matches(Message right) {\r\n        return left.getFrom().equals(right.getFrom()) &&\r\n          left.getTo().equals(right.getTo()) &&\r\n          left.getText().equals(right.getText()) &&\r\n          right.getDate() != null &&\r\n          right.getId() != null;\r\n    }\r\n}\r\n```","```\r\nverify(messageService, times(1)).deliverMessage(argThat(new MessageMatcher(message)));\r\n```"]