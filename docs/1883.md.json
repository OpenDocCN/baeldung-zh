["```\r\nint[] countElements(int[] input, int k) {\r\n    int[] c = new int[k + 1];\r\n    Arrays.fill(c, 0);\r\n\r\n    for (int i : input) {\r\n        c[i] += 1;\r\n    }\r\n\r\n    for (int i = 1; i < c.length; i++) {\r\n\tc[i] += c[i - 1];\r\n    }\r\n\r\n    return c;\r\n}\r\n```","```\r\n@Test\r\nvoid countElements_GivenAnArray_ShouldCalculateTheFrequencyArrayAsExpected() {\r\n    int k = 5;\r\n    int[] input = { 4, 3, 2, 5, 4, 3, 5, 1, 0, 2, 5 };\r\n\r\n    int[] c = CountingSort.countElements(input, k);\r\n    int[] expected = { 1, 2, 4, 6, 8, 11 };\r\n    assertArrayEquals(expected, c);\r\n}\r\n```","```\r\nint[] sort(int[] input, int k) {\r\n    int[] c = countElements(input, k);\r\n\r\n    int[] sorted = new int[input.length];\r\n    for (int i = input.length - 1; i >= 0; i--) {\r\n        int current = input[i];\r\n\tsorted[c[current] - 1] = current;\r\n\tc[current] -= 1;\r\n    }\r\n\r\n    return sorted;\r\n}\r\n```","```\r\n@Test\r\nvoid sort_GivenAnArray_ShouldSortTheInputAsExpected() {\r\n    int k = 5;\r\n    int[] input = { 4, 3, 2, 5, 4, 3, 5, 1, 0, 2, 5 };\r\n\r\n    int[] sorted = CountingSort.sort(input, k);\r\n\r\n    // Our sorting algorithm and Java's should return the same result\r\n    Arrays.sort(input);\r\n    assertArrayEquals(input, sorted);\r\n}\r\n```","```\r\nO(n + k) + O(n) = O(2n + k) = O(n + k)\r\n```"]