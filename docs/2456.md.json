["```\r\n@Entity\r\n@Table(name = \"user\")\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"first_name\")\r\n    private String firstName;\r\n\r\n    @Column(name = \"last_name\")\r\n    private String lastName;\r\n\r\n    @OneToMany\r\n    private Set<Role> roles;\r\n\r\n} \r\n```","```\r\n@Entity\r\n@Table(name = \"role\")\r\npublic class Role {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id\")\r\n    private int id;\r\n\r\n    @Column(name = \"role_name\")\r\n    private String roleName;\r\n}\r\n```","```\r\nRole admin = new Role(\"Admin\");\r\nRole dba = new Role(\"DBA\");\r\n```","```\r\nUser user = new User(\"Bob\", \"Smith\");\r\nuser.addRole(admin);\r\nuser.addRole(dba);\r\n```","```\r\nSession session = sessionFactory.openSession();\r\nsession.beginTransaction();\r\nuser.getRoles().forEach(role -> session.save(role));\r\nsession.save(user);\r\nsession.getTransaction().commit();\r\nsession.close();\r\n```","```\r\n@Test\r\npublic void whenAccessUserRolesInsideSession_thenSuccess() {\r\n\r\n    User detachedUser = createUserWithRoles();\r\n\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n\r\n    User persistentUser = session.find(User.class, detachedUser.getId());\r\n\r\n    Assert.assertEquals(2, persistentUser.getRoles().size());\r\n\r\n    session.getTransaction().commit();\r\n    session.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenAccessUserRolesOutsideSession_thenThrownException() {\r\n\r\n    User detachedUser = createUserWithRoles();\r\n\r\n    Session session = sessionFactory.openSession();\r\n    session.beginTransaction();\r\n\r\n    User persistentUser = session.find(User.class, detachedUser.getId());\r\n\r\n    session.getTransaction().commit();\r\n    session.close();\r\n\r\n    thrown.expect(LazyInitializationException.class);\r\n    System.out.println(persistentUser.getRoles().size());\r\n}\r\n```","```\r\n<property name=\"hibernate.enable_lazy_load_no_trans\" value=\"true\"/>\r\n```","```\r\n@OneToMany(fetch = FetchType.EAGER)\r\n@JoinColumn(name = \"user_id\")\r\nprivate Set<Role> roles;\r\n```","```\r\nSELECT u FROM User u JOIN FETCH u.roles\r\n```","```\r\nCriteria criteria = session.createCriteria(User.class);\r\ncriteria.setFetchMode(\"roles\", FetchMode.EAGER);\r\n```"]