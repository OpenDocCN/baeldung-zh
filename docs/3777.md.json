["```\r\nclass UsersControllerIntegrationTest : AbstractSpringIntegrationTest() {\r\n\r\n    @Autowired\r\n    lateinit var mvc: MockMvc\r\n\r\n    @MockBean\r\n    lateinit var userService: UserService\r\n\r\n    @Test\r\n    fun links() {\r\n        mvc.perform(post(\"/users\")\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .content(\"\"\"{ \"name\":\"jose\" }\"\"\"))\r\n          .andExpect(status().isCreated)\r\n\r\n        verify(userService).save(\"jose\")\r\n    }\r\n}\r\n\r\ninterface UserService {\r\n    fun save(name: String)\r\n}\r\n```","```\r\n@Test\r\nfun links() {\r\n    mvc.perform(post(\"/users\")\r\n      .contentType(MediaType.APPLICATION_JSON)\r\n      .content(\"\"\"{ \"name\":\"jose\" }\"\"\"))\r\n      .andExpect(status().isCreated)\r\n\r\n    assertThat(\r\n      JdbcTestUtils.countRowsInTable(jdbcTemplate, \"users\"))\r\n      .isOne()\r\n}\r\n```","```\r\n@Test\r\nfun links() {\r\n    mvc.perform(post(\"/users\")\r\n      .contentType(MediaType.APPLICATION_JSON)\r\n      .content(\"\"\"{ \"name\":\"jose\" }\"\"\"))\r\n      .andExpect(status().isCreated)\r\n\r\n    mvc.perform(get(\"/users/jose\"))\r\n      .andExpect(status().isOk)\r\n}\r\n```","```\r\n@SpringBootTest\r\n@ActiveProfiles(\"test\")\r\nabstract class AbstractSpringIntegrationTest {\r\n\r\n    @Rule\r\n    @JvmField\r\n    val springMethodRule = SpringMethodRule()\r\n\r\n    companion object {\r\n        @ClassRule\r\n        @JvmField\r\n        val SPRING_CLASS_RULE = SpringClassRule()\r\n    }\r\n}\r\n```","```\r\n@SpringBootTest\r\n@ActiveProfiles(\"test\")\r\n@AutoConfigureWireMock(port = 8666)\r\n@AutoConfigureMockMvc\r\nabstract class AbstractSpringIntegrationTest {\r\n\r\n    //... spring rules are configured here, skipped for clarity\r\n\r\n    @Autowired\r\n    protected lateinit var wireMockServer: WireMockServer\r\n\r\n    @Autowired\r\n    lateinit var jdbcTemplate: JdbcTemplate\r\n\r\n    @Autowired\r\n    lateinit var repos: Set<MongoRepository<*, *>>\r\n\r\n    @Autowired\r\n    lateinit var cacheManager: CacheManager\r\n\r\n    @Before\r\n    fun resetState() {\r\n        cleanAllDatabases()\r\n        cleanAllCaches()\r\n        resetWiremockStatus()\r\n    }\r\n\r\n    fun cleanAllDatabases() {\r\n        JdbcTestUtils.deleteFromTables(jdbcTemplate, \"table1\", \"table2\")\r\n        jdbcTemplate.update(\"ALTER TABLE table1 ALTER COLUMN id RESTART WITH 1\")\r\n        repos.forEach { it.deleteAll() }\r\n    }\r\n\r\n    fun cleanAllCaches() {\r\n        cacheManager.cacheNames\r\n          .map { cacheManager.getCache(it) }\r\n          .filterNotNull()\r\n          .forEach { it.clear() }\r\n    }\r\n\r\n    fun resetWiremockStatus() {\r\n        wireMockServer.resetAll()\r\n        // set default requests if any\r\n    }\r\n}\r\n```"]