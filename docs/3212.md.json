["```\r\n<dependency>\r\n    <groupId>tech.cassandre.trading.bot</groupId>\r\n    <artifactId>cassandre-trading-bot-spring-boot-starter</artifactId>\r\n    <version>4.2.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.knowm.xchange</groupId>\r\n    <artifactId>xchange-kucoin</artifactId>\r\n    <version>5.0.8</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hsqldb</groupId>\r\n    <artifactId>hsqldb</artifactId>\r\n    <version>2.5.2</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>tech.cassandre.trading.bot</groupId>\r\n    <artifactId>cassandre-trading-bot-spring-boot-starter-test</artifactId>\r\n    <version>4.2.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n# Exchange configuration\r\ncassandre.trading.bot.exchange.name=kucoin\r\n[[emailÂ protected]](/web/20221126233607/https://www.baeldung.com/cdn-cgi/l/email-protection)ail.com\r\ncassandre.trading.bot.exchange.passphrase=cassandre\r\ncassandre.trading.bot.exchange.key=6054ad25365ac6000689a998\r\ncassandre.trading.bot.exchange.secret=af080d55-afe3-47c9-8ec1-4b479fbcc5e7\r\n\r\n# Modes\r\ncassandre.trading.bot.exchange.modes.sandbox=true\r\ncassandre.trading.bot.exchange.modes.dry=false\r\n\r\n# Exchange API calls rates (ms or standard ISO 8601 duration like 'PT5S')\r\ncassandre.trading.bot.exchange.rates.account=2000\r\ncassandre.trading.bot.exchange.rates.ticker=2000\r\ncassandre.trading.bot.exchange.rates.trade=2000\r\n\r\n# Database configuration\r\ncassandre.trading.bot.database.datasource.driver-class-name=org.hsqldb.jdbc.JDBCDriver\r\ncassandre.trading.bot.database.datasource.url=jdbc:hsqldb:mem:cassandre\r\ncassandre.trading.bot.database.datasource.username=sa\r\ncassandre.trading.bot.database.datasource.password= \r\n```","```\r\n@CassandreStrategy\r\npublic class MyFirstStrategy extends BasicCassandreStrategy {\r\n\r\n    @Override\r\n    public Set<CurrencyPairDTO> getRequestedCurrencyPairs() {\r\n        return Set.of(new CurrencyPairDTO(BTC, USDT));\r\n    }\r\n\r\n    @Override\r\n    public Optional<AccountDTO> getTradeAccount(Set<AccountDTO> accounts) {\r\n        return accounts.stream()\r\n          .filter(a -> \"trade\".equals(a.getName()))\r\n          .findFirst();\r\n    }\r\n}\r\n```","```\r\ncurl -s https://api.kucoin.com/api/v1/market/orderbook/level1?symbol=BTC-USDT\r\n```","```\r\n{\r\n  \"time\": 1620227845003,\r\n  \"sequence\": \"1615922903162\",\r\n  \"price\": \"57263.3\",\r\n  \"size\": \"0.00306338\",\r\n  \"bestBid\": \"57259.4\",\r\n  \"bestBidSize\": \"0.00250335\",\r\n  \"bestAsk\": \"57260.4\",\r\n  \"bestAskSize\": \"0.01\"\r\n}\r\n```","```\r\nPositionRulesDTO rules = PositionRulesDTO.builder()\r\n  .stopGainPercentage(4f)\r\n  .stopLossPercentage(25f)\r\n  .create();\r\n```","```\r\ncreateLongPosition(new CurrencyPairDTO(BTC, USDT), new BigDecimal(\"0.01\"), rules);\r\n```","```\r\n@Override\r\npublic void onTickerUpdate(TickerDTO ticker) {\r\n    if (new BigDecimal(\"56000\").compareTo(ticker.getLast()) == -1) {\r\n\r\n        if (canBuy(new CurrencyPairDTO(BTC, USDT), new BigDecimal(\"0.01\"))) {\r\n            PositionRulesDTO rules = PositionRulesDTO.builder()\r\n              .stopGainPercentage(4f)\r\n              .stopLossPercentage(25f)\r\n              .build();\r\n            createLongPosition(new CurrencyPairDTO(BTC, USDT), new BigDecimal(\"0.01\"), rules);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic void onPositionStatusUpdate(PositionDTO position) {\r\n    if (position.getStatus() == OPENED) {\r\n        logger.info(\"> New position opened : {}\", position.getPositionId());\r\n    }\r\n    if (position.getStatus() == CLOSED) {\r\n        logger.info(\"> Position closed : {}\", position.getDescription());\r\n    }\r\n}\r\n```","```\r\nstartDate=`date --date=\"3 months ago\" +\"%s\"`\r\nendDate=`date +\"%s\"`\r\ncurl -s \"https://api.kucoin.com/api/v1/market/candles?type=1day&symbol;=BTC-USDT&startAt;=${startDate}&endAt;=${endDate}\" \\\r\n| jq -r -c \".data[] | @tsv\" \\\r\n| tac $1 > tickers-btc-usdt.tsv\r\n```","```\r\nBTC 1\r\nUSDT 10000\r\nETH 10\r\n```","```\r\n@SpringBootTest\r\n@Import(TickerFluxMock.class)\r\n@DisplayName(\"Simple strategy test\")\r\npublic class MyFirstStrategyLiveTest { \r\n```","```\r\n @Autowired\r\n    private MyFirstStrategy strategy;\r\n\r\n    private final Logger logger = LoggerFactory.getLogger(MyFirstStrategyLiveTest.class);\r\n\r\n    @Autowired\r\n    private TickerFluxMock tickerFluxMock;\r\n\r\n    @Test\r\n    @DisplayName(\"Check gains\")\r\n    public void whenTickersArrives_thenCheckGains() {\r\n        await().forever().until(() -> tickerFluxMock.isFluxDone());\r\n\r\n        HashMap<CurrencyDTO, GainDTO> gains = strategy.getGains();\r\n\r\n        logger.info(\"Cumulated gains:\");\r\n        gains.forEach((currency, gain) -> logger.info(currency + \" : \" + gain.getAmount()));\r\n\r\n        logger.info(\"Position still opened :\");\r\n        strategy.getPositions()\r\n          .values()\r\n          .stream()\r\n          .filter(p -> p.getStatus().equals(OPENED))\r\n          .forEach(p -> logger.info(\" - {} \" + p.getDescription()));\r\n\r\n        assertTrue(gains.get(USDT).getPercentage() > 0);\r\n    }\r\n\r\n}\r\n```"]