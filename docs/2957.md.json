["```\r\nHibernate: select \r\n    order0_.id as id1_2_, \r\n    order0_.orderNumber as orderNum2_2_, \r\n    order0_.version as version3_2_ \r\n  from purchaseOrder order0_\r\nHibernate: select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\nHibernate: select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\nHibernate: select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\n```","```\r\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.stdout.Target=System.out\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=%d{HH:mm:ss,SSS} %-5p [%c] - %m%n\r\nlog4j.rootLogger=info, stdout\r\n\r\n# basic log level for all messages\r\nlog4j.logger.org.hibernate=info\r\n\r\n# SQL statements and parameters\r\nlog4j.logger.org.hibernate.SQL=debug\r\nlog4j.logger.org.hibernate.type.descriptor.sql=trace\r\n```","```\r\n23:03:22,246 DEBUG SQL:92 - select \r\n    order0_.id as id1_2_, \r\n    order0_.orderNumber as orderNum2_2_, \r\n    order0_.version as version3_2_ \r\n  from purchaseOrder order0_ \r\n  where order0_.id=1\r\n23:03:22,254 TRACE BasicExtractor:61 - extracted value ([id1_2_] : [BIGINT]) - [1]\r\n23:03:22,261 TRACE BasicExtractor:61 - extracted value ([orderNum2_2_] : [VARCHAR]) - [order1]\r\n23:03:22,263 TRACE BasicExtractor:61 - extracted value ([version3_2_] : [INTEGER]) - [0]\r\n```","```\r\n23:04:12,123 INFO StatisticalLoggingSessionEventListener:258 - Session Metrics {\r\n 23793 nanoseconds spent acquiring 1 JDBC connections;\r\n 0 nanoseconds spent releasing 0 JDBC connections;\r\n 394686 nanoseconds spent preparing 4 JDBC statements;\r\n 2528603 nanoseconds spent executing 4 JDBC statements;\r\n 0 nanoseconds spent executing 0 JDBC batches;\r\n 0 nanoseconds spent performing 0 L2C puts;\r\n 0 nanoseconds spent performing 0 L2C hits;\r\n 0 nanoseconds spent performing 0 L2C misses;\r\n 9700599 nanoseconds spent executing 1 flushes (flushing a total of 9 entities and 3 collections);\r\n 42921 nanoseconds spent executing 1 partial-flushes (flushing a total of 0 entities and 0 collections)\r\n}\r\n```","```\r\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.stdout.Target=System.out\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=%d{HH:mm:ss,SSS} %-5p [%c] - %m%n\r\nlog4j.rootLogger=info, stdout\r\n\r\n# basic log level for all messages\r\nlog4j.logger.org.hibernate=error\r\n```","```\r\n@Entity\r\n@Table(name = \"purchaseOrder\")\r\npublic class Order implements Serializable {\r\n\r\n    @OneToMany(mappedBy = \"order\", fetch = FetchType.LAZY)\r\n    private Set<OrderItem> items = new HashSet<OrderItem>();\r\n\r\n    ...\r\n}\r\n```","```\r\nList<Order> orders = em.createQuery(\"SELECT o FROM Order o\").getResultList();\r\nfor (Order order : orders) {\r\n    log.info(\"Order: \" + order.getOrderNumber());\r\n    log.info(\"Number of items: \" + order.getItems().size());\r\n}\r\n```","```\r\n22:47:30,065 DEBUG SQL:92 - select \r\n    order0_.id as id1_2_, \r\n    order0_.orderNumber as orderNum2_2_, \r\n    order0_.version as version3_2_ \r\n  from purchaseOrder order0_\r\n22:47:30,136 INFO NamedEntityGraphTest:58 - Order: order1\r\n22:47:30,140 DEBUG SQL:92 - select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\n22:47:30,171 INFO NamedEntityGraphTest:59 - Number of items: 2\r\n22:47:30,171 INFO NamedEntityGraphTest:58 - Order: order2\r\n22:47:30,172 DEBUG SQL:92 - select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\n22:47:30,174 INFO NamedEntityGraphTest:59 - Number of items: 2\r\n22:47:30,174 INFO NamedEntityGraphTest:58 - Order: order3\r\n22:47:30,174 DEBUG SQL:92 - select \r\n    items0_.order_id as order_id4_0_0_, \r\n    items0_.id as id1_0_0_, \r\n    items0_.id as id1_0_1_, \r\n    items0_.order_id as order_id4_0_1_, \r\n    items0_.product_id as product_5_0_1_, \r\n    items0_.quantity as quantity2_0_1_, \r\n    items0_.version as version3_0_1_ \r\n  from OrderItem items0_ \r\n  where items0_.order_id=?\r\n22:47:30,176 INFO NamedEntityGraphTest:59 - Number of items: 2\r\n```","```\r\n@Entity\r\n@Table(name = \"purchase_order\")\r\n@NamedEntityGraph(\r\n  name = \"graph.Order.items\", \r\n  attributeNodes = @NamedAttributeNode(\"items\"))\r\npublic class Order implements Serializable {\r\n\r\n    ...\r\n}\r\n```","```\r\nEntityGraph graph = this.em.getEntityGraph(\"graph.Order.items\");\r\n\r\nMap hints = new HashMap();\r\nhints.put(\"javax.persistence.fetchgraph\", graph);\r\n\r\nreturn this.em.find(Order.class, 1L, hints);\r\n```","```\r\n17:34:51,310 DEBUG [org.hibernate.loader.plan.build.spi.LoadPlanTreePrinter] (pool-2-thread-1) \r\n  LoadPlan(entity=blog.thoughts.on.java.jpa21.entity.graph.model.Order) \r\n    - Returns \r\n      - EntityReturnImpl(\r\n          entity=blog.thoughts.on.java.jpa21.entity.graph.model.Order, \r\n          querySpaceUid=<gen:0>, \r\n          path=blog.thoughts.on.java.jpa21.entity.graph.model.Order) \r\n        - CollectionAttributeFetchImpl(\r\n            collection=blog.thoughts.on.java.jpa21.entity.graph.model.Order.items, \r\n            querySpaceUid=<gen:1>, \r\n            path=blog.thoughts.on.java.jpa21.entity.graph.model.Order.items)\r\n          - (collection element) CollectionFetchableElementEntityGraph(\r\n              entity=blog.thoughts.on.java.jpa21.entity.graph.model.OrderItem, \r\n              querySpaceUid=<gen:2>, \r\n              path=blog.thoughts.on.java.jpa21.entity.graph.model.Order.items.<elements>) \r\n            - EntityAttributeFetchImpl(entity=blog.thoughts.on.java.jpa21.entity.graph.model.Product,\r\n                querySpaceUid=<gen:3>, \r\n                path=blog.thoughts.on.java.jpa21.entity.graph.model.Order.items.<elements>.product) \r\n    - QuerySpaces \r\n      - EntityQuerySpaceImpl(uid=<gen:0>, entity=blog.thoughts.on.java.jpa21.entity.graph.model.Order)\r\n        - SQL table alias mapping - order0_ \r\n        - alias suffix - 0_ \r\n        - suffixed key columns - {id1_2_0_} \r\n        - JOIN (JoinDefinedByMetadata(items)) : <gen:0> -> <gen:1> \r\n          - CollectionQuerySpaceImpl(uid=<gen:1>, \r\n              collection=blog.thoughts.on.java.jpa21.entity.graph.model.Order.items) \r\n            - SQL table alias mapping - items1_ \r\n            - alias suffix - 1_ \r\n            - suffixed key columns - {order_id4_2_1_} \r\n            - entity-element alias suffix - 2_ \r\n            - 2_entity-element suffixed key columns - id1_0_2_ \r\n            - JOIN (JoinDefinedByMetadata(elements)) : <gen:1> -> <gen:2> \r\n              - EntityQuerySpaceImpl(uid=<gen:2>, \r\n                  entity=blog.thoughts.on.java.jpa21.entity.graph.model.OrderItem) \r\n                - SQL table alias mapping - items1_ \r\n                - alias suffix - 2_ \r\n                - suffixed key columns - {id1_0_2_}\r\n                - JOIN (JoinDefinedByMetadata(product)) : <gen:2> -> <gen:3> \r\n                  - EntityQuerySpaceImpl(uid=<gen:3>, \r\n                      entity=blog.thoughts.on.java.jpa21.entity.graph.model.Product) \r\n                    - SQL table alias mapping - product2_ \r\n                    - alias suffix - 3_ \r\n                    - suffixed key columns - {id1_1_3_}\r\n17:34:51,311 DEBUG [org.hibernate.loader.entity.plan.EntityLoader] (pool-2-thread-1) \r\n  Static select for entity blog.thoughts.on.java.jpa21.entity.graph.model.Order [NONE:-1]: \r\n  select order0_.id as id1_2_0_, \r\n    order0_.orderNumber as orderNum2_2_0_, \r\n    order0_.version as version3_2_0_, \r\n    items1_.order_id as order_id4_2_1_, \r\n    items1_.id as id1_0_1_, \r\n    items1_.id as id1_0_2_, \r\n    items1_.order_id as order_id4_0_2_, \r\n    items1_.product_id as product_5_0_2_, \r\n    items1_.quantity as quantity2_0_2_, \r\n    items1_.version as version3_0_2_, \r\n    product2_.id as id1_1_3_, \r\n    product2_.name as name2_1_3_, \r\n    product2_.version as version3_1_3_ \r\n  from purchase_order order0_ \r\n    left outer join OrderItem items1_ on order0_.id=items1_.order_id \r\n    left outer join Product product2_ on items1_.product_id=product2_.id \r\n  where order0_.id=?\r\n```","```\r\n@Entity\r\n@Table(name = \"purchase_order\")\r\n@NamedEntityGraph(\r\n  name = \"graph.Order.items\", \r\n  attributeNodes = @NamedAttributeNode(value = \"items\", subgraph = \"items\"), \r\n  subgraphs = @NamedSubgraph(name = \"items\", attributeNodes = @NamedAttributeNode(\"product\")))\r\npublic class Order implements Serializable {\r\n\r\n    ...\r\n}\r\n```","```\r\n22:58:05,829 DEBUG SQL:92 - select \r\n  product0_.id as id1_1_, \r\n  product0_.name as name2_1_, \r\n  product0_.price as price3_1_, \r\n  product0_.version as version4_1_ from Product product0_\r\n22:58:05,883 DEBUG SQL:92 - update Product set name=?, price=?, version=? where id=? and version=?\r\n22:58:05,889 DEBUG SQL:92 - update Product set name=?, price=?, version=? where id=? and version=?\r\n22:58:05,891 DEBUG SQL:92 - update Product set name=?, price=?, version=? where id=? and version=?\r\n22:58:05,893 DEBUG SQL:92 - update Product set name=?, price=?, version=? where id=? and version=?\r\n22:58:05,900 DEBUG SQL:92 - update Product set name=?, price=?, version=? where id=? and version=?\r\n```","```\r\nem.createQuery(\"UPDATE Product p SET p.price = p.price*0.1\").executeUpdate();\r\n```"]