["```\r\npublic List<User> getUsersList(int page, int size, String sortDir, String sort) {\r\n    PageRequest pageReq = new PageRequest(page, size, Sort.Direction.fromString(sortDir), sort);\r\n    return userRepository.findAll(pageReq).getContent();\r\n}\r\npublic PagingInfo generatePagingInfo(int page, int size) {\r\n    return new PagingInfo(page, size, userRepository.count());\r\n}\r\n```","```\r\npublic class UserDto {\r\n    private Long id;\r\n\r\n    private String username;\r\n\r\n    private Set<Role> roles;\r\n\r\n    private long scheduledPostsCount;\r\n}\r\n```","```\r\npublic List<UserDto> getUsersList(\r\n  @RequestParam(value = \"page\", required = false, defaultValue = \"0\") int page, \r\n  @RequestParam(value = \"size\", required = false, defaultValue = \"10\") int size,\r\n  @RequestParam(value = \"sortDir\", required = false, defaultValue = \"asc\") String sortDir, \r\n  @RequestParam(value = \"sort\", required = false, defaultValue = \"username\") String sort, \r\n  HttpServletResponse response) {\r\n    response.addHeader(\"PAGING_INFO\", userService.generatePagingInfo(page, size).toString());\r\n    List<User> users = userService.getUsersList(page, size, sortDir, sort);\r\n\r\n    return users.stream().map(\r\n      user -> convertUserEntityToDto(user)).collect(Collectors.toList());\r\n}\r\n```","```\r\nprivate UserDto convertUserEntityToDto(User user) {\r\n    UserDto dto = modelMapper.map(user, UserDto.class);\r\n    dto.setScheduledPostsCount(scheduledPostService.countScheduledPostsByUser(user));\r\n    return dto;\r\n}\r\n```","```\r\n<table><thead><tr>\r\n<th>Username</th><th>Scheduled Posts Count</th><th>Roles</th><th>Actions</th>\r\n</tr></thead></table>\r\n\r\n<script>           \r\n$(function(){\r\n    $('table').dataTable( {\r\n        \"processing\": true,\r\n        \"searching\":false,\r\n        \"columnDefs\": [\r\n            { \"name\": \"username\",   \"targets\": 0},\r\n            { \"name\": \"scheduledPostsCount\",   \"targets\": 1,\"orderable\": false},\r\n            { \"targets\": 2, \"data\": \"roles\", \"width\":\"20%\", \"orderable\": false, \r\n              \"render\": \r\n                function ( data, type, full, meta ) { return extractRolesName(data); } },\r\n            { \"targets\": 3, \"data\": \"id\", \"render\": function ( data, type, full, meta ) {\r\n                return '<a onclick=\"showEditModal('+data+',\\'' + \r\n                  extractRolesName(full.roles)+'\\')\">Modify User Roles</a>'; }}\r\n                     ],\r\n        \"columns\": [\r\n            { \"data\": \"username\" },\r\n            { \"data\": \"scheduledPostsCount\" }\r\n        ],\r\n        \"serverSide\": true,\r\n        \"ajax\": function(data, callback, settings) {\r\n            $.get('admin/users', {\r\n                size: data.length, \r\n                page: (data.start/data.length), \r\n                sortDir: data.order[0].dir, \r\n                sort: data.columns[data.order[0].column].name\r\n            }, function(res,textStatus, request) {\r\n                var pagingInfo = request.getResponseHeader('PAGING_INFO');\r\n                var total = pagingInfo.split(\",\")[0].split(\"=\")[1];\r\n                callback({\r\n                    recordsTotal: total,recordsFiltered: total,data: res\r\n            });});\r\n        }\r\n});});\r\n</script>\r\n```","```\r\nprivate boolean enabled;\r\n```","```\r\npublic boolean isEnabled() {\r\n    return user.isEnabled();\r\n}\r\n```","```\r\n@PreAuthorize(\"hasRole('USER_WRITE_PRIVILEGE')\")\r\n@RequestMapping(value = \"/users/{id}\", method = RequestMethod.PUT)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void setUserEnabled(@PathVariable(\"id\") Long id, \r\n  @RequestParam(value = \"enabled\") boolean enabled) {\r\n    userService.setUserEnabled(id, enabled);\r\n}\r\n```","```\r\npublic void setUserEnabled(Long userId, boolean enabled) {\r\n    User user = userRepository.findOne(userId);\r\n    user.setEnabled(enabled);\r\n    userRepository.save(user);\r\n}\r\n```","```\r\npublic class SessionListener implements HttpSessionListener {\r\n\r\n    @Override\r\n    public void sessionCreated(HttpSessionEvent event) {\r\n        event.getSession().setMaxInactiveInterval(5 * 60);\r\n    }\r\n}\r\n```","```\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http \r\n    ...\r\n        .sessionManagement()\r\n        .invalidSessionUrl(\"/?invalidSession=true\")\r\n        .sessionFixation().none();\r\n}\r\n```","```\r\npublic void register(HttpServletRequest request, \r\n  @RequestParam(\"username\") String username, \r\n  @RequestParam(\"email\") String email, \r\n  @RequestParam(\"password\") String password) {\r\n    String appUrl = \r\n      \"http://\" + request.getServerName() + \":\" + \r\n       request.getServerPort() + request.getContextPath();\r\n    userService.registerNewUser(username, email, password, appUrl);\r\n}\r\n```","```\r\n@Override\r\npublic void registerNewUser(String username, String email, String password, String appUrl) {\r\n    ...\r\n    user.setEnabled(false);\r\n    userRepository.save(user);\r\n    eventPublisher.publishEvent(new OnRegistrationCompleteEvent(user, appUrl));\r\n}\r\n```","```\r\n@RequestMapping(value = \"/user/regitrationConfirm\", method = RequestMethod.GET)\r\npublic String confirmRegistration(Model model, @RequestParam(\"token\") String token) {\r\n    String result = userService.confirmRegistration(token);\r\n    if (result == null) {\r\n        return \"redirect:/?msg=registration confirmed successfully\";\r\n    }\r\n    model.addAttribute(\"msg\", result);\r\n    return \"submissionResponse\";\r\n}\r\n```","```\r\npublic String confirmRegistration(String token) {\r\n    VerificationToken verificationToken = tokenRepository.findByToken(token);\r\n    if (verificationToken == null) {\r\n        return \"Invalid Token\";\r\n    }\r\n\r\n    Calendar cal = Calendar.getInstance();\r\n    if ((verificationToken.getExpiryDate().getTime() - cal.getTime().getTime()) <= 0) {\r\n        return \"Token Expired\";\r\n    }\r\n\r\n    User user = verificationToken.getUser();\r\n    user.setEnabled(true);\r\n    userRepository.save(user);\r\n    return null;\r\n}\r\n```","```\r\n@RequestMapping(value = \"/users/passwordReset\", method = RequestMethod.POST)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void passwordReset(HttpServletRequest request, @RequestParam(\"email\") String email) {\r\n    String appUrl = \"http://\" + request.getServerName() + \":\" + \r\n      request.getServerPort() + request.getContextPath();\r\n    userService.resetPassword(email, appUrl);\r\n}\r\n```","```\r\npublic void resetPassword(String userEmail, String appUrl) {\r\n    Preference preference = preferenceRepository.findByEmail(userEmail);\r\n    User user = userRepository.findByPreference(preference);\r\n    if (user == null) {\r\n        throw new UserNotFoundException(\"User not found\");\r\n    }\r\n\r\n    String token = UUID.randomUUID().toString();\r\n    PasswordResetToken myToken = new PasswordResetToken(token, user);\r\n    passwordResetTokenRepository.save(myToken);\r\n    SimpleMailMessage email = constructResetTokenEmail(appUrl, token, user);\r\n    mailSender.send(email);\r\n}\r\n```","```\r\n@RequestMapping(value = \"/users/resetPassword\", method = RequestMethod.GET)\r\npublic String resetPassword(\r\n  Model model, \r\n  @RequestParam(\"id\") long id, \r\n  @RequestParam(\"token\") String token) {\r\n    String result = userService.checkPasswordResetToken(id, token);\r\n    if (result == null) {\r\n        return \"updatePassword\";\r\n    }\r\n    model.addAttribute(\"msg\", result);\r\n    return \"submissionResponse\";\r\n}\r\n```","```\r\npublic String checkPasswordResetToken(long userId, String token) {\r\n    PasswordResetToken passToken = passwordResetTokenRepository.findByToken(token);\r\n    if ((passToken == null) || (passToken.getUser().getId() != userId)) {\r\n        return \"Invalid Token\";\r\n    }\r\n\r\n    Calendar cal = Calendar.getInstance();\r\n    if ((passToken.getExpiryDate().getTime() - cal.getTime().getTime()) <= 0) {\r\n        return \"Token Expired\";\r\n    }\r\n\r\n    UserPrincipal userPrincipal = new UserPrincipal(passToken.getUser());\r\n    Authentication auth = new UsernamePasswordAuthenticationToken(\r\n      userPrincipal, null, userPrincipal.getAuthorities());\r\n    SecurityContextHolder.getContext().setAuthentication(auth);\r\n    return null;\r\n}\r\n```","```\r\n@RequestMapping(value = \"/users/updatePassword\", method = RequestMethod.POST)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void changeUserPassword(@RequestParam(\"password\") String password) {\r\n    userService.changeUserPassword(userService.getCurrentUser(), password);\r\n}\r\n```","```\r\n@RequestMapping(value = \"/users/changePassword\", method = RequestMethod.POST)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void changeUserPassword(@RequestParam(\"password\") String password, \r\n  @RequestParam(\"oldpassword\") String oldPassword) {\r\n    User user = userService.getCurrentUser();\r\n    if (!userService.checkIfValidOldPassword(user, oldPassword)) {\r\n        throw new InvalidOldPasswordException(\"Invalid old password\");\r\n    }\r\n    userService.changeUserPassword(user, password);\r\n}\r\n```","```\r\npublic void changeUserPassword(User user, String password) {\r\n    user.setPassword(passwordEncoder.encode(password));\r\n    userRepository.save(user);\r\n}\r\n```","```\r\n...\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>1.2.5.RELEASE</version>\r\n</parent>\r\n\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-web</artifactId>\r\n    </dependency>\r\n\r\n    <dependency>\r\n       <groupId>org.aspectj</groupId>\r\n       <artifactId>aspectjweaver</artifactId>\r\n     </dependency>\r\n...\r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    @Bean\r\n    public SessionListener sessionListener() {\r\n        return new SessionListener();\r\n    }\r\n\r\n    @Bean\r\n    public RequestContextListener requestContextListener() {\r\n        return new RequestContextListener();\r\n    }\r\n\r\n    public static void main(String... args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n@ConfigurationProperties(prefix = \"reddit\")\r\n@Component\r\npublic class RedditProperties {\r\n\r\n    private String clientID;\r\n    private String clientSecret;\r\n    private String accessTokenUri;\r\n    private String userAuthorizationUri;\r\n    private String redirectUri;\r\n\r\n    public String getClientID() {\r\n        return clientID;\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\n@Autowired\r\nprivate RedditProperties redditProperties;\r\n\r\n@Bean\r\npublic OAuth2ProtectedResourceDetails reddit() {\r\n    AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\r\n    details.setClientId(redditProperties.getClientID());\r\n    details.setClientSecret(redditProperties.getClientSecret());\r\n    details.setAccessTokenUri(redditProperties.getAccessTokenUri());\r\n    details.setUserAuthorizationUri(redditProperties.getUserAuthorizationUri());\r\n    details.setPreEstablishedRedirectUri(redditProperties.getRedirectUri());\r\n    ...\r\n    return details;\r\n}\r\n```"]