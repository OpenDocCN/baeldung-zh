["```\r\n@Configuration\r\n@EnableCaching\r\npublic class MultipleCacheManagerConfig {}\r\n```","```\r\n@Cacheable(cacheNames = \"customers\")\r\npublic Customer getCustomerDetail(Integer customerId) {\r\n    return customerDetailRepository.getCustomerDetail(customerId);\r\n}\r\n```","```\r\n@Configuration\r\n@EnableCaching\r\npublic class MultipleCacheManagerConfig {\r\n\r\n    @Bean\r\n    @Primary\r\n    public CacheManager cacheManager() {\r\n        CaffeineCacheManager cacheManager = new CaffeineCacheManager(\"customers\", \"orders\");\r\n        cacheManager.setCaffeine(Caffeine.newBuilder()\r\n          .initialCapacity(200)\r\n          .maximumSize(500)\r\n          .weakKeys()\r\n          .recordStats());\r\n        return cacheManager;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager alternateCacheManager() {\r\n        return new ConcurrentMapCacheManager(\"customerOrders\", \"orderprice\");\r\n    }\r\n}\r\n```","```\r\n@Cacheable(cacheNames = \"customers\")\r\npublic Customer getCustomerDetail(Integer customerId) {\r\n    return customerDetailRepository.getCustomerDetail(customerId);\r\n}\r\n\r\n@Cacheable(cacheNames = \"customerOrders\", cacheManager = \"alternateCacheManager\")\r\npublic List<Order> getCustomerOrders(Integer customerId) {\r\n    return customerDetailRepository.getCustomerOrders(customerId);\r\n}\r\n```","```\r\n@Configuration\r\n@EnableCaching\r\npublic class MultipleCacheManagerConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public CacheManager cacheManager() {\r\n        CaffeineCacheManager cacheManager = new CaffeineCacheManager(\"customers\", \"orders\");\r\n        cacheManager.setCaffeine(Caffeine.newBuilder()\r\n          .initialCapacity(200)\r\n          .maximumSize(500)\r\n          .weakKeys()\r\n          .recordStats());\r\n        return cacheManager;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager alternateCacheManager() {\r\n        return new ConcurrentMapCacheManager(\"customerOrders\", \"orderprice\");\r\n    }\r\n}\r\n```","```\r\npublic class MultipleCacheResolver implements CacheResolver {\r\n\r\n    private final CacheManager simpleCacheManager;\r\n    private final CacheManager caffeineCacheManager;    \r\n    private static final String ORDER_CACHE = \"orders\";    \r\n    private static final String ORDER_PRICE_CACHE = \"orderprice\";\r\n\r\n    public MultipleCacheResolver(CacheManager simpleCacheManager,CacheManager caffeineCacheManager) {\r\n        this.simpleCacheManager = simpleCacheManager;\r\n        this.caffeineCacheManager=caffeineCacheManager;\r\n\r\n    }\r\n\r\n    @Override\r\n    public Collection<? extends Cache> resolveCaches(CacheOperationInvocationContext<?> context) {\r\n        Collection<Cache> caches = new ArrayList<Cache>();\r\n        if (\"getOrderDetail\".equals(context.getMethod().getName())) {\r\n            caches.add(caffeineCacheManager.getCache(ORDER_CACHE));\r\n        } else {\r\n            caches.add(simpleCacheManager.getCache(ORDER_PRICE_CACHE));\r\n        }\r\n        return caches;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableCaching\r\npublic class MultipleCacheManagerConfig extends CachingConfigurerSupport {\r\n\r\n    @Bean\r\n    public CacheManager cacheManager() {\r\n        CaffeineCacheManager cacheManager = new CaffeineCacheManager(\"customers\", \"orders\");\r\n        cacheManager.setCaffeine(Caffeine.newBuilder()\r\n          .initialCapacity(200)\r\n          .maximumSize(500)\r\n          .weakKeys()\r\n          .recordStats());\r\n        return cacheManager;\r\n    }\r\n\r\n    @Bean\r\n    public CacheManager alternateCacheManager() {\r\n        return new ConcurrentMapCacheManager(\"customerOrders\", \"orderprice\");\r\n    }\r\n\r\n    @Bean\r\n    public CacheResolver cacheResolver() {\r\n        return new MultipleCacheResolver(alternateCacheManager(), cacheManager());\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class OrderDetailBO {\r\n\r\n    @Autowired\r\n    private OrderDetailRepository orderDetailRepository;\r\n\r\n    @Cacheable(cacheNames = \"orders\", cacheResolver = \"cacheResolver\")\r\n    public Order getOrderDetail(Integer orderId) {\r\n        return orderDetailRepository.getOrderDetail(orderId);\r\n    }\r\n\r\n    @Cacheable(cacheNames = \"orderprice\", cacheResolver = \"cacheResolver\")\r\n    public double getOrderPrice(Integer orderId) {\r\n        return orderDetailRepository.getOrderPrice(orderId);\r\n    }\r\n}\r\n```"]