["```\r\npublic void simpleMethod() throws Exception {\r\n    // ...\r\n}\r\n```","```\r\nif (task.isTooComplicated()) {\r\n    throw new TooComplicatedException(\"The task is too complicated\");\r\n}\r\n```","```\r\ntry {\r\n    // ...\r\n} catch (ExceptionType1 ex) {\r\n    // ...\r\n} catch (ExceptionType2 ex) {\r\n    // ...\r\n} finally {\r\n    // ...\r\n}\r\n```","```\r\ntry {\r\n    // ...\r\n} catch (Exception ex) {\r\n    // ...\r\n}\r\n```","```\r\ntry {\r\n    // ...\r\n} catch (FileNotFoundException ex) {\r\n    // ...\r\n} catch (EOFException ex) {\r\n    // ...\r\n}\r\n```","```\r\ntry {\r\n    // ...\r\n} catch (FileNotFoundException | EOFException ex) {\r\n    // ...\r\n}\r\n```","```\r\nInteger[][] ints = { { 1, 2, 3 }, { null }, { 7, 8, 9 } };\r\nSystem.out.println(\"value = \" + ints[1][1].intValue());\r\n```","```\r\ntry {\r\n    task.readConfigFile();\r\n} catch (FileNotFoundException ex) {\r\n    throw new TaskException(\"Could not perform task\", ex);\r\n}\r\n```","```\r\nList<Integer> integers = Arrays.asList(3, 9, 7, 0, 10, 20);\r\nintegers.forEach(i -> {\r\n    if (i == 0) {\r\n        throw new IllegalArgumentException(\"Zero not allowed\");\r\n    }\r\n    System.out.println(Math.PI / i);\r\n});\r\n```","```\r\n@FunctionalInterface\r\npublic static interface CheckedFunction<T> {\r\n    void apply(T t) throws Exception;\r\n}\r\n```","```\r\npublic void processTasks(\r\n  List<Task> taks, CheckedFunction<Task> checkedFunction) {\r\n    for (Task task : taks) {\r\n        try {\r\n            checkedFunction.apply(task);\r\n        } catch (Exception e) {\r\n            // ...\r\n        }\r\n    }\r\n}\r\n\r\nprocessTasks(taskList, t -> {\r\n    // ...\r\n    throw new Exception(\"Something happened\");\r\n});\r\n```","```\r\nclass Parent {\r\n    void doSomething() {\r\n        // ...\r\n    }\r\n}\r\n\r\nclass Child extends Parent {\r\n    void doSomething() throws IllegalArgumentException {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nclass Parent {\r\n    void doSomething() {\r\n        // ...\r\n    }\r\n}\r\n\r\nclass Child extends Parent {\r\n    void doSomething() throws IOException {\r\n        // Compilation error\r\n    }\r\n}\r\n```","```\r\nclass Parent {\r\n    void doSomething() throws IOException, ParseException {\r\n        // ...\r\n    }\r\n\r\n    void doSomethingElse() throws IOException {\r\n        // ...\r\n    }\r\n}\r\n\r\nclass Child extends Parent {\r\n    void doSomething() throws IOException {\r\n        // ...\r\n    }\r\n\r\n    void doSomethingElse() throws FileNotFoundException, EOFException {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nclass Parent {\r\n    void doSomething() throws FileNotFoundException {\r\n        // ...\r\n    }\r\n}\r\n\r\nclass Child extends Parent {\r\n    void doSomething() throws IOException {\r\n        // Compilation error\r\n    }\r\n}\r\n```","```\r\nclass Parent {\r\n    void doSomething() throws IllegalArgumentException {\r\n        // ...\r\n    }\r\n}\r\n\r\nclass Child extends Parent {\r\n    void doSomething()\r\n      throws ArithmeticException, BufferOverflowException {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\nvoid doSomething() {\r\n    // ...\r\n    throw new RuntimeException(new Exception(\"Chained Exception\"));\r\n}\r\n```","```\r\npublic <T extends Throwable> T sneakyThrow(Throwable ex) throws T {\r\n    throw (T) ex;\r\n}\r\n\r\npublic void methodWithoutThrows() {\r\n    this.<RuntimeException>sneakyThrow(new Exception(\"Checked Exception\"));\r\n}\r\n```"]