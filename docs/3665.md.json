["```\r\n$ terraform -v\r\nTerraform v0.12.24\r\n```","```\r\n$ terraform\r\nUsage: terraform [-version] [-help] <command> [args]\r\n... help content omitted\r\n```","```\r\n$ cd $HOME\r\n$ mkdir hello-terraform\r\n$ cd hello-terraform\r\n$ cat > main.tf <<EOF\r\nprovider \"local\" {\r\n  version = \"~> 1.4\"\r\n}\r\nresource \"local_file\" \"hello\" {\r\n  content = \"Hello, Terraform\"\r\n  filename = \"hello.txt\"\r\n}\r\nEOF\r\n```","```\r\n$ terraform init\r\n\r\nInitializing the backend...\r\n\r\nInitializing provider plugins...\r\n- Checking for available provider plugins...\r\n- Downloading plugin for provider \"local\" (hashicorp/local) 1.4.0...\r\n\r\nTerraform has been successfully initialized!\r\n... more messages omitted\r\n```","```\r\n$ terraform plan\r\n... messages omitted\r\nTerraform will perform the following actions:\r\n\r\n  # local_file.hello will be created\r\n  + resource \"local_file\" \"hello\" {\r\n      + content              = \"Hello, Terraform\"\r\n      + directory_permission = \"0777\"\r\n      + file_permission      = \"0777\"\r\n      + filename             = \"hello.txt\"\r\n      + id                   = (known after apply)\r\n    }\r\n\r\nPlan: 1 to add, 0 to change, 0 to destroy.\r\n... messages omitted \r\n```","```\r\n$ terraform apply\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # local_file.hello will be created\r\n  + resource \"local_file\" \"hello\" {\r\n      + content              = \"Hello, Terraform\"\r\n      + directory_permission = \"0777\"\r\n      + file_permission      = \"0777\"\r\n      + filename             = \"hello.txt\"\r\n      + id                   = (known after apply)\r\n    }\r\n\r\nPlan: 1 to add, 0 to change, 0 to destroy.\r\n\r\nDo you want to perform these actions?\r\n  Terraform will perform the actions described above.\r\n  Only 'yes' will be accepted to approve.\r\n\r\n  Enter a value: yes\r\n\r\nlocal_file.hello: Creating...\r\nlocal_file.hello: Creation complete after 0s [id=392b5481eae4ab2178340f62b752297f72695d57]\r\n\r\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\r\n```","```\r\n$ cat hello.txt\r\nHello, Terraform\r\n```","```\r\n$ terraform apply -auto-approve\r\nlocal_file.hello: Refreshing state... [id=392b5481eae4ab2178340f62b752297f72695d57]\r\n\r\nApply complete! Resources: 0 added, 0 changed, 0 destroyed.\r\n```","```\r\n$ echo foo > hello.txt\r\n$ terraform plan\r\nRefreshing Terraform state in-memory prior to plan...\r\nThe refreshed state will be used to calculate this plan, but will not be\r\npersisted to local or remote state storage.\r\n\r\nlocal_file.hello: Refreshing state... [id=392b5481eae4ab2178340f62b752297f72695d57]\r\n\r\n------------------------------------------------------------------------\r\n\r\nAn execution plan has been generated and is shown below.\r\nResource actions are indicated with the following symbols:\r\n  + create\r\n\r\nTerraform will perform the following actions:\r\n\r\n  # local_file.hello will be created\r\n  + resource \"local_file\" \"hello\" {\r\n      + content              = \"Hello, Terraform\"\r\n      + directory_permission = \"0777\"\r\n      + file_permission      = \"0777\"\r\n      + filename             = \"hello.txt\"\r\n      + id                   = (known after apply)\r\n    }\r\n\r\nPlan: 1 to add, 0 to change, 0 to destroy.\r\n... more messages omitted\r\n```","```\r\n$ terraform apply -auto-approve\r\n... messages omitted\r\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\r\n\r\n$ cat hello.txt\r\nHello, Terraform\r\n```","```\r\nprovider \"kubernetes\" {\r\n  version = \"~> 1.10\"\r\n}\r\n```","```\r\nresource \"aws_instance\" \"web\" {\r\n  ami = \"some-ami-id\"\r\n  instance_type = \"t2.micro\"\r\n}\r\n```","```\r\nresource \"aws_instance\" \"web\" {\r\n  ami = \"some-ami-id\"\r\n  instance_type = \"t2.micro\"\r\n  subnet_id = aws_subnet.frontend.id\r\n}\r\nresource \"aws_subnet\" \"frontend\" {\r\n  vpc_id = aws_vpc.apps.id\r\n  cidr_block = \"10.0.1.0/24\"\r\n}\r\nresource \"aws_vpc\" \"apps\" {\r\n  cidr_block = \"10.0.0.0/16\"\r\n} \r\n```","```\r\nresource \"aws_instance\" \"server\" {\r\n  count = var.server_count \r\n  ami = \"ami-xxxxxxx\"\r\n  instance_type = \"t2.micro\"\r\n  tags = {\r\n    Name = \"WebServer - ${count.index}\"\r\n  }\r\n}\r\n```","```\r\nvariable \"instances\" {\r\n  type = map(string)\r\n}\r\nresource \"aws_instance\" \"server\" {\r\n  for_each = var.instances \r\n  ami = each.value\r\n  instance_type = \"t2.micro\"\r\n  tags = {\r\n    Name = each.key\r\n  }\r\n}\r\n```","```\r\ndata \"aws_ami\" \"ubuntu\" {\r\n  most_recent = true\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"ubunimg/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n  owners = [\"099720109477\"] # Canonical\r\n}\r\n```","```\r\nresource \"aws_instance\" \"web\" {\r\n  ami = data.aws_ami.ubuntu.id \r\n  instance_type = \"t2.micro\"\r\n}\r\n```","```\r\nterraform {\r\n  backend \"s3\" {\r\n    bucket = \"some-bucket\"\r\n    key = \"some-storage-key\"\r\n    region = \"us-east-1\"\r\n  }\r\n}\r\n```","```\r\nmodule \"networking\" {\r\n  source = \"./networking\"\r\n  create_public_ip = true\r\n}\r\n```","```\r\nvariable \"myvar\" {\r\n  type = string\r\n  default = \"Some Value\"\r\n  description = \"MyVar description\"\r\n}\r\n```","```\r\nresource \"xxx_type\" \"some_name\" {\r\n  arg = var.myvar\r\n}\r\n```","```\r\noutput \"web_addr\" {\r\n  value = aws_instance.web.private_ip\r\n  description = \"Web server's private IP address\"\r\n}\r\n```","```\r\nlocals {\r\n  vpc_id = module.network.vpc_id\r\n}\r\nmodule \"network\" {\r\n  source = \"./network\"\r\n}\r\nmodule \"service1\" {\r\n  source = \"./service1\"\r\n  vpc_id = local.vpc_id\r\n}\r\nmodule \"service2\" {\r\n  source = \"./service2\"\r\n  vpc_id = local.vpc_id\r\n}\r\n```"]