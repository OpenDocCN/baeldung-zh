["```\r\npublic interface ChristmasTree {\r\n    String decorate();\r\n}\r\n```","```\r\npublic class ChristmasTreeImpl implements ChristmasTree {\r\n\r\n    @Override\r\n    public String decorate() {\r\n        return \"Christmas tree\";\r\n    }\r\n}\r\n```","```\r\npublic abstract class TreeDecorator implements ChristmasTree {\r\n    private ChristmasTree tree;\r\n\r\n    // standard constructors\r\n    @Override\r\n    public String decorate() {\r\n        return tree.decorate();\r\n    }\r\n}\r\n```","```\r\npublic class BubbleLights extends TreeDecorator {\r\n\r\n    public BubbleLights(ChristmasTree tree) {\r\n        super(tree);\r\n    }\r\n\r\n    public String decorate() {\r\n        return super.decorate() + decorateWithBubbleLights();\r\n    }\r\n\r\n    private String decorateWithBubbleLights() {\r\n        return \" with Bubble Lights\";\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDecoratorsInjectedAtRuntime_thenConfigSuccess() {\r\n    ChristmasTree tree1 = new Garland(new ChristmasTreeImpl());\r\n    assertEquals(tree1.decorate(), \r\n      \"Christmas tree with Garland\");\r\n\r\n    ChristmasTree tree2 = new BubbleLights(\r\n      new Garland(new Garland(new ChristmasTreeImpl())));\r\n    assertEquals(tree2.decorate(), \r\n      \"Christmas tree with Garland with Garland with Bubble Lights\");\r\n}\r\n```"]