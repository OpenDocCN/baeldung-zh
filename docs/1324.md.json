["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n    <version>2.6.4</version>\r\n</dependency>\r\n```","```\r\n@FunctionalInterface\r\npublic interface HandlerFunction<T extends ServerResponse> {\r\n    Mono<T> handle(ServerRequest request);\r\n}\r\n```","```\r\n@FunctionalInterface\r\npublic interface RouterFunction<T extends ServerResponse> {\r\n    Mono<HandlerFunction<T>> route(ServerRequest request);\r\n    // ...\r\n}\r\n```","```\r\npublic static <T extends ServerResponse> RouterFunction<T> route(\r\n  RequestPredicate predicate,\r\n  HandlerFunction<T> handlerFunction)\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> getEmployeeByIdRoute() {\r\n  return route(GET(\"/employees/{id}\"), \r\n    req -> ok().body(\r\n      employeeRepository().findEmployeeById(req.pathVariable(\"id\")), Employee.class));\r\n}\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> getAllEmployeesRoute() {\r\n  return route(GET(\"/employees\"), \r\n    req -> ok().body(\r\n      employeeRepository().findAllEmployees(), Employee.class));\r\n}\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> updateEmployeeRoute() {\r\n  return route(POST(\"/employees/update\"), \r\n    req -> req.body(toMono(Employee.class))\r\n      .doOnNext(employeeRepository()::updateEmployee)\r\n      .then(ok().build()));\r\n}\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> composedRoutes() {\r\n  return \r\n    route(GET(\"/employees\"), \r\n      req -> ok().body(\r\n        employeeRepository().findAllEmployees(), Employee.class))\r\n\r\n    .and(route(GET(\"/employees/{id}\"), \r\n      req -> ok().body(\r\n        employeeRepository().findEmployeeById(req.pathVariable(\"id\")), Employee.class)))\r\n\r\n    .and(route(POST(\"/employees/update\"), \r\n      req -> req.body(toMono(Employee.class))\r\n        .doOnNext(employeeRepository()::updateEmployee)\r\n        .then(ok().build())));\r\n}\r\n```","```\r\n@Test\r\nvoid givenEmployeeId_whenGetEmployeeById_thenCorrectEmployee() {\r\n    WebTestClient client = WebTestClient\r\n      .bindToRouterFunction(config.getEmployeeByIdRoute())\r\n      .build();\r\n\r\n    Employee employee = new Employee(\"1\", \"Employee 1\");\r\n\r\n    given(employeeRepository.findEmployeeById(\"1\")).willReturn(Mono.just(employee));\r\n\r\n    client.get()\r\n      .uri(\"/employees/1\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .isOk()\r\n      .expectBody(Employee.class)\r\n      .isEqualTo(employee);\r\n}\r\n```","```\r\n@Test\r\nvoid whenGetAllEmployees_thenCorrectEmployees() {\r\n    WebTestClient client = WebTestClient\r\n      .bindToRouterFunction(config.getAllEmployeesRoute())\r\n      .build();\r\n\r\n    List<Employee> employees = Arrays.asList(\r\n      new Employee(\"1\", \"Employee 1\"),\r\n      new Employee(\"2\", \"Employee 2\"));\r\n\r\n    Flux<Employee> employeeFlux = Flux.fromIterable(employees);\r\n    given(employeeRepository.findAllEmployees()).willReturn(employeeFlux);\r\n\r\n    client.get()\r\n      .uri(\"/employees\")\r\n      .exchange()\r\n      .expectStatus()\r\n      .isOk()\r\n      .expectBodyList(Employee.class)\r\n      .isEqualTo(employees);\r\n}\r\n```","```\r\n@Test\r\nvoid whenUpdateEmployee_thenEmployeeUpdated() {\r\n    WebTestClient client = WebTestClient\r\n      .bindToRouterFunction(config.updateEmployeeRoute())\r\n      .build();\r\n\r\n    Employee employee = new Employee(\"1\", \"Employee 1 Updated\");\r\n\r\n    client.post()\r\n      .uri(\"/employees/update\")\r\n      .body(Mono.just(employee), Employee.class)\r\n      .exchange()\r\n      .expectStatus()\r\n      .isOk();\r\n\r\n    verify(employeeRepository).updateEmployee(employee);\r\n}\r\n```"]