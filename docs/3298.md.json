["```\r\nint[] numbers = new int[] { -8, 7, 5, 9, 10, -2, 3 };\r\nString[] strings = new String[] { \"learning\", \"java\", \"with\", \"baeldung\" };\r\n```","```\r\nEmployee john = new Employee(6, \"John\");\r\nEmployee mary = new Employee(3, \"Mary\");\r\nEmployee david = new Employee(4, \"David\");\r\nEmployee[] employees = new Employee[] { john, mary, david };\r\n```","```\r\nArrays.sort(numbers);\r\nassertArrayEquals(new int[] { -8, -2, 3, 5, 7, 9, 10 }, numbers); \r\n```","```\r\nArrays.sort(strings);\r\nassertArrayEquals(new String[] { \"baeldung\", \"java\", \"learning\", \"with\" }, strings);\r\n```","```\r\nArrays.sort(employees, Comparator.comparing(Employee::getName));\r\nassertArrayEquals(new Employee[] { david, john, mary }, employees);\r\n```","```\r\nArrays.sort(employees, Comparator.comparing(Employee::getName).thenComparing(Employee::getId));\r\n```","```\r\nnumbers = IntStream.of(numbers).boxed().sorted(Comparator.reverseOrder()).mapToInt(i -> i).toArray();\r\nassertArrayEquals(new int[] { 10, 9, 7, 5, 3, -2, -8 }, numbers);\r\n```","```\r\nArrays.sort(strings, Comparator.reverseOrder());\r\nassertArrayEquals(new String[] { \"with\", \"learning\", \"java\", \"baeldung\" }, strings);\r\n```","```\r\nArrays.sort(employees, Comparator.comparing(Employee::getName).reversed());\r\nassertArrayEquals(new Employee[] { mary, john, david }, employees);\r\n```"]