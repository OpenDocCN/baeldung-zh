["```\r\n<dependency>\r\n    <groupId>io.searchbox</groupId>\r\n    <artifactId>jest</artifactId>\r\n    <version>6.3.1</version>\r\n</dependency>\r\n```","```\r\npublic JestClient jestClient() {\r\n    JestClientFactory factory = new JestClientFactory();\r\n    factory.setHttpClientConfig(\r\n      new HttpClientConfig.Builder(\"http://localhost:9200\")\r\n        .multiThreaded(true)\r\n        .defaultMaxTotalConnectionPerRoute(2)\r\n        .maxTotalConnection(10)\r\n        .build());\r\n    return factory.getObject();\r\n}\r\n```","```\r\nJestResult jestResult = jestClient.execute(new Delete.Builder(\"1\").index(\"employees\").build());\r\n\r\nif (jestResult.isSucceeded()) {\r\n    System.out.println(\"Success!\");\r\n}\r\nelse {\r\n    System.out.println(\"Error: \" + jestResult.getErrorMessage());\r\n}\r\n```","```\r\nJestResult result = jestClient.execute(new IndicesExists.Builder(\"employees\").build()) \r\n```","```\r\njestClient.execute(new CreateIndex.Builder(\"employees\").build());\r\n```","```\r\nMap<String, Object> settings = new HashMap<>();\r\nsettings.put(\"number_of_shards\", 11);\r\nsettings.put(\"number_of_replicas\", 2);\r\njestClient.execute(new CreateIndex.Builder(\"employees\").settings(settings).build());\r\n```","```\r\njestClient.execute(new ModifyAliases.Builder(\r\n  new AddAliasMapping.Builder(\"employees\", \"e\").build()).build());\r\njestClient.execute(new ModifyAliases.Builder(\r\n  new RemoveAliasMapping.Builder(\"employees\", \"e\").build()).build());\r\n```","```\r\n{\r\n    \"name\": \"Michael Pratt\",\r\n    \"title\": \"Java Developer\",\r\n    \"skills\": [\"java\", \"spring\", \"elasticsearch\"],\r\n    \"yearsOfService\": 2\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nJsonNode employeeJsonNode = mapper.createObjectNode()\r\n  .put(\"name\", \"Michael Pratt\")\r\n  .put(\"title\", \"Java Developer\")\r\n  .put(\"yearsOfService\", 2)\r\n  .set(\"skills\", mapper.createArrayNode()\r\n    .add(\"java\")\r\n    .add(\"spring\")\r\n    .add(\"elasticsearch\"));\r\njestClient.execute(new Index.Builder(employeeJsonNode.toString()).index(\"employees\").build());\r\n```","```\r\nMap<String, Object> employeeHashMap = new LinkedHashMap<>();\r\nemployeeHashMap.put(\"name\", \"Michael Pratt\");\r\nemployeeHashMap.put(\"title\", \"Java Developer\");\r\nemployeeHashMap.put(\"yearsOfService\", 2);\r\nemployeeHashMap.put(\"skills\", Arrays.asList(\"java\", \"spring\", \"elasticsearch\"));\r\njestClient.execute(new Index.Builder(employeeHashMap).index(\"employees\").build());\r\n```","```\r\npublic class Employee {\r\n    String name;\r\n    String title;\r\n    List<String> skills;\r\n    int yearsOfService;\r\n}\r\n```","```\r\nEmployee employee = new Employee();\r\nemployee.setName(\"Michael Pratt\");\r\nemployee.setTitle(\"Java Developer\");\r\nemployee.setYearsOfService(2);\r\nemployee.setSkills(Arrays.asList(\"java\", \"spring\", \"elasticsearch\"));\r\njestClient.execute(new Index.Builder(employee).index(\"employees\").build());\r\n```","```\r\njestClient.execute(new Get.Builder(\"employees\", \"17\").build());\r\n```","```\r\nEmployee getResult = jestClient.execute(new Get.Builder(\"employees\", \"1\").build())\r\n    .getSourceAsObject(Employee.class);\r\n```","```\r\nString search = \"{\" +\r\n  \"  \\\"query\\\": {\" +\r\n  \"    \\\"bool\\\": {\" +\r\n  \"      \\\"must\\\": [\" +\r\n  \"        { \\\"match\\\": { \\\"name\\\":   \\\"Michael Pratt\\\" }}\" +\r\n  \"      ]\" +\r\n  \"    }\" +\r\n  \"  }\" +\r\n  \"}\";\r\njestClient.execute(new Search.Builder(search).build());\r\n```","```\r\nList<SearchResult.Hit<Employee, Void>> searchResults = \r\n  jestClient.execute(new Search.Builder(search).build())\r\n    .getHits(Employee.class);\r\nsearchResults.forEach(hit -> {\r\n    System.out.println(String.format(\"Document %s has score %s\", hit.id, hit.score));\r\n});\r\n```","```\r\nemployee.setYearOfService(3);\r\njestClient.execute(new Update.Builder(employee).index(\"employees\").id(\"1\").build());\r\n```","```\r\njestClient.execute(new Delete.Builder(\"17\")\r\n  .index(\"employees\")\r\n  .build());\r\n```","```\r\njestClient.execute(new Bulk.Builder()\r\n  .defaultIndex(\"employees\")\r\n  .addAction(new Index.Builder(employeeObject1).build())\r\n  .addAction(new Index.Builder(employeeObject2).build())\r\n  .addAction(new Delete.Builder(\"17\").build())\r\n  .build());\r\n```","```\r\njestClient.executeAsync(\r\n  new Index.Builder(employeeObject1).build(),\r\n  new JestResultHandler<JestResult>() {\r\n      @Override public void completed(JestResult result) {\r\n          // handle result\r\n      }\r\n      @Override public void failed(Exception ex) {\r\n          // handle exception\r\n      }\r\n  });\r\n```"]