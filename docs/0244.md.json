["```\r\n<dependency>\r\n    <groupId>org.activiti</groupId>\r\n    <artifactId>activiti-spring-boot-starter-security</artifactId>\r\n    <version>6.0.0</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\nInitializingBean usersAndGroupsInitializer(IdentityService identityService) {\r\n    return new InitializingBean() {\r\n        public void afterPropertiesSet() throws Exception {\r\n            User user = identityService.newUser(\"activiti_user\");\r\n            user.setPassword(\"pass\");\r\n            identityService.saveUser(user);\r\n\r\n            Group group = identityService.newGroup(\"user\");\r\n            group.setName(\"ROLE_USER\");\r\n            group.setType(\"USER\");\r\n            identityService.saveGroup(group);\r\n            identityService.createMembership(user.getId(), group.getId());\r\n        }\r\n    };\r\n}\r\n```","```\r\n@SpringBootApplication(\r\n  exclude = org.activiti.spring.boot.SecurityAutoConfiguration.class)\r\npublic class ActivitiSpringSecurityApplication {\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private IdentityService identityService;\r\n\r\n    @Autowired\r\n    public void configureGlobal(AuthenticationManagerBuilder auth)\r\n      throws Exception {\r\n\r\n        auth.userDetailsService(userDetailsService());\r\n    }\r\n\r\n    @Bean\r\n    public UserDetailsService userDetailsService() {\r\n        return new IdentityServiceUserDetailsService(\r\n          this.identityService);\r\n    }\r\n\r\n    // spring security configuration\r\n}\r\n```","```\r\npublic class SpringSecurityUserManager extends UserEntityManagerImpl {\r\n\r\n    private JdbcUserDetailsManager userManager;\r\n\r\n    public SpringSecurityUserManager(\r\n      ProcessEngineConfigurationImpl processEngineConfiguration, \r\n      UserDataManager userDataManager, \r\n      JdbcUserDetailsManager userManager) {\r\n\r\n        super(processEngineConfiguration, userDataManager);\r\n        this.userManager = userManager;\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Override\r\npublic UserEntity findById(String userId) {\r\n    UserDetails userDetails = userManager.loadUserByUsername(userId);\r\n    if (userDetails != null) {\r\n        UserEntityImpl user = new UserEntityImpl();\r\n        user.setId(userId);\r\n        return user;\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic List<Group> findGroupsByUser(String userId) {\r\n    UserDetails userDetails = userManager.loadUserByUsername(userId);\r\n    if (userDetails != null) {\r\n        return userDetails.getAuthorities().stream()\r\n          .map(a -> {\r\n            Group g = new GroupEntityImpl();\r\n            g.setId(a.getAuthority());\r\n            return g;\r\n          })\r\n          .collect(Collectors.toList());\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@Override\r\npublic List<User> findUserByQueryCriteria(\r\n  UserQueryImpl query, Page page) {\r\n    // ...\r\n}\r\n```","```\r\npublic long findUserCountByQueryCriteria(\r\n  UserQueryImpl query) {\r\n\r\n    return findUserByQueryCriteria(query, null).size();\r\n}\r\n```","```\r\n@Override\r\npublic Boolean checkPassword(String userId, String password) {\r\n    return true;\r\n}\r\n```","```\r\npublic User createNewUser(String userId) {\r\n    throw new UnsupportedOperationException(\"This operation is not supported!\");\r\n}\r\n```","```\r\npublic class SpringSecurityGroupManager extends GroupEntityManagerImpl {\r\n\r\n    private JdbcUserDetailsManager userManager;\r\n\r\n    public SpringSecurityGroupManager(ProcessEngineConfigurationImpl \r\n      processEngineConfiguration, GroupDataManager groupDataManager) {\r\n        super(processEngineConfiguration, groupDataManager);\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Override\r\npublic List<Group> findGroupsByUser(String userId) {\r\n    UserDetails userDetails = userManager.loadUserByUsername(userId);\r\n    if (userDetails != null) {\r\n        return userDetails.getAuthorities().stream()\r\n          .map(a -> {\r\n            Group g = new GroupEntityImpl();\r\n            g.setId(a.getAuthority());\r\n            return g;\r\n          })\r\n          .collect(Collectors.toList());\r\n    }\r\n    return null;\r\n}\r\n```","```\r\n@Override\r\npublic List<Group> findGroupByQueryCriteria(GroupQueryImpl query, Page page) {\r\n    if (query.getUserId() != null) {\r\n        return findGroupsByUser(query.getUserId());\r\n    }\r\n    return null;\r\n}\r\n\r\n@Override\r\npublic long findGroupCountByQueryCriteria(GroupQueryImpl query) {\r\n    return findGroupByQueryCriteria(query, null).size();\r\n}\r\n```","```\r\npublic Group createNewGroup(String groupId) {\r\n    throw new UnsupportedOperationException(\"This operation is not supported!\");\r\n}\r\n```","```\r\n@Autowired\r\nprivate SpringProcessEngineConfiguration processEngineConfiguration;\r\n\r\n@Autowired\r\nprivate JdbcUserDetailsManager userManager;\r\n\r\n@Bean\r\nInitializingBean processEngineInitializer() {\r\n    return new InitializingBean() {\r\n        public void afterPropertiesSet() throws Exception {\r\n            processEngineConfiguration.setUserEntityManager(\r\n              new SpringSecurityUserManager(processEngineConfiguration, \r\n              new MybatisUserDataManager(processEngineConfiguration), userManager));\r\n            processEngineConfiguration.setGroupEntityManager(\r\n              new SpringSecurityGroupManager(processEngineConfiguration, \r\n              new MybatisGroupDataManager(processEngineConfiguration)));\r\n            }\r\n        };\r\n    }\r\n```","```\r\nidentityService.setAuthenticatedUserId(userId);\r\n```"]