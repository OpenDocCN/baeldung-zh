["```\r\nGiven a precondition\r\nWhen an event occurs\r\nThen the outcome should be captured\r\n```","```\r\n<dependency>\r\n    <groupId>org.jbehave</groupId>\r\n    <artifactId>jbehave-core</artifactId>\r\n    <version>4.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nScenario: when a user increases a counter, its value is increased by 1\r\n\r\nGiven a counter\r\nAnd the counter has any integral value\r\nWhen the user increases the counter\r\nThen the value of the counter must be 1 greater than previous value\r\n```","```\r\npublic class IncreaseSteps {\r\n    private int counter;\r\n    private int previousValue;\r\n\r\n    @Given(\"a counter\")\r\n    public void aCounter() {\r\n    }\r\n\r\n    @Given(\"the counter has any integral value\")\r\n    public void counterHasAnyIntegralValue() {\r\n        counter = new Random().nextInt();\r\n        previousValue = counter;\r\n    }\r\n\r\n    @When(\"the user increases the counter\")\r\n    public void increasesTheCounter() {\r\n        counter++;\r\n    }\r\n\r\n    @Then(\"the value of the counter must be 1 greater than previous value\")\r\n    public void theValueOfTheCounterMustBe1Greater() {\r\n        assertTrue(1 == counter - previousValue);\r\n    }\r\n}\r\n```","```\r\npublic class IncreaseStoryLiveTest extends JUnitStories {\r\n\r\n    @Override\r\n    public Configuration configuration() {\r\n        return new MostUsefulConfiguration()\r\n          .useStoryLoader(new LoadFromClasspath(this.getClass()))\r\n          .useStoryReporterBuilder(new StoryReporterBuilder()\r\n            .withCodeLocation(codeLocationFromClass(this.getClass()))\r\n            .withFormats(CONSOLE));\r\n    }\r\n\r\n    @Override\r\n    public InjectableStepsFactory stepsFactory() {\r\n        return new InstanceStepsFactory(configuration(), new IncreaseSteps());\r\n    }\r\n\r\n    @Override\r\n    protected List<String> storyPaths() {\r\n        return Arrays.asList(\"increase.story\");\r\n    }\r\n\r\n}\r\n```","```\r\nScenario: when a user increases a counter, its value is increased by 1\r\nGiven a counter\r\nAnd the counter has any integral value\r\nWhen the user increases the counter\r\nThen the value of the counter must be 1 greater than previous value\r\n```","```\r\nScenario: when a user increases a counter, its value is increased by 1\r\nGiven a counter\r\nAnd the counter has any integral value\r\nWhen the user increases the counter (PENDING)\r\nThen the value of the counter must be 1 greater than previous value (NOT PERFORMED)\r\n```","```\r\n@When(\"the user increases the counter\")\r\n@Pending\r\npublic void whenTheUserIncreasesTheCounter() {\r\n    // PENDING\r\n}\r\n```","```\r\nScenario: when a user increases a counter, its value is increased by 1\r\nGiven a counter\r\nAnd the counter has any integral value\r\nWhen the user increases the counter\r\nThen the value of the counter must be 1 greater than previous value (FAILED)\r\n(java.lang.AssertionError)\r\n```","```\r\nScenario: when a user checks a non-existent user on github, github would respond 'not found'\r\n\r\nGiven github user profile api\r\nAnd a random non-existent username\r\nWhen I look for the random user via the api\r\nThen github respond: 404 not found\r\n\r\nWhen I look for eugenp1 via the api\r\nThen github respond: 404 not found\r\n\r\nWhen I look for eugenp2 via the api\r\nThen github respond: 404 not found\r\n```","```\r\npublic class GithubUserNotFoundSteps {\r\n\r\n    private String api;\r\n    private String nonExistentUser;\r\n    private int githubResponseCode;\r\n\r\n    @Given(\"github user profile api\")\r\n    public void givenGithubUserProfileApi() {\r\n        api = \"https://api.github.com/users/%s\";\r\n    }\r\n\r\n    @Given(\"a random non-existent username\")\r\n    public void givenANonexistentUsername() {\r\n        nonExistentUser = randomAlphabetic(8);\r\n    }\r\n\r\n    @When(\"I look for the random user via the api\")\r\n    public void whenILookForTheUserViaTheApi() throws IOException {\r\n        githubResponseCode = getGithubUserProfile(api, nonExistentUser)\r\n          .getStatusLine()\r\n          .getStatusCode();\r\n    }\r\n\r\n    @When(\"I look for $user via the api\")\r\n    public void whenILookForSomeNonExistentUserViaTheApi(\r\n      String user) throws IOException {\r\n        githubResponseCode = getGithubUserProfile(api, user)\r\n          .getStatusLine()\r\n          .getStatusCode();\r\n    }\r\n\r\n    @Then(\"github respond: 404 not found\")\r\n    public void thenGithubRespond404NotFound() {\r\n        assertTrue(SC_NOT_FOUND == githubResponseCode);\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@When(\"I look for $username via the api\")\r\npublic void whenILookForSomeNonExistentUserViaTheApi(\r\n  @Named(\"username\") String user) throws IOException\r\n```","```\r\nScenario: when a user checks a valid user's profile on github, github would respond json data\r\n\r\nGiven github user profile api\r\nAnd a valid username\r\nWhen I look for the user via the api\r\nThen github respond data of type json\r\n```","```\r\npublic class GithubUserResponseMediaTypeSteps {\r\n\r\n    private String api;\r\n    private String validUser;\r\n    private String mediaType;\r\n\r\n    @Given(\"github user profile api\")\r\n    public void givenGithubUserProfileApi() {\r\n        api = \"https://api.github.com/users/%s\";\r\n    }\r\n\r\n    @Given(\"a valid username\")\r\n    public void givenAValidUsername() {\r\n        validUser = \"eugenp\";\r\n    }\r\n\r\n    @When(\"I look for the user via the api\")\r\n    public void whenILookForTheUserViaTheApi() throws IOException {\r\n        mediaType = ContentType\r\n          .getOrDefault(getGithubUserProfile(api, validUser).getEntity())\r\n          .getMimeType();\r\n    }\r\n\r\n    @Then(\"github respond data of type json\")\r\n    public void thenGithubRespondDataOfTypeJson() {\r\n        assertEquals(\"application/json\", mediaType);\r\n    }\r\n}\r\n```","```\r\nScenario: when a user checks a valid user's profile on github, github's response json should include a login payload with the same username\r\n\r\nGiven github user profile api\r\nWhen I look for eugenp via the api\r\nThen github's response contains a 'login' payload same as eugenp\r\n```","```\r\npublic class GithubUserResponsePayloadSteps {\r\n\r\n    private String api;\r\n    private GitHubUser resource;\r\n\r\n    @Given(\"github user profile api\")\r\n    public void givenGithubUserProfileApi() {\r\n        api = \"https://api.github.com/users/%s\";\r\n    }\r\n\r\n    @When(\"I look for $user via the api\")\r\n    public void whenILookForEugenpViaTheApi(String user) throws IOException {\r\n        HttpResponse httpResponse = getGithubUserProfile(api, user);\r\n        resource = RetrieveUtil.retrieveResourceFromResponse(httpResponse, GitHubUser.class);\r\n    }\r\n\r\n    @Then(\"github's response contains a 'login' payload same as $username\")\r\n    public void thenGithubsResponseContainsAloginPayloadSameAsEugenp(String username) {\r\n        assertThat(username, Matchers.is(resource.getLogin()));\r\n    }\r\n}\r\n```"]