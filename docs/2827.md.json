["```\r\n\"First 3 Capital Words! then 10 TLAs, I Found\"\r\n```","```\r\n\"(?<=^|[^A-Za-z])([A-Z][a-z]*)(?=[^A-Za-z]|$)\"\r\n```","```\r\n[A-Z]\r\n```","```\r\n[a-z]*\r\n```","```\r\n(?<=^|[^A-Za-z])\r\n```","```\r\nMatcher matcher = TITLE_CASE_PATTERN.matcher(EXAMPLE_INPUT);\r\nList<String> matches = new ArrayList<>();\r\nwhile (matcher.find()) {\r\n    matches.add(matcher.group(1));\r\n}\r\n\r\nassertThat(matches)\r\n  .containsExactly(\"First\", \"Capital\", \"Words\", \"I\", \"Found\");\r\n```","```\r\nwhile (matcher.find()) {\r\n    System.out.println(\"Match: \" + matcher.group(0));\r\n    System.out.println(\"Start: \" + matcher.start());\r\n    System.out.println(\"End: \" + matcher.end());\r\n}\r\n```","```\r\nMatch: First\r\nStart: 0\r\nEnd: 5\r\nMatch: Capital\r\nStart: 8\r\nEnd: 15\r\nMatch: Words\r\nStart: 16\r\nEnd: 21\r\nMatch: I\r\nStart: 37\r\nEnd: 38\r\n... more\r\n```","```\r\n\"first 3 capital words! then 10 TLAs, i found\"\r\n```","```\r\nprivate static String convert(String token) {\r\n    return token.toLowerCase();\r\n}\r\n```","```\r\nint lastIndex = 0;\r\nStringBuilder output = new StringBuilder();\r\nMatcher matcher = TITLE_CASE_PATTERN.matcher(original);\r\nwhile (matcher.find()) {\r\n    output.append(original, lastIndex, matcher.start())\r\n      .append(convert(matcher.group(1)));\r\n\r\n    lastIndex = matcher.end();\r\n}\r\nif (lastIndex < original.length()) {\r\n    output.append(original, lastIndex, original.length());\r\n}\r\nreturn output.toString();\r\n```","```\r\n// same as before\r\nwhile (matcher.find()) {\r\n    output.append(original, lastIndex, matcher.start())\r\n      .append(converter.apply(matcher));\r\n\r\n// same as before\r\n```","```\r\nassertThat(replaceTokens(\"First 3 Capital Words! then 10 TLAs, I Found\",\r\n  TITLE_CASE_PATTERN,\r\n  match -> match.group(1).toLowerCase()))\r\n  .isEqualTo(\"first 3 capital words! then 10 TLAs, i found\");\r\n```","```\r\nPattern regexCharacters = Pattern.compile(\"[<(\\\\[{\\\\\\\\^\\\\-=$!|\\\\]})?*+.>]\");\r\n\r\nassertThat(replaceTokens(\"A regex character like [\",\r\n  regexCharacters,\r\n  match -> \"\\\\\" + match.group()))\r\n  .isEqualTo(\"A regex character like \\\\[\");\r\n```","```\r\nMap<String, String> placeholderValues = new HashMap<>();\r\nplaceholderValues.put(\"name\", \"Bill\");\r\nplaceholderValues.put(\"company\", \"Baeldung\");\r\n```","```\r\n\"\\\\$\\\\{(?<placeholder>[A-Za-z0-9-_]+)}\"\r\n```","```\r\nassertThat(replaceTokens(\"Hi ${name} at ${company}\",\r\n  \"\\\\$\\\\{(?<placeholder>[A-Za-z0-9-_]+)}\",\r\n  match -> placeholderValues.get(match.group(\"placeholder\"))))\r\n  .isEqualTo(\"Hi Bill at Baeldung\");\r\n```"]