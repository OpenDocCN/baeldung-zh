["```\r\n@JsonFilter(\"myFilter\")\r\npublic class MyDto {\r\n    private int intValue;\r\n\r\n    public MyDto() {\r\n        super();\r\n    }\r\n\r\n    public int getIntValue() {\r\n        return intValue;\r\n    }\r\n\r\n    public void setIntValue(int intValue) {\r\n        this.intValue = intValue;\r\n    }\r\n}\r\n```","```\r\nPropertyFilter theFilter = new SimpleBeanPropertyFilter() {\r\n   @Override\r\n   public void serializeAsField\r\n    (Object pojo, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer)\r\n     throws Exception {\r\n      if (include(writer)) {\r\n         if (!writer.getName().equals(\"intValue\")) {\r\n            writer.serializeAsField(pojo, jgen, provider);\r\n            return;\r\n         }\r\n         int intValue = ((MyDtoWithFilter) pojo).getIntValue();\r\n         if (intValue >= 0) {\r\n            writer.serializeAsField(pojo, jgen, provider);\r\n         }\r\n      } else if (!jgen.canOmitFields()) { // since 2.3\r\n         writer.serializeAsOmittedField(pojo, jgen, provider);\r\n      }\r\n   }\r\n   @Override\r\n   protected boolean include(BeanPropertyWriter writer) {\r\n      return true;\r\n   }\r\n   @Override\r\n   protected boolean include(PropertyWriter writer) {\r\n      return true;\r\n   }\r\n};\r\n```","```\r\nFilterProvider filters = new SimpleFilterProvider().addFilter(\"myFilter\", theFilter);\r\nMyDto dtoObject = new MyDto();\r\ndtoObject.setIntValue(-1);\r\n\r\nObjectMapper mapper = new ObjectMapper();\r\nString dtoAsString = mapper.writer(filters).writeValueAsString(dtoObject);\r\n```","```\r\nassertThat(dtoAsString, not(containsString(\"intValue\")));\r\n```","```\r\n@JsonIgnoreProperties(\"hidden\")\r\npublic interface Hidable {\r\n    boolean isHidden();\r\n}\r\n```","```\r\npublic class Person implements Hidable {\r\n    private String name;\r\n    private Address address;\r\n    private boolean hidden;\r\n}\r\n```","```\r\npublic class Address implements Hidable {\r\n    private String city;\r\n    private String country;\r\n    private boolean hidden;\r\n}\r\n```","```\r\npublic class HidableSerializer extends JsonSerializer<Hidable> {\r\n\r\n    private JsonSerializer<Object> defaultSerializer;\r\n\r\n    public HidableSerializer(JsonSerializer<Object> serializer) {\r\n        defaultSerializer = serializer;\r\n    }\r\n\r\n    @Override\r\n    public void serialize(Hidable value, JsonGenerator jgen, SerializerProvider provider)\r\n      throws IOException, JsonProcessingException {\r\n        if (value.isHidden())\r\n            return;\r\n        defaultSerializer.serialize(value, jgen, provider);\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(SerializerProvider provider, Hidable value) {\r\n        return (value == null || value.isHidden());\r\n    }\r\n}\r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\nmapper.setSerializationInclusion(Include.NON_EMPTY);\r\nmapper.registerModule(new SimpleModule() {\r\n    @Override\r\n    public void setupModule(SetupContext context) {\r\n        super.setupModule(context);\r\n        context.addBeanSerializerModifier(new BeanSerializerModifier() {\r\n            @Override\r\n            public JsonSerializer<?> modifySerializer(\r\n              SerializationConfig config, BeanDescription desc, JsonSerializer<?> serializer) {\r\n                if (Hidable.class.isAssignableFrom(desc.getBeanClass())) {\r\n                    return new HidableSerializer((JsonSerializer<Object>) serializer);\r\n                }\r\n                return serializer;\r\n            }\r\n        });\r\n    }\r\n});\r\n```","```\r\nAddress ad1 = new Address(\"tokyo\", \"jp\", true);\r\nAddress ad2 = new Address(\"london\", \"uk\", false);\r\nAddress ad3 = new Address(\"ny\", \"usa\", false);\r\nPerson p1 = new Person(\"john\", ad1, false);\r\nPerson p2 = new Person(\"tom\", ad2, true);\r\nPerson p3 = new Person(\"adam\", ad3, false);\r\n\r\nSystem.out.println(mapper.writeValueAsString(Arrays.asList(p1, p2, p3)));\r\n```","```\r\n[\r\n    {\r\n        \"name\":\"john\"\r\n    },\r\n    {\r\n        \"name\":\"adam\",\r\n        \"address\":{\r\n            \"city\":\"ny\",\r\n            \"country\":\"usa\"\r\n        }\r\n    }\r\n]\r\n```","```\r\n@Test\r\npublic void whenNotHidden_thenCorrect() throws JsonProcessingException {\r\n    Address ad = new Address(\"ny\", \"usa\", false);\r\n    Person person = new Person(\"john\", ad, false);\r\n    String result = mapper.writeValueAsString(person);\r\n\r\n    assertTrue(result.contains(\"name\"));\r\n    assertTrue(result.contains(\"john\"));\r\n    assertTrue(result.contains(\"address\"));\r\n    assertTrue(result.contains(\"usa\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddressHidden_thenCorrect() throws JsonProcessingException {\r\n    Address ad = new Address(\"ny\", \"usa\", true);\r\n    Person person = new Person(\"john\", ad, false);\r\n    String result = mapper.writeValueAsString(person);\r\n\r\n    assertTrue(result.contains(\"name\"));\r\n    assertTrue(result.contains(\"john\"));\r\n    assertFalse(result.contains(\"address\"));\r\n    assertFalse(result.contains(\"usa\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenAllHidden_thenCorrect() throws JsonProcessingException {\r\n    Address ad = new Address(\"ny\", \"usa\", false);\r\n    Person person = new Person(\"john\", ad, true);\r\n    String result = mapper.writeValueAsString(person);\r\n\r\n    assertTrue(result.length() == 0);\r\n}\r\n```"]