["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>2.8.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.196</version>\r\n</dependency>\r\n```","```\r\npublic class LoggingExtension implements TestInstancePostProcessor {\r\n\r\n    @Override\r\n    public void postProcessTestInstance(Object testInstance, \r\n      ExtensionContext context) throws Exception {\r\n        Logger logger = LogManager.getLogger(testInstance.getClass());\r\n        testInstance.getClass()\r\n          .getMethod(\"setLogger\", Logger.class)\r\n          .invoke(testInstance, logger);\r\n    }\r\n}\r\n```","```\r\npublic class EnvironmentExtension implements ExecutionCondition {\r\n\r\n    @Override\r\n    public ConditionEvaluationResult evaluateExecutionCondition(\r\n      ExtensionContext context) {\r\n\r\n        Properties props = new Properties();\r\n        props.load(EnvironmentExtension.class\r\n          .getResourceAsStream(\"application.properties\"));\r\n        String env = props.getProperty(\"env\");\r\n        if (\"qa\".equalsIgnoreCase(env)) {\r\n            return ConditionEvaluationResult\r\n              .disabled(\"Test disabled on QA environment\");\r\n        }\r\n\r\n        return ConditionEvaluationResult.enabled(\r\n          \"Test enabled on QA environment\");\r\n    }\r\n}\r\n```","```\r\npublic class TestLauncher {\r\n    public static void main(String[] args) {\r\n        LauncherDiscoveryRequest request\r\n          = LauncherDiscoveryRequestBuilder.request()\r\n          .selectors(selectClass(\"com.baeldung.EmployeesTest\"))\r\n          .configurationParameter(\r\n            \"junit.conditions.deactivate\", \r\n            \"com.baeldung.extensions.*\")\r\n          .build();\r\n\r\n        TestPlan plan = LauncherFactory.create().discover(request);\r\n        Launcher launcher = LauncherFactory.create();\r\n        SummaryGeneratingListener summaryGeneratingListener\r\n          = new SummaryGeneratingListener();\r\n        launcher.execute(\r\n          request, \r\n          new TestExecutionListener[] { summaryGeneratingListener });\r\n\r\n        System.out.println(summaryGeneratingListener.getSummary());\r\n    }\r\n}\r\n```","```\r\npublic class Employee {\r\n\r\n    private long id;\r\n    private String firstName;\r\n    // constructors, getters, setters\r\n}\r\n```","```\r\npublic class JdbcConnectionUtil {\r\n\r\n    private static Connection con;\r\n\r\n    public static Connection getConnection() \r\n      throws IOException, ClassNotFoundException, SQLException{\r\n        if (con == null) {\r\n            // create connection\r\n            return con;\r\n        }\r\n        return con;\r\n    }\r\n}\r\n```","```\r\npublic class EmployeeJdbcDao {\r\n    private Connection con;\r\n\r\n    public EmployeeJdbcDao(Connection con) {\r\n        this.con = con;\r\n    }\r\n\r\n    public void createTable() throws SQLException {\r\n        // create employees table\r\n    }\r\n\r\n    public void add(Employee emp) throws SQLException {\r\n       // add employee record\r\n    }\r\n\r\n    public List<Employee> findAll() throws SQLException {\r\n       // query all employee records\r\n    }\r\n}\r\n```","```\r\npublic class EmployeeDatabaseSetupExtension implements \r\n  BeforeAllCallback, AfterAllCallback, BeforeEachCallback, AfterEachCallback {\r\n    //...\r\n}\r\n```","```\r\nprivate EmployeeJdbcDao employeeDao = new EmployeeJdbcDao();\r\n\r\n@Override\r\npublic void beforeAll(ExtensionContext context) throws SQLException {\r\n    employeeDao.createTable();\r\n}\r\n```","```\r\nprivate Connection con = JdbcConnectionUtil.getConnection();\r\nprivate Savepoint savepoint;\r\n\r\n@Override\r\npublic void beforeEach(ExtensionContext context) throws SQLException {\r\n    con.setAutoCommit(false);\r\n    savepoint = con.setSavepoint(\"before\");\r\n}\r\n```","```\r\n@Override\r\npublic void afterEach(ExtensionContext context) throws SQLException {\r\n    con.rollback(savepoint);\r\n}\r\n```","```\r\n@Override\r\npublic void afterAll(ExtensionContext context) throws SQLException {\r\n    if (con != null) {\r\n        con.close();\r\n    }\r\n}\r\n```","```\r\npublic class EmployeeDaoParameterResolver implements ParameterResolver {\r\n\r\n    @Override\r\n    public boolean supportsParameter(ParameterContext parameterContext, \r\n      ExtensionContext extensionContext) throws ParameterResolutionException {\r\n        return parameterContext.getParameter().getType()\r\n          .equals(EmployeeJdbcDao.class);\r\n    }\r\n\r\n    @Override\r\n    public Object resolveParameter(ParameterContext parameterContext, \r\n      ExtensionContext extensionContext) throws ParameterResolutionException {\r\n        return new EmployeeJdbcDao();\r\n    }\r\n}\r\n```","```\r\npublic class IgnoreFileNotFoundExceptionExtension \r\n  implements TestExecutionExceptionHandler {\r\n\r\n    Logger logger = LogManager\r\n      .getLogger(IgnoreFileNotFoundExceptionExtension.class);\r\n\r\n    @Override\r\n    public void handleTestExecutionException(ExtensionContext context,\r\n      Throwable throwable) throws Throwable {\r\n\r\n        if (throwable instanceof FileNotFoundException) {\r\n            logger.error(\"File not found:\" + throwable.getMessage());\r\n            return;\r\n        }\r\n        throw throwable;\r\n    }\r\n}\r\n```","```\r\n@ExtendWith({ EnvironmentExtension.class, \r\n  EmployeeDatabaseSetupExtension.class, EmployeeDaoParameterResolver.class })\r\n@ExtendWith(LoggingExtension.class)\r\n@ExtendWith(IgnoreFileNotFoundExceptionExtension.class)\r\npublic class EmployeesTest {\r\n    private EmployeeJdbcDao employeeDao;\r\n    private Logger logger;\r\n\r\n    public EmployeesTest(EmployeeJdbcDao employeeDao) {\r\n        this.employeeDao = employeeDao;\r\n    }\r\n\r\n    @Test\r\n    public void whenAddEmployee_thenGetEmployee() throws SQLException {\r\n        Employee emp = new Employee(1, \"john\");\r\n        employeeDao.add(emp);\r\n        assertEquals(1, employeeDao.findAll().size());   \r\n    }\r\n\r\n    @Test\r\n    public void whenGetEmployees_thenEmptyList() throws SQLException {\r\n        assertEquals(0, employeeDao.findAll().size());   \r\n    }\r\n\r\n    public void setLogger(Logger logger) {\r\n        this.logger = logger;\r\n    }\r\n}\r\n```","```\r\ncom.baeldung.extensions.LoggingExtension\r\n```","```\r\nLauncherDiscoveryRequest request\r\n  = LauncherDiscoveryRequestBuilder.request()\r\n  .selectors(selectClass(\"com.baeldung.EmployeesTest\"))\r\n  .configurationParameter(\"junit.jupiter.extensions.autodetection.enabled\", \"true\")\r\n.build();\r\n```","```\r\npublic class JdbcConnectionUtil {\r\n\r\n    private static Connection con;\r\n\r\n    // no-arg getConnection\r\n\r\n    public static Connection getConnection(String url, String driver, String username, String password) {\r\n        if (con == null) {\r\n            // create connection \r\n            return con;\r\n        }\r\n\r\n        return con;\r\n    }\r\n}\r\n```","```\r\npublic EmployeeDatabaseSetupExtension(String url, String driver, String username, String password) {\r\n    con = JdbcConnectionUtil.getConnection(url, driver, username, password);\r\n    employeeDao = new EmployeeJdbcDao(con);\r\n}\r\n```","```\r\n@ExtendWith({EnvironmentExtension.class, EmployeeDaoParameterResolver.class})\r\npublic class ProgrammaticEmployeesUnitTest {\r\n\r\n    private EmployeeJdbcDao employeeDao;\r\n\r\n    @RegisterExtension \r\n    static EmployeeDatabaseSetupExtension DB =\r\n      new EmployeeDatabaseSetupExtension(\"jdbc:h2:mem:AnotherDb;DB_CLOSE_DELAY=-1\", \"org.h2.Driver\", \"sa\", \"\");\r\n\r\n    // same constrcutor and tests as before\r\n}\r\n```","```\r\npublic class MultipleExtensionsUnitTest {\r\n\r\n    @Order(1) \r\n    @RegisterExtension \r\n    static EmployeeDatabaseSetupExtension SECOND_DB = // omitted\r\n\r\n    @Order(0)\r\n    @RegisterExtension     \r\n    static EmployeeDatabaseSetupExtension FIRST_DB = // omitted\r\n\r\n    @RegisterExtension     \r\n    static EmployeeDatabaseSetupExtension LAST_DB = // omitted\r\n\r\n    // omitted\r\n}\r\n```"]