["```\r\n<dependency>\r\n    <groupId>org.openjdk.jol</groupId>\r\n    <artifactId>jol-core</artifactId>\r\n    <version>0.10</version>\r\n</dependency>\r\n```","```\r\nSystem.out.println(VM.current().details());\r\n```","```\r\n# Running 64-bit HotSpot VM.\r\n# Objects are 8 bytes aligned.\r\n# Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n# Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n```","```\r\n# Field sizes by type: 8, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n# Array element sizes: 8, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]\r\n```","```\r\npublic class SimpleInt {\r\n    private int state;\r\n}\r\n```","```\r\nSystem.out.println(ClassLayout.parseClass(SimpleInt.class).toPrintable());\r\n```","```\r\nSimpleInt object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0    12        (object header)                           N/A\r\n     12     4    int SimpleInt.state                           N/A\r\nInstance size: 16 bytes\r\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\r\n```","```\r\nSimpleInt instance = new SimpleInt();\r\nSystem.out.println(ClassLayout.parseInstance(instance).toPrintable());\r\n```","```\r\nSimpleInt object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION               VALUE\r\n      0     4        (object header)           01 00 00 00 (00000001 00000000 00000000 00000000) (1) # mark\r\n      4     4        (object header)           00 00 00 00 (00000000 00000000 00000000 00000000) (0) # mark\r\n      8     4        (object header)           9b 1b 01 f8 (10011011 00011011 00000001 11111000) (-134145125) # klass\r\n     12     4    int SimpleInt.state           0\r\nInstance size: 16 bytes\r\nSpace losses: 0 bytes internal + 0 bytes external = 0 bytes total\r\n```","```\r\nSystem.out.println(\"The identity hash code is \" + System.identityHashCode(instance));\r\nSystem.out.println(ClassLayout.parseInstance(instance).toPrintable());\r\n```","```\r\nThe identity hash code is 1702146597\r\nSimpleInt object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION               VALUE\r\n      0     4        (object header)           01 25 b2 74 (00000001 00100101 10110010 01110100) (1957831937)\r\n      4     4        (object header)           65 00 00 00 (01100101 00000000 00000000 00000000) (101)\r\n      8     4        (object header)           9b 1b 01 f8 (10011011 00011011 00000001 11111000) (-134145125)\r\n     12     4    int SimpleInt.state           0\r\n```","```\r\n65 74 b2 25 = 01100101 01110100 10110010 00100101 = 1702146597\r\n```","```\r\npublic class SimpleLong {\r\n    private long state;\r\n}\r\n```","```\r\nSystem.out.println(ClassLayout.parseClass(SimpleLong.class).toPrintable());\r\n```","```\r\nSimpleLong object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0    12        (object header)                           N/A\r\n     12     4        (alignment/padding gap)                  \r\n     16     8   long SimpleLong.state                          N/A\r\nInstance size: 24 bytes\r\nSpace losses: 4 bytes internal + 0 bytes external = 4 bytes total\r\n```","```\r\nSimpleLong object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0    12        (object header)                           N/A\r\n     12     4        (alignment/padding gap)                  \r\n     16     8   long SimpleLong.state                          N/A\r\n     24     8        (loss due to the next object alignment)\r\nInstance size: 32 bytes\r\nSpace losses: 4 bytes internal + 8 bytes external = 12 bytes total\r\n```","```\r\npublic class FieldsArrangement {\r\n    private boolean first;\r\n    private char second;\r\n    private double third;\r\n    private int fourth;\r\n    private boolean fifth;\r\n}\r\n```","```\r\nOFFSET  SIZE      TYPE DESCRIPTION                               VALUE\r\n      0    12           (object header)                           N/A\r\n     12     4       int FieldsArrangement.fourth                  N/A\r\n     16     8    double FieldsArrangement.third                   N/A\r\n     24     2      char FieldsArrangement.second                  N/A\r\n     26     1   boolean FieldsArrangement.first                   N/A\r\n     27     1   boolean FieldsArrangement.fifth                   N/A\r\n     28     4           (loss due to the next object alignment)\r\n```","```\r\npublic class Lock {}\r\n```","```\r\nLock object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0     4        (object header)                           01 00 00 00 \r\n      4     4        (object header)                           00 00 00 00\r\n      8     4        (object header)                           85 23 02 f8\r\n     12     4        (loss due to the next object alignment)\r\nInstance size: 16 bytes\r\n```","```\r\nsynchronized (lock) {\r\n    System.out.println(ClassLayout.parseInstance(lock).toPrintable());\r\n}\r\n```","```\r\nLock object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0     4        (object header)                           f0 78 12 03\r\n      4     4        (object header)                           00 70 00 00\r\n      8     4        (object header)                           85 23 02 f8\r\n     12     4        (loss due to the next object alignment)\r\n```","```\r\nvolatile Object consumer;\r\nObject instance = new Object();\r\nlong lastAddr = VM.current().addressOf(instance);\r\nClassLayout layout = ClassLayout.parseInstance(instance);\r\n\r\nfor (int i = 0; i < 10_000; i++) {\r\n    long currentAddr = VM.current().addressOf(instance);\r\n    if (currentAddr != lastAddr) {\r\n        System.out.println(layout.toPrintable());\r\n    }\r\n\r\n    for (int j = 0; j < 10_000; j++) {\r\n        consumer = new Object();\r\n    }\r\n\r\n    lastAddr = currentAddr;\r\n}\r\n```","```\r\n09 00 00 00 (00001001 00000000 00000000 00000000)\r\n              ^^^^\r\n11 00 00 00 (00010001 00000000 00000000 00000000)\r\n              ^^^^\r\n19 00 00 00 (00011001 00000000 00000000 00000000)\r\n              ^^^^\r\n21 00 00 00 (00100001 00000000 00000000 00000000)\r\n              ^^^^\r\n29 00 00 00 (00101001 00000000 00000000 00000000)\r\n              ^^^^\r\n31 00 00 00 (00110001 00000000 00000000 00000000)\r\n              ^^^^\r\n31 00 00 00 (00110001 00000000 00000000 00000000)\r\n              ^^^^\r\n```","```\r\npublic class Isolated {\r\n\r\n    @Contended\r\n    private int v1;\r\n\r\n    @Contended\r\n    private long v2;\r\n}\r\n```","```\r\nIsolated object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0    12        (object header)                           N/A\r\n     12   128        (alignment/padding gap)                  \r\n    140     4    int Isolated.i                                N/A\r\n    144   128        (alignment/padding gap)                  \r\n    272     8   long Isolated.l                                N/A\r\nInstance size: 280 bytes\r\nSpace losses: 256 bytes internal + 0 bytes external = 256 bytes total\r\n```","```\r\nboolean[] booleans = new boolean[3];\r\nSystem.out.println(ClassLayout.parseInstance(booleans).toPrintable());\r\n```","```\r\n[Z object internals:\r\n OFFSET  SIZE      TYPE DESCRIPTION                               VALUE\r\n      0     4           (object header)                           01 00 00 00 # mark\r\n      4     4           (object header)                           00 00 00 00 # mark\r\n      8     4           (object header)                           05 00 00 f8 # klass\r\n     12     4           (object header)                           03 00 00 00 # array length\r\n     16     3   boolean [Z.<elements>                             N/A\r\n     19     5           (loss due to the next object alignment)\r\nInstance size: 24 bytes\r\nSpace losses: 0 bytes internal + 5 bytes external = 5 bytes total\r\n```","```\r\n[Z object internals:\r\n OFFSET  SIZE      TYPE DESCRIPTION                               VALUE\r\n      0     4           (object header)                           01 00 00 00 # mark\r\n      4     4           (object header)                           00 00 00 00 # mark\r\n      8     4           (object header)                           28 60 d2 11 # klass\r\n     12     4           (object header)                           01 00 00 00 # klass\r\n     16     4           (object header)                           03 00 00 00 # length\r\n     20     4           (alignment/padding gap)                  \r\n     24     3   boolean [Z.<elements>                             N/A\r\n     27     5           (loss due to the next object alignment)\r\n```"]