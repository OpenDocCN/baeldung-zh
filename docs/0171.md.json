["```\r\n@Entity\r\npublic class User{\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private String username;\r\n\r\n    private String password;\r\n\r\n    @ManyToMany(fetch = FetchType.EAGER) \r\n    @JoinTable(name = \"users_privileges\", \r\n      joinColumns = \r\n        @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"),\r\n      inverseJoinColumns = \r\n        @JoinColumn(name = \"privilege_id\", referencedColumnName = \"id\")) \r\n    private Set<Privilege> privileges;\r\n\r\n    @ManyToOne(fetch = FetchType.EAGER)\r\n    @JoinColumn(name = \"organization_id\", referencedColumnName = \"id\")\r\n    private Organization organization;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Privilege {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private String name;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Organization {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private String name;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic class MyUserPrincipal implements UserDetails {\r\n\r\n    private User user;\r\n\r\n    public MyUserPrincipal(User user) {\r\n        this.user = user;\r\n    }\r\n\r\n    @Override\r\n    public String getUsername() {\r\n        return user.getUsername();\r\n    }\r\n\r\n    @Override\r\n    public String getPassword() {\r\n        return user.getPassword();\r\n    }\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\r\n        for (Privilege privilege : user.getPrivileges()) {\r\n            authorities.add(new SimpleGrantedAuthority(privilege.getName()));\r\n        }\r\n        return authorities;\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\n@Service\r\npublic class MyUserDetailsService implements UserDetailsService {\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) {\r\n        User user = userRepository.findByUsername(username);\r\n        if (user == null) {\r\n            throw new UsernameNotFoundException(username);\r\n        }\r\n        return new MyUserPrincipal(user);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class SetupData {\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    private PrivilegeRepository privilegeRepository;\r\n\r\n    @Autowired\r\n    private OrganizationRepository organizationRepository;\r\n\r\n    @PostConstruct\r\n    public void init() {\r\n        initPrivileges();\r\n        initOrganizations();\r\n        initUsers();\r\n    }\r\n}\r\n```","```\r\nprivate void initPrivileges() {\r\n    Privilege privilege1 = new Privilege(\"FOO_READ_PRIVILEGE\");\r\n    privilegeRepository.save(privilege1);\r\n\r\n    Privilege privilege2 = new Privilege(\"FOO_WRITE_PRIVILEGE\");\r\n    privilegeRepository.save(privilege2);\r\n}\r\n```","```\r\nprivate void initOrganizations() {\r\n    Organization org1 = new Organization(\"FirstOrg\");\r\n    organizationRepository.save(org1);\r\n\r\n    Organization org2 = new Organization(\"SecondOrg\");\r\n    organizationRepository.save(org2);\r\n}\r\n```","```\r\nprivate void initUsers() {\r\n    Privilege privilege1 = privilegeRepository.findByName(\"FOO_READ_PRIVILEGE\");\r\n    Privilege privilege2 = privilegeRepository.findByName(\"FOO_WRITE_PRIVILEGE\");\r\n\r\n    User user1 = new User();\r\n    user1.setUsername(\"john\");\r\n    user1.setPassword(\"123\");\r\n    user1.setPrivileges(new HashSet<Privilege>(Arrays.asList(privilege1)));\r\n    user1.setOrganization(organizationRepository.findByName(\"FirstOrg\"));\r\n    userRepository.save(user1);\r\n\r\n    User user2 = new User();\r\n    user2.setUsername(\"tom\");\r\n    user2.setPassword(\"111\");\r\n    user2.setPrivileges(new HashSet<Privilege>(Arrays.asList(privilege1, privilege2)));\r\n    user2.setOrganization(organizationRepository.findByName(\"SecondOrg\"));\r\n    userRepository.save(user2);\r\n}\r\n```","```\r\npublic class CustomPermissionEvaluator implements PermissionEvaluator {\r\n    @Override\r\n    public boolean hasPermission(\r\n      Authentication auth, Object targetDomainObject, Object permission) {\r\n        if ((auth == null) || (targetDomainObject == null) || !(permission instanceof String)){\r\n            return false;\r\n        }\r\n        String targetType = targetDomainObject.getClass().getSimpleName().toUpperCase();\r\n\r\n        return hasPrivilege(auth, targetType, permission.toString().toUpperCase());\r\n    }\r\n\r\n    @Override\r\n    public boolean hasPermission(\r\n      Authentication auth, Serializable targetId, String targetType, Object permission) {\r\n        if ((auth == null) || (targetType == null) || !(permission instanceof String)) {\r\n            return false;\r\n        }\r\n        return hasPrivilege(auth, targetType.toUpperCase(), \r\n          permission.toString().toUpperCase());\r\n    }\r\n}\r\n```","```\r\nprivate boolean hasPrivilege(Authentication auth, String targetType, String permission) {\r\n    for (GrantedAuthority grantedAuth : auth.getAuthorities()) {\r\n        if (grantedAuth.getAuthority().startsWith(targetType) && \r\n          grantedAuth.getAuthority().contains(permission)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\n@PostAuthorize(\"hasAuthority('FOO_READ_PRIVILEGE')\")\r\n```","```\r\n@PostAuthorize(\"hasPermission(returnObject, 'read')\")\r\n```","```\r\n@PreAuthorize(\"hasPermission(#id, 'Foo', 'read')\")\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {\r\n\r\n    @Override\r\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\r\n        DefaultMethodSecurityExpressionHandler expressionHandler = \r\n          new DefaultMethodSecurityExpressionHandler();\r\n        expressionHandler.setPermissionEvaluator(new CustomPermissionEvaluator());\r\n        return expressionHandler;\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class MainController {\r\n\r\n    @PostAuthorize(\"hasPermission(returnObject, 'read')\")\r\n    @GetMapping(\"/foos/{id}\")\r\n    @ResponseBody\r\n    public Foo findById(@PathVariable long id) {\r\n        return new Foo(\"Sample\");\r\n    }\r\n\r\n    @PreAuthorize(\"hasPermission(#foo, 'write')\")\r\n    @PostMapping(\"/foos\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    @ResponseBody\r\n    public Foo create(@RequestBody Foo foo) {\r\n        return foo;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserWithReadPrivilegeAndHasPermission_whenGetFooById_thenOK() {\r\n    Response response = givenAuth(\"john\", \"123\").get(\"http://localhost:8082/foos/1\");\r\n    assertEquals(200, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"id\"));\r\n}\r\n\r\n@Test\r\npublic void givenUserWithNoWritePrivilegeAndHasPermission_whenPostFoo_thenForbidden() {\r\n    Response response = givenAuth(\"john\", \"123\").contentType(MediaType.APPLICATION_JSON_VALUE)\r\n                                                .body(new Foo(\"sample\"))\r\n                                                .post(\"http://localhost:8082/foos\");\r\n    assertEquals(403, response.getStatusCode());\r\n}\r\n\r\n@Test\r\npublic void givenUserWithWritePrivilegeAndHasPermission_whenPostFoo_thenOk() {\r\n    Response response = givenAuth(\"tom\", \"111\").contentType(MediaType.APPLICATION_JSON_VALUE)\r\n                                               .body(new Foo(\"sample\"))\r\n                                               .post(\"http://localhost:8082/foos\");\r\n    assertEquals(201, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"id\"));\r\n}\r\n```","```\r\nprivate RequestSpecification givenAuth(String username, String password) {\r\n    FormAuthConfig formAuthConfig = \r\n      new FormAuthConfig(\"http://localhost:8082/login\", \"username\", \"password\");\r\n\r\n    return RestAssured.given().auth().form(username, password, formAuthConfig);\r\n}\r\n```","```\r\npublic class CustomMethodSecurityExpressionRoot \r\n  extends SecurityExpressionRoot implements MethodSecurityExpressionOperations {\r\n\r\n    public CustomMethodSecurityExpressionRoot(Authentication authentication) {\r\n        super(authentication);\r\n    }\r\n\r\n    public boolean isMember(Long OrganizationId) {\r\n        User user = ((MyUserPrincipal) this.getPrincipal()).getUser();\r\n        return user.getOrganization().getId().longValue() == OrganizationId.longValue();\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\npublic class CustomMethodSecurityExpressionHandler \r\n  extends DefaultMethodSecurityExpressionHandler {\r\n    private AuthenticationTrustResolver trustResolver = \r\n      new AuthenticationTrustResolverImpl();\r\n\r\n    @Override\r\n    protected MethodSecurityExpressionOperations createSecurityExpressionRoot(\r\n      Authentication authentication, MethodInvocation invocation) {\r\n        CustomMethodSecurityExpressionRoot root = \r\n          new CustomMethodSecurityExpressionRoot(authentication);\r\n        root.setPermissionEvaluator(getPermissionEvaluator());\r\n        root.setTrustResolver(this.trustResolver);\r\n        root.setRoleHierarchy(getRoleHierarchy());\r\n        return root;\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {\r\n    @Override\r\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\r\n        CustomMethodSecurityExpressionHandler expressionHandler = \r\n          new CustomMethodSecurityExpressionHandler();\r\n        expressionHandler.setPermissionEvaluator(new CustomPermissionEvaluator());\r\n        return expressionHandler;\r\n    }\r\n}\r\n```","```\r\n@PreAuthorize(\"isMember(#id)\")\r\n@GetMapping(\"/organizations/{id}\")\r\n@ResponseBody\r\npublic Organization findOrgById(@PathVariable long id) {\r\n    return organizationRepository.findOne(id);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUserMemberInOrganization_whenGetOrganization_thenOK() {\r\n    Response response = givenAuth(\"john\", \"123\").get(\"http://localhost:8082/organizations/1\");\r\n    assertEquals(200, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"id\"));\r\n}\r\n\r\n@Test\r\npublic void givenUserMemberNotInOrganization_whenGetOrganization_thenForbidden() {\r\n    Response response = givenAuth(\"john\", \"123\").get(\"http://localhost:8082/organizations/2\");\r\n    assertEquals(403, response.getStatusCode());\r\n}\r\n```","```\r\npublic class MySecurityExpressionRoot implements MethodSecurityExpressionOperations {\r\n    public MySecurityExpressionRoot(Authentication authentication) {\r\n        if (authentication == null) {\r\n            throw new IllegalArgumentException(\"Authentication object cannot be null\");\r\n        }\r\n        this.authentication = authentication;\r\n    }\r\n\r\n    @Override\r\n    public final boolean hasAuthority(String authority) {\r\n        throw new RuntimeException(\"method hasAuthority() not allowed\");\r\n    }\r\n    ...\r\n}\r\n```","```\r\n@PreAuthorize(\"hasAuthority('FOO_READ_PRIVILEGE')\")\r\n@GetMapping(\"/foos\")\r\n@ResponseBody\r\npublic Foo findFooByName(@RequestParam String name) {\r\n    return new Foo(name);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDisabledSecurityExpression_whenGetFooByName_thenError() {\r\n    Response response = givenAuth(\"john\", \"123\").get(\"http://localhost:8082/foos?name=sample\");\r\n    assertEquals(500, response.getStatusCode());\r\n    assertTrue(response.asString().contains(\"method hasAuthority() not allowed\"));\r\n}\r\n```"]