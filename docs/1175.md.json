["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <version>2.6.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class PropertySourceResolver {\r\n\r\n    @Value(\"${example.firstProperty}\") private String firstProperty;\r\n    @Value(\"${example.secondProperty}\") private String secondProperty;\r\n\r\n    public String getFirstProperty() {\r\n        return firstProperty;\r\n    }\r\n\r\n    public String getSecondProperty() {\r\n        return secondProperty;\r\n    }\r\n}\r\n```","```\r\nexample.firstProperty=defaultFirst\r\nexample.secondProperty=defaultSecond\r\n```","```\r\nexample.firstProperty=file\r\nexample.secondProperty=file\r\n```","```\r\n@SpringBootTest\r\npublic class TestResourcePropertySourceResolverIntegrationTest {\r\n\r\n    @Autowired private PropertySourceResolver propertySourceResolver;\r\n\r\n    @Test\r\n    public void shouldTestResourceFile_overridePropertyValues() {\r\n        String firstProperty = propertySourceResolver.getFirstProperty();\r\n        String secondProperty = propertySourceResolver.getSecondProperty();\r\n\r\n        assertEquals(\"file\", firstProperty);\r\n        assertEquals(\"file\", secondProperty);\r\n    }\r\n}\r\n```","```\r\nexample.firstProperty=profile\r\n```","```\r\n@SpringBootTest\r\n@ActiveProfiles(\"test\")\r\npublic class ProfilePropertySourceResolverIntegrationTest {\r\n\r\n    @Autowired private PropertySourceResolver propertySourceResolver;\r\n\r\n    @Test\r\n    public void shouldProfiledProperty_overridePropertyValues() {\r\n        String firstProperty = propertySourceResolver.getFirstProperty();\r\n        String secondProperty = propertySourceResolver.getSecondProperty();\r\n\r\n        assertEquals(\"profile\", firstProperty);\r\n        assertEquals(\"defaultSecond\", secondProperty);\r\n    }\r\n}\r\n```","```\r\n@SpringBootTest(properties = { \"example.firstProperty=annotation\" })\r\npublic class SpringBootPropertySourceResolverIntegrationTest {\r\n\r\n    @Autowired private PropertySourceResolver propertySourceResolver;\r\n\r\n    @Test\r\n    public void shouldSpringBootTestAnnotation_overridePropertyValues() {\r\n        String firstProperty = propertySourceResolver.getFirstProperty();\r\n        String secondProperty = propertySourceResolver.getSecondProperty();\r\n\r\n        Assert.assertEquals(\"annotation\", firstProperty);\r\n        Assert.assertEquals(\"defaultSecond\", secondProperty);\r\n    }\r\n}\r\n```","```\r\npublic class PropertyOverrideContextInitializer\r\n  implements ApplicationContextInitializer<ConfigurableApplicationContext> {\r\n\r\n    static final String PROPERTY_FIRST_VALUE = \"contextClass\";\r\n\r\n    @Override\r\n    public void initialize(ConfigurableApplicationContext configurableApplicationContext) {\r\n        TestPropertySourceUtils.addInlinedPropertiesToEnvironment(\r\n          configurableApplicationContext, \"example.firstProperty=\" + PROPERTY_FIRST_VALUE);\r\n\r\n        TestPropertySourceUtils.addPropertiesFilesToEnvironment(\r\n          configurableApplicationContext, \"context-override-application.properties\");\r\n    }\r\n}\r\n```","```\r\nexample.secondProperty=contextFile\r\n```","```\r\n@SpringBootTest\r\n@ContextConfiguration(\r\n  initializers = PropertyOverrideContextInitializer.class,\r\n  classes = Application.class)\r\npublic class ContextPropertySourceResolverIntegrationTest {\r\n\r\n    @Autowired private PropertySourceResolver propertySourceResolver;\r\n\r\n    @Test\r\n    public void shouldContext_overridePropertyValues() {\r\n        final String firstProperty = propertySourceResolver.getFirstProperty();\r\n        final String secondProperty = propertySourceResolver.getSecondProperty();\r\n\r\n        assertEquals(PropertyOverrideContextInitializer.PROPERTY_FIRST_VALUE, firstProperty);\r\n        assertEquals(\"contextFile\", secondProperty);\r\n    }\r\n}\r\n```"]