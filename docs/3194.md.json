["```\r\n@Test\r\nvoid givenExternalServiceReturnsError_whenGettingData_thenRetryAndReturnResponse() {\r\n\r\n    mockExternalService.enqueue(new MockResponse()\r\n      .setResponseCode(SERVICE_UNAVAILABLE.code()));\r\n    mockExternalService.enqueue(new MockResponse()\r\n      .setResponseCode(SERVICE_UNAVAILABLE.code()));\r\n    mockExternalService.enqueue(new MockResponse()\r\n      .setResponseCode(SERVICE_UNAVAILABLE.code()));\r\n    mockExternalService.enqueue(new MockResponse()\r\n      .setBody(\"stock data\"));\r\n\r\n    StepVerifier.create(externalConnector.getData(\"ABC\"))\r\n      .expectNextMatches(response -> response.equals(\"stock data\"))\r\n      .verifyComplete();\r\n\r\n    verifyNumberOfGetRequests(4);\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n        .uri(PATH_BY_ID, stockId)\r\n        .retrieve()\r\n        .bodyToMono(String.class)\r\n        .retry(3);\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n        .uri(PATH_BY_ID, stockId)\r\n        .retrieve()\r\n        .bodyToMono(String.class)\r\n        .retryWhen(Retry.max(3));\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n      .uri(PATH_BY_ID, stockId)\r\n      .retrieve()\r\n      .bodyToMono(String.class)\r\n      .retryWhen(Retry.fixedDelay(3, Duration.ofSeconds(2)));\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n      .uri(PATH_BY_ID, stockId)\r\n      .retrieve()\r\n      .bodyToMono(String.class)\r\n      .retryWhen(Retry.backoff(3, Duration.ofSeconds(2)));\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n      .uri(PATH_BY_ID, stockId)\r\n      .accept(MediaType.APPLICATION_JSON)\r\n      .retrieve()\r\n      .bodyToMono(String.class)\r\n      .retryWhen(Retry.backoff(3, Duration.ofSeconds(2)).jitter(0.75));\r\n}\r\n```","```\r\npublic class ServiceException extends RuntimeException {\r\n\r\n    public ServiceException(String message, int statusCode) {\r\n        super(message);\r\n        this.statusCode = statusCode;\r\n    }\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n      .uri(PATH_BY_ID, stockId)\r\n      .retrieve()\r\n      .onStatus(HttpStatus::is5xxServerError, \r\n          response -> Mono.error(new ServiceException(\"Server error\", response.rawStatusCode())))\r\n      .bodyToMono(String.class)\r\n      .retryWhen(Retry.backoff(3, Duration.ofSeconds(5))\r\n          .filter(throwable -> throwable instanceof ServiceException));\r\n}\r\n```","```\r\npublic Mono<String> getData(String stockId) {\r\n    return webClient.get()\r\n      .uri(PATH_BY_ID, stockId)\r\n      .retrieve()\r\n      .onStatus(HttpStatus::is5xxServerError, response -> Mono.error(new ServiceException(\"Server error\", response.rawStatusCode())))\r\n      .bodyToMono(String.class)\r\n      .retryWhen(Retry.backoff(3, Duration.ofSeconds(5))\r\n          .filter(throwable -> throwable instanceof ServiceException)\r\n          .onRetryExhaustedThrow((retryBackoffSpec, retrySignal) -> {\r\n              throw new ServiceException(\"External Service failed to process after max retries\", HttpStatus.SERVICE_UNAVAILABLE.value());\r\n          }));\r\n}\r\n```"]