["```\r\npublic static boolean isPangram(String str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    Boolean[] alphabetMarker = new Boolean[ALPHABET_COUNT];\r\n    Arrays.fill(alphabetMarker, false);\r\n    int alphabetIndex = 0;\r\n    str = str.toUpperCase();\r\n    for (int i = 0; i < str.length(); i++) {\r\n        if ('A' <= str.charAt(i) && str.charAt(i) <= 'Z') {\r\n            alphabetIndex = str.charAt(i) - 'A';\r\n            alphabetMarker[alphabetIndex] = true;\r\n        }\r\n    }\r\n    for (boolean index : alphabetMarker) {\r\n        if (!index) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidString_isPanagram_shouldReturnSuccess() {\r\n    String input = \"Two driven jocks help fax my big quiz\";\r\n    assertTrue(Pangram.isPangram(input));  \r\n}\r\n```","```\r\npublic static boolean isPangramWithStreams(String str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    String strUpper = str.toUpperCase();\r\n\r\n    Stream<Character> filteredCharStream = strUpper.chars()\r\n      .filter(item -> ((item >= 'A' && item <= 'Z')))\r\n      .mapToObj(c -> (char) c);\r\n\r\n    Map<Character, Boolean> alphabetMap = \r\n      filteredCharStream.collect(Collectors.toMap(item -> item, k -> Boolean.TRUE, (p1, p2) -> p1));\r\n\r\n    return alphabetMap.size() == ALPHABET_COUNT;\r\n}\r\n```","```\r\n@Test\r\npublic void givenValidString_isPangramWithStreams_shouldReturnSuccess() {\r\n    String input = \"The quick brown fox jumps over the lazy dog\";\r\n    assertTrue(Pangram.isPangramWithStreams(input));\r\n}\r\n```","```\r\npublic static boolean isPerfectPangram(String str) {\r\n    if (str == null) {\r\n        return false;\r\n    }\r\n    String strUpper = str.toUpperCase();\r\n\r\n    Stream<Character> filteredCharStream = strUpper.chars()\r\n        .filter(item -> ((item >= 'A' && item <= 'Z')))\r\n        .mapToObj(c -> (char) c);\r\n    Map<Character, Long> alphabetFrequencyMap = \r\n      filteredCharStream.collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\r\n\r\n    return alphabetFrequencyMap.size() == ALPHABET_COUNT && \r\n      alphabetFrequencyMap.values().stream().allMatch(item -> item == 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPerfectPangramString_isPerfectPangram_shouldReturnSuccess() {\r\n    String input = \"abcdefghijklmNoPqrStuVwxyz\";\r\n    assertTrue(Pangram.isPerfectPangram(input));\r\n}\r\n```","```\r\nString input = \"Two driven jocks help fax my big quiz\";\r\nassertFalse(Pangram.isPerfectPangram(input));\r\n```"]