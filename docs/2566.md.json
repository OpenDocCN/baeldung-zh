["```\r\n<dependency>\r\n    <groupId>org.awaitility</groupId>\r\n    <artifactId>awaitility</artifactId>\r\n    <version>3.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.awaitility</groupId>\r\n    <artifactId>awaitility-proxy</artifactId>\r\n    <version>3.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class AsyncService {\r\n    private final int DELAY = 1000;\r\n    private final int INIT_DELAY = 2000;\r\n\r\n    private AtomicLong value = new AtomicLong(0);\r\n    private Executor executor = Executors.newFixedThreadPool(4);\r\n    private volatile boolean initialized = false;\r\n\r\n    void initialize() {\r\n        executor.execute(() -> {\r\n            sleep(INIT_DELAY);\r\n            initialized = true;\r\n        });\r\n    }\r\n\r\n    boolean isInitialized() {\r\n        return initialized;\r\n    }\r\n\r\n    void addValue(long val) {\r\n        throwIfNotInitialized();\r\n        executor.execute(() -> {\r\n            sleep(DELAY);\r\n            value.addAndGet(val);\r\n        });\r\n    }\r\n\r\n    public long getValue() {\r\n        throwIfNotInitialized();\r\n        return value.longValue();\r\n    }\r\n\r\n    private void sleep(int delay) {\r\n        try {\r\n            Thread.sleep(delay);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n\r\n    private void throwIfNotInitialized() {\r\n        if (!initialized) {\r\n            throw new IllegalStateException(\"Service is not initialized\");\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class AsyncServiceLongRunningManualTest {\r\n    private AsyncService asyncService;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        asyncService = new AsyncService();\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\nasyncService.initialize();\r\nawait()\r\n  .until(asyncService::isInitialized);\r\n```","```\r\nAwaitility.setDefaultPollInterval(10, TimeUnit.MILLISECONDS);\r\nAwaitility.setDefaultPollDelay(Duration.ZERO);\r\nAwaitility.setDefaultTimeout(Duration.ONE_MINUTE);\r\n```","```\r\nasyncService.initialize();\r\nawait()\r\n    .atLeast(Duration.ONE_HUNDRED_MILLISECONDS)\r\n    .atMost(Duration.FIVE_SECONDS)\r\n  .with()\r\n    .pollInterval(Duration.ONE_HUNDRED_MILLISECONDS)\r\n    .until(asyncService::isInitialized);\r\n```","```\r\nasyncService.initialize();\r\nawait()\r\n  .until(asyncService::isInitialized);\r\nlong value = 5;\r\nasyncService.addValue(value);\r\nawait()\r\n  .until(asyncService::getValue, equalTo(value));\r\n```","```\r\nasyncService.initialize();\r\ngiven().ignoreException(IllegalStateException.class)\r\n  .await().atMost(Duration.FIVE_SECONDS)\r\n  .atLeast(Duration.FIVE_HUNDRED_MILLISECONDS)\r\n  .until(asyncService::getValue, equalTo(0L));\r\n```","```\r\nasyncService.initialize();\r\nawait()\r\n  .untilCall(to(asyncService).isInitialized(), equalTo(true));\r\n```","```\r\nasyncService.initialize();\r\nawait()\r\n  .until(fieldIn(asyncService)\r\n  .ofType(boolean.class)\r\n  .andWithName(\"initialized\"), equalTo(true));\r\n```"]