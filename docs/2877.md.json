["```\r\n<dependencies>\r\n    <dependency>\r\n        <groupId>org.junit.jupiter</groupId>\r\n        <artifactId>junit-jupiter-engine</artifactId>\r\n        <version>5.8.1</version>\r\n        <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n        <groupId>org.junit.platform</groupId>\r\n        <artifactId>junit-platform-launcher</artifactId>\r\n        <version>1.2.0</version>\r\n    </dependency>\r\n</dependencies>\r\n\r\n// for JUnit 4\r\n<dependency> \r\n    <groupId>junit</groupId> \r\n    <artifactId>junit</artifactId> \r\n    <version>4.12</version> \r\n    <scope>test</scope> \r\n</dependency>\r\n```","```\r\npublic class FirstUnitTest {\r\n\r\n    @Test\r\n    public void whenThis_thenThat() {\r\n        assertTrue(true);\r\n    }\r\n\r\n    @Test\r\n    public void whenSomething_thenSomething() {\r\n        assertTrue(true);\r\n    }\r\n\r\n    @Test\r\n    public void whenSomethingElse_thenSomethingElse() {\r\n        assertTrue(true);\r\n    }\r\n}\r\n```","```\r\npublic class SecondUnitTest {\r\n\r\n    @Test\r\n    public void whenSomething_thenSomething() {\r\n        assertTrue(true);\r\n    }\r\n\r\n    @Test\r\n    public void whensomethingElse_thenSomethingElse() {\r\n        assertTrue(true);\r\n    }\r\n}\r\n```","```\r\nJUnitCore junit = new JUnitCore();\r\njunit.addListener(new TextListener(System.out));\r\njunit.run(FirstUnitTest.class);\r\n```","```\r\nRunning one test class:\r\n..\r\nTime: 0.019\r\nOK (2 tests)\r\n```","```\r\nJUnitCore junit = new JUnitCore();\r\njunit.addListener(new TextListener(System.out));\r\n\r\nResult result = junit.run(\r\n  FirstUnitTest.class, \r\n  SecondUnitTest.class);\r\n\r\nresultReport(result);\r\n```","```\r\npublic static void resultReport(Result result) {\r\n    System.out.println(\"Finished. Result: Failures: \" +\r\n      result.getFailureCount() + \". Ignored: \" +\r\n      result.getIgnoreCount() + \". Tests run: \" +\r\n      result.getRunCount() + \". Time: \" +\r\n      result.getRunTime() + \"ms.\");\r\n} \r\n```","```\r\n@RunWith(Suite.class)\r\n@Suite.SuiteClasses({\r\n  FirstUnitTest.class,\r\n  SecondUnitTest.class\r\n})\r\npublic class MyTestSuite {\r\n}\r\n```","```\r\nJUnitCore junit = new JUnitCore();\r\njunit.addListener(new TextListener(System.out));\r\nResult result = junit.run(MyTestSuite.class);\r\nresultReport(result);\r\n```","```\r\nTest test = new JUnit4TestAdapter(FirstUnitTest.class);\r\nRepeatedTest repeatedTest = new RepeatedTest(test, 5);\r\n\r\nJUnitCore junit = new JUnitCore();\r\njunit.addListener(new TextListener(System.out));\r\n\r\njunit.run(repeatedTest);\r\n```","```\r\nTestSuite mySuite = new ActiveTestSuite();\r\n\r\nJUnitCore junit = new JUnitCore();\r\njunit.addListener(new TextListener(System.out));\r\n\r\nmySuite.addTest(new RepeatedTest(new JUnit4TestAdapter(FirstUnitTest.class), 5));\r\nmySuite.addTest(new RepeatedTest(new JUnit4TestAdapter(SecondUnitTest.class), 3));\r\n\r\njunit.run(mySuite);\r\n```","```\r\npublic class RunJUnit5TestsFromJava {\r\n    SummaryGeneratingListener listener = new SummaryGeneratingListener();\r\n\r\n    public void runOne() {\r\n        LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\r\n          .selectors(selectClass(FirstUnitTest.class))\r\n          .build();\r\n        Launcher launcher = LauncherFactory.create();\r\n        TestPlan testPlan = launcher.discover(request);\r\n        launcher.registerTestExecutionListeners(listener);\r\n        launcher.execute(request);\r\n    }\r\n    // main method...\r\n}\r\n```","```\r\npublic void runAll() {\r\n    LauncherDiscoveryRequest request = LauncherDiscoveryRequestBuilder.request()\r\n      .selectors(selectPackage(\"com.baeldung.junit5.runfromjava\"))\r\n      .filters(includeClassNamePatterns(\".*Test\"))\r\n      .build();\r\n    Launcher launcher = LauncherFactory.create();\r\n    TestPlan testPlan = launcher.discover(request);\r\n    launcher.registerTestExecutionListeners(listener);\r\n    launcher.execute(request);\r\n} \r\n```","```\r\npublic static void main(String[] args) {\r\n    RunJUnit5TestsFromJava runner = new RunJUnit5TestsFromJava();\r\n    runner.runAll();\r\n\r\n    TestExecutionSummary summary = runner.listener.getSummary();\r\n    summary.printTo(new PrintWriter(System.out));\r\n}\r\n```","```\r\nTest run finished after 177 ms\r\n[         7 containers found      ]\r\n[         0 containers skipped    ]\r\n[         7 containers started    ]\r\n[         0 containers aborted    ]\r\n[         7 containers successful ]\r\n[         0 containers failed     ]\r\n[        10 tests found           ]\r\n[         0 tests skipped         ]\r\n[        10 tests started         ]\r\n[         0 tests aborted         ]\r\n[        10 tests successful      ]\r\n[         0 tests failed          ]\r\n```"]