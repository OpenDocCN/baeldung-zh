["```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-couchbase</artifactId>\r\n    <version>2.0.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-validator</artifactId>\r\n    <version>5.2.4.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>joda-time</groupId>\r\n    <artifactId>joda-time</artifactId>\r\n    <version>2.9.2</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableCouchbaseRepositories(basePackages={\"com.baeldung.spring.data.couchbase\"})\r\npublic class MyCouchbaseConfig extends AbstractCouchbaseConfiguration {\r\n\r\n    @Override\r\n    protected List<String> getBootstrapHosts() {\r\n        return Arrays.asList(\"localhost\");\r\n    }\r\n\r\n    @Override\r\n    protected String getBucketName() {\r\n        return \"baeldung\";\r\n    }\r\n\r\n    @Override\r\n    protected String getBucketPassword() {\r\n        return \"\";\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected CouchbaseEnvironment getEnvironment() {\r\n   ...\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans:beans xmlns:beans=\"http://www.springframework.org/schema/beans\"\r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns=\"http://www.springframework.org/schema/data/couchbase\r\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/data/couchbase\r\n    http://www.springframework.org/schema/data/couchbase/spring-couchbase.xsd\">\r\n\r\n    <couchbase:cluster>\r\n        <couchbase:node>localhost</couchbase:node>\r\n    </couchbase:cluster>\r\n\r\n    <couchbase:clusterInfo login=\"baeldung\" password=\"\" />\r\n\r\n    <couchbase:bucket bucketName=\"baeldung\" bucketPassword=\"\"/>\r\n\r\n    <couchbase:repositories base-package=\"com.baeldung.spring.data.couchbase\"/>\r\n</beans:beans>\r\n```","```\r\n@Document\r\npublic class Person {\r\n    @Id\r\n    private String id;\r\n\r\n    @Field\r\n    @NotNull\r\n    private String firstName;\r\n\r\n    @Field\r\n    @NotNull\r\n    private String lastName;\r\n\r\n    @Field\r\n    @NotNull\r\n    private DateTime created;\r\n\r\n    @Field\r\n    private DateTime updated;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Id\r\n@Field\r\nprivate String id;\r\n```","```\r\n@Field(\"fname\")\r\nprivate String firstName;\r\n```","```\r\n{\r\n    \"firstName\": \"John\",\r\n    \"lastName\": \"Smith\",\r\n    \"created\": 1457193705667\r\n    \"_class\": \"com.baeldung.spring.data.couchbase.model.Person\"\r\n}\r\n```","```\r\n@Override\r\npublic String typeKey() {\r\n    return \"dataType\";\r\n}\r\n```","```\r\n@Override\r\npublic String typeKey() {\r\n    // use \"javaClass\" instead of \"_class\"\r\n    return MappingCouchbaseConverter.TYPEKEY_SYNCGATEWAY_COMPATIBLE;\r\n}\r\n```","```\r\npublic interface PersonRepository extends CrudRepository<Person, String> {\r\n    List<Person> findByFirstName(String firstName);\r\n}\r\n```","```\r\nCREATE PRIMARY INDEX ON baeldung USING GSI;\r\n```","```\r\nCREATE INDEX idx_firstName ON baeldung(firstName) USING GSI;\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc._class == \"com.baeldung.spring.data.couchbase.model.Person\") {\r\n        emit(meta.id, null);\r\n    }\r\n}\r\n```","```\r\n@View\r\nList<Person> findByFirstName(String firstName);\r\n```","```\r\nfunction (doc, meta) {\r\n    if(doc._class == \"com.baeldung.spring.data.couchbase.model.Person\"\r\n      && doc.firstName) {\r\n        emit(doc.firstName, null);\r\n    }\r\n}\r\n```","```\r\n@View(\"myCustomView\")\r\nList<Person> findByFirstName(String lastName);\r\n```","```\r\npublic interface PersonService {\r\n    Person findOne(String id);\r\n    List<Person> findAll();\r\n    List<Person> findByFirstName(String firstName);\r\n\r\n    void create(Person person);\r\n    void update(Person person);\r\n    void delete(Person person);\r\n}\r\n```","```\r\n@Service\r\n@Qualifier(\"PersonRepositoryService\")\r\npublic class PersonRepositoryService implements PersonService {\r\n\r\n    @Autowired\r\n    private PersonRepository repo; \r\n\r\n    public Person findOne(String id) {\r\n        return repo.findOne(id);\r\n    }\r\n\r\n    public List<Person> findAll() {\r\n        List<Person> people = new ArrayList<Person>();\r\n        Iterator<Person> it = repo.findAll().iterator();\r\n        while(it.hasNext()) {\r\n            people.add(it.next());\r\n        }\r\n        return people;\r\n    }\r\n\r\n    public List<Person> findByFirstName(String firstName) {\r\n        return repo.findByFirstName(firstName);\r\n    }\r\n\r\n    public void create(Person person) {\r\n        person.setCreated(DateTime.now());\r\n        repo.save(person);\r\n    }\r\n\r\n    public void update(Person person) {\r\n        person.setUpdated(DateTime.now());\r\n        repo.save(person);\r\n    }\r\n\r\n    public void delete(Person person) {\r\n        repo.delete(person);\r\n    }\r\n}\r\n```","```\r\n@Service\r\n@Qualifier(\"PersonTemplateService\")\r\npublic class PersonTemplateService implements PersonService {\r\n    private static final String DESIGN_DOC = \"person\";\r\n    @Autowired\r\n    private CouchbaseTemplate template;\r\n\r\n    public Person findOne(String id) {\r\n       return template.findById(id, Person.class);\r\n    }\r\n\r\n    public List<Person> findAll() {\r\n        return template.findByView(ViewQuery.from(DESIGN_DOC, \"all\"), Person.class);\r\n    }\r\n\r\n    public List<Person> findByFirstName(String firstName) {\r\n        return template.findByView(ViewQuery.from(DESIGN_DOC, \"byFirstName\"), Person.class);\r\n    }\r\n\r\n    public void create(Person person) {\r\n        person.setCreated(DateTime.now());\r\n        template.insert(person);\r\n    }\r\n\r\n    public void update(Person person) {\r\n        person.setUpdated(DateTime.now());\r\n        template.update(person);\r\n    }\r\n\r\n    public void delete(Person person) {\r\n        template.remove(person);\r\n    }\r\n}\r\n```"]