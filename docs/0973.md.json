["```\r\n@Test\r\npublic void givenText_whenSimpleRegexMatches_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"foo\");\r\n    Matcher matcher = pattern.matcher(\"foo\");\r\n\r\n    assertTrue(matcher.find());\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenSimpleRegexMatchesTwice_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"foo\");\r\n    Matcher matcher = pattern.matcher(\"foofoo\");\r\n    int matches = 0;\r\n    while (matcher.find()) {\r\n        matches++;\r\n    }\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\npublic static int runTest(String regex, String text) {\r\n    Pattern pattern = Pattern.compile(regex);\r\n    Matcher matcher = pattern.matcher(text);\r\n    int matches = 0;\r\n    while (matcher.find()) {\r\n        matches++;\r\n    }\r\n    return matches;\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesWithDotMetach_thenCorrect() {\r\n    int matches = runTest(\".\", \"foo\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRepeatedText_whenMatchesOnceWithDotMetach_thenCorrect() {\r\n    int matches= runTest(\"foo.\", \"foofoo\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenORSet_whenMatchesAny_thenCorrect() {\r\n    int matches = runTest(\"[abc]\", \"b\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenORSet_whenMatchesAnyAndAll_thenCorrect() {\r\n    int matches = runTest(\"[abc]\", \"cab\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenORSet_whenMatchesAllCombinations_thenCorrect() {\r\n    int matches = runTest(\"[bcr]at\", \"bat cat rat\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNORSet_whenMatchesNon_thenCorrect() {\r\n    int matches = runTest(\"[^abc]\", \"g\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNORSet_whenMatchesAllExceptElements_thenCorrect() {\r\n    int matches = runTest(\"[^bcr]at\", \"sat mat eat\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenUpperCaseRange_whenMatchesUpperCase_\r\n  thenCorrect() {\r\n    int matches = runTest(\r\n      \"[A-Z]\", \"Two Uppercase alphabets 34 overall\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenLowerCaseRange_whenMatchesLowerCase_\r\n  thenCorrect() {\r\n    int matches = runTest(\r\n      \"[a-z]\", \"Two Uppercase alphabets 34 overall\");\r\n\r\n    assertEquals(matches, 26);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBothLowerAndUpperCaseRange_\r\n  whenMatchesAllLetters_thenCorrect() {\r\n    int matches = runTest(\r\n      \"[a-zA-Z]\", \"Two Uppercase alphabets 34 overall\");\r\n\r\n    assertEquals(matches, 28);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNumberRange_whenMatchesAccurately_\r\n  thenCorrect() {\r\n    int matches = runTest(\r\n      \"[1-5]\", \"Two Uppercase alphabets 34 overall\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNumberRange_whenMatchesAccurately_\r\n  thenCorrect2(){\r\n    int matches = runTest(\r\n      \"3[0-5]\", \"Two Uppercase alphabets 34 overall\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoSets_whenMatchesUnion_thenCorrect() {\r\n    int matches = runTest(\"[1-3[7-9]]\", \"123456789\");\r\n\r\n    assertEquals(matches, 6);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoSets_whenMatchesIntersection_thenCorrect() {\r\n    int matches = runTest(\"[1-6&&[3-9]]\", \"123456789\");\r\n\r\n    assertEquals(matches, 4);\r\n}\r\n```","```\r\n@Test\r\npublic void givenSetWithSubtraction_whenMatchesAccurately_thenCorrect() {\r\n    int matches = runTest(\"[0-9&&[^2468]]\", \"123456789\");\r\n\r\n    assertEquals(matches, 5);\r\n}\r\n```","```\r\n@Test\r\npublic void givenDigits_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\d\", \"123\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonDigits_whenMatches_thenCorrect() {\r\n    int mathces = runTest(\"\\\\D\", \"a6c\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhiteSpace_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\s\", \"a c\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonWhiteSpace_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\S\", \"a c\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWordCharacter_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\w\", \"hi!\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonWordCharacter_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\W\", \"hi!\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenZeroOrOneQuantifier_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\a?\", \"hi\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenZeroOrOneQuantifier_whenMatches_thenCorrect2() {\r\n    int matches = runTest(\"\\\\a{0,1}\", \"hi\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenZeroOrManyQuantifier_whenMatches_thenCorrect() {\r\n     int matches = runTest(\"\\\\a*\", \"hi\");\r\n\r\n     assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenZeroOrManyQuantifier_whenMatches_thenCorrect2() {\r\n    int matches = runTest(\"\\\\a{0,}\", \"hi\");\r\n\r\n    assertEquals(matches, 3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOneOrManyQuantifier_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"\\\\a+\", \"hi\");\r\n\r\n    assertFalse(matches);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOneOrManyQuantifier_whenMatches_thenCorrect2() {\r\n    int matches = runTest(\"\\\\a{1,}\", \"hi\");\r\n\r\n    assertFalse(matches);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBraceQuantifier_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"a{3}\", \"aaaaaa\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBraceQuantifier_whenFailsToMatch_thenCorrect() {\r\n    int matches = runTest(\"a{3}\", \"aa\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBraceQuantifierWithRange_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"a{2,3}\", \"aaaa\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBraceQuantifierWithRange_whenMatchesLazily_thenCorrect() {\r\n    int matches = runTest(\"a{2,3}?\", \"aaaa\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroup_whenMatches_thenCorrect() {\r\n    int matches = runTest(\"(\\\\d\\\\d)\", \"12\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroup_whenMatches_thenCorrect2() {\r\n    int matches = runTest(\"(\\\\d\\\\d)\", \"1212\");\r\n\r\n    assertEquals(matches, 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroup_whenMatchesWithBackReference_\r\n  thenCorrect() {\r\n    int matches = runTest(\"(\\\\d\\\\d)\\\\1\", \"1212\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroup_whenMatches_thenCorrect3() {\r\n    int matches = runTest(\"(\\\\d\\\\d)(\\\\d\\\\d)\", \"1212\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroup_whenMatchesWithBackReference_\r\n  thenCorrect2() {\r\n    int matches = runTest(\"(\\\\d\\\\d)\\\\1\\\\1\\\\1\", \"12121212\");\r\n\r\n    assertEquals(matches, 1);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCapturingGroupAndWrongInput_\r\n  whenMatchFailsWithBackReference_thenCorrect() {\r\n    int matches = runTest(\"(\\\\d\\\\d)\\\\1\", \"1213\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesAtBeginning_thenCorrect() {\r\n    int matches = runTest(\"^dog\", \"dogs are friendly\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTextAndWrongInput_whenMatchFailsAtBeginning_\r\n  thenCorrect() {\r\n    int matches = runTest(\"^dog\", \"are dogs are friendly?\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesAtEnd_thenCorrect() {\r\n    int matches = runTest(\"dog$\", \"Man's best friend is a dog\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTextAndWrongInput_whenMatchFailsAtEnd_thenCorrect() {\r\n    int matches = runTest(\"dog$\", \"is a dog man's best friend?\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesAtWordBoundary_thenCorrect() {\r\n    int matches = runTest(\"\\\\bdog\\\\b\", \"a dog is friendly\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesAtWordBoundary_thenCorrect2() {\r\n    int matches = runTest(\"\\\\bdog\\\\b\", \"dog is man's best friend\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWrongText_whenMatchFailsAtWordBoundary_thenCorrect() {\r\n    int matches = runTest(\"\\\\bdog\\\\b\", \"snoop dogg is a rapper\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenText_whenMatchesAtWordAndNonBoundary_thenCorrect() {\r\n    int matches = runTest(\"\\\\bdog\\\\B\", \"snoop dogg is a rapper\");\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\npublic static int runTest(String regex, String text, int flags) {\r\n    pattern = Pattern.compile(regex, flags);\r\n    matcher = pattern.matcher(text);\r\n    int matches = 0;\r\n    while (matcher.find()){\r\n        matches++;\r\n    }\r\n    return matches;\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithoutCanonEq_whenMatchFailsOnEquivalentUnicode_thenCorrect() {\r\n    int matches = runTest(\"\\u00E9\", \"\\u0065\\u0301\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithCanonEq_whenMatchesOnEquivalentUnicode_thenCorrect() {\r\n    int matches = runTest(\"\\u00E9\", \"\\u0065\\u0301\", Pattern.CANON_EQ);\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithDefaultMatcher_whenMatchFailsOnDifferentCases_thenCorrect() {\r\n    int matches = runTest(\"dog\", \"This is a Dog\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithCaseInsensitiveMatcher\r\n  _whenMatchesOnDifferentCases_thenCorrect() {\r\n    int matches = runTest(\r\n      \"dog\", \"This is a Dog\", Pattern.CASE_INSENSITIVE);\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithEmbeddedCaseInsensitiveMatcher\r\n  _whenMatchesOnDifferentCases_thenCorrect() {\r\n    int matches = runTest(\"(?i)dog\", \"This is a Dog\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithComments_whenMatchFailsWithoutFlag_thenCorrect() {\r\n    int matches = runTest(\r\n      \"dog$  #check for word dog at end of text\", \"This is a dog\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithComments_whenMatchesWithFlag_thenCorrect() {\r\n    int matches = runTest(\r\n      \"dog$  #check end of text\",\"This is a dog\", Pattern.COMMENTS);\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithComments_whenMatchesWithEmbeddedFlag_thenCorrect() {\r\n    int matches = runTest(\r\n      \"(?x)dog$  #check end of text\", \"This is a dog\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithLineTerminator_whenMatchFails_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"(.*)\");\r\n    Matcher matcher = pattern.matcher(\r\n      \"this is a text\" + System.getProperty(\"line.separator\") \r\n        + \" continued on another line\");\r\n    matcher.find();\r\n\r\n    assertEquals(\"this is a text\", matcher.group(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithLineTerminator_whenMatchesWithDotall_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"(.*)\", Pattern.DOTALL);\r\n    Matcher matcher = pattern.matcher(\r\n      \"this is a text\" + System.getProperty(\"line.separator\") \r\n        + \" continued on another line\");\r\n    matcher.find();\r\n    assertEquals(\r\n      \"this is a text\" + System.getProperty(\"line.separator\") \r\n        + \" continued on another line\", matcher.group(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegexWithLineTerminator_whenMatchesWithEmbeddedDotall\r\n  _thenCorrect() {\r\n\r\n    Pattern pattern = Pattern.compile(\"(?s)(.*)\");\r\n    Matcher matcher = pattern.matcher(\r\n      \"this is a text\" + System.getProperty(\"line.separator\") \r\n        + \" continued on another line\");\r\n    matcher.find();\r\n\r\n    assertEquals(\r\n      \"this is a text\" + System.getProperty(\"line.separator\") \r\n        + \" continued on another line\", matcher.group(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchesWithoutLiteralFlag_thenCorrect() {\r\n    int matches = runTest(\"(.*)\", \"text\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchFailsWithLiteralFlag_thenCorrect() {\r\n    int matches = runTest(\"(.*)\", \"text\", Pattern.LITERAL);\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchesWithLiteralFlag_thenCorrect() {\r\n    int matches = runTest(\"(.*)\", \"text(.*)\", Pattern.LITERAL);\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchFailsWithoutMultilineFlag_thenCorrect() {\r\n    int matches = runTest(\r\n      \"dog$\", \"This is a dog\" + System.getProperty(\"line.separator\") \r\n      + \"this is a fox\");\r\n\r\n    assertFalse(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchesWithMultilineFlag_thenCorrect() {\r\n    int matches = runTest(\r\n      \"dog$\", \"This is a dog\" + System.getProperty(\"line.separator\") \r\n      + \"this is a fox\", Pattern.MULTILINE);\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenRegex_whenMatchesWithEmbeddedMultilineFlag_\r\n  thenCorrect() {\r\n    int matches = runTest(\r\n      \"(?m)dog$\", \"This is a dog\" + System.getProperty(\"line.separator\") \r\n      + \"this is a fox\");\r\n\r\n    assertTrue(matches > 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenMatch_whenGetsIndices_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"dog\");\r\n    Matcher matcher = pattern.matcher(\"This dog is mine\");\r\n    matcher.find();\r\n\r\n    assertEquals(5, matcher.start());\r\n    assertEquals(8, matcher.end());\r\n}\r\n```","```\r\n@Test\r\npublic void whenStudyMethodsWork_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"dog\");\r\n    Matcher matcher = pattern.matcher(\"dogs are friendly\");\r\n\r\n    assertTrue(matcher.lookingAt());\r\n    assertFalse(matcher.matches());\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchesStudyMethodWorks_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"dog\");\r\n    Matcher matcher = pattern.matcher(\"dog\");\r\n\r\n    assertTrue(matcher.matches());\r\n}\r\n```","```\r\n@Test\r\npublic void whenReplaceFirstWorks_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"dog\");\r\n    Matcher matcher = pattern.matcher(\r\n      \"dogs are domestic animals, dogs are friendly\");\r\n    String newStr = matcher.replaceFirst(\"cat\");\r\n\r\n    assertEquals(\r\n      \"cats are domestic animals, dogs are friendly\", newStr);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReplaceAllWorks_thenCorrect() {\r\n    Pattern pattern = Pattern.compile(\"dog\");\r\n    Matcher matcher = pattern.matcher(\r\n      \"dogs are domestic animals, dogs are friendly\");\r\n    String newStr = matcher.replaceAll(\"cat\");\r\n\r\n    assertEquals(\"cats are domestic animals, cats are friendly\", newStr);\r\n}\r\n```"]