["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>io.github.resilience4j</groupId>\r\n    <artifactId>resilience4j-spring-boot2</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-aop</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.tomakehurst</groupId>\r\n    <artifactId>wiremock-jre8</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic RestTemplate restTemplate() {\r\n    return new RestTemplateBuilder().rootUri(\"http://localhost:9090\")\r\n      .build();\r\n}\r\n```","```\r\n@Component\r\npublic class ExternalAPICaller {\r\n    private final RestTemplate restTemplate;\r\n\r\n    @Autowired\r\n    public ExternalAPICaller(RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api/\")\r\npublic class ResilientAppController {\r\n    private final ExternalAPICaller externalAPICaller;\r\n}\r\n```","```\r\nmanagement.endpoints.web.exposure.include=*\r\nmanagement.endpoint.health.show-details=always\r\n\r\nmanagement.health.circuitbreakers.enabled=true\r\nmanagement.health.ratelimiters.enabled=true\r\n```","```\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\nclass ResilientAppControllerUnitTest {\r\n\r\n    @RegisterExtension\r\n    static WireMockExtension EXTERNAL_SERVICE = WireMockExtension.newInstance()\r\n      .options(WireMockConfiguration.wireMockConfig()\r\n      .port(9090))\r\n      .build();\r\n```","```\r\n@Autowired\r\nprivate TestRestTemplate restTemplate;\r\n```","```\r\n@ControllerAdvice\r\npublic class ApiExceptionHandler {\r\n}\r\n```","```\r\n@GetMapping(\"/circuit-breaker\")\r\n@CircuitBreaker(name = \"CircuitBreakerService\")\r\npublic String circuitBreakerApi() {\r\n    return externalAPICaller.callApi();\r\n}\r\n```","```\r\npublic String callApi() {\r\n    return restTemplate.getForObject(\"/api/external\", String.class);\r\n}\r\n```","```\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.failure-rate-threshold=50\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.minimum-number-of-calls=5\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.automatic-transition-from-open-to-half-open-enabled=true\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.wait-duration-in-open-state=5s\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.permitted-number-of-calls-in-half-open-state=3\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-size=10\r\nresilience4j.circuitbreaker.instances.CircuitBreakerService.sliding-window-type=count_based\r\n```","```\r\n@ExceptionHandler({CallNotPermittedException.class})\r\n@ResponseStatus(HttpStatus.SERVICE_UNAVAILABLE)\r\npublic void handleCallNotPermittedException() {\r\n}\r\n```","```\r\n@Test\r\npublic void testCircuitBreaker() {\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\")\r\n      .willReturn(serverError()));\r\n\r\n    IntStream.rangeClosed(1, 5)\r\n      .forEach(i -> {\r\n          ResponseEntity response = restTemplate.getForEntity(\"/api/circuit-breaker\", String.class);\r\n          assertThat(response.getStatusCode()).isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR);\r\n      });\r\n\r\n    IntStream.rangeClosed(1, 5)\r\n      .forEach(i -> {\r\n          ResponseEntity response = restTemplate.getForEntity(\"/api/circuit-breaker\", String.class);\r\n          assertThat(response.getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE);\r\n      });\r\n\r\n    EXTERNAL_SERVICE.verify(5, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n}\r\n```","```\r\n@GetMapping(\"/retry\")\r\n@Retry(name = \"retryApi\", fallbackMethod = \"fallbackAfterRetry\")\r\npublic String retryApi() {\r\n    return externalAPICaller.callApi();\r\n}\r\n```","```\r\npublic String fallbackAfterRetry(Exception ex) {\r\n    return \"all retries have exhausted\";\r\n}\r\n```","```\r\nresilience4j.retry.instances.retryApi.max-attempts=3\r\nresilience4j.retry.instances.retryApi.wait-duration=1s\r\nresilience4j.retry.metrics.legacy.enabled=true\r\nresilience4j.retry.metrics.enabled=true\r\n```","```\r\n@Test\r\npublic void testRetry() {\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\")\r\n      .willReturn(ok()));\r\n    ResponseEntity<String> response1 = restTemplate.getForEntity(\"/api/retry\", String.class);\r\n    EXTERNAL_SERVICE.verify(1, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n\r\n    EXTERNAL_SERVICE.resetRequests();\r\n\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\")\r\n      .willReturn(serverError()));\r\n    ResponseEntity<String> response2 = restTemplate.getForEntity(\"/api/retry\", String.class);\r\n    Assert.assertEquals(response2.getBody(), \"all retries have exhausted\");\r\n    EXTERNAL_SERVICE.verify(3, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n}\r\n```","```\r\n@GetMapping(\"/time-limiter\")\r\n@TimeLimiter(name = \"timeLimiterApi\")\r\npublic CompletableFuture<String> timeLimiterApi() {\r\n    return CompletableFuture.supplyAsync(externalAPICaller::callApiWithDelay);\r\n}\r\n```","```\r\npublic String callApiWithDelay() {\r\n    String result = restTemplate.getForObject(\"/api/external\", String.class);\r\n    try {\r\n        Thread.sleep(5000);\r\n    } catch (InterruptedException ignore) {\r\n    }\r\n    return result;\r\n}\r\n```","```\r\nresilience4j.timelimiter.metrics.enabled=true\r\nresilience4j.timelimiter.instances.timeLimiterApi.timeout-duration=2s\r\nresilience4j.timelimiter.instances.timeLimiterApi.cancel-running-future=true\r\n```","```\r\n@ExceptionHandler({TimeoutException.class})\r\n@ResponseStatus(HttpStatus.REQUEST_TIMEOUT)\r\npublic void handleTimeoutException() {\r\n}\r\n```","```\r\n@Test\r\npublic void testTimeLimiter() {\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\").willReturn(ok()));\r\n    ResponseEntity<String> response = restTemplate.getForEntity(\"/api/time-limiter\", String.class);\r\n\r\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.REQUEST_TIMEOUT);\r\n    EXTERNAL_SERVICE.verify(1, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n}\r\n```","```\r\n@GetMapping(\"/bulkhead\")\r\n@Bulkhead(name=\"bulkheadApi\")\r\npublic String bulkheadApi() {\r\n    return externalAPICaller.callApi();\r\n}\r\n```","```\r\nresilience4j.bulkhead.metrics.enabled=true\r\nresilience4j.bulkhead.instances.bulkheadApi.max-concurrent-calls=3\r\nresilience4j.bulkhead.instances.bulkheadApi.max-wait-duration=1\r\n```","```\r\n@ExceptionHandler({ BulkheadFullException.class })\r\n@ResponseStatus(HttpStatus.BANDWIDTH_LIMIT_EXCEEDED)\r\npublic void handleBulkheadFullException() {\r\n}\r\n```","```\r\n@Test\r\npublic void testBulkhead() throws InterruptedException {\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\")\r\n      .willReturn(ok()));\r\n    Map<Integer, Integer> responseStatusCount = new ConcurrentHashMap<>();\r\n\r\n    IntStream.rangeClosed(1, 5)\r\n      .parallel()\r\n      .forEach(i -> {\r\n          ResponseEntity<String> response = restTemplate.getForEntity(\"/api/bulkhead\", String.class);\r\n          int statusCode = response.getStatusCodeValue();\r\n          responseStatusCount.put(statusCode, responseStatusCount.getOrDefault(statusCode, 0) + 1);\r\n      });\r\n\r\n    assertEquals(2, responseStatusCount.keySet().size());\r\n    assertTrue(responseStatusCount.containsKey(BANDWIDTH_LIMIT_EXCEEDED.value()));\r\n    assertTrue(responseStatusCount.containsKey(OK.value()));\r\n    EXTERNAL_SERVICE.verify(3, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n}\r\n```","```\r\n@GetMapping(\"/rate-limiter\")\r\n@RateLimiter(name = \"rateLimiterApi\")\r\npublic String rateLimitApi() {\r\n    return externalAPICaller.callApi();\r\n}\r\n```","```\r\nresilience4j.ratelimiter.metrics.enabled=true\r\nresilience4j.ratelimiter.instances.rateLimiterApi.register-health-indicator=true\r\nresilience4j.ratelimiter.instances.rateLimiterApi.limit-for-period=5\r\nresilience4j.ratelimiter.instances.rateLimiterApi.limit-refresh-period=60s\r\nresilience4j.ratelimiter.instances.rateLimiterApi.timeout-duration=0s\r\nresilience4j.ratelimiter.instances.rateLimiterApi.allow-health-indicator-to-fail=true\r\nresilience4j.ratelimiter.instances.rateLimiterApi.subscribe-for-events=true\r\nresilience4j.ratelimiter.instances.rateLimiterApi.event-consumer-buffer-size=50\r\n```","```\r\n@ExceptionHandler({ RequestNotPermitted.class })\r\n@ResponseStatus(HttpStatus.TOO_MANY_REQUESTS)\r\npublic void handleRequestNotPermitted() {\r\n}\r\n```","```\r\n@Test\r\npublic void testRatelimiter() {\r\n    EXTERNAL_SERVICE.stubFor(WireMock.get(\"/api/external\")\r\n      .willReturn(ok()));\r\n    Map<Integer, Integer> responseStatusCount = new ConcurrentHashMap<>();\r\n\r\n    IntStream.rangeClosed(1, 50)\r\n      .parallel()\r\n      .forEach(i -> {\r\n          ResponseEntity<String> response = restTemplate.getForEntity(\"/api/rate-limiter\", String.class);\r\n          int statusCode = response.getStatusCodeValue();\r\n          responseStatusCount.put(statusCode, responseStatusCount.getOrDefault(statusCode, 0) + 1);\r\n      });\r\n\r\n    assertEquals(2, responseStatusCount.keySet().size());\r\n    assertTrue(responseStatusCount.containsKey(TOO_MANY_REQUESTS.value()));\r\n    assertTrue(responseStatusCount.containsKey(OK.value()));\r\n    EXTERNAL_SERVICE.verify(5, getRequestedFor(urlEqualTo(\"/api/external\")));\r\n}\r\n```","```\r\nhttp://localhost:8080/actuator/\r\n{\r\n    \"_links\" : {\r\n        \"self\" : {...},\r\n        \"bulkheads\" : {...},\r\n        \"circuitbreakers\" : {...},\r\n        \"ratelimiters\" : {...},\r\n        ...\r\n    }\r\n}\r\n```","```\r\n\"retries\": {\r\n  \"href\": \"http://localhost:8080/actuator/retries\",\r\n  \"templated\": false\r\n},\r\n\"retryevents\": {\r\n  \"href\": \"http://localhost:8080/actuator/retryevents\",\r\n  \"templated\": false\r\n},\r\n\"retryevents-name\": {\r\n  \"href\": \"http://localhost:8080/actuator/retryevents/{name}\",\r\n  \"templated\": true\r\n},\r\n\"retryevents-name-eventType\": {\r\n  \"href\": \"http://localhost:8080/actuator/retryevents/{name}/{eventType}\",\r\n  \"templated\": true\r\n}\r\n```","```\r\nhttp://localhost:8080/actuator/retries\r\n{\r\n    \"retries\" : [ \"retryApi\" ]\r\n}\r\n```","```\r\n{\r\n    \"retryEvents\": [\r\n    {\r\n        \"retryName\": \"retryApi\",\r\n        \"type\": \"RETRY\",\r\n        \"creationTime\": \"2022-10-16T10:46:31.950822+05:30[Asia/Kolkata]\",\r\n        \"errorMessage\": \"...\",\r\n        \"numberOfAttempts\": 1\r\n    },\r\n    {\r\n        \"retryName\": \"retryApi\",\r\n        \"type\": \"RETRY\",\r\n        \"creationTime\": \"2022-10-16T10:46:32.965661+05:30[Asia/Kolkata]\",\r\n        \"errorMessage\": \"...\",\r\n        \"numberOfAttempts\": 2\r\n    },\r\n    {\r\n        \"retryName\": \"retryApi\",\r\n        \"type\": \"ERROR\",\r\n        \"creationTime\": \"2022-10-16T10:46:33.978801+05:30[Asia/Kolkata]\",\r\n        \"errorMessage\": \"...\",\r\n        \"numberOfAttempts\": 3\r\n    }\r\n  ]\r\n}\r\n```"]