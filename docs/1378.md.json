["```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>vavr</artifactId>\r\n    <version>0.9.0</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenValue_whenNullCheckNeeded_thenCorrect() {\r\n    Object possibleNullObj = null;\r\n    if (possibleNullObj == null) {\r\n        possibleNullObj = \"someDefaultValue\";\r\n    }\r\n    assertNotNull(possibleNullObj);\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void givenValue_whenNullCheckNeeded_thenCorrect2() {\r\n    Object possibleNullObj = null;\r\n    assertEquals(\"somevalue\", possibleNullObj.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenValue_whenCreatesOption_thenCorrect() {\r\n    Option<Object> noneOption = Option.of(null);\r\n    Option<Object> someOption = Option.of(\"val\");\r\n\r\n    assertEquals(\"None\", noneOption.toString());\r\n    assertEquals(\"Some(val)\", someOption.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenNull_whenCreatesOption_thenCorrect() {\r\n    String name = null;\r\n    Option<String> nameOption = Option.of(name);\r\n\r\n    assertEquals(\"baeldung\", nameOption.getOrElse(\"baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonNull_whenCreatesOption_thenCorrect() {\r\n    String name = \"baeldung\";\r\n    Option<String> nameOption = Option.of(name);\r\n\r\n    assertEquals(\"baeldung\", nameOption.getOrElse(\"notbaeldung\"));\r\n}\r\n```","```\r\npublic void whenCreatesTuple_thenCorrect1() {\r\n    Tuple2<String, Integer> java8 = Tuple.of(\"Java\", 8);\r\n    String element1 = java8._1;\r\n    int element2 = java8._2();\r\n\r\n    assertEquals(\"Java\", element1);\r\n    assertEquals(8, element2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatesTuple_thenCorrect2() {\r\n    Tuple3<String, Integer, Double> java8 = Tuple.of(\"Java\", 8, 1.8);\r\n    String element1 = java8._1;\r\n    int element2 = java8._2();\r\n    double element3 = java8._3();\r\n\r\n    assertEquals(\"Java\", element1);\r\n    assertEquals(8, element2);\r\n    assertEquals(1.8, element3, 0.1);\r\n}\r\n```","```\r\n@Test(expected = ArithmeticException.class)\r\npublic void givenBadCode_whenThrowsException_thenCorrect() {\r\n    int i = 1 / 0;\r\n}\r\n```","```\r\n@Test\r\npublic void givenBadCode_whenTryHandles_thenCorrect() {\r\n    Try<Integer> result = Try.of(() -> 1 / 0);\r\n\r\n    assertTrue(result.isFailure());\r\n}\r\n```","```\r\n@Test\r\npublic void givenBadCode_whenTryHandles_thenCorrect2() {\r\n    Try<Integer> computation = Try.of(() -> 1 / 0);\r\n    int errorSentinel = result.getOrElse(-1);\r\n\r\n    assertEquals(-1, errorSentinel);\r\n}\r\n```","```\r\n@Test(expected = ArithmeticException.class)\r\npublic void givenBadCode_whenTryHandles_thenCorrect3() {\r\n    Try<Integer> result = Try.of(() -> 1 / 0);\r\n    result.getOrElseThrow(ArithmeticException::new);\r\n}\r\n```","```\r\n@Test\r\npublic void givenJava8Function_whenWorks_thenCorrect() {\r\n    Function<Integer, Integer> square = (num) -> num * num;\r\n    int result = square.apply(2);\r\n\r\n    assertEquals(4, result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenJava8BiFunction_whenWorks_thenCorrect() {\r\n    BiFunction<Integer, Integer, Integer> sum = \r\n      (num1, num2) -> num1 + num2;\r\n    int result = sum.apply(5, 7);\r\n\r\n    assertEquals(12, result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenVavrFunction_whenWorks_thenCorrect() {\r\n    Function1<Integer, Integer> square = (num) -> num * num;\r\n    int result = square.apply(2);\r\n\r\n    assertEquals(4, result);\r\n}\r\n```","```\r\n@Test\r\npublic void givenVavrBiFunction_whenWorks_thenCorrect() {\r\n    Function2<Integer, Integer, Integer> sum = \r\n      (num1, num2) -> num1 + num2;\r\n    int result = sum.apply(5, 7);\r\n\r\n    assertEquals(12, result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatesFunction_thenCorrect0() {\r\n    Function0<String> getClazzName = () -> this.getClass().getName();\r\n    String clazzName = getClazzName.apply();\r\n\r\n    assertEquals(\"com.baeldung.vavr.VavrTest\", clazzName);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatesFunction_thenCorrect5() {\r\n    Function5<String, String, String, String, String, String> concat = \r\n      (a, b, c, d, e) -> a + b + c + d + e;\r\n    String finalString = concat.apply(\r\n      \"Hello \", \"world\", \"! \", \"Learn \", \"Vavr\");\r\n\r\n    assertEquals(\"Hello world! Learn Vavr\", finalString);\r\n}\r\n```","```\r\npublic int sum(int a, int b) {\r\n    return a + b;\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatesFunctionFromMethodRef_thenCorrect() {\r\n    Function2<Integer, Integer, Integer> sum = Function2.of(this::sum);\r\n    int summed = sum.apply(5, 6);\r\n\r\n    assertEquals(11, summed);\r\n}\r\n```","```\r\ninterface Collection<E> {\r\n    void clear();\r\n}\r\n```","```\r\n@Test(expected = UnsupportedOperationException.class)\r\npublic void whenImmutableCollectionThrows_thenCorrect() {\r\n    java.util.List<String> wordList = Arrays.asList(\"abracadabra\");\r\n    java.util.List<String> list = Collections.unmodifiableList(wordList);\r\n    list.add(\"boom\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatesVavrList_thenCorrect() {\r\n    List<Integer> intList = List.of(1, 2, 3);\r\n\r\n    assertEquals(3, intList.length());\r\n    assertEquals(new Integer(1), intList.get(0));\r\n    assertEquals(new Integer(2), intList.get(1));\r\n    assertEquals(new Integer(3), intList.get(2));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSumsVavrList_thenCorrect() {\r\n    int sum = List.of(1, 2, 3).sum().intValue();\r\n\r\n    assertEquals(6, sum);\r\n}\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private int age;\r\n\r\n    // standard constructors, setters and getters, toString\r\n}\r\n```","```\r\nclass PersonValidator {\r\n    String NAME_ERR = \"Invalid characters in name: \";\r\n    String AGE_ERR = \"Age must be at least 0\";\r\n\r\n    public Validation<Seq<String>, Person> validatePerson(\r\n      String name, int age) {\r\n        return Validation.combine(\r\n          validateName(name), validateAge(age)).ap(Person::new);\r\n    }\r\n\r\n    private Validation<String, String> validateName(String name) {\r\n        String invalidChars = name.replaceAll(\"[a-zA-Z ]\", \"\");\r\n        return invalidChars.isEmpty() ? \r\n          Validation.valid(name) \r\n            : Validation.invalid(NAME_ERR + invalidChars);\r\n    }\r\n\r\n    private Validation<String, Integer> validateAge(int age) {\r\n        return age < 0 ? Validation.invalid(AGE_ERR)\r\n          : Validation.valid(age);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidationWorks_thenCorrect() {\r\n    PersonValidator personValidator = new PersonValidator();\r\n\r\n    Validation<List<String>, Person> valid = \r\n      personValidator.validatePerson(\"John Doe\", 30);\r\n\r\n    Validation<List<String>, Person> invalid = \r\n      personValidator.validatePerson(\"John? Doe!4\", -1);\r\n\r\n    assertEquals(\r\n      \"Valid(Person [name=John Doe, age=30])\", \r\n        valid.toString());\r\n\r\n    assertEquals(\r\n      \"Invalid(List(Invalid characters in name: ?!4, \r\n        Age must be at least 0))\", \r\n          invalid.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenFunction_whenEvaluatesWithLazy_thenCorrect() {\r\n    Lazy<Double> lazy = Lazy.of(Math::random);\r\n    assertFalse(lazy.isEvaluated());\r\n\r\n    double val1 = lazy.get();\r\n    assertTrue(lazy.isEvaluated());\r\n\r\n    double val2 = lazy.get();\r\n    assertEquals(val1, val2, 0.1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenIfWorksAsMatcher_thenCorrect() {\r\n    int input = 3;\r\n    String output;\r\n    if (input == 0) {\r\n        output = \"zero\";\r\n    }\r\n    if (input == 1) {\r\n        output = \"one\";\r\n    }\r\n    if (input == 2) {\r\n        output = \"two\";\r\n    }\r\n    if (input == 3) {\r\n        output = \"three\";\r\n    }\r\n    else {\r\n        output = \"unknown\";\r\n    }\r\n\r\n    assertEquals(\"three\", output);\r\n}\r\n```","```\r\n@Test\r\npublic void whenSwitchWorksAsMatcher_thenCorrect() {\r\n    int input = 2;\r\n    String output;\r\n    switch (input) {\r\n    case 0:\r\n        output = \"zero\";\r\n        break;\r\n    case 1:\r\n        output = \"one\";\r\n        break;\r\n    case 2:\r\n        output = \"two\";\r\n        break;\r\n    case 3:\r\n        output = \"three\";\r\n        break;\r\n    default:\r\n        output = \"unknown\";\r\n        break;\r\n    }\r\n\r\n    assertEquals(\"two\", output);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMatchworks_thenCorrect() {\r\n    int input = 2;\r\n    String output = Match(input).of(\r\n      Case($(1), \"one\"), \r\n      Case($(2), \"two\"), \r\n      Case($(3), \"three\"),\r\n      Case($(), \"?\"));\r\n\r\n    assertEquals(\"two\", output);\r\n}\r\n```","```\r\nMatch(arg).of(\r\n    Case($(isIn(\"-h\", \"--help\")), o -> run(this::displayHelp)),\r\n    Case($(isIn(\"-v\", \"--version\")), o -> run(this::displayVersion)),\r\n    Case($(), o -> run(() -> {\r\n        throw new IllegalArgumentException(arg);\r\n    }))\r\n);\r\n```"]