["```\r\n<dependency>\r\n    <groupId>org.mock-server</groupId>\r\n    <artifactId>mockserver-netty</artifactId>\r\n    <version>3.10.8</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mock-server</groupId>\r\n    <artifactId>mockserver-client-java</artifactId>\r\n    <version>3.10.8</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.mock-server</groupId>\r\n    <artifactId>mockserver-maven-plugin</artifactId>\r\n    <version>3.10.8</version>\r\n    <configuration>\r\n        <serverPort>1080</serverPort>\r\n        <proxyPort>1090</proxyPort>\r\n        <logLevel>DEBUG</logLevel>\r\n        <initializationClass>org.mockserver.maven.ExampleInitializationClass</initializationClass>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>process-test-classes</id>\r\n            <phase>process-test-classes</phase>\r\n            <goals>\r\n                <goal>start</goal>\r\n            </goals>\r\n        </execution>\r\n        <execution>\r\n            <id>verify</id>\r\n            <phase>verify</phase>\r\n            <goals>\r\n                <goal>stop</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\npublic class TestMockServer {\r\n\r\n    private ClientAndServer mockServer;\r\n\r\n    @BeforeClass\r\n    public void startServer() {\r\n        mockServer = startClientAndServer(1080);\r\n    }\r\n\r\n    @AfterClass \r\n    public void stopServer() { \r\n        mockServer.stop();\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class TestMockServer {\r\n    private void createExpectationForInvalidAuth() {\r\n        new MockServerClient(\"127.0.0.1\", 1080)\r\n          .when(\r\n            request()\r\n              .withMethod(\"POST\")\r\n              .withPath(\"/validate\")\r\n              .withHeader(\"\\\"Content-type\\\", \\\"application/json\\\"\")\r\n              .withBody(exact(\"{username: 'foo', password: 'bar'}\")),\r\n              exactly(1))\r\n                .respond(\r\n                  response()\r\n                    .withStatusCode(401)\r\n                    .withHeaders(\r\n                      new Header(\"Content-Type\", \"application/json; charset=utf-8\"),\r\n                      new Header(\"Cache-Control\", \"public, max-age=86400\"))\r\n                    .withBody(\"{ message: 'incorrect username and password combination' }\")\r\n                    .withDelay(TimeUnit.SECONDS,1)\r\n                );\r\n    }\r\n    // ...\r\n}\r\n```","```\r\nprivate void createExpectationForForward(){\r\n    new MockServerClient(\"127.0.0.1\", 1080)\r\n      .when(\r\n        request()\r\n          .withMethod(\"GET\")\r\n          .withPath(\"/index.html\"),\r\n          exactly(1))\r\n        .forward(\r\n          forward()\r\n            .withHost(\"www.mock-server.com\")\r\n            .withPort(80)\r\n            .withScheme(HttpForward.Scheme.HTTP)\r\n           );\r\n}\r\n```","```\r\nprivate void createExpectationForCallBack() {\r\n    mockServer\r\n      .when(\r\n        request().withPath(\"/callback\"))\r\n        .callback(\r\n          callback()\r\n            .withCallbackClass(\"com.baeldung.mock.server.TestExpectationCallback\")\r\n        );\r\n}\r\n```","```\r\npublic class TestExpectationCallback implements ExpectationCallback {\r\n\r\n    public HttpResponse handle(HttpRequest httpRequest) {\r\n        if (httpRequest.getPath().getValue().endsWith(\"/callback\")) {\r\n            return httpResponse;\r\n        } else {\r\n            return notFoundResponse();\r\n        }\r\n    }\r\n\r\n    public static HttpResponse httpResponse = response()\r\n      .withStatusCode(200);\r\n}\r\n```","```\r\nprivate void verifyPostRequest() {\r\n    new MockServerClient(\"localhost\", 1080).verify(\r\n      request()\r\n        .withMethod(\"POST\")\r\n        .withPath(\"/validate\")\r\n        .withBody(exact(\"{username: 'foo', password: 'bar'}\")),\r\n        VerificationTimes.exactly(1)\r\n    );\r\n}\r\n```"]