["```\r\npublic class Person {\r\n    private final String name;\r\n\r\n    // other fields, standard constructors, getters\r\n}\r\n```","```\r\npublic class Waitress extends Person {\r\n\r\n    public String serveStarter(String starter) {\r\n        return \"Serving a \" + starter;\r\n    }\r\n\r\n    // additional methods/constructors\r\n} \r\n```","```\r\npublic class Actress extends Person {\r\n\r\n    public String readScript(String movie) {\r\n        return \"Reading the script of \" + movie;\r\n    } \r\n\r\n    // additional methods/constructors\r\n}\r\n```","```\r\n@Test\r\npublic void givenWaitressInstance_whenCheckedType_thenIsInstanceOfPerson() {\r\n    assertThat(new Waitress(\"Mary\", \"[[email protected]](/web/20221205124259/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 22))\r\n      .isInstanceOf(Person.class);\r\n}\r\n\r\n@Test\r\npublic void givenActressInstance_whenCheckedType_thenIsInstanceOfPerson() {\r\n    assertThat(new Actress(\"Susan\", \"[[email protected]](/web/20221205124259/https://www.baeldung.com/cdn-cgi/l/email-protection)\", 30))\r\n      .isInstanceOf(Person.class);\r\n}\r\n```","```\r\npublic class Entity {\r\n\r\n    protected long id;\r\n\r\n    // setters\r\n} \r\n```","```\r\npublic class User extends Entity {\r\n\r\n    // additional fields and methods   \r\n} \r\n```","```\r\npublic abstract class ComputerBuilder {\r\n\r\n    public final Computer buildComputer() {\r\n        addProcessor();\r\n        addMemory();\r\n    }\r\n\r\n    public abstract void addProcessor();\r\n\r\n    public abstract void addMemory();\r\n} \r\n```","```\r\npublic class StandardComputerBuilder extends ComputerBuilder {\r\n\r\n    @Override\r\n    public void addProcessor() {\r\n        // method implementation\r\n    }\r\n\r\n    @Override\r\n    public void addMemory() {\r\n        // method implementation\r\n    }\r\n}\r\n```","```\r\npublic class Computer {\r\n\r\n    private Processor processor;\r\n    private Memory memory;\r\n    private SoundCard soundCard;\r\n\r\n    // standard getters/setters/constructors\r\n\r\n    public Optional<SoundCard> getSoundCard() {\r\n        return Optional.ofNullable(soundCard);\r\n    }\r\n}\r\n```","```\r\npublic class StandardProcessor implements Processor {\r\n\r\n    private String model;\r\n\r\n    // standard getters/setters\r\n}\r\n```","```\r\npublic class StandardMemory implements Memory {\r\n\r\n    private String brand;\r\n    private String size;\r\n\r\n    // standard constructors, getters, toString\r\n} \r\n```","```\r\npublic class StandardSoundCard implements SoundCard {\r\n\r\n    private String brand;\r\n\r\n    // standard constructors, getters, toString\r\n} \r\n```","```\r\npublic class Computer {\r\n\r\n    private StandardProcessor processor\r\n      = new StandardProcessor(\"Intel I3\");\r\n    private StandardMemory memory\r\n      = new StandardMemory(\"Kingston\", \"1TB\");\r\n\r\n    // additional fields / methods\r\n}\r\n```"]