["```\r\nassertThat(1 == 1).isTrue();\r\n```","```\r\nInteger a = new Integer(1);\r\nassertThat(1 == a).isTrue();\r\n```","```\r\nInteger a = new Integer(1);\r\nInteger b = new Integer(1);\r\n\r\nassertThat(a == b).isFalse();\r\n```","```\r\nInteger a = new Integer(1);\r\nInteger b = a;\r\n\r\nassertThat(a == b).isTrue();\r\n```","```\r\nInteger a = Integer.valueOf(1);\r\nInteger b = Integer.valueOf(1);\r\n\r\nassertThat(a == b).isTrue();\r\n```","```\r\nassertThat(\"Hello!\" == \"Hello!\").isTrue();\r\n```","```\r\nassertThat(null == null).isTrue();\r\n\r\nassertThat(\"Hello!\" == null).isFalse();\r\n```","```\r\nInteger a = new Integer(1);\r\nInteger b = new Integer(1);\r\n\r\nassertThat(a.equals(b)).isTrue();\r\n```","```\r\npublic class Person {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public Person(String firstName, String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic boolean equals(Object o) {\r\n    if (this == o) return true;\r\n    if (o == null || getClass() != o.getClass()) return false;\r\n    Person that = (Person) o;\r\n    return firstName.equals(that.firstName) &&\r\n      lastName.equals(that.lastName);\r\n}\r\n```","```\r\nPerson joe = new Person(\"Joe\", \"Portman\");\r\nPerson joeAgain = new Person(\"Joe\", \"Portman\");\r\nPerson natalie = new Person(\"Natalie\", \"Portman\");\r\n\r\nassertThat(Objects.equals(joe, joeAgain)).isTrue();\r\nassertThat(Objects.equals(joe, natalie)).isFalse();\r\n```","```\r\npublic Person(String firstName, String lastName, LocalDate birthDate) {\r\n    this(firstName, lastName);\r\n    this.birthDate = birthDate;\r\n}\r\n```","```\r\nbirthDate == null ? that.birthDate == null : birthDate.equals(that.birthDate);\r\n```","```\r\nObjects.equals(birthDate, that.birthDate);\r\n```","```\r\npublic class Person implements Comparable<Person> {\r\n    //...\r\n\r\n    @Override\r\n    public int compareTo(Person o) {\r\n        return this.lastName.compareTo(o.lastName);\r\n    }\r\n}\r\n```","```\r\nComparator<Person> compareByFirstNames = Comparator.comparing(Person::getFirstName);\r\n```","```\r\nPerson joe = new Person(\"Joe\", \"Portman\");\r\nPerson allan = new Person(\"Allan\", \"Dale\");\r\n\r\nList<Person> people = new ArrayList<>();\r\npeople.add(joe);\r\npeople.add(allan);\r\n\r\npeople.sort(compareByFirstNames);\r\n\r\nassertThat(people).containsExactly(allan, joe);\r\n```","```\r\n@Override\r\npublic int compareTo(Person o) {\r\n    return Comparator.comparing(Person::getLastName)\r\n      .thenComparing(Person::getFirstName)\r\n      .thenComparing(Person::getBirthDate, Comparator.nullsLast(Comparator.naturalOrder()))\r\n      .compare(this, o);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nString a = new String(\"Hello!\");\r\nString b = new String(\"Hello World!\");\r\n\r\nassertThat(ObjectUtils.notEqual(a, b)).isTrue(); \r\n```","```\r\nString first = new String(\"Hello!\");\r\nString second = new String(\"How are you?\");\r\n\r\nassertThat(ObjectUtils.compare(first, second)).isNegative();\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nString a = new String(\"Hello!\");\r\nString b = new String(\"Hello!\");\r\n\r\nassertThat(Objects.equal(a, b)).isTrue();\r\n```","```\r\nassertThat(Ints.compare(1, 2)).isNegative();\r\n```","```\r\nPerson natalie = new Person(\"Natalie\", \"Portman\");\r\nPerson joe = new Person(\"Joe\", \"Portman\");\r\n\r\nint comparisonResult = ComparisonChain.start()\r\n  .compare(natalie.getLastName(), joe.getLastName())\r\n  .compare(natalie.getFirstName(), joe.getFirstName())\r\n  .result();\r\n\r\nassertThat(comparisonResult).isPositive();\r\n```"]