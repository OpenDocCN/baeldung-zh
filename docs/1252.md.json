["```\r\n/foos:\r\n  get:\r\n    description: |\r\n      List all foos matching query criteria, if provided;\r\n      otherwise list all foos\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: Foo[]\r\n  post:\r\n    description: Create a new foo\r\n    body:\r\n      application/json:\r\n        type: Foo\r\n    responses:\r\n      201:\r\n        body:\r\n          application/json:\r\n            type: Foo\r\n...\r\n/bars:\r\n  get:\r\n    description: |\r\n      List all bars matching query criteria, if provided;\r\n      otherwise list all bars\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: Bar[]\r\n  post:\r\n    description: Create a new bar\r\n    body:\r\n      application/json:\r\n        type: Bar\r\n    responses:\r\n      201:\r\n        body:\r\n          application/json:\r\n            type: Bar\r\n```","```\r\nresourceTypes:\r\n  collection:\r\n    usage: Use this resourceType to represent any collection of items\r\n    description: A collection of <<resourcePathName>>\r\n    get:\r\n      description: Get all <<resourcePathName>>, optionally filtered \r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: <<typeName>>[]\r\n    post:\r\n      description: Create a new <<resourcePathName|!singularize>> \r\n      responses:\r\n        201:\r\n          body:\r\n            application/json:\r\n              type: <<typeName>>\r\n```","```\r\nresourceTypes:\r\n  collection:\r\n  ...\r\n    get:\r\n      ...\r\n            type: <<resourcePathName|!singularize|!uppercamelcase>>[]\r\n    post:\r\n      ...\r\n            type: <<resourcePathName|!singularize|!uppercamelcase>>\r\n```","```\r\n/foos:\r\n  type: { collection: { \"typeName\": \"Foo\" } }\r\n  get:\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n...\r\n/bars:\r\n  type: { collection: { \"typeName\": \"Bar\" } }\r\n```","```\r\n/foos:\r\n...\r\n  /{fooId}:\r\n    get:\r\n      description: Get a Foo\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    put:\r\n      description: Update a Foo\r\n      body:\r\n        application/json:\r\n          type: Foo\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: Foo\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    delete:\r\n      description: Delete a Foo\r\n      responses:\r\n        204:\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n```","```\r\nresourceTypes:\r\n...\r\n  item:\r\n    usage: Use this resourceType to represent any single item\r\n    description: A single <<typeName>>\r\n    get:\r\n      description: Get a <<typeName>>\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: <<typeName>>\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    put:\r\n      description: Update a <<typeName>>\r\n      body:\r\n        application/json:\r\n          type: <<typeName>>\r\n      responses:\r\n        200:\r\n          body:\r\n            application/json:\r\n              type: <<typeName>>\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n    delete:\r\n      description: Delete a <<typeName>>\r\n      responses:\r\n        204:\r\n        404:\r\n          body:\r\n            application/json:\r\n              type: Error\r\n              example: !include examples/Error.json\r\n```","```\r\n/foos:\r\n...\r\n  /{fooId}:\r\n    type: { item: { \"typeName\": \"Foo\" } }\r\n```","```\r\n... \r\n/bars: \r\n... \r\n  /{barId}: \r\n    type: { item: { \"typeName\": \"Bar\" } }\r\n```","```\r\ntraits:\r\n  hasRequestItem:\r\n    body:\r\n      application/json:\r\n        type: <<typeName>>\r\n```","```\r\n hasResponseItem:\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: <<typeName>>\r\n  hasResponseCollection:\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: <<typeName>>[]\r\n```","```\r\n hasNotFound:\r\n    responses:\r\n      404:\r\n        body:\r\n          application/json:\r\n            type: Error\r\n            example: !include examples/Error.json\r\n```","```\r\nresourceTypes:\r\n  collection:\r\n    usage: Use this resourceType to represent any collection of items\r\n    description: A collection of <<resourcePathName|!uppercamelcase>>\r\n    get:\r\n      description: |\r\n        Get all <<resourcePathName|!uppercamelcase>>,\r\n        optionally filtered\r\n      is: [ hasResponseCollection: { typeName: <<typeName>> } ]\r\n    post:\r\n      description: Create a new <<resourcePathName|!singularize>>\r\n      is: [ hasRequestItem: { typeName: <<typeName>> } ]\r\n  item:\r\n    usage: Use this resourceType to represent any single item\r\n    description: A single <<typeName>>\r\n    get:\r\n      description: Get a <<typeName>>\r\n      is: [ hasResponseItem: { typeName: <<typeName>> }, hasNotFound ]\r\n    put:\r\n      description: Update a <<typeName>>\r\n      is: | [ hasRequestItem: { typeName: <<typeName>> }, hasResponseItem: { typeName: <<typeName>> }, hasNotFound ]\r\n    delete:\r\n      description: Delete a <<typeName>>\r\n      is: [ hasNotFound ]\r\n      responses:\r\n        204:\r\n```","```\r\n/foos:\r\n...\r\n  /name/{name}:\r\n    get:\r\n      description: List all foos with a certain name\r\n      is: [ hasResponseCollection: { typeName: Foo } ]\r\n```","```\r\n#%RAML 1.0\r\ntitle: Baeldung Foo REST Services API\r\nversion: v1\r\nprotocols: [ HTTPS ]\r\nbaseUri: http://rest-api.baeldung.com/api/{version}\r\nmediaType: application/json\r\nsecuredBy: basicAuth\r\nsecuritySchemes:\r\n  basicAuth:\r\n    description: |\r\n      Each request must contain the headers necessary for\r\n      basic authentication\r\n    type: Basic Authentication\r\n    describedBy:\r\n      headers:\r\n        Authorization:\r\n          description: |\r\n            Used to send the Base64 encoded \"username:password\"\r\n            credentials\r\n            type: string\r\n      responses:\r\n        401:\r\n          description: |\r\n            Unauthorized. Either the provided username and password\r\n            combination is invalid, or the user is not allowed to\r\n            access the content provided by the requested URL.\r\ntypes:\r\n  Foo:   !include types/Foo.raml\r\n  Bar:   !include types/Bar.raml\r\n  Error: !include types/Error.raml\r\nresourceTypes:\r\n  collection:\r\n    usage: Use this resourceType to represent a collection of items\r\n    description: A collection of <<resourcePathName|!uppercamelcase>>\r\n    get:\r\n      description: |\r\n        Get all <<resourcePathName|!uppercamelcase>>,\r\n        optionally filtered\r\n      is: [ hasResponseCollection: { typeName: <<typeName>> } ]\r\n    post:\r\n      description: |\r\n        Create a new <<resourcePathName|!uppercamelcase|!singularize>>\r\n      is: [ hasRequestItem: { typeName: <<typeName>> } ]\r\n  item:\r\n    usage: Use this resourceType to represent any single item\r\n    description: A single <<typeName>>\r\n    get:\r\n      description: Get a <<typeName>>\r\n      is: [ hasResponseItem: { typeName: <<typeName>> }, hasNotFound ]\r\n    put:\r\n      description: Update a <<typeName>>\r\n      is: [ hasRequestItem: { typeName: <<typeName>> }, hasResponseItem: { typeName: <<typeName>> }, hasNotFound ]\r\n    delete:\r\n      description: Delete a <<typeName>>\r\n      is: [ hasNotFound ]\r\n      responses:\r\n        204:\r\ntraits:\r\n  hasRequestItem:\r\n    body:\r\n      application/json:\r\n        type: <<typeName>>\r\n  hasResponseItem:\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: <<typeName>>\r\n  hasResponseCollection:\r\n    responses:\r\n      200:\r\n        body:\r\n          application/json:\r\n            type: <<typeName>>[]\r\n  hasNotFound:\r\n    responses:\r\n      404:\r\n        body:\r\n          application/json:\r\n            type: Error\r\n            example: !include examples/Error.json\r\n/foos:\r\n  type: { collection: { typeName: Foo } }\r\n  get:\r\n    queryParameters:\r\n      name?: string\r\n      ownerName?: string\r\n  /{fooId}:\r\n    type: { item: { typeName: Foo } }\r\n  /name/{name}:\r\n    get:\r\n      description: List all foos with a certain name\r\n      is: [ hasResponseCollection: { typeName: Foo } ]\r\n/bars:\r\n  type: { collection: { typeName: Bar } }\r\n  /{barId}:\r\n    type: { item: { typeName: Bar } }\r\n  /fooId/{fooId}:\r\n    get:\r\n      description: Get all bars for the matching fooId\r\n      is: [ hasResponseCollection: { typeName: Bar } ]\r\n```"]