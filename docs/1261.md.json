["```\r\npublic List findTopK(List input, int k) {\r\n    List array = new ArrayList<>(input);\r\n    List topKList = new ArrayList<>();\r\n\r\n    for (int i = 0; i < k; i++) {\r\n        int maxIndex = 0;\r\n\r\n        for (int j = 1; j < array.size(); j++) {\r\n            if (array.get(j) > array.get(maxIndex)) {\r\n                maxIndex = j;\r\n            }\r\n        }\r\n\r\n        topKList.add(array.remove(maxIndex));\r\n    }\r\n\r\n    return topKList;\r\n}\r\n```","```\r\npublic List<Integer> findTopK(List<Integer> input, int k) {\r\n    Set<Integer> sortedSet = new TreeSet<>(Comparator.reverseOrder());\r\n    sortedSet.addAll(input);\r\n\r\n    return sortedSet.stream().limit(k).collect(Collectors.toList());\r\n}\r\n```","```\r\npublic List<Integer> findTopK(List<Integer> input, int k) {\r\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>();\r\n\r\n    input.forEach(number -> {\r\n        maxHeap.add(number);\r\n\r\n        if (maxHeap.size() > k) {\r\n            maxHeap.poll();\r\n        }\r\n    });\r\n\r\n    List<Integer> topKList = new ArrayList<>(maxHeap);\r\n    Collections.reverse(topKList);\r\n\r\n    return topKList;\r\n}\r\n```"]