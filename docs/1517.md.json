["```\r\nList<String> arraysAsList = Arrays.asList(\"ONE\");\r\nassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(\r\n    () -> arraysAsList.add(\"TWO\")\r\n); \r\n```","```\r\narraysAsList.set(0, \"A brand new string\");\r\nassertThat(arraysAsList.get(0)).isEqualTo(\"A brand new string\");\r\n```","```\r\nString[] theArray = new String[] { \"ONE\", \"TWO\" };\r\nList<String> theList = Arrays.asList(theArray);\r\n//changing the list, the array is changed too\r\ntheList.set(0, \"ONE [changed in list]\");\r\nassertThat(theArray[0]).isEqualTo(\"ONE [changed in list]\");\r\n\r\n//changing the array, the list is changed too\r\ntheArray[1] = \"TWO [changed in array]\";\r\nassertThat(theList.get(1)).isEqualTo(\"TWO [changed in array]\"); \r\n```","```\r\nList<String> singletonList = Collections.singletonList(\"ONE\");\r\nassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(\r\n    () -> singletonList.add(\"TWO\")\r\n);\r\nassertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(\r\n    () -> singletonList.set(0, \"A brand new string\")\r\n); \r\n```","```\r\nprivate static class SingletonList<E> extends AbstractList<E> implements RandomAccess, Serializable {\r\n    ...\r\n    private final E element;\r\n\r\n    SingletonList(E obj) {element = obj;}\r\n    ...\r\n}\r\n```"]