["```\r\npublic class DBCPDataSource {\r\n\r\n    private static BasicDataSource ds = new BasicDataSource();\r\n\r\n    static {\r\n        ds.setUrl(\"jdbc:h2:mem:test\");\r\n        ds.setUsername(\"user\");\r\n        ds.setPassword(\"password\");\r\n        ds.setMinIdle(5);\r\n        ds.setMaxIdle(10);\r\n        ds.setMaxOpenPreparedStatements(100);\r\n    }\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n        return ds.getConnection();\r\n    }\r\n\r\n    private DBCPDataSource(){ }\r\n}\r\n```","```\r\nConnection con = DBCPDataSource.getConnection();\r\n```","```\r\npublic class HikariCPDataSource {\r\n\r\n    private static HikariConfig config = new HikariConfig();\r\n    private static HikariDataSource ds;\r\n\r\n    static {\r\n        config.setJdbcUrl(\"jdbc:h2:mem:test\");\r\n        config.setUsername(\"user\");\r\n        config.setPassword(\"password\");\r\n        config.addDataSourceProperty(\"cachePrepStmts\", \"true\");\r\n        config.addDataSourceProperty(\"prepStmtCacheSize\", \"250\");\r\n        config.addDataSourceProperty(\"prepStmtCacheSqlLimit\", \"2048\");\r\n        ds = new HikariDataSource(config);\r\n    }\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n        return ds.getConnection();\r\n    }\r\n\r\n    private HikariCPDataSource(){}\r\n}\r\n```","```\r\nConnection con = HikariCPDataSource.getConnection();\r\n```","```\r\npublic class C3p0DataSource {\r\n\r\n    private static ComboPooledDataSource cpds = new ComboPooledDataSource();\r\n\r\n    static {\r\n        try {\r\n            cpds.setDriverClass(\"org.h2.Driver\");\r\n            cpds.setJdbcUrl(\"jdbc:h2:mem:test\");\r\n            cpds.setUser(\"user\");\r\n            cpds.setPassword(\"password\");\r\n        } catch (PropertyVetoException e) {\r\n            // handle the exception\r\n        }\r\n    }\r\n\r\n    public static Connection getConnection() throws SQLException {\r\n        return cpds.getConnection();\r\n    }\r\n\r\n    private C3p0DataSource(){}\r\n}\r\n```","```\r\nConnection con = C3p0DataSource.getConnection();\r\n```","```\r\npublic interface ConnectionPool {\r\n    Connection getConnection();\r\n    boolean releaseConnection(Connection connection);\r\n    String getUrl();\r\n    String getUser();\r\n    String getPassword();\r\n}\r\n```","```\r\npublic class BasicConnectionPool \r\n  implements ConnectionPool {\r\n\r\n    private String url;\r\n    private String user;\r\n    private String password;\r\n    private List<Connection> connectionPool;\r\n    private List<Connection> usedConnections = new ArrayList<>();\r\n    private static int INITIAL_POOL_SIZE = 10;\r\n\r\n    public static BasicConnectionPool create(\r\n      String url, String user, \r\n      String password) throws SQLException {\r\n\r\n        List<Connection> pool = new ArrayList<>(INITIAL_POOL_SIZE);\r\n        for (int i = 0; i < INITIAL_POOL_SIZE; i++) {\r\n            pool.add(createConnection(url, user, password));\r\n        }\r\n        return new BasicConnectionPool(url, user, password, pool);\r\n    }\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public Connection getConnection() {\r\n        Connection connection = connectionPool\r\n          .remove(connectionPool.size() - 1);\r\n        usedConnections.add(connection);\r\n        return connection;\r\n    }\r\n\r\n    @Override\r\n    public boolean releaseConnection(Connection connection) {\r\n        connectionPool.add(connection);\r\n        return usedConnections.remove(connection);\r\n    }\r\n\r\n    private static Connection createConnection(\r\n      String url, String user, String password) \r\n      throws SQLException {\r\n        return DriverManager.getConnection(url, user, password);\r\n    }\r\n\r\n    public int getSize() {\r\n        return connectionPool.size() + usedConnections.size();\r\n    }\r\n\r\n    // standard getters\r\n}\r\n```","```\r\n@Test\r\npublic whenCalledgetConnection_thenCorrect() {\r\n    ConnectionPool connectionPool = BasicConnectionPool\r\n      .create(\"jdbc:h2:mem:test\", \"user\", \"password\");\r\n\r\n    assertTrue(connectionPool.getConnection().isValid(1));\r\n}\r\n```","```\r\n@Override\r\npublic Connection getConnection() throws SQLException {\r\n    if (connectionPool.isEmpty()) {\r\n        if (usedConnections.size() < MAX_POOL_SIZE) {\r\n            connectionPool.add(createConnection(url, user, password));\r\n        } else {\r\n            throw new RuntimeException(\r\n              \"Maximum pool size reached, no available connections!\");\r\n        }\r\n    }\r\n\r\n    Connection connection = connectionPool\r\n      .remove(connectionPool.size() - 1);\r\n\r\n    if(!connection.isValid(MAX_TIMEOUT)){\r\n        connection = createConnection(url, user, password);\r\n    }\r\n\r\n    usedConnections.add(connection);\r\n    return connection;\r\n} \r\n```","```\r\npublic void shutdown() throws SQLException {\r\n    usedConnections.forEach(this::releaseConnection);\r\n    for (Connection c : connectionPool) {\r\n        c.close();\r\n    }\r\n    connectionPool.clear();\r\n}\r\n```"]