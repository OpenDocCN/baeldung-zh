["```\r\npublic enum Level {\r\n    LOW, MEDIUM, HIGH\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"enummapping\")\r\npublic class EnumMappingController {\r\n\r\n    @GetMapping(\"/get\")\r\n    public String getByLevel(@RequestParam(required = false) Level level){\r\n        return level.name();\r\n    }\r\n\r\n}\r\n```","```\r\ncurl http://localhost:8080/enummapping/get?level=MEDIUM\r\n```","```\r\ncurl http://localhost:8080/enummapping/get?level=medium\r\n{\"timestamp\":\"2022-11-18T18:41:11.440+00:00\",\"status\":400,\"error\":\"Bad Request\",\"path\":\"/enummapping/get\"}\r\n```","```\r\nFailed to convert value of type 'java.lang.String' to required type 'com.baeldung.enummapping.enums.Level'; \r\nnested exception is org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.lang.String] to type [@org.springframework.web.bind.annotation.RequestParam com.baeldung.enummapping.enums.Level] for value 'medium'; \r\n...\r\n```","```\r\n@Configuration\r\npublic class EnumMappingConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void addFormatters(FormatterRegistry registry) {\r\n        ApplicationConversionService.configure(registry);\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebMvcTest(EnumMappingController.class)\r\npublic class EnumMappingIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @Test\r\n    public void whenPassingLowerCaseEnumConstant_thenConvert() throws Exception {\r\n        mockMvc.perform(get(\"/enummapping/get?level=medium\"))\r\n            .andExpect(status().isOk())\r\n            .andExpect(content().string(Level.MEDIUM.name()));\r\n    }\r\n\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic class StringToLevelConverter implements Converter<String, Level> {\r\n\r\n    @Override\r\n    public Level convert(String source) {\r\n        if (StringUtils.isBlank(source)) {\r\n            return null;\r\n        }\r\n        return EnumUtils.getEnum(Level.class, source.toUpperCase());\r\n    }\r\n\r\n}\r\n```","```\r\n@Override\r\npublic void addFormatters(FormatterRegistry registry) {\r\n    registry.addConverter(new StringToLevelConverter());\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = EnumMappingMainApplication.class)\r\npublic class StringToLevelConverterIntegrationTest {\r\n\r\n    @Autowired\r\n    ConversionService conversionService;\r\n\r\n    @Test\r\n    public void whenConvertStringToLevelEnumUsingCustomConverter_thenSuccess() {\r\n        assertThat(conversionService.convert(\"low\", Level.class)).isEqualTo(Level.LOW);\r\n    }\r\n\r\n}\r\n```","```\r\npublic class LevelEditor extends PropertyEditorSupport {\r\n\r\n    @Override\r\n    public void setAsText(String text) {\r\n        if (StringUtils.isBlank(text)) {\r\n            setValue(null);\r\n        } else {\r\n            setValue(EnumUtils.getEnum(Level.class, text.toUpperCase()));\r\n        }\r\n    }\r\n}\r\n```","```\r\n@InitBinder\r\npublic void initBinder(WebDataBinder dataBinder) {\r\n    dataBinder.registerCustomEditor(Level.class, new LevelEditor());\r\n}\r\n```","```\r\npublic class LevelEditorIntegrationTest {\r\n\r\n    @Test\r\n    public void whenConvertStringToLevelEnumUsingCustomPropertyEditor_thenSuccess() {\r\n        LevelEditor levelEditor = new LevelEditor();\r\n        levelEditor.setAsText(\"lOw\");\r\n\r\n        assertThat(levelEditor.getValue()).isEqualTo(Level.LOW);\r\n    }\r\n}\r\n```","```\r\npublic String getByLevel(@RequestParam(required = false) Level level) {\r\n    if (level != null) {\r\n        return level.name();\r\n    }\r\n    return \"undefined\";\r\n}\r\n```","```\r\n@Test\r\npublic void whenPassingUnknownEnumConstant_thenReturnUndefined() throws Exception {\r\n    mockMvc.perform(get(\"/enummapping/get?level=unknown\"))\r\n        .andExpect(status().isOk())\r\n        .andExpect(content().string(\"undefined\"));\r\n}\r\n```"]