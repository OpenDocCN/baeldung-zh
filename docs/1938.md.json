["```\r\n<dependency>\r\n  <groupId>com.jakewharton.rxrelay2</groupId>\r\n  <artifactId>rxrelay</artifactId>\r\n  <version>1.2.0</version>\r\n</dependency>\r\n```","```\r\npublic void whenObserverSubscribedToPublishRelay_itReceivesEmittedEvents() {\r\n    PublishRelay<Integer> publishRelay = PublishRelay.create();\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    TestObserver<Integer> secondObserver = TestObserver.create();\r\n\r\n    publishRelay.subscribe(firstObserver);\r\n    firstObserver.assertSubscribed();\r\n    publishRelay.accept(5);\r\n    publishRelay.accept(10);\r\n    publishRelay.subscribe(secondObserver);\r\n    secondObserver.assertSubscribed();\r\n    publishRelay.accept(15);\r\n    firstObserver.assertValues(5, 10, 15);\r\n\r\n    // second receives only the last event\r\n    secondObserver.assertValue(15);\r\n}\r\n```","```\r\npublic void whenObserverSubscribedToBehaviorRelay_itReceivesEmittedEvents() {\r\n    BehaviorRelay<Integer> behaviorRelay = BehaviorRelay.create();\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    TestObserver<Integer> secondObserver = TestObserver.create();\r\n    behaviorRelay.accept(5);     \r\n    behaviorRelay.subscribe(firstObserver);\r\n    behaviorRelay.accept(10);\r\n    behaviorRelay.subscribe(secondObserver);\r\n    behaviorRelay.accept(15);\r\n    firstObserver.assertValues(5, 10, 15);\r\n    secondObserver.assertValues(10, 15);\r\n}\r\n```","```\r\npublic void whenObserverSubscribedToBehaviorRelay_itReceivesDefaultValue() {\r\n    BehaviorRelay<Integer> behaviorRelay = BehaviorRelay.createDefault(1);\r\n    TestObserver<Integer> firstObserver = new TestObserver<>();\r\n    behaviorRelay.subscribe(firstObserver);\r\n    firstObserver.assertValue(1);\r\n}\r\n```","```\r\npublic void whenObserverSubscribedToBehaviorRelayWithoutDefaultValue_itIsEmpty() {\r\n    BehaviorRelay<Integer> behaviorRelay = BehaviorRelay.create();\r\n    TestObserver<Integer> firstObserver = new TestObserver<>();\r\n    behaviorRelay.subscribe(firstObserver);\r\n    firstObserver.assertEmpty();\r\n}\r\n```","```\r\n public void whenObserverSubscribedToReplayRelay_itReceivesEmittedEvents() {\r\n    ReplayRelay<Integer> replayRelay = ReplayRelay.create();\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    TestObserver<Integer> secondObserver = TestObserver.create();\r\n    replayRelay.subscribe(firstObserver);\r\n    replayRelay.accept(5);\r\n    replayRelay.accept(10);\r\n    replayRelay.accept(15);\r\n    replayRelay.subscribe(secondObserver);\r\n    firstObserver.assertValues(5, 10, 15);\r\n    secondObserver.assertValues(5, 10, 15);\r\n}\r\n```","```\r\npublic void whenObserverSubscribedToReplayRelayWithLimitedSize_itReceivesEmittedEvents() {\r\n    ReplayRelay<Integer> replayRelay = ReplayRelay.createWithSize(2);\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    replayRelay.accept(5);\r\n    replayRelay.accept(10);\r\n    replayRelay.accept(15);\r\n    replayRelay.accept(20);\r\n    replayRelay.subscribe(firstObserver);\r\n    firstObserver.assertValues(15, 20);\r\n}\r\n```","```\r\npublic void whenObserverSubscribedToReplayRelayWithMaxAge_thenItReceivesEmittedEvents() {\r\n    SingleScheduler scheduler = new SingleScheduler();\r\n    ReplayRelay<Integer> replayRelay =\r\n      ReplayRelay.createWithTime(2000, TimeUnit.MILLISECONDS, scheduler);\r\n    long current =  scheduler.now(TimeUnit.MILLISECONDS);\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    replayRelay.accept(5);\r\n    replayRelay.accept(10);\r\n    replayRelay.accept(15);\r\n    replayRelay.accept(20);\r\n    Thread.sleep(3000);\r\n    replayRelay.subscribe(firstObserver);\r\n    firstObserver.assertEmpty();\r\n}\r\n```","```\r\npublic class RandomRelay extends Relay<Integer> {\r\n    Random random = new Random();\r\n\r\n    List<Observer<? super Integer>> observers = new ArrayList<>();\r\n\r\n    @Override\r\n    public void accept(Integer integer) {\r\n        int observerIndex = random.nextInt() % observers.size();\r\n        observers.get(observerIndex).onNext(integer);\r\n    }\r\n\r\n    @Override\r\n    public boolean hasObservers() {\r\n        return observers.isEmpty();\r\n    }\r\n\r\n    @Override\r\n    protected void subscribeActual(Observer<? super Integer> observer) {\r\n        observers.add(observer);\r\n        observer.onSubscribe(Disposables.fromRunnable(\r\n          () -> System.out.println(\"Disposed\")));\r\n    }\r\n}\r\n```","```\r\npublic void whenTwoObserversSubscribedToRandomRelay_thenOnlyOneReceivesEvent() {\r\n    RandomRelay randomRelay = new RandomRelay();\r\n    TestObserver<Integer> firstObserver = TestObserver.create();\r\n    TestObserver<Integer> secondObserver = TestObserver.create();\r\n    randomRelay.subscribe(firstObserver);\r\n    randomRelay.subscribe(secondObserver);\r\n    randomRelay.accept(5);\r\n    if(firstObserver.values().isEmpty()) {\r\n        secondObserver.assertValue(5);\r\n    } else {\r\n        firstObserver.assertValue(5);\r\n        secondObserver.assertEmpty();\r\n    }\r\n}\r\n```"]