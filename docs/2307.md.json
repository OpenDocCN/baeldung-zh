["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\npublic class ProductController {\r\n\r\n    @RequestMapping(\"/product\")\r\n    public List<Product> productListing() {\r\n        return ps.findAll();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic RouterFunction<ServerResponse> productListing(ProductService ps) {\r\n    return route().GET(\"/product\", req -> ok().body(ps.findAll()))\r\n      .build();\r\n}\r\n```","```\r\nRequestPredicates.path(\"/product\")\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBootMvcFnApplication {\r\n\r\n    @Bean\r\n    RouterFunction<ServerResponse> productListing(ProductController pc, ProductService ps) {\r\n        return pc.productListing(ps);\r\n    }\r\n}\r\n```","```\r\npublic RouterFunction<ServerResponse> productSearch(ProductService ps) {\r\n    return route().nest(RequestPredicates.path(\"/product\"), builder -> {\r\n        builder.GET(\"/name/{name}\", req -> ok().body(ps.findByName(req.pathVariable(\"name\"))));\r\n    }).build();\r\n}\r\n```","```\r\npublic RouterFunction<ServerResponse> productSearch(ProductService ps) {\r\n    return route()...\r\n      .onError(ProductService.ItemNotFoundException.class,\r\n         (e, req) -> EntityResponse.fromObject(new Error(e.getMessage()))\r\n           .status(HttpStatus.NOT_FOUND)\r\n           .build())\r\n      .build();\r\n}\r\n```","```\r\npublic RouterFunction<ServerResponse> adminFunctions(ProductService ps) {\r\n    return route().POST(\"/product\", req -> ok().body(ps.save(req.body(Product.class))))\r\n      .onError(IllegalArgumentException.class, \r\n         (e, req) -> EntityResponse.fromObject(new Error(e.getMessage()))\r\n           .status(HttpStatus.BAD_REQUEST)\r\n           .build())\r\n        .build();\r\n}\r\n```","```\r\npublic RouterFunction<ServerResponse> adminFunctions(ProductService ps) {\r\n   return route().POST(\"/product\", req -> ok().body(ps.save(req.body(Product.class))))\r\n     .filter((req, next) -> authenticate(req) ? next.handle(req) : \r\n       status(HttpStatus.UNAUTHORIZED).build())\r\n     ....;\r\n}\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> allApplicationRoutes(ProductController pc, ProductService ps) {\r\n    return route()...\r\n      .before(req -> {\r\n          LOG.info(\"Found a route which matches \" + req.uri()\r\n            .getPath());\r\n          return req;\r\n      })\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\nRouterFunction<ServerResponse> allApplicationRoutes(ProductController pc, ProductService ps) {\r\n    return route()...\r\n      .after((req, res) -> {\r\n          if (res.statusCode() == HttpStatus.OK) {\r\n              LOG.info(\"Finished processing request \" + req.uri()\r\n                  .getPath());\r\n          } else {\r\n              LOG.info(\"There was an error while processing request\" + req.uri());\r\n          }\r\n          return res;\r\n      })          \r\n      .build();\r\n    }\r\n```"]