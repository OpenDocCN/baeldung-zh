["```\r\n<dependency>\r\n    <groupId>org.apache.shiro</groupId>\r\n    <artifactId>shiro-spring-boot-web-starter</artifactId>\r\n    <version>1.5.3</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.shiro</groupId>\r\n    <artifactId>shiro-core</artifactId>\r\n    <version>1.5.3</version>\r\n</dependency>\r\n```","```\r\npublic class CustomRealm extends JdbcRealm {\r\n\r\n    private Map<String, String> credentials = new HashMap<>();\r\n    private Map<String, Set> roles = new HashMap<>();\r\n    private Map<String, Set> permissions = new HashMap<>();\r\n\r\n    {\r\n        credentials.put(\"Tom\", \"password\");\r\n        credentials.put(\"Jerry\", \"password\");\r\n\r\n        roles.put(\"Jerry\", new HashSet<>(Arrays.asList(\"ADMIN\")));\r\n        roles.put(\"Tom\", new HashSet<>(Arrays.asList(\"USER\")));\r\n\r\n        permissions.put(\"ADMIN\", new HashSet<>(Arrays.asList(\"READ\", \"WRITE\")));\r\n        permissions.put(\"USER\", new HashSet<>(Arrays.asList(\"READ\")));\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) \r\n  throws AuthenticationException {\r\n    UsernamePasswordToken userToken = (UsernamePasswordToken) token;\r\n\r\n    if (userToken.getUsername() == null || userToken.getUsername().isEmpty() ||\r\n      !credentials.containsKey(userToken.getUsername())) {\r\n        throw new UnknownAccountException(\"User doesn't exist\");\r\n    }\r\n    return new SimpleAuthenticationInfo(userToken.getUsername(), \r\n      credentials.get(userToken.getUsername()), getName());\r\n}\r\n\r\n@Override\r\nprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\r\n    Set roles = new HashSet<>();\r\n    Set permissions = new HashSet<>();\r\n\r\n    for (Object user : principals) {\r\n        try {\r\n            roles.addAll(getRoleNamesForUser(null, (String) user));\r\n            permissions.addAll(getPermissions(null, null, roles));\r\n        } catch (SQLException e) {\r\n            logger.error(e.getMessage());\r\n        }\r\n    }\r\n    SimpleAuthorizationInfo authInfo = new SimpleAuthorizationInfo(roles);\r\n    authInfo.setStringPermissions(permissions);\r\n    return authInfo;\r\n} \r\n```","```\r\n@Override\r\nprotected Set getRoleNamesForUser(Connection conn, String username) \r\n  throws SQLException {\r\n    if (!roles.containsKey(username)) {\r\n        throw new SQLException(\"User doesn't exist\");\r\n    }\r\n    return roles.get(username);\r\n}\r\n\r\n@Override\r\nprotected Set getPermissions(Connection conn, String username, Collection roles) \r\n  throws SQLException {\r\n    Set userPermissions = new HashSet<>();\r\n    for (String role : roles) {\r\n        if (!permissions.containsKey(role)) {\r\n            throw new SQLException(\"Role doesn't exist\");\r\n        }\r\n        userPermissions.addAll(permissions.get(role));\r\n    }\r\n    return userPermissions;\r\n} \r\n```","```\r\n@Bean\r\npublic Realm customRealm() {\r\n    return new CustomRealm();\r\n}\r\n```","```\r\n@Bean\r\npublic ShiroFilterChainDefinition shiroFilterChainDefinition() {\r\n    DefaultShiroFilterChainDefinition filter = new DefaultShiroFilterChainDefinition();\r\n\r\n    filter.addPathDefinition(\"/home\", \"authc\");\r\n    filter.addPathDefinition(\"/**\", \"anon\");\r\n    return filter;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests(authorize -> authorize\r\n            .antMatchers(\"/index\", \"/login\").permitAll()\r\n            .antMatchers(\"/home\", \"/logout\").authenticated()\r\n            .antMatchers(\"/admin/**\").hasRole(\"ADMIN\"))\r\n          .formLogin(formLogin -> formLogin\r\n            .loginPage(\"/login\")\r\n            .failureUrl(\"/login-error\"));\r\n    }\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth.inMemoryAuthentication()\r\n          .withUser(\"Jerry\")\r\n            .password(passwordEncoder().encode(\"password\"))\r\n            .authorities(\"READ\", \"WRITE\")\r\n            .roles(\"ADMIN\")\r\n            .and()\r\n          .withUser(\"Tom\")\r\n            .password(passwordEncoder().encode(\"password\"))\r\n            .authorities(\"READ\")\r\n            .roles(\"USER\");\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n} \r\n```","```\r\n@GetMapping(\"/\")\r\npublic String index() {\r\n    return \"index\";\r\n}\r\n\r\n@GetMapping(\"/login\")\r\npublic String showLoginPage() {\r\n    return \"login\";\r\n}\r\n\r\n@GetMapping(\"/home\")\r\npublic String getMeHome(Model model) {\r\n    addUserAttributes(model);\r\n    return \"home\";\r\n}\r\n```","```\r\nprivate void addUserAttributes(Model model) {\r\n    Subject currentUser = SecurityUtils.getSubject();\r\n    String permission = \"\";\r\n\r\n    if (currentUser.hasRole(\"ADMIN\")) {\r\n        model.addAttribute(\"role\", \"ADMIN\");\r\n    } else if (currentUser.hasRole(\"USER\")) {\r\n        model.addAttribute(\"role\", \"USER\");\r\n    }\r\n    if (currentUser.isPermitted(\"READ\")) {\r\n        permission = permission + \" READ\";\r\n    }\r\n    if (currentUser.isPermitted(\"WRITE\")) {\r\n        permission = permission + \" WRITE\";\r\n    }\r\n    model.addAttribute(\"username\", currentUser.getPrincipal());\r\n    model.addAttribute(\"permission\", permission);\r\n}\r\n```","```\r\nprivate void addUserAttributes(Model model) {\r\n    Authentication auth = SecurityContextHolder.getContext().getAuthentication();\r\n    if (auth != null && !auth.getClass().equals(AnonymousAuthenticationToken.class)) {\r\n        User user = (User) auth.getPrincipal();\r\n        model.addAttribute(\"username\", user.getUsername());\r\n        Collection<GrantedAuthority> authorities = user.getAuthorities();\r\n\r\n        for (GrantedAuthority authority : authorities) {\r\n            if (authority.getAuthority().contains(\"USER\")) {\r\n                model.addAttribute(\"role\", \"USER\");\r\n                model.addAttribute(\"permissions\", \"READ\");\r\n            } else if (authority.getAuthority().contains(\"ADMIN\")) {\r\n                model.addAttribute(\"role\", \"ADMIN\");\r\n                model.addAttribute(\"permissions\", \"READ WRITE\");\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class UserCredentials {\r\n\r\n    private String username;\r\n    private String password;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@PostMapping(\"/login\")\r\npublic String doLogin(HttpServletRequest req, UserCredentials credentials, RedirectAttributes attr) {\r\n\r\n    Subject subject = SecurityUtils.getSubject();\r\n    if (!subject.isAuthenticated()) {\r\n        UsernamePasswordToken token = new UsernamePasswordToken(credentials.getUsername(),\r\n          credentials.getPassword());\r\n        try {\r\n            subject.login(token);\r\n        } catch (AuthenticationException ae) {\r\n            logger.error(ae.getMessage());\r\n            attr.addFlashAttribute(\"error\", \"Invalid Credentials\");\r\n            return \"redirect:/login\";\r\n        }\r\n    }\r\n    return \"redirect:/home\";\r\n}\r\n```","```\r\n@PostMapping(\"/login\")\r\npublic String doLogin(HttpServletRequest req) {\r\n    return \"redirect:/home\";\r\n}\r\n```","```\r\n@GetMapping(\"/admin\")\r\npublic String adminOnly(ModelMap modelMap) {\r\n    addUserAttributes(modelMap);\r\n    Subject currentUser = SecurityUtils.getSubject();\r\n    if (currentUser.hasRole(\"ADMIN\")) {\r\n        modelMap.addAttribute(\"adminContent\", \"only admin can view this\");\r\n    }\r\n    return \"home\";\r\n}\r\n```","```\r\n@GetMapping(\"/admin\")\r\npublic String adminOnly(HttpServletRequest req, Model model) {\r\n    addUserAttributes(model);\r\n    model.addAttribute(\"adminContent\", \"only admin can view this\");\r\n    return \"home\";\r\n}\r\n```","```\r\n@PostMapping(\"/logout\")\r\npublic String logout() {\r\n    Subject subject = SecurityUtils.getSubject();\r\n    subject.logout();\r\n    return \"redirect:/\";\r\n}\r\n```"]