["```\r\n<dependency>\r\n    <groupId>org.openl</groupId>\r\n    <artifactId>org.openl.core</artifactId>\r\n    <version>5.19.4</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.openl.rules</groupId>\r\n    <artifactId>org.openl.rules</artifactId>\r\n    <version>5.19.4</version>\r\n</dependency>\r\n```","```\r\npublic class User {\r\n    private String name;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic enum Greeting {\r\n    // ...\r\n}\r\n```","```\r\npublic class Case {\r\n    // Variables to infer outcomes\r\n    // getters and setters\r\n}\r\n```","```\r\npublic interface IRule {\r\n    void helloUser(Case aCase, final Response response);\r\n}\r\n```","```\r\npublic class Response {\r\n    private String result;\r\n    private Map<String, String> map = new HashMap<>();\r\n}\r\n```","```\r\npublic class Main {\r\n    private IRule instance;\r\n\r\n    public static void main(String[] args) {\r\n        Main rules = new Main();\r\n        // setup user and case here\r\n        rules.process(aCase);\r\n    }\r\n\r\n    public void process(Case aCase) {\r\n        EngineFactory<IRule> engineFactory = new RulesEngineFactory<IRule>(\r\n          getClass().getClassLoader()\r\n            .getResource(\"openltablets/HelloUser.xls\"), IRule.class);\r\n        instance = engineFactory.newEngineInstance();\r\n        instance.helloUser(aCase, new Response());\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.jeasy</groupId>\r\n    <artifactId>easy-rules-core</artifactId>\r\n    <version>3.0.0</version>\r\n</dependency>\r\n```","```\r\n@Rule(name = \"Hello World rule\", description = \"Always say hello world\")\r\npublic class HelloWorldRule {\r\n\r\n    @Condition\r\n    public boolean when() {\r\n        return true;\r\n    }\r\n\r\n    @Action\r\n    public void then() throws Exception {\r\n        System.out.println(\"hello world\");\r\n    }\r\n}\r\n```","```\r\npublic class Launcher {\r\n    public static void main(String... args) {\r\n        // create facts\r\n        Facts facts = new Facts();\r\n\r\n        // create rules\r\n        Rules rules = new Rules();\r\n        rules.register(new HelloWorldRule());\r\n\r\n        // create a rules engine and fire rules on known facts\r\n        RulesEngine rulesEngine = new DefaultRulesEngine();\r\n        rulesEngine.fire(rules, facts);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.deliveredtechnologies</groupId>\r\n    <artifactId>rulebook-core</artifactId>\r\n    <version>0.6.2</version>\r\n</dependency>\r\n```","```\r\npublic class HelloWorldRule {\r\n    public RuleBook<Object> defineHelloWorldRules() {\r\n        return RuleBookBuilder\r\n          .create()\r\n            .addRule(rule -> rule.withNoSpecifiedFactType()\r\n              .then(f -> System.out.print(\"Hello \")))\r\n            .addRule(rule -> rule.withNoSpecifiedFactType()\r\n              .then(f -> System.out.println(\"World\")))\r\n            .build();\r\n    }\r\n} \r\n```","```\r\npublic static void main(String[] args) {\r\n    HelloWorldRule ruleBook = new HelloWorldRule();\r\n    ruleBook\r\n      .defineHelloWorldRules()\r\n      .run(new FactMap<>());\r\n} \r\n```"]