["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency> \r\n<dependency> \r\n    <groupId>com.h2database</groupId> \r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.197</version> \r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-validation</artifactId> \r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class User {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n\r\n    @NotBlank(message = \"Name is mandatory\")\r\n    private String name;\r\n\r\n    @NotBlank(message = \"Email is mandatory\")\r\n    private String email;\r\n\r\n    // standard constructors / setters / getters / toString\r\n\r\n}\r\n```","```\r\n@Repository\r\npublic interface UserRepository extends CrudRepository<User, Long> {}\r\n```","```\r\n@RestController\r\npublic class UserController {\r\n\r\n    @PostMapping(\"/users\")\r\n    ResponseEntity<String> addUser(@Valid @RequestBody User user) {\r\n        // persisting the user\r\n        return ResponseEntity.ok(\"User is valid\");\r\n    }\r\n\r\n    // standard constructors / other methods\r\n\r\n} \r\n```","```\r\n@ResponseStatus(HttpStatus.BAD_REQUEST)\r\n@ExceptionHandler(MethodArgumentNotValidException.class)\r\npublic Map<String, String> handleValidationExceptions(\r\n  MethodArgumentNotValidException ex) {\r\n    Map<String, String> errors = new HashMap<>();\r\n    ex.getBindingResult().getAllErrors().forEach((error) -> {\r\n        String fieldName = ((FieldError) error).getField();\r\n        String errorMessage = error.getDefaultMessage();\r\n        errors.put(fieldName, errorMessage);\r\n    });\r\n    return errors;\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class) \r\n@WebMvcTest\r\n@AutoConfigureMockMvc\r\npublic class UserControllerIntegrationTest {\r\n\r\n    @MockBean\r\n    private UserRepository userRepository;\r\n\r\n    @Autowired\r\n    UserController userController;\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    //...\r\n\r\n} \r\n```","```\r\n@Test\r\npublic void whenPostRequestToUsersAndValidUser_thenCorrectResponse() throws Exception {\r\n    MediaType textPlainUtf8 = new MediaType(MediaType.TEXT_PLAIN, Charset.forName(\"UTF-8\"));\r\n    String user = \"{\\\"name\\\": \\\"bob\\\", \\\"email\\\" : \\\"[[email protected]](/web/20221003130442/https://www.baeldung.com/cdn-cgi/l/email-protection)\\\"}\";\r\n    mockMvc.perform(MockMvcRequestBuilders.post(\"/users\")\r\n      .content(user)\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.content()\r\n        .contentType(textPlainUtf8));\r\n}\r\n\r\n@Test\r\npublic void whenPostRequestToUsersAndInValidUser_thenCorrectResponse() throws Exception {\r\n    String user = \"{\\\"name\\\": \\\"\\\", \\\"email\\\" : \\\"[[email protected]](/web/20221003130442/https://www.baeldung.com/cdn-cgi/l/email-protection)\\\"}\";\r\n    mockMvc.perform(MockMvcRequestBuilders.post(\"/users\")\r\n      .content(user)\r\n      .contentType(MediaType.APPLICATION_JSON_UTF8))\r\n      .andExpect(MockMvcResultMatchers.status().isBadRequest())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\", Is.is(\"Name is mandatory\")))\r\n      .andExpect(MockMvcResultMatchers.content()\r\n        .contentType(MediaType.APPLICATION_JSON_UTF8));\r\n    }\r\n} \r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n\r\n    @Bean\r\n    public CommandLineRunner run(UserRepository userRepository) throws Exception {\r\n        return (String[] args) -> {\r\n            User user1 = new User(\"Bob\", \"[[email protected]](/web/20221003130442/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n            User user2 = new User(\"Jenny\", \"[[email protected]](/web/20221003130442/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n            userRepository.save(user1);\r\n            userRepository.save(user2);\r\n            userRepository.findAll().forEach(System.out::println);\r\n        };\r\n    }\r\n} \r\n```","```\r\n{\r\n  \"name\":\"Name is mandatory\",\r\n  \"email\":\"Email is mandatory\"\r\n}\r\n```"]