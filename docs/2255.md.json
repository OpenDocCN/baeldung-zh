["```\r\npublic static String[] ones = { \r\n  \"\", \"one\", \"two\", \"three\", \"four\", \r\n  \"five\", \"six\", \"seven\", \"eight\", \r\n  \"nine\", \"ten\", \"eleven\", \"twelve\", \r\n  \"thirteen\", \"fourteen\", \"fifteen\", \r\n  \"sixteen\", \"seventeen\", \"eighteen\", \r\n  \"nineteen\" \r\n};\r\n\r\npublic static String[] tens = {\r\n  \"\",          // 0\r\n  \"\",          // 1\r\n  \"twenty\",    // 2\r\n  \"thirty\",    // 3\r\n  \"forty\",     // 4\r\n  \"fifty\",     // 5\r\n  \"sixty\",     // 6\r\n  \"seventy\",   // 7\r\n  \"eighty\",    // 8\r\n  \"ninety\"     // 9\r\n};\r\n```","```\r\n long dollars = (long) money;\r\n long cents = Math.round((money - dollars) * 100);\r\n```","```\r\nif (n < 20) {\r\n    return ones[(int) n];\r\n}\r\n```","```\r\nif (n < 100) {\r\n    return tens[(int) n / 10] \r\n      + ((n % 10 != 0) ? \" \" : \"\") \r\n      + ones[(int) n % 10];\r\n}\r\n```","```\r\nif (n < 1_000_000) {\r\n    return convert(n / 1000) + \" thousand\" + ((n % 1000 != 0) ? \" \" : \"\") \r\n      + convert(n % 1000);\r\n}\r\n```","```\r\n public static String getMoneyIntoWords(double money) {\r\n    long dollars = (long) money;\r\n    long cents = Math.round((money - dollars) * 100);\r\n    if (money == 0D) {\r\n        return \"\";\r\n    }\r\n    if (money < 0) {\r\n        return INVALID_INPUT_GIVEN;\r\n    }\r\n    String dollarsPart = \"\";\r\n    if (dollars > 0) {\r\n        dollarsPart = convert(dollars) \r\n          + \" dollar\" \r\n          + (dollars == 1 ? \"\" : \"s\");\r\n    }\r\n    String centsPart = \"\";\r\n    if (cents > 0) {\r\n        if (dollarParts.length() > 0) {\r\n            centsPart = \" and \";\r\n        }\r\n        centsPart += convert(cents) + \" cent\" + (cents == 1 ? \"\" : \"s\");\r\n    }\r\n    return dollarsPart + centsPart;\r\n}\r\n```","```\r\n@Test\r\npublic void whenGivenDollarsAndCents_thenReturnWords() {\r\n    String expectedResult\r\n     = \"nine hundred twenty four dollars and sixty cents\";\r\n\r\n    assertEquals(\r\n      expectedResult, \r\n      NumberWordConverter.getMoneyIntoWords(924.6));\r\n}\r\n\r\n@Test\r\npublic void whenTwoBillionDollarsGiven_thenReturnWords() {\r\n    String expectedResult \r\n      = \"two billion one hundred thirty three million two hundred\" \r\n        + \" forty seven thousand eight hundred ten dollars\";\r\n\r\n    assertEquals(\r\n      expectedResult, \r\n      NumberWordConverter.getMoneyIntoWords(2_133_247_810));\r\n}\r\n\r\n@Test\r\npublic void whenThirtyMillionDollarsGiven_thenReturnWords() {\r\n    String expectedResult \r\n      = \"thirty three million three hundred forty eight thousand nine hundred seventy eight dollars\";\r\n    assertEquals(\r\n      expectedResult, \r\n      NumberWordConverter.getMoneyIntoWords(33_348_978));\r\n}\r\n```","```\r\n@Test\r\npublic void whenZeroDollarsGiven_thenReturnEmptyString() {\r\n    assertEquals(\"\", NumberWordConverter.getMoneyIntoWords(0));\r\n}\r\n\r\n@Test\r\npublic void whenNoDollarsAndNineFiveNineCents_thenCorrectRounding() {\r\n    assertEquals(   \r\n      \"ninety six cents\", \r\n      NumberWordConverter.getMoneyIntoWords(0.959));\r\n}\r\n\r\n@Test\r\npublic void whenNoDollarsAndOneCent_thenReturnCentSingular() {\r\n    assertEquals(\r\n      \"one cent\", \r\n      NumberWordConverter.getMoneyIntoWords(0.01));\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>pl.allegro.finance</groupId>\r\n    <artifactId>tradukisto</artifactId>\r\n    <version>1.0.1</version>\r\n</dependency>\r\n```","```\r\npublic String getMoneyIntoWords(String input) {\r\n    MoneyConverters converter = MoneyConverters.ENGLISH_BANKING_MONEY_VALUE;\r\n    return converter.asWords(new BigDecimal(input));\r\n}\r\n```","```\r\n@Test\r\npublic void whenGivenDollarsAndCents_thenReturnWordsVersionTwo() {\r\n    assertEquals(\r\n      \"three hundred ten Â£ 00/100\", \r\n      NumberWordConverter.getMoneyIntoWords(\"310\"));\r\n}\r\n```"]