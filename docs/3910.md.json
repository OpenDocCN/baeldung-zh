["```\r\npublic class Person {\r\n    protected String lastName;\r\n    private String firstName;\r\n}\r\n```","```\r\npublic class PersonAndEmployeeReflectionUnitTest {\r\n\r\n    /* ... constants ... */\r\n\r\n    @Test\r\n    public void givenPersonClass_whenGetDeclaredFields_thenTwoFields() {\r\n        Field[] allFields = Person.class.getDeclaredFields();\r\n\r\n        assertEquals(2, allFields.length);\r\n\r\n        assertTrue(Arrays.stream(allFields).anyMatch(field ->\r\n          field.getName().equals(LAST_NAME_FIELD)\r\n            && field.getType().equals(String.class))\r\n        );\r\n        assertTrue(Arrays.stream(allFields).anyMatch(field ->\r\n          field.getName().equals(FIRST_NAME_FIELD)\r\n            && field.getType().equals(String.class))\r\n        );\r\n    }\r\n\r\n}\r\n```","```\r\npublic class Employee extends Person {\r\n    public int employeeId;\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeClass_whenGetDeclaredFieldsOnBothClasses_thenThreeFields() {\r\n    Field[] personFields = Employee.class.getSuperclass().getDeclaredFields();\r\n    Field[] employeeFields = Employee.class.getDeclaredFields();\r\n    Field[] allFields = new Field[employeeFields.length + personFields.length];\r\n    Arrays.setAll(allFields, i -> \r\n      (i < personFields.length ? personFields[i] : employeeFields[i - personFields.length]));\r\n\r\n    assertEquals(3, allFields.length);\r\n\r\n    Field lastNameField = allFields[0];\r\n    assertEquals(LAST_NAME_FIELD, lastNameField.getName());\r\n    assertEquals(String.class, lastNameField.getType());\r\n\r\n    Field firstNameField = allFields[1];\r\n    assertEquals(FIRST_NAME_FIELD, firstNameField.getName());\r\n    assertEquals(String.class, firstNameField.getType());\r\n\r\n    Field employeeIdField = allFields[2];\r\n    assertEquals(EMPLOYEE_ID_FIELD, employeeIdField.getName());\r\n    assertEquals(int.class, employeeIdField.getType());\r\n}\r\n```","```\r\nList<Field> personFields = Arrays.stream(Employee.class.getSuperclass().getDeclaredFields())\r\n  .filter(f -> Modifier.isPublic(f.getModifiers()) || Modifier.isProtected(f.getModifiers()))\r\n  .collect(Collectors.toList());\r\n\r\nassertEquals(1, personFields.size());\r\n\r\nassertTrue(personFields.stream().anyMatch(field ->\r\n  field.getName().equals(LAST_NAME_FIELD)\r\n    && field.getType().equals(String.class))\r\n);\r\n```","```\r\nList<Field> getAllFields(Class clazz) {\r\n    if (clazz == null) {\r\n        return Collections.emptyList();\r\n    }\r\n\r\n    List<Field> result = new ArrayList<>(getAllFields(clazz.getSuperclass()));\r\n    List<Field> filteredFields = Arrays.stream(clazz.getDeclaredFields())\r\n      .filter(f -> Modifier.isPublic(f.getModifiers()) || Modifier.isProtected(f.getModifiers()))\r\n      .collect(Collectors.toList());\r\n    result.addAll(filteredFields);\r\n    return result;\r\n}\r\n```","```\r\npublic class MonthEmployee extends Employee {\r\n    protected double reward;\r\n}\r\n```","```\r\n@Test\r\npublic void givenMonthEmployeeClass_whenGetAllFields_thenThreeFields() {\r\n    List<Field> allFields = getAllFields(MonthEmployee.class);\r\n\r\n    assertEquals(3, allFields.size());\r\n\r\n    assertTrue(allFields.stream().anyMatch(field ->\r\n      field.getName().equals(LAST_NAME_FIELD)\r\n        && field.getType().equals(String.class))\r\n    );\r\n    assertTrue(allFields.stream().anyMatch(field ->\r\n      field.getName().equals(EMPLOYEE_ID_FIELD)\r\n        && field.getType().equals(int.class))\r\n    );\r\n    assertTrue(allFields.stream().anyMatch(field ->\r\n      field.getName().equals(MONTH_EMPLOYEE_REWARD_FIELD)\r\n        && field.getType().equals(double.class))\r\n    );\r\n}\r\n```"]