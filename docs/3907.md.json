["```\r\npublic class Employee {\r\n    private String email;\r\n    private String name;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Controller\r\npublic class EmployeeController {\r\n\r\n    private List<Employee> employees = new ArrayList<>();\r\n\r\n    @GetMapping(\"/employee\")\r\n    @ResponseBody\r\n    public Optional<Employee> getEmployee(@RequestParam String email) {\r\n        return employees.stream()\r\n          .filter(x -> x.getEmail().equals(email)).findAny();\r\n    }\r\n\r\n    @PostMapping(\"/employee\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public void postMessage(@RequestBody Employee employee) {\r\n        employees.add(employee);\r\n    }\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebAppConfiguration\r\n@SpringBootTest(classes = AuthorizationServerApplication.class)\r\npublic class OAuthMvcTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    @Autowired\r\n    private FilterChainProxy springSecurityFilterChain;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    @Before\r\n    public void setup() {\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac)\r\n          .addFilter(springSecurityFilterChain).build();\r\n    }\r\n}\r\n```","```\r\nprivate String obtainAccessToken(String username, String password) throws Exception {\r\n\r\n    MultiValueMap<String, String> params = new LinkedMultiValueMap<>();\r\n    params.add(\"grant_type\", \"password\");\r\n    params.add(\"client_id\", \"fooClientIdPassword\");\r\n    params.add(\"username\", username);\r\n    params.add(\"password\", password);\r\n\r\n    ResultActions result \r\n      = mockMvc.perform(post(\"/oauth/token\")\r\n        .params(params)\r\n        .with(httpBasic(\"fooClientIdPassword\",\"secret\"))\r\n        .accept(\"application/json;charset=UTF-8\"))\r\n        .andExpect(status().isOk())\r\n        .andExpect(content().contentType(\"application/json;charset=UTF-8\"));\r\n\r\n    String resultString = result.andReturn().getResponse().getContentAsString();\r\n\r\n    JacksonJsonParser jsonParser = new JacksonJsonParser();\r\n    return jsonParser.parseMap(resultString).get(\"access_token\").toString();\r\n}\r\n```","```\r\n@Test\r\npublic void givenNoToken_whenGetSecureRequest_thenUnauthorized() throws Exception {\r\n    mockMvc.perform(get(\"/employee\")\r\n      .param(\"email\", EMAIL))\r\n      .andExpect(status().isUnauthorized());\r\n}\r\n```","```\r\n@Test\r\npublic void givenInvalidRole_whenGetSecureRequest_thenForbidden() throws Exception {\r\n    String accessToken = obtainAccessToken(\"user1\", \"pass\");\r\n    mockMvc.perform(get(\"/employee\")\r\n      .header(\"Authorization\", \"Bearer \" + accessToken)\r\n      .param(\"email\", \"[[email protected]](/web/20221208143917/https://www.baeldung.com/cdn-cgi/l/email-protection)\"))\r\n      .andExpect(status().isForbidden());\r\n}\r\n```","```\r\n@Test\r\npublic void givenToken_whenPostGetSecureRequest_thenOk() throws Exception {\r\n    String accessToken = obtainAccessToken(\"admin\", \"nimda\");\r\n\r\n    String employeeString = \"{\\\"email\\\":\\\"[[email protected]](/web/20221208143917/https://www.baeldung.com/cdn-cgi/l/email-protection)\\\",\\\"name\\\":\\\"Jim\\\"}\";\r\n\r\n    mockMvc.perform(post(\"/employee\")\r\n      .header(\"Authorization\", \"Bearer \" + accessToken)\r\n      .contentType(application/json;charset=UTF-8)\r\n      .content(employeeString)\r\n      .accept(application/json;charset=UTF-8))\r\n      .andExpect(status().isCreated());\r\n\r\n    mockMvc.perform(get(\"/employee\")\r\n      .param(\"email\", \"[[email protected]](/web/20221208143917/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n      .header(\"Authorization\", \"Bearer \" + accessToken)\r\n      .accept(\"application/json;charset=UTF-8\"))\r\n      .andExpect(status().isOk())\r\n      .andExpect(content().contentType(application/json;charset=UTF-8))\r\n      .andExpect(jsonPath(\"$.name\", is(\"Jim\")));\r\n}\r\n```"]