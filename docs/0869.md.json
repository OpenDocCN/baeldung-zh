["```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-gemfire</artifactId>\r\n    <version>1.9.1.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<cache>\r\n    <region name=\"region\">\r\n        <region-attributes>\r\n            <cache-listener>\r\n                <class-name>\r\n                ...\r\n                </class-name>\r\n            </cache-listener>\r\n        </region-attributes>\r\n    </region>\r\n    ...\r\n</cache>\r\n```","```\r\n    <region name=\"myRegion\" refid=\"REPLICATE\"/>\r\n    ```","```\r\n    <region name=\"myRegion\" refid=\"PARTITION\"/>\r\n    ```","```\r\n    <region name=\"myRegion\" refid=\"LOCAL\"/>\r\n    ```","```\r\nSELECT * from StockRegion s where s.stockStatus='active';\r\n```","```\r\n<cache>\r\n    <region name=\"StockRegion>\r\n        <region-attributes refid=\"REPLICATE\">\r\n            ...\r\n            <cache-listener>\r\n                <class-name>...</class-name>\r\n            </cache-listener>\r\n        ...\r\n        </region-attributes>\r\n    </region>\r\n</cache>\r\n```","```\r\n@Configuration\r\npublic class GemfireConfiguration {\r\n\r\n    @Bean\r\n    Properties gemfireProperties() {\r\n        Properties gemfireProperties = new Properties();\r\n        gemfireProperties.setProperty(\"name\",\"SpringDataGemFireApplication\");\r\n        gemfireProperties.setProperty(\"mcast-port\", \"0\");\r\n        gemfireProperties.setProperty(\"log-level\", \"config\");\r\n        return gemfireProperties;\r\n    }\r\n\r\n    @Bean\r\n    CacheFactoryBean gemfireCache() {\r\n        CacheFactoryBean gemfireCache = new CacheFactoryBean();\r\n        gemfireCache.setClose(true);\r\n        gemfireCache.setProperties(gemfireProperties());\r\n        return gemfireCache;\r\n    }\r\n\r\n    @Bean(name=\"employee\")\r\n    LocalRegionFactoryBean<String, Employee> getEmployee(final GemFireCache cache) {\r\n        LocalRegionFactoryBean<String, Employee> employeeRegion = new LocalRegionFactoryBean();\r\n        employeeRegion.setCache(cache);\r\n        employeeRegion.setName(\"employee\");\r\n        // ...\r\n        return employeeRegion;\r\n    }\r\n}\r\n```","```\r\n@Region(\"employee\")\r\npublic class Employee {\r\n\r\n    @Id\r\n    public String name;\r\n    public double salary;\r\n\r\n    @PersistenceConstructor\r\n    public Employee(String name, double salary) {\r\n        this.name = name;\r\n        this.salary = salary;\r\n    }\r\n\r\n    // standard getters/setters\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGemfireRepositories(basePackages\r\n  = \"com.baeldung.spring.data.gemfire.repository\")\r\npublic class GemfireConfiguration {\r\n\r\n    @Autowired\r\n    EmployeeRepository employeeRepository;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Repository\r\npublic interface EmployeeRepository extends   \r\n  CrudRepository<Employee, String> {\r\n\r\n    Employee findByName(String name);\r\n\r\n    Iterable<Employee> findBySalaryGreaterThan(double salary);\r\n\r\n    Iterable<Employee> findBySalaryLessThan(double salary);\r\n\r\n    Iterable<Employee> \r\n      findBySalaryGreaterThanAndSalaryLessThan(double salary1, double salary2);\r\n}\r\n```","```\r\n@Component\r\npublic class FunctionImpl {\r\n\r\n    @GemfireFunction\r\n    public void greeting(String message){\r\n        // some logic\r\n    }\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGemfireFunctions\r\npublic class GemfireConfiguration {\r\n    // ...\r\n}\r\n```","```\r\n@OnRegion(region=\"employee\")\r\npublic interface FunctionExecution {\r\n\r\n    @FunctionId(\"greeting\")\r\n    public void execute(String message);\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Configuration\r\n@EnableGemfireFunctionExecutions(\r\n  basePackages = \"com.baeldung.spring.data.gemfire.function\")\r\npublic class GemfireConfiguration {\r\n    // ...\r\n}\r\n```"]