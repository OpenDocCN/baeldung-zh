["```\r\npublic class SyntheticFieldDemo {\r\n    class NestedClass {}\r\n}\r\n```","```\r\npublic void givenSyntheticField_whenIsSynthetic_thenTrue() {\r\n    Field[] fields = SyntheticFieldDemo.NestedClass.class\r\n      .getDeclaredFields();\r\n    assertEquals(\"This class should contain only one field\",\r\n      1, fields.length);\r\n\r\n    for (Field f : fields) {\r\n        System.out.println(\"Field: \" + f.getName() + \", isSynthetic: \" +\r\n          f.isSynthetic());\r\n        assertTrue(\"All the fields of this class should be synthetic\", \r\n          f.isSynthetic());\r\n    }\r\n}\r\n```","```\r\npublic class SyntheticMethodDemo {\r\n    class NestedClass {\r\n        private String nestedField;\r\n    }\r\n\r\n    public String getNestedField() {\r\n        return new NestedClass().nestedField;\r\n    }\r\n\r\n    public void setNestedField(String nestedField) {\r\n        new NestedClass().nestedField = nestedField;\r\n    }\r\n}\r\n```","```\r\npublic void givenSyntheticMethod_whenIsSynthetic_thenTrue() {\r\n    Method[] methods = SyntheticMethodDemo.NestedClass.class\r\n      .getDeclaredMethods();\r\n    assertEquals(\"This class should contain only two methods\",\r\n      2, methods.length);\r\n\r\n    for (Method m : methods) {\r\n        System.out.println(\"Method: \" + m.getName() + \", isSynthetic: \" +\r\n          m.isSynthetic());\r\n        assertTrue(\"All the methods of this class should be synthetic\",\r\n          m.isSynthetic());\r\n    }\r\n}\r\n```","```\r\npublic class BridgeMethodDemo implements Comparator<Integer> {\r\n    @Override\r\n    public int compare(Integer o1, Integer o2) {\r\n        return 0;\r\n    }\r\n}\r\n```","```\r\npublic int compare(Object o1, Object o2) {\r\n    return compare((Integer) o1, (Integer) o2);\r\n}\r\n```","```\r\npublic void givenBridgeMethod_whenIsBridge_thenTrue() {\r\n    int syntheticMethods = 0;\r\n    Method[] methods = BridgeMethodDemo.class.getDeclaredMethods();\r\n    for (Method m : methods) {\r\n        System.out.println(\"Method: \" + m.getName() + \", isSynthetic: \" +\r\n          m.isSynthetic() + \", isBridge: \" + m.isBridge());\r\n        if (m.isSynthetic()) {\r\n            syntheticMethods++;\r\n            assertTrue(\"The synthetic method in this class should also be a bridge method\",\r\n              m.isBridge());\r\n        }\r\n    }\r\n    assertEquals(\"There should be exactly 1 synthetic bridge method in this class\",\r\n      1, syntheticMethods);\r\n}\r\n```","```\r\npublic class SyntheticConstructorDemo {\r\n    private NestedClass nestedClass = new NestedClass();\r\n\r\n    class NestedClass {\r\n        private NestedClass() {}\r\n    }\r\n}\r\n```","```\r\npublic void givenSyntheticConstructor_whenIsSynthetic_thenTrue() {\r\n    int syntheticConstructors = 0;\r\n    Constructor<?>[] constructors = SyntheticConstructorDemo.NestedClass\r\n      .class.getDeclaredConstructors();\r\n    assertEquals(\"This class should contain only two constructors\",\r\n      2, constructors.length);\r\n\r\n    for (Constructor<?> c : constructors) {\r\n        System.out.println(\"Constructor: \" + c.getName() +\r\n          \", isSynthetic: \" + c.isSynthetic());\r\n\r\n        if (c.isSynthetic()) {\r\n            syntheticConstructors++;\r\n        }\r\n    }\r\n\r\n    assertEquals(1, syntheticConstructors);\r\n}\r\n```"]