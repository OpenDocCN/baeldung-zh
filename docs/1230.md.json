["```\r\n@Entity\r\npublic class Address {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    @OneToOne\r\n    private Person person;\r\n\r\n    private String state;\r\n\r\n    private String city;\r\n\r\n    private String street;\r\n\r\n    private String zipCode;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Person {\r\n\r\n    @Id\r\n    private Long id;\r\n\r\n    private String firstName;\r\n\r\n    private String lastName;\r\n\r\n    @OneToOne(mappedBy = \"person\")\r\n    private Address address;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nINSERT INTO person(id,first_name,last_name) VALUES (1,'John','Doe');\r\nINSERT INTO address(id,person_id,state,city,street,zip_code) \r\n  VALUES (1,1,'CA', 'Los Angeles', 'Standford Ave', '90001');\r\n```","```\r\nDELETE FROM address;\r\nDELETE FROM person;\r\n```","```\r\n@DataJpaTest\r\n@RunWith(SpringRunner.class)\r\n@Sql(scripts = \"/projection-insert-data.sql\")\r\n@Sql(scripts = \"/projection-clean-up-data.sql\", executionPhase = AFTER_TEST_METHOD)\r\npublic class JpaProjectionIntegrationTest {\r\n    // injected fields and test methods\r\n}\r\n```","```\r\npublic interface AddressView {\r\n    String getZipCode();\r\n}\r\n```","```\r\npublic interface AddressRepository extends Repository<Address, Long> {\r\n    List<AddressView> getAddressByState(String state);\r\n}\r\n```","```\r\n@Autowired\r\nprivate AddressRepository addressRepository;\r\n\r\n@Test\r\npublic void whenUsingClosedProjections_thenViewWithRequiredPropertiesIsReturned() {\r\n    AddressView addressView = addressRepository.getAddressByState(\"CA\").get(0);\r\n    assertThat(addressView.getZipCode()).isEqualTo(\"90001\");\r\n    // ...\r\n}\r\n```","```\r\npublic interface PersonView {\r\n    String getFirstName();\r\n\r\n    String getLastName();\r\n}\r\n```","```\r\npublic interface AddressView {\r\n    // ...\r\n    PersonView getPerson();\r\n}\r\n```","```\r\n// ...\r\nPersonView personView = addressView.getPerson();\r\nassertThat(personView.getFirstName()).isEqualTo(\"John\");\r\nassertThat(personView.getLastName()).isEqualTo(\"Doe\");\r\n```","```\r\npublic interface PersonView {\r\n    // ...\r\n\r\n    @Value(\"#{target.firstName + ' ' + target.lastName}\")\r\n    String getFullName();\r\n}\r\n```","```\r\npublic interface PersonRepository extends Repository<Person, Long> {\r\n    PersonView findByLastName(String lastName);\r\n}\r\n```","```\r\n@Autowired\r\nprivate PersonRepository personRepository;\r\n\r\n@Test \r\npublic void whenUsingOpenProjections_thenViewWithRequiredPropertiesIsReturned() {\r\n    PersonView personView = personRepository.findByLastName(\"Doe\");\r\n\r\n    assertThat(personView.getFullName()).isEqualTo(\"John Doe\");\r\n}\r\n```","```\r\npublic class PersonDto {\r\n    private String firstName;\r\n    private String lastName;\r\n\r\n    public PersonDto(String firstName, String lastName) {\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    // getters, equals and hashCode\r\n}\r\n```","```\r\npublic interface PersonRepository extends Repository<Person, Long> {\r\n    // ...\r\n\r\n    PersonDto findByFirstName(String firstName);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingClassBasedProjections_thenDtoWithRequiredPropertiesIsReturned() {\r\n    PersonDto personDto = personRepository.findByFirstName(\"John\");\r\n\r\n    assertThat(personDto.getFirstName()).isEqualTo(\"John\");\r\n    assertThat(personDto.getLastName()).isEqualTo(\"Doe\");\r\n}\r\n```","```\r\npublic interface PersonRepository extends Repository<Person, Long> {\r\n    // ...\r\n\r\n    <T> T findByLastName(String lastName, Class<T> type);\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingDynamicProjections_thenObjectWithRequiredPropertiesIsReturned() {\r\n    Person person = personRepository.findByLastName(\"Doe\", Person.class);\r\n    PersonView personView = personRepository.findByLastName(\"Doe\", PersonView.class);\r\n    PersonDto personDto = personRepository.findByLastName(\"Doe\", PersonDto.class);\r\n\r\n    assertThat(person.getFirstName()).isEqualTo(\"John\");\r\n    assertThat(personView.getFirstName()).isEqualTo(\"John\");\r\n    assertThat(personDto.getFirstName()).isEqualTo(\"John\");\r\n}\r\n```"]