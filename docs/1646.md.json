["```\r\n{\r\n  \"name\" : \"John Doe\",\r\n  \"ssn\" : \"123-45-9999\",\r\n  \"account\" : \"9999888877770000\"\r\n}\r\n```","```\r\n{\r\n  \"name\" : \"John Doe\",\r\n  \"ssn\" : \"****\",\r\n  \"account\" : \"9999888877770000\"\r\n}\r\n```","```\r\nspring:\r\n  cloud:\r\n    gateway:\r\n      routes:\r\n      - id: rewrite_with_scrub\r\n        uri: ${rewrite.backend.uri:http://example.com}\r\n        predicates:\r\n        - Path=/v1/customer/**\r\n        filters:\r\n        - RewritePath=/v1/customer/(?<segment>.*),/api/$\\{segment}\r\n        - ScrubResponse=ssn,*** \r\n```","```\r\n@Override\r\npublic GatewayFilter apply(Config config) {\r\n    return modifyResponseBodyFilterFactory\r\n       .apply(c -> c.setRewriteFunction(JsonNode.class, JsonNode.class, new Scrubber(config)));\r\n} \r\n```","```\r\npublic static class Scrubber implements RewriteFunction<JsonNode,JsonNode> {\r\n    // ... fields and constructor omitted\r\n    @Override\r\n    public Publisher<JsonNode> apply(ServerWebExchange t, JsonNode u) {\r\n        return Mono.just(scrubRecursively(u));\r\n    }\r\n    // ... scrub implementation omitted\r\n} \r\n```","```\r\npublic static class Scrubber implements RewriteFunction<JsonNode,JsonNode> {\r\n    // ... fields and constructor omitted\r\n    private JsonNode scrubRecursively(JsonNode u) {\r\n        if ( !u.isContainerNode()) {\r\n            return u;\r\n        }\r\n\r\n        if (u.isObject()) {\r\n            ObjectNode node = (ObjectNode)u;\r\n            node.fields().forEachRemaining((f) -> {\r\n                if ( fields.matcher(f.getKey()).matches() && f.getValue().isTextual()) {\r\n                    f.setValue(TextNode.valueOf(replacement));\r\n                }\r\n                else {\r\n                    f.setValue(scrubRecursively(f.getValue()));\r\n                }\r\n            });\r\n        }\r\n        else if (u.isArray()) {\r\n            ArrayNode array = (ArrayNode)u;\r\n            for ( int i = 0 ; i < array.size() ; i++ ) {\r\n                array.set(i, scrubRecursively(array.get(i)));\r\n            }\r\n        }\r\n\r\n        return u;\r\n    }\r\n} \r\n```","```\r\n@Bean\r\npublic HttpServer mockServer() throws IOException {\r\n    HttpServer server = HttpServer.create(new InetSocketAddress(0),0);\r\n    server.createContext(\"/customer\", (exchange) -> {\r\n        exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\r\n\r\n        byte[] response = JSON_WITH_FIELDS_TO_SCRUB.getBytes(\"UTF-8\");\r\n        exchange.sendResponseHeaders(200,response.length);\r\n        exchange.getResponseBody().write(response);\r\n    });\r\n\r\n    server.setExecutor(null);\r\n    server.start();\r\n    return server;\r\n} \r\n```","```\r\n@Bean\r\npublic RouteLocator scrubSsnRoute(\r\n  RouteLocatorBuilder builder, \r\n  ScrubResponseGatewayFilterFactory scrubFilterFactory, \r\n  SetPathGatewayFilterFactory pathFilterFactory, \r\n  HttpServer server) {\r\n    int mockServerPort = server.getAddress().getPort();\r\n    ScrubResponseGatewayFilterFactory.Config config = new ScrubResponseGatewayFilterFactory.Config();\r\n    config.setFields(\"ssn\");\r\n    config.setReplacement(\"*\");\r\n\r\n    SetPathGatewayFilterFactory.Config pathConfig = new SetPathGatewayFilterFactory.Config();\r\n    pathConfig.setTemplate(\"/customer\");\r\n\r\n    return builder.routes()\r\n      .route(\"scrub_ssn\",\r\n         r -> r.path(\"/scrub\")\r\n           .filters( \r\n              f -> f\r\n                .filter(scrubFilterFactory.apply(config))\r\n                .filter(pathFilterFactory.apply(pathConfig)))\r\n           .uri(\"http://localhost:\" + mockServerPort ))\r\n      .build();\r\n} \r\n```","```\r\n@Test\r\npublic void givenRequestToScrubRoute_thenResponseScrubbed() {\r\n    client.get()\r\n      .uri(\"/scrub\")\r\n      .accept(MediaType.APPLICATION_JSON)\r\n      .exchange()\r\n      .expectStatus()\r\n        .is2xxSuccessful()\r\n      .expectHeader()\r\n        .contentType(MediaType.APPLICATION_JSON)\r\n      .expectBody()\r\n        .json(JSON_WITH_SCRUBBED_FIELDS);\r\n} \r\n```"]