["```\r\n<dependency>\r\n    <groupId>com.faunadb</groupId>\r\n    <artifactId>faunadb-java</artifactId>\r\n    <version>4.2.0</version>\r\n    <scope>compile</scope>\r\n</dependency>\r\n```","```\r\nfauna.region=us\r\nfauna.secret=<Secret>\r\n```","```\r\n@Configuration\r\nclass FaunaConfiguration {\r\n    @Value(\"https://db.${fauna.region}.fauna.com/\")\r\n    private String faunaUrl;\r\n\r\n    @Value(\"${fauna.secret}\")\r\n    private String faunaSecret;\r\n\r\n    @Bean\r\n    FaunaClient getFaunaClient() throws MalformedURLException {\r\n        return FaunaClient.builder()\r\n          .withEndpoint(faunaUrl)\r\n          .withSecret(faunaSecret)\r\n          .build();\r\n    }\r\n}\r\n```","```\r\n{\r\n  \"username\": \"baeldung\",\r\n  \"password\": \"Pa55word\",\r\n  \"name\": \"Baeldung\"\r\n}\r\n```","```\r\nMap(\r\n  Paginate(Match(Index(\"users_by_username\"), \"baeldung\")),\r\n  Lambda(\"user\", Get(Var(\"user\")))\r\n)\r\n```","```\r\npublic class FaunaUserDetailsService implements UserDetailsService {\r\n    private final FaunaClient faunaClient;\r\n\r\n    // standard constructors\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        try {\r\n            Value user = faunaClient.query(Map(\r\n              Paginate(Match(Index(\"users_by_username\"), Value(username))),\r\n              Lambda(Value(\"user\"), Get(Var(\"user\")))))\r\n              .get();\r\n\r\n            Value userData = user.at(\"data\").at(0).orNull();\r\n            if (userData == null) {\r\n                throw new UsernameNotFoundException(\"User not found\");\r\n            }\r\n\r\n            return User.withDefaultPasswordEncoder()\r\n              .username(userData.at(\"data\", \"username\").to(String.class).orNull())\r\n              .password(userData.at(\"data\", \"password\").to(String.class).orNull())\r\n              .roles(\"USER\")\r\n              .build();\r\n        } catch (ExecutionException | InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Autowired\r\n    private FaunaClient faunaClient;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.csrf().disable();\r\n        http.authorizeRequests()\r\n          .antMatchers(\"/**\").permitAll()\r\n          .and().httpBasic();\r\n    }\r\n\r\n    @Bean\r\n    @Override\r\n    public UserDetailsService userDetailsService() {\r\n        return new FaunaUserDetailsService(faunaClient);\r\n    }\r\n}\r\n```","```\r\nCreateIndex({\r\n  name: \"posts_sort_by_created_desc\",\r\n  source: Collection(\"posts\"),\r\n  terms: [ { field: [\"ref\"] } ],\r\n  values: [\r\n    { field: [\"data\", \"created\"], reverse: true },\r\n    { field: [\"ref\"] }\r\n  ]\r\n})\r\n```","```\r\nCreate(\r\n  Collection(\"posts\"),\r\n  {\r\n    data: {\r\n      title: \"My First Post\",\r\n      contents: \"This is my first post\",\r\n      created: Now(),\r\n      authorRef: Select(\"ref\", Get(Match(Index(\"users_by_username\"), \"baeldung\")))\r\n    }\r\n  }\r\n)\r\n```","```\r\npublic record Author(String username, String name) {}\r\n\r\npublic record Post(String id, String title, String content, Author author, Instant created, Long version) {}\r\n```","```\r\n@Component\r\npublic class PostsService {\r\n    @Autowired\r\n    private FaunaClient faunaClient;\r\n} \r\n```","```\r\nList<Post> getAllPosts() throws Exception {\r\n    var postsResult = faunaClient.query(Map(\r\n      Paginate(\r\n        Join(\r\n          Documents(Collection(\"posts\")),\r\n          Index(\"posts_sort_by_created_desc\")\r\n        )\r\n      ),\r\n      Lambda(\r\n        Arr(Value(\"extra\"), Value(\"ref\")),\r\n        Obj(\r\n          \"post\", Get(Var(\"ref\")),\r\n          \"author\", Get(Select(Arr(Value(\"data\"), Value(\"authorRef\")), Get(Var(\"ref\"))))\r\n        )\r\n      )\r\n    )).get();\r\n\r\n    var posts = postsResult.at(\"data\").asCollectionOf(Value.class).get();\r\n    return posts.stream().map(this::parsePost).collect(Collectors.toList());\r\n}\r\n```","```\r\nprivate Post parsePost(Value entry) {\r\n    var author = entry.at(\"author\");\r\n    var post = entry.at(\"post\");\r\n\r\n    return new Post(\r\n      post.at(\"ref\").to(Value.RefV.class).get().getId(),\r\n      post.at(\"data\", \"title\").to(String.class).get(),\r\n      post.at(\"data\", \"contents\").to(String.class).get(),\r\n      new Author(\r\n        author.at(\"data\", \"username\").to(String.class).get(),\r\n        author.at(\"data\", \"name\").to(String.class).get()\r\n      ),\r\n      post.at(\"data\", \"created\").to(Instant.class).get(),\r\n      post.at(\"ts\").to(Long.class).get()\r\n    );\r\n}\r\n```","```\r\nList<Post> getAuthorPosts(String author) throws Exception {\r\n    var postsResult = faunaClient.query(Map(\r\n      Paginate(\r\n        Join(\r\n          Match(Index(\"posts_by_author\"), Select(Value(\"ref\"), Get(Match(Index(\"users_by_username\"), Value(author))))),\r\n          Index(\"posts_sort_by_created_desc\")\r\n        )\r\n      ),\r\n      Lambda(\r\n        Arr(Value(\"extra\"), Value(\"ref\")),\r\n        Obj(\r\n          \"post\", Get(Var(\"ref\")),\r\n          \"author\", Get(Select(Arr(Value(\"data\"), Value(\"authorRef\")), Get(Var(\"ref\"))))\r\n        )\r\n      )\r\n    )).get();\r\n\r\n    var posts = postsResult.at(\"data\").asCollectionOf(Value.class).get();\r\n    return posts.stream().map(this::parsePost).collect(Collectors.toList());\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/posts\")\r\npublic class PostsController {\r\n    @Autowired\r\n    private PostsService postsService;\r\n\r\n    @GetMapping\r\n    public List<Post> listPosts(@RequestParam(value = \"author\", required = false) String author) \r\n        throws Exception {\r\n        return author == null \r\n          ? postsService.getAllPosts() \r\n          : postsService.getAuthorPosts(author);\r\n    }\r\n}\r\n```","```\r\n[\r\n    {\r\n        \"author\": {\r\n            \"name\": \"Baeldung\",\r\n            \"username\": \"baeldung\"\r\n        },\r\n        \"content\": \"Introduction to FaunaDB with Spring\",\r\n        \"created\": \"2022-01-25T07:36:24.563534Z\",\r\n        \"id\": \"321742264960286786\",\r\n        \"title\": \"Introduction to FaunaDB with Spring\",\r\n        \"version\": 1643096184600000\r\n    },\r\n    {\r\n        \"author\": {\r\n            \"name\": \"Baeldung\",\r\n            \"username\": \"baeldung\"\r\n        },\r\n        \"content\": \"This is my second post\",\r\n        \"created\": \"2022-01-25T07:34:38.303614Z\",\r\n        \"id\": \"321742153548038210\",\r\n        \"title\": \"My Second Post\",\r\n        \"version\": 1643096078350000\r\n    },\r\n    {\r\n        \"author\": {\r\n            \"name\": \"Baeldung\",\r\n            \"username\": \"baeldung\"\r\n        },\r\n        \"content\": \"This is my first post\",\r\n        \"created\": \"2022-01-25T07:34:29.873590Z\",\r\n        \"id\": \"321742144715882562\",\r\n        \"title\": \"My First Post\",\r\n        \"version\": 1643096069920000\r\n    }\r\n]\r\n```","```\r\npublic void createPost(String author, String title, String contents) throws Exception {\r\n    faunaClient.query(\r\n      Create(Collection(\"posts\"),\r\n        Obj(\r\n          \"data\", Obj(\r\n            \"title\", Value(title),\r\n            \"contents\", Value(contents),\r\n            \"created\", Now(),\r\n            \"authorRef\", Select(Value(\"ref\"), Get(Match(Index(\"users_by_username\"), Value(author))))\r\n          )\r\n        )\r\n      )\r\n    ).get();\r\n}\r\n```","```\r\npublic record UpdatedPost(String title, String content) {}\r\n```","```\r\n@PostMapping\r\n@ResponseStatus(HttpStatus.NO_CONTENT)\r\n@PreAuthorize(\"isAuthenticated()\")\r\npublic void createPost(@RequestBody UpdatedPost post) throws Exception {\r\n    String name = SecurityContextHolder.getContext().getAuthentication().getName();\r\n    postsService.createPost(name, post.title(), post.content());\r\n}\r\n```","```\r\npublic void updatePost(String id, String title, String contents) throws Exception {\r\n    faunaClient.query(\r\n      Update(Ref(Collection(\"posts\"), id),\r\n        Obj(\r\n          \"data\", Obj(\r\n            \"title\", Value(title),\r\n            \"contents\", Value(contents)\r\n          )\r\n        )\r\n      )\r\n    ).get();\r\n}\r\n```","```\r\n@PutMapping(\"/{id}\")\r\n@ResponseStatus(HttpStatus.NO_CONTENT)\r\n@PreAuthorize(\"isAuthenticated()\")\r\npublic void updatePost(@PathVariable(\"id\") String id, @RequestBody UpdatedPost post)\r\n    throws Exception {\r\n    postsService.updatePost(id, post.title(), post.content());\r\n}\r\n```","```\r\n@ExceptionHandler(NotFoundException.class)\r\n@ResponseStatus(HttpStatus.NOT_FOUND)\r\npublic void postNotFound() {}\r\n```","```\r\nPost getPost(String id, Long before) throws Exception {\r\n    var query = Get(Ref(Collection(\"posts\"), id));\r\n    if (before != null) {\r\n        query = At(Value(before - 1), query);\r\n    }\r\n\r\n    var postResult = faunaClient.query(\r\n      Let(\r\n        \"post\", query\r\n      ).in(\r\n        Obj(\r\n          \"post\", Var(\"post\"),\r\n          \"author\", Get(Select(Arr(Value(\"data\"), Value(\"authorRef\")), Var(\"post\")))\r\n        )\r\n      )\r\n    ).get();\r\n\r\n  return parsePost(postResult);\r\n} \r\n```","```\r\n@GetMapping(\"/{id}\")\r\npublic Post getPost(@PathVariable(\"id\") String id, @RequestParam(value = \"before\", required = false) Long before)\r\n    throws Exception {\r\n    return postsService.getPost(id, before);\r\n}\r\n```"]