["```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.containers</groupId>\r\n    <artifactId>jersey-container-servlet</artifactId>\r\n    <version>2.26</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.media</groupId>\r\n    <artifactId>jersey-media-json-jackson</artifactId>\r\n    <version>2.26</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.glassfish.jersey.ext</groupId>\r\n    <artifactId>jersey-spring4</artifactId>\r\n    <version>2.26</version>\r\n</dependency>\r\n```","```\r\n@Order(Ordered.HIGHEST_PRECEDENCE)\r\npublic class ApplicationInitializer \r\n  implements WebApplicationInitializer {\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletContext) \r\n      throws ServletException {\r\n\r\n        AnnotationConfigWebApplicationContext context \r\n          = new AnnotationConfigWebApplicationContext();\r\n\r\n        servletContext.addListener(new ContextLoaderListener(context));\r\n        servletContext.setInitParameter(\r\n          \"contextConfigLocation\", \"com.baeldung.server\");\r\n    }\r\n}\r\n```","```\r\n@XmlRootElement\r\npublic class Employee {\r\n    private int id;\r\n    private String firstName;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Path(\"/employees\")\r\npublic class EmployeeResource {\r\n\r\n    @Autowired\r\n    private EmployeeRepository employeeRepository;\r\n\r\n    @GET\r\n    @Path(\"/{id}\")\r\n    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    public Employee getEmployee(@PathParam(\"id\") int id) {\r\n        return employeeRepository.getEmployee(id);\r\n    }\r\n\r\n    @POST\r\n    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\r\n    public Response addEmployee(\r\n      Employee employee, @Context UriInfo uriInfo) {\r\n\r\n        employeeRepository.addEmployee(new Employee(employee.getId(), \r\n          employee.getFirstName(), employee.getLastName(), \r\n          employee.getAge()));\r\n\r\n        return Response.status(Response.Status.CREATED.getStatusCode())\r\n          .header(\r\n            \"Location\", \r\n            String.format(\"%s/%s\",uriInfo.getAbsolutePath().toString(), \r\n            employee.getId())).build();\r\n    }\r\n}\r\n```","```\r\n@Provider\r\npublic class NotFoundExceptionHandler \r\n  implements ExceptionMapper<EmployeeNotFound> {\r\n\r\n    public Response toResponse(EmployeeNotFound ex) {\r\n        return Response.status(Response.Status.NOT_FOUND).build();\r\n    }\r\n}\r\n```","```\r\n@ApplicationPath(\"/resources\")\r\npublic class RestConfig extends Application {\r\n    public Set<Class<?>> getClasses() {\r\n        return new HashSet<Class<?>>(\r\n          Arrays.asList(\r\n            EmployeeResource.class, \r\n            NotFoundExceptionHandler.class, \r\n            AlreadyExistsExceptionHandler.class));\r\n    }\r\n}\r\n```","```\r\npublic class JerseyApiLiveTest {\r\n\r\n    private static final String SERVICE_URL\r\n      = \"http://localhost:8082/spring-jersey/resources/employees\";\r\n\r\n    @Test\r\n    public void givenGetAllEmployees_whenCorrectRequest_thenResponseCodeSuccess() \r\n      throws ClientProtocolException, IOException {\r\n\r\n        HttpUriRequest request = new HttpGet(SERVICE_URL);\r\n\r\n        HttpResponse httpResponse = HttpClientBuilder\r\n          .create()\r\n          .build()\r\n          .execute(request);\r\n\r\n        assertEquals(httpResponse\r\n          .getStatusLine()\r\n          .getStatusCode(), HttpStatus.SC_OK);\r\n    }\r\n}\r\n```"]