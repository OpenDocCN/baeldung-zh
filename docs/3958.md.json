["```\r\npublic static <T> Predicate<T> distinctByKey(\r\n    Function<? super T, ?> keyExtractor) {\r\n\r\n    Map<Object, Boolean> seen = new ConcurrentHashMap<>(); \r\n    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null; \r\n}\r\n```","```\r\npublic class Person { \r\n    private int age; \r\n    private String name; \r\n    private String email; \r\n    // standard getters and setters \r\n}\r\n```","```\r\nList<Person> personListFiltered = personList.stream() \r\n  .filter(distinctByKey(p -> p.getName())) \r\n  .collect(Collectors.toList());\r\n```","```\r\nList<Person> personListFiltered = ListIterate\r\n  .distinct(personList, HashingStrategies.fromFunction(Person::getName));\r\n```","```\r\nList<Person> personListFiltered = ListIterate.distinct(\r\n  personList, HashingStrategies.fromIntFunction(Person::getAge));\r\n```","```\r\n<dependency> \r\n    <groupId>org.eclipse.collections</groupId> \r\n    <artifactId>eclipse-collections</artifactId> \r\n    <version>8.2.0</version> \r\n</dependency>\r\n```","```\r\nList<Person> personListFiltered = List.ofAll(personList)\r\n  .distinctBy(Person::getName)\r\n  .toJavaList();\r\n```","```\r\n<dependency> \r\n    <groupId>io.vavr</groupId> \r\n    <artifactId>vavr</artifactId> \r\n    <version>0.9.0</version>  \r\n</dependency>\r\n```","```\r\nList<Person> personListFiltered = StreamEx.of(personList)\r\n  .distinct(Person::getName)\r\n  .toList();\r\n```","```\r\n<dependency> \r\n    <groupId>one.util</groupId> \r\n    <artifactId>streamex</artifactId> \r\n    <version>0.6.5</version> \r\n</dependency>\r\n```"]