["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.5.0</version>\r\n</parent>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-validation</artifactId>\r\n</dependency>\r\n```","```\r\nserver.address.ip=192.168.0.1\r\nserver.resources_path.imgs=/root/imgs\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"server\")\r\npublic class ServerConfig {\r\n\r\n    private Address address;\r\n    private Map<String, String> resourcesPath;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Address {\r\n\r\n    private String ip;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@EnableConfigurationProperties(value = ServerConfig.class)\r\n@TestPropertySource(\"classpath:server-config-test.properties\")\r\npublic class BindingPropertiesToUserDefinedPOJOUnitTest {\r\n\r\n    @Autowired\r\n    private ServerConfig serverConfig;\r\n\r\n    @Test\r\n    void givenUserDefinedPOJO_whenBindingPropertiesFile_thenAllFieldsAreSet() {\r\n        assertEquals(\"192.168.0.1\", serverConfig.getAddress().getIp());\r\n\r\n        Map<String, String> expectedResourcesPath = new HashMap<>();\r\n        expectedResourcesPath.put(\"imgs\", \"/root/imgs\");\r\n        assertEquals(expectedResourcesPath, serverConfig.getResourcesPath());\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ServerConfigFactory {\r\n\r\n    @Bean(name = \"default_bean\")\r\n    @ConfigurationProperties(prefix = \"server.default\")\r\n    public ServerConfig getDefaultConfigs() {\r\n        return new ServerConfig();\r\n    }\r\n}\r\n```","```\r\nserver.default.address.ip=192.168.0.2\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@EnableConfigurationProperties(value = ServerConfig.class)\r\n@ContextConfiguration(classes = ServerConfigFactory.class)\r\n@TestPropertySource(\"classpath:server-config-test.properties\")\r\npublic class BindingPropertiesToBeanMethodsUnitTest {\r\n\r\n    @Autowired\r\n    @Qualifier(\"default_bean\")\r\n    private ServerConfig serverConfig;\r\n\r\n    @Test\r\n    void givenBeanAnnotatedMethod_whenBindingProperties_thenAllFieldsAreSet() {\r\n        assertEquals(\"192.168.0.2\", serverConfig.getAddress().getIp());\r\n\r\n        // other assertions...\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"validate\")\r\n@Validated\r\npublic class MailServer {\r\n\r\n    @NotNull\r\n    @NotEmpty\r\n    private Map<String, @NotBlank String> propertiesMap;\r\n\r\n    @Valid\r\n    private MailConfig mailConfig = new MailConfig();\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class MailConfig {\r\n\r\n    @NotBlank\r\n    @Email\r\n    private String address;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nvalidate.propertiesMap.first=prop1\r\nvalidate.propertiesMap.second=prop2\r\n[[email protected]](/web/20220827110142/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@EnableConfigurationProperties(value = MailServer.class)\r\n@TestPropertySource(\"classpath:property-validation-test.properties\")\r\npublic class PropertyValidationUnitTest {\r\n\r\n    @Autowired\r\n    private MailServer mailServer;\r\n\r\n    private static Validator propertyValidator;\r\n\r\n    @BeforeAll\r\n    public static void setup() {\r\n        propertyValidator = Validation.buildDefaultValidatorFactory().getValidator();\r\n    }\r\n\r\n    @Test\r\n    void whenBindingPropertiesToValidatedBeans_thenConstrainsAreChecked() {\r\n        assertEquals(0, propertyValidator.validate(mailServer.getPropertiesMap()).size());\r\n        assertEquals(0, propertyValidator.validate(mailServer.getMailConfig()).size());\r\n    }\r\n}\r\n```","```\r\nvalidate.propertiesMap.second=\r\nvalidate.mail_config.address=user1.test\r\n```","```\r\nProperty: validate.propertiesMap[second]\r\nValue:\r\nReason: must not be blank\r\n\r\nProperty: validate.mailConfig.address\r\nValue: user1.test\r\nReason: must be a well-formed email address\r\n```","```\r\n# data sizes\r\nconvert.upload_speed=500MB\r\nconvert.download_speed=10\r\n\r\n# durations\r\nconvert.backup_day=1d\r\nconvert.backup_hour=8\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"convert\")\r\npublic class PropertyConversion {\r\n\r\n    private DataSize uploadSpeed;\r\n\r\n    @DataSizeUnit(DataUnit.GIGABYTES)\r\n    private DataSize downloadSpeed;\r\n\r\n    private Duration backupDay;\r\n\r\n    @DurationUnit(ChronoUnit.HOURS)\r\n    private Duration backupHour;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@EnableConfigurationProperties(value = PropertyConversion.class)\r\n@ContextConfiguration(classes = CustomCredentialsConverter.class)\r\n@TestPropertySource(\"classpath:spring-conversion-test.properties\")\r\npublic class SpringPropertiesConversionUnitTest {\r\n\r\n    @Autowired\r\n    private PropertyConversion propertyConversion;\r\n\r\n    @Test\r\n    void whenUsingSpringDefaultSizeConversion_thenDataSizeObjectIsSet() {\r\n        assertEquals(DataSize.ofMegabytes(500), propertyConversion.getUploadSpeed());\r\n        assertEquals(DataSize.ofGigabytes(10), propertyConversion.getDownloadSpeed());\r\n    }\r\n\r\n    @Test\r\n    void whenUsingSpringDefaultDurationConversion_thenDurationObjectIsSet() {\r\n        assertEquals(Duration.ofDays(1), propertyConversion.getBackupDay());\r\n        assertEquals(Duration.ofHours(8), propertyConversion.getBackupHour());\r\n    }\r\n}\r\n```","```\r\nconvert.credentials=user,123\r\n```","```\r\npublic class Credentials {\r\n\r\n    private String username;\r\n    private String password;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Component\r\n@ConfigurationPropertiesBinding\r\npublic class CustomCredentialsConverter implements Converter<String, Credentials> {\r\n\r\n    @Override\r\n    public Credentials convert(String source) {\r\n        String[] data = source.split(\",\");\r\n        return new Credentials(data[0], data[1]);\r\n    }\r\n}\r\n```","```\r\npublic class PropertyConversion {\r\n    private Credentials credentials;\r\n    // ...\r\n}\r\n```","```\r\n// other annotations\r\n@ContextConfiguration(classes=CustomCredentialsConverter.class)\r\npublic class SpringPropertiesConversionUnitTest {\r\n\r\n    //...\r\n\r\n    @Test\r\n    void whenRegisteringCustomCredentialsConverter_thenCredentialsAreParsed() {\r\n        assertEquals(\"user\", propertyConversion.getCredentials().getUsername());\r\n        assertEquals(\"123\", propertyConversion.getCredentials().getPassword());\r\n    }\r\n}\r\n```","```\r\nspring:\r\n  config:\r\n    activate:\r\n      on-profile: test\r\nserver:\r\n  address:\r\n    ip: 192.168.0.4\r\n  resources_path:\r\n    imgs: /etc/test/imgs\r\n---\r\n# other profiles\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(initializers = ConfigDataApplicationContextInitializer.class)\r\n@EnableConfigurationProperties(value = ServerConfig.class)\r\n@ActiveProfiles(\"test\")\r\npublic class BindingYMLPropertiesUnitTest {\r\n\r\n    @Autowired\r\n    private ServerConfig serverConfig;\r\n\r\n    @Test\r\n    void whenBindingYMLConfigFile_thenAllFieldsAreSet() {\r\n        assertEquals(\"192.168.0.4\", serverConfig.getAddress().getIp());\r\n\r\n        // other assertions ...\r\n    }\r\n}\r\n```","```\r\n@TestPropertySource(properties = {\"[[email protected]](/web/20220827110142/https://www.baeldung.com/cdn-cgi/l/email-protection)\"})\r\n```","```\r\nassertEquals(\"[[email protected]](/web/20220827110142/https://www.baeldung.com/cdn-cgi/l/email-protection)\", mailServer.getMailConfig().getAddress());\r\n```"]