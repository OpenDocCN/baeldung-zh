["```\r\n<dependency>\r\n    <groupId>com.netflix.servo</groupId>\r\n    <artifactId>servo-core</artifactId>\r\n    <version>0.12.16</version>\r\n</dependency>\r\n```","```\r\nCounter counter = new BasicCounter(MonitorConfig.builder(\"test\").build());\r\nassertEquals(\"counter should start with 0\", 0, counter.getValue().intValue());\r\n\r\ncounter.increment();\r\n\r\nassertEquals(\"counter should have increased by 1\", 1, counter.getValue().intValue());\r\n\r\ncounter.increment(-1);\r\n\r\nassertEquals(\"counter should have decreased by 1\", 0, counter.getValue().intValue());\r\n```","```\r\nCounter counter = new PeakRateCounter(MonitorConfig.builder(\"test\").build());\r\nassertEquals(\r\n  \"counter should start with 0\", \r\n  0, counter.getValue().intValue());\r\n\r\ncounter.increment();\r\nSECONDS.sleep(1);\r\n\r\ncounter.increment();\r\ncounter.increment();\r\n\r\nassertEquals(\"peak rate should have be 2\", 2, counter.getValue().intValue());\r\n```","```\r\nSystem.setProperty(\"servo.pollers\", \"1000\");\r\nCounter counter = new StepCounter(MonitorConfig.builder(\"test\").build());\r\n\r\nassertEquals(\"counter should start with rate 0.0\", 0.0, counter.getValue());\r\n\r\ncounter.increment();\r\nSECONDS.sleep(1);\r\n\r\nassertEquals(\r\n  \"counter rate should have increased to 1.0\", \r\n  1.0, counter.getValue());\r\n```","```\r\nGauge<Double> gauge = new BasicGauge<>(MonitorConfig.builder(\"test\")\r\n  .build(), () -> 2.32);\r\n\r\nassertEquals(2.32, gauge.getValue(), 0.01);\r\n```","```\r\nMaxGauge gauge = new MaxGauge(MonitorConfig.builder(\"test\").build());\r\nassertEquals(0, gauge.getValue().intValue());\r\n\r\ngauge.update(4);\r\nassertEquals(4, gauge.getCurrentValue(0));\r\n\r\ngauge.update(1);\r\nassertEquals(4, gauge.getCurrentValue(0));\r\n```","```\r\nBasicTimer timer = new BasicTimer(MonitorConfig.builder(\"test\").build(), SECONDS);\r\nStopwatch stopwatch = timer.start();\r\n\r\nSECONDS.sleep(1);\r\ntimer.record(2, SECONDS);\r\nstopwatch.stop();\r\n\r\nassertEquals(\"timer should count 1 second\", 1, timer.getValue().intValue());\r\nassertEquals(\"timer should count 3 seconds in total\", \r\n  3.0, timer.getTotalTime(), 0.01);\r\nassertEquals(\"timer should record 2 updates\", 2, timer.getCount().intValue());\r\nassertEquals(\"timer should have max 2\", 2, timer.getMax(), 0.01);\r\n```","```\r\nSystem.setProperty(\"netflix.servo\", \"1000\");\r\nStatsTimer timer = new StatsTimer(MonitorConfig\r\n  .builder(\"test\")\r\n  .build(), new StatsConfig.Builder()\r\n  .withComputeFrequencyMillis(2000)\r\n  .withPercentiles(new double[] { 99.0, 95.0, 90.0 })\r\n  .withPublishMax(true)\r\n  .withPublishMin(true)\r\n  .withPublishCount(true)\r\n  .withPublishMean(true)\r\n  .withPublishStdDev(true)\r\n  .withPublishVariance(true)\r\n  .build(), SECONDS);\r\nStopwatch stopwatch = timer.start();\r\n\r\nSECONDS.sleep(1);\r\ntimer.record(3, SECONDS);\r\nstopwatch.stop();\r\n\r\nstopwatch = timer.start();\r\ntimer.record(6, SECONDS);\r\nSECONDS.sleep(2);\r\nstopwatch.stop();\r\n\r\nassertEquals(\"timer should count 12 seconds in total\", \r\n  12, timer.getTotalTime());\r\nassertEquals(\"timer should count 12 seconds in total\", \r\n  12, timer.getTotalMeasurement());\r\nassertEquals(\"timer should record 4 updates\", 4, timer.getCount());\r\nassertEquals(\"stats timer value time-cost/update should be 2\", \r\n  3, timer.getValue().intValue());\r\n\r\nfinal Map<String, Number> metricMap = timer.getMonitors().stream()\r\n  .collect(toMap(monitor -> getMonitorTagValue(monitor, \"statistic\"),\r\n    monitor -> (Number) monitor.getValue()));\r\n\r\nassertThat(metricMap.keySet(), containsInAnyOrder(\r\n  \"count\", \"totalTime\", \"max\", \"min\", \"variance\", \"stdDev\", \"avg\", \r\n  \"percentile_99\", \"percentile_95\", \"percentile_90\"));\r\n```","```\r\nBucketTimer timer = new BucketTimer(MonitorConfig\r\n  .builder(\"test\")\r\n  .build(), new BucketConfig.Builder()\r\n  .withBuckets(new long[] { 2L, 5L })\r\n  .withTimeUnit(SECONDS)\r\n  .build(), SECONDS);\r\n\r\ntimer.record(3);\r\ntimer.record(6);\r\n\r\nassertEquals(\r\n  \"timer should count 9 seconds in total\",\r\n  9, timer.getTotalTime().intValue());\r\n\r\nMap<String, Long> metricMap = timer.getMonitors().stream()\r\n  .filter(monitor -> monitor.getConfig().getTags().containsKey(\"servo.bucket\"))\r\n  .collect(toMap(\r\n    m -> getMonitorTagValue(m, \"servo.bucket\"),\r\n    m -> (Long) m.getValue()));\r\n\r\nassertThat(metricMap, allOf(hasEntry(\"bucket=2s\", 0L), hasEntry(\"bucket=5s\", 1L),\r\n  hasEntry(\"bucket=overflow\", 1L)));\r\n```","```\r\nBasicInformational informational = new BasicInformational(\r\n  MonitorConfig.builder(\"test\").build());\r\ninformational.setValue(\"information collected\");\r\n```","```\r\nGauge<Double> gauge = new BasicGauge<>(MonitorConfig.builder(\"test\")\r\n  .build(), () -> 2.32);\r\nDefaultMonitorRegistry.getInstance().register(gauge);\r\n```","```\r\nDynamicCounter.increment(\"monitor-name\", \"tag-key\", \"tag-value\");\r\n```","```\r\nMonitors.registerObject(\"testObject\", this);\r\nassertTrue(Monitors.isObjectRegistered(\"testObject\", this));\r\n```","```\r\n@Monitor(\r\n  name = \"integerCounter\",\r\n  type = DataSourceType.COUNTER,\r\n  description = \"Total number of update operations.\")\r\nprivate AtomicInteger updateCount = new AtomicInteger(0);\r\n\r\n@MonitorTags\r\nprivate TagList tags = new BasicTagList(\r\n  newArrayList(new BasicTag(\"tag-key\", \"tag-value\")));\r\n\r\n@Test\r\npublic void givenAnnotatedMonitor_whenUpdated_thenDataCollected() throws Exception {\r\n    System.setProperty(\"servo.pollers\", \"1000\");\r\n    Monitors.registerObject(\"testObject\", this);\r\n    assertTrue(Monitors.isObjectRegistered(\"testObject\", this));\r\n\r\n    updateCount.incrementAndGet();\r\n    updateCount.incrementAndGet();\r\n    SECONDS.sleep(1);\r\n\r\n    List<List<Metric>> metrics = observer.getObservations();\r\n\r\n    assertThat(metrics, hasSize(greaterThanOrEqualTo(1)));\r\n\r\n    Iterator<List<Metric>> metricIterator = metrics.iterator();\r\n    metricIterator.next(); //skip first empty observation\r\n\r\n    while (metricIterator.hasNext()) {\r\n        assertThat(metricIterator.next(), hasItem(\r\n          hasProperty(\"config\", \r\n          hasProperty(\"name\", is(\"integerCounter\")))));\r\n    }\r\n}\r\n```","```\r\nMemoryMetricObserver observer = new MemoryMetricObserver();\r\nPollRunnable pollRunnable = new PollRunnable(new JvmMetricPoller(),\r\n  new BasicMetricFilter(true), observer);\r\nPollScheduler.getInstance().start();\r\nPollScheduler.getInstance().addPoller(pollRunnable, 1, SECONDS);\r\n\r\nSECONDS.sleep(1);\r\nPollScheduler.getInstance().stop();\r\nList<List<Metric>> metrics = observer.getObservations();\r\n\r\nassertThat(metrics, hasSize(greaterThanOrEqualTo(1)));\r\nList<String> keys = extractKeys(metrics);\r\n\r\nassertThat(keys, hasItems(\"loadedClassCount\", \"initUsage\", \"maxUsage\", \"threadCount\"));\r\n```","```\r\npublic class CustomObserver extends BaseMetricObserver {\r\n\r\n    //...\r\n\r\n    @Override\r\n    public void updateImpl(List<Metric> metrics) {\r\n        //TODO\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n      <groupId>com.netflix.servo</groupId>\r\n      <artifactId>servo-atlas</artifactId>\r\n      <version>${netflix.servo.ver}</version>\r\n</dependency>\r\n\r\n<properties>\r\n    <netflix.servo.ver>0.12.17</netflix.servo.ver>\r\n</properties>\r\n```","```\r\n$ curl -LO 'https://github.com/Netflix/atlas/releases/download/v1.4.4/atlas-1.4.4-standalone.jar'\r\n$ curl -LO 'https://raw.githubusercontent.com/Netflix/atlas/v1.4.x/conf/memory.conf'\r\n$ java -jar atlas-1.4.4-standalone.jar memory.conf\r\n```","```\r\nSystem.setProperty(\"servo.pollers\", \"1000\");\r\nSystem.setProperty(\"servo.atlas.batchSize\", \"1\");\r\nSystem.setProperty(\"servo.atlas.uri\", \"http://localhost:7101/api/v1/publish\");\r\nAtlasMetricObserver observer = new AtlasMetricObserver(\r\n  new BasicAtlasConfig(), BasicTagList.of(\"servo\", \"counter\"));\r\n\r\nPollRunnable task = new PollRunnable(\r\n  new MonitorRegistryMetricPoller(), new BasicMetricFilter(true), observer);\r\n```","```\r\nCounter counter = new BasicCounter(MonitorConfig\r\n  .builder(\"test\")\r\n  .withTag(\"servo\", \"counter\")\r\n  .build());\r\nDefaultMonitorRegistry\r\n  .getInstance()\r\n  .register(counter);\r\nassertThat(atlasValuesOfTag(\"servo\"), not(containsString(\"counter\")));\r\n\r\nfor (int i = 0; i < 3; i++) {\r\n    counter.increment(RandomUtils.nextInt(10));\r\n    SECONDS.sleep(1);\r\n    counter.increment(-1 * RandomUtils.nextInt(10));\r\n    SECONDS.sleep(1);\r\n}\r\n\r\nassertThat(atlasValuesOfTag(\"servo\"), containsString(\"counter\"));\r\n```"]