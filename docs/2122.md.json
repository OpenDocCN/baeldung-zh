["```\r\npublic int maxSubArray(int[] nums) {\r\n\r\n    int n = nums.length;\r\n    int maximumSubArraySum = Integer.MIN_VALUE;\r\n    int start = 0;\r\n    int end = 0;\r\n\r\n    for (int left = 0; left < n; left++) {\r\n\r\n        int runningWindowSum = 0;\r\n\r\n        for (int right = left; right < n; right++) {\r\n            runningWindowSum += nums[right];\r\n\r\n            if (runningWindowSum > maximumSubArraySum) {\r\n                maximumSubArraySum = runningWindowSum;\r\n                start = left;\r\n                end = right;\r\n            }\r\n        }\r\n    }\r\n    logger.info(\"Found Maximum Subarray between {} and {}\", start, end);\r\n    return maximumSubArraySum;\r\n}\r\n```","```\r\nmaximumSubArraySum = max_so_far + arr[n-1]\r\n```","```\r\nmaximumSubArraySum[n-2] = max_so_far[n-3] + arr[n-2]\r\n```","```\r\nmaximumSubArraySum[i] = maximumSubArraySum[i-1] + arr[i]\r\n```","```\r\nmaximumSubArraySum[i] = Max(arr[i], maximumSubArraySum[i-1] + arr[i])\r\n```","```\r\npublic int maxSubArraySum(int[] arr) {\r\n\r\n    int size = arr.length;\r\n    int start = 0;\r\n    int end = 0;\r\n\r\n    int maxSoFar = arr[0], maxEndingHere = arr[0];\r\n\r\n    for (int i = 1; i < size; i++) {\r\n        if (arr[i] > maxEndingHere + arr[i]) {\r\n            start = i;\r\n            maxEndingHere = arr[i];\r\n        } else\r\n            maxEndingHere = maxEndingHere + arr[i];\r\n\r\n        if (maxSoFar < maxEndingHere) {\r\n            maxSoFar = maxEndingHere;\r\n            end = i;\r\n        }\r\n    }\r\n    logger.info(\"Found Maximum Subarray between {} and {}\", Math.min(start, end), end);\r\n    return maxSoFar;\r\n}\r\n```"]