["```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>java-hamcrest</artifactId>\r\n    <version>2.0.0.0</version>\r\n</dependency>\r\n```","```\r\nvalue - error <= element <= value + error\r\n```","```\r\n1 - 0.5 <= actual <= 1 + 0.5\r\n    0.5 <= actual <= 1.5\r\n```","```\r\n@Test\r\npublic void givenADouble_whenCloseTo_thenCorrect() {\r\n    double actual = 1.3;\r\n    double operand = 1;\r\n    double error = 0.5;\r\n\r\n    assertThat(actual, closeTo(operand, error));\r\n}\r\n```","```\r\n@Test\r\npublic void givenADouble_whenNotCloseTo_thenCorrect() {\r\n    double actual = 1.6;\r\n    double operand = 1;\r\n    double error = 0.5;\r\n\r\n    assertThat(actual, not(closeTo(operand, error)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenABigDecimal_whenCloseTo_thenCorrect() {\r\n    BigDecimal actual = new BigDecimal(\"1.0003\");\r\n    BigDecimal operand = new BigDecimal(\"1\");\r\n    BigDecimal error = new BigDecimal(\"0.0005\");\r\n\r\n    assertThat(actual, is(closeTo(operand, error)));\r\n}\r\n\r\n@Test\r\npublic void givenABigDecimal_whenNotCloseTo_thenCorrect() {\r\n    BigDecimal actual = new BigDecimal(\"1.0006\");\r\n    BigDecimal operand = new BigDecimal(\"1\");\r\n    BigDecimal error = new BigDecimal(\"0.0005\");\r\n\r\n    assertThat(actual, is(not(closeTo(operand, error))));\r\n}\r\n```","```\r\n@Test\r\npublic void given5_whenComparesEqualTo5_thenCorrect() {\r\n    Integer five = 5;\r\n\r\n    assertThat(five, comparesEqualTo(five));\r\n}\r\n\r\n@Test\r\npublic void given5_whenNotComparesEqualTo7_thenCorrect() {\r\n    Integer seven = 7;\r\n    Integer five = 5;\r\n\r\n    assertThat(five, not(comparesEqualTo(seven)));\r\n}\r\n\r\n@Test\r\npublic void given7_whenGreaterThan5_thenCorrect() {\r\n    Integer seven = 7;\r\n    Integer five = 5;\r\n\r\n    assertThat(seven, is(greaterThan(five)));\r\n}\r\n\r\n@Test\r\npublic void given7_whenGreaterThanOrEqualTo5_thenCorrect() {\r\n    Integer seven = 7;\r\n    Integer five = 5;\r\n\r\n    assertThat(seven, is(greaterThanOrEqualTo(five)));\r\n}\r\n\r\n@Test\r\npublic void given5_whenGreaterThanOrEqualTo5_thenCorrect() {\r\n    Integer five = 5;\r\n\r\n    assertThat(five, is(greaterThanOrEqualTo(five)));\r\n}\r\n\r\n@Test\r\npublic void given3_whenLessThan5_thenCorrect() {\r\n   Integer three = 3;\r\n   Integer five = 5;\r\n\r\n   assertThat(three, is(lessThan(five)));\r\n}\r\n\r\n@Test\r\npublic void given3_whenLessThanOrEqualTo5_thenCorrect() {\r\n   Integer three = 3;\r\n   Integer five = 5;\r\n\r\n   assertThat(three, is(lessThanOrEqualTo(five)));\r\n}\r\n\r\n@Test\r\npublic void given5_whenLessThanOrEqualTo5_thenCorrect() {\r\n   Integer five = 5;\r\n\r\n   assertThat(five, is(lessThanOrEqualTo(five)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenBenjamin_whenGreaterThanAmanda_thenCorrect() {\r\n    String amanda = \"Amanda\";\r\n    String benjamin = \"Benjamin\";\r\n\r\n    assertThat(benjamin, is(greaterThan(amanda)));\r\n}\r\n\r\n@Test\r\npublic void givenAmanda_whenLessThanBenajmin_thenCorrect() {\r\n    String amanda = \"Amanda\";\r\n    String benjamin = \"Benjamin\";\r\n\r\n    assertThat(amanda, is(lessThan(benjamin)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenToday_whenGreaterThanYesterday_thenCorrect() {\r\n    LocalDate today = LocalDate.now();\r\n    LocalDate yesterday = today.minusDays(1);\r\n\r\n    assertThat(today, is(greaterThan(yesterday)));\r\n}\r\n\r\n@Test\r\npublic void givenToday_whenLessThanTomorrow_thenCorrect() {\r\n    LocalDate today = LocalDate.now();\r\n    LocalDate tomorrow = today.plusDays(1);\r\n\r\n    assertThat(today, is(lessThan(tomorrow)));\r\n}\r\n```","```\r\npublic class Person {\r\n    String name;\r\n    int age;\r\n\r\n    // standard constructor, getters and setters\r\n}\r\n```","```\r\npublic class Person implements Comparable<Person> {\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public int compareTo(Person o) {\r\n        if (this.age == o.getAge()) return 0;\r\n        if (this.age > o.getAge()) return 1;\r\n        else return -1;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenAmanda_whenOlderThanBenjamin_thenCorrect() {\r\n    Person amanda = new Person(\"Amanda\", 20);\r\n    Person benjamin = new Person(\"Benjamin\", 18);\r\n\r\n    assertThat(amanda, is(greaterThan(benjamin)));\r\n}\r\n\r\n@Test\r\npublic void \r\ngivenBenjamin_whenYoungerThanAmanda_thenCorrect() {\r\n    Person amanda = new Person(\"Amanda\", 20);\r\n    Person benjamin = new Person(\"Benjamin\", 18);\r\n\r\n    assertThat(benjamin, is(lessThan(amanda)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNaN_whenIsNotANumber_thenCorrect() {\r\n    double zero = 0d;\r\n\r\n    assertThat(zero / zero, is(notANumber()));\r\n}\r\n```"]