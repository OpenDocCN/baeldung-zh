["```\r\ntype Book {\r\n    title: String!\r\n    author: Author\r\n}\r\n\r\ntype Author {\r\n    name: String!\r\n    surname: String!\r\n}\r\n\r\ntype Query {\r\n    allBooks: [Book]\r\n}\r\n\r\nschema {\r\n    query: Query\r\n}\r\n```","```\r\n{\r\n    \"allBooks\" {\r\n        \"title\"\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"data\": {\r\n        \"allBooks\": [\r\n            {\r\n                \"title\": \"Title 1\"\r\n            },\r\n            {\r\n                \"title\": \"Title 2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n```","```\r\npublic class GraphQLQuery implements GraphQLQueryResolver {\r\n\r\n    private BookRepository repository;\r\n\r\n    public GraphQLQuery(BookRepository repository) {\r\n        this.repository = repository;\r\n    }\r\n\r\n    public List<Book> allBooks() {\r\n        return repository.getAllBooks();\r\n    }\r\n\r\n}\r\n```","```\r\n@WebServlet(urlPatterns = \"/graphql\")\r\npublic class GraphQLEndpoint extends HttpServlet {\r\n\r\n    private SimpleGraphQLHttpServlet graphQLServlet;\r\n\r\n    @Override\r\n    protected void service(HttpServletRequest req, HttpServletResponse resp) \r\n      throws ServletException, IOException {\r\n        graphQLServlet.service(req, resp);\r\n    }\r\n\r\n    @Override\r\n    public void init() {\r\n        GraphQLSchema schema = SchemaParser.newParser()\r\n          .resolvers(new GraphQLQuery(new BookRepository()))\r\n          .file(\"schema.graphqls\")\r\n          .build()\r\n          .makeExecutableSchema();\r\n        graphQLServlet = SimpleGraphQLHttpServlet\r\n          .newBuilder(schema)\r\n          .build();\r\n    }\r\n}\r\n```","```\r\nmvn jetty:run\r\n```","```\r\nhttp://localhost:8080/graphql?query={allBooks{title}}\r\n```","```\r\npublic static HttpResponse callGraphQLService(String url, String query) \r\n  throws URISyntaxException, IOException {\r\n    HttpClient client = HttpClientBuilder.create().build();\r\n    HttpGet request = new HttpGet(url);\r\n    URI uri = new URIBuilder(request.getURI())\r\n      .addParameter(\"query\", query)\r\n      .build();\r\n    request.setURI(uri);\r\n    return client.execute(request);\r\n}\r\n```","```\r\nHttpResponse httpResponse = callGraphQLService(serviceUrl, \"{allBooks{title}}\");\r\nString actualResponse = IOUtils.toString(httpResponse.getEntity().getContent(), StandardCharsets.UTF_8.name());\r\nResponse parsedResponse = objectMapper.readValue(actualResponse, Response.class);\r\nassertThat(parsedResponse.getData().getAllBooks()).hasSize(2);\r\n```","```\r\nString requestQuery = \"{allBooks{title}}\";\r\nString responseJson = \"{\\\"data\\\":{\\\"allBooks\\\":[{\\\"title\\\":\\\"Title 1\\\"},{\\\"title\\\":\\\"Title 2\\\"}]}}\";\r\n\r\nnew MockServerClient(SERVER_ADDRESS, serverPort)\r\n    .when(\r\n      request()\r\n        .withPath(PATH)\r\n        .withQueryStringParameter(\"query\", requestQuery),\r\n      exactly(1)\r\n    )\r\n    .respond(\r\n      response()\r\n        .withStatusCode(HttpStatusCode.OK_200.code())\r\n        .withBody(responseJson)\r\n    );\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.americanexpress.nodes</groupId>\r\n    <artifactId>nodes</artifactId>\r\n    <version>0.5.0</version>>\r\n</dependency>\r\n```","```\r\n<repository>\r\n    <id>jitpack.io</id>\r\n    <url>https://jitpack.io</url>\r\n</repository>\r\n```","```\r\npublic static GraphQLResponseEntity<Data> callGraphQLService(String url, String query)\r\n  throws IOException {\r\n    GraphQLTemplate graphQLTemplate = new GraphQLTemplate();\r\n\r\n    GraphQLRequestEntity requestEntity = GraphQLRequestEntity.Builder()\r\n      .url(StringUtils.join(url, \"?query=\", query))\r\n      .request(Data.class)\r\n      .build();\r\n\r\n    return graphQLTemplate.query(requestEntity, Data.class);\r\n}\r\n```","```\r\nGraphQLResponseEntity<Data> responseEntity = callGraphQLService(serviceUrl, \"{allBooks{title}}\");\r\nassertThat(responseEntity.getResponse().getAllBooks()).hasSize(2);\r\n```","```\r\n<dependency>\r\n    <groupId>com.graphql-java-generator</groupId>\r\n    <artifactId>graphql-java-runtime</artifactId>\r\n    <version>1.18</version>\r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>com.graphql-java-generator</groupId>\r\n    <artifactId>graphql-maven-plugin</artifactId>\r\n    <version>1.18</version>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <goal>generateClientCode</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n    <configuration>\r\n        <packageName>com.baeldung.graphql.generated</packageName>\r\n        <copyRuntimeSources>false</copyRuntimeSources>\r\n        <generateDeprecatedRequestResponse>false</generateDeprecatedRequestResponse>\r\n        <separateUtilityClasses>true</separateUtilityClasses>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\npublic List<Book> allBooks(String queryResponseDef, Object... paramsAndValues)\r\n  throws GraphQLRequestExecutionException, GraphQLRequestPreparationException {\r\n    logger.debug(\"Executing query 'allBooks': {} \", queryResponseDef);\r\n    ObjectResponse objectResponse = getAllBooksResponseBuilder()\r\n      .withQueryResponseDef(queryResponseDef).build();\r\n    return allBooksWithBindValues(objectResponse, \r\n      graphqlClientUtils.generatesBindVariableValuesMap(paramsAndValues));\r\n}\r\n```"]