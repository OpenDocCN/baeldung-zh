["```\r\n@Test\r\npublic void givenRedirectsAreDisabled_whenConsumingUrlWhichRedirects_thenNotRedirected() \r\n  throws ClientProtocolException, IOException {\r\n    DefaultHttpClient instance = new DefaultHttpClient();\r\n\r\n    HttpParams params = new BasicHttpParams();\r\n    params.setParameter(ClientPNames.HANDLE_REDIRECTS, false);\r\n    // HttpClientParams.setRedirecting(params, false); // alternative\r\n\r\n    HttpGet httpGet = new HttpGet(\"http://t.co/I5YYd9tddw\");\r\n    httpGet.setParams(params);\r\n    CloseableHttpResponse response = instance.execute(httpGet);\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(301));\r\n}\r\n```","```\r\nHttpClientParams.setRedirecting(params, false);\r\n```","```\r\n@Test\r\npublic void givenRedirectsAreDisabled_whenConsumingUrlWhichRedirects_thenNotRedirected() \r\n  throws ClientProtocolException, IOException {\r\n    HttpClient instance = HttpClientBuilder.create().disableRedirectHandling().build();\r\n    HttpResponse response = instance.execute(new HttpGet(\"http://t.co/I5YYd9tddw\"));\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(301));\r\n}\r\n```"]