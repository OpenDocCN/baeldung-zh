["```\r\n@Test\r\nvoid givenString_whenUsingAsInteger_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    Integer expectedInteger = 123\r\n    Integer integerNum = stringNum as Integer\r\n\r\n    assertEquals(integerNum, expectedInteger)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingAsInt_thenConvertToInt() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = stringNum as int\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingToInteger_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = stringNum.toInteger()\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingParseInt_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = Integer.parseInt(stringNum)\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingIntValue_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = new Integer(stringNum).intValue()\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingNewInteger_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = new Integer(stringNum)\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingValueOf_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    int intNum = Integer.valueOf(stringNum)\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingDecimalFormat_thenConvertToInteger() {\r\n    def stringNum = \"123\"\r\n    int expectedInt = 123\r\n    DecimalFormat decimalFormat = new DecimalFormat(\"#\")\r\n    int intNum = decimalFormat.parse(stringNum).intValue()\r\n\r\n    assertEquals(intNum, expectedInt)\r\n}\r\n```","```\r\n@Test(expected = NumberFormatException.class)\r\nvoid givenInvalidString_whenUsingAs_thenThrowNumberFormatException() {\r\n    def invalidString = \"123a\"\r\n    invalidString as Integer\r\n}\r\n\r\n@Test(expected = NullPointerException.class)\r\nvoid givenNullString_whenUsingToInteger_thenThrowNullPointerException() {\r\n    def invalidString = null\r\n    invalidString.toInteger()\r\n}\r\n```","```\r\n@Test\r\nvoid givenString_whenUsingIsInteger_thenCheckIfCorrectValue() {\r\n    def invalidString = \"123a\"\r\n    def validString = \"123\"\r\n    def invalidNum = invalidString?.isInteger() ? invalidString as Integer : false\r\n    def correctNum = validString?.isInteger() ? validString as Integer : false\r\n\r\n    assertEquals(false, invalidNum)\r\n    assertEquals(123, correctNum)\r\n}\r\n```"]