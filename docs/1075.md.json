["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.1.2.RELEASE</version>\r\n</dependency>\r\n\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-test</artifactId>\r\n    <version>5.1.2.RELEASE</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class Employee {\r\n    private Integer id;\r\n    private String name;\r\n\r\n    // standard getters/setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenNonPublicField_thenReflectionTestUtilsSetField() {\r\n    Employee employee = new Employee();\r\n    ReflectionTestUtils.setField(employee, \"id\", 1);\r\n\r\n    assertTrue(employee.getId().equals(1));\r\n}\r\n```","```\r\nprivate String employeeToString(){\r\n    return \"id: \" + getId() + \"; name: \" + getName();\r\n}\r\n```","```\r\n@Test\r\npublic void whenNonPublicMethod_thenReflectionTestUtilsInvokeMethod() {\r\n    Employee employee = new Employee();\r\n    ReflectionTestUtils.setField(employee, \"id\", 1);\r\n    employee.setName(\"Smith, John\");\r\n\r\n    assertTrue(ReflectionTestUtils.invokeMethod(employee, \"employeeToString\")\r\n      .equals(\"id: 1; name: Smith, John\"));\r\n}\r\n```","```\r\n@Component\r\npublic class EmployeeService {\r\n\r\n    @Autowired\r\n    private HRService hrService;\r\n\r\n    public String findEmployeeStatus(Integer employeeId) {\r\n        return \"Employee \" + employeeId + \" status: \" + hrService.getEmployeeStatus(employeeId);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class HRService {\r\n\r\n    public String getEmployeeStatus(Integer employeeId) {\r\n        return \"Inactive\";\r\n    }\r\n}\r\n```","```\r\nHRService hrService = mock(HRService.class);\r\nwhen(hrService.getEmployeeStatus(employee.getId())).thenReturn(\"Active\");\r\n```","```\r\nEmployeeService employeeService = new EmployeeService();\r\nReflectionTestUtils.setField(employeeService, \"hrService\", hrService);\r\n```","```\r\n@Test\r\npublic void whenInjectingMockOfDependency_thenReflectionTestUtilsSetField() {\r\n    Employee employee = new Employee();\r\n    ReflectionTestUtils.setField(employee, \"id\", 1);\r\n    employee.setName(\"Smith, John\");\r\n\r\n    HRService hrService = mock(HRService.class);\r\n    when(hrService.getEmployeeStatus(employee.getId())).thenReturn(\"Active\");\r\n    EmployeeService employeeService = new EmployeeService();\r\n\r\n    // Inject mock into the private field\r\n    ReflectionTestUtils.setField(employeeService, \"hrService\", hrService);  \r\n\r\n    assertEquals(\r\n      \"Employee \" + employee.getId() + \" status: Active\", \r\n      employeeService.findEmployeeStatus(employee.getId()));\r\n}\r\n```"]