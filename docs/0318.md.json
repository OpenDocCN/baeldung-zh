["```\r\nclass Vertex {\r\n    String label;\r\n    Vertex(String label) {\r\n        this.label = label;\r\n    }\r\n\r\n    // equals and hashCode\r\n}\r\n```","```\r\nclass Graph {\r\n    private Map<Vertex, List<Vertex>> adjVertices;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\nvoid addVertex(String label) {\r\n    adjVertices.putIfAbsent(new Vertex(label), new ArrayList<>());\r\n}\r\n\r\nvoid removeVertex(String label) {\r\n    Vertex v = new Vertex(label);\r\n    adjVertices.values().stream().forEach(e -> e.remove(v));\r\n    adjVertices.remove(new Vertex(label));\r\n}\r\n```","```\r\nvoid addEdge(String label1, String label2) {\r\n    Vertex v1 = new Vertex(label1);\r\n    Vertex v2 = new Vertex(label2);\r\n    adjVertices.get(v1).add(v2);\r\n    adjVertices.get(v2).add(v1);\r\n}\r\n```","```\r\nvoid removeEdge(String label1, String label2) {\r\n    Vertex v1 = new Vertex(label1);\r\n    Vertex v2 = new Vertex(label2);\r\n    List<Vertex> eV1 = adjVertices.get(v1);\r\n    List<Vertex> eV2 = adjVertices.get(v2);\r\n    if (eV1 != null)\r\n        eV1.remove(v2);\r\n    if (eV2 != null)\r\n        eV2.remove(v1);\r\n}\r\n```","```\r\nGraph createGraph() {\r\n    Graph graph = new Graph();\r\n    graph.addVertex(\"Bob\");\r\n    graph.addVertex(\"Alice\");\r\n    graph.addVertex(\"Mark\");\r\n    graph.addVertex(\"Rob\");\r\n    graph.addVertex(\"Maria\");\r\n    graph.addEdge(\"Bob\", \"Alice\");\r\n    graph.addEdge(\"Bob\", \"Rob\");\r\n    graph.addEdge(\"Alice\", \"Mark\");\r\n    graph.addEdge(\"Rob\", \"Mark\");\r\n    graph.addEdge(\"Alice\", \"Maria\");\r\n    graph.addEdge(\"Rob\", \"Maria\");\r\n    return graph;\r\n}\r\n```","```\r\nList<Vertex> getAdjVertices(String label) {\r\n    return adjVertices.get(new Vertex(label));\r\n}\r\n```","```\r\nSet<String> depthFirstTraversal(Graph graph, String root) {\r\n    Set<String> visited = new LinkedHashSet<String>();\r\n    Stack<String> stack = new Stack<String>();\r\n    stack.push(root);\r\n    while (!stack.isEmpty()) {\r\n        String vertex = stack.pop();\r\n        if (!visited.contains(vertex)) {\r\n            visited.add(vertex);\r\n            for (Vertex v : graph.getAdjVertices(vertex)) {              \r\n                stack.push(v.label);\r\n            }\r\n        }\r\n    }\r\n    return visited;\r\n}\r\n```","```\r\nassertEquals(\"[Bob, Rob, Maria, Alice, Mark]\", depthFirstTraversal(graph, \"Bob\").toString());\r\n```","```\r\nSet<String> breadthFirstTraversal(Graph graph, String root) {\r\n    Set<String> visited = new LinkedHashSet<String>();\r\n    Queue<String> queue = new LinkedList<String>();\r\n    queue.add(root);\r\n    visited.add(root);\r\n    while (!queue.isEmpty()) {\r\n        String vertex = queue.poll();\r\n        for (Vertex v : graph.getAdjVertices(vertex)) {\r\n            if (!visited.contains(v.label)) {\r\n                visited.add(v.label);\r\n                queue.add(v.label);\r\n            }\r\n        }\r\n    }\r\n    return visited;\r\n}\r\n```","```\r\nassertEquals(\r\n  \"[Bob, Alice, Rob, Mark, Maria]\", breadthFirstTraversal(graph, \"Bob\").toString());\r\n```"]