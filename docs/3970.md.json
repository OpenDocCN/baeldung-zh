["```\r\nConnection connection = DriverManager.getConnection(url);\r\n```","```\r\nassertEquals(0, new BigDecimal(0).intValue()); // instance member\r\nassertEquals(2147483647, Integer.MAX_VALUE); // static member \r\n```","```\r\npublic class ListOfThree<E> extends AbstractList<E> {\r\n\r\n    @Override\r\n    public E get(int index) {\r\n        //custom implementation\r\n    }\r\n\r\n    @Override\r\n    public int size() {\r\n        //custom implementation\r\n    }\r\n\r\n}\r\n```","```\r\nfor (Map.Entry<String, String> entry : mapObject.entrySet()) { }\r\n```","```\r\nassertEquals(\"alex\", \"ALEX\".toLowerCase());\r\n```","```\r\nassertEquals(1, Integer.parseInt(\"1\"));\r\n```","```\r\npublic class Student {\r\n\r\n    private int age;\r\n\r\n    public void setAge(int age) {\r\n        if (age < 0 || age > 150) {\r\n            throw new IllegalArgumentException();\r\n        }\r\n\r\n        this.age = age;\r\n    }\r\n}\r\n```","```\r\n public class Student {\r\n\r\n    private StudentGrade grade; //new data representation\r\n\r\n    public void setGrade(int grade) {        \r\n        this.grade = new StudentGrade(grade);\r\n    }\r\n\r\n    public int getGrade() {\r\n        return this.grade.getGrade().intValue();\r\n    }\r\n}\r\n```","```\r\npublic static final String SLASH = \"/\";\r\n```"]