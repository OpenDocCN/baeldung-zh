["```\r\n@Target({ METHOD, TYPE })\r\n@Retention(RUNTIME)\r\npublic @interface SampleAnnotation {\r\n    String name();\r\n}\r\n\r\n@SampleAnnotation(name = \"annotatedClass\")\r\npublic class SampleAnnotatedClass {\r\n\r\n    @SampleAnnotation(name = \"annotatedMethod\")\r\n    public void annotatedMethod() {\r\n        //Do something\r\n    }\r\n\r\n    public void notAnnotatedMethod() {\r\n        //Do something\r\n    }\r\n} \r\n```","```\r\nClass<?> clazz = ClassLoader.getSystemClassLoader()\r\n  .loadClass(\"com.baeldung.annotation.scanner.SampleAnnotatedClass\");\r\nSampleAnnotation classAnnotation = clazz.getAnnotation(SampleAnnotation.class);\r\nAssert.assertEquals(\"SampleAnnotatedClass\", classAnnotation.name());\r\nMethod[] methods = clazz.getMethods();\r\nList<String> annotatedMethods = new ArrayList<>();\r\nfor (Method method : methods) {\r\n    SampleAnnotation annotation = method.getAnnotation(SampleAnnotation.class);\r\n    if (annotation != null) {\r\n        annotatedMethods.add(annotation.name());\r\n    }\r\n}\r\nAssert.assertEquals(1, annotatedMethods.size());\r\nAssert.assertEquals(\"annotatedMethod\", annotatedMethods.get(0));\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context</artifactId>\r\n    <version>5.3.22</version>\r\n</dependency>\r\n```","```\r\nClassPathScanningCandidateComponentProvider provider =\r\n  new ClassPathScanningCandidateComponentProvider(false);\r\nprovider.addIncludeFilter(new AnnotationTypeFilter(SampleAnnotation.class));\r\n\r\nSet<BeanDefinition> beanDefs = provider\r\n  .findCandidateComponents(\"com.baeldung.annotation.scanner\");\r\nList<String> annotatedBeans = new ArrayList<>();\r\nfor (BeanDefinition bd : beanDefs) {\r\n    if (bd instanceof AnnotatedBeanDefinition) {\r\n        Map<String, Object> annotAttributeMap = ((AnnotatedBeanDefinition) bd)\r\n          .getMetadata()\r\n          .getAnnotationAttributes(SampleAnnotation.class.getCanonicalName());\r\n        annotatedBeans.add(annotAttributeMap.get(\"name\").toString());\r\n    }\r\n}\r\n\r\nAssert.assertEquals(1, annotatedBeans.size());\r\nAssert.assertEquals(\"SampleAnnotatedClass\", annotatedBeans.get(0));\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>5.3.22</version>\r\n</dependency>\r\n```","```\r\nClass<?> userClass = ClassUtils.getUserClass(SampleAnnotatedClass.class);\r\n\r\nList<String> annotatedMethods = Arrays.stream(userClass.getMethods())\r\n  .filter(method -> AnnotationUtils\r\n  .getAnnotation(method, SampleAnnotation.class) != null)\r\n  .map(method -> method.getAnnotation(SampleAnnotation.class)\r\n  .name())\r\n  .collect(Collectors.toList());\r\n\r\nAssert.assertEquals(1, annotatedMethods.size());\r\nAssert.assertEquals(\"annotatedMethod\", annotatedMethods.get(0));\r\n```","```\r\n<dependency>\r\n    <groupId>org.reflections</groupId>\r\n    <artifactId>reflections</artifactId>\r\n    <version>0.10.2</version>\r\n</dependency>\r\n```","```\r\nReflections reflections = new Reflections(\"com.baeldung.annotation.scanner\");\r\n\r\nSet<Method> methods = reflections\r\n  .getMethodsAnnotatedWith(SampleAnnotation.class);\r\nList<String> annotatedMethods = methods.stream()\r\n  .map(method -> method.getAnnotation(SampleAnnotation.class)\r\n  .name())\r\n  .collect(Collectors.toList());\r\n\r\nAssert.assertEquals(1, annotatedMethods.size());\r\nAssert.assertEquals(\"annotatedMethod\", annotatedMethods.get(0));\r\n\r\nSet<Class<?>> types = reflections\r\n  .getTypesAnnotatedWith(SampleAnnotation.class);\r\nList<String> annotatedClasses = types.stream()\r\n  .map(clazz -> clazz.getAnnotation(SampleAnnotation.class)\r\n  .name())\r\n  .collect(Collectors.toList());\r\n\r\nAssert.assertEquals(1, annotatedClasses.size());\r\nAssert.assertEquals(\"SampleAnnotatedClass\", annotatedClasses.get(0));\r\n```","```\r\n<plugin>\r\n    <groupId>org.jboss.jandex</groupId>\r\n    <artifactId>jandex-maven-plugin</artifactId>\r\n    <version>1.2.3</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>compile</phase>\r\n            <id>make-index</id>\r\n            <goals>\r\n                <goal>jandex</goal>\r\n            </goals>\r\n            <configuration>\r\n                <fileSets>\r\n                    <fileSet>\r\n                        <directory>${project.build.outputDirectory}</directory>\r\n                    </fileSet>\r\n                </fileSets>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n<dependency>\r\n    <groupId>org.jboss</groupId>\r\n    <artifactId>jandex</artifactId>\r\n    <version>2.4.3.Final</version>\r\n</dependency>\r\n```","```\r\nIndexReader reader = new IndexReader(appFile.getInputStream());\r\nIndex jandexFile = reader.read();\r\nList<AnnotationInstance> appAnnotationList = jandexFile\r\n  .getAnnotations(DotName\r\n  .createSimple(\"com.baeldung.annotation.scanner.SampleAnnotation\"));\r\n\r\nList<String> annotatedMethods = new ArrayList<>();\r\nList<String> annotatedClasses = new ArrayList<>();\r\nfor (AnnotationInstance annotationInstance : appAnnotationList) {\r\n    if (annotationInstance.target().kind() == AnnotationTarget.Kind.METHOD) {\r\n        annotatedMethods.add(annotationInstance.value(\"name\")\r\n          .value()\r\n          .toString());\r\n    }\r\n    if (annotationInstance.target().kind() == AnnotationTarget.Kind.CLASS) {\r\n        annotatedClasses.add(annotationInstance.value(\"name\")\r\n          .value()\r\n          .toString());\r\n    }\r\n}\r\n\r\nAssert.assertEquals(1, annotatedMethods.size()); \r\nAssert.assertEquals(\"annotatedMethod\", annotatedMethods.get(0));\r\nAssert.assertEquals(1, annotatedClasses.size());\r\nAssert.assertEquals(\"SampleAnnotatedClass\", annotatedClasses.get(0));\r\n```"]