["```\r\ndouble emptyString = Double.parseDouble(\"\");\r\n```","```\r\nException in thread \"main\" java.lang.NumberFormatException: empty String\r\n\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1842)\r\n\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\r\n\tat java.lang.Double.parseDouble(Double.java:538)\r\n\t...\r\n```","```\r\ndouble nullString = Double.parseDouble(null);\r\n```","```\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1838)\r\n\tat sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110)\r\n\tat java.lang.Double.parseDouble(Double.java:538)\r\n\t...\r\n```","```\r\nprivate static double parseStringToDouble(String value) {\r\n    return value == null || value.isEmpty() ? Double.NaN : Double.parseDouble(value);\r\n}\r\n```","```\r\nprivate static double parseStringToDouble(String value, double defaultValue) {\r\n    return value == null || value.isEmpty() ? defaultValue : Double.parseDouble(value);\r\n}\r\n```","```\r\nassertThat(parseStringToDouble(\"1\", 2.0d)).isEqualTo(1.0d);\r\nassertThat(parseStringToDouble(null, 1.0d)).isEqualTo(1.0d);\r\nassertThat(parseStringToDouble(\"\", 1.0d)).isEqualTo(1.0d);\r\n```","```\r\nprivate static Optional parseStringToOptionalDouble(String value) {\r\n    return value == null || value.isEmpty() ? Optional.empty() : Optional.of(Double.valueOf(value));\r\n}\r\n```","```\r\nparseStringToOptionalDouble(\"2\").isPresent()\r\n```","```\r\nparseStringToOptionalDouble(\"1.0\").orElse(2.0d) \r\nparseStringToOptionalDouble(null).orElse(2.0d) \r\nparseStringToOptionalDouble(\"\").orElse(2.0d)\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nDoubles.tryParse(MoreObjects.firstNonNull(\"1.0\", \"2.0\"))\r\nDoubles.tryParse(MoreObjects.firstNonNull(null, \"2.0\"))\r\n```","```\r\nDoubles.tryParse(MoreObjects.firstNonNull(\"\", \"2.0\"))\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\nNumberUtils.toDouble(\"1.0\")\r\nNumberUtils.toDouble(\"1.0\", 1.0d) \r\n```","```\r\nassertThat(NumberUtils.toDouble(\"\")).isEqualTo(0.0d);\r\nassertThat(NumberUtils.toDouble(null)).isEqualTo(0.0d);\r\n```","```\r\n<dependency>\r\n    <groupId>io.vavr</groupId>\r\n    <artifactId>vavr</artifactId>\r\n    <version>0.10.2</version>\r\n</dependency>\r\n```","```\r\npublic static double tryStringToDouble(String value, double defaultValue) {\r\n    return Try.of(() -> Double.parseDouble(value)).getOrElse(defaultValue);\r\n} \r\n```","```\r\nassertThat(tryStringToDouble(\"1\", 2.0d)).isEqualTo(1.0d);\r\nassertThat(tryStringToDouble(null, 2.0d)).isEqualTo(2.0d);\r\nassertThat(tryStringToDouble(\"\", 2.0d)).isEqualTo(2.0d);\r\n```"]