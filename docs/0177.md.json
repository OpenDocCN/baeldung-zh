["```\r\npublic void tweetTopQuestionBySite(String site, String twitterAccount){ ... }\r\npublic void tweetTopQuestionBySiteAndTag(String site, String twitterAccount, String tag){ ... }\r\n```","```\r\n@Configuration\r\n@EnableScheduling\r\npublic class ContextConfig {\r\n   //\r\n}\r\n```","```\r\n@Component\r\n@Profile(SpringProfileUtil.DEPLOYED)\r\npublic class TweetStackexchangeScheduler {\r\n\r\n   @Autowired\r\n   private TweetStackexchangeService service;\r\n\r\n   // API\r\n\r\n   @Scheduled(cron = \"0 0 1,5 * * *\")\r\n   public void tweetStackExchangeTopQuestion() throws JsonProcessingException, IOException {\r\n      service.tweetTopQuestionBySiteAndTag(\"StackOverflow\", Tag.clojure.name(), \"BestClojure\", 1);\r\n      String randomSite = StackexchangeUtil.pickOne(\"SuperUser\", \"StackOverflow\");\r\n      service.tweetTopQuestionBySiteAndTag(randomSite, Tag.bash.name(), \"BestBash\", 1);\r\n   }\r\n}\r\n```","```\r\nclass TweetRowMapper implements RowMapper<String> {\r\n   private Map<String, List<Long>> accountToQuestions;\r\n\r\n   public TweetRowMapper(Map<String, List<Long>> accountToQuestions) {\r\n      super();\r\n      this.accountToQuestions = accountToQuestions;\r\n   }\r\n\r\n   public String mapRow(ResultSet rs, int line) throws SQLException {\r\n      String questionIdAsString = rs.getString(\"question_id\");\r\n      long questionId = Long.parseLong(questionIdAsString);\r\n      String account = rs.getString(\"account\");\r\n\r\n      if (accountToQuestions.get(account) == null) {\r\n         accountToQuestions.put(account, Lists.<Long> newArrayList());\r\n      }\r\n      accountToQuestions.get(account).add(questionId);\r\n      return \"\";\r\n   }\r\n}\r\n```","```\r\n@Test\r\npublic void whenQuestionsAreRetrievedFromTheDB_thenNoExceptions() {\r\n   Map<String, List<Long>> accountToQuestionsMap = Maps.newHashMap();\r\n   jdbcTemplate.query\r\n      (\"SELECT * FROM question_tweet;\", new TweetRowMapper(accountToQuestionsMap));\r\n\r\n   for (String accountName : accountToQuestionsMap.keySet()) {\r\n      System.out.println\r\n         (accountName + \"=\" + valuesAsCsv(accountToQuestionsMap.get(accountName)));\r\n   }\r\n}\r\n```","```\r\nSpringAtSO=3652090,1079114,5908466,...\r\n```","```\r\n@Configuration\r\n@PropertySource({ \"classpath:setup.properties\" })\r\npublic class PersistenceJPAConfig {\r\n   //\r\n}\r\n```","```\r\n@Component\r\npublic class StackexchangeSetup implements ApplicationListener<ContextRefreshedEvent> {\r\n    private boolean setupDone;\r\n\r\n    public void onApplicationEvent(ContextRefreshedEvent event) {\r\n        if (!setupDone) {\r\n            recreateAllQuestionsOnAllTwitterAccounts();\r\n            setupDone = true;\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate void recreateAllQuestionsOnTwitterAccount(String twitterAccount) {\r\n   String tweetedQuestions = env.getProperty(twitterAccount.name();\r\n   String[] questionIds = tweetedQuestions.split(\",\");\r\n   recreateQuestions(questionIds, twitterAccount);\r\n}\r\nvoid recreateQuestions(String[] questionIds, String twitterAccount) {\r\n   List<String> stackSitesForTwitterAccount = twitterAccountToStackSites(twitterAccount);\r\n   String site = stackSitesForTwitterAccount.get(0);\r\n   for (String questionId : questionIds) {\r\n      QuestionTweet questionTweet = new QuestionTweet(questionId, twitterAccount, site);\r\n      questionTweetDao.save(questionTweet);\r\n   }\r\n}\r\n```"]