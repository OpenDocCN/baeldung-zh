["```\r\n<dependency>\r\n    <groupId>org.apache.kafka</groupId>\r\n    <artifactId>kafka-clients</artifactId>\r\n    <version>2.5.0</version>\r\n</dependency>\r\n```","```\r\npublic class KafkaProducer {\r\n\r\n    private final Producer<String, String> producer;\r\n\r\n    public KafkaProducer(Producer<String, String> producer) {\r\n        this.producer = producer;\r\n    }\r\n\r\n    public Future<RecordMetadata> send(String key, String value) {\r\n        ProducerRecord record = new ProducerRecord(\"topic_sports_news\", key, value);\r\n        return producer.send(record);\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenKeyValue_whenSend_thenVerifyHistory() {\r\n\r\n    MockProducer mockProducer = new MockProducer<>(true, new StringSerializer(), new StringSerializer());\r\n\r\n    kafkaProducer = new KafkaProducer(mockProducer);\r\n    Future<RecordMetadata> recordMetadataFuture = kafkaProducer.send(\"soccer\", \r\n      \"{\\\"site\\\" : \\\"baeldung\\\"}\");\r\n\r\n    assertTrue(mockProducer.history().size() == 1);\r\n}\r\n```","```\r\nassertTrue(mockProducer.history().get(0).key().equalsIgnoreCase(\"data\"));\r\nassertTrue(recordMetadataFuture.get().partition() == 0);\r\n```","```\r\npublic class EvenOddPartitioner extends DefaultPartitioner {\r\n\r\n    @Override\r\n    public int partition(String topic, Object key, byte[] keyBytes, Object value, \r\n      byte[] valueBytes, Cluster cluster) {\r\n        if (((String)key).length() % 2 == 0) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenKeyValue_whenSendWithPartitioning_thenVerifyPartitionNumber() \r\n  throws ExecutionException, InterruptedException {\r\n    PartitionInfo partitionInfo0 = new PartitionInfo(TOPIC_NAME, 0, null, null, null);\r\n    PartitionInfo partitionInfo1 = new PartitionInfo(TOPIC_NAME, 1, null, null, null);\r\n    List<PartitionInfo> list = new ArrayList<>();\r\n    list.add(partitionInfo0);\r\n    list.add(partitionInfo1);\r\n\r\n    Cluster cluster = new Cluster(\"kafkab\", new ArrayList<Node>(), list, emptySet(), emptySet());\r\n    this.mockProducer = new MockProducer<>(cluster, true, new EvenOddPartitioner(), \r\n      new StringSerializer(), new StringSerializer());\r\n\r\n    kafkaProducer = new KafkaProducer(mockProducer);\r\n    Future<RecordMetadata> recordMetadataFuture = kafkaProducer.send(\"partition\", \r\n      \"{\\\"site\\\" : \\\"baeldung\\\"}\");\r\n\r\n    assertTrue(recordMetadataFuture.get().partition() == 1);\r\n}\r\n```","```\r\n@Test\r\nvoid givenKeyValue_whenSend_thenReturnException() {\r\n    MockProducer<String, String> mockProducer = new MockProducer<>(false, \r\n      new StringSerializer(), new StringSerializer())\r\n\r\n    kafkaProducer = new KafkaProducer(mockProducer);\r\n    Future<RecordMetadata> record = kafkaProducer.send(\"site\", \"{\\\"site\\\" : \\\"baeldung\\\"}\");\r\n    RuntimeException e = new RuntimeException();\r\n    mockProducer.errorNext(e);\r\n\r\n    try {\r\n        record.get();\r\n    } catch (ExecutionException | InterruptedException ex) {\r\n        assertEquals(e, ex.getCause());\r\n    }\r\n    assertTrue(record.isDone());\r\n}\r\n```","```\r\n@Test\r\nvoid givenKeyValue_whenSendWithTxn_thenSendOnlyOnTxnCommit() {\r\n    MockProducer<String, String> mockProducer = new MockProducer<>(true, \r\n      new StringSerializer(), new StringSerializer())\r\n\r\n    kafkaProducer = new KafkaProducer(mockProducer);\r\n    kafkaProducer.initTransaction();\r\n    kafkaProducer.beginTransaction();\r\n    Future<RecordMetadata> record = kafkaProducer.send(\"data\", \"{\\\"site\\\" : \\\"baeldung\\\"}\");\r\n\r\n    assertTrue(mockProducer.history().isEmpty());\r\n    kafkaProducer.commitTransaction();\r\n    assertTrue(mockProducer.history().size() == 1);\r\n}\r\n```"]