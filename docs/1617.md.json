["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency> \r\n    <groupId>org.testcontainers</groupId> \r\n    <artifactId>testcontainers</artifactId> \r\n    <version>1.17.2</version> \r\n    <scope>test</scope> \r\n</dependency>\r\n```","```\r\nspring.redis.host=127.0.0.1\r\nspring.redis.port=6379\r\n```","```\r\n@RedisHash(\"product\")\r\npublic class Product implements Serializable {\r\n    private String id;\r\n    private String name;\r\n    private double price;\r\n\r\n    // Constructor,  getters and setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface ProductRepository extends CrudRepository<Product, String> {\r\n}\r\n```","```\r\n@Service\r\npublic class ProductService {\r\n\r\n    private final ProductRepository productRepository;\r\n\r\n    public ProductService(ProductRepository productRepository) {\r\n        this.productRepository = productRepository;\r\n    }\r\n\r\n    public Product getProduct(String id) {\r\n        return productRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\n@Test\r\nvoid givenProductCreated_whenGettingProductById_thenProductExistsAndHasSameProperties() {\r\n    Product product = new Product(\"1\", \"Test Product\", 10.0);\r\n    productService.createProduct(product);\r\n    Product productFromDb = productService.getProduct(\"1\");\r\n    assertEquals(\"1\", productFromDb.getId());\r\n    assertEquals(\"Test Product\", productFromDb.getName());\r\n    assertEquals(10.0, productFromDb.getPrice());\r\n}\r\n```","```\r\nstatic {\r\n    GenericContainer<?> redis = \r\n      new GenericContainer<>(DockerImageName.parse(\"redis:5.0.3-alpine\")).withExposedPorts(6379);\r\n    redis.start();\r\n}\r\n```","```\r\nstatic {\r\n    GenericContainer<?> redis = \r\n      new GenericContainer<>(DockerImageName.parse(\"redis:5.0.3-alpine\")).withExposedPorts(6379);\r\n    redis.start();\r\n    System.setProperty(\"spring.redis.host\", redis.getHost());\r\n    System.setProperty(\"spring.redis.port\", redis.getMappedPort(6379).toString());\r\n}\r\n```"]