["```\r\npublic class DynamicInvocationHandler implements InvocationHandler {\r\n\r\n    private static Logger LOGGER = LoggerFactory.getLogger(\r\n      DynamicInvocationHandler.class);\r\n\r\n    @Override\r\n    public Object invoke(Object proxy, Method method, Object[] args) \r\n      throws Throwable {\r\n        LOGGER.info(\"Invoked method: {}\", method.getName());\r\n\r\n        return 42;\r\n    }\r\n}\r\n```","```\r\nMap proxyInstance = (Map) Proxy.newProxyInstance(\r\n  DynamicProxyTest.class.getClassLoader(), \r\n  new Class[] { Map.class }, \r\n  new DynamicInvocationHandler());\r\n```","```\r\nproxyInstance.put(\"hello\", \"world\");\r\n```","```\r\nMap proxyInstance = (Map) Proxy.newProxyInstance(\r\n  DynamicProxyTest.class.getClassLoader(), \r\n  new Class[] { Map.class }, \r\n  (proxy, method, methodArgs) -> {\r\n    if (method.getName().equals(\"get\")) {\r\n        return 42;\r\n    } else {\r\n        throw new UnsupportedOperationException(\r\n          \"Unsupported method: \" + method.getName());\r\n    }\r\n});\r\n```","```\r\n(int) proxyInstance.get(\"hello\"); // 42\r\nproxyInstance.put(\"hello\", \"world\"); // exception\r\n```","```\r\npublic class TimingDynamicInvocationHandler implements InvocationHandler {\r\n\r\n    private static Logger LOGGER = LoggerFactory.getLogger(\r\n      TimingDynamicInvocationHandler.class);\r\n\r\n    private final Map<String, Method> methods = new HashMap<>();\r\n\r\n    private Object target;\r\n\r\n    public TimingDynamicInvocationHandler(Object target) {\r\n        this.target = target;\r\n\r\n        for(Method method: target.getClass().getDeclaredMethods()) {\r\n            this.methods.put(method.getName(), method);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public Object invoke(Object proxy, Method method, Object[] args) \r\n      throws Throwable {\r\n        long start = System.nanoTime();\r\n        Object result = methods.get(method.getName()).invoke(target, args);\r\n        long elapsed = System.nanoTime() - start;\r\n\r\n        LOGGER.info(\"Executing {} finished in {} ns\", method.getName(), \r\n          elapsed);\r\n\r\n        return result;\r\n    }\r\n}\r\n```","```\r\nMap mapProxyInstance = (Map) Proxy.newProxyInstance(\r\n  DynamicProxyTest.class.getClassLoader(), new Class[] { Map.class }, \r\n  new TimingDynamicInvocationHandler(new HashMap<>()));\r\n\r\nmapProxyInstance.put(\"hello\", \"world\");\r\n\r\nCharSequence csProxyInstance = (CharSequence) Proxy.newProxyInstance(\r\n  DynamicProxyTest.class.getClassLoader(), \r\n  new Class[] { CharSequence.class }, \r\n  new TimingDynamicInvocationHandler(\"Hello World\"));\r\n\r\ncsProxyInstance.length()\r\n```","```\r\nExecuting put finished in 19153 ns \r\nExecuting get finished in 8891 ns \r\nExecuting charAt finished in 11152 ns \r\nExecuting length finished in 10087 ns\r\n```"]