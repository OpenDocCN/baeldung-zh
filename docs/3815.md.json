["```\r\n@Test\r\npublic void whenRemoveSpecialCharacters_thenRemoved(){\r\n    String input = \"H*el.lo,}12\";\r\n    CharMatcher matcher = CharMatcher.javaLetterOrDigit();\r\n    String result = matcher.retainFrom(input);\r\n\r\n    assertEquals(\"Hello12\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveNonASCIIChars_thenRemoved() {\r\n    String input = \"あhello₤\";\r\n\r\n    String result = CharMatcher.ascii().retainFrom(input);\r\n    assertEquals(\"hello\", result);\r\n\r\n    result = CharMatcher.inRange('0', 'z').retainFrom(input);\r\n    assertEquals(\"hello\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveCharsNotInCharset_thenRemoved() {\r\n    Charset charset = Charset.forName(\"cp437\");\r\n    CharsetEncoder encoder = charset.newEncoder();\r\n\r\n    Predicate<Character> inRange = new Predicate<Character>() {\r\n        @Override\r\n        public boolean apply(Character c) {\r\n            return encoder.canEncode(c);\r\n        }\r\n    };\r\n\r\n    String result = CharMatcher.forPredicate(inRange)\r\n                               .retainFrom(\"helloは\");\r\n    assertEquals(\"hello\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidateString_thenValid(){\r\n    String input = \"hello\";\r\n\r\n    boolean result = CharMatcher.javaLowerCase().matchesAllOf(input);\r\n    assertTrue(result);\r\n\r\n    result = CharMatcher.is('e').matchesAnyOf(input);\r\n    assertTrue(result);\r\n\r\n    result = CharMatcher.javaDigit().matchesNoneOf(input);\r\n    assertTrue(result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenTrimString_thenTrimmed() {\r\n    String input = \"---hello,,,\";\r\n\r\n    String result = CharMatcher.is('-').trimLeadingFrom(input);\r\n    assertEquals(\"hello,,,\", result);\r\n\r\n    result = CharMatcher.is(',').trimTrailingFrom(input);\r\n    assertEquals(\"---hello\", result);\r\n\r\n    result = CharMatcher.anyOf(\"-,\").trimFrom(input);\r\n    assertEquals(\"hello\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCollapseFromString_thenCollapsed() {\r\n    String input = \"       hel    lo      \";\r\n\r\n    String result = CharMatcher.is(' ').collapseFrom(input, '-');\r\n    assertEquals(\"-hel-lo-\", result);\r\n\r\n    result = CharMatcher.is(' ').trimAndCollapseFrom(input, '-');\r\n    assertEquals(\"hel-lo\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenReplaceFromString_thenReplaced() {\r\n    String input = \"apple-banana.\";\r\n\r\n    String result = CharMatcher.anyOf(\"-.\").replaceFrom(input, '!');\r\n    assertEquals(\"apple!banana!\", result);\r\n\r\n    result = CharMatcher.is('-').replaceFrom(input, \" and \");\r\n    assertEquals(\"apple and banana.\", result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCountCharInString_thenCorrect() {\r\n    String input = \"a, c, z, 1, 2\";\r\n\r\n    int result = CharMatcher.is(',').countIn(input);\r\n    assertEquals(4, result);\r\n\r\n    result = CharMatcher.inRange('a', 'h').countIn(input);\r\n    assertEquals(2, result);\r\n}\r\n```"]