["```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency> \r\n```","```\r\npublic static String getNameWithoutExtension(String file) {\r\n   ...\r\n   int dotIndex = fileName.lastIndexOf('.');\r\n   return (dotIndex == -1) ? fileName : fileName.substring(0, dotIndex);\r\n }\r\n```","```\r\n@Test\r\npublic void givenDotFileWithoutExt_whenCallGuavaMethod_thenCannotGetDesiredResult() {\r\n    //negative assertion\r\n    assertNotEquals(\".baeldung\", Files.getNameWithoutExtension(\".baeldung\"));\r\n} \r\n```","```\r\n@Test\r\npublic void givenFileWithoutMultipleExt_whenCallGuavaMethod_thenCannotRemoveAllExtensions() {\r\n    //negative assertion\r\n    assertNotEquals(\"baeldung\", Files.getNameWithoutExtension(\"baeldung.tar.gz\"));\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>commons-io</groupId>\r\n    <artifactId>commons-io</artifactId>\r\n    <version>2.8.0</version>\r\n</dependency> \r\n```","```\r\npublic static String removeExtension(final String filename) {\r\n    ...\r\n    final int index = indexOfExtension(filename); //used the String.lastIndexOf() method\r\n    if (index == NOT_FOUND) {\r\n  \treturn filename;\r\n    } else {\r\n\treturn filename.substring(0, index);\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenDotFileWithoutExt_whenCallApacheCommonsMethod_thenCannotGetDesiredResult() {\r\n    //negative assertion\r\n    assertNotEquals(\".baeldung\", FilenameUtils.removeExtension(\".baeldung\"));\r\n} \r\n```","```\r\n@Test\r\npublic void givenFileWithoutMultipleExt_whenCallApacheCommonsMethod_thenCannotRemoveAllExtensions() {\r\n    //negative assertion\r\n    assertNotEquals(\"baeldung\", FilenameUtils.removeExtension(\"baeldung.tar.gz\"));\r\n} \r\n```","```\r\npublic static String removeFileExtension(String filename, boolean removeAllExtensions) {\r\n    if (filename == null || filename.isEmpty()) {\r\n        return filename;\r\n    }\r\n\r\n    String extPattern = \"(?<!^)[.]\" + (removeAllExtensions ? \".*\" : \"[^.]*$\");\r\n    return filename.replaceAll(extPattern, \"\");\r\n} \r\n```","```\r\n@Test\r\npublic void givenFilenameNoExt_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\"baeldung\", MyFilenameUtil.removeFileExtension(\"baeldung\", true));\r\n    assertEquals(\"baeldung\", MyFilenameUtil.removeFileExtension(\"baeldung\", false));\r\n}\r\n\r\n@Test\r\npublic void givenSingleExt_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\"baeldung\", MyFilenameUtil.removeFileExtension(\"baeldung.txt\", true));\r\n    assertEquals(\"baeldung\", MyFilenameUtil.removeFileExtension(\"baeldung.txt\", false));\r\n}\r\n\r\n@Test\r\npublic void givenDotFile_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\".baeldung\", MyFilenameUtil.removeFileExtension(\".baeldung\", true));\r\n    assertEquals(\".baeldung\", MyFilenameUtil.removeFileExtension(\".baeldung\", false));\r\n}\r\n\r\n@Test\r\npublic void givenDotFileWithExt_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\".baeldung\", MyFilenameUtil.removeFileExtension(\".baeldung.conf\", true));\r\n    assertEquals(\".baeldung\", MyFilenameUtil.removeFileExtension(\".baeldung.conf\", false));\r\n}\r\n\r\n@Test\r\npublic void givenDoubleExt_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\"baeldung\", MyFilenameUtil.removeFileExtension(\"baeldung.tar.gz\", true));\r\n    assertEquals(\"baeldung.tar\", MyFilenameUtil.removeFileExtension(\"baeldung.tar.gz\", false));\r\n}\r\n\r\n@Test\r\npublic void givenDotFileWithDoubleExt_whenCallFilenameUtilMethod_thenGetExpectedFilename() {\r\n    assertEquals(\".baeldung\", MyFilenameUtil.removeFileExtension(\".baeldung.conf.bak\", true));\r\n    assertEquals(\".baeldung.conf\", MyFilenameUtil.removeFileExtension(\".baeldung.conf.bak\", false));\r\n} \r\n```"]