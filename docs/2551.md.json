["```\r\nMap<String, Employee> map = new HashMap<>();\r\n\r\nEmployee employee1 = new Employee(1L, \"Mher\");\r\nmap.put(employee1.getName(), employee1);\r\nEmployee employee2 = new Employee(22L, \"Annie\");\r\nmap.put(employee2.getName(), employee2);\r\nEmployee employee3 = new Employee(8L, \"John\");\r\nmap.put(employee3.getName(), employee3);\r\nEmployee employee4 = new Employee(2L, \"George\");\r\nmap.put(employee4.getName(), employee4);\r\n```","```\r\npublic class Employee implements Comparable<Employee> {\r\n\r\n    private Long id;\r\n    private String name;\r\n\r\n    // constructor, getters, setters\r\n\r\n    // override equals and hashCode\r\n    @Override\r\n    public int compareTo(Employee employee) {\r\n        return (int)(this.id - employee.getId());\r\n    }\r\n}\r\n```","```\r\nTreeMap<String, Employee> sorted = new TreeMap<>(map);\r\n```","```\r\nTreeMap<String, Employee> sorted = new TreeMap<>();\r\nsorted.putAll(map);\r\n```","```\r\nAnnie=Employee{id=22, name='Annie'}\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nMher=Employee{id=1, name='Mher'}\r\n```","```\r\nList<String> employeeByKey = new ArrayList<>(map.keySet());\r\nCollections.sort(employeeByKey);\r\n```","```\r\n[Annie, George, John, Mher]\r\n```","```\r\nList<Employee> employeeById = new ArrayList<>(map.values());\r\n```","```\r\nCollections.sort(employeeById);\r\n```","```\r\n[Employee{id=1, name='Mher'}, \r\nEmployee{id=2, name='George'}, \r\nEmployee{id=8, name='John'}, \r\nEmployee{id=22, name='Annie'}]\r\n```","```\r\nEmployee employee5 = new Employee(1L, \"Mher\");\r\nmap.put(employee5.getName(), employee5);\r\nEmployee employee6 = new Employee(22L, \"Annie\");\r\nmap.put(employee6.getName(), employee6);\r\n```","```\r\nSortedSet<String> keySet = new TreeSet<>(map.keySet());\r\n```","```\r\n[Annie, George, John, Mher]\r\n```","```\r\nSortedSet<Employee> values = new TreeSet<>(map.values());\r\n```","```\r\n[Employee{id=1, name='Mher'}, \r\nEmployee{id=2, name='George'}, \r\nEmployee{id=8, name='John'}, \r\nEmployee{id=22, name='Annie'}]\r\n```","```\r\nmap.entrySet()\r\n  .stream()\r\n  .sorted(Map.Entry.<String, Employee>comparingByKey())\r\n  .forEach(System.out::println);\r\n```","```\r\nAnnie=Employee{id=22, name='Annie'}\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nMher=Employee{id=1, name='Mher'}\r\n```","```\r\nmap.entrySet()\r\n  .stream()\r\n  .sorted(Map.Entry.comparingByValue())\r\n  .forEach(System.out::println);\r\n```","```\r\nMher=Employee{id=1, name='Mher'}\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nAnnie=Employee{id=22, name='Annie'}\r\n```","```\r\nMap<String, Employee> result = map.entrySet()\r\n  .stream()\r\n  .sorted(Map.Entry.comparingByValue())\r\n  .collect(Collectors.toMap(\r\n    Map.Entry::getKey, \r\n    Map.Entry::getValue, \r\n    (oldValue, newValue) -> oldValue, LinkedHashMap::new));\r\n```","```\r\nOrdering naturalOrdering = Ordering.natural()\r\n  .onResultOf(Functions.forMap(map, null));\r\n```","```\r\nImmutableSortedMap.copyOf(map, naturalOrdering);\r\n```","```\r\nMher=Employee{id=1, name='Mher'}\r\nGeorge=Employee{id=2, name='George'}\r\nJohn=Employee{id=8, name='John'}\r\nAnnie=Employee{id=22, name='Annie'}\r\n```"]