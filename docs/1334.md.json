["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-oauth2-client</artifactId>\r\n</dependency>\r\n```","```\r\n@RestController\r\npublic class MainController {\r\n\r\n    @GetMapping(\"/\")\r\n    public Mono<String> index(@AuthenticationPrincipal Mono<OAuth2User> oauth2User) {\r\n       return oauth2User\r\n        .map(OAuth2User::getName)\r\n        .map(name -> String.format(\"Hi, %s\", name));\r\n    }\r\n}\r\n```","```\r\nhttp://localhost:8080/login/oauth2/code/google\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          google:\r\n            client-id: YOUR_APP_CLIENT_ID\r\n            client-secret: YOUR_APP_CLIENT_SECRET\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          custom:\r\n            client-id: fooClientIdPassword\r\n            client-secret: secret\r\n            scopes: read,foo\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri-template: http://localhost:8080/login/oauth2/code/custom\r\n        provider:\r\n          custom:\r\n            authorization-uri: http://localhost:8081/spring-security-oauth-server/oauth/authorize\r\n            token-uri: http://localhost:8081/spring-security-oauth-server/oauth/token\r\n            user-info-uri: http://localhost:8088/spring-security-oauth-resource/users/extra\r\n            user-name-attribute: user_name\r\n```","```\r\n@EnableWebFluxSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityWebFilterChain configure(ServerHttpSecurity http) throws Exception {\r\n        return http.authorizeExchange()\r\n          .pathMatchers(\"/about\").permitAll()\r\n          .anyExchange().authenticated()\r\n          .and().oauth2Login()\r\n          .and().build();\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic WebClient webClient(ReactiveClientRegistrationRepository clientRegistrationRepo, \r\n  ServerOAuth2AuthorizedClientRepository authorizedClientRepo) {\r\n    ServerOAuth2AuthorizedClientExchangeFilterFunction filter = \r\n      new ServerOAuth2AuthorizedClientExchangeFilterFunction(clientRegistrationRepo, authorizedClientRepo);\r\n\r\n    return WebClient.builder().filter(filter).build();\r\n}\r\n```","```\r\n@Autowired\r\nprivate WebClient webClient;\r\n\r\n@GetMapping(\"/foos/{id}\")\r\npublic Mono<Foo> getFooResource(@RegisteredOAuth2AuthorizedClient(\"custom\") \r\n  OAuth2AuthorizedClient client, @PathVariable final long id){\r\n    return webClient\r\n      .get()\r\n      .uri(\"http://localhost:8088/spring-security-oauth-resource/foos/{id}\", id)\r\n      .attributes(oauth2AuthorizedClient(client))\r\n      .retrieve()\r\n      .bodyToMono(Foo.class); \r\n}\r\n```"]