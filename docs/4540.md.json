["```\r\n@Entity\r\npublic class User {\r\n    ...\r\n\r\n    @ManyToMany(fetch = FetchType.EAGER)\r\n    @JoinTable(name = \"users_roles\", \r\n      joinColumns = @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"), \r\n      inverseJoinColumns = @JoinColumn(name = \"role_id\", referencedColumnName = \"id\"))\r\n    private Collection<Role> roles;\r\n\r\n    ...\r\n}\r\n```","```\r\nprivate void createRoles() {\r\n    Privilege adminReadPrivilege = createPrivilegeIfNotFound(\"ADMIN_READ_PRIVILEGE\");\r\n    Privilege adminWritePrivilege = createPrivilegeIfNotFound(\"ADMIN_WRITE_PRIVILEGE\");\r\n    Privilege postLimitedPrivilege = createPrivilegeIfNotFound(\"POST_LIMITED_PRIVILEGE\");\r\n    Privilege postUnlimitedPrivilege = createPrivilegeIfNotFound(\"POST_UNLIMITED_PRIVILEGE\");\r\n\r\n    createRoleIfNotFound(\"ROLE_ADMIN\", Arrays.asList(adminReadPrivilege, adminWritePrivilege));\r\n    createRoleIfNotFound(\"ROLE_SUPER_USER\", Arrays.asList(postUnlimitedPrivilege));\r\n    createRoleIfNotFound(\"ROLE_USER\", Arrays.asList(postLimitedPrivilege));\r\n}\r\n```","```\r\nprivate void createTestUser() {\r\n    Role adminRole = roleRepository.findByName(\"ROLE_ADMIN\");\r\n    Role superUserRole = roleRepository.findByName(\"ROLE_SUPER_USER\");\r\n    ...\r\n    userJohn.setRoles(Arrays.asList(adminRole, superUserRole));\r\n}\r\n```","```\r\n@Override\r\npublic void registerNewUser(String username, String email, String password) {\r\n    ...\r\n    Role role = roleRepository.findByName(\"ROLE_USER\");\r\n    user.setRoles(Arrays.asList(role));\r\n}\r\n```","```\r\npublic class UserPrincipal implements UserDetails {\r\n    ...\r\n\r\n    @Override\r\n    public Collection<? extends GrantedAuthority> getAuthorities() {\r\n        List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();\r\n        for (Role role : user.getRoles()) {\r\n            for (Privilege privilege : role.getPrivileges()) {\r\n                authorities.add(new SimpleGrantedAuthority(privilege.getName()));\r\n            }\r\n        }\r\n        return authorities;\r\n    }\r\n}\r\n```","```\r\npublic interface PostRepository extends JpaRepository<Post, Long> {\r\n    ...\r\n\r\n    Long countByUserAndSubmissionDateBetween(User user, Date start, Date end);\r\n\r\n}\r\n```","```\r\npublic class ScheduledPostRestController {\r\n    private static final int LIMIT_SCHEDULED_POSTS_PER_DAY = 3;\r\n\r\n    public Post schedule(HttpServletRequest request,...) throws ParseException {\r\n        ...\r\n        if (!checkIfCanSchedule(submissionDate, request)) {\r\n            throw new InvalidDateException(\"Scheduling Date exceeds daily limit\");\r\n        }\r\n        ...\r\n    }\r\n\r\n    private boolean checkIfCanSchedule(Date date, HttpServletRequest request) {\r\n        if (request.isUserInRole(\"POST_UNLIMITED_PRIVILEGE\")) {\r\n            return true;\r\n        }\r\n        Date start = DateUtils.truncate(date, Calendar.DATE);\r\n        Date end = DateUtils.addDays(start, 1);\r\n        long count = postReopsitory.\r\n          countByUserAndSubmissionDateBetween(getCurrentUser(), start, end);\r\n        return count < LIMIT_SCHEDULED_POSTS_PER_DAY;\r\n    }\r\n}\r\n```","```\r\n@PreAuthorize(\"hasRole('ADMIN_READ_PRIVILEGE')\")\r\n@RequestMapping(value=\"/admin/users\", method = RequestMethod.GET)\r\n@ResponseBody\r\npublic List<User> getUsersList() {\r\n    return service.getUsersList();\r\n}\r\n```","```\r\n@Transactional\r\npublic List<User> getUsersList() {\r\n    return userRepository.findAll();\r\n}\r\n```","```\r\n<table>\r\n    <thead>\r\n        <tr>\r\n            <th>Username</th>\r\n            <th>Roles</th>\r\n            <th>Actions</th></tr>\r\n    </thead>\r\n</table>\r\n\r\n<script>\r\n$(function(){\r\n    var userRoles=\"\";\r\n    $.get(\"admin/users\", function(data){\r\n        $.each(data, function( index, user ) {\r\n            userRoles = extractRolesName(user.roles);\r\n            $('.table').append('<tr><td>'+user.username+'</td><td>'+\r\n              userRoles+'</td><td><a href=\"#\" onclick=\"showEditModal('+\r\n              user.id+',\\''+userRoles+'\\')\">Modify User Roles</a></td></tr>');\r\n        });\r\n    });\r\n});\r\n\r\nfunction extractRolesName(roles){ \r\n    var result =\"\"; \r\n    $.each(roles, function( index, role ) { \r\n        result+= role.name+\" \"; \r\n    }); \r\n    return result; \r\n}\r\n</script>\r\n```","```\r\n@PreAuthorize(\"hasRole('USER_WRITE_PRIVILEGE')\")\r\n@RequestMapping(value = \"/user/{id}\", method = RequestMethod.PUT)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void modifyUserRoles(\r\n  @PathVariable(\"id\") Long id, \r\n  @RequestParam(value = \"roleIds\") String roleIds) {\r\n    service.modifyUserRoles(id, roleIds);\r\n}\r\n\r\n@PreAuthorize(\"hasRole('USER_READ_PRIVILEGE')\")\r\n@RequestMapping(value = \"/admin/roles\", method = RequestMethod.GET)\r\n@ResponseBody\r\npublic List<Role> getRolesList() {\r\n    return service.getRolesList();\r\n}\r\n```","```\r\n@Transactional\r\npublic List<Role> getRolesList() {\r\n    return roleRepository.findAll();\r\n}\r\n@Transactional\r\npublic void modifyUserRoles(Long userId, String ids) {\r\n    List<Long> roleIds = new ArrayList<Long>();\r\n    String[] arr = ids.split(\",\");\r\n    for (String str : arr) {\r\n        roleIds.add(Long.parseLong(str));\r\n    }\r\n    List<Role> roles = roleRepository.findAll(roleIds);\r\n    User user = userRepository.findOne(userId);\r\n    user.setRoles(roles);\r\n    userRepository.save(user);\r\n}\r\n```","```\r\n<div id=\"myModal\">\r\n    <h4 class=\"modal-title\">Modify User Roles</h4>\r\n    <input type=\"hidden\" name=\"id\" id=\"userId\"/>\r\n    <div id=\"allRoles\"></div>\r\n    <button onclick=\"modifyUserRoles()\">Save changes</button>\r\n</div>\r\n\r\n<script>\r\nfunction showEditModal(userId, roleNames){\r\n    $(\"#userId\").val(userId);\r\n    $.get(\"admin/roles\", function(data){\r\n        $.each(data, function( index, role ) {\r\n            if(roleNames.indexOf(role.name) != -1){\r\n                $('#allRoles').append(\r\n                  '<input type=\"checkbox\" name=\"roleIds\" value=\"'+role.id+'\" checked/> '+role.name+'<br/>')\r\n            } else{\r\n                $('#allRoles').append(\r\n                  '<input type=\"checkbox\" name=\"roleIds\" value=\"'+role.id+'\" /> '+role.name+'<br/>')\r\n            }\r\n       });\r\n       $(\"#myModal\").modal();\r\n    });\r\n}\r\n\r\nfunction modifyUserRoles(){\r\n    var roles = [];\r\n    $.each($(\"input[name='roleIds']:checked\"), function(){ \r\n        roles.push($(this).val());\r\n    }); \r\n    if(roles.length == 0){\r\n        alert(\"Error, at least select one role\");\r\n        return;\r\n    }\r\n\r\n    $.ajax({\r\n        url: \"user/\"+$(\"#userId\").val()+\"?roleIds=\"+roles.join(\",\"),\r\n        type: 'PUT',\r\n        contentType:'application/json'\r\n        }).done(function() { window.location.href=\"users\";\r\n        }).fail(function(error) { alert(error.responseText); \r\n    }); \r\n}\r\n</script>\r\n```","```\r\n@Autowired \r\nprivate AuthenticationSuccessHandler successHandler;\r\n\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.\r\n    ...\r\n    .authorizeRequests()\r\n    .antMatchers(\"/adminHome\",\"/users\").hasAuthority(\"ADMIN_READ_PRIVILEGE\")    \r\n    ...\r\n    .formLogin().successHandler(successHandler)\r\n}\r\n```","```\r\n@Component\r\npublic class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler {\r\n\r\n    @Override\r\n    public void onAuthenticationSuccess(\r\n      HttpServletRequest request, HttpServletResponse response, Authentication auth) \r\n      throws IOException, ServletException {\r\n        Set<String> privieleges = AuthorityUtils.authorityListToSet(auth.getAuthorities());\r\n        if (privieleges.contains(\"ADMIN_READ_PRIVILEGE\")) {\r\n            response.sendRedirect(\"adminHome\");\r\n        } else {\r\n            response.sendRedirect(\"home\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h1>Welcome, <small><span sec:authentication=\"principal.username\">Bob</span></small></h1>\r\n    <br/>\r\n    <a href=\"users\">Display Users List</a>\r\n</body>\r\n</html>\r\n```"]