["```\r\nList<Plant> copy = new ArrayList<>(list);\r\n```","```\r\nList<Integer> copy = new ArrayList<>(list);\r\n```","```\r\nList<Integer> copy = new ArrayList<>();\r\ncopy.addAll(list);\r\n```","```\r\nList<Integer> source = Arrays.asList(1,2,3);\r\nList<Integer> dest = Arrays.asList(4,5,6);\r\nCollections.copy(dest, source);\r\n```","```\r\nList<Integer> source = Arrays.asList(1, 2, 3);\r\nList<Integer> dest = Arrays.asList(5, 6, 7, 8, 9, 10);\r\nCollections.copy(dest, source);\r\n```","```\r\nList<String> copy = list.stream()\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<String> copy = list.stream()\r\n  .skip(1)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<String> copy = list.stream()\r\n  .filter(s -> s.length() > 10)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<Flower> flowers = list.stream()\r\n  .filter(f -> f.getPetals() > 6)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<Flower> flowers = Optional.ofNullable(list)\r\n  .map(List::stream)\r\n  .orElseGet(Stream::empty)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<Flower> flowers = Optional.ofNullable(list)\r\n  .map(List::stream).orElseGet(Stream::empty)\r\n  .skip(1)\r\n  .collect(Collectors.toList());\r\n```","```\r\nList<T> copy = List.copyOf(list);\r\n```"]