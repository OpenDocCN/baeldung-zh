["```\r\n@FunctionalInterface\r\npublic interface Adder {\r\n    int add(int a, int b);\r\n}\r\n```","```\r\nAdder adder = (a,b) -> a + b;\r\nint result = adder.add(4,5);\r\n```","```\r\n@FunctionalInterface\r\npublic interface Adder { \r\n    // compiler complains that the interface is not a SAM\r\n\r\n    int add(int a, int b);\r\n    int div(int a, int b);\r\n}\r\n```","```\r\npublic final class Integer {\r\n    @Native public static final int MIN_VALUE = 0x80000000;\r\n    // omitted\r\n}\r\n```","```\r\n@Documented\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.CONSTRUCTOR, ElementType.METHOD})\r\npublic @interface SafeVarargs {\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(TYPE)\r\npublic @interface RetentionAnnotation {\r\n}\r\n```","```\r\n@RetentionAnnotation\r\n@Generated(\"Available only on source code\")\r\npublic class AnnotatedClass {\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnnotationRetentionPolicyRuntime_shouldAccess() {\r\n    AnnotatedClass anAnnotatedClass = new AnnotatedClass();\r\n    Annotation[] annotations = anAnnotatedClass.getClass().getAnnotations();\r\n    assertThat(annotations.length, is(1));\r\n}\r\n```","```\r\n@Inherited\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface InheritedAnnotation {\r\n}\r\n\r\n@InheritedAnnotation\r\npublic class BaseClass {\r\n}\r\n\r\npublic class DerivedClass extends BaseClass {\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnnotationInherited_thenShouldExist() {\r\n    DerivedClass derivedClass = new DerivedClass();\r\n    InheritedAnnotation annotation = derivedClass.getClass()\r\n      .getAnnotation(InheritedAnnotation.class);\r\n\r\n    assertThat(annotation, instanceOf(InheritedAnnotation.class));\r\n}\r\n```","```\r\n@Documented\r\n@Target(ElementType.FIELD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface ExcelCell {\r\n    int value();\r\n}\r\n```","```\r\npublic class Employee {\r\n    @ExcelCell(0)\r\n    public String name;\r\n}\r\n```","```\r\n@Schedules({\r\n    @Schedule(time = \"15:05\"),\r\n    @Schedule(time = \"23:00\")\r\n})\r\nvoid scheduledAlarm() {\r\n}\r\n```","```\r\n@Repeatable(Schedules.class)\r\npublic @interface Schedule {\r\n    String time() default \"09:00\";\r\n}\r\n```","```\r\npublic @interface Schedules {\r\n    Schedule[] value();\r\n}\r\n```","```\r\n@Schedule\r\n@Schedule(time = \"15:05\")\r\n@Schedule(time = \"23:00\")\r\nvoid scheduledAlarm() {\r\n}\r\n```"]