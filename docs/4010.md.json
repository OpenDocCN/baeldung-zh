["```\r\n@Test\r\npublic void whenCompareTwoHashMapsUsingEquals_thenSuccess() {\r\n    Map<String, String> asiaCapital1 = new HashMap<String, String>();\r\n    asiaCapital1.put(\"Japan\", \"Tokyo\");\r\n    asiaCapital1.put(\"South Korea\", \"Seoul\");\r\n\r\n    Map<String, String> asiaCapital2 = new HashMap<String, String>();\r\n    asiaCapital2.put(\"South Korea\", \"Seoul\");\r\n    asiaCapital2.put(\"Japan\", \"Tokyo\");\r\n\r\n    Map<String, String> asiaCapital3 = new HashMap<String, String>();\r\n    asiaCapital3.put(\"Japan\", \"Tokyo\");\r\n    asiaCapital3.put(\"China\", \"Beijing\");\r\n\r\n    assertTrue(asiaCapital1.equals(asiaCapital2));\r\n    assertFalse(asiaCapital1.equals(asiaCapital3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompareTwoHashMapsWithArrayValuesUsingEquals_thenFail() {\r\n    Map<String, String[]> asiaCity1 = new HashMap<String, String[]>();\r\n    asiaCity1.put(\"Japan\", new String[] { \"Tokyo\", \"Osaka\" });\r\n    asiaCity1.put(\"South Korea\", new String[] { \"Seoul\", \"Busan\" });\r\n\r\n    Map<String, String[]> asiaCity2 = new HashMap<String, String[]>();\r\n    asiaCity2.put(\"South Korea\", new String[] { \"Seoul\", \"Busan\" });\r\n    asiaCity2.put(\"Japan\", new String[] { \"Tokyo\", \"Osaka\" });\r\n\r\n    assertFalse(asiaCity1.equals(asiaCity2));\r\n}\r\n```","```\r\nprivate boolean areEqual(Map<String, String> first, Map<String, String> second) {\r\n    if (first.size() != second.size()) {\r\n        return false;\r\n    }\r\n\r\n    return first.entrySet().stream()\r\n      .allMatch(e -> e.getValue().equals(second.get(e.getKey())));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompareTwoHashMapsUsingStreamAPI_thenSuccess() {\r\n    assertTrue(areEqual(asiaCapital1, asiaCapital2));\r\n    assertFalse(areEqual(asiaCapital1, asiaCapital3));\r\n}\r\n```","```\r\nprivate boolean areEqualWithArrayValue(Map<String, String[]> first, Map<String, String[]> second) {\r\n    if (first.size() != second.size()) {\r\n        return false;\r\n    }\r\n\r\n    return first.entrySet().stream()\r\n      .allMatch(e -> Arrays.equals(e.getValue(), second.get(e.getKey())));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompareTwoHashMapsWithArrayValuesUsingStreamAPI_thenSuccess() {\r\n    assertTrue(areEqualWithArrayValue(asiaCity1, asiaCity2)); \r\n    assertFalse(areEqualWithArrayValue(asiaCity1, asiaCity3));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompareTwoHashMapKeys_thenSuccess() {\r\n    assertTrue(asiaCapital1.keySet().equals(asiaCapital2.keySet())); \r\n    assertFalse(asiaCapital1.keySet().equals(asiaCapital3.keySet()));\r\n}\r\n```","```\r\nprivate Map<String, Boolean> areEqualKeyValues(Map<String, String> first, Map<String, String> second) {\r\n    return first.entrySet().stream()\r\n      .collect(Collectors.toMap(e -> e.getKey(), \r\n        e -> e.getValue().equals(second.get(e.getKey()))));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCompareTwoHashMapKeyValuesUsingStreamAPI_thenSuccess() {\r\n    Map<String, String> asiaCapital3 = new HashMap<String, String>();\r\n    asiaCapital3.put(\"Japan\", \"Tokyo\");\r\n    asiaCapital3.put(\"South Korea\", \"Seoul\");\r\n    asiaCapital3.put(\"China\", \"Beijing\");\r\n\r\n    Map<String, String> asiaCapital4 = new HashMap<String, String>();\r\n    asiaCapital4.put(\"South Korea\", \"Seoul\");\r\n    asiaCapital4.put(\"Japan\", \"Osaka\");\r\n    asiaCapital4.put(\"China\", \"Beijing\");\r\n\r\n    Map<String, Boolean> result = areEqualKeyValues(asiaCapital3, asiaCapital4);\r\n\r\n    assertEquals(3, result.size());\r\n    assertThat(result, hasEntry(\"Japan\", false));\r\n    assertThat(result, hasEntry(\"South Korea\", true));\r\n    assertThat(result, hasEntry(\"China\", true));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDifferentMaps_whenGetDiffUsingGuava_thenSuccess() {\r\n    Map<String, String> asia1 = new HashMap<String, String>();\r\n    asia1.put(\"Japan\", \"Tokyo\");\r\n    asia1.put(\"South Korea\", \"Seoul\");\r\n    asia1.put(\"India\", \"New Delhi\");\r\n\r\n    Map<String, String> asia2 = new HashMap<String, String>();\r\n    asia2.put(\"Japan\", \"Tokyo\");\r\n    asia2.put(\"China\", \"Beijing\");\r\n    asia2.put(\"India\", \"Delhi\");\r\n\r\n    MapDifference<String, String> diff = Maps.difference(asia1, asia2);\r\n    Map<String, ValueDifference<String>> entriesDiffering = diff.entriesDiffering();\r\n\r\n    assertFalse(diff.areEqual());\r\n    assertEquals(1, entriesDiffering.size());\r\n    assertThat(entriesDiffering, hasKey(\"India\"));\r\n    assertEquals(\"New Delhi\", entriesDiffering.get(\"India\").leftValue());\r\n    assertEquals(\"Delhi\", entriesDiffering.get(\"India\").rightValue());\r\n}\r\n```","```\r\n@Test\r\npublic void givenDifferentMaps_whenGetEntriesOnOneSideUsingGuava_thenSuccess() {\r\n    MapDifference<String, String> diff = Maps.difference(asia1, asia2);\r\n    Map<String, String> entriesOnlyOnRight = diff.entriesOnlyOnRight();\r\n    Map<String, String> entriesOnlyOnLeft = diff.entriesOnlyOnLeft();\r\n\r\n    assertEquals(1, entriesOnlyOnRight.size());\r\n    assertEquals(1, entriesOnlyOnLeft.size());\r\n    assertThat(entriesOnlyOnRight, hasEntry(\"China\", \"Beijing\"));\r\n    assertThat(entriesOnlyOnLeft, hasEntry(\"South Korea\", \"Seoul\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenDifferentMaps_whenGetCommonEntriesUsingGuava_thenSuccess() {\r\n    MapDifference<String, String> diff = Maps.difference(asia1, asia2);\r\n    Map<String, String> entriesInCommon = diff.entriesInCommon();\r\n\r\n    assertEquals(1, entriesInCommon.size());\r\n    assertThat(entriesInCommon, hasEntry(\"Japan\", \"Tokyo\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenSimilarMapsWithArrayValue_whenCompareUsingGuava_thenFail() {\r\n    MapDifference<String, String[]> diff = Maps.difference(asiaCity1, asiaCity2);\r\n    assertFalse(diff.areEqual());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSimilarMapsWithArrayValue_whenCompareUsingGuavaEquivalence_thenSuccess() {\r\n    Equivalence<String[]> eq = new Equivalence<String[]>() {\r\n        @Override\r\n        protected boolean doEquivalent(String[] a, String[] b) {\r\n            return Arrays.equals(a, b);\r\n        }\r\n\r\n        @Override\r\n        protected int doHash(String[] value) {\r\n            return value.hashCode();\r\n        }\r\n    };\r\n\r\n    MapDifference<String, String[]> diff = Maps.difference(asiaCity1, asiaCity2, eq);\r\n    assertTrue(diff.areEqual());\r\n\r\n    diff = Maps.difference(asiaCity1, asiaCity3, eq); \r\n    assertFalse(diff.areEqual());\r\n}\r\n```"]