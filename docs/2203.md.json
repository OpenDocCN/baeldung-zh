["```\r\n<dependency>\t\t\t\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-mustache</artifactId>\r\n</dependency>\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-web</artifactId> \r\n</dependency>\r\n```","```\r\n<div class=\"starter-template\">\r\n    {{#articles}}\r\n    <h1>{{title}}</h1>\r\n    <h3>{{publishDate}}</h3>\r\n    <h3>{{author}}</h3>\r\n    <p>{{body}}</p>\r\n    {{/articles}}\r\n</div>\r\n```","```\r\n<div class=\"container\">\r\n    {{>layout/article}}\r\n</div>\r\n```","```\r\nspring.mustache.suffix:.html\r\n```","```\r\n@GetMapping(\"/article\")\r\npublic ModelAndView displayArticle(Map<String, Object> model) {\r\n\r\n    List<Article> articles = IntStream.range(0, 10)\r\n      .mapToObj(i -> generateArticle(\"Article Title \" + i))\r\n      .collect(Collectors.toList());\r\n\r\n    model.put(\"articles\", articles);\r\n\r\n    return new ModelAndView(\"index\", model);\r\n}\r\n```","```\r\n {{#articles}}...{{/articles}} \r\n```","```\r\n@Test\r\npublic void givenIndexPage_whenContainsArticle_thenTrue() {\r\n\r\n    ResponseEntity<String> entity \r\n      = this.restTemplate.getForEntity(\"/article\", String.class);\r\n\r\n    assertTrue(entity.getStatusCode()\r\n      .equals(HttpStatus.OK));\r\n    assertTrue(entity.getBody()\r\n      .contains(\"Article Title 0\"));\r\n}\r\n```","```\r\nmvn spring-boot:run\r\n```","```\r\n@Bean\r\npublic Mustache.Compiler mustacheCompiler(\r\n  Mustache.TemplateLoader templateLoader, \r\n  Environment environment) {\r\n\r\n    MustacheEnvironmentCollector collector\r\n      = new MustacheEnvironmentCollector();\r\n    collector.setEnvironment(environment);\r\n\r\n    return Mustache.compiler()\r\n      .defaultValue(\"Some Default Value\")\r\n      .withLoader(templateLoader)\r\n      .withCollector(collector);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.sps.mustache</groupId>\r\n    <artifactId>mustache-spring-view</artifactId>\r\n    <version>1.4</version>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic ViewResolver getViewResolver(ResourceLoader resourceLoader) {\r\n    MustacheViewResolver mustacheViewResolver\r\n      = new MustacheViewResolver();\r\n    mustacheViewResolver.setPrefix(\"/WEB-INF/views/\");\r\n    mustacheViewResolver.setSuffix(\"..mustache\");\r\n    mustacheViewResolver.setCache(false);\r\n    MustacheTemplateLoader mustacheTemplateLoader \r\n      = new MustacheTemplateLoader();\r\n    mustacheTemplateLoader.setResourceLoader(resourceLoader);\r\n    mustacheViewResolver.setTemplateLoader(mustacheTemplateLoader);\r\n    return mustacheViewResolver;\r\n} \r\n```"]