["```\r\npublic class NewThread extends Thread {\r\n    public void run() {\r\n        long startTime = System.currentTimeMillis();\r\n        int i = 0;\r\n        while (true) {\r\n            System.out.println(this.getName() + \": New Thread is running...\" + i++);\r\n            try {\r\n                //Wait for one sec so it doesn't print too fast\r\n                Thread.sleep(1000);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n            ...\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class SingleThreadExample {\r\n    public static void main(String[] args) {\r\n        NewThread t = new NewThread();\r\n        t.start();\r\n    }\r\n}\r\n```","```\r\npublic class MultipleThreadsExample {\r\n    public static void main(String[] args) {\r\n        NewThread t1 = new NewThread();\r\n        t1.setName(\"MyThread-1\");\r\n        NewThread t2 = new NewThread();\r\n        t2.setName(\"MyThread-2\");\r\n        t1.start();\r\n        t2.start();\r\n    }\r\n}\r\n```","```\r\nExecutorService executor = Executors.newFixedThreadPool(10);\r\n...\r\nexecutor.submit(() -> {\r\n    new Task();\r\n});\r\n```","```\r\nCompletableFuture.supplyAsync(() -> \"Hello\");\r\n```","```\r\nTimerTask task = new TimerTask() {\r\n    public void run() {\r\n        System.out.println(\"Task performed on: \" + new Date() + \"n\" \r\n          + \"Thread's name: \" + Thread.currentThread().getName());\r\n    }\r\n};\r\nTimer timer = new Timer(\"Timer\");\r\nlong delay = 1000L;\r\ntimer.schedule(task, delay);\r\n```","```\r\ntimer.scheduleAtFixedRate(repeatedTask, delay, period);\r\n```","```\r\nScheduledExecutorService executorService = Executors.newScheduledThreadPool(2);\r\nScheduledFuture<Object> resultFuture\r\n  = executorService.schedule(callableTask, 1, TimeUnit.SECONDS);\r\n```","```\r\nScheduledFuture<Object> resultFuture\r\n = executorService.scheduleAtFixedRate(runnableTask, 100, 450, TimeUnit.MILLISECONDS);\r\n```"]