["```\r\npublic static int parseInt(String s) throws NumberFormatException\r\n```","```\r\n@Test\r\npublic void whenValidNumericStringIsPassed_thenShouldConvertToPrimitiveInt() {\r\n    assertEquals(11, Integer.parseInt(\"11\")); \r\n    assertEquals(11, Integer.parseInt(\"+11\")); \r\n    assertEquals(-11, Integer.parseInt(\"-11\"));\r\n}\r\n```","```\r\npublic static int parseInt(String s, int radix) throws NumberFormatException\r\n```","```\r\n@Test\r\npublic void whenValidNumericStringWithRadixIsPassed_thenShouldConvertToPrimitiveInt() {\r\n    assertEquals(17, Integer.parseInt(\"11\", 16));\r\n    assertEquals(10, Integer.parseInt(\"A\", 16)); \r\n    assertEquals(7, Integer.parseInt(\"7\", 8));\r\n}\r\n```","```\r\npublic static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException\r\n```","```\r\n@Test\r\npublic void whenValidNumericStringWithRadixAndSubstringIsPassed_thenShouldConvertToPrimitiveInt() {\r\n    assertEquals(5, Integer.parseInt(\"100101\", 3, 6, 2));\r\n    assertEquals(101, Integer.parseInt(\"100101\", 3, 6, 10));\r\n}\r\n```","```\r\n@Test(expected = NumberFormatException.class)\r\npublic void whenInValidNumericStringIsPassed_thenShouldThrowNumberFormatException(){\r\n    int number = Integer.parseInt(\"abcd\");\r\n}\r\n```","```\r\npublic static Integer valueOf(String s) throws NumberFormatException\r\n```","```\r\n@Test\r\npublic void whenValidNumericStringIsPassed_thenShouldConvertToInteger() {\r\n    Integer expectedNumber = 11;\r\n    Integer expectedNegativeNumber = -11;\r\n\r\n    assertEquals(expectedNumber, Integer.valueOf(\"11\"));\r\n    assertEquals(expectedNumber, Integer.valueOf(\"+11\"));\r\n    assertEquals(expectedNegativeNumber, Integer.valueOf(\"-11\"));\r\n}\r\n```","```\r\npublic static Integer valueOf(int i)\r\n```","```\r\n@Test\r\npublic void whenNumberIsPassed_thenShouldConvertToInteger() {\r\n    Integer expectedNumber = 11;\r\n    Integer expectedNegativeNumber = -11;\r\n    Integer expectedUnicodeValue = 65;\r\n\r\n    assertEquals(expectedNumber, Integer.valueOf(11));\r\n    assertEquals(expectedNumber, Integer.valueOf(+11));\r\n    assertEquals(expectedNegativeNumber, Integer.valueOf(-11));\r\n    assertEquals(expectedUnicodeValue, Integer.valueOf('A'));\r\n}\r\n```","```\r\npublic static Integer valueOf(String s, int radix) throws NumberFormatException\r\n```","```\r\n@Test\r\npublic void whenValidNumericStringWithRadixIsPassed_thenShouldConvertToInetger() {\r\n    Integer expectedNumber1 = 17;\r\n    Integer expectedNumber2 = 10;\r\n    Integer expectedNumber3 = 7;\r\n\r\n    assertEquals(expectedNumber1, Integer.valueOf(\"11\", 16));\r\n    assertEquals(expectedNumber2, Integer.valueOf(\"A\", 16));\r\n    assertEquals(expectedNumber3, Integer.valueOf(\"7\", 8));\r\n}\r\n```"]