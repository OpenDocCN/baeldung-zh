["```\r\npublic class CustomInterceptorImpl implements Interceptor, Serializable {\r\n\r\n    @Override\r\n    public boolean onLoad(Object entity, Serializable id, \r\n      Object[] state, String[] propertyNames, Type[] types) \r\n      throws CallbackException {\r\n        // ...\r\n        return false;\r\n    }\r\n\r\n    // ...\r\n\r\n    @Override\r\n    public String onPrepareStatement(String sql) {\r\n        // ...   \r\n        return sql;\r\n    }\r\n\r\n}\r\n```","```\r\npublic class CustomInterceptor extends EmptyInterceptor {\r\n}\r\n```","```\r\n@Override\r\npublic boolean onSave(Object entity, Serializable id, \r\n  Object[] state, String[] propertyNames, Type[] types) {\r\n\r\n    if (entity instanceof User) {\r\n        logger.info(((User) entity).toString());\r\n    }\r\n    return super.onSave(entity, id, state, propertyNames, types);\r\n}\r\n```","```\r\n@Override\r\npublic boolean onFlushDirty(Object entity, Serializable id, \r\n  Object[] currentState, Object [] previousState, \r\n  String[] propertyNames, Type[] types) {\r\n\r\n    if (entity instanceof User) {\r\n        ((User) entity).setLastModified(new Date());\r\n        logger.info(((User) entity).toString());\r\n    }\r\n    return super.onFlushDirty(entity, id, currentState, \r\n      previousState, propertyNames, types);\r\n}\r\n```","```\r\npublic static Session getSessionWithInterceptor(Interceptor interceptor) \r\n  throws IOException {\r\n    return getSessionFactory().withOptions()\r\n      .interceptor(interceptor).openSession();\r\n}\r\n```","```\r\nServiceRegistry serviceRegistry = configureServiceRegistry();\r\nSessionFactory sessionFactory = getSessionFactoryBuilder(serviceRegistry)\r\n  .applyInterceptor(new CustomInterceptor())\r\n  .build();\r\n```","```\r\nhibernate.current_session_context_class=org.hibernate.context.internal.ThreadLocalSessionContext\r\n```","```\r\n<property name=\"hibernate.current_session_context_class\">\r\n    org.hibernate.context.internal.ThreadLocalSessionContext\r\n</property>\r\n```"]