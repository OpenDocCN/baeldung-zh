["```\r\n@Query(\"SELECT u FROM User u WHERE u.status = 1\")\r\nCollection<User> findAllActiveUsers(); \r\n```","```\r\n@Query(\r\n  value = \"SELECT * FROM USERS u WHERE u.status = 1\", \r\n  nativeQuery = true)\r\nCollection<User> findAllActiveUsersNative(); \r\n```","```\r\nuserRepository.findAll(Sort.by(Sort.Direction.ASC, \"name\")); \r\n```","```\r\nuserRepository.findAll(Sort.by(\"LENGTH(name)\")); \r\n```","```\r\n@Query(value = \"SELECT u FROM User u\")\r\nList<User> findAllUsers(Sort sort); \r\n```","```\r\nuserRepository.findAllUsers(Sort.by(\"name\"));\r\n```","```\r\nuserRepository.findAllUsers(JpaSort.unsafe(\"LENGTH(name)\")); \r\n```","```\r\nSort.by(\"LENGTH(name)\"); \r\n```","```\r\n@Query(value = \"SELECT u FROM User u ORDER BY id\")\r\nPage<User> findAllUsersWithPagination(Pageable pageable); \r\n```","```\r\n@Query(\r\n  value = \"SELECT * FROM Users ORDER BY id\", \r\n  countQuery = \"SELECT count(*) FROM Users\", \r\n  nativeQuery = true)\r\nPage<User> findAllUsersWithPagination(Pageable pageable);\r\n```","```\r\n@Query(\r\n  value = \"SELECT * FROM Users ORDER BY id \\n-- #pageable\\n\",\r\n  countQuery = \"SELECT count(*) FROM Users\",\r\n  nativeQuery = true)\r\nPage<User> findAllUsersWithPagination(Pageable pageable);\r\n```","```\r\n@Query(\"SELECT u FROM User u WHERE u.status = ?1\")\r\nUser findUserByStatus(Integer status);\r\n\r\n@Query(\"SELECT u FROM User u WHERE u.status = ?1 and u.name = ?2\")\r\nUser findUserByStatusAndName(Integer status, String name); \r\n```","```\r\n@Query(\r\n  value = \"SELECT * FROM Users u WHERE u.status = ?1\", \r\n  nativeQuery = true)\r\nUser findUserByStatusNative(Integer status);\r\n```","```\r\n@Query(\"SELECT u FROM User u WHERE u.status = :status and u.name = :name\")\r\nUser findUserByStatusAndNameNamedParams(\r\n  @Param(\"status\") Integer status, \r\n  @Param(\"name\") String name); \r\n```","```\r\n@Query(\"SELECT u FROM User u WHERE u.status = :status and u.name = :name\")\r\nUser findUserByUserStatusAndUserName(@Param(\"status\") Integer userStatus, \r\n  @Param(\"name\") String userName); \r\n```","```\r\n@Query(value = \"SELECT * FROM Users u WHERE u.status = :status and u.name = :name\", \r\n  nativeQuery = true)\r\nUser findUserByStatusAndNameNamedParamsNative(\r\n  @Param(\"status\") Integer status, @Param(\"name\") String name);\r\n```","```\r\nSELECT u FROM User u WHERE u.name IN :names\r\n```","```\r\n@Query(value = \"SELECT u FROM User u WHERE u.name IN :names\")\r\nList<User> findUserByNameList(@Param(\"names\") Collection<String> names);\r\n```","```\r\n@Modifying\r\n@Query(\"update User u set u.status = :status where u.name = :name\")\r\nint updateUserSetStatusForName(@Param(\"status\") Integer status, \r\n  @Param(\"name\") String name); \r\n```","```\r\n@Modifying\r\n@Query(value = \"update Users u set u.status = ? where u.name = ?\", \r\n  nativeQuery = true)\r\nint updateUserSetStatusForNameNative(Integer status, String name);\r\n```","```\r\n@Modifying\r\n@Query(\r\n  value = \r\n    \"insert into Users (name, age, email, status) values (:name, :age, :email, :status)\",\r\n  nativeQuery = true)\r\nvoid insertUser(@Param(\"name\") String name, @Param(\"age\") Integer age, \r\n  @Param(\"status\") Integer status, @Param(\"email\") String email);\r\n```","```\r\nSELECT u FROM User u WHERE u.email LIKE '%email1%' \r\n    or  u.email LIKE '%email2%'\r\n    ... \r\n    or  u.email LIKE '%emailn%'\r\n```","```\r\npublic interface UserRepositoryCustom {\r\n    List<User> findUserByEmails(Set<String> emails);\r\n}\r\n```","```\r\npublic class UserRepositoryCustomImpl implements UserRepositoryCustom {\r\n\r\n    @PersistenceContext\r\n    private EntityManager entityManager;\r\n\r\n    @Override\r\n    public List<User> findUserByEmails(Set<String> emails) {\r\n        CriteriaBuilder cb = entityManager.getCriteriaBuilder();\r\n        CriteriaQuery<User> query = cb.createQuery(User.class);\r\n        Root<User> user = query.from(User.class);\r\n\r\n        Path<String> emailPath = user.get(\"email\");\r\n\r\n        List<Predicate> predicates = new ArrayList<>();\r\n        for (String email : emails) {\r\n            predicates.add(cb.like(emailPath, email));\r\n        }\r\n        query.select(user)\r\n            .where(cb.or(predicates.toArray(new Predicate[predicates.size()])));\r\n\r\n        return entityManager.createQuery(query)\r\n            .getResultList();\r\n    }\r\n}\r\n```","```\r\npublic interface UserRepository extends JpaRepository<User, Integer>, UserRepositoryCustom {\r\n    //  query methods from section 2 - section 7\r\n}\r\n```","```\r\nSet<String> emails = new HashSet<>();\r\n// filling the set with any number of items\r\n\r\nuserRepository.findUserByEmails(emails); \r\n```"]