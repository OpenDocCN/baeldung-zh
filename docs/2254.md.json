["```\r\npublic boolean twoSumSlow(int[] input, int targetValue) {\r\n\r\n    for (int i = 0; i < input.length; i++) {\r\n        for (int j = 1; j < input.length; j++) {\r\n            if (input[i] + input[j] == targetValue) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n```","```\r\npublic boolean twoSum(int[] input, int targetValue) {\r\n\r\n    int pointerOne = 0;\r\n    int pointerTwo = input.length - 1;\r\n\r\n    while (pointerOne < pointerTwo) {\r\n        int sum = input[pointerOne] + input[pointerTwo];\r\n\r\n        if (sum == targetValue) {\r\n            return true;\r\n        } else if (sum < targetValue) {\r\n            pointerOne++;\r\n        } else {\r\n            pointerTwo--;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n```","```\r\npublic void rotate(int[] input, int step) {\r\n    step %= input.length;\r\n    reverse(input, 0, input.length - 1);\r\n    reverse(input, 0, step - 1);\r\n    reverse(input, step, input.length - 1);\r\n}\r\n\r\nprivate void reverse(int[] input, int start, int end) {\r\n    while (start < end) {\r\n        int temp = input[start];\r\n        input[start] = input[end];\r\n        input[end] = temp;\r\n        start++;\r\n        end--;\r\n    }\r\n}\r\n```","```\r\npublic <T> T findMiddle(MyNode<T> head) {\r\n    MyNode<T> slowPointer = head;\r\n    MyNode<T> fastPointer = head;\r\n\r\n    while (fastPointer.next != null && fastPointer.next.next != null) {\r\n        fastPointer = fastPointer.next.next;\r\n        slowPointer = slowPointer.next;\r\n    }\r\n    return slowPointer.data;\r\n}\r\n```"]