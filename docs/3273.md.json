["```\r\nbyte[] inFileBytes = Files.readAllBytes(Paths.get(IN_FILE)); \r\nbyte[] encoded = java.util.Base64.getEncoder().encode(inFileBytes);\r\n```","```\r\ntry (OutputStream os = java.util.Base64.getEncoder().wrap(new FileOutputStream(OUT_FILE));\r\n  FileInputStream fis = new FileInputStream(IN_FILE)) {\r\n    byte[] bytes = new byte[1024];\r\n    int read;\r\n    while ((read = fis.read(bytes)) > -1) {\r\n        os.write(bytes, 0, read);\r\n    }\r\n}\r\n```","```\r\nbyte[] decoded = java.util.Base64.getDecoder().decode(encoded);\r\n\r\nFileOutputStream fos = new FileOutputStream(OUT_FILE);\r\nfos.write(decoded);\r\nfos.flush();\r\nfos.close();\r\n```","```\r\n<dependency>\r\n    <groupId>commons-codec</groupId>\r\n    <artifactId>commons-codec</artifactId>\r\n    <version>1.14</version>\r\n</dependency> \r\n```","```\r\nbyte[] inFileBytes = Files.readAllBytes(Paths.get(IN_FILE));\r\nbyte[] encoded = org.apache.commons.codec.binary.Base64.encodeBase64(inFileBytes); \r\n```","```\r\nbyte[] decoded = org.apache.commons.codec.binary.Base64.decodeBase64(encoded);\r\n\r\nFileOutputStream fos = new FileOutputStream(OUT_FILE);\r\nfos.write(decoded);\r\nfos.flush();\r\nfos.close(); \r\n```","```\r\npublic class EncodeDecodeUnitTest {\r\n\r\n    private static final String IN_FILE = // path to file to be encoded from;\r\n    private static final String OUT_FILE = // path to file to be decoded into;\r\n    private static byte[] inFileBytes;\r\n\r\n    @BeforeClass\r\n    public static void fileToByteArray() throws IOException {\r\n        inFileBytes = Files.readAllBytes(Paths.get(IN_FILE));\r\n    }\r\n\r\n    @Test\r\n    public void givenJavaBase64_whenEncoded_thenDecodedOK() throws IOException {\r\n        byte[] encoded = java.util.Base64.getEncoder().encode(inFileBytes);\r\n        byte[] decoded = java.util.Base64.getDecoder().decode(encoded);\r\n        writeToFile(OUT_FILE, decoded);\r\n\r\n        assertNotEquals(encoded.length, decoded.length);\r\n        assertEquals(inFileBytes.length, decoded.length);\r\n        assertArrayEquals(decoded, inFileBytes);\r\n    }\r\n\r\n    @Test\r\n    public void givenJavaBase64_whenEncodedStream_thenDecodedStreamOK() throws IOException {\r\n        try (OutputStream os = java.util.Base64.getEncoder().wrap(new FileOutputStream(OUT_FILE));\r\n          FileInputStream fis = new FileInputStream(IN_FILE)) {\r\n            byte[] bytes = new byte[1024];\r\n            int read;\r\n            while ((read = fis.read(bytes)) > -1) {\r\n                os.write(bytes, 0, read);\r\n            }\r\n        }\r\n\r\n        byte[] encoded = java.util.Base64.getEncoder().encode(inFileBytes);\r\n        byte[] encodedOnDisk = Files.readAllBytes(Paths.get(OUT_FILE));\r\n        assertArrayEquals(encoded, encodedOnDisk);\r\n\r\n        byte[] decoded = java.util.Base64.getDecoder().decode(encoded);\r\n        byte[] decodedOnDisk = java.util.Base64.getDecoder().decode(encodedOnDisk);\r\n        assertArrayEquals(decoded, decodedOnDisk);\r\n    }\r\n\r\n    @Test\r\n    public void givenApacheCommons_givenJavaBase64_whenEncoded_thenDecodedOK() throws IOException {\r\n        byte[] encoded = org.apache.commons.codec.binary.Base64.encodeBase64(inFileBytes);\r\n        byte[] decoded = org.apache.commons.codec.binary.Base64.decodeBase64(encoded);\r\n\r\n        writeToFile(OUT_FILE, decoded);\r\n\r\n        assertNotEquals(encoded.length, decoded.length);\r\n        assertEquals(inFileBytes.length, decoded.length);\r\n\r\n        assertArrayEquals(decoded, inFileBytes);\r\n    }\r\n\r\n    private void writeToFile(String fileName, byte[] bytes) throws IOException {\r\n        FileOutputStream fos = new FileOutputStream(fileName);\r\n        fos.write(bytes);\r\n        fos.flush();\r\n        fos.close();\r\n    }\r\n}\r\n```"]