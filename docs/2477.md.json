["```\r\nBlockingQueue<Integer> boundedQueue = new LinkedBlockingQueue<>(100);\r\n```","```\r\nBlockingQueue<Integer> unboundedQueue = new LinkedBlockingQueue<>();\r\n```","```\r\nCollection<Integer> listOfNumbers = Arrays.asList(1,2,3,4,5);\r\nBlockingQueue<Integer> queue = new LinkedBlockingQueue<>(listOfNumbers);\r\n```","```\r\nExecutorService executorService = Executors.newFixedThreadPool(1);\r\nLinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<>();\r\nexecutorService.submit(() -> {\r\n  try {\r\n    queue.take();\r\n  } \r\n  catch (InterruptedException e) {\r\n    // exception handling\r\n  }\r\n});\r\n```","```\r\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\r\n```","```\r\nCollection<Integer> listOfNumbers = Arrays.asList(1,2,3,4,5);\r\nConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>(listOfNumbers);\r\n```","```\r\nint element = 1;\r\nExecutorService executorService = Executors.newFixedThreadPool(2);\r\nConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();\r\n\r\nRunnable offerTask = () -> queue.offer(element);\r\n\r\nCallable<Integer> pollTask = () -> {\r\n  while (queue.peek() != null) {\r\n    return queue.poll().intValue();\r\n  }\r\n  return null;\r\n};\r\n\r\nexecutorService.submit(offerTask);\r\nFuture<Integer> returnedElement = executorService.submit(pollTask);\r\nassertThat(returnedElement.get().intValue(), is(equalTo(element))); \r\n```"]