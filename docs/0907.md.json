["```\r\n<dependency>\r\n    <groupId>org.mapstruct</groupId>\r\n    <artifactId>mapstruct</artifactId>\r\n    <version>1.4.2.Final</version> \r\n</dependency>\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-compiler-plugin</artifactId>\r\n    <version>3.5.1</version>\r\n    <configuration>\r\n        <source>1.8</source>\r\n        <target>1.8</target>\r\n        <annotationProcessorPaths>\r\n            <path>\r\n                <groupId>org.mapstruct</groupId>\r\n                <artifactId>mapstruct-processor</artifactId>\r\n                <version>1.4.2.Final</version>\r\n            </path>\r\n        </annotationProcessorPaths>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\npublic class SimpleSource {\r\n    private String name;\r\n    private String description;\r\n    // getters and setters\r\n}\r\n\r\npublic class SimpleDestination {\r\n    private String name;\r\n    private String description;\r\n    // getters and setters\r\n}\r\n```","```\r\n@Mapper\r\npublic interface SimpleSourceDestinationMapper {\r\n    SimpleDestination sourceToDestination(SimpleSource source);\r\n    SimpleSource destinationToSource(SimpleDestination destination);\r\n}\r\n```","```\r\npublic class SimpleSourceDestinationMapperImpl\r\n  implements SimpleSourceDestinationMapper {\r\n    @Override\r\n    public SimpleDestination sourceToDestination(SimpleSource source) {\r\n        if ( source == null ) {\r\n            return null;\r\n        }\r\n        SimpleDestination simpleDestination = new SimpleDestination();\r\n        simpleDestination.setName( source.getName() );\r\n        simpleDestination.setDescription( source.getDescription() );\r\n        return simpleDestination;\r\n    }\r\n    @Override\r\n    public SimpleSource destinationToSource(SimpleDestination destination){\r\n        if ( destination == null ) {\r\n            return null;\r\n        }\r\n        SimpleSource simpleSource = new SimpleSource();\r\n        simpleSource.setName( destination.getName() );\r\n        simpleSource.setDescription( destination.getDescription() );\r\n        return simpleSource;\r\n    }\r\n}\r\n```","```\r\npublic class SimpleSourceDestinationMapperIntegrationTest {\r\n    private SimpleSourceDestinationMapper mapper\r\n      = Mappers.getMapper(SimpleSourceDestinationMapper.class);\r\n    @Test\r\n    public void givenSourceToDestination_whenMaps_thenCorrect() {\r\n        SimpleSource simpleSource = new SimpleSource();\r\n        simpleSource.setName(\"SourceName\");\r\n        simpleSource.setDescription(\"SourceDescription\");\r\n        SimpleDestination destination = mapper.sourceToDestination(simpleSource);\r\n\r\n        assertEquals(simpleSource.getName(), destination.getName());\r\n        assertEquals(simpleSource.getDescription(), \r\n          destination.getDescription());\r\n    }\r\n    @Test\r\n    public void givenDestinationToSource_whenMaps_thenCorrect() {\r\n        SimpleDestination destination = new SimpleDestination();\r\n        destination.setName(\"DestinationName\");\r\n        destination.setDescription(\"DestinationDescription\");\r\n        SimpleSource source = mapper.destinationToSource(destination);\r\n        assertEquals(destination.getName(), source.getName());\r\n        assertEquals(destination.getDescription(),\r\n          source.getDescription());\r\n    }\r\n}\r\n```","```\r\n@Mapper(componentModel = \"spring\")\r\npublic interface SimpleSourceDestinationMapper\r\n```","```\r\n@Mapper(componentModel = \"spring\")\r\npublic abstract class SimpleDestinationMapperUsingInjectedService\r\n```","```\r\n@Mapper(componentModel = \"spring\")\r\npublic abstract class SimpleDestinationMapperUsingInjectedService {\r\n\r\n    @Autowired\r\n    protected SimpleService simpleService;\r\n\r\n    @Mapping(target = \"name\", expression = \"java(simpleService.enrichName(source.getName()))\")\r\n    public abstract SimpleDestination sourceToDestination(SimpleSource source);\r\n}\r\n```","```\r\npublic class EmployeeDTO {\r\n    private int employeeId;\r\n    private String employeeName;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n    // getters and setters\r\n}\r\n```","```\r\n@Mapper\r\npublic interface EmployeeMapper {\r\n    @Mappings({\r\n      @Mapping(target=\"employeeId\", source=\"entity.id\"),\r\n      @Mapping(target=\"employeeName\", source=\"entity.name\")\r\n    })\r\n    EmployeeDTO employeeToEmployeeDTO(Employee entity);\r\n    @Mappings({\r\n      @Mapping(target=\"id\", source=\"dto.employeeId\"),\r\n      @Mapping(target=\"name\", source=\"dto.employeeName\")\r\n    })\r\n    Employee employeeDTOtoEmployee(EmployeeDTO dto);\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeDTOwithDiffNametoEmployee_whenMaps_thenCorrect() {\r\n    EmployeeDTO dto = new EmployeeDTO();\r\n    dto.setEmployeeId(1);\r\n    dto.setEmployeeName(\"John\");\r\n\r\n    Employee entity = mapper.employeeDTOtoEmployee(dto);\r\n\r\n    assertEquals(dto.getEmployeeId(), entity.getId());\r\n    assertEquals(dto.getEmployeeName(), entity.getName());\r\n}\r\n```","```\r\npublic class EmployeeDTO {\r\n    private int employeeId;\r\n    private String employeeName;\r\n    private DivisionDTO division;\r\n    // getters and setters omitted\r\n}\r\n```","```\r\npublic class Employee {\r\n    private int id;\r\n    private String name;\r\n    private Division division;\r\n    // getters and setters omitted\r\n}\r\n```","```\r\npublic class Division {\r\n    private int id;\r\n    private String name;\r\n    // default constructor, getters and setters omitted\r\n}\r\n```","```\r\nDivisionDTO divisionToDivisionDTO(Division entity);\r\n\r\nDivision divisionDTOtoDivision(DivisionDTO dto);\r\n```","```\r\n@Test\r\npublic void givenEmpDTONestedMappingToEmp_whenMaps_thenCorrect() {\r\n    EmployeeDTO dto = new EmployeeDTO();\r\n    dto.setDivision(new DivisionDTO(1, \"Division1\"));\r\n    Employee entity = mapper.employeeDTOtoEmployee(dto);\r\n    assertEquals(dto.getDivision().getId(), \r\n      entity.getDivision().getId());\r\n    assertEquals(dto.getDivision().getName(), \r\n      entity.getDivision().getName());\r\n}\r\n```","```\r\npublic class Employee {\r\n    // other fields\r\n    private Date startDt;\r\n    // getters and setters\r\n}\r\n```","```\r\npublic class EmployeeDTO {\r\n    // other fields\r\n    private String employeeStartDt;\r\n    // getters and setters\r\n}\r\n```","```\r\n@Mappings({\r\n  @Mapping(target=\"employeeId\", source = \"entity.id\"),\r\n  @Mapping(target=\"employeeName\", source = \"entity.name\"),\r\n  @Mapping(target=\"employeeStartDt\", source = \"entity.startDt\",\r\n           dateFormat = \"dd-MM-yyyy HH:mm:ss\")})\r\nEmployeeDTO employeeToEmployeeDTO(Employee entity);\r\n@Mappings({\r\n  @Mapping(target=\"id\", source=\"dto.employeeId\"),\r\n  @Mapping(target=\"name\", source=\"dto.employeeName\"),\r\n  @Mapping(target=\"startDt\", source=\"dto.employeeStartDt\",\r\n           dateFormat=\"dd-MM-yyyy HH:mm:ss\")})\r\nEmployee employeeDTOtoEmployee(EmployeeDTO dto);\r\n```","```\r\nprivate static final String DATE_FORMAT = \"dd-MM-yyyy HH:mm:ss\";\r\n@Test\r\npublic void givenEmpStartDtMappingToEmpDTO_whenMaps_thenCorrect() throws ParseException {\r\n    Employee entity = new Employee();\r\n    entity.setStartDt(new Date());\r\n    EmployeeDTO dto = mapper.employeeToEmployeeDTO(entity);\r\n    SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\r\n\r\n    assertEquals(format.parse(dto.getEmployeeStartDt()).toString(),\r\n      entity.getStartDt().toString());\r\n}\r\n@Test\r\npublic void givenEmpDTOStartDtMappingToEmp_whenMaps_thenCorrect() throws ParseException {\r\n    EmployeeDTO dto = new EmployeeDTO();\r\n    dto.setEmployeeStartDt(\"01-04-2016 01:00:00\");\r\n    Employee entity = mapper.employeeDTOtoEmployee(dto);\r\n    SimpleDateFormat format = new SimpleDateFormat(DATE_FORMAT);\r\n\r\n    assertEquals(format.parse(dto.getEmployeeStartDt()).toString(),\r\n      entity.getStartDt().toString());\r\n}\r\n```","```\r\npublic class Transaction {\r\n    private Long id;\r\n    private String uuid = UUID.randomUUID().toString();\r\n    private BigDecimal total;\r\n\r\n    //standard getters\r\n}\r\n```","```\r\npublic class TransactionDTO {\r\n\r\n    private String uuid;\r\n    private Long totalInCents;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Mapper\r\nabstract class TransactionMapper {\r\n\r\n    public TransactionDTO toTransactionDTO(Transaction transaction) {\r\n        TransactionDTO transactionDTO = new TransactionDTO();\r\n        transactionDTO.setUuid(transaction.getUuid());\r\n        transactionDTO.setTotalInCents(transaction.getTotal()\r\n          .multiply(new BigDecimal(\"100\")).longValue());\r\n        return transactionDTO;\r\n    }\r\n\r\n    public abstract List<TransactionDTO> toTransactionDTO(\r\n      Collection<Transaction> transactions);\r\n}\r\n```","```\r\n@Generated\r\nclass TransactionMapperImpl extends TransactionMapper {\r\n\r\n    @Override\r\n    public List<TransactionDTO> toTransactionDTO(Collection<Transaction> transactions) {\r\n        if ( transactions == null ) {\r\n            return null;\r\n        }\r\n\r\n        List<TransactionDTO> list = new ArrayList<>();\r\n        for ( Transaction transaction : transactions ) {\r\n            list.add( toTransactionDTO( transaction ) );\r\n        }\r\n\r\n        return list;\r\n    }\r\n}\r\n```","```\r\npublic class Car {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\npublic class BioDieselCar extends Car {\r\n}\r\n```","```\r\npublic class ElectricCar extends Car {\r\n}\r\n```","```\r\npublic class CarDTO {\r\n    private int id;\r\n    private String name;\r\n    private FuelType fuelType;\r\n}\r\n```","```\r\npublic enum FuelType {\r\n    ELECTRIC, BIO_DIESEL\r\n}\r\n```","```\r\n@Mapper\r\npublic abstract class CarsMapper {\r\n    @BeforeMapping\r\n    protected void enrichDTOWithFuelType(Car car, @MappingTarget CarDTO carDto) {\r\n        if (car instanceof ElectricCar) {\r\n            carDto.setFuelType(FuelType.ELECTRIC);\r\n        }\r\n        if (car instanceof BioDieselCar) { \r\n            carDto.setFuelType(FuelType.BIO_DIESEL);\r\n        }\r\n    }\r\n\r\n    @AfterMapping\r\n    protected void convertNameToUpperCase(@MappingTarget CarDTO carDto) {\r\n        carDto.setName(carDto.getName().toUpperCase());\r\n    }\r\n\r\n    public abstract CarDTO toCarDto(Car car);\r\n}\r\n```","```\r\n@Generated\r\npublic class CarsMapperImpl extends CarsMapper {\r\n\r\n    @Override\r\n    public CarDTO toCarDto(Car car) {\r\n        if (car == null) {\r\n            return null;\r\n        }\r\n\r\n        CarDTO carDTO = new CarDTO();\r\n\r\n        enrichDTOWithFuelType(car, carDTO);\r\n\r\n        carDTO.setId(car.getId());\r\n        carDTO.setName(car.getName());\r\n\r\n        convertNameToUpperCase(carDTO);\r\n\r\n        return carDTO;\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-compiler-plugin</artifactId>\r\n    <version>3.5.1</version>\r\n    <configuration>\r\n        <source>1.8</source>\r\n        <target>1.8</target>\r\n        <annotationProcessorPaths>\r\n            <path>\r\n                <groupId>org.mapstruct</groupId>\r\n                <artifactId>mapstruct-processor</artifactId>\r\n                <version>1.4.2.Final</version>\r\n            </path>\r\n            <path>\r\n                <groupId>org.projectlombok</groupId>\r\n                <artifactId>lombok</artifactId>\r\n\t        <version>1.18.4</version>\r\n            </path>\r\n            <path>\r\n                <groupId>org.projectlombok</groupId>\r\n                <artifactId>lombok-mapstruct-binding</artifactId>\r\n\t        <version>0.2.0</version>\r\n            </path>\r\n        </annotationProcessorPaths>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n@Getter\r\n@Setter\r\npublic class Car {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\n@Getter\r\n@Setter\r\npublic class CarDTO {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\n@Mapper\r\npublic interface CarMapper {\r\n    CarMapper INSTANCE = Mappers.getMapper(CarMapper.class);\r\n    CarDTO carToCarDTO(Car car);\r\n}\r\n```","```\r\npublic class Person {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\npublic class PersonDTO {\r\n    private int id;\r\n    private String name;\r\n}\r\n```","```\r\n@Mapper\r\npublic interface PersonMapper {\r\n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\r\n\r\n    @Mapping(target = \"id\", source = \"person.id\", \r\n      defaultExpression = \"java(java.util.UUID.randomUUID().toString())\")\r\n    PersonDTO personToPersonDTO(Person person);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPersonEntitytoPersonWithExpression_whenMaps_thenCorrect() \r\n    Person entity  = new Person();\r\n    entity.setName(\"Micheal\");\r\n    PersonDTO personDto = PersonMapper.INSTANCE.personToPersonDTO(entity);\r\n    assertNull(entity.getId());\r\n    assertNotNull(personDto.getId());\r\n    assertEquals(personDto.getName(), entity.getName());\r\n}\r\n```"]