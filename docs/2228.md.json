["```\r\nprivate int hash(int i, int max, int numberOfBuckets) {\r\n    return (int) ((double) i / max * (numberOfBuckets - 1));\r\n}\r\n```","```\r\nfinal int numberOfBuckets = (int) Math.sqrt(initialList.size());\r\nList<List<Integer>> buckets = new ArrayList<>(numberOfBuckets);\r\nfor(int i = 0; i < numberOfBuckets; i++) {\r\n    buckets.add(new ArrayList<>());\r\n}\r\n```","```\r\nprivate int findMax(List<Integer> input) {\r\n    int m = Integer.MIN_VALUE;\r\n    for (int i : input) {\r\n        m = Math.max(i, m);\r\n    }\r\n    return m;\r\n}\r\n```","```\r\nint max = findMax(initialList);\r\n\r\nfor (int i : initialList) {\r\n    buckets.get(hash(i, max, numberOfBuckets)).add(i);\r\n} \r\n```","```\r\nComparator<Integer> comparator = Comparator.naturalOrder();\r\n\r\nfor(List<Integer> bucket  : buckets){\r\n    bucket.sort(comparator);\r\n}\r\n```","```\r\nList<Integer> sortedArray = new LinkedList<>();\r\n\r\nfor(List<Integer> bucket : buckets) {\r\n    sortedArray.addAll(bucket);\r\n} \r\n\r\nreturn sortedArray;\r\n```","```\r\nBucketSorter sorter = new IntegerBucketSorter();\r\n\r\nList<Integer> unsorted = Arrays.asList(80,50,60,30,20,10,70,0,40,500,600,602,200,15);\r\nList<Integer> expected = Arrays.asList(0,10,15,20,30,40,50,60,70,80,200,500,600,602);\r\n\r\nList<Integer> sorted = sorter.sort(unsorted);\r\n\r\nassertEquals(expected, sorted);\r\n```"]