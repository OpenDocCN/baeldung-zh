["```\r\n-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler\r\n```","```\r\ninterface JVMCICompiler {\r\n    byte[] compileMethod(byte[] bytecode);\r\n}\r\n```","```\r\npublic class CountUppercase {\r\n    static final int ITERATIONS = Math.max(Integer.getInteger(\"iterations\", 1), 1);\r\n\r\n    public static void main(String[] args) {\r\n        String sentence = String.join(\" \", args);\r\n        for (int iter = 0; iter < ITERATIONS; iter++) {\r\n            if (ITERATIONS != 1) {\r\n                System.out.println(\"-- iteration \" + (iter + 1) + \" --\");\r\n            }\r\n            long total = 0, start = System.currentTimeMillis(), last = start;\r\n            for (int i = 1; i < 10_000_000; i++) {\r\n                total += sentence\r\n                  .chars()\r\n                  .filter(Character::isUpperCase)\r\n                  .count();\r\n                if (i % 1_000_000 == 0) {\r\n                    long now = System.currentTimeMillis();\r\n                    System.out.printf(\"%d (%d ms)%n\", i / 1_000_000, now - last);\r\n                    last = now;\r\n                }\r\n            }\r\n            System.out.printf(\"total: %d (%d ms)%n\", total, System.currentTimeMillis() - start);\r\n        }\r\n    }\r\n}\r\n```","```\r\njavac CountUppercase.java\r\njava -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler\r\n```","```\r\n1 (1581 ms)\r\n2 (480 ms)\r\n3 (364 ms)\r\n4 (231 ms)\r\n5 (196 ms)\r\n6 (121 ms)\r\n7 (116 ms)\r\n8 (116 ms)\r\n9 (116 ms)\r\ntotal: 59999994 (3436 ms)\r\n```","```\r\n-Dgraal.PrintCompilation=true\r\n```","```\r\njava -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:-UseJVMCICompiler \r\n1 (510 ms)\r\n2 (375 ms)\r\n3 (365 ms)\r\n4 (368 ms)\r\n5 (348 ms)\r\n6 (370 ms)\r\n7 (353 ms)\r\n8 (348 ms)\r\n9 (369 ms)\r\ntotal: 59999994 (4004 ms)\r\n```","```\r\nint average(int a, int b) {\r\n    return (a + b) / 2;\r\n}\r\n```","```\r\nint average(int[] values) {\r\n    int sum = 0;\r\n    for (int n = 0; n < values.length; n++) {\r\n        sum += values[n];\r\n    }\r\n    return sum / values.length;\r\n}\r\n```"]