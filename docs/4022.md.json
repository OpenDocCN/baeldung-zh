["```\r\nabstract class Mercator {\r\n    final static double RADIUS_MAJOR = 6378137.0;\r\n    final static double RADIUS_MINOR = 6356752.3142;\r\n\r\n    abstract double yAxisProjection(double input);\r\n    abstract double xAxisProjection(double input);\r\n}\r\n```","```\r\npublic class SphericalMercator extends Mercator {\r\n\r\n    @Override\r\n    double xAxisProjection(double input) {\r\n        return Math.toRadians(input) * RADIUS_MAJOR;\r\n    }\r\n\r\n    @Override\r\n    double yAxisProjection(double input) {\r\n        return Math.log(Math.tan(Math.PI / 4 + Math.toRadians(input) / 2)) * RADIUS_MAJOR;\r\n    }\r\n}\r\n```","```\r\nAssert.assertEquals(2449028.7974520186, sphericalMercator.xAxisProjection(22));\r\nAssert.assertEquals(5465442.183322753, sphericalMercator.yAxisProjection(44));\r\n```","```\r\nclass EllipticalMercator extends Mercator {\r\n    @Override\r\n    double yAxisProjection(double input) {\r\n\r\n        input = Math.min(Math.max(input, -89.5), 89.5);\r\n        double earthDimensionalRateNormalized = 1.0 - Math.pow(RADIUS_MINOR / RADIUS_MAJOR, 2);\r\n\r\n        double inputOnEarthProj = Math.sqrt(earthDimensionalRateNormalized) * \r\n          Math.sin( Math.toRadians(input));\r\n\r\n        inputOnEarthProj = Math.pow(((1.0 - inputOnEarthProj) / (1.0+inputOnEarthProj)), \r\n          0.5 * Math.sqrt(earthDimensionalRateNormalized));\r\n\r\n        double inputOnEarthProjNormalized = \r\n          Math.tan(0.5 * ((Math.PI * 0.5) - Math.toRadians(input))) / inputOnEarthProj;\r\n\r\n        return (-1) * RADIUS_MAJOR * Math.log(inputOnEarthProjNormalized);\r\n    }\r\n\r\n    @Override\r\n    double xAxisProjection(double input) {\r\n        return RADIUS_MAJOR * Math.toRadians(input);\r\n    }\r\n}\r\n```","```\r\nAssert.assertEquals(2449028.7974520186, ellipticalMercator.xAxisProjection(22));\r\nAssert.assertEquals(5435749.887511954, ellipticalMercator.yAxisProjection(44));\r\n```"]