["```\r\nfunction obtainAccessToken(params) {\r\n    var req = {\r\n        method: 'POST',\r\n        url: \"oauth/token\",\r\n        headers: {\"Content-type\": \"application/x-www-form-urlencoded; charset=utf-8\"},\r\n        data: $httpParamSerializer(params)\r\n    }\r\n    $http(req).then(\r\n        function(data) {\r\n            $http.defaults.headers.common.Authorization= 'Bearer ' + data.data.access_token;\r\n            var expireDate = new Date (new Date().getTime() + (1000 * data.data.expires_in));\r\n            $cookies.put(\"access_token\", data.data.access_token, {'expires': expireDate});\r\n            window.location.href=\"index\";\r\n        },function() {\r\n            console.log(\"error\");\r\n            window.location.href = \"login\";\r\n        });   \r\n}\r\n```","```\r\n$scope.loginData = {\r\n    grant_type:\"password\", \r\n    username: \"\", \r\n    password: \"\", \r\n    client_id: \"fooClientIdPassword\"\r\n};\r\n\r\n$scope.login = function() {   \r\n    obtainAccessToken($scope.loginData);\r\n}\r\n```","```\r\nzuul:\r\n  routes:\r\n    oauth:\r\n      path: /oauth/**\r\n      url: http://localhost:8081/spring-security-oauth-server/oauth\r\n```","```\r\n@Component\r\npublic class CustomPreZuulFilter extends ZuulFilter {\r\n    @Override\r\n    public Object run() {\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        if (ctx.getRequest().getRequestURI().contains(\"oauth/token\")) {\r\n            byte[] encoded;\r\n            try {\r\n                encoded = Base64.encode(\"fooClientIdPassword:secret\".getBytes(\"UTF-8\"));\r\n                ctx.addZuulRequestHeader(\"Authorization\", \"Basic \" + new String(encoded));\r\n            } catch (UnsupportedEncodingException e) {\r\n                logger.error(\"Error occured in pre filter\", e);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return -2;\r\n    }\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return \"pre\";\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomPostZuulFilter extends ZuulFilter {\r\n    private ObjectMapper mapper = new ObjectMapper();\r\n\r\n    @Override\r\n    public Object run() {\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        try {\r\n            InputStream is = ctx.getResponseDataStream();\r\n            String responseBody = IOUtils.toString(is, \"UTF-8\");\r\n            if (responseBody.contains(\"refresh_token\")) {\r\n                Map<String, Object> responseMap = mapper.readValue(\r\n                  responseBody, new TypeReference<Map<String, Object>>() {});\r\n                String refreshToken = responseMap.get(\"refresh_token\").toString();\r\n                responseMap.remove(\"refresh_token\");\r\n                responseBody = mapper.writeValueAsString(responseMap);\r\n\r\n                Cookie cookie = new Cookie(\"refreshToken\", refreshToken);\r\n                cookie.setHttpOnly(true);\r\n                cookie.setSecure(true);\r\n                cookie.setPath(ctx.getRequest().getContextPath() + \"/oauth/token\");\r\n                cookie.setMaxAge(2592000); // 30 days\r\n                ctx.getResponse().addCookie(cookie);\r\n            }\r\n            ctx.setResponseBody(responseBody);\r\n        } catch (IOException e) {\r\n            logger.error(\"Error occured in zuul post filter\", e);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return 10;\r\n    }\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return \"post\";\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class SameSiteConfig implements WebMvcConfigurer {\r\n    @Bean\r\n    public TomcatContextCustomizer sameSiteCookiesConfig() {\r\n        return context -> {\r\n            final Rfc6265CookieProcessor cookieProcessor = new Rfc6265CookieProcessor();\r\n            cookieProcessor.setSameSiteCookies(SameSiteCookies.STRICT.getValue());\r\n            context.setCookieProcessor(cookieProcessor);\r\n        };\r\n    }\r\n}\r\n```","```\r\npublic Object run() {\r\n    RequestContext ctx = RequestContext.getCurrentContext();\r\n    ...\r\n    HttpServletRequest req = ctx.getRequest();\r\n    String refreshToken = extractRefreshToken(req);\r\n    if (refreshToken != null) {\r\n        Map<String, String[]> param = new HashMap<String, String[]>();\r\n        param.put(\"refresh_token\", new String[] { refreshToken });\r\n        param.put(\"grant_type\", new String[] { \"refresh_token\" });\r\n        ctx.setRequest(new CustomHttpServletRequest(req, param));\r\n    }\r\n    ...\r\n}\r\n\r\nprivate String extractRefreshToken(HttpServletRequest req) {\r\n    Cookie[] cookies = req.getCookies();\r\n    if (cookies != null) {\r\n        for (int i = 0; i < cookies.length; i++) {\r\n            if (cookies[i].getName().equalsIgnoreCase(\"refreshToken\")) {\r\n                return cookies[i].getValue();\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n```","```\r\npublic class CustomHttpServletRequest extends HttpServletRequestWrapper {\r\n    private Map<String, String[]> additionalParams;\r\n    private HttpServletRequest request;\r\n\r\n    public CustomHttpServletRequest(\r\n      HttpServletRequest request, Map<String, String[]> additionalParams) {\r\n        super(request);\r\n        this.request = request;\r\n        this.additionalParams = additionalParams;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String[]> getParameterMap() {\r\n        Map<String, String[]> map = request.getParameterMap();\r\n        Map<String, String[]> param = new HashMap<String, String[]>();\r\n        param.putAll(map);\r\n        param.putAll(additionalParams);\r\n        return param;\r\n    }\r\n}\r\n```","```\r\n$scope.refreshAccessToken = function() {\r\n    obtainAccessToken($scope.refreshData);\r\n}\r\n```","```\r\n$scope.refreshData = {grant_type:\"refresh_token\"};\r\n```"]