["```\r\n<dependency>\r\n    <groupId>com.datastax.cassandra</groupId>\r\n    <artifactId>cassandra-driver-core</artifactId>\r\n    <version>3.1.0</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.cassandraunit</groupId>\r\n    <artifactId>cassandra-unit</artifactId>\r\n    <version>3.0.0.1</version>\r\n</dependency>\r\n```","```\r\npublic class CassandraConnector {\r\n\r\n    private Cluster cluster;\r\n\r\n    private Session session;\r\n\r\n    public void connect(String node, Integer port) {\r\n        Builder b = Cluster.builder().addContactPoint(node);\r\n        if (port != null) {\r\n            b.withPort(port);\r\n        }\r\n        cluster = b.build();\r\n\r\n        session = cluster.connect();\r\n    }\r\n\r\n    public Session getSession() {\r\n        return this.session;\r\n    }\r\n\r\n    public void close() {\r\n        session.close();\r\n        cluster.close();\r\n    }\r\n}\r\n```","```\r\npublic void createKeyspace(\r\n  String keyspaceName, String replicationStrategy, int replicationFactor) {\r\n  StringBuilder sb = \r\n    new StringBuilder(\"CREATE KEYSPACE IF NOT EXISTS \")\r\n      .append(keyspaceName).append(\" WITH replication = {\")\r\n      .append(\"'class':'\").append(replicationStrategy)\r\n      .append(\"','replication_factor':\").append(replicationFactor)\r\n      .append(\"};\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\nprivate KeyspaceRepository schemaRepository;\r\nprivate Session session;\r\n\r\n@Before\r\npublic void connect() {\r\n    CassandraConnector client = new CassandraConnector();\r\n    client.connect(\"127.0.0.1\", 9142);\r\n    this.session = client.getSession();\r\n    schemaRepository = new KeyspaceRepository(session);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingAKeyspace_thenCreated() {\r\n    String keyspaceName = \"library\";\r\n    schemaRepository.createKeyspace(keyspaceName, \"SimpleStrategy\", 1);\r\n\r\n    ResultSet result = \r\n      session.execute(\"SELECT * FROM system_schema.keyspaces;\");\r\n\r\n    List<String> matchedKeyspaces = result.all()\r\n      .stream()\r\n      .filter(r -> r.getString(0).equals(keyspaceName.toLowerCase()))\r\n      .map(r -> r.getString(0))\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(matchedKeyspaces.size(), 1);\r\n    assertTrue(matchedKeyspaces.get(0).equals(keyspaceName.toLowerCase()));\r\n}\r\n```","```\r\nprivate static final String TABLE_NAME = \"books\";\r\nprivate Session session;\r\n\r\npublic void createTable() {\r\n    StringBuilder sb = new StringBuilder(\"CREATE TABLE IF NOT EXISTS \")\r\n      .append(TABLE_NAME).append(\"(\")\r\n      .append(\"id uuid PRIMARY KEY, \")\r\n      .append(\"title text,\")\r\n      .append(\"subject text);\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\nprivate BookRepository bookRepository;\r\nprivate Session session;\r\n\r\n@Before\r\npublic void connect() {\r\n    CassandraConnector client = new CassandraConnector();\r\n    client.connect(\"127.0.0.1\", 9142);\r\n    this.session = client.getSession();\r\n    bookRepository = new BookRepository(session);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingATable_thenCreatedCorrectly() {\r\n    bookRepository.createTable();\r\n\r\n    ResultSet result = session.execute(\r\n      \"SELECT * FROM \" + KEYSPACE_NAME + \".books;\");\r\n\r\n    List<String> columnNames = \r\n      result.getColumnDefinitions().asList().stream()\r\n      .map(cl -> cl.getName())\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(columnNames.size(), 3);\r\n    assertTrue(columnNames.contains(\"id\"));\r\n    assertTrue(columnNames.contains(\"title\"));\r\n    assertTrue(columnNames.contains(\"subject\"));\r\n}\r\n```","```\r\npublic void alterTablebooks(String columnName, String columnType) {\r\n    StringBuilder sb = new StringBuilder(\"ALTER TABLE \")\r\n      .append(TABLE_NAME).append(\" ADD \")\r\n      .append(columnName).append(\" \")\r\n      .append(columnType).append(\";\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAlteringTable_thenAddedColumnExists() {\r\n    bookRepository.createTable();\r\n\r\n    bookRepository.alterTablebooks(\"publisher\", \"text\");\r\n\r\n    ResultSet result = session.execute(\r\n      \"SELECT * FROM \" + KEYSPACE_NAME + \".\" + \"books\" + \";\");\r\n\r\n    boolean columnExists = result.getColumnDefinitions().asList().stream()\r\n      .anyMatch(cl -> cl.getName().equals(\"publisher\"));\r\n\r\n    assertTrue(columnExists);\r\n}\r\n```","```\r\npublic void insertbookByTitle(Book book) {\r\n    StringBuilder sb = new StringBuilder(\"INSERT INTO \")\r\n      .append(TABLE_NAME_BY_TITLE).append(\"(id, title) \")\r\n      .append(\"VALUES (\").append(book.getId())\r\n      .append(\", '\").append(book.getTitle()).append(\"');\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddingANewBook_thenBookExists() {\r\n    bookRepository.createTableBooksByTitle();\r\n\r\n    String title = \"Effective Java\";\r\n    Book book = new Book(UUIDs.timeBased(), title, \"Programming\");\r\n    bookRepository.insertbookByTitle(book);\r\n\r\n    Book savedBook = bookRepository.selectByTitle(title);\r\n    assertEquals(book.getTitle(), savedBook.getTitle());\r\n}\r\n```","```\r\npublic void createTableBooksByTitle() {\r\n    StringBuilder sb = new StringBuilder(\"CREATE TABLE IF NOT EXISTS \")\r\n      .append(\"booksByTitle\").append(\"(\")\r\n      .append(\"id uuid, \")\r\n      .append(\"title text,\")\r\n      .append(\"PRIMARY KEY (title, id));\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\npublic List<Book> selectAll() {\r\n    StringBuilder sb = \r\n      new StringBuilder(\"SELECT * FROM \").append(TABLE_NAME);\r\n\r\n    String query = sb.toString();\r\n    ResultSet rs = session.execute(query);\r\n\r\n    List<Book> books = new ArrayList<Book>();\r\n\r\n    rs.forEach(r -> {\r\n        books.add(new Book(\r\n          r.getUUID(\"id\"), \r\n          r.getString(\"title\"),  \r\n          r.getString(\"subject\")));\r\n    });\r\n    return books;\r\n}\r\n```","```\r\n@Test\r\npublic void whenSelectingAll_thenReturnAllRecords() {\r\n    bookRepository.createTable();\r\n\r\n    Book book = new Book(\r\n      UUIDs.timeBased(), \"Effective Java\", \"Programming\");\r\n    bookRepository.insertbook(book);\r\n\r\n    book = new Book(\r\n      UUIDs.timeBased(), \"Clean Code\", \"Programming\");\r\n    bookRepository.insertbook(book);\r\n\r\n    List<Book> books = bookRepository.selectAll(); \r\n\r\n    assertEquals(2, books.size());\r\n    assertTrue(books.stream().anyMatch(b -> b.getTitle()\r\n      .equals(\"Effective Java\")));\r\n    assertTrue(books.stream().anyMatch(b -> b.getTitle()\r\n      .equals(\"Clean Code\")));\r\n}\r\n```","```\r\npublic void insertBookBatch(Book book) {\r\n    StringBuilder sb = new StringBuilder(\"BEGIN BATCH \")\r\n      .append(\"INSERT INTO \").append(TABLE_NAME)\r\n      .append(\"(id, title, subject) \")\r\n      .append(\"VALUES (\").append(book.getId()).append(\", '\")\r\n      .append(book.getTitle()).append(\"', '\")\r\n      .append(book.getSubject()).append(\"');\")\r\n      .append(\"INSERT INTO \")\r\n      .append(TABLE_NAME_BY_TITLE).append(\"(id, title) \")\r\n      .append(\"VALUES (\").append(book.getId()).append(\", '\")\r\n      .append(book.getTitle()).append(\"');\")\r\n      .append(\"APPLY BATCH;\");\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddingANewBookBatch_ThenBookAddedInAllTables() {\r\n    bookRepository.createTable();\r\n\r\n    bookRepository.createTableBooksByTitle();\r\n\r\n    String title = \"Effective Java\";\r\n    Book book = new Book(UUIDs.timeBased(), title, \"Programming\");\r\n    bookRepository.insertBookBatch(book);\r\n\r\n    List<Book> books = bookRepository.selectAll();\r\n\r\n    assertEquals(1, books.size());\r\n    assertTrue(\r\n      books.stream().anyMatch(\r\n        b -> b.getTitle().equals(\"Effective Java\")));\r\n\r\n    List<Book> booksByTitle = bookRepository.selectAllBookByTitle();\r\n\r\n    assertEquals(1, booksByTitle.size());\r\n    assertTrue(\r\n      booksByTitle.stream().anyMatch(\r\n        b -> b.getTitle().equals(\"Effective Java\")));\r\n}\r\n```","```\r\npublic void deleteTable() {\r\n    StringBuilder sb = \r\n      new StringBuilder(\"DROP TABLE IF EXISTS \").append(TABLE_NAME);\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\n@Test(expected = InvalidQueryException.class)\r\npublic void whenDeletingATable_thenUnconfiguredTable() {\r\n    bookRepository.createTable();\r\n    bookRepository.deleteTable(\"books\");\r\n\r\n    session.execute(\"SELECT * FROM \" + KEYSPACE_NAME + \".books;\");\r\n}\r\n```","```\r\npublic void deleteKeyspace(String keyspaceName) {\r\n    StringBuilder sb = \r\n      new StringBuilder(\"DROP KEYSPACE \").append(keyspaceName);\r\n\r\n    String query = sb.toString();\r\n    session.execute(query);\r\n}\r\n```","```\r\n@Test\r\npublic void whenDeletingAKeyspace_thenDoesNotExist() {\r\n    String keyspaceName = \"library\";\r\n    schemaRepository.deleteKeyspace(keyspaceName);\r\n\r\n    ResultSet result = \r\n      session.execute(\"SELECT * FROM system_schema.keyspaces;\");\r\n    boolean isKeyspaceCreated = result.all().stream()\r\n      .anyMatch(r -> r.getString(0).equals(keyspaceName.toLowerCase()));\r\n\r\n    assertFalse(isKeyspaceCreated);\r\n}\r\n```"]