["```\r\n@Test\r\npublic void givenLocalDate_whenSubtractingFiveDays_dateIsChangedCorrectly() {\r\n    LocalDateTime localDateTime = LocalDateTime.of(2022, 4, 20, 0, 0);\r\n\r\n    localDateTime = localDateTime.minusDays(5);\r\n\r\n    assertEquals(15, localDateTime.getDayOfMonth());\r\n    assertEquals(4, localDateTime.getMonthValue());\r\n    assertEquals(2022, localDateTime.getYear());\r\n}\r\n```","```\r\n@Test\r\npublic void givenCalendarDate_whenSubtractingFiveDays_dateIsChangedCorrectly() {\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.set(2022, Calendar.APRIL, 20);\r\n\r\n    calendar.add(Calendar.DATE, -5);\r\n\r\n    assertEquals(15, calendar.get(Calendar.DAY_OF_MONTH));\r\n    assertEquals(Calendar.APRIL, calendar.get(Calendar.MONTH));\r\n    assertEquals(2022, calendar.get(Calendar.YEAR));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>joda-time</groupId>\r\n    <artifactId>joda-time</artifactId>\r\n    <version>2.10.14</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void givenJodaDateTime_whenSubtractingFiveDays_dateIsChangedCorrectly() {\r\n    DateTime dateTime = new DateTime(2022, 4, 20, 12, 0, 0);\r\n\r\n    dateTime = dateTime.minusDays(5);\r\n\r\n    assertEquals(15, dateTime.getDayOfMonth());\r\n    assertEquals(4, dateTime.getMonthOfYear());\r\n    assertEquals(2022, dateTime.getYear());\r\n} \r\n```"]