["```\r\npublic static Optional<User> findUserByName(String name) {\r\n    User user = usersByName.get(name);\r\n    Optional<User> opt = Optional.ofNullable(user);\r\n    return opt;\r\n}\r\n```","```\r\npublic static void changeUserName(String oldFirstName, String newFirstName) {\r\n    findUserByFirstName(oldFirstName).ifPresent(user -> user.setFirstName(newFirstName));\r\n}\r\n```","```\r\npublic class Sock implements Serializable {\r\n    Integer size;\r\n    Optional<Sock> pair;\r\n\r\n    // ... getters and setters\r\n}\r\n```","```\r\nnew ObjectOutputStream(new ByteArrayOutputStream()).writeObject(new Sock()); \r\n```","```\r\nprivate String firstName;\r\n\r\npublic Optional<String> getFirstName() {\r\n    return Optional.ofNullable(firstName);\r\n}\r\n\r\npublic void setFirstName(String firstName) {\r\n    this.firstName = firstName;\r\n}\r\n```","```\r\n{\"firstName\":{\"present\":true}} \r\n```","```\r\n{\"firstName\":\"Baeldung\"}\r\n```","```\r\n@Entity\r\npublic class UserOptionalField implements Serializable {\r\n    @Id\r\n    private long userId;\r\n\r\n    private Optional<String> firstName;\r\n\r\n    // ... getters and setters\r\n}\r\n```","```\r\nUserOptionalField user = new UserOptionalField();\r\nuser.setUserId(1l);\r\nuser.setFirstName(Optional.of(\"Baeldung\"));\r\nentityManager.persist(user);\r\n```","```\r\nCaused by: javax.persistence.PersistenceException: [PersistenceUnit: com.baeldung.optionalReturnType] Unable to build Hibernate SessionFactory\r\n\tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.persistenceException(EntityManagerFactoryBuilderImpl.java:1015)\r\n\tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:941)\r\n\tat org.hibernate.jpa.HibernatePersistenceProvider.createEntityManagerFactory(HibernatePersistenceProvider.java:56)\r\n\tat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:79)\r\n\tat javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:54)\r\n\tat com.baeldung.optionalReturnType.PersistOptionalTypeExample.<clinit>(PersistOptionalTypeExample.java:11)\r\nCaused by: org.hibernate.MappingException: Could not determine type for: java.util.Optional, at table: UserOptionalField, for columns: [org.hibernate.mapping.Column(firstName)]\r\n```","```\r\n@Column(nullable = true) \r\nprivate String firstName; \r\n\r\npublic Optional<String> getFirstName() { \r\n    return Optional.ofNullable(firstName); \r\n}\r\n```","```\r\nprivate String firstName;\r\n\r\n// ... traditional getter and setter\r\n```","```\r\n<c:out value=\"${requestScope.user.firstName}\" /> \r\n```","```\r\nOptional[Baeldung] \r\n```"]