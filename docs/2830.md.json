["```\r\npublic abstract class AbstractClass {\r\n    // compiler creates a default constructor\r\n}\r\n\r\npublic class ConcreteClass extends AbstractClass {\r\n\r\n    public ConcreteClass() {\r\n        super();\r\n    }\r\n}\r\n```","```\r\npublic abstract class AbstractClass {\r\n    public AbstractClass() {\r\n        System.out.println(\"Initializing AbstractClass\");\r\n    }\r\n}\r\n\r\npublic class ConcreteClassA extends AbstractClass {\r\n}\r\n\r\npublic class ConcreteClassB extends AbstractClass {\r\n    public ConcreteClassB() {\r\n        System.out.println(\"Initializing ConcreteClassB\");\r\n    }\r\n}\r\n```","```\r\nInitializing AbstractClass\r\n```","```\r\nInitializing AbstractClass\r\nInitializing ConcreteClassB\r\n```","```\r\npublic abstract class Counter {\r\n\r\n    int value;\r\n\r\n    public Counter() {\r\n        this.value = 0;\r\n    }\r\n\r\n    abstract int increment();\r\n}\r\n```","```\r\npublic class SimpleCounter extends Counter {\r\n\r\n    @Override\r\n    int increment() {\r\n        return ++value;\r\n    }\r\n}\r\n```","```\r\n@Test\r\nvoid givenNoArgAbstractConstructor_whenSubclassCreation_thenCalled() {\r\n    Counter counter = new SimpleCounter();\r\n\r\n    assertNotNull(counter);\r\n    assertEquals(0, counter.value);\r\n}\r\n```","```\r\nprivate Counter() {\r\n    this.value = 0;\r\n    System.out.println(\"Counter No-Arguments constructor\");\r\n}\r\n```","```\r\npublic Counter(int value) {\r\n    this.value = value;\r\n    System.out.println(\"Parametrized Counter constructor\");\r\n}\r\n```","```\r\npublic class SimpleCounter extends Counter {\r\n\r\n    public SimpleCounter(int value) {\r\n        super(value);\r\n    }\r\n\r\n    // concrete methods\r\n}\r\n```","```\r\npublic abstract class Car {\r\n\r\n    int distance;\r\n\r\n    public Car(int distance) {\r\n        this.distance = distance;\r\n    }\r\n}\r\n```","```\r\npublic abstract class Car {\r\n\r\n    private int distance;\r\n\r\n    private Car(int distance) {\r\n        this.distance = distance;\r\n    }\r\n\r\n    public Car() {\r\n        this(0);\r\n        System.out.println(\"Car default constructor\");\r\n    }\r\n\r\n    // getters\r\n}\r\n```","```\r\nabstract String getInformation();\r\n\r\nprotected void display() {\r\n    String info = new StringBuilder(getInformation())\r\n      .append(\"\\nDistance: \" + getDistance())\r\n      .toString();\r\n    System.out.println(info);\r\n}\r\n```","```\r\npublic class ElectricCar extends Car {\r\n    int chargingTime;\r\n\r\n    public ElectricCar(int chargingTime) {\r\n        this.chargingTime = chargingTime;\r\n    }\r\n\r\n    @Override\r\n    String getInformation() {\r\n        return new StringBuilder(\"Electric Car\")\r\n          .append(\"\\nCharging Time: \" + chargingTime)\r\n          .toString();\r\n    }\r\n}\r\n\r\npublic class FuelCar extends Car {\r\n    String fuel;\r\n\r\n    public FuelCar(String fuel) {\r\n        this.fuel = fuel;\r\n    }\r\n\r\n    @Override\r\n    String getInformation() {\r\n        return new StringBuilder(\"Fuel Car\")\r\n          .append(\"\\nFuel type: \" + fuel)\r\n          .toString();\r\n    }\r\n}\r\n```","```\r\nElectricCar electricCar = new ElectricCar(8);\r\nelectricCar.display();\r\n\r\nFuelCar fuelCar = new FuelCar(\"Gasoline\");\r\nfuelCar.display();\r\n```","```\r\nCar default constructor\r\nElectric Car\r\nCharging Time: 8\r\nDistance: 0\r\n\r\nCar default constructor\r\nFuel Car\r\nFuel type: Gasoline\r\nDistance: 0\r\n```"]