["```\r\n@Configuration\r\npublic class DefaultLogoutConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .logout(logout -> logout\r\n            .logoutUrl(\"/basic/basiclogout\")\r\n            .addLogoutHandler(new SecurityContextLogoutHandler())\r\n          );\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class AllCookieClearingLogoutConfiguration extends WebSecurityConfigurerAdapter {\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .logout(logout -> logout\r\n            .logoutUrl(\"/cookies/cookielogout\")\r\n            .addLogoutHandler((request, response, auth) -> {\r\n                for (Cookie cookie : request.getCookies()) {\r\n                    String cookieName = cookie.getName();\r\n                    Cookie cookieToDelete = new Cookie(cookieName, null);\r\n                    cookieToDelete.setMaxAge(0);\r\n                    response.addCookie(cookieToDelete);\r\n                }\r\n            })\r\n          );\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class ClearSiteDataHeaderLogoutConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n    private static final ClearSiteDataHeaderWriter.Directive[] SOURCE = \r\n      {CACHE, COOKIES, STORAGE, EXECUTION_CONTEXTS};\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .logout(logout -> logout\r\n            .logoutUrl(\"/csd/csdlogout\")\r\n            .addLogoutHandler(new HeaderWriterLogoutHandler(new ClearSiteDataHeaderWriter(SOURCE)))\r\n          );\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic static class LogoutOnRequestConfiguration extends WebSecurityConfigurerAdapter {\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.antMatcher(\"/request/**\")\r\n            .authorizeRequests(authz -> authz.anyRequest()\r\n                .permitAll())\r\n            .logout(logout -> logout.logoutUrl(\"/request/logout\")\r\n                .addLogoutHandler((request, response, auth) -> {\r\n                    try {\r\n                        request.logout();\r\n                    } catch (ServletException e) {\r\n                        logger.error(e.getMessage());\r\n                    }\r\n                }));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenLoggedUserWhenUserLogoutOnRequestThenSessionCleared() throws Exception {\r\n\r\n    this.mockMvc.perform(post(\"/request/logout\").secure(true)\r\n        .with(csrf()))\r\n        .andExpect(status().is3xxRedirection())\r\n        .andExpect(unauthenticated())\r\n        .andReturn();\r\n}\r\n```"]