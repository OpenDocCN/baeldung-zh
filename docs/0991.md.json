["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth</groupId>\r\n    <artifactId>spring-security-oauth2</artifactId>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableOAuth2Client\r\npublic class GoogleOpenIdConnectConfig {\r\n    @Value(\"${google.clientId}\")\r\n    private String clientId;\r\n\r\n    @Value(\"${google.clientSecret}\")\r\n    private String clientSecret;\r\n\r\n    @Value(\"${google.accessTokenUri}\")\r\n    private String accessTokenUri;\r\n\r\n    @Value(\"${google.userAuthorizationUri}\")\r\n    private String userAuthorizationUri;\r\n\r\n    @Value(\"${google.redirectUri}\")\r\n    private String redirectUri;\r\n\r\n    @Bean\r\n    public OAuth2ProtectedResourceDetails googleOpenId() {\r\n        AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\r\n        details.setClientId(clientId);\r\n        details.setClientSecret(clientSecret);\r\n        details.setAccessTokenUri(accessTokenUri);\r\n        details.setUserAuthorizationUri(userAuthorizationUri);\r\n        details.setScope(Arrays.asList(\"openid\", \"email\"));\r\n        details.setPreEstablishedRedirectUri(redirectUri);\r\n        details.setUseCurrentUri(false);\r\n        return details;\r\n    }\r\n\r\n    @Bean\r\n    public OAuth2RestTemplate googleOpenIdTemplate(OAuth2ClientContext clientContext) {\r\n        return new OAuth2RestTemplate(googleOpenId(), clientContext);\r\n    }\r\n}\r\n```","```\r\ngoogle.clientId=<your app clientId>\r\ngoogle.clientSecret=<your app clientSecret>\r\ngoogle.accessTokenUri=https://www.googleapis.com/oauth2/v3/token\r\ngoogle.userAuthorizationUri=https://accounts.google.com/o/oauth2/auth\r\ngoogle.redirectUri=http://localhost:8081/google-login\r\n```","```\r\npublic class OpenIdConnectFilter extends AbstractAuthenticationProcessingFilter {\r\n\r\n    public OpenIdConnectFilter(String defaultFilterProcessesUrl) {\r\n        super(defaultFilterProcessesUrl);\r\n        setAuthenticationManager(new NoopAuthenticationManager());\r\n    }\r\n    @Override\r\n    public Authentication attemptAuthentication(\r\n      HttpServletRequest request, HttpServletResponse response) \r\n      throws AuthenticationException, IOException, ServletException {\r\n        OAuth2AccessToken accessToken;\r\n        try {\r\n            accessToken = restTemplate.getAccessToken();\r\n        } catch (OAuth2Exception e) {\r\n            throw new BadCredentialsException(\"Could not obtain access token\", e);\r\n        }\r\n        try {\r\n            String idToken = accessToken.getAdditionalInformation().get(\"id_token\").toString();\r\n            String kid = JwtHelper.headers(idToken).get(\"kid\");\r\n            Jwt tokenDecoded = JwtHelper.decodeAndVerify(idToken, verifier(kid));\r\n            Map<String, String> authInfo = new ObjectMapper()\r\n              .readValue(tokenDecoded.getClaims(), Map.class);\r\n            verifyClaims(authInfo);\r\n            OpenIdConnectUserDetails user = new OpenIdConnectUserDetails(authInfo, accessToken);\r\n            return new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());\r\n        } catch (InvalidTokenException e) {\r\n            throw new BadCredentialsException(\"Could not obtain user details from token\", e);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class OpenIdConnectUserDetails implements UserDetails {\r\n    private String userId;\r\n    private String username;\r\n    private OAuth2AccessToken token;\r\n\r\n    public OpenIdConnectUserDetails(Map<String, String> userInfo, OAuth2AccessToken token) {\r\n        this.userId = userInfo.get(\"sub\");\r\n        this.username = userInfo.get(\"email\");\r\n        this.token = token;\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.auth0</groupId>\r\n    <artifactId>jwks-rsa</artifactId>\r\n    <version>0.3.0</version>\r\n</dependency>\r\n```","```\r\ngoogle.jwkUrl=https://www.googleapis.com/oauth2/v2/certs\r\n```","```\r\n@Value(\"${google.jwkUrl}\")\r\nprivate String jwkUrl;    \r\n\r\nprivate RsaVerifier verifier(String kid) throws Exception {\r\n    JwkProvider provider = new UrlJwkProvider(new URL(jwkUrl));\r\n    Jwk jwk = provider.get(kid);\r\n    return new RsaVerifier((RSAPublicKey) jwk.getPublicKey());\r\n}\r\n```","```\r\npublic void verifyClaims(Map claims) {\r\n    int exp = (int) claims.get(\"exp\");\r\n    Date expireDate = new Date(exp * 1000L);\r\n    Date now = new Date();\r\n    if (expireDate.before(now) || !claims.get(\"iss\").equals(issuer) || \r\n      !claims.get(\"aud\").equals(clientId)) {\r\n        throw new RuntimeException(\"Invalid claims\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n    @Autowired\r\n    private OAuth2RestTemplate restTemplate;\r\n\r\n    @Bean\r\n    public OpenIdConnectFilter openIdConnectFilter() {\r\n        OpenIdConnectFilter filter = new OpenIdConnectFilter(\"/google-login\");\r\n        filter.setRestTemplate(restTemplate);\r\n        return filter;\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n        .addFilterAfter(new OAuth2ClientContextFilter(), \r\n          AbstractPreAuthenticatedProcessingFilter.class)\r\n        .addFilterAfter(OpenIdConnectFilter(), \r\n          OAuth2ClientContextFilter.class)\r\n        .httpBasic()\r\n        .authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint(\"/google-login\"))\r\n        .and()\r\n        .authorizeRequests()\r\n        .anyRequest().authenticated();\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class HomeController {\r\n    @RequestMapping(\"/\")\r\n    @ResponseBody\r\n    public String home() {\r\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\r\n        return \"Welcome, \" + username;\r\n    }\r\n}\r\n```","```\r\nWelcome, [[email protected]](/web/20220701021819/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nhttps://accounts.google.com/o/oauth2/auth?\r\n    client_id=sampleClientID\r\n    response_type=code&\r\n    scope=openid%20email&\r\n    redirect_uri=http://localhost:8081/google-login&\r\n    state=abc\r\n```","```\r\nhttp://localhost:8081/google-login?state=abc&code;=xyz\r\n```","```\r\nPOST https://www.googleapis.com/oauth2/v3/token \r\n    code=xyz&\r\n    client_id= sampleClientID&\r\n    client_secret= sampleClientSecret&\r\n    redirect_uri=http://localhost:8081/google-login&\r\n    grant_type=authorization_code\r\n```","```\r\n{\r\n    \"access_token\": \"SampleAccessToken\",\r\n    \"id_token\": \"SampleIdToken\",\r\n    \"token_type\": \"bearer\",\r\n    \"expires_in\": 3600,\r\n    \"refresh_token\": \"SampleRefreshToken\"\r\n}\r\n```","```\r\n{\r\n    \"iss\":\"accounts.google.com\",\r\n    \"at_hash\":\"AccessTokenHash\",\r\n    \"sub\":\"12345678\",\r\n    \"email_verified\":true,\r\n    \"email\":\"[[email protected]](/web/20220701021819/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n     ...\r\n}\r\n```"]