["```\r\n@Test\r\npublic void whenAdjust_thenNextSunday() {\r\n    LocalDate localDate = LocalDate.of(2017, 07, 8);\r\n    LocalDate nextSunday = localDate.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));\r\n\r\n    String expected = \"2017-07-09\";\r\n\r\n    assertEquals(expected, nextSunday.toString());\r\n}\r\n```","```\r\nLocalDate lastDayOfMonth = localDate.with(TemporalAdjusters.lastDayOfMonth());\r\n```","```\r\n@Test\r\npublic void whenAdjust_thenFourteenDaysAfterDate() {\r\n    LocalDate localDate = LocalDate.of(2017, 07, 8);\r\n    TemporalAdjuster temporalAdjuster = t -> t.plus(Period.ofDays(14));\r\n    LocalDate result = localDate.with(temporalAdjuster);\r\n\r\n    String fourteenDaysAfterDate = \"2017-07-22\";\r\n\r\n    assertEquals(fourteenDaysAfterDate, result.toString());\r\n}\r\n```","```\r\nstatic TemporalAdjuster NEXT_WORKING_DAY = TemporalAdjusters.ofDateAdjuster(date -> {\r\n    DayOfWeek dayOfWeek = date.getDayOfWeek();\r\n    int daysToAdd;\r\n    if (dayOfWeek == DayOfWeek.FRIDAY)\r\n        daysToAdd = 3;\r\n    else if (dayOfWeek == DayOfWeek.SATURDAY)\r\n        daysToAdd = 2;\r\n    else\r\n        daysToAdd = 1;\r\n    return today.plusDays(daysToAdd);\r\n});\r\n```","```\r\n@Test\r\npublic void whenAdjust_thenNextWorkingDay() {\r\n    LocalDate localDate = LocalDate.of(2017, 07, 8);\r\n    TemporalAdjuster temporalAdjuster = NEXT_WORKING_DAY;\r\n    LocalDate result = localDate.with(temporalAdjuster);\r\n\r\n    assertEquals(\"2017-07-10\", date.toString());\r\n}\r\n```","```\r\npublic class CustomTemporalAdjuster implements TemporalAdjuster {\r\n\r\n    @Override\r\n    public Temporal adjustInto(Temporal temporal) {\r\n        DayOfWeek dayOfWeek \r\n          = DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\r\n\r\n        int daysToAdd;\r\n        if (dayOfWeek == DayOfWeek.FRIDAY)\r\n            daysToAdd = 3;\r\n        else if (dayOfWeek == DayOfWeek.SATURDAY)\r\n            daysToAdd = 2;\r\n        else\r\n            daysToAdd = 1;\r\n        return temporal.plus(daysToAdd, ChronoUnit.DAYS);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenAdjustAndImplementInterface_thenNextWorkingDay() {\r\n    LocalDate localDate = LocalDate.of(2017, 07, 8);\r\n    CustomTemporalAdjuster temporalAdjuster = new CustomTemporalAdjuster();\r\n    LocalDate nextWorkingDay = localDate.with(temporalAdjuster);\r\n\r\n    assertEquals(\"2017-07-10\", nextWorkingDay.toString());\r\n}\r\n```"]