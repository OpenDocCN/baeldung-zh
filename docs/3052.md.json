["```\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-acl</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-config</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-context-support</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>net.sf.ehcache</groupId>\r\n    <artifactId>ehcache-core</artifactId>\r\n    <version>2.6.11</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)\r\npublic class AclMethodSecurityConfiguration \r\n  extends GlobalMethodSecurityConfiguration {\r\n\r\n    @Autowired\r\n    MethodSecurityExpressionHandler \r\n      defaultMethodSecurityExpressionHandler;\r\n\r\n    @Override\r\n    protected MethodSecurityExpressionHandler createExpressionHandler() {\r\n        return defaultMethodSecurityExpressionHandler;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic MethodSecurityExpressionHandler \r\n  defaultMethodSecurityExpressionHandler() {\r\n    DefaultMethodSecurityExpressionHandler expressionHandler\r\n      = new DefaultMethodSecurityExpressionHandler();\r\n    AclPermissionEvaluator permissionEvaluator \r\n      = new AclPermissionEvaluator(aclService());\r\n    expressionHandler.setPermissionEvaluator(permissionEvaluator);\r\n    return expressionHandler;\r\n}\r\n```","```\r\n@Bean \r\npublic JdbcMutableAclService aclService() { \r\n    return new JdbcMutableAclService(\r\n      dataSource, lookupStrategy(), aclCache()); \r\n}\r\n```","```\r\n@Autowired\r\nDataSource dataSource;\r\n\r\n@Bean\r\npublic AclAuthorizationStrategy aclAuthorizationStrategy() {\r\n    return new AclAuthorizationStrategyImpl(\r\n      new SimpleGrantedAuthority(\"ROLE_ADMIN\"));\r\n}\r\n\r\n@Bean\r\npublic PermissionGrantingStrategy permissionGrantingStrategy() {\r\n    return new DefaultPermissionGrantingStrategy(\r\n      new ConsoleAuditLogger());\r\n}\r\n\r\n@Bean\r\npublic EhCacheBasedAclCache aclCache() {\r\n    return new EhCacheBasedAclCache(\r\n      aclEhCacheFactoryBean().getObject(), \r\n      permissionGrantingStrategy(), \r\n      aclAuthorizationStrategy()\r\n    );\r\n}\r\n\r\n@Bean\r\npublic EhCacheFactoryBean aclEhCacheFactoryBean() {\r\n    EhCacheFactoryBean ehCacheFactoryBean = new EhCacheFactoryBean();\r\n    ehCacheFactoryBean.setCacheManager(aclCacheManager().getObject());\r\n    ehCacheFactoryBean.setCacheName(\"aclCache\");\r\n    return ehCacheFactoryBean;\r\n}\r\n\r\n@Bean\r\npublic EhCacheManagerFactoryBean aclCacheManager() {\r\n    return new EhCacheManagerFactoryBean();\r\n}\r\n\r\n@Bean \r\npublic LookupStrategy lookupStrategy() { \r\n    return new BasicLookupStrategy(\r\n      dataSource, \r\n      aclCache(), \r\n      aclAuthorizationStrategy(), \r\n      new ConsoleAuditLogger()\r\n    ); \r\n} \r\n```","```\r\n@PostFilter(\"hasPermission(filterObject, 'READ')\")\r\nList<NoticeMessage> findAll();\r\n\r\n@PostAuthorize(\"hasPermission(returnObject, 'READ')\")\r\nNoticeMessage findById(Integer id);\r\n\r\n@PreAuthorize(\"hasPermission(#noticeMessage, 'WRITE')\")\r\nNoticeMessage save(@Param(\"noticeMessage\")NoticeMessage noticeMessage);\r\n```","```\r\n<dependency>\r\n  <groupId>com.h2database</groupId>\r\n  <artifactId>h2</artifactId>\r\n</dependency>\r\n\r\n<dependency>\r\n  <groupId>org.springframework</groupId>\r\n  <artifactId>spring-test</artifactId>\r\n  <scope>test</scope>\r\n</dependency>\r\n\r\n<dependency>\r\n  <groupId>org.springframework.security</groupId>\r\n  <artifactId>spring-security-test</artifactId>\r\n  <scope>test</scope>\r\n</dependency>\r\n```","```\r\nINSERT INTO acl_sid (id, principal, sid) VALUES\r\n  (1, 1, 'manager'),\r\n  (2, 1, 'hr'),\r\n  (3, 0, 'ROLE_EDITOR');\r\n```","```\r\nINSERT INTO acl_class (id, class) VALUES\r\n  (1, 'com.baeldung.acl.persistence.entity.NoticeMessage');\r\n\r\nINSERT INTO system_message(id,content) VALUES \r\n  (1,'First Level Message'),\r\n  (2,'Second Level Message'),\r\n  (3,'Third Level Message');\r\n\r\nINSERT INTO acl_object_identity \r\n  (id, object_id_class, object_id_identity, \r\n  parent_object, owner_sid, entries_inheriting) \r\n  VALUES\r\n  (1, 1, 1, NULL, 3, 0),\r\n  (2, 1, 2, NULL, 3, 0),\r\n  (3, 1, 3, NULL, 3, 0);\r\n```","```\r\nINSERT INTO acl_entry \r\n  (id, acl_object_identity, ace_order, \r\n  sid, mask, granting, audit_success, audit_failure) \r\n  VALUES\r\n  (1, 1, 1, 1, 1, 1, 1, 1),\r\n  (2, 1, 2, 1, 2, 1, 1, 1),\r\n  (3, 1, 3, 3, 1, 1, 1, 1),\r\n  (4, 2, 1, 2, 1, 1, 1, 1),\r\n  (5, 2, 2, 3, 1, 1, 1, 1),\r\n  (6, 3, 1, 3, 1, 1, 1, 1),\r\n  (7, 3, 2, 3, 2, 1, 1, 1);\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"manager\")\r\npublic void \r\n  givenUserManager_whenFindAllMessage_thenReturnFirstMessage(){\r\n    List<NoticeMessage> details = repo.findAll();\r\n\r\n    assertNotNull(details);\r\n    assertEquals(1,details.size());\r\n    assertEquals(FIRST_MESSAGE_ID,details.get(0).getId());\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(roles = {\"EDITOR\"})\r\npublic void \r\n  givenRoleEditor_whenFindAllMessage_thenReturn3Message(){\r\n    List<NoticeMessage> details = repo.findAll();\r\n\r\n    assertNotNull(details);\r\n    assertEquals(3,details.size());\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"manager\")\r\npublic void \r\n  givenUserManager_whenFind1stMessageByIdAndUpdateItsContent_thenOK(){\r\n    NoticeMessage firstMessage = repo.findById(FIRST_MESSAGE_ID);\r\n    assertNotNull(firstMessage);\r\n    assertEquals(FIRST_MESSAGE_ID,firstMessage.getId());\r\n\r\n    firstMessage.setContent(EDITTED_CONTENT);\r\n    repo.save(firstMessage);\r\n\r\n    NoticeMessage editedFirstMessage = repo.findById(FIRST_MESSAGE_ID);\r\n\r\n    assertNotNull(editedFirstMessage);\r\n    assertEquals(FIRST_MESSAGE_ID,editedFirstMessage.getId());\r\n    assertEquals(EDITTED_CONTENT,editedFirstMessage.getContent());\r\n}\r\n```","```\r\n@Test(expected = AccessDeniedException.class)\r\n@WithMockUser(roles = {\"EDITOR\"})\r\npublic void \r\n  givenRoleEditor_whenFind1stMessageByIdAndUpdateContent_thenFail(){\r\n    NoticeMessage firstMessage = repo.findById(FIRST_MESSAGE_ID);\r\n\r\n    assertNotNull(firstMessage);\r\n    assertEquals(FIRST_MESSAGE_ID,firstMessage.getId());\r\n\r\n    firstMessage.setContent(EDITTED_CONTENT);\r\n    repo.save(firstMessage);\r\n}\r\n```","```\r\n@Test\r\n@WithMockUser(username = \"hr\")\r\npublic void givenUsernameHr_whenFindMessageById2_thenOK(){\r\n    NoticeMessage secondMessage = repo.findById(SECOND_MESSAGE_ID);\r\n    assertNotNull(secondMessage);\r\n    assertEquals(SECOND_MESSAGE_ID,secondMessage.getId());\r\n}\r\n\r\n@Test(expected = AccessDeniedException.class)\r\n@WithMockUser(username = \"hr\")\r\npublic void givenUsernameHr_whenUpdateMessageWithId2_thenFail(){\r\n    NoticeMessage secondMessage = new NoticeMessage();\r\n    secondMessage.setId(SECOND_MESSAGE_ID);\r\n    secondMessage.setContent(EDITTED_CONTENT);\r\n    repo.save(secondMessage);\r\n}\r\n```"]