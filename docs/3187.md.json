["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.4.3</version>\r\n</dependency>\r\n```","```\r\n@NoRepositoryBean\r\npublic interface ReadOnlyRepository<T, ID> extends Repository<T, ID> {\r\n    Optional<T> findById(ID id);\r\n    List<T> findAll();\r\n}\r\n```","```\r\n@Entity\r\npublic class Book {\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n    private String author;\r\n    private String title;\r\n\r\n    //getters and setters\r\n}\r\n```","```\r\npublic interface BookReadOnlyRepository extends ReadOnlyRepository<Book, Long> {\r\n    List<Book> findByAuthor(String author);\r\n    List<Book> findByTitle(String title);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBooks_whenUsingReadOnlyRepository_thenGetThem() {\r\n    Book aChristmasCarolCharlesDickens = new Book();\r\n    aChristmasCarolCharlesDickens.setTitle(\"A Christmas Carol\");\r\n    aChristmasCarolCharlesDickens.setAuthor(\"Charles Dickens\");\r\n    bookRepository.save(aChristmasCarolCharlesDickens);\r\n\r\n    Book greatExpectationsCharlesDickens = new Book();\r\n    greatExpectationsCharlesDickens.setTitle(\"Great Expectations\");\r\n    greatExpectationsCharlesDickens.setAuthor(\"Charles Dickens\");\r\n    bookRepository.save(greatExpectationsCharlesDickens);\r\n\r\n    Book greatExpectationsKathyAcker = new Book();\r\n    greatExpectationsKathyAcker.setTitle(\"Great Expectations\");\r\n    greatExpectationsKathyAcker.setAuthor(\"Kathy Acker\");\r\n    bookRepository.save(greatExpectationsKathyAcker);\r\n\r\n    List<Book> charlesDickensBooks = bookReadOnlyRepository.findByAuthor(\"Charles Dickens\");\r\n    Assertions.assertEquals(2, charlesDickensBooks.size());\r\n\r\n    List<Book> greatExpectationsBooks = bookReadOnlyRepository.findByTitle(\"Great Expectations\");\r\n    Assertions.assertEquals(2, greatExpectationsBooks.size());\r\n\r\n    List<Book> allBooks = bookReadOnlyRepository.findAll();\r\n    Assertions.assertEquals(3, allBooks.size());\r\n\r\n    Long bookId = allBooks.get(0).getId();\r\n    Book book = bookReadOnlyRepository.findById(bookId).orElseThrow(NoSuchElementException::new);\r\n    Assertions.assertNotNull(book);\r\n}\r\n```","```\r\npublic interface BookRepository\r\n  extends BookReadOnlyRepository, CrudRepository<Book, Long> {}\r\n```"]