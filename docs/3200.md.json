["```\r\npublic class SuperUtility {\r\n\r\n    public static String echoIt(String data) {\r\n        return \"SUPER\";\r\n    }\r\n}\r\n\r\npublic class SubUtility extends SuperUtility {\r\n\r\n    public static String echoIt(String data) {\r\n        return data;\r\n    }\r\n}\r\n\r\n@Test\r\npublic void whenStaticUtilClassInheritance_thenOverridingFails() {\r\n    SuperUtility superUtility = new SubUtility();\r\n    Assert.assertNotEquals(\"ECHO\", superUtility.echoIt(\"ECHO\"));\r\n    Assert.assertEquals(\"SUPER\", superUtility.echoIt(\"ECHO\"));\r\n}\r\n```","```\r\npublic class MyLock {\r\n\r\n    protected String takeLock(int locks) {\r\n        return \"Taken Specific Lock\";\r\n    }\r\n}\r\n\r\npublic class SingletonLock extends MyLock {\r\n\r\n    // private constructor and getInstance method \r\n\r\n    @Override\r\n    public String takeLock(int locks) {\r\n        return \"Taken Singleton Lock\";\r\n    }\r\n}\r\n\r\n@Test\r\npublic void whenSingletonDerivesBaseClass_thenRuntimePolymorphism() {\r\n    MyLock myLock = new MyLock();\r\n    Assert.assertEquals(\"Taken Specific Lock\", myLock.takeLock(10));\r\n    myLock = SingletonLock.getInstance();\r\n    Assert.assertEquals(\"Taken Singleton Lock\", myLock.takeLock(10));\r\n}\r\n```","```\r\npublic class FileSystemSingleton implements SingletonInterface {\r\n\r\n    // private constructor and getInstance method\r\n\r\n    @Override\r\n    public String describeMe() {\r\n        return \"File System Responsibilities\";\r\n    }\r\n}\r\n\r\npublic class CachingSingleton implements SingletonInterface {\r\n\r\n    // private constructor and getInstance method\r\n\r\n    @Override\r\n    public String describeMe() {\r\n        return \"Caching Responsibilities\";\r\n    }\r\n}\r\n\r\n@Test\r\npublic void whenSingletonImplementsInterface_thenRuntimePolymorphism() {\r\n    SingletonInterface singleton = FileSystemSingleton.getInstance();\r\n    Assert.assertEquals(\"File System Responsibilities\", singleton.describeMe());\r\n    singleton = CachingSingleton.getInstance();\r\n    Assert.assertEquals(\"Caching Responsibilities\", singleton.describeMe());\r\n}\r\n```","```\r\n@Test\r\npublic void whenSingleton_thenPassAsArguments() {\r\n    SingletonInterface singleton = FileSystemSingleton.getInstance();\r\n    Assert.assertEquals(\"Taken Singleton Lock\", singleton.passOnLocks(SingletonLock.getInstance()));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSingleton_thenAllowState() {\r\n    SingletonInterface singleton = FileSystemSingleton.getInstance();\r\n    IntStream.range(0, 5)\r\n        .forEach(i -> singleton.increment());\r\n    Assert.assertEquals(5, ((FileSystemSingleton) singleton).getFilesWritten());\r\n} \r\n```","```\r\nnew ObjectOutputStream(baos).writeObject(singleton);\r\nSerializableSingleton singletonNew = (SerializableSingleton) new ObjectInputStream\r\n   (new ByteArrayInputStream(baos.toByteArray())).readObject();\r\n```","```\r\n@Test\r\npublic void whenSingleton_thenAllowCloneable() {\r\n    Assert.assertEquals(2, ((SerializableCloneableSingleton) singleton.cloneObject()).getState());\r\n}\r\n```"]