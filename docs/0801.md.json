["```\r\n{\r\n    \"name\": \"react\",\r\n    \"version\": \"0.1.0\",\r\n    \"private\": true,\r\n    \"dependencies\": {\r\n        \"react\": \"^16.4.1\",\r\n        \"react-dom\": \"^16.4.1\",\r\n        \"react-scripts\": \"1.1.4\"\r\n    },\r\n    \"scripts\": {\r\n        \"start\": \"react-scripts start\",\r\n        \"build\": \"react-scripts build\",\r\n        \"test\": \"react-scripts test --env=jsdom\",\r\n        \"eject\": \"react-scripts eject\"\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>com.github.eirslett</groupId>\r\n    <artifactId>frontend-maven-plugin</artifactId>\r\n    <version>1.6</version>\r\n    <configuration>\r\n        <nodeVersion>v8.11.3</nodeVersion>\r\n        <npmVersion>6.1.0</npmVersion>\r\n        <workingDirectory>src/main/webapp/WEB-INF/view/react</workingDirectory>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <id>install node and npm</id>\r\n            <goals>\r\n                <goal>install-node-and-npm</goal>\r\n            </goals>\r\n        </execution>\r\n        <execution>\r\n            <id>npm install</id>\r\n            <goals>\r\n                <goal>npm</goal>\r\n            </goals>\r\n        </execution>\r\n        <execution>\r\n            <id>npm run build</id>\r\n            <goals>\r\n                <goal>npm</goal>\r\n            </goals>\r\n            <configuration>\r\n                <arguments>run build</arguments>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\n@EnableWebMvc\r\n@Configuration\r\npublic class MvcConfig extends WebMvcConfigurerAdapter {\r\n\r\n    @Override\r\n    public void addResourceHandlers(\r\n      ResourceHandlerRegistry registry) {\r\n\r\n        registry.addResourceHandler(\"/static/**\")\r\n          .addResourceLocations(\"/WEB-INF/view/react/build/static/\");\r\n        registry.addResourceHandler(\"/*.js\")\r\n          .addResourceLocations(\"/WEB-INF/view/react/build/\");\r\n        registry.addResourceHandler(\"/*.json\")\r\n          .addResourceLocations(\"/WEB-INF/view/react/build/\");\r\n        registry.addResourceHandler(\"/*.ico\")\r\n          .addResourceLocations(\"/WEB-INF/view/react/build/\");\r\n        registry.addResourceHandler(\"/index.html\")\r\n          .addResourceLocations(\"/WEB-INF/view/react/build/index.html\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@Profile(\"!https\")\r\npublic class SecSecurityConfig \r\n  extends WebSecurityConfigurerAdapter {\r\n\r\n    //...\r\n\r\n    @Override\r\n    protected void configure(final HttpSecurity http) \r\n      throws Exception {\r\n        http.csrf().disable().authorizeRequests()\r\n          //...\r\n          .antMatchers(\r\n            HttpMethod.GET,\r\n            \"/index*\", \"/static/**\", \"/*.js\", \"/*.json\", \"/*.ico\")\r\n            .permitAll()\r\n          .anyRequest().authenticated()\r\n          .and()\r\n          .formLogin().loginPage(\"/index.html\")\r\n          .loginProcessingUrl(\"/perform_login\")\r\n          .defaultSuccessUrl(\"/homepage.html\",true)\r\n          .failureUrl(\"/index.html?error=true\")\r\n          //...\r\n    }\r\n}\r\n```","```\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Input extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            value: props.value? props.value : '',\r\n            className: props.className? props.className : '',\r\n            error: false\r\n        }\r\n    }\r\n\r\n    //...\r\n\r\n    render () {\r\n        const {handleError, ...opts} = this.props\r\n        this.handleError = handleError\r\n        return (\r\n          <input {...opts} value={this.state.value}\r\n            onChange={this.inputChange} className={this.state.className} /> \r\n        )\r\n    }\r\n}\r\n\r\nInput.propTypes = {\r\n  name: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  type: PropTypes.string,\r\n  className: PropTypes.string,\r\n  value: PropTypes.string,\r\n  handleError: PropTypes.func\r\n}\r\n\r\nexport default Input\r\n```","```\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Input from './Input'\r\n\r\nclass Form extends Component {\r\n\r\n    //...\r\n\r\n    render() {\r\n        const inputs = this.props.inputs.map(\r\n          ({name, placeholder, type, value, className}, index) => (\r\n            <Input key={index} name={name} placeholder={placeholder} type={type} value={value}\r\n              className={type==='submit'? className : ''} handleError={this.handleError} />\r\n          )\r\n        )\r\n        const errors = this.renderError()\r\n        return (\r\n            <form {...this.props} onSubmit={this.handleSubmit} ref={fm => {this.form=fm}} >\r\n              {inputs}\r\n              {errors}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n  name: PropTypes.string,\r\n  action: PropTypes.string,\r\n  method: PropTypes.string,\r\n  inputs: PropTypes.array,\r\n  error: PropTypes.string\r\n}\r\n\r\nexport default Form\r\n```","```\r\nclass Form extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        if(props.error) {\r\n            this.state = {\r\n              failure: 'wrong username or password!',\r\n              errcount: 0\r\n            }\r\n        } else {\r\n            this.state = { errcount: 0 }\r\n        }\r\n    }\r\n\r\n    handleError = (field, errmsg) => {\r\n        if(!field) return\r\n\r\n        if(errmsg) {\r\n            this.setState((prevState) => ({\r\n                failure: '',\r\n                errcount: prevState.errcount + 1, \r\n                errmsgs: {...prevState.errmsgs, [field]: errmsg}\r\n            }))\r\n        } else {\r\n            this.setState((prevState) => ({\r\n                failure: '',\r\n                errcount: prevState.errcount===1? 0 : prevState.errcount-1,\r\n                errmsgs: {...prevState.errmsgs, [field]: ''}\r\n            }))\r\n        }\r\n    }\r\n\r\n    renderError = () => {\r\n        if(this.state.errcount || this.state.failure) {\r\n            const errmsg = this.state.failure \r\n              || Object.values(this.state.errmsgs).find(v=>v)\r\n            return <div className=\"error\">{errmsg}</div>\r\n        }\r\n    }\r\n\r\n    //...\r\n\r\n}\r\n```","```\r\nclass Form extends Component {\r\n\r\n    //...\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if(!this.state.errcount) {\r\n            const data = new FormData(this.form)\r\n            fetch(this.form.action, {\r\n              method: this.form.method,\r\n              body: new URLSearchParams(data)\r\n            })\r\n            .then(v => {\r\n                if(v.redirected) window.location = v.url\r\n            })\r\n            .catch(e => console.warn(e))\r\n        }\r\n    }\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <!-- ... -->\r\n  </head>\r\n  <body>\r\n\r\n    <div id=\"root\">\r\n      <div id=\"container\"></div>\r\n    </div>\r\n\r\n  </body>\r\n</html>\r\n```","```\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport Form from './Form'\r\n\r\nconst inputs = [{\r\n  name: \"username\",\r\n  placeholder: \"username\",\r\n  type: \"text\"\r\n},{\r\n  name: \"password\",\r\n  placeholder: \"password\",\r\n  type: \"password\"\r\n},{\r\n  type: \"submit\",\r\n  value: \"Submit\",\r\n  className: \"btn\" \r\n}]\r\n\r\nconst props = {\r\n  name: 'loginForm',\r\n  method: 'POST',\r\n  action: '/perform_login',\r\n  inputs: inputs\r\n}\r\n\r\nconst params = new URLSearchParams(window.location.search)\r\n\r\nReactDOM.render(\r\n  <Form {...props} error={params.get('error')} />,\r\n  document.getElementById('container'))\r\n```"]