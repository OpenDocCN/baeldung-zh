["```\r\n@Configuration\r\n@ComponentScan(\"com.baeldung.jdbc\")\r\npublic class SpringJdbcConfig {\r\n    @Bean\r\n    public DataSource mysqlDataSource() {\r\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\r\n        dataSource.setUrl(\"jdbc:mysql://localhost:3306/springjdbc\");\r\n        dataSource.setUsername(\"guest_user\");\r\n        dataSource.setPassword(\"guest_password\");\r\n\r\n        return dataSource;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic DataSource dataSource() {\r\n    return new EmbeddedDatabaseBuilder()\r\n      .setType(EmbeddedDatabaseType.H2)\r\n      .addScript(\"classpath:jdbc/schema.sql\")\r\n      .addScript(\"classpath:jdbc/test-data.sql\").build();\r\n} \r\n```","```\r\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" \r\n  destroy-method=\"close\">\r\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\r\n    <property name=\"url\" value=\"jdbc:mysql://localhost:3306/springjdbc\"/>\r\n    <property name=\"username\" value=\"guest_user\"/>\r\n    <property name=\"password\" value=\"guest_password\"/>\r\n</bean>\r\n```","```\r\nint result = jdbcTemplate.queryForObject(\r\n    \"SELECT COUNT(*) FROM EMPLOYEE\", Integer.class); \r\n```","```\r\npublic int addEmplyee(int id) {\r\n    return jdbcTemplate.update(\r\n      \"INSERT INTO EMPLOYEE VALUES (?, ?, ?, ?)\", id, \"Bill\", \"Gates\", \"USA\");\r\n}\r\n```","```\r\nSqlParameterSource namedParameters = new MapSqlParameterSource().addValue(\"id\", 1);\r\nreturn namedParameterJdbcTemplate.queryForObject(\r\n  \"SELECT FIRST_NAME FROM EMPLOYEE WHERE ID = :id\", namedParameters, String.class);\r\n```","```\r\nEmployee employee = new Employee();\r\nemployee.setFirstName(\"James\");\r\n\r\nString SELECT_BY_ID = \"SELECT COUNT(*) FROM EMPLOYEE WHERE FIRST_NAME = :firstName\";\r\n\r\nSqlParameterSource namedParameters = new BeanPropertySqlParameterSource(employee);\r\nreturn namedParameterJdbcTemplate.queryForObject(\r\n  SELECT_BY_ID, namedParameters, Integer.class);\r\n```","```\r\npublic class EmployeeRowMapper implements RowMapper<Employee> {\r\n    @Override\r\n    public Employee mapRow(ResultSet rs, int rowNum) throws SQLException {\r\n        Employee employee = new Employee();\r\n\r\n        employee.setId(rs.getInt(\"ID\"));\r\n        employee.setFirstName(rs.getString(\"FIRST_NAME\"));\r\n        employee.setLastName(rs.getString(\"LAST_NAME\"));\r\n        employee.setAddress(rs.getString(\"ADDRESS\"));\r\n\r\n        return employee;\r\n    }\r\n}\r\n```","```\r\nString query = \"SELECT * FROM EMPLOYEE WHERE ID = ?\";\r\nEmployee employee = jdbcTemplate.queryForObject(\r\n  query, new Object[] { id }, new EmployeeRowMapper());\r\n```","```\r\npublic class CustomSQLErrorCodeTranslator extends SQLErrorCodeSQLExceptionTranslator {\r\n    @Override\r\n    protected DataAccessException\r\n      customTranslate(String task, String sql, SQLException sqlException) {\r\n        if (sqlException.getErrorCode() == 23505) {\r\n          return new DuplicateKeyException(\r\n            \"Custom Exception translator - Integrity constraint violation.\", sqlException);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\nCustomSQLErrorCodeTranslator customSQLErrorCodeTranslator = \r\n  new CustomSQLErrorCodeTranslator();\r\njdbcTemplate.setExceptionTranslator(customSQLErrorCodeTranslator);\r\n```","```\r\nSimpleJdbcInsert simpleJdbcInsert = \r\n  new SimpleJdbcInsert(dataSource).withTableName(\"EMPLOYEE\");\r\n```","```\r\npublic int addEmplyee(Employee emp) {\r\n    Map<String, Object> parameters = new HashMap<String, Object>();\r\n    parameters.put(\"ID\", emp.getId());\r\n    parameters.put(\"FIRST_NAME\", emp.getFirstName());\r\n    parameters.put(\"LAST_NAME\", emp.getLastName());\r\n    parameters.put(\"ADDRESS\", emp.getAddress());\r\n\r\n    return simpleJdbcInsert.execute(parameters);\r\n}\r\n```","```\r\nSimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert(dataSource)\r\n                                        .withTableName(\"EMPLOYEE\")\r\n                                        .usingGeneratedKeyColumns(\"ID\");\r\n\r\nNumber id = simpleJdbcInsert.executeAndReturnKey(parameters);\r\nSystem.out.println(\"Generated id - \" + id.longValue());\r\n```","```\r\nSimpleJdbcCall simpleJdbcCall = new SimpleJdbcCall(dataSource)\r\n\t\t                     .withProcedureName(\"READ_EMPLOYEE\"); \r\n```","```\r\npublic Employee getEmployeeUsingSimpleJdbcCall(int id) {\r\n    SqlParameterSource in = new MapSqlParameterSource().addValue(\"in_id\", id);\r\n    Map<String, Object> out = simpleJdbcCall.execute(in);\r\n\r\n    Employee emp = new Employee();\r\n    emp.setFirstName((String) out.get(\"FIRST_NAME\"));\r\n    emp.setLastName((String) out.get(\"LAST_NAME\"));\r\n\r\n    return emp;\r\n}\r\n```","```\r\npublic int[] batchUpdateUsingJdbcTemplate(List<Employee> employees) {\r\n    return jdbcTemplate.batchUpdate(\"INSERT INTO EMPLOYEE VALUES (?, ?, ?, ?)\",\r\n        new BatchPreparedStatementSetter() {\r\n            @Override\r\n            public void setValues(PreparedStatement ps, int i) throws SQLException {\r\n                ps.setInt(1, employees.get(i).getId());\r\n                ps.setString(2, employees.get(i).getFirstName());\r\n                ps.setString(3, employees.get(i).getLastName());\r\n                ps.setString(4, employees.get(i).getAddress();\r\n            }\r\n            @Override\r\n            public int getBatchSize() {\r\n                return 50;\r\n            }\r\n        });\r\n}\r\n```","```\r\nSqlParameterSource[] batch = SqlParameterSourceUtils.createBatch(employees.toArray());\r\nint[] updateCounts = namedParameterJdbcTemplate.batchUpdate(\r\n    \"INSERT INTO EMPLOYEE VALUES (:id, :firstName, :lastName, :address)\", batch);\r\nreturn updateCounts;\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-jdbc</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nspring.datasource.url=jdbc:mysql://localhost:3306/springjdbc\r\nspring.datasource.username=guest_user\r\nspring.datasource.password=guest_password\r\n```"]