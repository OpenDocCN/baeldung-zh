["```\r\n@Test\r\npublic void givenTreeMap_whenOrdersEntriesNaturally_thenCorrect() {\r\n    TreeMap<Integer, String> map = new TreeMap<>();\r\n    map.put(3, \"val\");\r\n    map.put(2, \"val\");\r\n    map.put(1, \"val\");\r\n    map.put(5, \"val\");\r\n    map.put(4, \"val\");\r\n\r\n    assertEquals(\"[1, 2, 3, 4, 5]\", map.keySet().toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenTreeMap_whenOrdersEntriesNaturally_thenCorrect2() {\r\n    TreeMap<String, String> map = new TreeMap<>();\r\n    map.put(\"c\", \"val\");\r\n    map.put(\"b\", \"val\");\r\n    map.put(\"a\", \"val\");\r\n    map.put(\"e\", \"val\");\r\n    map.put(\"d\", \"val\");\r\n\r\n    assertEquals(\"[a, b, c, d, e]\", map.keySet().toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenTreeMap_whenOrdersEntriesByComparator_thenCorrect() {\r\n    TreeMap<Integer, String> map = \r\n      new TreeMap<>(Comparator.reverseOrder());\r\n    map.put(3, \"val\");\r\n    map.put(2, \"val\");\r\n    map.put(1, \"val\");\r\n    map.put(5, \"val\");\r\n    map.put(4, \"val\");\r\n\r\n    assertEquals(\"[5, 4, 3, 2, 1]\", map.keySet().toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenTreeMap_whenPerformsQueries_thenCorrect() {\r\n    TreeMap<Integer, String> map = new TreeMap<>();\r\n    map.put(3, \"val\");\r\n    map.put(2, \"val\");\r\n    map.put(1, \"val\");\r\n    map.put(5, \"val\");\r\n    map.put(4, \"val\");\r\n\r\n    Integer highestKey = map.lastKey();\r\n    Integer lowestKey = map.firstKey();\r\n    Set<Integer> keysLessThan3 = map.headMap(3).keySet();\r\n    Set<Integer> keysGreaterThanEqTo3 = map.tailMap(3).keySet();\r\n\r\n    assertEquals(new Integer(5), highestKey);\r\n    assertEquals(new Integer(1), lowestKey);\r\n    assertEquals(\"[1, 2]\", keysLessThan3.toString());\r\n    assertEquals(\"[3, 4, 5]\", keysGreaterThanEqTo3.toString());\r\n}\r\n```","```\r\npublic class TreeMap<K,V> extends AbstractMap<K,V>\r\n  implements NavigableMap<K,V>, Cloneable, java.io.Serializable\r\n```"]