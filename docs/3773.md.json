["```\r\n<dependency>\r\n    <groupId>org.springframework.data</groupId>\r\n    <artifactId>spring-data-neo4j</artifactId>\r\n    <version>5.0.1.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j-ogm-test</artifactId>\r\n    <version>3.1.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j-ogm-embedded-driver</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\npublic static final String URL = \r\n  System.getenv(\"NEO4J_URL\") != null ? \r\n  System.getenv(\"NEO4J_URL\") : \"http://neo4j:[[emailÂ protected]](/web/20220625180249/https://www.baeldung.com/cdn-cgi/l/email-protection):7474\";\r\n\r\n@Bean\r\npublic org.neo4j.ogm.config.Configuration getConfiguration() {\r\n    return new Builder().uri(URL).build();\r\n}\r\n\r\n@Bean\r\npublic SessionFactory getSessionFactory() {\r\n    return new SessionFactory(getConfiguration(), \r\n      \"com.baeldung.spring.data.neo4j.domain\");\r\n}\r\n\r\n@Bean\r\npublic Neo4jTransactionManager transactionManager() {\r\n    return new Neo4jTransactionManager(getSessionFactory());\r\n}\r\n```","```\r\n@Repository\r\npublic interface MovieRepository extends Neo4jRepository<Movie, Long> {\r\n\r\n    Movie findByTitle(@Param(\"title\") String title);\r\n\r\n    @Query(\"MATCH (m:Movie) WHERE m.title =~ ('(?i).*'+{title}+'.*') RETURN m\")\r\n    Collection<Movie> \r\n      findByTitleContaining(@Param(\"title\") String title);\r\n\r\n    @Query(\"MATCH (m:Movie)<-[:ACTED_IN]-(a:Person) \r\n      RETURN m.title as movie, collect(a.name) as cast LIMIT {limit}\")\r\n    List<Map<String,Object>> graph(@Param(\"limit\") int limit);\r\n} \r\n```","```\r\n@Repository\r\npublic interface PersonRepository extends Neo4jRepository <Person, Long> {\r\n    //\r\n}\r\n```","```\r\n@Configuration\r\n@ComponentScan(\"com.baeldung.spring.data.neo4j\")\r\n@EnableNeo4jRepositories(\r\n  basePackages = \"com.baeldung.spring.data.neo4j.repository\")\r\npublic class MovieDatabaseNeo4jConfiguration {\r\n    //\r\n}\r\n```","```\r\n@NodeEntity\r\npublic class Movie {\r\n\r\n    @Id @GeneratedValue\r\n    Long id;\r\n\r\n    private String title;\r\n\r\n    private int released;\r\n\r\n    private String tagline;\r\n\r\n    @Relationship(type=\"ACTED_IN\", direction = Relationship.INCOMING)\r\n\r\n    private List<Role> roles;\r\n\r\n    // standard constructor, getters and setters \r\n}\r\n```","```\r\n@JsonIdentityInfo(generator=JSOGGenerator.class)\r\n@NodeEntity\r\npublic class Person {\r\n\r\n    @Id @GeneratedValue\r\n    Long id;\r\n\r\n    private String name;\r\n\r\n    private int born;\r\n\r\n    @Relationship(type = \"ACTED_IN\")\r\n    private List<Movie> movies;\r\n\r\n    // standard constructor, getters and setters \r\n}\r\n\r\n@JsonIdentityInfo(generator=JSOGGenerator.class)\r\n@RelationshipEntity(type = \"ACTED_IN\")\r\npublic class Role {\r\n\r\n    @Id @GeneratedValue\r\n    Long id;\r\n\r\n    private Collection<String> roles;\r\n\r\n    @StartNode\r\n    private Person person;\r\n\r\n    @EndNode\r\n    private Movie movie;\r\n\r\n    // standard constructor, getters and setters \r\n}\r\n```","```\r\nMovie italianJob = new Movie();\r\nitalianJob.setTitle(\"The Italian Job\");\r\nitalianJob.setReleased(1999);\r\nmovieRepository.save(italianJob);\r\n\r\nPerson mark = new Person();\r\nmark.setName(\"Mark Wahlberg\");\r\npersonRepository.save(mark);\r\n\r\nRole charlie = new Role();\r\ncharlie.setMovie(italianJob);\r\ncharlie.setPerson(mark);\r\nCollection<String> roleNames = new HashSet();\r\nroleNames.add(\"Charlie Croker\");\r\ncharlie.setRoles(roleNames);\r\nList<Role> roles = new ArrayList();\r\nroles.add(charlie);\r\nitalianJob.setRoles(roles);\r\nmovieRepository.save(italianJob);\r\n```","```\r\nMovie result = movieRepository.findByTitle(title);\r\n```","```\r\nCollection<Movie> result = movieRepository.findByTitleContaining(\"Italian\");\r\n```","```\r\nCollection<Movie> result = (Collection<Movie>) movieRepository.findAll();\r\n```","```\r\nlong movieCount = movieRepository.count();\r\n```","```\r\nmovieRepository.delete(movieRepository.findByTitle(\"The Italian Job\"));\r\n```","```\r\nassertNull(movieRepository.findByTitle(\"The Italian Job\"));\r\n```","```\r\nmovieRepository.deleteAll();\r\n```"]