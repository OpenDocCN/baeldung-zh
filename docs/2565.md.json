["```\r\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\r\nint result = numbers\r\n  .stream()\r\n  .reduce(0, (subtotal, element) -> subtotal + element);\r\nassertThat(result).isEqualTo(21);\r\n```","```\r\nsubtotal, element -> subtotal + element\r\n```","```\r\nint result = numbers.stream().reduce(0, Integer::sum);\r\nassertThat(result).isEqualTo(21);\r\n```","```\r\nList<String> letters = Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\");\r\nString result = letters\r\n  .stream()\r\n  .reduce(\"\", (partialString, element) -> partialString + element);\r\nassertThat(result).isEqualTo(\"abcde\");\r\n```","```\r\nString result = letters.stream().reduce(\"\", String::concat);\r\nassertThat(result).isEqualTo(\"abcde\");\r\n```","```\r\nString result = letters\r\n  .stream()\r\n  .reduce(\r\n    \"\", (partialString, element) -> partialString.toUpperCase() + element.toUpperCase());\r\nassertThat(result).isEqualTo(\"ABCDE\");\r\n```","```\r\nList<Integer> ages = Arrays.asList(25, 30, 45, 28, 32);\r\nint computedAges = ages.parallelStream().reduce(0, (a, b) -> a + b, Integer::sum);\r\n```","```\r\nList<User> users = Arrays.asList(new User(\"John\", 30), new User(\"Julie\", 35));\r\nint computedAges = \r\n  users.stream().reduce(0, (partialAgeResult, user) -> partialAgeResult + user.getAge()); \r\n```","```\r\nint result = users.stream()\r\n  .reduce(0, (partialAgeResult, user) -> partialAgeResult + user.getAge(), Integer::sum);\r\nassertThat(result).isEqualTo(65);\r\n```","```\r\n@State(Scope.Thread)\r\nprivate final List<User> userList = createUsers();\r\n\r\n@Benchmark\r\npublic Integer executeReduceOnParallelizedStream() {\r\n    return this.userList\r\n      .parallelStream()\r\n      .reduce(\r\n        0, (partialAgeResult, user) -> partialAgeResult + user.getAge(), Integer::sum);\r\n}\r\n\r\n@Benchmark\r\npublic Integer executeReduceOnSequentialStream() {\r\n    return this.userList\r\n      .stream()\r\n      .reduce(\r\n        0, (partialAgeResult, user) -> partialAgeResult + user.getAge(), Integer::sum);\r\n} \r\n```","```\r\nBenchmark                                                   Mode  Cnt  Score    Error  Units\r\nJMHStreamReduceBenchMark.executeReduceOnParallelizedStream  avgt    5  0,007 ±  0,001   s/op\r\nJMHStreamReduceBenchMark.executeReduceOnSequentialStream    avgt    5  0,010 ±  0,001   s/op\r\n```","```\r\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\r\nint divider = 2;\r\nint result = numbers.stream().reduce(0, a / divider + b / divider); \r\n```","```\r\npublic static int divideListElements(List<Integer> values, int divider) {\r\n    return values.stream()\r\n      .reduce(0, (a, b) -> {\r\n          try {\r\n              return a / divider + b / divider;\r\n          } catch (ArithmeticException e) {\r\n              LOGGER.log(Level.INFO, \"Arithmetic Exception: Division by Zero\");\r\n          }\r\n          return 0;\r\n      });\r\n}\r\n```","```\r\nprivate static int divide(int value, int factor) {\r\n    int result = 0;\r\n    try {\r\n        result = value / factor;\r\n    } catch (ArithmeticException e) {\r\n        LOGGER.log(Level.INFO, \"Arithmetic Exception: Division by Zero\");\r\n    }\r\n    return result\r\n} \r\n```","```\r\npublic static int divideListElements(List<Integer> values, int divider) {\r\n    return values.stream().reduce(0, (a, b) -> divide(a, divider) + divide(b, divider));\r\n} \r\n```","```\r\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\r\nassertThat(NumberUtils.divideListElements(numbers, 1)).isEqualTo(21); \r\n```","```\r\nList<Integer> numbers = Arrays.asList(0, 1, 2, 3, 4, 5, 6);\r\nassertThat(NumberUtils.divideListElements(numbers, 1)).isEqualTo(21); \r\n```","```\r\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\r\nassertThat(NumberUtils.divideListElements(numbers, 0)).isEqualTo(0);\r\n```","```\r\npublic class Review {\r\n\r\n    private int points;\r\n    private String review;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\npublic class Rating {\r\n\r\n    double points;\r\n    List<Review> reviews = new ArrayList<>();\r\n\r\n    public void add(Review review) {\r\n        reviews.add(review);\r\n        computeRating();\r\n    }\r\n\r\n    private double computeRating() {\r\n        double totalPoints = \r\n          reviews.stream().map(Review::getPoints).reduce(0, Integer::sum);\r\n        this.points = totalPoints / reviews.size();\r\n        return this.points;\r\n    }\r\n\r\n    public static Rating average(Rating r1, Rating r2) {\r\n        Rating combined = new Rating();\r\n        combined.reviews = new ArrayList<>(r1.reviews);\r\n        combined.reviews.addAll(r2.reviews);\r\n        combined.computeRating();\r\n        return combined;\r\n    }\r\n\r\n}\r\n```","```\r\nUser john = new User(\"John\", 30);\r\njohn.getRating().add(new Review(5, \"\"));\r\njohn.getRating().add(new Review(3, \"not bad\"));\r\nUser julie = new User(\"Julie\", 35);\r\njohn.getRating().add(new Review(4, \"great!\"));\r\njohn.getRating().add(new Review(2, \"terrible experience\"));\r\njohn.getRating().add(new Review(4, \"\"));\r\nList<User> users = Arrays.asList(john, julie); \r\n```","```\r\nRating averageRating = users.stream()\r\n  .reduce(new Rating(), \r\n    (rating, user) -> Rating.average(rating, user.getRating()), \r\n    Rating::average);\r\n```","```\r\nassertThat(averageRating.getPoints()).isEqualTo(3.6);\r\n```"]