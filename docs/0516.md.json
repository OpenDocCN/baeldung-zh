["```\r\npublic class UnionFind {\r\n    private int[] parents;\r\n    private int[] ranks;\r\n\r\n    public UnionFind(int n) {\r\n        parents = new int[n];\r\n        ranks = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            parents[i] = i;\r\n            ranks[i] = 0;\r\n        }\r\n    }\r\n\r\n    public int find(int u) {\r\n        while (u != parents[u]) {\r\n            u = parents[u];\r\n        }\r\n        return u;\r\n    }\r\n\r\n    public void union(int u, int v) {\r\n        int uParent = find(u);\r\n        int vParent = find(v);\r\n        if (uParent == vParent) {\r\n            return;\r\n        }\r\n\r\n        if (ranks[uParent] < ranks[vParent]) { \r\n            parents[uParent] = vParent; \r\n        } else if (ranks[uParent] > ranks[vParent]) {\r\n            parents[vParent] = uParent;\r\n        } else {\r\n            parents[vParent] = uParent;\r\n            ranks[uParent]++;\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Before\r\npublic void setup() {\r\n    graph = ValueGraphBuilder.undirected().build();\r\n    graph.putEdgeValue(0, 1, 8);\r\n    graph.putEdgeValue(0, 2, 5);\r\n    graph.putEdgeValue(1, 2, 9);\r\n    graph.putEdgeValue(1, 3, 11);\r\n    graph.putEdgeValue(2, 3, 15);\r\n    graph.putEdgeValue(2, 4, 10);\r\n    graph.putEdgeValue(3, 4, 7);\r\n} \r\n```","```\r\npublic class BoruvkaMST {\r\n    private static MutableValueGraph<Integer, Integer> mst = ValueGraphBuilder.undirected().build();\r\n    private static int totalWeight;\r\n} \r\n```","```\r\npublic BoruvkaMST(MutableValueGraph<Integer, Integer> graph) {\r\n    int size = graph.nodes().size();\r\n    UnionFind uf = new UnionFind(size); \r\n```","```\r\nfor (int t = 1; t < size && mst.edges().size() < size - 1; t = t + t) {\r\n    EndpointPair<Integer>[] closestEdgeArray = new EndpointPair[size]; \r\n```","```\r\nfor (EndpointPair<Integer> edge : graph.edges()) {\r\n    int u = edge.nodeU();\r\n    int v = edge.nodeV();\r\n    int uParent = uf.find(u);\r\n    int vParent = uf.find(v);\r\n\r\n    if (uParent == vParent) {\r\n        continue;\r\n    }\r\n\r\n    int weight = graph.edgeValueOrDefault(u, v, 0);\r\n\r\n    if (closestEdgeArray[uParent] == null) {\r\n        closestEdgeArray[uParent] = edge;\r\n    }\r\n    if (closestEdgeArray[vParent] == null) {\r\n        closestEdgeArray[vParent] = edge;\r\n    }\r\n\r\n    int uParentWeight = graph.edgeValueOrDefault(closestEdgeArray[uParent].nodeU(),\r\n      closestEdgeArray[uParent].nodeV(), 0);\r\n    int vParentWeight = graph.edgeValueOrDefault(closestEdgeArray[vParent].nodeU(),\r\n      closestEdgeArray[vParent].nodeV(), 0);\r\n\r\n    if (weight < uParentWeight) {\r\n        closestEdgeArray[uParent] = edge;\r\n    }\r\n    if (weight < vParentWeight) {\r\n        closestEdgeArray[vParent] = edge;\r\n    }\r\n} \r\n```","```\r\nfor (int i = 0; i < size; i++) {\r\n    EndpointPair<Integer> edge = closestEdgeArray[i];\r\n    if (edge != null) {\r\n        int u = edge.nodeU();\r\n        int v = edge.nodeV();\r\n        int weight = graph.edgeValueOrDefault(u, v, 0);\r\n        if (uf.find(u) != uf.find(v)) {\r\n            mst.putEdgeValue(u, v, weight);\r\n            totalWeight += weight;\r\n            uf.union(u, v);\r\n        }\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void givenInputGraph_whenBoruvkaPerformed_thenMinimumSpanningTree() {\r\n\r\n    BoruvkaMST boruvkaMST = new BoruvkaMST(graph);\r\n    MutableValueGraph<Integer, Integer> mst = boruvkaMST.getMST();\r\n\r\n    assertEquals(30, boruvkaMST.getTotalWeight());\r\n    assertEquals(4, mst.getEdgeCount());\r\n} \r\n```"]