["```\r\nString url = \"http://products.api.com/get?key=a123456789z&criterion;={\\\"name\\\":\\\"HP EliteBook\\\"}\";\r\nProduct product = restTemplate.getForObject(url, Product.class);\r\n```","```\r\njava.lang.IllegalArgumentException: Not enough variable values available to expand 'name'\r\n```","```\r\npublic class Product {\r\n\r\n    private int id;\r\n    private String name;\r\n    private double price;\r\n\r\n    // default constructor + all args constructor + getters + setters \r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api\")\r\npublic class ProductApi {\r\n\r\n    private List<Product> productList = new ArrayList<>(Arrays.asList(\r\n      new Product(1, \"Acer Aspire 5\", 437), \r\n      new Product(2, \"ASUS VivoBook\", 650), \r\n      new Product(3, \"Lenovo Legion\", 990)\r\n    ));\r\n\r\n    @GetMapping(\"/get\")\r\n    public Product get(@RequestParam String criterion) throws JsonMappingException, JsonProcessingException {\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        Criterion crt = objectMapper.readValue(criterion, Criterion.class);\r\n        if (crt.getProp().equals(\"name\")) {\r\n            return findByName(crt.getValue());\r\n        }\r\n\r\n        // Search by other properties (id,price)\r\n\r\n        return null;\r\n    }\r\n\r\n    private Product findByName(String name) {\r\n        for (Product product : this.productList) {\r\n            if (product.getName().equals(name)) {\r\n                return product;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Other methods\r\n}\r\n```","```\r\npublic class Criterion {\r\n\r\n    private String prop;\r\n    private String value;\r\n\r\n    // default constructor + getters + setters\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(classes = { RestTemplate.class, RestTemplateExceptionApplication.class })\r\npublic class RestTemplateExceptionLiveTest {\r\n\r\n    @Autowired\r\n    RestTemplate restTemplate;\r\n\r\n    @Test(expected = IllegalArgumentException.class)\r\n    public void givenGetUrl_whenJsonIsPassed_thenThrowException() {\r\n        String url = \"http://localhost:8080/spring-rest/api/get?criterion={\\\"prop\\\":\\\"name\\\",\\\"value\\\":\\\"ASUS VivoBook\\\"}\";\r\n        Product product = restTemplate.getForObject(url, Product.class);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenGetUrl_whenJsonIsPassed_thenGetProduct() {\r\n    String criterion = \"{\\\"prop\\\":\\\"name\\\",\\\"value\\\":\\\"ASUS VivoBook\\\"}\";\r\n    String url = \"http://localhost:8080/spring-rest/api/get?criterion={criterion}\";\r\n    Product product = restTemplate.getForObject(url, Product.class, criterion);\r\n\r\n    assertEquals(product.getPrice(), 650, 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenGetUrl_whenJsonIsPassed_thenReturnProduct() {\r\n    String criterion = \"{\\\"prop\\\":\\\"name\\\",\\\"value\\\":\\\"Acer Aspire 5\\\"}\";\r\n    String url = \"http://localhost:8080/spring-rest/api/get\";\r\n\r\n    UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(url).queryParam(\"criterion\", criterion);\r\n    Product product = restTemplate.getForObject(builder.build().toUri(), Product.class);\r\n\r\n    assertEquals(product.getId(), 1, 0);\r\n}\r\n```"]