["```\r\npublic void awaitTerminationAfterShutdown(ExecutorService threadPool) {\r\n    threadPool.shutdown();\r\n    try {\r\n        if (!threadPool.awaitTermination(60, TimeUnit.SECONDS)) {\r\n            threadPool.shutdownNow();\r\n        }\r\n    } catch (InterruptedException ex) {\r\n        threadPool.shutdownNow();\r\n        Thread.currentThread().interrupt();\r\n    }\r\n}\r\n```","```\r\nExecutorService WORKER_THREAD_POOL \r\n  = Executors.newFixedThreadPool(10);\r\nCountDownLatch latch = new CountDownLatch(2);\r\nfor (int i = 0; i < 2; i++) {\r\n    WORKER_THREAD_POOL.submit(() -> {\r\n        try {\r\n            // ...\r\n            latch.countDown();\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    });\r\n}\r\n\r\n// wait for the latch to be decremented by the two remaining threads\r\nlatch.await();\r\n```","```\r\nExecutorService WORKER_THREAD_POOL = Executors.newFixedThreadPool(10);\r\n\r\nList<Callable<String>> callables = Arrays.asList(\r\n  new DelayedCallable(\"fast thread\", 100), \r\n  new DelayedCallable(\"slow thread\", 3000));\r\n\r\nlong startProcessingTime = System.currentTimeMillis();\r\nList<Future<String>> futures = WORKER_THREAD_POOL.invokeAll(callables);\r\n\r\nawaitTerminationAfterShutdown(WORKER_THREAD_POOL);\r\n\r\nlong totalProcessingTime = System.currentTimeMillis() - startProcessingTime;\r\n\r\nassertTrue(totalProcessingTime >= 3000);\r\n\r\nString firstThreadResponse = futures.get(0).get();\r\n\r\nassertTrue(\"fast thread\".equals(firstThreadResponse));\r\n\r\nString secondThreadResponse = futures.get(1).get();\r\nassertTrue(\"slow thread\".equals(secondThreadResponse));\r\n```","```\r\nCompletionService<String> service\r\n  = new ExecutorCompletionService<>(WORKER_THREAD_POOL);\r\n\r\nList<Callable<String>> callables = Arrays.asList(\r\n  new DelayedCallable(\"fast thread\", 100), \r\n  new DelayedCallable(\"slow thread\", 3000));\r\n\r\nfor (Callable<String> callable : callables) {\r\n    service.submit(callable);\r\n} \r\n```","```\r\nlong startProcessingTime = System.currentTimeMillis();\r\n\r\nFuture<String> future = service.take();\r\nString firstThreadResponse = future.get();\r\nlong totalProcessingTime\r\n  = System.currentTimeMillis() - startProcessingTime;\r\n\r\nassertTrue(\"First response should be from the fast thread\", \r\n  \"fast thread\".equals(firstThreadResponse));\r\nassertTrue(totalProcessingTime >= 100\r\n  && totalProcessingTime < 1000);\r\nLOG.debug(\"Thread finished after: \" + totalProcessingTime\r\n  + \" milliseconds\");\r\n\r\nfuture = service.take();\r\nString secondThreadResponse = future.get();\r\ntotalProcessingTime\r\n  = System.currentTimeMillis() - startProcessingTime;\r\n\r\nassertTrue(\r\n  \"Last response should be from the slow thread\", \r\n  \"slow thread\".equals(secondThreadResponse));\r\nassertTrue(\r\n  totalProcessingTime >= 3000\r\n  && totalProcessingTime < 4000);\r\nLOG.debug(\"Thread finished after: \" + totalProcessingTime\r\n  + \" milliseconds\");\r\n\r\nawaitTerminationAfterShutdown(WORKER_THREAD_POOL);\r\n```"]