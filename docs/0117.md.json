["```\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.apache.camel.springboot</groupId>\r\n            <artifactId>camel-spring-boot-dependencies</artifactId>\r\n            <version>${camel.version}</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.camel.springboot</groupId>\r\n    <artifactId>camel-spring-boot-starter</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.camel.springboot</groupId>\r\n    <artifactId>camel-activemq-starter</artifactId>\r\n</dependency>\r\n```","```\r\npublic class MyPayload implements Serializable {\r\n    private String value;\r\n    ...\r\n}\r\n```","```\r\ntry (CamelContext context = new DefaultCamelContext()) {\r\n    ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"vm://localhost?broker.persistent=false\");\r\n    connectionFactory.setTrustAllPackages(true);\r\n    context.addComponent(\"direct\", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));\r\n    addRoute(context);\r\n\r\n    try (ProducerTemplate template = context.createProducerTemplate()) {\r\n        context.start();\r\n\r\n        MyPayload payload = new MyPayload(\"One\");\r\n        template.sendBody(\"direct:source\", payload);\r\n        Thread.sleep(10000);\r\n    } finally {\r\n        context.stop();\r\n    }\r\n}\r\n```","```\r\nwireTap(\"direct:tap\").delay(1000)\r\n```","```\r\nRoutesBuilder traditionalWireTapRoute() {\r\n    return new RouteBuilder() {\r\n        public void configure() {\r\n\r\n            from(\"direct:source\").wireTap(\"direct:tap\")\r\n                .delay(1000)\r\n                .bean(MyBean.class, \"addTwo\")\r\n                .to(\"direct:destination\");\r\n\r\n            from(\"direct:tap\").log(\"Tap Wire route: received\");\r\n\r\n            from(\"direct:destination\").log(\"Output at destination: '${body}'\");\r\n        }\r\n    };\r\n}\r\n```","```\r\npublic class MyPayload implements Serializable {\r\n\r\n    private String value;\r\n    ...\r\n    public MyPayload deepClone() {\r\n        MyPayload myPayload = new MyPayload(value);\r\n        return myPayload;\r\n   }\r\n}\r\n```","```\r\npublic class MyPayloadClonePrepare implements Processor {\r\n\r\n    public void process(Exchange exchange) throws Exception {\r\n        MyPayload myPayload = exchange.getIn().getBody(MyPayload.class);\r\n        exchange.getIn().setBody(myPayload.deepClone());\r\n        exchange.getIn().setHeader(\"date\", new Date());\r\n    }\r\n}\r\n```","```\r\nRoutesBuilder newExchangeRoute() throws Exception {\r\n    return new RouteBuilder() {\r\n        public void configure() throws Exception {\r\n\r\n        from(\"direct:source\").wireTap(\"direct:tap\")\r\n            .onPrepare(new MyPayloadClonePrepare())\r\n            .end()\r\n            .delay(1000);\r\n\r\n        from(\"direct:tap\").bean(MyBean.class, \"addThree\");\r\n        }\r\n     };\r\n}\r\n```"]