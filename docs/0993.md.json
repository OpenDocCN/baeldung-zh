["```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\r\n    <version>2.2.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\nzuul:\r\n  routes:\r\n    foos:\r\n      path: /foos/**\r\n      url: http://localhost:8081/spring-zuul-foos-resource/foos\r\n```","```\r\npublic class Foo {\r\n    private long id;\r\n    private String name;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@RestController\r\npublic class FooController {\r\n\r\n    @GetMapping(\"/foos/{id}\")\r\n    public Foo findById(\r\n      @PathVariable long id, HttpServletRequest req, HttpServletResponse res) {\r\n        return new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\r\n    }\r\n}\r\n```","```\r\n<html>\r\n<body ng-app=\"myApp\" ng-controller=\"mainCtrl\">\r\n<script src=\"angular.min.js\"></script>\r\n<script src=\"angular-resource.min.js\"></script>\r\n\r\n<script>\r\nvar app = angular.module('myApp', [\"ngResource\"]);\r\n\r\napp.controller('mainCtrl', function($scope,$resource,$http) {\r\n    $scope.foo = {id:0 , name:\"sample foo\"};\r\n    $scope.foos = $resource(\"/foos/:fooId\",{fooId:'@id'});\r\n\r\n    $scope.getFoo = function(){\r\n        $scope.foo = $scope.foos.get({fooId:$scope.foo.id});\r\n    }  \r\n});\r\n</script>\r\n\r\n<div>\r\n    <h1>Foo Details</h1>\r\n    <span>{{foo.id}}</span>\r\n    <span>{{foo.name}}</span>\r\n    <a href=\"#\" ng-click=\"getFoo()\">New Foo</a>\r\n</div>\r\n</body>\r\n</html>\r\n```","```\r\n@EnableZuulProxy\r\n@SpringBootApplication\r\npublic class UiApplication extends SpringBootServletInitializer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(UiApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendRequestToFooResource_thenOK() {\r\n    Response response = RestAssured.get(\"http://localhost:8080/foos/1\");\r\n\r\n    assertEquals(200, response.getStatusCode());\r\n}\r\n```","```\r\n@Component\r\npublic class CustomZuulFilter extends ZuulFilter {\r\n\r\n    @Override\r\n    public Object run() {\r\n        RequestContext ctx = RequestContext.getCurrentContext();\r\n        ctx.addZuulRequestHeader(\"Test\", \"TestSample\");\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n       return true;\r\n    }\r\n    // ...\r\n}\r\n```","```\r\n@RestController\r\npublic class FooController {\r\n\r\n    @GetMapping(\"/foos/{id}\")\r\n    public Foo findById(\r\n      @PathVariable long id, HttpServletRequest req, HttpServletResponse res) {\r\n        if (req.getHeader(\"Test\") != null) {\r\n            res.addHeader(\"Test\", req.getHeader(\"Test\"));\r\n        }\r\n        return new Foo(Long.parseLong(randomNumeric(2)), randomAlphabetic(4));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendRequest_thenHeaderAdded() {\r\n    Response response = RestAssured.get(\"http://localhost:8080/foos/1\");\r\n\r\n    assertEquals(200, response.getStatusCode());\r\n    assertEquals(\"TestSample\", response.getHeader(\"Test\"));\r\n}\r\n```"]