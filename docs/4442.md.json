["```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration(classes = WebConfig.class)\r\npublic class RoleControllerIntegrationTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    private static final String CONTENT_TYPE = \"application/text;charset=ISO-8859-1\";\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\r\n    }\r\n\r\n    @Test\r\n    public void givenEmployeeNameJohnWhenInvokeRoleThenReturnAdmin() throws Exception {\r\n        this.mockMvc.perform(MockMvcRequestBuilders\r\n          .get(\"/role/John\"))\r\n          .andDo(print())\r\n          .andExpect(MockMvcResultMatchers.status().isOk())\r\n          .andExpect(MockMvcResultMatchers.content().contentType(CONTENT_TYPE))\r\n          .andExpect(MockMvcResultMatchers.content().string(\"ADMIN\"));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeNameDoeWhenInvokeRoleThenReturnEmployee() throws Exception {\r\n    this.mockMvc.perform(MockMvcRequestBuilders\r\n      .get(\"/role/Doe\"))\r\n      .andDo(print())\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.content().contentType(CONTENT_TYPE))\r\n      .andExpect(MockMvcResultMatchers.content().string(\"EMPLOYEE\"));\r\n}\r\n```","```\r\n@RunWith(Parameterized.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration(classes = WebConfig.class)\r\npublic class RoleControllerParameterizedIntegrationTest {\r\n\r\n    @Parameter(value = 0)\r\n    public String name;\r\n\r\n    @Parameter(value = 1)\r\n    public String role;\r\n\r\n    @Parameters\r\n    public static Collection<Object[]> data() {\r\n        Collection<Object[]> params = new ArrayList();\r\n        params.add(new Object[]{\"John\", \"ADMIN\"});\r\n        params.add(new Object[]{\"Doe\", \"EMPLOYEE\"});\r\n\r\n        return params;\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@RunWith(Parameterized.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration(classes = WebConfig.class)\r\npublic class RoleControllerParameterizedIntegrationTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext wac;\r\n\r\n    private MockMvc mockMvc;\r\n\r\n    private TestContextManager testContextManager;\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        this.testContextManager = new TestContextManager(getClass());\r\n        this.testContextManager.prepareTestInstance(this);\r\n\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\r\n    }\r\n\r\n    //...\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmployeeNameWhenInvokeRoleThenReturnRole() throws Exception {\r\n    this.mockMvc.perform(MockMvcRequestBuilders\r\n      .get(\"/role/\" + name))\r\n      .andDo(print())\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.content().contentType(CONTENT_TYPE))\r\n      .andExpect(MockMvcResultMatchers.content().string(role));\r\n}\r\n```","```\r\n@RunWith(Parameterized.class)\r\n@WebAppConfiguration\r\n@ContextConfiguration(classes = WebConfig.class)\r\npublic class RoleControllerParameterizedClassRuleIntegrationTest {\r\n    @ClassRule\r\n    public static final SpringClassRule scr = new SpringClassRule();\r\n\r\n    @Rule\r\n    public final SpringMethodRule smr = new SpringMethodRule();\r\n\r\n    @Before\r\n    public void setup() throws Exception {\r\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\r\n    }\r\n\r\n    //...\r\n}\r\n```"]