["```\r\npublic class UserServlet extends HttpServlet {\r\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n        String firstName = request.getParameter(\"firstName\");\r\n        String lastName = request.getParameter(\"lastName\");\r\n\r\n        response.getWriter().append(\"Full Name: \" + firstName + \" \" + lastName);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-test</artifactId>\r\n    <version>5.3.20</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\nvoid givenHttpServletRequest_whenUsingMockHttpServletRequest_thenReturnsParameterValues() throws IOException {\r\n    MockHttpServletRequest request = new MockHttpServletRequest();\r\n    request.setParameter(\"firstName\", \"Spring\");\r\n    request.setParameter(\"lastName\", \"Test\");\r\n    MockHttpServletResponse response = new MockHttpServletResponse();\r\n\r\n    servlet.doGet(request, response);\r\n\r\n    assertThat(response.getContentAsString()).isEqualTo(\"Full Name: Spring Test\");\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>4.4.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Test\r\nvoid givenHttpServletRequest_whenMockedWithMockito_thenReturnsParameterValues() throws IOException {\r\n    // mock HttpServletRequest & HttpServletResponse\r\n    HttpServletRequest request = mock(HttpServletRequest.class);\r\n    HttpServletResponse response = mock(HttpServletResponse.class);\r\n\r\n    // mock the returned value of request.getParameterMap()\r\n    when(request.getParameter(\"firstName\")).thenReturn(\"Mockito\");\r\n    when(request.getParameter(\"lastName\")).thenReturn(\"Test\");\r\n    when(response.getWriter()).thenReturn(new PrintWriter(writer));\r\n\r\n    servlet.doGet(request, response);\r\n\r\n    assertThat(writer.toString()).isEqualTo(\"Full Name: Mockito Test\");\r\n}\r\n```","```\r\n<dependency> \r\n    <groupId>org.jmockit</groupId> \r\n    <artifactId>jmockit</artifactId> \r\n    <version>1.49</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Mocked\r\nHttpServletRequest mockRequest;\r\n@Mocked\r\nHttpServletResponse mockResponse;\r\n\r\n@Test\r\nvoid givenHttpServletRequest_whenMockedWithJMockit_thenReturnsParameterValues() throws IOException {\r\n    new Expectations() {{\r\n        mockRequest.getParameter(\"firstName\"); result = \"JMockit\";\r\n        mockRequest.getParameter(\"lastName\"); result = \"Test\";\r\n        mockResponse.getWriter(); result = new PrintWriter(writer);\r\n    }};\r\n\r\n    servlet.doGet(mockRequest, mockResponse);\r\n\r\n    assertThat(writer.toString()).isEqualTo(\"Full Name: JMockit Test\");\r\n}\r\n```","```\r\npublic static HttpServletRequest getRequest(Map<String, String[]> params) {\r\n    return new HttpServletRequest() {\r\n        public Map<String, String[]> getParameterMap() {\r\n            return params;\r\n        }\r\n\r\n        public String getParameter(String name) {\r\n            String[] values = params.get(name);\r\n            if (values == null || values.length == 0) {\r\n                return null;\r\n            }\r\n            return values[0];\r\n        }\r\n\r\n        // More methods to implement\r\n    }\r\n};\r\n```","```\r\n@Test\r\nvoid givenHttpServletRequest_whenUsingAnonymousClass_thenReturnsParameterValues() throws IOException {\r\n    final Map<String, String[]> params = new HashMap<>();\r\n    params.put(\"firstName\", new String[] { \"Anonymous Class\" });\r\n    params.put(\"lastName\", new String[] { \"Test\" });\r\n\r\n    servlet.doGet(getRequest(params), getResponse(writer));\r\n\r\n    assertThat(writer.toString()).isEqualTo(\"Full Name: Anonymous Class Test\");\r\n}\r\n```"]