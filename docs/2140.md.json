["```\r\nminikube start --vm-driver=virtualbox\r\n```","```\r\nkubectl config use-context minikube\r\n```","```\r\nminikube dashboard \r\n```","```\r\n### build the repository\r\nmvn clean install\r\n\r\n### set docker env\r\neval $(minikube docker-env)\r\n\r\n### build the docker images on minikube\r\ncd travel-agency-service\r\ndocker build -t travel-agency-service .\r\ncd ../client-service\r\ndocker build -t client-service .\r\ncd ..\r\n\r\n### secret and mongodb\r\nkubectl delete -f travel-agency-service/secret.yaml\r\nkubectl delete -f travel-agency-service/mongo-deployment.yaml\r\n\r\nkubectl create -f travel-agency-service/secret.yaml\r\nkubectl create -f travel-agency-service/mongo-deployment.yaml\r\n\r\n### travel-agency-service\r\nkubectl delete -f travel-agency-service/travel-agency-deployment.yaml\r\nkubectl create -f travel-agency-service/travel-agency-deployment.yaml\r\n\r\n### client-service\r\nkubectl delete configmap client-service\r\nkubectl delete -f client-service/client-service-deployment.yaml\r\n\r\nkubectl create -f client-service/client-config.yaml\r\nkubectl create -f client-service/client-service-deployment.yaml\r\n\r\n# Check that the pods are running\r\nkubectl get pods\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-kubernetes</artifactId>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableDiscoveryClient\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n@RestController\r\npublic class ClientController {\r\n    @Autowired\r\n    private DiscoveryClient discoveryClient;\r\n}\r\n```","```\r\napiVersion: v1 by d\r\nkind: ConfigMap\r\nmetadata:\r\n  name: client-service\r\ndata:\r\n  application.properties: |-\r\n    bean.message=Testing reload! Message from backend is: %s <br/> Services : %s\r\n```","```\r\nkubectl create -f client-config.yaml\r\n```","```\r\n@Configuration\r\n@ConfigurationProperties(prefix = \"bean\")\r\npublic class ClientConfig {\r\n\r\n    private String message = \"Message from backend is: %s <br/> Services : %s\";\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@RestController\r\npublic class ClientController {\r\n\r\n    @Autowired\r\n    private ClientConfig config;\r\n\r\n    @GetMapping\r\n    public String load() {\r\n        return String.format(config.getMessage(), \"\", \"\");\r\n    }\r\n}\r\n```","```\r\nkubectl edit configmap client-service\r\n```","```\r\napiVersion: v1\r\nkind: Secret\r\nmetadata:\r\n  name: db-secret\r\ndata:\r\n  username: dXNlcg==\r\n  password: cDQ1NXcwcmQ=\r\n```","```\r\nkubectl apply -f secret.yaml\r\n```","```\r\napiVersion: extensions/v1beta1\r\nkind: Deployment\r\nmetadata:\r\n  name: mongo\r\nspec:\r\n  replicas: 1\r\n  template:\r\n    metadata:\r\n      labels:\r\n        service: mongo\r\n      name: mongodb-service\r\n    spec:\r\n      containers:\r\n      - args:\r\n        - mongod\r\n        - --smallfiles\r\n        image: mongo:latest\r\n        name: mongo\r\n        env:\r\n          - name: MONGO_INITDB_ROOT_USERNAME\r\n            valueFrom:\r\n              secretKeyRef:\r\n                name: db-secret\r\n                key: username\r\n          - name: MONGO_INITDB_ROOT_PASSWORD\r\n            valueFrom:\r\n              secretKeyRef:\r\n                name: db-secret\r\n                key: password\r\n```","```\r\nspring.cloud.kubernetes.reload.enabled=true\r\nspring.cloud.kubernetes.secrets.name=db-secret\r\nspring.data.mongodb.host=mongodb-service\r\nspring.data.mongodb.port=27017\r\nspring.data.mongodb.database=admin\r\nspring.data.mongodb.username=${MONGO_USERNAME}\r\nspring.data.mongodb.password=${MONGO_PASSWORD}\r\n```","```\r\nenv:\r\n  - name: MONGO_USERNAME\r\n    valueFrom:\r\n      secretKeyRef:\r\n        name: db-secret\r\n        key: username\r\n  - name: MONGO_PASSWORD\r\n    valueFrom:\r\n      secretKeyRef:\r\n        name: db-secret\r\n        key: password\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-kubernetes-ribbon</artifactId>\r\n</dependency>\r\n```","```\r\n@RibbonClient(name = \"travel-agency-service\")\r\n```","```\r\nribbon.http.client.enabled=true\r\n```","```\r\n@HystrixCommand(fallbackMethod = \"getFallbackName\", commandProperties = { \r\n    @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"1000\") })\r\npublic String getDeals() {\r\n    return this.restTemplate.getForObject(\"http://travel-agency-service:8080/deals\", String.class);\r\n}\r\n\r\nprivate String getFallbackName() {\r\n    return \"Fallback\";\r\n}\r\n```"]