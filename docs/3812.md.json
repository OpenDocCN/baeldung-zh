["```\r\n@Entity\r\npublic class Employee {\r\n    @Id\r\n    private int id;\r\n    private String name;\r\n    @ElementCollection\r\n    @CollectionTable(name = \"employee_phone\", joinColumns = @JoinColumn(name = \"employee_id\"))\r\n    private List phones;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n\r\n@Embeddable\r\npublic class Phone {\r\n    private String type;\r\n    private String areaCode;\r\n    private String number;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n```","```\r\n@Repository\r\npublic class EmployeeRepository {\r\n\r\n    public Employee findById(int id) {\r\n        return em.find(Employee.class, id);\r\n    }\r\n\r\n    // additional properties and auxiliary methods\r\n} \r\n```","```\r\npublic class ElementCollectionIntegrationTest {\r\n\r\n    @Before\r\n    public void init() {\r\n        Employee employee = new Employee(1, \"Fred\");\r\n        employee.setPhones(\r\n          Arrays.asList(new Phone(\"work\", \"+55\", \"99999-9999\"), new Phone(\"home\", \"+55\", \"98888-8888\")));\r\n        employeeRepository.save(employee);\r\n    }\r\n\r\n    @After\r\n    public void clean() {\r\n        employeeRepository.remove(1);\r\n    }\r\n\r\n    @Test(expected = org.hibernate.LazyInitializationException.class)\r\n    public void whenAccessLazyCollection_thenThrowLazyInitializationException() {\r\n        Employee employee = employeeRepository.findById(1);\r\n\r\n        assertThat(employee.getPhones().size(), is(2));\r\n    }\r\n} \r\n```","```\r\npublic Employee findByJPQL(int id) {\r\n    return em.createQuery(\"SELECT u FROM Employee AS u JOIN FETCH u.phones WHERE u.id=:id\", Employee.class)\r\n        .setParameter(\"id\", id).getSingleResult();\r\n} \r\n```","```\r\npublic Employee findByEntityGraph(int id) {\r\n    EntityGraph entityGraph = em.createEntityGraph(Employee.class);\r\n    entityGraph.addAttributeNodes(\"name\", \"phones\");\r\n    Map<String, Object> properties = new HashMap<>();\r\n    properties.put(\"javax.persistence.fetchgraph\", entityGraph);\r\n    return em.find(Employee.class, id, properties);\r\n} \r\n```","```\r\n@Test\r\n@Transactional\r\npublic void whenUseTransaction_thenFetchResult() {\r\n    Employee employee = employeeRepository.findById(1);\r\n    assertThat(employee.getPhones().size(), is(2));\r\n} \r\n```"]