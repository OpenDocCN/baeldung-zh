["```\r\n$ opa version\r\nVersion: 0.39.0\r\nBuild Commit: cc965f6\r\nBuild Timestamp: 2022-03-31T12:34:56Z\r\nBuild Hostname: 5aba1d393f31\r\nGo Version: go1.18\r\nPlatform: windows/amd64\r\nWebAssembly: available\r\n```","```\r\npackage baeldung.auth.account\r\n\r\n# Not authorized by default\r\ndefault authorized = false\r\n\r\nauthorized = true {\r\n    count(deny) == 0\r\n    count(allow) > 0\r\n}\r\n\r\n# Allow access to /public\r\nallow[\"public\"] {\r\n    regex.match(\"^/public/.*\",input.uri)\r\n}\r\n\r\n# Account API requires authenticated user\r\ndeny[\"account_api_authenticated\"] {\r\n    regex.match(\"^/account/.*\",input.uri)\r\n    regex.match(\"ANONYMOUS\",input.principal)\r\n}\r\n\r\n# Authorize access to account\r\nallow[\"account_api_authorized\"] {\r\n    regex.match(\"^/account/.+\",input.uri)\r\n    parts := split(input.uri,\"/\")\r\n    account := parts[2]\r\n    role := concat(\":\",[ \"ROLE_account\", \"read\", account] )\r\n    role == input.authorities[i]\r\n} \r\n```","```\r\n{\r\n    \"input\": {\r\n        \"principal\": \"user1\",\r\n        \"authorities\": [\"ROLE_account:read:0001\"],\r\n        \"uri\": \"/account/0001\",\r\n        \"headers\": {\r\n            \"WebTestClient-Request-Id\": \"1\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    }\r\n} \r\n```","```\r\n$ opa run  -w -s src/test/rego\r\n```","```\r\n$ curl --location --request POST 'http://localhost:8181/v1/data/baeldung/auth/account' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n    \"input\": {\r\n        \"principal\": \"user1\",\r\n        \"authorities\": [],\r\n        \"uri\": \"/account/0001\",\r\n        \"headers\": {\r\n            \"WebTestClient-Request-Id\": \"1\",\r\n            \"Accept\": \"application/json\"\r\n        }\r\n    }\r\n}'\r\n```","```\r\n{\r\n  \"result\": {\r\n    \"allow\": [],\r\n    \"authorized\": false,\r\n    \"deny\": []\r\n  }\r\n} \r\n```","```\r\n@Bean\r\npublic ReactiveAuthorizationManager<AuthorizationContext> opaAuthManager(WebClient opaWebClient) {\r\n\r\n    return (auth, context) -> {\r\n        return opaWebClient.post()\r\n          .accept(MediaType.APPLICATION_JSON)\r\n          .contentType(MediaType.APPLICATION_JSON)\r\n          .body(toAuthorizationPayload(auth,context), Map.class)\r\n          .exchangeToMono(this::toDecision);\r\n    };\r\n} \r\n```","```\r\n@Bean\r\npublic SecurityWebFilterChain accountAuthorization(ServerHttpSecurity http, @Qualifier(\"opaWebClient\") WebClient opaWebClient) {\r\n    return http\r\n      .httpBasic()\r\n      .and()\r\n      .authorizeExchange(exchanges -> {\r\n          exchanges\r\n            .pathMatchers(\"/account/*\")\r\n            .access(opaAuthManager(opaWebClient));\r\n      })\r\n      .build();\r\n} \r\n```","```\r\n@Test\r\n@WithMockUser(username = \"user1\", roles = { \"account:read:0001\"} )\r\nvoid testGivenValidUser_thenSuccess() {\r\n    rest.get()\r\n     .uri(\"/account/0001\")\r\n      .accept(MediaType.APPLICATION_JSON)\r\n      .exchange()\r\n      .expectStatus()\r\n      .is2xxSuccessful();\r\n} \r\n```","```\r\n@Test\r\n@WithMockUser(username = \"user1\", roles = { \"account:read:0002\"} )\r\nvoid testGivenValidUser_thenUnauthorized() {\r\n    rest.get()\r\n     .uri(\"/account/0001\")\r\n      .accept(MediaType.APPLICATION_JSON)\r\n      .exchange()\r\n      .expectStatus()\r\n      .isForbidden();\r\n} \r\n```","```\r\n@Test\r\n@WithMockUser(username = \"user1\", roles = {} )\r\nvoid testGivenNoAuthorities_thenForbidden() {\r\n    rest.get()\r\n      .uri(\"/account/0001\")\r\n      .accept(MediaType.APPLICATION_JSON)\r\n      .exchange()\r\n      .expectStatus()\r\n      .isForbidden();\r\n} \r\n```"]