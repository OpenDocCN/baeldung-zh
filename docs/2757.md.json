["```\r\npublic void givenJava9_whenWalkingTheStack_thenFindMethod() {\r\n    StackWalker walker = StackWalker.getInstance();\r\n    Optional<String> methodName = walker.walk(frames -> frames\r\n      .findFirst()\r\n      .map(StackWalker.StackFrame::getMethodName));\r\n\r\n    assertTrue(methodName.isPresent());\r\n    assertEquals(\"givenJava9_whenWalkingTheStack_thenFindMethod\", methodName.get());\r\n}\r\n```","```\r\npublic void givenObject_whenGetEnclosingMethod_thenFindMethod() {\r\n    String methodName = new Object() {}\r\n      .getClass()\r\n      .getEnclosingMethod()\r\n      .getName();\r\n\r\n    assertEquals(\"givenObject_whenGetEnclosingMethod_thenFindMethod\",\r\n      methodName);\r\n}\r\n```","```\r\npublic void givenThrowable_whenGetStacktrace_thenFindMethod() {\r\n    StackTraceElement[] stackTrace = new Throwable().getStackTrace();\r\n\r\n    assertEquals(\r\n      \"givenThrowable_whenGetStacktrace_thenFindMethod\",\r\n      stackTrace[0].getMethodName());\r\n}\r\n```","```\r\npublic void givenCurrentThread_whenGetStackTrace_thenFindMethod() {\r\n    StackTraceElement[] stackTrace = Thread.currentThread()\r\n      .getStackTrace();\r\n\r\n    assertEquals(\r\n      \"givenCurrentThread_whenGetStackTrace_thenFindMethod\",\r\n      stackTrace[1].getMethodName()); \r\n}\r\n```"]