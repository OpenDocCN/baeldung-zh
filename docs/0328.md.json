["```\r\nstatic <K, V> Map<K, V> of() {\r\n    return (Map<K,V>) ImmutableCollections.EMPTY_MAP;\r\n}\r\n```","```\r\nMap<Long, String> map = Map.of();\r\n```","```\r\nstatic <K, V> Map<K, V> of(K k1, V v1) {\r\n    return new ImmutableCollections.Map1<>(k1, v1);\r\n}\r\n```","```\r\nMap<Long, String> map = Map.of(1L, \"value1\"); \r\n```","```\r\nstatic <K, V> Map<K, V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7, K k8, V v8, K k9, V v9, K k10, V v10) {\r\n    return new ImmutableCollections.MapN<>(k1, v1, k2, v2, k3, v3, k4, v4, k5, v5, k6, v6, k7, v7, k8, v8, k9, v9, k10, v10);\r\n}\r\n```","```\r\nstatic <K, V> Map<K, V> ofEntries(Entry<? extends K, ? extends V>... entries) {\r\n    if (entries.length == 0) { // implicit null check of entries array\r\n        var map = (Map<K,V>) ImmutableCollections.EMPTY_MAP;\r\n        return map;\r\n    } else if (entries.length == 1) {\r\n        // implicit null check of the array slot\r\n        return new ImmutableCollections.Map1<>(entries[0].getKey(), entries[0].getValue());\r\n    } else {\r\n        Object[] kva = new Object[entries.length << 1];\r\n        int a = 0;\r\n        for (Entry<? extends K, ? extends V> entry : entries) {\r\n            // implicit null checks of each array slot\r\n            kva[a++] = entry.getKey();\r\n            kva[a++] = entry.getValue();\r\n        }\r\n        return new ImmutableCollections.MapN<>(kva);\r\n     }\r\n}\r\n```","```\r\nMap<Long, String> map = Map.ofEntries();\r\n```","```\r\nMap<Long, String> longUserMap = Map.ofEntries(Map.entry(1L, \"User A\"), Map.entry(2L, \"User B\"));\r\n```"]