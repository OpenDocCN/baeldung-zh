["```\r\n<parent>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-parent</artifactId>\r\n    <version>2.7.2</version>\r\n    <relativePath />\r\n</parent>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\npublic class Application {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n} \r\n```","```\r\nserver.port=8081 \r\n```","```\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId> \r\n</dependency> \r\n```","```\r\nspring.thymeleaf.cache=false\r\nspring.thymeleaf.enabled=true \r\nspring.thymeleaf.prefix=classpath:/templates/\r\nspring.thymeleaf.suffix=.html\r\n\r\nspring.application.name=Bootstrap Spring Boot \r\n```","```\r\n@Controller\r\npublic class SimpleController {\r\n    @Value(\"${spring.application.name}\")\r\n    String appName;\r\n\r\n    @GetMapping(\"/\")\r\n    public String homePage(Model model) {\r\n        model.addAttribute(\"appName\", appName);\r\n        return \"home\";\r\n    }\r\n} \r\n```","```\r\n<html>\r\n<head><title>Home Page</title></head>\r\n<body>\r\n<h1>Hello !</h1>\r\n<p>Welcome to <span th:text=\"${appName}\">Our App</span></p>\r\n</body>\r\n</html> \r\n```","```\r\n<dependency> \r\n    <groupId>org.springframework.boot</groupId> \r\n    <artifactId>spring-boot-starter-security</artifactId> \r\n</dependency> \r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n            .anyRequest()\r\n            .permitAll()\r\n            .and()\r\n            .csrf()\r\n            .disable();\r\n        return http.build();\r\n    }\r\n} \r\n```","```\r\n@Entity\r\npublic class Book {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n\r\n    @Column(nullable = false, unique = true)\r\n    private String title;\r\n\r\n    @Column(nullable = false)\r\n    private String author;\r\n}\r\n```","```\r\npublic interface BookRepository extends CrudRepository<Book, Long> {\r\n    List<Book> findByTitle(String title);\r\n}\r\n```","```\r\n@EnableJpaRepositories(\"com.baeldung.persistence.repo\") \r\n@EntityScan(\"com.baeldung.persistence.model\")\r\n@SpringBootApplication \r\npublic class Application {\r\n   ...\r\n}\r\n```","```\r\nspring.datasource.driver-class-name=org.h2.Driver\r\nspring.datasource.url=jdbc:h2:mem:bootapp;DB_CLOSE_DELAY=-1\r\nspring.datasource.username=sa\r\nspring.datasource.password= \r\n```","```\r\n@RestController\r\n@RequestMapping(\"/api/books\")\r\npublic class BookController {\r\n\r\n    @Autowired\r\n    private BookRepository bookRepository;\r\n\r\n    @GetMapping\r\n    public Iterable findAll() {\r\n        return bookRepository.findAll();\r\n    }\r\n\r\n    @GetMapping(\"/title/{bookTitle}\")\r\n    public List findByTitle(@PathVariable String bookTitle) {\r\n        return bookRepository.findByTitle(bookTitle);\r\n    }\r\n\r\n    @GetMapping(\"/{id}\")\r\n    public Book findOne(@PathVariable Long id) {\r\n        return bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n    }\r\n\r\n    @PostMapping\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    public Book create(@RequestBody Book book) {\r\n        return bookRepository.save(book);\r\n    }\r\n\r\n    @DeleteMapping(\"/{id}\")\r\n    public void delete(@PathVariable Long id) {\r\n        bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n        bookRepository.deleteById(id);\r\n    }\r\n\r\n    @PutMapping(\"/{id}\")\r\n    public Book updateBook(@RequestBody Book book, @PathVariable Long id) {\r\n        if (book.getId() != id) {\r\n          throw new BookIdMismatchException();\r\n        }\r\n        bookRepository.findById(id)\r\n          .orElseThrow(BookNotFoundException::new);\r\n        return bookRepository.save(book);\r\n    }\r\n} \r\n```","```\r\n@ControllerAdvice\r\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    @ExceptionHandler({ BookNotFoundException.class })\r\n    protected ResponseEntity<Object> handleNotFound(\r\n      Exception ex, WebRequest request) {\r\n        return handleExceptionInternal(ex, \"Book not found\", \r\n          new HttpHeaders(), HttpStatus.NOT_FOUND, request);\r\n    }\r\n\r\n    @ExceptionHandler({ BookIdMismatchException.class, \r\n      ConstraintViolationException.class, \r\n      DataIntegrityViolationException.class })\r\n    public ResponseEntity<Object> handleBadRequest(\r\n      Exception ex, WebRequest request) {\r\n        return handleExceptionInternal(ex, ex.getLocalizedMessage(), \r\n          new HttpHeaders(), HttpStatus.BAD_REQUEST, request);\r\n    }\r\n} \r\n```","```\r\npublic class BookNotFoundException extends RuntimeException {\r\n\r\n    public BookNotFoundException(String message, Throwable cause) {\r\n        super(message, cause);\r\n    }\r\n    // ...\r\n} \r\n```","```\r\n<html lang=\"en\">\r\n<head><title>Error Occurred</title></head>\r\n<body>\r\n    <h1>Error Occurred!</h1>    \r\n    <b>[<span th:text=\"${status}\">status</span>]\r\n        <span th:text=\"${error}\">error</span>\r\n    </b>\r\n    <p th:text=\"${message}\">message</p>\r\n</body>\r\n</html>\r\n```","```\r\nserver.error.path=/error2\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class SpringContextTest {\r\n\r\n    @Test\r\n    public void contextLoads() {\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.rest-assured</groupId>\r\n    <artifactId>rest-assured</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class SpringBootBootstrapLiveTest {\r\n\r\n    private static final String API_ROOT\r\n      = \"http://localhost:8081/api/books\";\r\n\r\n    private Book createRandomBook() {\r\n        Book book = new Book();\r\n        book.setTitle(randomAlphabetic(10));\r\n        book.setAuthor(randomAlphabetic(15));\r\n        return book;\r\n    }\r\n\r\n    private String createBookAsUri(Book book) {\r\n        Response response = RestAssured.given()\r\n          .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n          .body(book)\r\n          .post(API_ROOT);\r\n        return API_ROOT + \"/\" + response.jsonPath().get(\"id\");\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenGetAllBooks_thenOK() {\r\n    Response response = RestAssured.get(API_ROOT);\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n}\r\n\r\n@Test\r\npublic void whenGetBooksByTitle_thenOK() {\r\n    Book book = createRandomBook();\r\n    createBookAsUri(book);\r\n    Response response = RestAssured.get(\r\n      API_ROOT + \"/title/\" + book.getTitle());\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertTrue(response.as(List.class)\r\n      .size() > 0);\r\n}\r\n@Test\r\npublic void whenGetCreatedBookById_thenOK() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    Response response = RestAssured.get(location);\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertEquals(book.getTitle(), response.jsonPath()\r\n      .get(\"title\"));\r\n}\r\n\r\n@Test\r\npublic void whenGetNotExistBookById_thenNotFound() {\r\n    Response response = RestAssured.get(API_ROOT + \"/\" + randomNumeric(4));\r\n\r\n    assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatusCode());\r\n} \r\n```","```\r\n@Test\r\npublic void whenCreateNewBook_thenCreated() {\r\n    Book book = createRandomBook();\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .post(API_ROOT);\r\n\r\n    assertEquals(HttpStatus.CREATED.value(), response.getStatusCode());\r\n}\r\n\r\n@Test\r\npublic void whenInvalidBook_thenError() {\r\n    Book book = createRandomBook();\r\n    book.setAuthor(null);\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .post(API_ROOT);\r\n\r\n    assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusCode());\r\n} \r\n```","```\r\n@Test\r\npublic void whenUpdateCreatedBook_thenUpdated() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    book.setId(Long.parseLong(location.split(\"api/books/\")[1]));\r\n    book.setAuthor(\"newAuthor\");\r\n    Response response = RestAssured.given()\r\n      .contentType(MediaType.APPLICATION_JSON_VALUE)\r\n      .body(book)\r\n      .put(location);\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n\r\n    response = RestAssured.get(location);\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n    assertEquals(\"newAuthor\", response.jsonPath()\r\n      .get(\"author\"));\r\n} \r\n```","```\r\n@Test\r\npublic void whenDeleteCreatedBook_thenOk() {\r\n    Book book = createRandomBook();\r\n    String location = createBookAsUri(book);\r\n    Response response = RestAssured.delete(location);\r\n\r\n    assertEquals(HttpStatus.OK.value(), response.getStatusCode());\r\n\r\n    response = RestAssured.get(location);\r\n    assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatusCode());\r\n} \r\n```"]