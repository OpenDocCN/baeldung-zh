["```\r\n<dependency>\r\n    <groupId>com.github.davidmoten</groupId>\r\n    <artifactId>rxjava-jdbc</artifactId>\r\n    <version>0.7.11</version>\r\n</dependency>\r\n```","```\r\npublic static ConnectionProvider connectionProvider\r\n  = new ConnectionProviderFromUrl(\r\n  DB_CONNECTION, DB_USER, DB_PASSWORD);\r\nDatabase db = Database.from(connectionProvider);\r\n```","```\r\npublic class BasicQueryTypesTest {\r\n\r\n    Observable<Integer> create,\r\n      insert1, \r\n      insert2, \r\n      insert3, \r\n      update, \r\n      delete = null;\r\n\r\n    @Test\r\n    public void whenCreateTableAndInsertRecords_thenCorrect() {\r\n        create = db.update(\r\n          \"CREATE TABLE IF NOT EXISTS EMPLOYEE(\"\r\n          + \"id int primary key, name varchar(255))\")\r\n          .count();\r\n        insert1 = db.update(\r\n          \"INSERT INTO EMPLOYEE(id, name) VALUES(1, 'John')\")\r\n          .dependsOn(create)\r\n          .count();\r\n        update = db.update(\r\n          \"UPDATE EMPLOYEE SET name = 'Alan' WHERE id = 1\")\r\n          .dependsOn(create)\r\n          .count();\r\n        insert2 = db.update(\r\n          \"INSERT INTO EMPLOYEE(id, name) VALUES(2, 'Sarah')\")\r\n          .dependsOn(create)\r\n          .count();\r\n        insert3 = db.update(\r\n          \"INSERT INTO EMPLOYEE(id, name) VALUES(3, 'Mike')\")\r\n          .dependsOn(create)\r\n          .count();\r\n        delete = db.update(\r\n          \"DELETE FROM EMPLOYEE WHERE id = 2\")\r\n          .dependsOn(create)\r\n          .count();\r\n        List<String> names = db.select(\r\n          \"select name from EMPLOYEE where id < ?\")\r\n          .parameter(3)\r\n          .dependsOn(create)\r\n          .dependsOn(insert1)\r\n          .dependsOn(insert2)\r\n          .dependsOn(insert3)\r\n          .dependsOn(update)\r\n          .dependsOn(delete)\r\n          .getAs(String.class)\r\n          .toList()\r\n          .toBlocking()\r\n          .single();\r\n\r\n        assertEquals(Arrays.asList(\"Alan\"), names);\r\n    }\r\n}\r\n```","```\r\npublic interface Employee {\r\n\r\n    @Column(\"id\")\r\n    int id();\r\n\r\n    @Column(\"name\")\r\n    String name();\r\n}\r\n```","```\r\n@Test\r\npublic void whenSelectFromTableAndAutomap_thenCorrect() {\r\n    List<Employee> employees = db.select(\"select id, name from EMPLOYEE\")\r\n      .dependsOn(create)\r\n      .dependsOn(insert1)\r\n      .dependsOn(insert2)\r\n      .autoMap(Employee.class)\r\n      .toList()\r\n      .toBlocking()\r\n      .single();\r\n\r\n    assertThat(\r\n      employees.get(0).id()).isEqualTo(1);\r\n    assertThat(\r\n      employees.get(0).name()).isEqualTo(\"Alan\");\r\n    assertThat(\r\n      employees.get(1).id()).isEqualTo(2);\r\n    assertThat(\r\n      employees.get(1).name()).isEqualTo(\"Sarah\");\r\n}\r\n```","```\r\npublic class Manager {\r\n\r\n    private int id;\r\n    private String name;\r\n\r\n    // standard constructors, getters, and setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenSelectManagersAndAutomap_thenCorrect() {\r\n    List<Manager> managers = db.select(\"select id, name from MANAGER\")\r\n      .dependsOn(create)\r\n      .dependsOn(insert1)\r\n      .dependsOn(insert2)\r\n      .autoMap(Manager.class)\r\n      .toList()\r\n      .toBlocking()\r\n      .single();\r\n\r\n    assertThat(\r\n      managers.get(0).getId()).isEqualTo(1);\r\n    assertThat(\r\n     managers.get(0).getName()).isEqualTo(\"Alan\");\r\n    assertThat(\r\n      managers.get(1).getId()).isEqualTo(2);\r\n    assertThat(\r\n      managers.get(1).getName()).isEqualTo(\"Sarah\");\r\n}\r\n```","```\r\n@Before\r\npublic void setup() throws IOException {\r\n    create = db.update(\r\n      \"CREATE TABLE IF NOT EXISTS \" + \r\n      \"SERVERLOG (id int primary key, document CLOB)\")\r\n        .count();\r\n\r\n    InputStream actualInputStream\r\n      = new FileInputStream(\"src/test/resources/actual_clob\");\r\n    actualDocument = getStringFromInputStream(actualInputStream);\r\n\r\n    InputStream expectedInputStream = new FileInputStream(\r\n      \"src/test/resources/expected_clob\");\r\n\r\n    expectedDocument = getStringFromInputStream(expectedInputStream);\r\n    insert = db.update(\r\n      \"insert into SERVERLOG(id,document) values(?,?)\")\r\n        .parameter(1)\r\n        .parameter(Database.toSentinelIfNull(actualDocument))\r\n      .dependsOn(create)\r\n      .count();\r\n}\r\n\r\n@Test\r\npublic void whenSelectCLOB_thenCorrect() throws IOException {\r\n    db.select(\"select document from SERVERLOG where id = 1\")\r\n      .dependsOn(create)\r\n      .dependsOn(insert)\r\n      .getAs(String.class)\r\n      .toList()\r\n      .toBlocking()\r\n      .single();\r\n\r\n    assertEquals(expectedDocument, actualDocument);\r\n}\r\n```","```\r\n@Before\r\npublic void setup() throws IOException {\r\n    create = db.update(\r\n      \"CREATE TABLE IF NOT EXISTS \" \r\n      + \"SERVERLOG (id int primary key, document BLOB)\")\r\n        .count();\r\n\r\n    InputStream actualInputStream\r\n      = new FileInputStream(\"src/test/resources/actual_clob\");\r\n    actualDocument = getStringFromInputStream(actualInputStream);\r\n    byte[] bytes = this.actualDocument.getBytes(StandardCharsets.UTF_8);\r\n\r\n    InputStream expectedInputStream = new FileInputStream(\r\n      \"src/test/resources/expected_clob\");\r\n    expectedDocument = getStringFromInputStream(expectedInputStream);\r\n    insert = db.update(\r\n      \"insert into SERVERLOG(id,document) values(?,?)\")\r\n      .parameter(1)\r\n      .parameter(Database.toSentinelIfNull(bytes))\r\n      .dependsOn(create)\r\n      .count();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCommitTransaction_thenRecordUpdated() {\r\n    Observable<Boolean> begin = db.beginTransaction();\r\n    Observable<Integer> createStatement = db.update(\r\n      \"CREATE TABLE IF NOT EXISTS EMPLOYEE(id int primary key, name varchar(255))\")\r\n      .dependsOn(begin)\r\n      .count();\r\n    Observable<Integer> insertStatement = db.update(\r\n      \"INSERT INTO EMPLOYEE(id, name) VALUES(1, 'John')\")\r\n      .dependsOn(createStatement)\r\n      .count();\r\n    Observable<Integer> updateStatement = db.update(\r\n      \"UPDATE EMPLOYEE SET name = 'Tom' WHERE id = 1\")\r\n      .dependsOn(insertStatement)\r\n      .count();\r\n    Observable<Boolean> commit = db.commit(updateStatement);\r\n    String name = db.select(\"select name from EMPLOYEE WHERE id = 1\")\r\n      .dependsOn(commit)\r\n      .getAs(String.class)\r\n      .toBlocking()\r\n      .single();\r\n\r\n    assertEquals(\"Tom\", name);\r\n}\r\n```","```\r\n@Test\r\npublic void whenInsertAndReturnGeneratedKey_thenCorrect() {\r\n    Integer key = db.update(\"INSERT INTO EMPLOYEE(name) VALUES('John')\")\r\n      .dependsOn(createStatement)\r\n      .returnGeneratedKeys()\r\n      .getAs(Integer.class)\r\n      .count()\r\n      .toBlocking()\r\n      .single();\r\n\r\n    assertThat(key).isEqualTo(1);\r\n}\r\n```"]