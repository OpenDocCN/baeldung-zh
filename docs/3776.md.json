["```\r\n@Configuration\r\n@EnableWebSocketMessageBroker\r\npublic class WebSocketConfig\r\n  extends AbstractWebSocketMessageBrokerConfigurer {\r\n\r\n    @Override\r\n    public void configureMessageBroker(MessageBrokerRegistry config) {\r\n        config.enableSimpleBroker(\"/topic/\", \"/queue/\");\r\n\tconfig.setApplicationDestinationPrefixes(\"/app\");\r\n    }\r\n\r\n    @Override\r\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\r\n\tregistry.addEndpoint(\"/greeting\");\r\n    }\t\r\n}\r\n```","```\r\nregistry.addEndpoint(\"/greeting\").withSockJS();\r\n```","```\r\n@Override\r\npublic void registerStompEndpoints(StompEndpointRegistry registry) {\r\n\r\nregistry\r\n  .addEndpoint(\"/greeting\")\r\n  .setHandshakeHandler(new DefaultHandshakeHandler() {\r\n\r\n      public boolean beforeHandshake(\r\n        ServerHttpRequest request, \r\n        ServerHttpResponse response, \r\n        WebSocketHandler wsHandler,\r\n        Map attributes) throws Exception {\r\n\r\n            if (request instanceof ServletServerHttpRequest) {\r\n                ServletServerHttpRequest servletRequest\r\n                 = (ServletServerHttpRequest) request;\r\n                HttpSession session = servletRequest\r\n                  .getServletRequest().getSession();\r\n                attributes.put(\"sessionId\", session.getId());\r\n            }\r\n                return true;\r\n        }}).withSockJS();\r\n    }\r\n```","```\r\n@Controller\r\npublic class WebSocketController {\r\n\r\n    @Autowired\r\n    private SimpMessageSendingOperations messagingTemplate;\r\n\r\n    private Gson gson = new Gson();\r\n\r\n    @MessageMapping(\"/message\")\r\n    @SendToUser(\"/queue/reply\")\r\n    public String processMessageFromClient(\r\n      @Payload String message, \r\n      Principal principal) throws Exception {\r\n\treturn gson\r\n          .fromJson(message, Map.class)\r\n          .get(\"name\").toString();\r\n    }\r\n\r\n    @MessageExceptionHandler\r\n    @SendToUser(\"/queue/errors\")\r\n    public String handleException(Throwable exception) {\r\n        return exception.getMessage();\r\n    }\r\n}\r\n```","```\r\nfunction connect() {\r\n    var socket = new WebSocket('ws://localhost:8080/greeting');\r\n    ws = Stomp.over(socket);\r\n\r\n    ws.connect({}, function(frame) {\r\n        ws.subscribe(\"/user/queue/errors\", function(message) {\r\n            alert(\"Error \" + message.body);\r\n        });\r\n\r\n        ws.subscribe(\"/user/queue/reply\", function(message) {\r\n            alert(\"Message \" + message.body);\r\n        });\r\n    }, function(error) {\r\n        alert(\"STOMP error \" + error);\r\n    });\r\n}\r\n\r\nfunction disconnect() {\r\n    if (ws != null) {\r\n        ws.close();\r\n    }\r\n    setConnected(false);\r\n    console.log(\"Disconnected\");\r\n}\r\n```"]