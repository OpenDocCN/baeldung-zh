["```\r\n@Test\r\npublic void whenBigDecimalCreated_thenValueMatches() {\r\n    BigDecimal bdFromString = new BigDecimal(\"0.1\");\r\n    BigDecimal bdFromCharArray = new BigDecimal(new char[] {'3','.','1','6','1','5'});\r\n    BigDecimal bdlFromInt = new BigDecimal(42);\r\n    BigDecimal bdFromLong = new BigDecimal(123412345678901L);\r\n    BigInteger bigInteger = BigInteger.probablePrime(100, new Random());\r\n    BigDecimal bdFromBigInteger = new BigDecimal(bigInteger);\r\n\r\n    assertEquals(\"0.1\",bdFromString.toString());\r\n    assertEquals(\"3.1615\",bdFromCharArray.toString());\r\n    assertEquals(\"42\",bdlFromInt.toString());\r\n    assertEquals(\"123412345678901\",bdFromLong.toString());\r\n    assertEquals(bigInteger.toString(),bdFromBigInteger.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenBigDecimalCreatedFromDouble_thenValueMayNotMatch() {\r\n    BigDecimal bdFromDouble = new BigDecimal(0.1d);\r\n    assertNotEquals(\"0.1\", bdFromDouble.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenBigDecimalCreatedUsingValueOf_thenValueMatches() {\r\n    BigDecimal bdFromLong1 = BigDecimal.valueOf(123412345678901L);\r\n    BigDecimal bdFromLong2 = BigDecimal.valueOf(123412345678901L, 2);\r\n    BigDecimal bdFromDouble = BigDecimal.valueOf(0.1d);\r\n\r\n    assertEquals(\"123412345678901\", bdFromLong1.toString());\r\n    assertEquals(\"1234123456789.01\", bdFromLong2.toString());\r\n    assertEquals(\"0.1\", bdFromDouble.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenGettingAttributes_thenExpectedResult() {\r\n    BigDecimal bd = new BigDecimal(\"-12345.6789\");\r\n\r\n    assertEquals(9, bd.precision());\r\n    assertEquals(4, bd.scale());\r\n    assertEquals(-1, bd.signum());\r\n}\r\n```","```\r\n@Test\r\npublic void whenComparingBigDecimals_thenExpectedResult() {\r\n    BigDecimal bd1 = new BigDecimal(\"1.0\");\r\n    BigDecimal bd2 = new BigDecimal(\"1.00\");\r\n    BigDecimal bd3 = new BigDecimal(\"2.0\");\r\n\r\n    assertTrue(bd1.compareTo(bd3) < 0);\r\n    assertTrue(bd3.compareTo(bd1) > 0);\r\n    assertTrue(bd1.compareTo(bd2) == 0);\r\n    assertTrue(bd1.compareTo(bd3) <= 0);\r\n    assertTrue(bd1.compareTo(bd2) >= 0);\r\n    assertTrue(bd1.compareTo(bd3) != 0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenEqualsCalled_thenSizeAndScaleMatched() {\r\n    BigDecimal bd1 = new BigDecimal(\"1.0\");\r\n    BigDecimal bd2 = new BigDecimal(\"1.00\");\r\n\r\n    assertFalse(bd1.equals(bd2));\r\n}\r\n```","```\r\n@Test\r\npublic void whenPerformingArithmetic_thenExpectedResult() {\r\n    BigDecimal bd1 = new BigDecimal(\"4.0\");\r\n    BigDecimal bd2 = new BigDecimal(\"2.0\");\r\n\r\n    BigDecimal sum = bd1.add(bd2);\r\n    BigDecimal difference = bd1.subtract(bd2);\r\n    BigDecimal quotient = bd1.divide(bd2);\r\n    BigDecimal product = bd1.multiply(bd2);\r\n\r\n    assertTrue(sum.compareTo(new BigDecimal(\"6.0\")) == 0);\r\n    assertTrue(difference.compareTo(new BigDecimal(\"2.0\")) == 0);\r\n    assertTrue(quotient.compareTo(new BigDecimal(\"2.0\")) == 0);\r\n    assertTrue(product.compareTo(new BigDecimal(\"8.0\")) == 0);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRoundingDecimal_thenExpectedResult() {\r\n    BigDecimal bd = new BigDecimal(\"2.5\");\r\n    // Round to 1 digit using HALF_EVEN\r\n    BigDecimal rounded = bd\r\n        .round(new MathContext(1, RoundingMode.HALF_EVEN));\r\n\r\n    assertEquals(\"2\", rounded.toString());\r\n}\r\n```","```\r\npublic static BigDecimal calculateTotalAmount(BigDecimal quantity,\r\n    BigDecimal unitPrice, BigDecimal discountRate, BigDecimal taxRate) { \r\n    BigDecimal amount = quantity.multiply(unitPrice);\r\n    BigDecimal discount = amount.multiply(discountRate);\r\n    BigDecimal discountedAmount = amount.subtract(discount);\r\n    BigDecimal tax = discountedAmount.multiply(taxRate);\r\n    BigDecimal total = discountedAmount.add(tax);\r\n\r\n    // round to 2 decimal places using HALF_EVEN\r\n    BigDecimal roundedTotal = total.setScale(2, RoundingMode.HALF_EVEN);\r\n\r\n    return roundedTotal;\r\n}\r\n```","```\r\n@Test\r\npublic void givenPurchaseTxn_whenCalculatingTotalAmount_thenExpectedResult() {\r\n    BigDecimal quantity = new BigDecimal(\"4.5\");\r\n    BigDecimal unitPrice = new BigDecimal(\"2.69\");\r\n    BigDecimal discountRate = new BigDecimal(\"0.10\");\r\n    BigDecimal taxRate = new BigDecimal(\"0.0725\");\r\n\r\n    BigDecimal amountToBePaid = BigDecimalDemo\r\n      .calculateTotalAmount(quantity, unitPrice, discountRate, taxRate);\r\n\r\n    assertEquals(\"11.68\", amountToBePaid.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenBigIntegerCreatedFromConstructor_thenExpectedResult() {\r\n    BigInteger biFromString = new BigInteger(\"1234567890987654321\");\r\n    BigInteger biFromByteArray = new BigInteger(\r\n       new byte[] { 64, 64, 64, 64, 64, 64 });\r\n    BigInteger biFromSignMagnitude = new BigInteger(-1,\r\n       new byte[] { 64, 64, 64, 64, 64, 64 });\r\n\r\n    assertEquals(\"1234567890987654321\", biFromString.toString());\r\n    assertEquals(\"70644700037184\", biFromByteArray.toString());\r\n    assertEquals(\"-70644700037184\", biFromSignMagnitude.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void whenLongConvertedToBigInteger_thenValueMatches() {\r\n    BigInteger bi =  BigInteger.valueOf(2305843009213693951L);\r\n\r\n    assertEquals(\"2305843009213693951\", bi.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whentCompared_thenExpectedResult() {\r\n    BigInteger i = new BigInteger(\"123456789012345678901234567890\");\r\n    BigInteger j = new BigInteger(\"123456789012345678901234567891\");\r\n    BigInteger k = new BigInteger(\"123456789012345678901234567892\");\r\n\r\n    assertTrue(i.compareTo(i) == 0);\r\n    assertTrue(j.compareTo(i) > 0);\r\n    assertTrue(j.compareTo(k) < 0);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whenPerformingArithmetic_thenExpectedResult() {\r\n    BigInteger i = new BigInteger(\"4\");\r\n    BigInteger j = new BigInteger(\"2\");\r\n\r\n    BigInteger sum = i.add(j);\r\n    BigInteger difference = i.subtract(j);\r\n    BigInteger quotient = i.divide(j);\r\n    BigInteger product = i.multiply(j);\r\n\r\n    assertEquals(new BigInteger(\"6\"), sum);\r\n    assertEquals(new BigInteger(\"2\"), difference);\r\n    assertEquals(new BigInteger(\"2\"), quotient);\r\n    assertEquals(new BigInteger(\"8\"), product);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whenPerformingBitOperations_thenExpectedResult() {\r\n    BigInteger i = new BigInteger(\"17\");\r\n    BigInteger j = new BigInteger(\"7\");\r\n\r\n    BigInteger and = i.and(j);\r\n    BigInteger or = i.or(j);\r\n    BigInteger not = j.not();\r\n    BigInteger xor = i.xor(j);\r\n    BigInteger andNot = i.andNot(j);\r\n    BigInteger shiftLeft = i.shiftLeft(1);\r\n    BigInteger shiftRight = i.shiftRight(1);\r\n\r\n    assertEquals(new BigInteger(\"1\"), and);\r\n    assertEquals(new BigInteger(\"23\"), or);\r\n    assertEquals(new BigInteger(\"-8\"), not);\r\n    assertEquals(new BigInteger(\"22\"), xor);\r\n    assertEquals(new BigInteger(\"16\"), andNot);\r\n    assertEquals(new BigInteger(\"34\"), shiftLeft);\r\n    assertEquals(new BigInteger(\"8\"), shiftRight);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whenPerformingBitManipulations_thenExpectedResult() {\r\n    BigInteger i = new BigInteger(\"1018\");\r\n\r\n    int bitCount = i.bitCount();\r\n    int bitLength = i.bitLength();\r\n    int getLowestSetBit = i.getLowestSetBit();\r\n    boolean testBit3 = i.testBit(3);\r\n    BigInteger setBit12 = i.setBit(12);\r\n    BigInteger flipBit0 = i.flipBit(0);\r\n    BigInteger clearBit3 = i.clearBit(3);\r\n\r\n    assertEquals(8, bitCount);\r\n    assertEquals(10, bitLength);\r\n    assertEquals(1, getLowestSetBit);\r\n    assertEquals(true, testBit3);\r\n    assertEquals(new BigInteger(\"5114\"), setBit12);\r\n    assertEquals(new BigInteger(\"1019\"), flipBit0);\r\n    assertEquals(new BigInteger(\"1010\"), clearBit3);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whenModularCalculation_thenExpectedResult() {\r\n    BigInteger i = new BigInteger(\"31\");\r\n    BigInteger j = new BigInteger(\"24\");\r\n    BigInteger k = new BigInteger(\"16\");\r\n\r\n    BigInteger gcd = j.gcd(k);\r\n    BigInteger multiplyAndmod = j.multiply(k).mod(i);\r\n    BigInteger modInverse = j.modInverse(i);\r\n    BigInteger modPow = j.modPow(k, i);\r\n\r\n    assertEquals(new BigInteger(\"8\"), gcd);\r\n    assertEquals(new BigInteger(\"12\"), multiplyAndmod);\r\n    assertEquals(new BigInteger(\"22\"), modInverse);\r\n    assertEquals(new BigInteger(\"7\"), modPow);\r\n}\r\n```","```\r\n@Test\r\npublic void givenBigIntegers_whenPrimeOperations_thenExpectedResult() {\r\n    BigInteger i = BigInteger.probablePrime(100, new Random());\r\n\r\n    boolean isProbablePrime = i.isProbablePrime(1000);\r\n    assertEquals(true, isProbablePrime);\r\n}\r\n```"]