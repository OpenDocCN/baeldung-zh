["```\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-stream_2.11</artifactId>\r\n    <version>2.5.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.typesafe.akka</groupId>\r\n    <artifactId>akka-stream-testkit_2.11</artifactId>\r\n    <version>2.5.2</version>\r\n</dependency>\r\n```","```\r\npublic class DataImporter {\r\n    private ActorSystem actorSystem;\r\n\r\n    // standard constructors, getters...\r\n}\r\n```","```\r\nprivate List<Integer> parseLine(String line) {\r\n    String[] fields = line.split(\";\");\r\n    return Arrays.stream(fields)\r\n      .map(Integer::parseInt)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\nprivate Flow<String, Integer, NotUsed> parseContent() {\r\n    return Flow.of(String.class)\r\n      .mapConcat(this::parseLine);\r\n}\r\n```","```\r\nprivate Flow<Integer, Double, NotUsed> computeAverage() {\r\n    return Flow.of(Integer.class)\r\n      .grouped(2)\r\n      .mapAsyncUnordered(8, integers ->\r\n        CompletableFuture.supplyAsync(() -> integers.stream()\r\n          .mapToDouble(v -> v)\r\n          .average()\r\n          .orElse(-1.0)));\r\n}\r\n```","```\r\nFlow<String, Double, NotUsed> calculateAverage() {\r\n    return Flow.of(String.class)\r\n      .via(parseContent())\r\n      .via(computeAverage());\r\n}\r\n```","```\r\nCompletionStage<Double> save(Double average) {\r\n    return CompletableFuture.supplyAsync(() -> {\r\n        // write to database\r\n        return average;\r\n    });\r\n}\r\n```","```\r\nprivate Sink<Double, CompletionStage<Done>> storeAverages() {\r\n    return Flow.of(Double.class)\r\n      .mapAsyncUnordered(4, averageRepository::save)\r\n      .toMat(Sink.ignore(), Keep.right());\r\n}\r\n```","```\r\nCompletionStage<Done> calculateAverageForContent(String content) {\r\n    return Source.single(content)\r\n      .via(calculateAverage())\r\n      .runWith(storeAverages(), ActorMaterializer.create(actorSystem))\r\n      .whenComplete((d, e) -> {\r\n          if (d != null) {\r\n              System.out.println(\"Import finished \");\r\n          } else {\r\n              e.printStackTrace();\r\n          }\r\n      });\r\n}\r\n```","```\r\n@Test\r\npublic void givenStreamOfIntegers_whenCalculateAverageOfPairs_thenShouldReturnProperResults() {\r\n    // given\r\n    Flow<String, Double, NotUsed> tested = new DataImporter(actorSystem).calculateAverage();\r\n    String input = \"1;9;11;0\";\r\n\r\n    // when\r\n    Source<Double, NotUsed> flow = Source.single(input).via(tested);\r\n\r\n    // then\r\n    flow\r\n      .runWith(TestSink.probe(actorSystem), ActorMaterializer.create(actorSystem))\r\n      .request(4)\r\n      .expectNextUnordered(5d, 5.5);\r\n}\r\n```"]