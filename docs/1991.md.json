["```\r\npublic int longToIntCast(long number) {\r\n    return (int) number;\r\n}\r\n```","```\r\npublic int longToIntJavaWithMath(long number) {\r\nreturn Math.toIntExact(number);\r\n}\r\n```","```\r\npublic int longToIntBoxingValues(long number) {\r\n    return Long.valueOf(number).intValue();\r\n}\r\n```","```\r\npublic static int longToIntWithBigDecimal(long number) {\r\n    return new BigDecimal(number).intValueExact();\r\n}\r\n```","```\r\npublic int longToIntGuava(long number) {\r\n    return Ints.checkedCast(number);\r\n}\r\n```","```\r\npublic int longToIntGuavaSaturated(long number) {\r\n    return Ints.saturatedCast(number);\r\n}\r\n```","```\r\n@Test\r\npublic void longToIntSafeCast() {\r\n    long max = Integer.MAX_VALUE + 10L;\r\n    int expected = -2147483639;\r\n    assertEquals(expected, longToIntCast(max));\r\n    assertEquals(expected, longToIntJavaWithLambda(max));\r\n    assertEquals(expected, longToIntBoxingValues(max));\r\n}\r\n```","```\r\n@Test\r\npublic void longToIntIntegerException() {\r\n    long max = Integer.MAX_VALUE + 10L;\r\n    assertThrows(ArithmeticException.class, () -> ConvertLongToInt.longToIntWithBigDecimal(max));\r\n    assertThrows(ArithmeticException.class, () -> ConvertLongToInt.longToIntJavaWithMath(max));\r\n    assertThrows(IllegalArgumentException.class, () -> ConvertLongToInt.longToIntGuava(max));\r\n}\r\n```","```\r\n@Test\r\npublic void longToIntGuavaSaturated() {\r\n    long max = Integer.MAX_VALUE + 10L;\r\n    int expected = 2147483647;\r\n    assertEquals(expected, ConvertLongToInt.longToIntGuavaSaturated(max));\r\n}\r\n```"]