["```\r\n<dependency>\r\n    <groupId>org.projectlombok</groupId>\r\n    <artifactId>lombok</artifactId>\r\n    <version>1.18.20</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\nimport lombok.val;\r\n```","```\r\npublic Class name() {\r\n    val name = \"name\";\r\n    System.out.println(\"Name: \" + name);\r\n    return name.getClass();\r\n}\r\n```","```\r\nfinal java.lang.String name = \"name\";\r\n```","```\r\npublic Class age() {\r\n    val age = Integer.valueOf(30);\r\n    System.out.println(\"Age: \" + age);\r\n    return age.getClass();\r\n}\r\n```","```\r\nfinal java.lang.Integer age = Integer.valueOf(30);\r\n```","```\r\npublic Class listOf() {\r\n    val agenda = new ArrayList<String>();\r\n    agenda.add(\"Day 1\");\r\n    System.out.println(\"Agenda: \" + agenda);\r\n    return agenda.getClass();\r\n}\r\n```","```\r\nfinal java.util.ArrayList<java.lang.String> agenda = new ArrayList<String>();\r\n```","```\r\npublic Class mapOf() {\r\n    val books = new HashMap<Integer, String>();\r\n    books.put(1, \"Book 1\");\r\n    books.put(2, \"Book 2\");\r\n    System.out.println(\"Books:\");\r\n    for (val entry : books.entrySet()) {\r\n        System.out.printf(\"- %d. %s\\n\", entry.getKey(), entry.getValue());\r\n    }\r\n    return books.getClass();\r\n}\r\n```","```\r\nfinal java.util.HashMap<java.lang.Integer, java.lang.String> books = new HashMap<Integer, String>();\r\n// ...\r\nfor (final java.util.Map.Entry<java.lang.Integer, java.lang.String> entry : books.entrySet()) {\r\n   // ...\r\n}\r\n```","```\r\nname = \"newName\";\r\n\r\n[12,9] cannot assign a value to final variable name\r\n```","```\r\nValExample val = new ValExample();\r\nassertThat(val.name()).isEqualTo(String.class);\r\nassertThat(val.age()).isEqualTo(Integer.class);\r\nassertThat(val.listOf()).isEqualTo(ArrayList.class);\r\nassertThat(val.mapOf()).isEqualTo(HashMap.class);\r\n```","```\r\nName: name\r\nAge: 30\r\nAgenda: [Day 1]\r\nBooks:\r\n- 1\\. Book 1\r\n- 2\\. Book 2\r\n```","```\r\nimport lombok.var;\r\n\r\nvar name = \"name\";\r\nname = \"newName\";\r\n\r\nvar age = Integer.valueOf(30);\r\nage = 35;\r\n\r\nvar agenda = new ArrayList<String>();\r\nagenda.add(\"Day 1\");\r\nagenda = new ArrayList<String>(Arrays.asList(\"Day 2\"));\r\n\r\nvar books = new HashMap<Integer, String>();\r\nbooks.put(1, \"Book 1\");\r\nbooks.put(2, \"Book 2\");\r\nbooks = new HashMap<Integer, String>();\r\nbooks.put(3, \"Book 3\");\r\nbooks.put(4, \"Book 4\");\r\n```","```\r\nvar name = \"name\";\r\n\r\nvar age = Integer.valueOf(30);\r\n\r\nvar agenda = new ArrayList<String>();\r\n\r\nvar books = new HashMap<Integer, String>();\r\n```","```\r\nbooks = new ArrayList<String>();\r\n\r\n[37,17] incompatible types: java.util.ArrayList<java.lang.String> cannot be converted to java.util.HashMap<java.lang.Integer,java.lang.String>\r\n```","```\r\nVarExample varExample = new VarExample();\r\nassertThat(varExample.name()).isEqualTo(\"newName\");\r\nassertThat(varExample.age()).isEqualTo(35);\r\nassertThat(\"Day 2\").isIn(varExample.listOf());\r\nassertThat(varExample.mapOf()).containsValue(\"Book 3\");\r\n```","```\r\nName: newName\r\nAge: 35\r\nAgenda: [Day 2]\r\nBooks:\r\n- 3\\. Book 3\r\n- 4\\. Book 4\r\n```","```\r\nval compound = isArray ? new ArrayList<String>() : new HashSet<String>();\r\n```","```\r\nfinal java.util.AbstractCollection<java.lang.String> compound = isArray ? new ArrayList<String>() : new HashSet<String>();\r\n```","```\r\nlombok.var.flagUsage = error\r\nlombok.val.flagUsage = warning\r\n```","```\r\n[12,13] Use of var is flagged according to lombok configuration.\r\n```","```\r\nValExample.java:18: warning: Use of val is flagged according to lombok configuration.\r\nval age = Integer.valueOf(30); \r\n```"]