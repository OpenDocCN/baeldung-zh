["```\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-core</artifactId>\r\n    <version>3.4.1</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\nassertThat(frodo)\r\n  .isNotEqualTo(sauron)\r\n  .isIn(fellowshipOfTheRing);\r\n\r\nassertThat(frodo.getName())\r\n  .startsWith(\"Fro\")\r\n  .endsWith(\"do\")\r\n  .isEqualToIgnoringCase(\"frodo\");\r\n\r\nassertThat(fellowshipOfTheRing)\r\n  .hasSize(9)\r\n  .contains(frodo, sam)\r\n  .doesNotContain(sauron);\r\n```","```\r\nimport static org.assertj.core.api.Assertions.*;\r\n```","```\r\nassertThat(anyRefenceOrValue);\r\n```","```\r\npublic class Dog { \r\n    private String name; \r\n    private Float weight;\r\n\r\n    // standard getters and setters\r\n}\r\n\r\nDog fido = new Dog(\"Fido\", 5.25);\r\n\r\nDog fidosClone = new Dog(\"Fido\", 5.25);\r\n```","```\r\nassertThat(fido).isEqualTo(fidosClone);\r\n```","```\r\nassertThat(fido).isEqualToComparingFieldByFieldRecursively(fidosClone);\r\n```","```\r\nassertThat(\"\".isEmpty()).isTrue();\r\n```","```\r\nList<String> list = Arrays.asList(\"1\", \"2\", \"3\");\r\n\r\nassertThat(list).contains(\"1\");\r\n```","```\r\nassertThat(list).isNotEmpty();\r\n```","```\r\nassertThat(list).startsWith(\"1\");\r\n```","```\r\nassertThat(list)\r\n  .isNotEmpty()\r\n  .contains(\"1\")\r\n  .doesNotContainNull()\r\n  .containsSequence(\"2\", \"3\");\r\n```","```\r\nassertThat(someCharacter)\r\n  .isNotEqualTo('a')\r\n  .inUnicode()\r\n  .isGreaterThanOrEqualTo('b')\r\n  .isLowerCase();\r\n```","```\r\nassertThat(Runnable.class).isInterface();\r\n```","```\r\nassertThat(Exception.class).isAssignableFrom(NoSuchElementException.class);\r\n```","```\r\n assertThat(someFile)\r\n   .exists()\r\n   .isFile()\r\n   .canRead()\r\n   .canWrite();\r\n```","```\r\nassertThat(5.1).isEqualTo(5, withPrecision(1d));\r\n```","```\r\nassertThat(given).hasSameContentAs(expected);\r\n```","```\r\nassertThat(map)\r\n  .isNotEmpty()\r\n  .containsKey(2)\r\n  .doesNotContainKeys(10)\r\n  .contains(entry(2, \"a\"));\r\n```","```\r\nassertThat(ex).hasNoCause().hasMessageEndingWith(\"c\");\r\n```","```\r\nassertThat(person.getAge())\r\n  .as(\"%s's age should be equal to 100\", person.getName())\r\n  .isEqualTo(100);\r\n```","```\r\n[Alex's age should be equal to 100] expected:<100> but was:<34>\r\n```","```\r\nassertThat(fellowshipOfTheRing)\r\n  .filteredOn(\"race\", HOBBIT)\r\n  .containsOnly(sam, frodo, pippin, merry);\r\n```","```\r\nassertThat(fellowshipOfTheRing)\r\n  .filteredOn(character -> character.getRace().equals(HOBBIT))\r\n  .containsOnly(sam, frodo, pippin, merry);\r\n```"]