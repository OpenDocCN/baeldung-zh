["```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>java-hamcrest</artifactId>\r\n    <version>2.0.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nString testString = \"hamcrest core\";\r\n\r\nassertThat(testString, is(\"hamcrest core\"));\r\nassertThat(testString, is(equalTo(\"hamcrest core\")));\r\n```","```\r\nString actualString = \"equalTo match\";\r\nList<String> actualList = Lists.newArrayList(\"equalTo\", \"match\");\r\n\r\nassertThat(actualString, is(equalTo(\"equalTo match\")));\r\nassertThat(actualList, is(equalTo(Lists.newArrayList(\"equalTo\", \"match\"))));\r\n```","```\r\nObject original = 100;\r\nassertThat(original, equalToObject(100));\r\n```","```\r\nString testString = \"troy kingdom\";\r\n\r\nassertThat(testString, not(\"german kingdom\"));\r\nassertThat(testString, is(not(equalTo(\"german kingdom\"))));\r\nassertThat(testString, is(not(instanceOf(Integer.class))));\r\n```","```\r\nInteger nullObject = null;\r\n\r\nassertThat(nullObject, is(nullValue()));\r\nassertThat(nullObject, is(nullValue(Integer.class)));\r\n```","```\r\nInteger testNumber = 123;\r\n\r\nassertThat(testNumber, is(notNullValue()));\r\nassertThat(testNumber, is(notNullValue(Integer.class)));\r\n```","```\r\nassertThat(\"instanceOf example\", is(instanceOf(String.class)));\r\n```","```\r\nassertThat(\"Drogon is biggest dragon\", isA(String.class));\r\n```","```\r\nString string1 = \"Viseron\";\r\nString string2 = string1;\r\n\r\nassertThat(string1, is(sameInstance(string2)));\r\n```","```\r\nassertThat(\"test string\", is(any(String.class)));\r\nassertThat(\"test string\", is(any(Object.class)));\r\n```","```\r\nString testString = \"Achilles is powerful\";\r\nassertThat(testString, allOf(startsWith(\"Achi\"), endsWith(\"ul\"), containsString(\"Achilles\")));\r\n```","```\r\nString testString = \"Hector killed Achilles\";\r\nassertThat(testString, anyOf(startsWith(\"Hec\"), containsString(\"baeldung\")));\r\n```","```\r\nList<String> list = Lists.newArrayList(\"java\", \"spring\", \"baeldung\");\r\n\r\nassertThat(list, hasItem(\"java\"));\r\nassertThat(list, hasItem(isA(String.class)));\r\n```","```\r\nList<String> list = Lists.newArrayList(\"java\", \"spring\", \"baeldung\");\r\n\r\nassertThat(list, hasItems(\"java\", \"baeldung\"));\r\nassertThat(list, hasItems(isA(String.class), endsWith(\"ing\")));\r\n```","```\r\nString testString = \"daenerys targaryen\";\r\nassertThat(testString, both(startsWith(\"daene\")).and(containsString(\"yen\")));\r\n```","```\r\nString testString = \"daenerys targaryen\";\r\nassertThat(testString, either(startsWith(\"tar\")).or(containsString(\"targaryen\")));\r\n```","```\r\nString testString = \"Rhaegar Targaryen\";\r\nassertThat(testString, containsString(\"aegar\"));\r\nassertThat(testString, containsStringIgnoringCase(\"AEGAR\"));\r\n```","```\r\nassertThat(testString, startsWith(\"Rhae\"));\r\nassertThat(testString, startsWithIgnoringCase(\"rhae\"));\r\n```","```\r\nassertThat(testString, endsWith(\"aryen\"));\r\nassertThat(testString, endsWithIgnoringCase(\"ARYEN\"));\r\n```"]