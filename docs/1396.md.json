["```\r\n<dependency>\r\n    <groupId>com.sparkjava</groupId>\r\n    <artifactId>spark-core</artifactId>\r\n    <version>2.5.4</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.code.gson</groupId>\r\n    <artifactId>gson</artifactId>\r\n    <version>2.8.0</version>\r\n</dependency>\r\n```","```\r\nget(\"/your-route-path/\", (request, response) -> {\r\n    // your callback code\r\n});\r\n```","```\r\nimport static spark.Spark.*;\r\n\r\npublic class HelloWorldService {\r\n    public static void main(String[] args) {\r\n\r\n        get(\"/hello\", (req, res)->\"Hello, world\");\r\n\r\n        get(\"/hello/:name\", (req,res)->{\r\n            return \"Hello, \"+ req.params(\":name\");\r\n        });\r\n    }\r\n}\r\n```","```\r\nGET http://localhost:4567/hello\r\n```","```\r\nHello, world\r\n```","```\r\nGET http://localhost:4567/hello/baeldung\r\n```","```\r\nHello, baeldung\r\n```","```\r\npublic class User {\r\n    private String id;\r\n    private String firstName;\r\n    private String lastName;\r\n    private String email;\r\n\r\n    // constructors, getters and setters\r\n}\r\n```","```\r\npublic interface UserService {\r\n\r\n    public void addUser (User user);\r\n\r\n    public Collection<User> getUsers ();\r\n    public User getUser (String id);\r\n\r\n    public User editUser (User user) \r\n      throws UserException;\r\n\r\n    public void deleteUser (String id);\r\n\r\n    public boolean userExist (String id);\r\n}\r\n```","```\r\n{\r\n    status: <STATUS>\r\n    message: <TEXT-MESSAGE>\r\n    data: <JSON-OBJECT>\r\n}\r\n```","```\r\npublic class StandardResponse {\r\n\r\n    private StatusResponse status;\r\n    private String message;\r\n    private JsonElement data;\r\n\r\n    public StandardResponse(StatusResponse status) {\r\n        // ...\r\n    }\r\n    public StandardResponse(StatusResponse status, String message) {\r\n        // ...\r\n    }\r\n    public StandardResponse(StatusResponse status, JsonElement data) {\r\n        // ...\r\n    }\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\npublic enum StatusResponse {\r\n    SUCCESS (\"Success\"),\r\n    ERROR (\"Error\");\r\n\r\n    private String status;       \r\n    // constructors, getters\r\n}\r\n```","```\r\npublic class SparkRestExample {\r\n    public static void main(String[] args) {\r\n        post(\"/users\", (request, response) -> {\r\n            //...\r\n        });\r\n        get(\"/users\", (request, response) -> {\r\n            //...\r\n        });\r\n        get(\"/users/:id\", (request, response) -> {\r\n            //...\r\n        });\r\n        put(\"/users/:id\", (request, response) -> {\r\n            //...\r\n        });\r\n        delete(\"/users/:id\", (request, response) -> {\r\n            //...\r\n        });\r\n        options(\"/users/:id\", (request, response) -> {\r\n            //...\r\n        });\r\n    }\r\n}\r\n```","```\r\npost(\"/users\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    User user = new Gson().fromJson(request.body(), User.class);\r\n    userService.addUser(user);\r\n\r\n    return new Gson()\r\n      .toJson(new StandardResponse(StatusResponse.SUCCESS));\r\n});\r\n```","```\r\nPOST http://localhost:4567/users\r\n{\r\n    \"id\": \"1012\", \r\n    \"email\": \"[[email protected]](/web/20220815033605/https://www.baeldung.com/cdn-cgi/l/email-protection)\", \r\n    \"firstName\": \"Mac\",\r\n    \"lastName\": \"Mason1\"\r\n}\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\"\r\n}\r\n```","```\r\nget(\"/users\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    return new Gson().toJson(\r\n      new StandardResponse(StatusResponse.SUCCESS,new Gson()\r\n        .toJsonTree(userService.getUsers())));\r\n});\r\n```","```\r\nGET http://localhost:4567/users\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\",\r\n    \"data\":[\r\n        {\r\n            \"id\":\"1014\",\r\n            \"firstName\":\"John\",\r\n            \"lastName\":\"Miller\",\r\n            \"email\":\"[[email protected]](/web/20220815033605/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n        },\r\n        {\r\n            \"id\":\"1012\",\r\n            \"firstName\":\"Mac\",\r\n            \"lastName\":\"Mason1\",\r\n            \"email\":\"[[email protected]](/web/20220815033605/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n        }\r\n    ]\r\n}\r\n```","```\r\nget(\"/users/:id\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    return new Gson().toJson(\r\n      new StandardResponse(StatusResponse.SUCCESS,new Gson()\r\n        .toJsonTree(userService.getUser(request.params(\":id\")))));\r\n});\r\n```","```\r\nGET http://localhost:4567/users/1012\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\",\r\n    \"data\":{\r\n        \"id\":\"1012\",\r\n        \"firstName\":\"Mac\",\r\n        \"lastName\":\"Mason1\",\r\n        \"email\":\"[[email protected]](/web/20220815033605/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n    }\r\n}\r\n```","```\r\nput(\"/users/:id\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    User toEdit = new Gson().fromJson(request.body(), User.class);\r\n    User editedUser = userService.editUser(toEdit);\r\n\r\n    if (editedUser != null) {\r\n        return new Gson().toJson(\r\n          new StandardResponse(StatusResponse.SUCCESS,new Gson()\r\n            .toJsonTree(editedUser)));\r\n    } else {\r\n        return new Gson().toJson(\r\n          new StandardResponse(StatusResponse.ERROR,new Gson()\r\n            .toJson(\"User not found or error in edit\")));\r\n    }\r\n});\r\n```","```\r\nPUT http://localhost:4567/users/1012\r\n{\r\n    \"lastName\": \"Mason\"\r\n}\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\",\r\n    \"data\":{\r\n        \"id\":\"1012\",\r\n        \"firstName\":\"Mac\",\r\n        \"lastName\":\"Mason\",\r\n        \"email\":\"[[email protected]](/web/20220815033605/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n    }\r\n}\r\n```","```\r\ndelete(\"/users/:id\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    userService.deleteUser(request.params(\":id\"));\r\n    return new Gson().toJson(\r\n      new StandardResponse(StatusResponse.SUCCESS, \"user deleted\"));\r\n});\r\n```","```\r\nDELETE http://localhost:4567/users/1012\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\",\r\n    \"message\":\"user deleted\"\r\n}\r\n```","```\r\noptions(\"/users/:id\", (request, response) -> {\r\n    response.type(\"application/json\");\r\n    return new Gson().toJson(\r\n      new StandardResponse(StatusResponse.SUCCESS, \r\n        (userService.userExist(\r\n          request.params(\":id\"))) ? \"User exists\" : \"User does not exists\" ));\r\n});\r\n```","```\r\nOPTIONS http://localhost:4567/users/1012\r\n```","```\r\n{\r\n    \"status\":\"SUCCESS\",\r\n    \"message\":\"User exists\"\r\n}\r\n```"]