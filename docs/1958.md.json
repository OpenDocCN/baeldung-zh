["```\r\nwhile(true) { \r\n    // Initially, thinking about life, universe, and everything\r\n    think();\r\n\r\n    // Take a break from thinking, hungry now\r\n    pick_up_left_fork();\r\n    pick_up_right_fork();\r\n    eat();\r\n    put_down_right_fork();\r\n    put_down_left_fork();\r\n\r\n    // Not hungry anymore. Back to thinking!\r\n} \r\n```","```\r\npublic class Philosopher implements Runnable {\r\n\r\n    // The forks on either side of this Philosopher \r\n    private Object leftFork;\r\n    private Object rightFork;\r\n\r\n    public Philosopher(Object leftFork, Object rightFork) {\r\n        this.leftFork = leftFork;\r\n        this.rightFork = rightFork;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        // Yet to populate this method\r\n    }\r\n\r\n}\r\n```","```\r\npublic class Philosopher implements Runnable {\r\n\r\n    // Member variables, standard constructor\r\n\r\n    private void doAction(String action) throws InterruptedException {\r\n        System.out.println(\r\n          Thread.currentThread().getName() + \" \" + action);\r\n        Thread.sleep(((int) (Math.random() * 100)));\r\n    }\r\n\r\n    // Rest of the methods written earlier\r\n}\r\n```","```\r\npublic class Philosopher implements Runnable {\r\n\r\n   // Member variables, methods defined earlier\r\n\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            while (true) {\r\n\r\n                // thinking\r\n                doAction(System.nanoTime() + \": Thinking\");\r\n                synchronized (leftFork) {\r\n                    doAction(\r\n                      System.nanoTime() \r\n                        + \": Picked up left fork\");\r\n                    synchronized (rightFork) {\r\n                        // eating\r\n                        doAction(\r\n                          System.nanoTime() \r\n                            + \": Picked up right fork - eating\"); \r\n\r\n                        doAction(\r\n                          System.nanoTime() \r\n                            + \": Put down right fork\");\r\n                    }\r\n\r\n                    // Back to thinking\r\n                    doAction(\r\n                      System.nanoTime() \r\n                        + \": Put down left fork. Back to thinking\");\r\n                }\r\n            }\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            return;\r\n        }\r\n    }\r\n} \r\n```","```\r\npublic class DiningPhilosophers {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        Philosopher[] philosophers = new Philosopher[5];\r\n        Object[] forks = new Object[philosophers.length];\r\n\r\n        for (int i = 0; i < forks.length; i++) {\r\n            forks[i] = new Object();\r\n        }\r\n\r\n        for (int i = 0; i < philosophers.length; i++) {\r\n            Object leftFork = forks[i];\r\n            Object rightFork = forks[(i + 1) % forks.length];\r\n\r\n            philosophers[i] = new Philosopher(leftFork, rightFork);\r\n\r\n            Thread t \r\n              = new Thread(philosophers[i], \"Philosopher \" + (i + 1));\r\n            t.start();\r\n        }\r\n    }\r\n}\r\n```","```\r\nPhilosopher 1 8038014601251: Thinking\r\nPhilosopher 2 8038014828862: Thinking\r\nPhilosopher 3 8038015066722: Thinking\r\nPhilosopher 4 8038015284511: Thinking\r\nPhilosopher 5 8038015468564: Thinking\r\nPhilosopher 1 8038016857288: Picked up left fork\r\nPhilosopher 1 8038022332758: Picked up right fork - eating\r\nPhilosopher 3 8038028886069: Picked up left fork\r\nPhilosopher 4 8038063952219: Picked up left fork\r\nPhilosopher 1 8038067505168: Put down right fork\r\nPhilosopher 2 8038089505264: Picked up left fork\r\nPhilosopher 1 8038089505264: Put down left fork. Back to thinking\r\nPhilosopher 5 8038111040317: Picked up left fork\r\n```","```\r\nPhilosopher 1 8487540546530: Thinking\r\nPhilosopher 2 8487542012975: Thinking\r\nPhilosopher 3 8487543057508: Thinking\r\nPhilosopher 4 8487543318428: Thinking\r\nPhilosopher 5 8487544590144: Thinking\r\nPhilosopher 3 8487589069046: Picked up left fork\r\nPhilosopher 1 8487596641267: Picked up left fork\r\nPhilosopher 5 8487597646086: Picked up left fork\r\nPhilosopher 4 8487617680958: Picked up left fork\r\nPhilosopher 2 8487631148853: Picked up left fork\r\n```","```\r\npublic class DiningPhilosophers {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        final Philosopher[] philosophers = new Philosopher[5];\r\n        Object[] forks = new Object[philosophers.length];\r\n\r\n        for (int i = 0; i < forks.length; i++) {\r\n            forks[i] = new Object();\r\n        }\r\n\r\n        for (int i = 0; i < philosophers.length; i++) {\r\n            Object leftFork = forks[i];\r\n            Object rightFork = forks[(i + 1) % forks.length];\r\n\r\n            if (i == philosophers.length - 1) {\r\n\r\n                // The last philosopher picks up the right fork first\r\n                philosophers[i] = new Philosopher(rightFork, leftFork); \r\n            } else {\r\n                philosophers[i] = new Philosopher(leftFork, rightFork);\r\n            }\r\n\r\n            Thread t \r\n              = new Thread(philosophers[i], \"Philosopher \" + (i + 1));\r\n            t.start();\r\n        }\r\n    }\r\n} \r\n```","```\r\nPhilosopher 1 88519839556188: Thinking\r\nPhilosopher 2 88519840186495: Thinking\r\nPhilosopher 3 88519840647695: Thinking\r\nPhilosopher 4 88519840870182: Thinking\r\nPhilosopher 5 88519840956443: Thinking\r\nPhilosopher 3 88519864404195: Picked up left fork\r\nPhilosopher 5 88519871990082: Picked up left fork\r\nPhilosopher 4 88519874059504: Picked up left fork\r\nPhilosopher 5 88519876989405: Picked up right fork - eating\r\nPhilosopher 2 88519935045524: Picked up left fork\r\nPhilosopher 5 88519951109805: Put down right fork\r\nPhilosopher 4 88519997119634: Picked up right fork - eating\r\nPhilosopher 5 88519997113229: Put down left fork. Back to thinking\r\nPhilosopher 5 88520011135846: Thinking\r\nPhilosopher 1 88520011129013: Picked up left fork\r\nPhilosopher 4 88520028194269: Put down right fork\r\nPhilosopher 4 88520057160194: Put down left fork. Back to thinking\r\nPhilosopher 3 88520067162257: Picked up right fork - eating\r\nPhilosopher 4 88520067158414: Thinking\r\nPhilosopher 3 88520160247801: Put down right fork\r\nPhilosopher 4 88520249049308: Picked up left fork\r\nPhilosopher 3 88520249119769: Put down left fork. Back to thinking \r\n```"]