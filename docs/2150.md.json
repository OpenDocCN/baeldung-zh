["```\r\n<dependency>\r\n    <groupId>io.zipkin.java</groupId>\r\n    <artifactId>zipkin-server</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.zipkin.java</groupId>\r\n    <artifactId>zipkin-autoconfigure-ui</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\n@EnableZipkinServer\r\npublic class ZipkinApplication {...}\r\n```","```\r\nspring.cloud.config.name=zipkin\r\nspring.cloud.config.discovery.service-id=config\r\nspring.cloud.config.discovery.enabled=true\r\nspring.cloud.config.username=configUser\r\nspring.cloud.config.password=configPassword\r\n\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[emailÂ protected]](/web/20220627091739/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\n```","```\r\nspring.application.name=zipkin\r\nserver.port=9411\r\neureka.client.region=default\r\neureka.client.registryFetchIntervalSeconds=5\r\nlogging.level.org.springframework.web=debug\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.cloud</groupId>\r\n    <artifactId>spring-cloud-starter-zipkin</artifactId>\r\n</dependency>\r\n```","```\r\n@Autowired\r\nprivate EurekaClient eurekaClient;\r\n\r\n@Autowired\r\nprivate SpanMetricReporter spanMetricReporter;\r\n\r\n@Autowired\r\nprivate ZipkinProperties zipkinProperties;\r\n\r\n@Value(\"${spring.sleuth.web.skipPattern}\")\r\nprivate String skipPattern;\r\n\r\n// ... the main method goes here\r\n\r\n@Bean\r\npublic ZipkinSpanReporter makeZipkinSpanReporter() {\r\n    return new ZipkinSpanReporter() {\r\n        private HttpZipkinSpanReporter delegate;\r\n        private String baseUrl;\r\n\r\n        @Override\r\n        public void report(Span span) {\r\n\r\n            InstanceInfo instance = eurekaClient\r\n              .getNextServerFromEureka(\"zipkin\", false);\r\n            if (!(baseUrl != null && \r\n              instance.getHomePageUrl().equals(baseUrl))) {\r\n                baseUrl = instance.getHomePageUrl();\r\n                delegate = new HttpZipkinSpanReporter(new RestTemplate(), \r\n                  baseUrl, zipkinProperties.getFlushInterval(), spanMetricReporter);\r\n                if (!span.name.matches(skipPattern)) delegate.report(span);\r\n            }\r\n        }\r\n    };\r\n}\r\n```","```\r\nspring.sleuth.sampler.percentage=1.0\r\nspring.sleuth.web.skipPattern=(^cleanup.*)\r\n```","```\r\nspring.sleuth.sampler.percentage=1.0\r\nspring.sleuth.web.skipPattern=(^cleanup.*|.+favicon.*)\r\n```"]