["```\r\n@Test\r\npublic void whenConvertedToInt_thenCorrect() {\r\n    String beforeConvStr = \"1\";\r\n    int afterConvInt = 1;\r\n\r\n    assertEquals(Integer.parseInt(beforeConvStr), afterConvInt);\r\n}\r\n\r\n@Test\r\npublic void whenConvertedToInteger_thenCorrect() {\r\n    String beforeConvStr = \"12\";\r\n    Integer afterConvInteger = 12;\r\n\r\n    assertEquals(Integer.valueOf(beforeConvStr).equals(afterConvInteger), true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedTolong_thenCorrect() {\r\n    String beforeConvStr = \"12345\";\r\n    long afterConvLongPrimitive = 12345;\r\n\r\n    assertEquals(Long.parseLong(beforeConvStr), afterConvLongPrimitive);\r\n}\r\n\r\n@Test\r\npublic void whenConvertedToLong_thenCorrect() {\r\n    String beforeConvStr = \"14567\";\r\n    Long afterConvLong = 14567l;\r\n\r\n    assertEquals(Long.valueOf(beforeConvStr).equals(afterConvLong), true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedTodouble_thenCorrect() {\r\n    String beforeConvStr = \"1.4\";\r\n    double afterConvDoublePrimitive = 1.4;\r\n\r\n    assertEquals(Double.parseDouble(beforeConvStr), afterConvDoublePrimitive, 0.0);\r\n}\r\n\r\n@Test\r\npublic void whenConvertedToDouble_thenCorrect() {\r\n    String beforeConvStr = \"145.67\";\r\n    double afterConvDouble = 145.67d;\r\n\r\n    assertEquals(Double.valueOf(beforeConvStr).equals(afterConvDouble), true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedToByteArr_thenCorrect() {\r\n    String beforeConvStr = \"abc\";\r\n    byte[] afterConvByteArr = new byte[] { 'a', 'b', 'c' };\r\n\r\n    assertEquals(Arrays.equals(beforeConvStr.getBytes(), afterConvByteArr), true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedToCharArr_thenCorrect() {\r\n    String beforeConvStr = \"hello\";\r\n    char[] afterConvCharArr = { 'h', 'e', 'l', 'l', 'o' };\r\n\r\n    assertEquals(Arrays.equals(beforeConvStr.toCharArray(), afterConvCharArr), true);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedToboolean_thenCorrect() {\r\n    String beforeConvStr = \"true\";\r\n    boolean afterConvBooleanPrimitive = true;\r\n\r\n    assertEquals(Boolean.parseBoolean(beforeConvStr), afterConvBooleanPrimitive);\r\n}\r\n\r\n@Test\r\npublic void whenConvertedToBoolean_thenCorrect() {\r\n    String beforeConvStr = \"true\";\r\n    Boolean afterConvBoolean = true;\r\n\r\n    assertEquals(Boolean.valueOf(beforeConvStr), afterConvBoolean);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedToDate_thenCorrect() throws ParseException {\r\n    String beforeConvStr = \"15/10/2013\";\r\n    int afterConvCalendarDay = 15;\r\n    int afterConvCalendarMonth = 9;\r\n    int afterConvCalendarYear = 2013;\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"dd/M/yyyy\");\r\n    Date afterConvDate = formatter.parse(beforeConvStr);\r\n    Calendar calendar = new GregorianCalendar();\r\n    calendar.setTime(afterConvDate);\r\n\r\n    assertEquals(calendar.get(Calendar.DAY_OF_MONTH), afterConvCalendarDay);\r\n    assertEquals(calendar.get(Calendar.MONTH), afterConvCalendarMonth);\r\n    assertEquals(calendar.get(Calendar.YEAR), afterConvCalendarYear);\r\n}\r\n```","```\r\n@Test\r\npublic void whenConvertedToLocalDateTime_thenCorrect() {\r\n    String str = \"2007-12-03T10:15:30\";\r\n    int afterConvCalendarDay = 03;\r\n    Month afterConvCalendarMonth = Month.DECEMBER;\r\n    int afterConvCalendarYear = 2007;\r\n    LocalDateTime afterConvDate \r\n      = new UseLocalDateTime().getLocalDateTimeUsingParseMethod(str);\r\n\r\n    assertEquals(afterConvDate.getDayOfMonth(), afterConvCalendarDay);\r\n    assertEquals(afterConvDate.getMonth(), afterConvCalendarMonth);\r\n    assertEquals(afterConvDate.getYear(), afterConvCalendarYear);\r\n}\r\n```"]