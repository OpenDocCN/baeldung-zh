["```\r\n@Override\r\nprotected javax.servlet.Filter[] getServletFilters() {\r\n    DelegatingFilterProxy delegateFilterProxy = new DelegatingFilterProxy();\r\n    delegateFilterProxy.setTargetBeanName(\"applicationFilter\");\r\n    return new Filter[]{delegateFilterProxy};\r\n}\r\n```","```\r\n<filter>\r\n    <filter-name>applicationFilter</filter-name>\r\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n</filter>\r\n```","```\r\n@Component(\"loggingFilter\")\r\npublic class CustomFilter implements Filter {\r\n\r\n    private static Logger LOGGER = LoggerFactory.getLogger(CustomFilter.class);\r\n\r\n    @Override\r\n    public void init(FilterConfig config) throws ServletException {\r\n        // initialize something\r\n    }\r\n\r\n    @Override\r\n    public void doFilter(\r\n      ServletRequest request, ServletResponse response, \r\n      FilterChain chain) throws IOException, ServletException {\r\n\r\n        HttpServletRequest req = (HttpServletRequest) request;\r\n        LOGGER.info(\"Request Info : \" + req);\r\n        chain.doFilter(request, response);\r\n    }\r\n\r\n    @Override\r\n    public void destroy() {\r\n        // cleanup code, if necessary\r\n    }\r\n} \r\n```","```\r\npublic class ApplicationInitializer \r\n  extends AbstractAnnotationConfigDispatcherServletInitializer {\r\n    // some other methods here\r\n\r\n    @Override\r\n    protected javax.servlet.Filter[] getServletFilters() {\r\n        DelegatingFilterProxy delegateFilterProxy = new DelegatingFilterProxy();\r\n        delegateFilterProxy.setTargetBeanName(\"loggingFilter\");\r\n        return new Filter[]{delegateFilterProxy};\r\n    }\r\n}\r\n```","```\r\n<filter>\r\n    <filter-name>loggingFilter</filter-name>\r\n    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\r\n</filter>\r\n<filter-mapping>\r\n    <filter-name>loggingFilter</filter-name>\r\n    <url-pattern>/*</url-pattern>\r\n</filter-mapping>\r\n```"]