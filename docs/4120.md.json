["```\r\n<dependency>\r\n    <groupId>com.github.spullara.mustache.java</groupId>\r\n    <artifactId>compiler</artifactId>\r\n    <version>0.9.4</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.spullara.mustache.java</groupId>\r\n    <artifactId>compiler</artifactId>\r\n    <version>0.8.18</version>\r\n</dependency>\r\n```","```\r\n<h2>{{title}}</h2>\r\n<small>Created on {{createdOn}}</small>\r\n<p>{{text}}</p>\r\n```","```\r\nMustacheFactory mf = new DefaultMustacheFactory();\r\nMustache m = mf.compile(\"todo.mustache\"); \r\n```","```\r\npublic class Todo {\r\n    private String title;\r\n    private String text;\r\n    private boolean done;\r\n    private Date createdOn;\r\n    private Date completedOn;\r\n\r\n    // constructors, getters and setters\r\n}\r\n```","```\r\nTodo todo = new Todo(\"Todo 1\", \"Description\");\r\nStringWriter writer = new StringWriter();\r\nm.execute(writer, todo).flush();\r\nString html = writer.toString();\r\n```","```\r\n{{#todo}}\r\n<!-- Other code -->\r\n{{/todo}}\r\n```","```\r\n{{#todo}}\r\n<h2>{{title}}</h2>\r\n<small>Created on {{createdOn}}</small>\r\n<p>{{text}}</p>\r\n{{/todo}}\r\n```","```\r\n@Test\r\npublic void givenTodoObject_whenGetHtml_thenSuccess() \r\n  throws IOException {\r\n\r\n    Todo todo = new Todo(\"Todo 1\", \"Todo description\");\r\n    Mustache m = MustacheUtil.getMustacheFactory()\r\n      .compile(\"todo.mustache\");\r\n    Map<String, Object> context = new HashMap<>();\r\n    context.put(\"todo\", todo);\r\n\r\n    String expected = \"<h2>Todo 1</h2>\";\r\n    assertThat(executeTemplate(m, todo)).contains(expected);\r\n}\r\n```","```\r\n{{#todos}}\r\n<h2>{{title}}</h2>\r\n{{/todos}}\r\n```","```\r\n@Test\r\npublic void givenTodoList_whenGetHtml_thenSuccess() \r\n  throws IOException {\r\n\r\n    Mustache m = MustacheUtil.getMustacheFactory()\r\n      .compile(\"todos.mustache\");\r\n\r\n    List<Todo> todos = Arrays.asList(\r\n      new Todo(\"Todo 1\", \"Todo description\"),\r\n      new Todo(\"Todo 2\", \"Todo description another\"),\r\n      new Todo(\"Todo 3\", \"Todo description another\")\r\n    );\r\n    Map<String, Object> context = new HashMap<>();\r\n    context.put(\"todos\", todos);\r\n\r\n    assertThat(executeTemplate(m, context))\r\n      .contains(\"<h2>Todo 1</h2>\")\r\n      .contains(\"<h2>Todo 2</h2>\")\r\n      .contains(\"<h2>Todo 3</h2>\");\r\n}\r\n```","```\r\n@Test\r\npublic void givenNullTodoObject_whenGetHtml_thenEmptyHtml() \r\n  throws IOException {\r\n    Mustache m = MustacheUtil.getMustacheFactory()\r\n      .compile(\"todo-section.mustache\");\r\n    Map<String, Object> context = new HashMap<>();\r\n    assertThat(executeTemplate(m, context)).isEmpty();\r\n}\r\n```","```\r\n@Test\r\npublic void givenEmptyList_whenGetHtml_thenEmptyHtml() \r\n  throws IOException {\r\n    Mustache m = MustacheUtil.getMustacheFactory()\r\n      .compile(\"todos.mustache\");\r\n\r\n    Map<String, Object> context = new HashMap<>();\r\n    assertThat(executeTemplate(m, context)).isEmpty();;\r\n}\r\n```","```\r\n{{#todos}}\r\n<h2>{{title}}</h2>\r\n{{/todos}}\r\n{{^todos}}\r\n<p>No todos!</p>\r\n{{/todos}}\r\n```","```\r\n@Test\r\npublic void givenEmptyList_whenGetHtmlUsingInvertedSection_thenHtml() \r\n  throws IOException {\r\n\r\n    Mustache m = MustacheUtil.getMustacheFactory()\r\n      .compile(\"todos-inverted-section.mustache\");\r\n\r\n    Map<String, Object> context = new HashMap<>();\r\n    assertThat(executeTemplate(m, context).trim())\r\n      .isEqualTo(\"<p>No todos!</p>\");\r\n}\r\n```","```\r\n{{#todos}}\r\n<h2>{{title}}{{#handleDone}}{{doneSince}}{{/handleDone}}</h2>\r\n{{/todos}}\r\n```","```\r\npublic Function<Object, Object> handleDone() {\r\n    return (obj) -> done ? \r\n      String.format(\"<small>Done %s minutes ago<small>\", obj) : \"\";\r\n}\r\n```","```\r\n<h2>Todo 1</h2>\r\n<h2>Todo 2</h2>\r\n<h2>Todo 3<small>Done 5 minutes ago<small></h2>\r\n```"]