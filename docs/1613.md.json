["```\r\nPizza pizza = new Pizza\r\n  .PizzaBuilder(\"Margherita\")\r\n  .size(PizzaSize.LARGE)\r\n  .withExtaTopping(\"Mushroom\")\r\n  .withStuffedCrust(false)\r\n  .willCollect(true)\r\n  .applyDiscount(20)\r\n  .build();\r\n```","```\r\npublic class PizzaService {\r\n\r\n    private Pizza.PizzaBuilder builder;\r\n\r\n    public PizzaService(Pizza.PizzaBuilder builder) {\r\n        this.builder = builder;\r\n    }\r\n\r\n    public Pizza orderHouseSpecial() {\r\n        return builder.name(\"Special\")\r\n          .size(PizzaSize.LARGE)\r\n          .withExtraTopping(\"Mushrooms\")\r\n          .withStuffedCrust(true)\r\n          .withExtraTopping(\"Chilli\")\r\n          .willCollect(true)\r\n          .applyDiscount(20)\r\n          .build();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenTraditonalMocking_whenServiceInvoked_thenPizzaIsBuilt() {\r\n    PizzaBuilder nameBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder sizeBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder firstToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder secondToppingBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder stuffedBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder willCollectBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    PizzaBuilder discountBuilder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n\r\n    PizzaBuilder builder = Mockito.mock(Pizza.PizzaBuilder.class);\r\n    when(builder.name(anyString())).thenReturn(nameBuilder);\r\n    when(nameBuilder.size(any(Pizza.PizzaSize.class))).thenReturn(sizeBuilder);        \r\n    when(sizeBuilder.withExtraTopping(anyString())).thenReturn(firstToppingBuilder);\r\n    when(firstToppingBuilder.withStuffedCrust(anyBoolean())).thenReturn(stuffedBuilder);\r\n    when(stuffedBuilder.withExtraTopping(anyString())).thenReturn(secondToppingBuilder);\r\n    when(secondToppingBuilder.willCollect(anyBoolean())).thenReturn(willCollectBuilder);\r\n    when(willCollectBuilder.applyDiscount(anyInt())).thenReturn(discountBuilder);\r\n    when(discountBuilder.build()).thenReturn(expectedPizza);\r\n\r\n    PizzaService service = new PizzaService(builder);\r\n    Pizza pizza = service.orderHouseSpecial();\r\n    assertEquals(\"Expected Pizza\", expectedPizza, pizza);\r\n\r\n    verify(builder).name(stringCaptor.capture());\r\n    assertEquals(\"Pizza name: \", \"Special\", stringCaptor.getValue());\r\n\r\n    // rest of test verification\r\n} \r\n```","```\r\n@Test\r\npublic void givenDeepMocks_whenServiceInvoked_thenPizzaIsBuilt() {\r\n    PizzaBuilder builder = Mockito.mock(Pizza.PizzaBuilder.class, Mockito.RETURNS_DEEP_STUBS);\r\n\r\n    Mockito.when(builder.name(anyString())\r\n      .size(any(Pizza.PizzaSize.class))\r\n      .withExtraTopping(anyString())\r\n      .withStuffedCrust(anyBoolean())\r\n      .withExtraTopping(anyString())\r\n      .willCollect(anyBoolean())\r\n      .applyDiscount(anyInt())\r\n      .build())\r\n      .thenReturn(expectedPizza);\r\n\r\n    PizzaService service = new PizzaService(builder);\r\n    Pizza pizza = service.orderHouseSpecial();\r\n    assertEquals(\"Expected Pizza\", expectedPizza, pizza);\r\n} \r\n```","```\r\n@Mock(answer = Answers.RETURNS_DEEP_STUBS)\r\nprivate PizzaBuilder anotherBuilder;\r\n```"]