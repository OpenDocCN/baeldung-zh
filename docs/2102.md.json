["```\r\npublic class Particle {\r\n    private long[] position;\r\n    private long[] speed;\r\n    private double fitness;\r\n    private long[] bestPosition;\t\r\n    private double bestFitness = Double.NEGATIVE_INFINITY;\r\n\r\n    // constructors and other methods\r\n}\r\n```","```\r\npublic class Swarm {\r\n    private Particle[] particles;\r\n    private long[] bestPosition;\r\n    private double bestFitness = Double.NEGATIVE_INFINITY;\r\n\r\n    public Swarm(int numParticles) {\r\n        particles = new Particle[numParticles];\r\n        for (int i = 0; i < numParticles; i++) {\r\n            long[] initialParticlePosition = { \r\n              random.nextInt(Constants.PARTICLE_UPPER_BOUND),\r\n              random.nextInt(Constants.PARTICLE_UPPER_BOUND) \r\n            };\r\n            long[] initialParticleSpeed = { \r\n              random.nextInt(Constants.PARTICLE_UPPER_BOUND),\r\n              random.nextInt(Constants.PARTICLE_UPPER_BOUND) \r\n            };\r\n            particles[i] = new Particle(\r\n              initialParticlePosition, initialParticleSpeed);\r\n        }\r\n    }\r\n\r\n    // methods omitted\r\n}\r\n```","```\r\npublic class Multiswarm {\r\n    private Swarm[] swarms;\r\n    private long[] bestPosition;\r\n    private double bestFitness = Double.NEGATIVE_INFINITY;\r\n    private FitnessFunction fitnessFunction;\r\n\r\n    public Multiswarm(\r\n      int numSwarms, int particlesPerSwarm, FitnessFunction fitnessFunction) {\r\n        this.fitnessFunction = fitnessFunction;\r\n        this.swarms = new Swarm[numSwarms];\r\n        for (int i = 0; i < numSwarms; i++) {\r\n            swarms[i] = new Swarm(particlesPerSwarm);\r\n        }\r\n    }\r\n\r\n    // methods omitted\r\n}\r\n```","```\r\npublic interface FitnessFunction {\r\n    public double getFitness(long[] particlePosition);\r\n}\r\n```","```\r\npublic class LolFitnessFunction implements FitnessFunction {\r\n\r\n    @Override\r\n    public double getFitness(long[] particlePosition) {\r\n        long health = particlePosition[0];\r\n        long armor = particlePosition[1];\r\n\r\n        if (health < 0 && armor < 0) {\r\n            return -(health * armor);\r\n        } else if (health < 0) {\r\n            return health;\r\n        } else if (armor < 0) {\r\n            return armor;\r\n        }\r\n\r\n        double cost = (health * 2.5) + (armor * 18);\r\n        if (cost > 3600) {\r\n            return 3600 - cost;\r\n        } else {\r\n            long fitness = (health * (100 + armor)) / 100;\r\n            return fitness;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void mainLoop() {\r\n    for (Swarm swarm : swarms) {\r\n        for (Particle particle : swarm.getParticles()) {\r\n            long[] particleOldPosition = particle.getPosition().clone();\r\n            particle.setFitness(fitnessFunction.getFitness(particleOldPosition));\r\n\r\n            if (particle.getFitness() > particle.getBestFitness()) {\r\n                particle.setBestFitness(particle.getFitness());\t\t\t\t\r\n                particle.setBestPosition(particleOldPosition);\r\n                if (particle.getFitness() > swarm.getBestFitness()) {\t\t\t\t\t\t\r\n                    swarm.setBestFitness(particle.getFitness());\r\n                    swarm.setBestPosition(particleOldPosition);\r\n                    if (swarm.getBestFitness() > bestFitness) {\r\n                        bestFitness = swarm.getBestFitness();\r\n                        bestPosition = swarm.getBestPosition().clone();\r\n                    }\r\n                }\r\n            }\r\n\r\n            long[] position = particle.getPosition();\r\n            long[] speed = particle.getSpeed();\r\n            position[0] += speed[0];\r\n            position[1] += speed[1];\r\n            speed[0] = getNewParticleSpeedForIndex(particle, swarm, 0);\r\n            speed[1] = getNewParticleSpeedForIndex(particle, swarm, 1);\r\n        }\r\n    }\r\n}\r\n```","```\r\nprivate int getNewParticleSpeedForIndex(\r\n  Particle particle, Swarm swarm, int index) {\r\n\r\n    return (int) ((Constants.INERTIA_FACTOR * particle.getSpeed()[index])\r\n      + (randomizePercentage(Constants.COGNITIVE_WEIGHT)\r\n      * (particle.getBestPosition()[index] - particle.getPosition()[index]))\r\n      + (randomizePercentage(Constants.SOCIAL_WEIGHT) \r\n      * (swarm.getBestPosition()[index] - particle.getPosition()[index]))\r\n      + (randomizePercentage(Constants.GLOBAL_WEIGHT) \r\n      * (bestPosition[index] - particle.getPosition()[index])));\r\n}\r\n```"]