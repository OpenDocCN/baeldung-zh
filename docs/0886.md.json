["```\r\npublic class Payment {\r\n    private final int amount;\r\n    // constructor and getter\r\n}\r\n```","```\r\nprivate Flux<Payment> fluxOfThreePayments() {\r\n    return Flux.just(paymentOf100, new Payment(200), new Payment(300));\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPaymentFlux_whenUsingNext_thenGetTheFirstPaymentAsMono() {\r\n    Mono<Payment> firstPayment = fluxOfThreePayments().next();\r\n\r\n    StepVerifier.create(firstPayment)\r\n      .expectNext(paymentOf100)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAEmptyFlux_whenUsingNext_thenGetAnEmptyMono() {\r\n    Flux<Payment> emptyFlux = Flux.empty();\r\n\r\n    Mono<Payment> firstPayment = emptyFlux.next();\r\n\r\n    StepVerifier.create(firstPayment)\r\n      .verifyComplete();\r\n} \r\n```","```\r\n@Test\r\nvoid givenAPaymentFlux_whenUsingTake_thenGetTheFirstPaymentAsFlux() {\r\n    Flux<Payment> firstPaymentFlux = fluxOfThreePayments().take(1);\r\n\r\n    StepVerifier.create(firstPaymentFlux)\r\n      .expectNext(paymentOf100)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAEmptyFlux_whenUsingNext_thenGetAnEmptyFlux() {\r\n    Flux<Payment> emptyFlux = Flux.empty();\r\n\r\n    Flux<Payment> firstPaymentFlux = emptyFlux.take(1);\r\n\r\n    StepVerifier.create(firstPaymentFlux)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPaymentFlux_whenUsingElementAt_thenGetTheFirstPaymentAsMono() {\r\n    Mono<Payment> firstPayment = fluxOfThreePayments().elementAt(0);\r\n\r\n    StepVerifier.create(firstPayment)\r\n      .expectNext(paymentOf100)\r\n      .verifyComplete();\r\n}\r\n```","```\r\n@Test\r\nvoid givenAEmptyFlux_whenUsingElementAt_thenGetAnEmptyMono() {\r\n    Flux<Payment> emptyFlux = Flux.empty();\r\n\r\n    Mono<Payment> firstPayment = emptyFlux.elementAt(0);\r\n\r\n    StepVerifier.create(firstPayment)\r\n      .expectError(IndexOutOfBoundsException.class);\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPaymentFlux_whenUsingBlockFirst_thenGetTheFirstPayment() {\r\n    Payment firstPayment = fluxOfThreePayments().blockFirst();\r\n\r\n    assertThat(firstPayment).isEqualTo(paymentOf100);\r\n}\r\n```","```\r\n@Test\r\nvoid givenAPaymentFlux_whenUsingToStream_thenGetTheFirstPaymentAsOptional() {\r\n    Optional<Payment> firstPayment = fluxOfThreePayments().toStream()\r\n      .findFirst();\r\n\r\n    assertThat(firstPayment).contains(paymentOf100);\r\n}\r\n```"]