["```\r\npublic interface Animal {\r\n    String getAnimal();\r\n    String makeSound();\r\n}\r\n```","```\r\npublic class Duck implements Animal {\r\n\r\n    @Override\r\n    public String getAnimal() {\r\n        return \"Duck\";\r\n    }\r\n\r\n    @Override\r\n    public String makeSound() {\r\n        return \"Squeks\";\r\n    }\r\n} \r\n```","```\r\npublic interface AbstractFactory<T> {\r\n    T create(String animalType) ;\r\n}\r\n```","```\r\npublic class AnimalFactory implements AbstractFactory<Animal> {\r\n\r\n    @Override\r\n    public Animal create(String animalType) {\r\n        if (\"Dog\".equalsIgnoreCase(animalType)) {\r\n            return new Dog();\r\n        } else if (\"Duck\".equalsIgnoreCase(animalType)) {\r\n            return new Duck();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n} \r\n```","```\r\npublic class FactoryProvider {\r\n    public static AbstractFactory getFactory(String choice){\r\n\r\n        if(\"Animal\".equalsIgnoreCase(choice)){\r\n            return new AnimalFactory();\r\n        }\r\n        else if(\"Color\".equalsIgnoreCase(choice)){\r\n            return new ColorFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n```"]