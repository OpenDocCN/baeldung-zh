["```\r\n<dependency>\r\n    <groupId>org.springframework.integration</groupId>\r\n    <artifactId>spring-integration-core</artifactId>\r\n    <version>4.3.5.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.integration</groupId>\r\n    <artifactId>spring-integration-file</artifactId>\r\n    <version>4.3.5.RELEASE</version>\r\n</dependency> \r\n```","```\r\n@Configuration\r\n@EnableIntegration\r\npublic class BasicIntegrationConfig{\r\n    public String INPUT_DIR = \"the_source_dir\";\r\n    public String OUTPUT_DIR = \"the_dest_dir\";\r\n    public String FILE_PATTERN = \"*.mpeg\";\r\n\r\n    @Bean\r\n    public MessageChannel fileChannel() {\r\n        return new DirectChannel();\r\n    }\r\n\r\n    @Bean\r\n    @InboundChannelAdapter(value = \"fileChannel\", poller = @Poller(fixedDelay = \"1000\"))\r\n    public MessageSource<File> fileReadingMessageSource() {\r\n        FileReadingMessageSource sourceReader= new FileReadingMessageSource();\r\n        sourceReader.setDirectory(new File(INPUT_DIR));\r\n        sourceReader.setFilter(new SimplePatternFileListFilter(FILE_PATTERN));\r\n        return sourceReader;\r\n    }\r\n\r\n    @Bean\r\n    @ServiceActivator(inputChannel= \"fileChannel\")\r\n    public MessageHandler fileWritingMessageHandler() {\r\n        FileWritingMessageHandler handler = new FileWritingMessageHandler(new File(OUTPUT_DIR));\r\n        handler.setFileExistsMode(FileExistsMode.REPLACE);\r\n        handler.setExpectReply(false);\r\n        return handler;\r\n    }\r\n}\r\n```","```\r\npublic static void main(String... args) {\r\n    AbstractApplicationContext context \r\n      = new AnnotationConfigApplicationContext(BasicIntegrationConfig.class);\r\n    context.registerShutdownHook();\r\n\r\n    Scanner scanner = new Scanner(System.in);\r\n    System.out.print(\"Please enter q and press <enter> to exit the program: \");\r\n\r\n    while (true) {\r\n       String input = scanner.nextLine();\r\n       if(\"q\".equals(input.trim())) {\r\n          break;\r\n      }\r\n    }\r\n    System.exit(0);\r\n}\r\n```","```\r\npublic interface Message<T> {\r\n    T getPayload();\r\n    MessageHeaders getHeaders();\r\n}\r\n```","```\r\n@Bean\r\npublic MessageChannel fileChannel1() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean\r\npublic MessageChannel fileChannel2() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean\r\npublic MessageChannel fileChannel3() {\r\n    return new DirectChannel();\r\n}\r\n```","```\r\n@Bean\r\npublic MessageChannel pubSubFileChannel() {\r\n    return new PublishSubscribeChannel();\r\n}\r\n\r\n@Bean\r\n@InboundChannelAdapter(value = \"pubSubFileChannel\", poller = @Poller(fixedDelay = \"1000\"))\r\npublic MessageSource<File> fileReadingMessageSource() {\r\n    FileReadingMessageSource sourceReader = new FileReadingMessageSource();\r\n    sourceReader.setDirectory(new File(INPUT_DIR));\r\n    sourceReader.setFilter(new SimplePatternFileListFilter(FILE_PATTERN));\r\n    return sourceReader;\r\n} \r\n```","```\r\n@Bean\r\n@BridgeFrom(value = \"pubSubFileChannel\")\r\npublic MessageChannel fileChannel1() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean\r\n@BridgeFrom(value = \"pubSubFileChannel\")\r\npublic MessageChannel fileChannel2() {\r\n    return new DirectChannel();\r\n}\r\n\r\n@Bean\r\n@BridgeFrom(value = \"pubSubFileChannel\")\r\npublic MessageChannel fileChannel3() {\r\n    return new DirectChannel();\r\n}\r\n```"]