["```\r\nCREATE TABLE events (\r\n    avenger text,\r\n    timestamp timestamp,\r\n    latitude decimal,\r\n    longitude decimal,\r\n    status decimal,\r\n    PRIMARY KEY (avenger, timestamp)\r\n) WITH CLUSTERING ORDER BY (timestamp DESC);\r\n```","```\r\n@Repository\r\npublic class RestClient {\r\n  @Value(\"https://${ASTRA_DB_ID}-${ASTRA_DB_REGION}.apps.astra.datastax.com/api/rest/v2/keyspaces/${ASTRA_DB_KEYSPACE}\")\r\n  private String baseUrl;\r\n\r\n  @Value(\"${ASTRA_DB_APPLICATION_TOKEN}\")\r\n  private String token;\r\n\r\n  private RestTemplate restTemplate;\r\n\r\n  public RestClient() {\r\n    this.restTemplate = new RestTemplate();\r\n    this.restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\r\n  }\r\n\r\n  public <T> void createRecord(String table, T record) {\r\n    var uri = UriComponentsBuilder.fromHttpUrl(baseUrl)\r\n      .pathSegment(table)\r\n      .build()\r\n      .toUri();\r\n    var request = RequestEntity.post(uri)\r\n      .header(\"X-Cassandra-Token\", token)\r\n      .body(record);\r\n    restTemplate.exchange(request, Map.class);\r\n  }\r\n}\r\n```","```\r\n@Repository\r\npublic class GraphqlClient {\r\n  @Value(\"https://${ASTRA_DB_ID}-${ASTRA_DB_REGION}.apps.astra.datastax.com/api/graphql/${ASTRA_DB_KEYSPACE}\")\r\n  private String baseUrl;\r\n\r\n  @Value(\"${ASTRA_DB_APPLICATION_TOKEN}\")\r\n  private String token;\r\n\r\n  private RestTemplate restTemplate;\r\n\r\n  public GraphqlClient() {\r\n    this.restTemplate = new RestTemplate();\r\n    this.restTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());\r\n  }\r\n\r\n  public <T> T query(String query, Class<T> cls) {\r\n    var request = RequestEntity.post(baseUrl)\r\n      .header(\"X-Cassandra-Token\", token)\r\n      .body(Map.of(\"query\", query));\r\n    var response = restTemplate.exchange(request, cls);\r\n\r\n    return response.getBody();\r\n  }\r\n}\r\n```","```\r\npublic record Event(String avenger, \r\n  String timestamp,\r\n  Double latitude,\r\n  Double longitude,\r\n  Double status) {}\r\n```","```\r\n@Service\r\npublic class EventsService {\r\n  @Autowired\r\n  private RestClient restClient;\r\n\r\n  public void createEvent(String avenger, Double latitude, Double longitude, Double status) {\r\n    var event = new Event(avenger, Instant.now().toString(), latitude, longitude, status);\r\n\r\n    restClient.createRecord(\"events\", event);\r\n  }\r\n}\r\n```","```\r\n@RestController\r\npublic class UpdateController {\r\n  ......\r\n  @Autowired\r\n  private EventsService eventsService;\r\n\r\n  @PostMapping(\"/update/{avenger}\")\r\n  public void update(@PathVariable String avenger, @RequestBody UpdateBody body) throws Exception {\r\n    eventsService.createEvent(avenger, body.lat(), body.lng(), body.status());\r\n    statusesService.updateStatus(avenger, lookupLocation(body.lat(), body.lng()), getStatus(body.status()));\r\n  }\r\n  ......\r\n}\r\n```","```\r\npublic record EventSummary(String timestamp,\r\n  Double latitude,\r\n  Double longitude,\r\n  Double status) {}\r\n```","```\r\npublic record Events(List<EventSummary> values, String pageState) {}\r\n```","```\r\npublic class EventsService {\r\n  ......\r\n  @Autowired\r\n  private GraphqlClient graphqlClient;\r\n\r\n  public Events getEvents(String avenger, String offset) {\r\n    var query = \"query {\" + \r\n      \"  events(filter:{avenger:{eq:\\\"%s\\\"}}, orderBy:[timestamp_DESC], options:{pageSize:5, pageState:%s}) {\" +\r\n      \"    pageState \" +\r\n      \"    values {\" +\r\n      \"     timestamp \" +\r\n      \"     latitude \" +\r\n      \"     longitude \" +\r\n      \"     status\" +\r\n      \"   }\" +\r\n      \"  }\" +\r\n      \"}\";\r\n\r\n    var fullQuery = String.format(query, avenger, offset == null ? \"null\" : \"\\\"\" + offset + \"\\\"\");\r\n\r\n    return graphqlClient.query(fullQuery, EventsGraphqlResponse.class).data().events();\r\n  }\r\n\r\n  private static record EventsResponse(Events events) {}\r\n  private static record EventsGraphqlResponse(EventsResponse data) {}\r\n}\r\n```","```\r\npublic class StatusesController {\r\n  ......\r\n\r\n  @Autowired\r\n  private EventsService eventsService;\r\n\r\n  @GetMapping(\"/avenger/{avenger}\")\r\n  public Object getAvengerStatus(@PathVariable String avenger, @RequestParam(required = false) String page) {\r\n    var result = new ModelAndView(\"dashboard\");\r\n    result.addObject(\"avenger\", avenger);\r\n    result.addObject(\"statuses\", statusesService.getStatuses());\r\n    result.addObject(\"events\", eventsService.getEvents(avenger, page));\r\n\r\n    return result;\r\n  }\r\n} \r\n```","```\r\n......\r\n    <div th:if=\"${events}\">\r\n      <div class=\"row\">\r\n        <table class=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Timestamp</th>\r\n              <th scope=\"col\">Latitude</th>\r\n              <th scope=\"col\">Longitude</th>\r\n              <th scope=\"col\">Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr th:each=\"data, iterstat: ${events.values}\">\r\n              <th scope=\"row\" th:text=\"${data.timestamp}\">\r\n                </td>\r\n              <td th:text=\"${data.latitude}\"></td>\r\n              <td th:text=\"${data.longitude}\"></td>\r\n              <td th:text=\"${(data.status * 100) + '%'}\"></td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div class=\"row\" th:if=\"${events.pageState}\">\r\n        <div class=\"col position-relative\">\r\n          <a th:href=\"@{/avenger/{id}(id = ${avenger}, page = ${events.pageState})}\"\r\n            class=\"position-absolute top-50 start-50 translate-middle\">Next\r\n            Page</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n......\r\n```","```\r\n......\r\n  <a th:href=\"@{/avenger/{id}(id = ${data.avenger})}\">\r\n    <h5 class=\"card-title\" th:text=\"${data.name}\"></h5>\r\n  </a>\r\n......\r\n```"]