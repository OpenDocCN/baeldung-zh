["```\r\n<dependency>\r\n    <groupId>org.assertj</groupId>\r\n    <artifactId>assertj-core</artifactId>\r\n    <version>3.5.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nOptional<String> givenOptional = Optional.of(\"something\");\r\n```","```\r\nassertThat(givenOptional)\r\n  .isPresent()\r\n  .hasValue(\"something\");\r\n```","```\r\nPredicate<String> predicate = s -> s.length() > 4;\r\n```","```\r\nassertThat(predicate)\r\n  .accepts(\"aaaaa\", \"bbbbb\")\r\n  .rejects(\"a\", \"b\")\r\n  .acceptsAll(asList(\"aaaaa\", \"bbbbb\"))\r\n  .rejectsAll(asList(\"a\", \"b\"));\r\n```","```\r\nLocalDate givenLocalDate = LocalDate.of(2016, 7, 8);\r\nLocalDate todayDate = LocalDate.now();\r\n```","```\r\nassertThat(givenLocalDate)\r\n  .isBefore(LocalDate.of(2020, 7, 8))\r\n  .isAfterOrEqualTo(LocalDate.of(1989, 7, 8));\r\n\r\nassertThat(todayDate)\r\n  .isAfter(LocalDate.of(1989, 7, 8))\r\n  .isToday();\r\n```","```\r\nLocalDateTime givenLocalDate = LocalDateTime.of(2016, 7, 8, 12, 0);\r\n```","```\r\nassertThat(givenLocalDate)\r\n  .isBefore(LocalDateTime.of(2020, 7, 8, 11, 2));\r\n```","```\r\nLocalTime givenLocalTime = LocalTime.of(12, 15);\r\n```","```\r\nassertThat(givenLocalTime)\r\n  .isAfter(LocalTime.of(1, 0))\r\n  .hasSameHourAs(LocalTime.of(12, 0));\r\n```","```\r\nList<LocalDate> givenList = asList(ofYearDay(2016, 5), ofYearDay(2015, 6));\r\n```","```\r\nassertThat(givenList)\r\n  .flatExtracting(LocalDate::getYear)\r\n  .contains(2015);\r\n```","```\r\nassertThat(givenList)\r\n  .flatExtracting(LocalDate::isLeapYear)\r\n  .contains(true);\r\n```","```\r\nassertThat(givenList)\r\n  .flatExtracting(Object::getClass)\r\n  .contains(LocalDate.class);\r\n```","```\r\nassertThat(givenList)\r\n  .flatExtracting(LocalDate::getYear, LocalDate::getDayOfMonth)\r\n  .contains(2015, 6);\r\n```","```\r\nString givenString = \"someString\";\r\n```","```\r\nassertThat(givenString)\r\n  .satisfies(s -> {\r\n    assertThat(s).isNotEmpty();\r\n    assertThat(s).hasSize(10);\r\n  });\r\n```","```\r\nList<String> givenList = Arrays.asList(\"\");\r\n```","```\r\nassertThat(givenList)\r\n  .hasOnlyOneElementSatisfying(s -> assertThat(s).isEmpty());\r\n```","```\r\nString emptyString = \"\";\r\n```","```\r\nassertThat(emptyString)\r\n  .matches(String::isEmpty);\r\n```"]