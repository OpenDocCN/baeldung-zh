["```\r\nMonday     Soccer                         \r\nTuesday    Basketball                     \r\nWednesday  Hiking                         \r\nThursday   Karate \r\n```","```\r\npublic enum DayOfWeek {\r\n    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY\r\n}\r\n```","```\r\nEnumMap<DayOfWeek, String> activityMap = new EnumMap<>(DayOfWeek.class);\r\nactivityMap.put(DayOfWeek.MONDAY, \"Soccer\"); \r\n```","```\r\nEnumMap<DayOfWeek, String> activityMap = new EnumMap<>(DayOfWeek.class);\r\nactivityMap.put(DayOfWeek.MONDAY, \"Soccer\");\r\nactivityMap.put(DayOfWeek.TUESDAY, \"Basketball\");\r\n\r\nEnumMap<DayOfWeek, String> activityMapCopy = new EnumMap<>(dayMap);\r\nassertThat(activityMapCopy.size()).isEqualTo(2);\r\nassertThat(activityMapCopy.get(DayOfWeek.MONDAY)).isEqualTo(\"Soccer\");\r\nassertThat(activityMapCopy.get(DayOfWeek.TUESDAY)).isEqualTo(\"Basketball\");\r\n```","```\r\nMap<DayOfWeek, String> ordinaryMap = new HashMap();\r\nordinaryMap.put(DayOfWeek.MONDAY, \"Soccer\");\r\n\r\nEnumMap enumMap = new EnumMap(ordinaryMap);\r\nassertThat(enumMap.size()).isEqualTo(1);\r\nassertThat(enumMap.get(DayOfWeek.MONDAY)).isEqualTo(\"Soccer\");\r\n```","```\r\nactivityMap.put(DayOfWeek.MONDAY, \"Soccer\");\r\n```","```\r\nassertThat(clubMap.get(DayOfWeek.MONDAY)).isEqualTo(\"Soccer\");\r\n```","```\r\nactivityMap.put(DayOfWeek.WEDNESDAY, \"Hiking\");\r\nassertThat(activityMap.containsKey(DayOfWeek.WEDNESDAY)).isTrue();\r\n```","```\r\nassertThat(activityMap.containsValue(\"Hiking\")).isTrue(); \r\n```","```\r\nassertThat(activityMap.containsKey(DayOfWeek.SATURDAY)).isFalse();\r\nassertThat(activityMap.containsValue(null)).isFalse();\r\nactivityMap.put(DayOfWeek.SATURDAY, null);\r\nassertThat(activityMap.containsKey(DayOfWeek.SATURDAY)).isTrue();\r\nassertThat(activityMap.containsValue(null)).isTrue();\r\n```","```\r\nactivityMap.put(DayOfWeek.MONDAY, \"Soccer\");\r\nassertThat(activityMap.remove(DayOfWeek.MONDAY)).isEqualTo(\"Soccer\");\r\nassertThat(activityMap.containsKey(DayOfWeek.MONDAY)).isFalse(); \r\n```","```\r\nactivityMap.put(DayOfWeek.Monday, \"Soccer\");\r\nassertThat(activityMap.remove(DayOfWeek.Monday, \"Hiking\")).isEqualTo(false);\r\nassertThat(activityMap.remove(DayOfWeek.Monday, \"Soccer\")).isEqualTo(true); \r\n```","```\r\nEnumMap<DayOfWeek, String> activityMap = new EnumMap(DayOfWeek.class);\r\nactivityMap.put(DayOfWeek.THURSDAY, \"Karate\");\r\nactivityMap.put(DayOfWeek.WEDNESDAY, \"Hiking\");\r\nactivityMap.put(DayOfWeek.MONDAY, \"Soccer\");\r\n```","```\r\nCollection values = dayMap.values();\r\nassertThat(values)\r\n  .containsExactly(\"Soccer\", \"Hiking\", \"Karate\"); \r\n```","```\r\nSet keys = dayMap.keySet();\r\nassertThat(keys)\r\n        .containsExactly(DayOfWeek.MONDAY, DayOfWeek.WEDNESDAY, DayOfWeek.SATURDAY); \r\n```","```\r\nassertThat(dayMap.entrySet())\r\n    .containsExactly(\r\n        new SimpleEntry(DayOfWeek.MONDAY, \"Soccer\"),\r\n        new SimpleEntry(DayOfWeek.WEDNESDAY, \"Hiking\"),\r\n        new SimpleEntry(DayOfWeek.THURSDAY, \"Karate\")\r\n    ); \r\n```","```\r\nactivityMap.put(DayOfWeek.TUESDAY, \"Basketball\");\r\nassertThat(values)\r\n    .containsExactly(\"Soccer\", \"Basketball\", \"Hiking\", \"Karate\"); \r\n```","```\r\nvalues.remove(\"Hiking\");\r\nassertThat(activityMap.containsKey(DayOfWeek.WEDNESDAY)).isFalse();\r\nassertThat(activityMap.size()).isEqualTo(3); \r\n```"]