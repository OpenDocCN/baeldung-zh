["```\r\n<dependency>\r\n    <groupId>io.r2dbc</groupId>\r\n    <artifactId>r2dbc-spi</artifactId>\r\n    <version>0.8.0.M7</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.r2dbc</groupId>\r\n    <artifactId>r2dbc-h2</artifactId>\r\n    <version>0.8.0.M7</version>\r\n</dependency>\r\n```","```\r\n<repositories>\r\n    <repository>\r\n        <id>spring-milestones</id>\r\n        <name>Spring Milestones</name>\r\n        <url>https://repo.spring.io/milestone</url>\r\n        <snapshots>\r\n            <enabled>false</enabled>\r\n        </snapshots>\r\n   </repository>\r\n   <repository>\r\n       <id>spring-snapshots</id>\r\n       <name>Spring Snapshots</name>\r\n       <url>https://repo.spring.io/snapshot</url>\r\n       <snapshots>\r\n           <enabled>true</enabled>\r\n       </snapshots>\r\n    </repository>\r\n</repositories>\r\n```","```\r\n@Bean\r\npublic ConnectionFactory connectionFactory(R2DBCConfigurationProperties properties) {\r\n    ConnectionFactoryOptions baseOptions = ConnectionFactoryOptions.parse(properties.getUrl());\r\n    Builder ob = ConnectionFactoryOptions.builder().from(baseOptions);\r\n    if (!StringUtil.isNullOrEmpty(properties.getUser())) {\r\n        ob = ob.option(USER, properties.getUser());\r\n    }\r\n    if (!StringUtil.isNullOrEmpty(properties.getPassword())) {\r\n        ob = ob.option(PASSWORD, properties.getPassword());\r\n    }        \r\n    return ConnectionFactories.get(ob.build());    \r\n} \r\n```","```\r\nr2dbc:h2:mem://./testdb\r\n```","```\r\npublic class Account {\r\n    private Long id;\r\n    private String iban;\r\n    private BigDecimal balance;\r\n    // ... getters and setters omitted\r\n}\r\n```","```\r\npublic Mono<Account>> findById(Long id) {         \r\n    return Mono.from(connectionFactory.create())\r\n      .flatMap(c ->\r\n          // use the connection\r\n      )\r\n      // ... downstream processing omitted\r\n}\r\n```","```\r\n.flatMap( c -> \r\n    Mono.from(c.createStatement(\"select id,iban,balance from Account where id = $1\")\r\n      .bind(\"$1\", id)\r\n      .execute())\r\n      .doFinally((st) -> close(c))\r\n ) \r\n```","```\r\n.map(result -> result.map((row, meta) -> \r\n    new Account(row.get(\"id\", Long.class),\r\n      row.get(\"iban\", String.class),\r\n      row.get(\"balance\", BigDecimal.class))))\r\n.flatMap(p -> Mono.from(p)); \r\n```","```\r\n@Bean\r\npublic CommandLineRunner initDatabase(ConnectionFactory cf) {\r\n    return (args) ->\r\n      Flux.from(cf.create())\r\n        .flatMap(c -> \r\n            Flux.from(c.createBatch()\r\n              .add(\"drop table if exists Account\")\r\n              .add(\"create table Account(\" +\r\n                \"id IDENTITY(1,1),\" +\r\n                \"iban varchar(80) not null,\" +\r\n                \"balance DECIMAL(18,2) not null)\")\r\n              .add(\"insert into Account(iban,balance)\" +\r\n                \"values('BR430120980198201982',100.00)\")\r\n              .add(\"insert into Account(iban,balance)\" +\r\n                \"values('BR430120998729871000',250.00)\")\r\n              .execute())\r\n            .doFinally((st) -> c.close())\r\n          )\r\n        .log()\r\n        .blockLast();\r\n}\r\n```","```\r\npublic Mono<Account> createAccount(Account account) {    \r\n    return Mono.from(connectionFactory.create())\r\n      .flatMap(c -> Mono.from(c.beginTransaction())\r\n        .then(Mono.from(c.createStatement(\"insert into Account(iban,balance) values($1,$2)\")\r\n          .bind(\"$1\", account.getIban())\r\n          .bind(\"$2\", account.getBalance())\r\n          .returnGeneratedValues(\"id\")\r\n          .execute()))\r\n        .map(result -> result.map((row, meta) -> \r\n            new Account(row.get(\"id\", Long.class),\r\n              account.getIban(),\r\n              account.getBalance())))\r\n        .flatMap(pub -> Mono.from(pub))\r\n        .delayUntil(r -> c.commitTransaction())\r\n        .doFinally((st) -> c.close()));   \r\n}\r\n```","```\r\n@RestController\r\npublic class AccountResource {\r\n    private final ReactiveAccountDao accountDao;\r\n\r\n    public AccountResource(ReactiveAccountDao accountDao) {\r\n        this.accountDao = accountDao;\r\n    }\r\n\r\n    @GetMapping(\"/accounts/{id}\")\r\n    public Mono<ResponseEntity<Account>> getAccount(@PathVariable(\"id\") Long id) {\r\n        return accountDao.findById(id)\r\n          .map(acc -> new ResponseEntity<>(acc, HttpStatus.OK))\r\n          .switchIfEmpty(Mono.just(new ResponseEntity<>(null, HttpStatus.NOT_FOUND)));\r\n    }\r\n    // ... other methods omitted\r\n}\r\n```"]