["```\r\nList<String> interpret(Context ctx);\r\n```","```\r\nclass Select implements Expression {\r\n\r\n    private String column;\r\n    private From from;\r\n\r\n    // constructor\r\n\r\n    @Override\r\n    public List<String> interpret(Context ctx) {\r\n        ctx.setColumn(column);\r\n        return from.interpret(ctx);\r\n    }\r\n}\r\n```","```\r\nclass From implements Expression {\r\n\r\n    private String table;\r\n    private Where where;\r\n\r\n    // constructors\r\n\r\n    @Override\r\n    public List<String> interpret(Context ctx) {\r\n        ctx.setTable(table);\r\n        if (where == null) {\r\n            return ctx.search();\r\n        }\r\n        return where.interpret(ctx);\r\n    }\r\n}\r\n```","```\r\nclass Where implements Expression {\r\n\r\n    private Predicate<String> filter;\r\n\r\n    // constructor\r\n\r\n    @Override\r\n    public List<String> interpret(Context ctx) {\r\n        ctx.setFilter(filter);\r\n        return ctx.search();\r\n    }\r\n}\r\n```","```\r\nclass Context {\r\n\r\n    private static Map<String, List<Row>> tables = new HashMap<>();\r\n\r\n    static {\r\n        List<Row> list = new ArrayList<>();\r\n        list.add(new Row(\"John\", \"Doe\"));\r\n        list.add(new Row(\"Jan\", \"Kowalski\"));\r\n        list.add(new Row(\"Dominic\", \"Doom\"));\r\n\r\n        tables.put(\"people\", list);\r\n    }\r\n\r\n    private String table;\r\n    private String column;\r\n    private Predicate<String> whereFilter;\r\n\r\n    // ... \r\n\r\n    List<String> search() {\r\n\r\n        List<String> result = tables.entrySet()\r\n          .stream()\r\n          .filter(entry -> entry.getKey().equalsIgnoreCase(table))\r\n          .flatMap(entry -> Stream.of(entry.getValue()))\r\n          .flatMap(Collection::stream)\r\n          .map(Row::toString)\r\n          .flatMap(columnMapper)\r\n          .filter(whereFilter)\r\n          .collect(Collectors.toList());\r\n\r\n        clear();\r\n\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class InterpreterDemo {\r\n    public static void main(String[] args) {\r\n\r\n        Expression query = new Select(\"name\", new From(\"people\"));\r\n        Context ctx = new Context();\r\n        List<String> result = query.interpret(ctx);\r\n        System.out.println(result);\r\n\r\n        Expression query2 = new Select(\"*\", new From(\"people\"));\r\n        List<String> result2 = query2.interpret(ctx);\r\n        System.out.println(result2);\r\n\r\n        Expression query3 = new Select(\"name\", \r\n          new From(\"people\", \r\n            new Where(name -> name.toLowerCase().startsWith(\"d\"))));\r\n        List<String> result3 = query3.interpret(ctx);\r\n        System.out.println(result3);\r\n    }\r\n}\r\n```","```\r\n[John, Jan, Dominic]\r\n[John Doe, Jan Kowalski, Dominic Doom]\r\n[Dominic]\r\n```"]