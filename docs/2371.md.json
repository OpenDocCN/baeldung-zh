["```\r\n@Test\r\npublic void whenUseHttpAsyncClient_thenCorrect() throws Exception {\r\n    CloseableHttpAsyncClient client = HttpAsyncClients.createDefault();\r\n    client.start();\r\n    HttpGet request = new HttpGet(\"http://www.google.com\");\r\n\r\n    Future<HttpResponse> future = client.execute(request, null);\r\n    HttpResponse response = future.get();\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\njava.lang.IllegalStateException: Request cannot be executed; I/O reactor status: INACTIVE\r\n    at o.a.h.u.Asserts.check(Asserts.java:46)\r\n    at o.a.h.i.n.c.CloseableHttpAsyncClientBase.\r\n      ensureRunning(CloseableHttpAsyncClientBase.java:90)\r\n```","```\r\n@Test\r\npublic void whenUseMultipleHttpAsyncClient_thenCorrect() throws Exception {\r\n    ConnectingIOReactor ioReactor = new DefaultConnectingIOReactor();\r\n    PoolingNHttpClientConnectionManager cm = \r\n      new PoolingNHttpClientConnectionManager(ioReactor);\r\n    CloseableHttpAsyncClient client = \r\n      HttpAsyncClients.custom().setConnectionManager(cm).build();\r\n    client.start();\r\n\r\n    String[] toGet = { \r\n        \"http://www.google.com/\", \r\n        \"http://www.apache.org/\", \r\n        \"http://www.bing.com/\" \r\n    };\r\n\r\n    GetThread[] threads = new GetThread[toGet.length];\r\n    for (int i = 0; i < threads.length; i++) {\r\n        HttpGet request = new HttpGet(toGet[i]);\r\n        threads[i] = new GetThread(client, request);\r\n    }\r\n\r\n    for (GetThread thread : threads) {\r\n        thread.start();\r\n    }\r\n    for (GetThread thread : threads) {\r\n        thread.join();\r\n    }\r\n}\r\n```","```\r\nstatic class GetThread extends Thread {\r\n    private CloseableHttpAsyncClient client;\r\n    private HttpContext context;\r\n    private HttpGet request;\r\n\r\n    public GetThread(CloseableHttpAsyncClient client,HttpGet req){\r\n        this.client = client;\r\n        context = HttpClientContext.create();\r\n        this.request = req;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            Future<HttpResponse> future = client.execute(request, context, null);\r\n            HttpResponse response = future.get();\r\n            assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n        } catch (Exception ex) {\r\n            System.out.println(ex.getLocalizedMessage());\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseProxyWithHttpClient_thenCorrect() throws Exception {\r\n    CloseableHttpAsyncClient client = HttpAsyncClients.createDefault();\r\n    client.start();\r\n\r\n    HttpHost proxy = new HttpHost(\"74.50.126.248\", 3127);\r\n    RequestConfig config = RequestConfig.custom().setProxy(proxy).build();\r\n    HttpGet request = new HttpGet(\"https://issues.apache.org/\");\r\n    request.setConfig(config);\r\n\r\n    Future<HttpResponse> future = client.execute(request, null);\r\n    HttpResponse response = future.get();\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseSSLWithHttpAsyncClient_thenCorrect() throws Exception {\r\n    TrustStrategy acceptingTrustStrategy = new TrustStrategy() {\r\n        public boolean isTrusted(X509Certificate[] certificate,  String authType) {\r\n            return true;\r\n        }\r\n    };\r\n    SSLContext sslContext = SSLContexts.custom()\r\n      .loadTrustMaterial(null, acceptingTrustStrategy).build();\r\n\r\n    CloseableHttpAsyncClient client = HttpAsyncClients.custom()\r\n      .setSSLHostnameVerifier(SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER)\r\n      .setSSLContext(sslContext).build();\r\n    client.start();\r\n\r\n    HttpGet request = new HttpGet(\"https://mms.nw.ru/\");\r\n    Future<HttpResponse> future = client.execute(request, null);\r\n    HttpResponse response = future.get();\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseCookiesWithHttpAsyncClient_thenCorrect() throws Exception {\r\n    BasicCookieStore cookieStore = new BasicCookieStore();\r\n    BasicClientCookie cookie = new BasicClientCookie(\"JSESSIONID\", \"1234\");\r\n    cookie.setDomain(\".github.com\");\r\n    cookie.setPath(\"/\");\r\n    cookieStore.addCookie(cookie);\r\n\r\n    CloseableHttpAsyncClient client = HttpAsyncClients.custom().build();\r\n    client.start();\r\n\r\n    HttpGet request = new HttpGet(\"http://www.github.com\");\r\n    HttpContext localContext = new BasicHttpContext();\r\n    localContext.setAttribute(HttpClientContext.COOKIE_STORE, cookieStore);\r\n    Future<HttpResponse> future = client.execute(request, localContext, null);\r\n    HttpResponse response = future.get();\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseAuthenticationWithHttpAsyncClient_thenCorrect() throws Exception {\r\n    CredentialsProvider provider = new BasicCredentialsProvider();\r\n    UsernamePasswordCredentials creds = new UsernamePasswordCredentials(\"user\", \"pass\");\r\n    provider.setCredentials(AuthScope.ANY, creds);\r\n\r\n    CloseableHttpAsyncClient client = \r\n      HttpAsyncClients.custom().setDefaultCredentialsProvider(provider).build();\r\n    client.start();\r\n\r\n    HttpGet request = new HttpGet(\"http://localhost:8080\");\r\n    Future<HttpResponse> future = client.execute(request, null);\r\n    HttpResponse response = future.get();\r\n\r\n    assertThat(response.getStatusLine().getStatusCode(), equalTo(200));\r\n    client.close();\r\n}\r\n```"]