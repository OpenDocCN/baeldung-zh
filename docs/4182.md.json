["```\r\npublic static Date getDateWithoutTimeUsingCalendar() {\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.set(Calendar.HOUR_OF_DAY, 0);\r\n    calendar.set(Calendar.MINUTE, 0);\r\n    calendar.set(Calendar.SECOND, 0);\r\n    calendar.set(Calendar.MILLISECOND, 0);\r\n\r\n    return calendar.getTime();\r\n}\r\n```","```\r\nSat Jun 23 00:00:00 CEST 2018\r\n```","```\r\n@Test\r\npublic void whenGettingDateWithoutTimeUsingCalendar_thenReturnDateWithoutTime() {\r\n    Date dateWithoutTime = DateWithoutTime.getDateWithoutTimeUsingCalendar();\r\n\r\n    Calendar calendar = Calendar.getInstance();\r\n    calendar.setTime(dateWithoutTime);\r\n    int day = calendar.get(Calendar.DAY_OF_MONTH);\r\n\r\n    calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY - 1);\r\n    assertEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\r\n\r\n    calendar.setTimeInMillis(dateWithoutTime.getTime() + MILLISECONDS_PER_DAY);\r\n    assertNotEquals(day, calendar.get(Calendar.DAY_OF_MONTH));\r\n}\r\n```","```\r\npublic static Date getDateWithoutTimeUsingFormat() \r\n  throws ParseException {\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\r\n      \"dd/MM/yyyy\");\r\n    return formatter.parse(formatter.format(new Date()));\r\n}\r\n```","```\r\nSat Jun 23 00:00:00 CEST 2018\r\n```","```\r\npublic static LocalDate getLocalDate() {\r\n    return LocalDate.now();\r\n}\r\n```","```\r\n2018-06-23\r\n```","```\r\n@Test\r\npublic void whenGettingLocalDate_thenReturnDateWithoutTime() {\r\n    LocalDate localDate = DateWithoutTime.getLocalDate();\r\n\r\n    long millisLocalDate = localDate\r\n      .atStartOfDay()\r\n      .toInstant(OffsetDateTime\r\n        .now()\r\n        .getOffset())\r\n      .toEpochMilli();\r\n\r\n    Calendar calendar = Calendar.getInstance();\r\n\r\n    calendar.setTimeInMillis(\r\n      millisLocalDate + MILLISECONDS_PER_DAY - 1);\r\n    assertEquals(\r\n      localDate.getDayOfMonth(), \r\n      calendar.get(Calendar.DAY_OF_MONTH));\r\n\r\n    calendar.setTimeInMillis(millisLocalDate + MILLISECONDS_PER_DAY);\r\n    assertNotEquals(\r\n      localDate.getDayOfMonth(), \r\n      calendar.get(Calendar.DAY_OF_MONTH));\r\n}\r\n```"]