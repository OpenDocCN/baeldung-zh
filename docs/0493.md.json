["```\r\npublic static int compare(int num1, int num2) {\r\n    if (num1 > num2)\r\n        return 1;\r\n    else if (num1 < num2)\r\n        return -1;\r\n    else\r\n        return 0;\r\n}\r\n```","```\r\npublic static void swap(int[] array, int position1, int position2) {\r\n    if (position1 != position2) {\r\n        int temp = array[position1];\r\n        array[position1] = array[position2];\r\n        array[position2] = temp;\r\n    }\r\n}\r\n```","```\r\npublic class Partition {\r\n    private int left;\r\n    private int right;\r\n}\r\n```","```\r\npublic static Partition partition(int[] input, int begin, int end) {\r\n    int lt = begin, current = begin, gt = end;\r\n    int partitioningValue = input[begin];\r\n\r\n    while (current <= gt) {\r\n        int compareCurrent = compare(input[current], partitioningValue);\r\n        switch (compareCurrent) {\r\n            case -1:\r\n                swap(input, current++, lt++);\r\n                break;\r\n            case 0:\r\n                current++;\r\n                break;\r\n            case 1:\r\n                swap(input, current, gt--);\r\n                break;\r\n        }\r\n    }\r\n    return new Partition(lt, gt);\r\n}\r\n```","```\r\npublic static void quicksort(int[] input, int begin, int end) {\r\n    if (end <= begin)\r\n        return;\r\n\r\n    Partition middlePartition = partition(input, begin, end);\r\n\r\n    quicksort(input, begin, middlePartition.getLeft() - 1);\r\n    quicksort(input, middlePartition.getRight() + 1, end);\r\n}\r\n```","```\r\npublic static Partition partition(int input[], int begin, int end){\r\n\t// returns partition window\r\n}\r\n```","```\r\nwhile (true) {\r\n    while (input[left] < partitioningValue) left++; \r\n\r\n    while (input[right] > partitioningValue) {\r\n        if (right == begin)\r\n            break;\r\n        right--;\r\n    }\r\n\r\n    if (left == right && input[left] == partitioningValue) {\r\n        swap(input, begin + leftEqualKeysCount, left);\r\n        leftEqualKeysCount++;\r\n        left++;\r\n    }\r\n\r\n    if (left >= right) {\r\n        break;\r\n    }\r\n\r\n    swap(input, left, right);\r\n\r\n    if (input[left] == partitioningValue) {\r\n        swap(input, begin + leftEqualKeysCount, left);\r\n        leftEqualKeysCount++;\r\n    }\r\n\r\n    if (input[right] == partitioningValue) {\r\n        swap(input, right, end - rightEqualKeysCount);\r\n        rightEqualKeysCount++;\r\n    }\r\n    left++; right--;\r\n}\r\n```","```\r\nright = left - 1;\r\nfor (int k = begin; k < begin + leftEqualKeysCount; k++, right--) { \r\n    if (right >= begin + leftEqualKeysCount)\r\n        swap(input, k, right);\r\n}\r\nfor (int k = end; k > end - rightEqualKeysCount; k--, left++) {\r\n    if (left <= end - rightEqualKeysCount)\r\n        swap(input, left, k);\r\n} \r\n```","```\r\nreturn new Partition(right + 1, left - 1);\r\n```"]