["```\r\ndefault V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)\r\n```","```\r\nMap<String, Integer> stringLength = new HashMap<>();\r\nstringLength.put(\"John\", 5);\r\nassertEquals((long)stringLength.computeIfAbsent(\"John\", s -> s.length()), 5);\r\n```","```\r\nMap<String, Integer> stringLength = new HashMap<>();\r\nassertEquals((long)stringLength.computeIfAbsent(\"John\", s -> s.length()), 4);\r\nassertEquals((long)stringLength.get(\"John\"), 4);\r\n```","```\r\nMap<String, Integer> stringLength = new HashMap<>();\r\nassertEquals(stringLength.computeIfAbsent(\"John\", s -> null), null);\r\nassertNull(stringLength.get(\"John\"));\r\n```","```\r\n@Test(expected = RuntimeException.class)\r\npublic void whenMappingFunctionThrowsException_thenExceptionIsRethrown() {\r\n    Map<String, Integer> stringLength = new HashMap<>();\r\n    stringLength.computeIfAbsent(\"John\", s -> { throw new RuntimeException(); });\r\n}\r\n```"]