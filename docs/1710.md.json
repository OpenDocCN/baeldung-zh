["```\r\nimport java.lang.reflect.*;\r\n```","```\r\npublic class Person {\r\n    private String name;\r\n    private int age;\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenGetsFieldNamesAtRuntime_thenCorrect() {\r\n    Object person = new Person();\r\n    Field[] fields = person.getClass().getDeclaredFields();\r\n\r\n    List<String> actualFieldNames = getFieldNames(fields);\r\n\r\n    assertTrue(Arrays.asList(\"name\", \"age\")\r\n      .containsAll(actualFieldNames));\r\n}\r\n```","```\r\nprivate static List<String> getFieldNames(Field[] fields) {\r\n    List<String> fieldNames = new ArrayList<>();\r\n    for (Field field : fields)\r\n      fieldNames.add(field.getName());\r\n    return fieldNames;\r\n}\r\n```","```\r\npublic interface Eating {\r\n    String eats();\r\n}\r\n```","```\r\npublic abstract class Animal implements Eating {\r\n\r\n    public static String CATEGORY = \"domestic\";\r\n    private String name;\r\n\r\n    protected abstract String getSound();\r\n\r\n    // constructor, standard getters and setters omitted \r\n}\r\n```","```\r\npublic interface Locomotion {\r\n    String getLocomotion();\r\n}\r\n```","```\r\npublic class Goat extends Animal implements Locomotion {\r\n\r\n    @Override\r\n    protected String getSound() {\r\n        return \"bleat\";\r\n    }\r\n\r\n    @Override\r\n    public String getLocomotion() {\r\n        return \"walks\";\r\n    }\r\n\r\n    @Override\r\n    public String eats() {\r\n        return \"grass\";\r\n    }\r\n\r\n    // constructor omitted\r\n}\r\n```","```\r\n@Test\r\npublic void givenObject_whenGetsClassName_thenCorrect() {\r\n    Object goat = new Goat(\"goat\");\r\n    Class<?> clazz = goat.getClass();\r\n\r\n    assertEquals(\"Goat\", clazz.getSimpleName());\r\n    assertEquals(\"com.baeldung.reflection.Goat\", clazz.getName());\r\n    assertEquals(\"com.baeldung.reflection.Goat\", clazz.getCanonicalName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassName_whenCreatesObject_thenCorrect(){\r\n    Class<?> clazz = Class.forName(\"com.baeldung.reflection.Goat\");\r\n\r\n    assertEquals(\"Goat\", clazz.getSimpleName());\r\n    assertEquals(\"com.baeldung.reflection.Goat\", clazz.getName());\r\n    assertEquals(\"com.baeldung.reflection.Goat\", clazz.getCanonicalName()); \r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenRecognisesModifiers_thenCorrect() {\r\n    Class<?> goatClass = Class.forName(\"com.baeldung.reflection.Goat\");\r\n    Class<?> animalClass = Class.forName(\"com.baeldung.reflection.Animal\");\r\n\r\n    int goatMods = goatClass.getModifiers();\r\n    int animalMods = animalClass.getModifiers();\r\n\r\n    assertTrue(Modifier.isPublic(goatMods));\r\n    assertTrue(Modifier.isAbstract(animalMods));\r\n    assertTrue(Modifier.isPublic(animalMods));\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsPackageInfo_thenCorrect() {\r\n    Goat goat = new Goat(\"goat\");\r\n    Class<?> goatClass = goat.getClass();\r\n    Package pkg = goatClass.getPackage();\r\n\r\n    assertEquals(\"com.baeldung.reflection\", pkg.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsSuperClass_thenCorrect() {\r\n    Goat goat = new Goat(\"goat\");\r\n    String str = \"any string\";\r\n\r\n    Class<?> goatClass = goat.getClass();\r\n    Class<?> goatSuperClass = goatClass.getSuperclass();\r\n\r\n    assertEquals(\"Animal\", goatSuperClass.getSimpleName());\r\n    assertEquals(\"Object\", str.getClass().getSuperclass().getSimpleName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsImplementedInterfaces_thenCorrect(){\r\n    Class<?> goatClass = Class.forName(\"com.baeldung.reflection.Goat\");\r\n    Class<?> animalClass = Class.forName(\"com.baeldung.reflection.Animal\");\r\n\r\n    Class<?>[] goatInterfaces = goatClass.getInterfaces();\r\n    Class<?>[] animalInterfaces = animalClass.getInterfaces();\r\n\r\n    assertEquals(1, goatInterfaces.length);\r\n    assertEquals(1, animalInterfaces.length);\r\n    assertEquals(\"Locomotion\", goatInterfaces[0].getSimpleName());\r\n    assertEquals(\"Eating\", animalInterfaces[0].getSimpleName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsConstructor_thenCorrect(){\r\n    Class<?> goatClass = Class.forName(\"com.baeldung.reflection.Goat\");\r\n\r\n    Constructor<?>[] constructors = goatClass.getConstructors();\r\n\r\n    assertEquals(1, constructors.length);\r\n    assertEquals(\"com.baeldung.reflection.Goat\", constructors[0].getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsFields_thenCorrect(){\r\n    Class<?> animalClass = Class.forName(\"com.baeldung.reflection.Animal\");\r\n    Field[] fields = animalClass.getDeclaredFields();\r\n\r\n    List<String> actualFields = getFieldNames(fields);\r\n\r\n    assertEquals(2, actualFields.size());\r\n    assertTrue(actualFields.containsAll(Arrays.asList(\"name\", \"CATEGORY\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsMethods_thenCorrect(){\r\n    Class<?> animalClass = Class.forName(\"com.baeldung.reflection.Animal\");\r\n    Method[] methods = animalClass.getDeclaredMethods();\r\n    List<String> actualMethods = getMethodNames(methods);\r\n\r\n    assertEquals(4, actualMethods.size());\r\n    assertTrue(actualMethods.containsAll(Arrays.asList(\"getName\",\r\n      \"setName\", \"getSound\")));\r\n}\r\n```","```\r\nprivate static List<String> getMethodNames(Method[] methods) {\r\n    List<String> methodNames = new ArrayList<>();\r\n    for (Method method : methods)\r\n      methodNames.add(method.getName());\r\n    return methodNames;\r\n}\r\n```","```\r\npublic class Bird extends Animal {\r\n    private boolean walks;\r\n\r\n    public Bird() {\r\n        super(\"bird\");\r\n    }\r\n\r\n    public Bird(String name, boolean walks) {\r\n        super(name);\r\n        setWalks(walks);\r\n    }\r\n\r\n    public Bird(String name) {\r\n        super(name);\r\n    }\r\n\r\n    public boolean walks() {\r\n        return walks;\r\n    }\r\n\r\n    // standard setters and overridden methods\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsAllConstructors_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Constructor<?>[] constructors = birdClass.getConstructors();\r\n\r\n    assertEquals(3, constructors.length);\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsEachConstructorByParamTypes_thenCorrect(){\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n\r\n    Constructor<?> cons1 = birdClass.getConstructor();\r\n    Constructor<?> cons2 = birdClass.getConstructor(String.class);\r\n    Constructor<?> cons3 = birdClass.getConstructor(String.class, boolean.class);\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenInstantiatesObjectsAtRuntime_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Constructor<?> cons1 = birdClass.getConstructor();\r\n    Constructor<?> cons2 = birdClass.getConstructor(String.class);\r\n    Constructor<?> cons3 = birdClass.getConstructor(String.class,\r\n      boolean.class);\r\n\r\n    Bird bird1 = (Bird) cons1.newInstance();\r\n    Bird bird2 = (Bird) cons2.newInstance(\"Weaver bird\");\r\n    Bird bird3 = (Bird) cons3.newInstance(\"dove\", true);\r\n\r\n    assertEquals(\"bird\", bird1.getName());\r\n    assertEquals(\"Weaver bird\", bird2.getName());\r\n    assertEquals(\"dove\", bird3.getName());\r\n\r\n    assertFalse(bird1.walks());\r\n    assertTrue(bird3.walks());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsPublicFields_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Field[] fields = birdClass.getFields();\r\n\r\n    assertEquals(1, fields.length);\r\n    assertEquals(\"CATEGORY\", fields[0].getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsPublicFieldByName_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Field field = birdClass.getField(\"CATEGORY\");\r\n\r\n    assertEquals(\"CATEGORY\", field.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsDeclaredFields_thenCorrect(){\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Field[] fields = birdClass.getDeclaredFields();\r\n\r\n    assertEquals(1, fields.length);\r\n    assertEquals(\"walks\", fields[0].getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsFieldsByName_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Field field = birdClass.getDeclaredField(\"walks\");\r\n\r\n    assertEquals(\"walks\", field.getName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassField_whenGetsType_thenCorrect() {\r\n    Field field = Class.forName(\"com.baeldung.reflection.Bird\")\r\n      .getDeclaredField(\"walks\");\r\n    Class<?> fieldClass = field.getType();\r\n\r\n    assertEquals(\"boolean\", fieldClass.getSimpleName());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassField_whenSetsAndGetsValue_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Bird bird = (Bird) birdClass.getConstructor().newInstance();\r\n    Field field = birdClass.getDeclaredField(\"walks\");\r\n    field.setAccessible(true);\r\n\r\n    assertFalse(field.getBoolean(bird));\r\n    assertFalse(bird.walks());\r\n\r\n    field.set(bird, true);\r\n\r\n    assertTrue(field.getBoolean(bird));\r\n    assertTrue(bird.walks());\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassField_whenGetsAndSetsWithNull_thenCorrect(){\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Field field = birdClass.getField(\"CATEGORY\");\r\n    field.setAccessible(true);\r\n\r\n    assertEquals(\"domestic\", field.get(null));\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsAllPublicMethods_thenCorrect(){\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Method[] methods = birdClass.getMethods();\r\n    List<String> methodNames = getMethodNames(methods);\r\n\r\n    assertTrue(methodNames.containsAll(Arrays\r\n      .asList(\"equals\", \"notifyAll\", \"hashCode\",\r\n        \"walks\", \"eats\", \"toString\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenClass_whenGetsOnlyDeclaredMethods_thenCorrect(){\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    List<String> actualMethodNames\r\n      = getMethodNames(birdClass.getDeclaredMethods());\r\n\r\n    List<String> expectedMethodNames = Arrays\r\n      .asList(\"setWalks\", \"walks\", \"getSound\", \"eats\");\r\n\r\n    assertEquals(expectedMethodNames.size(), actualMethodNames.size());\r\n    assertTrue(expectedMethodNames.containsAll(actualMethodNames));\r\n    assertTrue(actualMethodNames.containsAll(expectedMethodNames));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMethodName_whenGetsMethod_thenCorrect() throws Exception {\r\n    Bird bird = new Bird();\r\n    Method walksMethod = bird.getClass().getDeclaredMethod(\"walks\");\r\n    Method setWalksMethod = bird.getClass().getDeclaredMethod(\"setWalks\", boolean.class);\r\n\r\n    assertTrue(walksMethod.canAccess(bird));\r\n    assertTrue(setWalksMethod.canAccess(bird));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMethod_whenInvokes_thenCorrect() {\r\n    Class<?> birdClass = Class.forName(\"com.baeldung.reflection.Bird\");\r\n    Bird bird = (Bird) birdClass.getConstructor().newInstance();\r\n    Method setWalksMethod = birdClass.getDeclaredMethod(\"setWalks\", boolean.class);\r\n    Method walksMethod = birdClass.getDeclaredMethod(\"walks\");\r\n    boolean walks = (boolean) walksMethod.invoke(bird);\r\n\r\n    assertFalse(walks);\r\n    assertFalse(bird.walks());\r\n\r\n    setWalksMethod.invoke(bird, true);\r\n\r\n    boolean walks2 = (boolean) walksMethod.invoke(bird);\r\n    assertTrue(walks2);\r\n    assertTrue(bird.walks());\r\n}\r\n```"]