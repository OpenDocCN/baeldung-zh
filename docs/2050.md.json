["```\r\ny = mx + b\r\n```","```\r\ny = m1x + b1\r\n```","```\r\ny = m2x + b2\r\n```","```\r\ny1 = y2\r\n```","```\r\nm1x + b1 = m2x + b2\r\n```","```\r\nx(m1 - m2) = b2 - b1\r\nx = (b2 - b1) / (m1 - m2)\r\n```","```\r\ny = m1x + b1\r\n```","```\r\npublic Optional<Point> calculateIntersectionPoint(\r\n    double m1, \r\n    double b1, \r\n    double m2, \r\n    double b2) {\r\n\r\n    if (m1 == m2) {\r\n        return Optional.empty();\r\n    }\r\n\r\n    double x = (b2 - b1) / (m1 - m2);\r\n    double y = m1 * x + b1;\r\n\r\n    Point point = new Point();\r\n    point.setLocation(x, y);\r\n    return Optional.of(point);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNotParallelLines_whenCalculatePoint_thenPresent() {\r\n    double m1 = 0;\r\n    double b1 = 0;\r\n    double m2 = 1;\r\n    double b2 = -1;\r\n\r\n    Optional<Point> point = service.calculateIntersectionPoint(m1, b1, m2, b2);\r\n\r\n    assertTrue(point.isPresent());\r\n    assertEquals(point.get().getX(), 1, 0.001);\r\n    assertEquals(point.get().getY(), 0, 0.001);\r\n}\r\n```","```\r\n@Test\r\npublic void givenParallelLines_whenCalculatePoint_thenEmpty() {\r\n    double m1 = 1;\r\n    double b1 = 0;\r\n    double m2 = 1;\r\n    double b2 = -1;\r\n\r\n    Optional<Point> point = service.calculateIntersectionPoint(m1, b1, m2, b2);\r\n\r\n    assertFalse(point.isPresent());\r\n}\r\n```"]