["```\r\n@Entity\r\npublic class Fruit {\r\n    @Id\r\n    private long id;\r\n    private String name;\r\n    private String color;\r\n    // standard getters and setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface FruitRepository extends JpaRepository<Fruit, Long> {\r\n    Long deleteByName(String name);\r\n}\r\n```","```\r\nList<Fruit> deleteByColor(String color);\r\n```","```\r\ninsert into fruit(id,name,color) values (1,'apple','red');\r\ninsert into fruit(id,name,color) values (2,'custard apple','green');\r\ninsert into fruit(id,name,color) values (3,'mango','yellow');\r\ninsert into fruit(id,name,color) values (4,'guava','green');\r\n```","```\r\n@Transactional\r\n@Test\r\n@Sql(scripts = { \"/test-fruit-data.sql\" })\r\npublic void givenFruits_WhenDeletedByColor_ThenDeletedFruitsShouldReturn() {\r\n     List<Fruit> fruits = fruitRepository.deleteByColor(\"green\");\r\n\r\n     assertEquals(\"number of fruits are not matching\", 2, fruits.size());\r\n     fruits.forEach(fruit -> assertEquals(\"It's not a green fruit\", \"green\", fruit.getColor()));\r\n} \r\n```","```\r\n@Transactional\r\n@Test\r\n@Sql(scripts = { \"/test-fruit-data.sql\" })\r\npublic void givenFruits_WhenDeletedByName_ThenDeletedFruitCountShouldReturn() {\r\n\r\n    Long deletedFruitCount = fruitRepository.deleteByName(\"apple\");\r\n\r\n    assertEquals(\"deleted fruit count is not matching\", 1, deletedFruitCount.intValue());\r\n}\r\n```","```\r\nLong removeByName(String name);\r\nList<Fruit> removeByColor(String color);\r\n```","```\r\n@Repository\r\npublic interface FruitRepository extends JpaRepository<Fruit, Long> {\r\n\r\n    Long deleteByName(String name);\r\n\r\n    List<Fruit> deleteByColor(String color);\r\n\r\n    Long removeByName(String name);\r\n\r\n    List<Fruit> removeByColor(String color);\r\n}\r\n```","```\r\n@Transactional\r\n@Test\r\n@Sql(scripts = { \"/test-fruit-data.sql\" })\r\npublic void givenFruits_WhenRemovedByColor_ThenDeletedFruitsShouldReturn() {\r\n    List<Fruit> fruits = fruitRepository.removeByColor(\"green\");\r\n\r\n    assertEquals(\"number of fruits are not matching\", 2, fruits.size());\r\n}\r\n```","```\r\n@Transactional\r\n@Test\r\n@Sql(scripts = { \"/test-fruit-data.sql\" })\r\npublic void givenFruits_WhenRemovedByName_ThenDeletedFruitCountShouldReturn() {\r\n    Long deletedFruitCount = fruitRepository.removeByName(\"apple\");\r\n\r\n    assertEquals(\"deleted fruit count is not matching\", 1, deletedFruitCount.intValue());\r\n}\r\n```","```\r\n@Modifying\r\n@Query(\"delete from Fruit f where f.name=:name or f.color=:color\")\r\nList<int> deleteFruits(@Param(\"name\") String name, @Param(\"color\") String color);\r\n```"]