["```\r\n<dependency> \r\n    <groupId>org.modelmapper</groupId>\r\n    <artifactId>modelmapper</artifactId>\r\n    <version>2.3.7</version>\r\n</dependency>\r\n```","```\r\nmodelMapper.getConfiguration()\r\n  .setFieldMatchingEnabled(true)\r\n  .setFieldAccessLevel(Configuration.AccessLevel.PRIVATE); \r\n```","```\r\nList<Integer> integers = new ArrayList<Integer>();\r\nintegers.add(1);\r\nintegers.add(2);\r\nintegers.add(3);\r\n\r\nList<Character> characters = new ArrayList<Character>();\r\nmodelMapper.map(integers, characters);\r\n```","```\r\nList<Character> characters \r\n    = modelMapper.map(integers, new TypeToken<List<Character>>() {}.getType());\r\n```","```\r\nList<UserDTO> dtos = users\r\n  .stream()\r\n  .map(user -> modelMapper.map(user, UserDTO.class))\r\n  .collect(Collectors.toList());\r\n```","```\r\n<S, T> List<T> mapList(List<S> source, Class<T> targetClass) {\r\n    return source\r\n      .stream()\r\n      .map(element -> modelMapper.map(element, targetClass))\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\nList<UserDTO> userDtoList = mapList(users, UserDTO.class);\r\n```","```\r\nTypeMap<UserList, UserListDTO> typeMap = modelMapper.createTypeMap(UserList.class, UserListDTO.class);\r\n```","```\r\npublic class UsersListConverter extends AbstractConverter<List<User>, List<String>> {\r\n\r\n    @Override\r\n    protected List<String> convert(List<User> users) {\r\n\r\n        return users\r\n          .stream()\r\n          .map(User::getUsername)\r\n          .collect(Collectors.toList());\r\n    }\r\n}\r\n```","```\r\n typeMap.addMappings(mapper -> mapper.using(new UsersListConverter())\r\n   .map(UserList::getUsers, UserListDTO::setUsernames));\r\n```"]