["```\r\npublic class Animal {\r\n\r\n    static Logger logger = LoggerFactory.getLogger(Animal.class);\r\n\r\n    public void makeNoise() {\r\n        logger.info(\"generic animal noise\");\r\n    }\r\n\r\n    public void makeNoise(Integer repetitions) {\r\n        while(repetitions != 0) {\r\n            logger.info(\"generic animal noise countdown \" + repetitions);\r\n            repetitions -= 1;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class Dog extends Animal {\r\n\r\n    static Logger logger = LoggerFactory.getLogger(Dog.class);\r\n\r\n    @Override\r\n    public void makeNoise() {\r\n        logger.info(\"woof woof!\");\r\n    }\r\n\r\n}\r\n```","```\r\nAnimal animal = new Animal();\r\n\r\n// calling methods of animal object\r\nanimal.makeNoise();\r\nanimal.makeNoise(3);\r\n\r\n// assigning a dog object to reference of type Animal\r\nAnimal dogAnimal = new Dog();\r\n\r\ndogAnimal.makeNoise();\r\n\r\nThe output of the above code will be:\r\n```","```\r\ncom.baeldung.binding.Animal - generic animal noise \r\ncom.baeldung.binding.Animal - generic animal noise countdown 3\r\ncom.baeldung.binding.Animal - generic animal noise countdown 2\r\ncom.baeldung.binding.Animal - generic animal noise countdown 1\r\ncom.baeldung.binding.Dog - woof woof!\r\n```","```\r\nclass AnimalActivity {\r\n\r\n    public static void eat(Animal animal) {\r\n        System.out.println(\"Animal is eating\");\r\n    }\r\n\r\n    public static void eat(Dog dog) {\r\n        System.out.println(\"Dog is eating\");\r\n    }\r\n}\r\n```","```\r\nAnimalActivity.eat(dogAnimal);\r\n```","```\r\ncom.baeldung.binding.AnimalActivity - Animal is eating\r\n```"]