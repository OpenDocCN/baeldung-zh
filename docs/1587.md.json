["```\r\nCollections.sort(numbers, new Comparator<Integer>() {\r\n    @Override\r\n    public int compare(Integer n1, Integer n2) {\r\n        return n1.compareTo(n2);\r\n    }\r\n});\r\n```","```\r\nCollections.sort(numbers, (n1, n2) -> n1.compareTo(n2));\r\n```","```\r\nInteger sum(List<Integer> numbers) {\r\n    return numbers.stream().collect(Collectors.summingInt(Integer::intValue));\r\n}\r\n```","```\r\npublic class ImmutableData {\r\n    private final String someData;\r\n    private final AnotherImmutableData anotherImmutableData;\r\n    public ImmutableData(final String someData, final AnotherImmutableData anotherImmutableData) {\r\n        this.someData = someData;\r\n        this.anotherImmutableData = anotherImmutableData;\r\n    }\r\n    public String getSomeData() {\r\n        return someData;\r\n    }\r\n    public AnotherImmutableData getAnotherImmutableData() {\r\n        return anotherImmutableData;\r\n    }\r\n}\r\n\r\npublic class AnotherImmutableData {\r\n    private final Integer someOtherData;\r\n    public AnotherImmutableData(final Integer someData) {\r\n        this.someOtherData = someData;\r\n    }\r\n    public Integer getSomeOtherData() {\r\n        return someOtherData;\r\n    }\r\n}\r\n```","```\r\npublic class SimpleData {\r\n    private Logger logger = Logger.getGlobal();\r\n    private String data;\r\n    public String getData() {\r\n        logger.log(Level.INFO, \"Get data called for SimpleData\");\r\n        return data;\r\n    }\r\n    public SimpleData setData(String data) {\r\n        logger.log(Level.INFO, \"Set data called for SimpleData\");\r\n        this.data = data;\r\n        return this;\r\n    }\r\n}\r\n```","```\r\nString data = new SimpleData().setData(\"Baeldung\").getData();\r\nlogger.log(Level.INFO, new SimpleData().setData(\"Baeldung\").getData());\r\nlogger.log(Level.INFO, data);\r\nlogger.log(Level.INFO, \"Baeldung\");\r\n```","```\r\nFunction<Double, Double> log = (value) -> Math.log(value);\r\nFunction<Double, Double> sqrt = (value) -> Math.sqrt(value);\r\nFunction<Double, Double> logThenSqrt = sqrt.compose(log);\r\nlogger.log(Level.INFO, String.valueOf(logThenSqrt.apply(3.14)));\r\n// Output: 1.06\r\nFunction<Double, Double> sqrtThenLog = sqrt.andThen(log);\r\nlogger.log(Level.INFO, String.valueOf(sqrtThenLog.apply(3.14)));\r\n// Output: 0.57\r\n```","```\r\nOptional.of(2).flatMap(f -> Optional.of(3).flatMap(s -> Optional.of(f + s)))\r\n```","```\r\nFunction<Double, Function<Double, Double>> weight = mass -> gravity -> mass * gravity;\r\n\r\nFunction<Double, Double> weightOnEarth = weight.apply(9.81);\r\nlogger.log(Level.INFO, \"My weight on Earth: \" + weightOnEarth.apply(60.0));\r\n\r\nFunction<Double, Double> weightOnMars = weight.apply(3.75);\r\nlogger.log(Level.INFO, \"My weight on Mars: \" + weightOnMars.apply(60.0));\r\n```","```\r\nprivate static Function<Double, Double> weightOnEarth() {\t\r\n    final double gravity = 9.81;\t\r\n    return mass -> mass * gravity;\r\n}\r\n```","```\r\nInteger factorial(Integer number) {\r\n    return (number == 1) ? 1 : number * factorial(number - 1);\r\n}\r\n```","```\r\nInteger factorial(Integer number, Integer result) {\r\n    return (number == 1) ? result : factorial(number - 1, result * number);\r\n}\r\n```"]