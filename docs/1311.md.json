["```\r\n<dependency>\r\n    <groupId>cglib</groupId>\r\n    <artifactId>cglib</artifactId>\r\n    <version>3.2.4</version>\r\n</dependency>\r\n```","```\r\npublic class PersonService {\r\n    public String sayHello(String name) {\r\n        return \"Hello \" + name;\r\n    }\r\n\r\n    public Integer lengthOfName(String name) {\r\n        return name.length();\r\n    }\r\n}\r\n```","```\r\nEnhancer enhancer = new Enhancer();\r\nenhancer.setSuperclass(PersonService.class);\r\nenhancer.setCallback((FixedValue) () -> \"Hello Tom!\");\r\nPersonService proxy = (PersonService) enhancer.create();\r\n\r\nString res = proxy.sayHello(null);\r\n\r\nassertEquals(\"Hello Tom!\", res);\r\n```","```\r\nEnhancer enhancer = new Enhancer();\r\nenhancer.setSuperclass(PersonService.class);\r\nenhancer.setCallback((MethodInterceptor) (obj, method, args, proxy) -> {\r\n    if (method.getDeclaringClass() != Object.class && method.getReturnType() == String.class) {\r\n        return \"Hello Tom!\";\r\n    } else {\r\n        return proxy.invokeSuper(obj, args);\r\n    }\r\n});\r\n\r\nPersonService proxy = (PersonService) enhancer.create();\r\n\r\nassertEquals(\"Hello Tom!\", proxy.sayHello(null));\r\nint lengthOfName = proxy.lengthOfName(\"Mary\");\r\n\r\nassertEquals(4, lengthOfName);\r\n```","```\r\nBeanGenerator beanGenerator = new BeanGenerator();\r\n\r\nbeanGenerator.addProperty(\"name\", String.class);\r\nObject myBean = beanGenerator.create();\r\nMethod setter = myBean.getClass().getMethod(\"setName\", String.class);\r\nsetter.invoke(myBean, \"some string value set by a cglib\");\r\n\r\nMethod getter = myBean.getClass().getMethod(\"getName\");\r\nassertEquals(\"some string value set by a cglib\", getter.invoke(myBean));\r\n```","```\r\npublic interface Interface1 {\r\n    String first();\r\n}\r\n\r\npublic interface Interface2 {\r\n    String second();\r\n}\r\n\r\npublic class Class1 implements Interface1 {\r\n    @Override\r\n    public String first() {\r\n        return \"first behaviour\";\r\n    }\r\n}\r\n\r\npublic class Class2 implements Interface2 {\r\n    @Override\r\n    public String second() {\r\n        return \"second behaviour\";\r\n    }\r\n} \r\n```","```\r\npublic interface MixinInterface extends Interface1, Interface2 { }\r\n```","```\r\nMixin mixin = Mixin.create(\r\n  new Class[]{ Interface1.class, Interface2.class, MixinInterface.class },\r\n  new Object[]{ new Class1(), new Class2() }\r\n);\r\nMixinInterface mixinDelegate = (MixinInterface) mixin;\r\n\r\nassertEquals(\"first behaviour\", mixinDelegate.first());\r\nassertEquals(\"second behaviour\", mixinDelegate.second());\r\n```"]