["```\r\npublic class Address {\r\n    private int houseNumber;\r\n\r\n    //getters and setters\r\n}\r\n```","```\r\n@Test(expected = NotSerializableException.class)\r\npublic void whenSerializing_ThenThrowsError() throws IOException {\r\n    Address address = new Address();\r\n    address.setHouseNumber(10);\r\n    FileOutputStream fileOutputStream = new FileOutputStream(\"yofile.txt\");\r\n    try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {\r\n        objectOutputStream.writeObject(address);\r\n    }\r\n}\r\n```","```\r\npublic class Person implements Serializable {\r\n    private static final long serialVersionUID = 1L;\r\n    private int age;\r\n    private String name;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nPerson p = new Person();\r\np.setAge(20);\r\np.setName(\"Joe\");\r\nFileOutputStream fileOutputStream = new FileOutputStream(\"yofile.txt\");\r\ntry (ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {\r\n    objectOutputStream.writeObject(p);\r\n}\r\n\r\nFileInputStream fileInputStream = new FileInputStream(\"yofile.txt\");\r\ntry ( ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {\r\n    Person p2 = (Person) objectInputStream.readObject();\r\n    assertEquals(p2.getAge(), p.getAge());\r\n    assertEquals(p2.getName(), p.getName());;\r\n}\r\n```","```\r\nAddress address = new Address();\r\naddress.setHouseNumber(10);\r\nSerializationUtils.serialize((Serializable) address);\r\n```","```\r\nPerson p = new Person();\r\np.setAge(20);\r\np.setName(\"Joe\");\r\nbyte[] serialize = SerializationUtils.serialize(p);\r\nPerson p2 = (Person)SerializationUtils.deserialize(serialize);\r\nassertEquals(p2.getAge(), p.getAge());\r\nassertEquals(p2.getName(), p.getName());\r\n```","```\r\nAddress address = new Address();\r\naddress.setHouseNumber(10);\r\norg.springframework.util.SerializationUtils.serialize((Serializable) address);\r\n```","```\r\nPerson p = new Person();\r\np.setAge(20);\r\np.setName(\"Joe\");\r\nbyte[] serialize = org.springframework.util.SerializationUtils.serialize(p);\r\nPerson p2 = (Person)org.springframework.util.SerializationUtils.deserialize(serialize);\r\nassertEquals(p2.getAge(), p.getAge());\r\nassertEquals(p2.getName(), p.getName());\r\n```","```\r\npublic static  byte[] serialize(T obj) throws IOException {\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    ObjectOutputStream oos = new ObjectOutputStream(baos);\r\n    oos.writeObject(obj);\r\n    oos.close();\r\n    return baos.toByteArray();\r\n}\r\n```","```\r\npublic static  T deserialize(byte[] b, Class cl) throws IOException, ClassNotFoundException {\r\n    ByteArrayInputStream bais = new ByteArrayInputStream(b);\r\n    ObjectInputStream ois = new ObjectInputStream(bais);\r\n    Object o = ois.readObject();\r\n    return cl.cast(o);\r\n}\r\n```","```\r\npublic static boolean isSerializable(Class<?> it) {\r\n    boolean serializable = it.isPrimitive() || it.isInterface() || Serializable.class.isAssignableFrom(it);\r\n    if (!serializable) {\r\n        return false;\r\n    }\r\n    Field[] declaredFields = it.getDeclaredFields();\r\n    for (Field field : declaredFields) {\r\n        if (Modifier.isVolatile(field.getModifiers()) || Modifier.isTransient(field.getModifiers()) || \r\n          Modifier.isStatic(field.getModifiers())) {\r\n            continue;\r\n        }\r\n        Class<?> fieldType = field.getType();\r\n        if (!isSerializable(fieldType)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```","```\r\nassertFalse(MySerializationUtils.isSerializable(Address.class));\r\nassertTrue(MySerializationUtils.isSerializable(Person.class));\r\nassertTrue(MySerializationUtils.isSerializable(Integer.class));\r\n```"]