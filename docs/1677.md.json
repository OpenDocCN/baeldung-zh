["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-ehcache</artifactId>\r\n    <version>5.2.2.Final</version>\r\n</dependency>\r\n```","```\r\nhibernate.cache.use_second_level_cache=true\r\nhibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory \r\n```","```\r\n<properties>\r\n    ...\r\n    <property name=\"hibernate.cache.use_second_level_cache\" value=\"true\"/>\r\n    <property name=\"hibernate.cache.region.factory_class\" \r\n      value=\"org.hibernate.cache.ehcache.EhCacheRegionFactory\"/>\r\n    ...\r\n</properties>\r\n```","```\r\n@Entity\r\n@Cacheable\r\n@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\r\npublic class Foo {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    @Column(name = \"ID\")\r\n    private long id;\r\n\r\n    @Column(name = \"NAME\")\r\n    private String name;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nFoo foo = new Foo();\r\nfooService.create(foo);\r\nfooService.findOne(foo.getId());\r\nint size = CacheManager.ALL_CACHE_MANAGERS.get(0)\r\n  .getCache(\"com.baeldung.hibernate.cache.model.Foo\").getSize();\r\nassertThat(size, greaterThan(0));\r\n```","```\r\n<ehcache>\r\n    <cache name=\"com.baeldung.persistence.model.Foo\" maxElementsInMemory=\"1000\" />\r\n</ehcache>\r\n```","```\r\n@Entity\r\n@Cacheable\r\n@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\r\npublic class Foo {\r\n\r\n    ...\r\n\r\n    @Cacheable\r\n    @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)\r\n    @OneToMany\r\n    private Collection<Bar> bars;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\nentityManager.createQuery(\"update Foo set … where …\").executeUpdate();\r\n```","```\r\nsession.createNativeQuery(\"update FOO set … where …\").executeUpdate();\r\n```","```\r\nQuery nativeQuery = entityManager.createNativeQuery(\"update FOO set ... where ...\");\r\nnativeQuery.unwrap(org.hibernate.SQLQuery.class).addSynchronizedEntityClass(Foo.class);\r\nnativeQuery.executeUpdate();\r\n```","```\r\nhibernate.cache.use_query_cache=true\r\n```","```\r\nentityManager.createQuery(\"select f from Foo f\")\r\n  .setHint(\"org.hibernate.cacheable\", true)\r\n  .getResultList();\r\n```"]