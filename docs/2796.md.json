["```\r\nExecutorService execService = Executors.newSingleThreadExecutor();\r\nListeningExecutorService lExecService = MoreExecutors.listeningDecorator(execService);\r\n\r\nListenableFuture<Integer> asyncTask = lExecService.submit(() -> {\r\n    TimeUnit.MILLISECONDS.sleep(500); // long running task\r\n    return 5;\r\n});\r\n```","```\r\n// old api\r\npublic FutureTask<String> fetchConfigTask(String configKey) {\r\n    return new FutureTask<>(() -> {\r\n        TimeUnit.MILLISECONDS.sleep(500);\r\n        return String.format(\"%s.%d\", configKey, new Random().nextInt(Integer.MAX_VALUE));\r\n    });\r\n}\r\n\r\n// new api\r\npublic ListenableFutureTask<String> fetchConfigListenableTask(String configKey) {\r\n    return ListenableFutureTask.create(() -> {\r\n        TimeUnit.MILLISECONDS.sleep(500);\r\n        return String.format(\"%s.%d\", configKey, new Random().nextInt(Integer.MAX_VALUE));\r\n    });\r\n}\r\n```","```\r\nExecutor listeningExecutor = Executors.newSingleThreadExecutor();\r\n\r\nListenableFuture<Integer> asyncTask = new ListenableFutureService().succeedingTask()\r\nFutures.addCallback(asyncTask, new FutureCallback<Integer>() {\r\n    @Override\r\n    public void onSuccess(Integer result) {\r\n        // do on success\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        // do on failure\r\n    }\r\n}, listeningExecutor);\r\n```","```\r\nExecutor listeningExecutor = Executors.newSingleThreadExecutor();\r\n\r\nint nextTask = 1;\r\nSet<Integer> runningTasks = ConcurrentHashMap.newKeySet();\r\nrunningTasks.add(nextTask);\r\n\r\nListenableFuture<Integer> asyncTask = new ListenableFutureService().succeedingTask()\r\nasyncTask.addListener(() -> runningTasks.remove(nextTask), listeningExecutor);\r\n```","```\r\nListenableFuture<String> task1 = service.fetchConfig(\"config.0\");\r\nListenableFuture<String> task2 = service.fetchConfig(\"config.1\");\r\nListenableFuture<String> task3 = service.fetchConfig(\"config.2\");\r\n```","```\r\nListenableFuture<List<String>> configsTask = Futures.allAsList(task1, task2, task3);\r\nFutures.addCallback(configsTask, new FutureCallback<List<String>>() {\r\n    @Override\r\n    public void onSuccess(@Nullable List<String> configResults) {\r\n        // do on all futures success\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        // handle on at least one failure\r\n    }\r\n}, someExecutor);\r\n```","```\r\nListenableFuture<List<String>> configsTask = Futures.successfulAsList(task1, task2, task3);\r\nFutures.addCallback(configsTask, new FutureCallback<List<String>>() {\r\n    @Override\r\n    public void onSuccess(@Nullable List<String> configResults) {\r\n        // handle results. If task2 failed, then configResults.get(1) == null\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        // handle failure\r\n    }\r\n}, listeningExecutor);\r\n```","```\r\nListenableFuture<Integer> cartIdTask = service.getCartId();\r\nListenableFuture<String> customerNameTask = service.getCustomerName();\r\nListenableFuture<List<String>> cartItemsTask = service.getCartItems();\r\n\r\nListenableFuture<CartInfo> cartInfoTask = Futures.whenAllSucceed(cartIdTask, customerNameTask, cartItemsTask)\r\n    .call(() -> {\r\n        int cartId = Futures.getDone(cartIdTask);\r\n        String customerName = Futures.getDone(customerNameTask);\r\n        List<String> cartItems = Futures.getDone(cartItemsTask);\r\n        return new CartInfo(cartId, customerName, cartItems);\r\n    }, someExecutor);\r\n\r\nFutures.addCallback(cartInfoTask, new FutureCallback<CartInfo>() {\r\n    @Override\r\n    public void onSuccess(@Nullable CartInfo result) {\r\n        //handle on all success and combination success\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        //handle on either task fail or combination failed\r\n    }\r\n}, listeningExecService);\r\n```","```\r\nListenableFuture<List<String>> cartItemsTask = service.getCartItems();\r\n\r\nFunction<List<String>, Integer> itemCountFunc = cartItems -> {\r\n    assertNotNull(cartItems);\r\n    return cartItems.size();\r\n};\r\n\r\nListenableFuture<Integer> itemCountTask = Futures.transform(cartItemsTask, itemCountFunc, listenExecService);\r\n```","```\r\nAsyncCallable<String> asyncConfigTask = () -> {\r\n    ListenableFuture<String> configTask = service.fetchConfig(\"config.a\");\r\n    TimeUnit.MILLISECONDS.sleep(500); //some long running task\r\n    return configTask;\r\n};\r\n\r\nListenableFuture<String> configTask = Futures.submitAsync(asyncConfigTask, executor);\r\n```","```\r\nListenableFuture<String> usernameTask = service.generateUsername(\"john\");\r\nAsyncFunction<String, String> passwordFunc = username -> {\r\n    ListenableFuture<String> generatePasswordTask = service.generatePassword(username);\r\n    TimeUnit.MILLISECONDS.sleep(500); // some long running task\r\n    return generatePasswordTask;\r\n};\r\n\r\nListenableFuture<String> passwordTask = Futures.transformAsync(usernameTask, passwordFunc, executor);\r\n```","```\r\npublic ListenableFuture<String> fetchConfig(String configKey) {\r\n    return lExecService.submit(() -> {\r\n        TimeUnit.MILLISECONDS.sleep(500);\r\n        return String.format(\"%s.%d\", configKey, new Random().nextInt(Integer.MAX_VALUE));\r\n    });\r\n}\r\n```","```\r\nListenableFuture<String> configsTask = service.fetchConfig(\"config.0\");\r\nFutures.addCallback(configsTask, someListener, listeningExecutor);\r\n```","```\r\npublic ListenableFuture<String> generatePassword(String username) {\r\n    return lExecService.submit(() -> {\r\n        TimeUnit.MILLISECONDS.sleep(500);\r\n        return username + \"123\";\r\n    });\r\n}\r\n\r\nString firstName = \"john\";\r\nListenableFuture<ListenableFuture<String>> badTask = lExecService.submit(() -> {\r\n    final String username = firstName.replaceAll(\"[^a-zA-Z]+\", \"\")\r\n        .concat(\"@service.com\");\r\n    return generatePassword(username);\r\n});\r\n```"]