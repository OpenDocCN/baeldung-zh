["```\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-core-api</artifactId>\r\n    <scope>compile</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-core-impl</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-integration-hibernate-5.4</artifactId>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\n@Entity\r\npublic class Person {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    private int age;\r\n\r\n    @OneToMany(mappedBy = \"author\")\r\n    private Set<Post> posts = new HashSet<>();\r\n}\r\n```","```\r\n@Entity\r\npublic class Post {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    private String title;\r\n\r\n    private String content;\r\n\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    private Person author;\r\n}\r\n```","```\r\n@Autowired\r\nprivate EntityManagerFactory entityManagerFactory;\r\n\r\n@Bean\r\npublic CriteriaBuilderFactory createCriteriaBuilderFactory() {\r\n    CriteriaBuilderConfiguration config = Criteria.getDefault();\r\n    return config.createCriteriaBuilderFactory(entityManagerFactory);\r\n}\r\n```","```\r\nList<Post> posts = builderFactory.create(entityManager, Post.class).getResultList();\r\n```","```\r\nSELECT post\r\nFROM Post post;\r\n```","```\r\nCriteriaBuilder<Person> personCriteriaBuilder = builderFactory.create(entityManager, Person.class, \"p\")\r\n  .where(\"p.age\")\r\n    .betweenExpression(\"18\")\r\n    .andExpression(\"40\")\r\n  .where(\"SIZE(p.posts)\").geExpression(\"2\")\r\n  .orderByAsc(\"p.name\")\r\n  .orderByAsc(\"p.id\");\r\n```","```\r\nCriteriaBuilder<Post> postCriteriaBuilder = builderFactory.create(entityManager, Post.class, \"p\")\r\n  .whereOr()\r\n    .where(\"p.title\").like().value(title + \"%\").noEscape()\r\n    .where(\"p.author.name\").eq(authorName)\r\n  .endOr();\r\n```","```\r\nCriteriaBuilder<Post> postCriteriaBuilder = builderFactory.create(entityManager, Post.class)\r\n  .from(Person.class, \"person\")\r\n  .select(\"person.posts\");\r\n```","```\r\nSELECT posts_1 \r\nFROM Person person \r\nLEFT JOIN person.posts posts_1;\r\n```","```\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-entity-view-api</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-entity-view-impl</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-entity-view-processor</artifactId>\r\n</dependency>\r\n```","```\r\n@Bean\r\npublic EntityViewManager createEntityViewManager(\r\n  CriteriaBuilderFactory criteriaBuilderFactory, EntityViewConfiguration entityViewConfiguration) {\r\n    return entityViewConfiguration.createEntityViewManager(criteriaBuilderFactory);\r\n}\r\n```","```\r\n@EntityView(Post.class)\r\npublic interface PostView {\r\n\r\n    @IdMapping\r\n    Long getId();\r\n\r\n    String getTitle();\r\n\r\n    String getContent();\r\n}\r\n```","```\r\n@Mapping(\"UPPER(title)\")\r\nString getTitle();\r\n```","```\r\n@EntityView(Person.class)\r\npublic interface PersonView {\r\n\r\n    @IdMapping\r\n    Long getId();\r\n\r\n    int getAge();\r\n\r\n    String getName();\r\n}\r\n```","```\r\n@EntityView(Post.class)\r\npublic interface PostWithAuthorView extends PostView {\r\n    PersonView getAuthor();\r\n}\r\n```","```\r\nCriteriaBuilder<Post> postCriteriaBuilder = builderFactory.create(entityManager, Post.class, \"p\")\r\n  .whereOr()\r\n    .where(\"p.title\").like().value(\"title%\").noEscape()\r\n    .where(\"p.author.name\").eq(authorName)\r\n  .endOr();\r\n\r\nCriteriaBuilder<PostWithAuthorView> postWithAuthorViewCriteriaBuilder =\r\n  viewManager.applySetting(EntityViewSetting.create(PostWithAuthorView.class), postCriteriaBuilder);\r\n```","```\r\nSELECT p.id AS PostWithAuthorView_id,\r\n  p.author.id AS PostWithAuthorView_author_id,\r\n  author_1.age AS PostWithAuthorView_author_age,\r\n  author_1.name AS PostWithAuthorView_author_name,\r\n  p.content AS PostWithAuthorView_content,\r\n  UPPER(p.title) AS PostWithAuthorView_title\r\nFROM com.baeldung.model.Post p\r\nLEFT JOIN p.author author_1\r\nWHERE p.title LIKE REPLACE(:param_0, '\\\\', '\\\\\\\\')\r\n  OR author_1.name = :param_1\r\n```","```\r\n<dependency>\r\n    <groupId>com.blazebit</groupId>\r\n    <artifactId>blaze-persistence-integration-spring-data-2.4</artifactId>\r\n</dependency>\r\n```","```\r\n@Repository\r\n@Transactional(readOnly = true)\r\npublic interface PostViewRepository extends EntityViewRepository<PostWithAuthorView, Long> {\r\n}\r\n```"]