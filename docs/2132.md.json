["```\r\n@Value(\"${successful.call.divisor}\")\r\nprivate int divisor;\r\nprivate int nrOfCalls = 0;\r\n\r\n@GetMapping(\"/weather\")\r\npublic ResponseEntity<String> weather() {\r\n    LOGGER.info(\"Providing today's weather information\");\r\n    if (isServiceUnavailable()) {\r\n        return new ResponseEntity<>(HttpStatus.SERVICE_UNAVAILABLE);\r\n    }\r\n    LOGGER.info(\"Today's a sunny day\");\r\n    return new ResponseEntity<>(\"Today's a sunny day\", HttpStatus.OK);\r\n}\r\n\r\nprivate boolean isServiceUnavailable() {\r\n    return ++nrOfCalls % divisor != 0;\r\n}\r\n```","```\r\n@Configuration\r\n@RibbonClient(name = \"weather-service\", configuration = RibbonConfiguration.class)\r\npublic class WeatherClientRibbonConfiguration {\r\n\r\n    @LoadBalanced\r\n    @Bean\r\n    RestTemplate getRestTemplate() {\r\n        return new RestTemplate();\r\n    }\r\n\r\n}\r\n```","```\r\npublic class RibbonConfiguration {\r\n\r\n    @Bean\r\n    public IPing ribbonPing() {\r\n        return new PingUrl();\r\n    }\r\n\r\n    @Bean\r\n    public IRule ribbonRule() {\r\n        return new RoundRobinRule();\r\n    }\r\n}\r\n```","```\r\nweather-service:\r\n    ribbon:\r\n        eureka:\r\n            enabled: false\r\n        listOfServers: http://localhost:8021, http://localhost:8022\r\n```","```\r\n@RestController\r\npublic class MyRestController {\r\n\r\n    @Autowired\r\n    private RestTemplate restTemplate;\r\n\r\n    @RequestMapping(\"/client/weather\")\r\n    public String weather() {\r\n        String result = this.restTemplate.getForObject(\"http://weather-service/weather\", String.class);\r\n        return \"Weather Service Response: \" + result;\r\n    }\r\n}\r\n```","```\r\nweather-service:\r\n  ribbon:\r\n    MaxAutoRetries: 3\r\n    MaxAutoRetriesNextServer: 1\r\n    retryableStatusCodes: 503, 408\r\n    OkToRetryOnAllOperations: true\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.retry</groupId>\r\n    <artifactId>spring-retry</artifactId>\r\n</dependency>\r\n```","```\r\nsuccessful.call.divisor = 5 // instance 1\r\nsuccessful.call.divisor = 2 // instance 2\r\n```","```\r\nhttp://localhost:8080/client/weather\r\n```","```\r\nweather service instance 1:\r\n    Providing today's weather information\r\n    Providing today's weather information\r\n    Providing today's weather information\r\n    Providing today's weather information\r\n\r\nweather service instance 2:\r\n    Providing today's weather information\r\n    Today's a sunny day\r\n```","```\r\n@Component\r\nprivate class CustomRibbonLoadBalancedRetryFactory \r\n  extends RibbonLoadBalancedRetryFactory {\r\n\r\n    public CustomRibbonLoadBalancedRetryFactory(\r\n      SpringClientFactory clientFactory) {\r\n        super(clientFactory);\r\n    }\r\n\r\n    @Override\r\n    public BackOffPolicy createBackOffPolicy(String service) {\r\n        FixedBackOffPolicy fixedBackOffPolicy = new FixedBackOffPolicy();\r\n        fixedBackOffPolicy.setBackOffPeriod(2000);\r\n        return fixedBackOffPolicy;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic BackOffPolicy createBackOffPolicy(String service) {\r\n    ExponentialBackOffPolicy exponentialBackOffPolicy = \r\n      new ExponentialBackOffPolicy();\r\n    exponentialBackOffPolicy.setInitialInterval(1000);\r\n    exponentialBackOffPolicy.setMultiplier(2); \r\n    exponentialBackOffPolicy.setMaxInterval(10000);\r\n    return exponentialBackOffPolicy;\r\n}\r\n```"]