["```\r\napiVersion: v1\r\nkind: Pod\r\nmetadata:\r\n  name: goproxy\r\n  labels:\r\n    app: goproxy\r\nspec:\r\n  containers:\r\n  - name: goproxy\r\n    image: k8s.gcr.io/goproxy:0.1\r\n    ports:\r\n    - containerPort: 8080\r\n    readinessProbe:\r\n      tcpSocket:\r\n        port: 8080\r\n      initialDelaySeconds: 5\r\n      periodSeconds: 10\r\n      timeoutSeconds: 2\r\n      failureThreshold: 1\r\n      successThreshold: 1\r\n    livenessProbe:\r\n      tcpSocket:\r\n        port: 8080\r\n      initialDelaySeconds: 15\r\n      periodSeconds: 20\r\n      timeoutSeconds: 2\r\n      failureThreshold: 1\r\n      successThreshold: 1\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-actuator</artifactId>\r\n</dependency>\r\n```","```\r\n@Component\r\npublic class CustomHealthIndicator implements HealthIndicator {\r\n\r\n    private boolean isHealthy = true;\r\n\r\n    public CustomHealthIndicator() {\r\n        ScheduledExecutorService scheduled =\r\n          Executors.newSingleThreadScheduledExecutor();\r\n        scheduled.schedule(() -> {\r\n            isHealthy = false;\r\n        }, 30, TimeUnit.SECONDS);\r\n    }\r\n\r\n    @Override\r\n    public Health health() {\r\n        return isHealthy ? Health.up().build() : Health.down().build();\r\n    }\r\n}\r\n```","```\r\nFROM openjdk:8-jdk-alpine\r\nRUN mkdir -p /usr/opt/service\r\nCOPY target/*.jar /usr/opt/service/service.jar\r\nEXPOSE 8080\r\nENTRYPOINT exec java -jar /usr/opt/service/service.jar\r\n```","```\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: liveness-example\r\nspec:\r\n  ...\r\n    spec:\r\n      containers:\r\n      - name: liveness-example\r\n        image: dbdock/liveness-example:1.0.0\r\n        ...\r\n        readinessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8080\r\n          initialDelaySeconds: 10\r\n          timeoutSeconds: 2\r\n          periodSeconds: 3\r\n          failureThreshold: 1\r\n        livenessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8080\r\n          initialDelaySeconds: 20\r\n          timeoutSeconds: 2\r\n          periodSeconds: 8\r\n          failureThreshold: 1\r\n```","```\r\nWarning  Unhealthy 3s (x2 over 7s)   kubelet, minikube  Readiness probe failed: HTTP probe failed ...\r\nWarning  Unhealthy 1s                kubelet, minikube  Liveness probe failed: HTTP probe failed ...\r\nNormal   Killing   0s                kubelet, minikube  Killing container with id ...\r\n```","```\r\n@Component\r\npublic class CustomHealthIndicator implements HealthIndicator {\r\n\r\n    private boolean isHealthy = false;\r\n\r\n    public CustomHealthIndicator() {\r\n        ScheduledExecutorService scheduled =\r\n          Executors.newSingleThreadScheduledExecutor();\r\n        scheduled.schedule(() -> {\r\n            isHealthy = true;\r\n        }, 40, TimeUnit.SECONDS);\r\n    }\r\n\r\n    @Override\r\n    public Health health() {\r\n        return isHealthy ? Health.up().build() : Health.down().build();\r\n    }\r\n}\r\n```","```\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata:\r\n  name: readiness-example\r\nspec:\r\n  ...\r\n    spec:\r\n      containers:\r\n      - name: readiness-example\r\n        image: dbdock/readiness-example:1.0.0\r\n        ...\r\n        readinessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8080\r\n          initialDelaySeconds: 40\r\n          timeoutSeconds: 2\r\n          periodSeconds: 3\r\n          failureThreshold: 2\r\n        livenessProbe:\r\n          httpGet:\r\n            path: /health\r\n            port: 8080\r\n          initialDelaySeconds: 100\r\n          timeoutSeconds: 2\r\n          periodSeconds: 8\r\n          failureThreshold: 1\r\n```"]