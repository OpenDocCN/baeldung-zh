["```\r\npublic int calculate(int a, int b, String operator) {\r\n    int result = Integer.MIN_VALUE;\r\n\r\n    if (\"add\".equals(operator)) {\r\n        result = a + b;\r\n    } else if (\"multiply\".equals(operator)) {\r\n        result = a * b;\r\n    } else if (\"divide\".equals(operator)) {\r\n        result = a / b;\r\n    } else if (\"subtract\".equals(operator)) {\r\n        result = a - b;\r\n    }\r\n    return result;\r\n}\r\n```","```\r\npublic int calculateUsingSwitch(int a, int b, String operator) {\r\n    switch (operator) {\r\n    case \"add\":\r\n        result = a + b;\r\n        break;\r\n    // other cases    \r\n    }\r\n    return result;\r\n}\r\n```","```\r\npublic interface Operation {\r\n    int apply(int a, int b);\r\n}\r\n```","```\r\npublic class Addition implements Operation {\r\n    @Override\r\n    public int apply(int a, int b) {\r\n        return a + b;\r\n    }\r\n}\r\n```","```\r\npublic class OperatorFactory {\r\n    static Map<String, Operation> operationMap = new HashMap<>();\r\n    static {\r\n        operationMap.put(\"add\", new Addition());\r\n        operationMap.put(\"divide\", new Division());\r\n        // more operators\r\n    }\r\n\r\n    public static Optional<Operation> getOperation(String operator) {\r\n        return Optional.ofNullable(operationMap.get(operator));\r\n    }\r\n}\r\n```","```\r\npublic int calculateUsingFactory(int a, int b, String operator) {\r\n    Operation targetOperation = OperatorFactory\r\n      .getOperation(operator)\r\n      .orElseThrow(() -> new IllegalArgumentException(\"Invalid Operator\"));\r\n    return targetOperation.apply(a, b);\r\n}\r\n```","```\r\npublic enum Operator {\r\n    ADD, MULTIPLY, SUBTRACT, DIVIDE\r\n}\r\n```","```\r\nADD {\r\n    @Override\r\n    public int apply(int a, int b) {\r\n        return a + b;\r\n    }\r\n},\r\n// other operators\r\n\r\npublic abstract int apply(int a, int b);\r\n```","```\r\npublic int calculate(int a, int b, Operator operator) {\r\n    return operator.apply(a, b);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculateUsingEnumOperator_thenReturnCorrectResult() {\r\n    Calculator calculator = new Calculator();\r\n    int result = calculator.calculate(3, 4, Operator.valueOf(\"ADD\"));\r\n    assertEquals(7, result);\r\n}\r\n```","```\r\npublic interface Command {\r\n    Integer execute();\r\n}\r\n```","```\r\npublic class AddCommand implements Command {\r\n    // Instance variables\r\n\r\n    public AddCommand(int a, int b) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n\r\n    @Override\r\n    public Integer execute() {\r\n        return a + b;\r\n    }\r\n}\r\n```","```\r\npublic int calculate(Command command) {\r\n    return command.execute();\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculateUsingCommand_thenReturnCorrectResult() {\r\n    Calculator calculator = new Calculator();\r\n    int result = calculator.calculate(new AddCommand(3, 7));\r\n    assertEquals(10, result);\r\n}\r\n```","```\r\npublic interface Rule {\r\n    boolean evaluate(Expression expression);\r\n    Result getResult();\r\n}\r\n```","```\r\npublic class RuleEngine {\r\n    private static List<Rule> rules = new ArrayList<>();\r\n\r\n    static {\r\n        rules.add(new AddRule());\r\n    }\r\n\r\n    public Result process(Expression expression) {\r\n        Rule rule = rules\r\n          .stream()\r\n          .filter(r -> r.evaluate(expression))\r\n          .findFirst()\r\n          .orElseThrow(() -> new IllegalArgumentException(\"Expression does not matches any Rule\"));\r\n        return rule.getResult();\r\n    }\r\n}\r\n```","```\r\npublic class Expression {\r\n    private Integer x;\r\n    private Integer y;\r\n    private Operator operator;        \r\n}\r\n```","```\r\npublic class AddRule implements Rule {\r\n    @Override\r\n    public boolean evaluate(Expression expression) {\r\n        boolean evalResult = false;\r\n        if (expression.getOperator() == Operator.ADD) {\r\n            this.result = expression.getX() + expression.getY();\r\n            evalResult = true;\r\n        }\r\n        return evalResult;\r\n    }    \r\n}\r\n```","```\r\n@Test\r\npublic void whenNumbersGivenToRuleEngine_thenReturnCorrectResult() {\r\n    Expression expression = new Expression(5, 5, Operator.ADD);\r\n    RuleEngine engine = new RuleEngine();\r\n    Result result = engine.process(expression);\r\n\r\n    assertNotNull(result);\r\n    assertEquals(10, result.getValue());\r\n}\r\n```"]