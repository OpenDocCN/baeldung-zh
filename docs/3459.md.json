["```\r\nSelector selector = Selector.open();\r\n```","```\r\nchannel.configureBlocking(false);\r\nSelectionKey key = channel.register(selector, SelectionKey.OP_READ);\r\n```","```\r\nint interestSet = selectionKey.interestOps();\r\n\r\nboolean isInterestedInAccept  = interestSet & SelectionKey.OP_ACCEPT;\r\nboolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;\r\nboolean isInterestedInRead    = interestSet & SelectionKey.OP_READ;\r\nboolean isInterestedInWrite   = interestSet & SelectionKey.OP_WRITE;\r\n```","```\r\nselectionKey.isAcceptable();\r\nselectionKey.isConnectable();\r\nselectionKey.isReadable();\r\nselectionKey.isWriteable();\r\n```","```\r\nChannel channel = key.channel();\r\n```","```\r\nSelector selector = key.selector();\r\n```","```\r\nkey.attach(Object);\r\n\r\nObject object = key.attachment();\r\n```","```\r\nSelectionKey key = channel.register(\r\n  selector, SelectionKey.OP_ACCEPT, object);\r\n```","```\r\nint channels = selector.select();\r\n```","```\r\nSet<SelectionKey> selectedKeys = selector.selectedKeys();\r\n```","```\r\npublic class EchoServer {\r\n\r\n    private static final String POISON_PILL = \"POISON_PILL\";\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Selector selector = Selector.open();\r\n        ServerSocketChannel serverSocket = ServerSocketChannel.open();\r\n        serverSocket.bind(new InetSocketAddress(\"localhost\", 5454));\r\n        serverSocket.configureBlocking(false);\r\n        serverSocket.register(selector, SelectionKey.OP_ACCEPT);\r\n        ByteBuffer buffer = ByteBuffer.allocate(256);\r\n\r\n        while (true) {\r\n            selector.select();\r\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\r\n            Iterator<SelectionKey> iter = selectedKeys.iterator();\r\n            while (iter.hasNext()) {\r\n\r\n                SelectionKey key = iter.next();\r\n\r\n                if (key.isAcceptable()) {\r\n                    register(selector, serverSocket);\r\n                }\r\n\r\n                if (key.isReadable()) {\r\n                    answerWithEcho(buffer, key);\r\n                }\r\n                iter.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void answerWithEcho(ByteBuffer buffer, SelectionKey key)\r\n      throws IOException {\r\n\r\n        SocketChannel client = (SocketChannel) key.channel();\r\n        client.read(buffer);\r\n        if (new String(buffer.array()).trim().equals(POISON_PILL)) {\r\n            client.close();\r\n            System.out.println(\"Not accepting client messages anymore\");\r\n        }\r\n        else {\r\n            buffer.flip();\r\n            client.write(buffer);\r\n            buffer.clear();\r\n        }\r\n    }\r\n\r\n    private static void register(Selector selector, ServerSocketChannel serverSocket)\r\n      throws IOException {\r\n\r\n        SocketChannel client = serverSocket.accept();\r\n        client.configureBlocking(false);\r\n        client.register(selector, SelectionKey.OP_READ);\r\n    }\r\n\r\n    public static Process start() throws IOException, InterruptedException {\r\n        String javaHome = System.getProperty(\"java.home\");\r\n        String javaBin = javaHome + File.separator + \"bin\" + File.separator + \"java\";\r\n        String classpath = System.getProperty(\"java.class.path\");\r\n        String className = EchoServer.class.getCanonicalName();\r\n\r\n        ProcessBuilder builder = new ProcessBuilder(javaBin, \"-cp\", classpath, className);\r\n\r\n        return builder.start();\r\n    }\r\n}\r\n```","```\r\npublic class EchoClient {\r\n    private static SocketChannel client;\r\n    private static ByteBuffer buffer;\r\n    private static EchoClient instance;\r\n\r\n    public static EchoClient start() {\r\n        if (instance == null)\r\n            instance = new EchoClient();\r\n\r\n        return instance;\r\n    }\r\n\r\n    public static void stop() throws IOException {\r\n        client.close();\r\n        buffer = null;\r\n    }\r\n\r\n    private EchoClient() {\r\n        try {\r\n            client = SocketChannel.open(new InetSocketAddress(\"localhost\", 5454));\r\n            buffer = ByteBuffer.allocate(256);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public String sendMessage(String msg) {\r\n        buffer = ByteBuffer.wrap(msg.getBytes());\r\n        String response = null;\r\n        try {\r\n            client.write(buffer);\r\n            buffer.clear();\r\n            client.read(buffer);\r\n            response = new String(buffer.array()).trim();\r\n            System.out.println(\"response=\" + response);\r\n            buffer.clear();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return response;\r\n\r\n    }\r\n}\r\n```","```\r\npublic class EchoTest {\r\n\r\n    Process server;\r\n    EchoClient client;\r\n\r\n    @Before\r\n    public void setup() throws IOException, InterruptedException {\r\n        server = EchoServer.start();\r\n        client = EchoClient.start();\r\n    }\r\n\r\n    @Test\r\n    public void givenServerClient_whenServerEchosMessage_thenCorrect() {\r\n        String resp1 = client.sendMessage(\"hello\");\r\n        String resp2 = client.sendMessage(\"world\");\r\n        assertEquals(\"hello\", resp1);\r\n        assertEquals(\"world\", resp2);\r\n    }\r\n\r\n    @After\r\n    public void teardown() throws IOException {\r\n        server.destroy();\r\n        EchoClient.stop();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenWakeUpCalledOnSelector_thenBlockedThreadReturns() {\r\n    Pipe pipe = Pipe.open();\r\n    Selector selector = Selector.open();\r\n    SelectableChannel channel = pipe.source();\r\n    channel.configureBlocking(false);\r\n    channel.register(selector, OP_READ);\r\n\r\n    List<String> invocationStepsTracker = Collections.synchronizedList(new ArrayList<>());\r\n\r\n    CountDownLatch latch = new CountDownLatch(1);\r\n\r\n    new Thread(() -> {\r\n        invocationStepsTracker.add(\">> Count down\");\r\n        latch.countDown();\r\n        try {\r\n            invocationStepsTracker.add(\">> Start select\");\r\n            selector.select();\r\n            invocationStepsTracker.add(\">> End select\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }).start();\r\n\r\n    invocationStepsTracker.add(\">> Start await\");\r\n    latch.await();\r\n    invocationStepsTracker.add(\">> End await\");\r\n\r\n    invocationStepsTracker.add(\">> Wakeup thread\");\r\n    selector.wakeup();\r\n    //clean up\r\n    channel.close();\r\n\r\n    assertThat(invocationStepsTracker)\r\n      .containsExactly(\r\n        \">> Start await\",\r\n        \">> Count down\",\r\n        \">> Start select\",\r\n        \">> End await\",\r\n        \">> Wakeup thread\",\r\n        \">> End select\"\r\n    );\r\n}\r\n```"]