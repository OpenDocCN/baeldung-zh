["```\r\nXmlMapper mapper = new XmlMapper();\r\n```","```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.dataformat</groupId>\r\n    <artifactId>jackson-dataformat-xml</artifactId>\r\n    <version>2.11.1</version>\r\n</dependency>\r\n```","```\r\nclass SimpleBean {\r\n    private int x = 1;\r\n    private int y = 2;\r\n\r\n    //standard setters and getters\r\n}\r\n```","```\r\n@Test\r\npublic void whenJavaSerializedToXmlStr_thenCorrect() throws JsonProcessingException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    String xml = xmlMapper.writeValueAsString(new SimpleBean());\r\n    assertNotNull(xml);\r\n}\r\n```","```\r\n<SimpleBean>\r\n    <x>1</x>\r\n    <y>2</y>\r\n</SimpleBean>\r\n```","```\r\n@Test\r\npublic void whenJavaSerializedToXmlFile_thenCorrect() throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    xmlMapper.writeValue(new File(\"simple_bean.xml\"), new SimpleBean());\r\n    File file = new File(\"simple_bean.xml\");\r\n    assertNotNull(file);\r\n}\r\n```","```\r\n<SimpleBean>\r\n    <x>1</x>\r\n    <y>2</y>\r\n</SimpleBean>\r\n```","```\r\n@Test\r\npublic void whenJavaGotFromXmlStr_thenCorrect() throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    SimpleBean value\r\n      = xmlMapper.readValue(\"<SimpleBean><x>1</x><y>2</y></SimpleBean>\", SimpleBean.class);\r\n    assertTrue(value.getX() == 1 && value.getY() == 2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenJavaGotFromXmlFile_thenCorrect() throws IOException {\r\n    File file = new File(\"simple_bean.xml\");\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    SimpleBean value = xmlMapper.readValue(file, SimpleBean.class);\r\n    assertTrue(value.getX() == 1 && value.getY() == 2);\r\n}\r\n```","```\r\n<SimpleBeanForCapitalizedFields>\r\n    <X>1</X>\r\n    <y>2</y>\r\n</SimpleBeanForCapitalizedFields>\r\n```","```\r\nclass SimpleBeanForCapitalizedFields {\r\n    @JsonProperty(\"X\")\r\n    private int x = 1;\r\n    private int y = 2;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\n@Test\r\npublic void whenJavaGotFromXmlStrWithCapitalElem_thenCorrect() throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    SimpleBeanForCapitalizedFields value\r\n      = xmlMapper.readValue(\r\n      \"<SimpleBeanForCapitalizedFields><X>1</X><y>2</y></SimpleBeanForCapitalizedFields>\",\r\n      SimpleBeanForCapitalizedFields.class);\r\n    assertTrue(value.getX() == 1 && value.getY() == 2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenJavaSerializedToXmlFileWithCapitalizedField_thenCorrect()\r\n  throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    xmlMapper.writeValue(new File(\"target/simple_bean_capitalized.xml\"),\r\n      new SimpleBeanForCapitalizedFields());\r\n    File file = new File(\"target/simple_bean_capitalized.xml\");\r\n    assertNotNull(file);\r\n}\r\n```","```\r\n<Person>\r\n    <firstName>Rohan</firstName>\r\n    <lastName>Daye</lastName>\r\n    <phoneNumbers>\r\n        <phoneNumbers>9911034731</phoneNumbers>\r\n        <phoneNumbers>9911033478</phoneNumbers>\r\n    </phoneNumbers>\r\n    <address>\r\n        <streetName>Name1</streetName>\r\n        <city>City1</city>\r\n    </address>\r\n    <address>\r\n        <streetName>Name2</streetName>\r\n        <city>City2</city>\r\n    </address>\r\n</Person>\r\n```","```\r\npublic final class Person {\r\n    private String firstName;\r\n    private String lastName;\r\n    private List<String> phoneNumbers = new ArrayList<>();\r\n    @JacksonXmlElementWrapper(useWrapping = false)\r\n    private List<Address> address = new ArrayList<>();\r\n\r\n    //standard setters and getters\r\n}\r\n```","```\r\npublic class Address {\r\n    String streetName;\r\n    String city;\r\n    //standard setters and getters\r\n}\r\n```","```\r\nprivate static final String XML = \"<Person>...</Person>\";\r\n\r\n@Test\r\npublic void whenJavaSerializedToXmlFile_thenSuccess() throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    Person person = testPerson(); // test data\r\n    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\r\n    xmlMapper.writeValue(byteArrayOutputStream, person); \r\n    assertEquals(XML, byteArrayOutputStream.toString()); \r\n}\r\n```","```\r\n@Test\r\npublic void whenJavaDeserializedFromXmlFile_thenCorrect() throws IOException {\r\n    XmlMapper xmlMapper = new XmlMapper();\r\n    Person value = xmlMapper.readValue(XML, Person.class);\r\n    assertEquals(\"City1\", value.getAddress().get(0).getCity());\r\n    assertEquals(\"City2\", value.getAddress().get(1).getCity());\r\n}\r\n```"]