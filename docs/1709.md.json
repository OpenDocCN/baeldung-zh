["```\r\nio.restassured.RestAssured.*\r\nio.restassured.matcher.RestAssuredMatchers.*\r\norg.hamcrest.Matchers.*\r\n```","```\r\n{\r\n    \"id\": \"390\",\r\n    \"data\": {\r\n        \"leagueId\": 35,\r\n        \"homeTeam\": \"Norway\",\r\n        \"visitingTeam\": \"England\",\r\n    },\r\n    \"odds\": [{\r\n        \"price\": \"1.30\",\r\n        \"name\": \"1\"\r\n    },\r\n    {\r\n        \"price\": \"5.25\",\r\n        \"name\": \"X\"\r\n    }]\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenSuccessOnGetsResponseAndJsonHasRequiredKV_thenCorrect() {\r\n   get(\"/events?id=390\").then().statusCode(200).assertThat()\r\n      .body(\"data.leagueId\", equalTo(35)); \r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenJsonResponseHasArrayWithGivenValuesUnderKey_thenCorrect() {\r\n   get(\"/events?id=390\").then().assertThat()\r\n      .body(\"odds.price\", hasItems(\"1.30\", \"5.25\"));\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>io.rest-assured</groupId>\r\n    <artifactId>rest-assured</artifactId>\r\n    <version>3.3.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>hamcrest-all</artifactId>\r\n    <version>2.1</version>\r\n</dependency>\r\n```","```\r\n[1, 2, 3]\r\n```","```\r\nwhen().get(\"/json\").then().body(\"$\", hasItems(1, 2, 3));\r\n```","```\r\nwhen().get(\"/json\").then().body(\"\", hasItems(1, 2, 3));\r\n```","```\r\n{\r\n    \"odd\": {\r\n        \"price\": \"1.30\",\r\n        \"ck\": 12.2,\r\n        \"name\": \"1\"\r\n    }\r\n}\r\n```","```\r\nget(\"/odd\").then().assertThat().body(\"odd.ck\", equalTo(12.2));\r\n```","```\r\nget(\"/odd\").then().assertThat().body(\"odd.ck\", equalTo(12.2f));\r\n```","```\r\n@Test\r\npublic void whenRequestGet_thenOK(){\r\n    when().request(\"GET\", \"/users/eugenp\").then().statusCode(200);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRequestHead_thenOK() {\r\n    when().request(\"HEAD\", \"/users/eugenp\").then().statusCode(200);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRequestedPost_thenCreated() {\r\n    with().body(new Odd(5.25f, 1, 13.1f, \"X\"))\r\n      .when()\r\n      .request(\"POST\", \"/odds/new\")\r\n      .then()\r\n      .statusCode(201);\r\n}\r\n```","```\r\n@Before\r\npublic void setup() {\r\n    RestAssured.baseURI = \"https://api.github.com\";\r\n    RestAssured.port = 443;\r\n}\r\n```","```\r\nRestAssured.reset();\r\n```","```\r\n@Test\r\npublic void whenMeasureResponseTime_thenOK() {\r\n    Response response = RestAssured.get(\"/users/eugenp\");\r\n    long timeInMS = response.time();\r\n    long timeInS = response.timeIn(TimeUnit.SECONDS);\r\n\r\n    assertEquals(timeInS, timeInMS/1000);\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidateResponseTime_thenSuccess() {\r\n    when().get(\"/users/eugenp\").then().time(lessThan(5000L));\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidateResponseTimeInSeconds_thenSuccess(){\r\n    when().get(\"/users/eugenp\").then().time(lessThan(5L),TimeUnit.SECONDS);\r\n}\r\n```","```\r\n<employees>\r\n    <employee category=\"skilled\">\r\n        <first-name>Jane</first-name>\r\n        <last-name>Daisy</last-name>\r\n        <sex>f</sex>\r\n    </employee>\r\n</employees>\r\n```","```\r\n@Test\r\npublic void givenUrl_whenXmlResponseValueTestsEqual_thenCorrect() {\r\n    post(\"/employees\").then().assertThat()\r\n      .body(\"employees.employee.first-name\", equalTo(\"Jane\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenMultipleXmlValuesTestEqual_thenCorrect() {\r\n    post(\"/employees\").then().assertThat()\r\n      .body(\"employees.employee.first-name\", equalTo(\"Jane\"))\r\n        .body(\"employees.employee.last-name\", equalTo(\"Daisy\"))\r\n          .body(\"employees.employee.sex\", equalTo(\"f\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenMultipleXmlValuesTestEqualInShortHand_thenCorrect() {\r\n    post(\"/employees\")\r\n      .then().assertThat().body(\"employees.employee.first-name\", \r\n        equalTo(\"Jane\"),\"employees.employee.last-name\", \r\n          equalTo(\"Daisy\"), \"employees.employee.sex\", \r\n            equalTo(\"f\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenValidatesXmlUsingXpath_thenCorrect() {\r\n    post(\"/employees\").then().assertThat().\r\n      body(hasXPath(\"/employees/employee/first-name\", containsString(\"Ja\")));\r\n}\r\n```","```\r\n@Test\r\npublic void givenUrl_whenValidatesXmlUsingXpath2_thenCorrect() {\r\n    post(\"/employees\").then().assertThat()\r\n      .body(hasXPath(\"/employees/employee/first-name[text()='Jane']\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenLogRequest_thenOK() {\r\n    given().log().all()\r\n      .when().get(\"/users/eugenp\")\r\n      .then().statusCode(200);\r\n}\r\n```","```\r\nRequest method:\tGET\r\nRequest URI:\thttps://api.github.com:443/users/eugenp\r\nProxy:\t\t\t<none>\r\nRequest params:\t<none>\r\nQuery params:\t<none>\r\nForm params:\t<none>\r\nPath params:\t<none>\r\nMultiparts:\t\t<none>\r\nHeaders:\t\tAccept=*/*\r\nCookies:\t\t<none>\r\nBody:\t\t\t<none>\r\n```","```\r\n@Test\r\npublic void whenLogResponse_thenOK() {\r\n    when().get(\"/repos/eugenp/tutorials\")\r\n      .then().log().body().statusCode(200);\r\n}\r\n```","```\r\n{\r\n    \"id\": 9754983,\r\n    \"name\": \"tutorials\",\r\n    \"full_name\": \"eugenp/tutorials\",\r\n    \"private\": false,\r\n    \"html_url\": \"https://github.com/eugenp/tutorials\",\r\n    \"description\": \"The \\\"REST With Spring\\\" Course: \",\r\n    \"fork\": false,\r\n    \"size\": 72371,\r\n    \"license\": {\r\n        \"key\": \"mit\",\r\n        \"name\": \"MIT License\",\r\n        \"spdx_id\": \"MIT\",\r\n        \"url\": \"https://api.github.com/licenses/mit\"\r\n    },\r\n...\r\n}\r\n```","```\r\n@Test\r\npublic void whenLogResponseIfErrorOccurred_thenSuccess() {\r\n\r\n    when().get(\"/users/eugenp\")\r\n      .then().log().ifError();\r\n    when().get(\"/users/eugenp\")\r\n      .then().log().ifStatusCodeIsEqualTo(500);\r\n    when().get(\"/users/eugenp\")\r\n      .then().log().ifStatusCodeMatches(greaterThan(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenLogOnlyIfValidationFailed_thenSuccess() {\r\n    when().get(\"/users/eugenp\")\r\n      .then().log().ifValidationFails().statusCode(200);\r\n\r\n    given().log().ifValidationFails()\r\n      .when().get(\"/users/eugenp\")\r\n      .then().statusCode(200);\r\n}\r\n```"]