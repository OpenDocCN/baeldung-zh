["```\r\n<dependency>\r\n    <groupId>org.apache.storm</groupId>\r\n    <artifactId>storm-core</artifactId>\r\n    <version>1.2.2</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\nConfig config = new Config();\r\nconfig.registerSerialization(User.class);\r\n```","```\r\nConfig config = new Config();\r\nconfig.registerSerialization(User.class, UserSerializer.class);\r\n```","```\r\npublic class RandomIntSpout extends BaseRichSpout {\r\n\r\n    private Random random;\r\n    private SpoutOutputCollector outputCollector;\r\n\r\n    @Override\r\n    public void open(Map map, TopologyContext topologyContext,\r\n      SpoutOutputCollector spoutOutputCollector) {\r\n        random = new Random();\r\n        outputCollector = spoutOutputCollector;\r\n    }\r\n\r\n    @Override\r\n    public void nextTuple() {\r\n        Utils.sleep(1000);\r\n        outputCollector.emit(new Values(random.nextInt(), System.currentTimeMillis()));\r\n    }\r\n\r\n    @Override\r\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\r\n        outputFieldsDeclarer.declare(new Fields(\"randomInt\", \"timestamp\"));\r\n    }\r\n}\r\n```","```\r\npublic class PrintingBolt extends BaseBasicBolt {\r\n    @Override\r\n    public void execute(Tuple tuple, BasicOutputCollector basicOutputCollector) {\r\n        System.out.println(tuple);\r\n    }\r\n\r\n    @Override\r\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\r\n\r\n    }\r\n}\r\n```","```\r\npublic class RandomNumberSpout extends BaseRichSpout {\r\n    private Random random;\r\n    private SpoutOutputCollector collector;\r\n\r\n    @Override\r\n    public void open(Map map, TopologyContext topologyContext, \r\n      SpoutOutputCollector spoutOutputCollector) {\r\n        random = new Random();\r\n        collector = spoutOutputCollector;\r\n    }\r\n\r\n    @Override\r\n    public void nextTuple() {\r\n        Utils.sleep(1000);\r\n        int operation = random.nextInt(101);\r\n        long timestamp = System.currentTimeMillis();\r\n\r\n        Values values = new Values(operation, timestamp);\r\n        collector.emit(values);\r\n    }\r\n\r\n    @Override\r\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\r\n        outputFieldsDeclarer.declare(new Fields(\"operation\", \"timestamp\"));\r\n    }\r\n}\r\n```","```\r\npublic class FilteringBolt extends BaseBasicBolt {\r\n    @Override\r\n    public void execute(Tuple tuple, BasicOutputCollector basicOutputCollector) {\r\n        int operation = tuple.getIntegerByField(\"operation\");\r\n        if (operation > 0) {\r\n            basicOutputCollector.emit(tuple.getValues());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\r\n        outputFieldsDeclarer.declare(new Fields(\"operation\", \"timestamp\"));\r\n    }\r\n}\r\n```","```\r\npublic class AggregatingBolt extends BaseWindowedBolt {\r\n    private OutputCollector outputCollector;\r\n\r\n    @Override\r\n    public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {\r\n        this.outputCollector = collector;\r\n    }\r\n\r\n    @Override\r\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\r\n        declarer.declare(new Fields(\"sumOfOperations\", \"beginningTimestamp\", \"endTimestamp\"));\r\n    }\r\n\r\n    @Override\r\n    public void execute(TupleWindow tupleWindow) {\r\n        List<Tuple> tuples = tupleWindow.get();\r\n        tuples.sort(Comparator.comparing(this::getTimestamp));\r\n\r\n        int sumOfOperations = tuples.stream()\r\n          .mapToInt(tuple -> tuple.getIntegerByField(\"operation\"))\r\n          .sum();\r\n        Long beginningTimestamp = getTimestamp(tuples.get(0));\r\n        Long endTimestamp = getTimestamp(tuples.get(tuples.size() - 1));\r\n\r\n        Values values = new Values(sumOfOperations, beginningTimestamp, endTimestamp);\r\n        outputCollector.emit(values);\r\n    }\r\n\r\n    private Long getTimestamp(Tuple tuple) {\r\n        return tuple.getLongByField(\"timestamp\");\r\n    }\r\n}\r\n```","```\r\npublic class FileWritingBolt extends BaseRichBolt {\r\n    public static Logger logger = LoggerFactory.getLogger(FileWritingBolt.class);\r\n    private BufferedWriter writer;\r\n    private String filePath;\r\n    private ObjectMapper objectMapper;\r\n\r\n    @Override\r\n    public void cleanup() {\r\n        try {\r\n            writer.close();\r\n        } catch (IOException e) {\r\n            logger.error(\"Failed to close writer!\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void prepare(Map map, TopologyContext topologyContext, \r\n      OutputCollector outputCollector) {\r\n        objectMapper = new ObjectMapper();\r\n        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\r\n\r\n        try {\r\n            writer = new BufferedWriter(new FileWriter(filePath));\r\n        } catch (IOException e) {\r\n            logger.error(\"Failed to open a file for writing.\", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void execute(Tuple tuple) {\r\n        int sumOfOperations = tuple.getIntegerByField(\"sumOfOperations\");\r\n        long beginningTimestamp = tuple.getLongByField(\"beginningTimestamp\");\r\n        long endTimestamp = tuple.getLongByField(\"endTimestamp\");\r\n\r\n        if (sumOfOperations > 2000) {\r\n            AggregatedWindow aggregatedWindow = new AggregatedWindow(\r\n                sumOfOperations, beginningTimestamp, endTimestamp);\r\n            try {\r\n                writer.write(objectMapper.writeValueAsString(aggregatedWindow));\r\n                writer.newLine();\r\n                writer.flush();\r\n            } catch (IOException e) {\r\n                logger.error(\"Failed to write data to file.\", e);\r\n            }\r\n        }\r\n    }\r\n\r\n    // public constructor and other methods\r\n}\r\n```","```\r\npublic static void runTopology() {\r\n    TopologyBuilder builder = new TopologyBuilder();\r\n\r\n    Spout random = new RandomNumberSpout();\r\n    builder.setSpout(\"randomNumberSpout\");\r\n\r\n    Bolt filtering = new FilteringBolt();\r\n    builder.setBolt(\"filteringBolt\", filtering)\r\n      .shuffleGrouping(\"randomNumberSpout\");\r\n\r\n    Bolt aggregating = new AggregatingBolt()\r\n      .withTimestampField(\"timestamp\")\r\n      .withLag(BaseWindowedBolt.Duration.seconds(1))\r\n      .withWindow(BaseWindowedBolt.Duration.seconds(5));\r\n    builder.setBolt(\"aggregatingBolt\", aggregating)\r\n      .shuffleGrouping(\"filteringBolt\");Â \r\n\r\n    String filePath = \"./src/main/resources/data.txt\";\r\n    Bolt file = new FileWritingBolt(filePath);\r\n    builder.setBolt(\"fileBolt\", file)\r\n      .shuffleGrouping(\"aggregatingBolt\");\r\n\r\n    Config config = new Config();\r\n    config.setDebug(false);\r\n    LocalCluster cluster = new LocalCluster();\r\n    cluster.submitTopology(\"Test\", config, builder.createTopology());\r\n}\r\n```"]