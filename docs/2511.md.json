["```\r\npublic class UserForm {\r\n    public String password;\r\n    public String username;\r\n    public String getUsername(){\r\n        return username;\r\n    }\r\n}\r\n```","```\r\npublic class LoginDao {\r\n    public int login(UserForm userForm){\r\n        return 0;\r\n    }\r\n}\r\n```","```\r\npublic class LoginService {\r\n    private LoginDao loginDao;\r\n    private String currentUser;\r\n\r\n    public boolean login(UserForm userForm) {\r\n        assert null != userForm;\r\n        int loginResults = loginDao.login(userForm);\r\n        switch (loginResults){\r\n            case 1:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public void setCurrentUser(String username) {\r\n        if(null != username){\r\n            this.currentUser = username;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class LoginController {\r\n    public LoginService loginService;\r\n\r\n    public String login(UserForm userForm){\r\n        if(null == userForm){\r\n            return \"ERROR\";\r\n        }else{\r\n            boolean logged;\r\n\r\n            try {\r\n                logged = loginService.login(userForm);\r\n            } catch (Exception e) {\r\n                return \"ERROR\";\r\n            }\r\n\r\n            if(logged){\r\n                loginService.setCurrentUser(userForm.getUsername());\r\n                return \"OK\";\r\n            }else{\r\n                return \"KO\";\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class LoginControllerTest {\r\n\r\n    @Mock\r\n    private LoginDao loginDao;\r\n\r\n    @Spy\r\n    @InjectMocks\r\n    private LoginService spiedLoginService;\r\n\r\n    @Mock\r\n    private LoginService loginService;\r\n\r\n    @InjectMocks\r\n    private LoginController loginController;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        loginController = new LoginController();\r\n        MockitoAnnotations.initMocks(this);\r\n    }\r\n}\r\n```","```\r\n@RunWith(EasyMockRunner.class)\r\npublic class LoginControllerTest {\r\n\r\n    @Mock\r\n    private LoginDao loginDao;\r\n\r\n    @Mock\r\n    private LoginService loginService;\r\n\r\n    @TestSubject\r\n    private LoginController loginController = new LoginController();\r\n}\r\n```","```\r\n@RunWith(JMockit.class)\r\npublic class LoginControllerTest {\r\n\r\n    @Injectable\r\n    private LoginDao loginDao;\r\n\r\n    @Injectable\r\n    private LoginService loginService;\r\n\r\n    @Tested\r\n    private LoginController loginController;\r\n}\r\n```","```\r\n@Test\r\npublic void assertThatNoMethodHasBeenCalled() {\r\n    loginController.login(null);\r\n    Mockito.verifyNoInteractions(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void assertThatNoMethodHasBeenCalled() {\r\n    EasyMock.replay(loginService);\r\n    loginController.login(null);\r\n    EasyMock.verify(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void assertThatNoMethodHasBeenCalled() {\r\n    loginController.login(null);\r\n    new FullVerifications(loginService) {};\r\n}\r\n```","```\r\n@Test\r\npublic void assertTwoMethodsHaveBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    Mockito.when(loginService.login(userForm)).thenReturn(true);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    Mockito.verify(loginService).login(userForm);\r\n    Mockito.verify(loginService).setCurrentUser(\"foo\");\r\n}\r\n\r\n@Test\r\npublic void assertOnlyOneMethodHasBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    Mockito.when(loginService.login(userForm)).thenReturn(false);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"KO\", login);\r\n    Mockito.verify(loginService).login(userForm);\r\n    Mockito.verifyNoMoreInteractions(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void assertTwoMethodsHaveBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    EasyMock.expect(loginService.login(userForm)).andReturn(true);\r\n    loginService.setCurrentUser(\"foo\");\r\n    EasyMock.replay(loginService);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    EasyMock.verify(loginService);\r\n}\r\n\r\n@Test\r\npublic void assertOnlyOneMethodHasBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    EasyMock.expect(loginService.login(userForm)).andReturn(false);\r\n    EasyMock.replay(loginService);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"KO\", login);\r\n    EasyMock.verify(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void assertTwoMethodsHaveBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    new Expectations() {{\r\n        loginService.login(userForm); result = true;\r\n        loginService.setCurrentUser(\"foo\");\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    new FullVerifications(loginService) {};\r\n}\r\n\r\n@Test\r\npublic void assertOnlyOneMethodHasBeenCalled() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    new Expectations() {{\r\n        loginService.login(userForm); result = false;\r\n        // no expectation for setCurrentUser\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"KO\", login);\r\n    new FullVerifications(loginService) {};\r\n}\r\n```","```\r\n@Test\r\npublic void mockExceptionThrowing() {\r\n    UserForm userForm = new UserForm();\r\n    Mockito.when(loginService.login(userForm)).thenThrow(IllegalArgumentException.class);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"ERROR\", login);\r\n    Mockito.verify(loginService).login(userForm);\r\n    Mockito.verifyNoInteractions(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void mockExceptionThrowing() {\r\n    UserForm userForm = new UserForm();\r\n    EasyMock.expect(loginService.login(userForm)).andThrow(new IllegalArgumentException());\r\n    EasyMock.replay(loginService);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"ERROR\", login);\r\n    EasyMock.verify(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void mockExceptionThrowing() {\r\n    UserForm userForm = new UserForm();\r\n    new Expectations() {{\r\n        loginService.login(userForm); result = new IllegalArgumentException();\r\n        // no expectation for setCurrentUser\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"ERROR\", login);\r\n    new FullVerifications(loginService) {};\r\n}\r\n```","```\r\n@Test\r\npublic void mockAnObjectToPassAround() {\r\n    UserForm userForm = Mockito.when(Mockito.mock(UserForm.class).getUsername())\r\n      .thenReturn(\"foo\").getMock();\r\n    Mockito.when(loginService.login(userForm)).thenReturn(true);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    Mockito.verify(loginService).login(userForm);\r\n    Mockito.verify(loginService).setCurrentUser(\"foo\");\r\n}\r\n```","```\r\n@Test\r\npublic void mockAnObjectToPassAround() {\r\n    UserForm userForm = EasyMock.mock(UserForm.class);\r\n    EasyMock.expect(userForm.getUsername()).andReturn(\"foo\");\r\n    EasyMock.expect(loginService.login(userForm)).andReturn(true);\r\n    loginService.setCurrentUser(\"foo\");\r\n    EasyMock.replay(userForm);\r\n    EasyMock.replay(loginService);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    EasyMock.verify(userForm);\r\n    EasyMock.verify(loginService);\r\n}\r\n```","```\r\n@Test\r\npublic void mockAnObjectToPassAround(@Mocked UserForm userForm) {\r\n    new Expectations() {{\r\n        userForm.getUsername(); result = \"foo\";\r\n        loginService.login(userForm); result = true;\r\n        loginService.setCurrentUser(\"foo\");\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    new FullVerifications(loginService) {};\r\n    new FullVerifications(userForm) {};\r\n}\r\n```","```\r\n@Test\r\npublic void argumentMatching() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    // default matcher\r\n    Mockito.when(loginService.login(Mockito.any(UserForm.class))).thenReturn(true);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    Mockito.verify(loginService).login(userForm);\r\n    // complex matcher\r\n    Mockito.verify(loginService).setCurrentUser(ArgumentMatchers.argThat(\r\n        new ArgumentMatcher<String>() {\r\n            @Override\r\n            public boolean matches(String argument) {\r\n                return argument.startsWith(\"foo\");\r\n            }\r\n        }\r\n    ));\r\n}\r\n```","```\r\n@Test\r\npublic void argumentMatching() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    // default matcher\r\n    EasyMock.expect(loginService.login(EasyMock.isA(UserForm.class))).andReturn(true);\r\n    // complex matcher\r\n    loginService.setCurrentUser(specificArgumentMatching(\"foo\"));\r\n    EasyMock.replay(loginService);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    EasyMock.verify(loginService);\r\n}\r\n\r\nprivate static String specificArgumentMatching(String expected) {\r\n    EasyMock.reportMatcher(new IArgumentMatcher() {\r\n        @Override\r\n        public boolean matches(Object argument) {\r\n            return argument instanceof String \r\n              && ((String) argument).startsWith(expected);\r\n        }\r\n\r\n        @Override\r\n        public void appendTo(StringBuffer buffer) {\r\n            //NOOP\r\n        }\r\n    });\r\n    return null;\r\n}\r\n```","```\r\n@Test\r\npublic void argumentMatching() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    // default matcher\r\n    new Expectations() {{\r\n        loginService.login((UserForm) any);\r\n        result = true;\r\n        // complex matcher\r\n        loginService.setCurrentUser(withArgThat(new BaseMatcher<String>() {\r\n            @Override\r\n            public boolean matches(Object item) {\r\n                return item instanceof String && ((String) item).startsWith(\"foo\");\r\n            }\r\n\r\n            @Override\r\n            public void describeTo(Description description) {\r\n                //NOOP\r\n            }\r\n        }));\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    new FullVerifications(loginService) {};\r\n}\r\n```","```\r\n@Test\r\npublic void partialMocking() {\r\n    // use partial mock\r\n    loginController.loginService = spiedLoginService;\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    // let service's login use implementation so let's mock DAO call\r\n    Mockito.when(loginDao.login(userForm)).thenReturn(1);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    // verify mocked call\r\n    Mockito.verify(spiedLoginService).setCurrentUser(\"foo\");\r\n}\r\n```","```\r\n@Test\r\npublic void partialMocking() {\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n    // use partial mock\r\n    LoginService loginServicePartial = EasyMock.partialMockBuilder(LoginService.class)\r\n      .addMockedMethod(\"setCurrentUser\").createMock();\r\n    loginServicePartial.setCurrentUser(\"foo\");\r\n    // let service's login use implementation so let's mock DAO call\r\n    EasyMock.expect(loginDao.login(userForm)).andReturn(1);\r\n\r\n    loginServicePartial.setLoginDao(loginDao);\r\n    loginController.loginService = loginServicePartial;\r\n\r\n    EasyMock.replay(loginDao);\r\n    EasyMock.replay(loginServicePartial);\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    // verify mocked call\r\n    EasyMock.verify(loginServicePartial);\r\n    EasyMock.verify(loginDao);\r\n}\r\n```","```\r\n@Test\r\npublic void partialMocking() {\r\n    LoginService partialLoginService = new LoginService();\r\n    partialLoginService.setLoginDao(loginDao);\r\n    loginController.loginService = partialLoginService;\r\n\r\n    UserForm userForm = new UserForm();\r\n    userForm.username = \"foo\";\r\n\r\n    new Expectations(partialLoginService) {{\r\n        // let's mock DAO call\r\n        loginDao.login(userForm); result = 1;\r\n\r\n        // no expectation for login method so that real implementation is used\r\n\r\n        // mock setCurrentUser call\r\n        partialLoginService.setCurrentUser(\"foo\");\r\n    }};\r\n\r\n    String login = loginController.login(userForm);\r\n\r\n    Assert.assertEquals(\"OK\", login);\r\n    // verify mocked call\r\n    new Verifications() {{\r\n        partialLoginService.setCurrentUser(\"foo\");\r\n    }};     \r\n}\r\n```"]