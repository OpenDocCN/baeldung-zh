["```\r\n@Test\r\npublic void whenMergingStreams_thenResultStreamContainsElementsFromBoth() {\r\n    Stream<Integer> stream1 = Stream.of(1, 3, 5);\r\n    Stream<Integer> stream2 = Stream.of(2, 4, 6);\r\n\r\n    Stream<Integer> resultingStream = Stream.concat(stream1, stream2);\r\n\r\n    assertEquals(\r\n      Arrays.asList(1, 3, 5, 2, 4, 6),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given3Streams_whenMerged_thenResultStreamContainsAllElements() {\r\n    Stream<Integer> stream1 = Stream.of(1, 3, 5);\r\n    Stream<Integer> stream2 = Stream.of(2, 4, 6);\r\n    Stream<Integer> stream3 = Stream.of(18, 15, 36);\r\n\r\n    Stream<Integer> resultingStream = Stream.concat(\r\n      Stream.concat(stream1, stream2), stream3);\r\n\r\n    assertEquals(\r\n      Arrays.asList(1, 3, 5, 2, 4, 6, 18, 15, 36),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given4Streams_whenMerged_thenResultStreamContainsAllElements() {\r\n    Stream<Integer> stream1 = Stream.of(1, 3, 5);\r\n    Stream<Integer> stream2 = Stream.of(2, 4, 6);\r\n    Stream<Integer> stream3 = Stream.of(18, 15, 36);\r\n    Stream<Integer> stream4 = Stream.of(99);\r\n\r\n    Stream<Integer> resultingStream = Stream.of(\r\n      stream1, stream2, stream3, stream4)\r\n      .flatMap(i -> i);\r\n\r\n    assertEquals(\r\n      Arrays.asList(1, 3, 5, 2, 4, 6, 18, 15, 36, 99),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given4Streams_whenMerged_thenResultStreamContainsAllElements() {\r\n    Stream<Integer> stream1 = Stream.of(1, 3, 5);\r\n    Stream<Integer> stream2 = Stream.of(2, 4, 6);\r\n    Stream<Integer> stream3 = Stream.of(18, 15, 36);\r\n    Stream<Integer> stream4 = Stream.of(99);\r\n\r\n    Stream<Integer> resultingStream = StreamEx.of(stream1)\r\n      .append(stream2)\r\n      .append(stream3)\r\n      .append(stream4);\r\n\r\n    assertEquals(\r\n      Arrays.asList(1, 3, 5, 2, 4, 6, 18, 15, 36, 99),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given3Streams_whenPrepended_thenResultStreamContainsAllElements() {\r\n    Stream<String> stream1 = Stream.of(\"foo\", \"bar\");\r\n    Stream<String> openingBracketStream = Stream.of(\"[\");\r\n    Stream<String> closingBracketStream = Stream.of(\"]\");\r\n\r\n    Stream<String> resultingStream = StreamEx.of(stream1)\r\n      .append(closingBracketStream)\r\n      .prepend(openingBracketStream);\r\n\r\n    assertEquals(\r\n      Arrays.asList(\"[\", \"foo\", \"bar\", \"]\"),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given2Streams_whenMerged_thenResultStreamContainsAllElements() {\r\n    Stream<Integer> seq1 = Stream.of(1, 3, 5);\r\n    Stream<Integer> seq2 = Stream.of(2, 4, 6);\r\n\r\n    Stream<Integer> resultingSeq = Seq.ofType(seq1, Integer.class)\r\n      .append(seq2);\r\n\r\n    assertEquals(\r\n      Arrays.asList(1, 3, 5, 2, 4, 6),\r\n      resultingSeq.collect(Collectors.toList()));\r\n} \r\n```","```\r\n@Test\r\npublic void given3Streams_whenPrepending_thenResultStreamContainsAllElements() {\r\n    Stream<String> seq = Stream.of(\"foo\", \"bar\");\r\n    Stream<String> openingBracketSeq = Stream.of(\"[\");\r\n    Stream<String> closingBracketSeq = Stream.of(\"]\");\r\n\r\n    Stream<String> resultingStream = Seq.ofType(seq, String.class)\r\n      .append(closingBracketSeq)\r\n      .prepend(openingBracketSeq);\r\n\r\n    Assert.assertEquals(\r\n      Arrays.asList(\"[\", \"foo\", \"bar\", \"]\"),\r\n      resultingStream.collect(Collectors.toList()));\r\n} \r\n```"]