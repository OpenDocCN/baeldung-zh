["```\r\npublic class Customer {\r\n\r\n    private Integer id;\r\n    private String name;\r\n    private String emailId;\r\n    private Long phoneNumber;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nPropertyDescriptor[] propDescArr = Introspector\r\n  .getBeanInfo(Customer.class, Object.class)\r\n  .getPropertyDescriptors(); \r\n```","```\r\nreturn Arrays.stream(propDescArr)\r\n  .filter(nulls(customer))\r\n  .map(PropertyDescriptor::getName)\r\n  .collect(Collectors.toList()); \r\n```","```\r\nprivate static Predicate<PropertyDescriptor> nulls(Customer customer) { \r\n    return = pd -> { \r\n        Method getterMethod = pd.getReadMethod(); \r\n        boolean result = false; \r\n        return (getterMethod != null && getterMethod.invoke(customer) == null); \r\n    }; \r\n} \r\n```","```\r\n@Test\r\npublic void givenCustomer_whenAFieldIsNull_thenFieldNameInResult() {\r\n    Customer customer = new Customer(1, \"John\", null, null);\r\n\r\n    List<String> result = Utils.getNullPropertiesList(customer);\r\n    List<String> expectedFieldNames = Arrays\r\n      .asList(\"emailId\",\"phoneNumber\");\r\n\r\n    assertTrue(result.size() == expectedFieldNames.size());\r\n    assertTrue(result.containsAll(expectedFieldNames));      \r\n}\r\n```"]