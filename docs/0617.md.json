["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.thymeleaf.extras</groupId>\r\n    <artifactId>thymeleaf-extras-springsecurity5</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-webflux</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor.netty</groupId>\r\n    <artifactId>reactor-netty</artifactId>\r\n</dependency>\r\n```","```\r\n@EnableWebSecurity\r\npublic class UiSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    public void configure(HttpSecurity http) throws Exception {\r\n        http.antMatcher(\"/**\")\r\n          .authorizeRequests()\r\n          .antMatchers(\"/\")\r\n          .permitAll()\r\n          .anyRequest()\r\n          .authenticated()\r\n          .and()\r\n          .oauth2Login();\r\n    }\r\n\r\n    @Bean\r\n    WebClient webClient(ClientRegistrationRepository clientRegistrationRepository, \r\n      OAuth2AuthorizedClientRepository authorizedClientRepository) {\r\n        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2 = \r\n          new ServletOAuth2AuthorizedClientExchangeFilterFunction(clientRegistrationRepository, \r\n          authorizedClientRepository);\r\n        oauth2.setDefaultOAuth2AuthorizedClient(true);\r\n        return WebClient.builder().apply(oauth2.oauth2Configuration()).build();\r\n    }\r\n}\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          custom:\r\n            client-id: ssoClient-1\r\n            client-secret: ssoClientSecret-1\r\n            scope: read,write\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: http://localhost:8082/ui-one/login/oauth2/code/custom\r\n        provider:\r\n          custom:\r\n            authorization-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/auth\r\n            token-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/token\r\n            user-info-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/userinfo\r\n            user-name-attribute: preferred_username\r\n  thymeleaf:\r\n    cache: false\r\n\r\nserver: \r\n  port: 8082\r\n  servlet: \r\n    context-path: /ui-one\r\n\r\nresourceserver:\r\n  api:\r\n    project:\r\n      url: http://localhost:8081/sso-resource-server/api/foos/ \r\n```","```\r\n@Controller\r\npublic class FooClientController {\r\n\r\n    @Value(\"${resourceserver.api.url}\")\r\n    private String fooApiUrl;\r\n\r\n    @Autowired\r\n    private WebClient webClient;\r\n\r\n    @GetMapping(\"/foos\")\r\n    public String getFoos(Model model) {\r\n        List<FooModel> foos = this.webClient.get()\r\n            .uri(fooApiUrl)\r\n            .retrieve()\r\n            .bodyToMono(new ParameterizedTypeReference<List<FooModel>>() {\r\n            })\r\n            .block();\r\n        model.addAttribute(\"foos\", foos);\r\n        return \"foos\";\r\n    }\r\n}\r\n```","```\r\n<a class=\"navbar-brand\" th:href=\"@{/foos/}\">Spring OAuth Client Thymeleaf - 1</a>\r\n<label>Welcome !</label> <br /> <a th:href=\"@{/foos/}\">Login</a>\r\n```","```\r\n<a class=\"navbar-brand\" th:href=\"@{/foos/}\">Spring OAuth Client Thymeleaf -1</a>\r\nHi, <span sec:authentication=\"name\">preferred_username</span>   \r\n\r\n<h1>All Foos:</h1>\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <td>ID</td>\r\n      <td>Name</td>                    \r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr th:if=\"${foos.empty}\">\r\n      <td colspan=\"4\">No foos</td>\r\n    </tr>\r\n    <tr th:each=\"foo : ${foos}\">\r\n      <td><span th:text=\"${foo.id}\"> ID </span></td>\r\n      <td><span th:text=\"${foo.name}\"> Name </span></td>                    \r\n    </tr>\r\n  </tbody>\r\n</table>\r\n```","```\r\nspring:\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          custom:\r\n            client-id: ssoClient-2\r\n            client-secret: ssoClientSecret-2\r\n            scope: read,write\r\n            authorization-grant-type: authorization_code\r\n            redirect-uri: http://localhost:8084/ui-two/login/oauth2/code/custom\r\n```","```\r\nserver: \r\n  port: 8084\r\n  servlet: \r\n    context-path: /ui-two\r\n```"]