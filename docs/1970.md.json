["```\r\npublic class Invoker implements Executor {\r\n    @Override\r\n    public void execute(Runnable r) {\r\n        r.run();\r\n    }\r\n}\r\n```","```\r\npublic void execute() {\r\n    Executor executor = new Invoker();\r\n    executor.execute( () -> {\r\n        // task to be performed\r\n    });\r\n}\r\n```","```\r\npublic class Task implements Runnable {\r\n    @Override\r\n    public void run() {\r\n        // task details\r\n    }\r\n}\r\n```","```\r\nExecutorService executor = Executors.newFixedThreadPool(10);\r\n```","```\r\npublic void execute() { \r\n    executor.submit(new Task()); \r\n}\r\n```","```\r\nexecutor.submit(() -> {\r\n    new Task();\r\n});\r\n```","```\r\ntry {\r\n    executor.awaitTermination( 20l, TimeUnit.NANOSECONDS );\r\n} catch (InterruptedException e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\npublic void execute() {\r\n    ScheduledExecutorService executorService\r\n      = Executors.newSingleThreadScheduledExecutor();\r\n\r\n    Future<String> future = executorService.schedule(() -> {\r\n        // ...\r\n        return \"Hello world\";\r\n    }, 1, TimeUnit.SECONDS);\r\n\r\n    ScheduledFuture<?> scheduledFuture = executorService.schedule(() -> {\r\n        // ...\r\n    }, 1, TimeUnit.SECONDS);\r\n\r\n    executorService.shutdown();\r\n}\r\n```","```\r\nexecutorService.scheduleAtFixedRate(() -> {\r\n    // ...\r\n}, 1, 10, TimeUnit.SECONDS);\r\n\r\nexecutorService.scheduleWithFixedDelay(() -> {\r\n    // ...\r\n}, 1, 10, TimeUnit.SECONDS);\r\n```","```\r\npublic void invoke() {\r\n    ExecutorService executorService = Executors.newFixedThreadPool(10);\r\n\r\n    Future<String> future = executorService.submit(() -> {\r\n        // ...\r\n        Thread.sleep(10000l);\r\n        return \"Hello world\";\r\n    });\r\n}\r\n```","```\r\nif (future.isDone() && !future.isCancelled()) {\r\n    try {\r\n        str = future.get();\r\n    } catch (InterruptedException | ExecutionException e) {\r\n        e.printStackTrace();\r\n    }\r\n}\r\n```","```\r\ntry {\r\n    future.get(10, TimeUnit.SECONDS);\r\n} catch (InterruptedException | ExecutionException | TimeoutException e) {\r\n    e.printStackTrace();\r\n}\r\n```","```\r\npublic class Task implements Runnable {\r\n\r\n    private CyclicBarrier barrier;\r\n\r\n    public Task(CyclicBarrier barrier) {\r\n        this.barrier = barrier;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            LOG.info(Thread.currentThread().getName() + \r\n              \" is waiting\");\r\n            barrier.await();\r\n            LOG.info(Thread.currentThread().getName() + \r\n              \" is released\");\r\n        } catch (InterruptedException | BrokenBarrierException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\npublic void start() {\r\n\r\n    CyclicBarrier cyclicBarrier = new CyclicBarrier(3, () -> {\r\n        // ...\r\n        LOG.info(\"All previous tasks are completed\");\r\n    });\r\n\r\n    Thread t1 = new Thread(new Task(cyclicBarrier), \"T1\"); \r\n    Thread t2 = new Thread(new Task(cyclicBarrier), \"T2\"); \r\n    Thread t3 = new Thread(new Task(cyclicBarrier), \"T3\"); \r\n\r\n    if (!cyclicBarrier.isBroken()) { \r\n        t1.start(); \r\n        t2.start(); \r\n        t3.start(); \r\n    }\r\n}\r\n```","```\r\nstatic Semaphore semaphore = new Semaphore(10);\r\n\r\npublic void execute() throws InterruptedException {\r\n\r\n    LOG.info(\"Available permit : \" + semaphore.availablePermits());\r\n    LOG.info(\"Number of threads waiting to acquire: \" + \r\n      semaphore.getQueueLength());\r\n\r\n    if (semaphore.tryAcquire()) {\r\n        try {\r\n            // ...\r\n        }\r\n        finally {\r\n            semaphore.release();\r\n        }\r\n    }\r\n\r\n}\r\n```","```\r\npublic class BaeldungThreadFactory implements ThreadFactory {\r\n    private int threadId;\r\n    private String name;\r\n\r\n    public BaeldungThreadFactory(String name) {\r\n        threadId = 1;\r\n        this.name = name;\r\n    }\r\n\r\n    @Override\r\n    public Thread newThread(Runnable r) {\r\n        Thread t = new Thread(r, name + \"-Thread_\" + threadId);\r\n        LOG.info(\"created new thread with id : \" + threadId +\r\n            \" and name : \" + t.getName());\r\n        threadId++;\r\n        return t;\r\n    }\r\n}\r\n```","```\r\nBaeldungThreadFactory factory = new BaeldungThreadFactory( \r\n    \"BaeldungThreadFactory\");\r\nfor (int i = 0; i < 10; i++) { \r\n    Thread t = factory.newThread(new Task());\r\n    t.start(); \r\n}\r\n```"]