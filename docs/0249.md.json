["```\r\npublic static String toString(int i)\r\n```","```\r\n@Test\r\npublic void whenValidIntIsPassed_thenShouldConvertToString() {\r\n    assertEquals(\"11\", Integer.toString(11)); \r\n    assertEquals(\"11\", Integer.toString(+11)); \r\n    assertEquals(\"-11\", Integer.toString(-11));\r\n}\r\n```","```\r\n/**\r\n * Returns the string representation of the {@code int} argument.\r\n * <p>\r\n * The representation is exactly the one returned by the\r\n * {@code Integer.toString} method of one argument.\r\n *\r\n * @param   i   an {@code int}.\r\n * @return  a string representation of the {@code int} argument.\r\n * @see     java.lang.Integer#toString(int, int)\r\n */\r\npublic static String valueOf(int i) {\r\n    return Integer.toString(i);\r\n}\r\n```","```\r\n@Test\r\npublic void whenValidIntIsPassed_thenShouldConvertToValidString() {\r\n    assertEquals(\"11\", String.valueOf(11)); \r\n    assertEquals(\"11\", String.valueOf(+11));\r\n    assertEquals(\"-11\", String.valueOf(-11));\r\n}\r\n```","```\r\n@Test(expected = NullPointerException.class)\r\npublic void whenNullIntegerObjectIsPassed_thenShouldThrowException() {\r\n    Integer i = null; \r\n    System.out.println(String.valueOf(i)); \r\n    System.out.println(i.toString());\r\n}\r\n```"]