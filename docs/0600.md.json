["```\r\n@GetMapping\r\npublic List<Product> getAllProducts() {\r\n    return productService.getProducts();\r\n}\r\n\r\n@PostMapping\r\npublic Order processOrder(@RequestBody Order order) {\r\n    return productService.handleOrder(order);\r\n}\r\n\r\n@DeleteMapping\r\npublic Order revertOrder(@RequestBody Order order) {\r\n    return productService.revertOrder(order);\r\n}\r\n```","```\r\n@Transactional\r\npublic Order handleOrder(Order order) {       \r\n    order.getLineItems()\r\n      .forEach(l -> {\r\n          Product> p = productRepository.findById(l.getProductId())\r\n            .orElseThrow(() -> new RuntimeException(\"Could not find the product: \" + l.getProductId()));\r\n          if (p.getStock() >= l.getQuantity()) {\r\n              p.setStock(p.getStock() - l.getQuantity());\r\n              productRepository.save(p);\r\n          } else {\r\n              throw new RuntimeException(\"Product is out of stock: \" + l.getProductId());\r\n          }\r\n      });\r\n    return order.setOrderStatus(OrderStatus.SUCCESS);\r\n}\r\n\r\n@Transactional\r\npublic Order revertOrder(Order order) {\r\n    order.getLineItems()\r\n      .forEach(l -> {\r\n          Product p = productRepository.findById(l.getProductId())\r\n            .orElseThrow(() -> new RuntimeException(\"Could not find the product: \" + l.getProductId()));\r\n          p.setStock(p.getStock() + l.getQuantity());\r\n          productRepository.save(p);\r\n      });\r\n    return order.setOrderStatus(OrderStatus.SUCCESS);\r\n}\r\n```","```\r\n@PostMapping\r\npublic Order process(@RequestBody Order order) {\r\n    return shippingService.handleOrder(order);\r\n}\r\n```","```\r\npublic Order handleOrder(Order order) {\r\n    LocalDate shippingDate = null;\r\n    if (LocalTime.now().isAfter(LocalTime.parse(\"10:00\"))\r\n      && LocalTime.now().isBefore(LocalTime.parse(\"18:00\"))) {\r\n        shippingDate = LocalDate.now().plusDays(1);\r\n    } else {\r\n        throw new RuntimeException(\"The current time is off the limits to place order.\");\r\n    }\r\n    shipmentRepository.save(new Shipment()\r\n      .setAddress(order.getShippingAddress())\r\n      .setShippingDate(shippingDate));\r\n    return order.setShippingDate(shippingDate)\r\n      .setOrderStatus(OrderStatus.SUCCESS);\r\n}\r\n```","```\r\n@PostMapping\r\npublic Order create(@RequestBody Order order) {\r\n    Order processedOrder = orderService.createOrder(order);\r\n    if (OrderStatus.FAILURE.equals(processedOrder.getOrderStatus())) {\r\n        throw new RuntimeException(\"Order processing failed, please try again later.\");\r\n    }\r\n    return processedOrder;\r\n}\r\n@GetMapping\r\npublic List<Order> getAll() {\r\n    return orderService.getOrders();\r\n}\r\n```","```\r\npublic Order createOrder(Order order) {\r\n    boolean success = true;\r\n    Order savedOrder = orderRepository.save(order);\r\n    Order inventoryResponse = null;\r\n    try {\r\n        inventoryResponse = restTemplate.postForObject(\r\n          inventoryServiceUrl, order, Order.class);\r\n    } catch (Exception ex) {\r\n        success = false;\r\n    }\r\n    Order shippingResponse = null;\r\n    try {\r\n        shippingResponse = restTemplate.postForObject(\r\n          shippingServiceUrl, order, Order.class);\r\n    } catch (Exception ex) {\r\n        success = false;\r\n        HttpEntity<Order> deleteRequest = new HttpEntity<>(order);\r\n        ResponseEntity<Order> deleteResponse = restTemplate.exchange(\r\n          inventoryServiceUrl, HttpMethod.DELETE, deleteRequest, Order.class);\r\n    }\r\n    if (success) {\r\n        savedOrder.setOrderStatus(OrderStatus.SUCCESS);\r\n        savedOrder.setShippingDate(shippingResponse.getShippingDate());\r\n    } else {\r\n        savedOrder.setOrderStatus(OrderStatus.FAILURE);\r\n    }\r\n    return orderRepository.save(savedOrder);\r\n}\r\n\r\npublic List<Order> getOrders() {\r\n    return orderRepository.findAll();\r\n}\r\n```","```\r\ncreateOrder() {\r\n    let headers = new HttpHeaders({'Content-Type': 'application/json'});\r\n    let options = {headers: headers}\r\n    this.http.post('http://localhost:8080/api/orders', this.form.value, options)\r\n      .subscribe(\r\n        (response) => {\r\n          this.response = response\r\n        },\r\n        (error) => {\r\n          this.error = error\r\n        }\r\n      )\r\n}\r\n```","```\r\ngetOrders() {\r\n  this.previousOrders = this.http.get(''http://localhost:8080/api/orders'')\r\n}\r\n```","```\r\n<div class=\"container\" *ngIf=\"previousOrders !== null\">\r\n  <h2>Your orders placed so far:</h2>\r\n  <ul>\r\n    <li *ngFor=\"let order of previousOrders | async\">\r\n      <p>Order ID: {{ order.id }}, Order Status: {{order.orderStatus}}, Order Message: {{order.responseMessage}}</p>\r\n    </li>\r\n  </ul>\r\n</div>\r\n```","```\r\nversion: '3'\r\nservices:\r\n  frontend:\r\n    build: ./frontend\r\n    ports:\r\n      - \"80:80\"\r\n  order-service:\r\n    build: ./order-service\r\n    ports:\r\n      - \"8080:8080\"\r\n  inventory-service:\r\n    build: ./inventory-service\r\n    ports:\r\n      - \"8081:8081\"\r\n  shipping-service:\r\n    build: ./shipping-service\r\n    ports:\r\n      - \"8082:8082\"\r\n```","```\r\n@GetMapping\r\npublic Flux<Product> getAllProducts() {\r\n    return productService.getProducts();\r\n}\r\n```","```\r\n@PostMapping\r\npublic Mono<Order> processOrder(@RequestBody Order order) {\r\n    return productService.handleOrder(order);\r\n}\r\n\r\n@DeleteMapping\r\npublic Mono<Order> revertOrder(@RequestBody Order order) {\r\n    return productService.revertOrder(order);\r\n}\r\n```","```\r\n@Transactional\r\npublic Mono<Order> handleOrder(Order order) {\r\n    return Flux.fromIterable(order.getLineItems())\r\n      .flatMap(l -> productRepository.findById(l.getProductId()))\r\n      .flatMap(p -> {\r\n          int q = order.getLineItems().stream()\r\n            .filter(l -> l.getProductId().equals(p.getId()))\r\n            .findAny().get()\r\n            .getQuantity();\r\n          if (p.getStock() >= q) {\r\n              p.setStock(p.getStock() - q);\r\n              return productRepository.save(p);\r\n          } else {\r\n              return Mono.error(new RuntimeException(\"Product is out of stock: \" + p.getId()));\r\n          }\r\n      })\r\n      .then(Mono.just(order.setOrderStatus(\"SUCCESS\")));\r\n}\r\n\r\n@Transactional\r\npublic Mono<Order> revertOrder(Order order) {\r\n    return Flux.fromIterable(order.getLineItems())\r\n      .flatMap(l -> productRepository.findById(l.getProductId()))\r\n      .flatMap(p -> {\r\n          int q = order.getLineItems().stream()\r\n            .filter(l -> l.getProductId().equals(p.getId()))\r\n            .findAny().get()\r\n            .getQuantity();\r\n          p.setStock(p.getStock() + q);\r\n          return productRepository.save(p);\r\n      })\r\n      .then(Mono.just(order.setOrderStatus(\"SUCCESS\")));\r\n}\r\n```","```\r\n@PostMapping\r\npublic Mono<Order> process(@RequestBody Order order) {\r\n    return shippingService.handleOrder(order);\r\n}\r\n```","```\r\npublic Mono<Order> handleOrder(Order order) {\r\n    return Mono.just(order)\r\n      .flatMap(o -> {\r\n          LocalDate shippingDate = null;\r\n          if (LocalTime.now().isAfter(LocalTime.parse(\"10:00\"))\r\n            && LocalTime.now().isBefore(LocalTime.parse(\"18:00\"))) {\r\n              shippingDate = LocalDate.now().plusDays(1);\r\n          } else {\r\n              return Mono.error(new RuntimeException(\"The current time is off the limits to place order.\"));\r\n          }\r\n          return shipmentRepository.save(new Shipment()\r\n            .setAddress(order.getShippingAddress())\r\n            .setShippingDate(shippingDate));\r\n      })\r\n      .map(s -> order.setShippingDate(s.getShippingDate())\r\n        .setOrderStatus(OrderStatus.SUCCESS));\r\n    }\r\n```","```\r\n@PostMapping\r\npublic Mono<Order> create(@RequestBody Order order) {\r\n    return orderService.createOrder(order)\r\n      .flatMap(o -> {\r\n          if (OrderStatus.FAILURE.equals(o.getOrderStatus())) {\r\n              return Mono.error(new RuntimeException(\"Order processing failed, please try again later. \" + o.getResponseMessage()));\r\n          } else {\r\n              return Mono.just(o);\r\n          }\r\n      });\r\n}\r\n\r\n@GetMapping\r\npublic Flux<Order> getAll() {\r\n    return orderService.getOrders();\r\n}\r\n```","```\r\npublic Mono<Order> createOrder(Order order) {\r\n    return Mono.just(order)\r\n      .flatMap(orderRepository::save)\r\n      .flatMap(o -> {\r\n          return webClient.method(HttpMethod.POST)\r\n            .uri(inventoryServiceUrl)\r\n            .body(BodyInserters.fromValue(o))\r\n            .exchange();\r\n      })\r\n      .onErrorResume(err -> {\r\n          return Mono.just(order.setOrderStatus(OrderStatus.FAILURE)\r\n            .setResponseMessage(err.getMessage()));\r\n      })\r\n      .flatMap(o -> {\r\n          if (!OrderStatus.FAILURE.equals(o.getOrderStatus())) {\r\n              return webClient.method(HttpMethod.POST)\r\n                .uri(shippingServiceUrl)\r\n                .body(BodyInserters.fromValue(o))\r\n                .exchange();\r\n          } else {\r\n              return Mono.just(o);\r\n          }\r\n      })\r\n      .onErrorResume(err -> {\r\n          return webClient.method(HttpMethod.POST)\r\n            .uri(inventoryServiceUrl)\r\n            .body(BodyInserters.fromValue(order))\r\n            .retrieve()\r\n            .bodyToMono(Order.class)\r\n            .map(o -> o.setOrderStatus(OrderStatus.FAILURE)\r\n              .setResponseMessage(err.getMessage()));\r\n      })\r\n      .map(o -> {\r\n          if (!OrderStatus.FAILURE.equals(o.getOrderStatus())) {\r\n              return order.setShippingDate(o.getShippingDate())\r\n                .setOrderStatus(OrderStatus.SUCCESS);\r\n          } else {\r\n              return order.setOrderStatus(OrderStatus.FAILURE)\r\n                .setResponseMessage(o.getResponseMessage());\r\n          }\r\n      })\r\n      .flatMap(orderRepository::save);\r\n}\r\n\r\npublic Flux<Order> getOrders() {\r\n    return orderRepository.findAll();\r\n}\r\n```","```\r\ngetOrderStream() {\r\n    return Observable.create((observer) => {\r\n        let eventSource = new EventSource('http://localhost:8080/api/orders')\r\n        eventSource.onmessage = (event) => {\r\n            let json = JSON.parse(event.data)\r\n            this.orders.push(json)\r\n            this._zone.run(() => {\r\n                observer.next(this.orders)\r\n            })\r\n        }\r\n        eventSource.onerror = (error) => {\r\n            if(eventSource.readyState === 0) {\r\n                eventSource.close()\r\n                this._zone.run(() => {\r\n                    observer.complete()\r\n                })\r\n            } else {\r\n                this._zone.run(() => {\r\n                    observer.error('EventSource error: ' + error)\r\n                })\r\n            }\r\n        }\r\n    })\r\n}\r\n```","```\r\n@Autowired\r\nprivate KafkaTemplate<String, Order> kafkaTemplate;\r\n\r\npublic void sendMessage(Order order) {\r\n    this.kafkaTemplate.send(\"orders\", order);\r\n}\r\n```","```\r\n@KafkaListener(topics = \"orders\", groupId = \"inventory\")\r\npublic void consume(Order order) throws IOException {\r\n    if (OrderStatus.RESERVE_INVENTORY.equals(order.getOrderStatus())) {\r\n        productService.handleOrder(order)\r\n          .doOnSuccess(o -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.INVENTORY_SUCCESS));\r\n          })\r\n          .doOnError(e -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.INVENTORY_FAILURE)\r\n                .setResponseMessage(e.getMessage()));\r\n          }).subscribe();\r\n    } else if (OrderStatus.REVERT_INVENTORY.equals(order.getOrderStatus())) {\r\n        productService.revertOrder(order)\r\n          .doOnSuccess(o -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.INVENTORY_REVERT_SUCCESS));\r\n          })\r\n          .doOnError(e -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.INVENTORY_REVERT_FAILURE)\r\n                .setResponseMessage(e.getMessage()));\r\n          }).subscribe();\r\n    }\r\n}\r\n```","```\r\n@KafkaListener(topics = \"orders\", groupId = \"shipping\")\r\npublic void consume(Order order) throws IOException {\r\n    if (OrderStatus.PREPARE_SHIPPING.equals(order.getOrderStatus())) {\r\n        shippingService.handleOrder(order)\r\n          .doOnSuccess(o -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.SHIPPING_SUCCESS)\r\n                .setShippingDate(o.getShippingDate()));\r\n          })\r\n          .doOnError(e -> {\r\n              orderProducer.sendMessage(order.setOrderStatus(OrderStatus.SHIPPING_FAILURE)\r\n                .setResponseMessage(e.getMessage()));\r\n          }).subscribe();\r\n    }\r\n}\r\n```","```\r\n@KafkaListener(topics = \"orders\", groupId = \"orders\")\r\npublic void consume(Order order) throws IOException {\r\n    if (OrderStatus.INITIATION_SUCCESS.equals(order.getOrderStatus())) {\r\n        orderRepository.findById(order.getId())\r\n          .map(o -> {\r\n              orderProducer.sendMessage(o.setOrderStatus(OrderStatus.RESERVE_INVENTORY));\r\n              return o.setOrderStatus(order.getOrderStatus())\r\n                .setResponseMessage(order.getResponseMessage());\r\n          })\r\n          .flatMap(orderRepository::save)\r\n          .subscribe();\r\n    } else if (\"INVENTORY-SUCCESS\".equals(order.getOrderStatus())) {\r\n        orderRepository.findById(order.getId())\r\n          .map(o -> {\r\n              orderProducer.sendMessage(o.setOrderStatus(OrderStatus.PREPARE_SHIPPING));\r\n              return o.setOrderStatus(order.getOrderStatus())\r\n                .setResponseMessage(order.getResponseMessage());\r\n          })\r\n          .flatMap(orderRepository::save)\r\n          .subscribe();\r\n    } else if (\"SHIPPING-FAILURE\".equals(order.getOrderStatus())) {\r\n        orderRepository.findById(order.getId())\r\n          .map(o -> {\r\n              orderProducer.sendMessage(o.setOrderStatus(OrderStatus.REVERT_INVENTORY));\r\n              return o.setOrderStatus(order.getOrderStatus())\r\n                .setResponseMessage(order.getResponseMessage());\r\n          })\r\n          .flatMap(orderRepository::save)\r\n          .subscribe();\r\n    } else {\r\n        orderRepository.findById(order.getId())\r\n          .map(o -> {\r\n              return o.setOrderStatus(order.getOrderStatus())\r\n                .setResponseMessage(order.getResponseMessage());\r\n          })\r\n          .flatMap(orderRepository::save)\r\n          .subscribe();\r\n    }\r\n}\r\n```","```\r\npublic Mono<Order> createOrder(Order order) {\r\n    return Mono.just(order)\r\n      .flatMap(orderRepository::save)\r\n      .map(o -> {\r\n          orderProducer.sendMessage(o.setOrderStatus(OrderStatus.INITIATION_SUCCESS));\r\n          return o;\r\n      })\r\n      .onErrorResume(err -> {\r\n          return Mono.just(order.setOrderStatus(OrderStatus.FAILURE)\r\n            .setResponseMessage(err.getMessage()));\r\n      })\r\n      .flatMap(orderRepository::save);\r\n}\r\n```","```\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata: \r\n  name: inventory-deployment\r\nspec: \r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      name: inventory-deployment\r\n  template: \r\n    metadata: \r\n      labels: \r\n        name: inventory-deployment\r\n    spec: \r\n      containers:\r\n      - name: inventory\r\n        image: inventory-service-async:latest\r\n        ports: \r\n        - containerPort: 8081\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata: \r\n  name: shipping-deployment\r\nspec: \r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      name: shipping-deployment\r\n  template: \r\n    metadata: \r\n      labels: \r\n        name: shipping-deployment\r\n    spec: \r\n      containers:\r\n      - name: shipping\r\n        image: shipping-service-async:latest\r\n        ports: \r\n        - containerPort: 8082\r\n---\r\napiVersion: apps/v1\r\nkind: Deployment\r\nmetadata: \r\n  name: order-deployment\r\nspec: \r\n  replicas: 3\r\n  selector:\r\n    matchLabels:\r\n      name: order-deployment\r\n  template: \r\n    metadata: \r\n      labels: \r\n        name: order-deployment\r\n    spec: \r\n      containers:\r\n      - name: order\r\n        image: order-service-async:latest\r\n        ports: \r\n        - containerPort: 8080\r\n```"]