["```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-collections4</artifactId>\r\n    <version>4.1</version>\r\n</dependency>\r\n```","```\r\npublic class Customer {\r\n    private Integer id;\r\n    private String name;\r\n    private Address address;\r\n\r\n    // standard getters and setters\r\n}\r\n\r\npublic class Address {\r\n    private String locality;\r\n    private String city;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\nCustomer customer1 = new Customer(1, \"Daniel\", \"locality1\", \"city1\");\r\nCustomer customer2 = new Customer(2, \"Fredrik\", \"locality2\", \"city2\");\r\nCustomer customer3 = new Customer(3, \"Kyle\", \"locality3\", \"city3\");\r\nCustomer customer4 = new Customer(4, \"Bob\", \"locality4\", \"city4\");\r\nCustomer customer5 = new Customer(5, \"Cat\", \"locality5\", \"city5\");\r\nCustomer customer6 = new Customer(6, \"John\", \"locality6\", \"city6\");\r\n\r\nList<Customer> list1 = Arrays.asList(customer1, customer2, customer3);\r\nList<Customer> list2 = Arrays.asList(customer4, customer5, customer6);\r\nList<Customer> list3 = Arrays.asList(customer1, customer2);\r\n\r\nList<Customer> linkedList1 = new LinkedList<>(list1);\r\n```","```\r\n@Test\r\npublic void givenList_whenAddIgnoreNull_thenNoNullAdded() {\r\n    CollectionUtils.addIgnoreNull(list1, null);\r\n\r\n    assertFalse(list1.contains(null));\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoSortedLists_whenCollated_thenSorted() {\r\n    List<Customer> sortedList = CollectionUtils.collate(list1, list2);\r\n\r\n    assertEquals(6, sortedList.size()); \r\n    assertTrue(sortedList.get(0).getName().equals(\"Bob\"));\r\n    assertTrue(sortedList.get(2).getName().equals(\"Daniel\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenListOfCustomers_whenTransformed_thenListOfAddress() {\r\n    Collection<Address> addressCol = CollectionUtils.collect(list1, \r\n      new Transformer<Customer, Address>() {\r\n        public Address transform(Customer customer) {\r\n            return customer.getAddress();\r\n        }\r\n    });\r\n\r\n    List<Address> addressList = new ArrayList<>(addressCol);\r\n    assertTrue(addressList.size() == 3);\r\n    assertTrue(addressList.get(0).getLocality().equals(\"locality1\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenCustomerList_WhenFiltered_thenCorrectSize() {\r\n\r\n    boolean isModified = CollectionUtils.filter(linkedList1, \r\n      new Predicate<Customer>() {\r\n        public boolean evaluate(Customer customer) {\r\n            return Arrays.asList(\"Daniel\",\"Kyle\").contains(customer.getName());\r\n        }\r\n    });\r\n\r\n    assertTrue(linkedList1.size() == 2);\r\n}\r\n```","```\r\nboolean isNotEmpty = (list != null && list.size() > 0);\r\n```","```\r\n@Test\r\npublic void givenNonEmptyList_whenCheckedIsNotEmpty_thenTrue() {\r\n    assertTrue(CollectionUtils.isNotEmpty(list1));\r\n}\r\n```","```\r\nList<Customer> emptyList = new ArrayList<>();\r\nList<Customer> nullList = null;\r\n\r\nassertTrue(CollectionUtils.isEmpty(nullList));\r\nassertTrue(CollectionUtils.isEmpty(emptyList));\r\n```","```\r\n@Test\r\npublic void givenCustomerListAndASubcollection_whenChecked_thenTrue() {\r\n    assertTrue(CollectionUtils.isSubCollection(list3, list1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoLists_whenIntersected_thenCheckSize() {\r\n    Collection<Customer> intersection = CollectionUtils.intersection(list1, list3);\r\n    assertTrue(intersection.size() == 2);\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoLists_whenSubtracted_thenCheckElementNotPresentInA() {\r\n    Collection<Customer> result = CollectionUtils.subtract(list1, list3);\r\n    assertFalse(result.contains(customer1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoLists_whenUnioned_thenCheckElementPresentInResult() {\r\n    Collection<Customer> union = CollectionUtils.union(list1, list2);\r\n\r\n    assertTrue(union.contains(customer1));\r\n    assertTrue(union.contains(customer4));\r\n}\r\n```"]