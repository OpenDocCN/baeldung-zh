["```\r\npublic Set<String> listFilesUsingJavaIO(String dir) {\r\n    return Stream.of(new File(dir).listFiles())\r\n      .filter(file -> !file.isDirectory())\r\n      .map(File::getName)\r\n      .collect(Collectors.toSet());\r\n}\r\n```","```\r\nassertThrows(NullPointerException.class,\r\n        () -> listFiles.listFilesUsingJavaIO(INVALID_DIRECTORY));\r\n```","```\r\npublic Set<String> listFilesUsingDirectoryStream(String dir) throws IOException {\r\n    Set<String> fileSet = new HashSet<>();\r\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(Paths.get(dir))) {\r\n        for (Path path : stream) {\r\n            if (!Files.isDirectory(path)) {\r\n                fileSet.add(path.getFileName()\r\n                    .toString());\r\n            }\r\n        }\r\n    }\r\n    return fileSet;\r\n}\r\n```","```\r\npublic Set<String> listFilesUsingFilesList(String dir) throws IOException {\r\n    try (Stream<Path> stream = Files.list(Paths.get(dir))) {\r\n        return stream\r\n          .filter(file -> !Files.isDirectory(file))\r\n          .map(Path::getFileName)\r\n          .map(Path::toString)\r\n          .collect(Collectors.toSet());\r\n    }\r\n}\r\n```","```\r\npublic Set<String> listFilesUsingFileWalk(String dir, int depth) throws IOException {\r\n    try (Stream<Path> stream = Files.walk(Paths.get(dir), depth)) {\r\n        return stream\r\n          .filter(file -> !Files.isDirectory(file))\r\n          .map(Path::getFileName)\r\n          .map(Path::toString)\r\n          .collect(Collectors.toSet());\r\n    }\r\n}\r\n```","```\r\npublic Set<String> listFilesUsingFileWalkAndVisitor(String dir) throws IOException {\r\n    Set<String> fileList = new HashSet<>();\r\n    Files.walkFileTree(Paths.get(dir), new SimpleFileVisitor<Path>() {\r\n        @Override\r\n        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\r\n            if (!Files.isDirectory(file)) {\r\n                fileList.add(file.getFileName().toString());\r\n            }\r\n            return FileVisitResult.CONTINUE;\r\n        }\r\n    });\r\n    return fileList;\r\n}\r\n```","```\r\nSet<String> expectedFileSet = Collections.singleton(\"test.xml\");\r\nString filePathString = \"src/test/resources/listFilesUnitTestFolder/test.xml\";\r\nassertEquals(expectedFileSet, listFiles.listFilesUsingFileWalk(filePathString, DEPTH));\r\n```"]