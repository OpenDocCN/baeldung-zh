["```\r\npublic class Employee {\r\n\r\n    private final String name;\r\n    private final int age;\r\n    private final String department;\r\n\r\n    private Employee(String name, int age, String department) {\r\n        this.name = name;\r\n        this.age = age;\r\n        this.department = department;\r\n    }\r\n}\r\n```","```\r\npublic static class Builder {\r\n\r\n    private String name;\r\n    private int age;\r\n    private String department;\r\n\r\n    public Builder setName(String name) {\r\n        this.name = name;\r\n        return this;\r\n    }\r\n\r\n    public Builder setAge(int age) {\r\n        this.age = age;\r\n        return this;\r\n    }\r\n\r\n    public Builder setDepartment(String department) {\r\n        this.department = department;\r\n        return this;\r\n    }\r\n\r\n    public Employee build() {\r\n        return new Employee(name, age, department);\r\n    }\r\n}\r\n```","```\r\nEmployee.Builder emplBuilder = new Employee.Builder();\r\n\r\nEmployee employee = emplBuilder\r\n  .setName(\"baeldung\")\r\n  .setAge(12)\r\n  .setDepartment(\"Builder Pattern\")\r\n  .build();\r\n```","```\r\n<dependency>\r\n    <groupId>org.inferred</groupId>\r\n    <artifactId>freebuilder</artifactId>\r\n    <version>2.4.1</version>\r\n</dependency>\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    String name();\r\n    int age();\r\n    String department();\r\n\r\n    class Builder extends Employee_Builder {\r\n    }\r\n}\r\n```","```\r\nEmployee.Builder builder = new Employee.Builder();\r\n\r\nEmployee employee = builder.name(\"baeldung\")\r\n  .age(10)\r\n  .department(\"Builder Pattern\")\r\n  .build();\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    String getName();\r\n    int getAge();\r\n    String getDepartment();\r\n\r\n    class Builder extends Employee_Builder {\r\n    }\r\n}\r\n```","```\r\nEmployee employee = builder\r\n  .setName(\"baeldung\")\r\n  .setAge(10)\r\n  .setDepartment(\"Builder Pattern\")\r\n  .build();\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n    Optional<Double> getSalaryInUSD();\r\n}\r\n```","```\r\nlong salaryInEuros = INPUT_SALARY_EUROS;\r\nEmployee.Builder builder = new Employee.Builder();\r\n\r\nEmployee employee = builder\r\n  .setName(\"baeldung\")\r\n  .setAge(10)\r\n  .mapSalaryInUSD(sal -> salaryInEuros * EUROS_TO_USD_RATIO)\r\n  .build();\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    // getter methods\r\n\r\n    class Builder extends Employee_Builder {\r\n\r\n        public Builder() {\r\n            setDepartment(\"Builder Pattern\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    // getter methods\r\n\r\n    class Builder extends Employee_Builder {\r\n\r\n        @Override\r\n        public Builder setEmail(String email) {\r\n            if (checkValidEmail(email))\r\n                return super.setEmail(email);\r\n            else\r\n                throw new IllegalArgumentException(\"Invalid email\");\r\n\r\n        }\r\n\r\n        private boolean checkValidEmail(String email) {\r\n            return email.contains(\"@\");\r\n        }\r\n    }\r\n}\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    String getName();\r\n    int getAge();\r\n\r\n    // other getters\r\n\r\n    Optional<Boolean> getPermanent();\r\n\r\n    Optional<String> getDateOfJoining();\r\n\r\n    class Builder extends Employee_Builder {\r\n    }\r\n}\r\n```","```\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAge(10)\r\n  .setPermanent(true)\r\n  .build();\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    String getName();\r\n    int getAge();\r\n\r\n    // other getter methods\r\n\r\n    Optional<Boolean> getPermanent();\r\n    Optional<String> getDateOfJoining();\r\n\r\n    @Nullable String getCurrentProject();\r\n\r\n    class Builder extends Employee_Builder {\r\n    }\r\n}\r\n```","```\r\n@FreeBuilder\r\npublic interface Employee {\r\n\r\n    String getName();\r\n    int getAge();\r\n\r\n    // other getter methods\r\n\r\n    List<Long> getAccessTokens();\r\n    Map<String, Long> getAssetsSerialIdMapping();\r\n\r\n    class Builder extends Employee_Builder {\r\n    }\r\n}\r\n```","```\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAge(10)\r\n  .addAccessTokens(1221819L)\r\n  .addAccessTokens(1223441L, 134567L)\r\n  .build();\r\n```","```\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAge(10)\r\n  .addAccessTokens(1221819L)\r\n  .addAccessTokens(1223441L, 134567L)\r\n  .putAssetsSerialIdMapping(\"Laptop\", 12345L)\r\n  .build();\r\n```","```\r\n@FreeBuilder\r\npublic interface Address {\r\n\r\n    String getCity();\r\n\r\n    class Builder extends Address_Builder {\r\n    }\r\n}\r\n```","```\r\nAddress.Builder addressBuilder = new Address.Builder();\r\naddressBuilder.setCity(CITY_NAME);\r\n\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAddress(addressBuilder)\r\n  .build();\r\n```","```\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAddress(addressBuilder)\r\n  .mutateAddress(a -> a.setPinCode(112200))\r\n  .build();\r\n```","```\r\nEmployee employee = builder.setName(\"baeldung\")\r\n  .setAge(10)\r\n  .setEmail(\"[[emailÂ protected]](/web/20220628155456/https://www.baeldung.com/cdn-cgi/l/email-protection)\")\r\n  .buildPartial();\r\n\r\nassertNotNull(employee.getEmail());\r\n```","```\r\n@FreeBuilder\r\npublic abstract class Employee {\r\n\r\n    abstract String getName();\r\n\r\n    abstract int getAge();\r\n\r\n    @Override\r\n    public String toString() {\r\n        return getName() + \" (\" + getAge() + \" years old)\";\r\n    }\r\n\r\n    public static class Builder extends Employee_Builder{\r\n    }\r\n}\r\n```"]