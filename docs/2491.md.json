["```\r\n<dependency>\r\n    <groupId>com.codepoetics</groupId>\r\n    <artifactId>protonpack</artifactId>\r\n    <version>1.15</version>\r\n</dependency>\r\n```","```\r\nStream<Integer> streamOfInt = Stream\r\n  .iterate(1, i -> i + 1);\r\nList<Integer> result = StreamUtils\r\n  .takeWhile(streamOfInt, i -> i < 5)\r\n  .collect(Collectors.toList());\r\nassertThat(result).contains(1, 2, 3, 4);\r\n```","```\r\nStream<Integer> streamOfInt = Stream\r\n  .iterate(1, i -> i + 1);\r\nList<Integer> result = StreamUtils\r\n  .takeUntil(streamOfInt, i -> i >= 5)\r\n  .collect(Collectors.toList());\r\nassertThat(result).containsExactly(1, 2, 3, 4);\r\n```","```\r\nString[] clubs = {\"Juventus\", \"Barcelona\", \"Liverpool\", \"PSG\"};\r\nString[] players = {\"Ronaldo\", \"Messi\", \"Salah\"};\r\nSet<String> zippedFrom2Sources = StreamUtils\r\n  .zip(stream(clubs), stream(players), (club, player) -> club + \" \" + player)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(zippedFrom2Sources)\r\n  .contains(\"Juventus Ronaldo\", \"Barcelona Messi\", \"Liverpool Salah\"); \r\n```","```\r\nString[] leagues = { \"Serie A\", \"La Liga\", \"Premier League\" };\r\nSet<String> zippedFrom3Sources = StreamUtils\r\n  .zip(stream(clubs), stream(players), stream(leagues), \r\n    (club, player, league) -> club + \" \" + player + \" \" + league)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(zippedFrom3Sources).contains(\r\n  \"Juventus Ronaldo Serie A\", \r\n  \"Barcelona Messi La Liga\", \r\n  \"Liverpool Salah Premier League\");\r\n```","```\r\nStream<String> streamOfClubs = Stream\r\n  .of(\"Juventus\", \"Barcelona\", \"Liverpool\");\r\nSet<Indexed<String>> zipsWithIndex = StreamUtils\r\n  .zipWithIndex(streamOfClubs)\r\n  .collect(Collectors.toSet());\r\nassertThat(zipsWithIndex)\r\n  .contains(Indexed.index(0, \"Juventus\"), Indexed.index(1, \"Barcelona\"), \r\n    Indexed.index(2, \"Liverpool\"));\r\n```","```\r\nStream<String> streamOfClubs = Stream\r\n  .of(\"Juventus\", \"Barcelona\", \"Liverpool\", \"PSG\");\r\nStream<String> streamOfPlayers = Stream\r\n  .of(\"Ronaldo\", \"Messi\", \"Salah\");\r\nStream<String> streamOfLeagues = Stream\r\n  .of(\"Serie A\", \"La Liga\", \"Premier League\");\r\n\r\nSet<String> merged = StreamUtils.merge(\r\n  () ->  \"\",\r\n  (valOne, valTwo) -> valOne + \" \" + valTwo,\r\n  streamOfClubs,\r\n  streamOfPlayers,\r\n  streamOfLeagues)\r\n  .collect(Collectors.toSet());\r\n\r\nassertThat(merged)\r\n  .contains(\"Juventus Ronaldo Serie A\", \"Barcelona Messi La Liga\", \r\n    \"Liverpool Salah Premier League\", \"PSG\");\r\n```","```\r\nStream<String> streamOfClubs = Stream\r\n  .of(\"Juventus\", \"Barcelona\", \"PSG\");\r\nStream<String> streamOfPlayers = Stream\r\n  .of(\"Ronaldo\", \"Messi\");\r\n\r\nStream<List<String>> mergedStreamOfList = StreamUtils\r\n  .mergeToList(streamOfClubs, streamOfPlayers);\r\nList<List<String>> mergedListOfList = mergedStreamOfList\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(mergedListOfList.get(0))\r\n  .containsExactly(\"Juventus\", \"Ronaldo\");\r\nassertThat(mergedListOfList.get(1))\r\n  .containsExactly(\"Barcelona\", \"Messi\");\r\nassertThat(mergedListOfList.get(2))\r\n  .containsExactly(\"PSG\");\r\n```","```\r\nStream<String> streamOfClubs = Stream\r\n  .of(\"Juventus\", \"Barcelona\", \"Liverpool\");\r\nStream<String> streamOfPlayers = Stream\r\n  .of(\"Ronaldo\", \"Messi\");\r\nStream<String> streamOfLeagues = Stream\r\n  .of(\"Serie A\", \"La Liga\");\r\n\r\nList<String> interleavedList = StreamUtils\r\n  .interleave(Selectors.roundRobin(), streamOfClubs, streamOfPlayers, streamOfLeagues)\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(interleavedList)\r\n  .hasSize(7)\r\n  .containsExactly(\"Juventus\", \"Ronaldo\", \"Serie A\", \"Barcelona\", \"Messi\", \"La Liga\", \"Liverpool\"); \r\n```","```\r\nInteger[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\nList skippedUntilGreaterThan5 = StreamUtils\r\n  .skipUntil(stream(numbers), i -> i > 5)\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(skippedUntilGreaterThan5).containsExactly(6, 7, 8, 9, 10); \r\n```","```\r\nInteger[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\r\nList skippedWhileLessThanEquals5 = StreamUtils\r\n  .skipWhile(stream(numbers), i -> i <= 5 || )\r\n  .collect(Collectors.toList());\r\n\r\nassertThat(skippedWhileLessThanEquals5).containsExactly(6, 7, 8, 9, 10); \r\n```","```\r\nList skippedWhileGreaterThan5 = StreamUtils\r\n  .skipWhile(stream(numbers), i -> i > 5)\r\n  .collect(Collectors.toList());\r\nassertThat(skippedWhileGreaterThan5).containsExactly(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); \r\n```","```\r\nStream<Integer> unfolded = StreamUtils\r\n  .unfold(2, i -> (i < 100) \r\n    ? Optional.of(i * i) : Optional.empty());\r\n\r\nassertThat(unfolded.collect(Collectors.toList()))\r\n  .containsExactly(2, 4, 16, 256);\r\n```","```\r\nInteger[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8 };\r\n\r\nList<List> windowedWithSkip1 = StreamUtils\r\n  .windowed(stream(numbers), 3, 1)\r\n  .collect(Collectors.toList());\r\nassertThat(windowedWithSkip1)\r\n  .containsExactly(asList(1, 2, 3), asList(2, 3, 4), asList(3, 4, 5), asList(4, 5, 6), asList(5, 6, 7)); \r\n```","```\r\nList<List> windowedWithSkip2 = StreamUtils.windowed(stream(numbers), 3, 2).collect(Collectors.toList());\r\nassertThat(windowedWithSkip2).containsExactly(asList(1, 2, 3), asList(3, 4, 5), asList(5, 6, 7)); \r\n```","```\r\nInteger[] numbers = { 1, 2, 2, 3, 4, 4, 4, 5 };\r\nList<List> aggregated = StreamUtils\r\n  .aggregate(Arrays.stream(numbers), (int1, int2) -> int1.compareTo(int2) == 0)\r\n  .collect(Collectors.toList());\r\nassertThat(aggregated).containsExactly(asList(1), asList(2, 2), asList(3), asList(4, 4, 4), asList(5)); \r\n```","```\r\nList<List> aggregatedFixSize = StreamUtils\r\n  .aggregate(stream(numbers), 5)\r\n  .collect(Collectors.toList());\r\nassertThat(aggregatedFixSize).containsExactly(asList(1, 2, 2, 3, 4), asList(4, 4, 5)); \r\n```","```\r\nInteger[] numbers = { 1, 1, 2, 3, 4, 4, 5 };\r\nStream<List<Integer>> aggregated = StreamUtils\r\n  .aggregateOnListCondition(stream(numbers), \r\n    (currentList, nextInt) -> currentList.stream().mapToInt(Integer::intValue).sum() + nextInt <= 5);\r\nassertThat(aggregated)\r\n  .containsExactly(asList(1, 1, 2), asList(3), asList(4), asList(4), asList(5));\r\n```","```\r\nStreamable<String> s = Streamable.of(\"a\", \"b\", \"c\", \"d\");\r\nList<String> collected1 = s.collect(Collectors.toList());\r\nList<String> collected2 = s.collect(Collectors.toList());\r\nassertThat(collected1).hasSize(4);\r\nassertThat(collected2).hasSize(4);\r\n```","```\r\nStream<String> clubs = Stream.of(\"Juventus\", \"Barcelona\", \"PSG\");\r\nOptional<String> longestName = clubs.collect(CollectorUtils.maxBy(String::length));\r\nassertThat(longestName).contains(\"Barcelona\");\r\n```","```\r\nStream<Integer> singleElement = Stream.of(1);\r\nOptional<Integer> unique = singleElement.collect(CollectorUtils.unique());\r\nassertThat(unique).contains(1); \r\n```","```\r\nStream multipleElement = Stream.of(1, 2, 3);\r\nassertThatExceptionOfType(NonUniqueValueException.class).isThrownBy(() -> {\r\n    multipleElement.collect(CollectorUtils.unique());\r\n}); \r\n```"]