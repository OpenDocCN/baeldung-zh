["```\r\n@Rule\r\npublic WireMockRule serviceMock = new WireMockRule(8089);\r\n```","```\r\nString userAgent = \"BaeldungAgent/1.0\"; \r\nHttpClient httpClient = HttpClients.createDefault();\r\n\r\nHttpGet httpGet = new HttpGet(\"http://localhost:8089/detail\");\r\nhttpGet.setHeader(HttpHeaders.USER_AGENT, userAgent);\r\n\r\nHttpResponse response = httpClient.execute(httpGet);\r\n\r\nassertEquals(response.getStatusLine().getStatusCode(), 200);\r\n```","```\r\nserviceMock.stubFor(get(urlEqualTo(\"/detail\"))\r\n  .withHeader(\"User-Agent\", equalTo(userAgent))\r\n  .willReturn(aResponse().withStatus(200)));\r\n```","```\r\nString xmlBody = \"<xml><id>1</id></xml>\";\r\nHttpClient httpClient = HttpClients.createDefault();\r\nHttpPost httpPost = new HttpPost(\"http://localhost:8089/person\");\r\nhttpPost.setHeader(\"Content-Type\", \"application/xml\");\r\n\r\nStringEntity xmlEntity = new StringEntity(xmlBody);\r\nhttpPost.setEntity(xmlEntity);\r\n\r\nHttpResponse response = httpClient.execute(httpPost);\r\n\r\nassertEquals(response.getStatusLine().getStatusCode(), 200);\r\n```","```\r\nserviceMock.stubFor(post(urlEqualTo(\"/person\"))\r\n  .withHeader(\"Content-Type\", equalTo(\"application/xml\"))\r\n  .withRequestBody(equalTo(xmlBody))\r\n  .willReturn(aResponse().withStatus(200)));\r\n```","```\r\n@Rule\r\npublic WireMockRule proxyMock = new WireMockRule(8090);\r\n```","```\r\nHttpHost proxy = new HttpHost(\"localhost\", 8090);\r\nDefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);\r\nHttpClient httpclient = HttpClients.custom()\r\n  .setRoutePlanner(routePlanner)\r\n  .build(); \r\n```","```\r\nproxyMock.stubFor(get(urlMatching(\".*\"))\r\n  .willReturn(aResponse().proxiedFrom(\"http://localhost:8089/\")));\r\n\r\nserviceMock.stubFor(get(urlEqualTo(\"/private\"))\r\n  .willReturn(aResponse().withStatus(200)));\r\n\r\nassertEquals(response.getStatusLine().getStatusCode(), 200);\r\nproxyMock.verify(getRequestedFor(urlEqualTo(\"/private\")));\r\nserviceMock.verify(getRequestedFor(urlEqualTo(\"/private\")));\r\n```","```\r\nHttpHost proxy = new HttpHost(\"localhost\", 8090);\r\nDefaultProxyRoutePlanner routePlanner = new DefaultProxyRoutePlanner(proxy);\r\n\r\n//Client credentials\r\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\r\ncredentialsProvider.setCredentials(new AuthScope(proxy), \r\n  new UsernamePasswordCredentials(\"username_admin\", \"secret_password\"));\r\n\r\n// Create AuthCache instance\r\nAuthCache authCache = new BasicAuthCache();\r\n\r\nBasicScheme basicAuth = new BasicScheme();\r\nauthCache.put(proxy, basicAuth);\r\nHttpClientContext context = HttpClientContext.create();\r\ncontext.setCredentialsProvider(credentialsProvider);\r\ncontext.setAuthCache(authCache);\r\n\r\nHttpClient httpclient = HttpClients.custom()\r\n  .setRoutePlanner(routePlanner)\r\n  .setDefaultCredentialsProvider(credentialsProvider)\r\n  .build();\r\n```","```\r\nHttpGet httpGet = new HttpGet(\"http://localhost:8089/private\");\r\nHttpResponse response = httpclient.execute(httpGet, context);\r\n```","```\r\nproxyMock.stubFor(get(urlMatching(\"/private\"))\r\n  .willReturn(aResponse().proxiedFrom(\"http://localhost:8089/\")));\r\nserviceMock.stubFor(get(urlEqualTo(\"/private\"))\r\n  .willReturn(aResponse().withStatus(200)));\r\n\r\nassertEquals(response.getStatusLine().getStatusCode(), 200);\r\nproxyMock.verify(getRequestedFor(urlEqualTo(\"/private\"))\r\n  .withHeader(\"Authorization\", containing(\"Basic\")));\r\nserviceMock.verify(getRequestedFor(urlEqualTo(\"/private\")));\r\n```"]