["```\r\nscheme:[//authority][/path][?query][#fragment]\r\n```","```\r\nftp://ftp.is.co.za/rfc/rfc1808.txt\r\nhttps://tools.ietf.org/html/rfc3986\r\nmailto:[[email protected]](/web/20221205131345/http://www.baeldung.com/cdn-cgi/l/email-protection)\r\n\r\ntel:+1-816-555-1212\r\nurn:oasis:names:docbook:dtd:xml:4.1\r\nurn:isbn:1234567890\r\n```","```\r\n@Test\r\npublic void whenCreatingURIs_thenSameInfo() throws Exception {\r\n    URI firstURI = new URI(\r\n      \"somescheme://theuser:[[email protected]](/web/20221205131345/http://www.baeldung.com/cdn-cgi/l/email-protection):80\"\r\n      + \"/some/path?thequery#somefragment\");\r\n\r\n    URI secondURI = new URI(\r\n      \"somescheme\", \"theuser:thepassword\", \"someuthority\", 80,\r\n      \"/some/path\", \"thequery\", \"somefragment\");\r\n\r\n    assertEquals(firstURI.getScheme(), secondURI.getScheme());\r\n    assertEquals(firstURI.getPath(), secondURI.getPath());\r\n}\r\n\r\n@Test\r\npublic void whenCreatingURLs_thenSameInfo() throws Exception {\r\n    URL firstURL = new URL(\r\n      \"http://theuser:[[email protected]](/web/20221205131345/http://www.baeldung.com/cdn-cgi/l/email-protection):80\"\r\n      + \"/path/to/file?thequery#somefragment\");\r\n    URL secondURL = new URL(\"http\", \"somehost\", 80, \"/path/to/file\");\r\n\r\n    assertEquals(firstURL.getHost(), secondURL.getHost());\r\n    assertEquals(firstURL.getPath(), secondURL.getPath());\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingURI_thenCorrect() {\r\n    URI uri = URI.create(\"urn:isbn:1234567890\");\r\n\r\n    assertNotNull(uri);\r\n}\r\n```","```\r\n@Test(expected = MalformedURLException.class)\r\npublic void whenCreatingURLs_thenException() throws Exception {\r\n    URL theURL = new URL(\"otherprotocol://somehost/path/to/file\");\r\n\r\n    assertNotNull(theURL);\r\n}\r\n```","```\r\n@Test\r\npublic void givenObjects_whenConverting_thenCorrect()\r\n  throws MalformedURLException, URISyntaxException {\r\n    String aURIString = \"http://somehost:80/path?thequery\";\r\n    URI uri = new URI(aURIString);\r\n    URL url = new URL(aURIString);\r\n\r\n    URL toURL = uri.toURL();\r\n    URI toURI = url.toURI();\r\n\r\n    assertNotNull(url);\r\n    assertNotNull(uri);\r\n    assertEquals(toURL.toString(), toURI.toString());\r\n}\r\n```","```\r\n@Test(expected = MalformedURLException.class)\r\npublic void givenURI_whenConvertingToURL_thenException()\r\n  throws MalformedURLException, URISyntaxException {\r\n    URI uri = new URI(\"somescheme://someauthority/path?thequery\");\r\n\r\n    URL url = uri.toURL();\r\n\r\n    assertNotNull(url);\r\n}\r\n```","```\r\n@Test\r\npublic void givenURL_whenGettingContents_thenCorrect()\r\n  throws MalformedURLException, IOException {\r\n    URL url = new URL(\"http://courses.baeldung.com\");\r\n\r\n    String contents = IOUtils.toString(url.openStream());\r\n\r\n    assertTrue(contents.contains(\"<!DOCTYPE html>\"));\r\n}\r\n```"]