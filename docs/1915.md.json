["```\r\n<dependency>\r\n    <groupId>com.github.tomakehurst</groupId>\r\n    <artifactId>wiremock</artifactId>\r\n    <version>1.58</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\nWireMockServer wireMockServer = new WireMockServer(String host, int port);\r\n```","```\r\nwireMockServer.start();\r\n```","```\r\nwireMockServer.stop();\r\n```","```\r\nWireMockServer wireMockServer = new WireMockServer();\r\n```","```\r\nwireMockServer.start();\r\n```","```\r\nconfigureFor(\"localhost\", 8080);\r\nstubFor(get(urlEqualTo(\"/baeldung\")).willReturn(aResponse().withBody(\"Welcome to Baeldung!\")));\r\n```","```\r\nCloseableHttpClient httpClient = HttpClients.createDefault();\r\n```","```\r\nHttpGet request = new HttpGet(\"http://localhost:8080/baeldung\");\r\nHttpResponse httpResponse = httpClient.execute(request);\r\n```","```\r\nString responseString = convertResponseToString(httpResponse);\r\n```","```\r\nprivate String convertResponseToString(HttpResponse response) throws IOException {\r\n    InputStream responseStream = response.getEntity().getContent();\r\n    Scanner scanner = new Scanner(responseStream, \"UTF-8\");\r\n    String responseString = scanner.useDelimiter(\"\\\\Z\").next();\r\n    scanner.close();\r\n    return responseString;\r\n}\r\n```","```\r\nverify(getRequestedFor(urlEqualTo(\"/baeldung\")));\r\nassertEquals(\"Welcome to Baeldung!\", stringResponse);\r\n```","```\r\nwireMockServer.stop();\r\n```","```\r\n@Rule\r\npublic WireMockRule wireMockRule = new WireMockRule(int port);\r\n```","```\r\nstubFor(get(urlPathMatching(\"/baeldung/.*\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(200)\r\n  .withHeader(\"Content-Type\", \"application/json\")\r\n  .withBody(\"\\\"testing-library\\\": \\\"WireMock\\\"\")));\r\n```","```\r\nCloseableHttpClient httpClient = HttpClients.createDefault();\r\nHttpGet request = new HttpGet(\"http://localhost:8080/baeldung/wiremock\");\r\nHttpResponse httpResponse = httpClient.execute(request);\r\nString stringResponse = convertHttpResponseToString(httpResponse);\r\n```","```\r\nprivate String convertHttpResponseToString(HttpResponse httpResponse) throws IOException {\r\n    InputStream inputStream = httpResponse.getEntity().getContent();\r\n    return convertInputStreamToString(inputStream);\r\n}\r\n```","```\r\nprivate String convertInputStreamToString(InputStream inputStream) {\r\n    Scanner scanner = new Scanner(inputStream, \"UTF-8\");\r\n    String string = scanner.useDelimiter(\"\\\\Z\").next();\r\n    scanner.close();\r\n    return string;\r\n}\r\n```","```\r\nverify(getRequestedFor(urlEqualTo(\"/baeldung/wiremock\")));\r\nassertEquals(200, httpResponse.getStatusLine().getStatusCode());\r\nassertEquals(\"application/json\", httpResponse.getFirstHeader(\"Content-Type\").getValue());\r\nassertEquals(\"\\\"testing-library\\\": \\\"WireMock\\\"\", stringResponse);\r\n```","```\r\nstubFor(get(urlPathEqualTo(\"/baeldung/wiremock\"))\r\n  .withHeader(\"Accept\", matching(\"text/.*\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(503)\r\n  .withHeader(\"Content-Type\", \"text/html\")\r\n  .withBody(\"!!! Service Unavailable !!!\")));\r\n```","```\r\nCloseableHttpClient httpClient = HttpClients.createDefault();\r\nHttpGet request = new HttpGet(\"http://localhost:8080/baeldung/wiremock\");\r\nrequest.addHeader(\"Accept\", \"text/html\");\r\nHttpResponse httpResponse = httpClient.execute(request);\r\nString stringResponse = convertHttpResponseToString(httpResponse);\r\n```","```\r\nverify(getRequestedFor(urlEqualTo(\"/baeldung/wiremock\")));\r\nassertEquals(503, httpResponse.getStatusLine().getStatusCode());\r\nassertEquals(\"text/html\", httpResponse.getFirstHeader(\"Content-Type\").getValue());\r\nassertEquals(\"!!! Service Unavailable !!!\", stringResponse);\r\n```","```\r\nstubFor(post(urlEqualTo(\"/baeldung/wiremock\"))\r\n  .withHeader(\"Content-Type\", equalTo(\"application/json\"))\r\n  .withRequestBody(containing(\"\\\"testing-library\\\": \\\"WireMock\\\"\"))\r\n  .withRequestBody(containing(\"\\\"creator\\\": \\\"Tom Akehurst\\\"\"))\r\n  .withRequestBody(containing(\"\\\"website\\\": \\\"wiremock.org\\\"\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(200)));\r\n```","```\r\nInputStream jsonInputStream \r\n  = this.getClass().getClassLoader().getResourceAsStream(\"wiremock_intro.json\");\r\nString jsonString = convertInputStreamToString(jsonInputStream);\r\nStringEntity entity = new StringEntity(jsonString);\r\n```","```\r\n{\r\n    \"testing-library\": \"WireMock\",\r\n    \"creator\": \"Tom Akehurst\",\r\n    \"website\": \"wiremock.org\"\r\n}\r\n```","```\r\nCloseableHttpClient httpClient = HttpClients.createDefault();\r\nHttpPost request = new HttpPost(\"http://localhost:8080/baeldung/wiremock\");\r\nrequest.addHeader(\"Content-Type\", \"application/json\");\r\nrequest.setEntity(entity);\r\nHttpResponse response = httpClient.execute(request);\r\n```","```\r\nverify(postRequestedFor(urlEqualTo(\"/baeldung/wiremock\"))\r\n  .withHeader(\"Content-Type\", equalTo(\"application/json\")));\r\nassertEquals(200, response.getStatusLine().getStatusCode());\r\n```","```\r\nprivate HttpResponse generateClientAndReceiveResponseForPriorityTests() throws IOException {\r\n    CloseableHttpClient httpClient = HttpClients.createDefault();\r\n    HttpGet request = new HttpGet(\"http://localhost:8080/baeldung/wiremock\");\r\n    request.addHeader(\"Accept\", \"text/xml\");\r\n    return httpClient.execute(request);\r\n}\r\n```","```\r\nstubFor(get(urlPathMatching(\"/baeldung/.*\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(200)));\r\nstubFor(get(urlPathEqualTo(\"/baeldung/wiremock\"))\r\n  .withHeader(\"Accept\", matching(\"text/.*\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(503)));\r\n```","```\r\nHttpResponse httpResponse = generateClientAndReceiveResponseForPriorityTests();\r\n```","```\r\nverify(getRequestedFor(urlEqualTo(\"/baeldung/wiremock\")));\r\nassertEquals(503, httpResponse.getStatusLine().getStatusCode());\r\n```","```\r\nstubFor(get(urlPathMatching(\"/baeldung/.*\"))\r\n  .atPriority(1)\r\n  .willReturn(aResponse()\r\n  .withStatus(200)));\r\nstubFor(get(urlPathEqualTo(\"/baeldung/wiremock\"))\r\n  .atPriority(2)\r\n  .withHeader(\"Accept\", matching(\"text/.*\"))\r\n  .willReturn(aResponse()\r\n  .withStatus(503)));\r\n```","```\r\nHttpResponse httpResponse = generateClientAndReceiveResponseForPriorityTests();\r\n```","```\r\nverify(getRequestedFor(urlEqualTo(\"/baeldung/wiremock\")));\r\nassertEquals(200, httpResponse.getStatusLine().getStatusCode());\r\n```"]