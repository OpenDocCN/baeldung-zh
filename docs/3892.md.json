["```\r\nList<? extends Number> integerList = new ArrayList<Integer>();\r\nList<? extends Number> doubleList = new ArrayList<Double>();\r\n```","```\r\npublic class Producer {\r\n    public Object produce(String input) {\r\n        Object result = input.toLowerCase();\r\n        return result;\r\n    }\r\n}\r\n```","```\r\npublic class IntegerProducer extends Producer {\r\n    @Override\r\n    public Integer produce(String input) {\r\n        return Integer.parseInt(input);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenInputIsArbitrary_thenProducerProducesString() {\r\n    String arbitraryInput = \"just a random text\";\r\n    Producer producer = new Producer();\r\n\r\n    Object objectOutput = producer.produce(arbitraryInput);\r\n\r\n    assertEquals(arbitraryInput, objectOutput);\r\n    assertEquals(String.class, objectOutput.getClass());\r\n}\r\n```","```\r\n@Test\r\npublic void whenInputIsSupported_thenProducerCreatesInteger() {\r\n    String integerAsString = \"42\";\r\n    Producer producer = new IntegerProducer();\r\n\r\n    Object result = producer.produce(integerAsString);\r\n\r\n    assertEquals(Integer.class, result.getClass());\r\n    assertEquals(Integer.parseInt(integerAsString), result);\r\n}\r\n```","```\r\n@Test\r\npublic void whenInputIsSupported_thenIntegerProducerCreatesIntegerWithoutCasting() {\r\n    String integerAsString = \"42\";\r\n    IntegerProducer producer = new IntegerProducer();\r\n\r\n    Integer result = producer.produce(integerAsString);\r\n\r\n    assertEquals(Integer.parseInt(integerAsString), result);\r\n}\r\n```"]