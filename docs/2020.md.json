["```\r\nprivate void helper(List<int[]> combinations, int data[], int start, int end, int index) {\r\n    if (index == data.length) {\r\n        int[] combination = data.clone();\r\n        combinations.add(combination);\r\n    } else if (start <= end) {\r\n        data[index] = start;\r\n        helper(combinations, data, start + 1, end, index + 1);\r\n        helper(combinations, data, start + 1, end, index);\r\n    }\r\n}\r\n```","```\r\npublic List<int[]> generate(int n, int r) {\r\n    List<int[]> combinations = new ArrayList<>();\r\n    helper(combinations, new int[r], 0, n-1, 0);\r\n    return combinations;\r\n}\r\n```","```\r\nList<int[]> combinations = generate(N, R);\r\nfor (int[] combination : combinations) {\r\n    System.out.println(Arrays.toString(combination));\r\n}\r\nSystem.out.printf(\"generated %d combinations of %d items from %d \", combinations.size(), R, N);\r\n```","```\r\n[0, 1]\r\n[0, 2]\r\n[0, 3]\r\n[0, 4]\r\n[1, 2]\r\n[1, 3]\r\n[1, 4]\r\n[2, 3]\r\n[2, 4]\r\n[3, 4]\r\ngenerated 10 combinations of 2 items from 5\r\n```","```\r\n@Test\r\npublic void givenSetAndSelectionSize_whenCalculatedUsingSetRecursiveAlgorithm_thenExpectedCount() {\r\n    SetRecursiveCombinationGenerator generator = new SetRecursiveCombinationGenerator();\r\n    List<int[]> selection = generator.generate(N, R);\r\n    assertEquals(nCr, selection.size());\r\n}\r\n```","```\r\nprivate void helper(List<int[]> combinations, int data[], int start, int end, int index) {\r\n    if (index == data.length) {\r\n        int[] combination = data.clone();\r\n        combinations.add(combination);\r\n    } else {\r\n        int max = Math.min(end, end + 1 - data.length + index);\r\n        for (int i = start; i <= max; i++) {\r\n            data[index] = i;\r\n            helper(combinations, data, i + 1, end, index + 1);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic List<int[]> generate(int n, int r) {\r\n    List<int[]> combinations = new ArrayList<>();\r\n    helper(combinations, new int[r], 0, n - 1, 0);\r\n    return combinations;\r\n}\r\n```","```\r\n@Test\r\npublic void givenSetAndSelectionSize_whenCalculatedUsingSelectionRecursiveAlgorithm_thenExpectedCount() {\r\n    SelectionRecursiveCombinationGenerator generator = new SelectionRecursiveCombinationGenerator();\r\n    List<int[]> selection = generator.generate(N, R);\r\n    assertEquals(nCr, selection.size());\r\n}\r\n```","```\r\npublic List<int[]> generate(int n, int r) {\r\n    List<int[]> combinations = new ArrayList<>();\r\n    int[] combination = new int[r];\r\n\r\n    // initialize with lowest lexicographic combination\r\n    for (int i = 0; i < r; i++) {\r\n        combination[i] = i;\r\n    }\r\n\r\n    while (combination[r - 1] < n) {\r\n        combinations.add(combination.clone());\r\n\r\n         // generate next combination in lexicographic order\r\n        int t = r - 1;\r\n        while (t != 0 && combination[t] == n - r + t) {\r\n            t--;\r\n        }\r\n        combination[t]++;\r\n        for (int i = t + 1; i < r; i++) {\r\n            combination[i] = combination[i - 1] + 1;\r\n        }\r\n    }\r\n\r\n    return combinations;\r\n}\r\n```","```\r\n@Test\r\npublic void givenSetAndSelectionSize_whenCalculatedUsingIterativeAlgorithm_thenExpectedCount() {\r\n    IterativeCombinationGenerator generator = new IterativeCombinationGenerator();\r\n    List<int[]> selection = generator.generate(N, R);\r\n    assertEquals(nCr, selection.size());\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-math3</artifactId>\r\n    <version>3.6.1</version>\r\n</dependency>\r\n```","```\r\npublic static void generate(int n, int r) {\r\n    Iterator<int[]> iterator = CombinatoricsUtils.combinationsIterator(n, r);\r\n    while (iterator.hasNext()) {\r\n        final int[] combination = iterator.next();\r\n        System.out.println(Arrays.toString(combination));\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency>\r\n```","```\r\nSet<Set<Integer>> combinations = Sets.combinations(ImmutableSet.of(0, 1, 2, 3, 4, 5), 3);\r\n```","```\r\n<dependency>\r\n    <groupId>com.github.dpaukov</groupId>\r\n    <artifactId>combinatoricslib3</artifactId>\r\n    <version>3.3.0</version>\r\n</dependency>\r\n```","```\r\nGenerator.combination(0, 1, 2, 3, 4, 5)\r\n  .simple(3)\r\n  .stream()\r\n  .forEach(System.out::println);\r\n```","```\r\n[0, 1, 2]\r\n[0, 1, 3]\r\n[0, 1, 4]\r\n[0, 1, 5]\r\n[0, 2, 3]\r\n[0, 2, 4]\r\n[0, 2, 5]\r\n[0, 3, 4]\r\n[0, 3, 5]\r\n[0, 4, 5]\r\n[1, 2, 3]\r\n[1, 2, 4]\r\n[1, 2, 5]\r\n[1, 3, 4]\r\n[1, 3, 5]\r\n[1, 4, 5]\r\n[2, 3, 4]\r\n[2, 3, 5]\r\n[2, 4, 5]\r\n[3, 4, 5]\r\n```"]