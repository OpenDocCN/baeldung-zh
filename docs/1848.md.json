["```\r\n<dependency>\r\n    <groupId>com.jayway.jsonpath</groupId>\r\n    <artifactId>json-path</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n```","```\r\n{\r\n    \"tool\": \r\n    {\r\n        \"jsonpath\": \r\n        {\r\n            \"creator\": \r\n            {\r\n                \"name\": \"Jayway Inc.\",\r\n                \"location\": \r\n                [\r\n                    \"Malmo\",\r\n                    \"San Francisco\",\r\n                    \"Helsingborg\"\r\n                ]\r\n            }\r\n        }\r\n    },\r\n\r\n    \"book\": \r\n    [\r\n        {\r\n            \"title\": \"Beginning JSON\",\r\n            \"price\": 49.99\r\n        },\r\n\r\n        {\r\n            \"title\": \"JSON at Work\",\r\n            \"price\": 29.99\r\n        }\r\n    ]\r\n}\r\n```","```\r\n$.tool.jsonpath.creator.location[2]\r\n```","```\r\n$['tool']['jsonpath']['creator']['location'][2]\r\n```","```\r\n<T> T JsonPath.read(String jsonString, String jsonPath, Predicate... filters);\r\n```","```\r\n<T> T JsonPath.parse(String jsonString).read(String jsonPath, Predicate... filters);\r\n```","```\r\nString jsonpathCreatorNamePath = \"$['tool']['jsonpath']['creator']['name']\";\r\nString jsonpathCreatorLocationPath = \"$['tool']['jsonpath']['creator']['location'][*]\";\r\n```","```\r\nDocumentContext jsonContext = JsonPath.parse(jsonDataSourceString);\r\nString jsonpathCreatorName = jsonContext.read(jsonpathCreatorNamePath);\r\nList<String> jsonpathCreatorLocation = jsonContext.read(jsonpathCreatorLocationPath);\r\n```","```\r\nassertEquals(\"Jayway Inc.\", jsonpathCreatorName);\r\nassertThat(jsonpathCreatorLocation.toString(), containsString(\"Malmo\"));\r\nassertThat(jsonpathCreatorLocation.toString(), containsString(\"San Francisco\"));\r\nassertThat(jsonpathCreatorLocation.toString(), containsString(\"Helsingborg\"));\r\n```","```\r\n{\r\n    \"book\": \r\n    [\r\n        {\r\n            \"title\": \"Beginning JSON\",\r\n            \"author\": \"Ben Smith\",\r\n            \"price\": 49.99\r\n        },\r\n\r\n        {\r\n            \"title\": \"JSON at Work\",\r\n            \"author\": \"Tom Marrs\",\r\n            \"price\": 29.99\r\n        },\r\n\r\n        {\r\n            \"title\": \"Learn JSON in a DAY\",\r\n            \"author\": \"Acodemy\",\r\n            \"price\": 8.99\r\n        },\r\n\r\n        {\r\n            \"title\": \"JSON: Questions and Answers\",\r\n            \"author\": \"George Duckett\",\r\n            \"price\": 6.00\r\n        }\r\n    ],\r\n\r\n    \"price range\": \r\n    {\r\n        \"cheap\": 10.00,\r\n        \"medium\": 20.00\r\n    }\r\n}\r\n```","```\r\nFilter expensiveFilter = Filter.filter(Criteria.where(\"price\").gt(20.00));\r\nList<Map<String, Object>> expensive = JsonPath.parse(jsonDataSourceString)\r\n  .read(\"$['book'][?]\", expensiveFilter);\r\npredicateUsageAssertionHelper(expensive);\r\n```","```\r\nPredicate expensivePredicate = new Predicate() {\r\n    public boolean apply(PredicateContext context) {\r\n        String value = context.item(Map.class).get(\"price\").toString();\r\n        return Float.valueOf(value) > 20.00;\r\n    }\r\n};\r\nList<Map<String, Object>> expensive = JsonPath.parse(jsonDataSourceString)\r\n  .read(\"$['book'][?]\", expensivePredicate);\r\npredicateUsageAssertionHelper(expensive);\r\n```","```\r\nList<Map<String, Object>> expensive = JsonPath.parse(jsonDataSourceString)\r\n  .read(\"$['book'][?(@['price'] > $['price range']['medium'])]\");\r\npredicateUsageAssertionHelper(expensive);\r\n```","```\r\nprivate void predicateUsageAssertionHelper(List<?> predicate) {\r\n    assertThat(predicate.toString(), containsString(\"Beginning JSON\"));\r\n    assertThat(predicate.toString(), containsString(\"JSON at Work\"));\r\n    assertThat(predicate.toString(), not(containsString(\"Learn JSON in a DAY\")));\r\n    assertThat(predicate.toString(), not(containsString(\"JSON: Questions and Answers\")));\r\n}\r\n```","```\r\nConfiguration configuration = Configuration.builder().options(Option.<OPTION>).build();\r\n```","```\r\nConfiguration newConfiguration = configuration.addOptions(Option.<OPTION>);\r\n```","```\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"title\": \"Casino Royale\",\r\n        \"director\": \"Martin Campbell\",\r\n        \"starring\": \r\n        [\r\n            \"Daniel Craig\",\r\n            \"Eva Green\"\r\n        ],\r\n        \"desc\": \"Twenty-first James Bond movie\",\r\n        \"release date\": 1163466000000,\r\n        \"box office\": 594275385\r\n    },\r\n\r\n    {\r\n        \"id\": 2,\r\n        \"title\": \"Quantum of Solace\",\r\n        \"director\": \"Marc Forster\",\r\n        \"starring\": \r\n        [\r\n            \"Daniel Craig\",\r\n            \"Olga Kurylenko\"\r\n        ],\r\n        \"desc\": \"Twenty-second James Bond movie\",\r\n        \"release date\": 1225242000000,\r\n        \"box office\": 591692078\r\n    },\r\n\r\n    {\r\n        \"id\": 3,\r\n        \"title\": \"Skyfall\",\r\n        \"director\": \"Sam Mendes\",\r\n        \"starring\": \r\n        [\r\n            \"Daniel Craig\",\r\n            \"Naomie Harris\"\r\n        ],\r\n        \"desc\": \"Twenty-third James Bond movie\",\r\n        \"release date\": 1350954000000,\r\n        \"box office\": 1110526981\r\n    },\r\n\r\n    {\r\n        \"id\": 4,\r\n        \"title\": \"Spectre\",\r\n        \"director\": \"Sam Mendes\",\r\n        \"starring\": \r\n        [\r\n            \"Daniel Craig\",\r\n            \"Lea Seydoux\"\r\n        ],\r\n        \"desc\": \"Twenty-fourth James Bond movie\",\r\n        \"release date\": 1445821200000,\r\n        \"box office\": 879376275\r\n    }\r\n]\r\n```","```\r\nObject dataObject = JsonPath.parse(jsonString).read(\"$[?(@.id == 2)]\");\r\nString dataString = dataObject.toString();\r\n```","```\r\nassertThat(dataString, containsString(\"2\"));\r\nassertThat(dataString, containsString(\"Quantum of Solace\"));\r\nassertThat(dataString, containsString(\"Twenty-second James Bond movie\"));\r\n```","```\r\n@Test\r\npublic void givenStarring_whenRequestingMovieTitle_thenSucceed() {\r\n    List<Map<String, Object>> dataList = JsonPath.parse(jsonString)\r\n      .read(\"$[?('Eva Green' in @['starring'])]\");\r\n    String title = (String) dataList.get(0).get(\"title\");\r\n\r\n    assertEquals(\"Casino Royale\", title);\r\n}\r\n```","```\r\n@Test\r\npublic void givenCompleteStructure_whenCalculatingTotalRevenue_thenSucceed() {\r\n    DocumentContext context = JsonPath.parse(jsonString);\r\n    int length = context.read(\"$.length()\");\r\n    long revenue = 0;\r\n    for (int i = 0; i < length; i++) {\r\n        revenue += context.read(\"$[\" + i + \"]['box office']\", Long.class);\r\n    }\r\n\r\n    assertEquals(594275385L + 591692078L + 1110526981L + 879376275L, revenue);\r\n}\r\n```","```\r\nDocumentContext context = JsonPath.parse(jsonString);\r\nList<Object> revenueList = context.read(\"$[*]['box office']\");\r\nInteger[] revenueArray = revenueList.toArray(new Integer[0]);\r\nArrays.sort(revenueArray);\r\n```","```\r\nint highestRevenue = revenueArray[revenueArray.length - 1];\r\nConfiguration pathConfiguration = \r\n  Configuration.builder().options(Option.AS_PATH_LIST).build();\r\nList<String> pathList = JsonPath.using(pathConfiguration).parse(jsonString)\r\n  .read(\"$[?(@['box office'] == \" + highestRevenue + \")]\");\r\n```","```\r\nMap<String, String> dataRecord = context.read(pathList.get(0));\r\nString title = dataRecord.get(\"title\");\r\n```","```\r\nassertEquals(\"Skyfall\", title);\r\n```","```\r\nDocumentContext context = JsonPath.parse(jsonString);\r\nList<Map<String, Object>> dataList = context.read(\"$[?(@.director == 'Sam Mendes')]\");\r\n```","```\r\nList<Object> dateList = new ArrayList<>();\r\nfor (Map<String, Object> item : dataList) {\r\n    Object date = item.get(\"release date\");\r\n    dateList.add(date);\r\n}\r\nLong[] dateArray = dateList.toArray(new Long[0]);\r\nArrays.sort(dateArray);\r\n```","```\r\nlong latestTime = dateArray[dateArray.length - 1];\r\nList<Map<String, Object>> finalDataList = context.read(\"$[?(@['director'] \r\n  == 'Sam Mendes' && @['release date'] == \" + latestTime + \")]\");\r\nString title = (String) finalDataList.get(0).get(\"title\");\r\n```","```\r\nassertEquals(\"Spectre\", title);\r\n```"]