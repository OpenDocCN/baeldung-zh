["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security.oauth.boot</groupId>\r\n    <artifactId>spring-security-oauth2-autoconfigure</artifactId>\r\n    <version>2.5.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n</dependency>\r\n```","```\r\ngithub.client.clientId=[CLIENT_ID]\r\ngithub.client.clientSecret=[CLIENT_SECRET]\r\ngithub.client.userAuthorizationUri=https://github.com/login/oauth/authorize\r\ngithub.client.accessTokenUri=https://github.com/login/oauth/access_token\r\ngithub.client.clientAuthenticationScheme=form\r\n\r\ngithub.resource.userInfoUri=https://api.github.com/user\r\ngithub.resource.repoUri=https://api.github.com/user/repos\r\n```","```\r\n@Configuration\r\n@EnableOAuth2Client\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n    OAuth2ClientContext oauth2ClientContext;\r\n\r\n    public SecurityConfig(OAuth2ClientContext oauth2ClientContext) {\r\n        this.oauth2ClientContext = oauth2ClientContext;\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\n@Bean\r\npublic OAuth2RestTemplate restTemplate() {\r\n    return new OAuth2RestTemplate(githubClient(), oauth2ClientContext);\r\n}\r\n\r\n@Bean\r\n@ConfigurationProperties(\"github.client\")\r\npublic AuthorizationCodeResourceDetails githubClient() {\r\n    return new AuthorizationCodeResourceDetails();\r\n}\r\n```","```\r\nprivate Filter oauth2ClientFilter() {\r\n    OAuth2ClientAuthenticationProcessingFilter oauth2ClientFilter = new OAuth2ClientAuthenticationProcessingFilter(\"/login/github\");\r\n    OAuth2RestTemplate restTemplate = restTemplate();\r\n    oauth2ClientFilter.setRestTemplate(restTemplate);\r\n    UserInfoTokenServices tokenServices = new UserInfoTokenServices(githubResource().getUserInfoUri(), githubClient().getClientId());\r\n    tokenServices.setRestTemplate(restTemplate);\r\n    oauth2ClientFilter.setTokenServices(tokenServices);\r\n    return oauth2ClientFilter;\r\n}\r\n\r\n@Bean\r\n@ConfigurationProperties(\"github.resource\")\r\npublic ResourceServerProperties githubResource() {\r\n    return new ResourceServerProperties();\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.authorizeRequests().antMatchers(\"/\", \"/login**\", \"/error**\")\r\n      .permitAll().anyRequest().authenticated()\r\n      .and().logout().logoutUrl(\"/logout\").logoutSuccessUrl(\"/\")\r\n      .and().addFilterBefore(oauth2ClientFilter(), BasicAuthenticationFilter.class);\r\n}\r\n\r\n@Bean\r\npublic FilterRegistrationBean<OAuth2ClientContextFilter> oauth2ClientFilterRegistration(OAuth2ClientContextFilter filter) {\r\n    FilterRegistrationBean<OAuth2ClientContextFilter> registration = new FilterRegistrationBean<>();\r\n    registration.setFilter(filter);\r\n    registration.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);\r\n    return registration;\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <title>OAuth2Client</title>\r\n</head>\r\n<body>\r\n<h3>\r\n    <a href=\"/login/github\" th:href=\"@{/home}\" th:if=\"${#httpServletRequest?.remoteUser != undefined }\">\r\n        Go to Home\r\n    </a>\r\n    <a href=\"/hello\" th:href=\"@{/login/github}\" th:if=\"${#httpServletRequest?.remoteUser == undefined }\">\r\n        GitHub Login\r\n    </a>\r\n</h3>\r\n</body>\r\n</html>\r\n```","```\r\n@Controller\r\npublic class AppController {\r\n\r\n    OAuth2RestTemplate restTemplate;\r\n\r\n    public AppController(OAuth2RestTemplate restTemplate) {\r\n        this.restTemplate = restTemplate;\r\n    }\r\n\r\n    @GetMapping(\"/home\")\r\n    public String welcome(Model model, Principal principal) {\r\n        model.addAttribute(\"name\", principal.getName());\r\n        return \"home\";\r\n    }\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <title>Home</title>\r\n</head>\r\n<body>\r\n    <p>\r\n        Welcome <b th:inline=\"text\"> [[${name}]] </b>\r\n    </p>\r\n    <h3>\r\n        <a href=\"/repos\">View Repositories</a><br/><br/>\r\n    </h3>\r\n\r\n    <form th:action=\"@{/logout}\" method=\"POST\">\r\n        <input type=\"submit\" value=\"Logout\"/>\r\n    </form>\r\n</body>\r\n</html>\r\n```","```\r\npublic class GithubRepo {\r\n    Long id;\r\n    String name;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\n@GetMapping(\"/repos\")\r\npublic String repos(Model model) {\r\n    Collection<GithubRepo> repos = restTemplate.getForObject(\"https://api.github.com/user/repos\", Collection.class);\r\n    model.addAttribute(\"repos\", repos);\r\n    return \"repositories\";\r\n}\r\n```","```\r\n<!DOCTYPE html>\r\n<html lang=\"en\"  xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <title>Repositories</title>\r\n</head>\r\n<body>\r\n    <p>\r\n        <h2>Repos</h2>\r\n    </p>\r\n    <ul th:each=\"repo: ${repos}\">\r\n        <li th:text=\"${repo.name}\"></li>\r\n    </ul>\r\n</body>\r\n</html>\r\n```"]