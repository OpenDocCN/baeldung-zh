["```\r\npublic interface JobService {\r\n\r\n    Optional<JobPosition> findCurrentJobPosition(Person person);\r\n\r\n    default boolean assignJobPosition(Person person, JobPosition jobPosition) {\r\n        if(!findCurrentJobPosition(person).isPresent()) {\r\n            person.setCurrentJobPosition(jobPosition);\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class JobServiceUnitTest {\r\n\r\n    @Mock\r\n    private JobService jobService;\r\n\r\n    @Test\r\n    public void givenDefaultMethod_whenCallRealMethod_thenNoExceptionIsRaised() {\r\n        Person person = new Person();\r\n\r\n        when(jobService.findCurrentJobPosition(person))\r\n              .thenReturn(Optional.of(new JobPosition()));\r\n\r\n        doCallRealMethod().when(jobService)\r\n          .assignJobPosition(\r\n            Mockito.any(Person.class), \r\n            Mockito.any(JobPosition.class)\r\n        );\r\n\r\n        assertFalse(jobService.assignJobPosition(person, new JobPosition()));\r\n    }\r\n}\r\n```","```\r\norg.mockito.exceptions.base.MockitoException:\r\nCannot call a real method on java interface. The interface does not have any implementation!\r\nCalling real methods is only possible when mocking concrete classes.\r\n```","```\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>2.7.5</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class UnemploymentServiceImpl implements UnemploymentService {\r\n\r\n    private JobService jobService;\r\n\r\n    public UnemploymentServiceImpl(JobService jobService) {\r\n        this.jobService = jobService;\r\n    }\r\n\r\n    @Override\r\n    public boolean personIsEntitledToUnemploymentSupport(Person person) {\r\n        Optional<JobPosition> optional = jobService.findCurrentJobPosition(person);\r\n\r\n        return !optional.isPresent();\r\n    }\r\n}\r\n```","```\r\npublic class UnemploymentServiceImplUnitTest {\r\n\r\n    @Mock\r\n    private JobService jobService;\r\n\r\n    @InjectMocks\r\n    private UnemploymentServiceImpl unemploymentService;\r\n\r\n    @Test\r\n    public void givenReturnIsOfTypeOptional_whenMocked_thenValueIsEmpty() {\r\n        Person person = new Person();\r\n\r\n        when(jobService.findCurrentJobPosition(any(Person.class)))\r\n          .thenReturn(Optional.empty());\r\n\r\n        assertTrue(unemploymentService.personIsEntitledToUnemploymentSupport(person));\r\n    }\r\n}\r\n```","```\r\npublic class UnemploymentServiceImplUnitTest {\r\n\r\n    @Test\r\n    public void givenReturnIsOptional_whenDefaultValueIsReturned_thenValueIsEmpty() {\r\n        Person person = new Person();\r\n\r\n        assertTrue(unemploymentService.personIsEntitledToUnemploymentSupport(person));\r\n    }\r\n}\r\n```","```\r\npublic interface JobService {\r\n    Stream<JobPosition> listJobs(Person person);\r\n}\r\n```","```\r\npublic class UnemploymentServiceImpl implements UnemploymentService {\r\n\r\n    @Override\r\n    public Optional<JobPosition> searchJob(Person person, String searchString) {\r\n        return jobService.listJobs(person)\r\n          .filter((j) -> j.getTitle().contains(searchString))\r\n          .findFirst();\r\n    }\r\n}\r\n```","```\r\npublic class UnemploymentServiceImplUnitTest {\r\n\r\n    @Test\r\n    public void givenReturnIsOfTypeStream_whenMocked_thenValueIsEmpty() {\r\n        Person person = new Person();\r\n        when(jobService.listJobs(any(Person.class))).thenReturn(Stream.empty());\r\n\r\n        assertFalse(unemploymentService.searchJob(person, \"\").isPresent());\r\n    }\r\n}\r\n```","```\r\npublic class UnemploymentServiceImplUnitTest {\r\n\r\n    @Test\r\n    public void givenReturnIsStream_whenDefaultValueIsReturned_thenValueIsEmpty() {\r\n        Person person = new Person();\r\n\r\n        assertFalse(unemploymentService.searchJob(person, \"\").isPresent());\r\n    }\r\n}\r\n```","```\r\npublic class ArgumentMatcherWithLambdaUnitTest {\r\n\r\n    @Test\r\n    public void whenPersonWithJob_thenIsNotEntitled() {\r\n        Person peter = new Person(\"Peter\");\r\n        Person linda = new Person(\"Linda\");\r\n\r\n        JobPosition teacher = new JobPosition(\"Teacher\");\r\n\r\n        when(jobService.findCurrentJobPosition(\r\n          ArgumentMatchers.argThat(p -> p.getName().equals(\"Peter\"))))\r\n          .thenReturn(Optional.of(teacher));\r\n\r\n        assertTrue(unemploymentService.personIsEntitledToUnemploymentSupport(linda));\r\n        assertFalse(unemploymentService.personIsEntitledToUnemploymentSupport(peter));\r\n    }\r\n}\r\n```","```\r\npublic class CustomAnswerWithLambdaUnitTest {\r\n\r\n    @Before\r\n    public void init() {\r\n        when(jobService.listJobs(any(Person.class))).then((i) ->\r\n          Stream.of(new JobPosition(\"Teacher\"))\r\n          .filter(p -> ((Person) i.getArgument(0)).getName().equals(\"Peter\")));\r\n    }\r\n}\r\n```"]