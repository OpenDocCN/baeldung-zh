["```\r\nimport java.nio.file.*;\r\n```","```\r\nprivate static String HOME = System.getProperty(\"user.home\");\r\n```","```\r\nPath path = Paths.get(\"path string\");\r\n```","```\r\nPath path = Paths.get(URI object);\r\n```","```\r\n@Test\r\npublic void givenPathString_whenCreatesPathObject_thenCorrect() {\r\n    Path p = Paths.get(\"/articles/baeldung\");\r\n\r\n    assertEquals(\"\\\\articles\\\\baeldung\", p.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPathParts_whenCreatesPathObject_thenCorrect() {\r\n    Path p = Paths.get(\"/articles\", \"baeldung\");\r\n\r\n    assertEquals(\"\\\\articles\\\\baeldung\", p.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenRetrievesFileName_thenCorrect() {\r\n    Path p = Paths.get(\"/articles/baeldung/logs\");\r\n\r\n    Path fileName = p.getFileName();\r\n\r\n    assertEquals(\"logs\", fileName.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenRetrievesNameByIndex_thenCorrect() {\r\n    Path p = Paths.get(\"/articles/baeldung/logs\");\r\n    Path name0 = getName(0);\r\n    Path name1 = getName(1);\r\n    Path name2 = getName(2);\r\n    assertEquals(\"articles\", name0.toString());\r\n    assertEquals(\"baeldung\", name1.toString());\r\n    assertEquals(\"logs\", name2.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenCanRetrieveSubsequenceByIndex_thenCorrect() {\r\n    Path p = Paths.get(\"/articles/baeldung/logs\");\r\n\r\n    Path subPath1 = p.subpath(0,1);\r\n    Path subPath2 = p.subpath(0,2);\r\n\r\n    assertEquals(\"articles\", subPath1.toString());\r\n    assertEquals(\"articles\\\\baeldung\", subPath2.toString());\r\n    assertEquals(\"articles\\\\baeldung\\\\logs\", p.subpath(0, 3).toString());\r\n    assertEquals(\"baeldung\", p.subpath(1, 2).toString());\r\n    assertEquals(\"baeldung\\\\logs\", p.subpath(1, 3).toString());\r\n    assertEquals(\"logs\", p.subpath(2, 3).toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenRetrievesParent_thenCorrect() {\r\n    Path p1 = Paths.get(\"/articles/baeldung/logs\");\r\n    Path p2 = Paths.get(\"/articles/baeldung\");\r\n    Path p3 = Paths.get(\"/articles\");\r\n    Path p4 = Paths.get(\"/\");\r\n\r\n    Path parent1 = p1.getParent();\r\n    Path parent2 = p2.getParent();\r\n    Path parent3 = p3.getParent();\r\n    Path parent4 = p4.getParenth();\r\n\r\n    assertEquals(\"\\\\articles\\\\baeldung\", parent1.toString());\r\n    assertEquals(\"\\\\articles\", parent2.toString());\r\n    assertEquals(\"\\\\\", parent3.toString());\r\n    assertEquals(null, parent4);\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenRetrievesRoot_thenCorrect() {\r\n    Path p1 = Paths.get(\"/articles/baeldung/logs\");\r\n    Path p2 = Paths.get(\"c:/articles/baeldung/logs\");\r\n\r\n    Path root1 = p1.getRoot();\r\n    Path root2 = p2.getRoot();\r\n\r\n    assertEquals(\"\\\\\", root1.toString());\r\n    assertEquals(\"c:\\\\\", root2.toString());\r\n}\r\n```","```\r\n/baeldung/./articles\r\n/baeldung/authors/../articles\r\n/baeldung/articles\r\n```","```\r\n@Test\r\npublic void givenPath_whenRemovesRedundancies_thenCorrect1() {\r\n    Path p = Paths.get(\"/home/./baeldung/articles\");\r\n\r\n    Path cleanPath = p.normalize();\r\n\r\n    assertEquals(\"\\\\home\\\\baeldung\\\\articles\", cleanPath.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenRemovesRedundancies_thenCorrect2() {\r\n    Path p = Paths.get(\"/home/baeldung/../articles\");\r\n\r\n    Path cleanPath = p.normalize();\r\n\r\n    assertEquals(\"\\\\home\\\\articles\", cleanPath.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenConvertsToBrowseablePath_thenCorrect() {\r\n    Path p = Paths.get(\"/home/baeldung/articles.html\");\r\n\r\n    URI uri = p.toUri();\r\n    assertEquals(\r\n      \"file:///E:/home/baeldung/articles.html\", \r\n        uri.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenConvertsToAbsolutePath_thenCorrect() {\r\n    Path p = Paths.get(\"/home/baeldung/articles.html\");\r\n\r\n    Path absPath = p.toAbsolutePath();\r\n\r\n    assertEquals(\r\n      \"E:\\\\home\\\\baeldung\\\\articles.html\", \r\n        absPath.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAbsolutePath_whenRetainsAsAbsolute_thenCorrect() {\r\n    Path p = Paths.get(\"E:\\\\home\\\\baeldung\\\\articles.html\");\r\n\r\n    Path absPath = p.toAbsolutePath();\r\n\r\n    assertEquals(\r\n      \"E:\\\\home\\\\baeldung\\\\articles.html\", \r\n        absPath.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenExistingPath_whenGetsRealPathToFile_thenCorrect() {\r\n    Path p = Paths.get(HOME);\r\n\r\n    Path realPath = p.toRealPath();\r\n\r\n    assertEquals(HOME, realPath.toString());\r\n}\r\n```","```\r\n@Test(expected = NoSuchFileException.class)\r\npublic void givenInExistentPath_whenFailsToConvert_thenCorrect() {\r\n    Path p = Paths.get(\"E:\\\\home\\\\baeldung\\\\articles.html\");\r\n\r\n    p.toRealPath();\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoPaths_whenJoinsAndResolves_thenCorrect() {\r\n    Path p = Paths.get(\"/baeldung/articles\");\r\n\r\n    Path p2 = p.resolve(\"java\");\r\n\r\n    assertEquals(\"\\\\baeldung\\\\articles\\\\java\", p2.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenAbsolutePath_whenResolutionRetainsIt_thenCorrect() {\r\n    Path p = Paths.get(\"/baeldung/articles\");\r\n\r\n    Path p2 = p.resolve(\"C:\\\\baeldung\\\\articles\\java\");\r\n\r\n    assertEquals(\"C:\\\\baeldung\\\\articles\\\\java\", p2.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPathWithRoot_whenResolutionRetainsIt_thenCorrect2() {\r\n    Path p = Paths.get(\"/baeldung/articles\");\r\n\r\n    Path p2 = p.resolve(\"/java\");\r\n\r\n    assertEquals(\"\\\\java\", p2.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenSiblingPaths_whenCreatesPathToOther_thenCorrect() {\r\n    Path p1 = Paths.get(\"articles\");\r\n    Path p2 = Paths.get(\"authors\");\r\n\r\n    Path p1_rel_p2 = p1.relativize(p2);\r\n    Path p2_rel_p1 = p2.relativize(p1);\r\n\r\n    assertEquals(\"..\\\\authors\", p1_rel_p2.toString());\r\n    assertEquals(\"..\\\\articles\", p2_rel_p1.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonSiblingPaths_whenCreatesPathToOther_thenCorrect() {\r\n    Path p1 = Paths.get(\"/baeldung\");\r\n    Path p2 = Paths.get(\"/baeldung/authors/articles\");\r\n\r\n    Path p1_rel_p2 = p1.relativize(p2);\r\n    Path p2_rel_p1 = p2.relativize(p1);\r\n\r\n    assertEquals(\"authors\\\\articles\", p1_rel_p2.toString());\r\n    assertEquals(\"..\\\\..\", p2_rel_p1.toString());\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoPaths_whenTestsEquality_thenCorrect() {\r\n    Path p1 = Paths.get(\"/baeldung/articles\");\r\n    Path p2 = Paths.get(\"/baeldung/articles\");\r\n    Path p3 = Paths.get(\"/baeldung/authors\");\r\n\r\n    assertTrue(p1.equals(p2));\r\n    assertFalse(p1.equals(p3));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenInspectsStart_thenCorrect() {\r\n    Path p1 = Paths.get(\"/baeldung/articles\");\r\n\r\n    assertTrue(p1.startsWith(\"/baeldung\"));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPath_whenInspectsEnd_thenCorrect() {\r\n    Path p1 = Paths.get(\"/baeldung/articles\");\r\n\r\n    assertTrue(p1.endsWith(\"articles\"));\r\n}\r\n```"]