["```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.METHOD)\r\n@Documented\r\npublic @interface AliasFor {\r\n    @AliasFor(\"attribute\")\r\n    String value() default \"\";\r\n\r\n    @AliasFor(\"value\")\r\n    String attribute() default \"\";\r\n\r\n    Class<? extends Annotation> annotation() default Annotation.class;\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.TYPE)\r\n@Documented\r\n@Repeatable(ComponentScans.class)\r\npublic @interface ComponentScan {\r\n\r\n    @AliasFor(\"basePackages\")\r\n    String[] value() default {};\r\n\r\n    @AliasFor(\"value\")\r\n    String[] basePackages() default {};\r\n...\r\n}\r\n```","```\r\n@ComponentScan(basePackages = \"com.baeldung.aliasfor\")\r\n\r\n@ComponentScan(value = \"com.baeldung.aliasfor\")\r\n```","```\r\n@ComponentScan(\"com.baeldung.aliasfor\")\r\n```","```\r\n@Target({ElementType.TYPE, ElementType.METHOD})\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@Mapping\r\npublic @interface RequestMapping {\r\n    String name() default \"\";\r\n\r\n    @AliasFor(\"path\")\r\n    String[] value() default {};\r\n\r\n    @AliasFor(\"value\")\r\n    String[] path() default {};\r\n\r\n    RequestMethod[] method() default {};\r\n    ...\r\n}\r\n```","```\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@RequestMapping\r\npublic @interface MyMapping {\r\n    @AliasFor(annotation = RequestMapping.class, attribute = \"method\")\r\n    RequestMethod[] action() default {};\r\n} \r\n```","```\r\n@Controller\r\npublic class MyMappingController {\r\n\r\n    @MyMapping(action = RequestMethod.PATCH, route = \"/test\")\r\n    public void mappingMethod() {}\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenComposedAnnotation_whenExplicitAlias_thenMetaAnnotationAttributeOverridden() {\r\n    for (Method method : controllerClass.getMethods()) {\r\n        if (method.isAnnotationPresent(MyMapping.class)) {\r\n            MyMapping annotation = AnnotationUtils.findAnnotation(method, MyMapping.class);\r\n            RequestMapping metaAnnotation = \r\n              AnnotationUtils.findAnnotation(method, RequestMapping.class);\r\n\r\n            assertEquals(RequestMethod.PATCH, annotation.action()[0]);\r\n\r\n            assertEquals(0, metaAnnotation.method().length);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@AliasFor(annotation = RequestMapping.class, attribute = \"path\")\r\nString[] value() default {};\r\n\r\n@AliasFor(annotation = RequestMapping.class, attribute = \"path\")\r\nString[] mapping() default {};\r\n\r\n@AliasFor(annotation = RequestMapping.class, attribute = \"path\")\r\nString[] route() default {};\r\n```","```\r\n@Test\r\npublic void givenComposedAnnotation_whenImplictAlias_thenAttributesEqual() {\r\n    for (Method method : controllerClass.getMethods()) {\r\n        if (method.isAnnotationPresent(MyMapping.class)) {\r\n            MyMapping annotationOnBean = \r\n              AnnotationUtils.findAnnotation(method, MyMapping.class);\r\n\r\n            assertEquals(annotationOnBean.mapping()[0], annotationOnBean.route()[0]);\r\n            assertEquals(annotationOnBean.value()[0], annotationOnBean.route()[0]);\r\n        }\r\n    }\r\n}\r\n```"]