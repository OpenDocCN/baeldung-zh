["```\r\nclass AQuickTest {\r\n    InstantSource source;\r\n    ...\r\n    Instant getInstant() {\r\n        return source.instant();\r\n    }\r\n}\r\n```","```\r\nvar quickTest = new AQuickTest(InstantSource.system());\r\nquickTest.getInstant();\r\n```","```\r\nclass InstantExample {\r\n    InstantWrapper instantWrapper;\r\n    Instant getCurrentInstantFromInstantWrapper() {\r\n        return instantWrapper.instant();\r\n    }\r\n}\r\n```","```\r\nclass InstantWrapper {\r\n    Clock clock;\r\n    InstantWrapper() {\r\n        this.clock = Clock.systemDefaultZone();\r\n    }\r\n    InstantWrapper(ZonedDateTime zonedDateTime) {\r\n        this.clock = Clock.fixed(zonedDateTime.toInstant(), zonedDateTime.getZone());\r\n    }\r\n    Instant instant() {\r\n        return clock.instant();\r\n    }\r\n}\r\n```","```\r\n// given\r\nLocalDateTime now = LocalDateTime.now();\r\nInstantExample tested = new InstantExample(InstantWrapper.of(now), null);\r\nInstant currentInstant = now.toInstant(ZoneOffset.UTC);\r\n// when\r\nInstant returnedInstant = tested.getCurrentInstantFromWrapper();\r\n// then\r\nassertEquals(currentInstant, returnedInstant);\r\n```","```\r\nclass InstantExample {\r\n    InstantSource instantSource;\r\n    Instant getCurrentInstantFromInstantSource() {\r\n        return instantSource.instant();\r\n    }\r\n}\r\n```","```\r\n// given\r\nLocalDateTime now = LocalDateTime.now();\r\nInstantSource instantSource = InstantSource.fixed(now.toInstant(ZoneOffset.UTC));\r\nInstantExample tested = new InstantExample(null, instantSource);\r\nInstant currentInstant = instantSource.instant();\r\n// when\r\nInstant returnedInstant = tested.getCurrentInstantFromInstantSource();\r\n// then\r\nassertEquals(currentInstant, returnedInstant);\r\n```","```\r\nClock.systemDefaultZone().instant();\r\n```","```\r\n2022-01-05T06:47:15.001890204Z\r\n```","```\r\nLocalDateTime.now().toInstant(ZoneOffset.UTC);\r\n```","```\r\n2022-01-05T07:47:15.001890204Z\r\n```","```\r\nInstant i = InstantSource.system().instant();\r\n```","```\r\nInstant i = InstantSource.system().instant();\r\nSystem.out.println(i);\r\n```","```\r\n2022-01-05T07:44:44.861040341Z\r\n```","```\r\nInstant i = InstantSource.tick(InstantSource.system(), Duration.ofHours(2)).instant();\r\n```","```\r\n2022-01-05T06:00:00Z\r\n```","```\r\nLocalDateTime fixed = LocalDateTime.of(2022, 1, 1, 0, 0);\r\nInstant i = InstantSource.fixed(fixed.toInstant(ZoneOffset.UTC)).instant();\r\nSystem.out.println(i);\r\n```","```\r\n2022-01-01T00:00:00Z\r\n```","```\r\nLocalDateTime fixed = LocalDateTime.of(2022, 1, 1, 0, 0);\r\nInstantSource fixedSource = InstantSource.fixed(fixed.toInstant(ZoneOffset.UTC));\r\nInstant i = InstantSource.offset(fixedSource, Duration.ofDays(5)).instant();\r\nSystem.out.println(i);\r\n```","```\r\n2022-01-06T00:00:00Z\r\n```","```\r\nInstant i = InstantSource.system().instant();\r\nSystem.out.println(i);\r\n```","```\r\n2022-01-05T08:29:17.641839778Z\r\n```","```\r\nlong m = InstantSource.system().millis();\r\nSystem.out.println(m);\r\n```","```\r\n1641371476655\r\n```","```\r\nClock c = InstantSource.system().withZone(ZoneId.of(\"-4\"));\r\nSystem.out.println(c);\r\n```","```\r\nSystemClock[-04:00]\r\n```"]