["```\r\n<R> Stream<R> mapMultiâ€‹(BiConsumer<T, Consumer<R>> mapper)\r\n```","```\r\nList<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\r\ndouble percentage = .01;\r\nList<Double> evenDoubles = integers.stream()\r\n  .<Double>mapMulti((integer, consumer) -> {\r\n    if (integer % 2 == 0) {\r\n        consumer.accept((double) integer * ( 1 + percentage));\r\n    }\r\n  })\r\n  .collect(toList());\r\n```","```\r\nList<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\r\ndouble percentage = .01;\r\nList<Double> evenDoubles = integers.stream()\r\n  .filter(integer -> integer % 2 == 0)\r\n  .<Double>map(integer -> ((double) integer * ( 1 + percentage)))\r\n  .collect(toList());\r\n```","```\r\nList<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);\r\ndouble percentage = .01;\r\ndouble sum = integers.stream()\r\n  .mapMultiToDouble((integer, consumer) -> {\r\n    if (integer % 2 == 0) {\r\n        consumer.accept(integer * (1 + percentage));\r\n    }\r\n  })\r\n  .sum();\r\n```","```\r\npublic class Album {\r\n\r\n    private String albumName;\r\n    private int albumCost;\r\n    private List<Artist> artists;\r\n\r\n    Album(String albumName, int albumCost, List<Artist> artists) {\r\n        this.albumName = albumName;\r\n        this.albumCost = albumCost;\r\n        this.artists = artists;\r\n    }\r\n    // ...\r\n}\r\n```","```\r\npublic class Artist {\r\n\r\n    private final String name;\r\n    private boolean associatedMajorLabels;\r\n    private List<String> majorLabels;\r\n\r\n    Artist(String name, boolean associatedMajorLabels, List<String> majorLabels) {\r\n        this.name = name;\r\n        this.associatedMajorLabels = associatedMajorLabels;\r\n        this.majorLabels = majorLabels;\r\n    }\r\n    // ...\r\n}\r\n```","```\r\nList<Pair<String, String>> artistAlbum = albums.stream()\r\n  .<Pair<String, String>> mapMulti((album, consumer) -> {\r\n      for (Artist artist : album.getArtists()) {\r\n          consumer.accept(new ImmutablePair<String, String>(artist.getName(), album.getAlbumName()));\r\n      }\r\n  })\r\n```","```\r\nList<Pair<String, String>> artistAlbum = albums.stream()\r\n  .flatMap(album -> album.getArtists()\r\n      .stream()\r\n      .map(artist -> new ImmutablePair<String, String>(artist.getName(), album.getAlbumName())))\r\n  .collect(toList()); \r\n```","```\r\nint upperCost = 9;\r\nList<Pair<String, String>> artistAlbum = albums.stream()\r\n  .<Pair<String, String>> mapMulti((album, consumer) -> {\r\n    if (album.getAlbumCost() < upperCost) {\r\n        for (Artist artist : album.getArtists()) {\r\n            consumer.accept(new ImmutablePair<String, String>(artist.getName(), album.getAlbumName()));\r\n      }\r\n    }\r\n  })\r\n```","```\r\nint upperCost = 9;\r\nList<Pair<String, String>> artistAlbum = albums.stream()\r\n  .flatMap(album -> album.getArtists()\r\n    .stream()\r\n    .filter(artist -> upperCost > album.getAlbumCost())\r\n    .map(artist -> new ImmutablePair<String, String>(artist.getName(), album.getAlbumName())))\r\n  .collect(toList());\r\n```","```\r\npublic class Album {\r\n\r\n    //...\r\n    public void artistAlbumPairsToMajorLabels(Consumer<Pair<String, String>> consumer) {\r\n\r\n        for (Artist artist : artists) {\r\n            if (artist.isAssociatedMajorLabels()) {\r\n                String concatLabels = artist.getMajorLabels().stream().collect(Collectors.joining(\",\"));\r\n                consumer.accept(new ImmutablePair<>(artist.getName()+ \":\" + albumName, concatLabels));\r\n            }\r\n        }\r\n    }\r\n    // ...\r\n}\r\n```","```\r\nList<Pair<String, String>> copyrightedArtistAlbum = albums.stream()\r\n  .<Pair<String, String>> mapMulti(Album::artistAlbumPairsToMajorLabels)\r\n  .collect(toList());\r\n```"]