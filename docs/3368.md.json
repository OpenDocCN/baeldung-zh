["```\r\nclass Producer implements Runnable {\r\n    private TransferQueue<String> transferQueue;\r\n\r\n    private String name;\r\n\r\n    private Integer numberOfMessagesToProduce;\r\n\r\n    public AtomicInteger numberOfProducedMessages\r\n      = new AtomicInteger();\r\n\r\n    @Override\r\n    public void run() {\r\n        for (int i = 0; i < numberOfMessagesToProduce; i++) {\r\n            try {\r\n                boolean added \r\n                  = transferQueue.tryTransfer(\"A\" + i, 4000, TimeUnit.MILLISECONDS);\r\n                if(added){\r\n                    numberOfProducedMessages.incrementAndGet();\r\n                }\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    // standard constructors\r\n}\r\n```","```\r\nclass Consumer implements Runnable {\r\n\r\n    private TransferQueue<String> transferQueue;\r\n\r\n    private String name;\r\n\r\n    private int numberOfMessagesToConsume;\r\n\r\n    public AtomicInteger numberOfConsumedMessages\r\n     = new AtomicInteger();\r\n\r\n    @Override\r\n    public void run() {\r\n        for (int i = 0; i < numberOfMessagesToConsume; i++) {\r\n            try {\r\n                String element = transferQueue.take();\r\n                longProcessing(element);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private void longProcessing(String element)\r\n      throws InterruptedException {\r\n        numberOfConsumedMessages.incrementAndGet();\r\n        Thread.sleep(500);\r\n    }\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseOneProducerAndNoConsumers_thenShouldFailWithTimeout() \r\n  throws InterruptedException {\r\n    // given\r\n    TransferQueue<String> transferQueue = new LinkedTransferQueue<>();\r\n    ExecutorService exService = Executors.newFixedThreadPool(2);\r\n    Producer producer = new Producer(transferQueue, \"1\", 3);\r\n\r\n    // when\r\n    exService.execute(producer);\r\n\r\n    // then\r\n    exService.awaitTermination(5000, TimeUnit.MILLISECONDS);\r\n    exService.shutdown();\r\n\r\n    assertEquals(producer.numberOfProducedMessages.intValue(), 0);\r\n}\r\n```","```\r\nProducer: 1 is waiting to transfer...\r\ncan not add an element due to the timeout\r\nProducer: 1 is waiting to transfer...\r\n```","```\r\n@Test\r\npublic void whenUseOneConsumerAndOneProducer_thenShouldProcessAllMessages() \r\n  throws InterruptedException {\r\n    // given\r\n    TransferQueue<String> transferQueue = new LinkedTransferQueue<>();\r\n    ExecutorService exService = Executors.newFixedThreadPool(2);\r\n    Producer producer = new Producer(transferQueue, \"1\", 3);\r\n    Consumer consumer = new Consumer(transferQueue, \"1\", 3);\r\n\r\n    // when\r\n    exService.execute(producer);\r\n    exService.execute(consumer);\r\n\r\n    // then\r\n    exService.awaitTermination(5000, TimeUnit.MILLISECONDS);\r\n    exService.shutdown();\r\n\r\n    assertEquals(producer.numberOfProducedMessages.intValue(), 3);\r\n    assertEquals(consumer.numberOfConsumedMessages.intValue(), 3);\r\n}\r\n```","```\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 is waiting to take element...\r\nProducer: 1 transferred element: A0\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 received element: A0\r\nConsumer: 1 is waiting to take element...\r\nProducer: 1 transferred element: A1\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 received element: A1\r\nConsumer: 1 is waiting to take element...\r\nProducer: 1 transferred element: A2\r\nConsumer: 1 received element: A2\r\n```","```\r\n@Test\r\npublic void whenMultipleConsumersAndProducers_thenProcessAllMessages() \r\n  throws InterruptedException {\r\n    // given\r\n    TransferQueue<String> transferQueue = new LinkedTransferQueue<>();\r\n    ExecutorService exService = Executors.newFixedThreadPool(3);\r\n    Producer producer1 = new Producer(transferQueue, \"1\", 3);\r\n    Producer producer2 = new Producer(transferQueue, \"2\", 3);\r\n    Consumer consumer1 = new Consumer(transferQueue, \"1\", 3);\r\n    Consumer consumer2 = new Consumer(transferQueue, \"2\", 3);\r\n\r\n    // when\r\n    exService.execute(producer1);\r\n    exService.execute(producer2);\r\n    exService.execute(consumer1);\r\n    exService.execute(consumer2);\r\n\r\n    // then\r\n    exService.awaitTermination(10_000, TimeUnit.MILLISECONDS);\r\n    exService.shutdown();\r\n\r\n    assertEquals(producer1.numberOfProducedMessages.intValue(), 3);\r\n    assertEquals(producer2.numberOfProducedMessages.intValue(), 3);\r\n}\r\n```","```\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 is waiting to take element...\r\nProducer: 2 is waiting to transfer...\r\nProducer: 1 transferred element: A0\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 received element: A0\r\nConsumer: 1 is waiting to take element...\r\nProducer: 2 transferred element: A0\r\nProducer: 2 is waiting to transfer...\r\nConsumer: 1 received element: A0\r\nConsumer: 1 is waiting to take element...\r\nProducer: 1 transferred element: A1\r\nProducer: 1 is waiting to transfer...\r\nConsumer: 1 received element: A1\r\nConsumer: 2 is waiting to take element...\r\nProducer: 2 transferred element: A1\r\nProducer: 2 is waiting to transfer...\r\nConsumer: 2 received element: A1\r\nConsumer: 2 is waiting to take element...\r\nProducer: 1 transferred element: A2\r\nConsumer: 2 received element: A2\r\nConsumer: 2 is waiting to take element...\r\nProducer: 2 transferred element: A2\r\nConsumer: 2 received element: A2\r\n```"]