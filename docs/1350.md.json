["```\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-core</artifactId>\r\n    <version>3.4.17</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>io.projectreactor</groupId>\r\n    <artifactId>reactor-test</artifactId>\r\n    <version>3.4.17</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class CharacterGenerator {\r\n\r\n    public Flux<Character> generateCharacters() {\r\n\r\n        return Flux.generate(() -> 97, (state, sink) -> {\r\n            char value = (char) state.intValue();\r\n            sink.next(value);\r\n            if (value == 'z') {\r\n                sink.complete();\r\n            }\r\n            return state + 1;\r\n        });\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenGeneratingCharacters_thenCharactersAreProduced() {\r\n    CharacterGenerator characterGenerator = new CharacterGenerator();\r\n    Flux<Character> characterFlux = characterGenerator.generateCharacters().take(3);\r\n\r\n    StepVerifier.create(characterFlux)\r\n      .expectNext('a', 'b', 'c')\r\n      .expectComplete()\r\n      .verify();\r\n}\r\n```","```\r\npublic class CharacterCreator {\r\n    public Consumer<List<Character>> consumer;\r\n\r\n    public Flux<Character> createCharacterSequence() {\r\n        return Flux.create(sink -> CharacterCreator.this.consumer = items -> items.forEach(sink::next));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingCharactersWithMultipleThreads_thenSequenceIsProducedAsynchronously() throws InterruptedException {\r\n    CharacterGenerator characterGenerator = new CharacterGenerator();\r\n    List<Character> sequence1 = characterGenerator.generateCharacters().take(3).collectList().block();\r\n    List<Character> sequence2 = characterGenerator.generateCharacters().take(2).collectList().block();\r\n} \r\n```","```\r\nCharacterCreator characterCreator = new CharacterCreator();\r\nThread producerThread1 = new Thread(() -> characterCreator.consumer.accept(sequence1));\r\nThread producerThread2 = new Thread(() -> characterCreator.consumer.accept(sequence2));\r\n```","```\r\nList<Character> consolidated = new ArrayList<>();\r\ncharacterCreator.createCharacterSequence().subscribe(consolidated::add);\r\n```","```\r\nproducerThread1.start();\r\nproducerThread2.start();\r\nproducerThread1.join();\r\nproducerThread2.join(); \r\n```","```\r\nassertThat(consolidated).containsExactlyInAnyOrder('a', 'b', 'c', 'a', 'b');\r\n```"]