["```\r\n@Bean(name = \"partitionerJob\")\r\npublic Job partitionerJob() \r\n  throws UnexpectedInputException, MalformedURLException, ParseException {\r\n    return jobs.get(\"partitioningJob\")\r\n      .start(partitionStep())\r\n      .build();\r\n}\r\n```","```\r\n@Bean\r\npublic Step partitionStep() \r\n  throws UnexpectedInputException, MalformedURLException, ParseException {\r\n    return steps.get(\"partitionStep\")\r\n      .partitioner(\"slaveStep\", partitioner())\r\n      .step(slaveStep())\r\n      .taskExecutor(taskExecutor())\r\n      .build();\r\n}\r\n```","```\r\npublic class CustomMultiResourcePartitioner implements Partitioner {\r\n\r\n    @Override\r\n    public Map<String, ExecutionContext> partition(int gridSize) {\r\n        Map<String, ExecutionContext> map = new HashMap<>(gridSize);\r\n        int i = 0, k = 1;\r\n        for (Resource resource : resources) {\r\n            ExecutionContext context = new ExecutionContext();\r\n            Assert.state(resource.exists(), \"Resource does not exist: \" \r\n              + resource);\r\n            context.putString(keyName, resource.getFilename());\r\n            context.putString(\"opFileName\", \"output\"+k+++\".xml\");\r\n            map.put(PARTITION_KEY + i, context);\r\n            i++;\r\n        }\r\n        return map;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic CustomMultiResourcePartitioner partitioner() {\r\n    CustomMultiResourcePartitioner partitioner \r\n      = new CustomMultiResourcePartitioner();\r\n    Resource[] resources;\r\n    try {\r\n        resources = resoursePatternResolver\r\n          .getResources(\"file:src/main/resources/input/*.csv\");\r\n    } catch (IOException e) {\r\n        throw new RuntimeException(\"I/O problems when resolving\"\r\n          + \" the input file pattern.\", e);\r\n    }\r\n    partitioner.setResources(resources);\r\n    return partitioner;\r\n}\r\n```","```\r\n@StepScope\r\n@Bean\r\npublic FlatFileItemReader<Transaction> itemReader(\r\n  @Value(\"#{stepExecutionContext[fileName]}\") String filename)\r\n  throws UnexpectedInputException, ParseException {\r\n\r\n    FlatFileItemReader<Transaction> reader \r\n      = new FlatFileItemReader<>();\r\n    DelimitedLineTokenizer tokenizer = new DelimitedLineTokenizer();\r\n    String[] tokens \r\n      = {\"username\", \"userid\", \"transactiondate\", \"amount\"};\r\n    tokenizer.setNames(tokens);\r\n    reader.setResource(new ClassPathResource(\"input/\" + filename));\r\n    DefaultLineMapper<Transaction> lineMapper \r\n      = new DefaultLineMapper<>();\r\n    lineMapper.setLineTokenizer(tokenizer);\r\n    lineMapper.setFieldSetMapper(new RecordFieldSetMapper());\r\n    reader.setLinesToSkip(1);\r\n    reader.setLineMapper(lineMapper);\r\n    return reader;\r\n} \r\n```","```\r\n@Bean\r\n@StepScope\r\npublic ItemWriter<Transaction> itemWriter(Marshaller marshaller, \r\n  @Value(\"#{stepExecutionContext[opFileName]}\") String filename)\r\n  throws MalformedURLException {\r\n    StaxEventItemWriter<Transaction> itemWriter \r\n      = new StaxEventItemWriter<Transaction>();\r\n    itemWriter.setMarshaller(marshaller);\r\n    itemWriter.setRootTagName(\"transactionRecord\");\r\n    itemWriter.setResource(new ClassPathResource(\"xml/\" + filename));\r\n    return itemWriter;\r\n}\r\n```","```\r\n@Bean\r\npublic Step slaveStep() \r\n  throws UnexpectedInputException, MalformedURLException, ParseException {\r\n    return steps.get(\"slaveStep\").<Transaction, Transaction>chunk(1)\r\n      .reader(itemReader(null))\r\n      .writer(itemWriter(marshaller(), null))\r\n      .build();\r\n}\r\n```"]