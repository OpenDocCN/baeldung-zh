["```\r\n@Controller\r\n@RequestMapping(\"/user\")\r\n@ResponseBody\r\npublic class UserController {\r\n\r\n    @GetMapping(\"/example\")\r\n    public User fetchUserExample() {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan(\"com.baeldung.springdispatcherservlet\")\r\npublic class AppConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public UrlBasedViewResolver viewResolver() {\r\n        UrlBasedViewResolver resolver\r\n          = new UrlBasedViewResolver();\r\n        resolver.setPrefix(\"/WEB-INF/view/\");\r\n        resolver.setSuffix(\".jsp\");\r\n        resolver.setViewClass(JstlView.class);\r\n        return resolver;\r\n    }\r\n}\r\n```","```\r\n<property name=\"prefix\" value=\"/jsp/\"/>\r\n```","```\r\nhttp://localhost:8080/\r\n```","```\r\nhttp://localhost:8080/dispatcherexample-1.0.0/jsp/\r\n```","```\r\nsrc -|\r\n     main -|\r\n            java\r\n            resources\r\n            webapp -|\r\n                    jsp\r\n                    WEB-INF\r\n```","```\r\n@Bean\r\npublic CookieLocaleResolver cookieLocaleResolverExample() {\r\n    CookieLocaleResolver localeResolver \r\n      = new CookieLocaleResolver();\r\n    localeResolver.setDefaultLocale(Locale.ENGLISH);\r\n    localeResolver.setCookieName(\"locale-cookie-resolver-example\");\r\n    localeResolver.setCookieMaxAge(3600);\r\n    return localeResolver;\r\n}\r\n\r\n@Bean \r\npublic LocaleResolver sessionLocaleResolver() { \r\n    SessionLocaleResolver localeResolver = new SessionLocaleResolver(); \r\n    localeResolver.setDefaultLocale(Locale.US); \r\n    localResolver.setDefaultTimeZone(TimeZone.getTimeZone(\"UTC\"));\r\n    return localeResolver; \r\n} \r\n```","```\r\n@Override\r\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n    registry.addResourceHandler(\"/resources/**\")\r\n      .addResourceLocations(\"/\", \"/resources/\")\r\n      .setCachePeriod(3600)\r\n      .resourceChain(true)\r\n      .addResolver(new PathResourceResolver());\r\n}\r\n\r\n@Bean\r\npublic ResourceBundleThemeSource themeSource() {\r\n    ResourceBundleThemeSource themeSource\r\n      = new ResourceBundleThemeSource();\r\n    themeSource.setDefaultEncoding(\"UTF-8\");\r\n    themeSource.setBasenamePrefix(\"themes.\");\r\n    return themeSource;\r\n} \r\n```","```\r\n@Bean\r\npublic CookieThemeResolver themeResolver() {\r\n    CookieThemeResolver resolver = new CookieThemeResolver();\r\n    resolver.setDefaultThemeName(\"example\");\r\n    resolver.setCookieName(\"example-theme-cookie\");\r\n    return resolver;\r\n}\r\n\r\n@Bean\r\npublic ThemeChangeInterceptor themeChangeInterceptor() {\r\n   ThemeChangeInterceptor interceptor\r\n     = new ThemeChangeInterceptor();\r\n   interceptor.setParamName(\"theme\");\r\n   return interceptor;\r\n}\r\n\r\n@Override\r\npublic void addInterceptors(InterceptorRegistry registry) {\r\n    registry.addInterceptor(themeChangeInterceptor());\r\n} \r\n```","```\r\n<link rel=\"stylesheet\" href=\"${ctx}/<spring:theme code='styleSheet'/>\" type=\"text/css\"/>\r\n```","```\r\nhttp://localhost:8080/dispatcherexample-1.0.0/?theme=example\r\n```","```\r\n@Bean\r\npublic CommonsMultipartResolver multipartResolver() \r\n  throws IOException {\r\n    CommonsMultipartResolver resolver\r\n      = new CommonsMultipartResolver();\r\n    resolver.setMaxUploadSize(10000000);\r\n    return resolver;\r\n} \r\n```","```\r\n@Controller\r\npublic class MultipartController {\r\n\r\n    @Autowired\r\n    ServletContext context;\r\n\r\n    @PostMapping(\"/upload\")\r\n    public ModelAndView FileuploadController(\r\n      @RequestParam(\"file\") MultipartFile file) \r\n      throws IOException {\r\n        ModelAndView modelAndView = new ModelAndView(\"index\");\r\n        InputStream in = file.getInputStream();\r\n        String path = new File(\".\").getAbsolutePath();\r\n        FileOutputStream f = new FileOutputStream(\r\n          path.substring(0, path.length()-1)\r\n          + \"/uploads/\" + file.getOriginalFilename());\r\n        int ch;\r\n        while ((ch = in.read()) != -1) {\r\n            f.write(ch);\r\n        }\r\n        f.flush();\r\n        f.close();\r\n        in.close();\r\n        modelAndView.getModel()\r\n          .put(\"message\", \"File uploaded successfully!\");\r\n        return modelAndView;\r\n    }\r\n}\r\n```","```\r\n@ControllerAdvice\r\npublic class ExampleGlobalExceptionHandler {\r\n\r\n    @ExceptionHandler\r\n    @ResponseBody \r\n    public String handleExampleException(Exception e) {\r\n        // ...\r\n    }\r\n}\r\n```","```\r\n@Controller\r\npublic class FooController{\r\n\r\n    @ExceptionHandler({ CustomException1.class, CustomException2.class })\r\n    public void handleException() {\r\n        // ...\r\n    }\r\n    // ...\r\n}\r\n```"]