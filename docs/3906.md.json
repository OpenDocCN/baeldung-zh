["```\r\n<dependency>\r\n    <groupId>com.google.jimfs</groupId>\r\n    <artifactId>jimfs</artifactId>\r\n    <version>1.1</version>\r\n</dependency>\r\n```","```\r\npublic class FileRepository {\r\n\r\n    void create(Path path, String fileName) {\r\n        Path filePath = path.resolve(fileName);\r\n        try {\r\n            Files.createFile(filePath);\r\n        } catch (IOException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n\r\n    String read(Path path) {\r\n        try {\r\n            return new String(Files.readAllBytes(path));\r\n        } catch (IOException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n\r\n    String update(Path path, String newContent) {\r\n        try {\r\n            Files.write(path, newContent.getBytes());\r\n            return newContent;\r\n        } catch (IOException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n\r\n    void delete(Path path) {\r\n        try {\r\n            Files.deleteIfExists(path);\r\n        } catch (IOException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\n@DisplayName(\"Should create a file on a file system\")\r\nvoid givenUnixSystem_whenCreatingFile_thenCreatedInPath() {\r\n    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\r\n    String fileName = \"newFile.txt\";\r\n    Path pathToStore = fileSystem.getPath(\"\");\r\n\r\n    fileRepository.create(pathToStore, fileName);\r\n\r\n    assertTrue(Files.exists(pathToStore.resolve(fileName)));\r\n}\r\n```","```\r\n@Test\r\n@DisplayName(\"Should read the content of the file\")\r\nvoid givenOSXSystem_whenReadingFile_thenContentIsReturned() throws Exception {\r\n    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.osX());\r\n    Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\r\n    Files.copy(getResourceFilePath(), resourceFilePath);\r\n\r\n    String content = fileRepository.read(resourceFilePath);\r\n\r\n    assertEquals(FILE_CONTENT, content);\r\n}\r\n```","```\r\n@Test\r\n@DisplayName(\"Should update the content of the file\")\r\nvoid givenWindowsSystem_whenUpdatingFile_thenContentHasChanged() throws Exception {\r\n    FileSystem fileSystem = Jimfs.newFileSystem(Configuration.windows());\r\n    Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\r\n    Files.copy(getResourceFilePath(), resourceFilePath);\r\n    String newContent = \"I'm updating you.\";\r\n\r\n    String content = fileRepository.update(resourceFilePath, newContent);\r\n\r\n    assertEquals(newContent, content);\r\n    assertEquals(newContent, fileRepository.read(resourceFilePath));\r\n}\r\n```","```\r\n@Test\r\n@DisplayName(\"Should delete file\")\r\nvoid givenCurrentSystem_whenDeletingFile_thenFileHasBeenDeleted() throws Exception {\r\n    FileSystem fileSystem = Jimfs.newFileSystem();\r\n    Path resourceFilePath = fileSystem.getPath(RESOURCE_FILE_NAME);\r\n    Files.copy(getResourceFilePath(), resourceFilePath);\r\n\r\n    fileRepository.delete(resourceFilePath);\r\n\r\n    assertFalse(Files.exists(resourceFilePath));\r\n}\r\n```","```\r\nvoid move(Path origin, Path destination) {\r\n    try {\r\n        Files.createDirectories(destination);\r\n        Files.move(origin, destination, StandardCopyOption.REPLACE_EXISTING);\r\n    } catch (IOException ex) {\r\n        throw new UncheckedIOException(ex);\r\n    }\r\n}\r\n```","```\r\nprivate static Stream<Arguments> provideFileSystem() {\r\n    return Stream.of(\r\n            Arguments.of(Jimfs.newFileSystem(Configuration.unix())),\r\n            Arguments.of(Jimfs.newFileSystem(Configuration.windows())),\r\n            Arguments.of(Jimfs.newFileSystem(Configuration.osX())));\r\n}\r\n\r\n@ParameterizedTest\r\n@DisplayName(\"Should move file to new destination\")\r\n@MethodSource(\"provideFileSystem\")\r\nvoid givenEachSystem_whenMovingFile_thenMovedToNewPath(FileSystem fileSystem) throws Exception {\r\n    Path origin = fileSystem.getPath(RESOURCE_FILE_NAME);\r\n    Files.copy(getResourceFilePath(), origin);\r\n    Path destination = fileSystem.getPath(\"newDirectory\", RESOURCE_FILE_NAME);\r\n\r\n    fileManipulation.move(origin, destination);\r\n\r\n    assertFalse(Files.exists(origin));\r\n    assertTrue(Files.exists(destination));\r\n}\r\n```","```\r\nclass FilePathReader {\r\n\r\n    String getSystemPath(Path path) {\r\n        try {\r\n            return path\r\n              .toRealPath()\r\n              .toString();\r\n        } catch (IOException ex) {\r\n            throw new UncheckedIOException(ex);\r\n        }\r\n    }\r\n}\r\n```","```\r\nclass FilePathReaderUnitTest {\r\n\r\n    private static String DIRECTORY_NAME = \"baeldung\";\r\n\r\n    private FilePathReader filePathReader = new FilePathReader();\r\n\r\n    @Test\r\n    @DisplayName(\"Should get path on windows\")\r\n    void givenWindowsSystem_shouldGetPath_thenReturnWindowsPath() throws Exception {\r\n        FileSystem fileSystem = Jimfs.newFileSystem(Configuration.windows());\r\n        Path path = getPathToFile(fileSystem);\r\n\r\n        String stringPath = filePathReader.getSystemPath(path);\r\n\r\n        assertEquals(\"C:\\\\work\\\\\" + DIRECTORY_NAME, stringPath);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Should get path on unix\")\r\n    void givenUnixSystem_shouldGetPath_thenReturnUnixPath() throws Exception {\r\n        FileSystem fileSystem = Jimfs.newFileSystem(Configuration.unix());\r\n        Path path = getPathToFile(fileSystem);\r\n\r\n        String stringPath = filePathReader.getSystemPath(path);\r\n\r\n        assertEquals(\"/work/\" + DIRECTORY_NAME, stringPath);\r\n    }\r\n\r\n    private Path getPathToFile(FileSystem fileSystem) throws Exception {\r\n        Path path = fileSystem.getPath(DIRECTORY_NAME);\r\n        Files.createDirectory(path);\r\n\r\n        return path;\r\n    }\r\n}\r\n```"]