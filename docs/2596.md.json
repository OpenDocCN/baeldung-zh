["```\r\npublic class AccountService {\r\n\r\n  @Autowired\r\n  private AccountRepository accountRepository;\r\n\r\n  // getters and setters\r\n}\r\n```","```\r\n@Configuration\r\npublic class AccountConfig {\r\n\r\n  @Bean\r\n  public AccountService accountService() {\r\n    return new AccountService(accountRepository());\r\n  }\r\n\r\n  @Bean\r\n  public AccountRepository accountRepository() {\r\n    return new AccountRepository();\r\n  }\r\n}\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xmlns:context=\"http://www.springframework.org/schema/context\"\r\n  xsi:schemaLocation=\"http://www.springframework.org/schema/beans\r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\r\n    http://www.springframework.org/schema/context\r\n    http://www.springframework.org/schema/context/spring-context.xsd\">\r\n\r\n  <context:annotation-config/>\r\n  <context:component-scan base-package=\"com.baeldung.applicationcontext\"/>\r\n\r\n</beans>\r\n```","```\r\n@Component\r\npublic class UserService {\r\n  // user service code\r\n}\r\n```","```\r\nApplicationContext context = new ClassPathXmlApplicationContext(\"applicationcontext/user-bean-config.xml\");\r\nUserService userService = context.getBean(UserService.class);\r\nassertNotNull(userService);\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<beans \r\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"\r\n    http://www.springframework.org/schema/beans \r\n    http://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n\r\n  <bean id=\"accountService\" class=\"com.baeldung.applicationcontext.AccountService\">\r\n    <constructor-arg name=\"accountRepository\" ref=\"accountRepository\" />\r\n  </bean>\r\n\r\n  <bean id=\"accountRepository\" class=\"com.baeldung.applicationcontext.AccountRepository\" />\r\n</beans>\r\n```","```\r\nApplicationContext context = new AnnotationConfigApplicationContext(AccountConfig.class);\r\nAccountService accountService = context.getBean(AccountService.class);\r\n```","```\r\npublic class MyWebApplicationInitializer implements WebApplicationInitializer {\r\n\r\n  public void onStartup(ServletContext container) throws ServletException {\r\n    AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\r\n    context.register(AccountConfig.class);\r\n    context.setServletContext(container);\r\n\r\n    // servlet configuration\r\n  }\r\n}\r\n```","```\r\npublic class MyXmlWebApplicationInitializer implements WebApplicationInitializer {\r\n\r\n  public void onStartup(ServletContext container) throws ServletException {\r\n    XmlWebApplicationContext context = new XmlWebApplicationContext();\r\n    context.setConfigLocation(\"/WEB-INF/spring/applicationContext.xml\");\r\n    context.setServletContext(container);\r\n\r\n    // Servlet configuration\r\n  }\r\n}\r\n```","```\r\nString path = \"C:/myProject/src/main/resources/applicationcontext/account-bean-config.xml\";\r\n\r\nApplicationContext context = new FileSystemXmlApplicationContext(path);\r\nAccountService accountService = context.getBean(\"accountService\", AccountService.class);\r\n```","```\r\nApplicationContext context = new ClassPathXmlApplicationContext(\"applicationcontext/account-bean-config.xml\");\r\nAccountService accountService = context.getBean(\"accountService\", AccountService.class);\r\n```","```\r\naccount.name=TestAccount\r\n```","```\r\n@Bean\r\npublic MessageSource messageSource() {\r\n  ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\r\n  messageSource.setBasename(\"config/messages\");\r\n  return messageSource;\r\n}\r\n```","```\r\n@Autowired\r\nprivate MessageSource messageSource;\r\n```","```\r\nmessageSource.getMessage(\"account.name\", null, Locale.ENGLISH);\r\n```"]