["```\r\npublic class Views {\r\n    public static class Public {\r\n    }\r\n}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseJsonViewToSerialize_thenCorrect() \r\n  throws JsonProcessingException {\r\n\r\n    User user = new User(1, \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION);\r\n\r\n    String result = mapper\r\n      .writerWithView(Views.Public.class)\r\n      .writeValueAsString(user);\r\n\r\n    assertThat(result, containsString(\"John\"));\r\n    assertThat(result, not(containsString(\"1\")));\r\n}\r\n```","```\r\npublic class Views {\r\n    public static class Public {\r\n    }\r\n\r\n    public static class Internal extends Public {\r\n    }\r\n}\r\n```","```\r\npublic class Item {\r\n\r\n    @JsonView(Views.Public.class)\r\n    public int id;\r\n\r\n    @JsonView(Views.Public.class)\r\n    public String itemName;\r\n\r\n    @JsonView(Views.Internal.class)\r\n    public String ownerName;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsePublicView_thenOnlyPublicSerialized() \r\n  throws JsonProcessingException {\r\n\r\n    Item item = new Item(2, \"book\", \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper\r\n      .writerWithView(Views.Public.class)\r\n      .writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"2\"));\r\n\r\n    assertThat(result, not(containsString(\"John\")));\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseInternalView_thenAllSerialized() \r\n  throws JsonProcessingException {\r\n\r\n    Item item = new Item(2, \"book\", \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    String result = mapper\r\n      .writerWithView(Views.Internal.class)\r\n      .writeValueAsString(item);\r\n\r\n    assertThat(result, containsString(\"book\"));\r\n    assertThat(result, containsString(\"2\"));\r\n\r\n    assertThat(result, containsString(\"John\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseJsonViewToDeserialize_thenCorrect() \r\n  throws IOException {\r\n    String json = \"{\"id\":1,\"name\":\"John\"}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    User user = mapper\r\n      .readerWithView(Views.Public.class)\r\n      .forType(User.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(1, user.getId());\r\n    assertEquals(\"John\", user.getName());\r\n}\r\n```","```\r\npublic class UpperCasingWriter extends BeanPropertyWriter {\r\n    BeanPropertyWriter _writer;\r\n\r\n    public UpperCasingWriter(BeanPropertyWriter w) {\r\n        super(w);\r\n        _writer = w;\r\n    }\r\n\r\n    @Override\r\n    public void serializeAsField(Object bean, JsonGenerator gen, \r\n      SerializerProvider prov) throws Exception {\r\n        String value = ((User) bean).name;\r\n        value = (value == null) ? \"\" : value.toUpperCase();\r\n        gen.writeStringField(\"name\", value);\r\n    }\r\n}\r\n```","```\r\npublic class MyBeanSerializerModifier extends BeanSerializerModifier{\r\n\r\n    @Override\r\n    public List<BeanPropertyWriter> changeProperties(\r\n      SerializationConfig config, BeanDescription beanDesc, \r\n      List<BeanPropertyWriter> beanProperties) {\r\n        for (int i = 0; i < beanProperties.size(); i++) {\r\n            BeanPropertyWriter writer = beanProperties.get(i);\r\n            if (writer.getName() == \"name\") {\r\n                beanProperties.set(i, new UpperCasingWriter(writer));\r\n            }\r\n        }\r\n        return beanProperties;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenUseCustomJsonViewToSerialize_thenCorrect() \r\n  throws JsonProcessingException {\r\n    User user = new User(1, \"John\");\r\n    SerializerFactory serializerFactory = BeanSerializerFactory.instance\r\n      .withSerializerModifier(new MyBeanSerializerModifier());\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setSerializerFactory(serializerFactory);\r\n\r\n    String result = mapper\r\n      .writerWithView(Views.Public.class)\r\n      .writeValueAsString(user);\r\n\r\n    assertThat(result, containsString(\"JOHN\"));\r\n    assertThat(result, containsString(\"1\"));\r\n}\r\n```","```\r\n@JsonView(Views.Public.class)\r\n@RequestMapping(\"/items/{id}\")\r\npublic Item getItemPublic(@PathVariable int id) {\r\n    return ItemManager.getById(id);\r\n}\r\n```","```\r\n{\"id\":2,\"itemName\":\"book\"}\r\n```","```\r\n@JsonView(Views.Internal.class)\r\n@RequestMapping(\"/items/internal/{id}\")\r\npublic Item getItemInternal(@PathVariable int id) {\r\n    return ItemManager.getById(id);\r\n}\r\n```","```\r\n{\"id\":2,\"itemName\":\"book\",\"ownerName\":\"John\"}\r\n```"]