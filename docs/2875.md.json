["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.mockito</groupId>\r\n    <artifactId>mockito-core</artifactId>\r\n    <version>2.8.9</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.powermock</groupId>\r\n    <artifactId>powermock-module-junit4</artifactId>\r\n    <version>1.7.4</version>\r\n    <scope>test</scope>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.powermock</groupId>\r\n    <artifactId>powermock-api-mockito2</artifactId>\r\n    <version>1.7.4</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic abstract class AbstractIndependent {\r\n    public abstract int abstractFunc();\r\n\r\n    public String defaultImpl() {\r\n        return \"DEFAULT-1\";\r\n    }\r\n}\r\n```","```\r\npublic class ConcreteImpl extends AbstractIndependent {\r\n\r\n    @Override\r\n    public int abstractFunc() {\r\n        return 4;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonAbstractMethod_whenConcreteImpl_testCorrectBehaviour() {\r\n    ConcreteImpl conClass = new ConcreteImpl();\r\n    String actual = conClass.defaultImpl();\r\n\r\n    assertEquals(\"DEFAULT-1\", actual);\r\n}\r\n```","```\r\n@Test\r\npublic void givenNonAbstractMethod_whenMockitoMock_testCorrectBehaviour() {\r\n    AbstractIndependent absCls = Mockito.mock(\r\n      AbstractIndependent.class, \r\n      Mockito.CALLS_REAL_METHODS);\r\n\r\n    assertEquals(\"DEFAULT-1\", absCls.defaultImpl());\r\n}\r\n```","```\r\npublic abstract class AbstractMethodCalling {\r\n\r\n    public abstract String abstractFunc();\r\n\r\n    public String defaultImpl() {\r\n        String res = abstractFunc();\r\n        return (res == null) ? \"Default\" : (res + \" Default\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDefaultImpl_whenMockAbstractFunc_thenExpectedBehaviour() {\r\n    AbstractMethodCalling cls = Mockito.mock(AbstractMethodCalling.class);\r\n    Mockito.when(cls.abstractFunc())\r\n      .thenReturn(\"Abstract\");\r\n    Mockito.doCallRealMethod()\r\n      .when(cls)\r\n      .defaultImpl();\r\n\r\n    assertEquals(\"Abstract Default\", cls.defaultImpl());\r\n}\r\n```","```\r\npublic abstract class AbstractPrivateMethods {\r\n\r\n    public abstract int abstractFunc();\r\n\r\n    public String defaultImpl() {\r\n        return getCurrentDateTime() + \"DEFAULT-1\";\r\n    }\r\n\r\n    private String getCurrentDateTime() {\r\n        return LocalDateTime.now().toString();\r\n    }\r\n}\r\n```","```\r\n@RunWith(PowerMockRunner.class)\r\n@PrepareForTest(AbstractPrivateMethods.class)\r\npublic class AbstractPrivateMethodsUnitTest {\r\n\r\n    @Test\r\n    public void whenMockPrivateMethod_thenVerifyBehaviour() {\r\n        AbstractPrivateMethods mockClass = PowerMockito.mock(AbstractPrivateMethods.class);\r\n        PowerMockito.doCallRealMethod()\r\n          .when(mockClass)\r\n          .defaultImpl();\r\n        String dateTime = LocalDateTime.now().toString();\r\n        PowerMockito.doReturn(dateTime).when(mockClass, \"getCurrentDateTime\");\r\n        String actual = mockClass.defaultImpl();\r\n\r\n        assertEquals(dateTime + \"DEFAULT-1\", actual);\r\n    }\r\n}\r\n```","```\r\npublic abstract class AbstractInstanceFields {\r\n    protected int count;\r\n    private boolean active = false;\r\n\r\n    public abstract int abstractFunc();\r\n\r\n    public String testFunc() {\r\n        if (count > 5) {\r\n            return \"Overflow\";\r\n        } \r\n        return active ? \"Added\" : \"Blocked\";\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenPowerMockitoAndActiveFieldTrue_thenCorrectBehaviour() {\r\n    AbstractInstanceFields instClass = PowerMockito.mock(AbstractInstanceFields.class);\r\n    PowerMockito.doCallRealMethod()\r\n      .when(instClass)\r\n      .testFunc();\r\n    Whitebox.setInternalState(instClass, \"active\", true);\r\n\r\n    assertEquals(\"Added\", instClass.testFunc());\r\n}\r\n```"]