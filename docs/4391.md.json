["```\r\n<dependency>\r\n    <groupId>org.nanohttpd</groupId>\r\n    <artifactId>nanohttpd</artifactId>\r\n    <version>2.3.1</version>\r\n</dependency>\r\n```","```\r\npublic class App extends NanoHTTPD {\r\n    public App() throws IOException {\r\n        super(8080);\r\n        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);\r\n    }\r\n\r\n    public static void main(String[] args ) throws IOException {\r\n        new App();\r\n    }\r\n\r\n    @Override\r\n    public Response serve(IHTTPSession session) {\r\n        return newFixedLengthResponse(\"Hello world\");\r\n    }\r\n}\r\n```","```\r\n> curl 'http://localhost:8080/'\r\nHello world\r\n```","```\r\n@Override\r\npublic Response serve(IHTTPSession session) {\r\n    if (session.getMethod() == Method.GET) {\r\n        String itemIdRequestParameter = session.getParameters().get(\"itemId\").get(0);\r\n        return newFixedLengthResponse(\"Requested itemId = \" + itemIdRequestParameter);\r\n    }\r\n    return newFixedLengthResponse(Response.Status.NOT_FOUND, MIME_PLAINTEXT, \r\n        \"The requested resource does not exist\");\r\n}\r\n```","```\r\n> curl 'http://localhost:8080/?itemId=23Bk8'\r\nRequested itemId = 23Bk8\r\n```","```\r\n@Override\r\npublic Response serve(IHTTPSession session) {\r\n    if (session.getMethod() == Method.POST) {\r\n        try {\r\n            session.parseBody(new HashMap<>());\r\n            String requestBody = session.getQueryParameterString();\r\n            return newFixedLengthResponse(\"Request body = \" + requestBody);\r\n        } catch (IOException | ResponseException e) {\r\n            // handle\r\n        }\r\n    }\r\n    return newFixedLengthResponse(Response.Status.NOT_FOUND, MIME_PLAINTEXT, \r\n      \"The requested resource does not exist\");\r\n}\r\n```","```\r\n> curl -X POST -d 'deliveryAddress=Washington nr 4&quantity;=5''http://localhost:8080/'\r\nRequest body = deliveryAddress=Washington nr 4&quantity;=5\r\n```","```\r\n@Override \r\npublic Response serve(IHTTPSession session) {\r\n    Response response = newFixedLengthResponse(\"Hello world\"); \r\n    response.addHeader(\"Access-Control-Allow-Origin\", \"*\");\r\n    return response;\r\n}\r\n```","```\r\n> curl -v 'http://localhost:8080'\r\nHTTP/1.1 200 OK \r\nContent-Type: text/html\r\nDate: Thu, 13 Jun 2019 03:58:14 GMT\r\nAccess-Control-Allow-Origin: *\r\nConnection: keep-alive\r\nContent-Length: 11\r\n\r\nHello world\r\n```","```\r\n<dependency>\r\n    <groupId>org.nanohttpd</groupId>\r\n    <artifactId>nanohttpd-apache-fileupload</artifactId>\r\n    <version>2.3.1</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>javax.servlet</groupId>\r\n    <artifactId>javax.servlet-api</artifactId>\r\n    <version>4.0.1</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n```","```\r\n@Override\r\npublic Response serve(IHTTPSession session) {\r\n    try {\r\n        List<FileItem> files\r\n          = new NanoFileUpload(new DiskFileItemFactory()).parseRequest(session);\r\n        int uploadedCount = 0;\r\n        for (FileItem file : files) {\r\n            try {\r\n                String fileName = file.getName(); \r\n                byte[] fileContent = file.get(); \r\n                Files.write(Paths.get(fileName), fileContent);\r\n                uploadedCount++;\r\n            } catch (Exception exception) {\r\n                // handle\r\n            }\r\n        }\r\n        return newFixedLengthResponse(Response.Status.OK, MIME_PLAINTEXT, \r\n          \"Uploaded files \" + uploadedCount + \" out of \" + files.size());\r\n    } catch (IOException | FileUploadException e) {\r\n        throw new IllegalArgumentException(\"Could not handle files from API request\", e);\r\n    }\r\n    return newFixedLengthResponse(\r\n      Response.Status.BAD_REQUEST, MIME_PLAINTEXT, \"Error when uploading\");\r\n}\r\n```","```\r\n> curl -F '[[emailÂ protected]](/web/20220628131736/https://www.baeldung.com/cdn-cgi/l/email-protection)/pathToFile.txt' 'http://localhost:8080'\r\nUploaded files: 1\r\n```","```\r\n<dependency>\r\n    <groupId>org.nanohttpd</groupId>\r\n    <artifactId>nanohttpd-nanolets</artifactId>\r\n    <version>2.3.1</version>\r\n</dependency>\r\n```","```\r\npublic class MultipleRoutesExample extends RouterNanoHTTPD {\r\n    public MultipleRoutesExample() throws IOException {\r\n        super(8080);\r\n        addMappings();\r\n        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);\r\n    }\r\n\r\n    @Override\r\n    public void addMappings() {\r\n        // todo fill in the routes\r\n    }\r\n}\r\n```","```\r\naddRoute(\"/\", IndexHandler.class); // inside addMappings method\r\n```","```\r\n> curl 'http://localhost:8080' \r\n<html><body><h2>Hello world!</h3></body></html>\r\n```","```\r\npublic static class UserHandler extends DefaultHandler {\r\n    @Override\r\n    public String getText() {\r\n        return \"UserA, UserB, UserC\";\r\n    }\r\n\r\n    @Override\r\n    public String getMimeType() {\r\n        return MIME_PLAINTEXT;\r\n    }\r\n\r\n    @Override\r\n    public Response.IStatus getStatus() {\r\n        return Response.Status.OK;\r\n    }\r\n}\r\n```","```\r\n> curl -X POST 'http://localhost:8080/users' \r\nUserA, UserB, UserC\r\n```","```\r\npublic static class StoreHandler extends GeneralHandler {\r\n    @Override\r\n    public Response get(\r\n      UriResource uriResource, Map<String, String> urlParams, IHTTPSession session) {\r\n        return newFixedLengthResponse(\"Retrieving store for id = \"\r\n          + urlParams.get(\"storeId\"));\r\n    }\r\n}\r\n```","```\r\n> curl 'http://localhost:8080/stores/123' \r\nRetrieving store for id = 123\r\n```","```\r\n> keytool -genkey -keyalg RSA -alias selfsigned\r\n  -keystore keystore.jks -storepass password -validity 360\r\n  -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1  -validity 9999\r\n```","```\r\npublic class HttpsExample  extends NanoHTTPD {\r\n\r\n    public HttpsExample() throws IOException {\r\n        super(8080);\r\n        makeSecure(NanoHTTPD.makeSSLSocketFactory(\r\n          \"/keystore.jks\", \"password\".toCharArray()), null);\r\n        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);\r\n    }\r\n\r\n    // main and serve methods\r\n}\r\n```","```\r\n> curl --insecure 'https://localhost:8443'\r\nHTTPS call is a success\r\n```","```\r\n<dependency>\r\n    <groupId>org.nanohttpd</groupId>\r\n    <artifactId>nanohttpd-websocket</artifactId>\r\n    <version>2.3.1</version>\r\n</dependency>\r\n```","```\r\npublic class WsdExample extends NanoWSD {\r\n    public WsdExample() throws IOException {\r\n        super(8080);\r\n        start(NanoHTTPD.SOCKET_READ_TIMEOUT, false);\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        new WsdExample();\r\n    }\r\n\r\n    @Override\r\n    protected WebSocket openWebSocket(IHTTPSession ihttpSession) {\r\n        return new WsdSocket(ihttpSession);\r\n    }\r\n\r\n    private static class WsdSocket extends WebSocket {\r\n        public WsdSocket(IHTTPSession handshakeRequest) {\r\n            super(handshakeRequest);\r\n        }\r\n\r\n        //override onOpen, onClose, onPong and onException methods\r\n\r\n        @Override\r\n        protected void onMessage(WebSocketFrame webSocketFrame) {\r\n            try {\r\n                send(webSocketFrame.getTextPayload() + \" to you\");\r\n            } catch (IOException e) {\r\n                // handle\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\n> wscat -c localhost:8080\r\nhello\r\nhello to you\r\nbye\r\nbye to you\r\n```"]