["```\r\n@AutoValue\r\nabstract class Person {\r\n    static Person create(String name, int age) {\r\n        return new AutoValue_Person(name, age);\r\n    }\r\n\r\n    abstract String name();\r\n    abstract int age();\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>com.google.auto.value</groupId>\r\n    <artifactId>auto-value</artifactId>\r\n    <version>1.2</version>\r\n</dependency>\r\n```","```\r\npublic final class Foo {\r\n    private final String text;\r\n    private final int number;\r\n\r\n    public Foo(String text, int number) {\r\n        this.text = text;\r\n        this.number = number;\r\n    }\r\n\r\n    // standard getters\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(text, number);\r\n    }\r\n    @Override\r\n    public String toString() {\r\n        return \"Foo [text=\" + text + \", number=\" + number + \"]\";\r\n    }\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) return true;\r\n        if (obj == null) return false;\r\n        if (getClass() != obj.getClass()) return false;\r\n        Foo other = (Foo) obj;\r\n        if (number != other.number) return false;\r\n        if (text == null) {\r\n            if (other.text != null) return false;\r\n        } else if (!text.equals(other.text)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```","```\r\npublic class MutableMoney {\r\n    private long amount;\r\n    private String currency;\r\n\r\n    public MutableMoney(long amount, String currency) {\r\n        this.amount = amount;\r\n        this.currency = currency;\r\n    }\r\n\r\n    // standard getters and setters\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoSameValueMoneyObjects_whenEqualityTestFails_thenCorrect() {\r\n    MutableMoney m1 = new MutableMoney(10000, \"USD\");\r\n    MutableMoney m2 = new MutableMoney(10000, \"USD\");\r\n    assertFalse(m1.equals(m2));\r\n}\r\n```","```\r\npublic final class ImmutableMoney {\r\n    private final long amount;\r\n    private final String currency;\r\n\r\n    public ImmutableMoney(long amount, String currency) {\r\n        this.amount = amount;\r\n        this.currency = currency;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        final int prime = 31;\r\n        int result = 1;\r\n        result = prime * result + (int) (amount ^ (amount >>> 32));\r\n        result = prime * result + ((currency == null) ? 0 : currency.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) return true;\r\n        if (obj == null) return false;\r\n        if (getClass() != obj.getClass()) return false;\r\n        ImmutableMoney other = (ImmutableMoney) obj;\r\n        if (amount != other.amount) return false;\r\n        if (currency == null) {\r\n            if (other.currency != null) return false;\r\n        } else if (!currency.equals(other.currency))\r\n            return false;\r\n        return true;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenTwoSameValueMoneyValueObjects_whenEqualityTestPasses_thenCorrect() {\r\n    ImmutableMoney m1 = new ImmutableMoney(10000, \"USD\");\r\n    ImmutableMoney m2 = new ImmutableMoney(10000, \"USD\");\r\n    assertTrue(m1.equals(m2));\r\n}\r\n```","```\r\n@AutoValue\r\npublic abstract class AutoValueMoney {\r\n    public abstract String getCurrency();\r\n    public abstract long getAmount();\r\n\r\n    public static AutoValueMoney create(String currency, long amount) {\r\n        return new AutoValue_AutoValueMoney(currency, amount);\r\n    }\r\n}\r\n```","```\r\npublic final class AutoValue_AutoValueMoney extends AutoValueMoney {\r\n    private final String currency;\r\n    private final long amount;\r\n\r\n    AutoValue_AutoValueMoney(String currency, long amount) {\r\n        if (currency == null) throw new NullPointerException(currency);\r\n        this.currency = currency;\r\n        this.amount = amount;\r\n    }\r\n\r\n    // standard getters\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int h = 1;\r\n        h *= 1000003;\r\n        h ^= currency.hashCode();\r\n        h *= 1000003;\r\n        h ^= amount;\r\n        return h;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n        if (o == this) {\r\n            return true;\r\n        }\r\n        if (o instanceof AutoValueMoney) {\r\n            AutoValueMoney that = (AutoValueMoney) o;\r\n            return (this.currency.equals(that.getCurrency()))\r\n              && (this.amount == that.getAmount());\r\n        }\r\n        return false;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenValueTypeWithAutoValue_whenFieldsCorrectlySet_thenCorrect() {\r\n    AutoValueMoney m = AutoValueMoney.create(\"USD\", 10000);\r\n    assertEquals(m.getAmount(), 10000);\r\n    assertEquals(m.getCurrency(), \"USD\");\r\n}\r\n```","```\r\n@Test\r\npublic void given2EqualValueTypesWithAutoValue_whenEqual_thenCorrect() {\r\n    AutoValueMoney m1 = AutoValueMoney.create(\"USD\", 5000);\r\n    AutoValueMoney m2 = AutoValueMoney.create(\"USD\", 5000);\r\n    assertTrue(m1.equals(m2));\r\n}\r\n```","```\r\n@Test\r\npublic void given2DifferentValueTypesWithAutoValue_whenNotEqual_thenCorrect() {\r\n    AutoValueMoney m1 = AutoValueMoney.create(\"GBP\", 5000);\r\n    AutoValueMoney m2 = AutoValueMoney.create(\"USD\", 5000);\r\n    assertFalse(m1.equals(m2));\r\n}\r\n```","```\r\n@AutoValue\r\npublic abstract class AutoValueMoneyWithBuilder {\r\n    public abstract String getCurrency();\r\n    public abstract long getAmount();\r\n    static Builder builder() {\r\n        return new AutoValue_AutoValueMoneyWithBuilder.Builder();\r\n    }\r\n\r\n    @AutoValue.Builder\r\n    abstract static class Builder {\r\n        abstract Builder setCurrency(String currency);\r\n        abstract Builder setAmount(long amount);\r\n        abstract AutoValueMoneyWithBuilder build();\r\n    }\r\n}\r\n```","```\r\nstatic final class Builder extends AutoValueMoneyWithBuilder.Builder {\r\n    private String currency;\r\n    private long amount;\r\n    Builder() {\r\n    }\r\n    Builder(AutoValueMoneyWithBuilder source) {\r\n        this.currency = source.getCurrency();\r\n        this.amount = source.getAmount();\r\n    }\r\n\r\n    @Override\r\n    public AutoValueMoneyWithBuilder.Builder setCurrency(String currency) {\r\n        this.currency = currency;\r\n        return this;\r\n    }\r\n\r\n    @Override\r\n    public AutoValueMoneyWithBuilder.Builder setAmount(long amount) {\r\n        this.amount = amount;\r\n        return this;\r\n    }\r\n\r\n    @Override\r\n    public AutoValueMoneyWithBuilder build() {\r\n        String missing = \"\";\r\n        if (currency == null) {\r\n            missing += \" currency\";\r\n        }\r\n        if (amount == 0) {\r\n            missing += \" amount\";\r\n        }\r\n        if (!missing.isEmpty()) {\r\n            throw new IllegalStateException(\"Missing required properties:\" + missing);\r\n        }\r\n        return new AutoValue_AutoValueMoneyWithBuilder(this.currency,this.amount);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenValueTypeWithBuilder_whenFieldsCorrectlySet_thenCorrect() {\r\n    AutoValueMoneyWithBuilder m = AutoValueMoneyWithBuilder.builder().\r\n      setAmount(5000).setCurrency(\"USD\").build();\r\n    assertEquals(m.getAmount(), 5000);\r\n    assertEquals(m.getCurrency(), \"USD\");\r\n}\r\n```","```\r\n@Test\r\npublic void given2EqualValueTypesWithBuilder_whenEqual_thenCorrect() {\r\n    AutoValueMoneyWithBuilder m1 = AutoValueMoneyWithBuilder.builder()\r\n      .setAmount(5000).setCurrency(\"USD\").build();\r\n    AutoValueMoneyWithBuilder m2 = AutoValueMoneyWithBuilder.builder()\r\n      .setAmount(5000).setCurrency(\"USD\").build();\r\n    assertTrue(m1.equals(m2));\r\n}\r\n```","```\r\n@Test\r\npublic void given2DifferentValueTypesBuilder_whenNotEqual_thenCorrect() {\r\n    AutoValueMoneyWithBuilder m1 = AutoValueMoneyWithBuilder.builder()\r\n      .setAmount(5000).setCurrency(\"USD\").build();\r\n    AutoValueMoneyWithBuilder m2 = AutoValueMoneyWithBuilder.builder()\r\n      .setAmount(5000).setCurrency(\"GBP\").build();\r\n    assertFalse(m1.equals(m2));\r\n}\r\n```"]