["```\r\nfor (char c in input) {\r\n    if (automaton.accepts(c)) {\r\n        automaton.switchState(c);\r\n        input.pop(c);\r\n    } else {\r\n        break;\r\n    }\r\n}\r\nif (automaton.canStop() && input.isEmpty()) {\r\n    print(\"Valid\");\r\n} else {\r\n    print(\"Invalid\");\r\n}\r\n```","```\r\npublic interface FiniteStateMachine {\r\n    FiniteStateMachine switchState(CharSequence c);\r\n    boolean canStop();\r\n}\r\n\r\ninterface State {\r\n    State with(Transition tr);\r\n    State transit(CharSequence c);\r\n    boolean isFinal();\r\n}\r\n\r\ninterface Transition {\r\n    boolean isPossible(CharSequence c);\r\n    State state();\r\n} \r\n```","```\r\npubli class RtFiniteStateMachine implements FiniteStateMachine {\r\n\r\n    private State current;\r\n\r\n    public RtFiniteStateMachine(State initial) {\r\n        this.current = initial;\r\n    }\r\n\r\n    public FiniteStateMachine switchState(CharSequence c) {\r\n        return new RtFiniteStateMachine(this.current.transit(c));\r\n    }\r\n\r\n    public boolean canStop() {\r\n        return this.current.isFinal();\r\n    }\r\n}\r\n```","```\r\npublic class RtState implements State {\r\n\r\n    private List<Transition> transitions;\r\n    private boolean isFinal;\r\n\r\n    public RtState() {\r\n        this(false);\r\n    }\r\n\r\n    public RtState(boolean isFinal) {\r\n        this.transitions = new ArrayList<>();\r\n        this.isFinal = isFinal;\r\n    }\r\n\r\n    public State transit(CharSequence c) {\r\n        return transitions\r\n          .stream()\r\n          .filter(t -> t.isPossible(c))\r\n          .map(Transition::state)\r\n          .findAny()\r\n          .orElseThrow(() -> new IllegalArgumentException(\"Input not accepted: \" + c));\r\n    }\r\n\r\n    public boolean isFinal() {\r\n        return this.isFinal;\r\n    }\r\n\r\n    @Override\r\n    public State with(Transition tr) {\r\n        this.transitions.add(tr);\r\n        return this;\r\n    }\r\n}\r\n```","```\r\npublic class RtTransition implements Transition {\r\n\r\n    private String rule;\r\n    private State next;\r\n    public State state() {\r\n        return this.next;\r\n    }\r\n\r\n    public boolean isPossible(CharSequence c) {\r\n        return this.rule.equalsIgnoreCase(String.valueOf(c));\r\n    }\r\n\r\n    // standard constructors\r\n}\r\n```","```\r\nString json = \"{\\\"key\\\":\\\"value\\\"}\";\r\nFiniteStateMachine machine = this.buildJsonStateMachine();\r\nfor (int i = 0; i < json.length(); i++) {\r\n    machine = machine.switchState(String.valueOf(json.charAt(i)));\r\n}\r\n\r\nassertTrue(machine.canStop());\r\n```"]