["```\r\npublic abstract class BoardGame {\r\n\r\n    //... field declarations, constructors\r\n\r\n    public abstract void play();\r\n\r\n    //... concrete methods\r\n}\r\n```","```\r\npublic class Checkers extends BoardGame {\r\n\r\n    public void play() {\r\n        //... implementation\r\n    }\r\n}\r\n```","```\r\npublic abstract class BaseFileReader {\r\n\r\n    protected Path filePath;\r\n\r\n    protected BaseFileReader(Path filePath) {\r\n        this.filePath = filePath;\r\n    }\r\n\r\n    public Path getFilePath() {\r\n        return filePath;\r\n    }\r\n\r\n    public List<String> readFile() throws IOException {\r\n        return Files.lines(filePath)\r\n          .map(this::mapFileLine).collect(Collectors.toList());\r\n    }\r\n\r\n    protected abstract String mapFileLine(String line);\r\n}\r\n```","```\r\npublic class LowercaseFileReader extends BaseFileReader {\r\n\r\n    public LowercaseFileReader(Path filePath) {\r\n        super(filePath);\r\n    }\r\n\r\n    @Override\r\n    public String mapFileLine(String line) {\r\n        return line.toLowerCase();\r\n    }   \r\n}\r\n```","```\r\npublic class UppercaseFileReader extends BaseFileReader {\r\n\r\n    public UppercaseFileReader(Path filePath) {\r\n        super(filePath);\r\n    }\r\n\r\n    @Override\r\n    public String mapFileLine(String line) {\r\n        return line.toUpperCase();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenLowercaseFileReaderInstance_whenCalledreadFile_thenCorrect() throws Exception {\r\n    URL location = getClass().getClassLoader().getResource(\"files/test.txt\")\r\n    Path path = Paths.get(location.toURI());\r\n    BaseFileReader lowercaseFileReader = new LowercaseFileReader(path);\r\n\r\n    assertThat(lowercaseFileReader.readFile()).isInstanceOf(List.class);\r\n}\r\n```"]