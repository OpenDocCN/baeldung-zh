["```\r\nstatic String[] COUNTRY_NAMES \r\n  = { \"China\", \"Australia\", \"India\", \"USA\", \"USSR\", \"UK\", \"China\", \r\n  \"France\", \"Poland\", \"Austria\", \"India\", \"USA\", \"Egypt\", \"China\" }; \r\n```","```\r\nMap<String, Integer> counterMap = new HashMap<>();\r\n\r\nfor (String country : COUNTRY_NAMES) { \r\n    counterMap.compute(country, (k, v) -> v == null ? 1 : v + 1); \r\n}\r\n\r\nassertEquals(3, counterMap.get(\"China\").intValue());\r\nassertEquals(2, counterMap.get(\"India\").intValue());\r\n```","```\r\n@Test\r\npublic void whenMapWithLambdaAndWrapperCounter_runsSuccessfully() {\r\n    Map<String, Long> counterMap = new HashMap<>();\r\n\r\n    Stream.of(COUNTRY_NAMES)\r\n      .collect(Collectors.groupingBy(k -> k, ()-> counterMap,\r\n\t    Collectors.counting());\r\n\r\n    assertEquals(3, counterMap.get(\"China\").intValue());\r\n    assertEquals(2, counterMap.get(\"India\").intValue());\r\n} \r\n```","```\r\n@Test\r\npublic void whenMapWithLambdaAndWrapperCounter_runsSuccessfully() {\r\n    Map<String, Long> counterMap = new HashMap<>();\r\n\r\n    Stream.of(COUNTRY_NAMES).parallel()\r\n      .collect(Collectors.groupingBy(k -> k, ()-> counterMap,\r\n\t    Collectors.counting());\r\n\r\n    assertEquals(3, counterMap.get(\"China\").intValue());\r\n    assertEquals(2, counterMap.get(\"India\").intValue());\r\n} \r\n```","```\r\n@Test\r\npublic void whenMapWithPrimitiveArrayCounter_runsSuccessfully() {\r\n    Map<String, int[]> counterMap = new HashMap<>();\r\n\r\n    counterWithPrimitiveArray(counterMap);\r\n\r\n    assertEquals(3, counterMap.get(\"China\")[0]);\r\n    assertEquals(2, counterMap.get(\"India\")[0]);\r\n}\r\n\r\nprivate void counterWithPrimitiveArray(Map<String, int[]> counterMap) {\r\n    for (String country : COUNTRY_NAMES) {\r\n        counterMap.compute(country, (k, v) -> v == null ? \r\n          new int[] { 0 } : v)[0]++;\r\n    }\r\n} \r\n```","```\r\nprivate static class MutableInteger {\r\n    int count = 1;\r\n\r\n    public void increment() {\r\n        this.count++;\r\n    }\r\n\r\n    // getter and setter\r\n} \r\n```","```\r\n@Test\r\npublic void whenMapWithMutableIntegerCounter_runsSuccessfully() {\r\n    Map<String, MutableInteger> counterMap = new HashMap<>();\r\n\r\n    mapWithMutableInteger(counterMap);\r\n\r\n    assertEquals(3, counterMap.get(\"China\").getCount());\r\n    assertEquals(2, counterMap.get(\"India\").getCount());\r\n}\r\nprivate void counterWithMutableInteger(\r\n  Map<String, MutableInteger> counterMap) {\r\n    for (String country : COUNTRY_NAMES) {\r\n        counterMap.compute(country, (k, v) -> v == null \r\n          ? new MutableInteger(0) : v).increment();\r\n    }\r\n}\r\n```","```\r\nMap<String, Integer> counterMap = new HashMap<>();\r\nMap<String, MutableInteger> counterMutableIntMap = new HashMap<>();\r\nMap<String, int[]> counterWithIntArrayMap = new HashMap<>();\r\nMap<String, Long> counterWithLongWrapperMap = new HashMap<>();\r\n\r\n@Benchmark\r\npublic void wrapperAsCounter() {\r\n    counterWithWrapperObject(counterMap);\r\n}\r\n\r\n@Benchmark\r\npublic void lambdaExpressionWithWrapper() {\r\n    counterWithLambdaAndWrapper(counterWithLongWrapperMap );\r\n}\r\n\r\n@Benchmark\r\npublic void parallelStreamWithWrapper() {\r\n    counterWithParallelStreamAndWrapper(counterWithLongWrapperStreamMap);\r\n}\r\n\r\n@Benchmark\r\npublic void mutableIntegerAsCounter() {\r\n    counterWithMutableInteger(counterMutableIntMap);\r\n}\r\n\r\n@Benchmark\r\npublic void mapWithPrimitiveArray() {\r\n   counterWithPrimitiveArray(counterWithIntArrayMap);\r\n} \r\n```"]