["```\r\nif (universe.length <= 64)\r\n    return new RegularEnumSet<>(elementType, universe);\r\nelse\r\n    return new JumboEnumSet<>(elementType, universe);\r\n```","```\r\npublic enum Color {\r\n    RED, YELLOW, GREEN, BLUE, BLACK, WHITE\r\n}\r\n```","```\r\nEnumSet.allOf(Color.class);\r\n```","```\r\nEnumSet.noneOf(Color.class);\r\n```","```\r\nEnumSet.range(Color.YELLOW, Color.BLUE);\r\n```","```\r\n[YELLOW, GREEN, BLUE]\r\n```","```\r\nEnumSet.complementOf(EnumSet.of(Color.BLACK, Color.WHITE));\r\n```","```\r\n[RED, YELLOW, GREEN, BLUE]\r\n```","```\r\nEnumSet.copyOf(EnumSet.of(Color.BLACK, Color.WHITE));\r\n```","```\r\nList<Color> colorsList = new ArrayList<>();\r\ncolorsList.add(Color.RED);\r\nEnumSet<Color> listCopy = EnumSet.copyOf(colorsList);\r\n```","```\r\nEnumSet<Color> set = EnumSet.noneOf(Color.class);\r\nset.add(Color.RED);\r\nset.add(Color.YELLOW)\r\n```","```\r\nset.contains(Color.RED);\r\n```","```\r\nset.forEach(System.out::println);\r\n```","```\r\nset.remove(Color.RED);\r\n```"]