["```\r\n<dependency>\r\n    <groupId>org.jgroups</groupId>\r\n    <artifactId>jgroups</artifactId>\r\n    <version>4.0.10.Final</version>\r\n</dependency> \r\n```","```\r\njava -Djava.net.preferIPv4Stack=true com.baeldung.jgroups.JGroupsMessenger \r\n```","```\r\nJChannel channel = new JChannel(\"src/main/resources/udp.xml\"); \r\n```","```\r\nchannel.connect(\"Baeldung\"); \r\n```","```\r\nchannel.name(\"user1\");\r\n```","```\r\nchannel.close()\r\n```","```\r\npublic void viewAccepted(View newView) {\r\n\r\n    private View lastView;\r\n\r\n    if (lastView == null) {\r\n        System.out.println(\"Received initial view:\");\r\n        newView.forEach(System.out::println);\r\n    } else {\r\n        System.out.println(\"Received new view.\");\r\n\r\n        List<Address> newMembers = View.newMembers(lastView, newView);\r\n        System.out.println(\"New members: \");\r\n        newMembers.forEach(System.out::println);\r\n\r\n        List<Address> exMembers = View.leftMembers(lastView, newView);\r\n        System.out.println(\"Exited members:\");\r\n        exMembers.forEach(System.out::println);\r\n    }\r\n    lastView = newView;\r\n} \r\n```","```\r\nSystem.out.print(\"Enter a message: \");\r\nString line = in.readLine().toLowerCase();\r\nMessage message = new Message(null, line.getBytes());\r\nchannel.send(message); \r\n```","```\r\nchannel.setDiscardOwnMessages(true); \r\n```","```\r\nprivate Optional<address> getAddress(String name) { \r\n    View view = channel.view(); \r\n    return view.getMembers().stream()\r\n      .filter(address -> name.equals(address.toString()))\r\n      .findAny(); \r\n} \r\n```","```\r\nAddress destination = null;\r\nSystem.out.print(\"Enter a destination: \");\r\nString destinationName = in.readLine().toLowerCase();\r\ndestination = getAddress(destinationName)\r\n  .orElseThrow(() -> new Exception(\"Destination not found\"); \r\nMessage message = new Message(destination, \"Hi there!\"); \r\nchannel.send(message); \r\n```","```\r\npublic void receive(Message message) {\r\n    String line = Message received from: \" \r\n      + message.getSrc() \r\n      + \" to: \" + message.getDest() \r\n      + \" -> \" + message.getObject();\r\n    System.out.println(line);\r\n} \r\n```","```\r\nprivate Integer messageCount = 0;\r\n\r\npublic void receive(Message message) {\r\n    String line = \"Message received from: \" \r\n      + message.getSrc() \r\n      + \" to: \" + message.getDest() \r\n      + \" -> \" + message.getObject();\r\n    System.out.println(line);\r\n\r\n    if (message.getDest() == null) {\r\n        messageCount++;\r\n        System.out.println(\"Message count: \" + messageCount);\r\n    }\r\n} \r\n```","```\r\npublic void setState(InputStream input) {\r\n    try {\r\n        messageCount = Util.objectFromStream(new DataInputStream(input));\r\n    } catch (Exception e) {\r\n        System.out.println(\"Error deserialing state!\");\r\n    }\r\n    System.out.println(messageCount + \" is the current messagecount.\");\r\n}\r\n\r\npublic void getState(OutputStream output) throws Exception {\r\n    Util.objectToStream(messageCount, new DataOutputStream(output));\r\n} \r\n```","```\r\nchannel.connect(clusterName);\r\nchannel.getState(null, 0); \r\n```"]