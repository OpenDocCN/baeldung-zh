["```\r\n<dependency>\r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j</artifactId>\r\n    <version>3.4.6</version>\r\n</dependency>\r\n```","```\r\nGraphDatabaseFactory graphDbFactory = new GraphDatabaseFactory();\r\n```","```\r\nGraphDatabaseService graphDb = graphDbFactory.newEmbeddedDatabase(\r\n  new File(\"data/cars\"));\r\n```","```\r\ngraphDb.beginTx();\r\n```","```\r\nNode car = graphDb.createNode(Label.label(\"Car\"));\r\ncar.setProperty(\"make\", \"tesla\");\r\ncar.setProperty(\"model\", \"model3\");\r\n\r\nNode owner = graphDb.createNode(Label.label(\"Person\"));\r\nowner.setProperty(\"firstName\", \"baeldung\");\r\nowner.setProperty(\"lastName\", \"baeldung\");\r\n```","```\r\nowner.createRelationshipTo(car, RelationshipType.withName(\"owner\"));\r\n```","```\r\nResult result = graphDb.execute(\r\n  \"MATCH (c:Car) <-[owner]- (p:Person) \" +\r\n  \"WHERE c.make = 'tesla'\" +\r\n  \"RETURN p.firstName, p.lastName\");\r\n```","```\r\nCREATE (self:Company {name:\"Baeldung\"})\r\nRETURN self\r\n```","```\r\nResult result = graphDb.execute(\r\n  \"CREATE (baeldung:Company {name:\\\"Baeldung\\\"}) \" +\r\n  \"-[:owns]-> (tesla:Car {make: 'tesla', model: 'modelX'})\" +\r\n  \"RETURN baeldung, tesla\");\r\n```","```\r\nResult result = graphDb.execute(\r\n  \"MATCH (company:Company)-[:owns]-> (car:Car)\" +\r\n  \"WHERE car.make='tesla' and car.model='modelX'\" +\r\n  \"RETURN company.name\");\r\n```","```\r\nResult result = graphDb.execute(\"MATCH (car:Car)\" +\r\n  \"WHERE car.make='tesla'\" +\r\n  \" SET car.milage=120\" +\r\n  \" SET car :Car:Electro\" +\r\n  \" SET car.model=NULL\" +\r\n  \" RETURN car\");\r\n```","```\r\ngraphDb.execute(\"MATCH (company:Company)\" +\r\n  \" WHERE company.name='Baeldung'\" +\r\n  \" DELETE company\");\r\n```","```\r\nMap<String, Object> params = new HashMap<>();\r\nparams.put(\"name\", \"baeldung\");\r\nparams.put(\"make\", \"tesla\");\r\nparams.put(\"model\", \"modelS\");\r\n\r\nResult result = graphDb.execute(\"CREATE (baeldung:Company {name:$name}) \" +\r\n  \"-[:owns]-> (tesla:Car {make: $make, model: $model})\" +\r\n  \"RETURN baeldung, tesla\", params);\r\n```","```\r\n<dependency>\r\n    <groupId>org.neo4j.driver</groupId>\r\n    <artifactId>neo4j-java-driver</artifactId>\r\n    <version>1.6.2</version>\r\n</dependency>\r\n```","```\r\nDriver driver = GraphDatabase.driver(\r\n  \"bolt://localhost:7687\", AuthTokens.basic(\"neo4j\", \"12345\"));\r\n```","```\r\nSession session = driver.session();\r\n```","```\r\nsession.run(\"CREATE (baeldung:Company {name:\\\"Baeldung\\\"}) \" +\r\n  \"-[:owns]-> (tesla:Car {make: 'tesla', model: 'modelX'})\" +\r\n  \"RETURN baeldung, tesla\");\r\n```","```\r\nsession.close();\r\ndriver.close();\r\n```","```\r\n<dependency>\r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j-jdbc-driver</artifactId>\r\n    <version>3.4.0</version>\r\n</dependency>\r\n```","```\r\nConnection con = DriverManager.getConnection(\r\n  \"jdbc:neo4j:bolt://localhost/?user=neo4j,password=12345,scheme=basic\");\r\n```","```\r\ntry (Statement stmt = con.\r\n  stmt.execute(\"CREATE (baeldung:Company {name:\\\"Baeldung\\\"}) \"\r\n  + \"-[:owns]-> (tesla:Car {make: 'tesla', model: 'modelX'})\"\r\n  + \"RETURN baeldung, tesla\")\r\n\r\n    ResultSet rs = stmt.executeQuery(\r\n      \"MATCH (company:Company)-[:owns]-> (car:Car)\" +\r\n      \"WHERE car.make='tesla' and car.model='modelX'\" +\r\n      \"RETURN company.name\");\r\n\r\n    while (rs.next()) {\r\n        rs.getString(\"company.name\");\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j-ogm-core</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n\r\n<dependency> \r\n    <groupId>org.neo4j</groupId>\r\n    <artifactId>neo4j-ogm-embedded-driver</artifactId>\r\n    <version>3.1.2</version>\r\n</dependency>\r\n```","```\r\n@NodeEntity\r\npublic class Company {\r\n    private Long id;\r\n\r\n    private String name;\r\n\r\n    @Relationship(type=\"owns\")\r\n    private Car car;\r\n}\r\n\r\n@NodeEntity\r\npublic class Car {\r\n    private Long id;\r\n\r\n    private String make;\r\n\r\n    @Relationship(direction = \"INCOMING\")\r\n    private Company company;\r\n}\r\n```","```\r\nConfiguration conf = new Configuration.Builder().build();\r\n```","```\r\nSessionFactory factory = new SessionFactory(conf, \"com.baeldung.graph\");\r\n```","```\r\nSession session = factory.openSession();\r\nCar tesla = new Car(\"tesla\", \"modelS\");\r\nCompany baeldung = new Company(\"baeldung\");\r\n\r\nbaeldung.setCar(tesla);\r\nsession.save(baeldung);\r\n```"]