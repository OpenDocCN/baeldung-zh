["```\r\n<dependency>\r\n    <groupId>com.fasterxml.jackson.core</groupId>\r\n    <artifactId>jackson-databind</artifactId>\r\n    <version>2.13.3</version>\r\n</dependency> \r\n```","```\r\nObjectMapper mapper = new ObjectMapper();\r\n```","```\r\n{\r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"fullName\": \"John Miles\",\r\n        \"age\": 34\r\n    }\r\n}\r\n```","```\r\n{   \r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"age\": 34,\r\n        \"fullName\": \"John Miles\"\r\n    }\r\n}\r\n```","```\r\nassertEquals(mapper.readTree(s1), mapper.readTree(s2));\r\n```","```\r\n{ \r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"fullName\":\"John Miles\",\r\n        \"age\": 34,\r\n        \"contact\":\r\n        {\r\n            \"email\": \"[[email protected]](/web/20221129022100/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n            \"phone\": \"9999999999\"\r\n        }\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"age\": 34,\r\n        \"fullName\": \"John Miles\",\r\n        \"contact\":\r\n        {\r\n            \"email\": \"[[email protected]](/web/20221129022100/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n            \"phone\": \"9999999999\"\r\n        }\r\n    }\r\n}\r\n```","```\r\nassertEquals(mapper.readTree(s1), mapper.readTree(s2)); \r\n```","```\r\n{\r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"fullName\": \"John Miles\",\r\n        \"age\": 34,\r\n        \"skills\": [\"Java\", \"C++\", \"Python\"]\r\n    }\r\n}\r\n```","```\r\n{\r\n    \"employee\":\r\n    {\r\n        \"id\": \"1212\",\r\n        \"age\": 34,\r\n        \"fullName\": \"John Miles\",\r\n        \"skills\": [\"Java\", \"C++\", \"Python\"] \r\n    } \r\n}\r\n```","```\r\nassertEquals(mapper.readTree(s1), mapper.readTree(s2));\r\n```","```\r\n{\r\n    \"name\": \"John\",\r\n    \"score\": 5.0\r\n}\r\n```","```\r\n{\r\n    \"name\": \"John\",\r\n    \"score\": 5\r\n}\r\n```","```\r\nJsonNode actualObj1 = mapper.readTree(s1);\r\nJsonNode actualObj2 = mapper.readTree(s2);\r\n\r\nassertNotEquals(actualObj1, actualObj2);\r\n```","```\r\npublic class NumericNodeComparator implements Comparator<JsonNode> \r\n{\r\n    @Override\r\n    public int compare(JsonNode o1, JsonNode o2)\r\n    {\r\n        if (o1.equals(o2)){\r\n           return 0;\r\n        }\r\n        if ((o1 instanceof NumericNode) && (o2 instanceof NumericNode)){\r\n            Double d1 = ((NumericNode) o1).asDouble();\r\n            Double d2 = ((NumericNode) o2).asDouble(); \r\n            if (d1.compareTo(d2) == 0) {\r\n               return 0;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n```","```\r\nNumericNodeComparator cmp = new NumericNodeComparator();\r\nassertTrue(actualObj1.equals(cmp, actualObj2));\r\n```","```\r\n{\r\n    \"name\": \"john\", \r\n    \"score\": 5 \r\n}\r\n```","```\r\n{ \r\n    \"name\": \"JOHN\", \r\n    \"score\": 5 \r\n}\r\n```","```\r\npublic class TextNodeComparator implements Comparator<JsonNode> \r\n{\r\n    @Override\r\n    public int compare(JsonNode o1, JsonNode o2) {\r\n        if (o1.equals(o2)) {\r\n            return 0;\r\n        }\r\n        if ((o1 instanceof TextNode) && (o2 instanceof TextNode)) {\r\n            String s1 = ((TextNode) o1).asText();\r\n            String s2 = ((TextNode) o2).asText();\r\n            if (s1.equalsIgnoreCase(s2)) {\r\n                return 0;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n}\r\n```","```\r\nJsonNode actualObj1 = mapper.readTree(s1);\r\nJsonNode actualObj2 = mapper.readTree(s2);\r\n\r\nTextNodeComparator cmp = new TextNodeComparator();\r\n\r\nassertNotEquals(actualObj1, actualObj2);\r\nassertTrue(actualObj1.equals(cmp, actualObj2));\r\n```"]