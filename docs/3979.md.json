["```\r\n@Entity\r\npublic class PasswordResetToken {\r\n\r\n    private static final int EXPIRATION = 60 * 24;\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    private String token;\r\n\r\n    @OneToOne(targetEntity = User.class, fetch = FetchType.EAGER)\r\n    @JoinColumn(nullable = false, name = \"user_id\")\r\n    private User user;\r\n\r\n    private Date expiryDate;\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n    <h1 th:text=\"#{message.resetPassword}\">reset</h1>\r\n\r\n    <label th:text=\"#{label.user.email}\">email</label>\r\n    <input id=\"email\" name=\"email\" type=\"email\" value=\"\" />\r\n    <button type=\"submit\" onclick=\"resetPass()\" \r\n      th:text=\"#{message.resetPassword}\">reset</button>\r\n\r\n<a th:href=\"@{/registration.html}\" th:text=\"#{label.form.loginSignUp}\">\r\n    registration\r\n</a>\r\n<a th:href=\"@{/login}\" th:text=\"#{label.form.loginLink}\">login</a>\r\n\r\n<script src=\"jquery.min.js\"></script>\r\n<script th:inline=\"javascript\">\r\nvar serverContext = [[@{/}]];\r\nfunction resetPass(){\r\n    var email = $(\"#email\").val();\r\n    $.post(serverContext + \"user/resetPassword\",{email: email} ,\r\n      function(data){\r\n          window.location.href = \r\n           serverContext + \"login?message=\" + data.message;\r\n    })\r\n    .fail(function(data) {\r\n    \tif(data.responseJSON.error.indexOf(\"MailError\") > -1)\r\n        {\r\n            window.location.href = serverContext + \"emailError.html\";\r\n        }\r\n        else{\r\n            window.location.href = \r\n              serverContext + \"login?message=\" + data.responseJSON.message;\r\n        }\r\n    });\r\n}\r\n\r\n</script>\r\n</body>\r\n\r\n</html>\r\n```","```\r\n<a th:href=\"@{/forgetPassword.html}\" \r\n  th:text=\"#{message.resetPassword}\">reset</a>\r\n```","```\r\n@PostMapping(\"/user/resetPassword\")\r\npublic GenericResponse resetPassword(HttpServletRequest request, \r\n  @RequestParam(\"email\") String userEmail) {\r\n    User user = userService.findUserByEmail(userEmail);\r\n    if (user == null) {\r\n        throw new UserNotFoundException();\r\n    }\r\n    String token = UUID.randomUUID().toString();\r\n    userService.createPasswordResetTokenForUser(user, token);\r\n    mailSender.send(constructResetTokenEmail(getAppUrl(request), \r\n      request.getLocale(), token, user));\r\n    return new GenericResponse(\r\n      messages.getMessage(\"message.resetPasswordEmail\", null, \r\n      request.getLocale()));\r\n}\r\n```","```\r\npublic void createPasswordResetTokenForUser(User user, String token) {\r\n    PasswordResetToken myToken = new PasswordResetToken(token, user);\r\n    passwordTokenRepository.save(myToken);\r\n}\r\n```","```\r\nprivate SimpleMailMessage constructResetTokenEmail(\r\n  String contextPath, Locale locale, String token, User user) {\r\n    String url = contextPath + \"/user/changePassword?token=\" + token;\r\n    String message = messages.getMessage(\"message.resetPassword\", \r\n      null, locale);\r\n    return constructEmail(\"Reset Password\", message + \" \\r\\n\" + url, user);\r\n}\r\n\r\nprivate SimpleMailMessage constructEmail(String subject, String body, \r\n  User user) {\r\n    SimpleMailMessage email = new SimpleMailMessage();\r\n    email.setSubject(subject);\r\n    email.setText(body);\r\n    email.setTo(user.getEmail());\r\n    email.setFrom(env.getProperty(\"support.email\"));\r\n    return email;\r\n}\r\n```","```\r\npublic class GenericResponse {\r\n    private String message;\r\n    private String error;\r\n\r\n    public GenericResponse(String message) {\r\n        super();\r\n        this.message = message;\r\n    }\r\n\r\n    public GenericResponse(String message, String error) {\r\n        super();\r\n        this.message = message;\r\n        this.error = error;\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/user/changePassword\")\r\npublic String showChangePasswordPage(Locale locale, Model model, \r\n  @RequestParam(\"token\") String token) {\r\n    String result = securityService.validatePasswordResetToken(token);\r\n    if(result != null) {\r\n        String message = messages.getMessage(\"auth.message.\" + result, null, locale);\r\n        return \"redirect:/login.html?lang=\" \r\n            + locale.getLanguage() + \"&message;=\" + message;\r\n    } else {\r\n        model.addAttribute(\"token\", token);\r\n        return \"redirect:/updatePassword.html?lang=\" + locale.getLanguage();\r\n    }\r\n}\r\n```","```\r\npublic String validatePasswordResetToken(String token) {\r\n    final PasswordResetToken passToken = passwordTokenRepository.findByToken(token);\r\n\r\n    return !isTokenFound(passToken) ? \"invalidToken\"\r\n            : isTokenExpired(passToken) ? \"expired\"\r\n            : null;\r\n}\r\n\r\nprivate boolean isTokenFound(PasswordResetToken passToken) {\r\n    return passToken != null;\r\n}\r\n\r\nprivate boolean isTokenExpired(PasswordResetToken passToken) {\r\n    final Calendar cal = Calendar.getInstance();\r\n    return passToken.getExpiryDate().before(cal.getTime());\r\n}\r\n```","```\r\n<html>\r\n<body>\r\n<div sec:authorize=\"hasAuthority('CHANGE_PASSWORD_PRIVILEGE')\">\r\n    <h1 th:text=\"#{message.resetYourPassword}\">reset</h1>\r\n    <form>\r\n        <label th:text=\"#{label.user.password}\">password</label>\r\n        <input id=\"password\" name=\"newPassword\" type=\"password\" value=\"\" />\r\n\r\n        <label th:text=\"#{label.user.confirmPass}\">confirm</label>\r\n        <input id=\"matchPassword\" type=\"password\" value=\"\" />\r\n\r\n        <label th:text=\"#{token.message}\">token</label>\r\n        <input id=\"token\" name=\"token\" value=\"\" />\r\n\r\n        <div id=\"globalError\" style=\"display:none\" \r\n          th:text=\"#{PasswordMatches.user}\">error</div>\r\n        <button type=\"submit\" onclick=\"savePass()\" \r\n          th:text=\"#{message.updatePassword}\">submit</button>\r\n    </form>\r\n\r\n<script th:inline=\"javascript\">\r\nvar serverContext = [[@{/}]];\r\n$(document).ready(function () {\r\n    $('form').submit(function(event) {\r\n        savePass(event);\r\n    });\r\n\r\n    $(\":password\").keyup(function(){\r\n        if($(\"#password\").val() != $(\"#matchPassword\").val()){\r\n            $(\"#globalError\").show().html(/*[[#{PasswordMatches.user}]]*/);\r\n        }else{\r\n            $(\"#globalError\").html(\"\").hide();\r\n        }\r\n    });\r\n});\r\n\r\nfunction savePass(event){\r\n    event.preventDefault();\r\n    if($(\"#password\").val() != $(\"#matchPassword\").val()){\r\n        $(\"#globalError\").show().html(/*[[#{PasswordMatches.user}]]*/);\r\n        return;\r\n    }\r\n    var formData= $('form').serialize();\r\n    $.post(serverContext + \"user/savePassword\",formData ,function(data){\r\n        window.location.href = serverContext + \"login?message=\"+data.message;\r\n    })\r\n    .fail(function(data) {\r\n        if(data.responseJSON.error.indexOf(\"InternalError\") > -1){\r\n            window.location.href = serverContext + \"login?message=\" + data.responseJSON.message;\r\n        }\r\n        else{\r\n            var errors = $.parseJSON(data.responseJSON.message);\r\n            $.each( errors, function( index,item ){\r\n                $(\"#globalError\").show().html(item.defaultMessage);\r\n            });\r\n            errors = $.parseJSON(data.responseJSON.error);\r\n            $.each( errors, function( index,item ){\r\n                $(\"#globalError\").show().append(item.defaultMessage+\"<br/>\");\r\n            });\r\n        }\r\n    });\r\n}\r\n</script>    \r\n</div>\r\n</body>\r\n</html>\r\n```","```\r\n@PostMapping(\"/user/savePassword\")\r\npublic GenericResponse savePassword(final Locale locale, @Valid PasswordDto passwordDto) {\r\n\r\n    String result = securityUserService.validatePasswordResetToken(passwordDto.getToken());\r\n\r\n    if(result != null) {\r\n        return new GenericResponse(messages.getMessage(\r\n            \"auth.message.\" + result, null, locale));\r\n    }\r\n\r\n    Optional user = userService.getUserByPasswordResetToken(passwordDto.getToken());\r\n    if(user.isPresent()) {\r\n        userService.changeUserPassword(user.get(), passwordDto.getNewPassword());\r\n        return new GenericResponse(messages.getMessage(\r\n            \"message.resetPasswordSuc\", null, locale));\r\n    } else {\r\n        return new GenericResponse(messages.getMessage(\r\n            \"auth.message.invalid\", null, locale));\r\n    }\r\n}\r\n```","```\r\npublic void changeUserPassword(User user, String password) {\r\n    user.setPassword(passwordEncoder.encode(password));\r\n    repository.save(user);\r\n}\r\n```","```\r\npublic class PasswordDto {\r\n\r\n    private String oldPassword;\r\n\r\n    private  String token;\r\n\r\n    @ValidPassword\r\n    private String newPassword;\r\n} \r\n```"]