["```\r\npublic class SquareCalculator {    \r\n\r\n    private ExecutorService executor \r\n      = Executors.newSingleThreadExecutor();\r\n\r\n    public Future<Integer> calculate(Integer input) {        \r\n        return executor.submit(() -> {\r\n            Thread.sleep(1000);\r\n            return input * input;\r\n        });\r\n    }\r\n}\r\n```","```\r\nFuture<Integer> future = new SquareCalculator().calculate(10);\r\n\r\nwhile(!future.isDone()) {\r\n    System.out.println(\"Calculating...\");\r\n    Thread.sleep(300);\r\n}\r\n\r\nInteger result = future.get();\r\n```","```\r\nInteger result = future.get(500, TimeUnit.MILLISECONDS);\r\n```","```\r\nFuture<Integer> future = new SquareCalculator().calculate(4);\r\n\r\nboolean canceled = future.cancel(true);\r\n```","```\r\nSquareCalculator squareCalculator = new SquareCalculator();\r\n\r\nFuture<Integer> future1 = squareCalculator.calculate(10);\r\nFuture<Integer> future2 = squareCalculator.calculate(100);\r\n\r\nwhile (!(future1.isDone() && future2.isDone())) {\r\n    System.out.println(\r\n      String.format(\r\n        \"future1 is %s and future2 is %s\", \r\n        future1.isDone() ? \"done\" : \"not done\", \r\n        future2.isDone() ? \"done\" : \"not done\"\r\n      )\r\n    );\r\n    Thread.sleep(300);\r\n}\r\n\r\nInteger result1 = future1.get();\r\nInteger result2 = future2.get();\r\n\r\nSystem.out.println(result1 + \" and \" + result2);\r\n\r\nsquareCalculator.shutdown();\r\n```","```\r\ncalculating square for: 10\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\ncalculating square for: 100\r\nfuture1 is done and future2 is not done\r\nfuture1 is done and future2 is not done\r\nfuture1 is done and future2 is not done\r\n100 and 10000\r\n```","```\r\npublic class SquareCalculator {\r\n\r\n    private ExecutorService executor = Executors.newFixedThreadPool(2);\r\n\r\n    //...\r\n}\r\n```","```\r\ncalculating square for: 10\r\ncalculating square for: 100\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\nfuture1 is not done and future2 is not done\r\n100 and 10000\r\n```","```\r\npublic class FactorialSquareCalculator extends RecursiveTask<Integer> {\r\n\r\n    private Integer n;\r\n\r\n    public FactorialSquareCalculator(Integer n) {\r\n        this.n = n;\r\n    }\r\n\r\n    @Override\r\n    protected Integer compute() {\r\n        if (n <= 1) {\r\n            return n;\r\n        }\r\n\r\n        FactorialSquareCalculator calculator \r\n          = new FactorialSquareCalculator(n - 1);\r\n\r\n        calculator.fork();\r\n\r\n        return n * n + calculator.join();\r\n    }\r\n}\r\n```","```\r\nForkJoinPool forkJoinPool = new ForkJoinPool();\r\n\r\nFactorialSquareCalculator calculator = new FactorialSquareCalculator(10);\r\n\r\nforkJoinPool.execute(calculator);\r\n```"]