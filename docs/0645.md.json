["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-reactor-netty</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-tomcat</artifactId>\r\n</dependency>\r\n```","```\r\nThread.getAllStackTraces()\r\n  .keySet()\r\n  .stream()\r\n  .collect(Collectors.toList());\r\n```","```\r\n@GetMapping(\"/index\")\r\npublic Mono<String> getIndex() {\r\n    return Mono.just(\"Hello World!\");\r\n}\r\n```","```\r\nWebClient.create(\"http://localhost:8080/index\").get()\r\n  .retrieve()\r\n  .bodyToMono(String.class)\r\n  .doOnNext(s -> printThreads());\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-mongodb-reactive</artifactId>\r\n</dependency>\r\n```","```\r\npublic interface PersonRepository extends ReactiveMongoRepository<Person, ObjectId> {\r\n}\r\n.....\r\npersonRepository.findAll().doOnComplete(this::printThreads);\r\n```","```\r\n<dependency>\r\n    <groupId>io.projectreactor.kafka</groupId>\r\n    <artifactId>reactor-kafka</artifactId>\r\n    <version>1.3.10</version>\r\n</dependency>\r\n```","```\r\n// producerProps: Map of Standard Kafka Producer Configurations\r\nSenderOptions<Integer, String> senderOptions = SenderOptions.create(producerProps);\r\nKafkaSender<Integer, String> sender =  KafkaSender.create(senderOptions);\r\nFlux<SenderRecord<Integer, String, Integer>> outboundFlux = Flux\r\n  .range(1, 10)\r\n  .map(i -> SenderRecord.create(new ProducerRecord<>(\"reactive-test\", i, \"Message_\" + i), i));\r\nsender.send(outboundFlux).subscribe();\r\n```","```\r\n// consumerProps: Map of Standard Kafka Consumer Configurations\r\nReceiverOptions<Integer, String> receiverOptions = ReceiverOptions.create(consumerProps);\r\nreceiverOptions.subscription(Collections.singleton(\"reactive-test\"));\r\nKafkaReceiver<Integer, String> receiver = KafkaReceiver.create(receiverOptions);\r\nFlux<ReceiverRecord<Integer, String>> inboundFlux = receiver.receive();\r\ninboundFlux.doOnComplete(this::printThreads)\r\n```","```\r\nScheduler scheduler = Schedulers.newBoundedElastic(5, 10, \"MyThreadGroup\");\r\n\r\nWebClient.create(\"http://localhost:8080/index\").get()\r\n  .retrieve()\r\n  .bodyToMono(String.class)\r\n  .publishOn(scheduler)\r\n  .doOnNext(s -> printThreads());\r\n```","```\r\n<dependency>\r\n    <groupId>io.reactivex.rxjava2</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>2.2.21</version>\r\n</dependency>\r\n```","```\r\nio.reactivex.Observable\r\n  .fromIterable(Arrays.asList(\"Tom\", \"Sawyer\"))\r\n  .map(s -> s.toUpperCase())\r\n  .observeOn(io.reactivex.schedulers.Schedulers.trampoline())\r\n  .doOnComplete(this::printThreads);\r\n```"]