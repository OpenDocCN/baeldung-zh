["```\r\nString[] config = MiniKdcConfigBuilder.builder()\r\n  .workDir(prepareWorkDir())\r\n  .principals(\"client/localhost\", \"HTTP/localhost\")\r\n  .confDir(\"minikdc-krb5.conf\")\r\n  .keytabName(\"example.keytab\")\r\n  .build();\r\n\r\nMiniKdc.main(config);\r\n```","```\r\nStandalone MiniKdc Running\r\n---------------------------------------------------\r\n  Realm           : EXAMPLE.COM\r\n  Running at      : localhost:localhost\r\n  krb5conf        : .\\spring-security-sso\\spring-security-sso-kerberos\\krb-test-workdir\\krb5.conf\r\n\r\n  created keytab  : .\\spring-security-sso\\spring-security-sso-kerberos\\krb-test-workdir\\example.keytab\r\n  with principals : [client/localhost, HTTP/localhost]\r\n```","```\r\n@Configuration\r\npublic class KerberosConfig {\r\n\r\n    @Value(\"${app.user-principal:client/localhost}\")\r\n    private String principal;\r\n\r\n    @Value(\"${app.keytab-location}\")\r\n    private String keytabLocation;\r\n\r\n    @Bean\r\n    public RestTemplate restTemplate() {\r\n        return new KerberosRestTemplate(keytabLocation, principal);\r\n    }\r\n}\r\n```","```\r\n@Service\r\nclass SampleClient {\r\n\r\n    @Value(\"${app.access-url}\")\r\n    private String endpoint;\r\n\r\n    private RestTemplate restTemplate;\r\n\r\n    // constructor, getter, setter\r\n\r\n    String getData() {\r\n        return restTemplate.getForObject(endpoint, String.class);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Value(\"${app.service-principal:HTTP/localhost}\")\r\n    private String servicePrincipal;\r\n\r\n    @Value(\"${app.keytab-location}\")\r\n    private String keytabLocation;\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n          .authorizeRequests()\r\n            .antMatchers(\"/\", \"/home\").permitAll()\r\n            .anyRequest().authenticated()\r\n            .and() \r\n          .exceptionHandling()\r\n            .authenticationEntryPoint(spnegoEntryPoint())\r\n            .and()\r\n          .formLogin()\r\n            .loginPage(\"/login\").permitAll()\r\n            .and()\r\n          .logout().permitAll()\r\n            .and()\r\n          .addFilterBefore(spnegoAuthenticationProcessingFilter(authenticationManagerBean()),\r\n            BasicAuthenticationFilter.class);\r\n    }\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        auth\r\n          .authenticationProvider(kerberosAuthenticationProvider())\r\n          .authenticationProvider(kerberosServiceAuthenticationProvider());\r\n    }\r\n\r\n    @Bean\r\n    public KerberosAuthenticationProvider kerberosAuthenticationProvider() {\r\n        KerberosAuthenticationProvider provider = new KerberosAuthenticationProvider();\r\n        // provider configuration\r\n        return provider;\r\n    }\r\n\r\n    @Bean\r\n    public SpnegoEntryPoint spnegoEntryPoint() {\r\n        return new SpnegoEntryPoint(\"/login\");\r\n    }\r\n\r\n    @Bean\r\n    public SpnegoAuthenticationProcessingFilter spnegoAuthenticationProcessingFilter(\r\n      AuthenticationManager authenticationManager) {\r\n        SpnegoAuthenticationProcessingFilter filter = new SpnegoAuthenticationProcessingFilter();\r\n        // filter configuration\r\n        return filter;\r\n    }\r\n\r\n    @Bean\r\n    public KerberosServiceAuthenticationProvider kerberosServiceAuthenticationProvider() {\r\n        KerberosServiceAuthenticationProvider provider = new KerberosServiceAuthenticationProvider();\r\n        // auth provider configuration  \r\n        return provider;\r\n    }\r\n\r\n    @Bean\r\n    public SunJaasKerberosTicketValidator sunJaasKerberosTicketValidator() {\r\n        SunJaasKerberosTicketValidator ticketValidator = new SunJaasKerberosTicketValidator();\r\n        // validator configuration\r\n        return ticketValidator;\r\n    }\r\n}\r\n```","```\r\n@Autowired\r\nprivate SampleClient sampleClient;\r\n\r\n@Test\r\npublic void givenKerberizedRestTemplate_whenServiceCall_thenSuccess() {\r\n    assertEquals(\"data from kerberized server\", sampleClient.getData());\r\n}\r\n```","```\r\n@Test\r\npublic void givenRestTemplate_whenServiceCall_thenFail() {\r\n    sampleClient.setRestTemplate(new RestTemplate());\r\n    assertThrows(RestClientException.class, sampleClient::getData);\r\n}\r\n```"]