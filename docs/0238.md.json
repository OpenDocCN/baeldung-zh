["```\r\nThread thread = new Thread(new Runnable() {\r\n    @Override\r\n    public void run() {\r\n        ...\r\n    }\r\n});\r\n```","```\r\npublic interface Sender {\r\n    String send(String message);\r\n}\r\n```","```\r\npublic interface SenderService {\r\n    String callSender(Sender sender);\r\n}\r\n```","```\r\npublic class EmailSenderService implements SenderService {\r\n\r\n    @Override\r\n    public String callSender(Sender sender) {\r\n        return sender.send(\"Email Notification\");\r\n    }\r\n}\r\n```","```\r\npublic class SmsSenderService implements SenderService {\r\n\r\n    @Override\r\n    public String callSender(Sender sender) {\r\n        return sender.send(\"SMS Notification\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenPassingAnonymousClass_thenSuccess() {\r\n    SenderService emailSenderService = new EmailSenderService();\r\n\r\n    String emailNotif = emailSenderService.callSender(new Sender() {\r\n        @Override\r\n        public String send(String message) {\r\n            return message;\r\n        }\r\n    });\r\n\r\n    assertEquals(emailNotif, \"Email Notification\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenPassingLambdaExpression_thenSuccess() {\r\n    SenderService smsSenderService = new SmsSenderService();\r\n\r\n    String smsNotif = smsSenderService.callSender((String message) -> {\r\n        return message;\r\n    });\r\n\r\n    assertEquals(smsNotif, \"SMS Notification\");\r\n}\r\n```","```\r\nString smsNotif = smsSenderService.callSender(message -> message);\r\n```"]