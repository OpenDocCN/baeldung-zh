["```\r\n$ docker --version\r\nDocker version 19.03.12, build 48a66213fe\r\n```","```\r\n$ sam --version\r\nSAM CLI, version 1.1.0\r\n```","```\r\n$ sam init\r\n```","```\r\n1 - AWS Quick Start Templates\r\n13 - Java 8\r\n1 - maven\r\nProject name - shipping-tracker\r\n1 - Hello World Example: Maven\r\n```","```\r\nEvents:\r\n  HelloWorld:\r\n    Type: Api \r\n    Properties:\r\n      Path: /hello\r\n      Method: get\r\n```","```\r\n$ sam build\r\n... lots of maven output\r\n$ sam start-api\r\n```","```\r\n$ curl localhost:3000/hello\r\n{ \"message\": \"hello world\", \"location\": \"192.168.1.1\" }\r\n```","```\r\nCreateConsignment:\r\n  Type: Api \r\n  Properties:\r\n    Path: /consignment\r\n    Method: post\r\nAddItem:\r\n  Type: Api\r\n  Properties:\r\n    Path: /consignment/{id}/item\r\n    Method: post\r\nCheckIn:\r\n  Type: Api\r\n  Properties:\r\n    Path: /consignment/{id}/checkin\r\n    Method: post\r\nViewConsignment:\r\n  Type: Api\r\n  Properties:\r\n    Path: /consignment/{id}\r\n    Method: get\r\n```","```\r\nResources:\r\n  ShippingFunction:\r\n    Type: AWS::Serverless::Function \r\n```","```\r\nProperties:\r\n  CodeUri: ShippingFunction\r\n  Handler: com.baeldung.lambda.shipping.App::handleRequest\r\n```","```\r\npublic APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent input, Context context) {\r\n    Map<String, String> headers = new HashMap<>();\r\n    headers.put(\"Content-Type\", \"application/json\");\r\n    headers.put(\"X-Custom-Header\", \"application/json\");\r\n\r\n    return new APIGatewayProxyResponseEvent()\r\n      .withHeaders(headers)\r\n      .withStatusCode(200)\r\n      .withBody(input.getResource());\r\n}\r\n```","```\r\n$ sam build\r\n... maven output\r\n$ sam start-api\r\n```","```\r\n$ curl localhost:3000/consignment/123\r\n/consignment/{id}\r\n```","```\r\n$ curl -d '{\"source\":\"data.orange.brings\", \"destination\":\"heave.wipes.clay\"}' \\\r\n  -H 'Content-Type: application/json' \\\r\n  http://localhost:3000/consignment/\r\n/consignment\r\n```","```\r\npublic class ShippingService {\r\n    public String createConsignment(Consignment consignment) {\r\n        return UUID.randomUUID().toString();\r\n    }\r\n\r\n    public void addItem(String consignmentId, Item item) {\r\n    }\r\n\r\n    public void checkIn(String consignmentId, Checkin checkin) {\r\n    }\r\n\r\n    public Consignment view(String consignmentId) {\r\n        return new Consignment();\r\n    }\r\n}\r\n```","```\r\nObject result = \"OK\";\r\nShippingService service = new ShippingService();\r\n\r\nswitch (input.getResource()) {\r\n    case \"/consignment\":\r\n        result = service.createConsignment(\r\n          fromJson(input.getBody(), Consignment.class));\r\n        break;\r\n    case \"/consignment/{id}\":\r\n        result = service.view(input.getPathParameters().get(\"id\"));\r\n        break;\r\n    case \"/consignment/{id}/item\":\r\n        service.addItem(input.getPathParameters().get(\"id\"),\r\n          fromJson(input.getBody(), Item.class));\r\n        break;\r\n    case \"/consignment/{id}/checkin\":\r\n        service.checkIn(input.getPathParameters().get(\"id\"),\r\n          fromJson(input.getBody(), Checkin.class));\r\n        break;\r\n}\r\n\r\nreturn new APIGatewayProxyResponseEvent()\r\n  .withHeaders(headers)\r\n  .withStatusCode(200)\r\n  .withBody(toJson(result));\r\n```","```\r\n$ docker pull postgres:latest\r\n... docker output\r\nStatus: Downloaded newer image for postgres:latest\r\ndocker.io/library/postgres:latest\r\n```","```\r\n$ docker network create shipping\r\n```","```\r\ndocker run --name postgres \\\r\n  --network shipping \\\r\n  -e POSTGRES_PASSWORD=password \\\r\n  -d postgres:latest\r\n```","```\r\n$ docker exec -it postgres psql -U postgres\r\npsql (12.4 (Debian 12.4-1.pgdg100+1))\r\nType \"help\" for help.\r\n\r\npostgres=#\r\n```","```\r\npostgres=# create schema shipping;\r\nCREATE SCHEMA \r\n```","```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.21.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-hikaricp</artifactId>\r\n    <version>5.4.21.Final</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.postgresql</groupId>\r\n    <artifactId>postgresql</artifactId>\r\n    <version>42.2.16</version>\r\n</dependency>\r\n```","```\r\n@Entity(name = \"consignment\")\r\n@Table(name = \"consignment\")\r\npublic class Consignment {\r\n    private String id;\r\n    private String source;\r\n    private String destination;\r\n    private boolean isDelivered;\r\n    private List items = new ArrayList<>();\r\n    private List checkins = new ArrayList<>();\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Id\r\n@Column(name = \"consignment_id\")\r\npublic String getId() {\r\n    return id;\r\n}\r\n\r\n@Column(name = \"source\")\r\npublic String getSource() {\r\n    return source;\r\n}\r\n\r\n@Column(name = \"destination\")\r\npublic String getDestination() {\r\n    return destination;\r\n}\r\n\r\n@Column(name = \"delivered\", columnDefinition = \"boolean\")\r\npublic boolean isDelivered() {\r\n    return isDelivered;\r\n}\r\n```","```\r\n@ElementCollection(fetch = EAGER)\r\n@CollectionTable(name = \"consignment_item\", joinColumns = @JoinColumn(name = \"consignment_id\"))\r\n@OrderColumn(name = \"item_index\")\r\npublic List getItems() {\r\n    return items;\r\n}\r\n\r\n@ElementCollection(fetch = EAGER)\r\n@CollectionTable(name = \"consignment_checkin\", joinColumns = @JoinColumn(name = \"consignment_id\"))\r\n@OrderColumn(name = \"checkin_index\")\r\npublic List getCheckins() {\r\n    return checkins;\r\n}\r\n```","```\r\n@Embeddable\r\npublic class Item {\r\n    private String location;\r\n    private String description;\r\n    private String timeStamp;\r\n\r\n    @Column(name = \"location\")\r\n    public String getLocation() {\r\n        return location;\r\n    }\r\n\r\n    @Column(name = \"description\")\r\n    public String getDescription() {\r\n        return description;\r\n    }\r\n\r\n    @Column(name = \"timestamp\")\r\n    public String getTimeStamp() {\r\n        return timeStamp;\r\n    }\r\n\r\n    // ... setters omitted\r\n}\r\n```","```\r\n@Embeddable\r\npublic class Checkin {\r\n    private String timeStamp;\r\n    private String location;\r\n\r\n    @Column(name = \"timestamp\")\r\n    public String getTimeStamp() {\r\n        return timeStamp;\r\n    }\r\n\r\n    @Column(name = \"location\")\r\n    public String getLocation() {\r\n        return location;\r\n    }\r\n\r\n    // ... setters omitted\r\n} \r\n```","```\r\npublic void save(Session session, Consignment consignment) {\r\n    Transaction transaction = session.beginTransaction();\r\n    session.save(consignment);\r\n    transaction.commit();\r\n}\r\n\r\npublic Optional<Consignment> find(Session session, String id) {\r\n    return Optional.ofNullable(session.get(Consignment.class, id));\r\n}\r\n```","```\r\nEnvironment: \r\n  Variables:\r\n    DB_URL: jdbc:postgresql://postgres/postgres\r\n    DB_USER: postgres\r\n    DB_PASSWORD: password \r\n```","```\r\nMap<String, String> settings = new HashMap<>();\r\nsettings.put(URL, System.getenv(\"DB_URL\"));\r\nsettings.put(DIALECT, \"org.hibernate.dialect.PostgreSQLDialect\");\r\nsettings.put(DEFAULT_SCHEMA, \"shipping\");\r\nsettings.put(DRIVER, \"org.postgresql.Driver\");\r\nsettings.put(USER, System.getenv(\"DB_USER\"));\r\nsettings.put(PASS, System.getenv(\"DB_PASSWORD\"));\r\nsettings.put(\"hibernate.hikari.connectionTimeout\", \"20000\");\r\nsettings.put(\"hibernate.hikari.minimumIdle\", \"1\");\r\nsettings.put(\"hibernate.hikari.maximumPoolSize\", \"2\");\r\nsettings.put(\"hibernate.hikari.idleTimeout\", \"30000\");\r\nsettings.put(HBM2DDL_AUTO, \"create-only\");\r\nsettings.put(HBM2DDL_DATABASE_ACTION, \"create\");\r\n```","```\r\nStandardServiceRegistry registry = new StandardServiceRegistryBuilder()\r\n  .applySettings(settings)\r\n  .build();\r\n\r\nreturn new MetadataSources(registry)\r\n  .addAnnotatedClass(Consignment.class)\r\n  .addAnnotatedClass(Item.class)\r\n  .addAnnotatedClass(Checkin.class)\r\n  .buildMetadata()\r\n  .buildSessionFactory();\r\n```","```\r\nprivate SessionFactory sessionFactory = createSessionFactory();\r\n```","```\r\nprivate void flushConnectionPool() {\r\n    ConnectionProvider connectionProvider = sessionFactory.getSessionFactoryOptions()\r\n      .getServiceRegistry()\r\n      .getService(ConnectionProvider.class);\r\n    HikariDataSource hikariDataSource = connectionProvider.unwrap(HikariDataSource.class);\r\n    hikariDataSource.getHikariPoolMXBean().softEvictConnections();\r\n}\r\n```","```\r\ntry {\r\n    ShippingService service = new ShippingService(sessionFactory, new ShippingDao());\r\n    return routeRequest(input, service);\r\n} finally {\r\n    flushConnectionPool();\r\n} \r\n```","```\r\n$ sam build\r\n$ sam local start-api --docker-network shipping\r\n```","```\r\n$ curl localhost:3000/consignment/123\r\n{\"id\":null,\"source\":null,\"destination\":null,\"items\":[],\"checkins\":[],\"delivered\":false}\r\n```","```\r\n$ docker exec -it postgres pg_dump -s -U postgres\r\n... DDL output\r\nCREATE TABLE shipping.consignment_item (\r\n    consignment_id character varying(255) NOT NULL,\r\n...\r\n```","```\r\npublic String createConsignment(Consignment consignment) {\r\n    try (Session session = sessionFactory.openSession()) {\r\n        consignment.setDelivered(false);\r\n        consignment.setId(UUID.randomUUID().toString());\r\n        shippingDao.save(session, consignment);\r\n        return consignment.getId();\r\n    }\r\n}\r\n```","```\r\npublic Consignment view(String consignmentId) {\r\n    try (Session session = sessionFactory.openSession()) {\r\n        return shippingDao.find(session, consignmentId)\r\n          .orElseGet(Consignment::new);\r\n    }\r\n}\r\n```","```\r\npublic void addItem(String consignmentId, Item item) {\r\n    try (Session session = sessionFactory.openSession()) {\r\n        shippingDao.find(session, consignmentId)\r\n          .ifPresent(consignment -> addItem(session, consignment, item));\r\n    }\r\n}\r\n\r\nprivate void addItem(Session session, Consignment consignment, Item item) {\r\n    consignment.getItems()\r\n      .add(item);\r\n    shippingDao.save(session, consignment);\r\n}\r\n```","```\r\npublic void checkIn(String consignmentId, Checkin checkin) {\r\n    try (Session session = sessionFactory.openSession()) {\r\n        shippingDao.find(session, consignmentId)\r\n          .ifPresent(consignment -> checkIn(session, consignment, checkin));\r\n    }\r\n}\r\n\r\nprivate void checkIn(Session session, Consignment consignment, Checkin checkin) {\r\n    consignment.getCheckins().add(checkin);\r\n    consignment.getCheckins().sort(Comparator.comparing(Checkin::getTimeStamp));\r\n    if (checkin.getLocation().equals(consignment.getDestination())) {\r\n        consignment.setDelivered(true);\r\n    }\r\n    shippingDao.save(session, consignment);\r\n}\r\n```","```\r\n$ curl -d '{\"source\":\"data.orange.brings\", \"destination\":\"heave.wipes.clay\"}' \\\r\n  -H 'Content-Type: application/json' \\\r\n  http://localhost:3000/consignment/\r\n\r\n\"3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\"\r\n```","```\r\n$ curl -d '{\"location\":\"data.orange.brings\", \"timeStamp\":\"20200101T120000\", \"description\":\"picture\"}' \\\r\n  -H 'Content-Type: application/json' \\\r\n  http://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/item\r\n\"OK\"\r\n\r\n$ curl -d '{\"location\":\"data.orange.brings\", \"timeStamp\":\"20200101T120001\", \"description\":\"piano\"}' \\\r\n  -H 'Content-Type: application/json' \\\r\n  http://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/item\r\n\"OK\" \r\n```","```\r\n$ curl -d '{\"location\":\"united.alarm.raves\", \"timeStamp\":\"20200101T173301\"}' \\\r\n-H 'Content-Type: application/json' \\\r\nhttp://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/checkin\r\n\"OK\"\r\n```","```\r\n$ curl -d '{\"location\":\"wink.sour.chasing\", \"timeStamp\":\"20200101T191202\"}' \\\r\n-H 'Content-Type: application/json' \\\r\nhttp://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/checkin\r\n\"OK\"\r\n```","```\r\n$ curl http://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\r\n{\r\n  \"id\":\"3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\",\r\n  \"source\":\"data.orange.brings\",\r\n  \"destination\":\"heave.wipes.clay\",\r\n  \"items\":[\r\n    {\"location\":\"data.orange.brings\",\"description\":\"picture\",\"timeStamp\":\"20200101T120000\"},\r\n    {\"location\":\"data.orange.brings\",\"description\":\"piano\",\"timeStamp\":\"20200101T120001\"}\r\n  ],\r\n  \"checkins\":[\r\n    {\"timeStamp\":\"20200101T173301\",\"location\":\"united.alarm.raves\"},\r\n    {\"timeStamp\":\"20200101T191202\",\"location\":\"wink.sour.chasing\"}\r\n  ],\r\n  \"delivered\":false\r\n}% \r\n```","```\r\n$ curl -d '{\"location\":\"heave.wipes.clay\", \"timeStamp\":\"20200101T214622\"}' \\\r\n-H 'Content-Type: application/json' \\\r\nhttp://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/checkin\r\n\"OK\"\r\n```","```\r\n$ curl http://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\r\n{\r\n  \"id\":\"3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\",\r\n...\r\n    {\"timeStamp\":\"20200101T191202\",\"location\":\"wink.sour.chasing\"},\r\n    {\"timeStamp\":\"20200101T214622\",\"location\":\"heave.wipes.clay\"}\r\n  ],\r\n  \"delivered\":true\r\n} \r\n```","```\r\n$ curl -d '{\"location\":\"deflection.famed.apple\", \"timeStamp\":\"20200101T201254\"}' \\\r\n-H 'Content-Type: application/json' \\\r\nhttp://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207/checkin\r\n\"OK\"\r\n\r\n$ curl http://localhost:3000/consignment/3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\r\n{\r\n\"id\":\"3dd0f0e4-fc4a-46b4-8dae-a57d47df5207\",\r\n...\r\n{\"timeStamp\":\"20200101T191202\",\"location\":\"wink.sour.chasing\"},\r\n{\"timeStamp\":\"20200101T201254\",\"location\":\"deflection.famed.apple\"},\r\n{\"timeStamp\":\"20200101T214622\",\"location\":\"heave.wipes.clay\"}\r\n],\r\n\"delivered\":true\r\n} \r\n```"]