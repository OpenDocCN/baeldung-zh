["```\r\n@Bean\r\nMessageListenerAdapter messageListener() { \r\n    return new MessageListenerAdapter(new RedisMessageSubscriber());\r\n}\r\n```","```\r\n@Bean\r\nRedisMessageListenerContainer redisContainer() {\r\n    RedisMessageListenerContainer container \r\n      = new RedisMessageListenerContainer(); \r\n    container.setConnectionFactory(jedisConnectionFactory()); \r\n    container.addMessageListener(messageListener(), topic()); \r\n    return container; \r\n}\r\n```","```\r\n@Bean\r\nMessagePublisher redisPublisher() { \r\n    return new RedisMessagePublisher(redisTemplate(), topic());\r\n}\r\n```","```\r\n@Bean\r\nChannelTopic topic() {\r\n    return new ChannelTopic(\"messageQueue\");\r\n}\r\n```","```\r\npublic interface MessagePublisher {\r\n    void publish(String message);\r\n}\r\n```","```\r\npublic class RedisMessagePublisher implements MessagePublisher {\r\n\r\n    @Autowired\r\n    private RedisTemplate<String, Object> redisTemplate;\r\n    @Autowired\r\n    private ChannelTopic topic;\r\n\r\n    public RedisMessagePublisher() {\r\n    }\r\n\r\n    public RedisMessagePublisher(\r\n      RedisTemplate<String, Object> redisTemplate, ChannelTopic topic) {\r\n      this.redisTemplate = redisTemplate;\r\n      this.topic = topic;\r\n    }\r\n\r\n    public void publish(String message) {\r\n        redisTemplate.convertAndSend(topic.getTopic(), message);\r\n    }\r\n} \r\n```","```\r\n@Service\r\npublic class RedisMessageSubscriber implements MessageListener {\r\n\r\n    public static List<String> messageList = new ArrayList<String>();\r\n\r\n    public void onMessage(Message message, byte[] pattern) {\r\n        messageList.add(message.toString());\r\n        System.out.println(\"Message received: \" + message.toString());\r\n    }\r\n}\r\n```","```\r\nString message = \"Message \" + UUID.randomUUID();\r\nredisMessagePublisher.publish(message);\r\n```","```\r\nRedisMessageSubscriber.messageList.get(0).contains(message) \r\n```"]