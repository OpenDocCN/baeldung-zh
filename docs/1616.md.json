["```\r\npublic class MyList extends AbstractList<String> {\r\n\r\n    @Override\r\n    public void add(int index, String element) {\r\n        // no-op\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddCalledVerified() {\r\n    MyList myList = mock(MyList.class);\r\n    doNothing().when(myList).add(isA(Integer.class), isA(String.class));\r\n    myList.add(0, \"\");\r\n\r\n    verify(myList, times(1)).add(0, \"\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenAddCalledVerified() {\r\n    MyList myList = mock(MyList.class);\r\n    myList(0, \"\");\r\n\r\n    verify(myList, times(1)).add(0, \"\");\r\n} \r\n```","```\r\n@Test(expected = Exception.class)\r\npublic void givenNull_AddThrows() {\r\n    MyList myList = mock(MyList.class);\r\n    doThrow().when(myList).add(isA(Integer.class), isNull());\r\n\r\n    myList.add(0, null);\r\n} \r\n```","```\r\n@Test\r\npublic void whenAddCalledValueCaptured() {\r\n    MyList myList = mock(MyList.class);\r\n    ArgumentCaptor<String> valueCapture = ArgumentCaptor.forClass(String.class);\r\n    doNothing().when(myList).add(any(Integer.class), valueCapture.capture());\r\n    myList.add(0, \"captured\");\r\n\r\n    assertEquals(\"captured\", valueCapture.getValue());\r\n} \r\n```","```\r\n@Test\r\npublic void whenAddCalledAnswered() {\r\n    MyList myList = mock(MyList.class);\r\n    doAnswer(invocation -> {\r\n        Object arg0 = invocation.getArgument(0);\r\n        Object arg1 = invocation.getArgument(1);\r\n\r\n        assertEquals(3, arg0);\r\n        assertEquals(\"answer me\", arg1);\r\n        return null;\r\n    }).when(myList).add(any(Integer.class), any(String.class));\r\n    myList.add(3, \"answer me\");\r\n} \r\n```","```\r\n@Test\r\npublic void whenAddCalledRealMethodCalled() {\r\n    MyList myList = mock(MyList.class);\r\n    doCallRealMethod().when(myList).add(any(Integer.class), any(String.class));\r\n    myList.add(1, \"real\");\r\n\r\n    verify(myList, times(1)).add(1, \"real\");\r\n} \r\n```"]