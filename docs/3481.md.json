["```\r\npublic enum SearchOperation {\r\n    EQUALITY, NEGATION, GREATER_THAN, LESS_THAN, LIKE, STARTS_WITH, ENDS_WITH, CONTAINS;\r\n\r\n    public static final String[] SIMPLE_OPERATION_SET = { \":\", \"!\", \">\", \"<\", \"~\" };\r\n\r\n    public static SearchOperation getSimpleOperation(char input) {\r\n        switch (input) {\r\n        case ':':\r\n            return EQUALITY;\r\n        case '!':\r\n            return NEGATION;\r\n        case '>':\r\n            return GREATER_THAN;\r\n        case '<':\r\n            return LESS_THAN;\r\n        case '~':\r\n            return LIKE;\r\n        default:\r\n            return null;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class SearchCriteria {\r\n    private String key;\r\n    private SearchOperation operation;\r\n    private Object value;\r\n}\r\n```","```\r\npublic class UserSpecification implements Specification<User> {\r\n\r\n    private SearchCriteria criteria;\r\n\r\n    @Override\r\n    public Predicate toPredicate(\r\n      Root<User> root, CriteriaQuery<?> query, CriteriaBuilder builder) {\r\n\r\n        switch (criteria.getOperation()) {\r\n        case EQUALITY:\r\n            return builder.equal(root.get(criteria.getKey()), criteria.getValue());\r\n        case NEGATION:\r\n            return builder.notEqual(root.get(criteria.getKey()), criteria.getValue());\r\n        case GREATER_THAN:\r\n            return builder.greaterThan(root.<String> get(\r\n              criteria.getKey()), criteria.getValue().toString());\r\n        case LESS_THAN:\r\n            return builder.lessThan(root.<String> get(\r\n              criteria.getKey()), criteria.getValue().toString());\r\n        case LIKE:\r\n            return builder.like(root.<String> get(\r\n              criteria.getKey()), criteria.getValue().toString());\r\n        case STARTS_WITH:\r\n            return builder.like(root.<String> get(criteria.getKey()), criteria.getValue() + \"%\");\r\n        case ENDS_WITH:\r\n            return builder.like(root.<String> get(criteria.getKey()), \"%\" + criteria.getValue());\r\n        case CONTAINS:\r\n            return builder.like(root.<String> get(\r\n              criteria.getKey()), \"%\" + criteria.getValue() + \"%\");\r\n        default:\r\n            return null;\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"firstName\", SearchOperation.EQUALITY, \"john\"));\r\n    UserSpecification spec1 = new UserSpecification(\r\n      new SearchCriteria(\"lastName\", SearchOperation.EQUALITY, \"doe\"));\r\n    List<User> results = repository.findAll(Specification.where(spec).and(spec1));\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameInverse_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"firstName\", SearchOperation.NEGATION, \"john\"));\r\n    List<User> results = repository.findAll(Specification.where(spec));\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMinAge_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"age\", SearchOperation.GREATER_THAN, \"25\"));\r\n    List<User> results = repository.findAll(Specification.where(spec));\r\n\r\n    assertThat(userTom, isIn(results));\r\n    assertThat(userJohn, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNamePrefix_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"firstName\", SearchOperation.STARTS_WITH, \"jo\"));\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameSuffix_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"firstName\", SearchOperation.ENDS_WITH, \"n\"));\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameSubstring_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"firstName\", SearchOperation.CONTAINS, \"oh\"));\r\n    List<User> results = repository.findAll(spec);\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenAgeRange_whenGettingListOfUsers_thenCorrect() {\r\n    UserSpecification spec = new UserSpecification(\r\n      new SearchCriteria(\"age\", SearchOperation.GREATER_THAN, \"20\"));\r\n    UserSpecification spec1 = new UserSpecification(\r\n      new SearchCriteria(\"age\", SearchOperation.LESS_THAN, \"25\"));\r\n    List<User> results = repository.findAll(Specification.where(spec).and(spec1));\r\n\r\n    assertThat(userJohn, isIn(results));\r\n    assertThat(userTom, not(isIn(results)));\r\n}\r\n```","```\r\npublic class UserSpecificationsBuilder {\r\n\r\n    private List<SearchCriteria> params;\r\n\r\n    public UserSpecificationsBuilder with(\r\n      String key, String operation, Object value, String prefix, String suffix) {\r\n\r\n        SearchOperation op = SearchOperation.getSimpleOperation(operation.charAt(0));\r\n        if (op != null) {\r\n            if (op == SearchOperation.EQUALITY) {\r\n                boolean startWithAsterisk = prefix.contains(\"*\");\r\n                boolean endWithAsterisk = suffix.contains(\"*\");\r\n\r\n                if (startWithAsterisk && endWithAsterisk) {\r\n                    op = SearchOperation.CONTAINS;\r\n                } else if (startWithAsterisk) {\r\n                    op = SearchOperation.ENDS_WITH;\r\n                } else if (endWithAsterisk) {\r\n                    op = SearchOperation.STARTS_WITH;\r\n                }\r\n            }\r\n            params.add(new SearchCriteria(key, op, value));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public Specification<User> build() {\r\n        if (params.size() == 0) {\r\n            return null;\r\n        }\r\n\r\n        Specification result = new UserSpecification(params.get(0));\r\n\r\n        for (int i = 1; i < params.size(); i++) {\r\n            result = params.get(i).isOrPredicate()\r\n              ? Specification.where(result).or(new UserSpecification(params.get(i))) \r\n              : Specification.where(result).and(new UserSpecification(params.get(i)));\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(method = RequestMethod.GET, value = \"/users\")\r\n@ResponseBody\r\npublic List<User> findAllBySpecification(@RequestParam(value = \"search\") String search) {\r\n    UserSpecificationsBuilder builder = new UserSpecificationsBuilder();\r\n    String operationSetExper = Joiner.on(\"|\").join(SearchOperation.SIMPLE_OPERATION_SET);\r\n    Pattern pattern = Pattern.compile(\r\n      \"(\\\\w+?)(\" + operationSetExper + \")(\\p{Punct}?)(\\\\w+?)(\\p{Punct}?),\");\r\n    Matcher matcher = pattern.matcher(search + \",\");\r\n    while (matcher.find()) {\r\n        builder.with(\r\n          matcher.group(1), \r\n          matcher.group(2), \r\n          matcher.group(4), \r\n          matcher.group(3), \r\n          matcher.group(5));\r\n    }\r\n\r\n    Specification<User> spec = builder.build();\r\n    return dao.findAll(spec);\r\n}\r\n```","```\r\nhttp://localhost:8080/users?search=firstName:jo*,age<25\r\n```","```\r\n[{\r\n    \"id\":1,\r\n    \"firstName\":\"john\",\r\n    \"lastName\":\"doe\",\r\n    \"email\":\"[[email protected]](/web/20220529015703/https://www.baeldung.com/cdn-cgi/l/email-protection)\",\r\n    \"age\":24\r\n}]\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(\r\n  classes = { ConfigTest.class, PersistenceConfig.class }, \r\n  loader = AnnotationConfigContextLoader.class)\r\n@ActiveProfiles(\"test\")\r\npublic class JPASpecificationLiveTest {\r\n\r\n    @Autowired\r\n    private UserRepository repository;\r\n\r\n    private User userJohn;\r\n    private User userTom;\r\n\r\n    private final String URL_PREFIX = \"http://localhost:8080/users?search=\";\r\n\r\n    @Before\r\n    public void init() {\r\n        userJohn = new User();\r\n        userJohn.setFirstName(\"John\");\r\n        userJohn.setLastName(\"Doe\");\r\n        userJohn.setEmail(\"[[email protected]](/web/20220529015703/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userJohn.setAge(22);\r\n        repository.save(userJohn);\r\n\r\n        userTom = new User();\r\n        userTom.setFirstName(\"Tom\");\r\n        userTom.setLastName(\"Doe\");\r\n        userTom.setEmail(\"[[email protected]](/web/20220529015703/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userTom.setAge(26);\r\n        repository.save(userTom);\r\n    }\r\n\r\n    private RequestSpecification givenAuth() {\r\n        return RestAssured.given().auth()\r\n                                  .preemptive()\r\n                                  .basic(\"username\", \"password\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstAndLastName_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"firstName:john,lastName:doe\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertFalse(result.contains(userTom.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameInverse_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"firstName!john\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userTom.getEmail()));\r\n    assertFalse(result.contains(userJohn.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenMinAge_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"age>25\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userTom.getEmail()));\r\n    assertFalse(result.contains(userJohn.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNamePrefix_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"firstName:jo*\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertFalse(result.contains(userTom.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameSuffix_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"firstName:*n\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertFalse(result.contains(userTom.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenFirstNameSubstring_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"firstName:*oh*\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertFalse(result.contains(userTom.getEmail()));\r\n}\r\n```","```\r\n@Test\r\npublic void givenAgeRange_whenGettingListOfUsers_thenCorrect() {\r\n    Response response = givenAuth().get(URL_PREFIX + \"age>20,age<25\");\r\n    String result = response.body().asString();\r\n\r\n    assertTrue(result.contains(userJohn.getEmail()));\r\n    assertFalse(result.contains(userTom.getEmail()));\r\n}\r\n```"]