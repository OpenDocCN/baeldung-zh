["```\r\nString input = \"baeldung,tutorial,splitting,text,\\\"ignoring this comma,\\\"\";\r\n```","```\r\nbaeldung\r\ntutorial\r\nsplitting\r\ntext\r\n\"ignoring this comma,\"\r\n```","```\r\nList<String> tokens = new ArrayList<String>();\r\nint startPosition = 0;\r\nboolean isInQuotes = false;\r\nfor (int currentPosition = 0; currentPosition < input.length(); currentPosition++) {\r\n    if (input.charAt(currentPosition) == '\\\"') {\r\n        isInQuotes = !isInQuotes;\r\n    }\r\n    else if (input.charAt(currentPosition) == ',' && !isInQuotes) {\r\n        tokens.add(input.substring(startPosition, currentPosition));\r\n        startPosition = currentPosition + 1;\r\n    }\r\n}\r\n\r\nString lastToken = input.substring(startPosition);\r\nif (lastToken.equals(\",\")) {\r\n    tokens.add(\"\");\r\n} else {\r\n    tokens.add(lastToken);\r\n}\r\n```","```\r\nString input = \"baeldung,tutorial,splitting,text,\\\"ignoring this comma,\\\"\";\r\nvar matcher = contains(\"baeldung\", \"tutorial\", \"splitting\", \"text\", \"\\\"ignoring this comma,\\\"\");\r\nassertThat(splitWithParser(input), matcher);\r\n```","```\r\nString[] tokens = input.split(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\", -1);\r\n```","```\r\nPattern pattern = Pattern.compile(\",(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");\r\nSplitter splitter = Splitter.on(pattern);\r\nList<String> tokens = splitter.splitToList(input);\r\n```","```\r\n<dependency>\r\n    <groupId>com.opencsv</groupId>\r\n    <artifactId>opencsv</artifactId>\r\n    <version>4.1</version>\r\n</dependency>\r\n```","```\r\nCSVParser parser = new CSVParserBuilder()\r\n  .withSeparator(',')\r\n  .build();\r\n\r\nCSVReader reader = new CSVReaderBuilder(new StringReader(input))\r\n  .withCSVParser(parser)\r\n  .build();\r\n\r\nList<String[]> lines = new ArrayList<>();\r\nlines = reader.readAll();\r\nreader.close();\r\n```"]