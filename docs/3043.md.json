["```\r\npublic static long filesCompareByByte(Path path1, Path path2) throws IOException {\r\n    try (BufferedInputStream fis1 = new BufferedInputStream(new FileInputStream(path1.toFile()));\r\n         BufferedInputStream fis2 = new BufferedInputStream(new FileInputStream(path2.toFile()))) {\r\n\r\n        int ch = 0;\r\n        long pos = 1;\r\n        while ((ch = fis1.read()) != -1) {\r\n            if (ch != fis2.read()) {\r\n                return pos;\r\n            }\r\n            pos++;\r\n        }\r\n        if (fis2.read() == -1) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return pos;\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic static long filesCompareByLine(Path path1, Path path2) throws IOException {\r\n    try (BufferedReader bf1 = Files.newBufferedReader(path1);\r\n         BufferedReader bf2 = Files.newBufferedReader(path2)) {\r\n\r\n        long lineNumber = 1;\r\n        String line1 = \"\", line2 = \"\";\r\n        while ((line1 = bf1.readLine()) != null) {\r\n            line2 = bf2.readLine();\r\n            if (line2 == null || !line1.equals(line2)) {\r\n                return lineNumber;\r\n            }\r\n            lineNumber++;\r\n        }\r\n        if (bf2.readLine() == null) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return lineNumber;\r\n        }\r\n    }\r\n} \r\n```","```\r\npublic static boolean compareByMemoryMappedFiles(Path path1, Path path2) throws IOException {\r\n    try (RandomAccessFile randomAccessFile1 = new RandomAccessFile(path1.toFile(), \"r\"); \r\n         RandomAccessFile randomAccessFile2 = new RandomAccessFile(path2.toFile(), \"r\")) {\r\n\r\n        FileChannel ch1 = randomAccessFile1.getChannel();\r\n        FileChannel ch2 = randomAccessFile2.getChannel();\r\n        if (ch1.size() != ch2.size()) {\r\n            return false;\r\n        }\r\n        long size = ch1.size();\r\n        MappedByteBuffer m1 = ch1.map(FileChannel.MapMode.READ_ONLY, 0L, size);\r\n        MappedByteBuffer m2 = ch2.map(FileChannel.MapMode.READ_ONLY, 0L, size);\r\n\r\n        return m1.equals(m2);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenFilesIdentical_thenReturnTrue() throws IOException {\r\n    Path path1 = Files.createTempFile(\"file1Test\", \".txt\");\r\n    Path path2 = Files.createTempFile(\"file2Test\", \".txt\");\r\n\r\n    InputStream inputStream1 = new FileInputStream(path1.toFile());\r\n    InputStream inputStream2 = new FileInputStream(path2.toFile());\r\n\r\n    Files.writeString(path1, \"testing line 1\" + System.lineSeparator() + \"line 2\");\r\n    Files.writeString(path2, \"testing line 1\" + System.lineSeparator() + \"line 2\");\r\n\r\n    assertTrue(IOUtils.contentEquals(inputStream1, inputStream2));\r\n} \r\n```","```\r\n@Test\r\npublic void whenFilesIdenticalIgnoreEOF_thenReturnTrue() throws IOException {\r\n    Path path1 = Files.createTempFile(\"file1Test\", \".txt\");\r\n    Path path2 = Files.createTempFile(\"file2Test\", \".txt\");\r\n\r\n    Files.writeString(path1, \"testing line 1 \\n line 2\");\r\n    Files.writeString(path2, \"testing line 1 \\r\\n line 2\");\r\n\r\n    Reader reader1 = new BufferedReader(new FileReader(path1.toFile()));\r\n    Reader reader2 = new BufferedReader(new FileReader(path2.toFile()));\r\n\r\n    assertTrue(IOUtils.contentEqualsIgnoreEOL(reader1, reader2));\r\n} \r\n```"]