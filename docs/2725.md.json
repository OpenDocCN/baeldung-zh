["```\r\n@Component\r\npublic class StringToLocalDateTimeConverter\r\n  implements Converter<String, LocalDateTime> {\r\n\r\n    @Override\r\n    public LocalDateTime convert(String source) {\r\n        return LocalDateTime.parse(\r\n          source, DateTimeFormatter.ISO_LOCAL_DATE_TIME);\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/findbydate/{date}\")\r\npublic GenericEntity findByDate(@PathVariable(\"date\") LocalDateTime date) {\r\n    return ...;\r\n}\r\n```","```\r\npublic enum Modes {\r\n    ALPHA, BETA;\r\n}\r\n```","```\r\npublic class StringToEnumConverter implements Converter<String, Modes> {\r\n\r\n    @Override\r\n    public Modes convert(String from) {\r\n        return Modes.valueOf(from);\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addFormatters(FormatterRegistry registry) {\r\n        registry.addConverter(new StringToEnumConverter());\r\n    }\r\n}\r\n```","```\r\n@GetMapping\r\npublic ResponseEntity<Object> getStringToMode(@RequestParam(\"mode\") Modes mode) {\r\n    // ...\r\n}\r\n```","```\r\n@GetMapping(\"/entity/findbymode/{mode}\")\r\npublic GenericEntity findByEnum(@PathVariable(\"mode\") Modes mode) {\r\n    // ...\r\n}\r\n```","```\r\npublic abstract class AbstractEntity {\r\n    long id;\r\n    public AbstractEntity(long id){\r\n        this.id = id;\r\n    }\r\n}\r\n```","```\r\npublic class Foo extends AbstractEntity {\r\n    private String name;\r\n\r\n    // standard constructors, getters, setters\r\n}\r\n```","```\r\npublic class Bar extends AbstractEntity {\r\n    private int value;\r\n\r\n    // standard constructors, getters, setters\r\n}\r\n```","```\r\npublic class StringToAbstractEntityConverterFactory \r\n  implements ConverterFactory<String, AbstractEntity>{\r\n\r\n    @Override\r\n    public <T extends AbstractEntity> Converter<String, T> getConverter(Class<T> targetClass) {\r\n        return new StringToAbstractEntityConverter<>(targetClass);\r\n    }\r\n\r\n    private static class StringToAbstractEntityConverter<T extends AbstractEntity>\r\n      implements Converter<String, T> {\r\n\r\n        private Class<T> targetClass;\r\n\r\n        public StringToAbstractEntityConverter(Class<T> targetClass) {\r\n            this.targetClass = targetClass;\r\n        }\r\n\r\n        @Override\r\n        public T convert(String source) {\r\n            long id = Long.parseLong(source);\r\n            if(this.targetClass == Foo.class) {\r\n                return (T) new Foo(id);\r\n            }\r\n            else if(this.targetClass == Bar.class) {\r\n                return (T) new Bar(id);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    @Override\r\n    public void addFormatters(FormatterRegistry registry) {\r\n        registry.addConverterFactory(new StringToAbstractEntityConverterFactory());\r\n    }\r\n}\r\n```","```\r\n@RestController\r\n@RequestMapping(\"/string-to-abstract\")\r\npublic class AbstractEntityController {\r\n\r\n    @GetMapping(\"/foo/{foo}\")\r\n    public ResponseEntity<Object> getStringToFoo(@PathVariable Foo foo) {\r\n        return ResponseEntity.ok(foo);\r\n    }\r\n\r\n    @GetMapping(\"/bar/{bar}\")\r\n    public ResponseEntity<Object> getStringToBar(@PathVariable Bar bar) {\r\n        return ResponseEntity.ok(bar);\r\n    }\r\n}\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.PARAMETER)\r\npublic @interface Version {\r\n}\r\n```","```\r\npublic class HeaderVersionArgumentResolver\r\n  implements HandlerMethodArgumentResolver {\r\n\r\n    @Override\r\n    public boolean supportsParameter(MethodParameter methodParameter) {\r\n        return methodParameter.getParameterAnnotation(Version.class) != null;\r\n    }\r\n\r\n    @Override\r\n    public Object resolveArgument(\r\n      MethodParameter methodParameter, \r\n      ModelAndViewContainer modelAndViewContainer, \r\n      NativeWebRequest nativeWebRequest, \r\n      WebDataBinderFactory webDataBinderFactory) throws Exception {\r\n\r\n        HttpServletRequest request \r\n          = (HttpServletRequest) nativeWebRequest.getNativeRequest();\r\n\r\n        return request.getHeader(\"Version\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class WebConfig implements WebMvcConfigurer {\r\n\r\n    //...\r\n\r\n    @Override\r\n    public void addArgumentResolvers(\r\n      List<HandlerMethodArgumentResolver> argumentResolvers) {\r\n        argumentResolvers.add(new HeaderVersionArgumentResolver());\r\n    }\r\n}\r\n```","```\r\n@GetMapping(\"/entity/{id}\")\r\npublic ResponseEntity findByVersion(\r\n  @PathVariable Long id, @Version String version) {\r\n    return ...;\r\n}\r\n```"]