["```\r\n<dependency>\r\n   <groupId>javax.persistence</groupId>\r\n   <artifactId>javax.persistence-api</artifactId>\r\n   <version>2.2</version>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.4.14.Final</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-apt</artifactId>\r\n    <version>4.3.1</version>\r\n    <scope>provided</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.querydsl</groupId>\r\n    <artifactId>querydsl-jpa</artifactId>\r\n    <version>4.3.1</version>\r\n</dependency> \r\n```","```\r\n@Entity\r\n@Table(name = \"menu\")\r\npublic class Cocktail {\r\n    @Id\r\n    @Column(name = \"cocktail_name\")\r\n    private String name;\r\n\r\n    @Column\r\n    private double price;\r\n\r\n    // getters & setters\r\n} \r\n```","```\r\n@Entity\r\n@Table(name=\"recipes\")\r\npublic class Recipe {\r\n    @Id\r\n    @Column(name = \"cocktail\")\r\n    private String cocktail;\r\n\r\n    @Column\r\n    private String instructions;\r\n\r\n    // getters & setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"menu\")\r\npublic class Cocktail {\r\n    // ...\r\n\r\n    @OneToOne\r\n    @NotFound(action = NotFoundAction.IGNORE)\r\n    @JoinColumn(name = \"cocktail_name\", \r\n       referencedColumnName = \"cocktail\", \r\n       insertable = false, updatable = false, \r\n       foreignKey = @javax.persistence\r\n         .ForeignKey(value = ConstraintMode.NO_CONSTRAINT))\r\n    private Recipe recipe;\r\n\r\n    // ...\r\n}\r\n```","```\r\nentityManager.createQuery(\"select c from Cocktail c join c.recipe\")\r\n```","```\r\nnew JPAQuery<Cocktail>(entityManager)\r\n  .from(QCocktail.cocktail)\r\n  .join(QCocktail.cocktail.recipe)\r\n```","```\r\nentityManager.createQuery(\"select c from Cocktail c join Recipe r on c.name = r.cocktail\")\r\n```","```\r\nnew JPAQuery(entityManager)\r\n  .from(QCocktail.cocktail)\r\n  .join(QRecipe.recipe)\r\n  .on(QCocktail.cocktail.name.eq(QRecipe.recipe.cocktail))\r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {\r\n    // ...\r\n\r\n    @BeforeAll\r\n    public static void setup() {\r\n        // ...\r\n\r\n        mojito = new Cocktail();\r\n        mojito.setName(\"Mojito\");\r\n        mojito.setPrice(12.12);\r\n        ginTonic = new Cocktail();\r\n        ginTonic.setName(\"Gin tonic\");\r\n        ginTonic.setPrice(10.50);\r\n        Recipe mojitoRecipe = new Recipe(); \r\n        mojitoRecipe.setCocktail(mojito.getName()); \r\n        mojitoRecipe.setInstructions(\"Some instructions for making a mojito cocktail!\");\r\n        entityManager.persist(mojito);\r\n        entityManager.persist(ginTonic);\r\n        entityManager.persist(mojitoRecipe);\r\n\r\n        // ...\r\n    }\r\n\r\n    // ... \r\n}\r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {\r\n    // ...\r\n\r\n    @Test\r\n    public void givenCocktailsWithRecipe_whenQuerying_thenTheExpectedCocktailsReturned() {\r\n        // JPA\r\n        Cocktail cocktail = entityManager.createQuery(\"select c \" +\r\n          \"from Cocktail c join c.recipe\", Cocktail.class)\r\n          .getSingleResult();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        cocktail = entityManager.createQuery(\"select c \" +\r\n          \"from Cocktail c join Recipe r \" +\r\n          \"on c.name = r.cocktail\", Cocktail.class).getSingleResult();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        // QueryDSL\r\n        cocktail = new JPAQuery<Cocktail>(entityManager).from(QCocktail.cocktail)\r\n          .join(QCocktail.cocktail.recipe)\r\n          .fetchOne();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        cocktail = new JPAQuery<Cocktail>(entityManager).from(QCocktail.cocktail)\r\n          .join(QRecipe.recipe)\r\n          .on(QCocktail.cocktail.name.eq(QRecipe.recipe.cocktail))\r\n          .fetchOne();\r\n        verifyResult(mojito, cocktail);\r\n    }\r\n\r\n    private void verifyResult(Cocktail expectedCocktail, Cocktail queryResult) {\r\n        assertNotNull(queryResult);\r\n        assertEquals(expectedCocktail, queryResult);\r\n    }\r\n\r\n    // ...\r\n} \r\n```","```\r\n@Entity\r\n@Table(name = \"multiple_recipes\")\r\npublic class MultipleRecipe {\r\n    @Id\r\n    @Column(name = \"id\")\r\n    private Long id;\r\n\r\n    @Column(name = \"cocktail\")\r\n    private String cocktail;\r\n\r\n    @Column(name = \"instructions\")\r\n    private String instructions;\r\n\r\n    // getters & setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"cocktails\")\r\npublic class Cocktail {    \r\n    // ...\r\n\r\n    @OneToMany\r\n    @NotFound(action = NotFoundAction.IGNORE)\r\n    @JoinColumn(\r\n       name = \"cocktail\", \r\n       referencedColumnName = \"cocktail_name\", \r\n       insertable = false, \r\n       updatable = false, \r\n       foreignKey = @javax.persistence\r\n         .ForeignKey(value = ConstraintMode.NO_CONSTRAINT))\r\n    private List<MultipleRecipe> recipeList;\r\n\r\n    // getters & setters\r\n} \r\n```","```\r\nentityManager.createQuery(\"select c from Cocktail c join c.recipeList\");\r\n```","```\r\nnew JPAQuery(entityManager).from(QCocktail.cocktail)\r\n  .join(QCocktail.cocktail.recipeList);\r\n```","```\r\nentityManager.createQuery(\"select c \"\r\n  + \"from Cocktail c join MultipleRecipe mr \"\r\n  + \"on mr.cocktail = c.name\");\r\n```","```\r\nnew JPAQuery(entityManager).from(QCocktail.cocktail)\r\n  .join(QMultipleRecipe.multipleRecipe)\r\n  .on(QCocktail.cocktail.name.eq(QMultipleRecipe.multipleRecipe.cocktail)); \r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {    \r\n    // ...\r\n\r\n    @BeforeAll\r\n    public static void setup() {\r\n        // ...\r\n\r\n        MultipleRecipe firstMojitoRecipe = new MultipleRecipe();\r\n        firstMojitoRecipe.setId(1L);\r\n        firstMojitoRecipe.setCocktail(mojito.getName());\r\n        firstMojitoRecipe.setInstructions(\"The first recipe of making a mojito!\");\r\n        entityManager.persist(firstMojitoRecipe);\r\n        MultipleRecipe secondMojitoRecipe = new MultipleRecipe();\r\n        secondMojitoRecipe.setId(2L);\r\n        secondMojitoRecipe.setCocktail(mojito.getName());\r\n        secondMojitoRecipe.setInstructions(\"The second recipe of making a mojito!\"); \r\n        entityManager.persist(secondMojitoRecipe);\r\n\r\n        // ...\r\n    }\r\n\r\n    // ... \r\n} \r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {\r\n    // ...\r\n\r\n    @Test\r\n    public void givenCocktailsWithMultipleRecipes_whenQuerying_thenTheExpectedCocktailsReturned() {\r\n        // JPQL\r\n        Cocktail cocktail = entityManager.createQuery(\"select c \"\r\n          + \"from Cocktail c join c.recipeList\", Cocktail.class)\r\n          .getSingleResult();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        cocktail = entityManager.createQuery(\"select c \"\r\n          + \"from Cocktail c join MultipleRecipe mr \"\r\n          + \"on mr.cocktail = c.name\", Cocktail.class)\r\n          .getSingleResult();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        // QueryDSL\r\n        cocktail = new JPAQuery<Cocktail>(entityManager).from(QCocktail.cocktail)\r\n          .join(QCocktail.cocktail.recipeList)\r\n          .fetchOne();\r\n        verifyResult(mojito, cocktail);\r\n\r\n        cocktail = new JPAQuery<Cocktail>(entityManager).from(QCocktail.cocktail)\r\n          .join(QMultipleRecipe.multipleRecipe)\r\n          .on(QCocktail.cocktail.name.eq(QMultipleRecipe.multipleRecipe.cocktail))\r\n          .fetchOne();\r\n        verifyResult(mojito, cocktail);\r\n    }\r\n\r\n    // ...\r\n\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"menu\")\r\npublic class Cocktail {\r\n    // ...\r\n\r\n    @Column(name = \"category\")\r\n    private String category;\r\n\r\n     // ...\r\n} \r\n```","```\r\n@Entity\r\n@Table(name = \"multiple_recipes\")\r\npublic class MultipleRecipe {\r\n    // ...\r\n\r\n    @Column(name = \"base_ingredient\")\r\n    private String baseIngredient;\r\n\r\n    // ...\r\n}\r\n```","```\r\nentityManager.createQuery(\"select distinct r \" \r\n  + \"from MultipleRecipe r \" \r\n  + \"join Cocktail c \" \r\n  + \"on r.baseIngredient = c.category\", MultipleRecipe.class)\r\n```","```\r\nQCocktail cocktail = QCocktail.cocktail; \r\nQMultipleRecipe multipleRecipe = QMultipleRecipe.multipleRecipe; \r\nnew JPAQuery(entityManager).from(multipleRecipe)\r\n  .join(cocktail)\r\n  .on(multipleRecipe.baseIngredient.eq(cocktail.category))\r\n  .fetch(); \r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {\r\n    // ...\r\n\r\n    @BeforeAll\r\n    public static void setup() {\r\n        // ...\r\n\r\n        mojito.setCategory(\"Rum\");\r\n        ginTonic.setCategory(\"Gin\");\r\n        firstMojitoRecipe.setBaseIngredient(mojito.getCategory());\r\n        secondMojitoRecipe.setBaseIngredient(mojito.getCategory());\r\n\r\n        // ...\r\n    }\r\n\r\n    // ... \r\n}\r\n```","```\r\npublic class UnrelatedEntitiesUnitTest {\r\n    // ...\r\n\r\n    @Test\r\n    public void givenMultipleRecipesWithCocktails_whenQuerying_thenTheExpectedMultipleRecipesReturned() {\r\n        Consumer<List<MultipleRecipe>> verifyResult = recipes -> {\r\n            assertEquals(2, recipes.size());\r\n            recipes.forEach(r -> assertEquals(mojito.getName(), r.getCocktail()));\r\n        };\r\n\r\n        // JPQL\r\n        List<MultipleRecipe> recipes = entityManager.createQuery(\"select distinct r \"\r\n          + \"from MultipleRecipe r \"\r\n          + \"join Cocktail c \" \r\n          + \"on r.baseIngredient = c.category\",\r\n          MultipleRecipe.class).getResultList();\r\n        verifyResult.accept(recipes);\r\n\r\n        // QueryDSL\r\n        QCocktail cocktail = QCocktail.cocktail;\r\n        QMultipleRecipe multipleRecipe = QMultipleRecipe.multipleRecipe;\r\n        recipes = new JPAQuery<MultipleRecipe>(entityManager).from(multipleRecipe)\r\n          .join(cocktail)\r\n          .on(multipleRecipe.baseIngredient.eq(cocktail.category))\r\n          .fetch();\r\n        verifyResult.accept(recipes);\r\n    }\r\n\r\n    // ...\r\n} \r\n```"]