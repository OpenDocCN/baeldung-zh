["```\r\n@Test\r\npublic void givenWhenParameterTypeIsInteger_thenReturnTrue() {\r\n    Person personObj = new Person(10)\r\n    Assert.assertTrue(personObj.ageAsInt instanceof Integer);\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenParameterTypeIsDouble_thenReturnTrue() {\r\n    Person personObj = new Person(10.0)\r\n    Assert.assertTrue((personObj.ageAsDouble).getClass() == Double)\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenParameterTypeIsString_thenReturnTrue() {\r\n    Person personObj = new Person(\"10 years\")\r\n    Assert.assertTrue(personObj.ageAsString.class == String)\r\n}\r\n```","```\r\n@Test\r\npublic void givenGroovyList_WhenFindClassName_thenReturnTrue() {\r\n    def ageList = ['ageAsString','ageAsDouble', 10]\r\n    Assert.assertTrue(ageList.class == ArrayList)\r\n    Assert.assertTrue(ageList.getClass() == ArrayList)\r\n}\r\n```","```\r\n@Test\r\npublic void givenGrooyMap_WhenFindClassName_thenReturnTrue() {\r\n    def ageMap = [ageAsString: '10 years', ageAsDouble: 10.0]\r\n    Assert.assertFalse(ageMap.class == LinkedHashMap)\r\n}\r\n```","```\r\n@Test\r\npublic void givenClassName_WhenParameterIsInteger_thenReturnTrue() {\r\n    Assert.assertTrue(Person.class.getDeclaredField('ageAsInt').type == int.class)\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenObjectIsInstanceOfType_thenReturnTrue() {\r\n    Person personObj = new Person()\r\n    Assert.assertTrue(personObj instanceof Person)\r\n}\r\n```","```\r\n@Test\r\npublic void givenWhenInstanceIsOfSubtype_thenReturnTrue() {\r\n    Student studentObj = new Student()\r\n    Assert.assertTrue(studentObj in Person)\r\n}\r\n```"]