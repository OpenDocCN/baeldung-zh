["```\r\n@QueryEntity\r\n@Document\r\npublic class User {\r\n    @Indexed\r\n    private String name;\r\n\r\n    ... \r\n}\r\n```","```\r\ndb.user.getIndexes();\r\n```","```\r\n[\r\n    {\r\n        \"v\" : 1,\r\n        \"key\" : {\r\n             \"_id\" : 1\r\n         },\r\n        \"name\" : \"_id_\",\r\n        \"ns\" : \"test.user\"\r\n    }\r\n]\r\n```","```\r\npublic class MongoConfig extends AbstractMongoClientConfiguration {\r\n\r\n    // rest of the config goes here\r\n\r\n    @Override\r\n    protected boolean autoIndexCreation() {\r\n        return true;\r\n    }\r\n} \r\n```","```\r\n[\r\n    {\r\n        \"v\" : 1,\r\n        \"key\" : {\r\n             \"_id\" : 1\r\n         },\r\n        \"name\" : \"_id_\",\r\n        \"ns\" : \"test.user\"\r\n    },\r\n    {\r\n         \"v\" : 1,\r\n         \"key\" : {\r\n             \"name\" : 1\r\n          },\r\n          \"name\" : \"name\",\r\n          \"ns\" : \"test.user\"\r\n     }\r\n]\r\n```","```\r\nmongoOps.indexOps(User.class).\r\n  ensureIndex(new Index().on(\"name\", Direction.ASC)); \r\n```","```\r\n@QueryEntity\r\n@Document\r\n@CompoundIndexes({\r\n    @CompoundIndex(name = \"email_age\", def = \"{'email.id' : 1, 'age': 1}\")\r\n})\r\npublic class User {\r\n    //\r\n}\r\n```","```\r\n{\r\n    \"v\" : 1,\r\n    \"key\" : {\r\n        \"email.id\" : 1,\r\n        \"age\" : 1\r\n    },\r\n    \"name\" : \"email_age\",\r\n    \"ns\" : \"test.user\"\r\n} \r\n```","```\r\npublic class User {\r\n\r\n    @Transient\r\n    private Integer yearOfBirth;\r\n```","```\r\n // standard getter and setter\r\n\r\n}\r\n```","```\r\nUser user = new User();\r\nuser.setName(\"Alex\");\r\nuser.setYearOfBirth(1985);\r\nmongoTemplate.insert(user); \r\n```","```\r\n{\r\n    \"_id\" : ObjectId(\"55d8b30f758fd3c9f374499b\"),\r\n    \"name\" : \"Alex\",\r\n    \"age\" : null\r\n}\r\n```","```\r\nmongoTemplate.findOne(Query.query(Criteria.where(\"name\").is(\"Alex\")), User.class).getYearOfBirth()\r\n```","```\r\n@Field(\"email\")\r\nprivate EmailAddress emailAddress; \r\n```","```\r\nUser user = new User();\r\nuser.setName(\"Brendan\");\r\nEmailAddress emailAddress = new EmailAddress();\r\nemailAddress.setValue(\"[[email protected]](/web/20220627173404/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\nuser.setEmailAddress(emailAddress);\r\nmongoTemplate.insert(user); \r\n```","```\r\n{\r\n    \"_id\" : ObjectId(\"55d076d80bad441ed114419d\"),\r\n    \"name\" : \"Brendan\",\r\n    \"age\" : null,\r\n    \"email\" : {\r\n        \"value\" : \"[[email protected]](/web/20220627173404/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n    }\r\n}\r\n```","```\r\n@PersistenceConstructor\r\npublic User(String name, @Value(\"#root.age ?: 0\") Integer age, EmailAddress emailAddress) {\r\n    this.name =  name;\r\n    this.age = age;\r\n    this.emailAddress =  emailAddress;\r\n} \r\n```","```\r\nUser user = new User();\r\nuser.setName(\"Alex\");\r\nmongoTemplate.insert(user);\r\n```","```\r\n{\r\n    \"_id\" : ObjectId(\"55d074ca0bad45f744a71318\"),\r\n    \"name\" : \"Alex\",\r\n    \"age\" : null\r\n}\r\n```","```\r\nmongoTemplate.findOne(Query.query(Criteria.where(\"name\").is(\"Alex\")), User.class).getAge();\r\n```","```\r\n@Component\r\npublic class UserWriterConverter implements Converter<User, DBObject> {\r\n    @Override\r\n    public DBObject convert(User user) {\r\n        DBObject dbObject = new BasicDBObject();\r\n        dbObject.put(\"name\", user.getName());\r\n        dbObject.put(\"age\", user.getAge());\r\n        if (user.getEmailAddress() != null) {\r\n            DBObject emailDbObject = new BasicDBObject();\r\n            emailDbObject.put(\"value\", user.getEmailAddress().getValue());\r\n            dbObject.put(\"email\", emailDbObject);\r\n        }\r\n        dbObject.removeField(\"_class\");\r\n        return dbObject;\r\n    }\r\n}\r\n```","```\r\nprivate List<Converter<?,?>> converters = new ArrayList<Converter<?,?>>();\r\n\r\n@Override\r\npublic MongoCustomConversions customConversions() {\r\n    converters.add(new UserWriterConverter());\r\n    return new MongoCustomConversions(converters);\r\n}\r\n```","```\r\n<bean id=\"mongoTemplate\" \r\n  class=\"org.springframework.data.mongodb.core.MongoTemplate\">\r\n    <constructor-arg name=\"mongo\" ref=\"mongo\"/>\r\n    <constructor-arg ref=\"mongoConverter\" />\r\n    <constructor-arg name=\"databaseName\" value=\"test\"/>\r\n</bean>\r\n\r\n<mongo:mapping-converter id=\"mongoConverter\" base-package=\"org.baeldung.converter\">\r\n    <mongo:custom-converters base-package=\"com.baeldung.converter\" />\r\n</mongo:mapping-converter>\r\n```","```\r\nUser user = new User();\r\nuser.setName(\"Chris\");\r\nmongoOps.insert(user); \r\n```","```\r\n{\r\n    \"_id\" : ObjectId(\"55cf09790bad4394db84b853\"),\r\n    \"name\" : \"Chris\",\r\n    \"age\" : null\r\n}\r\n```"]