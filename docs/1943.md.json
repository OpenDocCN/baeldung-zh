["```\r\n<dependency>\r\n    <groupId>io.reactivex.rxjava2</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>2.1.3</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenChangeStateOnError_thenErrorThrown() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicBoolean state = new AtomicBoolean(false);\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .doOnError(throwable -> state.set(true))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(UNKNOWN_ERROR);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n\r\n    assertTrue(\"state should be changed\", state.get());\r\n}\r\n```","```\r\n@Test\r\npublic void whenExceptionOccurOnError_thenCompositeExceptionThrown() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .doOnError(throwable -> {\r\n          throw new RuntimeException(\"unexcepted\");\r\n      })\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(CompositeException.class);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandleOnErrorResumeItem_thenResumed(){\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .onErrorReturnItem(\"singleValue\")\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertValueCount(1);\r\n    testObserver.assertValue(\"singleValue\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandleOnErrorReturn_thenResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .onErrorReturn(Throwable::getMessage)\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertValueCount(1);\r\n    testObserver.assertValue(\"unknown error\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandleOnErrorResume_thenResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .onErrorResumeNext(Observable.just(\"one\", \"two\"))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertValueCount(2);\r\n    testObserver.assertValues(\"one\", \"two\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandleOnErrorResumeFunc_thenResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .onErrorResumeNext(throwable -> Observable\r\n        .just(throwable.getMessage(), \"nextValue\"))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertValueCount(2);\r\n    testObserver.assertValues(\"unknown error\", \"nextValue\");\r\n}\r\n```","```\r\n@Test\r\npublic void whenHandleOnException_thenResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_EXCEPTION)\r\n      .onExceptionResumeNext(Observable.just(\"exceptionResumed\"))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertValueCount(1);\r\n    testObserver.assertValue(\"exceptionResumed\");\r\n}\r\n\r\n@Test\r\npublic void whenHandleOnException_thenNotResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .onExceptionResumeNext(Observable.just(\"exceptionResumed\"))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(UNKNOWN_ERROR);\r\n    testObserver.assertNotComplete();\r\n}\r\n```","```\r\n@Test\r\npublic void whenRetryOnError_thenRetryConfirmed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicInteger atomicCounter = new AtomicInteger(0);\r\n    Observable\r\n      .error(() -> {\r\n          atomicCounter.incrementAndGet();\r\n          return UNKNOWN_ERROR;\r\n      })\r\n      .retry(1)\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(UNKNOWN_ERROR);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n    assertTrue(\"should try twice\", atomicCounter.get() == 2);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRetryConditionallyOnError_thenRetryConfirmed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicInteger atomicCounter = new AtomicInteger(0);\r\n    Observable\r\n      .error(() -> {\r\n          atomicCounter.incrementAndGet();\r\n          return UNKNOWN_ERROR;\r\n      })\r\n      .retry((integer, throwable) -> integer < 4)\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(UNKNOWN_ERROR);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n    assertTrue(\"should call 4 times\", atomicCounter.get() == 4);\r\n}\r\n\r\n@Test\r\npublic void whenRetryUntilOnError_thenRetryConfirmed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicInteger atomicCounter = new AtomicInteger(0);\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .retryUntil(() -> atomicCounter.incrementAndGet() > 3)\r\n      .subscribe(testObserver);\r\n    testObserver.assertError(UNKNOWN_ERROR);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n    assertTrue(\"should call 4 times\", atomicCounter.get() == 4);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRetryWhenOnError_thenRetryConfirmed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    Exception noretryException = new Exception(\"don't retry\");\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .retryWhen(throwableObservable -> Observable.error(noretryException))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertError(noretryException);\r\n    testObserver.assertNotComplete();\r\n    testObserver.assertNoValues();\r\n}\r\n\r\n@Test\r\npublic void whenRetryWhenOnError_thenCompleted() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicInteger atomicCounter = new AtomicInteger(0);\r\n    Observable\r\n      .error(() -> {\r\n        atomicCounter.incrementAndGet();\r\n        return UNKNOWN_ERROR;\r\n      })\r\n      .retryWhen(throwableObservable -> Observable.empty())\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertNoValues();\r\n    assertTrue(\"should not retry\", atomicCounter.get()==0);\r\n}\r\n\r\n@Test\r\npublic void whenRetryWhenOnError_thenResubscribed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    AtomicInteger atomicCounter = new AtomicInteger(0);\r\n    Observable\r\n      .error(() -> {\r\n        atomicCounter.incrementAndGet();\r\n        return UNKNOWN_ERROR;\r\n      })\r\n      .retryWhen(throwableObservable -> Observable.just(\"anything\"))\r\n      .subscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertNoValues();\r\n    assertTrue(\"should retry once\", atomicCounter.get()==1);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRetryWhenForMultipleTimesOnError_thenResumed() {\r\n    TestObserver testObserver = new TestObserver();\r\n    long before = System.currentTimeMillis();\r\n    Observable\r\n      .error(UNKNOWN_ERROR)\r\n      .retryWhen(throwableObservable -> throwableObservable\r\n        .zipWith(Observable.range(1, 3), (throwable, integer) -> integer)\r\n        .flatMap(integer -> Observable.timer(integer, TimeUnit.SECONDS)))\r\n      .blockingSubscribe(testObserver);\r\n\r\n    testObserver.assertNoErrors();\r\n    testObserver.assertComplete();\r\n    testObserver.assertNoValues();\r\n    long secondsElapsed = (System.currentTimeMillis() - before)/1000;\r\n    assertTrue(\"6 seconds should elapse\",secondsElapsed == 6 );\r\n}\r\n```"]