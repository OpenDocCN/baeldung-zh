["```\r\n<dependency>\r\n    <groupId>org.hibernate</groupId>\r\n    <artifactId>hibernate-core</artifactId>\r\n    <version>5.6.7.Final</version>\r\n</dependency>\r\n```","```\r\npublic class LocalDateStringType \r\n  extends AbstractSingleColumnStandardBasicType<LocalDate> {\r\n\r\n    public static final LocalDateStringType INSTANCE = new LocalDateStringType();\r\n\r\n    public LocalDateStringType() {\r\n        super(VarcharTypeDescriptor.INSTANCE, LocalDateStringJavaDescriptor.INSTANCE);\r\n    }\r\n\r\n    @Override\r\n    public String getName() {\r\n        return \"LocalDateString\";\r\n    }\r\n}\r\n```","```\r\npublic class LocalDateStringJavaDescriptor extends AbstractTypeDescriptor<LocalDate> {\r\n\r\n    public static final LocalDateStringJavaDescriptor INSTANCE = \r\n      new LocalDateStringJavaDescriptor();\r\n\r\n    public LocalDateStringJavaDescriptor() {\r\n        super(LocalDate.class, ImmutableMutabilityPlan.INSTANCE);\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\n@Override\r\npublic <X> X unwrap(LocalDate value, Class<X> type, WrapperOptions options) {\r\n\r\n    if (value == null)\r\n        return null;\r\n\r\n    if (String.class.isAssignableFrom(type))\r\n        return (X) LocalDateType.FORMATTER.format(value);\r\n\r\n    throw unknownUnwrap(type);\r\n}\r\n```","```\r\n@Override\r\npublic <X> LocalDate wrap(X value, WrapperOptions options) {\r\n    if (value == null)\r\n        return null;\r\n\r\n    if(String.class.isInstance(value))\r\n        return LocalDate.from(LocalDateType.FORMATTER.parse((CharSequence) value));\r\n\r\n    throw unknownWrap(value.getClass());\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"OfficeEmployee\")\r\npublic class OfficeEmployee {\r\n\r\n    @Column\r\n    @Type(type = \"com.baeldung.hibernate.customtypes.LocalDateStringType\")\r\n    private LocalDate dateOfJoining;\r\n\r\n    // other fields and methods\r\n}\r\n```","```\r\npublic class PhoneNumberType implements UserType {\r\n    @Override\r\n    public int[] sqlTypes() {\r\n        return new int[]{Types.INTEGER, Types.INTEGER, Types.INTEGER};\r\n    }\r\n\r\n    @Override\r\n    public Class returnedClass() {\r\n        return PhoneNumber.class;\r\n    }\r\n\r\n    // other methods\r\n} \r\n```","```\r\n@Override\r\npublic Object nullSafeGet(ResultSet rs, String[] names, \r\n  SharedSessionContractImplementor session, Object owner) \r\n  throws HibernateException, SQLException {\r\n    int countryCode = rs.getInt(names[0]);\r\n\r\n    if (rs.wasNull())\r\n        return null;\r\n\r\n    int cityCode = rs.getInt(names[1]);\r\n    int number = rs.getInt(names[2]);\r\n    PhoneNumber employeeNumber = new PhoneNumber(countryCode, cityCode, number);\r\n\r\n    return employeeNumber;\r\n}\r\n```","```\r\n@Override\r\npublic void nullSafeSet(PreparedStatement st, Object value, \r\n  int index, SharedSessionContractImplementor session) \r\n  throws HibernateException, SQLException {\r\n\r\n    if (Objects.isNull(value)) {\r\n        st.setNull(index, Types.INTEGER);\r\n        st.setNull(index + 1, Types.INTEGER);\r\n        st.setNull(index + 2, Types.INTEGER);\r\n    } else {\r\n        PhoneNumber employeeNumber = (PhoneNumber) value;\r\n        st.setInt(index,employeeNumber.getCountryCode());\r\n        st.setInt(index+1,employeeNumber.getCityCode());\r\n        st.setInt(index+2,employeeNumber.getNumber());\r\n    }\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"OfficeEmployee\")\r\npublic class OfficeEmployee {\r\n\r\n    @Columns(columns = { @Column(name = \"country_code\"), \r\n      @Column(name = \"city_code\"), @Column(name = \"number\") })\r\n    @Type(type = \"com.baeldung.hibernate.customtypes.PhoneNumberType\")\r\n    private PhoneNumber employeeNumber;\r\n\r\n    // other fields and methods\r\n}\r\n```","```\r\npublic class AddressType implements CompositeUserType {\r\n\r\n    @Override\r\n    public String[] getPropertyNames() {\r\n        return new String[] { \"addressLine1\", \"addressLine2\", \r\n          \"city\", \"country\", \"zipcode\" };\r\n    }\r\n\r\n    @Override\r\n    public Type[] getPropertyTypes() {\r\n        return new Type[] { StringType.INSTANCE, \r\n          StringType.INSTANCE, \r\n          StringType.INSTANCE, \r\n          StringType.INSTANCE, \r\n          IntegerType.INSTANCE };\r\n    }\r\n\r\n    // other methods\r\n}\r\n```","```\r\n@Override\r\npublic Object getPropertyValue(Object component, int property) throws HibernateException {\r\n\r\n    Address empAdd = (Address) component;\r\n\r\n    switch (property) {\r\n    case 0:\r\n        return empAdd.getAddressLine1();\r\n    case 1:\r\n        return empAdd.getAddressLine2();\r\n    case 2:\r\n        return empAdd.getCity();\r\n    case 3:\r\n        return empAdd.getCountry();\r\n    case 4:\r\n        return Integer.valueOf(empAdd.getZipCode());\r\n    }\r\n\r\n    throw new IllegalArgumentException(property + \" is an invalid property index for class type \"\r\n      + component.getClass().getName());\r\n}\r\n```","```\r\npublic class SalaryType implements CompositeUserType, DynamicParameterizedType {\r\n\r\n    private String localCurrency;\r\n\r\n    @Override\r\n    public void setParameterValues(Properties parameters) {\r\n        this.localCurrency = parameters.getProperty(\"currency\");\r\n    }\r\n\r\n    // other method implementations from CompositeUserType\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"OfficeEmployee\")\r\npublic class OfficeEmployee {\r\n\r\n    @Type(type = \"com.baeldung.hibernate.customtypes.SalaryType\", \r\n      parameters = { @Parameter(name = \"currency\", value = \"USD\") })\r\n    @Columns(columns = { @Column(name = \"amount\"), @Column(name = \"currency\") })\r\n    private Salary salary;\r\n\r\n    // other fields and methods\r\n}\r\n```","```\r\nprivate static SessionFactory makeSessionFactory() {\r\n    ServiceRegistry serviceRegistry = StandardServiceRegistryBuilder()\r\n      .applySettings(getProperties()).build();\r\n\r\n    MetadataSources metadataSources = new MetadataSources(serviceRegistry);\r\n    Metadata metadata = metadataSources\r\n      .addAnnotatedClass(OfficeEmployee.class)\r\n      .getMetadataBuilder()\r\n      .applyBasicType(LocalDateStringType.INSTANCE)\r\n      .build();\r\n\r\n    return metadata.buildSessionFactory()\r\n}\r\n\r\nprivate static Properties getProperties() {\r\n    // return hibernate properties\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"OfficeEmployee\")\r\npublic class OfficeEmployee {\r\n\r\n    @Column\r\n    @Type(type = \"LocalDateString\")\r\n    private LocalDate dateOfJoining;\r\n\r\n    // other methods\r\n}\r\n```","```\r\n@TypeDef(name = \"PhoneNumber\", typeClass = PhoneNumberType.class, \r\n  defaultForType = PhoneNumber.class)\r\n@Entity\r\n@Table(name = \"OfficeEmployee\")\r\npublic class OfficeEmployee {\r\n\r\n    @Columns(columns = {@Column(name = \"country_code\"),\r\n    @Column(name = \"city_code\"),\r\n    @Column(name = \"number\")})\r\n    private PhoneNumber employeeNumber;\r\n\r\n    // other methods\r\n}\r\n```"]