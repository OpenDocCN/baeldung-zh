["```\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-core</artifactId>\r\n    <version>5.2.8.RELEASE</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenCopyInputStreamToOutputStream_thenCorrect() throws IOException {\r\n    String inputFileName = \"src/test/resources/input.txt\";\r\n    String outputFileName = \"src/test/resources/output.txt\";\r\n    File outputFile = new File(outputFileName);\r\n    InputStream in = new FileInputStream(inputFileName);\r\n    OutputStream out = new FileOutputStream(outputFile);\r\n\r\n    StreamUtils.copy(in, out);\r\n\r\n    assertTrue(outputFile.exists());\r\n    String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\r\n    String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\r\n    assertEquals(inputFileContent, outputFileContent);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCopyRangeOfInputStreamToOutputStream_thenCorrect() throws IOException {\r\n    String inputFileName = \"src/test/resources/input.txt\";\r\n    String outputFileName = \"src/test/resources/output.txt\";\r\n    File outputFile = new File(outputFileName);\r\n    InputStream in = new FileInputStream(inputFileName);\r\n    OutputStream out = new FileOutputStream(outputFileName);\r\n\r\n    StreamUtils.copyRange(in, out, 1, 10);\r\n\r\n    assertTrue(outputFile.exists());\r\n    String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\r\n    String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\r\n\r\n    assertEquals(inputFileContent.substring(1, 11), outputFileContent);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCopyStringToOutputStream_thenCorrect() throws IOException {\r\n    String string = \"Should be copied to OutputStream.\";\r\n    String outputFileName = \"src/test/resources/output.txt\";\r\n    File outputFile = new File(outputFileName);\r\n    OutputStream out = new FileOutputStream(\"src/test/resources/output.txt\");\r\n\r\n    StreamUtils.copy(string, StandardCharsets.UTF_8, out);\r\n\r\n    assertTrue(outputFile.exists());\r\n\r\n    String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\r\n\r\n    assertEquals(outputFileContent, string);\r\n}\r\n```","```\r\n@Test\r\npublic void whenCopyInputStreamToString_thenCorrect() throws IOException {\r\n    String inputFileName = \"src/test/resources/input.txt\";\r\n    InputStream is = new FileInputStream(inputFileName);\r\n    String content = StreamUtils.copyToString(is, StandardCharsets.UTF_8);\r\n\r\n    String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\r\n    assertEquals(inputFileContent, content);\r\n}\r\n```","```\r\npublic void whenCopyByteArrayToOutputStream_thenCorrect() throws IOException {\r\n    String outputFileName = \"src/test/resources/output.txt\";\r\n    String string = \"Should be copied to OutputStream.\";\r\n    byte[] byteArray = string.getBytes();\r\n    OutputStream out = new FileOutputStream(\"src/test/resources/output.txt\");\r\n\r\n    StreamUtils.copy(byteArray, out);\r\n\r\n    String outputFileContent = getStringFromInputStream(new FileInputStream(outputFileName));\r\n\r\n    assertEquals(outputFileContent, string);\r\n}\r\n```","```\r\npublic void whenCopyInputStreamToByteArray_thenCorrect() throws IOException {\r\n    String inputFileName = \"src/test/resources/input.txt\";\r\n    InputStream is = new FileInputStream(inputFileName);\r\n    byte[] out = StreamUtils.copyToByteArray(is);\r\n\r\n    String content = new String(out);\r\n    String inputFileContent = getStringFromInputStream(new FileInputStream(inputFileName));\r\n\r\n    assertEquals(inputFileContent, content);\r\n}\r\n```","```\r\nStreamUtils.drain(in);\r\n```","```\r\npublic InputStream getInputStream() {\r\n    return StreamUtils.emptyInput();\r\n}\r\n```","```\r\npublic InputStream getNonClosingInputStream() throws IOException {\r\n    InputStream in = new FileInputStream(\"src/test/resources/input.txt\");\r\n    return StreamUtils.nonClosing(in);\r\n}\r\n```"]