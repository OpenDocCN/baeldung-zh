["```\r\nLongAdder counter = new LongAdder();\r\nExecutorService executorService = Executors.newFixedThreadPool(8);\r\n\r\nint numberOfThreads = 4;\r\nint numberOfIncrements = 100;\r\n\r\nRunnable incrementAction = () -> IntStream\r\n  .range(0, numberOfIncrements)\r\n  .forEach(i -> counter.increment());\r\n\r\nfor (int i = 0; i < numberOfThreads; i++) {\r\n    executorService.execute(incrementAction);\r\n}\r\n```","```\r\nassertEquals(counter.sum(), numberOfIncrements * numberOfThreads);\r\n```","```\r\nassertEquals(counter.sumThenReset(), numberOfIncrements * numberOfThreads);\r\nassertEquals(counter.sum(), 0);\r\n```","```\r\nLongAccumulator accumulator = new LongAccumulator(Long::sum, 0L);\r\n```","```\r\nint numberOfThreads = 4;\r\nint numberOfIncrements = 100;\r\n\r\nRunnable accumulateAction = () -> IntStream\r\n  .rangeClosed(0, numberOfIncrements)\r\n  .forEach(accumulator::accumulate);\r\n\r\nfor (int i = 0; i < numberOfThreads; i++) {\r\n    executorService.execute(accumulateAction);\r\n}\r\n```","```\r\nassertEquals(accumulator.get(), 20200);\r\n```"]