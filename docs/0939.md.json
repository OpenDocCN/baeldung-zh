["```\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http\r\n            .authorizeRequests(authz -> authz\r\n                .mvcMatchers(\"/login\").permitAll()\r\n                .anyRequest().authenticated()\r\n            )\r\n            .logout(logout -> logout\r\n                .permitAll()\r\n                .logoutSuccessHandler((request, response, authentication) -> {\r\n                    response.setStatus(HttpServletResponse.SC_OK);\r\n                }\r\n            );\r\n    }\r\n\r\n}\r\n```","```\r\npublic class LogoutApplicationUnitTest {\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    // test case\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void whenLogout_thenDisableRedirect() throws Exception {\r\n\r\n    this.mockMvc.perform(post(\"/logout\").with(csrf()))\r\n        .andExpect(status().isOk())\r\n        .andExpect(jsonPath(\"$\").doesNotExist())\r\n        .andExpect(unauthenticated())\r\n        .andReturn();\r\n}\r\n```"]