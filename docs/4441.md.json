["```\r\n@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)\r\nclass ReplaceUnderscoresGeneratorUnitTest {\r\n\r\n    @Nested\r\n    class when_doing_something {\r\n\r\n        @Test\r\n        void then_something_should_happen() {\r\n        }\r\n\r\n        @Test\r\n        @DisplayName(\"@DisplayName takes precedence over generation\")\r\n        void override_generator() {\r\n        }\r\n    }\r\n}\r\n```","```\r\n└─ ReplaceUnderscoresGeneratorUnitTest ✓\r\n   └─ when doing something ✓\r\n      ├─ then something should happen() ✓\r\n      └─ @DisplayName takes precedence over generation ✓\r\n```","```\r\n static class ReplaceCamelCase extends DisplayNameGenerator.Standard {\r\n        @Override\r\n        public String generateDisplayNameForClass(Class<?> testClass) {\r\n            return replaceCamelCase(super.generateDisplayNameForClass(testClass));\r\n        }\r\n\r\n        @Override\r\n        public String generateDisplayNameForNestedClass(Class<?> nestedClass) {\r\n            return replaceCamelCase(super.generateDisplayNameForNestedClass(nestedClass));\r\n        }\r\n\r\n        @Override\r\n        public String generateDisplayNameForMethod(Class<?> testClass, Method testMethod) {\r\n            return this.replaceCamelCase(testMethod.getName()) + \r\n              DisplayNameGenerator.parameterTypesAsString(testMethod);\r\n        }\r\n\r\n        String replaceCamelCase(String camelCase) {\r\n            StringBuilder result = new StringBuilder();\r\n            result.append(camelCase.charAt(0));\r\n            for (int i=1; i<camelCase.length(); i++) {\r\n                if (Character.isUpperCase(camelCase.charAt(i))) {\r\n                    result.append(' ');\r\n                    result.append(Character.toLowerCase(camelCase.charAt(i)));\r\n                } else {\r\n                    result.append(camelCase.charAt(i));\r\n                }\r\n            }\r\n            return result.toString();\r\n        }\r\n    }\r\n```","```\r\n@DisplayNameGeneration(DisplayNameGeneratorUnitTest.ReplaceCamelCase.class)\r\nclass DisplayNameGeneratorUnitTest {\r\n\r\n    @Test\r\n    void camelCaseName() {\r\n    }\r\n}\r\n```","```\r\n└─ Display name generator unit test ✓\r\n   └─ camel case name() ✓\r\n```","```\r\n static class IndicativeSentences extends ReplaceCamelCase {\r\n        @Override\r\n        public String generateDisplayNameForNestedClass(Class<?> nestedClass) {\r\n            return super.generateDisplayNameForNestedClass(nestedClass) + \"...\";\r\n        }\r\n\r\n        @Override\r\n        public String generateDisplayNameForMethod(Class<?> testClass, Method testMethod) {\r\n            return replaceCamelCase(testClass.getSimpleName() + \" \" + testMethod.getName()) + \".\";\r\n        }\r\n    }\r\n```","```\r\nclass DisplayNameGeneratorUnitTest {\r\n\r\n    @Nested\r\n    @DisplayNameGeneration(DisplayNameGeneratorUnitTest.IndicativeSentences.class)\r\n    class ANumberIsFizz {\r\n        @Test\r\n        void ifItIsDivisibleByThree() {\r\n        }\r\n\r\n        @ParameterizedTest(name = \"Number {0} is fizz.\")\r\n        @ValueSource(ints = { 3, 12, 18 })\r\n        void ifItIsOneOfTheFollowingNumbers(int number) {\r\n        }\r\n    }\r\n\r\n    @Nested\r\n    @DisplayNameGeneration(DisplayNameGeneratorUnitTest.IndicativeSentences.class)\r\n    class ANumberIsBuzz {\r\n        @Test\r\n        void ifItIsDivisibleByFive() {\r\n        }\r\n\r\n        @ParameterizedTest(name = \"Number {0} is buzz.\")\r\n        @ValueSource(ints = { 5, 10, 20 })\r\n        void ifItIsOneOfTheFollowingNumbers(int number) {\r\n        }\r\n    }\r\n}\r\n```","```\r\n└─ Display name generator unit test ✓\r\n   ├─ A number is buzz... ✓\r\n   │  ├─ A number is buzz if it is one of the following numbers. ✓\r\n   │  │  ├─ Number 5 is buzz. ✓\r\n   │  │  ├─ Number 10 is buzz. ✓\r\n   │  │  └─ Number 20 is buzz. ✓\r\n   │  └─ A number is buzz if it is divisible by five. ✓\r\n   └─ A number is fizz... ✓\r\n      ├─ A number is fizz if it is one of the following numbers. ✓\r\n      │  ├─ Number 3 is fizz. ✓\r\n      │  ├─ Number 12 is fizz. ✓\r\n      │  └─ Number 18 is fizz. ✓\r\n      └─ A number is fizz if it is divisible by three. ✓\r\n```"]