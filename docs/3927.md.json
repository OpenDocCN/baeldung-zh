["```\r\nbyte[] data = // fetch json from somewhere\r\nString json = objectMapper.readValue(data, String.class);\r\n```","```\r\nMap<String, String> json = objectMapper.readValue(data, Map<String, String>.class); // won't compile\r\n```","```\r\npublic abstract class TypeReference<T> {\r\n\r\n    private final Type type;\r\n\r\n    public TypeReference() {\r\n        Type superclass = getClass().getGenericSuperclass();\r\n        type = ((ParameterizedType) superclass).getActualTypeArguments()[0];\r\n    }\r\n\r\n    public Type getType() {\r\n        return type;\r\n    }\r\n}\r\n```","```\r\nTypeReference<Map<String, Integer>> token = new TypeReference<Map<String, String>>() {};\r\n```","```\r\nTypeReference<Map<String, Integer>> token = new TypeReference<Map<String, Integer>>() {};\r\nType type = token.getType();\r\n\r\nassertEquals(\"java.util.Map<java.lang.String, java.lang.Integer>\", type.getTypeName());\r\n\r\nType[] typeArguments = ((ParameterizedType) type).getActualTypeArguments();\r\nassertEquals(\"java.lang.String\", typeArguments[0].getTypeName());\r\nassertEquals(\"java.lang.Integer\", typeArguments[1].getTypeName());\r\n```","```\r\nTypeReference<Map<String, String>> token = new TypeReference<Map<String, String>>() {};\r\nMap<String, String> json = objectMapper.readValue(data, token);\r\n```"]