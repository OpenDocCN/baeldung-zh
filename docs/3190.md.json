["```\r\n<dependency>\r\n    <groupId>org.passay</groupId>\r\n    <artifactId>passay</artifactId>\r\n    <version>1.3.1</version>\r\n</dependency>\r\n```","```\r\nPasswordValidator passwordValidator = new PasswordValidator(new LengthRule(5));\r\n```","```\r\nPasswordData passwordData = new PasswordData(\"1234\");\r\n\r\nPasswordData passwordData2 = new PasswordData();\r\npasswordData.setPassword(\"1234\");\r\n```","```\r\nRuleResult validate = passwordValidator.validate(passwordData);\r\n```","```\r\nAssert.assertEquals(false, validate.isValid());\r\n```","```\r\nRuleResultDetail ruleResultDetail = validate.getDetails().get(0);\r\nAssert.assertEquals(\"TOO_SHORT\", ruleResultDetail.getErrorCode());\r\nAssert.assertEquals(5, ruleResultDetail.getParameters().get(\"minimumLength\"));\r\nAssert.assertEquals(5, ruleResultDetail.getParameters().get(\"maximumLength\"));\r\n```","```\r\nInteger lengthCount = validate\r\n  .getMetadata()\r\n  .getCounts()\r\n  .get(RuleResultMetadata.CountCategory.Length);\r\nAssert.assertEquals(Integer.valueOf(4), lengthCount);\r\n```","```\r\nCharacterRule digits = new CharacterRule(EnglishCharacterData.Digit);\r\n\r\nPasswordGenerator passwordGenerator = new PasswordGenerator();\r\nString password = passwordGenerator.generatePassword(10, digits);\r\n\r\nAssert.assertTrue(password.length() == 10);\r\nAssert.assertTrue(containsOnlyCharactersFromSet(password, \"0123456789\"));\r\n```","```\r\nCharacterRule specialCharacterRule = new CharacterRule(new CharacterData() {\r\n    @Override\r\n    public String getErrorCode() {\r\n        return \"SAMPLE_ERROR_CODE\";\r\n    }\r\n\r\n    @Override\r\n    public String getCharacters() {\r\n        return \"[[email protected]](/web/20221129003433/https://www.baeldung.com/cdn-cgi/l/email-protection)#\";\r\n    }\r\n});\r\n\r\nPasswordGenerator passwordGenerator = new PasswordGenerator();\r\nString password = passwordGenerator.generatePassword(10, specialCharacterRule);\r\n\r\nAssert.assertTrue(containsOnlyCharactersFromSet(password, \"[[email protected]](/web/20221129003433/https://www.baeldung.com/cdn-cgi/l/email-protection)#\"));\r\n```","```\r\nPasswordValidator passwordValidator = new PasswordValidator(\r\n  new AllowedCharacterRule(new char[] { 'a', 'b', 'c' }), \r\n  new CharacterRule(EnglishCharacterData.LowerCase, 5), \r\n  new LengthRule(8, 10)\r\n);\r\n\r\nRuleResult validate = passwordValidator.validate(new PasswordData(\"12abc\"));\r\n\r\nassertFalse(validate.isValid());\r\nassertEquals(\r\n  \"ALLOWED_CHAR:{illegalCharacter=1, matchBehavior=contains}\", \r\n  getDetail(validate, 0));\r\nassertEquals(\r\n  \"ALLOWED_CHAR:{illegalCharacter=2, matchBehavior=contains}\", \r\n  getDetail(validate, 1));\r\nassertEquals(\r\n  \"TOO_SHORT:{minimumLength=8, maximumLength=10}\", \r\n  getDetail(validate, 4));\r\n```","```\r\nCharacterCharacteristicsRule characterCharacteristicsRule = new CharacterCharacteristicsRule(\r\n  3, \r\n  new CharacterRule(EnglishCharacterData.LowerCase, 5), \r\n  new CharacterRule(EnglishCharacterData.UpperCase, 5), \r\n  new CharacterRule(EnglishCharacterData.Digit),\r\n  new CharacterRule(EnglishCharacterData.Special)\r\n);\r\n```","```\r\nLengthComplexityRule lengthComplexityRule = new LengthComplexityRule();\r\nlengthComplexityRule.addRules(\"[1,5]\", new CharacterRule(EnglishCharacterData.LowerCase, 5));\r\nlengthComplexityRule.addRules(\"[6,10]\", \r\n  new AllowedCharacterRule(new char[] { 'a', 'b', 'c', 'd' }));\r\n```","```\r\nPasswordValidator passwordValidator = new PasswordValidator(\r\n  new IllegalCharacterRule(new char[] { 'a' }), \r\n  new NumberRangeRule(1, 10), \r\n  new WhitespaceRule()\r\n);\r\n\r\nRuleResult validate = passwordValidator.validate(new PasswordData(\"abcd22 \"));\r\n\r\nassertFalse(validate.isValid());\r\nassertEquals(\r\n  \"ILLEGAL_CHAR:{illegalCharacter=a, matchBehavior=contains}\", \r\n  getDetail(validate, 0));\r\nassertEquals(\r\n  \"ILLEGAL_NUMBER_RANGE:{number=2, matchBehavior=contains}\", \r\n  getDetail(validate, 4));\r\nassertEquals(\r\n  \"ILLEGAL_WHITESPACE:{whitespaceCharacter= , matchBehavior=contains}\", \r\n  getDetail(validate, 5));\r\n```","```\r\nWordListDictionary wordListDictionary = new WordListDictionary(\r\n  new ArrayWordList(new String[] { \"bar\", \"foobar\" }));\r\n\r\nDictionaryRule dictionaryRule = new DictionaryRule(wordListDictionary);\r\nDictionarySubstringRule dictionarySubstringRule = new DictionarySubstringRule(wordListDictionary);\r\n```","```\r\nSourceRule sourceRule = new SourceRule();\r\nHistoryRule historyRule = new HistoryRule();\r\n\r\nPasswordData passwordData = new PasswordData(\"123\");\r\npasswordData.setPasswordReferences(\r\n  new PasswordData.SourceReference(\"source\", \"password\"), \r\n  new PasswordData.HistoricalReference(\"12345\")\r\n);\r\n\r\nPasswordValidator passwordValidator = new PasswordValidator(\r\n  historyRule, sourceRule);\r\n```","```\r\nList<PasswordData.Reference> historicalReferences = Arrays.asList(\r\n  new PasswordData.HistoricalReference(\r\n    \"SHA256\",\r\n    \"2e4551de804e27aacf20f9df5be3e8cd384ed64488b21ab079fb58e8c90068ab\"\r\n));\r\n\r\nEncodingHashBean encodingHashBean = new EncodingHashBean(\r\n  new CodecSpec(\"Base64\"), \r\n  new DigestSpec(\"SHA256\"), \r\n  1, \r\n  false\r\n); \r\n```","```\r\nPasswordData passwordData = new PasswordData(\"example!\");\r\npasswordData.setPasswordReferences(historicalReferences);\r\n\r\nPasswordValidator passwordValidator = new PasswordValidator(new DigestHistoryRule(encodingHashBean));\r\n\r\nRuleResult validate = passwordValidator.validate(passwordData);\r\n\r\nAssert.assertTrue(validate.isValid());\r\n```","```\r\nPasswordValidator passwordValidator = new PasswordValidator(new RepeatCharacterRegexRule(3));\r\n\r\nRuleResult validate = passwordValidator.validate(new PasswordData(\"aaabbb\"));\r\n\r\nassertFalse(validate.isValid());\r\nassertEquals(\"ILLEGAL_MATCH:{match=aaa, pattern=([^\\\\x00-\\\\x1F])\\\\1{2}}\", getDetail(validate, 0));\r\n```","```\r\nPasswordValidator passwordValidator = new PasswordValidator(new UsernameRule());\r\n\r\nPasswordData passwordData = new PasswordData(\"testuser1234\");\r\npasswordData.setUsername(\"testuser\");\r\n\r\nRuleResult validate = passwordValidator.validate(passwordData);\r\n\r\nassertFalse(validate.isValid());\r\nassertEquals(\"ILLEGAL_USERNAME:{username=testuser, matchBehavior=contains}\", getDetail(validate, 0));\r\n```","```\r\nTOO_LONG=Password must not have more characters than %2$s.\r\nTOO_SHORT=Password must not contain less characters than %2$s.\r\n```","```\r\nURL resource = this.getClass().getClassLoader().getResource(\"messages.properties\");\r\nProperties props = new Properties();\r\nprops.load(new FileInputStream(resource.getPath()));\r\n\r\nMessageResolver resolver = new PropertiesMessageResolver(props); \r\n```","```\r\nPasswordValidator validator = new PasswordValidator(\r\n  resolver, \r\n  new LengthRule(8, 16), \r\n  new WhitespaceRule()\r\n);\r\n\r\nRuleResult tooShort = validator.validate(new PasswordData(\"XXXX\"));\r\nRuleResult tooLong = validator.validate(new PasswordData(\"ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\"));\r\n\r\nAssert.assertEquals(\r\n  \"Password must not contain less characters than 16.\", \r\n  validator.getMessages(tooShort).get(0));\r\nAssert.assertEquals(\r\n  \"Password must not have more characters than 16.\", \r\n  validator.getMessages(tooLong).get(0));\r\n```"]