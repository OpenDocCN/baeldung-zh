["```\r\n<dependency>\r\n    <groupId>com.jcraft</groupId>\r\n    <artifactId>jsch</artifactId>\r\n    <version>0.1.55</version>\r\n</dependency>\r\n```","```\r\npublic static void listFolderStructure(String username, String password, \r\n  String host, int port, String command) throws Exception {\r\n\r\n    Session session = null;\r\n    ChannelExec channel = null;\r\n\r\n    try {\r\n        session = new JSch().getSession(username, host, port);\r\n        session.setPassword(password);\r\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\r\n        session.connect();\r\n\r\n        channel = (ChannelExec) session.openChannel(\"exec\");\r\n        channel.setCommand(command);\r\n        ByteArrayOutputStream responseStream = new ByteArrayOutputStream();\r\n        channel.setOutputStream(responseStream);\r\n        channel.connect();\r\n\r\n        while (channel.isConnected()) {\r\n            Thread.sleep(100);\r\n        }\r\n\r\n        String responseString = new String(responseStream.toByteArray());\r\n        System.out.println(responseString);\r\n    } finally {\r\n        if (session != null) {\r\n            session.disconnect();\r\n        }\r\n        if (channel != null) {\r\n            channel.disconnect();\r\n        }\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.sshd</groupId>\r\n    <artifactId>sshd-core</artifactId>\r\n    <version>2.5.1</version>\r\n</dependency>\r\n```","```\r\npublic static void listFolderStructure(String username, String password, \r\n  String host, int port, long defaultTimeoutSeconds, String command) throws IOException {\r\n\r\n    SshClient client = SshClient.setUpDefaultClient();\r\n    client.start();\r\n\r\n    try (ClientSession session = client.connect(username, host, port)\r\n      .verify(defaultTimeoutSeconds, TimeUnit.SECONDS).getSession()) {\r\n        session.addPasswordIdentity(password);\r\n        session.auth().verify(defaultTimeoutSeconds, TimeUnit.SECONDS);\r\n\r\n        try (ByteArrayOutputStream responseStream = new ByteArrayOutputStream(); \r\n          ClientChannel channel = session.createChannel(Channel.CHANNEL_SHELL)) {\r\n            channel.setOut(responseStream);\r\n            try {\r\n                channel.open().verify(defaultTimeoutSeconds, TimeUnit.SECONDS);\r\n                try (OutputStream pipedIn = channel.getInvertedIn()) {\r\n                    pipedIn.write(command.getBytes());\r\n                    pipedIn.flush();\r\n                }\r\n\r\n                channel.waitFor(EnumSet.of(ClientChannelEvent.CLOSED), \r\n                TimeUnit.SECONDS.toMillis(defaultTimeoutSeconds));\r\n                String responseString = new String(responseStream.toByteArray());\r\n                System.out.println(responseString);\r\n            } finally {\r\n                channel.close(false);\r\n            }\r\n        }\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\r\n```"]