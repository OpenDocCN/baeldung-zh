["```\r\n// Key-Value document\r\n{\r\n  \"value\": \"Baeldung\"\r\n}\r\n\r\n// Tabular document\r\n{\r\n  \"name\": \"Baeldung\",\r\n  \"url\": \"https://www.baeldung.com/\"\r\n}\r\n\r\n// Structured document\r\n{\r\n  \"name\": \"Baeldung\",\r\n  \"sites\": [\r\n    {\r\n      \"id\": \"cs\",\r\n      \"name\": \"Computer Science\",\r\n      \"url\": \"https://www.baeldung.com/cs\"\r\n    },\r\n    {\r\n      \"id\": \"linux\",\r\n      \"name\": \"Linux\",\r\n      \"url\": \"https://www.baeldung.com/linux\"\r\n    },\r\n    {\r\n      \"id\": \"scala\",\r\n      \"name\": \"Scala\",\r\n      \"url\": \"https://www.baeldung.com/scala\"\r\n    },\r\n    {\r\n      \"id\": \"kotlin\",\r\n      \"name\": \"Kotlin\",\r\n      \"url\": \"https://www.baeldung.com/kotlin\"\r\n    },\r\n  ]\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.faunadb</groupId>\r\n    <artifactId>faunadb-java</artifactId>\r\n    <version>4.2.0</version>\r\n    <scope>compile</scope>\r\n</dependency>\r\n```","```\r\nFaunaClient client = FaunaClient.builder()\r\n    .withEndpoint(\"https://db.us.fauna.com/\")\r\n    .withSecret(\"put-your-authorization-key-here\")\r\n    .build();\r\n```","```\r\nclient.query(\r\n    language.Get(language.Ref(language.Collection(\"customers\"), 101))\r\n).get();\r\n```","```\r\nfauna.region=us\r\nfauna.secret=FaunaSecretHere\r\n```","```\r\n@Configuration\r\nclass FaunaClientConfiguration {\r\n    @Value(\"https://db.${fauna.region}.fauna.com/\")\r\n    private String faunaUrl;\r\n\r\n    @Value(\"${fauna.secret}\")\r\n    private String faunaSecret;\r\n\r\n    @Bean\r\n    FaunaClient getFaunaClient() throws MalformedURLException {\r\n        return FaunaClient.builder()\r\n            .withEndpoint(faunaUrl)\r\n            .withSecret(faunaSecret)\r\n            .build();\r\n    }\r\n} \r\n```","```\r\n@Component\r\npublic class GraphqlClient {\r\n    @Value(\"https://graphql.${fauna.region}.fauna.com/graphql\")\r\n    private String faunaUrl;\r\n\r\n    @Value(\"${fauna.secret}\")\r\n    private String faunaSecret;\r\n\r\n    private RestTemplate restTemplate = new RestTemplate();\r\n\r\n    public <T> T query(String query, Class<T> cls) {\r\n        return query(query, Collections.emptyMap(), cls);\r\n    }\r\n\r\n    public <T, V> T query(String query, V variables, Class<T> cls) {\r\n        var body = Map.of(\"query\", query, \"variables\", variables);\r\n\r\n        var request = RequestEntity.post(faunaUrl)\r\n            .header(\"Authorization\", \"Bearer \" + faunaSecret)\r\n            .body(body);\r\n        var response = restTemplate.exchange(request, cls);\r\n\r\n        return response.getBody();\r\n    }\r\n}\r\n```"]