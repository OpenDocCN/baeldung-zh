["```\r\npublic class Zoo {\r\n    public Animal animal;\r\n\r\n    public Zoo() { }\r\n}\r\n\r\nabstract class Animal {\r\n    public String name;\r\n\r\n    public Animal() { }\r\n}\r\n\r\nclass Cat extends Animal {\r\n    public int lives;\r\n\r\n    public Cat() { }\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenAbstractClass_whenDeserializing_thenException() \r\n  throws IOException {\r\n    String json = \"{\"animal\":{\"name\":\"lacy\"}}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    mapper.reader().forType(Zoo.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException: \r\nCan not construct instance of org.baeldung.jackson.exception.Animal,\r\n  problem: abstract types either need to be mapped to concrete types, \r\n  have custom deserializer, \r\n  or be instantiated with additional type information\r\n  at \r\n[Source: {\"animal\":{\"name\":\"lacy\"}}; line: 1, column: 2] \r\n(through reference chain: org.baeldung.jackson.exception.Zoo[\"animal\"])\r\n\tat c.f.j.d.JsonMappingException.from(JsonMappingException.java:148)\r\n```","```\r\n@JsonDeserialize(as = Cat.class)\r\nabstract class Animal {...}\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    public User(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenNoDefaultConstructor_whenDeserializing_thenException() \r\n  throws IOException {\r\n    String json = \"{\"id\":1,\"name\":\"John\"}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    mapper.reader().forType(User.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException: \r\nNo suitable constructor found for type \r\n[simple type, class org.baeldung.jackson.exception.User]:\r\n can not instantiate from JSON object (need to add/enable type information?)\r\n at [Source: {\"id\":1,\"name\":\"John\"}; line: 1, column: 2]\r\n        at c.f.j.d.JsonMappingException.from(JsonMappingException.java:148)\r\n```","```\r\npublic class User {\r\n    public int id;\r\n    public String name;\r\n\r\n    public User() {\r\n        super();\r\n    }\r\n\r\n    public User(int id, String name) {\r\n        this.id = id;\r\n        this.name = name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenDefaultConstructor_whenDeserializing_thenCorrect() \r\n  throws IOException {\r\n\r\n    String json = \"{\"id\":1,\"name\":\"John\"}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    User user = mapper.reader()\r\n      .forType(User.class).readValue(json);\r\n    assertEquals(\"John\", user.name);\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenWrappedJsonString_whenDeserializing_thenException()\r\n  throws IOException {\r\n    String json = \"{\"user\":{\"id\":1,\"name\":\"John\"}}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\r\n\r\n    mapper.reader().forType(User.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException:\r\nRoot name 'user' does not match expected ('User') for type\r\n [simple type, class org.baeldung.jackson.dtos.User]\r\n at [Source: {\"user\":{\"id\":1,\"name\":\"John\"}}; line: 1, column: 2]\r\n   at c.f.j.d.JsonMappingException.from(JsonMappingException.java:148) \r\n```","```\r\n@JsonRootName(value = \"user\")\r\npublic class UserWithRoot {\r\n    public int id;\r\n    public String name;\r\n}\r\n```","```\r\n@Test\r\npublic void \r\n  givenWrappedJsonStringAndConfigureClass_whenDeserializing_thenCorrect() \r\n  throws IOException {\r\n\r\n    String json = \"{\"user\":{\"id\":1,\"name\":\"John\"}}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.enable(DeserializationFeature.UNWRAP_ROOT_VALUE);\r\n\r\n    UserWithRoot user = mapper.reader()\r\n      .forType(UserWithRoot.class)\r\n      .readValue(json);\r\n    assertEquals(\"John\", user.name);\r\n}\r\n```","```\r\npublic class UserWithPrivateFields {\r\n    int id;\r\n    String name;\r\n}\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenClassWithPrivateFields_whenSerializing_thenException() \r\n  throws IOException {\r\n    UserWithPrivateFields user = new UserWithPrivateFields(1, \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.writer().writeValueAsString(user);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException: \r\nNo serializer found for class org.baeldung.jackson.exception.UserWithPrivateFields\r\n and no properties discovered to create BeanSerializer \r\n(to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )\r\n  at c.f.j.d.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:59)\r\n```","```\r\n@Test\r\npublic void givenClassWithPrivateFields_whenConfigureSerializing_thenCorrect() \r\n  throws IOException {\r\n\r\n    UserWithPrivateFields user = new UserWithPrivateFields(1, \"John\");\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY);\r\n\r\n    String result = mapper.writer().writeValueAsString(user);\r\n    assertThat(result, containsString(\"John\"));\r\n}\r\n```","```\r\n@JsonAutoDetect(fieldVisibility = Visibility.ANY)\r\npublic class UserWithPrivateFields { ... }\r\n```","```\r\n@Test(expected = JsonMappingException.class)\r\npublic void givenJsonOfArray_whenDeserializing_thenException() \r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json \r\n      = \"[{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Adam\"}]\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.reader().forType(User.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.JsonMappingException:\r\nCan not deserialize instance of \r\n  org.baeldung.jackson.dtos.User out of START_ARRAY token\r\n  at [Source: [{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Adam\"}]; line: 1, column: 1]\r\n  at c.f.j.d.JsonMappingException.from(JsonMappingException.java:148)\r\n```","```\r\n@Test\r\npublic void givenJsonOfArray_whenDeserializing_thenCorrect() \r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json\r\n      = \"[{\"id\":1,\"name\":\"John\"},{\"id\":2,\"name\":\"Adam\"}]\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    List<User> users = mapper.reader()\r\n      .forType(new TypeReference<List<User>>() {})\r\n      .readValue(json);\r\n\r\n    assertEquals(2, users.size());\r\n}\r\n```","```\r\n@Test(expected = UnrecognizedPropertyException.class)\r\npublic void givenJsonStringWithExtra_whenDeserializing_thenException() \r\n  throws IOException {\r\n\r\n    String json = \"{\"id\":1,\"name\":\"John\", \"checked\":true}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.reader().forType(User.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException:\r\nUnrecognized field \"checked\" (class org.baeldung.jackson.dtos.User),\r\n not marked as ignorable (2 known properties: \"id\", \"name\"])\r\n at [Source: {\"id\":1,\"name\":\"John\", \"checked\":true}; line: 1, column: 38]\r\n (through reference chain: org.baeldung.jackson.dtos.User[\"checked\"])\r\n  at c.f.j.d.exc.UnrecognizedPropertyException.from(\r\n    UnrecognizedPropertyException.java:51)\r\n```","```\r\n@Test\r\npublic void givenJsonStringWithExtra_whenConfigureDeserializing_thenCorrect() \r\n  throws IOException {\r\n\r\n    String json = \"{\"id\":1,\"name\":\"John\", \"checked\":true}\";\r\n\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\r\n\r\n    User user = mapper.reader().forType(User.class).readValue(json);\r\n    assertEquals(\"John\", user.name);\r\n}\r\n```","```\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class User {...}\r\n```","```\r\n@Test(expected = JsonParseException.class)\r\npublic void givenStringWithSingleQuotes_whenDeserializing_thenException() \r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json = \"{'id':1,'name':'John'}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    mapper.reader()\r\n      .forType(User.class).readValue(json);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.core.JsonParseException:\r\nUnexpected character (''' (code 39)): \r\n  was expecting double-quote to start field name\r\n  at [Source: {'id':1,'name':'John'}; line: 1, column: 3]\r\n  at c.f.j.core.JsonParser._constructError(JsonParser.java:1419)\r\n```","```\r\n@Test\r\npublic void \r\n  givenStringWithSingleQuotes_whenConfigureDeserializing_thenCorrect() \r\n  throws JsonProcessingException, IOException {\r\n\r\n    String json = \"{'id':1,'name':'John'}\";\r\n\r\n    JsonFactory factory = new JsonFactory();\r\n    factory.enable(JsonParser.Feature.ALLOW_SINGLE_QUOTES);\r\n    ObjectMapper mapper = new ObjectMapper(factory);\r\n\r\n    User user = mapper.reader().forType(User.class)\r\n      .readValue(json);\r\n\r\n    assertEquals(\"John\", user.name);\r\n}\r\n```","```\r\njava.lang.NoSuchMethodError:\r\ncom.fasterxml.jackson.core.JsonParser.getValueAsString()Ljava/lang/String;\r\n at c.f.j.d.deser.std.StringDeserializer.deserialize(StringDeserializer.java:24)\r\n```"]