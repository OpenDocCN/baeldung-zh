["```\r\n<dependency>\r\n    <groupId>org.apache.camel.springboot</groupId>\r\n     <artifactId>camel-spring-boot-starter</artifactId>\r\n     <version>3.18.1</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.camel</groupId>\r\n    <artifactId>camel-test-spring-junit5</artifactId>\r\n    <version>3.18.1</version>\r\n</dependency>\r\n```","```\r\n@SpringBootApplication\r\npublic class ConditionalRoutingSpringApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(ConditionalRoutingSpringApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class ConditionalBodyRouter extends RouteBuilder {\r\n\r\n    @Override\r\n    public void configure() throws Exception {\r\n\r\n        from(\"direct:start-conditional\")\r\n          .routeId(\"conditional-body-route\")\r\n          .choice()\r\n            .when(body().contains(\"Baeldung\"))\r\n              .setBody(simple(\"Goodbye, Baeldung!\"))\r\n              .to(\"mock:result-body\")\r\n            .otherwise()\r\n              .to(\"mock:result-body\")\r\n          .end();\r\n    }\r\n}\r\n```","```\r\n@SpringBootTest\r\n@CamelSpringBootTest\r\nclass ConditionalBodyRouterUnitTest {\r\n\r\n    @Autowired\r\n    private ProducerTemplate template;\r\n\r\n    @EndpointInject(\"mock:result-body\")\r\n    private MockEndpoint mock;\r\n\r\n    @Test\r\n    void whenSendBodyWithBaeldung_thenGoodbyeMessageReceivedSuccessfully() throws InterruptedException {\r\n        mock.expectedBodiesReceived(\"Goodbye, Baeldung!\");\r\n\r\n        template.sendBody(\"direct:start-conditional\", \"Hello Baeldung Readers!\");\r\n\r\n        mock.assertIsSatisfied();\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class ConditionalHeaderRouter extends RouteBuilder {\r\n\r\n    @Override\r\n    public void configure() throws Exception {\r\n\r\n        from(\"direct:start-conditional-header\")\r\n            .routeId(\"conditional-header-route\")\r\n            .choice()\r\n              .when(header(\"fruit\").isEqualTo(\"Apple\"))\r\n                .setHeader(\"favourite\", simple(\"Apples\"))\r\n                .to(\"mock:result\")\r\n              .otherwise()\r\n                .setHeader(\"favourite\", header(\"fruit\"))\r\n                .to(\"mock:result\")\r\n            .end();\r\n    }\r\n}\r\n```","```\r\npublic class FruitBean {\r\n\r\n    public static boolean isApple(Exchange exchange) {\r\n        return \"Apple\".equals(exchange.getIn().getHeader(\"fruit\"));\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class ConditionalBeanRouter extends RouteBuilder {\r\n\r\n    @Override\r\n    public void configure() throws Exception {\r\n\r\n        from(\"direct:start-conditional-bean\")\r\n            .routeId(\"conditional-bean-route\")\r\n            .choice()\r\n              .when(method(FruitBean.class, \"isApple\"))\r\n                .setHeader(\"favourite\", simple(\"Apples\"))\r\n                .to(\"mock:result\")\r\n              .otherwise()\r\n                .setHeader(\"favourite\", header(\"fruit\"))\r\n                 .to(\"mock:result\")\r\n              .endChoice()\r\n            .end();\r\n    }\r\n}\r\n```"]