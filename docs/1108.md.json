["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.security</groupId>\r\n    <artifactId>spring-security-test</artifactId>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\r\n        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\r\n        auth.inMemoryAuthentication()\r\n         .passwordEncoder(encoder)\r\n         .withUser(\"spring\")\r\n         .password(encoder.encode(\"secret\"))\r\n         .roles(\"USER\");\r\n    }\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.authorizeRequests()\r\n          .antMatchers(\"/private/**\")\r\n          .authenticated()\r\n          .antMatchers(\"/public/**\")\r\n          .permitAll()\r\n          .and()\r\n          .httpBasic();\r\n    }\r\n} \r\n```","```\r\n@Configuration\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\npublic class MethodSecurityConfigurer \r\n  extends GlobalMethodSecurityConfiguration {\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@WebMvcTest(SecuredController.class)\r\npublic class SecuredControllerWebMvcIntegrationTest {\r\n\r\n    @Autowired\r\n    private MockMvc mvc;\r\n\r\n    // ... other methods\r\n\r\n    @WithMockUser(value = \"spring\")\r\n    @Test\r\n    public void givenAuthRequestOnPrivateService_shouldSucceedWith200() throws Exception {\r\n        mvc.perform(get(\"/private/hello\").contentType(MediaType.APPLICATION_JSON))\r\n          .andExpect(status().isOk());\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic class SecuredControllerSpringBootIntegrationTest {\r\n\r\n    @Autowired\r\n    private WebApplicationContext context;\r\n\r\n    private MockMvc mvc;\r\n\r\n    @Before\r\n    public void setup() {\r\n        mvc = MockMvcBuilders\r\n          .webAppContextSetup(context)\r\n          .apply(springSecurity())\r\n          .build();\r\n    }\r\n\r\n    // ... other methods\r\n\r\n    @WithMockUser(\"spring\")\r\n    @Test\r\n    public void givenAuthRequestOnPrivateService_shouldSucceedWith200() throws Exception {\r\n        mvc.perform(get(\"/private/hello\").contentType(MediaType.APPLICATION_JSON))\r\n          .andExpect(status().isOk());\r\n    }\r\n} \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class SecuredMethodSpringBootIntegrationTest {\r\n\r\n    @Autowired\r\n    private SecuredService service;\r\n\r\n    @Test(expected = AuthenticationCredentialsNotFoundException.class)\r\n    public void givenUnauthenticated_whenCallService_thenThrowsException() {\r\n        service.sayHelloSecured();\r\n    }\r\n\r\n    @WithMockUser(username=\"spring\")\r\n    @Test\r\n    public void givenAuthenticated_whenCallServiceWithSecured_thenOk() {\r\n        assertThat(service.sayHelloSecured()).isNotBlank();\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\r\npublic class SecuredControllerRestTemplateIntegrationTest {\r\n\r\n    @Autowired\r\n    private TestRestTemplate template;\r\n\r\n    // ... other methods\r\n\r\n    @Test\r\n    public void givenAuthRequestOnPrivateService_shouldSucceedWith200() throws Exception {\r\n        ResponseEntity<String> result = template.withBasicAuth(\"spring\", \"secret\")\r\n          .getForEntity(\"/private/hello\", String.class);\r\n        assertEquals(HttpStatus.OK, result.getStatusCode());\r\n    }\r\n}\r\n```"]