["```\r\n<dependency>\r\n    <groupId>org.apache.tika</groupId>\r\n    <artifactId>tika-parsers</artifactId>\r\n    <version>1.17</version>\r\n</dependency>\r\n```","```\r\nvoid parse(\r\n  InputStream stream, \r\n  ContentHandler handler, \r\n  Metadata metadata, \r\n  ParseContext context) \r\n  throws IOException, SAXException, TikaException\r\n```","```\r\nMediaType detect(java.io.InputStream input, Metadata metadata) \r\n  throws IOException\r\n```","```\r\npublic class TikaAnalysis {\r\n    // illustration methods\r\n}\r\n```","```\r\npublic static String detectDocTypeUsingDetector(InputStream stream) \r\n  throws IOException {\r\n    Detector detector = new DefaultDetector();\r\n    Metadata metadata = new Metadata();\r\n\r\n    MediaType mediaType = detector.detect(stream, metadata);\r\n    return mediaType.toString();\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingDetector_thenDocumentTypeIsReturned() \r\n  throws IOException {\r\n    InputStream stream = this.getClass().getClassLoader()\r\n      .getResourceAsStream(\"tika.txt\");\r\n    String mediaType = TikaAnalysis.detectDocTypeUsingDetector(stream);\r\n\r\n    assertEquals(\"application/pdf\", mediaType);\r\n\r\n    stream.close();\r\n}\r\n```","```\r\npublic static String detectDocTypeUsingFacade(InputStream stream) \r\n  throws IOException {\r\n\r\n    Tika tika = new Tika();\r\n    String mediaType = tika.detect(stream);\r\n    return mediaType;\r\n}\r\n```","```\r\npublic static String extractContentUsingParser(InputStream stream) \r\n  throws IOException, TikaException, SAXException {\r\n\r\n    Parser parser = new AutoDetectParser();\r\n    ContentHandler handler = new BodyContentHandler();\r\n    Metadata metadata = new Metadata();\r\n    ParseContext context = new ParseContext();\r\n\r\n    parser.parse(stream, handler, metadata, context);\r\n    return handler.toString();\r\n}\r\n```","```\r\nApache Tika - a content analysis toolkit\r\nThe Apache Tikaâ„¢ toolkit detects and extracts metadata and text ...\r\n```","```\r\n@Test\r\npublic void whenUsingParser_thenContentIsReturned() \r\n  throws IOException, TikaException, SAXException {\r\n    InputStream stream = this.getClass().getClassLoader()\r\n      .getResourceAsStream(\"tika.docx\");\r\n    String content = TikaAnalysis.extractContentUsingParser(stream);\r\n\r\n    assertThat(content, \r\n      containsString(\"Apache Tika - a content analysis toolkit\"));\r\n    assertThat(content, \r\n      containsString(\"detects and extracts metadata and text\"));\r\n\r\n    stream.close();\r\n}\r\n```","```\r\npublic static String extractContentUsingFacade(InputStream stream) \r\n  throws IOException, TikaException {\r\n\r\n    Tika tika = new Tika();\r\n    String content = tika.parseToString(stream);\r\n    return content;\r\n}\r\n```","```\r\npublic static Metadata extractMetadatatUsingParser(InputStream stream) \r\n  throws IOException, SAXException, TikaException {\r\n\r\n    Parser parser = new AutoDetectParser();\r\n    ContentHandler handler = new BodyContentHandler();\r\n    Metadata metadata = new Metadata();\r\n    ParseContext context = new ParseContext();\r\n\r\n    parser.parse(stream, handler, metadata, context);\r\n    return metadata;\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingParser_thenMetadataIsReturned() \r\n  throws IOException, TikaException, SAXException {\r\n    InputStream stream = this.getClass().getClassLoader()\r\n      .getResourceAsStream(\"tika.xlsx\");\r\n    Metadata metadata = TikaAnalysis.extractMetadatatUsingParser(stream);\r\n\r\n    assertEquals(\"org.apache.tika.parser.DefaultParser\", \r\n      metadata.get(\"X-Parsed-By\"));\r\n    assertEquals(\"Microsoft Office User\", metadata.get(\"Author\"));\r\n\r\n    stream.close();\r\n}\r\n```","```\r\npublic static Metadata extractMetadatatUsingFacade(InputStream stream) \r\n  throws IOException, TikaException {\r\n    Tika tika = new Tika();\r\n    Metadata metadata = new Metadata();\r\n\r\n    tika.parse(stream, metadata);\r\n    return metadata;\r\n}\r\n```"]