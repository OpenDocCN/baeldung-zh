["```\r\nreversInPlace(array A[n])\r\n    for i from 0 to n/2\r\n    temp = A[i]\r\n    A[i] = A[n - 1 - i]\r\n    A[n - 1 - i] = temp\r\n```","```\r\nreverseOutOfPlace(array A[n])\r\n    create new array B[n]\r\n    for i from 0 to n - 1\r\n        B[i] = A[i]\r\n    delete A\r\n    return B\r\n```","```\r\npublic static int[] reverseInPlace(int A[]) {\r\n    int n = A.length;\r\n    for (int i = 0; i < n / 2; i++) {\r\n        int temp = A[i];\r\n        A[i] = A[n - 1 - i];\r\n        A[n - 1 - i] = temp;\r\n    }\r\n    return A;\r\n}\r\n```","```\r\n@Test\r\npublic void givenArray_whenInPlaceSort_thenReversed() {\r\n    int[] input = {1, 2, 3, 4, 5, 6, 7};\r\n    int[] expected = {7, 6, 5, 4, 3, 2, 1};\r\n    assertArrayEquals(\"the two arrays are not equal\", expected,\r\n      InOutSort.reverseInPlace(input));\r\n}\r\n```","```\r\npublic static int[] reverseOutOfPlace(int A[]) {\r\n    int n = A.length;\r\n    int[] B = new int[n];\r\n    for (int i = 0; i < n; i++) {\r\n        B[n - i - 1] = A[i];\r\n    }\r\n    return B;\r\n}\r\n```","```\r\n@Test\r\npublic void givenArray_whenOutOfPlaceSort_thenReversed() {\r\n    int[] input = {1, 2, 3, 4, 5, 6, 7};\r\n    int[] expected = {7, 6, 5, 4, 3, 2, 1};\r\n    assertArrayEquals(\"the two arrays are not equal\", expected,\r\n      InOutSort.reverseOutOfPlace(input));\r\n}\r\n```"]