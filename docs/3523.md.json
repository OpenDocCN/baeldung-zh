["```\r\npublic class AtomicMarkableReference<V> {\r\n\r\n    private static class Pair<T> {\r\n        final T reference;\r\n        final boolean mark;\r\n        private Pair(T reference, boolean mark) {\r\n            this.reference = reference;\r\n            this.mark = mark;\r\n        }\r\n        static <T> Pair<T> of(T reference, boolean mark) {\r\n            return new Pair<T>(reference, mark);\r\n        }\r\n    }\r\n\r\n    private volatile Pair<V> pair;\r\n\r\n    // ...\r\n}\r\n```","```\r\nclass Employee {\r\n    private int id;\r\n    private String name;\r\n\r\n    // constructor & getters & setters\r\n}\r\n```","```\r\nAtomicMarkableReference<Employee> employeeNode \r\n  = new AtomicMarkableReference<>(new Employee(123, \"Mike\"), true);\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\n\r\nAssertions.assertEquals(employee, employeeNode.getReference());\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\n\r\nAssertions.assertTrue(employeeNode.isMarked());\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\n\r\nboolean[] markHolder = new boolean[1];\r\nEmployee currentEmployee = employeeNode.get(markHolder);\r\n\r\nAssertions.assertEquals(employee, currentEmployee);\r\nAssertions.assertTrue(markHolder[0]);\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\n\r\nEmployee newEmployee = new Employee(124, \"John\");\r\nemployeeNode.set(newEmployee, false);\r\n\r\nAssertions.assertEquals(newEmployee, employeeNode.getReference());\r\nAssertions.assertFalse(employeeNode.isMarked());\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\nEmployee newEmployee = new Employee(124, \"John\");\r\n\r\nAssertions.assertTrue(employeeNode.compareAndSet(employee, newEmployee, true, false));\r\nAssertions.assertEquals(newEmployee, employeeNode.getReference());\r\nAssertions.assertFalse(employeeNode.isMarked());\r\n```","```\r\nEmployee employee = new Employee(123, \"Mike\");\r\nAtomicMarkableReference<Employee> employeeNode = new AtomicMarkableReference<>(employee, true);\r\n\r\nAssertions.assertTrue(employeeNode.attemptMark(employee, false));\r\nAssertions.assertFalse(employeeNode.isMarked());\r\n```"]