["```\r\nCredentialsProvider provider = new BasicCredentialsProvider();\r\nUsernamePasswordCredentials credentials\r\n = new UsernamePasswordCredentials(\"user1\", \"user1Pass\");\r\nprovider.setCredentials(AuthScope.ANY, credentials);\r\n\r\nHttpClient client = HttpClientBuilder.create()\r\n  .setDefaultCredentialsProvider(provider)\r\n  .build();\r\n\r\nHttpResponse response = client.execute(\r\n  new HttpGet(URL_SECURED_BY_BASIC_AUTHENTICATION));\r\nint statusCode = response.getStatusLine()\r\n  .getStatusCode();\r\n\r\nassertThat(statusCode, equalTo(HttpStatus.SC_OK));\r\n```","```\r\n# ... request is sent with no credentials\r\n[main] DEBUG ... - Authentication required\r\n[main] DEBUG ... - localhost:8080 requested authentication\r\n[main] DEBUG ... - Authentication schemes in the order of preference: \r\n  [negotiate, Kerberos, NTLM, Digest, Basic]\r\n[main] DEBUG ... - Challenge for negotiate authentication scheme not available\r\n[main] DEBUG ... - Challenge for Kerberos authentication scheme not available\r\n[main] DEBUG ... - Challenge for NTLM authentication scheme not available\r\n[main] DEBUG ... - Challenge for Digest authentication scheme not available\r\n[main] DEBUG ... - Selected authentication options: [BASIC]\r\n# ... the request is sent again - with credentials\r\n```","```\r\nHttpHost targetHost = new HttpHost(\"localhost\", 8082, \"http\");\r\nCredentialsProvider credsProvider = new BasicCredentialsProvider();\r\ncredsProvider.setCredentials(AuthScope.ANY, \r\n  new UsernamePasswordCredentials(DEFAULT_USER, DEFAULT_PASS));\r\n\r\nAuthCache authCache = new BasicAuthCache();\r\nauthCache.put(targetHost, new BasicScheme());\r\n\r\n// Add AuthCache to the execution context\r\nHttpClientContext context = HttpClientContext.create();\r\ncontext.setCredentialsProvider(credsProvider);\r\ncontext.setAuthCache(authCache);\r\n```","```\r\nHttpClient client = HttpClientBuilder.create().build();\r\nresponse = client.execute(\r\n  new HttpGet(URL_SECURED_BY_BASIC_AUTHENTICATION), context);\r\n\r\nint statusCode = response.getStatusLine().getStatusCode();\r\nassertThat(statusCode, equalTo(HttpStatus.SC_OK));\r\n```","```\r\n[main] DEBUG ... - Re-using cached 'basic' auth scheme for http://localhost:8082\r\n[main] DEBUG ... - Executing request GET /spring-security-rest-basic-auth/api/foos/1 HTTP/1.1\r\n[main] DEBUG ... >> GET /spring-security-rest-basic-auth/api/foos/1 HTTP/1.1\r\n[main] DEBUG ... >> Host: localhost:8082\r\n[main] DEBUG ... >> Authorization: Basic dXNlcjE6dXNlcjFQYXNz\r\n[main] DEBUG ... << HTTP/1.1 200 OK\r\n[main] DEBUG ... - Authentication succeeded\r\n```","```\r\nHttpGet request = new HttpGet(URL_SECURED_BY_BASIC_AUTHENTICATION);\r\nString auth = DEFAULT_USER + \":\" + DEFAULT_PASS;\r\nbyte[] encodedAuth = Base64.encodeBase64(\r\n  auth.getBytes(StandardCharsets.ISO_8859_1));\r\nString authHeader = \"Basic \" + new String(encodedAuth);\r\nrequest.setHeader(HttpHeaders.AUTHORIZATION, authHeader);\r\n\r\nHttpClient client = HttpClientBuilder.create().build();\r\nHttpResponse response = client.execute(request);\r\n\r\nint statusCode = response.getStatusLine().getStatusCode();\r\nassertThat(statusCode, equalTo(HttpStatus.SC_OK));\r\n```","```\r\n[main] DEBUG ... - Auth cache not set in the context\r\n[main] DEBUG ... - Opening connection {}->http://localhost:8080\r\n[main] DEBUG ... - Connecting to localhost/127.0.0.1:8080\r\n[main] DEBUG ... - Executing request GET /spring-security-rest-basic-auth/api/foos/1 HTTP/1.1\r\n[main] DEBUG ... - Proxy auth state: UNCHALLENGED\r\n[main] DEBUG ... - http-outgoing-0 >> GET /spring-security-rest-basic-auth/api/foos/1 HTTP/1.1\r\n[main] DEBUG ... - http-outgoing-0 >> Authorization: Basic dXNlcjE6dXNlcjFQYXNz\r\n[main] DEBUG ... - http-outgoing-0 << HTTP/1.1 200 OK\r\n```"]