["```\r\n@Entity\r\npublic class Car {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private int id;\r\n\r\n    private Integer power;\r\n    private String model;\r\n\r\n    // getters, setters, ...\r\n}\r\n```","```\r\nint searchId = 2; // ID of the Car\r\nboolean exists = repository.existsById(searchId)\r\n```","```\r\nboolean existsCarByModel(String model);\r\n```","```\r\nExampleMatcher modelMatcher = ExampleMatcher.matching()\r\n  .withIgnorePaths(\"id\") \r\n  .withMatcher(\"model\", ignoreCase());\r\n```","```\r\nCar probe = new Car();\r\nprobe.setModel(\"bmw\");\r\nExample<Car> example = Example.of(probe, modelMatcher);\r\nboolean exists = repository.exists(example);\r\n```","```\r\n@Query(\"select case when count(c)> 0 then true else false end from Car c where lower(c.model) like lower(:model)\")\r\nboolean existsCarLikeCustomQuery(@Param(\"model\") String model);\r\n```"]