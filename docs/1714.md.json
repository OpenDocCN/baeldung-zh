["```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>okhttp</artifactId>\r\n    <version>4.9.1</version>\r\n</dependency>\r\n```","```\r\n@Test\r\npublic void whenGetRequest_thenCorrect() throws IOException {\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/date\")\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenAsynchronousGetRequest_thenCorrect() {\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/date\")\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    call.enqueue(new Callback() {\r\n        public void onResponse(Call call, Response response) \r\n          throws IOException {\r\n            // ...\r\n        }\r\n\r\n        public void onFailure(Call call, IOException e) {\r\n            fail();\r\n        }\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetRequestWithQueryParameter_thenCorrect() \r\n  throws IOException {\r\n\r\n    HttpUrl.Builder urlBuilder \r\n      = HttpUrl.parse(BASE_URL + \"/ex/bars\").newBuilder();\r\n    urlBuilder.addQueryParameter(\"id\", \"1\");\r\n\r\n    String url = urlBuilder.build().toString();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(url)\r\n      .build();\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenSendPostRequest_thenCorrect() \r\n  throws IOException {\r\n    RequestBody formBody = new FormBody.Builder()\r\n      .add(\"username\", \"test\")\r\n      .add(\"password\", \"test\")\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/users\")\r\n      .post(formBody)\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenUploadFile_thenCorrect() throws IOException {\r\n    RequestBody requestBody = new MultipartBody.Builder()\r\n      .setType(MultipartBody.FORM)\r\n      .addFormDataPart(\"file\", \"file.txt\",\r\n        RequestBody.create(MediaType.parse(\"application/octet-stream\"), \r\n          new File(\"src/test/resources/test.txt\")))\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/users/upload\")\r\n      .post(requestBody)\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetUploadFileProgress_thenCorrect() \r\n  throws IOException {\r\n    RequestBody requestBody = new MultipartBody.Builder()\r\n      .setType(MultipartBody.FORM)\r\n      .addFormDataPart(\"file\", \"file.txt\",\r\n        RequestBody.create(MediaType.parse(\"application/octet-stream\"), \r\n          new File(\"src/test/resources/test.txt\")))\r\n      .build();\r\n\r\n    ProgressRequestWrapper.ProgressListener listener \r\n      = (bytesWritten, contentLength) -> {\r\n        float percentage = 100f * bytesWritten / contentLength;\r\n        assertFalse(Float.compare(percentage, 100) > 0);\r\n    };\r\n\r\n    ProgressRequestWrapper countingBody\r\n      = new ProgressRequestWrapper(requestBody, listener);\r\n\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/users/upload\")\r\n      .post(countingBody)\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n} \r\n```","```\r\npublic interface ProgressListener {\r\n    void onRequestProgress(long bytesWritten, long contentLength);\r\n}\r\n```","```\r\npublic class ProgressRequestWrapper extends RequestBody {\r\n\r\n    @Override\r\n    public void writeTo(BufferedSink sink) throws IOException {\r\n        BufferedSink bufferedSink;\r\n\r\n        countingSink = new CountingSink(sink);\r\n        bufferedSink = Okio.buffer(countingSink);\r\n\r\n        delegate.writeTo(bufferedSink);\r\n\r\n        bufferedSink.flush();\r\n    }\r\n}\r\n```","```\r\nprotected class CountingSink extends ForwardingSink {\r\n\r\n    private long bytesWritten = 0;\r\n\r\n    public CountingSink(Sink delegate) {\r\n        super(delegate);\r\n    }\r\n\r\n    @Override\r\n    public void write(Buffer source, long byteCount)\r\n      throws IOException {\r\n        super.write(source, byteCount);\r\n\r\n        bytesWritten += byteCount;\r\n        listener.onRequestProgress(bytesWritten, contentLength());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetHeader_thenCorrect() throws IOException {\r\n    Request request = new Request.Builder()\r\n      .url(SAMPLE_URL)\r\n      .addHeader(\"Content-Type\", \"application/json\")\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n    response.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetDefaultHeader_thenCorrect() \r\n  throws IOException {\r\n\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .addInterceptor(\r\n        new DefaultContentTypeInterceptor(\"application/json\"))\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(SAMPLE_URL)\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n    response.close();\r\n}\r\n```","```\r\npublic class DefaultContentTypeInterceptor implements Interceptor {\r\n\r\n    public Response intercept(Interceptor.Chain chain) \r\n      throws IOException {\r\n\r\n        Request originalRequest = chain.request();\r\n        Request requestWithUserAgent = originalRequest\r\n          .newBuilder()\r\n          .header(\"Content-Type\", contentType)\r\n          .build();\r\n\r\n        return chain.proceed(requestWithUserAgent);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenSetFollowRedirects_thenNotRedirected() \r\n  throws IOException {\r\n\r\n    OkHttpClient client = new OkHttpClient().newBuilder()\r\n      .followRedirects(false)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"http://t.co/I5YYd9tddw\")\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(301));\r\n} \r\n```","```\r\n@Test\r\npublic void whenSetRequestTimeout_thenFail() \r\n  throws IOException {\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .readTimeout(1, TimeUnit.SECONDS)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/delay/2\")\r\n      .build();\r\n\r\n    Call call = client.newCall(request);\r\n    Response response = call.execute();\r\n\r\n    assertThat(response.code(), equalTo(200));\r\n}\r\n```","```\r\n@Test(expected = IOException.class)\r\npublic void whenCancelRequest_thenCorrect() \r\n  throws IOException {\r\n    ScheduledExecutorService executor\r\n      = Executors.newScheduledThreadPool(1);\r\n\r\n    Request request = new Request.Builder()\r\n      .url(BASE_URL + \"/delay/2\")  \r\n      .build();\r\n\r\n    int seconds = 1;\r\n    long startNanos = System.nanoTime();\r\n\r\n    Call call = client.newCall(request);\r\n\r\n    executor.schedule(() -> {\r\n        logger.debug(\"Canceling call: \"  \r\n            + (System.nanoTime() - startNanos) / 1e9f);\r\n\r\n        call.cancel();\r\n\r\n        logger.debug(\"Canceled call: \" \r\n            + (System.nanoTime() - startNanos) / 1e9f);\r\n\r\n    }, seconds, TimeUnit.SECONDS);\r\n\r\n    logger.debug(\"Executing call: \" \r\n      + (System.nanoTime() - startNanos) / 1e9f);\r\n\r\n    Response response = call.execute();\r\n\r\n    logger.debug(Call was expected to fail, but completed: \" \r\n      + (System.nanoTime() - startNanos) / 1e9f, response);\r\n}\r\n```","```\r\n@Test\r\npublic void  whenSetResponseCache_thenCorrect() \r\n  throws IOException {\r\n    int cacheSize = 10 * 1024 * 1024;\r\n\r\n    File cacheDirectory = new File(\"src/test/resources/cache\");\r\n    Cache cache = new Cache(cacheDirectory, cacheSize);\r\n\r\n    OkHttpClient client = new OkHttpClient.Builder()\r\n      .cache(cache)\r\n      .build();\r\n\r\n    Request request = new Request.Builder()\r\n      .url(\"http://publicobject.com/helloworld.txt\")\r\n      .build();\r\n\r\n    Response response1 = client.newCall(request).execute();\r\n    logResponse(response1);\r\n\r\n    Response response2 = client.newCall(request).execute();\r\n    logResponse(response2);\r\n}\r\n```"]