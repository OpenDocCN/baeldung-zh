["```\r\nclass Node {\r\n\r\n    int value;\r\n    Node nextNode;\r\n\r\n    public Node(int value) {\r\n        this.value = value;\r\n    }\r\n}\r\n```","```\r\npublic class CircularLinkedList {\r\n    private Node head = null;\r\n    private Node tail = null;\r\n\r\n    // ....\r\n}\r\n```","```\r\npublic void addNode(int value) {\r\n    Node newNode = new Node(value);\r\n\r\n    if (head == null) {\r\n        head = newNode;\r\n    } else {\r\n        tail.nextNode = newNode;\r\n    }\r\n\r\n    tail = newNode;\r\n    tail.nextNode = head;\r\n}\r\n```","```\r\nprivate CircularLinkedList createCircularLinkedList() {\r\n    CircularLinkedList cll = new CircularLinkedList();\r\n\r\n    cll.addNode(13);\r\n    cll.addNode(7);\r\n    cll.addNode(24);\r\n    cll.addNode(1);\r\n    cll.addNode(8);\r\n    cll.addNode(37);\r\n    cll.addNode(46);\r\n\r\n    return cll;\r\n}\r\n```","```\r\npublic boolean containsNode(int searchValue) {\r\n    Node currentNode = head;\r\n\r\n    if (head == null) {\r\n        return false;\r\n    } else {\r\n        do {\r\n            if (currentNode.value == searchValue) {\r\n                return true;\r\n            }\r\n            currentNode = currentNode.nextNode;\r\n        } while (currentNode != head);\r\n        return false;\r\n    }\r\n}\r\n```","```\r\n@Test\r\n public void givenACircularLinkedList_WhenAddingElements_ThenListContainsThoseElements() {\r\n    CircularLinkedList cll = createCircularLinkedList();\r\n\r\n    assertTrue(cll.containsNode(8));\r\n    assertTrue(cll.containsNode(37));\r\n}\r\n\r\n@Test\r\npublic void givenACircularLinkedList_WhenLookingForNonExistingElement_ThenReturnsFalse() {\r\n    CircularLinkedList cll = createCircularLinkedList();\r\n\r\n    assertFalse(cll.containsNode(11));\r\n}\r\n```","```\r\npublic void deleteNode(int valueToDelete) {\r\n    Node currentNode = head;\r\n    if (head == null) { // the list is empty\r\n        return;\r\n    }\r\n    do {\r\n        Node nextNode = currentNode.nextNode;\r\n        if (nextNode.value == valueToDelete) {\r\n            if (tail == head) { // the list has only one single element\r\n                head = null;\r\n                tail = null;\r\n            } else {\r\n                currentNode.nextNode = nextNode.nextNode;\r\n                if (head == nextNode) { //we're deleting the head\r\n                    head = head.nextNode;\r\n                }\r\n                if (tail == nextNode) { //we're deleting the tail\r\n                    tail = currentNode;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n        currentNode = nextNode;\r\n    } while (currentNode != head);\r\n}\r\n```","```\r\n@Test\r\npublic void givenACircularLinkedList_WhenDeletingInOrderHeadMiddleTail_ThenListDoesNotContainThoseElements() {\r\n    CircularLinkedList cll = createCircularLinkedList();\r\n\r\n    assertTrue(cll.containsNode(13));\r\n    cll.deleteNode(13);\r\n    assertFalse(cll.containsNode(13));\r\n\r\n    assertTrue(cll.containsNode(1));\r\n    cll.deleteNode(1);\r\n    assertFalse(cll.containsNode(1));\r\n\r\n    assertTrue(cll.containsNode(46));\r\n    cll.deleteNode(46);\r\n    assertFalse(cll.containsNode(46));\r\n}\r\n\r\n@Test\r\npublic void givenACircularLinkedList_WhenDeletingInOrderTailMiddleHead_ThenListDoesNotContainThoseElements() {\r\n    CircularLinkedList cll = createCircularLinkedList();\r\n\r\n    assertTrue(cll.containsNode(46));\r\n    cll.deleteNode(46);\r\n    assertFalse(cll.containsNode(46));\r\n\r\n    assertTrue(cll.containsNode(1));\r\n    cll.deleteNode(1);\r\n    assertFalse(cll.containsNode(1));\r\n\r\n    assertTrue(cll.containsNode(13));\r\n    cll.deleteNode(13);\r\n    assertFalse(cll.containsNode(13));\r\n}\r\n\r\n@Test\r\npublic void givenACircularLinkedListWithOneNode_WhenDeletingElement_ThenListDoesNotContainTheElement() {\r\n    CircularLinkedList cll = new CircularLinkedList();\r\n    cll.addNode(1);\r\n    cll.deleteNode(1);\r\n    assertFalse(cll.containsNode(1));\r\n}\r\n```","```\r\npublic void traverseList() {\r\n    Node currentNode = head;\r\n\r\n    if (head != null) {\r\n        do {\r\n            logger.info(currentNode.value + \" \");\r\n            currentNode = currentNode.nextNode;\r\n        } while (currentNode != head);\r\n    }\r\n} \r\n```"]