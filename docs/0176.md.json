["```\r\n<dependency>\r\n   <groupId>org.springframework.social</groupId>\r\n   <artifactId>spring-social-twitter</artifactId>\r\n   <version>1.1.0.RELEASE</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n   <groupId>org.springframework</groupId>\r\n   <artifactId>spring-core</artifactId>\r\n   <version>4.1.0.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.springframework</groupId>\r\n   <artifactId>spring-web</artifactId>\r\n   <version>4.1.0.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n   <groupId>org.codehaus.jackson</groupId>\r\n   <artifactId>jackson-mapper-asl</artifactId>\r\n   <version>1.9.13</version>\r\n</dependency>\r\n```","```\r\nnew TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);\r\n```","```\r\n@Component\r\npublic class TwitterTemplateCreator {\r\n   @Autowired\r\n   private Environment env;\r\n\r\n   public Twitter getTwitterTemplate(String accountName) {\r\n      String consumerKey = env.getProperty(accountName + \".consumerKey\");\r\n      String consumerSecret = env.getProperty(accountName + \".consumerSecret\");\r\n      String accessToken = env.getProperty(accountName + \".accessToken\");\r\n      String accessTokenSecret = env.getProperty(accountName + \".accessTokenSecret\");\r\n      Preconditions.checkNotNull(consumerKey);\r\n      Preconditions.checkNotNull(consumerSecret);\r\n      Preconditions.checkNotNull(accessToken);\r\n      Preconditions.checkNotNull(accessTokenSecret);\r\n\r\n      TwitterTemplate twitterTemplate = \r\n         new TwitterTemplate(consumerKey, consumerSecret, accessToken, accessTokenSecret);\r\n      return twitterTemplate;\r\n   }\r\n}\r\n```","```\r\nSpringAtSO.consumerKey=nqYezCjxkHabaX6cdte12g\r\nSpringAtSO.consumerSecret=7REmgFW4SnVWpD4EV5Zy9wB2ZEMM9WKxTaZwrgX3i4A\r\nSpringAtSO.accessToken=1197830142-t44T7vwgmOnue8EoAxI1cDyDAEBAvple80s1SQ3\r\nSpringAtSO.accessTokenSecret=ZIpghEJgFGNGQZzDFBT5TgsyeqDKY2zQmYsounPafE\r\n```","```\r\n@Configuration\r\n@PropertySource({ \"file:///opt/stack/twitter.properties\" })\r\npublic class TwitterConfig {\r\n    // \r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { TwitterConfig.class })\r\npublic class TwitterTemplateCreatorIntegrationTest {\r\n   @Autowired\r\n   private TwitterTemplateCreator twitterTemplateCreator;\r\n   //\r\n   @Test\r\n   public void givenValidAccountSpringAtSO_whenRetrievingTwitterClient_thenNoException() {\r\n      twitterTemplateCreator.getTwitterTemplate(SimpleTwitterAccount.SpringAtSO.name());\r\n   }\r\n}\r\n```","```\r\n@Service\r\npublic class TwitterService {\r\n   private Logger logger = LoggerFactory.getLogger(getClass());\r\n\r\n   public void tweet(Twitter twitter, String tweetText) {\r\n      try {\r\n         twitter.timelineOperations().updateStatus(tweetText);\r\n      } catch (RuntimeException ex) {\r\n         logger.error(\"Unable to tweet\" + tweetText, ex);\r\n      }\r\n   }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@ContextConfiguration(classes = { TwitterConfig.class })\r\npublic class TweetServiceLiveTest {\r\n   @Autowired\r\n   private TwitterService twitterService;\r\n   @Autowired\r\n   private TwitterTemplateCreator twitterCreator;\r\n\r\n   @Test\r\n   public void whenTweeting_thenNoExceptions() {\r\n      Twitter twitterTemplate = twitterCreator.getTwitterTemplate(\"SpringAtSO\");\r\n      twitterService.tweet(twitterTemplate, \"First Tweet\");\r\n   }\r\n}\r\n```"]