["```\r\npublic interface CrudService<T> {\r\n    ...\r\n\r\n    List<T> readBulk(Iterable<String> ids);\r\n\r\n    void createBulk(Iterable<T> items);\r\n\r\n    void updateBulk(Iterable<T> items);\r\n\r\n    void deleteBulk(Iterable<String> ids);\r\n\r\n    boolean exists(String id);\r\n}\r\n```","```\r\npublic interface CouchbaseEntity {\r\n\r\n    String getId();\r\n\r\n    void setId(String id);\r\n\r\n}\r\n```","```\r\npublic abstract class AbstractCrudService<T extends CouchbaseEntity> implements CrudService<T> {\r\n    private BucketService bucketService;\r\n    private Bucket bucket;\r\n    private JsonDocumentConverter<T> converter;\r\n\r\n    public AbstractCrudService(BucketService bucketService, JsonDocumentConverter<T> converter) {\r\n        this.bucketService = bucketService;\r\n        this.converter = converter;\r\n    }\r\n\r\n    protected void loadBucket() {\r\n        bucket = bucketService.getBucket();\r\n    }\r\n\r\n    ...\r\n}\r\n```","```\r\nAsyncBucket asyncBucket = bucket.async();\r\n```","```\r\n@Override\r\npublic List<T> readBulk(Iterable<String> ids) {\r\n    AsyncBucket asyncBucket = bucket.async();\r\n    Observable<JsonDocument> asyncOperation = Observable\r\n      .from(ids)\r\n      .flatMap(new Func1<String, Observable<JsonDocument>>() {\r\n          public Observable<JsonDocument> call(String key) {\r\n              return asyncBucket.get(key);\r\n          }\r\n    });\r\n\r\n    List<T> items = new ArrayList<T>();\r\n    try {\r\n        asyncOperation.toBlocking()\r\n          .forEach(new Action1<JsonDocument>() {\r\n              public void call(JsonDocument doc) {\r\n                  T item = converter.fromDocument(doc);\r\n                  items.add(item);\r\n              }\r\n        });\r\n    } catch (Exception e) {\r\n        logger.error(\"Error during bulk get\", e);\r\n    }\r\n\r\n    return items;\r\n}\r\n```","```\r\n@Override\r\npublic void createBulk(Iterable<T> items) {\r\n    AsyncBucket asyncBucket = bucket.async();\r\n    Observable\r\n      .from(items)\r\n      .flatMap(new Func1<T, Observable<JsonDocument>>() {\r\n          @SuppressWarnings(\"unchecked\")\r\n          @Override\r\n          public Observable<JsonDocument> call(final T t) {\r\n              if(t.getId() == null) {\r\n                  t.setId(UUID.randomUUID().toString());\r\n              }\r\n              JsonDocument doc = converter.toDocument(t);\r\n              return asyncBucket.insert(doc)\r\n                .retryWhen(RetryBuilder\r\n                  .anyOf(BackpressureException.class)\r\n                  .delay(Delay.exponential(TimeUnit.MILLISECONDS, 100))\r\n                  .max(10)\r\n                  .build());\r\n          }\r\n      })\r\n      .last()\r\n      .toBlocking()\r\n      .single();\r\n}\r\n```","```\r\n@Override\r\npublic void updateBulk(Iterable<T> items) {\r\n    AsyncBucket asyncBucket = bucket.async();\r\n    Observable\r\n      .from(items)\r\n      .flatMap(new Func1<T, Observable<JsonDocument>>() {\r\n          @SuppressWarnings(\"unchecked\")\r\n          @Override\r\n          public Observable<JsonDocument> call(final T t) {\r\n              JsonDocument doc = converter.toDocument(t);\r\n              return asyncBucket.upsert(doc)\r\n                .retryWhen(RetryBuilder\r\n                  .anyOf(BackpressureException.class)\r\n                  .delay(Delay.exponential(TimeUnit.MILLISECONDS, 100))\r\n                  .max(10)\r\n                  .build());\r\n          }\r\n      })\r\n      .last()\r\n      .toBlocking()\r\n      .single();\r\n}\r\n```","```\r\n@Override\r\npublic void deleteBulk(Iterable<String> ids) {\r\n    AsyncBucket asyncBucket = bucket.async();\r\n    Observable\r\n      .from(ids)\r\n      .flatMap(new Func1<String, Observable<JsonDocument>>() {\r\n          @SuppressWarnings(\"unchecked\")\r\n          @Override\r\n          public Observable<JsonDocument> call(String key) {\r\n              return asyncBucket.remove(key)\r\n                .retryWhen(RetryBuilder\r\n                  .anyOf(BackpressureException.class)\r\n                  .delay(Delay.exponential(TimeUnit.MILLISECONDS, 100))\r\n                  .max(10)\r\n                  .build());\r\n          }\r\n      })\r\n      .last()\r\n      .toBlocking()\r\n      .single();\r\n}\r\n```","```\r\n@Service\r\npublic class PersonCrudService extends AbstractCrudService<Person> {\r\n\r\n    @Autowired\r\n    public PersonCrudService(\r\n      @Qualifier(\"TutorialBucketService\") BucketService bucketService,\r\n      PersonDocumentConverter converter) {\r\n        super(bucketService, converter);\r\n    }\r\n\r\n    @PostConstruct\r\n    private void init() {\r\n        loadBucket();\r\n    }\r\n}\r\n```"]