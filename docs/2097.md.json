["```\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-frontend-jaxrs</artifactId>\r\n    <version>3.1.7</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.cxf</groupId>\r\n    <artifactId>cxf-rt-transports-http-jetty</artifactId>\r\n    <version>3.1.7</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.httpcomponents</groupId>\r\n    <artifactId>httpclient</artifactId>\r\n    <version>4.5.2</version>\r\n</dependency>\r\n```","```\r\n@XmlRootElement(name = \"Student\")\r\npublic class Student {\r\n    private int id;\r\n    private String name;\r\n\r\n    // standard getters and setters\r\n    // standard equals and hashCode implementations\r\n\r\n}\r\n```","```\r\n@XmlRootElement(name = \"Course\")\r\npublic class Course {\r\n    private int id;\r\n    private String name;\r\n    private List<Student> students = new ArrayList<>();\r\n\r\n    private Student findById(int id) {\r\n        for (Student student : students) {\r\n            if (student.getId() == id) {\r\n                return student;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n```","```\r\n // standard getters and setters\r\n    // standard equals and hasCode implementations\r\n\r\n}\r\n```","```\r\n@Path(\"course\")\r\n@Produces(\"text/xml\")\r\npublic class CourseRepository {\r\n    private Map<Integer, Course> courses = new HashMap<>();\r\n\r\n    // request handling methods\r\n\r\n    private Course findById(int id) {\r\n        for (Map.Entry<Integer, Course> course : courses.entrySet()) {\r\n            if (course.getKey() == id) {\r\n                return course.getValue();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```","```\r\n{\r\n    Student student1 = new Student();\r\n    Student student2 = new Student();\r\n    student1.setId(1);\r\n    student1.setName(\"Student A\");\r\n    student2.setId(2);\r\n    student2.setName(\"Student B\");\r\n\r\n    List<Student> course1Students = new ArrayList<>();\r\n    course1Students.add(student1);\r\n    course1Students.add(student2);\r\n\r\n    Course course1 = new Course();\r\n    Course course2 = new Course();\r\n    course1.setId(1);\r\n    course1.setName(\"REST with Spring\");\r\n    course1.setStudents(course1Students);\r\n    course2.setId(2);\r\n    course2.setName(\"Learn Spring Security\");\r\n\r\n    courses.put(1, course1);\r\n    courses.put(2, course2);\r\n}\r\n```","```\r\n@GET\r\n@Path(\"{studentId}\")\r\npublic Student getStudent(@PathParam(\"studentId\")int studentId) {\r\n    return findById(studentId);\r\n}\r\n```","```\r\n@POST\r\n@Path(\"\")\r\npublic Response createStudent(Student student) {\r\n    for (Student element : students) {\r\n        if (element.getId() == student.getId() {\r\n            return Response.status(Response.Status.CONFLICT).build();\r\n        }\r\n    }\r\n    students.add(student);\r\n    return Response.ok(student).build();\r\n}\r\n```","```\r\n@DELETE\r\n@Path(\"{studentId}\")\r\npublic Response deleteStudent(@PathParam(\"studentId\") int studentId) {\r\n    Student student = findById(studentId);\r\n    if (student == null) {\r\n        return Response.status(Response.Status.NOT_FOUND).build();\r\n    }\r\n    students.remove(student);\r\n    return Response.ok().build();\r\n}\r\n```","```\r\n@GET\r\n@Path(\"courses/{courseId}\")\r\npublic Course getCourse(@PathParam(\"courseId\") int courseId) {\r\n    return findById(courseId);\r\n}\r\n```","```\r\n@PUT\r\n@Path(\"courses/{courseId}\")\r\npublic Response updateCourse(@PathParam(\"courseId\") int courseId, Course course) {\r\n    Course existingCourse = findById(courseId);        \r\n    if (existingCourse == null) {\r\n        return Response.status(Response.Status.NOT_FOUND).build();\r\n    }\r\n    if (existingCourse.equals(course)) {\r\n        return Response.notModified().build();    \r\n    }\r\n    courses.put(courseId, course);\r\n    return Response.ok().build();\r\n}\r\n```","```\r\n@Path(\"courses/{courseId}/students\")\r\npublic Course pathToStudent(@PathParam(\"courseId\") int courseId) {\r\n    return findById(courseId);\r\n}\r\n```","```\r\nJAXRSServerFactoryBean factoryBean = new JAXRSServerFactoryBean();\r\nfactoryBean.setResourceClasses(CourseRepository.class);\r\n```","```\r\nfactoryBean.setResourceProvider(\r\n  new SingletonResourceProvider(new CourseRepository()));\r\n```","```\r\nfactoryBean.setAddress(\"http://localhost:8080/\");\r\n```","```\r\nServer server = factoryBean.create();\r\n```","```\r\npublic class RestfulServer {\r\n    public static void main(String args[]) throws Exception {\r\n        // code snippets shown above\r\n    }\r\n}\r\n```","```\r\nprivate static String BASE_URL = \"http://localhost:8080/baeldung/courses/\";\r\nprivate static CloseableHttpClient client;\r\n```","```\r\n@BeforeClass\r\npublic static void createClient() {\r\n    client = HttpClients.createDefault();\r\n}\r\n\r\n@AfterClass\r\npublic static void closeClient() throws IOException {\r\n    client.close();\r\n}\r\n```","```\r\nprivate Course getCourse(int courseOrder) throws IOException {\r\n    URL url = new URL(BASE_URL + courseOrder);\r\n    InputStream input = url.openStream();\r\n    Course course\r\n      = JAXB.unmarshal(new InputStreamReader(input), Course.class);\r\n    return course;\r\n}\r\n```","```\r\nprivate Student getStudent(int courseOrder, int studentOrder)\r\n  throws IOException {\r\n    URL url = new URL(BASE_URL + courseOrder + \"/students/\" + studentOrder);\r\n    InputStream input = url.openStream();\r\n    Student student\r\n      = JAXB.unmarshal(new InputStreamReader(input), Student.class);\r\n    return student;\r\n}\r\n```","```\r\n<Student>\r\n    <id>2</id>\r\n    <name>Student B</name>\r\n</Student>\r\n```","```\r\nHttpPost httpPost = new HttpPost(BASE_URL + \"1/students\");\r\nInputStream resourceStream = this.getClass().getClassLoader()\r\n  .getResourceAsStream(\"conflict_student.xml\");\r\nhttpPost.setEntity(new InputStreamEntity(resourceStream));\r\n```","```\r\nhttpPost.setHeader(\"Content-Type\", \"text/xml\");\r\n```","```\r\nHttpResponse response = client.execute(httpPost);\r\nassertEquals(409, response.getStatusLine().getStatusCode());\r\n```","```\r\n<Student>\r\n    <id>3</id>\r\n    <name>Student C</name>\r\n</Student>\r\n```","```\r\nHttpPost httpPost = new HttpPost(BASE_URL + \"2/students\");\r\nInputStream resourceStream = this.getClass().getClassLoader()\r\n  .getResourceAsStream(\"created_student.xml\");\r\nhttpPost.setEntity(new InputStreamEntity(resourceStream));\r\nhttpPost.setHeader(\"Content-Type\", \"text/xml\");\r\n\r\nHttpResponse response = client.execute(httpPost);\r\nassertEquals(200, response.getStatusLine().getStatusCode());\r\n```","```\r\nStudent student = getStudent(2, 3);\r\nassertEquals(3, student.getId());\r\nassertEquals(\"Student C\", student.getName());\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Student>\r\n    <id>3</id>\r\n    <name>Student C</name>\r\n</Student>\r\n```","```\r\n<Course>\r\n    <id>3</id>\r\n    <name>Apache CXF Support for RESTful</name>\r\n</Course>\r\n```","```\r\nHttpPut httpPut = new HttpPut(BASE_URL + \"3\");\r\nInputStream resourceStream = this.getClass().getClassLoader()\r\n  .getResourceAsStream(\"non_existent_course.xml\");\r\nhttpPut.setEntity(new InputStreamEntity(resourceStream));\r\n```","```\r\nhttpPut.setHeader(\"Content-Type\", \"text/xml\");\r\n```","```\r\nHttpResponse response = client.execute(httpPut);\r\nassertEquals(404, response.getStatusLine().getStatusCode());\r\n```","```\r\nHttpPut httpPut = new HttpPut(BASE_URL + \"1\");\r\nInputStream resourceStream = this.getClass().getClassLoader()\r\n  .getResourceAsStream(\"unchanged_course.xml\");\r\nhttpPut.setEntity(new InputStreamEntity(resourceStream));\r\nhttpPut.setHeader(\"Content-Type\", \"text/xml\");\r\n\r\nHttpResponse response = client.execute(httpPut);\r\nassertEquals(304, response.getStatusLine().getStatusCode());\r\n```","```\r\n<Course>\r\n    <id>1</id>\r\n    <name>REST with Spring</name>\r\n</Course>\r\n```","```\r\n<Course>\r\n    <id>2</id>\r\n    <name>Apache CXF Support for RESTful</name>\r\n</Course>\r\n```","```\r\nHttpPut httpPut = new HttpPut(BASE_URL + \"2\");\r\nInputStream resourceStream = this.getClass().getClassLoader()\r\n  .getResourceAsStream(\"changed_course.xml\");\r\nhttpPut.setEntity(new InputStreamEntity(resourceStream));\r\nhttpPut.setHeader(\"Content-Type\", \"text/xml\");\r\n```","```\r\nHttpResponse response = client.execute(httpPut);\r\nassertEquals(200, response.getStatusLine().getStatusCode());\r\n```","```\r\nCourse course = getCourse(2);\r\nassertEquals(2, course.getId());\r\nassertEquals(\"Apache CXF Support for RESTful\", course.getName());\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Course>\r\n    <id>2</id>\r\n    <name>Apache CXF Support for RESTful</name>\r\n</Course>\r\n```","```\r\nHttpDelete httpDelete = new HttpDelete(BASE_URL + \"1/students/3\");\r\nHttpResponse response = client.execute(httpDelete);\r\nassertEquals(404, response.getStatusLine().getStatusCode());\r\n```","```\r\nHttpDelete httpDelete = new HttpDelete(BASE_URL + \"1/students/1\");\r\nHttpResponse response = client.execute(httpDelete);\r\nassertEquals(200, response.getStatusLine().getStatusCode());\r\n```","```\r\nCourse course = getCourse(1);\r\nassertEquals(1, course.getStudents().size());\r\nassertEquals(2, course.getStudents().get(0).getId());\r\nassertEquals(\"Student B\", course.getStudents().get(0).getName());\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<Course>\r\n    <id>1</id>\r\n    <name>REST with Spring</name>\r\n    <students>\r\n        <id>2</id>\r\n        <name>Student B</name>\r\n    </students>\r\n</Course>\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>exec-maven-plugin</artifactId>\r\n    <version>3.0.0<version>\r\n    <configuration>\r\n        <mainClass>\r\n          com.baeldung.cxf.jaxrs.implementation.RestfulServer\r\n        </mainClass>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n<plugin>\r\n    <artifactId>maven-surefire-plugin</artifactId>\r\n    <version>2.22.2</version>\r\n    <configuration>\r\n    <excludes>\r\n        <exclude>**/ServiceTest</exclude>\r\n    </excludes>\r\n    </configuration>\r\n</plugin>\r\n```"]