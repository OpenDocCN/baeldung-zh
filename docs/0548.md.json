["```\r\npublic class HttpServer {\r\n\r\n    private int port;\r\n    private static Logger logger = LoggerFactory.getLogger(HttpServer.class);\r\n\r\n    // constructor\r\n\r\n    // main method, same as simple protocol server\r\n\r\n    public void run() throws Exception {\r\n        ...\r\n        ServerBootstrap b = new ServerBootstrap();\r\n        b.group(bossGroup, workerGroup)\r\n          .channel(NioServerSocketChannel.class)\r\n          .handler(new LoggingHandler(LogLevel.INFO))\r\n          .childHandler(new ChannelInitializer() {\r\n            @Override\r\n            protected void initChannel(SocketChannel ch) throws Exception {\r\n                ChannelPipeline p = ch.pipeline();\r\n                p.addLast(new HttpRequestDecoder());\r\n                p.addLast(new HttpResponseEncoder());\r\n                p.addLast(new CustomHttpServerHandler());\r\n            }\r\n          });\r\n        ...\r\n    }\r\n} \r\n```","```\r\npublic class CustomHttpServerHandler extends SimpleChannelInboundHandler {\r\n    private HttpRequest request;\r\n    StringBuilder responseData = new StringBuilder();\r\n\r\n    @Override\r\n    public void channelReadComplete(ChannelHandlerContext ctx) {\r\n        ctx.flush();\r\n    }\r\n\r\n    @Override\r\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) {\r\n       // implementation to follow\r\n    }\r\n\r\n    @Override\r\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\r\n        cause.printStackTrace();\r\n        ctx.close();\r\n    }\r\n}\r\n```","```\r\nif (msg instanceof HttpRequest) {\r\n    HttpRequest request = this.request = (HttpRequest) msg;\r\n\r\n    if (HttpUtil.is100ContinueExpected(request)) {\r\n        writeResponse(ctx);\r\n    }\r\n    responseData.setLength(0);            \r\n    responseData.append(RequestUtils.formatParams(request));\r\n}\r\nresponseData.append(RequestUtils.evaluateDecoderResult(request));\r\n\r\nif (msg instanceof HttpContent) {\r\n    HttpContent httpContent = (HttpContent) msg;\r\n    responseData.append(RequestUtils.formatBody(httpContent));\r\n    responseData.append(RequestUtils.evaluateDecoderResult(request));\r\n\r\n    if (msg instanceof LastHttpContent) {\r\n        LastHttpContent trailer = (LastHttpContent) msg;\r\n        responseData.append(RequestUtils.prepareLastResponse(request, trailer));\r\n        writeResponse(ctx, trailer, responseData);\r\n    }\r\n} \r\n```","```\r\nprivate void writeResponse(ChannelHandlerContext ctx) {\r\n    FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, CONTINUE, \r\n      Unpooled.EMPTY_BUFFER);\r\n    ctx.write(response);\r\n}\r\n```","```\r\nStringBuilder formatParams(HttpRequest request) {\r\n    StringBuilder responseData = new StringBuilder();\r\n    QueryStringDecoder queryStringDecoder = new QueryStringDecoder(request.uri());\r\n    Map<String, List<String>> params = queryStringDecoder.parameters();\r\n    if (!params.isEmpty()) {\r\n        for (Entry<String, List<String>> p : params.entrySet()) {\r\n            String key = p.getKey();\r\n            List<String> vals = p.getValue();\r\n            for (String val : vals) {\r\n                responseData.append(\"Parameter: \").append(key.toUpperCase()).append(\" = \")\r\n                  .append(val.toUpperCase()).append(\"\\r\\n\");\r\n            }\r\n        }\r\n        responseData.append(\"\\r\\n\");\r\n    }\r\n    return responseData;\r\n}\r\n```","```\r\nStringBuilder formatBody(HttpContent httpContent) {\r\n    StringBuilder responseData = new StringBuilder();\r\n    ByteBuf content = httpContent.content();\r\n    if (content.isReadable()) {\r\n        responseData.append(content.toString(CharsetUtil.UTF_8).toUpperCase())\r\n          .append(\"\\r\\n\");\r\n    }\r\n    return responseData;\r\n}\r\n```","```\r\nStringBuilder prepareLastResponse(HttpRequest request, LastHttpContent trailer) {\r\n    StringBuilder responseData = new StringBuilder();\r\n    responseData.append(\"Good Bye!\\r\\n\");\r\n\r\n    if (!trailer.trailingHeaders().isEmpty()) {\r\n        responseData.append(\"\\r\\n\");\r\n        for (CharSequence name : trailer.trailingHeaders().names()) {\r\n            for (CharSequence value : trailer.trailingHeaders().getAll(name)) {\r\n                responseData.append(\"P.S. Trailing Header: \");\r\n                responseData.append(name).append(\" = \").append(value).append(\"\\r\\n\");\r\n            }\r\n        }\r\n        responseData.append(\"\\r\\n\");\r\n    }\r\n    return responseData;\r\n}\r\n```","```\r\nprivate void writeResponse(ChannelHandlerContext ctx, LastHttpContent trailer,\r\n  StringBuilder responseData) {\r\n    boolean keepAlive = HttpUtil.isKeepAlive(request);\r\n    FullHttpResponse httpResponse = new DefaultFullHttpResponse(HTTP_1_1, \r\n      ((HttpObject) trailer).decoderResult().isSuccess() ? OK : BAD_REQUEST,\r\n      Unpooled.copiedBuffer(responseData.toString(), CharsetUtil.UTF_8));\r\n\r\n    httpResponse.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain; charset=UTF-8\");\r\n\r\n    if (keepAlive) {\r\n        httpResponse.headers().setInt(HttpHeaderNames.CONTENT_LENGTH, \r\n          httpResponse.content().readableBytes());\r\n        httpResponse.headers().set(HttpHeaderNames.CONNECTION, \r\n          HttpHeaderValues.KEEP_ALIVE);\r\n    }\r\n    ctx.write(httpResponse);\r\n\r\n    if (!keepAlive) {\r\n        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(ChannelFutureListener.CLOSE);\r\n    }\r\n}\r\n```","```\r\ncurl http://127.0.0.1:8080?param1=one\r\n```","```\r\nParameter: PARAM1 = ONE\r\n\r\nGood Bye! \r\n```","```\r\ncurl -d \"sample content\" -X POST http://127.0.0.1:8080\r\n```","```\r\nSAMPLE CONTENT\r\nGood Bye!\r\n```"]