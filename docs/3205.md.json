["```\r\ntry (ServerSocket serverSocket = new ServerSocket(FREE_PORT_NUMBER)) {\r\n    assertThat(serverSocket).isNotNull();\r\n    assertThat(serverSocket.getLocalPort()).isEqualTo(FREE_PORT_NUMBER);\r\n} catch (IOException e) {\r\n    fail(\"Port is not available\");\r\n}\r\n```","```\r\ntry (ServerSocket serverSocket = new ServerSocket(FREE_PORT_NUMBER)) {\r\n    new ServerSocket(FREE_PORT_NUMBER);\r\n    fail(\"Same port cannot be used twice\");\r\n} catch (IOException e) {\r\n    assertThat(e).hasMessageContaining(\"Address already in use\");\r\n}\r\n```","```\r\nfor (int port : FREE_PORT_RANGE) {\r\n    try (ServerSocket serverSocket = new ServerSocket(port)) {\r\n        assertThat(serverSocket).isNotNull();\r\n        assertThat(serverSocket.getLocalPort()).isEqualTo(port);\r\n        return;\r\n    } catch (IOException e) {\r\n        assertThat(e).hasMessageContaining(\"Address already in use\");\r\n    }\r\n}\r\nfail(\"No free port in the range found\");\r\n```","```\r\ntry (ServerSocket serverSocket = new ServerSocket(0)) {\r\n    assertThat(serverSocket).isNotNull();\r\n    assertThat(serverSocket.getLocalPort()).isGreaterThan(0);\r\n} catch (IOException e) {\r\n    fail(\"Port is not available\");\r\n}\r\n```","```\r\nint port = SocketUtils.findAvailableTcpPort();\r\ntry (ServerSocket serverSocket = new ServerSocket(port)) {\r\n    assertThat(serverSocket).isNotNull();\r\n    assertThat(serverSocket.getLocalPort()).isEqualTo(port);\r\n} catch (IOException e) {\r\n    fail(\"Port is not available\");\r\n}\r\n```","```\r\nServer jettyServer = new Server();\r\nServerConnector serverConnector = new ServerConnector(jettyServer);\r\njettyServer.addConnector(serverConnector);\r\ntry {\r\n    jettyServer.start();\r\n    assertThat(serverConnector.getLocalPort()).isGreaterThan(0);\r\n} catch (Exception e) {\r\n    fail(\"Failed to start Jetty server\");\r\n} finally {\r\n    jettyServer.stop();\r\n    jettyServer.destroy();\r\n}\r\n```","```\r\nTomcat tomcatServer = new Tomcat();\r\ntomcatServer.setPort(0);\r\ntry {\r\n    tomcatServer.start();\r\n    assertThat(tomcatServer.getConnector().getLocalPort()).isGreaterThan(0);\r\n} catch (LifecycleException e) {\r\n    fail(\"Failed to start Tomcat server\");\r\n} finally {\r\n    tomcatServer.stop();\r\n    tomcatServer.destroy();\r\n}\r\n```"]