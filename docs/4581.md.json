["```\r\n@EnableGlobalMethodSecurity(prePostEnabled = true)\r\n```","```\r\n@PreAuthorize(\"@resourceSecurityService.isPostOwner(#postDto.id)\")\r\n@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void updatePost(@RequestBody ScheduledPostUpdateCommandDto postDto) {\r\n    ...\r\n}\r\n\r\n@PreAuthorize(\"@resourceSecurityService.isPostOwner(#id)\")\r\n@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\r\n@ResponseStatus(HttpStatus.NO_CONTENT)\r\npublic void deletePost(@PathVariable(\"id\") Long id) {\r\n    ...\r\n}\r\n```","```\r\n@PreAuthorize(\"@resourceSecurityService.isRssFeedOwner(#feedDto.id)\")\r\n@RequestMapping(value = \"/{id}\", method = RequestMethod.PUT)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void updateFeed(@RequestBody FeedUpdateCommandDto feedDto) {\r\n    ..\r\n}\r\n\r\n@PreAuthorize(\"@resourceSecurityService.isRssFeedOwner(#id)\")\r\n@RequestMapping(value = \"/{id}\", method = RequestMethod.DELETE)\r\n@ResponseStatus(HttpStatus.NO_CONTENT)\r\npublic void deleteFeed(@PathVariable(\"id\") Long id) {\r\n    ...\r\n}\r\n```","```\r\n@Service\r\npublic class ResourceSecurityService {\r\n\r\n    @Autowired\r\n    private PostRepository postRepository;\r\n\r\n    @Autowired\r\n    private MyFeedRepository feedRepository;\r\n\r\n    public boolean isPostOwner(Long postId) {\r\n        UserPrincipal userPrincipal = (UserPrincipal) \r\n          SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n        User user = userPrincipal.getUser();\r\n        Post post = postRepository.findOne(postId);\r\n        return post.getUser().getId() == user.getId();\r\n    }\r\n\r\n    public boolean isRssFeedOwner(Long feedId) {\r\n        UserPrincipal userPrincipal = (UserPrincipal) \r\n          SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n        User user = userPrincipal.getUser();\r\n        MyFeed feed = feedRepository.findOne(feedId);\r\n        return feed.getUser().getId() == user.getId();\r\n    }\r\n}\r\n```","```\r\n@ExceptionHandler({ AuthenticationCredentialsNotFoundException.class, AccessDeniedException.class })\r\npublic ResponseEntity<Object> handleAccessDeniedException(final Exception ex, final WebRequest request) {\r\n    logger.error(\"403 Status Code\", ex);\r\n    ApiError apiError = new ApiError(HttpStatus.FORBIDDEN, ex);\r\n    return new ResponseEntity<Object>(apiError, new HttpHeaders(), HttpStatus.FORBIDDEN);\r\n}\r\n```","```\r\npublic class CommandAuthorizationLiveTest extends ScheduledPostLiveTest {\r\n\r\n    @Test\r\n    public void givenPostOwner_whenUpdatingScheduledPost_thenUpdated() throws ParseException, IOException {\r\n        ScheduledPostDto post = newDto();\r\n        post.setTitle(\"new title\");\r\n        Response response = withRequestBody(givenAuth(), post).put(urlPrefix + \"/api/scheduledPosts/\" + post.getId());\r\n\r\n        assertEquals(200, response.statusCode());\r\n    }\r\n\r\n    @Test\r\n    public void givenUserOtherThanOwner_whenUpdatingScheduledPost_thenForbidden() throws ParseException, IOException {\r\n        ScheduledPostDto post = newDto();\r\n        post.setTitle(\"new title\");\r\n        Response response = withRequestBody(givenAnotherUserAuth(), post).put(urlPrefix + \"/api/scheduledPosts/\" + post.getId());\r\n\r\n        assertEquals(403, response.statusCode());\r\n    }\r\n\r\n    private RequestSpecification givenAnotherUserAuth() {\r\n        FormAuthConfig formConfig = new FormAuthConfig(\r\n          urlPrefix + \"/j_spring_security_check\", \"username\", \"password\");\r\n        return RestAssured.given().auth().form(\"test\", \"test\", formConfig);\r\n    }\r\n}\r\n```","```\r\nprivate int timeInterval;\r\n```","```\r\nprivate int checkAfterInterval;\r\n\r\nprivate int submitAfterInterval;\r\n```","```\r\nprivate void checkAndReSubmitInternal(Post post) {\r\n    if (didIntervalPass(post.getSubmissionDate(), post.getCheckAfterInterval())) {\r\n        PostScores postScores = getPostScores(post);\r\n        ...\r\n}\r\n\r\nprivate void checkAndDeleteInternal(Post post) {\r\n    if (didIntervalPass(post.getSubmissionDate(), post.getCheckAfterInterval())) {\r\n        PostScores postScores = getPostScores(post);\r\n        ...\r\n}\r\n\r\nprivate void resetPost(Post post, String failReason) {\r\n    long time = new Date().getTime();\r\n    time += TimeUnit.MILLISECONDS.convert(post.getSubmitAfterInterval(), TimeUnit.MINUTES);\r\n    post.setSubmissionDate(new Date(time))\r\n    ...\r\n}\r\n```","```\r\n@RequestMapping(value = \"/isAccessTokenValid\")\r\n@ResponseBody\r\npublic boolean isAccessTokenValid() {\r\n    return redditService.isCurrentUserAccessTokenValid();\r\n}\r\n```","```\r\n@Override\r\npublic boolean isCurrentUserAccessTokenValid() {\r\n    UserPrincipal userPrincipal = (UserPrincipal) \r\n      SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n    User currentUser = userPrincipal.getUser();\r\n    if (currentUser.getAccessToken() == null) {\r\n        return false;\r\n    }\r\n    try {\r\n        redditTemplate.needsCaptcha();\r\n    } catch (Exception e) {\r\n        redditTemplate.setAccessToken(null);\r\n        currentUser.setAccessToken(null);\r\n        currentUser.setRefreshToken(null);\r\n        currentUser.setTokenExpiration(null);\r\n        userRepository.save(currentUser);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n```","```\r\n<div id=\"connect\" style=\"display:none\">\r\n    <a href=\"redditLogin\">Connect your Account to Reddit</a>\r\n</div>\r\n\r\n<script>\r\n$.get(\"api/isAccessTokenValid\", function(data){\r\n    if(!data){\r\n        $(\"#connect\").show();\r\n    }\r\n});\r\n</script>\r\n```","```\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>org.baeldung</groupId>\r\n    <artifactId>reddit-scheduler</artifactId>\r\n    <version>0.2.0-SNAPSHOT</version>\r\n    <name>reddit-scheduler</name>\r\n    <packaging>pom</packaging>\r\n\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>1.2.7.RELEASE</version>\r\n    </parent>\r\n\r\n    <modules>\r\n        <module>reddit-common</module>\r\n        <module>reddit-rest</module>\r\n        <module>reddit-ui</module>\r\n        <module>reddit-web</module>\r\n    </modules>\r\n\r\n    <properties>\r\n        <!-- dependency versions and properties -->\r\n    </properties>\r\n\r\n</project>\r\n```","```\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>reddit-common</artifactId>\r\n    <name>reddit-common</name>\r\n    <packaging>jar</packaging>\r\n\r\n    <parent>\r\n        <groupId>org.baeldung</groupId>\r\n        <artifactId>reddit-scheduler</artifactId>\r\n        <version>0.2.0-SNAPSHOT</version>\r\n    </parent>\r\n\r\n</project>\r\n```","```\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>reddit-rest</artifactId>\r\n    <name>reddit-rest</name>\r\n    <packaging>jar</packaging>\r\n\r\n    <parent>\r\n        <groupId>org.baeldung</groupId>\r\n        <artifactId>reddit-scheduler</artifactId>\r\n        <version>0.2.0-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.baeldung</groupId>\r\n            <artifactId>reddit-common</artifactId>\r\n            <version>0.2.0-SNAPSHOT</version>\r\n        </dependency>\r\n    </dependencies>\r\n    ...\r\n```","```\r\n@Bean\r\npublic TemplateResolver templateResolver() {\r\n    SpringResourceTemplateResolver templateResolver = new SpringResourceTemplateResolver();\r\n    templateResolver.setPrefix(\"classpath:/\");\r\n    templateResolver.setSuffix(\".html\");\r\n    templateResolver.setCacheable(false);\r\n    return templateResolver;\r\n}\r\n```","```\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>reddit-ui</artifactId>\r\n    <name>reddit-ui</name>\r\n    <packaging>jar</packaging>\r\n\r\n    <parent>\r\n        <groupId>org.baeldung</groupId>\r\n        <artifactId>reddit-scheduler</artifactId>\r\n        <version>0.2.0-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.baeldung</groupId>\r\n            <artifactId>reddit-common</artifactId>\r\n            <version>0.2.0-SNAPSHOT</version>\r\n        </dependency>\r\n    </dependencies>\r\n...\r\n```","```\r\n@ControllerAdvice\r\npublic class RestExceptionHandler extends ResponseEntityExceptionHandler implements Serializable {\r\n\r\n    private static final long serialVersionUID = -3365045939814599316L;\r\n\r\n    @ExceptionHandler({ UserApprovalRequiredException.class, UserRedirectRequiredException.class })\r\n    public String handleRedirect(RuntimeException ex, WebRequest request) {\r\n        logger.info(ex.getLocalizedMessage());\r\n        throw ex;\r\n    }\r\n\r\n    @ExceptionHandler({ Exception.class })\r\n    public String handleInternal(RuntimeException ex, WebRequest request) {\r\n        logger.error(ex);\r\n        String response = \"Error Occurred: \" + ex.getMessage();\r\n        return \"redirect:/submissionResponse?msg=\" + response;\r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class Application extends SpringBootServletInitializer {\r\n    @Bean\r\n    public ServletRegistrationBean frontendServlet() {\r\n        AnnotationConfigWebApplicationContext dispatcherContext = \r\n          new AnnotationConfigWebApplicationContext();\r\n        dispatcherContext.register(WebFrontendConfig.class, ThymeleafConfig.class);\r\n        ServletRegistrationBean registration = new ServletRegistrationBean(\r\n          new DispatcherServlet(dispatcherContext), \"/*\");\r\n        registration.setName(\"FrontendServlet\");\r\n        registration.setLoadOnStartup(1);\r\n        return registration;\r\n    }\r\n\r\n    @Bean\r\n    public ServletRegistrationBean apiServlet() {\r\n        AnnotationConfigWebApplicationContext dispatcherContext = \r\n          new AnnotationConfigWebApplicationContext();\r\n        dispatcherContext.register(WebApiConfig.class);\r\n        ServletRegistrationBean registration = new ServletRegistrationBean(\r\n          new DispatcherServlet(dispatcherContext), \"/api/*\");\r\n        registration.setName(\"ApiServlet\");\r\n        registration.setLoadOnStartup(2);\r\n        return registration;\r\n    }\r\n\r\n    @Override\r\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\r\n        application.sources(Application.class, CommonConfig.class, \r\n          PersistenceJpaConfig.class, RedditConfig.class, \r\n          ServiceConfig.class, WebGeneralConfig.class);\r\n        return application;\r\n    }\r\n\r\n    @Override\r\n    public void onStartup(ServletContext servletContext) throws ServletException {\r\n        super.onStartup(servletContext);\r\n        servletContext.addListener(new SessionListener());\r\n        servletContext.addListener(new RequestContextListener());\r\n        servletContext.addListener(new HttpSessionEventPublisher());\r\n    }\r\n\r\n    public static void main(String... args) {\r\n        SpringApplication.run(Application.class, args);\r\n    }\r\n}\r\n```","```\r\n<project>\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <artifactId>reddit-web</artifactId>\r\n    <name>reddit-web</name>\r\n    <packaging>war</packaging>\r\n\r\n    <parent>\r\n        <groupId>org.baeldung</groupId>\r\n        <artifactId>reddit-scheduler</artifactId>\r\n        <version>0.2.0-SNAPSHOT</version>\r\n    </parent>\r\n\r\n    <dependencies>\r\n\t<dependency>\r\n            <groupId>org.baeldung</groupId>\r\n            <artifactId>reddit-common</artifactId>\r\n            <version>0.2.0-SNAPSHOT</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.baeldung</groupId>\r\n            <artifactId>reddit-rest</artifactId>\r\n            <version>0.2.0-SNAPSHOT</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.baeldung</groupId>\r\n            <artifactId>reddit-ui</artifactId>\r\n            <version>0.2.0-SNAPSHOT</version>\r\n        </dependency>\r\n...\r\n```"]