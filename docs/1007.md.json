["```\r\nRunnable runnable = new NewState();\r\nThread t = new Thread(runnable);\r\nSystem.out.println(t.getState());\r\n```","```\r\nNEW\r\n```","```\r\nRunnable runnable = new NewState();\r\nThread t = new Thread(runnable);\r\nt.start();\r\nSystem.out.println(t.getState());\r\n```","```\r\nRUNNABLE\r\n```","```\r\npublic class BlockedState {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        Thread t1 = new Thread(new DemoBlockedRunnable());\r\n        Thread t2 = new Thread(new DemoBlockedRunnable());\r\n\r\n        t1.start();\r\n        t2.start();\r\n\r\n        Thread.sleep(1000);\r\n\r\n        System.out.println(t2.getState());\r\n        System.exit(0);\r\n    }\r\n}\r\n\r\nclass DemoBlockedRunnable implements Runnable {\r\n    @Override\r\n    public void run() {\r\n        commonResource();\r\n    }\r\n\r\n    public static synchronized void commonResource() {\r\n        while(true) {\r\n            // Infinite loop to mimic heavy processing\r\n            // 't1' won't leave this method\r\n            // when 't2' try to enter this\r\n        }\r\n    }\r\n}\r\n```","```\r\nBLOCKED\r\n```","```\r\npublic class WaitingState implements Runnable {\r\n    public static Thread t1;\r\n\r\n    public static void main(String[] args) {\r\n        t1 = new Thread(new WaitingState());\r\n        t1.start();\r\n    }\r\n\r\n    public void run() {\r\n        Thread t2 = new Thread(new DemoWaitingStateRunnable());\r\n        t2.start();\r\n\r\n        try {\r\n            t2.join();\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n\r\nclass DemoWaitingStateRunnable implements Runnable {\r\n    public void run() {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.println(WaitingState.t1.getState());\r\n    }\r\n}\r\n```","```\r\nWAITING\r\n```","```\r\npublic class TimedWaitingState {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        DemoTimeWaitingRunnable runnable= new DemoTimeWaitingRunnable();\r\n        Thread t1 = new Thread(runnable);\r\n        t1.start();\r\n\r\n        // The following sleep will give enough time for ThreadScheduler\r\n        // to start processing of thread t1\r\n        Thread.sleep(1000);\r\n        System.out.println(t1.getState());\r\n    }\r\n}\r\n\r\nclass DemoTimeWaitingRunnable implements Runnable {\r\n    @Override\r\n    public void run() {\r\n        try {\r\n            Thread.sleep(5000);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```","```\r\nTIMED_WAITING\r\n```","```\r\npublic class TerminatedState implements Runnable {\r\n    public static void main(String[] args) throws InterruptedException {\r\n        Thread t1 = new Thread(new TerminatedState());\r\n        t1.start();\r\n        // The following sleep method will give enough time for \r\n        // thread t1 to complete\r\n        Thread.sleep(1000);\r\n        System.out.println(t1.getState());\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        // No processing in this block\r\n    }\r\n}\r\n```","```\r\nTERMINATED\r\n```","```\r\nAssert.assertFalse(t1.isAlive());\r\n```"]