["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <exclusions>\r\n        <exclusion>\r\n            <groupId>com.zaxxer</groupId>\r\n            <artifactId>HikariCP</artifactId>\r\n        </exclusion>\r\n    </exclusions>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.tomcat</groupId>\r\n    <artifactId>tomcat-jdbc</artifactId>\r\n    <version>9.0.10</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.h2database</groupId>\r\n    <artifactId>h2</artifactId>\r\n    <version>1.4.197</version>\r\n    <scope>runtime</scope>\r\n</dependency>\r\n```","```\r\nspring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource\r\n// other spring datasource properties\r\n```","```\r\nspring.datasource.tomcat.initial-size=15\r\nspring.datasource.tomcat.max-wait=20000\r\nspring.datasource.tomcat.max-active=50\r\nspring.datasource.tomcat.max-idle=15\r\nspring.datasource.tomcat.min-idle=8\r\nspring.datasource.tomcat.default-auto-commit=true \r\n```","```\r\n# Hibernate specific properties\r\nspring.jpa.show-sql=false\r\nspring.jpa.hibernate.ddl-auto=update\r\nspring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect\r\nspring.jpa.properties.hibernate.id.new_generator_mappings=false \r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class SpringBootTomcatConnectionPoolIntegrationTest {\r\n\r\n    @Autowired\r\n    private DataSource dataSource;\r\n\r\n    @Test\r\n    public void givenTomcatConnectionPoolInstance_whenCheckedPoolClassName_thenCorrect() {\r\n        assertThat(dataSource.getClass().getName())\r\n          .isEqualTo(\"org.apache.tomcat.jdbc.pool.DataSource\");\r\n    }\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"customers\")\r\npublic class Customer {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private long id;\r\n    @Column(name = \"first_name\")\r\n    private String firstName;\r\n\r\n    // standard constructors / getters / setters / toString\r\n}\r\n```","```\r\npublic interface CustomerRepository extends CrudRepository<Customer, Long> {\r\n    List<Customer> findByLastName(String lastName);\r\n}\r\n```","```\r\npublic class CommandLineCrudRunner implements CommandLineRunner {\r\n\r\n    private static final Logger logger = LoggerFactory.getLogger(CommandLineCrudRunner.class);\r\n\r\n    @Autowired\r\n    private final CustomerRepository repository;\r\n\r\n    public void run(String... args) throws Exception {\r\n        repository.save(new Customer(\"John\", \"Doe\"));\r\n        repository.save(new Customer(\"Jennifer\", \"Wilson\"));\r\n\r\n        logger.info(\"Customers found with findAll():\");\r\n        repository.findAll().forEach(c -> logger.info(c.toString()));\r\n\r\n        logger.info(\"Customer found with findById(1L):\");\r\n        Customer customer = repository.findById(1L)\r\n          .orElseGet(() -> new Customer(\"Non-existing customer\", \"\"));\r\n        logger.info(customer.toString());\r\n\r\n        logger.info(\"Customer found with findByLastName('Wilson'):\");\r\n        repository.findByLastName(\"Wilson\").forEach(c -> {\r\n            logger.info(c.toString());\r\n        });\r\n    }\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class SpringBootConsoleApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SpringBootConsoleApplication.class);\r\n    }\r\n}\r\n```"]