["```\r\npublic static <T> void print(Enumeration<T> enumeration) {\r\n    while (enumeration.hasMoreElements()) {\r\n        System.out.println(enumeration.nextElement());\r\n    }\r\n}\r\n```","```\r\npublic class EnumerationSpliterator<T> extends AbstractSpliterator<T> {\r\n\r\n    private final Enumeration<T> enumeration;\r\n\r\n    public EnumerationSpliterator(long est, int additionalCharacteristics, Enumeration<T> enumeration) {\r\n        super(est, additionalCharacteristics);\r\n        this.enumeration = enumeration;\r\n    }\r\n}\r\n```","```\r\n@Override\r\npublic boolean tryAdvance(Consumer<? super T> action) {\r\n    if (enumeration.hasMoreElements()) {\r\n        action.accept(enumeration.nextElement());\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n@Override\r\npublic void forEachRemaining(Consumer<? super T> action) {\r\n    while (enumeration.hasMoreElements())\r\n        action.accept(enumeration.nextElement());\r\n}\r\n```","```\r\npublic static <T> Stream<T> convert(Enumeration<T> enumeration) {\r\n    EnumerationSpliterator<T> spliterator \r\n      = new EnumerationSpliterator<T>(Long.MAX_VALUE, Spliterator.ORDERED, enumeration);\r\n    Stream<T> stream = StreamSupport.stream(spliterator, false);\r\n\r\n    return stream;\r\n}\r\n```","```\r\n@Test\r\npublic void givenEnumeration_whenConvertedToStream_thenNotNull() {\r\n    Vector<Integer> input = new Vector<>(Arrays.asList(1, 2, 3, 4, 5));\r\n\r\n    Stream<Integer> resultingStream = convert(input.elements());\r\n\r\n    Assert.assertNotNull(resultingStream);\r\n}\r\n```"]