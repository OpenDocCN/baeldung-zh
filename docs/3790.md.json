["```\r\ncalculation_mode=GROSS \r\ngross_calculation_tax_rate=0.15\r\n```","```\r\ncom.baeldung.environmentpostprocessor.calculation.mode=GROSS\r\ncom.baeldung.environmentpostprocessor.gross.calculation.tax.rate=0.15\r\n```","```\r\n@Order(Ordered.LOWEST_PRECEDENCE)\r\npublic class PriceCalculationEnvironmentPostProcessor implements EnvironmentPostProcessor {\r\n\r\n    @Override\r\n    public void postProcessEnvironment(ConfigurableEnvironment environment, \r\n      SpringApplication application) {\r\n        PropertySource<?> system = environment.getPropertySources()\r\n          .get(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME);\r\n        if (!hasOurPriceProperties(system)) {\r\n          // error handling code omitted\r\n        }\r\n        Map<String, Object> prefixed = names.stream()\r\n          .collect(Collectors.toMap(this::rename, system::getProperty));\r\n        environment.getPropertySources()\r\n          .addAfter(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, new MapPropertySource(\"prefixer\", prefixed));\r\n    }\r\n\r\n}\r\n```","```\r\norg.springframework.boot.env.EnvironmentPostProcessor=\r\n  com.baeldung.environmentpostprocessor.PriceCalculationEnvironmentPostProcessor\r\n```","```\r\npublic class GrossPriceCalculator implements PriceCalculator {\r\n    @Value(\"${com.baeldung.environmentpostprocessor.gross.calculation.tax.rate}\")\r\n    double taxRate;\r\n\r\n    @Override\r\n    public double calculate(double singlePrice, int quantity) {\r\n        //calcuation implementation omitted\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)\r\npublic class PriceCalculationAutoConfig {\r\n    @Bean\r\n    @ConditionalOnProperty(name = \r\n      \"com.baeldung.environmentpostprocessor.calculation.mode\", havingValue = \"NET\")\r\n    @ConditionalOnMissingBean\r\n    public PriceCalculator getNetPriceCalculator() {\r\n        return new NetPriceCalculator();\r\n    }\r\n\r\n    @Bean\r\n    @ConditionalOnProperty(name = \r\n      \"com.baeldung.environmentpostprocessor.calculation.mode\", havingValue = \"GROSS\")\r\n    @ConditionalOnMissingBean\r\n    public PriceCalculator getGrossPriceCalculator() {\r\n        return new GrossPriceCalculator();\r\n    }\r\n}\r\n```","```\r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\r\n  com.baeldung.environmentpostprocessor.autoconfig.PriceCalculationAutoConfig\r\n```","```\r\nset calculation_mode=GROSS\r\nset gross_calculation_tax_rate=0.15\r\n```","```\r\nexport calculation_mode=GROSS \r\nexport gross_calculation_tax_rate=0.15\r\n```","```\r\nmvn spring-boot:run\r\n  -Dstart-class=com.baeldung.environmentpostprocessor.PriceCalculationApplication\r\n  -Dspring-boot.run.arguments=\"100,4\"\r\n```"]