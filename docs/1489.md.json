["```\r\n@RestController\r\npublic class MovieController {\r\n\r\n    @Autowired\r\n    private MovieService movieService;\r\n\r\n    @GetMapping(\"/movies\")\r\n    public List<Movie> retrieveAllMovies() {\r\n        return movieService.retrieveAllMovies();\r\n    }\r\n\r\n    @GetMapping(\"/movies/{id}\")\r\n    public Movie retrieveMovies(@PathVariable Long id) {\r\n        return movieService.retrieveMovies(id);\r\n    }\r\n\r\n    @PostMapping(\"/movies\")\r\n    public Long createMovie(@RequestBody Movie movie) {\r\n        return movieService.createMovie(movie);\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class MovieService {\r\n\r\n    @Autowired\r\n    private MovieRepository movieRepository;\r\n\r\n    public List<Movie> retrieveAllMovies() {\r\n        return movieRepository.findAll();\r\n    }\r\n\r\n    public Movie retrieveMovies(@PathVariable Long id) {\r\n        Movie movie = movieRepository.findById(id)\r\n          .get();\r\n        Movie response = new Movie();\r\n        response.setTitle(movie.getTitle()\r\n          .toLowerCase());\r\n        return response;\r\n    }\r\n\r\n    public Long createMovie(@RequestBody Movie movie) {\r\n        return movieRepository.save(movie)\r\n          .getId();\r\n    }\r\n}\r\n```","```\r\n@Repository\r\npublic interface MovieRepository extends JpaRepository<Movie, Long> {\r\n}\r\n```","```\r\n@Entity\r\npublic class Movie {\r\n    @Id\r\n    private Long id;\r\n    private String title;\r\n    private String year;\r\n    private String rating;\r\n\r\n    // Standard setters and getters\r\n}\r\n```","```\r\npublic class MovieServiceUnitTests {\r\n\r\n    @InjectMocks\r\n    private MovieService movieService;\r\n\r\n    @Mock\r\n    private MovieRepository movieRepository;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        MockitoAnnotations.initMocks(this);\r\n    }\r\n\r\n    @Test\r\n    public void givenMovieServiceWhenQueriedWithAnIdThenGetExpectedMovie() {\r\n        Movie movie = new Movie(100L, \"Hello World!\");\r\n        Mockito.when(movieRepository.findById(100L))\r\n          .thenReturn(Optional.ofNullable(movie));\r\n\r\n        Movie result = movieService.retrieveMovies(100L);\r\n\r\n        Assert.assertEquals(movie.getTitle().toLowerCase(), result.getTitle());\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest\r\npublic class MovieControllerIntegrationTests {\r\n\r\n    @Autowired\r\n    private MovieController movieController;\r\n\r\n    @Test\r\n    public void givenMovieControllerWhenQueriedWithAnIdThenGetExpectedMovie() {\r\n        Movie movie = new Movie(100L, \"Hello World!\");\r\n        movieController.createMovie(movie);\r\n\r\n        Movie result = movieController.retrieveMovies(100L);\r\n\r\n        Assert.assertEquals(movie.getTitle().toLowerCase(), result.getTitle());\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringRunner.class)\r\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\r\npublic class MovieApplicationE2eTests {\r\n\r\n    @Autowired\r\n    private MovieController movieController;\r\n\r\n    @LocalServerPort\r\n    private int port;\r\n\r\n    @Test\r\n    public void givenMovieApplicationWhenQueriedWithAnIdThenGetExpectedMovie() {\r\n        Movie movie = new Movie(100L, \"Hello World!\");\r\n        movieController.createMovie(movie);\r\n\r\n        when().get(String.format(\"http://localhost:%s/movies/100\", port))\r\n          .then()\r\n          .statusCode(is(200))\r\n          .body(containsString(\"Hello World!\".toLowerCase()));\r\n    }\r\n}\r\n```"]