["```\r\nint value1 = 6;\r\nint value2 = 5;\r\n```","```\r\nint result = 6 | 5;\r\n```","```\r\nBinary number of value1 = 0110\r\nBinary number of value2 = 0101\r\n```","```\r\n0110\r\n0101\r\n-----\r\n0111\r\n```","```\r\nresult : 7\r\n```","```\r\n@Test\r\npublic void givenTwoIntegers_whenOrOperator_thenNewDecimalNumber() {\r\n    int value1 = 6;\r\n    int value2 = 5;\r\n    int result = value1 | value2;\r\n    assertEquals(7, result);\r\n}\r\n```","```\r\n0110\r\n0101\r\n-----\r\n0111\r\n```","```\r\n@Test\r\npublic void givenTwoIntegers_whenAndOperator_thenNewDecimalNumber() {\r\n    int value1 = 6;\r\n    int value2 = 5;\r\n    int result = value1 & value2;\r\n    assertEquals(4, result);\r\n}\r\n```","```\r\n0110\r\n0101\r\n-----\r\n0100\r\n```","```\r\nresult : 4\r\n```","```\r\n@Test\r\npublic void givenTwoIntegers_whenXorOperator_thenNewDecimalNumber() {\r\n    int value1 = 6;\r\n    int value2 = 5;\r\n    int result = value1 ^ value2;\r\n    assertEquals(3, result);\r\n}\r\n```","```\r\n0110\r\n0101\r\n-----\r\n0011\r\n```","```\r\nresult : 3\r\n```","```\r\n@Test\r\npublic void givenOneInteger_whenNotOperator_thenNewDecimalNumber() {\r\n    int value1 = 6;\r\n    int result = ~value1;\r\n    assertEquals(-7, result);\r\n}\r\n```","```\r\nvalue1 = 0000 0110\r\n```","```\r\n0000 0110 -> 1111 1001\r\n```","```\r\n1111 1001 -> 0000 0110 + 1 -> 0000 0111\r\n```","```\r\nresult : -7\r\n```","```\r\nA\tB\tA|B\tA&B;\tA^B\t~A\r\n0\t0\t0\t0\t0\t1\r\n1\t0\t1\t0\t1\t0\r\n0\t1\t1\t0\t1\t1\r\n1\t1\t1\t1\t0\t0\r\n```","```\r\nvalue <operator> <number_of_times>\r\n```","```\r\n@Test\r\npublic void givenOnePositiveInteger_whenLeftShiftOperator_thenNewDecimalNumber() {\r\n    int value = 12;\r\n    int leftShift = value << 2;\r\n    assertEquals(48, leftShift);\r\n} \r\n```","```\r\n@Test\r\npublic void givenOneNegativeInteger_whenLeftShiftOperator_thenNewDecimalNumber() {\r\n    int value = -12;\r\n    int leftShift = value << 2;\r\n    assertEquals(-48, leftShift);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOnePositiveInteger_whenSignedRightShiftOperator_thenNewDecimalNumber() {\r\n    int value = 12;\r\n    int rightShift = value >> 2;\r\n    assertEquals(3, rightShift);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOneNegativeInteger_whenSignedRightShiftOperator_thenNewDecimalNumber() {\r\n    int value = -12;\r\n    int rightShift = value >> 2;\r\n    assertEquals(-3, rightShift);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOnePositiveInteger_whenUnsignedRightShiftOperator_thenNewDecimalNumber() {\r\n    int value = 12;\r\n    int unsignedRightShift = value >>> 2;\r\n    assertEquals(3, unsignedRightShift);\r\n}\r\n```","```\r\n@Test\r\npublic void givenOneNegativeInteger_whenUnsignedRightShiftOperator_thenNewDecimalNumber() {\r\n    int value = -12;\r\n    int unsignedRightShift = value >>> 2;\r\n    assertEquals(1073741821, unsignedRightShift);\r\n}\r\n```"]