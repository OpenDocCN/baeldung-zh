["```\r\nComparator c = (Computer c1, Computer c2) -> c1.getAge().compareTo(c2.getAge()); \r\n```","```\r\nComparator c = (c1, c2) -> c1.getAge().compareTo(c2.getAge());\r\n```","```\r\nComparator c = Comparator.comparing(Computer::getAge); \r\n```","```\r\nComputer::getAge;\r\n```","```\r\nFunction<Computer, Integer> getAge = Computer::getAge;\r\nInteger computerAge = getAge.apply(c1); \r\n```","```\r\nList inventory = Arrays.asList(\r\n  new Computer( 2015, \"white\", 35), new Computer(2009, \"black\", 65));\r\ninventory.forEach(ComputerUtils::repair); \r\n```","```\r\nComputer c1 = new Computer(2015, \"white\");\r\nComputer c2 = new Computer(2009, \"black\");\r\nComputer c3 = new Computer(2014, \"black\");\r\nArrays.asList(c1, c2, c3).forEach(System.out::print); \r\n```","```\r\nComputer c1 = new Computer(2015, \"white\", 100);\r\nComputer c2 = new MacbookPro(2009, \"black\", 100);\r\nList inventory = Arrays.asList(c1, c2);\r\ninventory.forEach(Computer::turnOnPc); \r\n```","```\r\npublic Double calculateValue(Double initialValue) {\r\n    return initialValue/1.50;\r\n} \r\n```","```\r\n@Override\r\npublic Double calculateValue(Double initialValue){\r\n    Function<Double, Double> function = super::calculateValue;\r\n    Double pcValue = function.apply(initialValue);\r\n    return pcValue + (initialValue/10) ;\r\n} \r\n```","```\r\nmacbookPro.calculateValue(999.99); \r\n```","```\r\n@FunctionalInterface\r\npublic interface InterfaceComputer {\r\n    Computer create();\r\n}\r\n\r\nInterfaceComputer c = Computer::new;\r\nComputer computer = c.create(); \r\n```","```\r\nBiFunction<Integer, String, Computer> c4Function = Computer::new; \r\nComputer c4 = c4Function.apply(2013, \"white\"); \r\n```","```\r\n@FunctionalInterface \r\ninterface TriFunction<A, B, C, R> { \r\n    R apply(A a, B b, C c); \r\n    default <V> TriFunction<A, B, C, V> andThen( Function<? super R, ? extends V> after) { \r\n        Objects.requireNonNull(after); \r\n        return (A a, B b, C c) -> after.apply(apply(a, b, c)); \r\n    } \r\n} \r\n```","```\r\nTriFunction <Integer, String, Integer, Computer> c6Function = Computer::new;\r\nComputer c3 = c6Function.apply(2008, \"black\", 90); \r\n```","```\r\nFunction <Integer, Computer[]> computerCreator = Computer[]::new;\r\nComputer[] computerArray = computerCreator.apply(5); \r\n```"]