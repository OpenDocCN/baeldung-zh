["```\r\npublic void givenJava_whenUsingSystemProp_thenGetVersion() {\r\n    int expectedVersion = 8;\r\n    String[] versionElements = System.getProperty(\"java.version\").split(\"\\\\.\");\r\n    int discard = Integer.parseInt(versionElements[0]);\r\n    int version;\r\n    if (discard == 1) {\r\n        version = Integer.parseInt(versionElements[1]);\r\n    } else {\r\n        version = discard;\r\n    }\r\n    Assertions.assertThat(version).isEqualTo(expectedVersion);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic void givenJava_whenUsingCommonsLang_thenGetVersion() {\r\n    int expectedVersion = 8;\r\n    String[] versionElements = SystemUtils.JAVA_SPECIFICATION_VERSION.split(\"\\\\.\");\r\n    int discard = Integer.parseInt(versionElements[0]);\r\n    int version;\r\n    if (discard == 1) {\r\n        version = Integer.parseInt(versionElements[1]);\r\n    } else {\r\n        version = discard;\r\n    }\r\n    Assertions.assertThat(version).isEqualTo(expectedVersion);\r\n}\r\n```","```\r\npublic void givenJava_whenUsingRuntime_thenGetVersion(){\r\n    String expectedVersion = \"15\";\r\n    Runtime.Version runtimeVersion = Runtime.version();\r\n    String version = String.valueOf(runtimeVersion.version().get(0));\r\n    Assertions.assertThat(version).isEqualTo(expectedVersion);\r\n}\r\n```"]