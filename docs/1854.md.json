["```\r\n<dependency>\r\n    <groupId>com.jsoniter<groupId> \r\n    <artifactId>jsoniter</artifactId>\r\n    <version>0.9.23</version>\r\n</dependency> \r\n```","```\r\ncompile group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23' \r\n```","```\r\n{\"id\":1,\"name\":{\"firstName\":\"Joe\",\"surname\":\"Blogg\"}}\r\n```","```\r\npublic class Student {\r\n    private int id;\r\n    private Name name;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\npublic class Name {\r\n    private String firstName;\r\n    private String surname;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\n@Test\r\npublic void whenParsedUsingBindAPI_thenConvertedToJavaObjectCorrectly() {\r\n    String input = \"{\\\"id\\\":1,\\\"name\\\":{\\\"firstName\\\":\\\"Joe\\\",\\\"surname\\\":\\\"Blogg\\\"}}\";\r\n\r\n    Student student = JsonIterator.deserialize(input, Student.class);\r\n\r\n    assertThat(student.getId()).isEqualTo(1);\r\n    assertThat(student.getName().getFirstName()).isEqualTo(\"Joe\");\r\n    assertThat(student.getName().getSurname()).isEqualTo(\"Blogg\");\r\n}\r\n```","```\r\n{\"id\":\"1\",\"name\":{\"firstName\":\"Joe\",\"surname\":\"Blogg\"}}\r\n```","```\r\npublic class Student {\r\n    @JsonProperty(decoder = MaybeStringIntDecoder.class)\r\n    private int id;\r\n    private Name name;\r\n\r\n    // standard setters and getters\r\n} \r\n```","```\r\n@Test\r\npublic void givenTypeInJsonFuzzy_whenFieldIsMaybeDecoded_thenFieldParsedCorrectly() {\r\n    String input = \"{\\\"id\\\":\\\"1\\\",\\\"name\\\":{\\\"firstName\\\":\\\"Joe\\\",\\\"surname\\\":\\\"Blogg\\\"}}\";\r\n\r\n    Student student = JsonIterator.deserialize(input, Student.class);\r\n\r\n    assertThat(student.getId()).isEqualTo(1); \r\n}\r\n```","```\r\n{\"error\":404,\"description\":\"Student record not found\"} \r\n```","```\r\n@Test\r\npublic void whenParsedUsingAnyAPI_thenFieldValueCanBeExtractedUsingTheFieldName() {\r\n    String input = \"{\\\"id\\\":1,\\\"name\\\":{\\\"firstName\\\":\\\"Joe\\\",\\\"surname\\\":\\\"Blogg\\\"}}\";\r\n\r\n    Any any = JsonIterator.deserialize(input);\r\n\r\n    assertThat(any.toInt(\"id\")).isEqualTo(1);\r\n    assertThat(any.toString(\"name\", \"firstName\")).isEqualTo(\"Joe\");\r\n    assertThat(any.toString(\"name\", \"surname\")).isEqualTo(\"Blogg\"); \r\n}\r\n```","```\r\n@Test\r\npublic void whenParsedUsingAnyAPI_thenFieldValueTypeIsCorrect() {\r\n    String input = \"{\\\"id\\\":1,\\\"name\\\":{\\\"firstName\\\":\\\"Joe\\\",\\\"surname\\\":\\\"Blogg\\\"}}\";\r\n\r\n    Any any = JsonIterator.deserialize(input);\r\n\r\n    assertThat(any.get(\"id\").valueType()).isEqualTo(ValueType.NUMBER);\r\n    assertThat(any.get(\"name\").valueType()).isEqualTo(ValueType.OBJECT);\r\n    assertThat(any.get(\"error\").valueType()).isEqualTo(ValueType.INVALID);\r\n}\r\n```","```\r\nString input = \"{\\\"error\\\":404,\\\"description\\\":\\\"Student record not found\\\"}\";\r\nAny response = JsonIterator.deserialize(input);\r\n\r\nif (response.get(\"error\").valueType() != ValueType.INVALID) {\r\n    return \"Error!! Error code is \" + response.toInt(\"error\");\r\n}\r\nreturn \"Success!! Student id is \" + response.toInt(\"id\");\r\n```","```\r\n{\"firstName\":\"Joe\",\"surname\":\"Blogg\"}\r\n```","```\r\n@Test\r\npublic void whenParsedUsingIteratorAPI_thenFieldValuesExtractedCorrectly() throws Exception {\r\n    Name name = new Name();    \r\n    String input = \"{\\\"firstName\\\":\\\"Joe\\\",\\\"surname\\\":\\\"Blogg\\\"}\";\r\n    JsonIterator iterator = JsonIterator.parse(input);\r\n\r\n    for (String field = iterator.readObject(); field != null; field = iterator.readObject()) {\r\n        switch (field) {\r\n            case \"firstName\":\r\n                if (iterator.whatIsNext() == ValueType.STRING) {\r\n                    name.setFirstName(iterator.readString());\r\n                }\r\n                continue;\r\n            case \"surname\":\r\n                if (iterator.whatIsNext() == ValueType.STRING) {\r\n                    name.setSurname(iterator.readString());\r\n                }\r\n                continue;\r\n            default:\r\n                iterator.skip();\r\n        }\r\n    }\r\n\r\n    assertThat(name.getFirstName()).isEqualTo(\"Joe\");\r\n    assertThat(name.getSurname()).isEqualTo(\"Blogg\");\r\n}\r\n```"]