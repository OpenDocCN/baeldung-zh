["```\r\n<dependency>\r\n    <groupId>com.squareup.retrofit2</groupId>\r\n    <artifactId>retrofit</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>  \r\n<dependency>  \r\n    <groupId>com.squareup.retrofit2</groupId>\r\n    <artifactId>converter-gson</artifactId>\r\n    <version>2.3.0</version>\r\n</dependency>\r\n```","```\r\n{\r\n  login: \"mojombo\",\r\n  id: 1,\r\n  url: \"https://api.github.com/users/mojombo\",\r\n  ...\r\n}\r\n```","```\r\npublic class User {\r\n    private String login;\r\n    private long id;\r\n    private String url;\r\n    // ...\r\n\r\n    // standard getters an setters\r\n\r\n}\r\n```","```\r\npublic interface UserService {\r\n\r\n    @GET(\"/users\")\r\n    public Call<List<User>> getUsers(\r\n      @Query(\"per_page\") int per_page, \r\n      @Query(\"page\") int page);\r\n\r\n    @GET(\"/users/{username}\")\r\n    public Call<User> getUser(@Path(\"username\") String username);\r\n}\r\n```","```\r\nOkHttpClient.Builder httpClient = new OkHttpClient.Builder();\r\nRetrofit retrofit = new Retrofit.Builder()\r\n  .baseUrl(\"https://api.github.com/\")\r\n  .addConverterFactory(GsonConverterFactory.create())\r\n  .client(httpClient.build())\r\n  .build();\r\n```","```\r\nUserService service = retrofit.create(UserService.class);\r\nCall<User> callSync = service.getUser(\"eugenp\");\r\n\r\ntry {\r\n    Response<User> response = callSync.execute();\r\n    User user = response.body();\r\n} catch (Exception ex) { ... }\r\n```","```\r\nUserService service = retrofit.create(UserService.class);\r\nCall<User> callAsync = service.getUser(\"eugenp\");\r\n\r\ncallAsync.enqueue(new Callback<User>() {\r\n    @Override\r\n    public void onResponse(Call<User> call, Response<User> response) {\r\n        User user = response.body();\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Call<User> call, Throwable throwable) {\r\n        System.out.println(throwable);\r\n    }\r\n});\r\n```","```\r\npublic class GitHubServiceGenerator {\r\n\r\n    private static final String BASE_URL = \"https://api.github.com/\";\r\n\r\n    private static Retrofit.Builder builder\r\n      = new Retrofit.Builder()\r\n        .baseUrl(BASE_URL)\r\n        .addConverterFactory(GsonConverterFactory.create());\r\n\r\n    private static Retrofit retrofit = builder.build();\r\n\r\n    private static OkHttpClient.Builder httpClient\r\n      = new OkHttpClient.Builder();\r\n\r\n    public static <S> S createService(Class<S> serviceClass) {\r\n        return retrofit.create(serviceClass);\r\n    }\r\n}\r\n```","```\r\nUserService service \r\n  = GitHubServiceGenerator.createService(UserService.class);\r\n```","```\r\npublic static <S> S createService(Class<S> serviceClass, final String token ) {\r\n   if ( token != null ) {\r\n       httpClient.interceptors().clear();\r\n       httpClient.addInterceptor( chain -> {\r\n           Request original = chain.request();\r\n           Request request = original.newBuilder()\r\n             .header(\"Authorization\", token)\r\n             .build();\r\n           return chain.proceed(request);\r\n       });\r\n       builder.client(httpClient.build());\r\n       retrofit = builder.build();\r\n   }\r\n   return retrofit.create(serviceClass);\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.squareup.okhttp3</groupId>\r\n    <artifactId>logging-interceptor</artifactId>\r\n    <version>3.9.0</version>\r\n</dependency>\r\n```","```\r\npublic class GitHubServiceGenerator {\r\n\r\n    private static final String BASE_URL = \"https://api.github.com/\";\r\n\r\n    private static Retrofit.Builder builder\r\n      = new Retrofit.Builder()\r\n        .baseUrl(BASE_URL)\r\n        .addConverterFactory(GsonConverterFactory.create());\r\n\r\n    private static Retrofit retrofit = builder.build();\r\n\r\n    private static OkHttpClient.Builder httpClient\r\n      = new OkHttpClient.Builder();\r\n\r\n    private static HttpLoggingInterceptor logging\r\n      = new HttpLoggingInterceptor()\r\n        .setLevel(HttpLoggingInterceptor.Level.BASIC);\r\n\r\n    public static <S> S createService(Class<S> serviceClass) {\r\n        if (!httpClient.interceptors().contains(logging)) {\r\n            httpClient.addInterceptor(logging);\r\n            builder.client(httpClient.build());\r\n            retrofit = builder.build();\r\n        }\r\n        return retrofit.create(serviceClass);\r\n    }\r\n\r\n    public static <S> S createService(Class<S> serviceClass, final String token) {\r\n        if (token != null) {\r\n            httpClient.interceptors().clear();\r\n            httpClient.addInterceptor( chain -> {\r\n                Request original = chain.request();\r\n                Request.Builder builder1 = original.newBuilder()\r\n                  .header(\"Authorization\", token);\r\n                Request request = builder1.build();\r\n                return chain.proceed(request);\r\n            });\r\n            builder.client(httpClient.build());\r\n            retrofit = builder.build();\r\n        }\r\n        return retrofit.create(serviceClass);\r\n    }\r\n}\r\n```"]