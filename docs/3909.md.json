["```\r\n<dependency>\r\n    <groupId>org.reflections</groupId>\r\n    <artifactId>reflections</artifactId>\r\n    <version>0.9.11</version>\r\n</dependency>\r\n```","```\r\nReflections reflections = new Reflections(\"com.baeldung.reflections\");\r\nReflections reflections = new Reflections(MyClass.class);\r\nReflections reflections = new Reflections(MyClass.class.getClassLoader());\r\n```","```\r\nReflections reflections = new Reflections(\"com.baeldung.reflections\", MyClass.class);\r\n```","```\r\nReflections reflections = new Reflections(new ConfigurationBuilder()\r\n  .setUrls(ClasspathHelper.forPackage(\"com.baeldung.reflections\"))));\r\n```","```\r\nReflections reflections = new Reflections(\"com.baeldung.reflections\"), \r\n  new FieldAnnotationsScanner(), \r\n  new MethodParameterScanner());\r\n```","```\r\nReflections reflections = new Reflections(new ConfigurationBuilder()\r\n  .setUrls(ClasspathHelper.forPackage(\"com.baeldung.reflections\"))\r\n  .setScanners(new FieldAnnotationsScanner(), new MethodParameterScanner()));\r\n```","```\r\nReflections reflections = new Reflections(new ConfigurationBuilder()\r\n  .setUrls(ClasspathHelper.forPackage(\"com.baeldung.reflections\"))\r\n  .setScanners(new SubTypesScanner(), new TypeAnnotationsScanner())\r\n  .setExecutorService(Executors.newFixedThreadPool(4)));\r\n```","```\r\nReflections reflections = new Reflections(new ConfigurationBuilder()\r\n  .setUrls(ClasspathHelper.forPackage(\"com.baeldung.reflections\"))\r\n  .setScanners(new SubTypesScanner(), new TypeAnnotationsScanner())\r\n  .filterInputsBy(new FilterBuilder().excludePackage(\"com.baeldung.reflections.test\")));\r\n```","```\r\npublic Set<Class<? extends Scanner>> getReflectionsSubTypes() {\r\n    Reflections reflections = new Reflections(\r\n      \"org.reflections\", new SubTypesScanner());\r\n    return reflections.getSubTypesOf(Scanner.class);\r\n}\r\n```","```\r\npublic Set<Class<?>> getJDKFunctinalInterfaces() {\r\n    Reflections reflections = new Reflections(\"java.util.function\", \r\n      new TypeAnnotationsScanner());\r\n    return reflections.getTypesAnnotatedWith(FunctionalInterface.class);\r\n}\r\n```","```\r\npublic Set<Method> getDateDeprecatedMethods() {\r\n    Reflections reflections = new Reflections(\r\n      \"java.util.Date\", \r\n      new MethodAnnotationsScanner());\r\n    return reflections.getMethodsAnnotatedWith(Deprecated.class);\r\n}\r\n```","```\r\npublic Set<Constructor> getDateDeprecatedConstructors() {\r\n    Reflections reflections = new Reflections(\r\n      \"java.util.Date\", \r\n      new MethodAnnotationsScanner());\r\n    return reflections.getConstructorsAnnotatedWith(Deprecated.class);\r\n}\r\n```","```\r\npublic Set<Method> getMethodsWithDateParam() {\r\n    Reflections reflections = new Reflections(\r\n      java.text.SimpleDateFormat.class, \r\n      new MethodParameterScanner());\r\n    return reflections.getMethodsMatchParams(Date.class);\r\n}\r\n```","```\r\npublic Set<Method> getMethodsWithVoidReturn() {\r\n    Reflections reflections = new Reflections(\r\n      \"java.text.SimpleDateFormat\", \r\n      new MethodParameterScanner());\r\n    return reflections.getMethodsReturn(void.class);\r\n}\r\n```","```\r\npublic Set<String> getPomXmlPaths() {\r\n    Reflections reflections = new Reflections(new ResourcesScanner());\r\n    return reflections.getResources(Pattern.compile(\".*pom\\\\.xml\"));\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.gmavenplus</groupId>\r\n    <artifactId>gmavenplus-plugin</artifactId>\r\n    <version>1.5</version>\r\n    <executions>\r\n        <execution>\r\n            <phase>generate-resources</phase>\r\n            <goals>\r\n                <goal>execute</goal>\r\n            </goals>\r\n            <configuration>\r\n                <scripts>\r\n                    <script><![CDATA[\r\n                        new org.reflections.Reflections(\r\n                          \"com.baeldung.refelections\")\r\n                            .save(\"${outputDirectory}/META-INF/reflections/reflections.xml\")]]>\r\n                    </script>\r\n                </scripts>\r\n            </configuration>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\nReflections reflections\r\n  = isProduction() ? Reflections.collect() : new Reflections(\"com.baeldung.reflections\");\r\n```"]