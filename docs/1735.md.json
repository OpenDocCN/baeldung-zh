["```\r\nstatic String producer() {\r\n    return \"N&F; Vehicles\";\r\n}\r\n```","```\r\nString producer = Vehicle.producer();\r\n```","```\r\ndefault String getOverview() {\r\n    return \"ATV made by \" + producer();\r\n}\r\n```","```\r\nVehicle vehicle = new VehicleImpl();\r\nString overview = vehicle.getOverview();\r\n```","```\r\nboolean isReal = list.stream().anyMatch(u -> User.isRealUser(u));\r\n```","```\r\nboolean isReal = list.stream().anyMatch(User::isRealUser);\r\n```","```\r\nUser user = new User();\r\nboolean isLegalName = list.stream().anyMatch(user::isLegalName); \r\n```","```\r\nlong count = list.stream().filter(String::isEmpty).count();\r\n```","```\r\nStream<User> stream = list.stream().map(User::new);\r\n```","```\r\nOptional<String> optional = Optional.empty();\r\n```","```\r\nString str = \"value\";\r\nOptional<String> optional = Optional.of(str);\r\n```","```\r\nOptional<String> optional = Optional.ofNullable(getString());\r\n```","```\r\nList<String> list = getList();\r\nList<String> listOpt = list != null ? list : new ArrayList<>();\r\n```","```\r\nList<String> listOpt = getList().orElseGet(() -> new ArrayList<>());\r\n```","```\r\nUser user = getUser();\r\nif (user != null) {\r\n    Address address = user.getAddress();\r\n    if (address != null) {\r\n        String street = address.getStreet();\r\n        if (street != null) {\r\n            return street;\r\n        }\r\n    }\r\n}\r\nreturn \"not specified\";\r\n```","```\r\nOptional<User> user = Optional.ofNullable(getUser());\r\nString result = user\r\n  .map(User::getAddress)\r\n  .map(Address::getStreet)\r\n  .orElse(\"not specified\");\r\n```","```\r\nOptional<OptionalUser> optionalUser = Optional.ofNullable(getOptionalUser());\r\nString result = optionalUser\r\n  .flatMap(OptionalUser::getAddress)\r\n  .flatMap(OptionalAddress::getStreet)\r\n  .orElse(\"not specified\");\r\n```","```\r\nString value = null;\r\nString result = \"\";\r\ntry {\r\n    result = value.toUpperCase();\r\n} catch (NullPointerException exception) {\r\n    throw new CustomException();\r\n}\r\n```","```\r\nString value = null;\r\nOptional<String> valueOpt = Optional.ofNullable(value);\r\nString result = valueOpt.orElseThrow(CustomException::new).toUpperCase();\r\n```"]