["```\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjrt</artifactId>\r\n    <version>1.8.9</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.aspectj</groupId>\r\n    <artifactId>aspectjweaver</artifactId>\r\n    <version>1.8.9</version>\r\n</dependency>\r\n```","```\r\npublic class Account {\r\n    int balance = 20;\r\n\r\n    public boolean withdraw(int amount) {\r\n        if (balance < amount) {\r\n            return false;\r\n        } \r\n        balance = balance - amount;\r\n        return true;\r\n    }\r\n}\r\n```","```\r\npublic aspect AccountAspect {\r\n    final int MIN_BALANCE = 10;\r\n\r\n    pointcut callWithDraw(int amount, Account acc) : \r\n     call(boolean Account.withdraw(int)) && args(amount) && target(acc);\r\n\r\n    before(int amount, Account acc) : callWithDraw(amount, acc) {\r\n    }\r\n\r\n    boolean around(int amount, Account acc) : \r\n      callWithDraw(amount, acc) {\r\n        if (acc.balance < amount) {\r\n            return false;\r\n        }\r\n        return proceed(amount, acc);\r\n    }\r\n\r\n    after(int amount, Account balance) : callWithDraw(amount, balance) {\r\n    }\r\n}\r\n```","```\r\n<plugin>\r\n    <groupId>org.codehaus.mojo</groupId>\r\n    <artifactId>aspectj-maven-plugin</artifactId>\r\n    <version>1.7</version>\r\n    <configuration>\r\n        <complianceLevel>1.8</complianceLevel>\r\n        <source>1.8</source>\r\n        <target>1.8</target>\r\n        <showWeaveInfo>true</showWeaveInfo>\r\n        <verbose>true</verbose>\r\n        <Xlint>ignore</Xlint>\r\n        <encoding>UTF-8 </encoding>\r\n    </configuration>\r\n    <executions>\r\n        <execution>\r\n            <goals>\r\n                <!-- use this goal to weave all your main classes -->\r\n                <goal>compile</goal>\r\n                <!-- use this goal to weave all your test classes -->\r\n                <goal>test-compile</goal>\r\n            </goals>\r\n        </execution>\r\n    </executions>\r\n</plugin>\r\n```","```\r\npublic class AccountTest {\r\n    private Account account;\r\n\r\n    @Before\r\n    public void before() {\r\n        account = new Account();\r\n    }\r\n\r\n    @Test\r\n    public void given20AndMin10_whenWithdraw5_thenSuccess() {\r\n        assertTrue(account.withdraw(5));\r\n    }\r\n\r\n    @Test\r\n    public void given20AndMin10_whenWithdraw100_thenFail() {\r\n        assertFalse(account.withdraw(100));\r\n    }\r\n}\r\n```","```\r\n[INFO] Join point 'method-call\r\n(boolean com.baeldung.aspectj.Account.withdraw(int))' in Type\r\n'com.baeldung.aspectj.test.AccountTest' (AccountTest.java:20)\r\nadvised by around advice from 'com.baeldung.aspectj.AccountAspect'\r\n(AccountAspect.class:18(from AccountAspect.aj))\r\n\r\n[INFO] Join point 'method-call\r\n(boolean com.baeldung.aspectj.Account.withdraw(int))' in Type \r\n'com.baeldung.aspectj.test.AccountTest' (AccountTest.java:20) \r\nadvised by before advice from 'com.baeldung.aspectj.AccountAspect' \r\n(AccountAspect.class:13(from AccountAspect.aj))\r\n\r\n[INFO] Join point 'method-call\r\n(boolean com.baeldung.aspectj.Account.withdraw(int))' in Type \r\n'com.baeldung.aspectj.test.AccountTest' (AccountTest.java:20) \r\nadvised by after advice from 'com.baeldung.aspectj.AccountAspect'\r\n(AccountAspect.class:26(from AccountAspect.aj))\r\n\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n-  Balance before withdrawal: 20\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n-  Withdraw ammout: 5\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n- Balance after withdrawal : 15\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n-  Balance before withdrawal: 20\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n-  Withdraw ammout: 100\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n- Withdrawal Rejected!\r\n2016-11-15 22:53:51 [main] INFO  com.baeldung.aspectj.AccountAspect \r\n- Balance after withdrawal : 20\r\n```","```\r\n<configuration>\r\n    <weaveDependencies>\r\n        <weaveDependency>  \r\n            <groupId>org.agroup</groupId>\r\n            <artifactId>to-weave</artifactId>\r\n        </weaveDependency>\r\n        <weaveDependency>\r\n            <groupId>org.anothergroup</groupId>\r\n            <artifactId>gen</artifactId>\r\n        </weaveDependency>\r\n    </weaveDependencies>\r\n</configuration>\r\n```","```\r\n<plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-surefire-plugin</artifactId>\r\n    <version>2.22.2</version>\r\n    <configuration>\r\n        <argLine>\r\n            -javaagent:\"${settings.localRepository}\"/org/aspectj/\r\n            aspectjweaver/${aspectj.version}/\r\n            aspectjweaver-${aspectj.version}.jar\r\n        </argLine>\r\n        <useSystemClassLoader>true</useSystemClassLoader>\r\n        <forkMode>always</forkMode>\r\n    </configuration>\r\n</plugin>\r\n```","```\r\n<aspectj>\r\n    <aspects>\r\n        <aspect name=\"com.baeldung.aspectj.AccountAspect\"/>\r\n        <weaver options=\"-verbose -showWeaveInfo\">\r\n            <include within=\"com.baeldung.aspectj.*\"/>\r\n        </weaver>\r\n    </aspects>\r\n</aspectj>\r\n```","```\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target(ElementType.METHOD)\r\npublic @interface Secured {\r\n    public boolean isLocked() default false; \r\n}\r\n```","```\r\npublic class SecuredMethod {\r\n\r\n    @Secured(isLocked = true)\r\n    public void lockedMethod() {\r\n    }\r\n\r\n    @Secured(isLocked = false)\r\n    public void unlockedMethod() {\r\n    }\r\n}\r\n```","```\r\n@Aspect\r\npublic class SecuredMethodAspect {\r\n    @Pointcut(\"@annotation(secured)\")\r\n    public void callAt(Secured secured) {\r\n    }\r\n\r\n    @Around(\"callAt(secured)\")\r\n    public Object around(ProceedingJoinPoint pjp, \r\n      Secured secured) throws Throwable {\r\n        return secured.isLocked() ? null : pjp.proceed();\r\n    }\r\n}\r\n```","```\r\n<aspectj>\r\n    <aspects>\r\n        <aspect name=\"com.baeldung.aspectj.SecuredMethodAspect\"/>\r\n        <weaver options=\"-verbose -showWeaveInfo\">\r\n            <include within=\"com.baeldung.aspectj.*\"/>\r\n        </weaver>\r\n    </aspects>\r\n</aspectj>\r\n```","```\r\n@Test\r\npublic void testMethod() throws Exception {\r\n\tSecuredMethod service = new SecuredMethod();\r\n\tservice.unlockedMethod();\r\n\tservice.lockedMethod();\r\n}\r\n```","```\r\n[INFO] Join point 'method-call\r\n(void com.baeldung.aspectj.SecuredMethod.unlockedMethod())'\r\nin Type 'com.baeldung.aspectj.test.SecuredMethodTest'\r\n(SecuredMethodTest.java:11)\r\nadvised by around advice from 'com.baeldung.aspectj.SecuredMethodAspect'\r\n(SecuredMethodAspect.class(from SecuredMethodAspect.java))\r\n\r\n2016-11-15 22:53:51 [main] INFO com.baeldung.aspectj.SecuredMethod \r\n- unlockedMethod\r\n2016-11-15 22:53:51 [main] INFO c.b.aspectj.SecuredMethodAspect - \r\npublic void com.baeldung.aspectj.SecuredMethod.lockedMethod() is locked\r\n```"]