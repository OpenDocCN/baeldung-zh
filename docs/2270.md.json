["```\r\n<dependency>\r\n    <groupId>com.alibaba</groupId>\r\n    <artifactId>dubbo</artifactId>\r\n    <version>2.5.7</version>\r\n</dependency>\r\n```","```\r\npublic interface GreetingsService {\r\n    String sayHi(String name);\r\n}\r\n\r\npublic class GreetingsServiceImpl implements GreetingsService {\r\n\r\n    @Override\r\n    public String sayHi(String name) {\r\n        return \"hi, \" + name;\r\n    }\r\n}\r\n```","```\r\n<dubbo:application name=\"demo-provider\" version=\"1.0\"/>\r\n<dubbo:registry address=\"multicast://224.1.1.1:9090\"/>\r\n<dubbo:protocol name=\"dubbo\" port=\"20880\"/>\r\n<bean id=\"greetingsService\" class=\"com.baeldung.dubbo.remote.GreetingsServiceImpl\"/>\r\n<dubbo:service interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  ref=\"greetingsService\"/>\r\n```","```\r\n<dubbo:application name=\"demo-consumer\" version=\"1.0\"/>\r\n<dubbo:registry address=\"multicast://224.1.1.1:9090\"/>\r\n<dubbo:reference interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  id=\"greetingsService\"/>\r\n```","```\r\npublic class MulticastRegistryTest {\r\n\r\n    @Before\r\n    public void initRemote() {\r\n        ClassPathXmlApplicationContext remoteContext\r\n          = new ClassPathXmlApplicationContext(\"multicast/provider-app.xml\");\r\n        remoteContext.start();\r\n    }\r\n\r\n    @Test\r\n    public void givenProvider_whenConsumerSaysHi_thenGotResponse(){\r\n        ClassPathXmlApplicationContext localContext \r\n          = new ClassPathXmlApplicationContext(\"multicast/consumer-app.xml\");\r\n        localContext.start();\r\n        GreetingsService greetingsService\r\n          = (GreetingsService) localContext.getBean(\"greetingsService\");\r\n        String hiMessage = greetingsService.sayHi(\"baeldung\");\r\n\r\n        assertNotNull(hiMessage);\r\n        assertEquals(\"hi, baeldung\", hiMessage);\r\n    }\r\n}\r\n```","```\r\n<dubbo:reference interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  id=\"greetingsService\" url=\"dubbo://127.0.0.1:20880\"/>\r\n```","```\r\n<dubbo:application name=\"simple-registry\" />\r\n<dubbo:protocol port=\"9090\" />\r\n<dubbo:service interface=\"com.alibaba.dubbo.registry.RegistryService\"\r\n  ref=\"registryService\" registry=\"N/A\" ondisconnect=\"disconnect\">\r\n    <dubbo:method name=\"subscribe\">\r\n        <dubbo:argument index=\"1\" callback=\"true\" />\r\n    </dubbo:method>\r\n    <dubbo:method name=\"unsubscribe\">\r\n        <dubbo:argument index=\"1\" callback=\"true\" />\r\n    </dubbo:method>\r\n</dubbo:service>\r\n\r\n<bean class=\"com.alibaba.dubbo.registry.simple.SimpleRegistryService\"\r\n  id=\"registryService\" />\r\n```","```\r\n<dubbo:registry address=\"127.0.0.1:9090\"/>\r\n```","```\r\nApplicationConfig application = new ApplicationConfig();\r\napplication.setName(\"demo-provider\");\r\napplication.setVersion(\"1.0\");\r\n\r\nRegistryConfig registryConfig = new RegistryConfig();\r\nregistryConfig.setAddress(\"multicast://224.1.1.1:9090\");\r\n\r\nServiceConfig<GreetingsService> service = new ServiceConfig<>();\r\nservice.setApplication(application);\r\nservice.setRegistry(registryConfig);\r\nservice.setInterface(GreetingsService.class);\r\nservice.setRef(new GreetingsServiceImpl());\r\n\r\nservice.export();\r\n```","```\r\nApplicationConfig application = new ApplicationConfig();\r\napplication.setName(\"demo-consumer\");\r\napplication.setVersion(\"1.0\");\r\n\r\nRegistryConfig registryConfig = new RegistryConfig();\r\nregistryConfig.setAddress(\"multicast://224.1.1.1:9090\");\r\n\r\nReferenceConfig<GreetingsService> reference = new ReferenceConfig<>();\r\nreference.setApplication(application);\r\nreference.setRegistry(registryConfig);\r\nreference.setInterface(GreetingsService.class);\r\n\r\nGreetingsService greetingsService = reference.get();\r\nString hiMessage = greetingsService.sayHi(\"baeldung\");\r\n```","```\r\n<dubbo:protocol name=\"dubbo\" port=\"20880\"\r\n  connections=\"2\" accepts=\"1000\" />\r\n```","```\r\n<dubbo:protocol name=\"dubbo\" port=\"20880\" />\r\n<dubbo:protocol name=\"rmi\" port=\"1099\" />\r\n\r\n<dubbo:service interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  version=\"1.0.0\" ref=\"greetingsService\" protocol=\"dubbo\" />\r\n<dubbo:service interface=\"com.bealdung.dubbo.remote.AnotherService\"\r\n  version=\"1.0.0\" ref=\"anotherService\" protocol=\"rmi\" />\r\n```","```\r\n<dubbo:reference interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  id=\"greetingsService\" cache=\"lru\" />\r\n```","```\r\npublic class GreetingsServiceSpecialImpl implements GreetingsService {\r\n    @Override\r\n    public String sayHi(String name) {\r\n        try {\r\n            SECONDS.sleep(5);\r\n        } catch (Exception ignored) { }\r\n        return \"hi, \" + name;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenProvider_whenConsumerSaysHi_thenGotResponse() {\r\n    ClassPathXmlApplicationContext localContext\r\n      = new ClassPathXmlApplicationContext(\"multicast/consumer-app.xml\");\r\n    localContext.start();\r\n    GreetingsService greetingsService\r\n      = (GreetingsService) localContext.getBean(\"greetingsService\");\r\n\r\n    long before = System.currentTimeMillis();\r\n    String hiMessage = greetingsService.sayHi(\"baeldung\");\r\n\r\n    long timeElapsed = System.currentTimeMillis() - before;\r\n    assertTrue(timeElapsed > 5000);\r\n    assertNotNull(hiMessage);\r\n    assertEquals(\"hi, baeldung\", hiMessage);\r\n\r\n    before = System.currentTimeMillis();\r\n    hiMessage = greetingsService.sayHi(\"baeldung\");\r\n    timeElapsed = System.currentTimeMillis() - before;\r\n\r\n    assertTrue(timeElapsed < 1000);\r\n    assertNotNull(hiMessage);\r\n    assertEquals(\"hi, baeldung\", hiMessage);\r\n}\r\n```","```\r\n<dubbo:registry address=\"zookeeper://127.0.0.1:2181\"/>\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.zookeeper</groupId>\r\n    <artifactId>zookeeper</artifactId>\r\n    <version>3.4.11</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.101tec</groupId>\r\n    <artifactId>zkclient</artifactId>\r\n    <version>0.10</version>\r\n</dependency>\r\n```","```\r\n@Before\r\npublic void initRemote() {\r\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    executorService.submit(() -> {\r\n        ClassPathXmlApplicationContext remoteContext \r\n          = new ClassPathXmlApplicationContext(\"cluster/provider-app-default.xml\");\r\n        remoteContext.start();\r\n    });\r\n    executorService.submit(() -> {\r\n        ClassPathXmlApplicationContext backupRemoteContext\r\n          = new ClassPathXmlApplicationContext(\"cluster/provider-app-special.xml\");\r\n        backupRemoteContext.start();\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void givenProviderCluster_whenConsumerSaysHi_thenResponseBalanced() {\r\n    ClassPathXmlApplicationContext localContext\r\n      = new ClassPathXmlApplicationContext(\"cluster/consumer-app-lb.xml\");\r\n    localContext.start();\r\n    GreetingsService greetingsService\r\n      = (GreetingsService) localContext.getBean(\"greetingsService\");\r\n\r\n    List<Long> elapseList = new ArrayList<>(6);\r\n    for (int i = 0; i < 6; i++) {\r\n        long current = System.currentTimeMillis();\r\n        String hiMessage = greetingsService.sayHi(\"baeldung\");\r\n        assertNotNull(hiMessage);\r\n        elapseList.add(System.currentTimeMillis() - current);\r\n    }\r\n\r\n    OptionalDouble avgElapse = elapseList\r\n      .stream()\r\n      .mapToLong(e -> e)\r\n      .average();\r\n    assertTrue(avgElapse.isPresent());\r\n    assertTrue(avgElapse.getAsDouble() > 2500.0);\r\n}\r\n```","```\r\n@Before\r\npublic void initRemote() {\r\n    ExecutorService executorService = Executors.newFixedThreadPool(2);\r\n    executorService.submit(() -> {\r\n        ClassPathXmlApplicationContext remoteContext\r\n          = new ClassPathXmlApplicationContext(\"cluster/provider-app-default.xml\");\r\n        remoteContext.start();\r\n    });\r\n    executorService.submit(() -> {\r\n        SECONDS.sleep(2);\r\n        ClassPathXmlApplicationContext backupRemoteContext\r\n          = new ClassPathXmlApplicationContext(\"cluster/provider-app-special.xml\");\r\n        backupRemoteContext.start();\r\n        return null;\r\n    });\r\n}\r\n```","```\r\n@Test\r\npublic void givenProviderCluster_whenConsumerSaysHi_thenResponseBalanced()\r\n  throws InterruptedException {\r\n    ClassPathXmlApplicationContext localContext\r\n      = new ClassPathXmlApplicationContext(\"cluster/consumer-app-lb.xml\");\r\n    localContext.start();\r\n    GreetingsService greetingsService\r\n      = (GreetingsService) localContext.getBean(\"greetingsService\");\r\n    List<Long> elapseList = new ArrayList<>(6);\r\n    for (int i = 0; i < 6; i++) {\r\n        long current = System.currentTimeMillis();\r\n        String hiMessage = greetingsService.sayHi(\"baeldung\");\r\n        assertNotNull(hiMessage);\r\n        elapseList.add(System.currentTimeMillis() - current);\r\n        SECONDS.sleep(1);\r\n    }\r\n\r\n    OptionalDouble avgElapse = elapseList\r\n      .stream()\r\n      .mapToLong(e -> e)\r\n      .average();\r\n\r\n    assertTrue(avgElapse.isPresent());\r\n    assertTrue(avgElapse.getAsDouble() > 1666.0);\r\n}\r\n```","```\r\n<dubbo:reference interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  id=\"greetingsService\" loadbalance=\"roundrobin\" />\r\n```","```\r\n<dubbo:service interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  ref=\"greetingsService\" cluster=\"failover\"/>\r\n```","```\r\npublic class GreetingsFailoverServiceImpl implements GreetingsService {\r\n\r\n    @Override\r\n    public String sayHi(String name) {\r\n        return \"hi, failover \" + name;\r\n    }\r\n}\r\n```","```\r\n<dubbo:reference interface=\"com.baeldung.dubbo.remote.GreetingsService\"\r\n  id=\"greetingsService\" retries=\"2\" timeout=\"2000\" />\r\n```","```\r\n@Test\r\npublic void whenConsumerSaysHi_thenGotFailoverResponse() {\r\n    ClassPathXmlApplicationContext localContext\r\n      = new ClassPathXmlApplicationContext(\r\n      \"cluster/consumer-app-failtest.xml\");\r\n    localContext.start();\r\n    GreetingsService greetingsService\r\n      = (GreetingsService) localContext.getBean(\"greetingsService\");\r\n    String hiMessage = greetingsService.sayHi(\"baeldung\");\r\n\r\n    assertNotNull(hiMessage);\r\n    assertEquals(\"hi, failover baeldung\", hiMessage);\r\n}\r\n```"]