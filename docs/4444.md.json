["```\r\n<dependency>\r\n    <groupId>org.beykery</groupId>\r\n    <artifactId>neuroph</artifactId>\r\n    <version>2.92</version>\r\n</dependency>\r\n```","```\r\noutput = transferFunction(inputFunction(inputConnections));\r\n```","```\r\nLayer layer = new Layer(); \r\nlayer.addNeuron(n);\r\n```","```\r\nNeuralNetwork ann = new Perceptron(2, 4, 1);\r\n```","```\r\nNeuralNetwork ann = new NeuralNetwork();   \r\nLayer layer = new Layer();\r\nann.addLayer(0, layer);\r\nann.setInputNeurons(layer.getNeurons()); \r\n```","```\r\nann.addLayer(0, inputLayer);    \r\nann.addLayer(1, hiddenLayerOne); \r\nConnectionFactory.fullConnect(ann.getLayerAt(0), ann.getLayerAt(1));\r\n```","```\r\nConnectionFactory.fullConnect(ann.getLayerAt(0), \r\n  ann.getLayerAt(ann.getLayersCount() - 1), false);\r\nann.setOutputNeurons(ann.getLayerAt(\r\n  ann.getLayersCount() - 1).getNeurons());\r\n```","```\r\nint inputSize = 2; \r\nint outputSize = 1; \r\nDataSet ds = new DataSet(inputSize, outputSize);\r\n\r\nDataSetRow rOne \r\n  = new DataSetRow(new double[] {0, 0}, new double[] {0});\r\nds.addRow(rOne);\r\nDataSetRow rTwo \r\n  = new DataSetRow(new double[] {1, 1}, new double[] {0});\r\nds.addRow(rTwo);\r\n```","```\r\nNeuralNetwork ann = new NeuralNetwork();\r\n//...\r\nBackPropagation backPropagation = new BackPropagation();\r\nbackPropagation.setMaxIterations(1000);\r\nann.learn(ds, backPropagation);\r\n```","```\r\nLayer inputLayer = new Layer();\r\ninputLayer.addNeuron(new Neuron());\r\ninputLayer.addNeuron(new Neuron());\r\n```","```\r\nLayer hiddenLayerOne = new Layer();\r\nhiddenLayerOne.addNeuron(new Neuron());\r\nhiddenLayerOne.addNeuron(new Neuron());\r\nhiddenLayerOne.addNeuron(new Neuron());\r\nhiddenLayerOne.addNeuron(new Neuron());\r\n```","```\r\nLayer hiddenLayerTwo = new Layer(); \r\nhiddenLayerTwo.addNeuron(new Neuron()); \r\nhiddenLayerTwo.addNeuron(new Neuron()); \r\nhiddenLayerTwo.addNeuron(new Neuron()); \r\nhiddenLayerTwo.addNeuron(new Neuron());\r\n```","```\r\nLayer outputLayer = new Layer();\r\noutputLayer.addNeuron(new Neuron()); \r\n```","```\r\nNeuralNetwork ann = new NeuralNetwork();\r\nann.addLayer(0, inputLayer);\r\nann.addLayer(1, hiddenLayerOne);\r\nConnectionFactory.fullConnect(ann.getLayerAt(0), ann.getLayerAt(1));\r\nann.addLayer(2, hiddenLayerTwo);\r\nConnectionFactory.fullConnect(ann.getLayerAt(1), ann.getLayerAt(2));\r\nann.addLayer(3, outputLayer);\r\nConnectionFactory.fullConnect(ann.getLayerAt(2), ann.getLayerAt(3));\r\nConnectionFactory.fullConnect(ann.getLayerAt(0), \r\n  ann.getLayerAt(ann.getLayersCount()-1), false);\r\nann.setInputNeurons(inputLayer.getNeurons());\r\nann.setOutputNeurons(outputLayer.getNeurons());\r\n```","```\r\nint inputSize = 2;\r\nint outputSize = 1;\r\nDataSet ds = new DataSet(inputSize, outputSize);\r\n```","```\r\nDataSetRow rOne\r\n  = new DataSetRow(new double[] {0, 1}, new double[] {1});\r\nds.addRow(rOne);\r\nDataSetRow rTwo\r\n  = new DataSetRow(new double[] {1, 1}, new double[] {0});\r\nds.addRow(rTwo);\r\nDataSetRow rThree \r\n  = new DataSetRow(new double[] {0, 0}, new double[] {0});\r\nds.addRow(rThree);\r\nDataSetRow rFour\r\n  = new DataSetRow(new double[] {1, 0}, new double[] {1});\r\nds.addRow(rFour);\r\n```","```\r\nBackPropagation backPropagation = new BackPropagation();\r\nbackPropagation.setMaxIterations(1000);\r\nann.learn(ds, backPropagation); \r\n```","```\r\nann.setInput(0, 1);\r\nann.calculate();\r\ndouble[] networkOutputOne = ann.getOutput(); \r\n```","```\r\nTesting: 1, 0 Expected: 1.0 Result: 1.0\r\nTesting: 0, 1 Expected: 1.0 Result: 1.0\r\nTesting: 1, 1 Expected: 0.0 Result: 0.0\r\nTesting: 0, 0 Expected: 0.0 Result: 0.0 \r\n```"]