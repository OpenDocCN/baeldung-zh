["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-webflux</artifactId>\r\n</dependency>\r\n```","```\r\ndependencies {\r\n    compile 'org.springframework.boot:spring-boot-starter-webflux'\r\n}\r\n```","```\r\nWebClient client = WebClient.create(); \r\n```","```\r\nWebClient client = WebClient.create(\"http://localhost:8080\"); \r\n```","```\r\nWebClient client = WebClient.builder()\r\n  .baseUrl(\"http://localhost:8080\")\r\n  .defaultCookie(\"cookieKey\", \"cookieValue\")\r\n  .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) \r\n  .defaultUriVariables(Collections.singletonMap(\"url\", \"http://localhost:8080\"))\r\n  .build();\r\n```","```\r\nHttpClient httpClient = HttpClient.create()\r\n  .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)\r\n  .responseTimeout(Duration.ofMillis(5000))\r\n  .doOnConnected(conn -> \r\n    conn.addHandlerLast(new ReadTimeoutHandler(5000, TimeUnit.MILLISECONDS))\r\n      .addHandlerLast(new WriteTimeoutHandler(5000, TimeUnit.MILLISECONDS)));\r\n\r\nWebClient client = WebClient.builder()\r\n  .clientConnector(new ReactorClientHttpConnector(httpClient))\r\n  .build();\r\n```","```\r\nUriSpec<RequestBodySpec> uriSpec = client.method(HttpMethod.POST);\r\n```","```\r\nUriSpec<RequestBodySpec> uriSpec = client.post();\r\n```","```\r\nRequestBodySpec bodySpec = uriSpec.uri(\"/resource\");\r\n```","```\r\nRequestBodySpec bodySpec = uriSpec.uri(\r\n  uriBuilder -> uriBuilder.pathSegment(\"/resource\").build());\r\n```","```\r\nRequestBodySpec bodySpec = uriSpec.uri(URI.create(\"/resource\"));\r\n```","```\r\nRequestHeadersSpec<?> headersSpec = bodySpec.bodyValue(\"data\");\r\n```","```\r\nRequestHeadersSpec<?> headersSpec = bodySpec.body(\r\n  Mono.just(new Foo(\"name\")), Foo.class);\r\n```","```\r\nRequestHeadersSpec<?> headersSpec = bodySpec.body(\r\n  BodyInserters.fromValue(\"data\"));\r\n```","```\r\nRequestHeadersSpec headersSpec = bodySpec.body(\r\n  BodyInserters.fromPublisher(Mono.just(\"data\")),\r\n  String.class);\r\n```","```\r\nLinkedMultiValueMap map = new LinkedMultiValueMap();\r\nmap.add(\"key1\", \"value1\");\r\nmap.add(\"key2\", \"value2\");\r\nRequestHeadersSpec<?> headersSpec = bodySpec.body(\r\n  BodyInserters.fromMultipartData(map));\r\n```","```\r\nResponseSpec responseSpec = headersSpec.header(\r\n    HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\r\n  .accept(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)\r\n  .acceptCharset(StandardCharsets.UTF_8)\r\n  .ifNoneMatch(\"*\")\r\n  .ifModifiedSince(ZonedDateTime.now())\r\n  .retrieve();\r\n```","```\r\nMono<String> response = headersSpec.exchangeToMono(response -> {\r\n  if (response.statusCode().equals(HttpStatus.OK)) {\r\n      return response.bodyToMono(String.class);\r\n  } else if (response.statusCode().is4xxClientError()) {\r\n      return Mono.just(\"Error response\");\r\n  } else {\r\n      return response.createException()\r\n        .flatMap(Mono::error);\r\n  }\r\n});\r\n```","```\r\nMono<String> response = headersSpec.retrieve()\r\n  .bodyToMono(String.class);\r\n```","```\r\nWebTestClient testClient = WebTestClient\r\n  .bindToServer()\r\n  .baseUrl(\"http://localhost:8080\")\r\n  .build(); \r\n```","```\r\nRouterFunction function = RouterFunctions.route(\r\n  RequestPredicates.GET(\"/resource\"),\r\n  request -> ServerResponse.ok().build()\r\n);\r\n\r\nWebTestClient\r\n  .bindToRouterFunction(function)\r\n  .build().get().uri(\"/resource\")\r\n  .exchange()\r\n  .expectStatus().isOk()\r\n  .expectBody().isEmpty(); \r\n```","```\r\nWebHandler handler = exchange -> Mono.empty();\r\nWebTestClient.bindToWebHandler(handler).build();\r\n```","```\r\n@Autowired\r\nprivate ApplicationContext context;\r\n\r\nWebTestClient testClient = WebTestClient.bindToApplicationContext(context)\r\n  .build(); \r\n```","```\r\n@Autowired\r\nprivate Controller controller;\r\n\r\nWebTestClient testClient = WebTestClient.bindToController(controller).build(); \r\n```","```\r\nWebTestClient\r\n  .bindToServer()\r\n    .baseUrl(\"http://localhost:8080\")\r\n    .build()\r\n    .post()\r\n    .uri(\"/resource\")\r\n  .exchange()\r\n    .expectStatus().isCreated()\r\n    .expectHeader().valueEquals(\"Content-Type\", \"application/json\")\r\n    .expectBody().jsonPath(\"field\").isEqualTo(\"value\"); \r\n```"]