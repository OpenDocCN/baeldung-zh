["```\r\n<dependency>\r\n    <groupId>org.derive4j</groupId>\r\n    <artifactId>derive4j</artifactId>\r\n    <version>1.1.0</version>\r\n    <optional>true</optional>\r\n</dependency>\r\n```","```\r\n@Data\r\ninterface Either<A, B> {\r\n    <X> X match(Function<A, X> left, Function<B, X> right);\r\n}\r\n```","```\r\npublic void testEitherIsCreatedFromRight() {\r\n    Either<Exception, String> either = Eithers.right(\"Okay\");\r\n    Optional<Exception> leftOptional = Eithers.getLeft(either);\r\n    Optional<String> rightOptional = Eithers.getRight(either);\r\n    Assertions.assertThat(leftOptional).isEmpty();\r\n    Assertions.assertThat(rightOptional).hasValue(\"Okay\");\r\n}\r\n```","```\r\npublic void testEitherIsMatchedWithRight() {\r\n    Either<Exception, String> either = Eithers.right(\"Okay\");\r\n    Function<Exception, String> leftFunction = Mockito.mock(Function.class);\r\n    Function<String, String> rightFunction = Mockito.mock(Function.class);\r\n    either.match(leftFunction, rightFunction);\r\n    Mockito.verify(rightFunction, Mockito.times(1)).apply(\"Okay\");\r\n    Mockito.verify(leftFunction, Mockito.times(0)).apply(Mockito.any(Exception.class));\r\n}\r\n```","```\r\n@Data\r\ninterface HTTPRequest {\r\n    interface Cases<R>{\r\n        R GET(String path);\r\n        R POST(String path);\r\n        R PUT(String path);\r\n        R DELETE(String path);\r\n    }\r\n\r\n    <R> R match(Cases<R> method);\r\n}\r\n```","```\r\npublic class HTTPResponse {\r\n    int statusCode;\r\n    String responseBody;\r\n\r\n    public HTTPResponse(int statusCode, String responseBody) {\r\n        this.statusCode = statusCode;\r\n        this.responseBody = responseBody;\r\n    }\r\n}\r\n```","```\r\npublic class HTTPServer {\r\n    public static String GET_RESPONSE_BODY = \"Success!\";\r\n    public static String PUT_RESPONSE_BODY = \"Resource Created!\";\r\n    public static String POST_RESPONSE_BODY = \"Resource Updated!\";\r\n    public static String DELETE_RESPONSE_BODY = \"Resource Deleted!\";\r\n\r\n    public HTTPResponse acceptRequest(HTTPRequest request) {\r\n        return HTTPRequests.caseOf(request)\r\n          .GET((path) -> new HTTPResponse(200, GET_RESPONSE_BODY))\r\n          .POST((path,body) -> new HTTPResponse(201, POST_RESPONSE_BODY))\r\n          .PUT((path,body) -> new HTTPResponse(200, PUT_RESPONSE_BODY))\r\n          .DELETE(path -> new HTTPResponse(200, DELETE_RESPONSE_BODY));\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenRequestReachesServer_thenProperResponseIsReturned() {\r\n    HTTPServer server = new HTTPServer();\r\n    HTTPRequest postRequest = HTTPRequests.POST(\"http://test.com/post\", \"Resource\");\r\n    HTTPResponse response = server.acceptRequest(postRequest);\r\n    Assert.assertEquals(201, response.getStatusCode());\r\n    Assert.assertEquals(HTTPServer.POST_RESPONSE_BODY, response.getResponseBody());\r\n}\r\n```","```\r\n@Data(value = @Derive(\r\n  inClass = \"{ClassName}Impl\",\r\n  make = {Make.lazyConstructor, Make.constructors}\r\n))\r\npublic interface LazyRequest {\r\n    interface Cases<R>{\r\n        R GET(String path);\r\n        R POST(String path, String body);\r\n        R PUT(String path, String body);\r\n        R DELETE(String path);\r\n    }\r\n\r\n    <R> R match(LazyRequest.Cases<R> method);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRequestIsReferenced_thenRequestIsLazilyContructed() {\r\n    LazyRequestSupplier mockSupplier = Mockito.spy(new LazyRequestSupplier());\r\n    LazyRequest request = LazyRequestImpl.lazy(() -> mockSupplier.get());\r\n    Mockito.verify(mockSupplier, Mockito.times(0)).get();\r\n    Assert.assertEquals(LazyRequestImpl.getPath(request), \"http://test.com/get\");\r\n    Mockito.verify(mockSupplier, Mockito.times(1)).get();\r\n}\r\n\r\nclass LazyRequestSupplier implements Supplier<LazyRequest> {\r\n    @Override\r\n    public LazyRequest get() {\r\n        return LazyRequestImpl.GET(\"http://test.com/get\");\r\n    }\r\n}\r\n```"]