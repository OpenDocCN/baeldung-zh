["```\r\n<dependency>\r\n    <groupId>com.j256.ormlite</groupId>\r\n    <artifactId>ormlite-jdbc</artifactId>\r\n    <version>5.0</version>\r\n</dependency>\r\n```","```\r\n@DatabaseTable(tableName = \"libraries\")\r\npublic class Library {\t\r\n\r\n    @DatabaseField(generatedId = true)\r\n    private long libraryId;\r\n\r\n    @DatabaseField(canBeNull = false)\r\n    private String name;\r\n\r\n    public Library() {\r\n    }\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\n@Entity\r\npublic class LibraryJPA {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private long libraryId;\r\n\r\n    @Column\r\n    private String name;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\nJdbcPooledConnectionSource connectionSource \r\n  = new JdbcPooledConnectionSource(\"jdbc:h2:mem:myDb\");\r\n\r\n// work with the connectionSource\r\n\r\nconnectionSource.close();\r\n```","```\r\nTableUtils.createTableIfNotExists(connectionSource, Library.class);\r\n```","```\r\nDao<Library, Long> libraryDao \r\n  = DaoManager.createDao(connectionSource, Library.class);\r\n```","```\r\nLibrary library = new Library();\r\nlibrary.setName(\"My Library\");\r\nlibraryDao.create(library);\r\n\r\nLibrary result = libraryDao.queryForId(1L);\r\n\r\nlibrary.setName(\"My Other Library\");\r\nlibraryDao.update(library);\r\n\r\nlibraryDao.delete(library);\r\n```","```\r\nlibraryDao.forEach(lib -> {\r\n    System.out.println(lib.getName());\r\n});\r\n```","```\r\ntry (CloseableWrappedIterable<Library> wrappedIterable \r\n  = libraryDao.getWrappedIterable()) {\r\n    wrappedIterable.forEach(lib -> {\r\n        System.out.println(lib.getName());\r\n    });\r\n }\r\n```","```\r\npublic interface LibraryDao extends Dao<Library, Long> {\r\n    public List<Library> findByName(String name) throws SQLException;\r\n}\r\n```","```\r\npublic class LibraryDaoImpl extends BaseDaoImpl<Library, Long> \r\n  implements LibraryDao {\r\n    public LibraryDaoImpl(ConnectionSource connectionSource) throws SQLException {\r\n        super(connectionSource, Library.class);\r\n    }\r\n\r\n    @Override\r\n    public List<Library> findByName(String name) throws SQLException {\r\n        return super.queryForEq(\"name\", name);\r\n    }\r\n}\r\n```","```\r\n@DatabaseTable(tableName = \"libraries\", daoClass = LibraryDaoImpl.class)\r\npublic class Library { \r\n    // ...\r\n}\r\n```","```\r\nLibraryDao customLibraryDao \r\n  = DaoManager.createDao(connectionSource, Library.class);\r\n```","```\r\nLibrary library = new Library();\r\nlibrary.setName(\"My Library\");\r\n\r\ncustomLibraryDao.create(library);\r\nassertEquals(\r\n  1, customLibraryDao.findByName(\"My Library\").size());\r\n```","```\r\n@DatabaseTable(tableName=\"addresses\")\r\npublic class Address {\r\n    @DatabaseField(generatedId = true)\r\n    private long addressId;\r\n\r\n    @DatabaseField(canBeNull = false)\r\n    private String addressLine;\r\n\r\n    // standard getters, setters \r\n}\r\n```","```\r\n@DatabaseTable(tableName = \"libraries\")\r\npublic class Library {      \r\n    //...\r\n\r\n    @DatabaseField(foreign=true, foreignAutoCreate = true, \r\n      foreignAutoRefresh = true)\r\n    private Address address;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\nLibrary library = new Library();\r\nlibrary.setName(\"My Library\");\r\nlibrary.setAddress(new Address(\"Main Street nr 20\"));\r\n\r\nDao<Library, Long> libraryDao \r\n  = DaoManager.createDao(connectionSource, Library.class);\r\nlibraryDao.create(library);\r\n```","```\r\nDao<Address, Long> addressDao \r\n  = DaoManager.createDao(connectionSource, Address.class);\r\nassertEquals(1, \r\n  addressDao.queryForEq(\"addressLine\", \"Main Street nr 20\")\r\n  .size());\r\n```","```\r\n@DatabaseTable(tableName = \"libraries\")\r\npublic class Library {  \r\n    // ...\r\n\r\n    @ForeignCollectionField(eager=false)\r\n    private ForeignCollection<Book> books;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\n@DatabaseTable\r\npublic class Book {\r\n    // ...\r\n    @DatabaseField(foreign = true, foreignAutoRefresh = true) \r\n    private Library library;\r\n\r\n    // standard getters, setters\r\n}\r\n```","```\r\nLibrary library = new Library();\r\nlibrary.setName(\"My Library\");\r\nlibraryDao.create(library);\r\n\r\nlibraryDao.refresh(library);\r\n\r\nlibrary.getBooks().add(new Book(\"1984\"));\r\n```","```\r\nBook book = new Book(\"It\");\r\nbook.setLibrary(library);\r\nbookDao.create(book);\r\n```","```\r\nassertEquals(2, bookDao.queryForEq(\"library_id\", library).size());\r\n```","```\r\nList<Library> libraries = libraryDao.queryBuilder()\r\n  .where()\r\n  .in(\"libraryId\", bookDao.queryBuilder()\r\n    .selectColumns(\"library_id\")\r\n    .groupBy(\"library_id\")\r\n    .having(\"count(*) > 1\"))\r\n  .query();\r\n```"]