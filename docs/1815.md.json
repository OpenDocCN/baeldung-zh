["```\r\ndouble PI = 3.1415;\r\n```","```\r\nSystem.out.printf(\"Value with 3 digits after decimal point %.3f %n\", PI);\r\n// OUTPUTS: Value with 3 digits after decimal point 3.142\r\n```","```\r\nDecimalFormat df = new DecimalFormat(\"###.###\");\r\nSystem.out.println(df.format(PI));\r\n```","```\r\nprivate static double round(double value, int places) {\r\n    if (places < 0) throw new IllegalArgumentException();\r\n\r\n    BigDecimal bd = new BigDecimal(Double.toString(value));\r\n    bd = bd.setScale(places, RoundingMode.HALF_UP);\r\n    return bd.doubleValue();\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-math3</artifactId>\r\n    <version>3.5</version>\r\n</dependency>\r\n```","```\r\nPrecision.round(PI, 3);\r\n```","```\r\n<dependency>\r\n    <groupId>org.decimal4j</groupId>\r\n    <artifactId>decimal4j</artifactId>\r\n    <version>1.0.3</version>\r\n</dependency>\r\n```","```\r\nDoubleRounder.round(PI, 3);\r\n```","```\r\nSystem.out.println(DoubleRounder.round(256.025d, 2));\r\n// OUTPUTS: 256.02 instead of expected 256.03\r\n```","```\r\npublic static double roundAvoid(double value, int places) {\r\n    double scale = Math.pow(10, places);\r\n    return Math.round(value * scale) / scale;\r\n}\r\n```","```\r\nSystem.out.println(roundAvoid(1000.0d, 17));\r\n// OUTPUTS: 92.23372036854776 !!\r\nSystem.out.println(roundAvoid(260.775d, 2));\r\n// OUTPUTS: 260.77 instead of expected 260.78\r\n```"]