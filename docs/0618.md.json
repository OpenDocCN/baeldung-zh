["```\r\nserver: \r\n  port: 8081\r\n  servlet: \r\n    context-path: /resource-server\r\n\r\nspring:\r\n  jpa:\r\n    defer-datasource-initialization: true\r\n  security:\r\n    oauth2:\r\n      resourceserver:\r\n        jwt:\r\n          issuer-uri: http://localhost:8083/auth/realms/baeldung\r\n          jwk-set-uri: http://localhost:8083/auth/realms/baeldung/protocol/openid-connect/certs\r\n```","```\r\n@Configuration\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n    @Override\r\n    protected void configure(HttpSecurity http) throws Exception {\r\n        http.cors()\r\n            .and()\r\n              .authorizeRequests()\r\n                .antMatchers(HttpMethod.GET, \"/user/info\", \"/api/foos/**\")\r\n                  .hasAuthority(\"SCOPE_read\")\r\n                .antMatchers(HttpMethod.POST, \"/api/foos\")\r\n                  .hasAuthority(\"SCOPE_write\")\r\n                .anyRequest()\r\n                  .authenticated()\r\n            .and()\r\n              .oauth2ResourceServer()\r\n                .jwt();\r\n    }\r\n}\r\n```","```\r\n    \"attributes\" : {\r\n      \"organization\" : \"baeldung\"\r\n    },\r\n    ```","```\r\n    \"protocolMappers\": [{\r\n      \"id\": \"06e5fc8f-3553-4c75-aef4-5a4d7bb6c0d1\",\r\n      \"name\": \"organization\",\r\n      \"protocol\": \"openid-connect\",\r\n      \"protocolMapper\": \"oidc-usermodel-attribute-mapper\",\r\n      \"consentRequired\": false,\r\n      \"config\": {\r\n        \"userinfo.token.claim\": \"true\",\r\n        \"user.attribute\": \"organization\",\r\n        \"id.token.claim\": \"true\",\r\n        \"access.token.claim\": \"true\",\r\n        \"claim.name\": \"organization\",\r\n        \"jsonType.label\": \"String\"\r\n      }\r\n    }],\r\n    ```","```\r\n{\r\n  jti: \"989ce5b7-50b9-4cc6-bc71-8f04a639461e\"\r\n  exp: 1585242462\r\n  nbf: 0\r\n  iat: 1585242162\r\n  iss: \"http://localhost:8083/auth/realms/baeldung\"\r\n  sub: \"a5461470-33eb-4b2d-82d4-b0484e96ad7f\"\r\n  typ: \"Bearer\"\r\n  azp: \"jwtClient\"\r\n  auth_time: 1585242162\r\n  session_state: \"384ca5cc-8342-429a-879c-c15329820006\"\r\n  acr: \"1\"\r\n  scope: \"profile write read\"\r\n  organization: \"baeldung\"\r\n  preferred_username: \"[[emailÂ protected]](/web/20221126233349/https://www.baeldung.com/cdn-cgi/l/email-protection)\"\r\n}\r\n```","```\r\ngetOrganization(){\r\n  var token = Cookie.get(\"access_token\");\r\n  var payload = this.jwtHelper.decodeToken(token);\r\n  this.organization = payload.organization; \r\n  return this.organization;\r\n}\r\n```","```\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `<nav class=\"navbar navbar-default\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <a class=\"navbar-brand\" href=\"/\">Spring Security Oauth - Authorization Code</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"navbar-brand\">\r\n    <p>{{organization}}</p>\r\n  </div>\r\n</nav>\r\n<router-outlet></router-outlet>`\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n  public organization = \"\";\r\n  constructor(private service: AppService) { }  \r\n\r\n  ngOnInit() {  \r\n    this.organization = this.service.getOrganization();\r\n  }  \r\n}\r\n```","```\r\n@GetMapping(\"/user/info\")\r\npublic Map<String, Object> getUserInfo(@AuthenticationPrincipal Jwt principal) {\r\n    Map<String, String> map = new Hashtable<String, String>();\r\n    map.put(\"user_name\", principal.getClaimAsString(\"preferred_username\"));\r\n    map.put(\"organization\", principal.getClaimAsString(\"organization\"));\r\n    return Collections.unmodifiableMap(map);\r\n} \r\n```","```\r\npublic class OrganizationSubClaimAdapter implements \r\n  Converter<Map<String, Object>, Map<String, Object>> {\r\n\r\n    private final MappedJwtClaimSetConverter delegate = \r\n      MappedJwtClaimSetConverter.withDefaults(Collections.emptyMap());\r\n\r\n    public Map<String, Object> convert(Map<String, Object> claims) {\r\n        Map<String, Object> convertedClaims = this.delegate.convert(claims);\r\n        String organization = convertedClaims.get(\"organization\") != null ? \r\n          (String) convertedClaims.get(\"organization\") : \"unknown\";\r\n\r\n        convertedClaims.put(\"organization\", organization.toUpperCase());\r\n\r\n        return convertedClaims;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic JwtDecoder jwtDecoder(OAuth2ResourceServerProperties properties) {\r\n    NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(\r\n      properties.getJwt().getJwkSetUri()).build();\r\n\r\n    jwtDecoder.setClaimSetConverter(new OrganizationSubClaimAdapter());\r\n    return jwtDecoder;\r\n} \r\n```","```\r\nkeytool -genkeypair -alias mytest \r\n                    -keyalg RSA \r\n                    -keypass mypass \r\n                    -keystore mytest.jks \r\n                    -storepass mypass\r\n```","```\r\nkeytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey\r\n```","```\r\n-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAgIK2Wt4x2EtDl41C7vfp\r\nOsMquZMyOyteO2RsVeMLF/hXIeYvicKr0SQzVkodHEBCMiGXQDz5prijTq3RHPy2\r\n/5WJBCYq7yHgTLvspMy6sivXN7NdYE7I5pXo/KHk4nz+Fa6P3L8+L90E/3qwf6j3\r\nDKWnAgJFRY8AbSYXt1d5ELiIG1/gEqzC0fZmNhhfrBtxwWXrlpUDT0Kfvf0QVmPR\r\nxxCLXT+tEe1seWGEqeOLL5vXRLqmzZcBe1RZ9kQQm43+a9Qn5icSRnDfTAesQ3Cr\r\nlAWJKl2kcWU1HwJqw+dZRSZ1X4kEXNMyzPdPBbGmU6MHdhpywI7SKZT7mX4BDnUK\r\neQIDAQAB\r\n-----END PUBLIC KEY-----\r\n-----BEGIN CERTIFICATE-----\r\nMIIDCzCCAfOgAwIBAgIEGtZIUzANBgkqhkiG9w0BAQsFADA2MQswCQYDVQQGEwJ1\r\nczELMAkGA1UECBMCY2ExCzAJBgNVBAcTAmxhMQ0wCwYDVQQDEwR0ZXN0MB4XDTE2\r\nMDMxNTA4MTAzMFoXDTE2MDYxMzA4MTAzMFowNjELMAkGA1UEBhMCdXMxCzAJBgNV\r\nBAgTAmNhMQswCQYDVQQHEwJsYTENMAsGA1UEAxMEdGVzdDCCASIwDQYJKoZIhvcN\r\nAQEBBQADggEPADCCAQoCggEBAICCtlreMdhLQ5eNQu736TrDKrmTMjsrXjtkbFXj\r\nCxf4VyHmL4nCq9EkM1ZKHRxAQjIhl0A8+aa4o06t0Rz8tv+ViQQmKu8h4Ey77KTM\r\nurIr1zezXWBOyOaV6Pyh5OJ8/hWuj9y/Pi/dBP96sH+o9wylpwICRUWPAG0mF7dX\r\neRC4iBtf4BKswtH2ZjYYX6wbccFl65aVA09Cn739EFZj0ccQi10/rRHtbHlhhKnj\r\niy+b10S6ps2XAXtUWfZEEJuN/mvUJ+YnEkZw30wHrENwq5QFiSpdpHFlNR8CasPn\r\nWUUmdV+JBFzTMsz3TwWxplOjB3YacsCO0imU+5l+AQ51CnkCAwEAAaMhMB8wHQYD\r\nVR0OBBYEFOGefUBGquEX9Ujak34PyRskHk+WMA0GCSqGSIb3DQEBCwUAA4IBAQB3\r\n1eLfNeq45yO1cXNl0C1IQLknP2WXg89AHEbKkUOA1ZKTOizNYJIHW5MYJU/zScu0\r\nyBobhTDe5hDTsATMa9sN5CPOaLJwzpWV/ZC6WyhAWTfljzZC6d2rL3QYrSIRxmsp\r\n/J1Vq9WkesQdShnEGy7GgRgJn4A8CKecHSzqyzXulQ7Zah6GoEUD+vjb+BheP4aN\r\nhiYY1OuXD+HsdKeQqS+7eM5U7WW6dz2Q8mtFJ5qAxjY75T0pPrHwZMlJUhUZ+Q2V\r\nFfweJEaoNB9w9McPe1cAiE+oeejZ0jq0el3/dJsx3rlVqZN+lMhRJJeVHFyeb3XF\r\nlLFCUGhA7hxn2xf3x1JW\r\n-----END CERTIFICATE-----\r\n```","```\r\n<build>\r\n    <resources>\r\n        <resource>\r\n            <directory>src/main/resources</directory>\r\n            <filtering>true</filtering>\r\n            <excludes>\r\n                <exclude>*.jks</exclude>\r\n            </excludes>\r\n        </resource>\r\n    </resources>\r\n</build>\r\n```","```\r\n<build>\r\n    <plugins>\r\n        <plugin>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-maven-plugin</artifactId>\r\n            <configuration>\r\n                <addResources>true</addResources>\r\n            </configuration>\r\n        </plugin>\r\n    </plugins>\r\n</build>\r\n```","```\r\n{\r\n  \"id\": \"59412b8d-aad8-4ab8-84ec-e546900fc124\",\r\n  \"name\": \"java-keystore\",\r\n  \"providerId\": \"java-keystore\",\r\n  \"subComponents\": {},\r\n  \"config\": {\r\n    \"keystorePassword\": [ \"mypass\" ],\r\n    \"keyAlias\": [ \"mytest\" ],\r\n    \"keyPassword\": [ \"mypass\" ],\r\n    \"active\": [ \"true\" ],\r\n    \"keystore\": [\r\n            \"src/main/resources/mytest.jks\"\r\n          ],\r\n    \"priority\": [ \"101\" ],\r\n    \"enabled\": [ \"true\" ],\r\n    \"algorithm\": [ \"RS256\" ]\r\n  }\r\n},\r\n```"]