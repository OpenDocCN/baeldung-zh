["```\r\npublic interface Electronic {\r\n\r\n    // Constant variable\r\n    String LED = \"LED\";\r\n\r\n    // Abstract method\r\n    int getElectricityUse();\r\n\r\n    // Static method\r\n    static boolean isEnergyEfficient(String electtronicType) {\r\n        if (electtronicType.equals(LED)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Default method\r\n    default void printDescription() {\r\n        System.out.println(\"Electronic Description\");\r\n    }\r\n} \r\n```","```\r\npublic class Computer implements Electronic {\r\n\r\n    @Override\r\n    public int getElectricityUse() {\r\n        return 1000;\r\n    }\r\n} \r\n```","```\r\npublic class Employee {\r\n\r\n    private double salary;\r\n\r\n    public double getSalary() {\r\n        return salary;\r\n    }\r\n\r\n    public void setSalary(double salary) {\r\n        this.salary = salary;\r\n    }\r\n}\r\n\r\npublic class EmployeeSalaryComparator implements Comparator<Employee> {\r\n\r\n    @Override\r\n    public int compare(Employee employeeA, Employee employeeB) {\r\n        if (employeeA.getSalary() < employeeB.getSalary()) {\r\n            return -1;\r\n        } else if (employeeA.getSalary() > employeeB.getSalary()) { \r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n} \r\n```","```\r\npublic interface Transform {\r\n    void transform();\r\n}\r\n\r\npublic interface Fly {\r\n    void fly();\r\n}\r\n\r\npublic class Car implements Fly, Transform {\r\n\r\n    @Override\r\n    public void fly() {\r\n        System.out.println(\"I can Fly!!\");\r\n    }\r\n\r\n    @Override\r\n    public void transform() {\r\n        System.out.println(\"I can Transform!!\");\r\n    }\r\n} \r\n```","```\r\npublic interface Shape {\r\n    String name();\r\n} \r\n```","```\r\npublic class Circle implements Shape {\r\n\r\n    @Override\r\n    public String name() {\r\n        return \"Circle\";\r\n    }\r\n} \r\n```","```\r\npublic class Square implements Shape {\r\n\r\n    @Override\r\n    public String name() {\r\n        return \"Square\";\r\n    }\r\n} \r\n```","```\r\nList<Shape> shapes = new ArrayList<>();\r\nShape circleShape = new Circle();\r\nShape squareShape = new Square();\r\n\r\nshapes.add(circleShape);\r\nshapes.add(squareShape);\r\n\r\nfor (Shape shape : shapes) {\r\n    System.out.println(shape.name());\r\n} \r\n```","```\r\npublic interface HasColor {\r\n    String getColor();\r\n}\r\n\r\npublic interface Box extends HasColor {\r\n    int getHeight()\r\n} \r\n```","```\r\npublic interface Transform {\r\n\r\n    void transform();\r\n    default void printSpecs(){\r\n        System.out.println(\"Transform Specification\");\r\n    }\r\n}\r\n\r\npublic abstract class Vehicle implements Transform {} \r\n```"]