["```\r\n@BeforeClass\r\npublic static void loadStopwords() throws IOException {\r\n    stopwords = Files.readAllLines(Paths.get(\"english_stopwords.txt\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveStopwordsManually_thenSuccess() {\r\n    String original = \"The quick brown fox jumps over the lazy dog\"; \r\n    String target = \"quick brown fox jumps lazy dog\";\r\n    String[] allWords = original.toLowerCase().split(\" \");\r\n\r\n    StringBuilder builder = new StringBuilder();\r\n    for(String word : allWords) {\r\n        if(!stopwords.contains(word)) {\r\n            builder.append(word);\r\n            builder.append(' ');\r\n        }\r\n    }\r\n\r\n    String result = builder.toString().trim();\r\n    assertEquals(result, target);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveStopwordsUsingRemoveAll_thenSuccess() {\r\n    ArrayList<String> allWords = \r\n      Stream.of(original.toLowerCase().split(\" \"))\r\n            .collect(Collectors.toCollection(ArrayList<String>::new));\r\n    allWords.removeAll(stopwords);\r\n\r\n    String result = allWords.stream().collect(Collectors.joining(\" \"));\r\n    assertEquals(result, target);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveStopwordsUsingRegex_thenSuccess() {\r\n    String stopwordsRegex = stopwords.stream()\r\n      .collect(Collectors.joining(\"|\", \"\\\\b(\", \")\\\\b\\\\s?\"));\r\n\r\n    String result = original.toLowerCase().replaceAll(stopwordsRegex, \"\");\r\n    assertEquals(result, target);\r\n}\r\n```","```\r\n@Setup\r\npublic void setup() throws IOException {\r\n    data = new String(Files.readAllBytes(Paths.get(\"shakespeare-hamlet.txt\")));\r\n    data = data.toLowerCase();\r\n    stopwords = Files.readAllLines(Paths.get(\"english_stopwords.txt\"));\r\n    stopwordsRegex = stopwords.stream().collect(Collectors.joining(\"|\", \"\\\\b(\", \")\\\\b\\\\s?\"));\r\n}\r\n```","```\r\n@Benchmark\r\npublic String removeManually() {\r\n    String[] allWords = data.split(\" \");\r\n    StringBuilder builder = new StringBuilder();\r\n    for(String word : allWords) {\r\n        if(!stopwords.contains(word)) {\r\n            builder.append(word);\r\n            builder.append(' ');\r\n        }\r\n    }\r\n    return builder.toString().trim();\r\n}\r\n```","```\r\n@Benchmark\r\npublic String removeAll() {\r\n    ArrayList<String> allWords = \r\n      Stream.of(data.split(\" \"))\r\n            .collect(Collectors.toCollection(ArrayList<String>::new));\r\n    allWords.removeAll(stopwords);\r\n    return allWords.stream().collect(Collectors.joining(\" \"));\r\n}\r\n```","```\r\n@Benchmark\r\npublic String replaceRegex() {\r\n    return data.replaceAll(stopwordsRegex, \"\");\r\n}\r\n```","```\r\nBenchmark                           Mode  Cnt   Score    Error  Units\r\nremoveAll                           avgt   60   7.782 ±  0.076  ms/op\r\nremoveManually                      avgt   60   8.186 ±  0.348  ms/op\r\nreplaceRegex                        avgt   60  42.035 ±  1.098  ms/op\r\n```"]