["```\r\nOkHttpClient.Builder builder = new OkHttpClient.Builder();\r\n```","```\r\nint SSL_APPLICATION_PORT = 8443;\r\nString HTTPS_WELCOME_URL = \"https://localhost:\" + SSL_APPLICATION_PORT + \"/welcome\";\r\n```","```\r\n@Test(expected = SSLHandshakeException.class)\r\npublic void whenHTTPSSelfSignedCertGET_thenException() {\r\n    builder.build()\r\n    .newCall(new Request.Builder()\r\n    .url(HTTPS_WELCOME_URL).build())\r\n    .execute();\r\n}\r\n```","```\r\njavax.net.ssl.SSLHandshakeException: PKIX path building failed: \r\n    sun.security.provider.certpath.SunCertPathBuilderException:\r\n    unable to find valid certification path to requested target\r\n    ...\r\n```","```\r\nTrustManager TRUST_ALL_CERTS = new X509TrustManager() {\r\n    @Override\r\n    public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {\r\n    }\r\n\r\n    @Override \r\n    public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {\r\n    }\r\n\r\n    @Override\r\n    public java.security.cert.X509Certificate[] getAcceptedIssuers() {\r\n        return new java.security.cert.X509Certificate[] {};\r\n    }\r\n};\r\n```","```\r\nSSLContext sslContext = SSLContext.getInstance(\"SSL\");\r\nsslContext.init(null, new TrustManager[] { TRUST_ALL_CERTS }, new java.security.SecureRandom());\r\nbuilder.sslSocketFactory(sslContext.getSocketFactory(), (X509TrustManager) TRUST_ALL_CERTS);\r\n```","```\r\n@Test(expected = SSLPeerUnverifiedException.class)\r\npublic void givenTrustAllCerts_whenHTTPSSelfSignedCertGET_thenException() {\r\n    // initializing the SSLContext and set the sslSocketFactory\r\n    builder.build()\r\n        .newCall(new Request.Builder()\r\n        .url(HTTPS_WELCOME_URL).build())\r\n        .execute();\r\n}\r\n```","```\r\njavax.net.ssl.SSLPeerUnverifiedException: Hostname localhost not verified:\r\n    certificate: sha256/bzdWeeiDwIVjErFX98l+ogWy9OFfBJsTRWZLB/bBxbw=\r\n    DN: CN=localhost, OU=localhost, O=localhost, L=localhost, ST=localhost, C=IN\r\n    subjectAltNames: []\r\n```","```\r\nbuilder.hostnameVerifier(new HostnameVerifier() {\r\n    @Override\r\n    public boolean verify(String hostname, SSLSession session) {\r\n        return true;\r\n    }\r\n}); \r\n```","```\r\n@Test\r\npublic void givenTrustAllCertsSkipHostnameVerification_whenHTTPSSelfSignedCertGET_then200OK() {\r\n    // initializing the SSLContext and set the sslSocketFactory\r\n    // set the custom hostnameVerifier\r\n    Response response = builder.build()\r\n        .newCall(new Request.Builder()\r\n        .url(HTTPS_WELCOME_URL).build())\r\n        .execute();\r\n    assertEquals(200, response.code());\r\n    assertNotNull(response.body());\r\n    assertEquals(\"<h1>Welcome to Secured Site</h1>\", response.body()\r\n        .string());\r\n}\r\n```"]