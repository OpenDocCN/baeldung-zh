["```\r\n@BenchmarkMode(Mode.SingleShotTime)\r\n@OutputTimeUnit(TimeUnit.MILLISECONDS)\r\n@Measurement(batchSize = 10000, iterations = 10)\r\n@Warmup(batchSize = 10000, iterations = 10)\r\npublic class StringPerformance {\r\n}\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringConstructor() {\r\n    return new String(\"baeldung\");\r\n}\r\n\r\n@Benchmark\r\npublic String benchmarkStringLiteral() {\r\n    return \"baeldung\";\r\n}\r\n```","```\r\nBenchmark                   Mode  Cnt  Score    Error     Units\r\nbenchmarkStringConstructor  ss     10  16.089 ± 3.355     ms/op\r\nbenchmarkStringLiteral      ss     10  9.523  ± 3.331     ms/op\r\n```","```\r\n@State(Scope.Thread)\r\npublic static class StringPerformanceHints {\r\n    String result = \"\";\r\n    String baeldung = \"baeldung\";\r\n}\r\n\r\n@Benchmark\r\npublic String benchmarkStringDynamicConcat() {\r\n    return result + baeldung;\r\n} \r\n```","```\r\nBenchmark                       1000     10,000\r\nbenchmarkStringDynamicConcat    47.331   4370.411\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringConcat() {\r\n    return result.concat(baeldung);\r\n} \r\n```","```\r\nBenchmark              Mode  Cnt  Score     Error     Units\r\nbenchmarkStringConcat    ss   10  3403.146 ± 852.520  ms/op\r\n```","```\r\nString formatString = \"hello %s, nice to meet you\";\r\n\r\n@Benchmark\r\npublic String benchmarkStringFormat_s() {\r\n    return String.format(formatString, baeldung);\r\n}\r\n```","```\r\nNumber of Iterations      10,000   100,000   1,000,000\r\nbenchmarkStringFormat_s   17.181   140.456   1636.279    ms/op\r\n```","```\r\nBenchmark               Mode  Cnt  Score   Error  Units\r\nbenchmarkStringBuffer   ss    10  1.409  ± 1.665  ms/op\r\nbenchmarkStringBuilder  ss    10  1.200  ± 0.648  ms/op\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringReplace() {\r\n    return longString.replace(\"average\", \" average !!!\");\r\n}\r\n\r\n@Benchmark\r\npublic String benchmarkStringUtilsReplace() {\r\n    return StringUtils.replace(longString, \"average\", \" average !!!\");\r\n}\r\n```","```\r\nBenchmark                     Mode  Cnt  Score   Error   Units\r\nbenchmarkStringReplace         ss   10   6.233  ± 2.922  ms/op\r\nbenchmarkStringUtilsReplace    ss   10   5.355  ± 2.497  ms/op\r\n```","```\r\nBenchmark                     Mode  Cnt   Score    Error     Units\r\nbenchmarkStringReplace         ss   10    48.061   ± 17.157  ms/op\r\nbenchmarkStringUtilsReplace    ss   10    14.478   ±  5.752  ms/op\r\n```","```\r\nString emptyString = \" \";\r\n\r\n@Benchmark\r\npublic String [] benchmarkStringSplit() {\r\n    return longString.split(emptyString);\r\n}\r\n```","```\r\n@Benchmark\r\npublic String [] benchmarkStringSplitPattern() {\r\n    return spacePattern.split(longString, 0);\r\n}\r\n```","```\r\nList stringTokenizer = new ArrayList<>();\r\n\r\n@Benchmark\r\npublic List benchmarkStringTokenizer() {\r\n    StringTokenizer st = new StringTokenizer(longString);\r\n    while (st.hasMoreTokens()) {\r\n        stringTokenizer.add(st.nextToken());\r\n    }\r\n    return stringTokenizer;\r\n}\r\n```","```\r\nList stringSplit = new ArrayList<>();\r\n\r\n@Benchmark\r\npublic List benchmarkStringIndexOf() {\r\n    int pos = 0, end;\r\n    while ((end = longString.indexOf(' ', pos)) >= 0) {\r\n        stringSplit.add(longString.substring(pos, end));\r\n        pos = end + 1;\r\n    }\r\n    stringSplit.add(longString.substring(pos));\r\n    return stringSplit;\r\n}\r\n```","```\r\n@Benchmark\r\npublic List<String> benchmarkGuavaSplitter() {\r\n    return Splitter.on(\" \").trimResults()\r\n      .omitEmptyStrings()\r\n      .splitToList(longString);\r\n}\r\n```","```\r\nBenchmark                     Mode  Cnt    Score    Error    Units\r\nbenchmarkGuavaSplitter         ss   10    4.008  ± 1.836     ms/op\r\nbenchmarkStringIndexOf         ss   10    1.144  ± 0.322     ms/op\r\nbenchmarkStringSplit           ss   10    1.983  ± 1.075     ms/op\r\nbenchmarkStringSplitPattern    ss   10    14.891  ± 5.678    ms/op\r\nbenchmarkStringTokenizer       ss   10    2.277  ± 0.448     ms/op\r\n```","```\r\nint sampleNumber = 100;\r\n\r\n@Benchmark\r\npublic String benchmarkIntegerToString() {\r\n    return Integer.toString(sampleNumber);\r\n}\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringValueOf() {\r\n    return String.valueOf(sampleNumber);\r\n}\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringConvertPlus() {\r\n    return sampleNumber + \"\";\r\n}\r\n```","```\r\nString formatDigit = \"%d\";\r\n\r\n@Benchmark\r\npublic String benchmarkStringFormat_d() {\r\n    return String.format(formatDigit, sampleNumber);\r\n}\r\n```","```\r\nBenchmark                     Mode  Cnt   Score    Error  Units\r\nbenchmarkIntegerToString      ss   10   0.953 ±  0.707  ms/op\r\nbenchmarkStringConvertPlus    ss   10   1.464 ±  1.670  ms/op\r\nbenchmarkStringFormat_d       ss   10  15.656 ±  8.896  ms/op\r\nbenchmarkStringValueOf        ss   10   2.847 ± 11.153  ms/op\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringEquals() {\r\n    return longString.equals(baeldung);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringEqualsIgnoreCase() {\r\n    return longString.equalsIgnoreCase(baeldung);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringMatches() {\r\n    return longString.matches(baeldung);\r\n} \r\n```","```\r\n@Benchmark\r\npublic int benchmarkStringCompareTo() {\r\n    return longString.compareTo(baeldung);\r\n}\r\n```","```\r\nBenchmark                         Mode  Cnt    Score    Error  Units\r\nbenchmarkStringCompareTo           ss   10    2.561 ±  0.899   ms/op\r\nbenchmarkStringEquals              ss   10    1.712 ±  0.839   ms/op\r\nbenchmarkStringEqualsIgnoreCase    ss   10    2.081 ±  1.221   ms/op\r\nbenchmarkStringMatches             ss   10    118.364 ± 43.203 ms/op\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringMatches() {\r\n    return longString.matches(baeldung);\r\n}\r\n```","```\r\nPattern longPattern = Pattern.compile(longString);\r\n\r\n@Benchmark\r\npublic boolean benchmarkPrecompiledMatches() {\r\n    return longPattern.matcher(baeldung).matches();\r\n}\r\n```","```\r\nBenchmark                      Mode  Cnt    Score    Error   Units\r\nbenchmarkPrecompiledMatches    ss   10    29.594  ± 12.784   ms/op\r\nbenchmarkStringMatches         ss   10    106.821 ± 46.963   ms/op\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringIsEmpty() {\r\n    return longString.isEmpty();\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean benchmarkStringLengthZero() {\r\n    return emptyString.length() == 0;\r\n}\r\n```","```\r\nBenchmark                  Mode  Cnt  Score   Error  Units\r\nbenchmarkStringIsEmpty       ss   10  0.295 ± 0.277  ms/op\r\nbenchmarkStringLengthZero    ss   10  0.472 ± 0.840  ms/op\r\n```","```\r\nBenchmark                  Mode  Cnt  Score   Error  Units\r\nbenchmarkStringIsEmpty       ss   10  0.245 ± 0.362  ms/op\r\nbenchmarkStringLengthZero    ss   10  0.351 ± 0.473  ms/op\r\n```","```\r\n@Benchmark\r\npublic String benchmarkStringIntern() {\r\n    return baeldung.intern();\r\n}\r\n```","```\r\nBenchmark               1000   10,000  100,000  1,000,000\r\nbenchmarkStringIntern   0.433  2.243   19.996   204.373\r\n```","```\r\n -XX:+UseG1GC -XX:+UseStringDeduplication\r\n```"]