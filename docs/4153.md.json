["```\r\nprivate final ApplicationContextRunner contextRunner \r\n    = new ApplicationContextRunner(); \r\n```","```\r\n@Configuration\r\n@ConditionalOnClass(ConditionalOnClassIntegrationTest.class)\r\nprotected static class ConditionalOnClassConfiguration {\r\n    @Bean\r\n    public String created() {\r\n        return \"This is created when ConditionalOnClassIntegrationTest \"\r\n               + \"is present on the classpath\";\r\n    }\r\n}\r\n\r\n@Configuration\r\n@ConditionalOnMissingClass(\r\n    \"com.baeldung.autoconfiguration.ConditionalOnClassIntegrationTest\"\r\n)\r\nprotected static class ConditionalOnMissingClassConfiguration {\r\n    @Bean\r\n    public String missed() {\r\n        return \"This is missed when ConditionalOnClassIntegrationTest \"\r\n               + \"is present on the classpath\";\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void whenDependentClassIsPresent_thenBeanCreated() {\r\n    this.contextRunner.withUserConfiguration(ConditionalOnClassConfiguration.class)\r\n        .run(context -> {\r\n            assertThat(context).hasBean(\"created\");\r\n            assertThat(context.getBean(\"created\"))\r\n              .isEqualTo(\"This is created when ConditionalOnClassIntegrationTest \"\r\n                         + \"is present on the classpath\");\r\n        });\r\n}\r\n\r\n@Test\r\npublic void whenDependentClassIsPresent_thenBeanMissing() {\r\n    this.contextRunner.withUserConfiguration(ConditionalOnMissingClassConfiguration.class)\r\n        .run(context -> {\r\n            assertThat(context).doesNotHaveBean(\"missed\");\r\n        });\r\n} \r\n```","```\r\n@Test\r\npublic void whenDependentClassIsNotPresent_thenBeanMissing() {\r\n    this.contextRunner.withUserConfiguration(ConditionalOnClassConfiguration.class)\r\n        .withClassLoader(new FilteredClassLoader(ConditionalOnClassIntegrationTest.class))\r\n        .run((context) -> {\r\n            assertThat(context).doesNotHaveBean(\"created\");\r\n            assertThat(context).doesNotHaveBean(ConditionalOnClassIntegrationTest.class);\r\n        });\r\n}\r\n\r\n@Test\r\npublic void whenDependentClassIsNotPresent_thenBeanCreated() {\r\n    this.contextRunner.withUserConfiguration(ConditionalOnMissingClassConfiguration.class)\r\n        .withClassLoader(new FilteredClassLoader(ConditionalOnClassIntegrationTest.class))\r\n        .run((context) -> {\r\n            assertThat(context).hasBean(\"missed\");\r\n            assertThat(context).getBean(\"missed\")\r\n              .isEqualTo(\"This is missed when ConditionalOnClassIntegrationTest \"\r\n                         + \"is present on the classpath\");\r\n            assertThat(context).doesNotHaveBean(ConditionalOnClassIntegrationTest.class);\r\n        });\r\n}\r\n```","```\r\n@Configuration\r\nprotected static class BasicConfiguration {\r\n    @Bean\r\n    public String created() {\r\n        return \"This is always created\";\r\n    }\r\n}\r\n@Configuration\r\n@ConditionalOnBean(name = \"created\")\r\nprotected static class ConditionalOnBeanConfiguration {\r\n    @Bean\r\n    public String createOnBean() {\r\n        return \"This is created when bean (name=created) is present\";\r\n    }\r\n}\r\n@Configuration\r\n@ConditionalOnMissingBean(name = \"created\")\r\nprotected static class ConditionalOnMissingBeanConfiguration {\r\n    @Bean\r\n    public String createOnMissingBean() {\r\n        return \"This is created when bean (name=created) is missing\";\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenDependentBeanIsPresent_thenConditionalBeanCreated() {\r\n    this.contextRunner.withUserConfiguration(\r\n        BasicConfiguration.class, \r\n        ConditionalOnBeanConfiguration.class\r\n    )\r\n    // ommitted for brevity\r\n}\r\n@Test\r\npublic void whenDependentBeanIsNotPresent_thenConditionalMissingBeanCreated() {\r\n    this.contextRunner.withUserConfiguration(ConditionalOnMissingBeanConfiguration.class)\r\n    // ommitted for brevity\r\n}\r\n```","```\r\ncom.baeldung.service=custom\r\n```","```\r\n@Configuration\r\n@TestPropertySource(\"classpath:ConditionalOnPropertyTest.properties\")\r\nprotected static class SimpleServiceConfiguration {\r\n    @Bean\r\n    @ConditionalOnProperty(name = \"com.baeldung.service\", havingValue = \"default\")\r\n    @ConditionalOnMissingBean\r\n    public DefaultService defaultService() {\r\n        return new DefaultService();\r\n    }\r\n```","```\r\n @Bean\r\n    @ConditionalOnProperty(name = \"com.baeldung.service\", havingValue = \"custom\")\r\n    @ConditionalOnMissingBean\r\n    public CustomService customService() {\r\n        return new CustomService();\r\n    }\r\n} \r\n```","```\r\n@Test\r\npublic void whenGivenCustomPropertyValue_thenCustomServiceCreated() {\r\n    this.contextRunner.withPropertyValues(\"com.baeldung.service=custom\")\r\n        .withUserConfiguration(SimpleServiceConfiguration.class)\r\n        .run(context -> {\r\n            assertThat(context).hasBean(\"customService\");\r\n            SimpleService simpleService = context.getBean(CustomService.class);\r\n            assertThat(simpleService.serve()).isEqualTo(\"Custom Service\");\r\n            assertThat(context).doesNotHaveBean(\"defaultService\");\r\n        });\r\n}\r\n\r\n@Test\r\npublic void whenGivenDefaultPropertyValue_thenDefaultServiceCreated() {\r\n    this.contextRunner.withPropertyValues(\"com.baeldung.service=default\")\r\n        .withUserConfiguration(SimpleServiceConfiguration.class)\r\n        .run(context -> {\r\n            assertThat(context).hasBean(\"defaultService\");\r\n            SimpleService simpleService = context.getBean(DefaultService.class);\r\n            assertThat(simpleService.serve()).isEqualTo(\"Default Service\");\r\n            assertThat(context).doesNotHaveBean(\"customService\");\r\n        });\r\n} \r\n```"]