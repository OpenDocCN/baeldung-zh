["```\r\npublic class VideoFrame {\r\n    private long number;\r\n    // additional data fields\r\n\r\n    // constructor, getters, setters\r\n}\r\n```","```\r\npublic class VideoStreamServer extends SubmissionPublisher<VideoFrame> {\r\n\r\n    public VideoStreamServer() {\r\n        super(Executors.newSingleThreadExecutor(), 5);\r\n    }\r\n}\r\n```","```\r\npublic class VideoPlayer implements Flow.Subscriber<VideoFrame> {\r\n\r\n    Flow.Subscription subscription = null;\r\n\r\n    @Override\r\n    public void onSubscribe(Flow.Subscription subscription) {\r\n        this.subscription = subscription;\r\n        subscription.request(1);\r\n    }\r\n\r\n    @Override\r\n    public void onNext(VideoFrame item) {\r\n        log.info(\"play #{}\" , item.getNumber());\r\n        subscription.request(1);\r\n    }\r\n\r\n    @Override\r\n    public void onError(Throwable throwable) {\r\n        log.error(\"There is an error in video streaming:{}\" , throwable.getMessage());\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onComplete() {\r\n        log.error(\"Video has ended\");\r\n    }\r\n}\r\n```","```\r\nVideoStreamServer streamServer = new VideoStreamServer();\r\nstreamServer.subscribe(new VideoPlayer());\r\n\r\n// submit video frames\r\n\r\nScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\r\nAtomicLong frameNumber = new AtomicLong();\r\nexecutor.scheduleWithFixedDelay(() -> {\r\n    streamServer.offer(new VideoFrame(frameNumber.getAndIncrement()), (subscriber, videoFrame) -> {\r\n        subscriber.onError(new RuntimeException(\"Frame#\" + videoFrame.getNumber()\r\n        + \" droped because of backpressure\"));\r\n        return true;\r\n    });\r\n}, 0, 1, TimeUnit.MILLISECONDS);\r\n\r\nsleep(1000);\r\n```","```\r\nStream<VideoFrame> videoStream = Stream.iterate(new VideoFrame(0), videoFrame -> {\r\n    // sleep for 1ms;\r\n    return new VideoFrame(videoFrame.getNumber() + 1);\r\n});\r\n```","```\r\nFlowable\r\n  .fromStream(videoStream)\r\n  .subscribeOn(Schedulers.from(Executors.newSingleThreadExecutor()))\r\n```","```\r\nFlowable\r\n  .create(new FlowableOnSubscribe<VideoFrame>() {\r\n      AtomicLong frame = new AtomicLong();\r\n      @Override\r\n      public void subscribe(@NonNull FlowableEmitter<VideoFrame> emitter) {\r\n          while (true) {\r\n              emitter.onNext(new VideoFrame(frame.incrementAndGet()));\r\n              //sleep for 1 ms to simualte delay\r\n          }\r\n      }\r\n  }, /* Set Backpressure Strategy Here */)\r\n```","```\r\nvideoFlowable\r\n  .observeOn(Schedulers.from(Executors.newSingleThreadExecutor()))\r\n  .subscribe(item -> {\r\n      log.info(\"play #\" + item.getNumber());\r\n      // sleep for 30 ms to simualate frame display\r\n  });\r\n```","```\r\nFlowable\r\n  .fromStream(videoStream)\r\n  .subscribeOn(Schedulers.from(Executors.newSingleThreadExecutor()))\r\n  .onBackpressureBuffer(5, null, BackpressureOverflowStrategy.ERROR)\r\n  .observeOn(Schedulers.from(Executors.newSingleThreadExecutor()))\r\n  .subscribe(item -> {\r\n       log.info(\"play #\" + item.getNumber()); \r\n       // sleep for 30 ms to simualate frame display \r\n  });\r\n```"]