["```\r\n@Entity\r\nclass Passenger {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    @Column(nullable = false)\r\n    private Long id;\r\n\r\n    @Basic(optional = false)\r\n    @Column(nullable = false)\r\n    private String firstName;\r\n\r\n    @Basic(optional = false)\r\n    @Column(nullable = false)\r\n    private String lastName;\r\n\r\n    @Basic(optional = false)\r\n    @Column(nullable = false)\r\n    private int seatNumber;\r\n\r\n    // constructor, getters etc.\r\n}\r\n```","```\r\npublic interface JpaRepository<T, ID>\r\n  extends PagingAndSortingRepository<T, ID>, QueryByExampleExecutor<T> {}\r\n```","```\r\npublic interface QueryByExampleExecutor<T> {\r\n    <S extends T> Optional<S> findOne(Example<S> var1);\r\n    <S extends T> Iterable<S> findAll(Example<S> var1);\r\n    <S extends T> Iterable<S> findAll(Example<S> var1, Sort var2);\r\n    <S extends T> Page<S> findAll(Example<S> var1, Pageable var2);\r\n    <S extends T> long count(Example<S> var1);\r\n    <S extends T> boolean exists(Example<S> var1);\r\n}\r\n```","```\r\npublic interface Example<T> {\r\n\r\n    static <T> org.springframework.data.domain.Example<T> of(T probe) {\r\n        return new TypedExample(probe, ExampleMatcher.matching());\r\n    }\r\n\r\n    static <T> org.springframework.data.domain.Example<T> of(T probe, ExampleMatcher matcher) {\r\n        return new TypedExample(probe, matcher);\r\n    }\r\n\r\n    T getProbe();\r\n\r\n    ExampleMatcher getMatcher();\r\n\r\n    default Class<T> getProbeType() {\r\n        return ProxyUtils.getUserClass(this.getProbe().getClass());\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenPassengers_whenFindByExample_thenExpectedReturned() {\r\n    Example<Passenger> example = Example.of(Passenger.from(\"Fred\", \"Bloggs\", null));\r\n\r\n    Optional<Passenger> actual = repository.findOne(example);\r\n\r\n    assertTrue(actual.isPresent());\r\n    assertEquals(Passenger.from(\"Fred\", \"Bloggs\", 22), actual.get());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPassengers_whenFindByExampleCaseInsensitiveMatcher_thenExpectedReturned() {\r\n    ExampleMatcher caseInsensitiveExampleMatcher = ExampleMatcher.matchingAll().withIgnoreCase();\r\n    Example<Passenger> example = Example.of(Passenger.from(\"fred\", \"bloggs\", null),\r\n      caseInsensitiveExampleMatcher);\r\n\r\n    Optional<Passenger> actual = repository.findOne(example);\r\n\r\n    assertTrue(actual.isPresent());\r\n    assertEquals(Passenger.from(\"Fred\", \"Bloggs\", 22), actual.get());\r\n}\r\n```","```\r\n@Test\r\npublic void givenPassengers_whenFindByExampleCustomMatcher_thenExpectedReturned() {\r\n    Passenger jill = Passenger.from(\"Jill\", \"Smith\", 50);\r\n    Passenger eve = Passenger.from(\"Eve\", \"Jackson\", 95);\r\n    Passenger fred = Passenger.from(\"Fred\", \"Bloggs\", 22);\r\n    Passenger siya = Passenger.from(\"Siya\", \"Kolisi\", 85);\r\n    Passenger ricki = Passenger.from(\"Ricki\", \"Bobbie\", 36);\r\n\r\n    ExampleMatcher customExampleMatcher = ExampleMatcher.matchingAny()\r\n      .withMatcher(\"firstName\", ExampleMatcher.GenericPropertyMatchers.contains().ignoreCase())\r\n      .withMatcher(\"lastName\", ExampleMatcher.GenericPropertyMatchers.contains().ignoreCase());\r\n\r\n    Example<Passenger> example = Example.of(Passenger.from(\"e\", \"s\", null), customExampleMatcher);\r\n\r\n    List<Passenger> passengers = repository.findAll(example);\r\n\r\n    assertThat(passengers, contains(jill, eve, fred, siya));\r\n    assertThat(passengers, not(contains(ricki)));\r\n}\r\n```","```\r\n@Test\r\npublic void givenPassengers_whenFindByIgnoringMatcher_thenExpectedReturned() {\r\n    Passenger jill = Passenger.from(\"Jill\", \"Smith\", 50); \r\n    Passenger eve = Passenger.from(\"Eve\", \"Jackson\", 95); \r\n    Passenger fred = Passenger.from(\"Fred\", \"Bloggs\", 22);\r\n    Passenger siya = Passenger.from(\"Siya\", \"Kolisi\", 85);\r\n    Passenger ricki = Passenger.from(\"Ricki\", \"Bobbie\", 36);\r\n\r\n    ExampleMatcher ignoringExampleMatcher = ExampleMatcher.matchingAny()\r\n      .withMatcher(\"lastName\", ExampleMatcher.GenericPropertyMatchers.startsWith().ignoreCase())\r\n      .withIgnorePaths(\"firstName\", \"seatNumber\");\r\n\r\n    Example<Passenger> example = Example.of(Passenger.from(null, \"b\", null), ignoringExampleMatcher);\r\n\r\n    List<Passenger> passengers = repository.findAll(example);\r\n\r\n    assertThat(passengers, contains(fred, ricki));\r\n    assertThat(passengers, not(contains(jill));\r\n    assertThat(passengers, not(contains(eve)); \r\n    assertThat(passengers, not(contains(siya)); \r\n}\r\n```"]