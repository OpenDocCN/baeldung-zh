["```\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-core</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.apache.logging.log4j</groupId>\r\n    <artifactId>log4j-slf4j-impl</artifactId>\r\n    <version>2.11.0</version>\r\n</dependency>\r\n```","```\r\nConfigurationBuilder<BuiltConfiguration> builder\r\n = ConfigurationBuilderFactory.newConfigurationBuilder();\r\n```","```\r\nAppenderComponentBuilder console \r\n  = builder.newAppender(\"stdout\", \"Console\"); \r\n\r\nbuilder.add(console);\r\n\r\nAppenderComponentBuilder file \r\n  = builder.newAppender(\"log\", \"File\"); \r\nfile.addAttribute(\"fileName\", \"target/logging.log\");\r\n\r\nbuilder.add(file);\r\n```","```\r\nAppenderComponentBuilder rollingFile \r\n  = builder.newAppender(\"rolling\", \"RollingFile\");\r\nrollingFile.addAttribute(\"fileName\", \"rolling.log\");\r\nrollingFile.addAttribute(\"filePattern\", \"rolling-%d{MM-dd-yy}.log.gz\");\r\n\r\nbuilder.add(rollingFile); \r\n```","```\r\nFilterComponentBuilder flow = builder.newFilter(\r\n  \"MarkerFilter\", \r\n  Filter.Result.ACCEPT,\r\n  Filter.Result.DENY);  \r\nflow.addAttribute(\"marker\", \"FLOW\");\r\n\r\nconsole.add(flow);\r\n```","```\r\nLayoutComponentBuilder standard \r\n  = builder.newLayout(\"PatternLayout\");\r\nstandard.addAttribute(\"pattern\", \"%d [%t] %-5level: %msg%n%throwable\");\r\n\r\nconsole.add(standard);\r\nfile.add(standard);\r\nrolling.add(standard);\r\n```","```\r\nRootLoggerComponentBuilder rootLogger \r\n  = builder.newRootLogger(Level.ERROR);\r\nrootLogger.add(builder.newAppenderRef(\"stdout\"));\r\n\r\nbuilder.add(rootLogger);\r\n```","```\r\nLoggerComponentBuilder logger = builder.newLogger(\"com\", Level.DEBUG);\r\nlogger.add(builder.newAppenderRef(\"log\"));\r\nlogger.addAttribute(\"additivity\", false);\r\n\r\nbuilder.add(logger);\r\n```","```\r\nComponentBuilder triggeringPolicies = builder.newComponent(\"Policies\")\r\n  .addComponent(builder.newComponent(\"CronTriggeringPolicy\")\r\n    .addAttribute(\"schedule\", \"0 0 0 * * ?\"))\r\n  .addComponent(builder.newComponent(\"SizeBasedTriggeringPolicy\")\r\n    .addAttribute(\"size\", \"100M\"));\r\n\r\nrolling.addComponent(triggeringPolicies);\r\n```","```\r\nbuilder.writeXmlConfiguration(System.out);\r\n```","```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<Configuration>\r\n   <Appenders>\r\n      <Console name=\"stdout\">\r\n         <PatternLayout pattern=\"%d [%t] %-5level: %msg%n%throwable\" />\r\n         <MarkerFilter onMatch=\"ACCEPT\" onMisMatch=\"DENY\" marker=\"FLOW\" />\r\n      </Console>\r\n      <RollingFile name=\"rolling\" \r\n        fileName=\"target/rolling.log\" \r\n        filePattern=\"target/archive/rolling-%d{MM-dd-yy}.log.gz\">\r\n         <PatternLayout pattern=\"%d [%t] %-5level: %msg%n%throwable\" />\r\n         <Policies>\r\n            <CronTriggeringPolicy schedule=\"0 0 0 * * ?\" />\r\n            <SizeBasedTriggeringPolicy size=\"100M\" />\r\n         </Policies>\r\n      </RollingFile>\r\n      <File name=\"FileSystem\" fileName=\"target/logging.log\">\r\n         <PatternLayout pattern=\"%d [%t] %-5level: %msg%n%throwable\" />\r\n      </File>\r\n   </Appenders>\r\n   <Loggers>\r\n      <Logger name=\"com\" level=\"DEBUG\" additivity=\"false\">\r\n         <AppenderRef ref=\"log\" />\r\n      </Logger>\r\n      <Root level=\"ERROR\" additivity=\"true\">\r\n         <AppenderRef ref=\"stdout\" />\r\n      </Root>\r\n   </Loggers>\r\n</Configuration>\r\n```","```\r\nConfigurator.initialize(builder.build());\r\n```","```\r\npublic class CustomConfigFactory\r\n  extends ConfigurationFactory {\r\n\r\n    public Configuration createConfiguration(\r\n      LoggerContext context, \r\n      ConfigurationSource src) {\r\n\r\n        ConfigurationBuilder<BuiltConfiguration> builder = super\r\n          .newConfigurationBuilder();\r\n\r\n        // ... configure appenders, filters, etc.\r\n\r\n        return builder.build();\r\n    }\r\n\r\n    public String[] getSupportedTypes() { \r\n        return new String[] { \"*\" };\r\n    }\r\n}\r\n```","```\r\nstatic {\r\n    ConfigurationFactory custom = new CustomConfigFactory();\r\n    ConfigurationFactory.setConfigurationFactory(custom);\r\n}\r\n```","```\r\n-Dlog4j2.configurationFactory=com.baeldung.log4j2.CustomConfigFactory\r\n```","```\r\n@Plugin(\r\n  name = \"CustomConfigurationFactory\", \r\n  category = ConfigurationFactory.CATEGORY)\r\n@Order(50)\r\npublic class CustomConfigFactory\r\n  extends ConfigurationFactory {\r\n\r\n  // ... rest of implementation\r\n}\r\n```","```\r\npublic Configuration createConfiguration(\r\n  LoggerContext context, \r\n  ConfigurationSource src) {\r\n    return new WithXmlConfiguration(context, src);\r\n} \r\n```","```\r\npublic class WithXmlConfiguration extends XmlConfiguration {\r\n\r\n    @Override\r\n    protected void doConfigure() {\r\n        super.doConfigure(); // parse xml document\r\n\r\n        // ... add our custom configuration\r\n    }\r\n}\r\n```"]