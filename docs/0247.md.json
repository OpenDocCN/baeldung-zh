["```\r\n@Bean\r\npublic RouteLocator myRoutes(RouteLocatorBuilder builder) {\r\n    return builder.routes()\r\n        .route(\"requestratelimiter_route\", p -> p\r\n            .path(\"/example\")\r\n            .filters(f -> f.requestRateLimiter(r -> r.setRateLimiter(redisRateLimiter())))\r\n            .uri(\"http://example.org\"))\r\n        .build();\r\n}\r\n```","```\r\n@Bean\r\npublic RedisRateLimiter redisRateLimiter() {\r\n    return new RedisRateLimiter(1, 1, 1);\r\n}\r\n```","```\r\n@Component\r\npublic class SimpleClientAddressResolver implements KeyResolver {\r\n    @Override\r\n    public Mono<String> resolve(ServerWebExchange exchange) {\r\n        return Optional.ofNullable(exchange.getRequest().getRemoteAddress())\r\n            .map(InetSocketAddress::getAddress)\r\n            .map(InetAddress::getHostAddress)\r\n            .map(Mono::just)\r\n            .orElse(Mono.empty());\r\n    }\r\n}\r\n```","```\r\nbuilder.routes()\r\n    .route(\"ipaddress_route\", p -> p\r\n        .path(\"/example2\")\r\n        .filters(f -> f.requestRateLimiter(r -> r.setRateLimiter(redisRateLimiter())\r\n            .setDenyEmptyKey(false)\r\n            .setKeyResolver(new SimpleClientAddressResolver())))\r\n        .uri(\"http://example.org\"))\r\n.build();\r\n```","```\r\n@Primary\r\n@Component\r\npublic class ProxiedClientAddressResolver implements KeyResolver {\r\n    @Override\r\n    public Mono<String> resolve(ServerWebExchange exchange) {\r\n        XForwardedRemoteAddressResolver resolver = XForwardedRemoteAddressResolver.maxTrustedIndex(1);\r\n        InetSocketAddress inetSocketAddress = resolver.resolve(exchange);\r\n        return Mono.just(inetSocketAddress.getAddress().getHostAddress());\r\n    }\r\n}\r\n```"]