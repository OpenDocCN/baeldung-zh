["```\r\nimport javax.xml.namespace.NamespaceContext;\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport javax.xml.parsers.DocumentBuilderFactory;\r\nimport javax.xml.parsers.ParserConfigurationException;\r\nimport javax.xml.xpath.XPath;\r\nimport javax.xml.xpath.XPathConstants;\r\nimport javax.xml.xpath.XPathExpressionException;\r\nimport javax.xml.xpath.XPathFactory;\r\n\r\nimport org.w3c.dom.Document;\r\n\r\npublic class DefaultParser {\r\n\r\n    private File file;\r\n\r\n    public DefaultParser(File file) {\r\n        this.file = file;\r\n    }\r\n} \r\n```","```\r\nFileInputStream fileIS = new FileInputStream(this.getFile());\r\nDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\r\nDocumentBuilder builder = builderFactory.newDocumentBuilder();\r\nDocument xmlDocument = builder.parse(fileIS);\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\nString expression = \"/Tutorials/Tutorial\";\r\nnodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\r\n```","```\r\nDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\r\n```","```\r\nDocumentBuilder builder = builderFactory.newDocumentBuilder();\r\n```","```\r\nDocument xmlDocument = builder.parse(fileIS);\r\n```","```\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\n```","```\r\nxPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\r\n```","```\r\n<?xml version=\"1.0\"?>\r\n<Tutorials>\r\n    <Tutorial tutId=\"01\" type=\"java\">\r\n        <title>Guava</title>\r\n  <description>Introduction to Guava</description>\r\n  <date>04/04/2016</date>\r\n  <author>GuavaAuthor</author>\r\n    </Tutorial>\r\n    <Tutorial tutId=\"02\" type=\"java\">\r\n        <title>XML</title>\r\n  <description>Introduction to XPath</description>\r\n  <date>04/05/2016</date>\r\n  <author>XMLAuthor</author>\r\n    </Tutorial>\r\n</Tutorials>\r\n```","```\r\nFileInputStream fileIS = new FileInputStream(this.getFile());\r\nDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\r\nDocumentBuilder builder = builderFactory.newDocumentBuilder();\r\nDocument xmlDocument = builder.parse(fileIS);\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\nString expression = \"/Tutorials/Tutorial\";\r\nnodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET); \r\n```","```\r\nDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\r\nDocumentBuilder builder = builderFactory.newDocumentBuilder();\r\nDocument xmlDocument = builder.parse(this.getFile());\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\nString expression = \"/Tutorials/Tutorial[@tutId=\" + \"'\" + id + \"'\" + \"]\";\r\nnode = (Node) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODE); \r\n```","```\r\nDocument xmlDocument = builder.parse(this.getFile());\r\nthis.clean(xmlDocument);\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\nString expression = \"//Tutorial[descendant::title[text()=\" + \"'\" + name + \"'\" + \"]]\";\r\nnodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET); \r\n```","```\r\nXPath xPath = XPathFactory.newInstance().newXPath();\r\nString expression = \"//Tutorial[number(translate(date, '/', '')) > \" + date + \"]\";\r\nnodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET); \r\n```","```\r\n<?xml version=\"1.0\"?>\r\n<Tutorials >\r\n\r\n</Tutorials>\r\n```","```\r\nxPath.setNamespaceContext(new NamespaceContext() {\r\n    @Override\r\n    public Iterator getPrefixes(String arg0) {\r\n        return null;\r\n    }\r\n    @Override\r\n    public String getPrefix(String arg0) {\r\n        return null;\r\n    }\r\n    @Override\r\n    public String getNamespaceURI(String arg0) {\r\n        if (\"bdn\".equals(arg0)) {\r\n            return \"/full_archive\";\r\n        }\r\n        return null;\r\n    }\r\n}); \r\n```","```\r\nString expression = \"/bdn:Tutorials/bdn:Tutorial\";\r\nnodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET); \r\n```","```\r\nNodeList childs = node.getChildNodes();\r\nfor (int n = childs.getLength() - 1; n >= 0; n--) {\r\n    Node child = childs.item(n);\r\n    short nodeType = child.getNodeType();\r\n    if (nodeType == Node.ELEMENT_NODE) {\r\n        clean(child);\r\n    }\r\n    else if (nodeType == Node.TEXT_NODE) {\r\n        String trimmedNodeVal = child.getNodeValue().trim();\r\n        if (trimmedNodeVal.length() == 0){\r\n            node.removeChild(child);\r\n        }\r\n        else {\r\n            child.setNodeValue(trimmedNodeVal);\r\n        }\r\n    } else if (nodeType == Node.COMMENT_NODE) {\r\n        node.removeChild(child);\r\n    }\r\n}\r\n```"]