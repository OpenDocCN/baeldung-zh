["```\r\nSet<String> aNewSet = Sets.newHashSet();\r\n```","```\r\n@Test\r\npublic void whenCalculatingUnionOfSets_thenCorrect() {\r\n    Set<Character> first = ImmutableSet.of('a', 'b', 'c');\r\n    Set<Character> second = ImmutableSet.of('b', 'c', 'd');\r\n\r\n    Set<Character> union = Sets.union(first, second);\r\n    assertThat(union, containsInAnyOrder('a', 'b', 'c', 'd'));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculatingCartesianProductOfSets_thenCorrect() {\r\n    Set<Character> first = ImmutableSet.of('a', 'b');\r\n    Set<Character> second = ImmutableSet.of('c', 'd');\r\n    Set<List<Character>> result =\r\n      Sets.cartesianProduct(ImmutableList.of(first, second));\r\n\r\n    Function<List<Character>, String> func =\r\n      new Function<List<Character>, String>() {\r\n        public String apply(List<Character> input) {\r\n            return Joiner.on(\" \").join(input);\r\n        }\r\n    };\r\n    Iterable<String> joined = Iterables.transform(result, func);\r\n    assertThat(joined, containsInAnyOrder(\"a c\", \"a d\", \"b c\", \"b d\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculatingSetIntersection_thenCorrect() {\r\n    Set<Character> first = ImmutableSet.of('a', 'b', 'c');\r\n    Set<Character> second = ImmutableSet.of('b', 'c', 'd');\r\n\r\n    Set<Character> intersection = Sets.intersection(first, second);\r\n    assertThat(intersection, containsInAnyOrder('b', 'c'));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculatingSetSymmetricDifference_thenCorrect() {\r\n    Set<Character> first = ImmutableSet.of('a', 'b', 'c');\r\n    Set<Character> second = ImmutableSet.of('b', 'c', 'd');\r\n\r\n    Set<Character> intersection = Sets.symmetricDifference(first, second);\r\n    assertThat(intersection, containsInAnyOrder('a', 'd'));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCalculatingPowerSet_thenCorrect() {\r\n    Set<Character> chars = ImmutableSet.of('a', 'b');\r\n\r\n    Set<Set<Character>> result = Sets.powerSet(chars);\r\n\r\n    Set<Character> empty =  ImmutableSet.<Character> builder().build();\r\n    Set<Character> a = ImmutableSet.of('a');\r\n    Set<Character> b = ImmutableSet.of('b');\r\n    Set<Character> aB = ImmutableSet.of('a', 'b');\r\n\r\n    assertThat(result, contains(empty, a, b, aB));\r\n}\r\n```","```\r\n@Test\r\npublic void whenCreatingRangeOfIntegersSet_thenCreated() {\r\n    int start = 10;\r\n    int end = 30;\r\n    ContiguousSet<Integer> set = ContiguousSet.create(\r\n      Range.closed(start, end), DiscreteDomain.integers());\r\n\r\n    assertEquals(21, set.size());\r\n    assertEquals(10, set.first().intValue());\r\n    assertEquals(30, set.last().intValue());\r\n}\r\n```","```\r\n@Test\r\npublic void whenUsingRangeSet_thenCorrect() {\r\n    RangeSet<Integer> rangeSet = TreeRangeSet.create();\r\n    rangeSet.add(Range.closed(1, 10));\r\n    rangeSet.add(Range.closed(12, 15));\r\n\r\n    assertEquals(2, rangeSet.asRanges().size());\r\n\r\n    rangeSet.add(Range.closed(10, 12));\r\n    assertTrue(rangeSet.encloses(Range.closed(1, 15)));\r\n    assertEquals(1, rangeSet.asRanges().size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenInsertDuplicatesInMultiSet_thenInserted() {\r\n    Multiset<String> names = HashMultiset.create();\r\n    names.add(\"John\");\r\n    names.add(\"Adam\", 3);\r\n    names.add(\"John\");\r\n\r\n    assertEquals(2, names.count(\"John\"));\r\n    names.remove(\"John\");\r\n    assertEquals(1, names.count(\"John\"));\r\n\r\n    assertEquals(3, names.count(\"Adam\"));\r\n    names.remove(\"Adam\", 2);\r\n    assertEquals(1, names.count(\"Adam\"));\r\n}\r\n```","```\r\n@Test\r\npublic void whenGetTopOcurringElementsWithMultiSet_thenCorrect() {\r\n    Multiset<String> names = HashMultiset.create();\r\n    names.add(\"John\");\r\n    names.add(\"Adam\", 5);\r\n    names.add(\"Jane\");\r\n    names.add(\"Tom\", 2);\r\n\r\n    Set<String> sorted = Multisets.copyHighestCountFirst(names).elementSet();\r\n    List<String> sortedAsList = Lists.newArrayList(sorted);\r\n    assertEquals(\"Adam\", sortedAsList.get(0));\r\n    assertEquals(\"Tom\", sortedAsList.get(1));\r\n}\r\n```"]