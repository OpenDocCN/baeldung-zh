["```\r\n<dependency>\r\n    <groupId>org.apache.kafka</groupId>\r\n    <artifactId>kafka-clients</artifactId>\r\n    <version>2.8.0</version>\r\n</dependency>\r\n```","```\r\nProperties producerProps = new Properties();\r\nproducerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\n```","```\r\nproducerProps.put(\"enable.idempotence\", \"true\");\r\nproducerProps.put(\"transactional.id\", \"prod-1\");\r\n\r\nKafkaProducer<String, String> producer = new KafkaProducer(producerProps);\r\n```","```\r\nproducer.initTransactions();\r\n```","```\r\nProperties consumerProps = new Properties();\r\nconsumerProps.put(\"bootstrap.servers\", \"localhost:9092\");\r\nconsumerProps.put(\"group.id\", \"my-group-id\");\r\nconsumerProps.put(\"enable.auto.commit\", \"false\");\r\nconsumerProps.put(\"isolation.level\", \"read_committed\");\r\nKafkaConsumer<String, String> consumer = new KafkaConsumer<>(consumerProps);\r\nconsumer.subscribe(singleton(“sentences”));\r\n```","```\r\nConsumerRecords<String, String> records = consumer.poll(ofSeconds(60));\r\nMap<String, Integer> wordCountMap =\r\n  records.records(new TopicPartition(\"input\", 0))\r\n    .stream()\r\n    .flatMap(record -> Stream.of(record.value().split(\" \")))\r\n    .map(word -> Tuple.of(word, 1))\r\n    .collect(Collectors.toMap(tuple -> \r\n      tuple.getKey(), t1 -> t1.getValue(), (v1, v2) -> v1 + v2));\r\n```","```\r\nproducer.beginTransaction();\r\n```","```\r\nwordCountMap.forEach((key,value) -> \r\n    producer.send(new ProducerRecord<String,String>(\"counts\",key,value.toString())));\r\n```","```\r\nMap<TopicPartition, OffsetAndMetadata> offsetsToCommit = new HashMap<>();\r\nfor (TopicPartition partition : records.partitions()) {\r\n    List<ConsumerRecord<String, String>> partitionedRecords = records.records(partition);\r\n    long offset = partitionedRecords.get(partitionedRecords.size() - 1).offset();\r\n    offsetsToCommit.put(partition, new OffsetAndMetadata(offset + 1));\r\n}\r\n```","```\r\nproducer.sendOffsetsToTransaction(offsetsToCommit, \"my-group-id\");\r\n```","```\r\nproducer.commitTransaction();\r\n```","```\r\ntry {\r\n  // ... read from input topic\r\n  // ... transform\r\n  // ... write to output topic\r\n  producer.commitTransaction();\r\n} catch ( Exception e ) {\r\n  producer.abortTransaction();\r\n}\r\n```"]