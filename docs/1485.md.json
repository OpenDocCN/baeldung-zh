["```\r\ndef list = [1,2,3]\r\n```","```\r\ndef emptyList = []\r\n```","```\r\ndef linkedList = [1,2,3] as LinkedList\r\nArrayList arrList = [1,2,3]\r\n```","```\r\ndef copyList = new ArrayList(arrList)\r\n```","```\r\ndef cloneList = arrList.clone()\r\n```","```\r\nassertTrue(cloneList == arrList)\r\n```","```\r\ndef list = [\"Hello\", \"World\"]\r\nassertTrue(list[1] == \"World\")\r\n```","```\r\nassertTrue(list.get(1) == \"World\")\r\nassertTrue(list.getAt(1) == \"World\")\r\n```","```\r\nassertTrue(list[-1] == \"World\")\r\nassertTrue(list.getAt(-2) == \"Hello\")\r\n```","```\r\ndef list = []\r\n\r\nlist << 1\r\nlist.add(\"Apple\")\r\nassertTrue(list == [1, \"Apple\"])\r\n```","```\r\nlist[2] = \"Box\"\r\nlist[4] = true\r\nassertTrue(list == [1, \"Apple\", \"Box\", null, true])\r\n```","```\r\ndef list2 = [1,2]\r\nlist += list2\r\nlist += 12        \r\nassertTrue(list == [1, 6.0, \"Apple\", \"Box\", null, true, 1, 2, 12])\r\n```","```\r\ndef list =[1, \"Apple\", 80, \"App\"]\r\nlist[1] = \"Box\"\r\nlist.set(2,90)\r\nassertTrue(list == [1, \"Box\", 90,  \"App\"])\r\n```","```\r\ndef list = [1,2,3,4,5,5,6,6,7]\r\nlist.remove(3)\r\nassertTrue(list == [1,2,3,5,5,6,6,7])\r\n```","```\r\nlist.removeElement(5)\r\nassertTrue(list == [1,2,3,5,6,6,7])\r\n```","```\r\nassertTrue(list - 6 == [1,2,3,5,7])\r\n```","```\r\ndef list = [1,\"App\",3,4]\r\nlist.each {println it * 2}\r\n```","```\r\nlist.eachWithIndex{ it, i -> println \"$i : $it\" }\r\n```","```\r\ndef filterList = [2,1,3,4,5,6,76]\r\n```","```\r\nassertTrue(filterList.find {it > 3} == 4)\r\n```","```\r\nassertTrue(filterList.findAll {it > 3} == [4,5,6,76])\r\n```","```\r\nassertTrue(filterList.findAll {it instanceof Number} == [2,1,3,4,5,6,76])\r\n```","```\r\nassertTrue(filterList.grep( Number ) == [2,1,3,4,5,6,76])\r\n```","```\r\nassertTrue(filterList.grep {it > 6} == [76])\r\n```","```\r\ndef uniqueList = [1,3,3,4]\r\nuniqueList.unique()\r\nassertTrue(uniqueList == [1,3,4])\r\n```","```\r\nassertTrue([\"A\", \"B\", \"Ba\", \"Bat\", \"Cat\"].toUnique {it.size()} == [\"A\", \"Ba\", \"Bat\"])\r\n```","```\r\ndef conditionList = [2,1,3,4,5,6,76]\r\nassertFalse(conditionList.every {it < 6})\r\n```","```\r\nassertTrue(conditionList.any {it % 2 == 0})\r\n```","```\r\nassertTrue([1,2,1,0].sort() == [0,1,1,2])\r\n```","```\r\nComparator mc = {a,b -> a == b? 0: a < b? 1 : -1}\r\ndef list = [1,2,1,0]\r\nlist.sort(mc)\r\nassertTrue(list == [2,1,1,0])\r\n```","```\r\ndef strList = [\"na\", \"ppp\", \"as\"]\r\nassertTrue(strList.max() == \"ppp\")\r\n```","```\r\nComparator minc = {a,b -> a == b? 0: a < b? -1 : 1}\r\ndef numberList = [3, 2, 0, 7]\r\nassertTrue(numberList.min(minc) == 0)\r\n```","```\r\ndef list = [\"Kay\",\"Henry\",\"Justin\",\"Tom\"]\r\nassertTrue(list.collect{\"Hi \" + it} == [\"Hi Kay\",\"Hi Henry\",\"Hi Justin\",\"Hi Tom\"])\r\n```","```\r\nassertTrue([\"One\",\"Two\",\"Three\"].join(\",\") == \"One,Two,Three\")\r\n```"]