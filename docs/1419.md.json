["```\r\n@Singleton\r\npublic class FixedTimerBean {\r\n\r\n    @EJB\r\n    private WorkerBean workerBean;\r\n\r\n    @Lock(LockType.READ)\r\n    @Schedule(second = \"*/5\", minute = \"*\", hour = \"*\", persistent = false)\r\n    public void atSchedule() throws InterruptedException {\r\n        workerBean.doTimerWork();\r\n    }\r\n} \r\n```","```\r\n@Singleton\r\npublic class WorkerBean {\r\n\r\n    private AtomicBoolean busy = new AtomicBoolean(false);\r\n\r\n    @Lock(LockType.READ)\r\n    public void doTimerWork() throws InterruptedException {\r\n        if (!busy.compareAndSet(false, true)) {\r\n            return;\r\n        }\r\n        try {\r\n            Thread.sleep(20000L);\r\n        } finally {\r\n            busy.set(false);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Startup\r\n@Singleton\r\npublic class ProgrammaticAtFixedRateTimerBean {\r\n\r\n    @Inject\r\n    Event<TimerEvent> event;\r\n\r\n    @Resource\r\n    TimerService timerService;\r\n\r\n    @PostConstruct\r\n    public void initialize() {\r\n        timerService.createTimer(0,1000, \"Every second timer with no delay\");\r\n    }\r\n\r\n    @Timeout\r\n    public void programmaticTimout(Timer timer) {\r\n        event.fire(new TimerEvent(timer.getInfo().toString()));\r\n    }\r\n}\r\n```","```\r\n@Startup\r\n@Singleton\r\npublic class ScheduleTimerBean {\r\n\r\n    @Inject\r\n    Event<TimerEvent> event;\r\n\r\n    @Schedule(hour = \"*\", minute = \"*\", second = \"*/5\", info = \"Every 5 seconds timer\")\r\n    public void automaticallyScheduled(Timer timer) {\r\n        fireEvent(timer);\r\n    }\r\n\r\n    private void fireEvent(Timer timer) {\r\n        event.fire(new TimerEvent(timer.getInfo().toString()));\r\n    }\r\n}\r\n```","```\r\n@Startup\r\n@Singleton\r\npublic class ProgrammaticWithInitialFixedDelayTimerBean {\r\n\r\n    @Inject\r\n    Event<TimerEvent> event;\r\n\r\n    @Resource\r\n    TimerService timerService;\r\n\r\n    @PostConstruct\r\n    public void initialize() {\r\n        timerService.createTimer(10000, 5000, \"Delay 10 seconds then every 5 seconds timer\");\r\n    }\r\n\r\n    @Timeout\r\n    public void programmaticTimout(Timer timer) {\r\n        event.fire(new TimerEvent(timer.getInfo().toString()));\r\n    }\r\n}\r\n```","```\r\n@Schedules ({\r\n   @Schedule(dayOfMonth=\"Last\"),\r\n   @Schedule(dayOfWeek=\"Fri\", hour=\"23\")\r\n})\r\npublic void doPeriodicCleanup() { ... }\r\n```"]