["```\r\npublic class EditDistanceRecursive {\r\n\r\n   static int calculate(String x, String y) {\r\n        if (x.isEmpty()) {\r\n            return y.length();\r\n        }\r\n\r\n        if (y.isEmpty()) {\r\n            return x.length();\r\n        } \r\n\r\n        int substitution = calculate(x.substring(1), y.substring(1)) \r\n         + costOfSubstitution(x.charAt(0), y.charAt(0));\r\n        int insertion = calculate(x, y.substring(1)) + 1;\r\n        int deletion = calculate(x.substring(1), y) + 1;\r\n\r\n        return min(substitution, insertion, deletion);\r\n    }\r\n\r\n    public static int costOfSubstitution(char a, char b) {\r\n        return a == b ? 0 : 1;\r\n    }\r\n\r\n    public static int min(int... numbers) {\r\n        return Arrays.stream(numbers)\r\n          .min().orElse(Integer.MAX_VALUE);\r\n    }\r\n}\r\n```","```\r\nstatic int calculate(String x, String y) {\r\n    int[][] dp = new int[x.length() + 1][y.length() + 1];\r\n\r\n    for (int i = 0; i <= x.length(); i++) {\r\n        for (int j = 0; j <= y.length(); j++) {\r\n            if (i == 0) {\r\n                dp[i][j] = j;\r\n            }\r\n            else if (j == 0) {\r\n                dp[i][j] = i;\r\n            }\r\n            else {\r\n                dp[i][j] = min(dp[i - 1][j - 1] \r\n                 + costOfSubstitution(x.charAt(i - 1), y.charAt(j - 1)), \r\n                  dp[i - 1][j] + 1, \r\n                  dp[i][j - 1] + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    return dp[x.length()][y.length()];\r\n} \r\n```"]