["```\r\npublic class CustomSpringEvent extends ApplicationEvent {\r\n    private String message;\r\n\r\n    public CustomSpringEvent(Object source, String message) {\r\n        super(source);\r\n        this.message = message;\r\n    }\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomSpringEventPublisher {\r\n    @Autowired\r\n    private ApplicationEventPublisher applicationEventPublisher;\r\n\r\n    public void publishCustomEvent(final String message) {\r\n        System.out.println(\"Publishing custom event. \");\r\n        CustomSpringEvent customSpringEvent = new CustomSpringEvent(this, message);\r\n        applicationEventPublisher.publishEvent(customSpringEvent);\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class CustomSpringEventListener implements ApplicationListener<CustomSpringEvent> {\r\n    @Override\r\n    public void onApplicationEvent(CustomSpringEvent event) {\r\n        System.out.println(\"Received spring custom event - \" + event.getMessage());\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\npublic class AsynchronousSpringEventsConfig {\r\n    @Bean(name = \"applicationEventMulticaster\")\r\n    public ApplicationEventMulticaster simpleApplicationEventMulticaster() {\r\n        SimpleApplicationEventMulticaster eventMulticaster =\r\n          new SimpleApplicationEventMulticaster();\r\n\r\n        eventMulticaster.setTaskExecutor(new SimpleAsyncTaskExecutor());\r\n        return eventMulticaster;\r\n    }\r\n}\r\n```","```\r\npublic class ContextRefreshedListener \r\n  implements ApplicationListener<ContextRefreshedEvent> {\r\n    @Override\r\n    public void onApplicationEvent(ContextRefreshedEvent cse) {\r\n        System.out.println(\"Handling context re-freshed event. \");\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class AnnotationDrivenEventListener {\r\n    @EventListener\r\n    public void handleContextStart(ContextStartedEvent cse) {\r\n        System.out.println(\"Handling context started event.\");\r\n    }\r\n}\r\n```","```\r\npublic class GenericSpringEvent<T> {\r\n    private T what;\r\n    protected boolean success;\r\n\r\n    public GenericSpringEvent(T what, boolean success) {\r\n        this.what = what;\r\n        this.success = success;\r\n    }\r\n    // ... standard getters\r\n}\r\n```","```\r\n@Component\r\npublic class GenericSpringEventListener \r\n  implements ApplicationListener<GenericSpringEvent<String>> {\r\n    @Override\r\n    public void onApplicationEvent(@NonNull GenericSpringEvent<String> event) {\r\n        System.out.println(\"Received spring generic event - \" + event.getWhat());\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class AnnotationDrivenEventListener {\r\n    @EventListener(condition = \"#event.success\")\r\n    public void handleSuccessful(GenericSpringEvent<String> event) {\r\n        System.out.println(\"Handling generic event (conditional).\");\r\n    }\r\n}\r\n```","```\r\n@TransactionalEventListener(phase = TransactionPhase.BEFORE_COMMIT)\r\npublic void handleCustom(CustomSpringEvent event) {\r\n    System.out.println(\"Handling event inside a transaction BEFORE COMMIT.\");\r\n}\r\n```"]