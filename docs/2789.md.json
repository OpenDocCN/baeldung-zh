["```\r\nResult solve(Problem problem) {\r\n    if (problem is small)\r\n        directly solve problem\r\n    else {\r\n        split problem into independent parts\r\n        fork new subtasks to solve each part\r\n        join all subtasks\r\n        compose result from subresults\r\n    }\r\n}\r\n```","```\r\nForkJoinPool commonPool = ForkJoinPool.commonPool();\r\nExecutorService workStealingPool = Executors.newWorkStealingPool();\r\n```","```\r\npublic class PrimeNumbers extends RecursiveAction {\r\n\r\n    private int lowerBound;\r\n    private int upperBound;\r\n    private int granularity;\r\n    static final List<Integer> GRANULARITIES\r\n      = Arrays.asList(1, 10, 100, 1000, 10000);\r\n    private AtomicInteger noOfPrimeNumbers;\r\n\r\n    PrimeNumbers(int lowerBound, int upperBound, int granularity, AtomicInteger noOfPrimeNumbers) {\r\n        this.lowerBound = lowerBound;\r\n        this.upperBound = upperBound;\r\n        this.granularity = granularity;\r\n        this.noOfPrimeNumbers = noOfPrimeNumbers;\r\n    }\r\n\r\n    // other constructors and methods\r\n\r\n    private List<PrimeNumbers> subTasks() {\r\n        List<PrimeNumbers> subTasks = new ArrayList<>();\r\n\r\n        for (int i = 1; i <= this.upperBound / granularity; i++) {\r\n            int upper = i * granularity;\r\n            int lower = (upper - granularity) + 1;\r\n            subTasks.add(new PrimeNumbers(lower, upper, noOfPrimeNumbers));\r\n        }\r\n        return subTasks;\r\n    }\r\n\r\n    @Override\r\n    protected void compute() {\r\n        if (((upperBound + 1) - lowerBound) > granularity) {\r\n            ForkJoinTask.invokeAll(subTasks());\r\n        } else {\r\n            findPrimeNumbers();\r\n        }\r\n    }\r\n\r\n    void findPrimeNumbers() {\r\n        for (int num = lowerBound; num <= upperBound; num++) {\r\n            if (isPrime(num)) {\r\n                noOfPrimeNumbers.getAndIncrement();\r\n            }\r\n        }\r\n    }\r\n\r\n    public int noOfPrimeNumbers() {\r\n        return noOfPrimeNumbers.intValue();\r\n    }\r\n}\r\n```","```\r\nPrimeNumbers primes = new PrimeNumbers(10000);\r\nprimes.findPrimeNumbers();\r\n```","```\r\nPrimeNumbers primes = new PrimeNumbers(10000);\r\nForkJoinPool pool = ForkJoinPool.commonPool();\r\npool.invoke(primes);\r\npool.shutdown();\r\n```","```\r\nPrimeNumbers primes = new PrimeNumbers(10000);\r\nint parallelism = ForkJoinPool.getCommonPoolParallelism();\r\nForkJoinPool stealer = (ForkJoinPool) Executors.newWorkStealingPool(parallelism);\r\nstealer.invoke(primes);\r\nstealer.shutdown();\r\n```","```\r\n# Run complete. Total time: 00:04:50\r\n\r\nBenchmark                                                      Mode  Cnt    Score   Error  Units\r\nPrimeNumbersUnitTest.Benchmarker.commonPoolBenchmark           avgt   20  119.885 ± 9.917  ms/op\r\nPrimeNumbersUnitTest.Benchmarker.newWorkStealingPoolBenchmark  avgt   20  119.791 ± 7.811  ms/op\r\nPrimeNumbersUnitTest.Benchmarker.singleThread                  avgt   20  475.964 ± 7.929  ms/op\r\n```","```\r\nlong steals = forkJoinPool.getStealCount();\r\n```","```\r\nExecutors.newWorkStealingPool ->\r\nGranularity: [1], Steals: [6564]\r\nGranularity: [10], Steals: [572]\r\nGranularity: [100], Steals: [56]\r\nGranularity: [1000], Steals: [60]\r\nGranularity: [10000], Steals: [1]\r\n\r\nForkJoinPool.commonPool ->\r\nGranularity: [1], Steals: [6923]\r\nGranularity: [10], Steals: [7540]\r\nGranularity: [100], Steals: [7605]\r\nGranularity: [1000], Steals: [7681]\r\nGranularity: [10000], Steals: [7681]\r\n```"]