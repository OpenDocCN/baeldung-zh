["```\r\npublic class IntRangeOperators {\r\n\r\n    public static boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        return (lowerBound <= number && number <= upperBound);\r\n    }\r\n\r\n    public static boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        return (lowerBound < number && number < upperBound);\r\n    }\r\n\r\n    public static boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        return (lowerBound < number && number <= upperBound);\r\n    }\r\n\r\n    public static boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        return (lowerBound <= number && number < upperBound);\r\n    }\r\n}\r\n```","```\r\nassertTrue(IntRangeClassic.isInOpenClosedRange(20, 10, 20));\r\n\r\nassertFalse(IntRangeClassic.isInOpenClosedRange(10, 10, 20));\r\n```","```\r\npublic class IntRangeValueRange {\r\n\r\n    public boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final ValueRange range = ValueRange.of(lowerBound, upperBound);\r\n        return range.isValidIntValue(number);\r\n    }\r\n\r\n    public boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final ValueRange range = ValueRange.of(lowerBound + 1, upperBound - 1);\r\n        return range.isValidIntValue(number);\r\n    }\r\n\r\n    public boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final ValueRange range = ValueRange.of(lowerBound + 1, upperBound);\r\n        return range.isValidIntValue(number);\r\n    }\r\n\r\n    public boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final ValueRange range = ValueRange.of(lowerBound, upperBound - 1);\r\n        return range.isValidIntValue(number);\r\n    }\r\n} \r\n```","```\r\n<dependency>\r\n    <groupId>org.apache.commons</groupId>\r\n    <artifactId>commons-lang3</artifactId>\r\n    <version>3.12.0</version>\r\n</dependency>\r\n```","```\r\npublic class IntRangeApacheCommons {\r\n\r\n    public boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.between(lowerBound, upperBound);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.between(lowerBound + 1, upperBound - 1);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.between(lowerBound + 1, upperBound);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.between(lowerBound, upperBound - 1);\r\n        return range.contains(number);\r\n    }\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.1-jre</version>\r\n</dependency>\r\n```","```\r\npublic class IntRangeGoogleGuava {\r\n\r\n    public boolean isInClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.closed(lowerBound, upperBound);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.open(lowerBound, upperBound);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInOpenClosedRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.openClosed(lowerBound, upperBound);\r\n        return range.contains(number);\r\n    }\r\n\r\n    public boolean isInClosedOpenRange(Integer number, Integer lowerBound, Integer upperBound) {\r\n        final Range<Integer> range = Range.closedOpen(lowerBound, upperBound);\r\n        return range.contains(number);\r\n    }\r\n}\r\n```"]