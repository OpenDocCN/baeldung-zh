["```\r\n<dependency>\r\n    <groupId>org.influxdb</groupId>\r\n    <artifactId>influxdb-java</artifactId>\r\n    <version>2.8</version>\r\n</dependency> \r\n```","```\r\nInfluxDB influxDB = InfluxDBFactory.connect(databaseURL, userName, password);\r\n```","```\r\nPong response = this.influxDB.ping();\r\nif (response.getVersion().equalsIgnoreCase(\"unknown\")) {\r\n    log.error(\"Error pinging server.\");\r\n    return;\r\n} \r\n```","```\r\ninfluxDB.createDatabase(\"baeldung\");\r\ninfluxDB.createRetentionPolicy(\r\n  \"defaultPolicy\", \"baeldung\", \"30d\", 1, true);\r\n```","```\r\ninfluxDB.setLogLevel(InfluxDB.LogLevel.BASIC); \r\n```","```\r\nDec 20, 2017 5:38:10 PM okhttp3.internal.platform.Platform log\r\nINFO: --> GET http://127.0.0.1:8086/ping\r\n```","```\r\nPoint point = Point.measurement(\"memory\")\r\n  .time(System.currentTimeMillis(), TimeUnit.MILLISECONDS)\r\n  .addField(\"name\", \"server1\")\r\n  .addField(\"free\", 4743656L)\r\n  .addField(\"used\", 1015096L)\r\n  .addField(\"buffer\", 1010467L)\r\n  .build(); \r\n```","```\r\nBatchPoints batchPoints = BatchPoints\r\n  .database(dbName)\r\n  .retentionPolicy(\"defaultPolicy\")\r\n  .build();\r\n\r\nPoint point1 = Point.measurement(\"memory\")\r\n  .time(System.currentTimeMillis(), TimeUnit.MILLISECONDS)\r\n  .addField(\"name\", \"server1\") \r\n  .addField(\"free\", 4743656L)\r\n  .addField(\"used\", 1015096L) \r\n  .addField(\"buffer\", 1010467L)\r\n  .build();\r\n\r\nPoint point2 = Point.measurement(\"memory\")\r\n  .time(System.currentTimeMillis() - 100, TimeUnit.MILLISECONDS)\r\n  .addField(\"name\", \"server1\")\r\n  .addField(\"free\", 4743696L)\r\n  .addField(\"used\", 1016096L)\r\n  .addField(\"buffer\", 1008467L)\r\n  .build();\r\n\r\nbatchPoints.point(point1);\r\nbatchPoints.point(point2);\r\ninfluxDB.write(batchPoints);\r\n```","```\r\ninfluxDB.enableBatch(100, 200, TimeUnit.MILLISECONDS); \r\n```","```\r\ninfluxDB.setRetentionPolicy(\"defaultPolicy\");\r\ninfluxDB.setDatabase(dbName); \r\n```","```\r\ninfluxDB.write(point); \r\n```","```\r\ninfluxDB.disableBatch(); \r\n```","```\r\ninfluxDB.close();\r\n```","```\r\n@Measurement(name = \"memory\")\r\npublic class MemoryPoint {\r\n\r\n    @Column(name = \"time\")\r\n    private Instant time;\r\n\r\n    @Column(name = \"name\")\r\n    private String name;\r\n\r\n    @Column(name = \"free\")\r\n    private Long free;\r\n\r\n    @Column(name = \"used\")\r\n    private Long used;\r\n\r\n    @Column(name = \"buffer\")\r\n    private Long buffer;\r\n} \r\n```","```\r\nQueryResult queryResult = connection\r\n  .performQuery(\"Select * from memory\", \"baeldung\");\r\n\r\nInfluxDBResultMapper resultMapper = new InfluxDBResultMapper();\r\nList<MemoryPoint> memoryPointList = resultMapper\r\n  .toPOJO(queryResult, MemoryPoint.class);\r\n\r\nassertEquals(2, memoryPointList.size());\r\nassertTrue(4743696L == memoryPointList.get(0).getFree()); \r\n```","```\r\nqueryResult = connection.performQuery(\r\n  \"Select * from memory order by time desc\", \"baeldung\");\r\nmemoryPointList = resultMapper\r\n  .toPOJO(queryResult, MemoryPoint.class);\r\n\r\nassertEquals(2, memoryPointList.size());\r\nassertTrue(4743656L == memoryPointList.get(0).getFree()); \r\n```"]