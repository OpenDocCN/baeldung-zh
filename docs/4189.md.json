["```\r\n<dependency>\r\n    <groupId>org.apache.rocketmq</groupId>\r\n    <artifactId>rocketmq-spring-boot-starter</artifactId>\r\n    <version>2.0.4</version>\r\n</dependency>\r\n```","```\r\nrocketmq.name-server=127.0.0.1:9876\r\nrocketmq.producer.group=cart-producer-group\r\n```","```\r\n@SpringBootApplication\r\npublic class CartEventProducer implements CommandLineRunner {\r\n\r\n    @Autowired\r\n    private RocketMQTemplate rocketMQTemplate;\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CartEventProducer.class, args);\r\n    }\r\n\r\n    public void run(String... args) throws Exception {\r\n        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"bike\", 1));\r\n        rocketMQTemplate.convertAndSend(\"cart-item-add-topic\", new CartItemEvent(\"computer\", 2));\r\n        rocketMQTemplate.convertAndSend(\"cart-item-removed-topic\", new CartItemEvent(\"bike\", 1));\r\n    }\r\n}\r\n```","```\r\nclass CartItemEvent {\r\n    private String itemId;\r\n    private int quantity;\r\n\r\n    // constructor, getters and setters\r\n}\r\n```","```\r\n@SpringBootApplication\r\npublic class CartEventConsumer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(CartEventConsumer.class, args);\r\n    }\r\n\r\n    @Service\r\n    @RocketMQMessageListener(\r\n      topic = \"cart-item-add-topic\",\r\n      consumerGroup = \"cart-consumer_cart-item-add-topic\"\r\n    )\r\n    public class CardItemAddConsumer implements RocketMQListener<CartItemEvent> {\r\n        public void onMessage(CartItemEvent addItemEvent) {\r\n            log.info(\"Adding item: {}\", addItemEvent);\r\n            // additional logic\r\n        }\r\n    }\r\n\r\n    @Service\r\n    @RocketMQMessageListener(\r\n      topic = \"cart-item-removed-topic\",\r\n      consumerGroup = \"cart-consumer_cart-item-removed-topic\"\r\n    )\r\n    public class CardItemRemoveConsumer implements RocketMQListener<CartItemEvent> {\r\n        public void onMessage(CartItemEvent removeItemEvent) {\r\n            log.info(\"Removing item: {}\", removeItemEvent);\r\n            // additional logic\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic void run(String... args) throws Exception { \r\n    SendResult addBikeResult = rocketMQTemplate.syncSend(\"cart-item-add-topic\", \r\n      new CartItemEvent(\"bike\", 1)); \r\n    SendResult addComputerResult = rocketMQTemplate.syncSend(\"cart-item-add-topic\", \r\n      new CartItemEvent(\"computer\", 2)); \r\n    SendResult removeBikeResult = rocketMQTemplate.syncSend(\"cart-item-removed-topic\", \r\n      new CartItemEvent(\"bike\", 1)); \r\n}\r\n```","```\r\nrocketMQTemplate.asyncSend(\"cart-item-add-topic\", new CartItemEvent(\"bike\", 1), new SendCallback() {\r\n    @Override\r\n    public void onSuccess(SendResult sendResult) {\r\n        log.error(\"Successfully sent cart item\");\r\n    }\r\n\r\n    @Override\r\n    public void onException(Throwable throwable) {\r\n        log.error(\"Exception during cart item sending\", throwable);\r\n    }\r\n});\r\n```","```\r\nMessageBuilder.withPayload(new CartItemEvent(\"bike\", 1)).build();\r\nrocketMQTemplate.sendMessageInTransaction(\"test-transaction\", \"topic-name\", msg, null);\r\n```","```\r\n@RocketMQTransactionListener(txProducerGroup=\"test-transaction\")\r\nclass TransactionListenerImpl implements RocketMQLocalTransactionListener {\r\n      @Override\r\n      public RocketMQLocalTransactionState executeLocalTransaction(Message msg, Object arg) {\r\n          // ... local transaction process, return ROLLBACK, COMMIT or UNKNOWN\r\n          return RocketMQLocalTransactionState.UNKNOWN;\r\n      }\r\n\r\n      @Override\r\n      public RocketMQLocalTransactionState checkLocalTransaction(Message msg) {\r\n          // ... check transaction status and return ROLLBACK, COMMIT or UNKNOWN\r\n          return RocketMQLocalTransactionState.COMMIT;\r\n      }\r\n}\r\n```"]