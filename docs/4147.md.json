["```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Column(nullable = false)\r\n    private String username;\r\n\r\n    private String accessToken;\r\n    private String refreshToken;\r\n    private Date tokenExpiration;\r\n\r\n    private boolean needCaptcha;\r\n\r\n    // standard setters and getters\r\n}\r\n```","```\r\n@Entity\r\npublic class Post {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.AUTO)\r\n    private Long id;\r\n\r\n    @Column(nullable = false) private String title;\r\n    @Column(nullable = false) private String subreddit;\r\n    @Column(nullable = false) private String url;\r\n    private boolean sendReplies;\r\n\r\n    @Column(nullable = false) private Date submissionDate;\r\n\r\n    private boolean isSent;\r\n\r\n    private String submissionResponse;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"user_id\", nullable = false)\r\n    private User user;\r\n```","```\r\n // standard setters and getters\r\n}\r\n```","```\r\npublic interface UserRepository extends JpaRepository<User, Long> {\r\n\r\n    User findByUsername(String username);\r\n\r\n    User findByAccessToken(String token);\r\n}\r\n```","```\r\npublic interface PostRepository extends JpaRepository<Post, Long> {\r\n\r\n    List<Post> findBySubmissionDateBeforeAndIsSent(Date date, boolean isSent);\r\n\r\n    List<Post> findByUser(User user);\r\n}\r\n```","```\r\npublic class ScheduledTasks {\r\n    private final Logger logger = LoggerFactory.getLogger(getClass());\r\n\r\n    private OAuth2RestTemplate redditRestTemplate;\r\n\r\n    @Autowired\r\n    private PostRepository postReopsitory;\r\n\r\n    @Scheduled(fixedRate = 1 * 60 * 1000)\r\n    public void reportCurrentTime() {\r\n        List<Post> posts = \r\n          postReopsitory.findBySubmissionDateBeforeAndIsSent(new Date(), false);\r\n        for (Post post : posts) {\r\n            submitPost(post);\r\n        }\r\n    }\r\n\r\n    private void submitPost(Post post) {\r\n        try {\r\n            User user = post.getUser();\r\n            DefaultOAuth2AccessToken token = \r\n              new DefaultOAuth2AccessToken(user.getAccessToken());\r\n            token.setRefreshToken(new DefaultOAuth2RefreshToken((user.getRefreshToken())));\r\n            token.setExpiration(user.getTokenExpiration());\r\n            redditRestTemplate.getOAuth2ClientContext().setAccessToken(token);\r\n\r\n            UsernamePasswordAuthenticationToken userAuthToken = \r\n              new UsernamePasswordAuthenticationToken(\r\n              user.getUsername(), token.getValue(), \r\n              Arrays.asList(new SimpleGrantedAuthority(\"ROLE_USER\")));\r\n            SecurityContextHolder.getContext().setAuthentication(userAuthToken);\r\n\r\n            MultiValueMap<String, String> param = new LinkedMultiValueMap<String, String>();\r\n            param.add(\"api_type\", \"json\");\r\n            param.add(\"kind\", \"link\");\r\n            param.add(\"resubmit\", \"true\");\r\n            param.add(\"then\", \"comments\");\r\n            param.add(\"title\", post.getTitle());\r\n            param.add(\"sr\", post.getSubreddit());\r\n            param.add(\"url\", post.getUrl());\r\n            if (post.isSendReplies()) {\r\n                param.add(RedditApiConstants.SENDREPLIES, \"true\");\r\n            }\r\n\r\n            JsonNode node = redditRestTemplate.postForObject(\r\n              \"https://oauth.reddit.com/api/submit\", param, JsonNode.class);\r\n            JsonNode errorNode = node.get(\"json\").get(\"errors\").get(0);\r\n            if (errorNode == null) {\r\n                post.setSent(true);\r\n                post.setSubmissionResponse(\"Successfully sent\");\r\n                postReopsitory.save(post);\r\n            } else {\r\n                post.setSubmissionResponse(errorNode.toString());\r\n                postReopsitory.save(post);\r\n            }\r\n        } catch (Exception e) {\r\n            logger.error(\"Error occurred\", e);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(\"/login\")\r\npublic String redditLogin() {\r\n    JsonNode node = redditRestTemplate.getForObject(\r\n      \"https://oauth.reddit.com/api/v1/me\", JsonNode.class);\r\n    loadAuthentication(node.get(\"name\").asText(), redditRestTemplate.getAccessToken());\r\n    return \"redirect:home.html\";\r\n}\r\n```","```\r\nprivate void loadAuthentication(String name, OAuth2AccessToken token) {\r\n    User user = userReopsitory.findByUsername(name);\r\n    if (user == null) {\r\n        user = new User();\r\n        user.setUsername(name);\r\n    }\r\n\r\n    if (needsCaptcha().equalsIgnoreCase(\"true\")) {\r\n        user.setNeedCaptcha(true);\r\n    } else {\r\n        user.setNeedCaptcha(false);\r\n    }\r\n\r\n    user.setAccessToken(token.getValue());\r\n    user.setRefreshToken(token.getRefreshToken().getValue());\r\n    user.setTokenExpiration(token.getExpiration());\r\n    userReopsitory.save(user);\r\n\r\n    UsernamePasswordAuthenticationToken auth = \r\n      new UsernamePasswordAuthenticationToken(user, token.getValue(), \r\n      Arrays.asList(new SimpleGrantedAuthority(\"ROLE_USER\")));\r\n    SecurityContextHolder.getContext().setAuthentication(auth);\r\n}\r\n```","```\r\n@RequestMapping(\"/postSchedule\")\r\npublic String showSchedulePostForm(Model model) {\r\n    boolean isCaptchaNeeded = getCurrentUser().isCaptchaNeeded();\r\n    if (isCaptchaNeeded) {\r\n        model.addAttribute(\"msg\", \"Sorry, You do not have enought karma\");\r\n        return \"submissionResponse\";\r\n    }\r\n    return \"schedulePostForm\";\r\n}\r\n```","```\r\nprivate User getCurrentUser() {\r\n    return (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\r\n}\r\n```","```\r\n<form>\r\n    <input name=\"title\" />\r\n    <input name=\"url\" />\r\n    <input name=\"subreddit\" />\r\n    <input type=\"checkbox\" name=\"sendreplies\" value=\"true\"/> \r\n    <input name=\"submissionDate\">\r\n    <button type=\"submit\" onclick=\"schedulePost()\">Schedule</button>\r\n</form>\r\n\r\n<script>\r\nfunction schedulePost(){\r\n    var data = {};\r\n    $('form').serializeArray().map(function(x){data[x.name] = x.value;});\r\n    $.ajax({\r\n        url: 'api/scheduledPosts',\r\n        data: JSON.stringify(data),\r\n        type: 'POST',\r\n        contentType:'application/json',\r\n        success: function(result) { window.location.href=\"scheduledPosts\"; },\r\n        error: function(error) { alert(error.responseText); }   \r\n    }); \r\n}\r\n</script> \r\n</body> \r\n</html>\r\n```","```\r\n@RequestMapping(value = \"/api/scheduledPosts\", method = RequestMethod.POST)\r\n@ResponseBody\r\npublic Post schedule(@RequestBody Post post) {\r\n    if (submissionDate.before(new Date())) {\r\n        throw new InvalidDateException(\"Scheduling Date already passed\");\r\n    }\r\n\r\n    post.setUser(getCurrentUser());\r\n    post.setSubmissionResponse(\"Not sent yet\");\r\n    return postReopsitory.save(post);\r\n}\r\n```","```\r\n@RequestMapping(value = \"/api/scheduledPosts\")\r\n@ResponseBody\r\npublic List<Post> getScheduledPosts() {\r\n    User user = getCurrentUser();\r\n    return postReopsitory.findByUser(user);\r\n}\r\n```","```\r\n<table>\r\n    <thead><tr><th>Post title</th><th>Submission Date</th></tr></thead>\r\n</table>\r\n\r\n<script>\r\n$(function(){\r\n    $.get(\"api/scheduledPosts\", function(data){\r\n        $.each(data, function( index, post ) {\r\n            $('.table').append('<tr><td>'+post.title+'</td><td>'+\r\n              post.submissionDate+'</td></tr>');\r\n        });\r\n    });\r\n});\r\n</script>\r\n```","```\r\n@RequestMapping(value = \"/editPost/{id}\", method = RequestMethod.GET)\r\npublic String showEditPostForm() {\r\n    return \"editPostForm\";\r\n}\r\n```","```\r\n<form>\r\n    <input type=\"hidden\" name=\"id\" />\r\n    <input name=\"title\" />\r\n    <input name=\"url\" />\r\n    <input name=\"subreddit\" />\r\n    <input type=\"checkbox\" name=\"sendReplies\" value=\"true\"/>\r\n    <input name=\"submissionDate\">\r\n    <button type=\"submit\" onclick=\"editPost()\">Save Changes</button>\r\n</form>\r\n\r\n<script>\r\n$(function() {\r\n   loadPost();\r\n});\r\n\r\nfunction loadPost(){ \r\n    var arr = window.location.href.split(\"/\"); \r\n    var id = arr[arr.length-1]; \r\n    $.get(\"../api/scheduledPosts/\"+id, function (data){ \r\n        $.each(data, function(key, value) { \r\n            $('*[name=\"'+key+'\"]').val(value); \r\n        });\r\n    }); \r\n}\r\nfunction editPost(){\r\n    var id = $(\"#id\").val();\r\n    var data = {};\r\n    $('form').serializeArray().map(function(x){data[x.name] = x.value;});\r\n\t$.ajax({\r\n            url: \"../api/scheduledPosts/\"+id,\r\n            data: JSON.stringify(data),\r\n            type: 'PUT',\r\n            contentType:'application/json'\r\n            }).done(function() {\r\n    \t        window.location.href=\"../scheduledPosts\";\r\n            }).fail(function(error) {\r\n    \t        alert(error.responseText);\r\n        }); \r\n}\r\n</script>\r\n```","```\r\n@RequestMapping(value = \"/api/scheduledPosts/{id}\", method = RequestMethod.GET) \r\n@ResponseBody \r\npublic Post getPost(@PathVariable(\"id\") Long id) { \r\n    return postReopsitory.findOne(id); \r\n}\r\n\r\n@RequestMapping(value = \"/api/scheduledPosts/{id}\", method = RequestMethod.PUT) \r\n@ResponseStatus(HttpStatus.OK) \r\npublic void updatePost(@RequestBody Post post, @PathVariable Long id) { \r\n    if (post.getSubmissionDate().before(new Date())) { \r\n        throw new InvalidDateException(\"Scheduling Date already passed\"); \r\n    } \r\n    post.setUser(getCurrentUser()); \r\n    postReopsitory.save(post); \r\n}\r\n```","```\r\n@RequestMapping(value = \"/api/scheduledPosts/{id}\", method = RequestMethod.DELETE)\r\n@ResponseStatus(HttpStatus.OK)\r\npublic void deletePost(@PathVariable(\"id\") Long id) {\r\n    postReopsitory.delete(id);\r\n}\r\n```","```\r\n<a href=\"#\" onclick=\"confirmDelete(${post.getId()})\">Delete</a>\r\n\r\n<script>\r\nfunction confirmDelete(id) {\r\n    if (confirm(\"Do you really want to delete this post?\") == true) {\r\n    \tdeletePost(id);\r\n    } \r\n}\r\n\r\nfunction deletePost(id){\r\n\t$.ajax({\r\n\t    url: 'api/scheduledPosts/'+id,\r\n\t    type: 'DELETE',\r\n\t    success: function(result) {\r\n\t    \twindow.location.href=\"scheduledPosts\"\r\n\t    }\r\n\t});\r\n}\r\n</script>\r\n```"]