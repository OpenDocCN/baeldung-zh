["```\r\nimport java.util.ArrayList;\r\n```","```\r\nList<String> list = new ArrayList<>();\r\nassertTrue(list.isEmpty());\r\n```","```\r\nList<String> list = new ArrayList<>(20);\r\n```","```\r\nCollection<Integer> number \r\n  = IntStream.range(0, 10).boxed().collect(toSet());\r\n\r\nList<Integer> list = new ArrayList<>(numbers);\r\nassertEquals(10, list.size());\r\nassertTrue(numbers.containsAll(list));\r\n```","```\r\nList<Long> list = new ArrayList<>();\r\n\r\nlist.add(1L);\r\nlist.add(2L);\r\nlist.add(1, 3L);\r\n\r\nassertThat(Arrays.asList(1L, 3L, 2L), equalTo(list));\r\n```","```\r\nList<Long> list = new ArrayList<>(Arrays.asList(1L, 2L, 3L));\r\nLongStream.range(4, 10).boxed()\r\n  .collect(collectingAndThen(toCollection(ArrayList::new), ys -> list.addAll(0, ys)));\r\nassertThat(Arrays.asList(4L, 5L, 6L, 7L, 8L, 9L, 1L, 2L, 3L), equalTo(list));\r\n```","```\r\nList<Integer> list = new ArrayList<>(\r\n  IntStream.range(0, 10).boxed().collect(toCollection(ArrayList::new))\r\n);\r\nListIterator<Integer> it = list.listIterator(list.size());\r\nList<Integer> result = new ArrayList<>(list.size());\r\nwhile (it.hasPrevious()) {\r\n    result.add(it.previous());\r\n}\r\n\r\nCollections.reverse(list);\r\nassertThat(result, equalTo(list));\r\n```","```\r\nList<String> list = LongStream.range(0, 16)\r\n  .boxed()\r\n  .map(Long::toHexString)\r\n  .collect(toCollection(ArrayList::new));\r\nList<String> stringsToSearch = new ArrayList<>(list);\r\nstringsToSearch.addAll(list);\r\n```","```\r\nassertEquals(10, stringsToSearch.indexOf(\"a\"));\r\nassertEquals(26, stringsToSearch.lastIndexOf(\"a\"));\r\n```","```\r\nSet<String> matchingStrings = new HashSet<>(Arrays.asList(\"a\", \"c\", \"9\"));\r\n\r\nList<String> result = stringsToSearch\r\n  .stream()\r\n  .filter(matchingStrings::contains)\r\n  .collect(toCollection(ArrayList::new));\r\n\r\nassertEquals(6, result.size());\r\n```","```\r\nIterator<String> it = stringsToSearch.iterator();\r\nSet<String> matchingStrings = new HashSet<>(Arrays.asList(\"a\", \"c\", \"9\"));\r\n\r\nList<String> result = new ArrayList<>();\r\nwhile (it.hasNext()) {\r\n    String s = it.next();\r\n    if (matchingStrings.contains(s)) {\r\n        result.add(s);\r\n    }\r\n}\r\n```","```\r\nList<String> copy = new ArrayList<>(stringsToSearch);\r\nCollections.sort(copy);\r\nint index = Collections.binarySearch(copy, \"f\");\r\nassertThat(index, not(equalTo(-1)));\r\n```","```\r\nList<Integer> list = new ArrayList<>(\r\n  IntStream.range(0, 10).boxed().collect(toCollection(ArrayList::new))\r\n);\r\nCollections.reverse(list);\r\n\r\nlist.remove(0);\r\nassertThat(list.get(0), equalTo(8));\r\n\r\nlist.remove(Integer.valueOf(0));\r\nassertFalse(list.contains(0));\r\n```","```\r\nSet<String> matchingStrings\r\n = HashSet<>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\r\n\r\nIterator<String> it = stringsToSearch.iterator();\r\nwhile (it.hasNext()) {\r\n    if (matchingStrings.contains(it.next())) {\r\n        it.remove();\r\n    }\r\n}\r\n```"]