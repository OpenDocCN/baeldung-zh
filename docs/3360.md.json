["```\r\nList<String> stringList = Lists.newArrayList();\r\nList<Integer> intList = Lists.newArrayList();\r\n\r\nboolean result = stringList.getClass()\r\n  .isAssignableFrom(intList.getClass());\r\n\r\nassertTrue(result);\r\n```","```\r\nTypeToken<List<String>> stringListToken\r\n  = new TypeToken<List<String>>() {};\r\nTypeToken<List<Integer>> integerListToken\r\n  = new TypeToken<List<Integer>>() {};\r\nTypeToken<List<? extends Number>> numberTypeToken\r\n  = new TypeToken<List<? extends Number>>() {};\r\n\r\nassertFalse(stringListToken.isSubtypeOf(integerListToken));\r\nassertFalse(numberTypeToken.isSubtypeOf(integerListToken));\r\nassertTrue(integerListToken.isSubtypeOf(numberTypeToken));\r\n```","```\r\nabstract class ParametrizedClass<T> {\r\n    TypeToken<T> type = new TypeToken<T>(getClass()) {};\r\n}\r\n```","```\r\nParametrizedClass<String> parametrizedClass = new ParametrizedClass<String>() {};\r\n\r\nassertEquals(parametrizedClass.type, TypeToken.of(String.class));\r\n```","```\r\nTypeToken<Function<Integer, String>> funToken\r\n  = new TypeToken<Function<Integer, String>>() {};\r\n\r\nTypeToken<?> funResultToken = funToken\r\n  .resolveType(Function.class.getTypeParameters()[1]);\r\n\r\nassertEquals(funResultToken, TypeToken.of(String.class));\r\n```","```\r\nTypeToken<Map<String, Integer>> mapToken\r\n  = new TypeToken<Map<String, Integer>>() {};\r\n\r\nTypeToken<?> entrySetToken = mapToken\r\n  .resolveType(Map.class.getMethod(\"entrySet\")\r\n  .getGenericReturnType());\r\n\r\nassertEquals(\r\n  entrySetToken,\r\n  new TypeToken<Set<Map.Entry<String, Integer>>>() {}); \r\n```","```\r\nclass CustomClass {\r\n    public void somePublicMethod() {}\r\n\r\n    public final void notOverridablePublicMethod() {}\r\n}\r\n```","```\r\nMethod method = CustomClass.class.getMethod(\"somePublicMethod\");\r\nInvokable<CustomClass, ?> invokable \r\n  = new TypeToken<CustomClass>() {}\r\n  .method(method);\r\n\r\nboolean isPublicStandradJava = Modifier.isPublic(method.getModifiers());\r\nboolean isPublicGuava = invokable.isPublic();\r\n\r\nassertTrue(isPublicStandradJava);\r\nassertTrue(isPublicGuava);\r\n```","```\r\nMethod method = CustomClass.class.getMethod(\"notOverridablePublicMethod\");\r\nInvokable<CustomClass, ?> invokable\r\n = new TypeToken<CustomClass>() {}.method(method);\r\n\r\nboolean isOverridableStandardJava = (!(Modifier.isFinal(method.getModifiers()) \r\n  || Modifier.isPrivate(method.getModifiers())\r\n  || Modifier.isStatic(method.getModifiers())\r\n  || Modifier.isFinal(method.getDeclaringClass().getModifiers())));\r\nboolean isOverridableFinalGauava = invokable.isOverridable();\r\n\r\nassertFalse(isOverridableStandardJava);\r\nassertFalse(isOverridableFinalGauava);\r\n```"]