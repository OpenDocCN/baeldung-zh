["```\r\n<dependency>\r\n    <groupId>org.jmockit</groupId>\r\n    <artifactId>jmockit</artifactId>\r\n    <version>1.24</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\npublic class AppManager {\r\n\r\n    public boolean managerResponse(String question) {\r\n        return AppManager.isResponsePositive(question);\r\n    }\r\n\r\n    public static boolean isResponsePositive(String value) {\r\n        if (value == null) {\r\n            return false;\r\n        }\r\n        int length = value.length();\r\n        int randomNumber = randomNumber();\r\n        return length == randomNumber ? true : false;\r\n    }\r\n\r\n    private static int randomNumber() {\r\n        return new Random().nextInt(7);\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenAppManager_whenStaticMethodCalled_thenValidateExpectedResponse() {\r\n    new MockUp<AppManager>() {\r\n        @Mock\r\n        public boolean isResponsePositive(String value) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    assertFalse(appManager.managerResponse(\"Some string...\"));\r\n}\r\n```","```\r\nprivate static Integer stringToInteger(String num) {\r\n    return Integer.parseInt(num);\r\n}\r\n```","```\r\n@Test\r\npublic void givenAppManager_whenPrivateStaticMethod_thenValidateExpectedResponse() {\r\n    int response = Deencapsulation.invoke(AppManager.class, \"stringToInteger\", \"110\");\r\n    assertEquals(110, response);\r\n}\r\n```"]