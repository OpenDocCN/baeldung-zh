["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-aop</artifactId>\r\n</dependency>\r\n```","```\r\n@Target(ElementType.METHOD)\r\n@Retention(RetentionPolicy.RUNTIME)\r\npublic @interface AccountOperation {\r\n    String operation();\r\n} \r\n```","```\r\npublic class Account {\r\n\r\n    private String accountNumber;\r\n    private double balance;\r\n\r\n    // getter / setters / toString\r\n}\r\n```","```\r\n@Component\r\npublic class BankAccountService {\r\n\r\n    @AccountOperation(operation = \"deposit\")\r\n    public void deposit(Account account, Double amount) {\r\n        account.setBalance(account.getBalance() + amount);\r\n    }\r\n\r\n    @AccountOperation(operation = \"withdraw\")\r\n    public void withdraw(Account account, Double amount) throws WithdrawLimitException {\r\n\r\n        if(amount > 500.0) {\r\n            throw new WithdrawLimitException(\"Withdraw limit exceeded.\");\r\n        }\r\n\r\n        account.setBalance(account.getBalance() - amount);\r\n    }\r\n\r\n    public double getBalance() {\r\n        return RandomUtils.nextDouble();\r\n    }\r\n}\r\n```","```\r\n@Aspect\r\n@Component\r\npublic class BankAccountAspect {\r\n\r\n    @Before(value = \"@annotation(com.baeldung.method.info.AccountOperation)\")\r\n    public void getAccountOperationInfo(JoinPoint joinPoint) {\r\n\r\n        // Method Information\r\n        MethodSignature signature = (MethodSignature) joinPoint.getSignature();\r\n\r\n        System.out.println(\"full method description: \" + signature.getMethod());\r\n        System.out.println(\"method name: \" + signature.getMethod().getName());\r\n        System.out.println(\"declaring type: \" + signature.getDeclaringType());\r\n\r\n        // Method args\r\n        System.out.println(\"Method args names:\");\r\n        Arrays.stream(signature.getParameterNames())\r\n          .forEach(s -> System.out.println(\"arg name: \" + s));\r\n\r\n        System.out.println(\"Method args types:\");\r\n        Arrays.stream(signature.getParameterTypes())\r\n          .forEach(s -> System.out.println(\"arg type: \" + s));\r\n\r\n        System.out.println(\"Method args values:\");\r\n        Arrays.stream(joinPoint.getArgs())\r\n          .forEach(o -> System.out.println(\"arg value: \" + o.toString()));\r\n\r\n        // Additional Information\r\n        System.out.println(\"returning type: \" + signature.getReturnType());\r\n        System.out.println(\"method modifier: \" + Modifier.toString(signature.getModifiers()));\r\n        Arrays.stream(signature.getExceptionTypes())\r\n          .forEach(aClass -> System.out.println(\"exception type: \" + aClass));\r\n\r\n        // Method annotation\r\n        Method method = signature.getMethod();\r\n        AccountOperation accountOperation = method.getAnnotation(AccountOperation.class);\r\n        System.out.println(\"Account operation annotation: \" + accountOperation);\r\n        System.out.println(\"Account operation value: \" + accountOperation.operation());\r\n    }\r\n} \r\n```","```\r\nMethodSignature signature = (MethodSignature) joinPoint.getSignature();\r\n\r\nSystem.out.println(\"full method description: \" + signature.getMethod());\r\nSystem.out.println(\"method name: \" + signature.getMethod().getName());\r\nSystem.out.println(\"declaring type: \" + signature.getDeclaringType());\r\n```","```\r\n@Test\r\nvoid withdraw() {\r\n    bankAccountService.withdraw(account, 500.0);\r\n    assertTrue(account.getBalance() == 1500.0);\r\n}\r\n```","```\r\nfull method description: public void com.baeldung.method.info.BankAccountService.withdraw(com.baeldung.method.info.Account,java.lang.Double) throws com.baeldung.method.info.WithdrawLimitException\r\nmethod name: withdraw\r\ndeclaring type: class com.baeldung.method.info.BankAccountService\r\n```","```\r\nSystem.out.println(\"Method args names:\");\r\nArrays.stream(signature.getParameterNames()).forEach(s -> System.out.println(\"arg name: \" + s));\r\n\r\nSystem.out.println(\"Method args types:\");\r\nArrays.stream(signature.getParameterTypes()).forEach(s -> System.out.println(\"arg type: \" + s));\r\n\r\nSystem.out.println(\"Method args values:\");\r\nArrays.stream(joinPoint.getArgs()).forEach(o -> System.out.println(\"arg value: \" + o.toString()));\r\n```","```\r\n@Test\r\nvoid deposit() {\r\n    bankAccountService.deposit(account, 500.0);\r\n    assertTrue(account.getBalance() == 2500.0);\r\n}\r\n```","```\r\nMethod args names:\r\narg name: account\r\narg name: amount\r\nMethod args types:\r\narg type: class com.baeldung.method.info.Account\r\narg type: class java.lang.Double\r\nMethod args values:\r\narg value: Account{accountNumber='12345', balance=2000.0}\r\narg value: 500.0\r\n```","```\r\nMethod method = signature.getMethod();\r\nAccountOperation accountOperation = method.getAnnotation(AccountOperation.class);\r\nSystem.out.println(\"Account operation annotation: \" + accountOperation);\r\nSystem.out.println(\"Account operation value: \" + accountOperation.operation());\r\n```","```\r\nAccount operation annotation: @com.baeldung.method.info.AccountOperation(operation=withdraw)\r\nAccount operation value: withdraw\r\n```","```\r\nSystem.out.println(\"returning type: \" + signature.getReturnType());\r\nSystem.out.println(\"method modifier: \" + Modifier.toString(signature.getModifiers()));\r\nArrays.stream(signature.getExceptionTypes())\r\n  .forEach(aClass -> System.out.println(\"exception type: \" + aClass));\r\n```","```\r\n@Test \r\nvoid withdrawWhenLimitReached() \r\n{ \r\n    Assertions.assertThatExceptionOfType(WithdrawLimitException.class)\r\n      .isThrownBy(() -> bankAccountService.withdraw(account, 600.0)); \r\n    assertTrue(account.getBalance() == 2000.0); \r\n}\r\n```","```\r\nreturning type: void\r\nmethod modifier: public\r\nexception type: class com.baeldung.method.info.WithdrawLimitException \r\n```","```\r\n@Test\r\nvoid getBalance() {\r\n    bankAccountService.getBalance();\r\n}\r\n```"]