["```\r\n<dependency>\r\n    <groupId>io.reactivex.rxjava2</groupId>\r\n    <artifactId>rxjava</artifactId>\r\n    <version>2.2.2</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.github.akarnokd</groupId>\r\n    <artifactId>rxjava2-extensions</artifactId>\r\n    <version>0.20.4</version>\r\n</dependency>\r\n```","```\r\nAtomicInteger counter = new AtomicInteger();\r\nCallable<Integer> callable = () -> counter.incrementAndGet();\r\n```","```\r\nObservable<Integer> source = Observable.fromCallable(callable);\r\n\r\nfor (int i = 1; i < 5; i++) {\r\n    source.test()\r\n      .awaitDone(5, TimeUnit.SECONDS)\r\n      .assertResult(i);\r\n    assertEquals(i, counter.get());\r\n}\r\n```","```\r\nObservable<Integer> source = AsyncObservable.start(callable);\r\n\r\nfor (int i = 1; i < 5; i++) {\r\n    source.test()\r\n      .awaitDone(5, TimeUnit.SECONDS)\r\n      .assertResult(1);\r\n    assertEquals(1, counter.get());\r\n}\r\n```","```\r\nExecutorService executor = Executors.newSingleThreadExecutor();\r\nFuture<Integer> future = executor.submit(callable);\r\n```","```\r\nObservable<Integer> source = Observable.fromFuture(future);\r\n\r\nfor (int i = 1; i < 5; i++) {\r\n    source.test()\r\n      .awaitDone(5, TimeUnit.SECONDS)\r\n      .assertResult(1);\r\n    assertEquals(1, counter.get());\r\n}\r\nexecutor.shutdown();\r\n```","```\r\nsource.doOnDispose(() -> future.cancel(true));\r\n```","```\r\nExecutorService executor = Executors.newSingleThreadExecutor();\r\nObservable<Integer> source = AsyncObservable.startFuture(() -> executor.submit(callable));\r\n\r\nfor (int i = 1; i < 5; i++) {\r\n    source.test()\r\n      .awaitDone(5, TimeUnit.SECONDS)\r\n      .assertResult(i);\r\n    assertEquals(i, counter.get());\r\n}\r\nexecutor.shutdown();\r\n```","```\r\nList<Integer> list = Arrays.asList(new Integer[] { counter.incrementAndGet(), \r\n  counter.incrementAndGet(), counter.incrementAndGet() });\r\nExecutorService exec = Executors.newSingleThreadExecutor();\r\nCallable<Observable<Integer>> callable = () -> Observable.fromIterable(list);\r\n```","```\r\nObservable<Integer> source = AsyncObservable.deferFuture(() -> exec.submit(callable));\r\nfor (int i = 1; i < 4; i++) {\r\n    source.test()\r\n      .awaitDone(5, TimeUnit.SECONDS)\r\n      .assertResult(1,2,3);\r\n}\r\nexec.shutdown();\r\n```"]