["```\r\nservice StockQuoteProvider {\r\n\r\n  rpc serverSideStreamingGetListStockQuotes(Stock) returns (stream StockQuote) {}\r\n\r\n  rpc clientSideStreamingGetStatisticsOfStocks(stream Stock) returns (StockQuote) {}\r\n\r\n  rpc bidirectionalStreamingGetListsStockQuotes(stream Stock) returns (stream StockQuote) {}\r\n}\r\nmessage Stock {\r\n   string ticker_symbol = 1;\r\n   string company_name = 2;\r\n   string description = 3;\r\n}\r\nmessage StockQuote {\r\n   double price = 1;\r\n   int32 offer_number = 2;\r\n   string description = 3;\r\n}\r\n```","```\r\npublic class StockServer {\r\n    private int port;\r\n    private io.grpc.Server server;\r\n\r\n    public StockServer(int port) throws IOException {\r\n        this.port = port;\r\n        server = ServerBuilder.forPort(port)\r\n          .addService(new StockService())\r\n          .build();\r\n    }\r\n    //...\r\n}\r\n```","```\r\n@Override\r\npublic void serverSideStreamingGetListStockQuotes(Stock request, StreamObserver<StockQuote> responseObserver) {\r\n    for (int i = 1; i <= 5; i++) {\r\n        StockQuote stockQuote = StockQuote.newBuilder()\r\n          .setPrice(fetchStockPriceBid(request))\r\n          .setOfferNumber(i)\r\n          .setDescription(\"Price for stock:\" + request.getTickerSymbol())\r\n          .build();\r\n        responseObserver.onNext(stockQuote);\r\n    }\r\n    responseObserver.onCompleted();\r\n}\r\n```","```\r\n@Override\r\npublic StreamObserver<Stock> clientSideStreamingGetStatisticsOfStocks(StreamObserver<StockQuote> responseObserver) {\r\n    return new StreamObserver<Stock>() {\r\n        int count;\r\n        double price = 0.0;\r\n        StringBuffer sb = new StringBuffer();\r\n\r\n        @Override\r\n        public void onNext(Stock stock) {\r\n            count++;\r\n            price = +fetchStockPriceBid(stock);\r\n            sb.append(\":\")\r\n                .append(stock.getTickerSymbol());\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            responseObserver.onNext(StockQuote.newBuilder()\r\n                .setPrice(price / count)\r\n                .setDescription(\"Statistics-\" + sb.toString())\r\n                .build());\r\n            responseObserver.onCompleted();\r\n        }\r\n\r\n        // handle onError() ...\r\n    };\r\n}\r\n```","```\r\n@Override\r\npublic StreamObserver<Stock> bidirectionalStreamingGetListsStockQuotes(StreamObserver<StockQuote> responseObserver) {\r\n    return new StreamObserver<Stock>() {\r\n        @Override\r\n        public void onNext(Stock request) {\r\n            for (int i = 1; i <= 5; i++) {\r\n                StockQuote stockQuote = StockQuote.newBuilder()\r\n                  .setPrice(fetchStockPriceBid(request))\r\n                  .setOfferNumber(i)\r\n                  .setDescription(\"Price for stock:\" + request.getTickerSymbol())\r\n                  .build();\r\n                responseObserver.onNext(stockQuote);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            responseObserver.onCompleted();\r\n        }\r\n\r\n        //handle OnError() ...\r\n    };\r\n}\r\n```","```\r\npublic class StockClient {\r\n    private StockQuoteProviderBlockingStub blockingStub;\r\n    private StockQuoteProviderStub nonBlockingStub;\r\n\r\n    public StockClient(Channel channel) {\r\n        blockingStub = StockQuoteProviderGrpc.newBlockingStub(channel);\r\n        nonBlockingStub = StockQuoteProviderGrpc.newStub(channel);\r\n    }\r\n    // ...\r\n}\r\n```","```\r\npublic void serverSideStreamingListOfStockPrices() {\r\n    Stock request = Stock.newBuilder()\r\n      .setTickerSymbol(\"AU\")\r\n      .setCompanyName(\"Austich\")\r\n      .setDescription(\"server streaming example\")\r\n      .build();\r\n    Iterator<StockQuote> stockQuotes;\r\n    try {\r\n        logInfo(\"REQUEST - ticker symbol {0}\", request.getTickerSymbol());\r\n        stockQuotes = blockingStub.serverSideStreamingGetListStockQuotes(request);\r\n        for (int i = 1; stockQuotes.hasNext(); i++) {\r\n            StockQuote stockQuote = stockQuotes.next();\r\n            logInfo(\"RESPONSE - Price #\" + i + \": {0}\", stockQuote.getPrice());\r\n        }\r\n    } catch (StatusRuntimeException e) {\r\n        logInfo(\"RPC failed: {0}\", e.getStatus());\r\n    }\r\n}\r\n```","```\r\npublic void clientSideStreamingGetStatisticsOfStocks() throws InterruptedException {\r\n    StreamObserver<StockQuote> responseObserver = new StreamObserver<StockQuote>() {\r\n        @Override\r\n        public void onNext(StockQuote summary) {\r\n            logInfo(\"RESPONSE, got stock statistics - Average Price: {0}, description: {1}\", summary.getPrice(), summary.getDescription());\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            logInfo(\"Finished clientSideStreamingGetStatisticsOfStocks\");\r\n        }\r\n\r\n        // Override OnError ...\r\n    };\r\n\r\n    StreamObserver<Stock> requestObserver = nonBlockingStub.clientSideStreamingGetStatisticsOfStocks(responseObserver);\r\n    try {\r\n        for (Stock stock : stocks) {\r\n            logInfo(\"REQUEST: {0}, {1}\", stock.getTickerSymbol(), stock.getCompanyName());\r\n            requestObserver.onNext(stock);\r\n        }\r\n    } catch (RuntimeException e) {\r\n        requestObserver.onError(e);\r\n        throw e;\r\n    }\r\n    requestObserver.onCompleted();\r\n}\r\n```","```\r\npublic void bidirectionalStreamingGetListsStockQuotes() throws InterruptedException{\r\n    StreamObserver<StockQuote> responseObserver = new StreamObserver<StockQuote>() {\r\n        @Override\r\n        public void onNext(StockQuote stockQuote) {\r\n            logInfo(\"RESPONSE price#{0} : {1}, description:{2}\", stockQuote.getOfferNumber(), stockQuote.getPrice(), stockQuote.getDescription());\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n            logInfo(\"Finished bidirectionalStreamingGetListsStockQuotes\");\r\n        }\r\n\r\n        //Override onError() ...\r\n    };\r\n\r\n    StreamObserver<Stock> requestObserver = nonBlockingStub.bidirectionalStreamingGetListsStockQuotes(responseObserver);\r\n    try {\r\n        for (Stock stock : stocks) {\r\n            logInfo(\"REQUEST: {0}, {1}\", stock.getTickerSymbol(), stock.getCompanyName());\r\n            requestObserver.onNext(stock);\r\n            Thread.sleep(200);\r\n        }\r\n    } catch (RuntimeException e) {\r\n        requestObserver.onError(e);\r\n        throw e;\r\n    }\r\n    requestObserver.onCompleted();\r\n}\r\n```","```\r\nmvn exec:java -Dexec.mainClass=com.baeldung.grpc.streaming.StockServer\r\n```","```\r\nmvn exec:java -Dexec.mainClass=com.baeldung.grpc.streaming.StockClient\r\n```"]