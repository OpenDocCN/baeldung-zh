["```\r\n<dependency>\r\n    <groupId>io.netty</groupId>\r\n    <artifactId>netty-all</artifactId>\r\n    <version>4.1.10.Final</version>\r\n</dependency>\r\n```","```\r\npublic class RequestData {\r\n    private int intValue;\r\n    private String stringValue;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class ResponseData {\r\n    private int intValue;\r\n\r\n    // standard getters and setters\r\n}\r\n```","```\r\npublic class SimpleProcessingHandler \r\n  extends ChannelInboundHandlerAdapter {\r\n    private ByteBuf tmp;\r\n\r\n    @Override\r\n    public void handlerAdded(ChannelHandlerContext ctx) {\r\n        System.out.println(\"Handler added\");\r\n        tmp = ctx.alloc().buffer(4);\r\n    }\r\n\r\n    @Override\r\n    public void handlerRemoved(ChannelHandlerContext ctx) {\r\n        System.out.println(\"Handler removed\");\r\n        tmp.release();\r\n        tmp = null;\r\n    }\r\n\r\n    @Override\r\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\r\n        ByteBuf m = (ByteBuf) msg;\r\n        tmp.writeBytes(m);\r\n        m.release();\r\n        if (tmp.readableBytes() >= 4) {\r\n            // request processing\r\n            RequestData requestData = new RequestData();\r\n            requestData.setIntValue(tmp.readInt());\r\n            ResponseData responseData = new ResponseData();\r\n            responseData.setIntValue(requestData.getIntValue() * 2);\r\n            ChannelFuture future = ctx.writeAndFlush(responseData);\r\n            future.addListener(ChannelFutureListener.CLOSE);\r\n        }\r\n    }\r\n}\r\n```","```\r\npublic class RequestDecoder extends ReplayingDecoder<RequestData> {\r\n\r\n    private final Charset charset = Charset.forName(\"UTF-8\");\r\n\r\n    @Override\r\n    protected void decode(ChannelHandlerContext ctx, \r\n      ByteBuf in, List<Object> out) throws Exception {\r\n\r\n        RequestData data = new RequestData();\r\n        data.setIntValue(in.readInt());\r\n        int strLen = in.readInt();\r\n        data.setStringValue(\r\n          in.readCharSequence(strLen, charset).toString());\r\n        out.add(data);\r\n    }\r\n}\r\n```","```\r\npublic class ResponseDataEncoder \r\n  extends MessageToByteEncoder<ResponseData> {\r\n\r\n    @Override\r\n    protected void encode(ChannelHandlerContext ctx, \r\n      ResponseData msg, ByteBuf out) throws Exception {\r\n        out.writeInt(msg.getIntValue());\r\n    }\r\n}\r\n```","```\r\npublic class ProcessingHandler extends ChannelInboundHandlerAdapter {\r\n\r\n    @Override\r\n    public void channelRead(ChannelHandlerContext ctx, Object msg) \r\n      throws Exception {\r\n\r\n        RequestData requestData = (RequestData) msg;\r\n        ResponseData responseData = new ResponseData();\r\n        responseData.setIntValue(requestData.getIntValue() * 2);\r\n        ChannelFuture future = ctx.writeAndFlush(responseData);\r\n        future.addListener(ChannelFutureListener.CLOSE);\r\n        System.out.println(requestData);\r\n    }\r\n}\r\n```","```\r\npublic class NettyServer {\r\n\r\n    private int port;\r\n\r\n    // constructor\r\n\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        int port = args.length > 0\r\n          ? Integer.parseInt(args[0]);\r\n          : 8080;\r\n\r\n        new NettyServer(port).run();\r\n    }\r\n\r\n    public void run() throws Exception {\r\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\r\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\r\n        try {\r\n            ServerBootstrap b = new ServerBootstrap();\r\n            b.group(bossGroup, workerGroup)\r\n              .channel(NioServerSocketChannel.class)\r\n              .childHandler(new ChannelInitializer<SocketChannel>() {\r\n                @Override\r\n                public void initChannel(SocketChannel ch) \r\n                  throws Exception {\r\n                    ch.pipeline().addLast(new RequestDecoder(), \r\n                      new ResponseDataEncoder(), \r\n                      new ProcessingHandler());\r\n                }\r\n            }).option(ChannelOption.SO_BACKLOG, 128)\r\n              .childOption(ChannelOption.SO_KEEPALIVE, true);\r\n\r\n            ChannelFuture f = b.bind(port).sync();\r\n            f.channel().closeFuture().sync();\r\n        } finally {\r\n            workerGroup.shutdownGracefully();\r\n            bossGroup.shutdownGracefully();\r\n        }\r\n    }\r\n}\r\n```","```\r\nch.pipeline().addLast(\r\n  new RequestDecoder(), \r\n  new ResponseDataEncoder(), \r\n  new ProcessingHandler());\r\n```","```\r\npublic class RequestDataEncoder \r\n  extends MessageToByteEncoder<RequestData> {\r\n\r\n    private final Charset charset = Charset.forName(\"UTF-8\");\r\n\r\n    @Override\r\n    protected void encode(ChannelHandlerContext ctx, \r\n      RequestData msg, ByteBuf out) throws Exception {\r\n\r\n        out.writeInt(msg.getIntValue());\r\n        out.writeInt(msg.getStringValue().length());\r\n        out.writeCharSequence(msg.getStringValue(), charset);\r\n    }\r\n}\r\n```","```\r\npublic class ResponseDataDecoder \r\n  extends ReplayingDecoder<ResponseData> {\r\n\r\n    @Override\r\n    protected void decode(ChannelHandlerContext ctx, \r\n      ByteBuf in, List<Object> out) throws Exception {\r\n\r\n        ResponseData data = new ResponseData();\r\n        data.setIntValue(in.readInt());\r\n        out.add(data);\r\n    }\r\n}\r\n```","```\r\npublic class ClientHandler extends ChannelInboundHandlerAdapter {\r\n\r\n    @Override\r\n    public void channelActive(ChannelHandlerContext ctx) \r\n      throws Exception {\r\n\r\n        RequestData msg = new RequestData();\r\n        msg.setIntValue(123);\r\n        msg.setStringValue(\r\n          \"all work and no play makes jack a dull boy\");\r\n        ChannelFuture future = ctx.writeAndFlush(msg);\r\n    }\r\n\r\n    @Override\r\n    public void channelRead(ChannelHandlerContext ctx, Object msg) \r\n      throws Exception {\r\n        System.out.println((ResponseData)msg);\r\n        ctx.close();\r\n    }\r\n}\r\n```","```\r\npublic class NettyClient {\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        String host = \"localhost\";\r\n        int port = 8080;\r\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\r\n\r\n        try {\r\n            Bootstrap b = new Bootstrap();\r\n            b.group(workerGroup);\r\n            b.channel(NioSocketChannel.class);\r\n            b.option(ChannelOption.SO_KEEPALIVE, true);\r\n            b.handler(new ChannelInitializer<SocketChannel>() {\r\n\r\n                @Override\r\n                public void initChannel(SocketChannel ch) \r\n                  throws Exception {\r\n                    ch.pipeline().addLast(new RequestDataEncoder(), \r\n                      new ResponseDataDecoder(), new ClientHandler());\r\n                }\r\n            });\r\n\r\n            ChannelFuture f = b.connect(host, port).sync();\r\n\r\n            f.channel().closeFuture().sync();\r\n        } finally {\r\n            workerGroup.shutdownGracefully();\r\n        }\r\n    }\r\n}\r\n```"]