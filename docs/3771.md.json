["```\r\npublic static String join(String[] arrayOfString){\r\n    return Arrays.asList(arrayOfString)\r\n      .stream()\r\n      //.map(...)\r\n      .collect(Collectors.joining(\",\"));\r\n}\r\n```","```\r\npublic static String joinWithPrefixPostfix(String[] arrayOfString){\r\n    return Arrays.asList(arrayOfString)\r\n      .stream()\r\n      //.map(...)\r\n      .collect(Collectors.joining(\",\",\"[\",\"]\"));\r\n}\r\n```","```\r\npublic static List<String> split(String str){\r\n    return Stream.of(str.split(\",\"))\r\n      .map (elem -> new String(elem))\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic static List<Character> splitToListOfChar(String str) {\r\n    return str.chars()\r\n      .mapToObj(item -> (char) item)\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\npublic static Map<String, String> arrayToMap(String[] arrayOfString) {\r\n\treturn Arrays.asList(arrayOfString)\r\n\t  .stream()\r\n\t  .map(str -> str.split(\":\"))\r\n\t  .collect(toMap(str -> str[0], str -> str[1]));\r\n}\r\n```","```\r\n<build>\r\n    <plugins>\r\n      <plugin>\r\n        <groupId>org.apache.maven.plugins</groupId>\r\n        <artifactId>maven-compiler-plugin</artifactId>\r\n        <version>3.3</version>\r\n        <configuration>\r\n          <source>1.8</source>\r\n          <target>1.8</target>\r\n        </configuration>\r\n      </plugin>\r\n    </plugins>        \r\n</build>\r\n```","```\r\n@Test\r\npublic void givenArray_transformedToStream_convertToString() {\r\n    String[] programmingLanguages = {\"java\", \"python\", \"nodejs\", \"ruby\"};\r\n    String expectation = \"java,python,nodejs,ruby\";\r\n\r\n    String result  = JoinerSplitter.join(programmingLanguages);\r\n    assertEquals(result, expectation);\r\n}\r\n```","```\r\n@Test\r\npublic void givenString_transformedToStream_convertToList() {\r\n    String programmingLanguages = \"java,python,nodejs,ruby\";\r\n\r\n    List<String> expectation = new ArrayList<>();\r\n    expectation.add(\"java\");\r\n    expectation.add(\"python\");\r\n    expectation.add(\"nodejs\");\r\n    expectation.add(\"ruby\");\r\n\r\n    List<String> result  = JoinerSplitter.split(programmingLanguages);\r\n\r\n    assertEquals(result, expectation);\r\n}\r\n```","```\r\n@Test\r\npublic void givenStringArray_transformedToStream_convertToMap() {\r\n\r\n    String[] programming_languages = new String[] {\"language:java\",\"os:linux\",\"editor:emacs\"};\r\n\r\n    Map<String,String> expectation=new HashMap<>();\r\n    expectation.put(\"language\", \"java\");\r\n    expectation.put(\"os\", \"linux\");\r\n    expectation.put(\"editor\", \"emacs\");\r\n\r\n    Map<String, String> result = JoinerSplitter.arrayToMap(programming_languages);\r\n    assertEquals(result, expectation);\r\n\r\n}\r\n```"]