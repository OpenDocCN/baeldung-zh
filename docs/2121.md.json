["```\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy</artifactId>\r\n    <version>2.4.13</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy-sql</artifactId>\r\n    <version>2.4.13</version>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.codehaus.groovy</groupId>\r\n    <artifactId>groovy-all</artifactId>\r\n    <version>2.4.13</version>\r\n</dependency>\r\n```","```\r\nMap dbConnParams = [\r\n  url: 'jdbc:hsqldb:mem:testDB',\r\n  user: 'sa',\r\n  password: '',\r\n  driver: 'org.hsqldb.jdbc.JDBCDriver']\r\n```","```\r\ndef sql = Sql.newInstance(dbConnParams)\r\n```","```\r\nsql.close()\r\n```","```\r\ndef sql = Sql.newInstance(datasource)\r\n```","```\r\nSql.withInstance(dbConnParams) {\r\n    Sql sql -> haveFunWith(sql)\r\n}\r\n```","```\r\nsql.execute \"create table PROJECT (id integer not null, name varchar(50), url varchar(100))\"\r\n```","```\r\nsql.execute \"create table PROJECT (ID IDENTITY, NAME VARCHAR (50), URL VARCHAR (100))\"\r\n```","```\r\ndef ids = sql.executeInsert \"\"\"\r\n  INSERT INTO PROJECT (NAME, URL) VALUES ('tutorials', 'github.com/eugenp/tutorials')\r\n\"\"\"\r\n```","```\r\nassertEquals(0, ids[0][0])\r\n```","```\r\nids = sql.executeInsert \"\"\"\r\n  INSERT INTO PROJECT (NAME, URL)\r\n  VALUES ('REST with Spring', 'github.com/eugenp/REST-With-Spring')\r\n\"\"\"\r\n\r\nassertEquals(1, ids[0][0])\r\n```","```\r\ndef count = sql.executeUpdate(\"UPDATE PROJECT SET URL = 'https://' + URL\")\r\n\r\nassertEquals(2, count)\r\n```","```\r\nsql.eachRow(\"SELECT * FROM PROJECT\") { GroovyResultSet rs ->\r\n    haveFunWith(rs)\r\n}\r\n```","```\r\nsql.eachRow(\"SELECT * FROM PROJECT\") { rs ->\r\n    assertNotNull(rs.name)\r\n    assertNotNull(rs.URL)\r\n}\r\n```","```\r\nsql.eachRow(\"SELECT * FROM PROJECT\") { rs ->\r\n    assertNotNull(rs[0])\r\n    assertNotNull(rs[1])\r\n    assertNotNull(rs[2])\r\n}\r\n```","```\r\ndef offset = 1\r\ndef maxResults = 1\r\ndef rows = sql.rows('SELECT * FROM PROJECT ORDER BY NAME', offset, maxResults)\r\n\r\nassertEquals(1, rows.size())\r\nassertEquals('REST with Spring', rows[0].name)\r\n```","```\r\nsql.execute(\r\n    'INSERT INTO PROJECT (NAME, URL) VALUES (?, ?)',\r\n    'tutorials', 'github.com/eugenp/tutorials')\r\n```","```\r\nsql.execute(\r\n    'INSERT INTO PROJECT (NAME, URL) VALUES (:name, :url)',\r\n    [name: 'REST with Spring', url: 'github.com/eugenp/REST-With-Spring'])\r\n```","```\r\ndef name = 'REST with Spring'\r\ndef url = 'github.com/eugenp/REST-With-Spring'\r\nsql.execute \"INSERT INTO PROJECT (NAME, URL) VALUES (${name}, ${url})\"\r\n```","```\r\nsql.withTransaction {\r\n    sql.execute \"\"\"\r\n        INSERT INTO PROJECT (NAME, URL)\r\n        VALUES ('tutorials', 'github.com/eugenp/tutorials')\r\n    \"\"\"\r\n    sql.execute \"\"\"\r\n        INSERT INTO PROJECT (NAME, URL)\r\n        VALUES ('REST with Spring', 'github.com/eugenp/REST-With-Spring')\r\n    \"\"\"\r\n}\r\n```","```\r\nsql.withTransaction {\r\n    sql.execute \"\"\"\r\n        INSERT INTO PROJECT (NAME, URL)\r\n        VALUES ('tutorials', 'github.com/eugenp/tutorials')\r\n    \"\"\"\r\n    sql.commit()\r\n    sql.execute \"\"\"\r\n        INSERT INTO PROJECT (NAME, URL)\r\n        VALUES ('REST with Spring', 'github.com/eugenp/REST-With-Spring')\r\n    \"\"\"\r\n    sql.rollback()\r\n}\r\n```","```\r\nsql.cacheConnection {\r\n    sql.execute \"\"\"\r\n        INSERT INTO PROJECT (NAME, URL)\r\n        VALUES ('tutorials', 'github.com/eugenp/tutorials')\r\n    \"\"\"\r\n    throw new Exception('This does not roll back')\r\n}\r\n```"]