["```\r\njava.lang.String cannot be cast to [Ljava.lang.String;\r\n```","```\r\npublic class QueryExecutor {\r\n    public static List<String[]> executeNativeQueryNoCastCheck(String statement, EntityManager em) {\r\n        Query query = em.createNativeQuery(statement);\r\n        return query.getResultList();\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Message {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String text;\r\n\r\n    // getters and setters\r\n\r\n}\r\n```","```\r\npublic class SpringCastUnitTest {\r\n\r\n    private static EntityManager em;\r\n    private static EntityManagerFactory emFactory;\r\n\r\n    @BeforeClass\r\n    public static void setup() {\r\n        emFactory = Persistence.createEntityManagerFactory(\"jpa-h2\");\r\n        em = emFactory.createEntityManager();\r\n\r\n        // insert an object into the db\r\n        Message message = new Message();\r\n        message.setText(\"text\");\r\n\r\n        EntityTransaction tr = em.getTransaction();\r\n        tr.begin();\r\n        em.persist(message);\r\n        tr.commit();\r\n    }\r\n}\r\n```","```\r\n@Test(expected = ClassCastException.class)\r\npublic void givenExecutorNoCastCheck_whenQueryReturnsOneColumn_thenClassCastThrown() {\r\n    List<String[]> results = QueryExecutor.executeNativeQueryNoCastCheck(\"select text from message\", em);\r\n\r\n    // fails\r\n    for (String[] row : results) {\r\n        // do nothing\r\n    }\r\n}\r\n```","```\r\npublic static List<String[]> executeNativeQueryWithCastCheck(String statement, EntityManager em) {\r\n    Query query = em.createNativeQuery(statement);\r\n    List results = query.getResultList();\r\n\r\n    if (results.isEmpty()) {\r\n        return new ArrayList<>();\r\n    }\r\n\r\n    if (results.get(0) instanceof String) {\r\n        return ((List<String>) results)\r\n          .stream()\r\n          .map(s -> new String[] { s })\r\n          .collect(Collectors.toList());\r\n    } else {\r\n        return (List<String[]>) results;\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenExecutorWithCastCheck_whenQueryReturnsOneColumn_thenNoClassCastThrown() {\r\n    List<String[]> results = QueryExecutor.executeNativeQueryWithCastCheck(\"select text from message\", em);\r\n    assertEquals(\"text\", results.get(0)[0]);\r\n}\r\n```","```\r\npublic static <T> List<T> executeNativeQueryGeneric(String statement, String mapping, EntityManager em) {\r\n    Query query = em.createNativeQuery(statement, mapping);\r\n    return query.getResultList();\r\n}\r\n```","```\r\n@SqlResultSetMapping(\r\n  name=\"textQueryMapping\",\r\n  classes={\r\n    @ConstructorResult(\r\n      targetClass=Message.class,\r\n      columns={\r\n        @ColumnResult(name=\"text\")\r\n      }\r\n    )\r\n  }\r\n)\r\n@Entity\r\npublic class Message {\r\n    // ...\r\n}\r\n```","```\r\npublic class Message {\r\n\r\n    // ... fields and default constructor\r\n\r\n    public Message(String text) {\r\n        this.text = text;\r\n    }\r\n\r\n    // ... getters and setters\r\n\r\n}\r\n```","```\r\n@Test\r\npublic void givenExecutorGeneric_whenQueryReturnsOneColumn_thenNoClassCastThrown() {\r\n    List<Message> results = QueryExecutor.executeNativeQueryGeneric(\r\n      \"select text from message\", \"textQueryMapping\", em);\r\n    assertEquals(\"text\", results.get(0).getText());\r\n}\r\n```"]