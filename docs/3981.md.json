["```\r\nFiles.readLines(new File(path), Charsets.UTF_8);\r\n```","```\r\nFileUtils.readLines(new File(path));\r\n```","```\r\n@Test\r\npublic void givenUsingGuava_whenIteratingAFile_thenWorks() throws IOException {\r\n    String path = ...\r\n    Files.readLines(new File(path), Charsets.UTF_8);\r\n}\r\n```","```\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: 128 Mb\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: 116 Mb\r\n```","```\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: 2666 Mb\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: 490 Mb\r\n```","```\r\nFileInputStream inputStream = null;\r\nScanner sc = null;\r\ntry {\r\n    inputStream = new FileInputStream(path);\r\n    sc = new Scanner(inputStream, \"UTF-8\");\r\n    while (sc.hasNextLine()) {\r\n        String line = sc.nextLine();\r\n        // System.out.println(line);\r\n    }\r\n    // note that Scanner suppresses exceptions\r\n    if (sc.ioException() != null) {\r\n        throw sc.ioException();\r\n    }\r\n} finally {\r\n    if (inputStream != null) {\r\n        inputStream.close();\r\n    }\r\n    if (sc != null) {\r\n        sc.close();\r\n    }\r\n}\r\n```","```\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Total Memory: 763 Mb\r\n[main] INFO  org.baeldung.java.CoreJavaIoUnitTest - Free Memory: 605 Mb\r\n```","```\r\nLineIterator it = FileUtils.lineIterator(theFile, \"UTF-8\");\r\ntry {\r\n    while (it.hasNext()) {\r\n        String line = it.nextLine();\r\n        // do something with line\r\n    }\r\n} finally {\r\n    LineIterator.closeQuietly(it);\r\n}\r\n```","```\r\n[main] INFO  o.b.java.CoreJavaIoIntegrationTest - Total Memory: 752 Mb\r\n[main] INFO  o.b.java.CoreJavaIoIntegrationTest - Free Memory: 564 Mb\r\n```"]