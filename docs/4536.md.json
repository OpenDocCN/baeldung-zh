["```\r\nprivate boolean sendEmailReplies;\r\n```","```\r\n@Component\r\npublic class NotificationRedditScheduler {\r\n\r\n    @Autowired\r\n    private INotificationRedditService notificationRedditService;\r\n\r\n    @Autowired\r\n    private PreferenceRepository preferenceRepository;\r\n\r\n    @Scheduled(fixedRate = 60 * 60 * 1000)\r\n    public void checkInboxUnread() {\r\n        List<Preference> preferences = preferenceRepository.findBySendEmailRepliesTrue();\r\n        for (Preference preference : preferences) {\r\n            notificationRedditService.checkAndNotify(preference);\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Service\r\npublic class NotificationRedditService implements INotificationRedditService {\r\n    private Logger logger = LoggerFactory.getLogger(getClass());\r\n    private static String NOTIFICATION_TEMPLATE = \"You have %d unread post replies.\";\r\n    private static String MESSAGE_TEMPLATE = \"%s replied on your post %s : %s\";\r\n\r\n    @Autowired\r\n    @Qualifier(\"schedulerRedditTemplate\")\r\n    private OAuth2RestTemplate redditRestTemplate;\r\n\r\n    @Autowired\r\n    private ApplicationEventPublisher eventPublisher;\r\n\r\n    @Autowired\r\n    private UserRepository userRepository;\r\n\r\n    @Override\r\n    public void checkAndNotify(Preference preference) {\r\n        try {\r\n            checkAndNotifyInternal(preference);\r\n        } catch (Exception e) {\r\n            logger.error(\r\n              \"Error occurred while checking and notifying = \" + preference.getEmail(), e);\r\n        }\r\n    }\r\n\r\n    private void checkAndNotifyInternal(Preference preference) {\r\n        User user = userRepository.findByPreference(preference);\r\n        if ((user == null) || (user.getAccessToken() == null)) {\r\n            return;\r\n        }\r\n\r\n        DefaultOAuth2AccessToken token = new DefaultOAuth2AccessToken(user.getAccessToken());\r\n        token.setRefreshToken(new DefaultOAuth2RefreshToken((user.getRefreshToken())));\r\n        token.setExpiration(user.getTokenExpiration());\r\n        redditRestTemplate.getOAuth2ClientContext().setAccessToken(token);\r\n\r\n        JsonNode node = redditRestTemplate.getForObject(\r\n          \"https://oauth.reddit.com/message/selfreply?mark=false\", JsonNode.class);\r\n        parseRepliesNode(preference.getEmail(), node);\r\n    }\r\n\r\n    private void parseRepliesNode(String email, JsonNode node) {\r\n        JsonNode allReplies = node.get(\"data\").get(\"children\");\r\n        int unread = 0;\r\n        for (JsonNode msg : allReplies) {\r\n            if (msg.get(\"data\").get(\"new\").asBoolean()) {\r\n                unread++;\r\n            }\r\n        }\r\n        if (unread == 0) {\r\n            return;\r\n        }\r\n\r\n        JsonNode firstMsg = allReplies.get(0).get(\"data\");\r\n        String author = firstMsg.get(\"author\").asText();\r\n        String postTitle = firstMsg.get(\"link_title\").asText();\r\n        String content = firstMsg.get(\"body\").asText();\r\n\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(String.format(NOTIFICATION_TEMPLATE, unread));\r\n        builder.append(\"\\n\");\r\n        builder.append(String.format(MESSAGE_TEMPLATE, author, postTitle, content));\r\n        builder.append(\"\\n\");\r\n        builder.append(\"Check all new replies at \");\r\n        builder.append(\"https://www.reddit.com/message/unread/\");\r\n\r\n        eventPublisher.publishEvent(new OnNewPostReplyEvent(email, builder.toString()));\r\n    }\r\n}\r\n```","```\r\npublic class OnNewPostReplyEvent extends ApplicationEvent {\r\n    private String email;\r\n    private String content;\r\n\r\n    public OnNewPostReplyEvent(String email, String content) {\r\n        super(email);\r\n        this.email = email;\r\n        this.content = content;\r\n    }\r\n}\r\n```","```\r\n@Component\r\npublic class ReplyListener implements ApplicationListener<OnNewPostReplyEvent> {\r\n    @Autowired\r\n    private JavaMailSender mailSender;\r\n\r\n    @Autowired\r\n    private Environment env;\r\n\r\n    @Override\r\n    public void onApplicationEvent(OnNewPostReplyEvent event) {\r\n        SimpleMailMessage email = constructEmailMessage(event);\r\n        mailSender.send(email);\r\n    }\r\n\r\n    private SimpleMailMessage constructEmailMessage(OnNewPostReplyEvent event) {\r\n        String recipientAddress = event.getEmail();\r\n        String subject = \"New Post Replies\";\r\n        SimpleMailMessage email = new SimpleMailMessage();\r\n        email.setTo(recipientAddress);\r\n        email.setSubject(subject);\r\n        email.setText(event.getContent());\r\n        email.setFrom(env.getProperty(\"support.email\"));\r\n        return email;\r\n    }\r\n}\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) throws Exception {\r\n    http.sessionManagement()\r\n          .maximumSessions(1)\r\n          .maxSessionsPreventsLogin(true);\r\n}\r\n```","```\r\npublic class UserPrincipal implements UserDetails {\r\n\r\n    private User user;\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        int prime = 31;\r\n        int result = 1;\r\n        result = (prime * result) + ((user == null) ? 0 : user.hashCode());\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj) {\r\n            return true;\r\n        }\r\n        if (obj == null) {\r\n            return false;\r\n        }\r\n        if (getClass() != obj.getClass()) {\r\n            return false;\r\n        }\r\n        UserPrincipal other = (UserPrincipal) obj;\r\n        if (user == null) {\r\n            if (other.user != null) {\r\n                return false;\r\n            }\r\n        } else if (!user.equals(other.user)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n```","```\r\n@Bean\r\npublic ServletRegistrationBean frontendServlet() {\r\n    ServletRegistrationBean registration = \r\n      new ServletRegistrationBean(new DispatcherServlet(), \"/*\");\r\n\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    params.put(\"contextClass\", \r\n      \"org.springframework.web.context.support.AnnotationConfigWebApplicationContext\");\r\n    params.put(\"contextConfigLocation\", \"org.baeldung.config.frontend\");\r\n    registration.setInitParameters(params);\r\n\r\n    registration.setName(\"FrontendServlet\");\r\n    registration.setLoadOnStartup(1);\r\n    return registration;\r\n}\r\n\r\n@Bean\r\npublic ServletRegistrationBean apiServlet() {\r\n    ServletRegistrationBean registration = \r\n      new ServletRegistrationBean(new DispatcherServlet(), \"/api/*\");\r\n\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    params.put(\"contextClass\", \r\n      \"org.springframework.web.context.support.AnnotationConfigWebApplicationContext\");\r\n    params.put(\"contextConfigLocation\", \"org.baeldung.config.api\");\r\n\r\n    registration.setInitParameters(params);\r\n    registration.setName(\"ApiServlet\");\r\n    registration.setLoadOnStartup(2);\r\n    return registration;\r\n}\r\n\r\n@Override\r\nprotected SpringApplicationBuilder configure(final SpringApplicationBuilder application) {\r\n    application.sources(Application.class);\r\n    return application;\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"org.baeldung.web.controller.general\" })\r\npublic class WebFrontendConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public static PropertySourcesPlaceholderConfigurer \r\n      propertySourcesPlaceholderConfigurer() {\r\n        return new PropertySourcesPlaceholderConfigurer();\r\n    }\r\n\r\n    @Bean\r\n    public ViewResolver viewResolver() {\r\n        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();\r\n        viewResolver.setPrefix(\"/WEB-INF/jsp/\");\r\n        viewResolver.setSuffix(\".jsp\");\r\n        return viewResolver;\r\n    }\r\n\r\n    @Override\r\n    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\r\n        configurer.enable();\r\n    }\r\n\r\n    @Override\r\n    public void addViewControllers(ViewControllerRegistry registry) {\r\n        registry.addViewController(\"/home\");\r\n        ...\r\n    }\r\n\r\n    @Override\r\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\r\n        registry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/resources/\");\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableWebMvc\r\n@ComponentScan({ \"org.baeldung.web.controller.rest\", \"org.baeldung.web.dto\" })\r\npublic class WebApiConfig implements WebMvcConfigurer {\r\n\r\n    @Bean\r\n    public ModelMapper modelMapper() {\r\n        return new ModelMapper();\r\n    }\r\n}\r\n```","```\r\n@RequestMapping(value = \"/url/original\")\r\n@ResponseBody\r\npublic String getOriginalLink(@RequestParam(\"url\") String sourceUrl) {\r\n    try {\r\n        List<String> visited = new ArrayList<String>();\r\n        String currentUrl = sourceUrl;\r\n        while (!visited.contains(currentUrl)) {\r\n            visited.add(currentUrl);\r\n            currentUrl = getOriginalUrl(currentUrl);\r\n        }\r\n        return currentUrl;\r\n    } catch (Exception ex) {\r\n        // log the exception\r\n        return sourceUrl;\r\n    }\r\n}\r\n\r\nprivate String getOriginalUrl(String oldUrl) throws IOException {\r\n    URL url = new URL(oldUrl);\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n    connection.setInstanceFollowRedirects(false);\r\n    String originalUrl = connection.getHeaderField(\"Location\");\r\n    connection.disconnect();\r\n    if (originalUrl == null) {\r\n        return oldUrl;\r\n    }\r\n    if (originalUrl.indexOf(\"?\") != -1) {\r\n        return originalUrl.substring(0, originalUrl.indexOf(\"?\"));\r\n    }\r\n    return originalUrl;\r\n}\r\n```"]