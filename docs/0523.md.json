["```\r\n<dependency>\r\n    <groupId>com.atomikos</groupId>\r\n    <artifactId>transactions-jdbc</artifactId>\r\n    <version>5.0.6</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.atomikos</groupId>\r\n    <artifactId>transactions-jms</artifactId>\r\n    <version>5.0.6</version>\r\n</dependency>\r\n```","```\r\ncom.atomikos.icatch.file=path_to_your_file\r\n```","```\r\nCREATE TABLE INVENTORY (\r\n    productId VARCHAR PRIMARY KEY,\r\n    balance INT\r\n);\r\n```","```\r\nCREATE TABLE ORDERS (\r\n    orderId VARCHAR PRIMARY KEY,\r\n    productId VARCHAR,\r\n    amount INT NOT NULL CHECK (amount <= 5)\r\n);\r\n```","```\r\nUserTransactionImp utx = new UserTransactionImp();\r\n```","```\r\nAtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();\r\n```","```\r\nAtomikosNonXADataSourceBean dataSource = new AtomikosNonXADataSourceBean();\r\n```","```\r\npublic void placeOrder(String productId, int amount) throws Exception {\r\n    String orderId = UUID.randomUUID().toString();\r\n    boolean rollback = false;\r\n    try {\r\n        utx.begin();\r\n        Connection inventoryConnection = inventoryDataSource.getConnection();\r\n        Connection orderConnection = orderDataSource.getConnection();\r\n\r\n        Statement s1 = inventoryConnection.createStatement();\r\n        String q1 = \"update Inventory set balance = balance - \" + amount + \" where productId ='\" +\r\n          productId + \"'\";\r\n        s1.executeUpdate(q1);\r\n        s1.close();\r\n\r\n        Statement s2 = orderConnection.createStatement();\r\n        String q2 = \"insert into Orders values ( '\" + orderId + \"', '\" + productId + \"', \" + amount + \" )\";\r\n        s2.executeUpdate(q2);\r\n        s2.close();\r\n\r\n        inventoryConnection.close();\r\n        orderConnection.close();\r\n    } catch (Exception e) {\r\n        rollback = true;\r\n    } finally {\r\n        if (!rollback)\r\n            utx.commit();\r\n        else\r\n            utx.rollback();\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void testPlaceOrderSuccess() throws Exception {\r\n    int amount = 1;\r\n    long initialBalance = getBalance(inventoryDataSource, productId);\r\n    Application application = new Application(inventoryDataSource, orderDataSource);\r\n\r\n    application.placeOrder(productId, amount);\r\n\r\n    long finalBalance = getBalance(inventoryDataSource, productId);\r\n    assertEquals(initialBalance - amount, finalBalance);\r\n}\r\n\r\n@Test\r\npublic void testPlaceOrderFailure() throws Exception {\r\n    int amount = 10;\r\n    long initialBalance = getBalance(inventoryDataSource, productId);\r\n    Application application = new Application(inventoryDataSource, orderDataSource);\r\n\r\n    application.placeOrder(productId, amount);\r\n\r\n    long finalBalance = getBalance(inventoryDataSource, productId);\r\n    assertEquals(initialBalance, finalBalance);\r\n}\r\n```","```\r\npublic class Application {\r\n    private DataSource inventoryDataSource;\r\n    private DataSource orderDataSource;\r\n\r\n    public Application(DataSource inventoryDataSource, DataSource orderDataSource) {\r\n        this.inventoryDataSource = inventoryDataSource;\r\n        this.orderDataSource = orderDataSource;\r\n    }\r\n\r\n    @Transactional(rollbackFor = Exception.class)\r\n    public void placeOrder(String productId, int amount) throws Exception {\r\n        String orderId = UUID.randomUUID().toString();\r\n        Connection inventoryConnection = inventoryDataSource.getConnection();\r\n        Connection orderConnection = orderDataSource.getConnection();\r\n\r\n        Statement s1 = inventoryConnection.createStatement();\r\n        String q1 = \"update Inventory set balance = balance - \" + amount + \" where productId ='\" + \r\n          productId + \"'\";\r\n        s1.executeUpdate(q1);\r\n        s1.close();\r\n\r\n        Statement s2 = orderConnection.createStatement();\r\n        String q2 = \"insert into Orders values ( '\" + orderId + \"', '\" + productId + \"', \" + amount + \" )\";\r\n        s2.executeUpdate(q2);\r\n        s2.close();\r\n\r\n        inventoryConnection.close();\r\n        orderConnection.close();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class Config {\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public AtomikosDataSourceBean inventoryDataSource() {\r\n        AtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();\r\n        // Configure database holding order data\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public AtomikosDataSourceBean orderDataSource() {\r\n        AtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();\r\n        // Configure database holding order data\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public UserTransactionManager userTransactionManager() throws SystemException {\r\n        UserTransactionManager userTransactionManager = new UserTransactionManager();\r\n        userTransactionManager.setTransactionTimeout(300);\r\n        userTransactionManager.setForceShutdown(true);\r\n        return userTransactionManager;\r\n    }\r\n\r\n    @Bean\r\n    public JtaTransactionManager jtaTransactionManager() throws SystemException {\r\n        JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();\r\n        jtaTransactionManager.setTransactionManager(userTransactionManager());\r\n        jtaTransactionManager.setUserTransaction(userTransactionManager());\r\n        return jtaTransactionManager;\r\n    }\r\n\r\n    @Bean\r\n    public Application application() {\r\n        return new Application(inventoryDataSource(), orderDataSource());\r\n    }\r\n}\r\n```","```\r\npublic class Application {\r\n    @Autowired\r\n    private InventoryRepository inventoryRepository;\r\n    @Autowired\r\n    private OrderRepository orderRepository;\r\n\r\n    @Transactional(rollbackFor = Exception.class)\r\n    public void placeOrder(String productId, int amount) throws SQLException { \r\n        String orderId = UUID.randomUUID().toString();\r\n        Inventory inventory = inventoryRepository.findOne(productId);\r\n        inventory.setBalance(inventory.getBalance() - amount);\r\n        inventoryRepository.save(inventory);\r\n        Order order = new Order();\r\n        order.setOrderId(orderId);\r\n        order.setProductId(productId);\r\n        order.setAmount(new Long(amount));\r\n        orderRepository.save(order);\r\n    }\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"INVENTORY\")\r\npublic class Inventory {\r\n    @Id\r\n    private String productId;\r\n    private Long balance;\r\n    // Getters and Setters\r\n}\r\n```","```\r\n@Entity\r\n@Table(name = \"ORDERS\")\r\npublic class Order {\r\n    @Id\r\n    private String orderId;\r\n    private String productId;\r\n    @Max(5)\r\n    private Long amount;\r\n    // Getters and Setters\r\n}\r\n```","```\r\n@Repository\r\npublic interface InventoryRepository extends JpaRepository<Inventory, String> {\r\n}\r\n\r\n@Repository\r\npublic interface OrderRepository extends JpaRepository<Order, String> {\r\n}\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(basePackages = \"com.baeldung.atomikos.spring.jpa.inventory\",\r\n  entityManagerFactoryRef = \"inventoryEntityManager\", transactionManagerRef = \"transactionManager\")\r\npublic class InventoryConfig {\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public AtomikosDataSourceBean inventoryDataSource() {\r\n        AtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();\r\n        // Configure the data source\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean\r\n    public EntityManagerFactory inventoryEntityManager() {\r\n        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\r\n        LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();\r\n        factory.setJpaVendorAdapter(vendorAdapter);\r\n        // Configure the entity manager factory\r\n        return factory.getObject();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableJpaRepositories(basePackages = \"com.baeldung.atomikos.spring.jpa.order\", \r\n  entityManagerFactoryRef = \"orderEntityManager\", transactionManagerRef = \"transactionManager\")\r\npublic class OrderConfig {\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public AtomikosDataSourceBean orderDataSource() {\r\n        AtomikosDataSourceBean dataSource = new AtomikosDataSourceBean();\r\n        // Configure the data source\r\n        return dataSource;\r\n    }\r\n\r\n    @Bean\r\n    public EntityManagerFactory orderEntityManager() {\r\n        HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();\r\n        LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean();\r\n        factory.setJpaVendorAdapter(vendorAdapter);\r\n        // Configure the entity manager factory\r\n        return factory.getObject();\r\n    }\r\n}\r\n```","```\r\n@Configuration\r\n@EnableTransactionManagement\r\npublic class Config {\r\n    @Bean(initMethod = \"init\", destroyMethod = \"close\")\r\n    public UserTransactionManager userTransactionManager() throws SystemException {\r\n        UserTransactionManager userTransactionManager = new UserTransactionManager();\r\n        userTransactionManager.setTransactionTimeout(300);\r\n        userTransactionManager.setForceShutdown(true);\r\n        return userTransactionManager;\r\n    }\r\n\r\n    @Bean\r\n    public JtaTransactionManager transactionManager() throws SystemException {\r\n        JtaTransactionManager jtaTransactionManager = new JtaTransactionManager();\r\n        jtaTransactionManager.setTransactionManager(userTransactionManager());\r\n        jtaTransactionManager.setUserTransaction(userTransactionManager());\r\n        return jtaTransactionManager;\r\n    }\r\n\r\n    @Bean\r\n    public Application application() {\r\n        return new Application();\r\n    }\r\n}\r\n```"]