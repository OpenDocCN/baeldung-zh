["```\r\nint[] input = { 2, 4, 3, 3 }; \r\n```","```\r\n{2,4}, {4,2}, {3,3}, {3,3}\r\n```","```\r\nfor (int i = 0; i < input.length; i++) {\r\n    for (int j = 0; j < input.length; j++) {\r\n        if (j != i && (input[i] + input[j]) == sum) {\r\n            addPairs(input[i], sum-input[i]));\r\n        }\r\n    }\r\n}\r\n```","```\r\nIntStream.range(0,  input.length)\r\n    .forEach(i -> IntStream.range(0,  input.length)\r\n        .filter(j -> i != j && input[i] + input[j] == sum)\r\n        .forEach(j -> addPairs(input[i], input[j]))\r\n); \r\n```","```\r\n{2,4}, {3,3}\r\n```","```\r\nMap<Integer, Integer> pairs = new HashMap();\r\nfor (int i : input) {\r\n    if (pairs.containsKey(i)) {\r\n        if (pairs.get(i) != null) {            \r\n            addPairs(i, sum-i);\r\n        }                \r\n        pairs.put(sum - i, null);\r\n    } else if (!pairs.containsValue(i)) {        \r\n        pairs.put(sum-i, i);\r\n    }\r\n}\r\n```","```\r\nMap<Integer, Integer> pairs = new HashMap();\r\nIntStream.range(0, input.length).forEach(i -> {\r\n    if (pairs.containsKey(input[i])) {\r\n        if (pairs.get(input[i]) != null) {\r\n            addPairs(input[i], sum - input[i]);\r\n        }\r\n        pairs.put(sum - input[i], null);\r\n    } else if (!pairs.containsValue(input[i])) {\r\n        pairs.put(sum - input[i], input[i]);\r\n    }\r\n});\r\n```"]