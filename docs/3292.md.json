["```\r\nHello world\r\n```","```\r\n@Test\r\npublic void givenFile_whenReadWithFileChannelUsingRandomAccessFile_thenCorrect() \r\n  throws IOException {\r\n    try (RandomAccessFile reader = new RandomAccessFile(\"src/test/resources/test_read.in\", \"r\");\r\n        FileChannel channel = reader.getChannel();\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream()) {\r\n\r\n        int bufferSize = 1024;\r\n        if (bufferSize > channel.size()) {\r\n           bufferSize = (int) channel.size();\r\n        }\r\n        ByteBuffer buff = ByteBuffer.allocate(bufferSize);\r\n\r\n        while (channel.read(buff) > 0) {\r\n            out.write(buff.array(), 0, buff.position());\r\n            buff.clear();\r\n        }\r\n\r\n     String fileContent = new String(out.toByteArray(), StandardCharsets.UTF_8);\r\n\r\n     assertEquals(\"Hello world\", fileContent);\r\n    }\r\n}\r\n```","```\r\nRandomAccessFile reader = new RandomAccessFile(file, \"r\");\r\nFileChannel channel = reader.getChannel();\r\n```","```\r\nFileInputStream fin= new FileInputStream(file);\r\nFileChannel channel = fin.getChannel();\r\n```","```\r\nByteBuffer buff = ByteBuffer.allocate(1024);\r\nint noOfBytesRead = channel.read(buff);\r\nString fileContent = new String(buff.array(), StandardCharsets.UTF_8);\r\n\r\nassertEquals(\"Hello world\", fileContent);\r\n```","```\r\nByteBuffer buff = ByteBuffer.allocate(1024);\r\nint noOfBytesRead = channel.read(buff, 5);\r\nString fileContent = new String(buff.array(), StandardCharsets.UTF_8);\r\nassertEquals(\"world\", fileContent);\r\n```","```\r\n@Test\r\npublic void whenWriteWithFileChannelUsingRandomAccessFile_thenCorrect()   \r\n  throws IOException {\r\n    String file = \"src/test/resources/test_write_using_filechannel.txt\";\r\n    try (RandomAccessFile writer = new RandomAccessFile(file, \"rw\");\r\n        FileChannel channel = writer.getChannel()){\r\n        ByteBuffer buff = ByteBuffer.wrap(\"Hello world\".getBytes(StandardCharsets.UTF_8));\r\n\r\n        channel.write(buff);\r\n\r\n     // verify\r\n     RandomAccessFile reader = new RandomAccessFile(file, \"r\");\r\n     assertEquals(\"Hello world\", reader.readLine());\r\n     reader.close();\r\n    }\r\n}\r\n```","```\r\nRandomAccessFile writer = new RandomAccessFile(file, \"rw\");\r\nFileChannel channel = writer.getChannel();\r\n```","```\r\nFileOutputStream fout = new FileOutputStream(file);\r\nFileChannel channel = fout.getChannel(); \r\n```","```\r\nByteBuffer buff = ByteBuffer.wrap(\"Hello world\".getBytes(StandardCharsets.UTF_8));\r\nchannel.write(buff); \r\n```","```\r\nByteBuffer buff = ByteBuffer.wrap(\"Hello world\".getBytes(StandardCharsets.UTF_8));\r\nchannel.write(buff, 5); \r\n```","```\r\nlong originalPosition = channel.position();\r\n```","```\r\nchannel.position(5);\r\nassertEquals(originalPosition + 5, channel.position());\r\n```","```\r\n@Test\r\npublic void whenGetFileSize_thenCorrect() \r\n  throws IOException {\r\n    RandomAccessFile reader = new RandomAccessFile(\"src/test/resources/test_read.in\", \"r\");\r\n    FileChannel channel = reader.getChannel();\r\n\r\n    // the original file size is 11 bytes.\r\n    assertEquals(11, channel.size());\r\n\r\n    channel.close();\r\n    reader.close();\r\n}\r\n```","```\r\n@Test\r\npublic void whenTruncateFile_thenCorrect() \r\n  throws IOException {\r\n    String input = \"this is a test input\";\r\n\r\n    FileOutputStream fout = new FileOutputStream(\"src/test/resources/test_truncate.txt\");\r\n    FileChannel channel = fout.getChannel();\r\n\r\n    ByteBuffer buff = ByteBuffer.wrap(input.getBytes());\r\n    channel.write(buff);\r\n    buff.flip();\r\n\r\n    channel = channel.truncate(5);\r\n    assertEquals(5, channel.size());\r\n\r\n    fout.close();\r\n    channel.close();\r\n} \r\n```","```\r\nchannel.force(true);\r\n```","```\r\n@Test\r\npublic void givenFile_whenReadAFileSectionIntoMemoryWithFileChannel_thenCorrect() \r\n  throws IOException { \r\n    try (RandomAccessFile reader = new RandomAccessFile(\"src/test/resources/test_read.in\", \"r\");\r\n        FileChannel channel = reader.getChannel();\r\n        ByteArrayOutputStream out = new ByteArrayOutputStream()) {\r\n\r\n        MappedByteBuffer buff = channel.map(FileChannel.MapMode.READ_ONLY, 6, 5);\r\n\r\n        if(buff.hasRemaining()) {\r\n          byte[] data = new byte[buff.remaining()];\r\n          buff.get(data);\r\n          assertEquals(\"world\", new String(data, StandardCharsets.UTF_8));\t\r\n        }\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void givenFile_whenWriteAFileUsingLockAFileSectionWithFileChannel_thenCorrect() \r\n  throws IOException { \r\n    try (RandomAccessFile reader = new RandomAccessFile(\"src/test/resources/test_read.in\", \"rw\");\r\n        FileChannel channel = reader.getChannel();\r\n        FileLock fileLock = channel.tryLock(6, 5, Boolean.FALSE )){\r\n\r\n        //do other operations...\r\n\r\n        assertNotNull(fileLock);\r\n    }\r\n}\r\n```","```\r\nchannel.close();\r\n```"]