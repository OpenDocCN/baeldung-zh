["```\r\n@Entity\r\npublic class User {\r\n    @EmbeddedId UserId userId;\r\n    String email;\r\n\r\n    // constructors, getters and setters\r\n}\r\n\r\n@Embeddable\r\npublic class UserId implements Serializable{\r\n    private String name;\r\n    private String lastName;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test\r\npublic void givenUser_whenPersisted_thenOperationSuccessful() {\r\n    UserId userId = new UserId();\r\n    userId.setName(\"John\");\r\n    userId.setLastName(\"Doe\");\r\n    User user = new User(userId, \"[[email protected]](/web/20221104165328/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n\r\n    entityManager.persist(user);\r\n\r\n    User userDb = entityManager.find(User.class, userId);\r\n    assertEquals(userDb.email, \"[[email protected]](/web/20221104165328/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n}\r\n```","```\r\n@Entity\r\npublic class User {\r\n    @EmbeddedId private UserId userId;\r\n    private Email email;\r\n}\r\n\r\n@Entity\r\npublic class Email implements Serializable {\r\n    @Id\r\n    private long id;\r\n    private String name;\r\n    private String domain;\r\n}\r\n\r\n@Entity\r\npublic class Account {\r\n    @Id\r\n    private long id;\r\n    private String type;\r\n    @ManyToOne\r\n    @JoinColumn(referencedColumnName = \"email\")\r\n    private User user;\r\n}\r\n```","```\r\n@Test\r\npublic void givenAssociation_whenPersisted_thenMultipleAccountsWillBeFoundByEmail() {\r\n    // object creation \r\n\r\n    entityManager.persist(user);\r\n    entityManager.persist(account);\r\n    entityManager.persist(account2);\r\n\r\n    List userAccounts = entityManager.createQuery(\"select a from Account a join fetch a.user where a.user.email = :email\")\r\n      .setParameter(\"email\", email)\r\n      .getResultList();\r\n\r\n    assertEquals(userAccounts.size(), 2);\r\n}\r\n```"]