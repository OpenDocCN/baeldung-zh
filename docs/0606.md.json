["```\r\nwget -O $CATALINA_HOME/webapps/uaa.war \\\r\n  https://search.maven.org/remotecontent?filepath=org/cloudfoundry/identity/cloudfoundry-identity-uaa/4.27.0/cloudfoundry-identity-uaa-4.27.0.war\r\n```","```\r\nexport UAA_CONFIG_PATH=~/.uaa\r\n```","```\r\nwget -qO- https://raw.githubusercontent.com/cloudfoundry/uaa/4.27.0/uaa/src/main/resources/required_configuration.yml \\\r\n  > $UAA_CONFIG_PATH/uaa.yml\r\n```","```\r\nexport SPRING_PROFILES=\"default,hsqldb\"\r\n```","```\r\nopenssl genrsa -out signingkey.pem 2048\r\nopenssl rsa -in signingkey.pem -pubout -out verificationkey.pem\r\n```","```\r\nexport JWT_TOKEN_SIGNING_KEY=$(cat signingkey.pem)\r\nexport JWT_TOKEN_VERIFICATION_KEY=$(cat verificationkey.pem) \r\n```","```\r\n$CATALINA_HOME/bin/catalina.sh run\r\n```","```\r\nsudo apt install rubygems\r\ngem install cf-uaac\r\n```","```\r\nuaac target http://localhost:8080/uaa\r\n```","```\r\nuaac token client get admin -s adminsecret\r\n```","```\r\nSuccessfully fetched token via client credentials grant.\r\n```","```\r\nuaac client add webappclient -s webappclientsecret \\ \r\n--name WebAppClient \\ \r\n--scope resource.read,resource.write,openid,profile,email,address,phone \\ \r\n--authorized_grant_types authorization_code,refresh_token,client_credentials,password \\ \r\n--authorities uaa.resource \\ \r\n--redirect_uri http://localhost:8081/login/oauth2/code/uaa\r\n```","```\r\nuaac user add appuser -p appusersecret --emails [[emailÂ protected]](/web/20220911130933/https://www.baeldung.com/cdn-cgi/l/email-protection)\r\n```","```\r\nuaac group add resource.read\r\nuaac group add resource.write\r\n```","```\r\nuaac member add resource.read appuser\r\nuaac member add resource.write appuser\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-client</artifactId>\r\n</dependency>\r\n```","```\r\n#registration\r\nspring.security.oauth2.client.registration.uaa.client-id=webappclient\r\nspring.security.oauth2.client.registration.uaa.client-secret=webappclientsecret\r\nspring.security.oauth2.client.registration.uaa.scope=resource.read,resource.write,openid,profile\r\n\r\n#provider\r\nspring.security.oauth2.client.provider.uaa.issuer-uri=http://localhost:8080/uaa/oauth/token\r\n```","```\r\nserver.port=8081\r\n```","```\r\n{\r\n  \"jti\": \"f228d8d7486942089ff7b892c796d3ac\",\r\n  \"sub\": \"0e6101d8-d14b-49c5-8c33-fc12d8d1cc7d\",\r\n  \"scope\": [\r\n    \"resource.read\",\r\n    \"openid\",\r\n    \"profile\"\r\n  ],\r\n  \"client_id\": \"webappclient\"\r\n  // more claims\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-web</artifactId>\r\n</dependency>\r\n```","```\r\nspring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/uaa/oauth/token\r\n```","```\r\nserver.port=8082\r\n```","```\r\n@GetMapping(\"/read\")\r\npublic String read(Principal principal) {\r\n    return \"Hello write: \" + principal.getName();\r\n}\r\n\r\n@GetMapping(\"/write\")\r\npublic String write(Principal principal) {\r\n    return \"Hello write: \" + principal.getName();\r\n}\r\n```","```\r\n@EnableWebSecurity\r\npublic class OAuth2ResourceServerSecurityConfiguration extends WebSecurityConfigurerAdapter {\r\n\r\n   @Override\r\n   protected void configure(HttpSecurity http) throws Exception {\r\n      http.authorizeRequests()\r\n        .antMatchers(\"/read/**\").hasAuthority(\"SCOPE_resource.read\")\r\n        .antMatchers(\"/write/**\").hasAuthority(\"SCOPE_resource.write\")\r\n        .anyRequest().authenticated()\r\n      .and()\r\n        .oauth2ResourceServer().jwt();\r\n   }\r\n}\r\n```","```\r\nprivate String callResourceServer(OAuth2AuthenticationToken authenticationToken, String url) {\r\n    OAuth2AuthorizedClient oAuth2AuthorizedClient = this.authorizedClientService.\r\n      loadAuthorizedClient(authenticationToken.getAuthorizedClientRegistrationId(), \r\n      authenticationToken.getName());\r\n    OAuth2AccessToken oAuth2AccessToken = oAuth2AuthorizedClient.getAccessToken();\r\n\r\n    HttpHeaders headers = new HttpHeaders();\r\n    headers.add(\"Authorization\", \"Bearer \" + oAuth2AccessToken.getTokenValue());\r\n\r\n    // call resource endpoint\r\n\r\n    return response;\r\n}\r\n```","```\r\n@GetMapping(\"/read\")\r\npublic String read(OAuth2AuthenticationToken authenticationToken) {\r\n    String url = remoteResourceServer + \"/read\";\r\n    return callResourceServer(authenticationToken, url);\r\n}\r\n\r\n@GetMapping(\"/write\")\r\npublic String write(OAuth2AuthenticationToken authenticationToken) {\r\n    String url = remoteResourceServer + \"/write\";\r\n    return callResourceServer(authenticationToken, url);\r\n}\r\n```"]