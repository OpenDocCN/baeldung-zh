["```\r\nboolean isAnagramSort(String string1, String string2) {\r\n    if (string1.length() != string2.length()) {\r\n        return false;\r\n    }\r\n    char[] a1 = string1.toCharArray();\r\n    char[] a2 = string2.toCharArray();\r\n    Arrays.sort(a1);\r\n    Arrays.sort(a2);\r\n    return Arrays.equals(a1, a2);\r\n} \r\n```","```\r\nprivate static int CHARACTER_RANGE= 256;\r\n\r\npublic boolean isAnagramCounting(String string1, String string2) {\r\n    if (string1.length() != string2.length()) {\r\n        return false;\r\n    }\r\n    int count[] = new int[CHARACTER_RANGE];\r\n    for (int i = 0; i < string1.length(); i++) {\r\n        count[string1.charAt(i)]++;\r\n        count[string2.charAt(i)]--;\r\n    }\r\n    for (int i = 0; i < CHARACTER_RANGE; i++) {\r\n        if (count[i] != 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```","```\r\n<dependency>\r\n    <groupId>com.google.guava</groupId>\r\n    <artifactId>guava</artifactId>\r\n    <version>31.0.1-jre</version>\r\n</dependency> \r\n```","```\r\nboolean isAnagramMultiset(String string1, String string2) {\r\n    if (string1.length() != string2.length()) {\r\n        return false;\r\n    }\r\n    Multiset<Character> multiset1 = HashMultiset.create();\r\n    Multiset<Character> multiset2 = HashMultiset.create();\r\n    for (int i = 0; i < string1.length(); i++) {\r\n        multiset1.add(string1.charAt(i));\r\n        multiset2.add(string2.charAt(i));\r\n    }\r\n    return multiset1.equals(multiset2);\r\n} \r\n```","```\r\nString preprocess(String source) {\r\n    return source.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\r\n}\r\n\r\nboolean isLetterBasedAnagramMultiset(String string1, String string2) {\r\n    return isAnagramMultiset(preprocess(string1), preprocess(string2));\r\n}\r\n```"]