["```\r\n<dependency>\r\n    <groupId>com.netflix.graphql.dgs</groupId>\r\n    <artifactId>graphql-dgs-spring-boot-starter</artifactId>\r\n    <version>4.9.16</version>\r\n</dependency>\r\n```","```\r\ntype Query {\r\n    albums(titleFilter: String): [Album]\r\n}\r\n\r\ntype Album {\r\n    title: String\r\n    artist: String\r\n    recordNo: Int\r\n}\r\n```","```\r\npublic class Album {\r\n    private final String title;\r\n    private final String artist;\r\n    private final Integer recordNo;\r\n\r\n    public Album(String title, String artist, Integer recordNo) {\r\n        this.title = title;\r\n        this.recordNo = recordNo;\r\n        this.artist = artist;\r\n    }\r\n\r\n    // standard getters\r\n}\r\n```","```\r\nprivate final List<Album> albums = Arrays.asList(\r\n  new Album(\"Rumours\", \"Fleetwood Mac\", 20),\r\n  new Album(\"What's Going On\", \"Marvin Gaye\", 10), \r\n  new Album(\"Pet Sounds\", \"The Beach Boys\", 12)\r\n  );\r\n\r\n@DgsQuery\r\npublic List<Album> albums(@InputArgument String titleFilter) {\r\n    if (titleFilter == null) {\r\n        return albums;\r\n    }\r\n    return albums.stream()\r\n      .filter(s -> s.getTitle().contains(titleFilter))\r\n      .collect(Collectors.toList());\r\n}\r\n```","```\r\n{\r\n    albums{\r\n        title\r\n    }\r\n} \r\n```","```\r\n{\r\n  \"data\": {\r\n    \"albums\": [\r\n      {\r\n        \"title\": \"Rumours\"\r\n      },\r\n      {\r\n        \"title\": \"What's Going On\"\r\n      },\r\n      {\r\n        \"title\": \"Pet Sounds\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```"]