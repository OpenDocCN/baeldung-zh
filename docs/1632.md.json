["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\r\n    <version>2.4.0</version>\r\n</dependency>\r\n<dependency>\r\n    <groupId>mysql</groupId>\r\n    <artifactId>mysql-connector-java</artifactId>\r\n    <version>8.0.19</version>\r\n</dependency>\r\n```","```\r\n@Configuration\r\npublic class MySQLAutoconfiguration {\r\n    //...\r\n}\r\n```","```\r\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\r\ncom.baeldung.autoconfiguration.MySQLAutoconfiguration\r\n```","```\r\n@Configuration\r\n@ConditionalOnClass(DataSource.class)\r\npublic class MySQLAutoconfiguration {\r\n    //...\r\n}\r\n```","```\r\n@Bean\r\n@ConditionalOnBean(name = \"dataSource\")\r\n@ConditionalOnMissingBean\r\npublic LocalContainerEntityManagerFactoryBean entityManagerFactory() {\r\n    LocalContainerEntityManagerFactoryBean em\r\n      = new LocalContainerEntityManagerFactoryBean();\r\n    em.setDataSource(dataSource());\r\n    em.setPackagesToScan(\"com.baeldung.autoconfiguration.example\");\r\n    em.setJpaVendorAdapter(new HibernateJpaVendorAdapter());\r\n    if (additionalProperties() != null) {\r\n        em.setJpaProperties(additionalProperties());\r\n    }\r\n    return em;\r\n}\r\n```","```\r\n@Bean\r\n@ConditionalOnMissingBean(type = \"JpaTransactionManager\")\r\nJpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {\r\n    JpaTransactionManager transactionManager = new JpaTransactionManager();\r\n    transactionManager.setEntityManagerFactory(entityManagerFactory);\r\n    return transactionManager;\r\n}\r\n```","```\r\n@PropertySource(\"classpath:mysql.properties\")\r\npublic class MySQLAutoconfiguration {\r\n    //...\r\n}\r\n```","```\r\n@Bean\r\n@ConditionalOnProperty(\r\n  name = \"usemysql\", \r\n  havingValue = \"local\")\r\n@ConditionalOnMissingBean\r\npublic DataSource dataSource() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n\r\n    dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\r\n    dataSource.setUrl(\"jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true\");\r\n    dataSource.setUsername(\"mysqluser\");\r\n    dataSource.setPassword(\"mysqlpass\");\r\n\r\n    return dataSource;\r\n}\r\n```","```\r\n@Bean(name = \"dataSource\")\r\n@ConditionalOnProperty(\r\n  name = \"usemysql\", \r\n  havingValue = \"custom\")\r\n@ConditionalOnMissingBean\r\npublic DataSource dataSource2() {\r\n    DriverManagerDataSource dataSource = new DriverManagerDataSource();\r\n\r\n    dataSource.setDriverClassName(\"com.mysql.cj.jdbc.Driver\");\r\n    dataSource.setUrl(env.getProperty(\"mysql.url\"));\r\n    dataSource.setUsername(env.getProperty(\"mysql.user\") != null \r\n      ? env.getProperty(\"mysql.user\") : \"\");\r\n    dataSource.setPassword(env.getProperty(\"mysql.pass\") != null \r\n      ? env.getProperty(\"mysql.pass\") : \"\");\r\n\r\n    return dataSource;\r\n}\r\n```","```\r\nusemysql=local\r\n```","```\r\n@ConditionalOnResource(\r\n  resources = \"classpath:mysql.properties\")\r\n@Conditional(HibernateCondition.class)\r\nProperties additionalProperties() {\r\n    Properties hibernateProperties = new Properties();\r\n\r\n    hibernateProperties.setProperty(\"hibernate.hbm2ddl.auto\", \r\n      env.getProperty(\"mysql-hibernate.hbm2ddl.auto\"));\r\n    hibernateProperties.setProperty(\"hibernate.dialect\", \r\n      env.getProperty(\"mysql-hibernate.dialect\"));\r\n    hibernateProperties.setProperty(\"hibernate.show_sql\", \r\n      env.getProperty(\"mysql-hibernate.show_sql\") != null \r\n      ? env.getProperty(\"mysql-hibernate.show_sql\") : \"false\");\r\n    return hibernateProperties;\r\n}\r\n```","```\r\nmysql-hibernate.dialect=org.hibernate.dialect.MySQLDialect\r\nmysql-hibernate.show_sql=true\r\nmysql-hibernate.hbm2ddl.auto=create-drop\r\n```","```\r\nstatic class HibernateCondition extends SpringBootCondition {\r\n\r\n    private static String[] CLASS_NAMES\r\n      = { \"org.hibernate.ejb.HibernateEntityManager\", \r\n          \"org.hibernate.jpa.HibernateEntityManager\" };\r\n\r\n    @Override\r\n    public ConditionOutcome getMatchOutcome(ConditionContext context, \r\n      AnnotatedTypeMetadata metadata) {\r\n\r\n        ConditionMessage.Builder message\r\n          = ConditionMessage.forCondition(\"Hibernate\");\r\n        return Arrays.stream(CLASS_NAMES)\r\n          .filter(className -> ClassUtils.isPresent(className, context.getClassLoader()))\r\n          .map(className -> ConditionOutcome\r\n            .match(message.found(\"class\")\r\n            .items(Style.NORMAL, className)))\r\n          .findAny()\r\n          .orElseGet(() -> ConditionOutcome\r\n            .noMatch(message.didNotFind(\"class\", \"classes\")\r\n            .items(Style.NORMAL, Arrays.asList(CLASS_NAMES))));\r\n    }\r\n}\r\n```","```\r\n@Conditional(HibernateCondition.class)\r\nProperties additionalProperties() {\r\n  //...\r\n}\r\n```","```\r\n@Entity\r\npublic class MyUser {\r\n    @Id\r\n    private String email;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\npublic interface MyUserRepository \r\n  extends JpaRepository<MyUser, String> { }\r\n```","```\r\n@SpringBootApplication\r\npublic class AutoconfigurationApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(AutoconfigurationApplication.class, args);\r\n    }\r\n}\r\n```","```\r\n@RunWith(SpringJUnit4ClassRunner.class)\r\n@SpringBootTest(\r\n  classes = AutoconfigurationApplication.class)\r\n@EnableJpaRepositories(\r\n  basePackages = { \"com.baeldung.autoconfiguration.example\" })\r\npublic class AutoconfigurationLiveTest {\r\n\r\n    @Autowired\r\n    private MyUserRepository userRepository;\r\n\r\n    @Test\r\n    public void whenSaveUser_thenOk() {\r\n        MyUser user = new MyUser(\"[[emailÂ protected]](/web/20220908123937/https://www.baeldung.com/cdn-cgi/l/email-protection)\");\r\n        userRepository.save(user);\r\n    }\r\n}\r\n```","```\r\nweb - 2017-04-12 00:01:33,956 [main] INFO  o.s.j.d.DriverManagerDataSource - Loaded JDBC driver: com.mysql.cj.jdbc.Driver\r\n```","```\r\n@Configuration\r\n@EnableAutoConfiguration(\r\n  exclude={MySQLAutoconfiguration.class})\r\npublic class AutoconfigurationApplication {\r\n    //...\r\n}\r\n```","```\r\nspring.autoconfigure.exclude=com.baeldung.autoconfiguration.MySQLAutoconfiguration\r\n```"]