["```\r\n@Test\r\npublic void whenStackIsCreated_thenItHasSizeZero() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n\r\n    assertEquals(0, intStack.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenElementIsPushed_thenStackSizeIsIncreased() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(1);\r\n\r\n    assertEquals(1, intStack.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleElementsArePushed_thenStackSizeIsIncreased() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\r\n\r\n    boolean result = intStack.addAll(intList);\r\n\r\n    assertTrue(result);\r\n    assertEquals(7, intList.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenElementIsPoppedFromStack_thenElementIsRemovedAndSizeChanges() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n\r\n    Integer element = intStack.pop();\r\n\r\n    assertEquals(Integer.valueOf(5), element);\r\n    assertTrue(intStack.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenElementIsPeeked_thenElementIsNotRemovedAndSizeDoesNotChange() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n\r\n    Integer element = intStack.peek();\r\n\r\n    assertEquals(Integer.valueOf(5), element);\r\n    assertEquals(1, intStack.search(5));\r\n    assertEquals(1, intStack.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenElementIsOnStack_thenSearchReturnsItsDistanceFromTheTop() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n    intStack.push(8);\r\n\r\n    assertEquals(2, intStack.search(5));\r\n}\r\n```","```\r\n@Test\r\npublic void whenElementIsOnStack_thenIndexOfReturnsItsIndex() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n\r\n    int indexOf = intStack.indexOf(5);\r\n\r\n    assertEquals(0, indexOf);\r\n}\r\n```","```\r\n@Test\r\npublic void whenMultipleElementsAreOnStack_thenIndexOfReturnsLastElementIndex() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n    intStack.push(5);\r\n    intStack.push(5);\r\n\r\n    int lastIndexOf = intStack.lastIndexOf(5);\r\n\r\n    assertEquals(2, lastIndexOf);\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveElementIsInvoked_thenElementIsRemoved() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n    intStack.push(5);\r\n\r\n    intStack.removeElement(5);\r\n\r\n    assertEquals(1, intStack.size());\r\n}\r\n```","```\r\n @Test\r\n    public void whenRemoveElementAtIsInvoked_thenElementIsRemoved() {\r\n        Stack<Integer> intStack = new Stack<>();\r\n        intStack.push(5);\r\n        intStack.push(7);\r\n\r\n        intStack.removeElementAt(1);\r\n\r\n        assertEquals(-1, intStack.search(7));\r\n    }\r\n```","```\r\n@Test\r\npublic void givenElementsOnStack_whenRemoveAllIsInvoked_thenAllElementsFromCollectionAreRemoved() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\r\n    intStack.addAll(intList);\r\n    intStack.add(500);\r\n\r\n    intStack.removeAll(intList);\r\n\r\n    assertEquals(1, intStack.size());\r\n    assertEquals(1, intStack.search(500));\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveAllElementsIsInvoked_thenAllElementsAreRemoved() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    intStack.push(5);\r\n    intStack.push(7);\r\n\r\n    intStack.removeAllElements();\r\n\r\n    assertTrue(intStack.isEmpty());\r\n}\r\n```","```\r\n@Test\r\npublic void whenRemoveIfIsInvoked_thenAllElementsSatysfyingConditionAreRemoved() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\r\n    intStack.addAll(intList);\r\n\r\n    intStack.removeIf(element -> element < 6);\r\n\r\n    assertEquals(2, intStack.size());\r\n}\r\n```","```\r\n@Test\r\npublic void whenAnotherStackCreatedWhileTraversingStack_thenStacksAreEqual() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    List<Integer> intList = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\r\n    intStack.addAll(intList);\r\n\r\n    ListIterator<Integer> it = intStack.listIterator();\r\n\r\n    Stack<Integer> result = new Stack<>();\r\n    while(it.hasNext()) {\r\n        result.push(it.next());\r\n    }\r\n\r\n    assertThat(result, equalTo(intStack));\r\n}\r\n```","```\r\n@Test\r\npublic void whenStackIsFiltered_allElementsNotSatisfyingFilterConditionAreDiscarded() {\r\n    Stack<Integer> intStack = new Stack<>();\r\n    List<Integer> inputIntList = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 9, 10);\r\n    intStack.addAll(inputIntList);\r\n\r\n    List<Integer> filtered = intStack\r\n      .stream()\r\n      .filter(element -> element <= 3)\r\n      .collect(Collectors.toList());\r\n\r\n    assertEquals(3, filtered.size());\r\n}\r\n```"]