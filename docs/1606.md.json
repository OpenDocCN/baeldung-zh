["```\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-security</artifactId>\r\n</dependency>\r\n```","```\r\n<dependency>\r\n    <groupId>org.springframework.session</groupId>\r\n    <artifactId>spring-session</artifactId>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework.boot</groupId>\r\n    <artifactId>spring-boot-starter-data-redis</artifactId>\r\n</dependency>\r\n```","```\r\n@EnableRedisHttpSession\r\npublic class SessionConfig\r\n  extends AbstractHttpSessionApplicationInitializer {\r\n}\r\n```","```\r\nspring.redis.host=localhost \r\nspring.redis.port=6379\r\n```","```\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[email protected]](/web/20220124013546/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\nsecurity.user.name=configUser\r\nsecurity.user.password=configPassword\r\nsecurity.user.role=SYSTEM\r\n```","```\r\n@Configuration\r\n@EnableWebSecurity\r\n@Order(1)\r\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\r\n\r\n   @Autowired\r\n   public void configureGlobal(AuthenticationManagerBuilder auth) {\r\n       auth.inMemoryAuthentication().withUser(\"discUser\")\r\n         .password(\"discPassword\").roles(\"SYSTEM\");\r\n   }\r\n\r\n   @Override\r\n   protected void configure(HttpSecurity http) {\r\n       http.sessionManagement()\r\n         .sessionCreationPolicy(SessionCreationPolicy.ALWAYS)\r\n         .and().requestMatchers().antMatchers(\"/eureka/**\")\r\n         .and().authorizeRequests().antMatchers(\"/eureka/**\")\r\n         .hasRole(\"SYSTEM\").anyRequest().denyAll().and()\r\n         .httpBasic().and().csrf().disable();\r\n   }\r\n}\r\n```","```\r\n@Configuration\r\npublic static class AdminSecurityConfig\r\n  extends WebSecurityConfigurerAdapter {\r\n\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n   http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.NEVER)\r\n     .and().httpBasic().disable().authorizeRequests()\r\n     .antMatchers(HttpMethod.GET, \"/\").hasRole(\"ADMIN\")\r\n     .antMatchers(\"/info\", \"/health\").authenticated().anyRequest()\r\n     .denyAll().and().csrf().disable();\r\n   }\r\n}\r\n```","```\r\nspring.cloud.config.username=configUser\r\nspring.cloud.config.password=configPassword\r\n```","```\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[email protected]](/web/20220124013546/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\neureka.client.register-with-eureka=false\r\neureka.client.fetch-registry=false\r\n```","```\r\n@Autowired\r\npublic void configureGlobal(AuthenticationManagerBuilder auth) {\r\n    auth.inMemoryAuthentication().withUser(\"user\").password(\"password\")\r\n      .roles(\"USER\").and().withUser(\"admin\").password(\"admin\")\r\n      .roles(\"ADMIN\");\r\n}\r\n\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http.authorizeRequests().antMatchers(\"/book-service/books\")\r\n      .permitAll().antMatchers(\"/eureka/**\").hasRole(\"ADMIN\")\r\n      .anyRequest().authenticated().and().formLogin().and()\r\n      .logout().permitAll().logoutSuccessUrl(\"/book-service/books\")\r\n      .permitAll().and().csrf().disable();\r\n}\r\n```","```\r\n@EnableRedisHttpSession(\r\n  redisFlushMode = RedisFlushMode.IMMEDIATE)\r\n```","```\r\n@Component\r\npublic class SessionSavingZuulPreFilter\r\n  extends ZuulFilter {\r\n\r\n    @Autowired\r\n    private SessionRepository repository;\r\n\r\n    @Override\r\n    public boolean shouldFilter() {\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public Object run() {\r\n        RequestContext context = RequestContext.getCurrentContext();\r\n        HttpSession httpSession = context.getRequest().getSession();\r\n        Session session = repository.getSession(httpSession.getId());\r\n\r\n        context.addZuulRequestHeader(\r\n          \"Cookie\", \"SESSION=\" + httpSession.getId());\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public String filterType() {\r\n        return \"pre\";\r\n    }\r\n\r\n    @Override\r\n    public int filterOrder() {\r\n        return 0;\r\n    }\r\n}\r\n```","```\r\nspring.cloud.config.username=configUser\r\nspring.cloud.config.password=configPassword\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[email protected]](/web/20220124013546/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\n```","```\r\nmanagement.security.sessions=always\r\n\r\nzuul.routes.book-service.path=/book-service/**\r\nzuul.routes.book-service.sensitive-headers=Set-Cookie,Authorization\r\nhystrix.command.book-service.execution.isolation.thread\r\n    .timeoutInMilliseconds=600000\r\n\r\nzuul.routes.rating-service.path=/rating-service/**\r\nzuul.routes.rating-service.sensitive-headers=Set-Cookie,Authorization\r\nhystrix.command.rating-service.execution.isolation.thread\r\n    .timeoutInMilliseconds=600000\r\n\r\nzuul.routes.discovery.path=/discovery/**\r\nzuul.routes.discovery.sensitive-headers=Set-Cookie,Authorization\r\nzuul.routes.discovery.url=http://localhost:8082\r\nhystrix.command.discovery.execution.isolation.thread\r\n    .timeoutInMilliseconds=600000\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http.httpBasic().disable().authorizeRequests()\r\n      .antMatchers(\"/books\").permitAll()\r\n      .antMatchers(\"/books/*\").hasAnyRole(\"USER\", \"ADMIN\")\r\n      .authenticated().and().csrf().disable();\r\n}\r\n```","```\r\nspring.cloud.config.username=configUser\r\nspring.cloud.config.password=configPassword\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[email protected]](/web/20220124013546/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\n```","```\r\nmanagement.security.sessions=never\r\n```","```\r\n@Override\r\nprotected void configure(HttpSecurity http) {\r\n    http.httpBasic().disable().authorizeRequests()\r\n      .antMatchers(\"/ratings\").hasRole(\"USER\")\r\n      .antMatchers(\"/ratings/all\").hasAnyRole(\"USER\", \"ADMIN\").anyRequest()\r\n      .authenticated().and().csrf().disable();\r\n}\r\n```","```\r\nspring.cloud.config.username=configUser\r\nspring.cloud.config.password=configPassword\r\neureka.client.serviceUrl.defaultZone=\r\n  http://discUser:[[email protected]](/web/20220124013546/https://www.baeldung.com/cdn-cgi/l/email-protection):8082/eureka/\r\n```","```\r\nmanagement.security.sessions=never\r\n```","```\r\npublic class GatewayApplicationLiveTest {\r\n    @Test\r\n    public void testAccess() {\r\n        ...\r\n    }\r\n}\r\n```","```\r\nTestRestTemplate testRestTemplate = new TestRestTemplate();\r\nString testUrl = \"http://localhost:8080\";\r\n\r\nResponseEntity<String> response = testRestTemplate\r\n  .getForEntity(testUrl + \"/book-service/books\", String.class);\r\nAssert.assertEquals(HttpStatus.OK, response.getStatusCode());\r\nAssert.assertNotNull(response.getBody());\r\n```","```\r\nresponse = testRestTemplate\r\n  .getForEntity(testUrl + \"/book-service/books/1\", String.class);\r\nAssert.assertEquals(HttpStatus.FOUND, response.getStatusCode());\r\nAssert.assertEquals(\"http://localhost:8080/login\", response.getHeaders()\r\n  .get(\"Location\").get(0));\r\n```","```\r\nMultiValueMap<String, String> form = new LinkedMultiValueMap<>();\r\nform.add(\"username\", \"user\");\r\nform.add(\"password\", \"password\");\r\nresponse = testRestTemplate\r\n  .postForEntity(testUrl + \"/login\", form, String.class); \r\n```","```\r\nString sessionCookie = response.getHeaders().get(\"Set-Cookie\")\r\n  .get(0).split(\";\")[0];\r\nHttpHeaders headers = new HttpHeaders();\r\nheaders.add(\"Cookie\", sessionCookie);\r\nHttpEntity<String> httpEntity = new HttpEntity<>(headers); \r\n```","```\r\nresponse = testRestTemplate.exchange(testUrl + \"/book-service/books/1\",\r\n  HttpMethod.GET, httpEntity, String.class);\r\nAssert.assertEquals(HttpStatus.OK, response.getStatusCode());\r\nAssert.assertNotNull(response.getBody());\r\n```","```\r\nresponse = testRestTemplate.exchange(testUrl + \"/rating-service/ratings/all\",\r\n  HttpMethod.GET, httpEntity, String.class);\r\nAssert.assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());\r\n```","```\r\nform.clear();\r\nform.add(\"username\", \"admin\");\r\nform.add(\"password\", \"admin\");\r\nresponse = testRestTemplate\r\n  .postForEntity(testUrl + \"/login\", form, String.class);\r\n\r\nsessionCookie = response.getHeaders().get(\"Set-Cookie\").get(0).split(\";\")[0];\r\nheaders = new HttpHeaders();\r\nheaders.add(\"Cookie\", sessionCookie);\r\nhttpEntity = new HttpEntity<>(headers);\r\n\r\nresponse = testRestTemplate.exchange(testUrl + \"/rating-service/ratings/all\",\r\n  HttpMethod.GET, httpEntity, String.class);\r\nAssert.assertEquals(HttpStatus.OK, response.getStatusCode());\r\nAssert.assertNotNull(response.getBody());\r\n```","```\r\nresponse = testRestTemplate.exchange(testUrl + \"/discovery\",\r\n  HttpMethod.GET, httpEntity, String.class);\r\nAssert.assertEquals(HttpStatus.OK, response.getStatusCode());\r\n```"]