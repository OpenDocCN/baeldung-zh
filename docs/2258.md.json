["```\r\npublic int findKthLargestBySorting(Integer[] arr, int k) {\r\n    Arrays.sort(arr);\r\n    int targetIndex = arr.length - k;\r\n    return arr[targetIndex];\r\n}\r\n```","```\r\npublic int findKthLargestBySortingDesc(Integer[] arr, int k) {\r\n    Arrays.sort(arr, Collections.reverseOrder());\r\n    return arr[k-1];\r\n}\r\n```","```\r\npublic int \r\n  findKthElementByQuickSelect(Integer[] arr, int left, int right, int k) {\r\n    if (k >= 0 && k <= right - left + 1) {\r\n        int pos = partition(arr, left, right);\r\n        if (pos - left == k) {\r\n            return arr[pos];\r\n        }\r\n        if (pos - left > k) {\r\n            return findKthElementByQuickSelect(arr, left, pos - 1, k);\r\n        }\r\n        return findKthElementByQuickSelect(arr, pos + 1,\r\n          right, k - pos + left - 1);\r\n    }\r\n    return 0;\r\n}\r\n```","```\r\npublic int partition(Integer[] arr, int left, int right) {\r\n    int pivot = arr[right];\r\n    Integer[] leftArr;\r\n    Integer[] rightArr;\r\n\r\n    leftArr = IntStream.range(left, right)\r\n      .filter(i -> arr[i] < pivot)\r\n      .map(i -> arr[i])\r\n      .boxed()\r\n      .toArray(Integer[]::new);\r\n\r\n    rightArr = IntStream.range(left, right)\r\n      .filter(i -> arr[i] > pivot)\r\n      .map(i -> arr[i])\r\n      .boxed()\r\n      .toArray(Integer[]::new);\r\n\r\n    int leftArraySize = leftArr.length;\r\n    System.arraycopy(leftArr, 0, arr, left, leftArraySize);\r\n    arr[leftArraySize+left] = pivot;\r\n    System.arraycopy(rightArr, 0, arr, left + leftArraySize + 1,\r\n      rightArr.length);\r\n\r\n    return left + leftArraySize;\r\n}\r\n```","```\r\npublic int partitionIterative(Integer[] arr, int left, int right) {\r\n    int pivot = arr[right], i = left;\r\n    for (int j = left; j <= right - 1; j++) {\r\n        if (arr[j] <= pivot) {\r\n            swap(arr, i, j);\r\n            i++;\r\n        }\r\n    }\r\n    swap(arr, i, right);\r\n    return i;\r\n}\r\n\r\npublic void swap(Integer[] arr, int n1, int n2) {\r\n    int temp = arr[n2];\r\n    arr[n2] = arr[n1];\r\n    arr[n1] = temp;\r\n}\r\n```","```\r\npublic int randomPartition(Integer arr[], int left, int right) {\r\n    int n = right - left + 1;\r\n    int pivot = (int) (Math.random()) * n;\r\n    swap(arr, left + pivot, right);\r\n    return partition(arr, left, right);\r\n}\r\n```"]