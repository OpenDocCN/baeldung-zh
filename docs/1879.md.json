["```\r\npublic static boolean validateStringFilenameUsingIO(String filename) throws IOException {\r\n    File file = new File(filename);\r\n    boolean created = false;\r\n    try {\r\n        created = file.createNewFile();\r\n        return created;\r\n    } finally {\r\n        if (created) {\r\n            file.delete();\r\n        }\r\n    }\r\n}\r\n```","```\r\nassertThatThrownBy(() -> validateStringFilenameUsingIO(\"baeldung?.txt\"))\r\n  .isInstanceOf(IOException.class)\r\n  .hasMessageContaining(\"Invalid file path\");\r\n```","```\r\npublic static boolean validateStringFilenameUsingNIO2(String filename) {\r\n    Paths.get(filename);\r\n    return true;\r\n}\r\n```","```\r\nassertThatThrownBy(() -> validateStringFilenameUsingNIO2(filename))\r\n  .isInstanceOf(InvalidPathException.class)\r\n  .hasMessageContaining(\"character not allowed\");\r\n```","```\r\nString filename = RandomStringUtils.randomAlphabetic(500);\r\nassertThatThrownBy(() -> validateStringFilenameUsingIO(filename))\r\n  .isInstanceOf(IOException.class)\r\n  .hasMessageContaining(\"File name too long\");\r\n\r\nassertThat(validateStringFilenameUsingNIO2(filename)).isTrue();\r\n```","```\r\npublic static final Character[] INVALID_WINDOWS_SPECIFIC_CHARS = {'\"', '*', '<', '>', '?', '|'};\r\npublic static final Character[] INVALID_UNIX_SPECIFIC_CHARS = {'\\000'};\r\n```","```\r\npublic static Character[] getInvalidCharsByOS() {\r\n    String os = System.getProperty(\"os.name\").toLowerCase();\r\n    if (os.contains(\"win\")) {\r\n        return INVALID_WINDOWS_SPECIFIC_CHARS;\r\n    } else if (os.contains(\"nix\") || os.contains(\"nux\") || os.contains(\"mac\")) {\r\n        return INVALID_UNIX_SPECIFIC_CHARS;\r\n    } else {\r\n        return new Character[]{};\r\n    }\r\n}\r\n```","```\r\npublic static boolean validateStringFilenameUsingContains(String filename) {\r\n    if (filename == null || filename.isEmpty() || filename.length() > 255) {\r\n        return false;\r\n    }\r\n    return Arrays.stream(getInvalidCharsByOS())\r\n      .noneMatch(ch -> filename.contains(ch.toString()));\r\n}\r\n```","```\r\npublic static final String REGEX_PATTERN = \"^[A-za-z0-9.]{1,255}$\";\r\n\r\npublic static boolean validateStringFilenameUsingRegex(String filename) {\r\n    if (filename == null) {\r\n        return false;\r\n    }\r\n    return filename.matches(REGEX_PATTERN);\r\n} \r\n```"]