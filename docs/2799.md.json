["```\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-engine</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.junit.jupiter</groupId>\r\n    <artifactId>junit-jupiter-api</artifactId>\r\n    <version>5.8.1</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>org.springframework</groupId>\r\n    <artifactId>spring-test</artifactId>\r\n    <version>5.3.3</version>\r\n    <scope>test</scope>\r\n</dependency> \r\n```","```\r\n<dependency>\r\n    <groupId>org.hamcrest</groupId>\r\n    <artifactId>hamcrest-library</artifactId>\r\n    <version>2.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n<dependency>\r\n    <groupId>com.jayway.jsonpath</groupId>\r\n    <artifactId>json-path</artifactId>\r\n    <version>2.5.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```","```\r\n@ExtendWith(SpringExtension.class)\r\n@ContextConfiguration(classes = { ApplicationConfig.class })\r\n@WebAppConfiguration\r\npublic class GreetControllerIntegrationTest {\r\n    ....\r\n}\r\n```","```\r\n@ContextConfiguration(locations={\"\"})\r\n```","```\r\n@WebAppConfiguration(value = \"\")\r\n```","```\r\n@Autowired\r\nprivate WebApplicationContext webApplicationContext;\r\n```","```\r\nprivate MockMvc mockMvc;\r\n@BeforeEach\r\npublic void setup() throws Exception {\r\n    this.mockMvc = MockMvcBuilders.webAppContextSetup(this.webApplicationContext).build();\r\n}\r\n```","```\r\n@Test\r\npublic void givenWac_whenServletContext_thenItProvidesGreetController() {\r\n    ServletContext servletContext = webApplicationContext.getServletContext();\r\n\r\n    Assert.assertNotNull(servletContext);\r\n    Assert.assertTrue(servletContext instanceof MockServletContext);\r\n    Assert.assertNotNull(webApplicationContext.getBean(\"greetController\"));\r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/homePage\r\n```","```\r\n@Test\r\npublic void givenHomePageURI_whenMockMVC_thenReturnsIndexJSPViewName() {\r\n    this.mockMvc.perform(get(\"/homePage\")).andDo(print())\r\n      .andExpect(view().name(\"index\"));\r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/greet\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"message\": \"Hello World!!!\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenGreetURI_whenMockMVC_thenVerifyResponse() {\r\n    MvcResult mvcResult = this.mockMvc.perform(get(\"/greet\"))\r\n      .andDo(print()).andExpect(status().isOk())\r\n      .andExpect(jsonPath(\"$.message\").value(\"Hello World!!!\"))\r\n      .andReturn();\r\n\r\n    Assert.assertEquals(\"application/json;charset=UTF-8\", \r\n      mvcResult.getResponse().getContentType());\r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/greetWithPathVariable/John\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"message\": \"Hello World John!!!\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenGreetURIWithPathVariable_whenMockMVC_thenResponseOK() {\r\n    this.mockMvc\r\n      .perform(get(\"/greetWithPathVariable/{name}\", \"John\"))\r\n      .andDo(print()).andExpect(status().isOk())\r\n\r\n      .andExpect(content().contentType(\"application/json;charset=UTF-8\"))\r\n      .andExpect(jsonPath(\"$.message\").value(\"Hello World John!!!\"));\r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/greetWithQueryVariable?name=John%20Doe\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"message\": \"Hello World John Doe!!!\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenGreetURIWithQueryParameter_whenMockMVC_thenResponseOK() {\r\n    this.mockMvc.perform(get(\"/greetWithQueryVariable\")\r\n      .param(\"name\", \"John Doe\")).andDo(print()).andExpect(status().isOk())\r\n      .andExpect(content().contentType(\"application/json;charset=UTF-8\"))\r\n      .andExpect(jsonPath(\"$.message\").value(\"Hello World John Doe!!!\"));\r\n}\r\n```","```\r\nthis.mockMvc.perform(\r\n  get(\"/greetWithQueryVariable?name={name}\", \"John Doe\"));\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/greetWithPost\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"message\": \"Hello World!!!\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenGreetURIWithPost_whenMockMVC_thenVerifyResponse() {\r\n    this.mockMvc.perform(post(\"/greetWithPost\")).andDo(print())\r\n      .andExpect(status().isOk()).andExpect(content()\r\n      .contentType(\"application/json;charset=UTF-8\"))\r\n      .andExpect(jsonPath(\"$.message\").value(\"Hello World!!!\"));\r\n}\r\n```","```\r\nhttp://localhost:8080/spring-mvc-test/greetWithPostAndFormData\r\n```","```\r\nid=1;name=John%20Doe\r\n```","```\r\n{\r\n    \"id\": 1,\r\n    \"message\": \"Hello World John Doe!!!\"\r\n}\r\n```","```\r\n@Test\r\npublic void givenGreetURI_whenMockMVC_thenVerifyResponse() throws Exception {\r\n    MvcResult mvcResult = this.mockMvc.perform(MockMvcRequestBuilders.get(\"/greet\"))\r\n      .andDo(print())\r\n      .andExpect(MockMvcResultMatchers.status().isOk())\r\n      .andExpect(MockMvcResultMatchers.jsonPath(\"$.message\").value(\"Hello World!!!\"))\r\n      .andReturn();\r\n\r\n   assertEquals(\"application/json;charset=UTF-8\", mvcResult.getResponse().getContentType());\r\n}\r\n```","```\r\n@SpringBootTest(webEnvironment = DEFINED_PORT)\r\npublic class GreetControllerRealIntegrationTest {\r\n\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.port = DEFAULT_PORT;\r\n    }\r\n\r\n    @Test\r\n    public void givenGreetURI_whenSendingReq_thenVerifyResponse() {\r\n        given().get(\"/greet\")\r\n          .then()\r\n          .statusCode(200);\r\n    }\r\n}\r\n```"]