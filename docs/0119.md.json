["```\r\n$ jar tf stripe-0.0.1-SNAPSHOT.jar \r\nMETA-INF/\r\nMETA-INF/MANIFEST.MF\r\n...\r\ntemplates/result.html\r\ntemplates/checkout.html\r\napplication.properties\r\ncom/baeldung/stripe/StripeApplication.class\r\ncom/baeldung/stripe/ChargeRequest.class\r\ncom/baeldung/stripe/StripeService.class\r\ncom/baeldung/stripe/ChargeRequest$Currency.class\r\n...\r\n```","```\r\n$ jar tf stripe-0.0.1-SNAPSHOT.jar | grep '\\.class$'\r\ncom/baeldung/stripe/StripeApplication.class\r\ncom/baeldung/stripe/ChargeRequest.class\r\ncom/baeldung/stripe/StripeService.class\r\ncom/baeldung/stripe/ChargeRequest$Currency.class\r\ncom/baeldung/stripe/ChargeController.class\r\ncom/baeldung/stripe/CheckoutController.class\r\n```","```\r\npublic static Set<String> getClassNamesFromJarFile(File givenFile) throws IOException {\r\n    Set<String> classNames = new HashSet<>();\r\n    try (JarFile jarFile = new JarFile(givenFile)) {\r\n        Enumeration<JarEntry> e = jarFile.entries();\r\n        while (e.hasMoreElements()) {\r\n            JarEntry jarEntry = e.nextElement();\r\n            if (jarEntry.getName().endsWith(\".class\")) {\r\n                String className = jarEntry.getName()\r\n                  .replace(\"/\", \".\")\r\n                  .replace(\".class\", \"\");\r\n                classNames.add(className);\r\n            }\r\n        }\r\n        return classNames;\r\n    }\r\n} \r\n```","```\r\nprivate static final String JAR_PATH = \"example-jar/stripe-0.0.1-SNAPSHOT.jar\";\r\nprivate static final Set<String> EXPECTED_CLASS_NAMES = Sets.newHashSet(\r\n  \"com.baeldung.stripe.StripeApplication\",\r\n  \"com.baeldung.stripe.ChargeRequest\",\r\n  \"com.baeldung.stripe.StripeService\",\r\n  \"com.baeldung.stripe.ChargeRequest$Currency\",\r\n  \"com.baeldung.stripe.ChargeController\",\r\n  \"com.baeldung.stripe.CheckoutController\");\r\n\r\n@Test\r\npublic void givenJarFilePath_whenLoadClassNames_thenGetClassNames() throws IOException, URISyntaxException {\r\n    File jarFile = new File(\r\n      Objects.requireNonNull(getClass().getClassLoader().getResource(JAR_PATH)).toURI());\r\n\r\n    Set<String> classNames = GetClassNamesFromJar.getClassNamesFromJarFile(jarFile);\r\n\r\n    Assert.assertEquals(EXPECTED_CLASS_NAMES, classNames);\r\n} \r\n```","```\r\npublic static Set<Class> getClassesFromJarFile(File jarFile) throws IOException, ClassNotFoundException {\r\n    Set<String> classNames = getClassNamesFromJarFile(jarFile);\r\n    Set<Class> classes = new HashSet<>(classNames.size());\r\n    try (URLClassLoader cl = URLClassLoader.newInstance(\r\n           new URL[] { new URL(\"jar:file:\" + jarFile + \"!/\") })) {\r\n        for (String name : classNames) {\r\n            Class clazz = cl.loadClass(name); // Load the class by its name\r\n            classes.add(clazz);\r\n        }\r\n    }\r\n    return classes;\r\n}\r\n```","```\r\njar:http://www.example.com/some_jar_file.jar!/\r\njar:file:/local/path/to/some_jar_file.jar!/\r\njar:file:/C:/windows/path/to/some_jar_file.jar!/\r\n```","```\r\n@Test\r\npublic void givenJarFilePath_whenLoadClass_thenGetClassObjects()\r\n  throws IOException, ClassNotFoundException, URISyntaxException {\r\n    File jarFile\r\n      = new File(Objects.requireNonNull(getClass().getClassLoader().getResource(JAR_PATH)).toURI());\r\n    Set<Class> classes = GetClassNamesFromJar.getClassesFromJarFile(jarFile);\r\n    Set<String> names = classes.stream().map(Class::getName).collect(Collectors.toSet());\r\n    Assert.assertEquals(EXPECTED_CLASS_NAMES, names);\r\n} \r\n```"]