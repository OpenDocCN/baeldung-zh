["```\r\nMemorySegment memorySegment = MemorySegment.allocateNative(200);\r\n```","```\r\nMemorySegment memorySegment = MemorySegment.ofArray(new long[100]);\r\n```","```\r\nMemorySegment memorySegment = MemorySegment.ofByteBuffer(ByteBuffer.allocateDirect(200));\r\n```","```\r\nMemorySegment memorySegment = MemorySegment.mapFromPath(\r\n  Path.of(\"/tmp/memory.txt\"), 200, FileChannel.MapMode.READ_WRITE);\r\n```","```\r\nMemoryAddress address = MemorySegment.allocateNative(100).baseAddress();\r\n```","```\r\nint numberOfPoints = 10;\r\nMemoryLayout pointLayout = MemoryLayout.ofStruct(\r\n  MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN).withName(\"x\"),\r\n  MemoryLayout.ofValueBits(32, ByteOrder.BIG_ENDIAN).withName(\"y\")\r\n);\r\nSequenceLayout pointsLayout = \r\n  MemoryLayout.ofSequence(numberOfPoints, pointLayout);\r\n```","```\r\nlong value = 10;\r\nMemoryAddress memoryAddress = MemorySegment.allocateNative(8).baseAddress();\r\nVarHandle varHandle = MemoryHandles.varHandle(long.class, ByteOrder.nativeOrder());\r\nvarHandle.set(memoryAddress, value);\r\n\r\nassertThat(varHandle.get(memoryAddress), is(value));\r\n```","```\r\nVarHandle varHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\r\ntry (MemorySegment memorySegment = MemorySegment.allocateNative(100)) {\r\n    MemoryAddress base = memorySegment.baseAddress();\r\n    for(int i=0; i<25; i++) {\r\n        varHandle.set(base.addOffset((i*4)), i);\r\n    }\r\n    for(int i=0; i<25; i++) {\r\n        assertThat(varHandle.get(base.addOffset((i*4))), is(i));\r\n    }\r\n}\r\n```","```\r\nSequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, \r\n  MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder()));\r\n```","```\r\nSequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, MemoryLayouts.JAVA_LONG);\r\n```","```\r\nValueLayout valueLayout = MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder()); \r\n```","```\r\nSequenceLayout sequenceLayout = MemoryLayout.ofSequence(25, \r\n  MemoryLayout.ofValueBits(64, ByteOrder.nativeOrder())); \r\n```","```\r\nGroupLayout groupLayout = MemoryLayout.ofStruct(MemoryLayouts.JAVA_INT, MemoryLayouts.JAVA_LONG);\r\n```","```\r\nGroupLayout groupLayout = MemoryLayout.ofUnion(MemoryLayouts.JAVA_INT, MemoryLayouts.JAVA_LONG);\r\n```","```\r\nMemoryLayout memoryLayout1 = MemoryLayout.ofValueBits(32, ByteOrder.nativeOrder());\r\nMemoryLayout memoryLayout2 = MemoryLayout.ofStruct(MemoryLayouts.JAVA_LONG, MemoryLayouts.PAD_64);\r\nMemoryLayout.ofStruct(memoryLayout1, memoryLayout2);\r\n```","```\r\nMemoryAddress memoryAddress = MemorySegment.allocateNative(12).baseAddress();\r\nMemoryAddress memoryAddress1 = memoryAddress.segment().asSlice(0,4).baseAddress();\r\nMemoryAddress memoryAddress2 = memoryAddress.segment().asSlice(4,4).baseAddress();\r\nMemoryAddress memoryAddress3 = memoryAddress.segment().asSlice(8,4).baseAddress();\r\n\r\nVarHandle intHandle = MemoryHandles.varHandle(int.class, ByteOrder.nativeOrder());\r\nintHandle.set(memoryAddress1, Integer.MIN_VALUE);\r\nintHandle.set(memoryAddress2, 0);\r\nintHandle.set(memoryAddress3, Integer.MAX_VALUE);\r\n\r\nassertThat(intHandle.get(memoryAddress1), is(Integer.MIN_VALUE));\r\nassertThat(intHandle.get(memoryAddress2), is(0));\r\nassertThat(intHandle.get(memoryAddress3), is(Integer.MAX_VALUE));\r\n```"]