["```\r\nclass Employee {\r\n    String firstName\r\n    String lastName  \r\n    int age\r\n}\r\n```","```\r\nEmployee emp = new Employee(firstName: \"Norman\", lastName: \"Lewis\")\r\nprintln emp.address \r\n```","```\r\ngroovy.lang.MissingPropertyException: No such property: \r\naddress for class: com.baeldung.metaprogramming.Employee\r\n```","```\r\ndef propertyMissing(String propertyName) {\r\n    \"property '$propertyName' is not available\"\r\n}\r\n```","```\r\nassert emp.address == \"property 'address' is not available\"\r\n```","```\r\ndef propertyMissing(String propertyName, propertyValue) { \r\n    println \"cannot set $propertyValue - property '$propertyName' is not available\" \r\n}\r\n```","```\r\ntry {\r\n    emp.getFullName()\r\n} catch (MissingMethodException e) {\r\n    println \"method is not defined\"\r\n}\r\n```","```\r\ndef methodMissing(String methodName, def methodArgs) {\r\n    \"method '$methodName' is not defined\"\r\n}\r\n```","```\r\nassert emp.getFullName() == \"method 'getFullName' is not defined\"\r\n```","```\r\nEmployee.metaClass.address = \"\"\r\n```","```\r\nEmployee emp = new Employee(firstName: \"Norman\", lastName: \"Lewis\", address: \"US\")\r\nassert emp.address == \"US\"\r\n```","```\r\nemp.metaClass.getFullName = {\r\n    \"$lastName, $firstName\"\r\n}\r\n```","```\r\nassert emp.getFullName() == \"Lewis, Norman\"\r\n```","```\r\nEmployee.metaClass.constructor = { String firstName -> \r\n    new Employee(firstName: firstName) \r\n}\r\n```","```\r\nEmployee norman = new Employee(\"Norman\")\r\nassert norman.firstName == \"Norman\"\r\nassert norman.lastName == null\r\n```","```\r\nString.metaClass.capitalize = { String str ->\r\n    str.substring(0, 1).toUpperCase() + str.substring(1)\r\n}\r\n```","```\r\nassert \"norman\".capitalize() == \"Norman\"\r\n```","```\r\nclass BasicExtensions {\r\n    static int getYearOfBirth(Employee self) {\r\n        return Year.now().value - self.age\r\n    }\r\n}\r\n```","```\r\nmoduleName=core-groovy-2 \r\nmoduleVersion=1.0-SNAPSHOT \r\nextensionClasses=com.baeldung.metaprogramming.extension.BasicExtensions\r\n```","```\r\ndef age = 28\r\ndef expectedYearOfBirth = Year.now() - age\r\nEmployee emp = new Employee(age: age)\r\nassert emp.getYearOfBirth() == expectedYearOfBirth.value\r\n```","```\r\nclass StaticEmployeeExtension {\r\n    static Employee getDefaultObj(Employee self) {\r\n        return new Employee(firstName: \"firstName\", lastName: \"lastName\", age: 20)\r\n    }\r\n}\r\n```","```\r\nstaticExtensionClasses=com.baeldung.metaprogramming.extension.StaticEmployeeExtension\r\n```","```\r\nassert Employee.getDefaultObj().firstName == \"firstName\"\r\nassert Employee.getDefaultObj().lastName == \"lastName\"\r\nassert Employee.getDefaultObj().age == 20\r\n```","```\r\npublic static void printCounter(Integer self) {\r\n    while (self > 0) {\r\n        println self\r\n        self--\r\n    }\r\n    return self\r\n}\r\nassert 5.printCounter() == 0 \r\n```","```\r\npublic static Long square(Long self) {\r\n    return self*self\r\n}\r\nassert 40l.square() == 1600l \r\n```","```\r\n@ToString\r\nclass Employee {\r\n    long id\r\n    String firstName\r\n    String lastName\r\n    int age\r\n}\r\n```","```\r\nEmployee employee = new Employee()\r\nemployee.id = 1\r\nemployee.firstName = \"norman\"\r\nemployee.lastName = \"lewis\"\r\nemployee.age = 28\r\n\r\nassert employee.toString() == \"com.baeldung.metaprogramming.Employee(1, norman, lewis, 28)\"\r\n```","```\r\n@ToString(includePackage=false, excludes=['id'])\r\n```","```\r\nassert employee.toString() == \"Employee(norman, lewis, 28)\"\r\n```","```\r\n@TupleConstructor \r\nclass Employee { \r\n    long id \r\n    String firstName \r\n    String lastName \r\n    int age \r\n}\r\n```","```\r\nEmployee norman = new Employee(1, \"norman\", \"lewis\", 28)\r\nassert norman.toString() == \"Employee(norman, lewis, 28)\" \r\n```","```\r\nEmployee snape = new Employee(2, \"snape\")\r\nassert snape.toString() == \"Employee(snape, null, 0)\"\r\n```","```\r\nEmployee normanCopy = new Employee(1, \"norman\", \"lewis\", 28)\r\n\r\nassert norman == normanCopy\r\nassert norman.hashCode() == normanCopy.hashCode()\r\n```","```\r\ntry {\r\n    Employee norman = new Employee(1, \"norman\", \"lewis\", 28)\r\n    def normanCopy = norman.clone()\r\n    assert norman == normanCopy\r\n} catch (CloneNotSupportedException e) {\r\n    e.printStackTrace()\r\n}\r\n```","```\r\ndef logEmp() {\r\n    log.info \"Employee: $lastName, $firstName is of $age years age\"\r\n}\r\n```","```\r\nEmployee employee = new Employee(1, \"Norman\", \"Lewis\", 28)\r\nemployee.logEmp()\r\n```","```\r\nINFO: Employee: Lewis, Norman is of 28 years age\r\n```"]