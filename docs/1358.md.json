["```\r\nstatic Set<Integer> getAllFactorsVer1(int n) {\r\n    Set<Integer> factors = new HashSet<>();\r\n    for (int i = 1; i <= n; i++) {\r\n        if (n % i == 0) {\r\n            factors.add(i);\r\n        }\r\n    }\r\n    return factors;\r\n} \r\n```","```\r\nfinal static Map<Integer, Set<Integer>> FACTOR_MAP = ImmutableMap.of(\r\n    0, ImmutableSet.of(),\r\n    1, ImmutableSet.of(1),\r\n    20, ImmutableSet.of(1, 2, 4, 5, 10, 20),\r\n    24, ImmutableSet.of(1, 2, 3, 4, 6, 8, 12, 24),\r\n    97, ImmutableSet.of(1, 97),\r\n    99, ImmutableSet.of(1, 3, 9, 11, 33, 99),\r\n    100, ImmutableSet.of(1, 2, 4, 5, 10, 20, 25, 50, 100)\r\n); \r\n```","```\r\nFACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer1(number)));\r\n```","```\r\nfor (int i = 1; i <= n; i++) {\r\n   if (n % i == 0) {\r\n       factors.add(i);\r\n   }\r\n}\r\n```","```\r\n 1    2    4    5    10    20    25    50    100\r\n   │    │    │    │    |      │     │     │     │\r\n   │    │    │    │  [10,10]  │     │     │     │\r\n   │    │    │    │           │     │     │     │\r\n   │    │    │    └──[5, 20] ─┘     │     │     │\r\n   │    │    │                      │     │     │\r\n   │    │    └───────[4, 25]────────┘     │     │\r\n   │    │                                 │     │\r\n   │    └────────────[2, 50]──────────────┘     │\r\n   │                                            │\r\n   └─────────────────[1, 100]───────────────────┘ \r\n```","```\r\nstatic Set<Integer> getAllFactorsVer2(int n) {\r\n    Set<Integer> factors = new HashSet<>();\r\n    for (int i = 1; i <= Math.sqrt(n); i++) {\r\n        if (n % i == 0) {\r\n            factors.add(i);\r\n            factors.add(n / i);\r\n        }\r\n    }\r\n    return factors;\r\n} \r\n```","```\r\nFACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer2(number)));\r\n```","```\r\nstatic Set<Integer> getAllFactorsVer3(int n) {\r\n    Set<Integer> factors = new HashSet<>();\r\n    int step = n % 2 == 0 ? 1 : 2;\r\n    for (int i = 1; i <= Math.sqrt(n); i += step) {\r\n        if (n % i == 0) {\r\n            factors.add(i);\r\n            factors.add(n / i);\r\n        }\r\n    }\r\n    return factors;\r\n} \r\n```","```\r\nFACTOR_MAP.forEach((number, expected) -> assertEquals(expected, FactorsOfInteger.getAllFactorsVer3(number)));\r\n```"]