["```\r\npublic final void writeObject(Object o) throws IOException;\r\n```","```\r\npublic final Object readObject() \r\n  throws IOException, ClassNotFoundException;\r\n```","```\r\npublic class Person implements Serializable {\r\n    private static final long serialVersionUID = 1L;\r\n    static String country = \"ITALY\";\r\n    private int age;\r\n    private String name;\r\n    transient int height;\r\n\r\n    // getters and setters\r\n}\r\n```","```\r\n@Test \r\npublic void whenSerializingAndDeserializing_ThenObjectIsTheSame() () \r\n  throws IOException, ClassNotFoundException { \r\n    Person person = new Person();\r\n    person.setAge(20);\r\n    person.setName(\"Joe\");\r\n\r\n    FileOutputStream fileOutputStream\r\n      = new FileOutputStream(\"yourfile.txt\");\r\n    ObjectOutputStream objectOutputStream \r\n      = new ObjectOutputStream(fileOutputStream);\r\n    objectOutputStream.writeObject(person);\r\n    objectOutputStream.flush();\r\n    objectOutputStream.close();\r\n\r\n    FileInputStream fileInputStream\r\n      = new FileInputStream(\"yourfile.txt\");\r\n    ObjectInputStream objectInputStream\r\n      = new ObjectInputStream(fileInputStream);\r\n    Person p2 = (Person) objectInputStream.readObject();\r\n    objectInputStream.close(); \r\n\r\n    assertTrue(p2.getAge() == person.getAge());\r\n    assertTrue(p2.getName().equals(person.getName()));\r\n}\r\n```","```\r\npublic class Person implements Serializable {\r\n    private int age;\r\n    private String name;\r\n    private Address country; // must be serializable too\r\n} \r\n```","```\r\nprivate void writeObject(ObjectOutputStream out) throws IOException;\r\n```","```\r\nprivate void readObject(ObjectInputStream in) \r\n  throws IOException, ClassNotFoundException;\r\n```","```\r\npublic class Employee implements Serializable {\r\n    private static final long serialVersionUID = 1L;\r\n    private transient Address address;\r\n    private Person person;\r\n\r\n    // setters and getters\r\n\r\n    private void writeObject(ObjectOutputStream oos) \r\n      throws IOException {\r\n        oos.defaultWriteObject();\r\n        oos.writeObject(address.getHouseNumber());\r\n    }\r\n\r\n    private void readObject(ObjectInputStream ois) \r\n      throws ClassNotFoundException, IOException {\r\n        ois.defaultReadObject();\r\n        Integer houseNumber = (Integer) ois.readObject();\r\n        Address a = new Address();\r\n        a.setHouseNumber(houseNumber);\r\n        this.setAddress(a);\r\n    }\r\n}\r\n```","```\r\npublic class Address {\r\n    private int houseNumber;\r\n\r\n    // setters and getters\r\n}\r\n```","```\r\n@Test\r\npublic void whenCustomSerializingAndDeserializing_ThenObjectIsTheSame() \r\n  throws IOException, ClassNotFoundException {\r\n    Person p = new Person();\r\n    p.setAge(20);\r\n    p.setName(\"Joe\");\r\n\r\n    Address a = new Address();\r\n    a.setHouseNumber(1);\r\n\r\n    Employee e = new Employee();\r\n    e.setPerson(p);\r\n    e.setAddress(a);\r\n\r\n    FileOutputStream fileOutputStream\r\n      = new FileOutputStream(\"yourfile2.txt\");\r\n    ObjectOutputStream objectOutputStream \r\n      = new ObjectOutputStream(fileOutputStream);\r\n    objectOutputStream.writeObject(e);\r\n    objectOutputStream.flush();\r\n    objectOutputStream.close();\r\n\r\n    FileInputStream fileInputStream \r\n      = new FileInputStream(\"yourfile2.txt\");\r\n    ObjectInputStream objectInputStream \r\n      = new ObjectInputStream(fileInputStream);\r\n    Employee e2 = (Employee) objectInputStream.readObject();\r\n    objectInputStream.close();\r\n\r\n    assertTrue(\r\n      e2.getPerson().getAge() == e.getPerson().getAge());\r\n    assertTrue(\r\n      e2.getAddress().getHouseNumber() == e.getAddress().getHouseNumber());\r\n}\r\n```"]