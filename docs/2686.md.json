["```\r\nint i = 0;\r\nwhile (i < s.length() && Character.isWhitespace(s.charAt(i))) {\r\n    i++;\r\n}\r\nString ltrim = s.substring(i); \r\n```","```\r\nint i = s.length()-1;\r\nwhile (i >= 0 && Character.isWhitespace(s.charAt(i))) {\r\n    i--;\r\n}\r\nString rtrim = s.substring(0,i+1);\r\n```","```\r\nString ltrim = src.replaceAll(\"^\\\\s+\", \"\");\r\nString rtrim = src.replaceAll(\"\\\\s+$\", \"\");\r\n```","```\r\nprivate static Pattern LTRIM = Pattern.compile(\"^\\\\s+\");\r\nprivate static Pattern RTRIM = Pattern.compile(\"\\\\s+$\");\r\n\r\nString ltrim = LTRIM.matcher(s).replaceAll(\"\");\r\nString rtim = RTRIM.matcher(s).replaceAll(\"\");\r\n```","```\r\n<dependency> \r\n    <groupId>org.apache.commons</groupId> \r\n    <artifactId>commons-lang3</artifactId> \r\n    <version>3.12.0</version> \r\n</dependency>\r\n```","```\r\nString ltrim = StringUtils.stripStart(src, null);\r\nString rtrim = StringUtils.stripEnd(src, null);\r\n```","```\r\n<dependency> \r\n    <groupId>com.google.guava</groupId> \r\n    <artifactId>guava</artifactId> \r\n    <version>31.0.1-jre</version> \r\n</dependency>\r\n```","```\r\nString ltrim = CharMatcher.whitespace().trimLeadingFrom(s); \r\nString rtrim = CharMatcher.whitespace().trimTrailingFrom(s);\r\n```","```\r\n@Fork(5)\r\n@State(Scope.Benchmark)\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n```","```\r\n@Setup\r\npublic void setup() {\r\n    src = \"       White spaces left and right          \";\r\n    ltrimResult = \"White spaces left and right          \";\r\n    rtrimResult = \"       White spaces left and right\";\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean whileCharacters() {\r\n    String ltrim = whileLtrim(src);\r\n    String rtrim = whileRtrim(src);\r\n    return checkStrings(ltrim, rtrim);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean replaceAllRegularExpression() {\r\n    String ltrim = src.replaceAll(\"^\\\\s+\", \"\");\r\n    String rtrim = src.replaceAll(\"\\\\s+$\", \"\");\r\n    return checkStrings(ltrim, rtrim);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean patternMatchesLTtrimRTrim() {\r\n    String ltrim = patternLtrim(src);\r\n    String rtrim = patternRtrim(src);\r\n    return checkStrings(ltrim, rtrim);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean apacheCommonsStringUtils() {\r\n    String ltrim = StringUtils.stripStart(src, \" \");\r\n    String rtrim = StringUtils.stripEnd(src, \" \");\r\n    return checkStrings(ltrim, rtrim);\r\n}\r\n```","```\r\n@Benchmark\r\npublic boolean guavaCharMatcher() {\r\n    String ltrim = CharMatcher.whitespace().trimLeadingFrom(src);\r\n    String rtrim = CharMatcher.whitespace().trimTrailingFrom(src);\r\n    return checkStrings(ltrim, rtrim);\r\n}\r\n```","```\r\n# Run complete. Total time: 00:16:57\r\n\r\nBenchmark                               Mode  Cnt     Score    Error  Units\r\nLTrimRTrim.apacheCommonsStringUtils     avgt  100   108,718 ±  4,503  ns/op\r\nLTrimRTrim.guavaCharMatcher             avgt  100   113,601 ±  5,563  ns/op\r\nLTrimRTrim.patternMatchesLTtrimRTrim    avgt  100   850,085 ± 17,578  ns/op\r\nLTrimRTrim.replaceAllRegularExpression  avgt  100  1046,660 ±  7,151  ns/op\r\nLTrimRTrim.whileCharacters              avgt  100   110,379 ±  1,032  ns/op\r\n```"]