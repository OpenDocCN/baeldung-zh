["```\r\npublic class Encryptor {\r\n\r\n    public byte[] encryptMessage(byte[] message, byte[] keyBytes) \r\n      throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException {\r\n        Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n        //...\r\n    }\r\n}\r\n```","```\r\nCipher cipher = Cipher.getInstance(\"AES\");\r\n```","```\r\nSecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\r\n```","```\r\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\nSecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\r\ncipher.init(Cipher.ENCRYPT_MODE, secretKey);\r\n// ...\r\n```","```\r\npublic byte[] encryptMessage(byte[] message, Certificate certificate) \r\n  throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException {\r\n\r\n    Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\r\n    cipher.init(Cipher.ENCRYPT_MODE, certificate);\r\n    // ...\r\n}\r\n```","```\r\npublic byte[] encryptMessage(byte[] message, byte[] keyBytes)\r\n  throws InvalidKeyException, NoSuchPaddingException, NoSuchAlgorithmException, \r\n    BadPaddingException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n    SecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\r\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\r\n    return cipher.doFinal(message);\r\n}\r\n```","```\r\npublic byte[] decryptMessage(byte[] encryptedMessage, byte[] keyBytes) \r\n  throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, \r\n    BadPaddingException, IllegalBlockSizeException {\r\n\r\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n    SecretKey secretKey = new SecretKeySpec(keyBytes, \"AES\");\r\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\r\n    return cipher.doFinal(encryptedMessage);\r\n}\r\n```","```\r\n...\r\nsecurity.provider.4=com.sun.net.ssl.internal.ssl.Provider\r\nsecurity.provider.5=com.sun.crypto.provider.SunJCE\r\nsecurity.provider.6=sun.security.jgss.SunProvider\r\nsecurity.provider.7=org.bouncycastle.jce.provider.BouncyCastleProvider\r\n```","```\r\nSecurity.addProvider(new BouncyCastleProvider());\r\n```","```\r\nCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\", \"BC\");\r\n```","```\r\n@Test\r\npublic void whenIsEncryptedAndDecrypted_thenDecryptedEqualsOriginal() \r\n  throws Exception {\r\n\r\n    String encryptionKeyString =  \"thisisa128bitkey\";\r\n    String originalMessage = \"This is a secret message\";\r\n    byte[] encryptionKeyBytes = encryptionKeyString.getBytes();\r\n\r\n    Cipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\r\n    SecretKey secretKey = new SecretKeySpec(encryptionKeyBytes, \"AES\");\r\n    cipher.init(Cipher.ENCRYPT_MODE, secretKey);\r\n\r\n    byte[] encryptedMessageBytes = cipher.doFinal(message.getBytes());\r\n\r\n    cipher.init(Cipher.DECRYPT_MODE, secretKey);\r\n\r\n    byte[] decryptedMessageBytes = cipher.doFinal(encryptedMessageBytes);\r\n    assertThat(originalMessage).isEqualTo(new String(decryptedMessageBytes));\r\n}\r\n```"]