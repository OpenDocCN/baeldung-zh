["```\r\nTimeZone tz = TimeZone.getTimeZone(\"Europe/Rome\");\r\nTimeZone.setDefault(tz);\r\nCalendar cal = Calendar.getInstance(tz, Locale.ITALIAN);\r\nDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\", Locale.ITALIAN);\r\nDate dateBeforeDST = df.parse(\"2018-03-25 01:55\");\r\ncal.setTime(dateBeforeDST);\r\n\r\nassertThat(cal.get(Calendar.ZONE_OFFSET)).isEqualTo(3600000);\r\nassertThat(cal.get(Calendar.DST_OFFSET)).isEqualTo(0);\r\n```","```\r\ncal.add(Calendar.MINUTE, 10); \r\n```","```\r\nDate dateAfterDST = cal.getTime();\r\n\r\nassertThat(cal.get(Calendar.DST_OFFSET))\r\n  .isEqualTo(3600000);\r\nassertThat(dateAfterDST)\r\n  .isEqualTo(df.parse(\"2018-03-25 03:05\")); \r\n```","```\r\nBefore DST (00:55 UTC - 01:55 GMT+1) = Sun Mar 25 01:55:00 CET 2018\r\nAfter DST (01:05 UTC - 03:05 GMT+2) = Sun Mar 25 03:05:00 CEST 2018\r\n```","```\r\nLong deltaBetweenDatesInMillis = dateAfterDST.getTime() - dateBeforeDST.getTime();\r\nLong tenMinutesInMillis = (1000L * 60 * 10);\r\n\r\nassertThat(deltaBetweenDatesInMillis)\r\n  .isEqualTo(tenMinutesInMillis); \r\n```","```\r\nLocalDateTime localDateTimeBeforeDST = LocalDateTime\r\n  .of(2018, 3, 25, 1, 55);\r\n\r\nassertThat(localDateTimeBeforeDST.toString())\r\n  .isEqualTo(\"2018-03-25T01:55\"); \r\n```","```\r\nZoneId italianZoneId = ZoneId.of(\"Europe/Rome\");\r\nZonedDateTime zonedDateTimeBeforeDST = localDateTimeBeforeDST\r\n  .atZone(italianZoneId);\r\n\r\nassertThat(zonedDateTimeBeforeDST.toString())\r\n  .isEqualTo(\"2018-03-25T01:55+01:00[Europe/Rome]\"); \r\n```","```\r\nZonedDateTime zonedDateTimeAfterDST = zonedDateTimeBeforeDST\r\n  .plus(10, ChronoUnit.MINUTES);\r\n\r\nassertThat(zonedDateTimeAfterDST.toString())\r\n  .isEqualTo(\"2018-03-25T03:05+02:00[Europe/Rome]\"); \r\n```","```\r\nLong deltaBetweenDatesInMinutes = ChronoUnit.MINUTES\r\n  .between(zonedDateTimeBeforeDST,zonedDateTimeAfterDST);\r\nassertThat(deltaBetweenDatesInMinutes)\r\n  .isEqualTo(10); \r\n```"]