["```\r\n@Entity\r\npublic class Student {\r\n\r\n    @Id\r\n    private long studentId;\r\n\r\n    // standard constructor, getters, setters\r\n}\r\n```","```\r\n@Entity\r\npublic class Student {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private long studentId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Entity\r\npublic class Course {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private UUID courseId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Entity\r\npublic class Student {\r\n\r\n    @Id\r\n    @GeneratedValue (strategy = GenerationType.IDENTITY)\r\n    private long studentId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(generator = \"sequence-generator\")\r\n    @GenericGenerator(\r\n      name = \"sequence-generator\",\r\n      strategy = \"org.hibernate.id.enhanced.SequenceStyleGenerator\",\r\n      parameters = {\r\n        @Parameter(name = \"sequence_name\", value = \"user_sequence\"),\r\n        @Parameter(name = \"initial_value\", value = \"4\"),\r\n        @Parameter(name = \"increment_size\", value = \"1\")\r\n        }\r\n    )\r\n    private long userId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Entity\r\npublic class Department {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.TABLE, \r\n      generator = \"table-generator\")\r\n    @TableGenerator(name = \"table-generator\", \r\n      table = \"dep_ids\", \r\n      pkColumnName = \"seq_id\", \r\n      valueColumnName = \"seq_value\")\r\n    private long depId;\r\n\r\n    // ...\r\n}\r\n```","```\r\npublic class MyGenerator \r\n  implements IdentifierGenerator, Configurable {\r\n\r\n    private String prefix;\r\n\r\n    @Override\r\n    public Serializable generate(\r\n      SharedSessionContractImplementor session, Object obj) \r\n      throws HibernateException {\r\n\r\n        String query = String.format(\"select %s from %s\", \r\n            session.getEntityPersister(obj.getClass().getName(), obj)\r\n              .getIdentifierPropertyName(),\r\n            obj.getClass().getSimpleName());\r\n\r\n        Stream ids = session.createQuery(query).stream();\r\n\r\n        Long max = ids.map(o -> o.replace(prefix + \"-\", \"\"))\r\n          .mapToLong(Long::parseLong)\r\n          .max()\r\n          .orElse(0L);\r\n\r\n        return prefix + \"-\" + (max + 1);\r\n    }\r\n\r\n    @Override\r\n    public void configure(Type type, Properties properties, \r\n      ServiceRegistry serviceRegistry) throws MappingException {\r\n        prefix = properties.getProperty(\"prefix\");\r\n    }\r\n}\r\n```","```\r\n@Entity\r\npublic class Product {\r\n\r\n    @Id\r\n    @GeneratedValue(generator = \"prod-generator\")\r\n    @GenericGenerator(name = \"prod-generator\", \r\n      parameters = @Parameter(name = \"prefix\", value = \"prod\"), \r\n      strategy = \"com.baeldung.hibernate.pojo.generator.MyGenerator\")\r\n    private String prodId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveCustomGeneratedId_thenOk() {\r\n    Product product = new Product();\r\n    session.save(product);\r\n    Product product2 = new Product();\r\n    session.save(product2);\r\n\r\n    assertThat(product2.getProdId()).isEqualTo(\"prod-2\");\r\n}\r\n```","```\r\n@Embeddable\r\npublic class OrderEntryPK implements Serializable {\r\n\r\n    private long orderId;\r\n    private long productId;\r\n\r\n    // standard constructor, getters, setters\r\n    // equals() and hashCode() \r\n}\r\n```","```\r\n@Entity\r\npublic class OrderEntry {\r\n\r\n    @EmbeddedId\r\n    private OrderEntryPK entryId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveCompositeIdEntity_thenOk() {\r\n    OrderEntryPK entryPK = new OrderEntryPK();\r\n    entryPK.setOrderId(1L);\r\n    entryPK.setProductId(30L);\r\n\r\n    OrderEntry entry = new OrderEntry();\r\n    entry.setEntryId(entryPK);\r\n    session.save(entry);\r\n\r\n    assertThat(entry.getEntryId().getOrderId()).isEqualTo(1L);\r\n}\r\n```","```\r\n@Entity\r\n@IdClass(OrderEntryPK.class)\r\npublic class OrderEntry {\r\n    @Id\r\n    private long orderId;\r\n    @Id\r\n    private long productId;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveIdClassEntity_thenOk() {        \r\n    OrderEntry entry = new OrderEntry();\r\n    entry.setOrderId(1L);\r\n    entry.setProductId(30L);\r\n    session.save(entry);\r\n\r\n    assertThat(entry.getOrderId()).isEqualTo(1L);\r\n}\r\n```","```\r\n@Entity\r\npublic class UserProfile {\r\n\r\n    @Id\r\n    private long profileId;\r\n\r\n    @OneToOne\r\n    @MapsId\r\n    private User user;\r\n\r\n    // ...\r\n}\r\n```","```\r\n@Test\r\npublic void whenSaveDerivedIdEntity_thenOk() {        \r\n    User user = new User();\r\n    session.save(user);\r\n\r\n    UserProfile profile = new UserProfile();\r\n    profile.setUser(user);\r\n    session.save(profile);\r\n\r\n    assertThat(profile.getProfileId()).isEqualTo(user.getUserId());\r\n}\r\n```"]