["```\r\nTree sortTree(String name) {\r\n\r\n    List<String> deciduous = List.of(\"Beech\", \"Birch\", \"Ash\", \"Whitebeam\", \"Hornbeam\", \"Hazel & Willow\");\r\n    List<String> evergreen = List.of(\"Cedar\", \"Holly\", \"Laurel\", \"Olive\", \"Pine\");\r\n\r\n    if (deciduous.contains(name)) {\r\n        return new Deciduous(name);\r\n    } else if (evergreen.contains(name)) {\r\n        return new Evergreen(name);\r\n    } else {\r\n        throw new RuntimeException(\"Tree could not be classified\");\r\n    }\r\n}\r\n```","```\r\n@Test\r\npublic void sortTreeShouldReturnEvergreen_WhenPineIsPassed() {\r\n    Tree tree = tested.sortTree(\"Pine\");\r\n    assertEquals(tree.getClass(), Evergreen.class);\r\n} \r\n```","```\r\n@Test\r\npublic void sortTreeShouldReturnEvergreen_WhenPineIsPassed() {\r\nTree tree = tested.sortTree(\"Pine\");\r\nassertThat(tree, instanceOf(Evergreen.class));\r\n}\r\n```","```\r\nassertThat(tree, isA(Evergreen.class));\r\n```","```\r\n@Test\r\npublic void sortTreeShouldReturnEvergreen_WhenPineIsPassed() {\r\n    Tree tree = tested.sortTree(\"Pine\");\r\n    assertThat(tree).isExactlyInstanceOf(Evergreen.class);\r\n}\r\n```","```\r\n@Test\r\npublic void sortTreeShouldReturnDecidious_WhenBirchIsPassed() {\r\n    Tree tree = tested.sortTree(\"Birch\");\r\n    assertThat(tree).hasSameClassAs(new Deciduous(\"Birch\"));\r\n}\r\n```"]