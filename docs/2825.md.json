["```\r\npublic class MyDto {\r\n\r\n    private String stringValue;\r\n    private int intValue;\r\n    private boolean booleanValue;\r\n\r\n    // standard constructor, getters and setters \r\n}\r\n```","```\r\n@Test(expected = UnrecognizedPropertyException.class)\r\npublic void givenJsonHasUnknownValues_whenDeserializing_thenException()\r\n  throws JsonParseException, JsonMappingException, IOException {\r\n    String jsonAsString = \r\n        \"{\"stringValue\":\"a\",\" +\r\n        \"\"intValue\":1,\" +\r\n        \"\"booleanValue\":true,\" +\r\n        \"\"stringValue2\":\"something\"}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    MyDto readValue = mapper.readValue(jsonAsString, MyDto.class);\r\n\r\n    assertNotNull(readValue);\r\n}\r\n```","```\r\ncom.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: \r\nUnrecognized field \"stringValue2\" (class org.baeldung.jackson.ignore.MyDto), \r\nnot marked as ignorable (3 known properties: \"stringValue\", \"booleanValue\", \"intValue\"])\r\n```","```\r\nnew ObjectMapper()\r\n  .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)\r\n```","```\r\n@Test\r\npublic void givenJsonHasUnknownValuesButJacksonIsIgnoringUnknowns_whenDeserializing_thenCorrect()\r\n  throws JsonParseException, JsonMappingException, IOException {\r\n\r\n    String jsonAsString = \r\n        \"{\"stringValue\":\"a\",\" +\r\n        \"\"intValue\":1,\" +\r\n        \"\"booleanValue\":true,\" +\r\n        \"\"stringValue2\":\"something\"}\";\r\n    ObjectMapper mapper = new ObjectMapper()\r\n      .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n\r\n    MyDto readValue = mapper.readValue(jsonAsString, MyDto.class);\r\n\r\n    assertNotNull(readValue);\r\n    assertThat(readValue.getStringValue(), equalTo(\"a\"));\r\n    assertThat(readValue.isBooleanValue(), equalTo(true));\r\n    assertThat(readValue.getIntValue(), equalTo(1));\r\n}\r\n```","```\r\n@JsonIgnoreProperties(ignoreUnknown = true)\r\npublic class MyDtoIgnoreUnknown { ... }\r\n```","```\r\n@Test\r\npublic void givenJsonHasUnknownValuesButIgnoredOnClass_whenDeserializing_thenCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n\r\n    String jsonAsString =\r\n        \"{\"stringValue\":\"a\",\" +\r\n        \"\"intValue\":1,\" +\r\n        \"\"booleanValue\":true,\" +\r\n        \"\"stringValue2\":\"something\"}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    MyDtoIgnoreUnknown readValue = mapper\r\n      .readValue(jsonAsString, MyDtoIgnoreUnknown.class);\r\n\r\n    assertNotNull(readValue);\r\n    assertThat(readValue.getStringValue(), equalTo(\"a\"));\r\n    assertThat(readValue.isBooleanValue(), equalTo(true));\r\n    assertThat(readValue.getIntValue(), equalTo(1));\r\n}\r\n```","```\r\n@Test\r\npublic void givenNotAllFieldsHaveValuesInJson_whenDeserializingAJsonToAClass_thenCorrect() \r\n  throws JsonParseException, JsonMappingException, IOException {\r\n    String jsonAsString = \"{\"stringValue\":\"a\",\"booleanValue\":true}\";\r\n    ObjectMapper mapper = new ObjectMapper();\r\n\r\n    MyDto readValue = mapper.readValue(jsonAsString, MyDto.class);\r\n\r\n    assertNotNull(readValue);\r\n    assertThat(readValue.getStringValue(), equalTo(\"a\"));\r\n    assertThat(readValue.isBooleanValue(), equalTo(true));\r\n}\r\n```"]