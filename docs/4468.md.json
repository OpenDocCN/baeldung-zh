["```\r\nSupplier<Integer> incrementer(int start) {\r\n  return () -> start++;\r\n}\r\n```","```\r\npublic void localVariableMultithreading() {\r\n    boolean run = true;\r\n    executor.execute(() -> {\r\n        while (run) {\r\n            // do operation\r\n        }\r\n    });\r\n\r\n    run = false;\r\n}\r\n```","```\r\nprivate int start = 0;\r\n\r\nSupplier<Integer> incrementer() {\r\n    return () -> start++;\r\n}\r\n```","```\r\nprivate volatile boolean run = true;\r\n\r\npublic void instanceVariableMultithreading() {\r\n    executor.execute(() -> {\r\n        while (run) {\r\n            // do operation\r\n        }\r\n    });\r\n\r\n    run = false;\r\n}\r\n```","```\r\npublic int workaroundSingleThread() {\r\n    int[] holder = new int[] { 2 };\r\n    IntStream sums = IntStream\r\n      .of(1, 2, 3)\r\n      .map(val -> val + holder[0]);\r\n\r\n    holder[0] = 0;\r\n\r\n    return sums.sum();\r\n}\r\n```","```\r\npublic void workaroundMultithreading() {\r\n    int[] holder = new int[] { 2 };\r\n    Runnable runnable = () -> System.out.println(IntStream\r\n      .of(1, 2, 3)\r\n      .map(val -> val + holder[0])\r\n      .sum());\r\n\r\n    new Thread(runnable).start();\r\n\r\n    // simulating some processing\r\n    try {\r\n        Thread.sleep(new Random().nextInt(3) * 1000L);\r\n    } catch (InterruptedException e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n\r\n    holder[0] = 0;\r\n}\r\n```"]