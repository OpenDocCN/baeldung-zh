["```\r\nWebClient\r\n  .builder()\r\n  .build()\r\n  .post()\r\n  .uri(\"/some-resource\")\r\n  .retrieve()\r\n  .onStatus(\r\n    HttpStatus.INTERNAL_SERVER_ERROR::equals,\r\n    response -> response.bodyToMono(String.class).map(Exception::new))\r\n```","```\r\nMono<String> response = WebClient\r\n  .builder()\r\n  .build()\r\n  .post()\r\n  .uri(\"some-resource\")\r\n  .retrieve()\r\n  .onStatus( \r\n    HttpStatus.INTERNAL_SERVER_ERROR::equals,\r\n    response -> response.bodyToMono(String.class).map(CustomServerErrorException::new)) \r\n  .onStatus(\r\n    HttpStatus.BAD_REQUEST::equals,\r\n    response -> response.bodyToMono(String.class).map(CustomBadRequestException::new))\r\n  ... \r\n  .bodyToMono(String.class);\r\n\r\n// do something with response\r\n```","```\r\nprivate static Mono<ClientResponse> exchangeFilterResponseProcessor(ClientResponse response) {\r\n    HttpStatus status = response.statusCode();\r\n    if (HttpStatus.INTERNAL_SERVER_ERROR.equals(status)) {\r\n        return response.bodyToMono(String.class)\r\n          .flatMap(body -> Mono.error(new CustomServerErrorException(body)));\r\n    }\r\n    if (HttpStatus.BAD_REQUEST.equals(status)) {\r\n        return response.bodyToMono(String.class)\r\n          .flatMap(body -> Mono.error(new CustomBadRequestException(body)));\r\n    }\r\n    return Mono.just(response);\r\n}\r\n```","```\r\nExchangeFilterFunction errorResponseFilter = ExchangeFilterFunction\r\n  .ofResponseProcessor(WebClientStatusCodeHandler::exchangeFilterResponseProcessor);\r\n```","```\r\nMono<String> response = WebClient\r\n  .builder()\r\n  .filter(errorResponseFilter)\r\n  .build()\r\n  .post()\r\n  .uri(\"some-resource\")\r\n  .retrieve()\r\n  .bodyToMono(String.class);\r\n\r\n// do something with response\r\n```"]